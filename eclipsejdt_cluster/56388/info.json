{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8beb2efa5f9c2f5201adb388104d567d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14d53b6df581ce8d6ecff87daff2d643", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "eb1a68336fb3532a394ee8efeeada286d7b55c17", "commitAfterChange": "709a7ffdab3a47190685515954dea357e978ebb9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean checkAnnotations()", "signatureAfterChange": " \tprivate boolean checkAnnotations()", "diff": ["-\t\tif (null == am3) {", "+\t\tif (_testFailingCases && null == am3) {", "-\t\t\t\tif (null == am4) {", "+\t\t\t\tif (_testFailingCases && null == am4) {", "-\t\t\t\tif (null == am5) {", "+\t\t\t\tif (_testFailingCases && null == am5) {", "-\t\t\t\tif (null == am8) {", "+\t\t\t\tif (_testFailingCases && null == am8) {", "+\t\t\telse if (\"s1\".equals(name)) {", "+\t\t\t\tAnnotationMirror am = findAnnotation(element, \"Anno1\");", "+\t\t\t\tif (null == am) {", "+\t\t\t\t\treportError(\"Couldn't find annotation Anno on field Negative1.s1\");", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = am.getElementValues();", "+\t\t\t\tfor (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "+\t\t\t\t\tif (\"value\".equals(entry.getKey().getSimpleName().toString())) {", "+\t\t\t\t\t\tif (!\"spud\".equals(entry.getValue().getValue())) {", "+\t\t\t\t\t\t\treportError(\"Unexpected value for Anno1 on Negative1.s1: \" + entry.getValue().getValue());", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "612e17606d9e0872c49a9cb35d9e4a8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "db77467719df6aeaa20c37834dfc19f40472f458", "commitAfterChange": "1a085f6923332d813470a8d5ddda1ced463837b2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate boolean examineOverrides()", "signatureAfterChange": " \tprivate boolean examineOverrides()", "diff": ["+\t\t// D extends (C extends A implements B).  X is unrelated.", "+\t\tTypeElement typeX = _elementUtils.getTypeElement(\"targets.model.pc.F\");", "+\t\tExecutableElement methodXF = null;", "+\t\tfor (ExecutableElement method : ElementFilter.methodsIn(typeX.getEnclosedElements())) {", "+\t\t\tString name = method.getSimpleName().toString();", "+\t\t\tif (\"f\".equals(name)) {", "+\t\t\t\tmethodXF = method;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "-\t\t\t\tnull == methodDF || null == methodDG || null == methodDJ) {", "-\t\t\treportError(\"examineOverrides: could not find some methods in targets.model.pc.Overrides\");", "+\t\t\t\tnull == methodDF || null == methodDG || null == methodDJ ||", "+\t\t\t\tnull == methodXF) {", "+\t\t\treportError(\"examineOverrides: could not find some methods\");", "-\t\tif (_elementUtils.overrides(methodDJ, methodAJ, typeC)) {", "-// javac implementation fails this test", "-//\t\t\treportError(\"examineOverrides: D.j() should not override A.j() in the context of C\");", "-//\t\t\treturn false;", "+\t\tif (_elementUtils.overrides(methodXF, methodAF, typeD)) {", "+\t\t\treportError(\"examineOverrides: unrelated X.f() should not override A.f() in the context of D\");", "+\t\t\treturn false;", "-\t\tif (_elementUtils.overrides(methodDF, methodAF, typeC)) {", "-// javac implementation fails this test", "-//\t\t\treportError(\"examineOverrides: D.f() should not override A.f() in the context of C\");", "-//\t\t\treturn false;", "+\t\tif (_elementUtils.overrides(methodXF, methodBF, typeX)) {", "+\t\t\treportError(\"examineOverrides: X.f() should not override unrelated B.f() in the context of X\");", "+\t\t\treturn false;", "-\t\tif (_elementUtils.overrides(methodDF, methodBF, typeC)) {", "-// javac implementation fails this test", "-//\t\t\treportError(\"examineOverrides: D.f() should not override B.f() in the context of C\");", "-//\t\t\treturn false;", "+\t\t", "+\t\t// These cases seem like they should return false, but javac returns true:", "+\t\tif (!_elementUtils.overrides(methodDJ, methodAJ, typeC)) {", "+\t\t\treportError(\"examineOverrides: to match javac, D.j() should override A.j() in the context of C\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!_elementUtils.overrides(methodDF, methodAF, typeC)) {", "+\t\t\treportError(\"examineOverrides: to match javac, D.f() should override A.f() in the context of C\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!_elementUtils.overrides(methodDF, methodBF, typeC)) {", "+\t\t\treportError(\"examineOverrides: to match javac, D.f() should override B.f() in the context of C\");", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd83abaeaaa844447b8243b1cad8d528", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "63332515d07582eba4f5498d0bab26ce5646d103", "commitAfterChange": "9eacf221f3c2e0ebf1c2ce20d0a8cd74ff4bb60a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["+\t\t\t", "+\t\t\t// Check Elements.getElementValuesWithDefaults()", "+\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> defaults = ", "+\t\t\t\t_elementUtils.getElementValuesWithDefaults(annotD);", "+\t\t\tif (null == defaults) {", "+\t\t\t\treportError(\"Element.getElementValuesWithDefaults(annotD) returned null\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tfor (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : defaults.entrySet()) {", "+\t\t\t\tString methodName = entry.getKey().getSimpleName().toString();", "+\t\t\t\tif (\"annoZString\".equals(methodName)) {", "+\t\t\t\t\tfoundStringMethod = true;", "+\t\t\t\t\tObject value = entry.getValue().getValue();", "+\t\t\t\t\tif (!\"annoZOnD\".equals(value)) {", "+\t\t\t\t\t\treportError(\"Explicit value of AnnoZ.annoZString is not \\\"annoZOnD\\\"\");", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\telse if (\"annoZint\".equals(methodName)) {", "+\t\t\t\t\tfoundStringMethod = true;", "+\t\t\t\t\t// TODO: this doesn't work because we are not getting default values resolved.", "+/*\t\t\t\t\tObject value = entry.getValue().getValue();", "+\t\t\t\t\tif (null == value || !value.equals(17)) {", "+\t\t\t\t\t\treportError(\"Default value of AnnoZ.annoZint() is not 17\");", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+*/\t\t\t\t}", "+\t\t\t}"]}], "num": 56388}
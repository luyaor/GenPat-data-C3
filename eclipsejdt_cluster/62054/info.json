{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9f10041f91edca81254b047cecc4998", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44b1a9d676873d356f4842ecf23b4e58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\tbuffer.append(this.getDeclaringClass().getKey());", "+\t\t\tbuffer.append(getDeclaringClass().getKey());", "-\t\t\tITypeBinding _returnType = getReturnType();", "-\t\t\tif (_returnType != null) {", "-\t\t\t\tif (_returnType.isTypeVariable()) {", "-\t\t\t\t\tbuffer.append(_returnType.getQualifiedName());", "-\t\t\t\t} else if (_returnType.isArray() && _returnType.getElementType().isTypeVariable()) {", "-\t\t\t\t\tint dimensions = _returnType.getDimensions();", "-\t\t\t\t\tbuffer.append(_returnType.getElementType().getQualifiedName());", "-\t\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "-\t\t\t\t\t\tbuffer.append('[').append(']');", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(_returnType.getKey());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t\tbuffer.append(this.getName());", "+\t\t\t\tbuffer.append(getName());", "+\t\t\t\t\t\tbuffer.append(',');", "-\t\t\tITypeBinding[] thrownExceptions = getExceptionTypes();", "-\t\t\tfor (int i = 0, max = thrownExceptions.length; i < max; i++) {", "-\t\t\t\tfinal ITypeBinding thrownException = thrownExceptions[i];", "-\t\t\t\tif (thrownException != null) {", "-\t\t\t\t\tif (thrownException.isTypeVariable()) {", "-\t\t\t\t\t\tbuffer.append(thrownException.getQualifiedName());\t\t\t\t\t", "-\t\t\t\t\t} else if (thrownException.isArray() && thrownException.getElementType().isTypeVariable()) {", "-\t\t\t\t\t\tint dimensions = thrownException.getDimensions();", "-\t\t\t\t\t\tbuffer.append(thrownException.getElementType().getQualifiedName());", "-\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "-\t\t\t\t\t\t\tbuffer.append('[').append(']');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tbuffer.append(thrownException.getKey());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a40929e0779dddd52c91c48c8b9ede41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "507dcedd3a1fdac6fc22c9b1a4a0ec9c8798fdc1", "commitAfterChange": "d150c95a398a3e8cb83192b0abf48f6fefa4a7a3", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  \tpublic Javadoc convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc)", "signatureAfterChange": "  \tpublic Javadoc convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc)", "diff": ["-\t\t\t\t\t\tTagElement tagElement = (TagElement) tags.next();", "-\t\t\t\t\t\tIterator fragments = tagElement.fragments().listIterator();", "-\t\t\t\t\t\twhile (fragments.hasNext()) {", "-\t\t\t\t\t\t\tASTNode node = (ASTNode) fragments.next();", "-\t\t\t\t\t\t\tif (node.getNodeType() == ASTNode.MEMBER_REF) {", "-\t\t\t\t\t\t\t\tint start = node.getStartPosition();", "-\t\t\t\t\t\t\t\tName name = ((MemberRef)node).getName();", "-\t\t\t\t\t\t\t\tif (name != null) start = name.getStartPosition();", "-\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(start);", "-\t\t\t\t\t\t\t\tif (compilerNode != null) {", "-\t\t\t\t\t\t\t\t\trecordNodes(node, compilerNode);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (node.getNodeType() == ASTNode.METHOD_REF) {", "-\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(node.getStartPosition());", "-\t\t\t\t\t\t\t\tif (compilerNode != null) {", "-\t\t\t\t\t\t\t\t\trecordNodes(node, compilerNode);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (node.getNodeType() == ASTNode.TAG_ELEMENT) {", "-\t\t\t\t\t\t\t\t// resolve member and method references binding", "-\t\t\t\t\t\t\t\tTagElement inlineTag = (TagElement) node;", "-\t\t\t\t\t\t\t\tIterator inlineFragments = inlineTag.fragments().listIterator();", "-\t\t\t\t\t\t\t\twhile (inlineFragments.hasNext()) {", "-\t\t\t\t\t\t\t\t\tASTNode inlineNode = (ASTNode) inlineFragments.next();", "-\t\t\t\t\t\t\t\t\tif (inlineNode.getNodeType() == ASTNode.MEMBER_REF || inlineNode.getNodeType() == ASTNode.METHOD_REF) {", "-\t\t\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(inlineNode.getStartPosition());", "-\t\t\t\t\t\t\t\t\t\tif (compilerNode != null) {", "-\t\t\t\t\t\t\t\t\t\t\trecordNodes(inlineNode, compilerNode);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\trecordNodes(javadoc, (TagElement) tags.next());"]}], "num": 62054}
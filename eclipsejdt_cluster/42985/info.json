{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e03ffa4f5b30e86a36887a645b34742", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50817150fdb9ad1b9a3036e81c73aefa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "signatureAfterChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "diff": ["-\t\t\t\t\t\t\t\t\t\tentry.getImportRestriction());", "+\t\t\t\t\t\t\t\t\t\tentry.getAccessRuleSet());", "-\t\t\t\t\t\tAccessRestriction restriction = JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, true))", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: entry.getImportRestriction();", "-\t\t\t\t\t\tbLocation = ClasspathLocation.forLibrary((IFile) resource, restriction);", "+\t\t\t\t\t\tAccessRuleSet accessRuleSet = ", "+\t\t\t\t\t\t\t(JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, true))", "+\t\t\t\t\t\t\t&& JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE, true)))", "+\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t: entry.getAccessRuleSet();", "+\t\t\t\t\t\tbLocation = ClasspathLocation.forLibrary((IFile) resource, accessRuleSet);", "-\t\t\t\t\t\tAccessRestriction restriction = JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, true))", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: entry.getImportRestriction();", "-\t\t\t\t\t\tbLocation = ClasspathLocation.forBinaryFolder((IContainer) target, false, restriction);\t // is library folder not output folder", "+\t\t\t\t\t\tAccessRuleSet accessRuleSet = ", "+\t\t\t\t\t\t\t(JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, true))", "+\t\t\t\t\t\t\t&& JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE, true)))", "+\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t: entry.getAccessRuleSet();", "+\t\t\t\t\t\tbLocation = ClasspathLocation.forBinaryFolder((IContainer) target, false, accessRuleSet);\t // is library folder not output folder", "-\t\t\t\t\tAccessRestriction restriction = JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, true))", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: entry.getImportRestriction();", "-\t\t\t\t\tbLocations.add(ClasspathLocation.forLibrary(path.toString(), restriction));", "+\t\t\t\t\tAccessRuleSet accessRuleSet = ", "+\t\t\t\t\t\t(JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, true))", "+\t\t\t\t\t\t\t&& JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE, true)))", "+\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t: entry.getAccessRuleSet();", "+\t\t\t\t\tbLocations.add(ClasspathLocation.forLibrary(path.toString(), accessRuleSet));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9a9cb3fac655e3c46fc26d9896d86a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "signatureAfterChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "diff": ["-\tAccessRestriction importRestriction = javaProject.getProjectImportRestriction();", "-\t\t\t\t\t\t\t\t\t\tjavaProject.getProjectDependencyRestriction(prereqJavaProject));", "+\t\t\t\t\t\t\t\t\t\tentry.getImportRestriction());", "-\t\t\t\t\t\tbLocation = ClasspathLocation.forLibrary((IFile) resource, importRestriction);", "+\t\t\t\t\t\tAccessRestriction restriction = JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, true))", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: entry.getImportRestriction();", "+\t\t\t\t\t\tbLocation = ClasspathLocation.forLibrary((IFile) resource, restriction);", "-\t\t\t\t\t\tbLocation = ClasspathLocation.forBinaryFolder((IContainer) target, false, importRestriction);\t // is library folder not output folder", "+\t\t\t\t\t\tAccessRestriction restriction = JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, true))", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: entry.getImportRestriction();", "+\t\t\t\t\t\tbLocation = ClasspathLocation.forBinaryFolder((IContainer) target, false, restriction);\t // is library folder not output folder", "-\t\t\t\t\tbLocations.add(ClasspathLocation.forLibrary(path.toString(), importRestriction));", "+\t\t\t\t\tAccessRestriction restriction = JavaCore.IGNORE.equals(javaProject.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, true))", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: entry.getImportRestriction();", "+\t\t\t\t\tbLocations.add(ClasspathLocation.forLibrary(path.toString(), restriction));"]}], "num": 42985}
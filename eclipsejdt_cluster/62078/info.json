{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc29cfca70c94418dd9c98b378f82927", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef8b74c66da137a08b6a3318e041e08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "82ebc709013252385fce65c14aa676e8e0d39c6f", "commitAfterChange": "e2360e075300bd271e5e3fd90537b7dce7bdaa00", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "signatureAfterChange": "\r \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "diff": ["-\t\t\t\t\tIClasspathEntry[] containerEntries = javaProject.getResolvedClasspathContainer(path);\r", "-\t\t\t\t\tif (containerEntries == null){\r", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundContainerPath\", path.toString())); //$NON-NLS-1$\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tfor (int i = 0, length = containerEntries.length; i < length; i++){\r", "-\t\t\t\t\t\tIJavaModelStatus containerEntryStatus = validateClasspathEntry(javaProject, containerEntries[i], checkSourceAttachment);\r", "-\t\t\t\t\t\tif (!containerEntryStatus.isOK()){\r", "-\t\t\t\t\t\t\treturn containerEntryStatus;\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tIClasspathEntry[] containerEntries = javaProject.getResolvedClasspathContainer(path);\r", "+\t\t\t\t\t\tif (containerEntries == null){\r", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundContainerPath\", path.toString())); //$NON-NLS-1$\r", "+\t\t\t\t\t\tfor (int i = 0, length = containerEntries.length; i < length; i++){\r", "+\t\t\t\t\t\t\tIJavaModelStatus containerEntryStatus = validateClasspathEntry(javaProject, containerEntries[i], checkSourceAttachment);\r", "+\t\t\t\t\t\t\tif (!containerEntryStatus.isOK()){\r", "+\t\t\t\t\t\t\t\treturn containerEntryStatus;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} catch(JavaModelException e){\r", "+\t\t\t\t\t\treturn new JavaModelStatus(e);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48103515f7000a262d53564d2cfaf548", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "82ebc709013252385fce65c14aa676e8e0d39c6f", "commitAfterChange": "e2360e075300bd271e5e3fd90537b7dce7bdaa00", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \r \tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath)", "signatureAfterChange": "\r \r \tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath) throws JavaModelException", "diff": ["-\tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath){\r", "+\tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath) throws JavaModelException {\r", "-\t\t\t\tentries = resolver.resolve(containerPath, this);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tentries = resolver.resolve(containerPath, this);\r", "+\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\tthrow new JavaModelException(e);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb8f00f4837c72b08c2826ced4baae2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "82ebc709013252385fce65c14aa676e8e0d39c6f", "commitAfterChange": "e2360e075300bd271e5e3fd90537b7dce7bdaa00", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "signatureAfterChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "diff": ["-\t\t\t\tIClasspathEntry[] containerEntries = javaProject.getResolvedClasspathContainer(rawEntry.getPath());\r", "-\t\t\t\tif (containerEntries != null){\r", "-\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "-\t\t\t\t\t\t resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "-\t\t\t\t\t\tif (resolvedEntry != null){\r", "-\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\t\t\t\t\t\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\t\t\t\t\t\t\tif (resolvedEntry.getPath().equals(outputLocation)) allowNestingInOutput = true;\r", "-\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tIClasspathEntry[] containerEntries = javaProject.getResolvedClasspathContainer(rawEntry.getPath());\r", "+\t\t\t\t\tif (containerEntries != null){\r", "+\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "+\t\t\t\t\t\t\t resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "+\t\t\t\t\t\t\tif (resolvedEntry != null){\r", "+\t\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\t\t\t\t\t\t\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\t\t\t\t\t\t\t\tif (resolvedEntry.getPath().equals(outputLocation)) allowNestingInOutput = true;\r", "+\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t} catch(JavaModelException e){\r", "+\t\t\t\t\treturn new JavaModelStatus(e);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0a2de90c0a97448b41d59d20d671e30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "9cb52b05121064f23c74729fac5abd38c26f5de2", "commitAfterChange": "9aae753915305bc73b3495a0d8f3877d2a37296a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tpublic IJavaElement createImportHandle(ImportReference importRef)", "signatureAfterChange": "\r \tpublic IJavaElement createImportHandle(ImportReference importRef)", "diff": ["-\t\t\treturn currentOpenable;\r", "+\t\t\ttry {\r", "+\t\t\t\treturn ((org.eclipse.jdt.internal.core.ClassFile)currentOpenable).getType();\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r"]}], "num": 62078}
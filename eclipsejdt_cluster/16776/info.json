{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8192c6e8b57b3601ec3082766c3bb378", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03eaa5bd7baea256d4ab647904821790", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "a97ed0a9f7f3cb4210b1fefc6b15a23f1b377044", "commitAfterChange": "392fe1925e6e34041c0a038441760cebd6b1a531", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\tif (paramCount != 0) {", "-\t\tString javadoc = null;", "-\t\ttry {", "-\t\t\tjavadoc = this.getAttachedJavadoc(null, \"UTF-8\"); //$NON-NLS-1$", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\tif (javadoc != null) {", "-\t\t\tfinal int indexOfOpenParen = javadoc.indexOf('(');", "-\t\t\tif (indexOfOpenParen != -1) {", "-\t\t\t\tfinal int indexOfClosingParen = javadoc.indexOf(')', indexOfOpenParen);", "-\t\t\t\tif (indexOfClosingParen != -1) {", "-\t\t\t\t\tfinal char[] paramsSource =", "-\t\t\t\t\t\tCharOperation.replace(", "-\t\t\t\t\t\t\tjavadoc.substring(indexOfOpenParen + 1, indexOfClosingParen).toCharArray(),", "-\t\t\t\t\t\t\t\"&nbsp;\".toCharArray(), //$NON-NLS-1$", "-\t\t\t\t\t\t\tnew char[] {' '});", "-\t\t\t\t\tfinal char[][] params = CharOperation.splitOn(',', paramsSource);", "-\t\t\t\t\tfinal int paramsLength = params.length;", "-\t\t\t\t\tthis.parameterNames = new String[paramsLength];", "-\t\t\t\t\tfor (int i = 0; i < paramsLength; i++) {", "-\t\t\t\t\t\tfinal char[] param = params[i];", "-\t\t\t\t\t\tint indexOfSpace = CharOperation.lastIndexOf(' ', param);", "-\t\t\t\t\t\tif (indexOfSpace != -1) {", "-\t\t\t\t\t\t\tthis.parameterNames[i] = String.valueOf(param, indexOfSpace + 1, param.length - indexOfSpace -1);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.parameterNames[i] = \"arg\" + i; //$NON-NLS-1$", "+\t// disable for now See https://bugs.eclipse.org/bugs/show_bug.cgi?id=117740", "+\tif (false) {", "+\t\tif (paramCount != 0) {", "+\t\t\tString javadoc = null;", "+\t\t\ttry {", "+\t\t\t\tjavadoc = this.getAttachedJavadoc(null, \"UTF-8\"); //$NON-NLS-1$", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t\tif (javadoc != null) {", "+\t\t\t\tfinal int indexOfOpenParen = javadoc.indexOf('(');", "+\t\t\t\tif (indexOfOpenParen != -1) {", "+\t\t\t\t\tfinal int indexOfClosingParen = javadoc.indexOf(')', indexOfOpenParen);", "+\t\t\t\t\tif (indexOfClosingParen != -1) {", "+\t\t\t\t\t\tfinal char[] paramsSource =", "+\t\t\t\t\t\t\tCharOperation.replace(", "+\t\t\t\t\t\t\t\tjavadoc.substring(indexOfOpenParen + 1, indexOfClosingParen).toCharArray(),", "+\t\t\t\t\t\t\t\t\"&nbsp;\".toCharArray(), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tnew char[] {' '});", "+\t\t\t\t\t\tfinal char[][] params = CharOperation.splitOn(',', paramsSource);", "+\t\t\t\t\t\tfinal int paramsLength = params.length;", "+\t\t\t\t\t\tthis.parameterNames = new String[paramsLength];", "+\t\t\t\t\t\tfor (int i = 0; i < paramsLength; i++) {", "+\t\t\t\t\t\t\tfinal char[] param = params[i];", "+\t\t\t\t\t\t\tint indexOfSpace = CharOperation.lastIndexOf(' ', param);", "+\t\t\t\t\t\t\tif (indexOfSpace != -1) {", "+\t\t\t\t\t\t\t\tthis.parameterNames[i] = String.valueOf(param, indexOfSpace + 1, param.length - indexOfSpace -1);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.parameterNames[i] = \"arg\" + i; //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn this.parameterNames;", "-\t\t\t\t\treturn this.parameterNames;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fecdd53c82e0d295c2529489c6b1387a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompletionRequestorWrapper.java", "commitBeforeChange": "878f08dad1f9ed612c08dc268f873052b3b20f81", "commitAfterChange": "5f50bdefde0681c0b86dd1a08511c9f401fa4088", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void acceptError(IProblem error)", "signatureAfterChange": " public void acceptError(IProblem error)", "diff": ["-\tthis.clientRequestor.acceptError(error);", "+\t//\tTODO: This code is not activate because UI are not ready to support correctly this behavior (bug 31764).", "+\tif(false) {", "+\t\tthis.clientRequestor.acceptError(error);", "+\t}"]}], "num": 16776}
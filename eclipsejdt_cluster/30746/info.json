{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1551e05631753cb5828c9d9fc965ae46", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4483cfa8c59f445ed8b825aade55063d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\t\t\t\tif (!areMethodsEqual(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "+\t\t\t\t\tif (!doesMethodOverride(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "-\t\t\t\t\t\t\tif (!areMethodsEqual(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "+\t\t\t\t\t\t\tif (!doesMethodOverride(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbc3f371d18e26e0a14e98e53212a3e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "3c97a12fe797bc8f1a4e22eb2cfe11932a52f122", "commitAfterChange": "cb3bfb0879489be8fed32e037d62f37c21d37c6b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\t\tfor (int m = 0, n = methods.length; m < n; m++)", "-\t\t\t\tif (currentMethod.parameters.length == methods[m].parameters.length)", "-\t\t\t\t\tif (!doesMethodOverride(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "-\t\t\t\t\t\treturn;", "+\t\t\tfor (int m = 0, n = methods.length; m < n; m++) {", "+\t\t\t\tMethodBinding substitute = computeSubstituteMethod(methods[m], currentMethod);", "+\t\t\t\tif (substitute != null && !doesSubstituteMethodOverride(currentMethod, substitute) && detectNameClash(currentMethod, substitute))", "+\t\t\t\t\treturn;", "+\t\t\t}", "-\t\t\t\t\tfor (int m = 0, n = methods.length; m < n; m++)", "-\t\t\t\t\t\tif (currentMethod.parameters.length == methods[m].parameters.length)", "-\t\t\t\t\t\t\tif (!doesMethodOverride(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "-\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\tfor (int m = 0, n = methods.length; m < n; m++){", "+\t\t\t\t\t\tMethodBinding substitute = computeSubstituteMethod(methods[m], currentMethod);", "+\t\t\t\t\t\tif (substitute != null && !doesSubstituteMethodOverride(currentMethod, substitute) && detectNameClash(currentMethod, substitute))", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t}"]}], "num": 30746}
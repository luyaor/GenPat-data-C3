{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f439c65fffc5d801d0868e19d2edc54", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04a678662a9f4fdb8f344856b8dbad59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic boolean match(IfStatement node, Object other)", "signatureAfterChange": " \tpublic boolean match(EnumDeclaration node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(EnumDeclaration node, Object other) {", "+\t\tif (!(other instanceof EnumDeclaration)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tEnumDeclaration o = (EnumDeclaration) other;", "+\t\treturn (", "+\t\t\tsafeSubtreeMatch(node.getJavadoc(), o.getJavadoc())", "+\t\t\t\t&& safeSubtreeListMatch(node.modifiers(), o.modifiers())", "+\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName())", "+\t\t\t\t&& safeSubtreeListMatch(node.superInterfaceTypes(), o.superInterfaceTypes())", "+\t\t\t\t&& safeSubtreeListMatch(", "+\t\t\t\t\tnode.bodyDeclarations(),", "+\t\t\t\t\to.bodyDeclarations()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8610e63f1353f2a3737712b9178da1cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean match(ArrayAccess node, Object other)", "signatureAfterChange": " \tpublic boolean match(AnnotationTypeMemberDeclaration node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(AnnotationTypeMemberDeclaration node, Object other) {", "+\t\tif (!(other instanceof AnnotationTypeMemberDeclaration)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tAnnotationTypeMemberDeclaration o = (AnnotationTypeMemberDeclaration) other;", "+\t\t// node type added in 3.0 - ignore old 2.0-style modifiers", "+\t\treturn (safeSubtreeMatch(node.getJavadoc(), o.getJavadoc())", "+\t\t\t\t&& safeSubtreeListMatch(node.modifiers(), o.modifiers())", "+\t\t\t\t&& safeSubtreeMatch(node.getType(), o.getType())", "+\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName())", "+\t\t\t\t&& safeSubtreeMatch(node.getDefault(), o.getDefault()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8379a881c1b02ba4ce92c20b9793da7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "dfcfcaedc8372b070ca684decc611420969812d4", "commitAfterChange": "9bef32a39642c351ad08557498e432fc6a29aeb4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void finalizeProblems()", "signatureAfterChange": "  \tpublic void finalizeProblems()", "diff": ["-\t\t\t\t\t\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\t\t\t\t\t\t\tif (irritant != 0 && (foundIrritants[iSuppress] & irritant) == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\tlong tokenIrritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\t\t\t\t\t\t\tif (tokenIrritants != 0 ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& ~tokenIrritants != 0 // no complaint against @SuppressWarnings(\"all\")", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& options.getSeverity(tokenIrritants) != ProblemSeverities.Ignore // if irritant is effectevely enabled", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& (foundIrritants[iSuppress] & tokenIrritants) == 0) { // if irritant had no matching problem", "-\t\t\t\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\t\t\t\t\tif (irritant != 0 && (foundIrritants[iSuppress] & irritant) == 0) {", "+\t\t\t\t\t\t\t\t\t\tlong tokenIrritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\t\t\t\t\tif (tokenIrritants != 0 ", "+\t\t\t\t\t\t\t\t\t\t\t\t&& ~tokenIrritants != 0 // no complaint against @SuppressWarnings(\"all\")", "+\t\t\t\t\t\t\t\t\t\t\t\t&& options.getSeverity(tokenIrritants) != ProblemSeverities.Ignore // if irritant is effectevely enabled", "+\t\t\t\t\t\t\t\t\t\t\t\t&& (foundIrritants[iSuppress] & tokenIrritants) == 0) { // if irritant had no matching problem"]}], "num": 37639}
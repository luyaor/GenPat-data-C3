{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edf6e33263141a2d71067fd9123b1511", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "448fff14fa41dc31e83013cae658dd91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "cbbc77bad29ab0935f23d7976e8f3a83a2098569", "commitAfterChange": "218bf9e76765a0b6d9236837b12cba562b6c4513", "methodNumberBeforeChange": 261, "methodNumberAfterChange": 261, "signatureBeforeChange": " public void test114()", "signatureAfterChange": " public void test114()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-    \tMap options = this.getCompilerOptions();", "-    \toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "-    \tthis.runNegativeTest(", "-    \t\tnew String[] {", "-    \t\t\t\"X.java\",", "-    \t\t\t\"class Y {\\n\" + ", "-    \t\t\t\"  void foo() {}\\n\" + ", "-    \t\t\t\"}\\n\" + ", "-    \t\t\t\"public class X extends Y {\\n\" + ", "-    \t\t\t\"  @Override\\n\" +", "-    \t\t\t\"  void foo() {\\n\" + ", "-    \t\t\t\"  }\\n\" + ", "-    \t\t\t\"}\"", "-    \t\t},", "-    \t\t\"----------\\n\" + ", "-    \t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-    \t\t\"\tvoid foo() {\\n\" + ", "-    \t\t\"\t     ^^^^^\\n\" + ", "-    \t\t\"The method X.foo() is overriding a method without making a super invocation\\n\" + ", "-    \t\t\"----------\\n\",", "-    \t\tnull,", "-    \t\ttrue,", "-    \t\toptions", "-    \t);", "-\t}", "+\tMap options = this.getCompilerOptions();", "+\toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"class Y {\\n\" + ", "+\t\t\t\"  void foo() {}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\"  @Override\\n\" +", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\"The method X.foo() is overriding a method without making a super invocation\\n\" + ", "+\t\t\"----------\\n\",", "+\t\tnull,", "+\t\ttrue,", "+\t\toptions", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "830d64433cf1b363b8e9ad80535d827d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "cbbc77bad29ab0935f23d7976e8f3a83a2098569", "commitAfterChange": "218bf9e76765a0b6d9236837b12cba562b6c4513", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " public void test104()", "signatureAfterChange": " public void test104()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-\t\tMap options = this.getCompilerOptions();", "-\t\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE);", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\tprivate interface ReturnBase {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\tprivate interface ReturnDerived extends ReturnBase {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\tprivate interface Interface {\\n\" + ", "-\t\t\t\t\"\t\tReturnBase bar();\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\tprivate static class Implementation {\\n\" + ", "-\t\t\t\t\"\t\tpublic final ReturnDerived bar() {\\n\" + ", "-\t\t\t\t\"\t\t\treturn null;\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\tprivate static class Child extends Implementation implements Interface {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\tprivate static class Grandchild extends Child implements Interface {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\tnew Grandchild();\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"\",", "-\t\t\tnull,", "-\t\t\ttrue,", "-\t\t\tnull,", "-\t\t\toptions,", "-\t\t\tnull", "-\t\t);", "-\t\tFile fileX = new File(OUTPUT_DIR + File.separator  +\"X$Child.class\");", "-\t\tIClassFileReader reader = ToolFactory.createDefaultClassFileReader(fileX.getAbsolutePath(), IClassFileReader.ALL_BUT_METHOD_BODIES);", "-\t\tIMethodInfo[] methodInfos = reader.getMethodInfos();", "-\t\tboolean found = false;", "-\t\tfor (int i = 0, max = methodInfos.length; i < max; i++) {", "-\t\t\tif (new String(methodInfos[i].getName()).equals(\"bar\")) {", "-\t\t\t\tfound = true;", "-\t\t\t\tbreak;", "-\t\t\t}", "+\tMap options = this.getCompilerOptions();", "+\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE);", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tprivate interface ReturnBase {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tprivate interface ReturnDerived extends ReturnBase {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tprivate interface Interface {\\n\" + ", "+\t\t\t\"\t\tReturnBase bar();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tprivate static class Implementation {\\n\" + ", "+\t\t\t\"\t\tpublic final ReturnDerived bar() {\\n\" + ", "+\t\t\t\"\t\t\treturn null;\\n\" + ", "+\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tprivate static class Child extends Implementation implements Interface {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tprivate static class Grandchild extends Child implements Interface {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\"\t\tnew Grandchild();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"\",", "+\t\tnull,", "+\t\ttrue,", "+\t\tnull,", "+\t\toptions,", "+\t\tnull", "+\t);", "+\tFile fileX = new File(OUTPUT_DIR + File.separator  +\"X$Child.class\");", "+\tIClassFileReader reader = ToolFactory.createDefaultClassFileReader(fileX.getAbsolutePath(), IClassFileReader.ALL_BUT_METHOD_BODIES);", "+\tIMethodInfo[] methodInfos = reader.getMethodInfos();", "+\tboolean found = false;", "+\tfor (int i = 0, max = methodInfos.length; i < max; i++) {", "+\t\tif (new String(methodInfos[i].getName()).equals(\"bar\")) {", "+\t\t\tfound = true;", "+\t\t\tbreak;", "-\t\tassertTrue(\"bar should be there\", found);", "-\t\t", "-\t\tfileX = new File(OUTPUT_DIR + File.separator  +\"X$Grandchild.class\");", "-\t\treader = ToolFactory.createDefaultClassFileReader(fileX.getAbsolutePath(), IClassFileReader.ALL_BUT_METHOD_BODIES);", "-\t\tmethodInfos = reader.getMethodInfos();", "-\t\tfound = false;", "-\t\tfor (int i = 0, max = methodInfos.length; i < max; i++) {", "-\t\t\tif (new String(methodInfos[i].getName()).equals(\"bar\")) {", "-\t\t\t\tfound = true;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\tassertFalse(\"bar should not be there\", found);\t\t", "+\tassertTrue(\"bar should be there\", found);", "+\t", "+\tfileX = new File(OUTPUT_DIR + File.separator  +\"X$Grandchild.class\");", "+\treader = ToolFactory.createDefaultClassFileReader(fileX.getAbsolutePath(), IClassFileReader.ALL_BUT_METHOD_BODIES);", "+\tmethodInfos = reader.getMethodInfos();", "+\tfound = false;", "+\tfor (int i = 0, max = methodInfos.length; i < max; i++) {", "+\t\tif (new String(methodInfos[i].getName()).equals(\"bar\")) {", "+\t\t\tfound = true;", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\tassertFalse(\"bar should not be there\", found);\t\t"]}], "num": 52955}
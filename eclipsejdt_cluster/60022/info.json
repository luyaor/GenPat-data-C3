{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af8c1d268dfe98929b48d666e109a16e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c97af5bc9be3c55f9882a4d500d1203", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": " \t public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "diff": ["-\tpublic ExceptionHandlingFlowContext(", "+public ExceptionHandlingFlowContext(", "-\t\tsuper(parent, associatedNode);", "-\t\tisMethodContext = scope == scope.methodScope();", "-\t\tthis.handledExceptions = handledExceptions;", "-\t\tint count = handledExceptions.length, cacheSize = (count / BitCacheSize) + 1;", "-\t\tthis.isReached = new int[cacheSize]; // none is reached by default", "-\t\tthis.isNeeded = new int[cacheSize]; // none is needed by default", "-\t\tthis.initsOnExceptions = new UnconditionalFlowInfo[count];", "-\t\tfor (int i = 0; i < count; i++) {", "-\t\t\tthis.indexes.put(handledExceptions[i], i); // key type  -> value index", "-\t\t\tint cacheIndex = i / BitCacheSize, bitMask = 1 << (i % BitCacheSize);", "-\t\t\tif (handledExceptions[i].isUncheckedException(true)) {", "-\t\t\t\tisReached[cacheIndex] |= bitMask;", "-\t\t\t\tthis.initsOnExceptions[i] = flowInfo.unconditionalCopy();", "-\t\t\t} else {", "-\t\t\t\tthis.initsOnExceptions[i] = FlowInfo.DEAD_END;", "-\t\t\t}", "+\tsuper(parent, associatedNode);", "+\tthis.isMethodContext = scope == scope.methodScope();", "+\tthis.handledExceptions = handledExceptions;", "+\tint count = handledExceptions.length, cacheSize = (count / ExceptionHandlingFlowContext.BitCacheSize) + 1;", "+\tthis.isReached = new int[cacheSize]; // none is reached by default", "+\tthis.isNeeded = new int[cacheSize]; // none is needed by default", "+\tthis.initsOnExceptions = new UnconditionalFlowInfo[count];", "+\tfor (int i = 0; i < count; i++) {", "+\t\tthis.indexes.put(handledExceptions[i], i); // key type  -> value index", "+\t\tint cacheIndex = i / ExceptionHandlingFlowContext.BitCacheSize, bitMask = 1 << (i % ExceptionHandlingFlowContext.BitCacheSize);", "+\t\tif (handledExceptions[i].isUncheckedException(true)) {", "+\t\t\tthis.isReached[cacheIndex] |= bitMask;", "+\t\t\tthis.initsOnExceptions[i] = flowInfo.unconditionalCopy();", "+\t\t} else {", "+\t\t\tthis.initsOnExceptions[i] = FlowInfo.DEAD_END;", "-\t\tSystem.arraycopy(this.isReached, 0, this.isNeeded, 0, cacheSize);", "-\t\tthis.initsOnReturn = FlowInfo.DEAD_END;\t", "+\tSystem.arraycopy(this.isReached, 0, this.isNeeded, 0, cacheSize);", "+\tthis.initsOnReturn = FlowInfo.DEAD_END;\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "770992efd360b51ea108fecfd179ca7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "372d175da142eb06ee96f2b4e45c55b51d9b736f", "commitAfterChange": "3fc938efd67d7f1d6ba4971b3e0f4aa8cd107965", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public ExceptionHandlingFlowContext(\r \tFlowContext parent, \r \tAstNode associatedNode, \r \tReferenceBinding[] handledExceptions, \r \tBlockScope scope, \r \tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic ExceptionHandlingFlowContext(\r \t\tFlowContext parent,\r \t\tAstNode associatedNode,\r \t\tReferenceBinding[] handledExceptions,\r \t\tBlockScope scope,\r \t\tUnconditionalFlowInfo flowInfo)", "diff": ["-public ExceptionHandlingFlowContext(\r", "-\tFlowContext parent, \r", "-\tAstNode associatedNode, \r", "-\tReferenceBinding[] handledExceptions, \r", "-\tBlockScope scope, \r", "-\tUnconditionalFlowInfo flowInfo) {\r", "-\tsuper(parent, associatedNode);\r", "-\tisMethodContext = scope == scope.methodScope();\r", "-/*\t\r", "-\t// for a method, append the unchecked exceptions to the handled exceptions collection\r", "+\tpublic ExceptionHandlingFlowContext(\r", "+\t\tFlowContext parent,\r", "+\t\tAstNode associatedNode,\r", "+\t\tReferenceBinding[] handledExceptions,\r", "+\t\tBlockScope scope,\r", "+\t\tUnconditionalFlowInfo flowInfo) {\r", "-\tif (scope.methodScope() == scope) {\r", "-\t\tint length;\r", "-\t\tSystem.arraycopy(\r", "-\t\t\thandledExceptions, \r", "-\t\t\t0, \r", "-\t\t\t(handledExceptions = \r", "-\t\t\t\tnew ReferenceBinding[(length = handledExceptions.length) + 2]), \r", "-\t\t\t0, \r", "-\t\t\tlength); \r", "-\t\thandledExceptions[length] = scope.getJavaLangRuntimeException();\r", "-\t\thandledExceptions[length + 1] = scope.getJavaLangError();\r", "-\t}\r", "-*/\t\r", "-\tthis.handledExceptions = handledExceptions;\r", "-\tint count = handledExceptions.length, cacheSize = (count / BitCacheSize) + 1;\r", "-\tisReached = new int[cacheSize]; // none is reached by default\r", "-\tisNeeded = new int[cacheSize]; // none is needed by default\r", "-\tinitsOnExceptions = new UnconditionalFlowInfo[count];\r", "-\tfor (int i = 0; i < count; i++) {\r", "-\t\tindexes.put(handledExceptions[i], i); // key type  -> value index\r", "-\t\tboolean isUnchecked = \r", "-\t\t\t(scope.compareUncheckedException(handledExceptions[i]) != NotRelated); \r", "-\t\tint cacheIndex = i / BitCacheSize, bitMask = 1 << (i % BitCacheSize);\r", "-\t\tif (isUnchecked) {\r", "-\t\t\tisReached[cacheIndex] |= bitMask;\r", "-\t\t\tinitsOnExceptions[i] = flowInfo.copy().unconditionalInits();\r", "-\t\t} else {\r", "-\t\t\tinitsOnExceptions[i] = FlowInfo.DeadEnd;\r", "-\t\t}\r", "-\t}\r", "-\tSystem.arraycopy(isReached, 0, isNeeded, 0, cacheSize);\r", "-}\r", "+\t\tsuper(parent, associatedNode);\r", "+\t\tisMethodContext = scope == scope.methodScope();\r", "+\t\tthis.handledExceptions = handledExceptions;\r", "+\t\tint count = handledExceptions.length, cacheSize = (count / BitCacheSize) + 1;\r", "+\t\tthis.isReached = new int[cacheSize]; // none is reached by default\r", "+\t\tthis.isNeeded = new int[cacheSize]; // none is needed by default\r", "+\t\tthis.initsOnExceptions = new UnconditionalFlowInfo[count];\r", "+\t\tfor (int i = 0; i < count; i++) {\r", "+\t\t\tthis.indexes.put(handledExceptions[i], i); // key type  -> value index\r", "+\t\t\tboolean isUnchecked =\r", "+\t\t\t\t(scope.compareUncheckedException(handledExceptions[i]) != NotRelated);\r", "+\t\t\tint cacheIndex = i / BitCacheSize, bitMask = 1 << (i % BitCacheSize);\r", "+\t\t\tif (isUnchecked) {\r", "+\t\t\t\tisReached[cacheIndex] |= bitMask;\r", "+\t\t\t\tthis.initsOnExceptions[i] = flowInfo.copy().unconditionalInits();\r", "+\t\t\t\tthis.initsOnExceptions[i] = FlowInfo.DeadEnd;\r", "+\t\tSystem.arraycopy(this.isReached, 0, this.isNeeded, 0, cacheSize);\r"]}], "num": 60022}
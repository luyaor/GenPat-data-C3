{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "118da54d4e05fa6415ce4e5cc39e2a83", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21a47900980de651513531bc5a64da9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 55, "signatureBeforeChange": " public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl)", "signatureAfterChange": " public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl)", "diff": ["-\tString[] arguments = new String[] {new String(methodDecl.selector), new String(type.sourceName())};", "-\tthis.handle(", "-\t\tIProblem.DuplicateMethod,", "-\t\targuments,", "-\t\targuments,", "-\t\tmethodDecl.sourceStart,", "-\t\tmethodDecl.sourceEnd);", "+    MethodBinding method = methodDecl.binding;", "+    boolean duplicateErasure = false;", "+    if ((method.modifiers & CompilerModifiers.AccGenericSignature) != 0) {", "+        // chech it occurs in parameters (the bit is set for return type | params | thrown exceptions", "+        for (int i = 0, length = method.parameters.length; i < length; i++) {", "+            if ((method.parameters[i].tagBits & TagBits.HasTypeVariable) != 0) {", "+                duplicateErasure = true;", "+                break;", "+            }", "+        }", "+    }", "+    if (duplicateErasure) {", "+        int length = method.parameters.length;", "+        TypeBinding[] erasures = new TypeBinding[length];", "+        for (int i = 0; i < length; i++)  {", "+            erasures[i] = method.parameters[i].erasure();", "+        }", "+\t\tthis.handle(", "+\t\t\tIProblem.DuplicateMethodErasure,", "+\t\t\tnew String[] {", "+\t\t        new String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.readableName()),", "+\t\t\t\tparametersAsString(method.parameters, false),", "+\t\t\t\tparametersAsString(erasures, false) } ,", "+\t\t\tnew String[] {", "+\t\t\t\tnew String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.shortReadableName()),", "+\t\t\t\tparametersAsString(method.parameters, true),", "+\t\t\t\tparametersAsString(erasures, true) },", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+    } else {", "+\t\tthis.handle(", "+\t\t\tIProblem.DuplicateMethod,", "+\t\t\tnew String[] {", "+\t\t        new String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.readableName()),", "+\t\t\t\tparametersAsString(method.parameters, false)},", "+\t\t\tnew String[] {", "+\t\t\t\tnew String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.shortReadableName()),", "+\t\t\t\tparametersAsString(method.parameters, true)},", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "352ed496236de15d033252a17a4c57e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "commitAfterChange": "28d83829a5c5453c02025fb74750ed1594ff644e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public IType getDeclaringType()", "signatureAfterChange": "\r public IType getDeclaringType()", "diff": ["-\ttry {\r", "-\t\tchar[] enclosingTypeName = ((IBinaryType) getRawInfo()).getEnclosingTypeName();\r", "-\t\tif (enclosingTypeName == null) {\r", "+\tIClassFile classFile = this.getClassFile();\r", "+\tif (classFile.isOpen()) {\r", "+\t\ttry {\r", "+\t\t\tchar[] enclosingTypeName = ((IBinaryType) getRawInfo()).getEnclosingTypeName();\r", "+\t\t\tif (enclosingTypeName == null) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r", "+\t\t \tenclosingTypeName = ClassFile.unqualifiedName(enclosingTypeName);\r", "+\t\t \t\r", "+\t\t\t// workaround problem with class files compiled with javac 1.1.* \r", "+\t\t\t// that return a non-null enclosing type name for local types defined in anonymous (e.g. A$1$B)\r", "+\t\t\tif (classFile.getElementName().length() > enclosingTypeName.length+1 \r", "+\t\t\t\t\t&& Character.isDigit(classFile.getElementName().charAt(enclosingTypeName.length+1))) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t} \r", "+\t\t\t\r", "+\t\t\treturn getPackageFragment().getClassFile(new String(enclosingTypeName) + \".class\").getType(); //$NON-NLS-1$;\r", "+\t\t} catch (JavaModelException npe) {\r", "-\t\tenclosingTypeName = ClassFile.unqualifiedName(enclosingTypeName);\r", "-\t\treturn getPackageFragment().getClassFile(new String(enclosingTypeName) + \".class\").getType(); //$NON-NLS-1$\r", "-\t} catch (JavaModelException npe) {\r", "-\t\treturn null;\r", "+\t} else {\r", "+\t\t// cannot access .class file without opening it \r", "+\t\t// and getDeclaringType() is supposed to be a handle-only method,\r", "+\t\t// so default to assuming $ is an enclosing type separator\r", "+\t\tString classFileName = classFile.getElementName();\r", "+\t\tint lastDollar = -1;\r", "+\t\tfor (int i = 0, length = classFileName.length(); i < length; i++) {", "+\t\t\tchar c = classFileName.charAt(i);\r", "+\t\t\tif (Character.isDigit(c) && lastDollar == i-1) {\r", "+\t\t\t\t// anonymous or local type\r", "+\t\t\t\treturn null;\r", "+\t\t\t} else if (c == '$') {\r", "+\t\t\t\tlastDollar = i;\r", "+\t\t\t}", "+\t\t}\r", "+\t\tif (lastDollar == -1) {\r", "+\t\t\treturn null;\r", "+\t\t} else {\r", "+\t\t\tString enclosingName = classFileName.substring(0, lastDollar);\r", "+\t\t\tString enclosingClassFileName = enclosingName + \".class\"; //$NON-NLS-1$\r", "+\t\t\treturn \r", "+\t\t\t\tnew BinaryType(\r", "+\t\t\t\t\tthis.getPackageFragment().getClassFile(enclosingClassFileName),\r", "+\t\t\t\t\tenclosingName.substring(enclosingName.lastIndexOf('$')+1));\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cda996db5b2ad6e35671dce7abf750c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "474eb5356258f18fd9cfbd1a24f6dbe20ed6eea5", "commitAfterChange": "b0f361db26dd11f4be4974027111b70136b11d5b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void tearDownSuite() throws Exception", "signatureAfterChange": "  \tprivate static int getASTLevelsForTest(String name)", "diff": ["-", "-\tpublic void tearDownSuite() throws Exception {", "-\t\tsuper.tearDownSuite();", "+\tprivate static int getASTLevelsForTest(String name) {", "+\t\tint index = name.indexOf(ONLY_AST_STRING);", "+\t\tint levels = 0;", "+\t\tif (index == -1) {", "+\t\t\tindex = name.indexOf(SINCE_AST_STRING);", "+\t\t\tif (index != -1) {", "+\t\t\t\tString subString = name.substring(index, name.length());", "+\t\t\t\tif (subString.indexOf(STRING_8) != -1) {", "+\t\t\t\t\treturn LEVEL_8;", "+\t\t\t\t} else if (subString.indexOf(STRING_4) != -1) {", "+\t\t\t\t\treturn SINCE_4;", "+\t\t\t\t} else if (subString.indexOf(STRING_3) != -1) {", "+\t\t\t\t\treturn SINCE_3;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn SINCE_2;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tString subString = name.substring(index, name.length());", "+\t\t\tif (subString.indexOf(STRING_2) != -1) {", "+\t\t\t\tlevels |= LEVEL_2;", "+\t\t\t}", "+\t\t\tif (subString.indexOf(STRING_3) != -1) {", "+\t\t\t\tlevels |= LEVEL_3;", "+\t\t\t}", "+\t\t\tif (subString.indexOf(STRING_4) != -1) {", "+\t\t\t\tlevels |= LEVEL_4;", "+\t\t\t}", "+\t\t\tif (subString.indexOf(STRING_8) != -1) {", "+\t\t\t\tlevels |= LEVEL_8;", "+\t\t\t}", "+\t\t\treturn levels;", "+\t\t}", "+\t\treturn SINCE_2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be53a70cd6e2eeb35300bc0bc834d07a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected char[] indexEntryPrefix()", "signatureAfterChange": " public char[] encodeIndexKey()", "diff": ["-protected char[] indexEntryPrefix() {", "-\tchar[] packageName = this.isCaseSensitive ? pkg : null;", "+ */", "+public char[] encodeIndexKey() {", "+\tchar[] packageName = isCaseSensitive() ? pkg : null;", "-\t\t\tif (packageName == null) return CLASS_DECL;", "+\t\t\tif (packageName == null) ", "+\t\t\t\treturn new char[] {CLASS_SUFFIX, SEPARATOR};", "-\t\t\tif (packageName == null) return INTERFACE_DECL;", "+\t\t\tif (packageName == null) ", "+\t\t\t\treturn new char[] {INTERFACE_SUFFIX, SEPARATOR};", "-\t\t\treturn TYPE_DECL; // cannot do better given encoding", "+\t\t\treturn CharOperation.NO_CHAR; // cannot do better given encoding", "-\tchar[] typeName = this.isCaseSensitive ? simpleName : null;", "-\tif (typeName != null && this.matchMode == PATTERN_MATCH) {", "+\tchar[] typeName = isCaseSensitive() ? this.simpleName : null;", "+\tif (typeName != null && matchMode() == PATTERN_MATCH) {", "-\tint typeLength = typeName == null ? 0 : typeName.length;", "-\tint pos = TYPE_DECL_LENGTH;", "-\tchar[] result = new char[pos + packageLength + typeLength + 3];", "-\tSystem.arraycopy(TYPE_DECL, 0, result, 0, pos);", "-\tresult[pos++] = classOrInterface;", "+\tint enclosingTypeNamesLength = 0;", "+\tif (this.enclosingTypeNames != null)", "+\t\tfor (int i = 0, length = this.enclosingTypeNames.length; i < length; i++)", "+\t\t\tenclosingTypeNamesLength += this.enclosingTypeNames[i].length + 1;", "+\tint pos = 0;", "+\tint typeNameLength = typeName == null ? 0 : typeName.length;", "+\tint resultLength = pos + packageLength + typeNameLength + enclosingTypeNamesLength + 4;", "+\tchar[] result = new char[resultLength];", "+\tresult[pos++] = this.classOrInterface;", "-\tSystem.arraycopy(packageName, 0, result, pos, packageLength);", "-\tpos += packageLength;", "+\tif (packageLength > 0) {", "+\t\tSystem.arraycopy(packageName, 0, result, pos, packageLength);", "+\t\tpos += packageLength;", "+\t}", "-\tif (typeLength > 0)", "-\t\tSystem.arraycopy(typeName, 0, result, pos, typeName.length);", "+\tif (typeName != null) {", "+\t\tSystem.arraycopy(typeName, 0, result, pos, typeNameLength);", "+\t\tpos += typeNameLength;", "+", "+\t\tresult[pos++] = SEPARATOR;", "+\t\tif (enclosingTypeNames != null) {", "+\t\t\tfor (int i = 0, length = this.enclosingTypeNames.length; i < length; i++) {", "+\t\t\t\tint enclosingTypeNameLength = this.enclosingTypeNames[i].length;", "+\t\t\t\tSystem.arraycopy(this.enclosingTypeNames[i], 0, result, pos, enclosingTypeNameLength);", "+\t\t\t\tpos += enclosingTypeNameLength;", "+\t\t\t\tresult[pos++] = SEPARATOR;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (pos != resultLength) {", "+\t\tSystem.arraycopy(result, 0, result = new char[pos], 0, pos);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9d9062c647a0807e1e93dde37ea1eeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic StringBuffer print(int indent, StringBuffer output)", "signatureAfterChange": " \tpublic StringBuffer print(int indent, StringBuffer output)", "diff": ["+\t\tprintIndent(indent, output).append(\"/**\\n\"); //$NON-NLS-1$", "+\t\tif (this.parameters != null) {", "+\t\t\tfor (int i = 0, length = this.parameters.length; i < length; i++) {", "+\t\t\t\tprintIndent(indent+1, output).append(\" * @param \"); //$NON-NLS-1$\t\t", "+\t\t\t\tthis.parameters[i].print(indent, output).append('\\n');", "+\t\t\t}", "+\t\t}", "+\t\tif (this.thrownExceptions != null) {", "+\t\t\tfor (int i = 0, length = this.thrownExceptions.length; i < length; i++) {", "+\t\t\t\tprintIndent(indent+1, output).append(\" * @throws \"); //$NON-NLS-1$\t\t", "+\t\t\t\tthis.thrownExceptions[i].print(indent, output).append('\\n');", "+\t\t\t}", "+\t\t}", "+\t\tif (this.references != null) {", "+\t\t\tfor (int i = 0, length = this.references.length; i < length; i++) {", "+\t\t\t\tprintIndent(indent+1, output).append(\" * @see\"); //$NON-NLS-1$\t\t", "+\t\t\t\tthis.references[i].print(indent, output).append('\\n');", "+\t\t\t}", "+\t\t}", "+\t\tprintIndent(indent, output).append(\" */\\n\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbadda35fd57886257a47a5b025b0d3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DefaultBytecodeVisitor.java", "commitBeforeChange": "f711a2e15fc3de73f79ccc61d2dafcbdd0d9f0f1", "commitAfterChange": "e823242f8d03d0ef2504eab819b418e785f092ee", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate String getLocalVariableName(int pc, int index, boolean showIndex)", "signatureAfterChange": "  \tprivate String getLocalVariableName(int pc, int index, boolean showIndex)", "diff": ["-        int nextPC = pc + 1;", "-        switch(index) {", "-            case 0 :", "-            case 1 :", "-            case 2 :", "-            case 3 :", "-                break;", "-            default :", "-                nextPC = index <= 255 ? pc + 2 : pc + 3;", "-        }", "+\t\tint nextPC = pc + 1;", "+\t\tswitch(index) {", "+\t\t\tcase 0 :", "+\t\t\tcase 1 :", "+\t\t\tcase 2 :", "+\t\t\tcase 3 :", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tnextPC = index <= 255 ? pc + 2 : pc + 3;", "+\t\t}", "-        for (int i = 0, max = this.localVariableAttributeLength; i < max; i++) {", "-            final ILocalVariableTableEntry entry = this.localVariableTableEntries[i];", "-            final int startPC = entry.getStartPC();", "-            if (entry.getIndex() == index && (startPC <= nextPC) && ((startPC + entry.getLength()) > nextPC)) {", "-            \tfinal StringBuffer stringBuffer = new StringBuffer();", "-            \tif (showIndex) {", "-            \t\tstringBuffer.append(' ').append(index);", "-            \t}", "-            \tstringBuffer.append(' ').append('[').append(entry.getName()).append(']');", "-            \treturn String.valueOf(stringBuffer);", "-            }", "-        }", "-    \tif (showIndex) {", "-        \tfinal StringBuffer stringBuffer = new StringBuffer();", "-        \tstringBuffer.append(' ').append(index);", "-         \treturn String.valueOf(stringBuffer);", "-    \t}", "-        return EMPTY_LOCAL_NAME;", "+\t\tfor (int i = 0, max = this.localVariableAttributeLength; i < max; i++) {", "+\t\t\tfinal ILocalVariableTableEntry entry = this.localVariableTableEntries[i];", "+\t\t\tfinal int startPC = entry.getStartPC();", "+\t\t\tif (entry.getIndex() == index && (startPC <= nextPC) && ((startPC + entry.getLength()) > nextPC)) {", "+\t\t\t\tfinal StringBuffer stringBuffer = new StringBuffer();", "+\t\t\t\tif (showIndex) {", "+\t\t\t\t\tstringBuffer.append(' ').append(index);", "+\t\t\t\t}", "+\t\t\t\tstringBuffer.append(' ').append('[').append(entry.getName()).append(']');", "+\t\t\t\treturn String.valueOf(stringBuffer);", "+\t\t\t}", "+\t\t}", "+\t\tif (this.parameterNames != null) {", "+\t\t\tif (index == 0) {", "+\t\t\t\tif (!this.isStatic) {", "+\t\t\t\t\tfinal StringBuffer stringBuffer = new StringBuffer();", "+\t\t\t\t\tstringBuffer.append(' ').append('[').append(\"this\").append(']'); //$NON-NLS-1$", "+\t\t\t\t\treturn String.valueOf(stringBuffer);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint indexInParameterNames = index;", "+\t\t\tif (index != 0) {", "+\t\t\t\tint resolvedPosition = 0;", "+\t\t\t\tif (!this.isStatic) {", "+\t\t\t\t\tresolvedPosition = 1;", "+\t\t\t\t}", "+\t\t\t\tint i = 0;", "+\t\t\t\tloop: for (int max = this.argumentSizes.length; i < max; i++) {", "+\t\t\t\t\tif (index == resolvedPosition) {", "+\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t}", "+\t\t\t\t\tresolvedPosition += this.argumentSizes[i];", "+\t\t\t\t}", "+\t\t\t\tindexInParameterNames = i;", "+\t\t\t}", "+\t\t\tif (indexInParameterNames < this.parameterNames.length", "+\t\t\t\t\t&& this.parameterNames[indexInParameterNames] != null) {", "+\t\t\t\tfinal StringBuffer stringBuffer = new StringBuffer();", "+\t\t\t\tif (showIndex) {", "+\t\t\t\t\tstringBuffer.append(' ').append(index);", "+\t\t\t\t}", "+\t\t\t\tstringBuffer.append(' ').append('[').append(this.parameterNames[indexInParameterNames]).append(']');", "+\t\t\t\treturn String.valueOf(stringBuffer);", "+\t\t\t}", "+\t\t}", "+\t\tif (showIndex) {", "+\t\t\tfinal StringBuffer stringBuffer = new StringBuffer();", "+\t\t\tstringBuffer.append(' ').append(index);", "+\t\t\treturn String.valueOf(stringBuffer);", "+\t\t}", "+\t\treturn EMPTY_LOCAL_NAME;"]}], "num": 1547}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb781aa802a47617d6922d9ebff14913", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12ee40cc8f873e0e3ea79d7bd6e13439", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "33cf2c285ddb9d801a508bfb1e7446c0a204b2e0", "commitAfterChange": "74a2e94cebab14bcc7fbeac54bdb9333b5128dbe", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\treturn buildTestSuite(evaluationTestClass, \"test\", suiteName); //$NON-NLS-1$", "-\t}", "+\t\tList tests = buildTestsList(evaluationTestClass);", "+\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "+\t\t\tsuite.addTest((Test)tests.get(index));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a3f50895f847a03469077a18e1bef9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "2452619bb5034f0a0ba9b6e9747cd6db77b2eb53", "commitAfterChange": "8d4f2ebabb0e50507cab6ea5f17acab787cfb10b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic static Test buildTestSuiteUniqueCompliance(Class evaluationTestClass, String uniqueCompliance)", "signatureAfterChange": " \tpublic static Test buildComplianceRegressionSetupSuite(Class evaluationTestClass, String uniqueCompliance)", "diff": ["+\t */", "+\tpublic static Test buildComplianceRegressionSetupSuite(Class evaluationTestClass, String uniqueCompliance) {", "+\t\tString highestLevel = highestComplianceLevels();", "+\t\tif (highestLevel.compareTo(uniqueCompliance) < 0) {", "+\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+highestLevel+\"!\");", "+\t\t\treturn new TestSuite();", "+\t\t}", "+\t\tTestSuite complianceSuite = new TestSuite(uniqueCompliance);", "+\t\t\tcomplianceSuite.addTest((Test)tests.get(index));", "+\t\tTestSuite suite = new TestSuite(evaluationTestClass.getName());", "+\t\tsuite.addTest(new RegressionTestSetup(complianceSuite, uniqueCompliance));", "+\t\treturn suite;", "-\tpublic static Test buildTestSuiteUniqueCompliance(Class evaluationTestClass, String uniqueCompliance) {", "-\t\t\tString highestLevel = highestComplianceLevels();", "-\t\t\tif (highestLevel.compareTo(uniqueCompliance) < 0) {", "-\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+highestLevel+\"!\");", "-\t\t\t\treturn new TestSuite();", "-\t\t\tTestSuite suite = new TestSuite(evaluationTestClass.getName());", "-\t\t\tsuite.addTest(buildTestSuite(evaluationTestClass, uniqueCompliance));", "-\t\t\treturn suite;", "-\t}"]}], "num": 3673}
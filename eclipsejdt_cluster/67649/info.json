{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abbb3a2db6cdb16f574bb90584668345", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61281c26c6ca31713975d81959fae4c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  protected void resolveAnnotations(Scope scope)", "signatureAfterChange": "  protected void resolveAnnotations(Scope scope)", "diff": ["-\t\t\tlong tagBits = 0;", "-\t\t\tlong[] tagBitsPerDimension = null;", "-\t\t\tboolean evalNullAnnotations = scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled;", "-\t\t\tboolean isArrayReference = dimensions > 0;", "-\t\t\t\tint annotationsLevels = this.annotations.length;", "-\t\t\t\tfor (int i = 0; i < annotationsLevels; i++) {", "-\t\t\t\t\tAnnotation[] currentAnnotations = this.annotations[i];", "-\t\t\t\t\tif (currentAnnotations != null) {", "-\t\t\t\t\t\tresolveAnnotations(resolutionScope, currentAnnotations, new Annotation.TypeUseBinding(isWildcard() ? Binding.TYPE_PARAMETER : Binding.TYPE_USE));", "-\t\t\t\t\t\tif (evalNullAnnotations) {", "-\t\t\t\t\t\t\tint len = currentAnnotations.length;", "-\t\t\t\t\t\t\tfor (int j=0; j<len; j++) {", "-\t\t\t\t\t\t\t\tBinding recipient = currentAnnotations[j].recipient;", "-\t\t\t\t\t\t\t\tif (recipient instanceof Annotation.TypeUseBinding) {", "-\t\t\t\t\t\t\t\t\tlong nullTagBits = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\t\tif (nullTagBits != 0) {", "-\t\t\t\t\t\t\t\t\t\tif (isArrayReference) {", "-\t\t\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "-\t\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1]; // each dimension plus leaf component type at last position", "-\t\t\t\t\t\t\t\t\t\t\t// @NonNull Foo [][][] means the leaf component type is @NonNull:", "-\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension[dimensions] = nullTagBits;", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\ttagBits |= nullTagBits;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tTypeBinding leafComponentType = this.resolvedType.leafComponentType();", "+\t\t\t\tleafComponentType = resolveAnnotations(resolutionScope, this.annotations, leafComponentType);", "+\t\t\t\tthis.resolvedType = dimensions > 0 ? scope.environment().createArrayType(leafComponentType, dimensions) : leafComponentType;", "-", "-\t\t\t\tfor (int i = 0, length = annotationsOnDimensions.length; i < length; i++) {", "-\t\t\t\t\tAnnotation [] dimensionAnnotations = annotationsOnDimensions[i];", "-\t\t\t\t\tif (dimensionAnnotations  != null) {", "-\t\t\t\t\t\tresolveAnnotations(resolutionScope, dimensionAnnotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));", "-\t\t\t\t\t\tif (evalNullAnnotations && isArrayReference) {", "-\t\t\t\t\t\t\tint len = dimensionAnnotations.length;", "-\t\t\t\t\t\t\tfor (int j=0; j<len; j++) {", "-\t\t\t\t\t\t\t\tBinding recipient = dimensionAnnotations[j].recipient;", "-\t\t\t\t\t\t\t\tif (recipient instanceof Annotation.TypeUseBinding) {", "-\t\t\t\t\t\t\t\t\tlong nullTagBits = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\t\tif (nullTagBits != 0) {", "-\t\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "-\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1];", "-\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension[i] = nullTagBits;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.resolvedType != null && this.resolvedType.isValidBinding()) {", "-\t\t\t\tif (isArrayReference) {", "-\t\t\t\t\tif (tagBitsPerDimension != null) {", "-\t\t\t\t\t\t// TODO(stephan): wouldn't it be more efficient to store the array bindings inside the type binding rather than the environment?", "-\t\t\t\t\t\t// cf. LocalTypeBinding.createArrayType()", "-\t\t\t\t\t\tthis.resolvedType = scope.environment().createArrayType(this.resolvedType.leafComponentType(), dimensions, tagBitsPerDimension);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tif (tagBits != 0) {", "-\t\t\t\t\t\tif (!this.resolvedType.isBaseType()) {", "-\t\t\t\t\t\t\tthis.resolvedType = scope.environment().createAnnotatedType(this.resolvedType, tagBits);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// TODO(stephan) report null annotation on non-reference type", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tthis.resolvedType = resolveAnnotations(resolutionScope, annotationsOnDimensions, this.resolvedType);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8210171fa8672467b4d6692597f13b92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "68db0a50107f072688f40bcdb70cc1c2cadc3119", "commitAfterChange": "7c0be3631ccaa5ae2d50fbe318ed50c01164d856", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations)", "signatureAfterChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations)", "diff": ["-\t\t\t\t\t\tif (Annotation.isTypeUseCompatible(local.declaration.type, scope)) { // discard hybrid annotations on package qualified types.", "+\t\t\t\t\t\tTypeReference typeRef = local.declaration.type;", "+\t\t\t\t\t\tif (Annotation.isTypeUseCompatible(typeRef, scope)) { // discard hybrid annotations on package qualified types.", "-\t\t\t\t\t\t\tfinal TypeBinding localType = local.type;", "-\t\t\t\t\t\t\tlong prevNullBits = localType.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\tif (se8nullBits != 0 && prevNullBits != se8nullBits && ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK)) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tTypeBinding oldLeafType = localType.leafComponentType();", "-\t\t\t\t\t\t\tAnnotationBinding [][] goodies = new AnnotationBinding[local.declaration.type.getAnnotatableLevels()][];", "-\t\t\t\t\t\t\tgoodies[0] = se8Annotations;  // @T X.Y.Z local; ==> @T should annotate X", "-\t\t\t\t\t\t\tTypeBinding newLeafType = scope.environment().createAnnotatedType(oldLeafType, goodies);", "-\t\t\t\t\t\t\tlocal.type = localType.isArrayType() ? scope.environment().createArrayType(newLeafType, localType.dimensions(), localType.getTypeAnnotations()) : newLeafType;", "+\t\t\t\t\t\t\tlocal.type = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, typeRef, local.type);", "-\t\t\t\t\t\t\tTypeBinding fieldType = field.type;", "-\t\t\t\t\t\t\tlong prevNullBits = fieldType.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\tif (se8nullBits != 0 && prevNullBits != se8nullBits && ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK)) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tTypeBinding oldLeafType = fieldType.leafComponentType();", "-\t\t\t\t\t\t\tAnnotationBinding [][] goodies = new AnnotationBinding[fieldDeclaration.type.getAnnotatableLevels()][];", "-\t\t\t\t\t\t\tgoodies[0] = se8Annotations; // @T X.Y.Z field; ==> @T should annotate X", "-\t\t\t\t\t\t\tTypeBinding newLeafType = scope.environment().createAnnotatedType(oldLeafType, goodies);", "-\t\t\t\t\t\t\tfield.type = fieldType.isArrayType() ? scope.environment().createArrayType(newLeafType, fieldType.dimensions(), fieldType.getTypeAnnotations()) : newLeafType;", "+\t\t\t\t\t\t\tfield.type = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, fieldDeclaration.type, field.type);", "-\t\t\t\t\t\t\t\tfinal TypeBinding returnType = method.returnType;", "-\t\t\t\t\t\t\t\tlong prevNullBits = returnType.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\tif (se8nullBits != 0 && prevNullBits != se8nullBits && ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tTypeBinding oldLeafType = returnType.leafComponentType();", "-\t\t\t\t\t\t\t\tAnnotationBinding [][] goodies = new AnnotationBinding[methodDecl.returnType.getAnnotatableLevels()][];", "-\t\t\t\t\t\t\t\tgoodies[0] = se8Annotations;", "-\t\t\t\t\t\t\t\tTypeBinding newLeafType = scope.environment().createAnnotatedType(oldLeafType, goodies);", "-\t\t\t\t\t\t\t\tmethod.returnType = returnType.isArrayType() ? scope.environment().createArrayType(newLeafType, returnType.dimensions(), returnType.getTypeAnnotations()) : newLeafType;", "+\t\t\t\t\t\t\t\tmethod.returnType = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, methodDecl.returnType, method.returnType);"]}], "num": 67649}
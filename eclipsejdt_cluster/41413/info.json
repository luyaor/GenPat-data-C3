{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55e1027dcdada369a5fb9ae29286ca52", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "522f6f82b113eb13a0f5e57565300967", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tthis.blockCommentBuffer.setLength(0);", "-\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\tif (this.blockCommentTokensBuffer.length() > 0) {", "-\t\t\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\t\t\tprintBlockCommentHeaderLine(this.blockCommentBuffer);", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\t\tthis.column += this.blockCommentTokensBuffer.length();", "+\t\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(' ');", "-\t\t\t\t\t\tif (tokensBuffer.length() > 0) {", "-\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\t\tif (this.blockCommentTokensBuffer.length() > 0) {", "+\t\t\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\t\t\tthis.column += this.blockCommentTokensBuffer.length();", "-\t\t\t\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t    \tthis.blockCommentBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t    \tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t    \tprintIndentationIfNecessary(this.blockCommentBuffer);", "-\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(' ');", "-\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\tif (this.blockCommentTokensBuffer.length() > 0) {", "-\t\t\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\t\t\tprintBlockCommentHeaderLine(this.blockCommentBuffer);", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t    \tthis.blockCommentBuffer.append(this.lineSeparator);", "-\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t    \tprintIndentationIfNecessary(this.blockCommentBuffer);", "+\t\t    \t\tthis.blockCommentBuffer.append(BLOCK_LINE_PREFIX);", "-    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+    \t\tint lastColumn = this.column + this.blockCommentTokensBuffer.length() + tokenLength;", "-\t\t    \tString tokensString = tokensBuffer.toString().trim();", "+\t\t    \tString tokensString = this.blockCommentTokensBuffer.toString().trim();", "-\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\tprintBlockCommentHeaderLine(this.blockCommentBuffer);", "-\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\tthis.column += this.blockCommentTokensBuffer.length();", "+\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t    \tthis.blockCommentBuffer.append(this.lineSeparator);", "-\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t    \tprintIndentationIfNecessary(this.blockCommentBuffer);", "+\t\t    \t\tthis.blockCommentBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t    \tif (tokensBuffer.length() > 0) {", "-\t\t\t\t\tbuffer.append(tokensString);", "+\t\t    \tif (this.blockCommentTokensBuffer.length() > 0) {", "+\t\t\t\t\tthis.blockCommentBuffer.append(tokensString);", "-\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t\tbuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\tthis.blockCommentBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\t\t\ttokensBuffer.append(' ');", "+\t\t\t\t\tthis.blockCommentTokensBuffer.append(' ');", "-\t\t\t\ttokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\tthis.blockCommentTokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\t\tStringBuffer replacement = new StringBuffer();", "+\t\t\t\tStringBuffer replacement;", "+\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "+\t\t\t\t\treplacement = this.blockCommentTokensBuffer;", "-\t\t\t\t\t} else if (buffer.length()==0 || buffer.charAt(0)!=' ') {", "+\t\t\t\t\t} else if (this.blockCommentBuffer.length()==0 || this.blockCommentBuffer.charAt(0)!=' ') {", "+\t\t\t\t\treplacement.append(this.blockCommentBuffer);", "+\t\t\t\t} else {", "+\t\t\t\t\treplacement = this.blockCommentBuffer;", "-\t\t\t\treplacement.append(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e6fcee96f1985d07fd4652b1c14a9f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\tthis.javadocTokensBuffer.setLength(0);", "-\t    \t\tint tokensBufferLength = tokensBuffer.length();", "+\t    \t\tint tokensBufferLength = this.javadocTokensBuffer.length();", "-\t\t\t\tString tokensBufferString = tokensBuffer.toString().trim();", "+\t\t\t\tString tokensBufferString = this.javadocTokensBuffer.toString().trim();", "-\t\t\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "-\t\t\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t    \tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t\t    \t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t\t\t\tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t\t\t\t\tthis.tempBuffer.append(this.commentIndentation);", "-\t\t\t\t\t\t    \t\tnewLineString = newLineBuffer.toString();", "+\t\t\t\t\t\t    \t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\t\t\tbuffer.append(this.javadocTokensBuffer);", "-\t\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\t\tthis.javadocTokensBuffer.setLength(0);", "-\t\t\t\t\t&& token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || tokensBuffer.charAt(tokensBufferLength-1) != '@'); // avoid to split just before a '@'", "+\t\t\t\t\t&& token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || this.javadocTokensBuffer.charAt(tokensBufferLength-1) != '@'); // avoid to split just before a '@'", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tbuffer.append(this.javadocTokensBuffer);", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tthis.javadocTokensBuffer.setLength(0);", "-\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "-\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "-\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t    \tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t    \t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t\tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t\t\tthis.tempBuffer.append(this.commentIndentation);", "-\t\t\t\t    \t\tnewLineString = newLineBuffer.toString();", "+\t\t\t\t    \t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tthis.javadocTokensBuffer.setLength(0);", "-\t\t    \t\t\ttokensBuffer.append(' ');", "+\t\t    \t\t\tthis.javadocTokensBuffer.append(' ');", "-\t\t\t\t\ttokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\t\tthis.javadocTokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\tif (tokensBuffer.length() > 0) {", "-\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\tif (this.javadocTokensBuffer.length() > 0) {", "+\t\t\t\tbuffer.append(this.javadocTokensBuffer);", "+\t\t\t\tthis.column += this.javadocTokensBuffer.length();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9d195dd5368a6ef357ad1eab3d52897", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tprivate void printCodeSnippet(int startPosition, int endPosition, int linesGap)", "signatureAfterChange": " \tprivate void printCodeSnippet(int startPosition, int endPosition, int linesGap)", "diff": ["-\t\tStringBuffer inputBuffer= new StringBuffer();", "+\t\tthis.codeSnippetBuffer.setLength(0);", "-\t\t\tinputBuffer.append(snippet);", "+\t\t\tthis.codeSnippetBuffer.append(snippet);", "-\t\t\t\tinputBuffer.append(this.scanner.source, startPosition, this.lineEnds[firstLine]+1-startPosition);", "+\t\t\t\tthis.codeSnippetBuffer.append(this.scanner.source, startPosition, this.lineEnds[firstLine]+1-startPosition);", "-\t\t\tint initialLength = inputBuffer.length();", "+\t\t\tint initialLength = this.codeSnippetBuffer.length();", "-\t\t\t\t\t\t\t\t\t\tinputBuffer.setLength(initialLength);", "+\t\t\t\t\t\t\t\t\t\tthis.codeSnippetBuffer.setLength(initialLength);", "-\t\t\t\tinputBuffer.append(this.scanner.source, lineStart, end+1-lineStart);", "+\t\t\t\tthis.codeSnippetBuffer.append(this.scanner.source, lineStart, end+1-lineStart);", "-\t\tHTMLEntity2JavaReader reader= new HTMLEntity2JavaReader(new StringReader(inputBuffer.toString()));", "-\t\tchar[] buf= new char[inputBuffer.length()]; // html2text never gets longer, only shorter!", "+\t\tHTMLEntity2JavaReader reader= new HTMLEntity2JavaReader(new StringReader(this.codeSnippetBuffer.toString()));", "+\t\tchar[] buf= new char[this.codeSnippetBuffer.length()]; // html2text never gets longer, only shorter!", "-\t\t\tformattedSnippet = inputBuffer.toString();", "+\t\t\tformattedSnippet = this.codeSnippetBuffer.toString();", "-\t\t\tStringBuffer conversionBuffer= new StringBuffer();", "+\t\t\tthis.codeSnippetBuffer.setLength(0);", "-\t\t\t\t\t\tconversionBuffer.append(buf, 0, l);", "+\t\t\t\t\t\tthis.codeSnippetBuffer.append(buf, 0, l);", "-\t\t\t\tformattedSnippet = conversionBuffer.toString();", "+\t\t\t\tformattedSnippet = this.codeSnippetBuffer.toString();", "-\t\tStringBuffer outputBuffer = new StringBuffer();", "+\t\tthis.codeSnippetBuffer.setLength(0);", "-\t\tprintIndentationIfNecessary(outputBuffer); // append indentation", "-\t\toutputBuffer.append(BLOCK_LINE_PREFIX);", "-\t\tString linePrefix = outputBuffer.toString();", "-\t\toutputBuffer.setLength(0);", "+\t\tprintIndentationIfNecessary(this.codeSnippetBuffer); // append indentation", "+\t\tthis.codeSnippetBuffer.append(BLOCK_LINE_PREFIX);", "+\t\tString linePrefix = this.codeSnippetBuffer.toString();", "+\t\tthis.codeSnippetBuffer.setLength(0);", "-\t\t\t\tif (i>0) outputBuffer.append(linePrefix);", "+\t\t\t\tif (i>0) this.codeSnippetBuffer.append(linePrefix);", "-\t\t\t\t\toutputBuffer.append(formattedSnippet.substring(tracker.getLineOffset(i), lastLineOffset));", "+\t\t\t\t\tthis.codeSnippetBuffer.append(formattedSnippet.substring(tracker.getLineOffset(i), lastLineOffset));", "-\t\t\toutputBuffer.append(linePrefix);", "-\t\t\toutputBuffer.append(formattedSnippet.substring(lastLineOffset));", "-\t\t\treplacement = outputBuffer.toString();", "+\t\t\tthis.codeSnippetBuffer.append(linePrefix);", "+\t\t\tthis.codeSnippetBuffer.append(formattedSnippet.substring(lastLineOffset));", "+\t\t\treplacement = this.codeSnippetBuffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d079cfa9b678638226a87e69c492e5fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tprivate void printJavadocBlockReference(FormatJavadocBlock block, FormatJavadocReference reference)", "signatureAfterChange": "  \tprivate void printJavadocBlockReference(FormatJavadocBlock block, FormatJavadocReference reference)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tthis.javadocBlockRefBuffer.setLength(0);", "-\t\t\t\t\t\t\t\tspacePosition = buffer.length();", "+\t\t\t\t\t\t\t\tspacePosition = this.javadocBlockRefBuffer.length();", "-\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tthis.javadocBlockRefBuffer.append(' ');", "-\t\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "-\t\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t    \tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t    \t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t    \tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t\t    \tthis.tempBuffer.append(this.commentIndentation);", "-\t\t\t\t\t\t    \tnewLineString = newLineBuffer.substring(0, newLineBuffer.length()-1); // remove last space as buffer will be inserted before a space", "+\t\t\t\t\t\t    \tnewLineString = this.tempBuffer.substring(0, this.tempBuffer.length()-1); // remove last space as buffer will be inserted before a space", "-\t\t\t\t\t\t\tthis.column = firstColumn + buffer.length() - spacePosition - 1;", "-\t\t\t\t\t\t\tbuffer.insert(spacePosition, newLineString);", "+\t\t\t\t\t\t\tthis.column = firstColumn + this.javadocBlockRefBuffer.length() - spacePosition - 1;", "+\t\t\t\t\t\t\tthis.javadocBlockRefBuffer.insert(spacePosition, newLineString);", "-\t\t\t\t\t\tbuffer.append(this.scanner.source, this.scanner.startPosition, tokenLength);", "+\t\t\t\t\t\tthis.javadocBlockRefBuffer.append(this.scanner.source, this.scanner.startPosition, tokenLength);", "-\t\t    addReplaceEdit(block.tagEnd+1, reference.sourceEnd, buffer.toString());", "+\t\t    addReplaceEdit(block.tagEnd+1, reference.sourceEnd, this.javadocBlockRefBuffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39e8b1f667da9d328f7704a9ea0d2d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tprivate void printJavadocGapLines(int textStartPosition, int textEndPosition, int newLines, boolean clearBlankLines, boolean footer, StringBuffer output)", "signatureAfterChange": " \tprivate void printJavadocGapLines(int textStartPosition, int textEndPosition, int newLines, boolean clearBlankLines, boolean footer, StringBuffer output)", "diff": ["-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\taddInsertEdit(textStartPosition, buffer.toString());", "+\t\t\t\t\t\taddInsertEdit(textStartPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\t\t\t\tbuffer.append( ' ');", "+\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append( ' ');", "-\t\t\t\t\t\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, buffer.toString());", "+\t\t\t\t\t\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t\taddReplaceEdit(start, currentTokenStartPosition-1, buffer.toString());", "+\t\t\t\t\t\t\t\taddReplaceEdit(start, currentTokenStartPosition-1, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\tbuffer.append( ' ');", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append( ' ');", "-\t\t\t\t\tprintJavadocNewLine(buffer);", "+\t\t\t\t\tprintJavadocNewLine(this.javadocGapLinesBuffer);", "-\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, buffer.toString());", "+\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\taddInsertEdit(textEndPosition+1, buffer.toString());", "+\t\t\t\t\t\taddInsertEdit(textEndPosition+1, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\t\t\tbuffer.append( ' ');", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, buffer.toString());", "+\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb9b20e0b1dfc03ac282bc72ef1bdfa4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\t\tboolean hasTokens = false;", "+\t\t\tboolean textOnNewLine = needIndentation;", "+\t    \t\tint tokensBufferLength = tokensBuffer.length();", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "-\t\t\t\t\t\thasTokens = true;", "+\t\t\t\t\t\tif (tokensBufferLength > 0) {", "+\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\t\tthis.column += tokensBufferLength;", "+\t\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttextOnNewLine = false;", "-\t    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+\t    \t\tint lastColumn = this.column + tokensBufferLength + tokenLength;", "-\t    \t\t\t\tthis.lastNumberOfNewLines++; // in case we leave just after", "+\t    \t\t\t\tthis.lastNumberOfNewLines++; // the javadoc will become multi lines", "-\t\t\t\tif (lastColumn > maxColumn) {", "+\t\t\t\tif (lastColumn > maxColumn && token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || tokensBuffer.charAt(tokensBufferLength-1) != '@')) {", "-\t\t\t\t\tboolean alreadyHasNewLine = !hasTokens && tokensBuffer.length() > 0 && firstText && !isHtmlTag && this.lastNumberOfNewLines > 0;", "-\t\t\t\t\tif (!alreadyHasNewLine) {", "-\t\t\t\t\t\tif (lastColumn == this.column) {", "+\t\t\t\t\tif (!isHtmlTag && (firstColumn+tokensBufferLength+tokenLength) >= maxColumn) {", "+\t\t\t\t\t\t// there won't be enough room even if we break the line before the buffered tokens", "+\t\t\t\t\t\t// So add the buffered tokens now", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tthis.column += tokensBufferLength;", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\ttokensBufferLength = 0;", "+\t\t\t\t\t\ttextOnNewLine = false;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!textOnNewLine) {", "+\t\t\t\t\t\tif (headerLine && lastColumn == this.column) {", "-\t\t\t    \tif (tokensBuffer.length() > 0) {", "+\t\t\t    \tif (tokensBufferLength > 0) {", "+\t\t\t\t\t\ttokensBufferLength = 0;", "-\t\t\t\t\thasTokens = true;", "+\t\t\t\t\ttextOnNewLine = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda183b4deabbd2bd089118767f831a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "49c7e567a30e3d9cc1c4880ba35031661d2a5415", "commitAfterChange": "c9d2c7d4276b8b0f65a3b8bbfa4009e8632940f9", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\tStringBuffer textBuffer = isHtmlTag ? new StringBuffer() : buffer;", "+\t\tStringBuffer tokensBuffer = new StringBuffer();", "-\t\t\t\tprintIndentationIfNecessary(textBuffer);", "+\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\t\tbuffer.append('\\'');", "-\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\ttokensBuffer.append('\\'');", "-\t\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\t\tbuffer.append('\"');", "-\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\ttokensBuffer.append('\"');", "+\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\ttokensBuffer.setLength(0);", "-\t\t\t\tthis.column += tokenLength;", "-\t    \t\tif (insertSpace) this.column++;", "-\t    \t\tint col = column; ", "+\t    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+\t    \t\tif (insertSpace) lastColumn++;", "-\t    \t\t\tif (col > maxColumn)  {", "-\t    \t\t\t\tcol--; // new line gives an extra character", "+\t    \t\t\tif (lastColumn > maxColumn)  {", "+\t    \t\t\t\tlastColumn--; // new line gives an extra character", "-\t\t\t\tif (col > maxColumn) {", "+\t\t\t\tif (lastColumn > maxColumn) {", "-\t\t\t\t\tif (col == this.column) this.lastNumberOfNewLines++;", "+\t\t\t\t\tif (lastColumn == this.column) this.lastNumberOfNewLines++;", "-\t\t\t\t\tif (isHtmlTag && buffer != textBuffer) {", "-\t\t\t\t\t\tbuffer.append(textBuffer);", "-\t\t\t\t\t\ttextBuffer = buffer;", "-\t\t\t\t\t}", "-\t\t\t\t\ttextBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t    \tif (tokensBuffer.length() > 0) {", "+\t\t\t    \t\tString tokensString = tokensBuffer.toString().trim();", "+\t\t\t\t\t\tbuffer.append(tokensString);", "+\t\t\t\t\t\tthis.column += tokensString.length();", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t    \t}", "+\t\t\t\t\tbuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\t\t\tif (insertSpace)  {", "-\t\t    \t\t\ttextBuffer.append(' ');", "-\t\t\t\t\t}", "-\t\t\t\t\ttextBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t    \t\tif (insertSpace) {", "+\t\t    \t\t\ttokensBuffer.append(' ');", "+\t\t    \t\t}", "+\t\t\t\t\ttokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\tif (isHtmlTag && buffer != textBuffer) {", "-\t\t\t\tbuffer.append(textBuffer);", "+\t\t\t// Add remaining buffered tokens", "+\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\tthis.column += tokensBuffer.length();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd7cdfca03e82dfc3d0c7a1c0bdac87c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "signatureAfterChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "diff": ["-\t\tthis.indentationLevel = getNextIndentationLevel(firstColumn);", "+\t\tthis.indentationLevel = (this.column / this.tabLength) * this.tabLength;", "+\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\tboolean bufferHasTokens = false;", "-\t\t\t\tString msg = iie.getMessage();", "-\t\t\t\tif (msg == Scanner.INVALID_CHARACTER_CONSTANT) {", "-\t\t\t\t\tbuffer.append('\\'');", "-\t\t\t\t} else if (msg == Scanner.INVALID_CHAR_IN_STRING) {", "-\t\t\t\t\tbuffer.append('\"');", "-\t\t\t\t} else {", "-\t\t\t\t\t// skip failure", "-\t\t\t\t}", "-\t\t\t\t// Need to retrieve correct position", "+\t    \t\tif (previousToken == -1 || previousToken == TerminalTokens.TokenNameWHITESPACE) {", "+\t    \t\t\ttokensBuffer.append(' ');", "+\t    \t\t}", "-\t\t\t\tthis.scanner.getNextChar();", "-\t\t\t\tthis.column++;", "+\t    \t\tchar ch = (char) this.scanner.getNextChar();", "+\t\t\t\tpreviousToken = TerminalTokens.TokenNameWHITESPACE;", "+\t\t\t\twhile (!ScannerHelper.isWhitespace(ch)) {", "+\t\t\t\t\ttokensBuffer.append(ch);", "+\t\t\t\t\tif (this.scanner.atEnd()) {", "+\t\t\t\t\t\tpreviousToken = TerminalTokens.TokenNameEOF;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tch = (char) this.scanner.getNextChar();", "+\t\t\t\t}", "+\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tbufferHasTokens = true;", "+\t\t\t\t\t}", "-    \t\tboolean insertSpace = previousToken == TerminalTokens.TokenNameWHITESPACE;", "-\t\t\tthis.column += tokenLength;", "-    \t\tif (previousToken == -1 || insertSpace) this.column++;", "-    \t\tint col = column; ", "-\t\t\tif (!firstWord && col > maxColumn) {", "+    \t\tboolean insertSpace = previousToken == -1 || previousToken == TerminalTokens.TokenNameWHITESPACE;", "+    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+    \t\tif (insertSpace) lastColumn++;", "+\t\t\tif (!firstWord && lastColumn > maxColumn) {", "-\t\t    \tbuffer.append(this.lineSeparator);", "-\t\t    \tthis.column = 1;", "-\t\t    \tprintIndentationIfNecessary(buffer);", "-\t    \t\tbuffer.append(LINE_COMMENT_PREFIX);", "-\t\t    \tthis.column = firstColumn + LINE_COMMENT_PREFIX_LENGTH;", "+\t\t\t\tif ((firstColumn+tokensBuffer.length()+tokenLength) > maxColumn) {", "+\t\t\t\t\t// there won't be enough room even if we break the line before the buffered tokens", "+\t\t\t\t\t// So add the buffered tokens now", "+\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tbufferHasTokens = true;", "+\t\t\t\t}", "+\t\t\t\tif (bufferHasTokens) {", "+\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t    \tthis.column = 1;", "+\t\t\t    \tprintIndentationIfNecessary(buffer);", "+\t    \t\t\tbuffer.append(LINE_COMMENT_PREFIX);", "+\t\t    \t\tthis.column += LINE_COMMENT_PREFIX_LENGTH;", "+\t\t\t\t}", "+\t\t    \tif (tokensBuffer.length() > 0) {", "+\t\t    \t\tif (ScannerHelper.isWhitespace(tokensBuffer.charAt(0))) {", "+\t\t\t\t\t\tbuffer.append(tokensBuffer.substring(1));", "+\t\t\t\t\t\tthis.column += tokensBuffer.length() - 1;", "+\t\t    \t\t} else {", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t    \t\t}", "+\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tif (insertSpace)  {", "+\t\t    \t\t\tbuffer.append(' ');", "+\t\t    \t\t\tthis.column++;", "+\t\t\t\t\t}", "+\t\t    \t}", "+\t\t\t\tbufferHasTokens = true;", "+\t\t\t\tfirstColumn = this.indentationLevel + LINE_COMMENT_PREFIX_LENGTH;", "-\t\t\t\tif (previousToken == -1 || insertSpace)  {", "-\t    \t\t\tbuffer.append(' ');", "+\t\t\t\tif (insertSpace)  {", "+\t    \t\t\ttokensBuffer.append(' ');", "-\t\t\t\tbuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\ttokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t}", "+", "+\t\t// Add remaining buffered tokens", "+\t\tif (tokensBuffer.length() > 0) {", "+\t\t\tbuffer.append(tokensBuffer);", "+\t\t\tthis.column += tokensBuffer.length();"]}], "num": 41413}
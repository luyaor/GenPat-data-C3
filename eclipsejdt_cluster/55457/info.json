{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25f6237a234b8278dbf9e25c8fcd003d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8332189a08e811a1570a076e899d1a08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "c0f9d8b84abc89ce64134386f4c44ab56579df25", "commitAfterChange": "9ba8652d2cebf2117416af5e39a70e172556117b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+\t\t\t\tchar[] exceptionType = Signature.toCharArray(localVariableTableEntry.getDescriptor());", "+\t\t\t\tCharOperation.replace(exceptionType, '/', '.');", "-\t\t\t\t\t.append(Signature.toCharArray(localVariableTableEntry.getDescriptor()));", "+\t\t\t\t\t.append(exceptionType);", "+\t\t\tchar[] exceptionType = Signature.toCharArray(localVariableTableEntry.getDescriptor());", "+\t\t\tCharOperation.replace(exceptionType, '/', '.');", "-\t\t\t\t.append(Signature.toCharArray(localVariableTableEntry.getDescriptor()));", "+\t\t\t\t.append(exceptionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ce235978526a426d337698c4a968908", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b9b175d1f3b3a2cd4a485af26edf7481b654f8d0", "commitAfterChange": "2ee5cab3338235f002d8a433d3e99e7f32c5838e", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "signatureAfterChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "diff": ["-\t\t\t\t\t\tchar[][] parameterTypes = Signature.getParameterTypes(binaryMethod.getMethodDescriptor());", "+\t\t\t\t\t\tchar[] signature = binaryMethod.getGenericSignature();", "+\t\t\t\t\t\tif (signature == null) signature = binaryMethod.getMethodDescriptor();", "+\t\t\t\t\t\tchar[][] parameterTypes = Signature.getParameterTypes(signature);", "-\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(parameterTypeName), typeName))", "+\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), typeName))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b80acdd35fc95b273561806d2ad30b06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/AstNodeFinder.java", "commitBeforeChange": "14f89ca9b18a3480429e3f25bc68dd79b7e9f0db", "commitAfterChange": "eb21ce31e87e64ed6c3b487b0fe31d2556ab8015", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic AbstractMethodDeclaration findMethod(IMethod methodHandle)", "signatureAfterChange": " \tpublic AbstractMethodDeclaration findMethod(IMethod methodHandle)", "diff": ["-\t\t\tString[] parameterTypeNames = methodHandle.getParameterTypes();", "-\t\t\tint parameterCount = parameterTypeNames.length;", "+\t\t\tString[] parameterTypeSignatures = methodHandle.getParameterTypes();", "+\t\t\tint parameterCount = parameterTypeSignatures.length;", "-\t\t\t\t\t\t\tif (!CharOperation.equals(args[j].name, parameterTypeNames[j].toCharArray())) {", "+\t\t\t\t\t\t\tTypeReference type = args[j].type;", "+\t\t\t\t\t\t\tString signature = org.eclipse.jdt.internal.core.Util.typeSignature(type);", "+\t\t\t\t\t\t\tif (!signature.equals(parameterTypeSignatures[j])) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c732e48e8a03e9648e29372c37ce070f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles)", "signatureAfterChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles)", "diff": ["-\t\tString[] pNames= Signature.getParameterTypes(new String(methodInfo.getMethodDescriptor()));", "+\t\tchar[] signature = methodInfo.getGenericSignature();", "+\t\tif (signature == null) signature = methodInfo.getMethodDescriptor();", "+\t\tString[] pNames = null;", "+\t\ttry {", "+\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\t// protect against malformed .class file (e.g. com/sun/crypto/provider/SunJCE_b.class has a 'a' generic signature)", "+\t\t\tsignature = methodInfo.getMethodDescriptor();", "+\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9c5318c0290a3ac7bde5eb9920271d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t */", "-\t\t\t\tchar[] typeSignature = null;", "+\t\t\t\tString typeSignature;", "-\t\t\t\t\tchar[] signature = field.getTypeSignature().toCharArray();", "+\t\t\t\t\ttypeSignature = field.getTypeSignature();", "+\t\t\t\t\tchar[] signature = typeSignature.toCharArray();", "-\t\t\t\t\tif (CharOperation.indexOf(Signature.C_GENERIC_START, signature) >= 0) {", "-\t\t\t\t\t\ttypeSignature = signature;", "+\t\t\t\t\tif (CharOperation.indexOf(Signature.C_GENERIC_START, signature) < 0) {", "+\t\t\t\t\t\ttypeSignature = null;", "-\t\t\t\t\t\t\tsignature == null ? null : signature.toCharArray(),", "+\t\t\t\t\t\t\tsignature,"]}], "num": 55457}
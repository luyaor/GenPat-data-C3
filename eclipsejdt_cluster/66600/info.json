{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51c5df97623117dda88feb8223f27d92", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1de8ff3d01a96a8af79e7779e8e75f8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "1af62c8ac8c29f055bb8404d4de6ad60e868f8c4", "commitAfterChange": "1c68a970a8cbd8bfa2174955d5c78e149d7e6268", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\tAPTResult( Set<IFile> newFiles, Set<IFile> deletedFiles, Set<String> deps )", "signatureAfterChange": " \t\tAPTResult()", "diff": ["-\t\tAPTResult( Set<IFile> newFiles, Set<IFile> deletedFiles, Set<String> deps )", "+\t\t */", "+\t\tAPTResult()", "+\t\t{", "+\t\t\t_newFiles = Collections.emptySet();", "+\t\t\t_deletedFiles = Collections.emptySet();", "+\t\t\t_newDependencies = Collections.emptySet();", "+\t\t\t_newProblems = Collections.emptyMap();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63217c1c4d0099748470d24fc8bd25b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "3e7cf81e60cc58d031ed4122a60846c5260297d0", "commitAfterChange": "4c23c3ad7f7e3db972a09fa55eef5555a90bc2bd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\t\texpectedCollectionType = upperScope.createArrayType(elementType, 1);", "-\t\t\t\tthis.collection.computeConversion(this.scope, expectedCollectionType, collectionType);", "-\t\t\t\t\texpectedCollectionType = null;", "+\t\t\t\t\tthis.collection.computeConversion(this.scope, collectionType, collectionType);", "-\t\t\t\t\texpectedCollectionType = null;", "+\t\t\t\t\tthis.collection.computeConversion(this.scope, collectionType, collectionType);", "+\t\t\t\t} else {", "+\t\t\t\t\texpectedCollectionType = upperScope.createArrayType(elementType, 1);", "+\t\t\t\t\tthis.collection.computeConversion(this.scope, expectedCollectionType, collectionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712c1006a89be0acc5c402e7a3c1f331", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "0d2bb4cd9a920a832985dcd25c76a6d09b85febf", "commitAfterChange": "9580475674d2dc0e975687220941c33b61d1b0ac", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (leftTypeId == T_String", "-\t\t\t\t\t&& rightType.isArrayType()", "-\t\t\t\t\t&& ((ArrayBinding) rightType).elementsType() == CharBinding) {", "-\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(right);", "-\t\t\t\t\t} else if (rightTypeId == T_String", "-\t\t\t\t\t\t\t&& leftType.isArrayType()", "-\t\t\t\t\t\t\t&& ((ArrayBinding) leftType).elementsType() == CharBinding) {", "-\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(left);", "+\t\t\tif (leftTypeId == T_String) {", "+\t\t\t\tthis.left.computeConversion(scope, leftType, leftType);", "+\t\t\t\tif (rightType.isArrayType() && ((ArrayBinding) rightType).elementsType() == CharBinding) {", "+\t\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(right);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (rightTypeId == T_String) {", "+\t\t\t\tthis.right.computeConversion(scope, rightType, rightType);", "+\t\t\t\tif (leftType.isArrayType() && ((ArrayBinding) leftType).elementsType() == CharBinding) {", "+\t\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(left);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1f67beeb3a681202fa5ed6a8d8c400", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "87d4fd7980451e90652820b5860e6399b708ef2c", "commitAfterChange": "913656a5a76e9163d25332c6a9aeee51291ec413", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tScribe(CodeFormatterVisitor formatter, long sourceLevel, IRegion[] regions, CodeSnippetParsingUtil codeSnippetParsingUtil, boolean includeComments)", "signatureAfterChange": "  \tScribe(CodeFormatterVisitor formatter, long sourceLevel, IRegion[] regions, CodeSnippetParsingUtil codeSnippetParsingUtil, boolean includeComments)", "diff": ["+", "-\t\tthis.scanner = new Scanner(true, true, false/*nls*/, sourceLevel/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\tinitializeScanner(sourceLevel, formatter.preferences);", "+\t\tthis.firstLS = this.lineSeparator.charAt(0);", "+\t\tthis.lsLength = this.lineSeparator.length();"]}], "num": 66600}
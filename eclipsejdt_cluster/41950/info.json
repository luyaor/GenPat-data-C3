{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74428ff1c95d3fa1e432c68f1ad7c5bb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ec6d42a6f4d958ceccd2766cc03d7c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "b71d5caba2ea7e73efda022352a4ec92b8290571", "commitAfterChange": "2f424a38cfb7c6ea6ffc3bfeaea4d3dc73842a36", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\t\tTypeBinding[] parameterTypes = methodBinding.original().parameters;", "-\t\t\t\tint length = parameterTypes.length;", "-\t\t\t\tchar[][] parameterPackageNames = new char[length][];", "-\t\t\t\tchar[][] parameterTypeNames = new char[length][];", "-\t\t\t\tString[] parameterSignatures = new String[length];", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tparameterPackageNames[i] = parameterTypes[i].qualifiedPackageName();", "-\t\t\t\t\tparameterTypeNames[i] = parameterTypes[i].qualifiedSourceName();", "-\t\t\t\t\tparameterSignatures[i] = new String(getSignature(parameterTypes[i])).replace('/', '.');", "-\t\t\t\t}", "-\t\t\t\tReferenceBinding declaringClass = methodBinding.declaringClass;", "-\t\t\t\tif (isLocal(declaringClass) && this.requestor instanceof SelectionRequestor) {", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalMethod(methodBinding);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.requestor.acceptMethod(", "-\t\t\t\t\t\tdeclaringClass.qualifiedPackageName(),", "-\t\t\t\t\t\tdeclaringClass.qualifiedSourceName(),", "-\t\t\t\t\t\tdeclaringClass.enclosingType() == null ? null : new String(getSignature(declaringClass.enclosingType())),", "-\t\t\t\t\t\tmethodBinding.isConstructor()", "-\t\t\t\t\t\t\t? declaringClass.sourceName()", "-\t\t\t\t\t\t\t: methodBinding.selector,", "-\t\t\t\t\t\tparameterPackageNames,", "-\t\t\t\t\t\tparameterTypeNames,", "-\t\t\t\t\t\tparameterSignatures,", "-\t\t\t\t\t\tmethodBinding.isConstructor(), ", "-\t\t\t\t\t\tisDeclaration,", "-\t\t\t\t\t\tmethodBinding.computeUniqueKey(),", "-\t\t\t\t\t\tthis.actualSelectionStart,", "-\t\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\tif(!methodBinding.isSynthetic()) {", "+\t\t\t\t\tTypeBinding[] parameterTypes = methodBinding.original().parameters;", "+\t\t\t\t\tint length = parameterTypes.length;", "+\t\t\t\t\tchar[][] parameterPackageNames = new char[length][];", "+\t\t\t\t\tchar[][] parameterTypeNames = new char[length][];", "+\t\t\t\t\tString[] parameterSignatures = new String[length];", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tparameterPackageNames[i] = parameterTypes[i].qualifiedPackageName();", "+\t\t\t\t\t\tparameterTypeNames[i] = parameterTypes[i].qualifiedSourceName();", "+\t\t\t\t\t\tparameterSignatures[i] = new String(getSignature(parameterTypes[i])).replace('/', '.');", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\tReferenceBinding declaringClass = methodBinding.declaringClass;", "+\t\t\t\t\tif (isLocal(declaringClass) && this.requestor instanceof SelectionRequestor) {", "+\t\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalMethod(methodBinding);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.requestor.acceptMethod(", "+\t\t\t\t\t\t\tdeclaringClass.qualifiedPackageName(),", "+\t\t\t\t\t\t\tdeclaringClass.qualifiedSourceName(),", "+\t\t\t\t\t\t\tdeclaringClass.enclosingType() == null ? null : new String(getSignature(declaringClass.enclosingType())),", "+\t\t\t\t\t\t\tmethodBinding.isConstructor()", "+\t\t\t\t\t\t\t\t? declaringClass.sourceName()", "+\t\t\t\t\t\t\t\t: methodBinding.selector,", "+\t\t\t\t\t\t\tparameterPackageNames,", "+\t\t\t\t\t\t\tparameterTypeNames,", "+\t\t\t\t\t\t\tparameterSignatures,", "+\t\t\t\t\t\t\tmethodBinding.isConstructor(), ", "+\t\t\t\t\t\t\tisDeclaration,", "+\t\t\t\t\t\t\tmethodBinding.computeUniqueKey(),", "+\t\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61e6bb9d4467f005923a5ede304b4151", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CompletionProposal.java", "commitBeforeChange": "78489a1112068ad791184216a4e6b3439ea59739", "commitAfterChange": "44562039ccc53dd5301ff720c35ac750589a8412", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic char[][] findParameterNames(IProgressMonitor monitor)", "signatureAfterChange": " \tpublic char[][] findParameterNames(IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tthis.parameterNames =  this.findMethodParameterNames(", "-\t\t\t\t\t\t\tthis.declarationPackageName,", "-\t\t\t\t\t\t\tthis.declarationTypeName,", "-\t\t\t\t\t\t\tCharOperation.lastSegment(this.declarationTypeName, '.'),", "-\t\t\t\t\t\t\tthis.parameterPackageNames,", "-\t\t\t\t\t\t\tthis.parameterTypeNames);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.parameterNames = this.findMethodParameterNames(", "+\t\t\t\t\t\t\t\tthis.declarationPackageName,", "+\t\t\t\t\t\t\t\tthis.declarationTypeName,", "+\t\t\t\t\t\t\t\tCharOperation.lastSegment(this.declarationTypeName, '.'),", "+\t\t\t\t\t\t\t\tSignature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));", "+\t\t\t\t\t} catch(IllegalArgumentException e) {", "+\t\t\t\t\t\t// protection for invalid signature", "+\t\t\t\t\t\tif(this.parameterTypeNames != null) {", "+\t\t\t\t\t\t\tthis.parameterNames =  this.createDefaultParameterNames(this.parameterTypeNames.length);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.parameterNames = null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tthis.parameterNames =  this.findMethodParameterNames(", "-\t\t\t\t\t\t\tthis.declarationPackageName,", "-\t\t\t\t\t\t\tthis.declarationTypeName,", "-\t\t\t\t\t\t\tthis.name,", "-\t\t\t\t\t\t\tthis.parameterPackageNames,", "-\t\t\t\t\t\t\tthis.parameterTypeNames);", "-\t\t\t\t\t//this.parameterNames = this.findMethodParameterNames(", "-\t\t\t\t\t//\t\tthis.declarationSignature,", "-\t\t\t\t\t//\t\tthis.name,", "-\t\t\t\t\t//\t\tSignature.getParameterTypes(this.getSignature()));", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.parameterNames = this.findMethodParameterNames(", "+\t\t\t\t\t\t\t\tthis.declarationPackageName,", "+\t\t\t\t\t\t\t\tthis.declarationTypeName,", "+\t\t\t\t\t\t\t\tthis.name,", "+\t\t\t\t\t\t\t\tSignature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));", "+\t\t\t\t\t} catch(IllegalArgumentException e) {", "+\t\t\t\t\t\t// protection for invalid signature", "+\t\t\t\t\t\tif(this.parameterTypeNames != null) {", "+\t\t\t\t\t\t\tthis.parameterNames =  this.createDefaultParameterNames(this.parameterTypeNames.length);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.parameterNames = null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tthis.parameterNames =  this.findMethodParameterNames(", "-\t\t\t\t\t\t\tthis.declarationPackageName,", "-\t\t\t\t\t\t\tthis.declarationTypeName,", "-\t\t\t\t\t\t\tthis.name,", "-\t\t\t\t\t\t\tthis.parameterPackageNames,", "-\t\t\t\t\t\t\tthis.parameterTypeNames);", "-\t\t\t\t\t//char[][] parameterTypes = Signature.getParameterTypes(this.getSignature();", "-\t\t\t\t\t///this.parameterNames = this.findMethodParameterNames(", "-\t\t\t\t\t//\t\tthis.declarationSignature,", "-\t\t\t\t\t//\t\tthis.name,", "-\t\t\t\t\t//\t\tparameterTypes);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.parameterNames = this.findMethodParameterNames(", "+\t\t\t\t\t\t\t\tthis.declarationPackageName,", "+\t\t\t\t\t\t\t\tthis.declarationTypeName,", "+\t\t\t\t\t\t\t\tthis.name,", "+\t\t\t\t\t\t\t\tSignature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));", "+\t\t\t\t\t} catch(IllegalArgumentException e) {", "+\t\t\t\t\t\t// protection for invalid signature", "+\t\t\t\t\t\tif(this.parameterTypeNames != null) {", "+\t\t\t\t\t\t\tthis.parameterNames =  this.createDefaultParameterNames(this.parameterTypeNames.length);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.parameterNames = null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 41950}
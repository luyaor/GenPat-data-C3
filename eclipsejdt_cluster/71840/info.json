{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f601ff576b53e2b21fa7e09cd5ad4a70", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fd2bc9ec04f38ee3e7bdea32eac0e16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "5d61afa709802d331d230880f37fe526cefe25cb", "commitAfterChange": "611f47e73b2ec0045eb75d60dad86eed58ebb09d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public static String[] getJavaClassLibs()", "signatureAfterChange": " public static String[] getJavaClassLibs()", "diff": ["-    String jreDir = getJREDirectory();", "-    final String osName = System.getProperty(\"os.name\");", "-    if (jreDir == null) {", "-        return new String[] {};", "-    }", "-    if (osName.startsWith(\"Mac\")) {", "-        return new String[] {", "-            toNativePath(jreDir + \"/../Classes/classes.jar\")", "-        };", "-    }", "-    final String vmName = System.getProperty(\"java.vm.name\");", "-    if (\"J9\".equals(vmName)) {", "-        return new String[] {", "-            toNativePath(jreDir + \"/lib/jclMax/classes.zip\")", "-        };", "-    }", "-\tif (\"DRLVM\".equals(vmName)) {", "-\t\tFilenameFilter jarFilter = new FilenameFilter() {", "-\t\t\tpublic boolean accept(File dir, String name) {", "-\t\t\t\treturn name.endsWith(\".jar\") & !name.endsWith(\"-src.jar\");", "-\t\t\t}", "-\t\t};", "-\t\tString[] jars = new File(jreDir + \"/lib/boot/\").list(jarFilter);", "-\t\tfor (int i = 0; i < jars.length; i++) {", "-\t\t\tjars[i] = toNativePath(jreDir + \"/lib/boot/\" + jars[i]);", "+\t// check bootclasspath properties for Sun, JRockit and Harmony VMs", "+\tString bootclasspathProperty = System.getProperty(\"sun.boot.class.path\"); //$NON-NLS-1$", "+\tif ((bootclasspathProperty == null) || (bootclasspathProperty.length() == 0)) {", "+\t\t// IBM J9 VMs", "+\t\tbootclasspathProperty = System.getProperty(\"vm.boot.class.path\"); //$NON-NLS-1$", "+\t\tif ((bootclasspathProperty == null) || (bootclasspathProperty.length() == 0)) {", "+\t\t\t// Harmony using IBM VME", "+\t\t\tbootclasspathProperty = System.getProperty(\"org.apache.harmony.boot.class.path\"); //$NON-NLS-1$", "-\t\treturn jars;", "-    ArrayList paths = new ArrayList();", "-    String[] jarsNames = new String[] {", "-    \t\t\"/lib/vm.jar\",", "-    \t\t\"/lib/rt.jar\",", "-    \t\t\"/lib/core.jar\",", "-    \t\t\"/lib/security.jar\",", "-    \t\t\"/lib/xml.jar\",", "-    \t\t\"/lib/graphics.jar\"", "-    };", "-    addJarEntries(jreDir, jarsNames, paths);", "-    String[] result = new String[paths.size()];", "-    paths.toArray(result);", "-    return result;", "+\tString[] jars = null;", "+\tif ((bootclasspathProperty != null) && (bootclasspathProperty.length() != 0)) {", "+\t\tStringTokenizer tokenizer = new StringTokenizer(bootclasspathProperty, File.pathSeparator);", "+\t\tfinal int size = tokenizer.countTokens();", "+\t\tjars = new String[size];", "+\t\tint i = 0;", "+\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\tfinal String fileName = toNativePath(tokenizer.nextToken());", "+\t\t\tif (new File(fileName).exists()) {", "+\t\t\t\tjars[i] = fileName;", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t}", "+\t\tif (size != i) {", "+\t\t\t// resize", "+\t\t\tSystem.arraycopy(jars, 0, (jars = new String[i]), 0, i);", "+\t\t}", "+\t} else {", "+\t\tString jreDir = getJREDirectory();", "+\t\tfinal String osName = System.getProperty(\"os.name\");", "+\t\tif (jreDir == null) {", "+\t\t\treturn new String[] {};", "+\t\t}", "+\t\tif (osName.startsWith(\"Mac\")) {", "+\t\t\treturn new String[] {", "+\t\t\t\t\ttoNativePath(jreDir + \"/../Classes/classes.jar\")", "+\t\t\t};", "+\t\t}", "+\t\tfinal String vmName = System.getProperty(\"java.vm.name\");", "+\t\tif (\"J9\".equals(vmName)) {", "+\t\t\treturn new String[] {", "+\t\t\t\t\ttoNativePath(jreDir + \"/lib/jclMax/classes.zip\")", "+\t\t\t};", "+\t\t}", "+\t\tString[] jarsNames = null;", "+\t\tArrayList paths = new ArrayList();", "+\t\tif (\"DRLVM\".equals(vmName)) {", "+\t\t\tFilenameFilter jarFilter = new FilenameFilter() {", "+\t\t\t\tpublic boolean accept(File dir, String name) {", "+\t\t\t\t\treturn name.endsWith(\".jar\") & !name.endsWith(\"-src.jar\");", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tjarsNames = new File(jreDir + \"/lib/boot/\").list(jarFilter);", "+\t\t\taddJarEntries(jreDir + \"/lib/boot/\", jarsNames, paths);", "+\t\t} else {", "+\t\t\tjarsNames = new String[] {", "+\t\t\t\t\t\"/lib/vm.jar\",", "+\t\t\t\t\t\"/lib/rt.jar\",", "+\t\t\t\t\t\"/lib/core.jar\",", "+\t\t\t\t\t\"/lib/security.jar\",", "+\t\t\t\t\t\"/lib/xml.jar\",", "+\t\t\t\t\t\"/lib/graphics.jar\"", "+\t\t\t};", "+\t\t\taddJarEntries(jreDir, jarsNames, paths);", "+\t\t}", "+\t\tjars = new String[paths.size()];", "+\t\tpaths.toArray(jars);", "+\t}", "+\treturn jars;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b58fe3dcb5d8f7b4d338e8c168f3db47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a667c05ed54e2e31a5fe871abdcae3c92be26c13", "commitAfterChange": "3ef2eccfdb5543a0ab32261d06183c857677e196", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 94, "signatureBeforeChange": " protected void setPaths(ArrayList bootclasspaths, \t\tString sourcepathClasspathArg, \t\tArrayList sourcepathClasspaths, \t\tArrayList classpaths, \t\tArrayList extdirsClasspaths, \t\tArrayList endorsedDirClasspaths, \t\tString customEncoding) throws InvalidInputException", "signatureAfterChange": " protected void setPaths(ArrayList bootclasspaths, \t\tString sourcepathClasspathArg, \t\tArrayList sourcepathClasspaths, \t\tArrayList classpaths, \t\tArrayList extdirsClasspaths, \t\tArrayList endorsedDirClasspaths, \t\tString customEncoding) throws InvalidInputException", "diff": ["+\t", "- \tfinal File javaHome = getJavaHome();", "- \tfinal int bootclasspathsSize = bootclasspaths.size();", "-\tif (bootclasspathsSize != 0) {", "-\t\tString[] paths = new String[bootclasspathsSize];", "-\t\tbootclasspaths.toArray(paths);", "-\t\tbootclasspaths.clear();", "-\t\tfor (int i = 0; i < bootclasspathsSize; i++) {", "-\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, bootclasspaths, ", "-\t\t\t\tpaths[i], customEncoding, false, true);", "-\t\t}", "-\t} else {", "-\t\t/* no bootclasspath specified", "-\t\t * we can try to retrieve the default librairies of the VM used to run", "-\t\t * the batch compiler", "-\t\t */", "-\t\t String javaversion = System.getProperty(\"java.version\");//$NON-NLS-1$", "-\t\t if (javaversion != null && javaversion.equalsIgnoreCase(\"1.1.8\")) { //$NON-NLS-1$", "-\t\t\tthis.logger.logWrongJDK();", "-\t\t\tthis.proceed = false;", "-\t\t\treturn;", "-\t\t }", "+ \tbootclasspaths = handleBootclasspath(bootclasspaths, customEncoding);", "-\t \t/*", "-\t \t * Handle >= JDK 1.2.2 settings: retrieve rt.jar", "-\t \t */", "-\t \t if (javaHome != null) {", "-\t\t\tFile[] directoriesToCheck = null;", "-\t\t\tif (System.getProperty(\"os.name\").startsWith(\"Mac\")) {//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\tdirectoriesToCheck = new File[] {", "-\t\t\t\t\tnew File(javaHome, \"../Classes\"), //$NON-NLS-1$", "-\t\t\t\t};", "-\t\t\t} else {", "-\t\t\t\tdirectoriesToCheck = new File[] { ", "-\t\t\t\t\tnew File(javaHome, \"lib\") //$NON-NLS-1$", "-\t\t\t\t};", "-\t\t\t}", "-\t\t\tFile[][] systemLibrariesJars = getLibrariesFiles(directoriesToCheck);", "-\t\t\tif (systemLibrariesJars != null) {", "-\t\t\t\tfor (int i = 0, max = systemLibrariesJars.length; i < max; i++) {", "-\t\t\t\t\tFile[] current = systemLibrariesJars[i];", "-\t\t\t\t\tif (current != null) {", "-\t\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\t\tFileSystem.Classpath classpath = ", "-\t\t\t\t\t\t\t\tFileSystem.getClasspath(current[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, false, null, null); ", "-\t\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\t\tbootclasspaths.add(classpath);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "- \t\t}", "-\t}", "-\tfinal int classpathsSize = classpaths.size();", "-\tif (classpaths.size() != 0) {", "-\t\tString[] paths = new String[classpathsSize];", "-\t\tclasspaths.toArray(paths);", "-\t\tclasspaths.clear();", "-\t\tfor (int i = 0; i < classpathsSize; i++) {", "-\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, classpaths, paths[i], ", "-\t\t\t\t\tcustomEncoding, false, true);", "-\t\t}\t\t\t", "-\t} else {", "-\t\t// no user classpath specified.", "-\t\tString classProp = System.getProperty(\"java.class.path\"); //$NON-NLS-1$", "-\t\tif ((classProp == null) || (classProp.length() == 0)) {", "-\t\t\tthis.logger.logNoClasspath();", "-\t\t\tclasspaths.add(FileSystem.getClasspath(System.getProperty(\"user.dir\"), customEncoding, null));//$NON-NLS-1$", "-\t\t} else {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "-\t\t\tString token;", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\ttoken = tokenizer.nextToken();", "-\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "-\t\t\t\t\t\t.getClasspath(token, customEncoding, null);", "-\t\t\t\tif (currentClasspath != null) {", "-\t\t\t\t\tclasspaths.add(currentClasspath);", "-\t\t\t\t} else if (token.length() != 0) {", "-\t\t\t\t\tthis.logger.logIncorrectClasspath(token);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\tclasspaths = handleClasspath(classpaths, customEncoding);", "+\t"]}], "num": 71840}
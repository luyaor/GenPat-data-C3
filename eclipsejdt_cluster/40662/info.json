{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d209596322a93b8dcc721b35aa9afc7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d4473e7037f2a37bd87ee1c06ef3100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "bef60d1fb53f507f903d66ac6e04e719aa5b50f4", "commitAfterChange": "3b418eaef41604a68c97dae4dd32fddcb839b515", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\tif (methodDecl != null && methodDecl.binding != null) {", "-\t\t\t\t\t\t\tTypeVariableBinding typeVariable = methodDecl.binding.getTypeVariable(name);", "-\t\t\t\t\t\t\tif (typeVariable != null)\treturn typeVariable;", "+\t\t\t\t\t\tif (methodDecl != null) {", "+\t\t\t\t\t\t\tif (methodDecl.binding != null) {", "+\t\t\t\t\t\t\t\tTypeVariableBinding typeVariable = methodDecl.binding.getTypeVariable(name);", "+\t\t\t\t\t\t\t\tif (typeVariable != null)", "+\t\t\t\t\t\t\t\t\treturn typeVariable;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// use the methodDecl's typeParameters to handle problem cases when the method binding doesn't exist", "+\t\t\t\t\t\t\t\tTypeParameter[] params = methodDecl.typeParameters();", "+\t\t\t\t\t\t\t\tfor (int i = params == null ? 0 : params.length; --i >= 0;)", "+\t\t\t\t\t\t\t\t\tif (CharOperation.equals(params[i].name, name))", "+\t\t\t\t\t\t\t\t\t\tif (params[i].binding != null && params[i].binding.isValidBinding())", "+\t\t\t\t\t\t\t\t\t\t\treturn params[i].binding;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81c88f73a5e6eaa37d7a40322e4ed1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "24242f27a56569515f3a766b79af5b4f6c52fffe", "commitAfterChange": "270b2d0dc66fd2f8c8012264ce82bca4953b85cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  boolean isValueProvidedUsingAnnotation(FieldDeclaration fieldDecl)", "signatureAfterChange": "  boolean isValueProvidedUsingAnnotation(FieldDeclaration fieldDecl)", "diff": ["+\t\t\t} else if (annotation.resolvedType.id == TypeIds.T_OrgSpringframeworkBeansFactoryAnnotationAutowired) {", "+\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\t\tif (memberValuePairs == Annotation.NoValuePairs)", "+\t\t\t\t\treturn true;", "+\t\t\t\tfor (int j = 0; j < memberValuePairs.length; j++) {", "+\t\t\t\t\tif (CharOperation.equals(memberValuePairs[j].name, TypeConstants.REQUIRED))", "+\t\t\t\t\t\treturn memberValuePairs[j].value instanceof TrueLiteral;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3d1f7cbc3469d8a05b10e93d0dd1a5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "6ac14fb94b619629e9d1194f1e68de6d5f7b6969", "commitAfterChange": "54f21b938e43513d8b3615d9c7068527e047df4e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " private boolean isAffectedByJavaProject(IJavaElementDelta delta, IJavaElement element)", "signatureAfterChange": " private boolean isAffectedByJavaProject(IJavaElementDelta delta, IJavaElement element)", "diff": ["+\t\t\t\tif (this.focusType != null) {", "+\t\t\t\t\t// if the hierarchy's project is on the added project classpath, then the hierarchy has changed", "+\t\t\t\t\tclasspath = ((JavaProject)element).getExpandedClasspath(true);", "+\t\t\t\t\tIPath hierarchyProject = javaProject().getPath();", "+\t\t\t\t\tfor (int i = 0; i < classpath.length; i++) {", "+\t\t\t\t\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT ", "+\t\t\t\t\t\t\t\t&& classpath[i].getPath().equals(hierarchyProject)) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 40662}
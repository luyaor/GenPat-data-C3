{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f75a5d75b3ac8d3112cb30750041f1af", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa3631c75c5b5a5cbec57c104ccc4589", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "276d690deab11e5ff278dd7a12340b7922d913fc", "commitAfterChange": "1ed5028f52cac9ac32a1eba090840061fb91b107", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void faultInImports()", "signatureAfterChange": " void faultInImports()", "diff": ["+\t\t\tReferenceBinding conflictingType = null;", "+\t\t\tif (importBinding instanceof MethodBinding) {", "+\t\t\t\tconflictingType = (ReferenceBinding) getType(compoundName, compoundName.length);", "+\t\t\t\tif (!conflictingType.isValidBinding())", "+\t\t\t\t\tconflictingType = null;", "+\t\t\t}", "-\t\t\tif (importBinding instanceof ReferenceBinding) {", "-\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) importBinding;", "+\t\t\tif (importBinding instanceof ReferenceBinding || conflictingType != null) {", "+\t\t\t\tReferenceBinding referenceBinding = conflictingType == null ? (ReferenceBinding) importBinding : conflictingType;", "-\t\t\tresolvedImports[index++] = new ImportBinding(compoundName, false, importBinding, importReference);", "+\t\t\tresolvedImports[index++] = conflictingType == null", "+\t\t\t\t? new ImportBinding(compoundName, false, importBinding, importReference)", "+\t\t\t\t: new ImportConflictBinding(compoundName, importBinding, conflictingType, importReference);", "-\t\tif (!binding.onDemand && binding.resolvedImport instanceof ReferenceBinding)", "+\t\tif (!binding.onDemand && binding.resolvedImport instanceof ReferenceBinding || binding instanceof ImportConflictBinding)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd288df29be6edbcc80551c6ed9e19a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "02e0207f51a14b2b110968b24524e6d9461bc936", "commitAfterChange": "7743b78aa7dc3095d1fff9fa367431511a686bf2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["+\t\t\tReferenceBinding equivalent = this;", "-\t        if (otherEquivalent != null && otherEquivalent.isParameterizedType()) {", "-\t\t        ParameterizedTypeBinding otherParameterizedType = (ParameterizedTypeBinding) otherEquivalent;", "+\t        if (otherEquivalent == null) {", "+\t        \t// allow LinkedList<String> to match List<T> (downcast scenario)", "+\t\t    \tequivalent = this.findSuperTypeErasingTo((ReferenceBinding)otherType.erasure());", "+\t        \tif (equivalent == null || !equivalent.isParameterizedType())", "+\t        \t\treturn;", "+\t        \totherEquivalent = (ReferenceBinding)otherType;", "+\t        }", "+\t        if (equivalent.isParameterizedType() && otherEquivalent.isParameterizedType()) {", "+\t        \tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) equivalent;", "+\t        \tParameterizedTypeBinding otherParameterizedType = (ParameterizedTypeBinding) otherEquivalent;", "-\t                this.arguments[i].collectSubstitutes(otherParameterizedType.arguments[i], substitutes);", "+\t                parameterizedType.arguments[i].collectSubstitutes(otherParameterizedType.arguments[i], substitutes);", "-\t\t    }", "+\t        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2ac5b2782721624d765056a2523887e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocFieldReference.java", "commitBeforeChange": "f3797939fa5164cd62a3ae51074dba1ccea759ff", "commitAfterChange": "0df341e86846b5d019d9adfde0716c02f828f524", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\tscope.problemReporter().javadocInvalidField(this, this.receiverType, scope.getDeclarationModifiers());", "-\t\t\treturn null;", "+\t\t\tif (this.receiverType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding refBinding = (ReferenceBinding) this.receiverType;", "+\t\t\t\tMethodBinding[] bindings = refBinding.getMethods(this.token);", "+\t\t\t\tif (bindings == null) {", "+\t\t\t\t\tscope.problemReporter().javadocInvalidField(this, this.receiverType, scope.getDeclarationModifiers());", "+\t\t\t\t\treturn null;", "+\t\t\t\t} ", "+\t\t\t\tswitch (bindings.length) {", "+\t\t\t\t\tcase 0:", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidField(this, this.receiverType, scope.getDeclarationModifiers());", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\tcase 1:", "+\t\t\t\t\t\tthis.binding = null;", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tscope.problemReporter().javadocAmbiguousMethodReference(this, scope.getDeclarationModifiers());", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 56863}
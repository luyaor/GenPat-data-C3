{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6dc03562724c68af2292d81d1ad3ca1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04134a1aae16cd5580b105dc1faf6c07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "a094ff45a998c96b23832e90fdde401121899a47", "commitAfterChange": "7b6db9de192fc1976c0d12542fea77102668b433", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public boolean needsUncheckedConversion(TypeBinding targetType)", "signatureAfterChange": " public boolean needsUncheckedConversion(TypeBinding targetType)", "diff": ["+", "+\tif (this == targetType) return false;", "+\ttargetType = targetType.leafComponentType();", "+\tif (!(targetType instanceof ReferenceBinding)) ", "+\t\treturn false;", "+", "+\tTypeBinding currentType = this.leafComponentType();", "+\tif (!(currentType instanceof ReferenceBinding))", "+\t\treturn false;", "+\t", "+\tReferenceBinding compatible = ((ReferenceBinding)currentType).findSuperTypeErasingTo((ReferenceBinding)targetType.erasure());", "+\tif (compatible == null) ", "+\t\treturn false;", "+\tif (!compatible.isPartOfRawType()) return false;", "+\tdo {", "+\t\tif (compatible.isRawType() && (targetType.isBoundParameterizedType() || targetType.isGenericType())) {", "+\t\t\treturn true;", "+\t\t}", "+\t} while ((compatible = compatible.enclosingType()) != null && (targetType = targetType.enclosingType()) != null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4abc617614b19baade5d4f7574cc3220", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": " public boolean needsUncheckedConversion(TypeBinding targetType)", "signatureAfterChange": " public boolean needsUncheckedConversion(TypeBinding targetType)", "diff": ["-\tif (this == targetType) return false;", "+\tif (this == targetType)", "+\t\treturn false;", "-\tif (!(targetType instanceof ReferenceBinding)) ", "+\tif (!(targetType instanceof ReferenceBinding))", "-\tif (!(currentType instanceof ReferenceBinding))", "+\tTypeBinding match = currentType.findSuperTypeWithSameErasure(targetType);", "+\tif (!(match instanceof ReferenceBinding))", "-\t", "-\tReferenceBinding compatible = ((ReferenceBinding)currentType).findSuperTypeWithSameErasure(targetType);", "-\tif (compatible == null) ", "-\t\treturn false;", "-", "+\tReferenceBinding compatible = (ReferenceBinding) match;", "-\t\tif (targetType.isBoundParameterizedType()) return true;", "-", "-\t\tif (compatible.isStatic()) break;", "-\t\tif ((compatible = compatible.enclosingType()) == null) break;", "-\t\tif ((targetType = targetType.enclosingType()) == null) break;", "+\t\tif (targetType.isBoundParameterizedType())", "+\t\t\treturn true;", "+\t\tif (compatible.isStatic())", "+\t\t\tbreak;", "+\t\tif ((compatible = compatible.enclosingType()) == null)", "+\t\t\tbreak;", "+\t\tif ((targetType = targetType.enclosingType()) == null)", "+\t\t\tbreak;", "-}"]}], "num": 19056}
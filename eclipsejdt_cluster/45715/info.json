{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d66f04d820438e098612c696f69f3a7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a04c2e3777b73bf63b981d410b092da7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " boolean checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " boolean detectNameClash(MethodBinding one, MethodBinding substituteTwo, boolean checkParameters)", "diff": ["-boolean checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod) {", "-\tTypeBinding[] currentVars = currentMethod.typeVariables;", "-\tTypeBinding[] inheritedVars = inheritedMethod.typeVariables;", "-\tif (currentVars.length != inheritedVars.length && currentVars.length > 0) return true; // must match unless all are replaced", "-\t// must check each parameter pair to see if parameterized types are compatible", "-\t// already know that each erasure() is equal", "-\tTypeBinding[] currentArgs = currentMethod.parameters;", "-\tTypeBinding[] inheritedArgs = inheritedMethod.parameters;", "-\tif (currentArgs != inheritedArgs) {", "-\t\tfor (int i = 0, l = currentArgs.length; i < l; i++) {", "-\t\t\tTypeBinding currentArg = currentArgs[i].leafComponentType();", "-\t\t\tTypeBinding inheritedArg = inheritedArgs[i].leafComponentType();", "-\t\t\tif (currentArg != inheritedArg && currentArg.isParameterizedType()) {", "-\t\t\t\tif (!inheritedArg.isParameterizedType()) return true;", "-\t\t\t\tTypeBinding[] args1 = ((ParameterizedTypeBinding) currentArg).arguments;", "-\t\t\t\tTypeBinding[] args2 = ((ParameterizedTypeBinding) inheritedArg).arguments;", "-\t\t\t\tfor (int j = 0, k = args1.length; j < k; j++)", "-\t\t\t\t    if (!areTypesEquivalent(args1[j], args2[j])) return true;", "+}", "+boolean detectNameClash(MethodBinding one, MethodBinding substituteTwo, boolean checkParameters) {", "+\tif (doTypeVariablesClash(one, substituteTwo) || (checkParameters && doParametersClash(one, substituteTwo))) {", "+\t\tif (this.type == one.declaringClass)", "+\t\t \tproblemReporter(one).methodNameClash(one, substituteTwo);", "+\t\telse", "+\t\t\tproblemReporter().inheritedMethodsHaveNameClash(this.type, one, substituteTwo);", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffbd93b47acac80083d683f98277929b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f11400a6293169aae30e17b2e27f5adb8ea51511", "commitAfterChange": "f04e3f1ae3453f83dbe0aa3f6ea76c9c43c152ce", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 63, "signatureBeforeChange": "\r \r \tpublic String getVariablesAsXMLString() throws CoreException", "signatureAfterChange": "\r \t\r \tpublic static void variablePut(String varName, IPath varPath)", "diff": ["-\tpublic String getVariablesAsXMLString() throws CoreException {\r", "-\r\t\tDocument document = new DocumentImpl();\r", "-\t\tElement rootElement = document.createElement(\"variables\"); //$NON-NLS-1$\r", "-\t\tdocument.appendChild(rootElement);\r", "-\r\t\tString[] variables = JavaCore.getClasspathVariableNames();\r", "-\t\t\r", "-\t\tfor (int i= 0; i < variables.length; ++i) {\r", "-\t\t\tString var = variables[i];\r", "-\t\t\tIPath varPath = JavaCore.getClasspathVariable(var);\r", "-\t\t\tif (varPath != null){\r", "-\t\t\t\tElement varElement= document.createElement(\"variable\"); //$NON-NLS-1$\r", "-\t\t\t\tvarElement.setAttribute(\"name\", var); //$NON-NLS-1$\r", "-\t\t\t\tvarElement.setAttribute(\"path\", varPath.toString());\t\t\t //$NON-NLS-1$\r", "-\t\t\t\trootElement.appendChild(varElement);\r", "-\t\t\t}\r", "-\t\t}\r", "-\r", "-\t\t// produce a String output\r", "-\t\tStringWriter writer = new StringWriter();\r", "-\t\ttry {\r", "-\t\t\tOutputFormat format = new OutputFormat();\r", "-\t\t\tformat.setIndenting(true);\r", "-\t\t\tSerializer serializer = SerializerFactory.getSerializerFactory(Method.XML).makeSerializer(writer, format);\r", "-\t\t\tserializer.asDOMSerializer().serialize(document);\r", "-\t\t} catch (IOException e) {\r", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);\r", "-\t\t}\r", "-\t\treturn writer.toString();\t\r", "-\t}\r", "+\t\r", "+\tpublic static void variablePut(String varName, IPath varPath){\r", "+\t\t// update path cache\r", "+\t\tif (varPath == null){\r", "+\t\t\tVariables.remove(varName);\r", "+\t\t} else {\r", "+\t\t\tVariables.put(varName, varPath);\r", "+\t\t}\r", "+\t\t\r", "+\t\tPreferences preferences = JavaCore.getPlugin().getPluginPreferences();\r", "+\t\tString varPref = CP_VARIABLE_PREFERENCES_PREFIX+varName;\r", "+\t\tString varString = varPath == null ? CP_VARIABLE_IGNORE : varPath.toString();\r", "+\t\tpreferences.setDefault(varPref, CP_VARIABLE_IGNORE); // use this default to get rid of removed ones\r", "+\t\tpreferences.setValue(varPref, varString);\r", "+\t\tJavaCore.getPlugin().savePluginPreferences();\r", "+\t}\r"]}], "num": 45715}
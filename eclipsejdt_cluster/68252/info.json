{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3389a9a9995c4d481be2899aa6b21e5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00d5ad8b2f6d100b7174997b4f4b8c76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "bdf0b69cc9bdee81873205479690aa7d5db63ee8", "commitAfterChange": "093aaf24019732f4fd12a83e0ae0e11a2c6e512a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void addDefaultAbstractMethods()", "signatureAfterChange": "  public void addDefaultAbstractMethods()", "diff": ["-}", "-\t\tboolean hasAddedMethods = false;", "+\t\tMethodBinding[] defaultAbstracts = null;", "+\t\tint defaultAbstractsCount = 0;", "-\t\t\t\t\tfor (int m = superMethods.length; --m >= 0;) {", "+\t\t\t\t\tnextAbstractMethod: for (int m = superMethods.length; --m >= 0;) {", "-\t\t\t\t\t\tif (!implementsMethod(method)) {", "-\t\t\t\t\t\t\taddDefaultAbstractMethod(method);", "-\t\t\t\t\t\t\thasAddedMethods = true;", "+\t\t\t\t\t\t// explicitly implemented ?", "+\t\t\t\t\t\tif (implementsMethod(method)) {", "+\t\t\t\t\t\t\tcontinue nextAbstractMethod;", "+\t\t\t\t\t\tif (defaultAbstractsCount == 0) {", "+\t\t\t\t\t\t\tdefaultAbstracts = new MethodBinding[5];", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// already added as default abstract ?", "+\t\t\t\t\t\t\tfor(int k = 0; k < defaultAbstractsCount; k++) {", "+\t\t\t\t\t\t\t\tMethodBinding alreadyAddedMethod = \tdefaultAbstracts[k];", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(alreadyAddedMethod.selector, method.selector)", "+\t\t\t\t\t\t\t\t\t\t&& alreadyAddedMethod.areParametersEqual(method)) {", "+\t\t\t\t\t\t\t\t\tcontinue nextAbstractMethod;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tMethodBinding defaultAbstract = new MethodBinding(", "+\t\t\t\t\t\t\t\tmethod.modifiers | ExtraCompilerModifiers.AccDefaultAbstract,", "+\t\t\t\t\t\t\t\tmethod.selector,", "+\t\t\t\t\t\t\t\tmethod.returnType,", "+\t\t\t\t\t\t\t\tmethod.parameters,", "+\t\t\t\t\t\t\t\tmethod.thrownExceptions,", "+\t\t\t\t\t\t\t\tthis);", "+\t\t\t\t\t\tif (defaultAbstractsCount == defaultAbstracts.length) {", "+\t\t\t\t\t\t\tSystem.arraycopy(defaultAbstracts, 0, defaultAbstracts = new MethodBinding[2*defaultAbstractsCount], 0, defaultAbstractsCount);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdefaultAbstracts[defaultAbstractsCount++] = defaultAbstract;", "-\t\tif (hasAddedMethods) {", "-\t\t\t// re-sort methods", "+\t\tif (defaultAbstractsCount > 0) {", "+\t\t\tSystem.arraycopy(this.methods, 0, this.methods = new MethodBinding[length+defaultAbstractsCount], 0, length);", "+\t\t\tSystem.arraycopy(defaultAbstracts, 0, this.methods, length, defaultAbstractsCount);", "+\t\t\t// re-sort methods", "+\t\t\tlength = length+defaultAbstractsCount;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d2e28ed7bf49ffe5bc1e8df3365c1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tvoid buildMethods()", "signatureAfterChange": "  \tvoid buildMethods()", "diff": ["-\t\tfor (int i = 0; i < size; i++) {", "-\t\t\tif (i != clinitIndex) {", "-\t\t\t\tMethodScope scope = new MethodScope(this, methods[i], false);", "-\t\t\t\tMethodBinding methodBinding = scope.createMethod(methods[i]);", "-\t\t\t\tif (methodBinding != null) // is null if binding could not be created", "-\t\t\t\t\tmethodBindings[count++] = methodBinding;", "+\t\tif (sourceType.isAbstract()) {", "+\t\t\tfor (int i = 0; i < size; i++) {", "+\t\t\t\tif (i != clinitIndex) {", "+\t\t\t\t\tMethodScope scope = new MethodScope(this, methods[i], false);", "+\t\t\t\t\tMethodBinding methodBinding = scope.createMethod(methods[i]);", "+\t\t\t\t\tif (methodBinding != null) // is null if binding could not be created", "+\t\t\t\t\t\tmethodBindings[count++] = methodBinding;", "+\t\t\t\t}", "+\t\t} else {", "+\t\t\tMethodBinding[] abstractMethods = null;", "+\t\t\tfor (int i = 0; i < size; i++) {", "+\t\t\t\tif (i != clinitIndex) {", "+\t\t\t\t\tMethodScope scope = new MethodScope(this, methods[i], false);", "+\t\t\t\t\tMethodBinding methodBinding = scope.createMethod(methods[i]);", "+\t\t\t\t\tif (methodBinding != null) { // is null if binding could not be created", "+\t\t\t\t\t\tmethodBindings[count++] = methodBinding;", "+\t\t\t\t\t\tif (methodBinding.isAbstract()) {", "+\t\t\t\t\t\t\tif (abstractMethods == null) {", "+\t\t\t\t\t\t\t\tabstractMethods = new MethodBinding[] {methodBinding};", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint length = abstractMethods.length;", "+\t\t\t\t\t\t\t\tSystem.arraycopy(abstractMethods, 0, abstractMethods = new MethodBinding[length + 1], 0, length);", "+\t\t\t\t\t\t\t\tabstractMethods[length] = methodBinding;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (abstractMethods != null)", "+\t\t\t\tproblemReporter().abstractMethodInAbstractClass(sourceType, abstractMethods);"]}], "num": 68252}
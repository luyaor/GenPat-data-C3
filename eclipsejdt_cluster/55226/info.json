{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98608b889b3a6436b0d3720f9f60dfc4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dae5e61e977b7b366a094b61b292b86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\t\tif (this.resolvedType != null && !this.resolvedType.isValidBinding())", "-\t\t\t\treturn null; // already reported error", "-\t\t\treturn this.resolvedType;", "+\t\t\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "+\t\t\t\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "+\t\t\t\t\tif (this.resolvedType.isValidBinding()) {", "+\t\t\t\t\t\treturn this.resolvedType;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tswitch (this.resolvedType.problemId()) {", "+\t\t\t\t\t\t\tcase ProblemReasons.NotFound :", "+\t\t\t\t\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\t\t\t\t\t\tTypeBinding type = this.resolvedType.closestMatch();", "+\t\t\t\t\t\t\t\treturn type;\t\t\t", "+\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\t\tscope.problemReporter().nonGenericTypeCannotBeParameterized(i, this, currentType, argTypes);", "-\t\t\t\t\treturn null;", "+\t\t\t\t\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) { // below 1.5, already reported as syntax error", "+\t\t\t\t\t\tscope.problemReporter().nonGenericTypeCannotBeParameterized(i, this, currentType, argTypes);", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.resolvedType =  (qualifiedType != null && qualifiedType.isParameterizedType())", "+\t\t\t\t\t\t? scope.environment().createParameterizedType(currentType, null, qualifiedType)", "+\t\t\t\t\t\t: currentType;", "+\t\t\t\t\tif (this.dimensions > 0) {", "+\t\t\t\t\t\tif (dimensions > 255)", "+\t\t\t\t\t\t\tscope.problemReporter().tooManyDimensions(this);", "+\t\t\t\t\t\tthis.resolvedType = scope.createArrayType(this.resolvedType, dimensions);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn this.resolvedType;", "-//\t\tthis.resolvedType = qualifiedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "529e8eb66f00036c4909085123e0f2ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\t\tif (this.resolvedType != null && !this.resolvedType.isValidBinding())", "-\t\t\t\treturn null; // already reported error", "-\t\t\treturn this.resolvedType;", "+\t\t\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "+\t\t\t\tif (this.resolvedType.isValidBinding()) {", "+\t\t\t\t\treturn this.resolvedType;", "+\t\t\t\t} else {", "+\t\t\t\t\tswitch (this.resolvedType.problemId()) {", "+\t\t\t\t\t\tcase ProblemReasons.NotFound :", "+\t\t\t\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\t\t\t\t\tTypeBinding type = this.resolvedType.closestMatch();", "+\t\t\t\t\t\t\treturn type;\t\t\t", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tscope.problemReporter().nonGenericTypeCannotBeParameterized(this, currentType, argTypes);", "-\t\t\treturn null;", "+\t\t\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) { // below 1.5, already reported as syntax error", "+\t\t\t\tscope.problemReporter().nonGenericTypeCannotBeParameterized(0, this, currentType, argTypes);", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tthis.resolvedType = currentType;", "+\t\t\t// array type ?", "+\t\t\tif (this.dimensions > 0) {", "+\t\t\t\tif (dimensions > 255) ", "+\t\t\t\t\tscope.problemReporter().tooManyDimensions(this);", "+\t\t\t\tthis.resolvedType = scope.createArrayType(this.resolvedType, dimensions);", "+\t\t\t}\t\t\t", "+\t\t\treturn this.resolvedType;", "-\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "+\t\tif (checkBounds) { // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "-", "+\t\t}"]}], "num": 55226}
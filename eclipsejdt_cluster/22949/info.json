{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce971838ddf1b0ba0ab2e8a2be23f246", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ede0f75c5366d8fba72bdec2ba660de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "bdc003280094677782597954dd2d58945742ba73", "commitAfterChange": "a5428774cbd04bd7c443f0103cafd574e0be40b3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " private ICompilationUnit[] getWorkingCopies()", "signatureAfterChange": " private ICompilationUnit[] getWorkingCopies()", "diff": ["-\t\tcopies = this.workingCopies;", "+\t\tif (this.workingCopyOwner == null) {", "+\t\t\tcopies = JavaModelManager.getJavaModelManager().getWorkingCopies(DefaultWorkingCopyOwner.PRIMARY, false/*don't add primary WCs a second time*/);", "+\t\t\tif (copies == null) {", "+\t\t\t\tcopies = this.workingCopies;", "+\t\t\t} else {", "+\t\t\t\tHashMap pathToCUs = new HashMap();", "+\t\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "+\t\t\t\t\tICompilationUnit unit = copies[i];", "+\t\t\t\t\tpathToCUs.put(unit.getPath(), unit);", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0, length = this.workingCopies.length; i < length; i++) {", "+\t\t\t\t\tICompilationUnit unit = this.workingCopies[i];", "+\t\t\t\t\tpathToCUs.put(unit.getPath(), unit);", "+\t\t\t\t}", "+\t\t\t\tint length = pathToCUs.size();", "+\t\t\t\tcopies = new ICompilationUnit[length];", "+\t\t\t\tpathToCUs.values().toArray(copies);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tcopies = this.workingCopies;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e71435eafa6ba4430be82225c2616b80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "14f732df2ebf38799e02f8fe1c01b744e4189a6c", "commitAfterChange": "98ff89450e35e650c13ed556e5be341179e4b294", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static IMarker[] getProblemsFor(IResource resource)", "signatureAfterChange": "  public static IMarker[] getProblemsFor(IResource resource)", "diff": ["-\t\tif (resource != null && resource.exists())", "-\t\t\treturn resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_INFINITE);", "+\t\tif (resource != null && resource.exists()) {", "+\t\t\tIMarker[] markers = resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_INFINITE);", "+\t\t\tSet markerTypes = JavaModelManager.getJavaModelManager().compilationParticipants.managedMarkerTypes();", "+\t\t\tif (markerTypes.isEmpty()) return markers;", "+\t\t\tArrayList markerList = new ArrayList(5);", "+\t\t\tfor (int i = 0, length = markers.length; i < length; i++) {", "+\t\t\t\tmarkerList.add(markers[i]);", "+\t\t\t}", "+\t\t\tIterator iterator = markerTypes.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tmarkers = resource.findMarkers((String) iterator.next(), false, IResource.DEPTH_INFINITE);", "+\t\t\t\tfor (int i = 0, length = markers.length; i < length; i++) {", "+\t\t\t\t\tmarkerList.add(markers[i]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tIMarker[] result;", "+\t\t\tmarkerList.toArray(result = new IMarker[markerList.size()]);", "+\t\t\treturn result;", "+\t\t}"]}], "num": 22949}
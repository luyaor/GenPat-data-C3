{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c29729ec8610477cf973eb0daf8fb8b1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f2d4590cb14bb3ff29639a855a6e8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "d5153db1b78be1240488c00ed97be6f8d4f85142", "commitAfterChange": "703ea70d31fea8142c2f0c6536ccedc3e7344670", "methodNumberBeforeChange": 259, "methodNumberAfterChange": 261, "signatureBeforeChange": " public void testBug304081b() throws Exception", "signatureAfterChange": " public void testBug305037() throws Exception", "diff": ["- */", "-public void testBug304081b() throws Exception {", "-\tFile libDir = null;", "-\ttry {", "-", "-\t\tIJavaProject proj = this.createJavaProject(\"P\", new String[] {}, \"bin\");", "-\t\tIClasspathEntry[] classpath = new IClasspathEntry[1];", "-\t\tlibDir = new File(proj.getResource().getLocation().toPortableString());", "-\t\tFile libJar = new File(libDir, \"container.jar\");", "-\t\t", "-\t\taddLibrary(proj, \"container.jar\", null, new String[0], ", "-\t\t\t\tnew String[] {", "-\t\t\t\t\t\"META-INF/MANIFEST.MF\",", "-\t\t\t\t\t\"Manifest-Version: 1.0\\n\" +", "-\t\t\t\t\t\"Class-Path: lib1.jar\\n\",", "-\t\t\t\t},", "-\t\t\t\tJavaCore.VERSION_1_4);", "-\t\tcreateFile(\"/P/lib1.jar\", \"\");", "-\t\t", "-\t\tClasspathContainerInitializer initializer= JavaCore.getClasspathContainerInitializer(JavaCore.USER_LIBRARY_CONTAINER_ID);", "-\t\tString libraryName = \"TestUserLibrary\";", "-\t\tIPath containerPath = new Path(JavaCore.USER_LIBRARY_CONTAINER_ID);", "-\t\tUserLibraryClasspathContainer containerSuggestion = new UserLibraryClasspathContainer(libraryName);", "-\t\tinitializer.requestClasspathContainerUpdate(containerPath.append(libraryName), null, containerSuggestion);", "-", "-\t\tIEclipsePreferences preferences = new InstanceScope().getNode(JavaCore.PLUGIN_ID);", "-\t\tString propertyName = JavaModelManager.CP_USERLIBRARY_PREFERENCES_PREFIX+\"TestUserLibrary\";", "-\t\tStringBuffer propertyValue = new StringBuffer(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<userlibrary systemlibrary=\\\"false\\\" version=\\\"1\\\">\\r\\n<archive\");", "-\t\tpropertyValue.append(\" path=\\\"\" + libJar.getAbsolutePath());", "-\t\tpropertyValue.append(\"\\\"/>\\r\\n</userlibrary>\\r\\n\");", "-\t\tpreferences.put(propertyName, propertyValue.toString());", "-\t\tpreferences.flush();\t", "-\t\t", "-\t\tclasspath[0] = JavaCore.newContainerEntry(containerSuggestion.getPath());", "-\t\t", "-\t\tproj.setRawClasspath(classpath, null);", "-\t\twaitForAutoBuild();", "-\t\tIProject project = getWorkspaceRoot().getProject(\"P\");", "-\t\tIResource resource = project.getFile(\"container.jar\");", "-\t\tassertTrue(proj.isOnClasspath(resource));", "-\t\tIJavaElement element = proj.getPackageFragmentRoot(resource);", "-\t\tassertTrue(proj.isOnClasspath(element));", "-", "-\t\tresource = project.getFile(\"lib1.jar\");", "-\t\tassertTrue(proj.isOnClasspath(resource));", "-\t\telement = proj.getPackageFragmentRoot(resource);", "-\t\tassertTrue(proj.isOnClasspath(element));", "-\t\t", "-\t} finally {", "-\t\tthis.deleteProject(\"P\");", "-\t}", "-}", "+ */", "+public void testBug305037() throws Exception {", "+\tFile libDir = null;", "+\ttry {", "+", "+\t\tIJavaProject proj = this.createJavaProject(\"P\", new String[] {}, \"bin\");", "+\t\tIPath libPath = proj.getResource().getLocation();", "+\t\tJavaCore.setClasspathVariable(\"MyVar\", libPath, null);", "+\t\tlibDir = new File(libPath.toPortableString());", "+\t\tIClasspathEntry[] classpath = new IClasspathEntry[1];", "+\t\tFile libJar = new File(libDir, \"variable.jar\");", "+\t\tlibJar.createNewFile();", "+\t\t", "+\t\taddLibrary(proj, \"variable.jar\", null, new String[0], ", "+\t\t\t\tnew String[] {", "+\t\t\t\t\"META-INF/MANIFEST.MF\",", "+\t\t\t\t\"Manifest-Version: 1.0\\n\" +", "+\t\t\t\t\"Class-Path: lib1.jar\\n\",", "+\t\t\t},", "+\t\t\tJavaCore.VERSION_1_4); ", "+", "+\t\tcreateFile(\"/P/lib1.jar\", \"\");", "+\t\t", "+\t\tclasspath = proj.getResolvedClasspath(true);", "+\t\tassertClasspathEquals(classpath, ", "+\t\t\t\t\"/P/lib1.jar[CPE_LIBRARY][K_BINARY][isExported:true]\\n\" + ", "+\t\t\t\t\"/P/variable.jar[CPE_LIBRARY][K_BINARY][isExported:true]\");", "+\t\t", "+\t\tIClasspathEntry[] chains = JavaCore.getReferencedClasspathEntries(classpath[1], null);", "+\t\tassertClasspathEquals(chains, \"/P/lib1.jar[CPE_LIBRARY][K_BINARY][isExported:true]\");", "+\t\t((ClasspathEntry)chains[0]).sourceAttachmentPath = new Path(\"/P/efg.zip\");", "+\t\t((ClasspathEntry)chains[0]).sourceAttachmentRootPath = new Path(\"/src2\");", "+", "+\t\tIClasspathAttribute javadocLoc = JavaCore.newClasspathAttribute(\"javadoc_location\", \"/P/efg.zip\");", "+\t\t((ClasspathEntry)chains[0]).extraAttributes = new IClasspathAttribute[]{javadocLoc};", "+\t\t", "+\t\tproj.setRawClasspath(proj.getRawClasspath(), chains, proj.getOutputLocation(), null);", "+\t\tclasspath = proj.getResolvedClasspath(true);", "+\t\tassertClasspathEquals(classpath, ", "+\t\t\t\t\"/P/lib1.jar[CPE_LIBRARY][K_BINARY][sourcePath:/P/efg.zip][rootPath:/src2][isExported:true][attributes:javadoc_location=/P/efg.zip]\\n\" + ", "+\t\t\t\t\"/P/variable.jar[CPE_LIBRARY][K_BINARY][isExported:true]\");", "+\t} finally {", "+\t\tthis.deleteProject(\"P\");", "+\t\tJavaCore.removeClasspathVariable(\"MyVar\", null);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab96a8f627152f3fd1e0f391b54ddb89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 128, "signatureBeforeChange": " public void testExternalJarScope() throws CoreException, IOException", "signatureAfterChange": " public void testSearchScope05() throws CoreException, IOException", "diff": ["-public void testExternalJarScope() throws CoreException, IOException {", "-\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\tFile workspaceLocation = new File(workspace.getRoot().getLocation().toOSString());", "-\tFile minimalJar = new File(workspaceLocation, \"JavaSearch/MyJar.jar\");", "-\tFile externalJar = new File(workspaceLocation.getParentFile(), \"MyJar.jar\");", "-\tIJavaProject project = this.getJavaProject(\"JavaSearch\");", "-\tIClasspathEntry[] classpath = project.getRawClasspath();", "-\ttry {", "-\t\tcopy(minimalJar, externalJar);", "-\t\tint length = classpath.length;", "-\t\tIClasspathEntry[] newClasspath = new IClasspathEntry[length];", "-\t\tSystem.arraycopy(classpath, 0, newClasspath, 0, length-1);", "-\t\tString externalPath = externalJar.getAbsolutePath();", "-\t\tnewClasspath[length-1] = JavaCore.newLibraryEntry(new Path(externalPath), new Path(externalPath), null, false);", "-\t\tproject.setRawClasspath(newClasspath, null);", "-\t\t", "-\t\tIPackageFragment pkg = this.getPackageFragment(\"JavaSearch\", externalPath, \"p0\");", "-\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {pkg});", "-\t\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\t\tsearch(", "-\t\t\t\"X\", ", "-\t\t\tTYPE,", "-\t\t\tDECLARATIONS,", "-\t\t\tscope,", "-\t\t\tresultCollector);", "-\t\tassertSearchResults(", "-\t\t\texternalJar.getCanonicalPath()+ \" p0.X\",", "-\t\t\tresultCollector);", "-\t\t\t", "-\t\tIClassFile classFile = pkg.getClassFile(\"X.class\");", "-\t\tscope = SearchEngine.createJavaSearchScope(new IJavaElement[] {classFile});", "-\t\tresultCollector = new JavaSearchResultCollector();", "-\t\tsearch(", "-\t\t\tclassFile.getType(), ", "-\t\t\tDECLARATIONS,", "-\t\t\tscope,", "-\t\t\tresultCollector);", "-\t\tassertSearchResults(", "-\t\t\texternalJar.getCanonicalPath()+ \" p0.X\",", "-\t\t\tresultCollector);", "-\t\t", "-\t} finally {", "-\t\texternalJar.delete();", "-\t\tproject.setRawClasspath(classpath, null);", "-\t}", "-\t", "+ */", "+public void testSearchScope05() throws CoreException, IOException { // was testExternalJarScope", "+\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\tFile workspaceLocation = new File(workspace.getRoot().getLocation().toOSString());", "+\tFile minimalJar = new File(workspaceLocation, \"JavaSearch/MyJar.jar\");", "+\tFile externalJar = new File(workspaceLocation.getParentFile(), \"MyJar.jar\");", "+\tIJavaProject project = this.getJavaProject(\"JavaSearch\");", "+\tIClasspathEntry[] classpath = project.getRawClasspath();", "+\ttry {", "+\t\tcopy(minimalJar, externalJar);", "+\t\tint length = classpath.length;", "+\t\tIClasspathEntry[] newClasspath = new IClasspathEntry[length];", "+\t\tSystem.arraycopy(classpath, 0, newClasspath, 0, length-1);", "+\t\tString externalPath = externalJar.getAbsolutePath();", "+\t\tnewClasspath[length-1] = JavaCore.newLibraryEntry(new Path(externalPath), new Path(externalPath), null, false);", "+\t\tproject.setRawClasspath(newClasspath, null);", "+\t\t", "+\t\tIPackageFragment pkg = this.getPackageFragment(\"JavaSearch\", externalPath, \"p0\");", "+\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {pkg});", "+\t\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "+\t\tsearch(", "+\t\t\t\"X\", ", "+\t\t\tTYPE,", "+\t\t\tDECLARATIONS,", "+\t\t\tscope,", "+\t\t\tresultCollector);", "+\t\tassertSearchResults(", "+\t\t\texternalJar.getCanonicalPath()+ \" p0.X\",", "+\t\t\tresultCollector);", "+\t\t\t", "+\t\tIClassFile classFile = pkg.getClassFile(\"X.class\");", "+\t\tscope = SearchEngine.createJavaSearchScope(new IJavaElement[] {classFile});", "+\t\tresultCollector = new JavaSearchResultCollector();", "+\t\tsearch(", "+\t\t\tclassFile.getType(), ", "+\t\t\tDECLARATIONS,", "+\t\t\tscope,", "+\t\t\tresultCollector);", "+\t\tassertSearchResults(", "+\t\t\texternalJar.getCanonicalPath()+ \" p0.X\",", "+\t\t\tresultCollector);", "+\t\t", "+\t} finally {", "+\t\texternalJar.delete();", "+\t\tproject.setRawClasspath(classpath, null);", "+\t}", "+\t", "+}"]}], "num": 60424}
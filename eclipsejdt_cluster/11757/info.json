{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edac387a6720f59fb283dd7a795da0fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2f64c4769b5a298323bed5ed2bb74b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "b30ecd55b63bbdd62f315360c74e8322b58d428b", "commitAfterChange": "8ca0d4068ff2e48c52b6cad25c5d2f5c2d9eace8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r void recordReference(char[][] qualifiedName)", "signatureAfterChange": "\r void recordReference(char[][] qualifiedName)", "diff": ["-\tswitch (length) {\r", "-\t\tcase 0 : return;\r", "-\t\tcase 1 :\r", "-\t\t\trecordSimpleReference(qualifiedName[0]);\r", "-\t\t\treturn;\r", "-\t\tcase 2 :\r", "-\t\t\tif (!qualifiedReferences.contains(qualifiedName))\r", "-\t\t\t\tqualifiedReferences.add(qualifiedName);\r", "-\r", "-\t\t\trecordSimpleReference(qualifiedName[0]);\r", "-\t\t\trecordSimpleReference(qualifiedName[1]);\r", "-\t\t\treturn;\r", "-\t\tdefault :\r", "-\t\t\tif (!qualifiedReferences.contains(qualifiedName))\r", "-\t\t\t\tqualifiedReferences.add(qualifiedName);\r", "-\r", "-\t\t\tchar[][] qName = new char[length - 1][];\r", "-\t\t\tSystem.arraycopy(qualifiedName, 0, qName, 0, length - 1);\r", "-\t\t\trecordReference(qName);\r", "-\t\t\trecordSimpleReference(qualifiedName[length - 1]);\r", "+\tif (length > 1) {\r", "+\t\twhile (!qualifiedReferences.contains(qualifiedName)) {\r", "+\t\t\tqualifiedReferences.add(qualifiedName);\r", "+\t\t\tif (length == 2) {\r", "+\t\t\t\trecordSimpleReference(qualifiedName[0]);\r", "+\t\t\t\trecordSimpleReference(qualifiedName[1]);\r", "+\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t\tlength--;\r", "+\t\t\trecordSimpleReference(qualifiedName[length]);\r", "+\t\t\tSystem.arraycopy(qualifiedName, 0, qualifiedName = new char[length][], 0, length);\r", "+\t\t}\r", "+\t} else if (length == 1) {\r", "+\t\trecordSimpleReference(qualifiedName[0]);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe05d244e29505f0ee4880382af417c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "324863400f4389e9f875d1a388b059a798fc9b0e", "commitAfterChange": "3861d4cfff200f4a20f9b2846cf8819b2fe85539", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate char[][][] typeParameterNames(IType type)", "signatureAfterChange": " private char[][][] typeParameterNames(IType type)", "diff": ["-\t */", "-\tprivate char[][][] typeParameterNames(IType type) {", "-\t\tchar[][][] typeParameters = new char[10][][];", "-\t\tint ptr = -1;", "-\t\ttry {", "-\t\t\tIJavaElement parent = type;", "-\t\t\tITypeParameter[] parameters = null;", "-\t\t\twhile (parent != null) {", "-\t\t\t\tswitch(parent.getElementType()) {", "-\t\t\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t\t\tif (++ptr > typeParameters.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tparameters = ((BinaryType) parent).getTypeParameters();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IJavaElement.TYPE:", "-\t\t\t\t\t\tif (++ptr > typeParameters.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tparameters = ((SourceType) parent).getTypeParameters();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tif (ptr <0) return null;", "-\t\t\t\t\t\tif (++ptr < typeParameters.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "-\t\t\t\t\t\treturn typeParameters;", "-\t\t\t\t}", "-\t\t\t\tint length = parameters==null ? 0 : parameters.length;", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\ttypeParameters[ptr] = new char[length][];", "-\t\t\t\t\tfor (int i=0; i<length; i++)", "-\t\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "-\t\t\t\t}", "-\t\t\t\tparent = parent.getParent();", "+ */", "+private char[][][] typeParameterNames(IType type) {", "+\tchar[][][] typeParameters = new char[10][][];", "+\tint ptr = -1;", "+\ttry {", "+\t\tIJavaElement parent = type;", "+\t\tITypeParameter[] parameters = null;", "+\t\tboolean hasParameters = false;", "+\t\twhile (parent != null) {", "+\t\t\tif (parent.getElementType() != IJavaElement.TYPE) {", "+\t\t\t\tif (!hasParameters) return null;", "+\t\t\t\tif (++ptr < typeParameters.length)", "+\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "+\t\t\t\treturn typeParameters;", "+\t\t\tif (++ptr > typeParameters.length) {", "+\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "+\t\t\t}", "+\t\t\tIType parentType = (IType) parent;", "+\t\t\tif (parentType.isBinary()) {", "+\t\t\t\tparameters = ((BinaryType) parent).getTypeParameters();", "+\t\t\t} else {", "+\t\t\t\tparameters = ((SourceType) parent).getTypeParameters();", "+\t\t\t}", "+\t\t\tint length = parameters==null ? 0 : parameters.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\thasParameters = true;", "+\t\t\t\ttypeParameters[ptr] = new char[length][];", "+\t\t\t\tfor (int i=0; i<length; i++)", "+\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t}", "+\t\t\tparent = parent.getParent();", "-\t\tcatch (JavaModelException jme) {", "-\t\t\treturn null;", "-\t\t}", "-\t\treturn typeParameters;", "+\tcatch (JavaModelException jme) {", "+\t\treturn null;", "+\t}", "+\treturn typeParameters;", "+}"]}], "num": 11757}
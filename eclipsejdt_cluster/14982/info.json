{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e71e3947c85faefae2a8d8f2bb61236", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64175e79dd573ff55923d5fafd5ead3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {", "-\t\tsuper.manageSyntheticReadAccessIfNecessary(currentScope, flowInfo);", "+\t\tsuper.manageSyntheticAccessIfNecessary(currentScope, flowInfo, isReadAccess);", "-\t", "+", "-\t\treturn;", "+\t\treturn;\t", "+\t// if field from parameterized type got found, use the original field at codegen time", "+\tif (this.binding instanceof ParameterizedFieldBinding) {", "+\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "+\t    this.codegenBinding = parameterizedField.originalField;", "+\t    FieldBinding fieldCodegenBinding = (FieldBinding)this.codegenBinding;", "+\t    // extra cast needed if field type was type variable", "+\t    if ((fieldCodegenBinding.type.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t        this.genericCast = fieldCodegenBinding.type.genericCast(parameterizedField.type);", "+\t    }\t\t    ", "+\t}\t\t", "-//\t\t\tif (((this.bits & DepthMASK) != 0)", "-//\t\t\t\t&& (fieldBinding.isPrivate() // private access", "-//\t\t\t\t\t|| (fieldBinding.isProtected() // implicit protected access", "-//\t\t\t\t\t\t\t&& fieldBinding.declaringClass.getPackage() ", "-//\t\t\t\t\t\t\t\t!= this.delegateThis.type.getPackage()))) {", "-//\t\t\t\tif (this.syntheticAccessors == null)", "-//\t\t\t\t\tthis.syntheticAccessors = new MethodBinding[2];", "-//\t\t\t\tthis.syntheticAccessors[READ] = ", "-//\t\t\t\t\t((SourceTypeBinding)currentScope.enclosingSourceType().", "-//\t\t\t\t\t\tenclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT)).", "-//\t\t\t\t\t\t\taddSyntheticMethod(fieldBinding, true);", "-//\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(fieldBinding, this);", "-//\t\t\t\treturn;", "-//\t\t\t}", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)this.delegateThis.type);", "-\t\t}", "-\t}", "-}", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding((FieldBinding)this.codegenBinding, (ReferenceBinding)this.delegateThis.type.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dcba064337a4e9a31f44ed3d3957356", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess){", "+\t// if field from parameterized type got found, use the original field at codegen time", "+\tif (this.binding instanceof ParameterizedFieldBinding) {", "+\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "+\t    this.codegenBinding = parameterizedField.originalField;", "+\t    // extra cast needed if field type was type variable", "+\t    if (this.codegenBinding.type.isTypeVariable()) {", "+\t        TypeVariableBinding variableReturnType = (TypeVariableBinding) this.codegenBinding.type;", "+\t        if (variableReturnType.firstBound != parameterizedField.type) { // no need for extra cast if same as first bound anyway", "+\t\t\t    this.genericCast = parameterizedField.type.erasure();", "+\t        }", "+\t    }", "+\t} else {", "+\t    this.codegenBinding = this.binding;", "- */", "-public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo){", "-\t// The private access will be managed through the code generation", "-", "-\tif (!flowInfo.isReachable()) return;", "-\t", "+\t\t", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.binding, (ReferenceBinding)this.delegateThis.type);", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.codegenBinding, (ReferenceBinding)this.delegateThis.type.erasure());", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.binding, (ReferenceBinding) this.receiverType);", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.codegenBinding, (ReferenceBinding) this.receiverType.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3ca6648343c2518bf303c6a25874e1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["+", "+\t// if method from parameterized type got found, use the original method at codegen time", "+\tthis.codegenBinding = this.binding.original();", "+\tif (this.codegenBinding != this.binding) {", "+\t    // extra cast needed if method return type was type variable", "+\t    if (this.codegenBinding.returnType.isTypeVariable()) {", "+\t        TypeVariableBinding variableReturnType = (TypeVariableBinding) this.codegenBinding.returnType;", "+\t        if (variableReturnType.firstBound != this.binding.returnType) { // no need for extra cast if same as first bound anyway", "+\t\t\t    this.genericCast = this.binding.returnType;", "+\t        }", "+\t    }", "+\t} ", "-\t\t\t\t&& (!this.receiver.isImplicitThis() || !this.binding.isStatic())", "+\t\t\t\t&& (!this.receiver.isImplicitThis() || !this.codegenBinding.isStatic())", "-\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedMethodBinding(this.binding, (ReferenceBinding) this.qualifyingType);", "+\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedMethodBinding(this.codegenBinding, (ReferenceBinding) this.qualifyingType.erasure());"]}], "num": 14982}
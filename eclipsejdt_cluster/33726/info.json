{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "296a352c72d14fba92bb18f6b8cf82c4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c7347557a78033bd5ecec31182c7d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "83445beb69e15e5eb2488d8746136cbbd8c4461a", "commitAfterChange": "cff902ed861deb5cff157c45c8eb21f377de7ae3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic boolean setUpperBounds(TypeBinding[] upperBounds, ReferenceBinding javaLangObject)", "signatureAfterChange": " \t \tpublic boolean setUpperBounds(TypeBinding[] upperBounds, ReferenceBinding javaLangObject)", "diff": ["+\t\tif (!isConsistentIntersection(upperBounds))", "+\t\t\treturn false;", "-\t\t\tif (!aBound.isWildcard() && !aBound.isTypeVariable() && aBound.isProperType(true)) {", "-\t\t\t\t// check for inconsistency between any two real types:", "-\t\t\t\tfor (int j = 0; j < upperBounds.length; j++) {", "-\t\t\t\t\tif (i == j) continue;", "-\t\t\t\t\tTypeBinding otherBound = upperBounds[j];", "-\t\t\t\t\tif (!otherBound.isWildcard() && !otherBound.isTypeVariable() && otherBound.isProperType(true))", "-\t\t\t\t\t\tif (aBound.erasure().isCompatibleWith(otherBound.erasure()))", "-\t\t\t\t\t\t\tif (!aBound.isCompatibleWith(otherBound))", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t\t\tthis.superclass = (ReferenceBinding) upperBounds[i];", "+\t\t\t\t\tthis.superclass = (ReferenceBinding) aBound;", "-\t\t\t\t// TODO: what about additional super classes?? (see isCompatibleWith)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b500d8ead9aad7ff093c9ee0003d43fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "commitAfterChange": "dd2d999bb92f1e106218a30e477eebe8f58b2e19", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic char[] readableName()", "signatureAfterChange": " \t \tpublic char[] readableName()", "diff": ["-\t\t\tif (!this.inRecursiveFunction) {", "+\t\t\tif (this.recursionLevel < 2) {", "-\t\t\t\t\tthis.inRecursiveFunction = true;", "+\t\t\t\t\tthis.recursionLevel ++;", "+\t\t\t\t\tif (this.upperBounds != null && this.upperBounds.length > 1) {", "+\t\t\t\t\t\tStringBuffer sb = new StringBuffer();", "+\t\t\t\t\t\tsb.append(this.upperBounds[0].readableName());", "+\t\t\t\t\t\tfor (int i = 1; i < this.upperBounds.length; i++)", "+\t\t\t\t\t\t\tsb.append('&').append(this.upperBounds[i].readableName());", "+\t\t\t\t\t\tint len = sb.length();", "+\t\t\t\t\t\tchar[] name = new char[len];", "+\t\t\t\t\t\tsb.getChars(0, len, name, 0);", "+\t\t\t\t\t\treturn name;", "+\t\t\t\t\t}", "-\t\t\t\t\tthis.inRecursiveFunction = false;", "+\t\t\t\t\tthis.recursionLevel--;", "-\t\t\t} else {\t\t\t\t", "-\t\t\t\treturn this.firstBound.erasure().readableName();", "+\t\t\t} else {", "+\t\t\t\treturn this.originalName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c959c4b33c43981f30ecd53aca1327ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "a41e619c58860e4fb0ad103984917e455aa47d4f", "commitAfterChange": "6166acc1a72eef4415ab90fa4d71205848f659db", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic boolean encloses(IJavaElement element)", "signatureAfterChange": " \tpublic boolean encloses(IJavaElement element)", "diff": ["-\t\t\tif (this.focusType.equals(element.getAncestor(IJavaElement.TYPE))) {", "+\t\t\tif (this.subTypes == null && this.focusType.equals(element.getAncestor(IJavaElement.TYPE))) {", "+\t\t\t// potentially allow travelling in:", "+\t\t\tif (enclosesType(type, this.allowMemberTypes)) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tif (this.allowMemberTypes) {", "+\t\t\t\t// travel out: queried type is enclosed in this scope if its (indirect) declaring type is:", "+\t\t\t\tIType enclosing = type.getDeclaringType();", "+\t\t\t\twhile (enclosing != null) {", "+\t\t\t\t\t// don't allow travelling in again:", "+\t\t\t\t\tif (enclosesType(enclosing, false)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\tenclosing = enclosing.getDeclaringType();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}", "-\t\t\t\t\treturn this.hierarchy.contains(original);"]}], "num": 33726}
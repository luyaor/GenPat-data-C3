{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80c8d8032fcffb89638957022fcc59ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1666e689e80c78a742c55523a63523b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "30ec825eb31162680cfe9de305168a6c878fa9bb", "commitAfterChange": "80d1a1c8c9608e72c63b677a4e2d1f5e89ff648c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r private char[] normalizeCRs(char[] text)", "signatureAfterChange": "\r private char[] normalizeCRs(char[] text)", "diff": ["-\t\t\t\tline = new char[lineLength];\r", "-\t\t\t\tSystem.arraycopy(text, lineStart, line, 0, lineLength);\r", "-\t\t\t\tbuffer.append(line);\r", "-\t\t\t\tbuffer.append(lineSeparator);\r", "-\t\t\t\tif (nextChar == '\\n') {\r", "-\t\t\t\t\tnextChar = ' ';\r", "-\t\t\t\t\ti++;\r", "+\t\t\t\tif (lineLength >= 0) {\r", "+\t\t\t\t\tline = new char[lineLength];\r", "+\t\t\t\t\tSystem.arraycopy(text, lineStart, line, 0, lineLength);\r", "+\t\t\t\t\tbuffer.append(line);\r", "+\t\t\t\t\tbuffer.append(lineSeparator);\r", "+\t\t\t\t\tif (nextChar == '\\n') {\r", "+\t\t\t\t\t\tnextChar = ' ';\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tlineStart = i+2;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// when line separator are mixed in the same file\r", "+\t\t\t\t\t// we need to prevent NegativeArraySizeException\r", "+\t\t\t\t\tlineStart = i+1;\r", "-\t\t\t\tlineStart = i+1;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f257539694499d90cb5046bf386d2a8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "397b4e3ed0763b9154b9457179f3bf00dfce6fda", "commitAfterChange": "c1b5f5f632401df85770168089dd8ad2cf8c4272", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r private char[] normalizeCRs(char[] text)", "signatureAfterChange": "\r private char[] normalizeCRs(char[] text)", "diff": ["-\t\t\t\tline = new char[lineLength];\r", "-\t\t\t\tSystem.arraycopy(text, lineStart, line, 0, lineLength);\r", "-\t\t\t\tbuffer.append(line);\r", "-\t\t\t\tbuffer.append(lineSeparator);\r", "-\t\t\t\tif (nextChar == '\\n') {\r", "-\t\t\t\t\tnextChar = ' ';\r", "+\t\t\t\tif (lineLength >= 0) {\r", "+\t\t\t\t\tline = new char[lineLength];\r", "+\t\t\t\t\tSystem.arraycopy(text, lineStart, line, 0, lineLength);\r", "+\t\t\t\t\tbuffer.append(line);\r", "+\t\t\t\t\tbuffer.append(lineSeparator);\r", "+\t\t\t\t\tif (nextChar == '\\n') {\r", "+\t\t\t\t\t\tnextChar = ' ';\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tlineStart = i+2;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// when line separator are mixed in the same file\r", "+\t\t\t\t\t// we need to prevent NegativeArraySizeException\r", "+\t\t\t\t\tlineStart = i+1;\r", "-\t\t\t\tlineStart = i+2;\r"]}], "num": 7864}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bec09a68ff649b55189b4e9ed4827221", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a8ae50fb6f517d3746d2a52ea501180", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "2314c16241660b35014c2f51be7d9e9dcaef9a58", "commitAfterChange": "ceea24195947a1526b56f97d57fd4f7128a7bbd1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testCreateBindings01() throws JavaModelException", "signatureAfterChange": " \tpublic void testCreateBindings01() throws JavaModelException", "diff": ["-\t\tICompilationUnit[] workingCopies = new ICompilationUnit[3];", "-\t\ttry {", "-\t\t\tworkingCopies[0] = getWorkingCopy(", "-\t\t\t\t\"/P/src/X.java\", ", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"  public void foo(int i, String s) {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\towner, false);", "-\t\t\tworkingCopies[1] = getWorkingCopy(", "-\t\t\t\t\"/P/src/Y.java\", ", "-\t\t\t\t\"public class Y extends X {\\n\" +", "-\t\t\t\t\"  void bar() {\\n\" +", "-\t\t\t\t\"    new Y() {};\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\towner, false);", "-\t\t\tworkingCopies[2] = getWorkingCopy(", "-\t\t\t\t\"/P/src/I.java\", ", "-\t\t\t\t\"public interface I {\\n\" +", "-\t\t\t\t\"  int BAR;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\towner, false);", "-\t\t\tIType typeX = workingCopies[0].getType(\"X\");", "-\t\t\tIJavaElement[] elements = new IJavaElement[] {", "-\t\t\t\ttypeX, ", "-\t\t\t\tgetClassFile(\"P\", getExternalJCLPathString(), \"java.lang\", \"Object.class\").getType(),", "-\t\t\t\ttypeX.getMethod(\"foo\", new String[] {\"I\", \"QString;\"}),", "-\t\t\t\tworkingCopies[2].getType(\"I\").getField(\"BAR\"),", "-\t\t\t\tworkingCopies[1].getType(\"Y\").getMethod(\"bar\", new String[0]).getType(\"\", 1)", "-\t\t\t};", "-\t\t\tIBinding[] bindings = parser.createBindings(elements, null);", "-\t\t\tassertBindingsEqual(", "-\t\t\t\t\"LX;\\n\" + ", "-\t\t\t\t\"Ljava/lang/Object;\\n\" + ", "-\t\t\t\t\"LX;.foo(ILjava/lang/String;)V\\n\" + ", "-\t\t\t\t\"LI;.BAR\\n\" + ", "-\t\t\t\t\"LY$1;\",", "-\t\t\t\tbindings);", "-\t\t} finally {", "-\t\t\tfor (int i = 0, length = workingCopies.length; i < length; i++) {", "-\t\t\t\tif (workingCopies[i] != null)", "-\t\t\t\t\tworkingCopies[i].discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tthis.workingCopies = new ICompilationUnit[3];", "+\t\tthis.workingCopies[0] = getWorkingCopy(", "+\t\t\t\"/P/src/X.java\", ", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public void foo(int i, String s) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\",", "+\t\t\towner, false);", "+\t\tthis.workingCopies[1] = getWorkingCopy(", "+\t\t\t\"/P/src/Y.java\", ", "+\t\t\t\"public class Y extends X {\\n\" +", "+\t\t\t\"  void bar() {\\n\" +", "+\t\t\t\"    new Y() {};\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\",", "+\t\t\towner, false);", "+\t\tthis.workingCopies[2] = getWorkingCopy(", "+\t\t\t\"/P/src/I.java\", ", "+\t\t\t\"public interface I {\\n\" +", "+\t\t\t\"  int BAR;\\n\" +", "+\t\t\t\"}\",", "+\t\t\towner, false);", "+\t\tIType typeX = this.workingCopies[0].getType(\"X\");", "+\t\tIJavaElement[] elements = new IJavaElement[] {", "+\t\t\ttypeX, ", "+\t\t\tgetClassFile(\"P\", getExternalJCLPathString(), \"java.lang\", \"Object.class\").getType(),", "+\t\t\ttypeX.getMethod(\"foo\", new String[] {\"I\", \"QString;\"}),", "+\t\t\tthis.workingCopies[2].getType(\"I\").getField(\"BAR\"),", "+\t\t\tthis.workingCopies[1].getType(\"Y\").getMethod(\"bar\", new String[0]).getType(\"\", 1)", "+\t\t};", "+\t\tIBinding[] bindings = parser.createBindings(elements, null);", "+\t\tassertBindingsEqual(", "+\t\t\t\"LX;\\n\" + ", "+\t\t\t\"Ljava/lang/Object;\\n\" + ", "+\t\t\t\"LX;.foo(ILjava/lang/String;)V\\n\" + ", "+\t\t\t\"LI;.BAR\\n\" + ", "+\t\t\t\"LY$1;\",", "+\t\t\tbindings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d220d41c074c3cdc7a090e12c4b88694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testBug72866() throws CoreException", "signatureAfterChange": " \tpublic void testBug72866() throws CoreException", "diff": ["-\t\tICompilationUnit[] workingCopies = new ICompilationUnit[4];", "-\t\ttry {", "-\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "-\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/A.java\",", "-\t\t\t\t\"package b72866;\\n\" + ", "-\t\t\t\t\"public abstract class A {\\n\" + ", "-\t\t\t\t\"\tpublic abstract void foo(V v);\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner", "-\t\t\t\t);", "-\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/SX.java\",", "-\t\t\t\t\"package b72866;\\n\" + ", "-\t\t\t\t\"public class SX extends A {\\n\" + ", "-\t\t\t\t\"\tpublic void foo(V v) {\\n\" + ", "-\t\t\t\t\"\t    v.bar(this);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"\t,", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/V.java\",", "-\t\t\t\t\"package b72866;\\n\" + ", "-\t\t\t\t\"public class V {\\n\" + ", "-\t\t\t\t\"\tvoid bar(A a) {}\\n\" + ", "-\t\t\t\t\"\tvoid bar(X x) {}\\n\" + ", "-\t\t\t\t\"\tvoid bar(SX s) {}\\n\" + ", "-\t\t\t\t\"}\\n\"\t,", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/X.java\",", "-\t\t\t\t\"package b72866;\\n\" + ", "-\t\t\t\t\"public class X extends A {\\n\" + ", "-\t\t\t\t\"\tpublic void foo(V v) {\\n\" + ", "-\t\t\t\t\"\t    v.bar(this);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"\t,", "-\t\t\t\towner,", "-\t\t\t\ttrue\t);", "-\t\t\t// search for first and second method should both return 2 inaccurate matches", "-\t\t\tIType type = workingCopies[2].getType(\"V\");", "-\t\t\tIMethod method = type.getMethod(\"bar\", new String[] {\"QX;\"});", "-\t\t\tsearch(method, REFERENCES);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b72866/X.java void b72866.X.foo(V) [bar(this)] EXACT_MATCH\"", "+\t\tworkingCopies = new ICompilationUnit[4];", "+\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/A.java\",", "+\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\"public abstract class A {\\n\" + ", "+\t\t\t\"\tpublic abstract void foo(V v);\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue", "-\t\t}", "-\t\tfinally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/SX.java\",", "+\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\"public class SX extends A {\\n\" + ", "+\t\t\t\"\tpublic void foo(V v) {\\n\" + ", "+\t\t\t\"\t    v.bar(this);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"\t,", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/V.java\",", "+\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\"public class V {\\n\" + ", "+\t\t\t\"\tvoid bar(A a) {}\\n\" + ", "+\t\t\t\"\tvoid bar(X x) {}\\n\" + ", "+\t\t\t\"\tvoid bar(SX s) {}\\n\" + ", "+\t\t\t\"}\\n\"\t,", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/X.java\",", "+\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\"public class X extends A {\\n\" + ", "+\t\t\t\"\tpublic void foo(V v) {\\n\" + ", "+\t\t\t\"\t    v.bar(this);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"\t,", "+\t\t\towner,", "+\t\t\ttrue\t);", "+\t\tIType type = workingCopies[2].getType(\"V\");", "+\t\tIMethod method = type.getMethod(\"bar\", new String[] {\"QX;\"});", "+\t\tsearch(method, REFERENCES);", "+\t\tassertSearchResults(", "+\t\t\t\"src/b72866/X.java void b72866.X.foo(V) [bar(this)] EXACT_MATCH\"", "+\t\t);"]}], "num": 48828}
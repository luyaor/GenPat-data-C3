{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ce46999d8cf047632c1a6445371eb0c", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89826bb35b16f52d53d88954c0edf723", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "signatureAfterChange": "\r protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "diff": ["- */\r", "-protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "-\tif (enclosingNamePattern == null) {\r", "-\t\treturn this.matchesType(simpleNamePattern, qualificationPattern, type);\r", "-\t} else {\r", "-\t\tchar[] pattern;\r", "-\t\tif (qualificationPattern == null) {\r", "-\t\t\treturn matchesType(simpleNamePattern, enclosingNamePattern, type);\r", "-\t\t} else {\r", "-\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "-\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "-\t\t\treturn \r", "-\t\t\t\tthis.matchesType(simpleNamePattern, fullQualificationPattern, type)\r", "-\t\t\t\t&& CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'));\r", "-\t\t}\r", "+ */\r", "+protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "+\tif (enclosingNamePattern == null) {\r", "+\t\treturn this.matchLevelForType(simpleNamePattern, qualificationPattern, type);\r", "+\t} else {\r", "+\t\tchar[] pattern;\r", "+\t\tif (qualificationPattern == null) {\r", "+\t\t\treturn matchLevelForType(simpleNamePattern, enclosingNamePattern, type);\r", "+\t\t} else {\r", "+\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "+\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "+\t\t\tif ( CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'))) {\r", "+\t\t\t\treturn this.matchLevelForType(simpleNamePattern, fullQualificationPattern, type);\r", "+\t\t\t} else {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90a3dccd79a9bd0f3b4d41cdf667fe05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "signatureAfterChange": "\r protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "diff": ["- */\r", "-protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "-\tif (enclosingNamePattern == null) {\r", "-\t\treturn this.matchesType(simpleNamePattern, qualificationPattern, type);\r", "-\t} else {\r", "-\t\tchar[] pattern;\r", "-\t\tif (qualificationPattern == null) {\r", "-\t\t\treturn matchesType(simpleNamePattern, enclosingNamePattern, type);\r", "-\t\t} else {\r", "-\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "-\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "-\t\t\treturn \r", "-\t\t\t\tthis.matchesType(simpleNamePattern, fullQualificationPattern, type)\r", "-\t\t\t\t&& CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'));\r", "-\t\t}\r", "+ */\r", "+protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "+\tif (enclosingNamePattern == null) {\r", "+\t\treturn this.matchLevelForType(simpleNamePattern, qualificationPattern, type);\r", "+\t} else {\r", "+\t\tchar[] pattern;\r", "+\t\tif (qualificationPattern == null) {\r", "+\t\t\treturn matchLevelForType(simpleNamePattern, enclosingNamePattern, type);\r", "+\t\t} else {\r", "+\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "+\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "+\t\t\tif ( CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'))) {\r", "+\t\t\t\treturn this.matchLevelForType(simpleNamePattern, fullQualificationPattern, type);\r", "+\t\t\t} else {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abb8ecd0cd250dd5bf34de7130d7a1bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "60e138d2828b37f2615e0cced57acea3adb47644", "commitAfterChange": "3c340a30d5ee47c28968789969de0fd1189f5b30", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "signatureAfterChange": "\r protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "diff": ["- */\r", "-protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "-\tif (enclosingNamePattern == null) {\r", "-\t\treturn this.matchesType(simpleNamePattern, qualificationPattern, type);\r", "-\t} else {\r", "-\t\tchar[] pattern;\r", "-\t\tif (qualificationPattern == null) {\r", "-\t\t\treturn matchesType(simpleNamePattern, enclosingNamePattern, type);\r", "-\t\t} else {\r", "-\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "-\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "-\t\t\treturn \r", "-\t\t\t\tthis.matchesType(simpleNamePattern, fullQualificationPattern, type)\r", "-\t\t\t\t&& CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'));\r", "-\t\t}\r", "+ */\r", "+protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "+\tif (enclosingNamePattern == null) {\r", "+\t\treturn this.matchLevelForType(simpleNamePattern, qualificationPattern, type);\r", "+\t} else {\r", "+\t\tchar[] pattern;\r", "+\t\tif (qualificationPattern == null) {\r", "+\t\t\treturn matchLevelForType(simpleNamePattern, enclosingNamePattern, type);\r", "+\t\t} else {\r", "+\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "+\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "+\t\t\tif ( CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'))) {\r", "+\t\t\t\treturn this.matchLevelForType(simpleNamePattern, fullQualificationPattern, type);\r", "+\t\t\t} else {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abdaa0494db11bfd650715e7b256a98c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "signatureAfterChange": "\r protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "diff": ["- */\r", "-protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "-\tif (enclosingNamePattern == null) {\r", "-\t\treturn this.matchesType(simpleNamePattern, qualificationPattern, type);\r", "-\t} else {\r", "-\t\tchar[] pattern;\r", "-\t\tif (qualificationPattern == null) {\r", "-\t\t\treturn matchesType(simpleNamePattern, enclosingNamePattern, type);\r", "-\t\t} else {\r", "-\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "-\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "-\t\t\treturn \r", "-\t\t\t\tthis.matchesType(simpleNamePattern, fullQualificationPattern, type)\r", "-\t\t\t\t&& CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'));\r", "-\t\t}\r", "+ */\r", "+protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "+\tif (enclosingNamePattern == null) {\r", "+\t\treturn this.matchLevelForType(simpleNamePattern, qualificationPattern, type);\r", "+\t} else {\r", "+\t\tchar[] pattern;\r", "+\t\tif (qualificationPattern == null) {\r", "+\t\t\treturn matchLevelForType(simpleNamePattern, enclosingNamePattern, type);\r", "+\t\t} else {\r", "+\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "+\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "+\t\t\tif ( CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'))) {\r", "+\t\t\t\treturn this.matchLevelForType(simpleNamePattern, fullQualificationPattern, type);\r", "+\t\t\t} else {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc5da7d9b3e7b7ec789e4b091e84f46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "signatureAfterChange": "\r protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "diff": ["- */\r", "-protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "-\tif (enclosingNamePattern == null) {\r", "-\t\treturn this.matchesType(simpleNamePattern, qualificationPattern, type);\r", "-\t} else {\r", "-\t\tchar[] pattern;\r", "-\t\tif (qualificationPattern == null) {\r", "-\t\t\treturn matchesType(simpleNamePattern, enclosingNamePattern, type);\r", "-\t\t} else {\r", "-\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "-\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "-\t\t\treturn \r", "-\t\t\t\tthis.matchesType(simpleNamePattern, fullQualificationPattern, type)\r", "-\t\t\t\t&& CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'));\r", "-\t\t}\r", "+ */\r", "+protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "+\tif (enclosingNamePattern == null) {\r", "+\t\treturn this.matchLevelForType(simpleNamePattern, qualificationPattern, type);\r", "+\t} else {\r", "+\t\tchar[] pattern;\r", "+\t\tif (qualificationPattern == null) {\r", "+\t\t\treturn matchLevelForType(simpleNamePattern, enclosingNamePattern, type);\r", "+\t\t} else {\r", "+\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "+\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "+\t\t\tif ( CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'))) {\r", "+\t\t\t\treturn this.matchLevelForType(simpleNamePattern, fullQualificationPattern, type);\r", "+\t\t\t} else {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+}\r"]}], "num": 48324}
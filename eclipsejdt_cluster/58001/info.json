{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2366c55dd8ad8b7923b7ad2d71bfa41e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49af4666e919342ebc7b540de8d4f94b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2b13678db0d621fe0ef5f31efa222accad7645d1", "commitAfterChange": "62acea3260f4f00bef914855d231d5ca0b875fd6", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 126, "signatureBeforeChange": " \t \tprivate char[] getResolvedSignature(char[][] parameterTypes, char[] fullyQualifiedTypeName, int parameterCount, Scope scope)", "signatureAfterChange": " \t \tprivate char[] getResolvedSignature(char[][] parameterTypes, char[] fullyQualifiedTypeName, int parameterCount, Scope scope)", "diff": ["-\t\t} finally {", "-\t\t\tthis.lookupEnvironment.nameEnvironment = oldNameEnvironment;", "-\t\t}", "+\t\t", "-\t\tif (guessedType != null && guessedType.isValidBinding()) {", "-\t\t\tif (guessedType instanceof SourceTypeBinding) {", "-\t\t\t\tSourceTypeBinding refBinding = (SourceTypeBinding) guessedType;", "-\t\t\t\t", "-\t\t\t\trefBinding.methods(); // force resolution", "-\t\t\t\tif (refBinding.scope == null || refBinding.scope.referenceContext == null) return null;", "-\t\t\t\tTypeDeclaration typeDeclaration = refBinding.scope.referenceContext;", "-\t\t\t\tAbstractMethodDeclaration[] methods = typeDeclaration.methods;", "-\t\t\t\tnext : for (int i = 0; i < methods.length; i++) {", "-\t\t\t\t\tAbstractMethodDeclaration method = methods[i];", "+\t\t\tif (guessedType != null && guessedType.isValidBinding()) {", "+\t\t\t\tif (guessedType instanceof SourceTypeBinding) {", "+\t\t\t\t\tSourceTypeBinding refBinding = (SourceTypeBinding) guessedType;", "-\t\t\t\t\tif (method.binding == null || !method.isConstructor()) continue next;", "+\t\t\t\t\tif (refBinding.scope == null || refBinding.scope.referenceContext == null) return null;", "-\t\t\t\t\tArgument[] arguments = method.arguments;", "-\t\t\t\t\tint argumentsLength = arguments == null ? 0 : arguments.length;", "-\t\t\t\t\tif (parameterCount != argumentsLength) continue next;", "+\t\t\t\t\tTypeDeclaration typeDeclaration = refBinding.scope.referenceContext;", "+\t\t\t\t\tAbstractMethodDeclaration[] methods = typeDeclaration.methods;", "-\t\t\t\t\tfor (int j = 0; j < argumentsLength; j++) {", "-\t\t\t\t\t\tif (!CharOperation.equals(CharOperation.concatWith(arguments[j].type.getTypeName(), '.'), parameterTypes[j])) {", "-\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\tnext : for (int i = 0; i < methods.length; i++) {", "+\t\t\t\t\t\tAbstractMethodDeclaration method = methods[i];", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif (!method.isConstructor()) continue next;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tArgument[] arguments = method.arguments;", "+\t\t\t\t\t\tint argumentsLength = arguments == null ? 0 : arguments.length;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif (parameterCount != argumentsLength) continue next;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tfor (int j = 0; j < argumentsLength; j++) {", "+\t\t\t\t\t\t\tchar[] argumentTypeName = getTypeName(arguments[j].type);", "+\t", "+\t\t\t\t\t\t\tif (!CharOperation.equals(argumentTypeName, parameterTypes[j])) {", "+\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\trefBinding.resolveTypesFor(method.binding); // force resolution", "+\t\t\t\t\t\tif (method.binding == null) continue next;", "+\t\t\t\t\t\treturn getSignature(method.binding);", "-\t\t\t\t\t", "-\t\t\t\t\treturn getSignature(method.binding);", "+\t\t} finally {", "+\t\t\tthis.lookupEnvironment.nameEnvironment = oldNameEnvironment;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78ddd944e8e28558b50c1bd8ed879057", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "ad99e8346223888eb2f8e2613d918829f95fd2b2", "commitAfterChange": "7c65ba31905e387e2902b13fe71f33b55f069273", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": " \t \tprivate char[] getResolvedSignature(char[][] parameterTypes, char[] fullyQualifiedTypeName, int parameterCount, Scope scope)", "signatureAfterChange": " \t \tprivate char[] getResolvedSignature(char[][] parameterTypes, char[] fullyQualifiedTypeName, int parameterCount, Scope scope)", "diff": ["-\t\t\tif (guessedType instanceof ReferenceBinding) {", "-\t\t\t\tReferenceBinding refBinding = (ReferenceBinding) guessedType;", "+\t\t\tif (guessedType instanceof SourceTypeBinding) {", "+\t\t\t\tSourceTypeBinding refBinding = (SourceTypeBinding) guessedType;", "-\t\t\t\tMethodBinding bestConstructor = null;", "-\t\t\t\tint[] bestMatchingLengths = null;", "-\t\t\t\t", "-\t\t\t\tMethodBinding[] methods = refBinding.methods();", "+\t\t\t\trefBinding.methods(); // force resolution", "+\t\t\t\tif (refBinding.scope == null || refBinding.scope.referenceContext == null) return null;", "+\t\t\t\tTypeDeclaration typeDeclaration = refBinding.scope.referenceContext;", "+\t\t\t\tAbstractMethodDeclaration[] methods = typeDeclaration.methods;", "-\t\t\t\t\tMethodBinding method = methods[i];", "+\t\t\t\t\tAbstractMethodDeclaration method = methods[i];", "-\t\t\t\t\tif (!method.isConstructor()) break next;", "+\t\t\t\t\tif (method.binding == null || !method.isConstructor()) continue next;", "-\t\t\t\t\tTypeBinding[] parameters = method.parameters;", "-\t\t\t\t\t//TODO take careful of member types", "-\t\t\t\t\tint parametersLength = parameters == null ? 0 : parameters.length;", "-\t\t\t\t\tif (parameterCount != parametersLength) continue next;", "+\t\t\t\t\tArgument[] arguments = method.arguments;", "+\t\t\t\t\tint argumentsLength = arguments == null ? 0 : arguments.length;", "+\t\t\t\t\tif (parameterCount != argumentsLength) continue next;", "-\t\t\t\t\tint[] matchingLengths = new int[parameterCount];", "-\t\t\t\t\tfor (int j = 0; j < parametersLength; j++) {", "-\t\t\t\t\t\tTypeBinding parameter = parameters[j];", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tchar[] parameterTypeName;", "-\t\t\t\t\t\tif (parameter instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\tparameterTypeName = CharOperation.concatWith(((ReferenceBinding)parameter).compoundName, '.');", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tparameterTypeName = parameter.sourceName();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (!CharOperation.endsWith(parameterTypeName, parameterTypes[j])) {", "+\t\t\t\t\tfor (int j = 0; j < argumentsLength; j++) {", "+\t\t\t\t\t\tif (!CharOperation.equals(CharOperation.concatWith(arguments[j].type.getTypeName(), '.'), parameterTypes[j])) {", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tint matchingLength = parameterTypes[j].length;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (bestMatchingLengths != null) {", "-\t\t\t\t\t\t\tif (bestMatchingLengths[j] > matchingLength) {", "-\t\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tmatchingLengths[j] = matchingLength;", "-\t\t\t\t\t", "-\t\t\t\t\tbestConstructor = method;", "-\t\t\t\t\tbestMatchingLengths = matchingLengths;", "+\t\t\t\t\treturn getSignature(method.binding);", "-\t\t\t\t", "-\t\t\t\tif (bestConstructor == null) return null;", "-\t\t\t\treturn getSignature(bestConstructor);"]}], "num": 58001}
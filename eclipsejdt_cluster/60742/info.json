{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ffca960aefc1a398c7063a845f5e329", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16564a6c44d008f942ef7b87dacc56ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "3e28b00b3ff1ea2877f4a4e8b245ac6023e86b59", "commitAfterChange": "52e6fbe49c09ab2aed24d8a25448612c4ab36bce", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic final boolean isTypeUseDeprecated(TypeBinding type, Scope scope)", "signatureAfterChange": " \tpublic final boolean isTypeUseDeprecated(TypeBinding type, Scope scope)", "diff": ["-", "+\t\t", "+\t\tif (refType.hasRestrictedAccess()) {", "+\t\t\tAccessRestriction restriction = scope.environment().getAccessRestriction(type);", "+\t\t\tif (restriction != null) {", "+\t\t\t\tscope.problemReporter().forbiddenReference(type, this, restriction.getMessageTemplate());", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee76d04d63eff41c2d336ca7fa2b1241", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "41321e271ce9d99e44edf867f5f75e8abc4a221f", "commitAfterChange": "61133b8c5e6da454f7cea747a5c83744e4b067c9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, useTypeAnnotations);", "+\t\t\t\t\t\tif (srcMethod != null)", "+\t\t\t\t\t\t\tscope.problemReporter().illegalReturnRedefinition(srcMethod, inheritedMethod, null);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, useTypeAnnotations);", "+\t\t\t\t\tTypeBinding inheritedParameter = inheritedMethod.parameters[i];", "-\t\t\t\t\tif (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedMethod.parameters[i], substituteParameter, 0, CheckMode.OVERRIDE).isAnyMismatch()) {", "-\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, false);", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedParameter, substituteParameter, 0, CheckMode.OVERRIDE).isAnyMismatch()) {", "+\t\t\t\t\t\tif (currentArgument != null)", "+\t\t\t\t\t\t\tscope.problemReporter().illegalParameterRedefinition(currentArgument, inheritedMethod.declaringClass, inheritedParameter);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, false);"]}], "num": 60742}
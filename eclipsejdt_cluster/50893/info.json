{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06d057a75cb5fc5e43c14bbf6b0ce1c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d53c443cf36bb709e5d4398b0da21a97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumDietRecoveryTest.java", "commitBeforeChange": "1811cdd59f3470eed6e320a23d5f402c5983a6b8", "commitAfterChange": "39ff9f74e7d15911f4d6035f122df4ccc5c0c639", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void test0014()", "signatureAfterChange": " public void test0014()", "diff": ["+        \"      () {\\n\" + ", "+        \"        super();\\n\" + ", "+        \"      }\\n\" + ", "+        \"      void foo() {\\n\" + ", "+        \"      }\\n\" + ", "+        \"      () {\\n\" + ", "+        \"        super();\\n\" + ", "+        \"      }\\n\" + ", "+        \"      void foo() {\\n\" + ", "+        \"      }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9d8f0b9bd967eb4f6ef8cc3010877c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "commitAfterChange": "2c9b6914fc0d5d6db0a1196d4d7c45b0e7daf3f1", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tpublic void test0026() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0026() throws JavaModelException", "diff": ["-\t\tcheckSourceRange(enumConstantDeclaration, \"PLUS {\\n\" + ", "+\t\tcheckSourceRange(enumConstantDeclaration, \"PLUS {\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(methodDeclaration, \"double eval(double x, double y) { return x + y; }\", source);", "+\t\tcheckSourceRange(methodDeclaration, \"@Override\\n        double eval(double x, double y) { return x + y; }\", source);", "-\t\tcheckSourceRange(enumConstantDeclaration, \"MINUS {\\n\" + ", "+\t\tcheckSourceRange(enumConstantDeclaration, \"MINUS {\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(methodDeclaration, \"double eval(double x, double y) { return x - y; }\", source);", "+\t\tcheckSourceRange(methodDeclaration, \"@Override\\n        double eval(double x, double y) { return x - y; }\", source);", "-\t\tcheckSourceRange(enumConstantDeclaration, \"TIMES {\\n\" + ", "+\t\tcheckSourceRange(enumConstantDeclaration, \"TIMES {\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(methodDeclaration, \"double eval(double x, double y) { return x * y; }\", source);", "+\t\tcheckSourceRange(methodDeclaration, \"@Override\\n        double eval(double x, double y) { return x * y; }\", source);", "-\t\tcheckSourceRange(enumConstantDeclaration, \"DIVIDED_BY {\\n\" + ", "+\t\tcheckSourceRange(enumConstantDeclaration, \"DIVIDED_BY {\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(methodDeclaration, \"double eval(double x, double y) { return x / y; }\", source);", "+\t\tcheckSourceRange(methodDeclaration, \"@Override\\n        double eval(double x, double y) { return x / y; }\", source);"]}], "num": 50893}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00574631a5e37d533a434d3883c410a3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e3eddc0d191ba608003e159658f880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void computeLocalVariablePositions( \t\tint initOffset, \t\tCodeStream codeStream)", "signatureAfterChange": " \tvoid computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream)", "diff": ["-\tpublic void computeLocalVariablePositions(", "-\t\tint initOffset,", "-\t\tCodeStream codeStream) {", "+\tvoid computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream) {", "-\t\tint ilocal = 0, maxLocals = 0, localsLength = locals.length;", "-\t\twhile ((maxLocals < localsLength) && (locals[maxLocals] != null))", "-\t\t\tmaxLocals++;", "-\t\tboolean hasMoreVariables = maxLocals > 0;", "+\t\tint maxLocals = this.localIndex;", "+\t\tboolean hasMoreVariables = ilocal < maxLocals;", "-\t\tint iscope = 0, maxScopes = 0, subscopesLength = subscopes.length;", "-\t\twhile ((maxScopes < subscopesLength) && (subscopes[maxScopes] != null))", "-\t\t\tmaxScopes++;", "+\t\tint iscope = 0, maxScopes = this.scopeIndex;", "-\t\t\t\t\tsubscope.computeLocalVariablePositions(subOffset, codeStream);", "+\t\t\t\t\tsubscope.computeLocalVariablePositions(0, subOffset, codeStream);", "+\t\t\t\t", "-\t\t\t\tLocalVariableBinding local = locals[ilocal];", "-", "+\t\t\t\tLocalVariableBinding local = locals[ilocal]; // if no local at all, will be locals[ilocal]==null", "+\t\t\t\t", "-\t\t\t\tboolean generatesLocal =", "-\t\t\t\t\t(local.useFlag == LocalVariableBinding.USED && (local.constant == Constant.NotAConstant)) || local.isArgument;", "+\t\t\t\tboolean generateCurrentLocalVar = (local.useFlag == LocalVariableBinding.USED && (local.constant == Constant.NotAConstant));", "-\t\t\t\t\tif (local.isArgument) // method argument", "-\t\t\t\t\t\tthis.problemReporter().unusedArgument(local.declaration);", "-\t\t\t\t\telse if (!(local.declaration instanceof Argument))  // do not report unused catch arguments", "+\t\t\t\t\tif (!(local.declaration instanceof Argument))  // do not report unused catch arguments", "-\t\t\t\t// need to preserve unread variables ?", "-\t\t\t\tif (!generatesLocal) {", "-\t\t\t\t\tif (local.declaration != null", "-\t\t\t\t\t\t&& environment().options.preserveAllLocalVariables) {", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\tgeneratesLocal = true; // force it to be preserved in the generated code", "+\t\t\t\t// could be optimized out, but does need to preserve unread variables ?", "+\t\t\t\tif (!generateCurrentLocalVar) {", "+\t\t\t\t\tif (local.declaration != null && environment().options.preserveAllLocalVariables) {", "+\t\t\t\t\t\tgenerateCurrentLocalVar = true; // force it to be preserved in the generated code", "-\t\t\t\tif (generatesLocal) {", "+\t\t\t\tif (generateCurrentLocalVar) {", "-\t\t\t\t\t// check for too many arguments/local variables", "-\t\t\t\t\tif (local.isArgument) {", "-\t\t\t\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments", "-\t\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(local, local.declaration);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (this.offset > 0xFFFF) { // no more than 65535 words of locals", "-\t\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForLocal(", "-\t\t\t\t\t\t\t\tlocal, ", "-\t\t\t\t\t\t\t\tlocal.declaration == null ? (AstNode)this.methodScope().referenceContext : local.declaration);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif (this.offset > 0xFFFF) { // no more than 65535 words of locals", "+\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForLocal(", "+\t\t\t\t\t\t\tlocal, ", "+\t\t\t\t\t\t\tlocal.declaration == null ? (AstNode)this.methodScope().referenceContext : local.declaration);", "-", "-\t\t\t\t\t// increment offset"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77666568853233091d3599a99fc3dc70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "a80af3efb100ecaa2771b9b64ea9f8becf2538e2", "commitAfterChange": "e31a3d332f7041212032bc8ecaf89b88f9f4b3f9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r public final void computeLocalVariablePositions(int initOffset, CodeStream codeStream)", "signatureAfterChange": "\r \tpublic void computeLocalVariablePositions(\r \t\tint initOffset,\r \t\tCodeStream codeStream)", "diff": ["-\r", "-public final void computeLocalVariablePositions(int initOffset, CodeStream codeStream) {\r", "-\tObjectVector returnAddresses = new ObjectVector();\r", "-\tcomputeLocalVariablePositions(initOffset, codeStream, returnAddresses);\r", "-\tfor (int i = 0, length = returnAddresses.size(); i < length; i++){\r", "-\t\tLocalVariableBinding returnAddress = (LocalVariableBinding)returnAddresses.elementAt(i);\t\r", "-\t\treturnAddress.resolvedPosition = this.maxOffset ++;\r", "-}\r", "+\t */\r", "+\tpublic void computeLocalVariablePositions(\r", "+\t\tint initOffset,\r", "+\t\tCodeStream codeStream) {\r", "+\r", "+\t\tthis.offset = initOffset;\r", "+\t\tthis.maxOffset = initOffset;\r", "+\r", "+\t\t// local variable init\r", "+\t\tint ilocal = 0, maxLocals = 0, localsLength = locals.length;\r", "+\t\twhile ((maxLocals < localsLength) && (locals[maxLocals] != null))\r", "+\t\t\tmaxLocals++;\r", "+\t\tboolean hasMoreVariables = maxLocals > 0;\r", "+\r", "+\t\t// scope init\r", "+\t\tint iscope = 0, maxScopes = 0, subscopesLength = subscopes.length;\r", "+\t\twhile ((maxScopes < subscopesLength) && (subscopes[maxScopes] != null))\r", "+\t\t\tmaxScopes++;\r", "+\t\tboolean hasMoreScopes = maxScopes > 0;\r", "+\r", "+\t\t// iterate scopes and variables in parallel\r", "+\t\twhile (hasMoreVariables || hasMoreScopes) {\r", "+\t\t\tif (hasMoreScopes\r", "+\t\t\t\t&& (!hasMoreVariables || (subscopes[iscope].startIndex() <= ilocal))) {\r", "+\t\t\t\t// consider subscope first\r", "+\t\t\t\tif (subscopes[iscope] instanceof BlockScope) {\r", "+\t\t\t\t\tBlockScope subscope = (BlockScope) subscopes[iscope];\r", "+\t\t\t\t\tint subOffset =\r", "+\t\t\t\t\t\tsubscope.shiftScope == null ? this.offset : subscope.shiftScope.offset;\r", "+\t\t\t\t\tsubscope.computeLocalVariablePositions(subOffset, codeStream);\r", "+\t\t\t\t\tif (subscope.maxOffset > this.maxOffset)\r", "+\t\t\t\t\t\tthis.maxOffset = subscope.maxOffset;\r", "+\t\t\t\thasMoreScopes = ++iscope < maxScopes;\r", "+\t\t\t\t// consider variable first\r", "+\t\t\t\tLocalVariableBinding local = locals[ilocal];\r", "+\t\t\t\t// check if variable is actually used, and may force it to be preserved\r", "+\t\t\t\tboolean generatesLocal =\r", "+\t\t\t\t\t(local.used && (local.constant == Constant.NotAConstant)) || local.isArgument;\r", "+\t\t\t\tif (!local.used\r", "+\t\t\t\t\t&& (local.declaration != null)) { // unused (and non secret) local\r", "+\t\t\t\t\tif (local.isArgument) // method argument\r", "+\t\t\t\t\t\tthis.problemReporter().unusedArgument(local.declaration);\r", "+\t\t\t\t\telse if (!(local.declaration instanceof Argument)) // catch variable\r", "+\t\t\t\t\t\tthis.problemReporter().unusedLocalVariable(local.declaration);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (!generatesLocal) {\r", "+\t\t\t\t\tif (local.declaration != null\r", "+\t\t\t\t\t\t&& referenceCompilationUnit().problemReporter.options.preserveAllLocalVariables) {\r", "+\t\t\t\t\t\tgeneratesLocal = true; // force it to be preserved in the generated code\r", "+\t\t\t\t\t\tlocal.used = true;\r", "+\t\t\t\t}\r", "+\t\t\t\tif (generatesLocal) {\r", "+\r", "+\t\t\t\t\t// Return addresses are managed separately afterwards.\r", "+\t\t\t\t\tif (local.name != TryStatement.SecretReturnName) {\r", "+\r", "+\t\t\t\t\t\tif (local.declaration != null) {\r", "+\t\t\t\t\t\t\tcodeStream.record(local);\r", "+\t\t\t\t\t\t\t// record user local variables for attribute generation\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// allocate variable position\r", "+\t\t\t\t\t\tlocal.resolvedPosition = this.offset;\r", "+\r", "+\t\t\t\t\t\t// check for too many arguments/local variables\r", "+\t\t\t\t\t\tif (local.isArgument) {\r", "+\t\t\t\t\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments\r", "+\t\t\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(local.declaration);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tif (this.offset > 0xFFFF) { // no more than 65535 words of locals\r", "+\t\t\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForLocal(local.declaration);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\r", "+\t\t\t\t\t\t// increment offset\r", "+\t\t\t\t\t\tif ((local.type == LongBinding) || (local.type == DoubleBinding)) {\r", "+\t\t\t\t\t\t\tthis.offset += 2;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tthis.offset++;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tlocal.resolvedPosition = -1; // not generated\r", "+\t\t\t\t}\r", "+\t\t\t\thasMoreVariables = ++ilocal < maxLocals;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (this.offset > this.maxOffset)\r", "+\t\t\tthis.maxOffset = this.offset;\r", "+\t}\r"]}], "num": 31693}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6cf8f531153adeb1b72e3e1c1e7facf9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23b287a07ea6a1946aa3b91201c09195", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["-\tint wFailures = this.whitespacesFailures.size();", "-\tint lwFailures = this.leadingWhitespacesFailures.size();", "+\tint sFailures = this.failures.size();", "+\tint seFailures = this.expectedFailures.size();", "+\tint swFailures = this.whitespacesFailures.size();", "+\tint slwFailures = this.leadingWhitespacesFailures.size();", "-\tif (this.failures > 0) {", "-\t\tSystem.out.println(this.failures+\" files has still different output while reformatting!\");", "+\tSystem.out.println();", "+\tif (sFailures > 0) {", "+\t\tSystem.out.println(sFailures+\" files has still different output while reformatting!\");", "-\tif (lwFailures == 0) {", "+\tif (seFailures > 0) {", "+\t\tSystem.out.println(seFailures+\" files has still different output while reformatting due to old formatter bugs!\");", "+\t}", "+\tif (slwFailures == 0) {", "-\t\tSystem.out.println(lwFailures+\" files have different line leading spaces \"+failuresType+\"!\");", "+\t\tSystem.out.println(slwFailures+\" files have different line leading spaces \"+failuresType+\"!\");", "-\tif (wFailures > 0) {", "-\t\tSystem.out.println(wFailures+\" files have different spaces \"+failuresType+\"!\");", "+\tif (swFailures > 0) {", "+\t\tSystem.out.println(swFailures+\" files have different spaces \"+failuresType+\"!\");", "-\tif (lwFailures > 0) {", "+\tSystem.out.println();", "+\tif (sFailures > 0) {", "+\t\tSystem.out.println(\"List of files with different output \"+failuresType+\":\");", "+\t\tfor (int i=0; i<sFailures; i++) {", "+\t\t\tSystem.out.println(\"\t- \"+this.failures.get(i));", "+\t\t}", "+\t}", "+\tif (seFailures > 0) {", "+\t\tSystem.out.println(\"List of files with different output \"+failuresType+\" (due to old formatter bugs):\");", "+\t\tfor (int i=0; i<sFailures; i++) {", "+\t\t\tSystem.out.println(\"\t- \"+this.failures.get(i));", "+\t\t}", "+\t}", "+\tif (slwFailures > 0) {", "-\t\tfor (int i=0; i<lwFailures; i++) {", "+\t\tfor (int i=0; i<slwFailures; i++) {", "-\tif (wFailures > 0) {", "+\tif (swFailures > 0) {", "-\t\tfor (int i=0; i<wFailures; i++) {", "+\t\tfor (int i=0; i<swFailures; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad85da7d8596d1fc3e79db7070c87236", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "471b30fcd9175fdd69611c88984722b9e0b5e4ee", "commitAfterChange": "1a356ccfb3b5b00256393a405276ebc654766b8b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["+\tint wFailures = this.whitespacesFailures.size();", "+\tint lwFailures = this.leadingWhitespacesFailures.size();", "+\tString failuresType = COMPARE ? \"than old formatter\" : \"when reformatting\";", "+\tif (this.failures > 0) {", "+\t\tSystem.out.println(this.failures+\" files has still different output while reformatting!\");", "+\t}", "+\tif (lwFailures == 0) {", "+\t\tSystem.out.println(\"No file has different line leading spaces \"+failuresType+\" :-)\");", "+\t} else {", "+\t\tSystem.out.println(lwFailures+\" files have different line leading spaces \"+failuresType+\"!\");", "+\t}", "+\tif (wFailures > 0) {", "+\t\tSystem.out.println(wFailures+\" files have different spaces \"+failuresType+\"!\");", "+\t}", "+\tif (lwFailures > 0) {", "+\t\tSystem.out.println(\"List of files with different line leading spaces \"+failuresType+\":\");", "+\t\tfor (int i=0; i<lwFailures; i++) {", "+\t\t\tSystem.out.println(\"\t- \"+this.leadingWhitespacesFailures.get(i));", "+\t\t}", "+\t}", "+\tif (wFailures > 0) {", "+\t\tSystem.out.println(\"List of files with different spaces \"+failuresType+\":\");", "+\t\tfor (int i=0; i<wFailures; i++) {", "+\t\t\tSystem.out.println(\"\t- \"+this.whitespacesFailures.get(i));", "+\t\t}", "+\t}"]}], "num": 61782}
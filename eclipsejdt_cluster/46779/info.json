{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78886791833b78b8fed1d22f69a760df", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "188ad23c356f088cfe8cb5cb23634618", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void set(Map optionsMap)", "signatureAfterChange": "  \tpublic void set(Map optionsMap)", "diff": ["+\t\tif ((optionValue = optionsMap.get(OPTION_AnnotationBasedNullAnalysis)) != null) {", "+\t\t\tthis.isAnnotationBasedNullAnalysisEnabled = ENABLED.equals(optionValue);", "+\t\t}", "+\t\tif (this.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\tif ((optionValue = optionsMap.get(OPTION_ReportNullSpecViolation)) != null) {", "+\t\t\t\tif (ERROR.equals(optionValue)) {", "+\t\t\t\t\tthis.errorThreshold.set(NullSpecViolation);", "+\t\t\t\t\tthis.warningThreshold.clear(NullSpecViolation);", "+\t\t\t\t} else if (WARNING.equals(optionValue)) {", "+\t\t\t\t\tthis.errorThreshold.clear(NullSpecViolation);", "+\t\t\t\t\tthis.warningThreshold.set(NullSpecViolation);", "+\t\t\t\t}", "+\t\t\t\t// \"ignore\" is not valid for this option", "+\t\t\t}", "+\t\t\tif ((optionValue = optionsMap.get(OPTION_ReportPotentialNullSpecViolation)) != null) updateSeverity(PotentialNullSpecViolation, optionValue);", "+\t\t\tif ((optionValue = optionsMap.get(OPTION_ReportNullSpecInsufficientInfo)) != null) updateSeverity(NullSpecInsufficientInfo, optionValue);", "+\t\t\tif ((optionValue = optionsMap.get(OPTION_ReportRedundantNullAnnotation)) != null) updateSeverity(RedundantNullAnnotation, optionValue);", "+\t\t\tif ((optionValue = optionsMap.get(OPTION_NullableAnnotationName)) != null) {", "+\t\t\t\tthis.nullableAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "+\t\t\t}", "+\t\t\tif ((optionValue = optionsMap.get(OPTION_NonNullAnnotationName)) != null) {", "+\t\t\t\tthis.nonNullAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "+\t\t\t}", "+\t\t\tif ((optionValue = optionsMap.get(OPTION_NonNullByDefaultAnnotationName)) != null) {", "+\t\t\t\tthis.nonNullByDefaultAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "+\t\t\t}", "+\t\t\tif ((optionValue = optionsMap.get(OPTION_NonNullIsDefault)) != null) {", "+\t\t\t\tif (CompilerOptions.ENABLED.equals(optionValue))", "+\t\t\t\t\tthis.defaultNonNullness = TagBits.AnnotationNonNull;", "+\t\t\t\telse if (CompilerOptions.DISABLED.equals(optionValue))", "+\t\t\t\t\tthis.defaultNonNullness = 0;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "416524e25d6ea0db970122f06a72b8a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "82286041004c3a1c8b03ed85a8b5ba0c85e39f08", "commitAfterChange": "c3894f02481a65e7c5a6b2e211e3716b20cd9dd8", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 101, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["+", "+\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotations;", "+\t\t\t}", "+\t\t\tif (typeReference.annotations != null && (annotations = typeReference.annotations[0]) != null) {", "+\t\t\t\tannotateType(wildcardType, annotations);", "+\t\t\t\tif (typeReference.annotations != null && (annotations = typeReference.annotations[0]) != null) {", "+\t\t\t\t\tannotateType(primitiveType, annotations);", "+\t\t\t\t}", "+\t\t\t\t\t\tif (typeReference.annotations != null && (annotations = typeReference.annotations[0]) != null) {", "+\t\t\t\t\t\t\tannotateType(simpleType, annotations);", "+\t\t\t\t\t\t}", "+\t\t\t\tif (typeReference.annotations != null && (annotations = typeReference.annotations[0]) != null) {", "+\t\t\t\t\tannotateType(simpleType, annotations);", "+\t\t\t\t}", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDimensions = typeReference.getAnnotationsOnDimensions();", "+\t\t\t\t\tif (annotationsOnDimensions != null && (annotations = annotationsOnDimensions[index]) != null) {", "+\t\t\t\t\t\tannotateType(subarrayType, annotations);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (annotationsOnDimensions != null && (annotations = annotationsOnDimensions[0]) != null) {", "+\t\t\t\t\tannotateType(subarrayType, annotations);", "-\t\t\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "+\t\t\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference, typeReference.annotations);", "+\t\t\t\t\t\tsimpleType.setFlags(simpleType.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\t\tif (endingIndex == 0 && typeReference.annotations != null && (annotations = typeReference.annotations[0]) != null) {", "+\t\t\t\t\t\t\t\tannotateType(simpleType, annotations);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (typeReference.annotations != null && (annotations = typeReference.annotations[startingIndex]) != null) {", "+\t\t\t\t\t\t\t\t\tannotateType(qualifiedType, annotations);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\tfinal Name qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "+\t\t\t\tfinal Name qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference, typeReference.annotations);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDimensions = typeReference.getAnnotationsOnDimensions();", "+\t\t\t\t\tif (annotationsOnDimensions != null  && (annotations = annotationsOnDimensions[index]) != null) {", "+\t\t\t\t\t\tannotateType(subarrayType, annotations);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (annotationsOnDimensions != null  && (annotations = annotationsOnDimensions[0]) != null) {", "+\t\t\t\t\tannotateType(subarrayType, annotations);"]}], "num": 46779}
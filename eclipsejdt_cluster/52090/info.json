{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c48d02179129bb5394017d029e27c71", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eb2e876d9ada0842c22eb0483c3ec99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "0a2eedbd50adb9049a6119ce5bc61718d79db170", "commitAfterChange": "61838c2ec4c633bb2cdc1d21d43b28ec4bbd7a84", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-\t\ttry {", "-\t\t\tString indexName = computeIndexName(path);", "-\t\t\tObject state = getIndexStates().get(indexName);", "-\t\t\tInteger currentIndexState = state == null ? UNKNOWN_STATE : (Integer) state;", "-\t\t\tif (currentIndexState == UNKNOWN_STATE) {", "-\t\t\t\t// should only be reachable for query jobs", "-\t\t\t\t// IF you put an index in the cache, then AddJarFileToIndex fails because it thinks there is nothing to do", "-\t\t\t\trebuildIndex(indexName, path);", "-\t\t\t\treturn null;", "-\t\t\t}", "+\t\tString indexName = computeIndexName(path);", "+\t\tObject state = getIndexStates().get(indexName);", "+\t\tInteger currentIndexState = state == null ? UNKNOWN_STATE : (Integer) state;", "+\t\tif (currentIndexState == UNKNOWN_STATE) {", "+\t\t\t// should only be reachable for query jobs", "+\t\t\t// IF you put an index in the cache, then AddJarFileToIndex fails because it thinks there is nothing to do", "+\t\t\trebuildIndex(indexName, path);", "+\t\t\treturn null;", "+\t\t}", "-\t\t\t// index isn't cached, consider reusing an existing index file", "-\t\t\tif (reuseExistingFile) {", "-\t\t\t\tFile indexFile = new File(indexName);", "-\t\t\t\tif (indexFile.exists() && isIndexSignatureValid(indexFile)) { // check before creating index so as to avoid creating a new empty index if file is missing", "+\t\t// index isn't cached, consider reusing an existing index file", "+\t\tif (reuseExistingFile) {", "+\t\t\tFile indexFile = new File(indexName);", "+\t\t\tif (indexFile.exists()) { // check before creating index so as to avoid creating a new empty index if file is missing", "+\t\t\t\ttry {", "-\t\t\t\t\tif (index != null) {", "-\t\t\t\t\t\tindexes.put(path, index);", "-\t\t\t\t\t\tmonitors.put(index, new ReadWriteMonitor());", "-\t\t\t\t\t\treturn index;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (currentIndexState == SAVED_STATE) {", "-\t\t\t\t\trebuildIndex(indexName, path);", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t} ", "-\t\t\t// index wasn't found on disk, consider creating an empty new one", "-\t\t\tif (createIfMissing) {", "-\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "-\t\t\t\tif (index != null) {", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t// failed to read the existing file or its no longer compatible", "+\t\t\t\t\tindex = null;", "-\t\t} catch (IOException e) {", "-\t\t\t// The file could not be created. Possible reason: the project has been deleted.", "-\t\t\treturn null;", "+\t\t\tif (currentIndexState == SAVED_STATE) { // rebuild index if existing file is missing or corrupt", "+\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t} ", "+\t\t// index wasn't found on disk, consider creating an empty new one", "+\t\tif (createIfMissing) {", "+\t\t\ttry {", "+\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "+\t\t\t\tindexes.put(path, index);", "+\t\t\t\tmonitors.put(index, new ReadWriteMonitor());", "+\t\t\t\treturn index;", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// The file could not be created. Possible reason: the project has been deleted.", "+\t\t\t\treturn null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9e25644f9810ac6ff676010a5b17765", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-\t\t\tString indexPath = null;", "-\t\t\t", "+\t\t\tString indexName = computeIndexName(path);", "+\t\t\tObject state = getIndexStates().get(indexName);", "+\t\t\tInteger currentIndexState = state == null ? UNKNOWN_STATE : (Integer) state;", "+\t\t\tif (currentIndexState == UNKNOWN_STATE) {", "+\t\t\t\t// should only be reachable for query jobs", "+\t\t\t\t// IF you put an index in the cache, then AddJarFileToIndex fails because it thinks there is nothing to do", "+\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\treturn null;", "+\t\t\t}", "+", "-\t\t\tif (reuseExistingFile){", "-\t\t\t\tindexPath = computeIndexName(path);", "-\t\t\t\tFile indexFile = new File(indexPath);", "-\t\t\t\tif (indexFile.exists()){ // check before creating index so as to avoid creating a new empty index if file is missing", "-\t\t\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$", "-\t\t\t\t\tif (index != null){", "+\t\t\tif (reuseExistingFile) {", "+\t\t\t\tFile indexFile = new File(indexName);", "+\t\t\t\tif (indexFile.exists()) { // check before creating index so as to avoid creating a new empty index if file is missing", "+\t\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$", "+\t\t\t\t\tif (index != null) {", "+\t\t\t\t} else if (currentIndexState == SAVED_STATE) {", "+\t\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\t\treturn null;", "-\t\t\tif (createIfMissing){", "-\t\t\t\tif (indexPath == null) indexPath = computeIndexName(path);", "-\t\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "-\t\t\t\tif (index != null){", "+\t\t\tif (createIfMissing) {", "+\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "+\t\t\t\tif (index != null) {"]}], "num": 52090}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36690a7fdc84c19d8c6d8c1a00d12e7a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "645f4aeb922f3c1dbf23da0517d974b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b2caa750738c585e3970cd6cbdee229067bea596", "commitAfterChange": "8d1eb8a1ba1f8d42e85f057c2e74fe0db8cb690d", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\t\tif (expression.left instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "+\t\tif (expression.left instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression", "+\t\t\t\t&& ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "-\t\t\t\tif ((((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID && ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))", "-\t\t\t\t || ((rightOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID) && ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))) {", "+\t\t\t\tif ((((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID", "+\t\t\t\t\t\t\t&& ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))", "+\t\t\t\t\t || ((rightOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression", "+\t\t\t\t \t\t\t&& ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID)", "+\t\t\t\t\t\t\t&& ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))) {", "-\t\t}\t\t", "+\t\t} else if (expression.left instanceof StringLiteralConcetanation", "+\t\t\t\t&& ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "+\t\t\tStringLiteralConcetanation literal = (StringLiteralConcetanation) expression.left;", "+\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.StringLiteral[] stringLiterals = literal.literals;", "+\t\t\tinfixExpression.setLeftOperand(convert(stringLiterals[0]));", "+\t\t\tinfixExpression.setRightOperand(convert(stringLiterals[1]));", "+\t\t\tfor (int i = 2; i < literal.counter; i++) {", "+\t\t\t\tinfixExpression.extendedOperands().add(convert(stringLiterals[i]));", "+\t\t\t}", "+\t\t\tinfixExpression.extendedOperands().add(convert(expression.right));", "+\t\t\tint startPosition = literal.sourceStart;", "+\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\treturn infixExpression;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f7c54beb3b452ac2cef5f7fc60b25cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "14eef462fbaf0bab3c247296c2a42a1fdc4f58a6", "commitAfterChange": "40ec9af01314d5e3524995c03a17726a02c7901e", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-\t\t    consumeUnaryExpression(OperatorExpression.PLUS,true);  ", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS,true);  ", "-\t\t    consumeUnaryExpression(OperatorExpression.MINUS,true);  ", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS,true);  ", "-\t\t    consumeUnaryExpression(OperatorExpression.PLUS);  ", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-\t\t    consumeUnaryExpression(OperatorExpression.MINUS);  ", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-\t\t    consumeUnaryExpression(OperatorExpression.PLUS,false);  ", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS,false);  ", "-\t\t    consumeUnaryExpression(OperatorExpression.MINUS,false);  ", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS,false);  ", "-\t\t    consumeUnaryExpression(OperatorExpression.TWIDDLE);  ", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-\t\t    consumeUnaryExpression(OperatorExpression.NOT);  ", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.MULTIPLY);  ", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.DIVIDE);  ", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.REMAINDER);  ", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.PLUS);  ", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.MINUS);  ", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.LEFT_SHIFT);  ", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.RIGHT_SHIFT);  ", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.LESS);  ", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.GREATER);  ", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.LESS_EQUAL);  ", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.GREATER_EQUAL);  ", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-\t\t    consumeInstanceOfExpression(OperatorExpression.INSTANCEOF);  ", "+\t\t    consumeInstanceOfExpression(OperatorIds.INSTANCEOF);  ", "-\t\t    consumeEqualityExpression(OperatorExpression.EQUAL_EQUAL);  ", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-\t\t    consumeEqualityExpression(OperatorExpression.NOT_EQUAL);  ", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.AND);  ", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.XOR);  ", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.OR);  ", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.AND_AND);  ", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-\t\t    consumeBinaryExpression(OperatorExpression.OR_OR);  ", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-\t\t    consumeConditionalExpression(OperatorExpression.QUESTIONCOLON) ;  ", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0486cf5b1e45fcd3ca8a1600da55bcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "8abf03ebc64c5dfaa72b42e56c19fb01c4c7861e", "commitAfterChange": "5b58321cc6529786ed20cb721ece7536a2d99088", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\t\tswitch (expressionOperatorID) {", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LESS_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.GREATER_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.NOT_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LEFT_SHIFT);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.RIGHT_SHIFT_SIGNED);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_OR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_AND);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.PLUS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.MINUS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.REMAINDER);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.XOR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.AND);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.TIMES);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.OR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.DIVIDE);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.GREATER);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LESS);", "-\t\t}", "+\t\tinfixExpression.setOperator(getOperatorFor(expressionOperatorID));"]}], "num": 38536}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8be85c5d80c69342cd250d59ebedcf95", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3717a4ca83f4f0a2ed1e13f266ac7d2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException {", "-", "-\t\tif (affectedProjects.length != respectiveContainers.length) Assert.isTrue(false, \"Projects and containers collections should have the same size\"); //$NON-NLS-1$", "-\t", "-\t\tif (monitor != null && monitor.isCanceled()) return;", "-\t", "-\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\tUtil.verbose(", "-\t\t\t\t\"CPContainer SET  - setting container\\n\" + //$NON-NLS-1$", "-\t\t\t\t\"\tcontainer path: \" + containerPath + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\"\tprojects: {\" +//$NON-NLS-1$", "-\t\t\t\torg.eclipse.jdt.internal.compiler.util.Util.toString(", "-\t\t\t\t\taffectedProjects, ", "-\t\t\t\t\tnew org.eclipse.jdt.internal.compiler.util.Util.Displayable(){ ", "-\t\t\t\t\t\tpublic String displayString(Object o) { return ((IJavaProject) o).getElementName(); }", "-\t\t\t\t\t}) +", "-\t\t\t\t\"}\\n\tvalues: {\\n\"  +//$NON-NLS-1$", "-\t\t\t\torg.eclipse.jdt.internal.compiler.util.Util.toString(", "-\t\t\t\t\trespectiveContainers, ", "-\t\t\t\t\tnew org.eclipse.jdt.internal.compiler.util.Util.Displayable(){ ", "-\t\t\t\t\t\tpublic String displayString(Object o) { ", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(\"\t\t\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tif (o == null) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"<null>\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\treturn buffer.toString();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tIClasspathContainer container = (IClasspathContainer) o;", "-\t\t\t\t\t\t\tbuffer.append(container.getDescription());", "-\t\t\t\t\t\t\tbuffer.append(\" {\\n\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tIClasspathEntry[] entries = container.getClasspathEntries();", "-\t\t\t\t\t\t\tif (entries != null){", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){", "-\t\t\t\t\t\t\t\t\tbuffer.append(\" \t\t\t\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tbuffer.append(entries[i]); ", "-\t\t\t\t\t\t\t\t\tbuffer.append('\\n'); ", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbuffer.append(\" \t\t}\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\treturn buffer.toString();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}) +", "-\t\t\t\t\"\\n\t}\\n\tinvocation stack trace:\"); //$NON-NLS-1$", "-\t\t\t\tnew Exception(\"<Fake exception>\").printStackTrace(System.out); //$NON-NLS-1$", "-\t\t}", "-\t\t", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tif (manager.containerPutIfInitializingWithSameEntries(containerPath, affectedProjects, respectiveContainers))", "-\t\t\treturn;", "-", "-\t\tfinal int projectLength = affectedProjects.length;\t", "-\t\tfinal IJavaProject[] modifiedProjects;", "-\t\tSystem.arraycopy(affectedProjects, 0, modifiedProjects = new IJavaProject[projectLength], 0, projectLength);", "-\t\tfinal IClasspathEntry[][] oldResolvedPaths = new IClasspathEntry[projectLength][];", "-\t\t\t", "-\t\t// filter out unmodified project containers", "-\t\tint remaining = 0;", "-\t\tfor (int i = 0; i < projectLength; i++){", "-\t", "-\t\t\tif (monitor != null && monitor.isCanceled()) return;", "-\t", "-\t\t\tJavaProject affectedProject = (JavaProject) affectedProjects[i];", "-\t\t\tIClasspathContainer newContainer = respectiveContainers[i];", "-\t\t\tif (newContainer == null) newContainer = JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS; // 30920 - prevent infinite loop", "-\t\t\tboolean found = false;", "-\t\t\tif (JavaProject.hasJavaNature(affectedProject.getProject())){", "-\t\t\t\tIClasspathEntry[] rawClasspath = affectedProject.getRawClasspath();", "-\t\t\t\tfor (int j = 0, cpLength = rawClasspath.length; j <cpLength; j++) {", "-\t\t\t\t\tIClasspathEntry entry = rawClasspath[j];", "-\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER && entry.getPath().equals(containerPath)){", "-\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (!found){", "-\t\t\t\tmodifiedProjects[i] = null; // filter out this project - does not reference the container path, or isnt't yet Java project", "-\t\t\t\tmanager.containerPut(affectedProject, containerPath, newContainer);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tIClasspathContainer oldContainer = manager.containerGet(affectedProject, containerPath);", "-\t\t\tif (oldContainer == JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS) {", "-//\t\t\t\tMap previousContainerValues = (Map)JavaModelManager.getJavaModelManager().previousSessionContainers.get(affectedProject);", "-//\t\t\t\tif (previousContainerValues != null){", "-//\t\t\t\t\tIClasspathContainer previousContainer = (IClasspathContainer)previousContainerValues.get(containerPath);", "-//\t\t\t\t\tif (previousContainer != null) {", "-//\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-//\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-//\t\t\t\t\t\t\tbuffer.append(\"CPContainer INIT - reentering access to project container during its initialization, will see previous value\\n\"); ", "-//\t\t\t\t\t\t\tbuffer.append(\"\tproject: \" + affectedProject.getElementName() + '\\n');", "-//\t\t\t\t\t\t\tbuffer.append(\"\tcontainer path: \" + containerPath + '\\n');", "-//\t\t\t\t\t\t\tbuffer.append(\"\tprevious value: \");", "-//\t\t\t\t\t\t\tbuffer.append(previousContainer.getDescription());", "-//\t\t\t\t\t\t\tbuffer.append(\" {\\n\");", "-//\t\t\t\t\t\t\tIClasspathEntry[] entries = previousContainer.getClasspathEntries();", "-//\t\t\t\t\t\t\tif (entries != null){", "-//\t\t\t\t\t\t\t\tfor (int j = 0; j < entries.length; j++){", "-//\t\t\t\t\t\t\t\t\tbuffer.append(\" \t\t\");", "-//\t\t\t\t\t\t\t\t\tbuffer.append(entries[j]); ", "-//\t\t\t\t\t\t\t\t\tbuffer.append('\\n'); ", "-//\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\tbuffer.append(\" \t}\");", "-//\t\t\t\t\t\t\tUtil.verbose(buffer.toString());", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProject, containerPath, previousContainer); ", "-//\t\t\t\t\t}", "-//\t\t\t\t\toldContainer = null; //33695 - cannot filter out restored container, must update affected project to reset cached CP", "-//\t\t\t\t} else {", "-\t\t\t\t\toldContainer = null;", "-//\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (oldContainer != null && oldContainer.equals(respectiveContainers[i])){", "-\t\t\t\tmodifiedProjects[i] = null; // filter out this project - container did not change", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tremaining++; ", "-\t\t\toldResolvedPaths[i] = affectedProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\t\tmanager.containerPut(affectedProject, containerPath, newContainer);", "-\t\t}", "-\t\t", "-\t\tif (remaining == 0) return;", "-\t\t", "-\t\t// trigger model refresh", "-\t\ttry {", "-\t\t\tfinal boolean canChangeResources = !ResourcesPlugin.getWorkspace().isTreeLocked();", "-\t\t\tJavaCore.run(new IWorkspaceRunnable() {", "-\t\t\t\tpublic void run(IProgressMonitor progressMonitor) throws CoreException {", "-\t\t\t\t\tfor(int i = 0; i < projectLength; i++){", "-\t\t", "-\t\t\t\t\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return;", "-\t\t", "-\t\t\t\t\t\tJavaProject affectedProject = (JavaProject)modifiedProjects[i];", "-\t\t\t\t\t\tif (affectedProject == null) continue; // was filtered out", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\t\t\t\t\tUtil.verbose(", "-\t\t\t\t\t\t\t\t\"CPContainer SET  - updating affected project due to setting container\\n\" + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\"\tproject: \" + affectedProject.getElementName() + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\"\tcontainer path: \" + containerPath); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\t// force a refresh of the affected project (will compute deltas)", "-\t\t\t\t\t\taffectedProject.setRawClasspath(", "-\t\t\t\t\t\t\t\taffectedProject.getRawClasspath(),", "-\t\t\t\t\t\t\t\tSetClasspathOperation.DO_NOT_SET_OUTPUT,", "-\t\t\t\t\t\t\t\tprogressMonitor,", "-\t\t\t\t\t\t\t\tcanChangeResources,", "-\t\t\t\t\t\t\t\toldResolvedPaths[i],", "-\t\t\t\t\t\t\t\tfalse, // updating - no need for early validation", "-\t\t\t\t\t\t\t\tfalse); // updating - no need to save", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t},", "-\t\t\tnull/*no need to lock anything*/,", "-\t\t\tmonitor);", "-\t\t} catch(CoreException e) {", "-\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\t\tUtil.verbose(", "-\t\t\t\t\t\"CPContainer SET  - FAILED DUE TO EXCEPTION\\n\" + //$NON-NLS-1$", "-\t\t\t\t\t\"\tcontainer path: \" + containerPath, //$NON-NLS-1$", "-\t\t\t\t\tSystem.err);", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\t\tif (e instanceof JavaModelException) {", "-\t\t\t\tthrow (JavaModelException)e;", "-\t\t\t} else {", "-\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tfor (int i = 0; i < projectLength; i++) {", "-\t\t\t\tif (respectiveContainers[i] == null) {", "-\t\t\t\t\tmanager.containerPut(affectedProjects[i], containerPath, null); // reset init in progress marker", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t\t\t\t", "+\tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException {", "+\t\tif (affectedProjects.length != respectiveContainers.length) ", "+\t\t\tAssert.isTrue(false, \"Projects and containers collections should have the same size\"); //$NON-NLS-1$", "+\t\tSetContainerOperation operation = new SetContainerOperation(containerPath, affectedProjects, respectiveContainers);", "+\t\toperation.runOperation(monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bba4c8b3b2993edcb79fa777a62174de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, int sort)", "signatureAfterChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth)", "diff": ["+ */", "+public static List buildTestsList(Class evaluationTestClass, int inheritedDepth) {", "+\treturn buildTestsList(evaluationTestClass, inheritedDepth, ORDERING);", "+}", "-public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, int sort) {", "-\t\t\t\t\t\t\t\tif (TESTS_NUMBERS != null && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\tif (TESTS_RANGE != null && TESTS_RANGE.length == 2 && !tests.contains(methName)) {", "-\t// Add corresponding tests", "-\tif (sort>0) {", "-\t} else if (sort<0) {", "-\t\t// TODO (frederic) implement execution in reverse order"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fccf9213406be3e1079af11b890d60cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "23973a4dd19826bd57b9766722e05471b8135157", "commitAfterChange": "8e499c7ba695862747987f5930cb4781e109836a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void computeInheritedMethods()", "signatureAfterChange": " void computeInheritedMethods()", "diff": ["+void computeInheritedMethods() {", "+\tReferenceBinding superclass = (this.type.modifiers & IConstants.AccInterface) == 0", "+\t\t? this.type.superclass() // class or enum", "+\t\t: this.type.scope.getJavaLangObject(); // check interface methods against Object", "+\tcomputeInheritedMethods(superclass, type.superInterfaces());", "+}", "-void computeInheritedMethods() {", "-\tReferenceBinding[] itsInterfaces = type.superInterfaces();", "-\tReferenceBinding superType = (this.type.modifiers & IConstants.AccInterface) == 0", "-\t\t? this.type.superclass() // class or enum", "-\t\t: this.type.scope.getJavaLangObject(); // check interface methods against Object"]}], "num": 58237}
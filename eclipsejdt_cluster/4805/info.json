{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1decead079aca423e4e4d2190269c394", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "053170992c3df7a8726bf4aa2386f92b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "72ac6cbecbda631e09e5ff29bcd95cc93135ab26", "commitAfterChange": "6d52256c55c9f29964f3b18a2228341485a94518", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate static Test buildComplianceTestSuite(List testClasses, Class setupClass, long complianceLevel)", "signatureAfterChange": " \tprivate static Test buildComplianceTestSuite(List testClasses, Class setupClass, long complianceLevel)", "diff": ["-\t\tTestSuite complianceSuite = new TestSuite();", "-\t\tfor (int i=0, m=testClasses.size(); i<m ; i++) {", "-\t\t\tClass testClass = (Class)testClasses.get(i);", "-\t\t\tTestSuite suite = new TestSuite(testClass.getName());", "-\t\t\tList tests = buildTestsList(testClass);", "-\t\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "-\t\t\t\tsuite.addTest((Test)tests.get(index));", "-\t\t\t}", "-\t\t\tcomplianceSuite.addTest(suite);", "-\t\t}", "-\t", "-\t\t// call the setup constructor with the suite and compliance level", "+\t\t// call the setup constructor with the compliance level", "+\t\tTestSuite complianceSuite = null;", "-\t\t\tConstructor constructor = setupClass.getConstructor(new Class[]{Test.class, long.class});", "-\t\t\tTest setUp = (Test)constructor.newInstance(new Object[]{complianceSuite, new Long(complianceLevel)});", "-\t\t\treturn setUp;", "+\t\t\tConstructor constructor = setupClass.getConstructor(new Class[]{long.class});", "+\t\t\tcomplianceSuite = (TestSuite)constructor.newInstance(new Object[]{new Long(complianceLevel)});", "-\t", "-\t\treturn null;", "+\t\tif (complianceSuite == null)", "+\t\t\treturn null;", "+", "+\t\t// add tests", "+\t\tfor (int i=0, m=testClasses.size(); i<m ; i++) {", "+\t\t\tClass testClass = (Class)testClasses.get(i);", "+\t\t\tTestSuite suite = new TestSuite(testClass.getName());", "+\t\t\tList tests = buildTestsList(testClass);", "+\t\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "+\t\t\t\tsuite.addTest((Test)tests.get(index));", "+\t\t\t}", "+\t\t\tcomplianceSuite.addTest(suite);", "+\t\t}", "+\t\treturn complianceSuite;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db364fe90a87cc2fd011b1634eb3e11e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "72ac6cbecbda631e09e5ff29bcd95cc93135ab26", "commitAfterChange": "6d52256c55c9f29964f3b18a2228341485a94518", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic static Test suiteForComplianceLevel(long complianceLevel, Class setupClass, ArrayList testClasses)", "signatureAfterChange": " \tpublic static Test suiteForComplianceLevel(long complianceLevel, Class setupClass, ArrayList testClasses)", "diff": ["-\t\tTestSuite suite;", "+\t\t// call the setup constructor with the compliance level", "+\t\tTestSuite suite = null;", "+\t\ttry {", "+\t\t\tConstructor constructor = setupClass.getConstructor(new Class[]{String.class});", "+\t\t\tsuite = (TestSuite)constructor.newInstance(new Object[]{CompilerOptions.versionFromJdkLevel(complianceLevel)});", "+\t\t} catch (IllegalAccessException e) {", "+\t\t\te.printStackTrace();", "+\t\t} catch (InstantiationException e) {", "+\t\t\te.printStackTrace();", "+\t\t} catch (InvocationTargetException e) {", "+\t\t\te.getTargetException().printStackTrace();", "+\t\t} catch (NoSuchMethodException e) {", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t\tif (suite == null)", "+\t\t\treturn null;", "+\t\t", "+\t\t// add tests", "-", "-\t\t// call the setup constructor with the suite and compliance level", "-\t\ttry {", "-\t\t\tConstructor constructor = setupClass.getConstructor(new Class[]{Test.class, String.class});", "-\t\t\tTest setUp = (Test)constructor.newInstance(new Object[]{suite, CompilerOptions.versionFromJdkLevel(complianceLevel)});", "-\t\t\treturn setUp;", "-\t\t} catch (IllegalAccessException e) {", "-\t\t\te.printStackTrace();", "-\t\t} catch (InstantiationException e) {", "-\t\t\te.printStackTrace();", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\te.getTargetException().printStackTrace();", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\te.printStackTrace();", "-\t\t}", "-", "-\t\treturn null;", "+\t\treturn suite;"]}], "num": 4805}
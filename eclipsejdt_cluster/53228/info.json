{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fa4c0dc29097c78a6096e7785941139", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ec554585a89762e7f7ea87163c841cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "c526f10eda122472f5603082aaefe389819e487a", "commitAfterChange": "2978110db99779d239d94c1b0f5bcb0af9289202", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t \tpublic void test0026() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0026() throws JavaModelException", "diff": ["+\t\tITypeBinding typeBinding2 = enumDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding2);", "-\t\tbodyDeclarations = enumConstantDeclaration.bodyDeclarations();", "+\t\tAnonymousClassDeclaration anonymousClassDeclaration = enumConstantDeclaration.getAnonymousClassDeclaration();", "+\t\tassertNotNull(\"No anonymous class\", anonymousClassDeclaration);", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\t\t\t\"        double eval(double x, double y) { return x + y; }\\n\" + ", "+\t\t\t\t\"    }\", source);", "+\t\tITypeBinding typeBinding = anonymousClassDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+\t\tassertTrue(\"Not a enum type\", typeBinding.isEnum());", "+\t\tbodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "-\t\tbodyDeclarations = enumConstantDeclaration.bodyDeclarations();", "+\t\tanonymousClassDeclaration = enumConstantDeclaration.getAnonymousClassDeclaration();", "+\t\ttypeBinding = anonymousClassDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+\t\tassertTrue(\"Not a enum type\", typeBinding.isEnum());", "+\t\tassertNotNull(\"No anonymous class\", anonymousClassDeclaration);", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\t\t\t\"        double eval(double x, double y) { return x - y; }\\n\" + ", "+\t\t\t\t\"    }\", source);", "+\t\tbodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "-\t\tbodyDeclarations = enumConstantDeclaration.bodyDeclarations();", "+\t\tanonymousClassDeclaration = enumConstantDeclaration.getAnonymousClassDeclaration();", "+\t\tassertNotNull(\"No anonymous class\", anonymousClassDeclaration);", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\t\t\t\"        double eval(double x, double y) { return x * y; }\\n\" + ", "+\t\t\t\t\"    }\", source);", "+\t\ttypeBinding = anonymousClassDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+\t\tassertTrue(\"Not a enum type\", typeBinding.isEnum());", "+\t\tbodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "-\t\tbodyDeclarations = enumConstantDeclaration.bodyDeclarations();", "+\t\tanonymousClassDeclaration = enumConstantDeclaration.getAnonymousClassDeclaration();", "+\t\tassertNotNull(\"No anonymous class\", anonymousClassDeclaration);", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\t\t\t\"        double eval(double x, double y) { return x / y; }\\n\" + ", "+\t\t\t\t\"    }\", source);", "+\t\ttypeBinding = anonymousClassDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+\t\tassertTrue(\"Not a enum type\", typeBinding.isEnum());", "+\t\tbodyDeclarations = anonymousClassDeclaration.bodyDeclarations();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9d8f0b9bd967eb4f6ef8cc3010877c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "commitAfterChange": "2c9b6914fc0d5d6db0a1196d4d7c45b0e7daf3f1", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tpublic void test0026() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0026() throws JavaModelException", "diff": ["-\t\tcheckSourceRange(enumConstantDeclaration, \"PLUS {\\n\" + ", "+\t\tcheckSourceRange(enumConstantDeclaration, \"PLUS {\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(methodDeclaration, \"double eval(double x, double y) { return x + y; }\", source);", "+\t\tcheckSourceRange(methodDeclaration, \"@Override\\n        double eval(double x, double y) { return x + y; }\", source);", "-\t\tcheckSourceRange(enumConstantDeclaration, \"MINUS {\\n\" + ", "+\t\tcheckSourceRange(enumConstantDeclaration, \"MINUS {\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(methodDeclaration, \"double eval(double x, double y) { return x - y; }\", source);", "+\t\tcheckSourceRange(methodDeclaration, \"@Override\\n        double eval(double x, double y) { return x - y; }\", source);", "-\t\tcheckSourceRange(enumConstantDeclaration, \"TIMES {\\n\" + ", "+\t\tcheckSourceRange(enumConstantDeclaration, \"TIMES {\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(methodDeclaration, \"double eval(double x, double y) { return x * y; }\", source);", "+\t\tcheckSourceRange(methodDeclaration, \"@Override\\n        double eval(double x, double y) { return x * y; }\", source);", "-\t\tcheckSourceRange(enumConstantDeclaration, \"DIVIDED_BY {\\n\" + ", "+\t\tcheckSourceRange(enumConstantDeclaration, \"DIVIDED_BY {\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" + ", "+\t\tcheckSourceRange(anonymousClassDeclaration, \"{\\n\" +", "+\t\t\t\t\"        @Override\\n\" + ", "-\t\tcheckSourceRange(methodDeclaration, \"double eval(double x, double y) { return x / y; }\", source);", "+\t\tcheckSourceRange(methodDeclaration, \"@Override\\n        double eval(double x, double y) { return x / y; }\", source);"]}], "num": 53228}
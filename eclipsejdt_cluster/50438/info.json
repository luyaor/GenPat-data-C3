{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c55cf99fba8872ae530bbc40507a4719", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48080fb0704b5119bf6b570f7cd8fa3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "6272ddbc393added5976d56f44f1521fcf876495", "commitAfterChange": "a738cdbf5d0b40e078d2ec76d22bcb613279cff6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t\t//look for @deprecated into the first javadoc comment preceeding the declaration", "+\t\t// skip all non-javadoc comments or those which are after the last modifier", "-\t\t// javadoc only (non javadoc comment have negative end positions.)", "-\t\tif (this.modifiersSourceStart != -1 && this.modifiersSourceStart < commentSourceStart) {", "+\t\tif (commentSourceStart < 0 || // line comment", "+\t\t\tthis.scanner.commentStops[lastCommentIndex] < 0 || // block comment", "+\t\t\t(this.modifiersSourceStart != -1 && this.modifiersSourceStart < commentSourceStart)) // the comment is after the modifier", "+\t\t{", "-\t\tif (this.scanner.commentStops[lastCommentIndex] < 0) {", "-\t\t\tcontinue nextComment;", "-\t\t}", "-\t\tdeprecated =", "-\t\t\tthis.javadocParser.checkDeprecation(lastCommentIndex);", "+\t\t// check comment", "+\t\tdeprecated = this.javadocParser.checkDeprecation(lastCommentIndex);", "+\t\tif (this.declarationSourceStart < 0) this.declarationSourceStart = -this.declarationSourceStart;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6c8dbe39e554522def18ed0e5acf05c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "commitAfterChange": "4c6ae9dae1fc96f9fd302751a25b14b4f972fb0f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkComment()", "diff": ["-public void checkAnnotation() {", "+public void checkComment() {", "-\tint lastAnnotationIndex = -1;", "+\tint lastCommentIndex = -1;", "-\tnextComment : for (lastAnnotationIndex = scanner.commentPtr; lastAnnotationIndex >= 0; lastAnnotationIndex--){", "+\tnextComment : for (lastCommentIndex = scanner.commentPtr; lastCommentIndex >= 0; lastCommentIndex--){", "-\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];", "+\t\tint commentSourceStart = scanner.commentStarts[lastCommentIndex];", "-\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {", "+\t\tif (scanner.commentStops[lastCommentIndex] < 0) {", "-\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over", "+\t\tint commentSourceEnd = scanner.commentStops[lastCommentIndex] - 1; //stop is one over", "-\t\t\tthis.annotationParser.checkDeprecation(", "+\t\t\tthis.javadocParser.checkDeprecation("]}], "num": 50438}
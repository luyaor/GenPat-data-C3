{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49d41eacd420ecfcaf5186839e408844", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a82f9f495a07dfe5ffc26828a0d25a00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "7ceb09d85452179b42407e05dd48c1ac5747d10a", "commitAfterChange": "cb8d9486d5e5f2bb20f5895e1cd434f7838ce4c6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate void initRawPackageInfo(HashtableOfArrayToObject rawPackageInfo, String entryName, boolean isDirectory, String sourceLevel, String compliance)", "signatureAfterChange": " \tprivate void initRawPackageInfo(HashtableOfArrayToObject rawPackageInfo, String entryName, boolean isDirectory)", "diff": ["-\tprivate void initRawPackageInfo(HashtableOfArrayToObject rawPackageInfo, String entryName, boolean isDirectory, String sourceLevel, String compliance) {", "+\tprivate void initRawPackageInfo(HashtableOfArrayToObject rawPackageInfo, String entryName, boolean isDirectory) {", "-\t\t\tif (Util.isValidFolderNameForPackage(pkgName[i], sourceLevel, compliance)) {", "+\t\t\t// sourceLevel must be null because we know nothing about it based on a jar file", "+\t\t\t// complianceLevel can be retrieved from a jar file", "+\t\t\tif (Util.isValidFolderNameForPackage(pkgName[i], null, this.complianceLevel)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d084d9c659e3b5ede82da8cc6f832c9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "730ec55536b5ef142bbace222c0f6429c2cdd532", "commitAfterChange": "7b8b5171c862e2fd7e3a610686386f5127430137", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate void initRawPackageInfo(HashtableOfArrayToObject rawPackageInfo, String entryName, boolean isDirectory, String sourceLevel, String compliance)", "signatureAfterChange": " \tprivate void initRawPackageInfo(HashtableOfArrayToObject rawPackageInfo, String entryName, boolean isDirectory)", "diff": ["-\tprivate void initRawPackageInfo(HashtableOfArrayToObject rawPackageInfo, String entryName, boolean isDirectory, String sourceLevel, String compliance) {", "+\tprivate void initRawPackageInfo(HashtableOfArrayToObject rawPackageInfo, String entryName, boolean isDirectory) {", "-\t\t\tif (Util.isValidFolderNameForPackage(pkgName[i], sourceLevel, compliance)) {", "+\t\t\t// sourceLevel must be null because we know nothing about it based on a jar file", "+\t\t\t// complianceLevel can be retrieved from a jar file", "+\t\t\tif (Util.isValidFolderNameForPackage(pkgName[i], null, this.complianceLevel)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7635ec507d006981db2bef3483fcb7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "175caf4c91bc68c67c64b6e69e5b88fec75be023", "commitAfterChange": "2a90eeb9372f2a1a1f5e7c24d7c19363b361caf2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTyps, final BlockScope scope)", "signatureAfterChange": "  public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, final BlockScope scope)", "diff": ["-public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTyps, final BlockScope scope) {", "+public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, final BlockScope scope) {", "-\tif (argumentTyps == Binding.NO_PARAMETERS && this.typeExpected instanceof ParameterizedTypeBinding) {", "+\tif (this.argumentTypes == Binding.NO_PARAMETERS && this.typeExpected instanceof ParameterizedTypeBinding) {", "-\t\tinferredTypes = inferElidedTypes(allocationType, enclosingType, argumentTyps, scope);", "+\t\tinferredTypes = inferElidedTypes(scope);"]}], "num": 53548}
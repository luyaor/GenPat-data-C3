{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f13fce9fa7eaa84a48bda05fac65836", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac89075e531e55578aecd21155e090b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "cdf4427e144add1a36f3939b37283556991d4db8", "commitAfterChange": "75f702ac7a9f5b98d8daf289140c0d700af63244", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public int literalIndex(MethodBinding aMethodBinding)", "signatureAfterChange": " public int literalIndex(MethodBinding aMethodBinding)", "diff": ["-\t\tif (aMethodBinding.declaringClass.isInterface()) {", "+\t\tif (aMethodBinding.constantPoolDeclaringClass().isInterface()) {", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.declaringClass);", "+\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.declaringClass);", "+\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\tif (aMethodBinding.declaringClass.isInterface()) {", "+\t\t\tif (aMethodBinding.constantPoolDeclaringClass().isInterface()) {", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.declaringClass);", "+\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.declaringClass);", "+\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe168e18213f973a6b0e1b6f964d856c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkAndSetModifiersForConstructor(MethodBinding methodBinding)", "signatureAfterChange": " \tprivate void checkAndSetModifiersForConstructor(MethodBinding methodBinding)", "diff": ["-\t\tfinal ReferenceBinding methodBindingDeclaringClass = methodBinding.declaringClass;", "+\t\tfinal ReferenceBinding declaringClass = methodBinding.declaringClass;", "-\t\t\tproblemReporter().duplicateModifierForMethod(", "-\t\t\t\tmethodBindingDeclaringClass,", "-\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\tproblemReporter().duplicateModifierForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\t\tif (methodBindingDeclaringClass.isEnum()) {", "+\t\t\tif (declaringClass.isEnum())", "-\t\t\t} else {", "-\t\t\t\tif (methodBindingDeclaringClass.isPublic())", "-\t\t\t\t\tmodifiers |= AccPublic;", "-\t\t\t\telse if (methodBindingDeclaringClass.isProtected())", "-\t\t\t\t\tmodifiers |= AccProtected;", "-\t\t\t}", "+\t\t\telse if (declaringClass.isPublic())", "+\t\t\t\tmodifiers |= AccPublic;", "+\t\t\telse if (declaringClass.isProtected())", "+\t\t\t\tmodifiers |= AccProtected;", "-\t\tint unexpectedModifiers =", "-\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStrictfp);", "-", "-\t\tif (methodBindingDeclaringClass.isEnum() && !((ConstructorDeclaration) referenceContext).isDefaultConstructor) {", "+\t\tint unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected | AccStrictfp);", "+\t\tif (declaringClass.isEnum() && !((ConstructorDeclaration) referenceContext).isDefaultConstructor) {", "-\t\t} else if ((realModifiers & unexpectedModifiers) != 0)", "+\t\t} else if ((realModifiers & unexpectedModifiers) != 0) {", "-\t\telse if (", "-\t\t\t(((AbstractMethodDeclaration) referenceContext).modifiers & AccStrictfp) != 0)", "+\t\t} else if ((((AbstractMethodDeclaration) referenceContext).modifiers & AccStrictfp) != 0) {", "+\t\t}", "-\t\t\tproblemReporter().illegalVisibilityModifierCombinationForMethod(", "-\t\t\t\tmethodBindingDeclaringClass,", "-\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\tproblemReporter().illegalVisibilityModifierCombinationForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\t\t// need to keep the less restrictive", "+\t\t\t// need to keep the less restrictive so disable Protected/Private as necessary", "+\t\t\t} else if ((accessorBits & AccProtected) != 0 && (accessorBits & AccPrivate) != 0) {", "+\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\tif ((accessorBits & AccProtected) != 0)", "-\t\t\t\tif ((accessorBits & AccPrivate) != 0)", "-\t\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\tif (methodBindingDeclaringClass.isPrivate())", "-\t\t\tif ((modifiers & AccPrivate) != 0)", "-\t\t\t\tmodifiers &= ~AccPrivate;", "+\t\tif (declaringClass.isPrivate() && (modifiers & AccPrivate) != 0)", "+\t\t\tmodifiers &= ~AccPrivate;"]}], "num": 964}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57f7aa78c1d9ebaf234a5bf8f58bb8b4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8209ef05781559055a2d65b7b55d5680", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "82adc87bce1ed4088802638154568eeec8ab8e88", "commitAfterChange": "b1c69f20f23ddb575225e5b5cb5d470714f41aad", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void addBound(TypeBound bound, LookupEnvironment environment)", "signatureAfterChange": "  \tpublic void addBound(TypeBound bound, LookupEnvironment environment)", "diff": ["-\t\tThreeSets three = this.boundsPerVariable.get(bound.left);", "+\t\tInferenceVariable variable = bound.left.prototype();", "+\t\tThreeSets three = this.boundsPerVariable.get(variable);", "-\t\t\tthis.boundsPerVariable.put(bound.left, (three = new ThreeSets()));", "+\t\t\tthis.boundsPerVariable.put(variable, (three = new ThreeSets()));", "-\t\t\tthree.setInstantiation(typeBinding, bound.left, environment);", "+\t\t\tthree.setInstantiation(typeBinding, variable, environment);", "-\t\t\tInferenceVariable rightIV = (InferenceVariable) bound.right;", "+\t\t\tInferenceVariable rightIV = (InferenceVariable) bound.right.prototype();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0685e37c6938304b707056a15eb7e2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "a0827b5ed51f9fc68d50a6070897f74217550da1", "commitAfterChange": "266357791826a02f1dd87ad4cdccffd484f96fd9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void addBound(TypeBound bound)", "signatureAfterChange": "  \tpublic void addBound(TypeBound bound)", "diff": ["+\t\tif (bound.right instanceof InferenceVariable) {", "+\t\t\t// for a dependency between two IVs make a note about the inverse bound.", "+\t\t\t// this should be needed to determine IV dependencies independent of direction.", "+\t\t\t// TODO: so far no test could be identified which actually needs it ...", "+\t\t\tInferenceVariable rightIV = (InferenceVariable) bound.right;", "+\t\t\tthree = this.boundsPerVariable.get(rightIV);", "+\t\t\tif (three == null)", "+\t\t\t\tthis.boundsPerVariable.put(rightIV, (three = new ThreeSets()));", "+\t\t\tif (three.inverseBounds == null)", "+\t\t\t\tthree.inverseBounds = new HashMap<InferenceVariable,TypeBound>();", "+\t\t\tthree.inverseBounds.put(rightIV, bound);", "+\t\t}"]}], "num": 21154}
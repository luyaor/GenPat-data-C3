{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "508e133a669176b15853683b7b861213", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31562ddc38dc3f084b3ed95904f02e7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "eb10ec59bc98c7f83476bce7202c39d197cae0df", "commitAfterChange": "f7fbe1c2009ea9c5d97d4fd12e8279412bfffc23", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": "\r \t\r \tprivate boolean checkForParenthesis(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": "\r \t\r \tprivate boolean checkForParenthesis(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["-\t\tint leftParentCount = 0;\r", "-\t\tint rightParentCount = 0;\r", "+\t\tint dangling = 0, token;\r", "+\t\tboolean first = true;\r", "-\t\t\tint token = scanner.getNextToken();\r", "-\t\t\tif (token != Scanner.TokenNameLPAREN) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t} else {\r", "-\t\t\t\tleftParentCount++;\r", "-\t\t\t}\r", "-\t\t\tboolean stop = false;\r", "-\t\t\twhile (!stop && ((token  = scanner.getNextToken()) != Scanner.TokenNameEOF)) {\r", "-\t\t\t\tswitch(token) {\r", "-\t\t\t\t\tcase Scanner.TokenNameLPAREN:\r", "-\t\t\t\t\t\tleftParentCount++;\r", "+\t\t\twhile (true) {\r", "+\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase Scanner.TokenNameLPAREN :\r", "+\t\t\t\t\t\tdangling ++;\r", "-\t\t\t\t\tcase Scanner.TokenNameRPAREN:\r", "-\t\t\t\t\t\trightParentCount++;\r", "-\t\t\t\t\t\tif (rightParentCount == leftParentCount) {\r", "-\t\t\t\t\t\t\t// we found the matching parenthesis\r", "-\t\t\t\t\t\t\tstop = true;\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\tcase Scanner.TokenNameRPAREN :\r", "+\t\t\t\t\t\tif (first) return false;\r", "+\t\t\t\t\t\tdangling --;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase Scanner.TokenNameEOF :\r", "+\t\t\t\t\t\tif (first) return false;\r", "+\t\t\t\t\t\treturn dangling == 0;\r", "+\t\t\t\t\tdefault :\r", "+\t\t\t\t\t\tif (first) return false;\r", "+\t\t\t\t\t\tif (dangling == 0) return false;\r", "+\t\t\t\tfirst = false;\r", "-\t\t\treturn (scanner.currentPosition >= end) && (rightParentCount == leftParentCount);\r", "-\t\t} catch(InvalidInputException e) {\r", "+\t\t} catch (InvalidInputException e){\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac9f186c3cb08e94bef3b6563b6d1263", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void setIdentifier(String identifier)", "signatureAfterChange": " \tpublic void setIdentifier(String identifier)", "diff": ["-\t\tchar[] source = identifier.toCharArray();", "-\t\tscanner.setSource(source);", "-\t\tfinal int length = source.length;", "-\t\tscanner.resetTo(0, length - 1);", "+\t\tlong sourceLevel = scanner.sourceLevel;", "+\t\tlong complianceLevel = scanner.complianceLevel;", "+", "-\t\t\tint tokenType = scanner.scanIdentifier();", "-\t\t\tif (tokenType != TerminalTokens.TokenNameIdentifier) {", "+\t\t\tscanner.sourceLevel = ClassFileConstants.JDK1_3;", "+\t\t\tscanner.complianceLevel = ClassFileConstants.JDK1_5;", "+\t\t\tchar[] source = identifier.toCharArray();", "+\t\t\tscanner.setSource(source);", "+\t\t\tfinal int length = source.length;", "+\t\t\tscanner.resetTo(0, length - 1);", "+\t\t\ttry {", "+\t\t\t\tint tokenType = scanner.scanIdentifier();", "+\t\t\t\tif (tokenType != TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}", "+\t\t\t\tif (scanner.currentPosition != length) {", "+\t\t\t\t\t// this is the case when there is only one identifier see 87849", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}", "+\t\t\t} catch(InvalidInputException e) {", "-\t\t\tif (scanner.currentPosition != length) {", "-\t\t\t\t// this is the case when there is only one identifier see 87849", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\tthrow new IllegalArgumentException();", "+\t\t} finally {", "+\t\t\tthis.ast.scanner.sourceLevel = sourceLevel;", "+\t\t\tthis.ast.scanner.complianceLevel = complianceLevel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f32694cb2aaf547c94018c8f6156bd3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NumberLiteral.java", "commitBeforeChange": "b8e01a5f88277b60beb56a34c689a6b2ce9e09e8", "commitAfterChange": "9151e30fba5ea02221400c736d4de2dda06ec7ac", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \r \tpublic void setToken(String token)", "signatureAfterChange": " \r \tpublic void setToken(String token)", "diff": ["+\t\tScanner scanner = new Scanner();\r", "+\t\tchar[] source = token.toCharArray();\r", "+\t\tscanner.setSourceBuffer(source);\r", "+\t\tscanner.resetTo(0, source.length);\r", "+\t\ttry {\r", "+\t\t\tint tokenType = scanner.getNextToken();\r", "+\t\t\tswitch(tokenType) {\r", "+\t\t\t\tcase Scanner.TokenNameDoubleLiteral:\r", "+\t\t\t\tcase Scanner.TokenNameIntegerLiteral:\r", "+\t\t\t\tcase Scanner.TokenNameFloatingPointLiteral:\r", "+\t\t\t\tcase Scanner.TokenNameLongLiteral:\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scanner.TokenNameMINUS :\r", "+\t\t\t\t\ttokenType = scanner.getNextToken();\r", "+\t\t\t\t\tswitch(tokenType) {\r", "+\t\t\t\t\t\tcase Scanner.TokenNameDoubleLiteral:\r", "+\t\t\t\t\t\tcase Scanner.TokenNameIntegerLiteral:\r", "+\t\t\t\t\t\tcase Scanner.TokenNameFloatingPointLiteral:\r", "+\t\t\t\t\t\tcase Scanner.TokenNameLongLiteral:\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Not a literal type\");\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\t\t\r", "+\t\t\t\tdefault:\r", "+\t\t\t\t\tthrow new IllegalArgumentException(\"Not a literal type\");\r", "+\t\t\t}\r", "+\t\t} catch(InvalidInputException e) {\r", "+\t\t\tthrow new IllegalArgumentException();\r", "+\t\t}\r"]}], "num": 5064}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ed85dc9fffb9145fd046773d914ac1a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77cda90df4fa167a891da65a9face20b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "1d5b841741b609cf6927afba3dde0ac1dd2572e2", "commitAfterChange": "09c7c7b4fe8a9c0ad49252ee63d32d12d87dd8ea", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tprivate static ISearchableNameEnvironment getNameEnvironment(JavaProject project, WorkingCopyOwner owner, final IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  \t\tCancelableNameEnvironment(JavaProject project, WorkingCopyOwner owner, IProgressMonitor monitor) throws JavaModelException", "diff": ["+", "+\t\tCancelableNameEnvironment(JavaProject project, WorkingCopyOwner owner, IProgressMonitor monitor) throws JavaModelException {", "+\t\t\tsuper(project, owner);", "+\t\t\tthis.monitor = monitor;", "+\t\t}", "-\tprivate static ISearchableNameEnvironment getNameEnvironment(JavaProject project, WorkingCopyOwner owner, final IProgressMonitor monitor) throws JavaModelException {", "-\t\treturn new SearchableEnvironment(project, owner) {", "-\t\t\tprivate void checkCanceled() {", "-\t\t\t\tif (monitor != null && monitor.isCanceled()) ", "-\t\t\t\t\tthrow new AbortCompilation(true/*silent*/, new OperationCanceledException());", "-\t\t\t}", "-\t\t\tpublic void findPackages(char[] prefix, ISearchRequestor requestor) {", "-\t\t\t\tcheckCanceled();", "-\t\t\t\tsuper.findPackages(prefix, requestor);", "-\t\t\t}", "-\t\t\tpublic NameEnvironmentAnswer findType(char[] name, char[][] packageName) {", "-\t\t\t\tcheckCanceled();", "-\t\t\t\treturn super.findType(name, packageName);", "-\t\t\t}", "-\t\t\tpublic NameEnvironmentAnswer findType(char[][] compoundTypeName) {", "-\t\t\t\tcheckCanceled();", "-\t\t\t\treturn super.findType(compoundTypeName);", "-\t\t\t}", "-\t\t\tpublic void findTypes(char[] prefix, ISearchRequestor storage) {", "-\t\t\t\tcheckCanceled();", "-\t\t\t\tsuper.findTypes(prefix, storage);", "-\t\t\t}", "-\t\t};", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "850b9e229065369afb622b16e1285c99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "3fd9ba7770cab33e59f381d90c14d9b1a2469d1c", "commitAfterChange": "051572f99b6a73010e844cbf76e196d479c1689d", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": " \tpublic void resourceChanged(IResourceChangeEvent event)", "diff": ["-\t\t\t\t\tJavaModel.flushExternalFileCache();", "+\t\t\t\t\tObject source = event.getSource();", "+\t\t\t\t\tprojects = null;", "+\t\t\t\t\tif (source instanceof IWorkspace) {", "+\t\t\t\t\t\t projects = ((IWorkspace) source).getRoot().getProjects();", "+\t\t\t\t\t} else if (source instanceof IProject) {", "+\t\t\t\t\t\tprojects = new IProject[] {(IProject) source};", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tUtil.log(new Exception(),", "+\t\t\t\t\t\t\t\t\"Expected to see a workspace or project on the PRE_BUILD resource change but was: \" + source.toString()); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tif (projects != null) {", "+\t\t\t\t\t\t// If we are about to do a build and a Java project's first builder is not the Java builder,", "+\t\t\t\t\t\t// then it is possible that one of the earlier builders will build a jar file that is on that", "+\t\t\t\t\t\t// project's classpath. If we see that, then to be safe we must flush the caching of the", "+\t\t\t\t\t\t// JavaModelManager's external file state.", "+\t\t\t\t\t\t// A possible further optimization for this situation where earlier builders can affect the", "+\t\t\t\t\t\t// Java builder would be to add a new classpath element attribute that identifies whether", "+\t\t\t\t\t\t// or not a library jar is \"stable\" and needs to be flushed.", "+\t\t\t\t\t\tfor (int i = 0; i < projects.length; i++) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tIProject project = projects[i];", "+\t\t\t\t\t\t\t\tif (project.isOpen() && project.hasNature(JavaCore.NATURE_ID)) {", "+\t\t\t\t\t\t\t\t\tIBuildConfiguration[] configs = project.getBuildConfigs();", "+\t\t\t\t\t\t\t\t\tif (configs.length > 1 && !JavaCore.BUILDER_ID.equals(configs[0].getName())) {", "+\t\t\t\t\t\t\t\t\t\tthis.manager.resetExternalFilesCache();", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch (CoreException exception) {", "+\t\t\t\t        \t\tUtil.log(exception, \"Exception while checking builder configuration ordering\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t }", "+\t\t\t\t\t}"]}], "num": 27550}
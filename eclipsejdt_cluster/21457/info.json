{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "906f03b013ad766e143c5711088ca810", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "079f597c0793c7a5e9a39a57383de996", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "1784048e951cac8e5c6590cc5827817757e6384e", "commitAfterChange": "4a48abb3b4027036bdeac61104059b6c83710144", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate int readToken() throws InvalidInputException", "signatureAfterChange": " \tprivate int readToken() throws InvalidInputException", "diff": ["+\t\t\tif (this.scanner.currentPosition > (this.lineEnd+1) && this.currentTokenType == TerminalTokens.TokenNameMULTIPLY) {", "+\t\t\t\twhile (this.currentTokenType == TerminalTokens.TokenNameMULTIPLY) {", "+\t\t\t\t\tthis.currentTokenType = this.scanner.getNextToken();", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "177534f8f0d4e82420093e1670ff343b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "76b6a3cfd736c0a5d2fa443496ebcce87b457034", "commitAfterChange": "758384b437a0774b752cc93ee115caa6a5280651", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tint resourcesLength = this.resources.length;", "+\tif (resourcesLength > 0) {", "+\t\tthis.postResourcesInitStateIndexes = new int[resourcesLength];", "+\t}", "+", "+", "-\t\tfor (int i = 0, max = this.resources.length; i < max; i++) {", "+\t\tfor (int i = 0; i < resourcesLength; i++) {", "+\t\t\tthis.postResourcesInitStateIndexes[i] = currentScope.methodScope().recordInitializationStates(flowInfo);", "-\t\tfor (int i = 0, max = this.resources.length; i < max; i++) {", "+\t\tfor (int i = 0; i < resourcesLength; i++) {", "+\t\t\tthis.postResourcesInitStateIndexes[i] = currentScope.methodScope().recordInitializationStates(flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a9b7bef5b099504c5824ea18041eb53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\tthis.postTryInitStateIndex = currentScope.methodScope().recordInitializationStates(tryInfo);", "+\t\t\tthis.postTryInitStateIndex = currentScope.methodScope().recordInitializationStates(tryInfo);", "+\t\t\tthis.postTryInitStateIndex = currentScope.methodScope().recordInitializationStates(tryInfo);", "+\t\t\tthis.postTryInitStateIndex = currentScope.methodScope().recordInitializationStates(tryInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "348c139f8ce6f596cf9ef3e01552a819", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public TypeReferencePattern(char[] qualification, char[] simpleName, String signature, int matchRule)", "signatureAfterChange": " \tpublic TypeReferencePattern(char[] qualification, char[] simpleName, String typeSignature, int matchRule)", "diff": ["- */", "-public TypeReferencePattern(char[] qualification, char[] simpleName, String signature, int matchRule) {", "-\tthis(qualification, simpleName,matchRule);", "-", "-\tif (signature != null) computeSignature(signature);", "-}", "+\t */", "+\tpublic TypeReferencePattern(char[] qualification, char[] simpleName, String typeSignature, int matchRule) {", "+\t\tthis(qualification, simpleName,matchRule);", "+\t\tif (typeSignature != null) {", "+\t\t\t// store type signatures and arguments", "+\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(typeSignature);", "+\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "+\t\t\tif (hasTypeArguments()) {", "+\t\t\t\tthis.segmentsSize = getTypeArguments().length + CharOperation.occurencesOf('/', this.typeSignatures[0]) - 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523bb8ea5676b0b0188938b63c5845ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "e8cc2a8f8e9efcff6e76a3ee15d5b53d1a958057", "commitAfterChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence, TypeDeclaration declaringType)", "signatureAfterChange": " public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence, TypeDeclaration declaringType)", "diff": ["+\t\t\t\t\ttypeInfo.annotationPositions = collectAnnotationPositions(typeDeclaration.annotations);", "+\t\t\t\t\ttypeInfo.annotationPositions = collectAnnotationPositions(typeDeclaration.annotations);", "+\t\t\t\ttypeInfo.annotationPositions = collectAnnotationPositions(typeDeclaration.annotations);", "+\t\t\t\ttypeInfo.annotationPositions = collectAnnotationPositions(typeDeclaration.annotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d92025d8578f6ec38d598d432ff53f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void acceptQualifiedTypes()", "signatureAfterChange": "  \tprivate void acceptQualifiedTypes()", "diff": ["-\t\t\t\tthis.requestor.acceptClass(", "+\t\t\t\tthis.requestor.acceptType(", "+\t\t\t\t\tthis.acceptedClassesModifiers[i],", "+\t\t\tthis.acceptedClassesModifiers = null;", "-\t\t\t\tthis.requestor.acceptInterface(", "+\t\t\t\tthis.requestor.acceptType(", "+\t\t\t\t\tthis.acceptedInterfacesModifiers[i],", "+\t\t\tthis.acceptedInterfacesModifiers = null;", "-\t\t\t\tthis.requestor.acceptAnnotation(", "+\t\t\t\tthis.requestor.acceptType(", "+\t\t\t\t\tthis.acceptedAnnotationsModifiers[i],", "+\t\t\tthis.acceptedAnnotationsModifiers = null;", "-\t\t\t\tthis.requestor.acceptEnum(", "+\t\t\t\tthis.requestor.acceptType(", "+\t\t\t\t\tthis.acceptedEnumsModifiers[i],", "+\t\t\tthis.acceptedEnumsModifiers = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa2f42ed9b6b3f700c17e213273ae91a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["+\t\t\t\t\talloc.sourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\tmsg.sourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\talloc.sourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\tmsg.sourceEnd = this.scanner.getCurrentTokenEndPosition();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cac9226cec4e8e097138b4f297cac18b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "4588c3b4f2f50edc1b7f6b03c5e9b0e36a6638a1", "commitAfterChange": "3d13a3235f809dfb48a127bd36dbb2c405e56ef1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\tthis.catchExitInitStateIndexes = new int[catchCount];", "-\t\t\t\t}", "-\t\t\t\telse {", "+\t\t\t\t} else {", "+\t\t\t\tthis.catchExitInitStateIndexes[i] = currentScope.methodScope().recordInitializationStates(catchInfo);", "+\t\t\tthis.catchExitInitStateIndexes = new int[catchCount];", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\tcatchInfo =", "-\t\t\t\t\tflowInfo.unconditionalCopy()", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "-\t\t\t\t\t\t\t// remove null info to protect point of ", "-\t\t\t\t\t\t\t// exception null info ", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "-\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\t}else {", "+\t\t\t\t\tcatchInfo =", "+\t\t\t\t\t\tflowInfo.unconditionalCopy()", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "+\t\t\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "+\t\t\t\t\t\t\t\t// remove null info to protect point of ", "+\t\t\t\t\t\t\t\t// exception null info ", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "+\t\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\tthis.catchExitInitStateIndexes[i] = currentScope.methodScope().recordInitializationStates(catchInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9216be38ce3ed15323f92c349f81364", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["-\t\t\t\t\tJavadocAllocationExpression expr = new JavadocAllocationExpression(this.identifierPositionStack[0]);", "-\t\t\t\t\texpr.type = typeRef;", "-\t\t\t\t\treturn expr;", "+\t\t\t\t\tJavadocAllocationExpression alloc = new JavadocAllocationExpression(this.identifierPositionStack[0]);", "+\t\t\t\t\talloc.type = typeRef;", "+\t\t\t\t\talloc.tagValue = this.tagValue;", "+\t\t\t\t\treturn alloc;", "+\t\t\t\t\tmsg.tagValue = this.tagValue;", "+\t\t\t\t\talloc.tagValue = this.tagValue;", "+\t\t\t\t\tmsg.tagValue = this.tagValue;"]}], "num": 21457}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17fe5768ad426bbed839900c465a26a5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be6c30753747157c7797a95442c7f3d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "f254767d87ae8dd4ff9c37cc7b1a6fc568af9dda", "commitAfterChange": "966710fd0db4acefe960a5bfb33635812ee1ac6d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static Object performNecessaryTypeConversion(final TypeMirror expectedType, \t    \t\t\t\t\t\t\t\t\t\t\t     final Object value, \t    \t\t\t\t\t\t\t\t\t\t\t     final String name, \t    \t\t\t\t\t\t\t\t\t\t\t     final EclipseMirrorImpl parent, \t    \t\t\t\t\t\t\t\t\t\t\t     final ProcessorEnvImpl env)", "signatureAfterChange": "     private static Object performNecessaryTypeConversion(final TypeMirror expectedType, \t    \t\t\t\t\t\t\t\t\t\t\t     final Object value, \t    \t\t\t\t\t\t\t\t\t\t\t     final String name, \t    \t\t\t\t\t\t\t\t\t\t\t     final EclipseMirrorImpl parent, \t    \t\t\t\t\t\t\t\t\t\t\t     final ProcessorEnvImpl env)", "diff": ["-    \t\t\t\treturn new Short((short)b);", "+    \t\t\t\treturn new Short(b);", "-    \t\t\t\treturn new Integer((short)b);", "+    \t\t\t\treturn new Integer(b);", "-    \t\t\t\treturn new Long((long)b);", "+    \t\t\t\treturn new Long(b);", "-    \t\t\t\treturn new Float((float)b);", "+    \t\t\t\treturn new Float(b);", "-    \t\t\t\treturn new Double((double)b);", "+    \t\t\t\treturn new Double(b);", "-    \t\t\t\treturn new Integer((int)s ); ", "+    \t\t\t\treturn new Integer(s); ", "-    \t\t\t\treturn new Long((long)s);", "+    \t\t\t\treturn new Long(s);", "-    \t\t\t\treturn new Float((float)s);", "+    \t\t\t\treturn new Float(s);", "-    \t\t\t\treturn new Double((double)s);", "+    \t\t\t\treturn new Double(s);", "-    \t\t\t\treturn new Integer((int)c ); ", "+    \t\t\t\treturn new Integer(c); ", "-    \t\t\t\treturn new Long((long)c);", "+    \t\t\t\treturn new Long(c);", "-    \t\t\t\treturn new Float((float)c);", "+    \t\t\t\treturn new Float(c);", "-    \t\t\t\treturn new Double((double)c);", "+    \t\t\t\treturn new Double(c);", "-    \t\t\t\treturn new Long((long)i);", "+    \t\t\t\treturn new Long(i);", "-    \t\t\t\treturn new Float((float)i);", "+    \t\t\t\treturn new Float(i);", "-    \t\t\t\treturn new Double((double)i);", "+    \t\t\t\treturn new Double(i);", "-    \t\t\t\treturn new Float((float)l);", "+    \t\t\t\treturn new Float(l);", "-    \t\t\t\treturn new Double((double)l);    \t\t", "+    \t\t\t\treturn new Double(l);    \t\t", "-    \t\t\t\treturn new Double((double)f);    \t\t", "+    \t\t\t\treturn new Double(f);    \t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e076a909c028a1b90948515e5c26828d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/typeutils/TypeUtilsProc.java", "commitBeforeChange": "e254cb1235fced696c16505589db91831c0df710", "commitAfterChange": "fdf4380d8dd2e7b1f08462c3e15a52a8d6142eb4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["-\t\tif (!examinePrimitives()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineNoType()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineGetDeclaredType()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineGetDeclaredTypeParameterized()) {", "-\t\t\treturn false;", "-\t\t}", "-", "-\t\tif (!examineGetDeclaredTypeNested()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineGetArrayTypeParameterized()) {", "-\t\t\treturn false;", "+\t\ttry {", "+    \t\tif (!examinePrimitives()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineNoType()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineGetDeclaredType()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineGetDeclaredTypeParameterized()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    ", "+    \t\tif (!examineGetDeclaredTypeNested()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineGetArrayTypeParameterized()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineTypesAsMemberOf()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineTypesAsMemberOfSubclass()) {", "+    \t\t    return false;", "+    \t\t}", "+\t\t} catch (RuntimeException e) {", "+\t\t    StringWriter sw = new StringWriter();", "+\t\t    PrintWriter w = new PrintWriter(sw);", "+\t\t    e.printStackTrace(w);", "+\t\t    reportError(sw.toString());", "+\t\t    return false;"]}], "num": 2448}
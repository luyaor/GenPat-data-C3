{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd4e694b14975946c7d9226afdeaa8a9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "711dd92b14122f19aba0a9e6dbc1a86c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "73e6c55b6cebcb032c8128286708483f86167b64", "commitAfterChange": "5326f4925981afee39790c88bc133bd18e542033", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int annotationStart, int annotationEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int annotationStart, int annotationEnd)", "diff": ["-\t\t\tif (this.checkAnnotation && this.scanner.source != null) {", "+\t\t\tif (this.checkAnnotation) {", "-\t\t\t\t\t\t\tif (this.annotation == null) {", "+\t\t\t\t\t\t\tif (!this.checkAnnotation) {", "-\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.lineEnd);", "-\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tint tk = readTokenAndConsume();", "-\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\tswitch (tk) {", "-\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "-\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "-\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "-\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\t\t\tparseParam();", "-\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\t\t\tparseThrows();", "-\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "-\t\t\t\t\t\t\t\t\tparseSee();", "+\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.lineEnd);", "+\t\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tint tk = readTokenAndConsume();", "+\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\t\t\tswitch (tk) {", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "+\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "+\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\t\t\t\t\tparseParam();", "+\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\t\t\t\tparseThrows();", "+\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\t\t\t\t\tparseSee();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "+\t\t\t\t\t\t\t\t\t\tparseReturn();", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "+\t\t\t\t\t\t\t\t\t\tparseThrows();", "+\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\t\t\t\t\t\tparseReturn();", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\t\t\t\t\t\tparseThrows();", "-\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcontinue nextLine;", "+\t\t\t\t\t\t\tcontinue nextLine;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea0e853f982de8b228fed488fd616909", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5b534766d4f50c0b706c85a960952c0a8d402690", "commitAfterChange": "9c01a288cfc10861d0cbe8d85e9282d8f2684406", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "signatureAfterChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "diff": ["-\t\t\t\t\t\t// Count the lines until the exact start position of the code", "-\t\t\t\t\t\tthis.scanner.resetTo(end+1, nextStart-1);", "-\t\t\t\t\t\tint newLines = 0;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tint token = this.scanner.getNextToken();", "-\t\t\t\t\t\t\tloop: while (true) {", "-\t\t\t\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "-\t\t\t\t\t\t\t\t\t\tif (CharOperation.indexOf('\\n', this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition) < 0) {", "-\t\t\t\t\t\t\t\t\t\t\tbreak loop;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tnewLines++;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "-\t\t\t\t\t\t\t\t\t\tnextStart = this.scanner.currentPosition + 1;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t// See whether there's a space before the code", "+\t\t\t\t\t\tboolean needLeadingSpace = false;", "+\t\t\t\t\t\tif (linesGap > 0) {", "+\t\t\t\t\t\t\tint lineStart = this.scanner.getLineStart(startLine);", "+\t\t\t\t\t\t\tif (nextStart > lineStart) { // if code starts at the line, then no leading space is needed", "+\t\t\t\t\t\t\t\tthis.scanner.resetTo(lineStart, nextStart-1);", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tint token = this.scanner.getNextToken();", "+\t\t\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\t\t\t\t\t\t\t\t// skip indentation", "+\t\t\t\t\t\t\t\t\t\ttoken = this.scanner.getNextToken();", "+\t\t\t\t\t\t\t\t\t\tneedLeadingSpace = false; // there may be no star after", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tneedLeadingSpace = true;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameMULTIPLY) {", "+\t\t\t\t\t\t\t\t\t\tnextStart = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\t\t// skip javadoc comment star", "+\t\t\t\t\t\t\t\t\t\ttoken = this.scanner.getNextToken();", "+\t\t\t\t\t\t\t\t\t\tneedLeadingSpace = true;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\t\t\t\t\t\t\t\tneedLeadingSpace = false;", "+\t\t\t\t\t\t\t\t\t\tnextStart++;", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\ttoken = this.scanner.getNextToken();", "+\t\t\t\t\t\t\t\tcatch (InvalidInputException iie) {", "+\t\t\t\t\t\t\t\t\t// skip", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tcatch (InvalidInputException iie) {", "-\t\t\t\t\t\t\t// skip", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Format gap lines before code", "+\t\t\t\t\t\tint newLines = linesGap;", "-\t\t    \t\t\tprintJavadocGapLines(end+1, nextStart-1, newLines, false/* clear first blank lines inside <pre> tag as done by old formatter */, false, null);", "+\t\t\t\t\t\tprintJavadocGapLines(end+1, nextStart-1, newLines, false/* clear first blank lines inside <pre> tag as done by old formatter */, false, null);", "+\t\t\t\t\t\tif (needLeadingSpace) {", "+\t\t\t\t\t\t\taddInsertEdit(nextStart, \" \"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Format the code", "+\t\t\t\t\t\t// Format the gap lines after the code"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3392193c5f49d827dab1924aec47773", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int annotationStart, int annotationEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int annotationStart, int annotationEnd)", "diff": ["-\t\t\tif (this.sourceParser.options.checkAnnotation) {", "+\t\t\t//this.problemReporter = sourceParser.problemReporter();", "+\t\t\tif (this.checkAnnotation) {", "-\t\t\t\tthis.identifierPtr = -1;", "+\t\t\t\tthis.astLengthPtr = -1;", "+\t\t\t\tthis.astPtr = -1;", "+\t\t\t\t//if (this.scanner.source == null) {", "+\t\t\t\t//\tthis.scanner.setSource(this.source);", "+\t\t\t\t//}", "+\t\t\t\t//this.scanner.setSource(CharOperation.subarray(this.source, annotationStart, annotationEnd+1));", "+\t\t\t\t//this.source = this.scanner.source;", "+\t\t\t\tthis.currentTokenType = -1;", "-\t\t\t\tthis.index[0] = lineStart;", "-\t\t\t\tint lineEnd = line == lastLineNumber", "+\t\t\t\t//lineStart -= annotationStart;", "+\t\t\t\tthis.index = lineStart;", "+\t\t\t\tthis.lineEnd = line == lastLineNumber", "-\t\t\t\twhile (this.index[0] < lineEnd) {", "+\t\t\t\t//this.lineEnd -= annotationStart;", "+\t\t\t\twhile (this.index < this.lineEnd) {", "-\t\t\t\t\t\t\tthis.scanner.resetTo(this.index[0], lineEnd);", "+\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.lineEnd);", "+\t\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "-\t\t\t\t\t\t\t\tswitch (this.scanner.getNextToken()) {", "+\t\t\t\t\t\t\t\tint tk = readConsumeToken();", "+\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\t\t\tswitch (tk) {", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_THROWS) || CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "+\t\t\t\t\t\t\t\t\t\tparseThrows();", "+\t\t\t\t\t\t\t\t\t\tbreak;", "-\t \t\t\t\t\t\t\t// ignore", "+\t \t\t\t\t\t\t\tconsumeToken();", "+\t\t\tupdateAnnotation();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f77fe9a0478257267708c68f952882a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["-\tpublic boolean checkDeprecation(int javadocStart, int javadocEnd) {", "+\tprotected boolean parseComment(int javadocStart, int javadocEnd) {", "-\t\t\tchar nextCharacter= 0, previousChar;", "-\t\t\tint charPosition = -1, inlineStartPosition = 0;", "-\t\t\tinitLineEnd();", "+\t\t\tthis.linePtr = getLineNumber(javadocStart);", "+\t\t\tthis.lastLinePtr = getLineNumber(javadocEnd);", "+\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : javadocStart + 3;", "+\t\t\tthis.textStart = -1;", "+\t\t\tchar nextCharacter= 0, previousChar;", "+\t\t\tint charPosition = -1, inlineStartPosition = 0;", "-\t\t\t\tif (this.index > this.lineEnd) {", "+\t\t\t\tif (this.index > (this.lineEnd+1)) {", "+\t\t\t\t\tpreviousPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, charPosition);", "-\t\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\t\tthis.tagSourceStart = this.kind == COMPIL_PARSER ? this.scanner.getCurrentTokenStartPosition() : previousPosition;", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows(false);", "-\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINK) ||", "-\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINKPLAIN)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "+\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(true);", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows(true);", "+\t\t\t\t\t\t\t\t\tthis.textStart = this.index;", "+\t\t\t\t\t\tif (this.lineStarted && this.textStart <= charPosition) {", "+\t\t\t\t\t\t\tpushText(this.textStart, charPosition);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (this.inlineTagStarted) this.inlineTagStarted = false;", "-\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\tcharPosition = previousPosition;", "+\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\tif (this.lineStarted && this.textStart <= charPosition) {", "+\t\t\t\t\t\t\t\tpushText(this.textStart, charPosition);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.textStart = this.index;", "+\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.index < this.lineEnd) {", "+\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\t\tcharPosition = previousPosition;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!this.lineStarted && !CharOperation.isWhitespace(nextCharacter)) {", "+\t\t\t\t\t\tif (!CharOperation.isWhitespace(nextCharacter)) {", "+\t\t\t\t\t\t\tif (!this.lineStarted) {", "+\t\t\t\t\t\t\t\tthis.textStart = previousPosition;", "+\t\t\t\t\t\t\t}", "-\t\t} finally {", "-\t\t\tupdateJavadoc();", "+\t\t\tif (this.lineStarted && this.textStart <= this.endComment) {", "+\t\t\t\tpushText(this.textStart, this.endComment);", "+\t\t\t}", "+\t\t\tupdateDocComment();", "+\t\t} catch (Exception ex) {", "+\t\t\tvalidComment = false;"]}], "num": 45616}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e1ed18f0f546dc0e7800589bc3da3de", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57840e3b234a33c014b0c159c6e1ec9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "c5d1291515e72a1b02e2dba658336524eb7964dc", "commitAfterChange": "5c7f45483ff98aea12080f74206c0fab992839fd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t// if compliance 1.4 & source 1.3 => target is 1.2 if not specified", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)){", "-\t\t\tif (didSpecifyCompliance", "-\t\t\t\t&& this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t&& !didSpecifyTarget) {", "+\t\t// set default target according to compliance & sourcelevel.", "+\t\tif (!didSpecifyTarget) {", "+\t\t\tif (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82a451fbcf9e26ff1f5a543e9a72d9ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f174c5e3ec66ea2a46810b190cc3e9d57c0432d4", "commitAfterChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\tif (this.options.docCommentSupport) {", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\t} else {", "+\t\t\t\treturn ProblemSeverities.Ignore;", "+\t\t\t}", "-\t\t\tif (!this.options.reportInvalidJavadocTags)", "-\t\t\t\treturn ProblemSeverities.Ignore;", "-\t\t\telse", "+\t\t\tif (this.options.docCommentSupport && this.options.reportInvalidJavadocTags) {", "+\t\t\t} else {", "+\t\t\t\treturn ProblemSeverities.Ignore;", "+\t\t\t}", "-\t\t\treturn this.options.getSeverity(CompilerOptions.MissingJavadocTags);", "+\t\t\tif (this.options.docCommentSupport) {", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.MissingJavadocTags);", "+\t\t\t} else {", "+\t\t\t\treturn ProblemSeverities.Ignore;", "+\t\t\t}", "-\t\t\treturn this.options.getSeverity(CompilerOptions.MissingJavadocComments);", "+\t\t\tif (this.options.docCommentSupport) {", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.MissingJavadocComments);", "+\t\t\t} else {", "+\t\t\t\treturn ProblemSeverities.Ignore;", "+\t\t\t}"]}], "num": 3040}
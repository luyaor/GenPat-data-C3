{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0ac13aa2a37598bc34e8a74dffc5e97", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc91a745a6b59226e9233ede9d9ef1ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["-\t\tint rightStatus = this.right.nullStatus(flowInfo);", "-\t\tint leftStatus = this.left.nullStatus(flowInfo);", "-\t\t// check if either is a method annotated @NonNull and compared to null:", "+", "+\t\t// collect null status of child nodes:", "+\t\tint rightStatus = this.right.nullStatus(flowInfo, flowContext);", "+\t\tint leftStatus = this.left.nullStatus(flowInfo, flowContext);", "+", "+\t\tboolean leftNonNullChecked = false;", "+\t\tboolean rightNonNullChecked = false;", "+", "+\t\t// check if either is a non-local expression known to be nonnull and compared to null, candidates are", "+\t\t// - method/field annotated @NonNull", "+\t\t// - allocation expression, some literals, this reference (see inside expressionNonNullComparison(..))", "+\t\t// these checks do not leverage the flowInfo.", "+\t\tboolean checkEquality = ((this.bits & OperatorMASK) >> OperatorSHIFT) == EQUAL_EQUAL;", "-\t\t\tif (this.left instanceof MessageSend) { ", "-\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.left).binding, this.left);", "-\t\t\t}", "-\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t\tleftNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.left, checkEquality);", "-\t\t\tif (this.right instanceof MessageSend) {", "-\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.right).binding, this.right);", "+\t\t\trightNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.right, checkEquality);", "+\t\t}", "+\t\t", "+\t\t// perform flowInfo-based checks for variables and record info for syntactic null analysis for fields:", "+\t\tif (!leftNonNullChecked) {", "+\t\t\tLocalVariableBinding local = this.left.localVariableBinding();", "+\t\t\tif (local != null) {", "+\t\t\t\tif ((local.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, rightStatus, this.left);", "+\t\t\t\t}", "+\t\t\t} else if (this.left instanceof Reference", "+\t\t\t\t\t\t\t&& ((!checkEquality && rightStatus == FlowInfo.NULL) || (checkEquality && rightStatus == FlowInfo.NON_NULL))", "+\t\t\t\t\t\t\t&& scope.compilerOptions().enableSyntacticNullAnalysisForFields)", "+\t\t\t{", "+\t\t\t\tFieldBinding field = ((Reference)this.left).lastFieldBinding();", "+\t\t\t\tif (field != null && (field.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\t\tflowContext.recordNullCheckedFieldReference((Reference) this.left, 1);", "+\t\t\t\t}", "-\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t}", "+\t\tif (!rightNonNullChecked) {", "+\t\t\tLocalVariableBinding local = this.right.localVariableBinding();", "+\t\t\tif (local != null) { ", "+\t\t\t\tif ((local.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, leftStatus, this.right);", "+\t\t\t\t}", "+\t\t\t} else if (this.right instanceof Reference", "+\t\t\t\t\t\t\t&& ((!checkEquality && leftStatus == FlowInfo.NULL) || (checkEquality && leftStatus == FlowInfo.NON_NULL))", "+\t\t\t\t\t\t\t&& scope.compilerOptions().enableSyntacticNullAnalysisForFields) ", "+\t\t\t{", "+\t\t\t\tFieldBinding field = ((Reference)this.right).lastFieldBinding();", "+\t\t\t\tif (field != null && (field.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\t\tflowContext.recordNullCheckedFieldReference((Reference) this.right, 1);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t}", "-\t\tLocalVariableBinding local = this.left.localVariableBinding();", "-\t\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, rightStatus, this.left);", "-\t\t}", "-\t\tlocal = this.right.localVariableBinding();", "-\t\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, leftStatus, this.right);", "+\t\t// handle reachability:", "+\t\tif (leftNonNullChecked || rightNonNullChecked) {", "+\t\t\t// above checks have not propagated unreachable into the corresponding branch, do it now:", "+\t\t\tif (checkEquality) {", "+\t\t\t\tinitsWhenTrue.setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "+\t\t\t} else {", "+\t\t\t\tinitsWhenFalse.setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5fc7773f907607f5b7e3855190e6ae7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "b14a6c4d09a9bece1bab75937908ff44df19fa09", "commitAfterChange": "a846071c58f9098177eef02be0134294158f9c4f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["-\t\tint rightStatus = this.right.nullStatus(flowInfo);", "-\t\tint leftStatus = this.left.nullStatus(flowInfo);", "-\t\t// check if either is a method annotated @NonNull and compared to null:", "+", "+\t\t// collect null status of child nodes:", "+\t\tint rightStatus = this.right.nullStatus(flowInfo, flowContext);", "+\t\tint leftStatus = this.left.nullStatus(flowInfo, flowContext);", "+", "+\t\tboolean leftNonNullChecked = false;", "+\t\tboolean rightNonNullChecked = false;", "+", "+\t\t// check if either is a non-local expression known to be nonnull and compared to null, candidates are", "+\t\t// - method/field annotated @NonNull", "+\t\t// - allocation expression, some literals, this reference (see inside expressionNonNullComparison(..))", "+\t\t// these checks do not leverage the flowInfo.", "+\t\tboolean checkEquality = ((this.bits & OperatorMASK) >> OperatorSHIFT) == EQUAL_EQUAL;", "-\t\t\tif (this.left instanceof MessageSend) { ", "-\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.left).binding, this.left);", "-\t\t\t}", "-\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t\tleftNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.left, checkEquality);", "-\t\t\tif (this.right instanceof MessageSend) {", "-\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.right).binding, this.right);", "+\t\t\trightNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.right, checkEquality);", "+\t\t}", "+\t\t", "+\t\t// perform flowInfo-based checks for variables and record info for syntactic null analysis for fields:", "+\t\tif (!leftNonNullChecked) {", "+\t\t\tLocalVariableBinding local = this.left.localVariableBinding();", "+\t\t\tif (local != null) {", "+\t\t\t\tif ((local.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, rightStatus, this.left);", "+\t\t\t\t}", "+\t\t\t} else if (this.left instanceof Reference", "+\t\t\t\t\t\t\t&& ((!checkEquality && rightStatus == FlowInfo.NULL) || (checkEquality && rightStatus == FlowInfo.NON_NULL))", "+\t\t\t\t\t\t\t&& scope.compilerOptions().enableSyntacticNullAnalysisForFields)", "+\t\t\t{", "+\t\t\t\tFieldBinding field = ((Reference)this.left).lastFieldBinding();", "+\t\t\t\tif (field != null && (field.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\t\tflowContext.recordNullCheckedFieldReference((Reference) this.left, 1);", "+\t\t\t\t}", "-\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t}", "+\t\tif (!rightNonNullChecked) {", "+\t\t\tLocalVariableBinding local = this.right.localVariableBinding();", "+\t\t\tif (local != null) { ", "+\t\t\t\tif ((local.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, leftStatus, this.right);", "+\t\t\t\t}", "+\t\t\t} else if (this.right instanceof Reference", "+\t\t\t\t\t\t\t&& ((!checkEquality && leftStatus == FlowInfo.NULL) || (checkEquality && leftStatus == FlowInfo.NON_NULL))", "+\t\t\t\t\t\t\t&& scope.compilerOptions().enableSyntacticNullAnalysisForFields) ", "+\t\t\t{", "+\t\t\t\tFieldBinding field = ((Reference)this.right).lastFieldBinding();", "+\t\t\t\tif (field != null && (field.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\t\tflowContext.recordNullCheckedFieldReference((Reference) this.right, 1);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t}", "-\t\tLocalVariableBinding local = this.left.localVariableBinding();", "-\t\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, rightStatus, this.left);", "-\t\t}", "-\t\tlocal = this.right.localVariableBinding();", "-\t\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, leftStatus, this.right);", "+\t\t// handle reachability:", "+\t\tif (leftNonNullChecked || rightNonNullChecked) {", "+\t\t\t// above checks have not propagated unreachable into the corresponding branch, do it now:", "+\t\t\tif (checkEquality) {", "+\t\t\t\tinitsWhenTrue.setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "+\t\t\t} else {", "+\t\t\t\tinitsWhenFalse.setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "+\t\t\t}"]}], "num": 17157}
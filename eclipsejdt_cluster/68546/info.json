{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c944fb24cf01de2949ae59d2a046669f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ade9fd79d3ca94451e65f3e8921f1769", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "4536803cd5b2a0c257b0b0ad983aa6ff48927661", "commitAfterChange": "cd2843c8a5aedbfeba5f759ec4b2577ec3055c26", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \t \tvoid checkMemberValues(MemberValuePair[] valuePairs, Scope scope)", "signatureAfterChange": " \t \t \tvoid checkMemberValues(MemberValuePair[] valuePairs, Scope scope)", "diff": ["-\t\t\t\t\t", "-\t\t\t\t\t// Compile-time conversion of base-types : implicit narrowing integer into byte/short/character", "-\t\t\t\t\t// may require to widen the rhs expression at runtime", "-\t\t\t\t\tif (expectedValueType != valueType) // must call before computeConversion() and typeMismatchError()", "-\t\t\t\t\t\tscope.compilationUnitScope().recordTypeConversion(expectedValueType, valueType);", "-\t\t\t\t\tif ((memberValue.isConstantValueOfTypeAssignableToType(valueType, expectedValueType)", "-\t\t\t\t\t\t\t|| (expectedValueType.isBaseType() && BaseTypeBinding.isWidening(expectedValueType.id, valueType.id)))", "-\t\t\t\t\t\t\t|| valueType.isCompatibleWith(expectedValueType)) {", "-\t\t\t\t\t\tmemberValue.computeConversion(scope, expectedValueType, valueType);", "-\t\t\t\t\t\tcontinue nextMember;", "-\t\t\t\t\t}", "-\t\t\t\t\tscope.problemReporter().typeMismatchError(valueType, expectedValueType, memberValue);", "-\t\t\t\t\tcontinue nextMember;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4dd11e973cdc41d51e942f49e6bc91f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 41, "signatureBeforeChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["-", "-\t\t\t\t// apply null default:", "-\t\t\t\tLookupEnvironment environment = this.scope.environment();", "-\t\t\t\tTypeBinding defaultNullnessAnnotationBinding = null;", "-\t\t\t\tif (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "-\t\t\t\t\tinitializeNullDefault();", "-\t\t\t\t\tdefaultNullnessAnnotationBinding = findDefaultNullness(this.scope, environment);", "-\t\t\t\t\tif (defaultNullnessAnnotationBinding != null && defaultNullnessAnnotationBinding.id == TypeIds.T_ConfiguredAnnotationNonNull) {", "-\t\t\t\t\t\tfield.fillInDefaultNonNullness(defaultNullnessAnnotationBinding, fieldDecl, initializationScope);", "-\t\t\t\t\t}", "-\t\t\t\t\t// validate null annotation:", "-\t\t\t\t\tthis.scope.validateNullAnnotation(field.tagBits, fieldDecl.type, fieldDecl.annotations);", "-\t\t\t\t}"]}], "num": 68546}
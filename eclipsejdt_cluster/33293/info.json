{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd0a211fe6fcb2713b0e1de6df409205", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e08c041c1cc6c46127ae01a2aab9882", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "917603919e9d38772fd63709feb3bbda7696f523", "commitAfterChange": "fca5fd453024a315e76f840acd34b846e15423bf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected boolean parseHtmlTag(int previousPosition, int endTextPosition) throws InvalidInputException", "signatureAfterChange": " protected boolean parseHtmlTag(int previousPosition, int endTextPosition) throws InvalidInputException", "diff": ["+    int htmlPtr = this.htmlTagsPtr;", "+\t\t\t\tif (htmlIndex == JAVADOC_TAGS_ID_MASK) return valid;", "-\t\t\t\thtmlIndex = htmlTagIndex(htmlTag);", "-\t    \t\tif ((token = readTokenAndConsume()) != TerminalTokens.TokenNameIdentifier || !CharOperation.equals(htmlTag, this.scanner.getCurrentIdentifierSource(), false)) {", "-\t    \t\t\tthis.abort = true;", "+\t    \t\tif ((token = readTokenAndConsume()) != TerminalTokens.TokenNameIdentifier) {", "+\t    \t\t\t// not a closing html tag", "+\t    \t\t}", "+\t\t\t\tchar[] identifier = this.scanner.getCurrentIdentifierSource();", "+\t\t\t\thtmlIndex = htmlTagIndex(identifier);", "+\t\t\t\tif (htmlIndex == JAVADOC_TAGS_ID_MASK) return valid;", "+\t    \t\twhile (!CharOperation.equals(htmlTag, identifier, false)) {", "+\t    \t\t\tif (htmlTagsPtr <= 0) {", "+\t    \t\t\t\t// consider the closing tag as invalid", "+\t    \t\t\t\treturn valid;", "+\t    \t\t\t}", "+\t    \t\t\tthis.htmlTagsPtr--;", "+\t\t    \t\thtmlTag = this.htmlTags[this.htmlTagsPtr];", "-\t\t\tpushText(this.textStart, endTextPosition, -1, closing ? this.htmlTagsPtr : (this.htmlTagsPtr < 1 ? 0 : this.htmlTagsPtr-1));", "+\t\t\tpushText(this.textStart, endTextPosition, -1, htmlPtr == -1 ? 0 : htmlPtr);", "-\t\t\tif (closing) this.htmlTagsPtr--;", "+\t\t\tif (closing) {", "+\t\t\t\tthis.htmlTagsPtr--;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66651174c579e488ad42f3e4104ad94b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "f40bb68ce877b39e7fa8b3c9def938c4d0ca9994", "commitAfterChange": "c655d92a48125fd6350084ea43e33652c64e04fa", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate Expression parseReference() throws InvalidInputException", "signatureAfterChange": " \tprivate Expression parseReference() throws InvalidInputException", "diff": ["+\t\tExpression reference = null;", "-\t\t\t\t\t\t} catch (InvalidInputException e) {// Do nothing as we want to underline from the beginning of the string", "+\t\t\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\t\t\t// Do nothing as we want to underline from the beginning of the string", "-\t\t\t\t\t\t\t} catch (InvalidInputException e) {// Do nothing as we want to underline from the beginning of the href", "+\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\t\t\t\t// Do nothing as we want to underline from the beginning of the href", "-\t\t\t\t\t\treturn parseMember(typeRef);", "+\t\t\t\t\t\treference = parseMember(typeRef);", "+\t\t\t\t\t\tif (reference == null) {", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak nextToken;", "-\t\tif (typeRef == null) {", "+\t\t", "+\t\t// Verify that we got a reference", "+\t\tif (reference == null) reference = typeRef;", "+\t\tif (reference == null) {", "+\t\t\treturn null;", "-\t\treturn typeRef;", "+\t\t", "+\t\t// Verify that we're at line end", "+\t\tint start = this.scanner.getCurrentTokenStartPosition();", "+\t\ttry {", "+\t\t\tint token = readTokenAndConsume();", "+\t\t\tif (token != TerminalTokens.TokenNameLPAREN) {", "+\t\t\t\treturn reference;", "+\t\t\t}", "+\t\t} catch (InvalidInputException e) {", "+\t\t\t// Do nothing as we report an error after", "+\t\t}", "+\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd - 1);", "+\t\treturn null;"]}], "num": 33293}
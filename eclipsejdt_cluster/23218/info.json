{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0055a6a3adf8a244548687dbda851641", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b3da494dd61c73278949359cb1f80f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f01f87743cf608d26c7b7eb30e6a4638fa162dfc", "commitAfterChange": "ab90d16bd1c89fdc80a15ee5244e295e2979188b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["+\t\t\t\tint kind;", "+\t\t\t\tif (variable instanceof CompletionOnLocalName){", "+\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "+\t\t\t\t\tkind = LOCAL;", "+\t\t\t\t} else {", "+\t\t\t\t\tCompletionOnArgumentName arg = (CompletionOnArgumentName) variable;", "+\t\t\t\t\tthis.completionToken = arg.realName;", "+\t\t\t\t\tkind = arg.isCatchArgument ? LOCAL : ARGUMENT;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tchar[][] alreadyDefinedName = computeAlreadyDefinedName((BlockScope)scope, variable);", "+\t\t\t\t", "+\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, alreadyDefinedName);", "+\t\t\t\t", "+\t\t\t\t", "-\t\t\t\tif (variable instanceof CompletionOnLocalName){", "-\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "-\t\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, discouragedNames);", "-\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, LOCAL, variable.modifiers);", "-\t\t\t\t} else {", "-\t\t\t\t\tCompletionOnArgumentName arg = (CompletionOnArgumentName) variable;", "-\t\t\t\t\tthis.completionToken = arg.realName;", "-\t\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, discouragedNames);", "-\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "-\t\t\t\t}", "+\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, kind, variable.modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd68c1b2ac64911900744a4cb4f3f9ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c2e73e92d84b995d792bc11e9e3cc44e31128806", "commitAfterChange": "7530e9811f8e0b012d59fd23237f75cdb4977fd6", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "diff": ["-\tif (!this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled)", "-\t\treturn;", "-\tboolean useTypeAnnotations = this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8;", "-\t// in 1.8 we only need @NonNullByDefault, see below and exit further down.", "-\tboolean explicitNullness = false;", "-\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNullByDefault;", "-\t\t\t\tif (useTypeAnnotations)", "-\t\t\t\t\tmethodBinding.defaultNullness = getNonNullByDefaultValue(annotations[i]);", "-\t\t\t}", "-\t\t\tif (!useTypeAnnotations && !explicitNullness) {", "-\t\t\t\tif (CharOperation.equals(typeName, nonNullAnnotationName)) {", "-\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "-\t\t\t\t\texplicitNullness = true;", "-\t\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "-\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullable;", "-\t\t\t\t\texplicitNullness = true;", "-\t\t\t\t}", "+\t\t\t\tmethodBinding.defaultNullness = getNonNullByDefaultValue(annotations[i]);", "+\t\t\t\tif (methodBinding.defaultNullness == Binding.NULL_UNSPECIFIED_BY_DEFAULT)", "+\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t\telse if (methodBinding.defaultNullness != 0)", "+\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNullByDefault;", "+\t\t\t} else if (CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "+\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullable;", "-", "-\tif (useTypeAnnotations)", "-\t\treturn;"]}], "num": 23218}
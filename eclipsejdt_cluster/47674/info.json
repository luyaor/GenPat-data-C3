{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fcb2f838a3ffa8113d7bd217354f1e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bef94031310f69fa0cc024f5249c5fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tpublic boolean visit(SwitchStatement switchStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(SwitchStatement switchStatement, BlockScope scope)", "diff": ["-\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameswitch);", "-\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameLPAREN, this.preferences.insert_space_before_switch_condition);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameswitch);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_switch_condition);", "-\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameRPAREN, this.preferences.insert_space_in_switch_condition);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_in_switch_condition);", "-\t\t\tboolean wasABreak = false;", "+\t\t\tboolean wasACase = false;", "+\t\t\tboolean wasAStatement = false;", "-\t\t\t\tif (i == 0) {", "-\t\t\t\t\t// this is a case or a default statement", "+\t\t\t\tif (statement instanceof CaseStatement) {", "-\t\t\t\t\tif (this.preferences.indent_switchstatements_compare_to_cases) {", "-\t\t\t\t\t\tthis.scribe.indent();", "-\t\t\t\t\t}", "-\t\t\t\t} else if (statement instanceof CaseStatement) {", "-\t\t\t\t\tif (wasABreak) {", "-\t\t\t\t\t\tif (this.preferences.indent_breaks_compare_to_cases) {", "-\t\t\t\t\t\t\tthis.scribe.unIndent();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if (this.preferences.indent_switchstatements_compare_to_cases) {", "-\t\t\t\t\t\tthis.scribe.unIndent();", "-\t\t\t\t\t}", "-\t\t\t\t\tstatement.traverse(this, scope);", "-\t\t\t\t\twasABreak = false;", "-\t\t\t\t\tif (this.preferences.indent_switchstatements_compare_to_cases) {", "-\t\t\t\t\t\tthis.scribe.indent();", "-\t\t\t\t\t}", "+\t\t\t\t\twasACase = true;", "+\t\t\t\t\twasAStatement = false;", "-\t\t\t\t\twasABreak = true;", "-\t\t\t\t\tif (this.preferences.indent_switchstatements_compare_to_cases) {", "-\t\t\t\t\t\tif (!this.preferences.indent_breaks_compare_to_cases) {", "-\t\t\t\t\t\t\tthis.scribe.unIndent();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if (this.preferences.indent_breaks_compare_to_cases) {", "+\t\t\t\t\tif (wasAStatement && this.preferences.indent_switchstatements_compare_to_cases) {", "+\t\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (wasACase && this.preferences.indent_breaks_compare_to_cases) {", "-\t\t\t\t\tif (i == statementsLength - 1 && this.preferences.indent_breaks_compare_to_cases) {", "+\t\t\t\t\tif (wasACase && this.preferences.indent_breaks_compare_to_cases) {", "+\t\t\t\t\tif (wasAStatement && this.preferences.indent_switchstatements_compare_to_cases) {", "+\t\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t\t}", "+\t\t\t\t\twasACase = false;", "+\t\t\t\t\twasAStatement = false;", "-\t\t\t\t\twasABreak = false;", "+\t\t\t\t\tif (wasACase && this.preferences.indent_switchstatements_compare_to_cases) {", "+\t\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\t\t}", "-\t\t\t\t\tif (i == statementsLength - 1 && this.preferences.indent_switchstatements_compare_to_cases) {", "+\t\t\t\t\tif (wasACase && this.preferences.indent_switchstatements_compare_to_cases) {", "+\t\t\t\t\twasAStatement = true;", "+\t\t\t\t\twasACase = false;", "-\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\t\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameRBRACE);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ff6f61f0f46b3690ed03d07e0a79a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "786993dd9585d4f14416c7b5f8e3764c466721f7", "commitAfterChange": "bc001047b4a82ed71734208a2fa6b751eb7774fc", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tprivate void printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate void printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["-\t\tboolean textOnFirstLine = false;", "-\t\t\t\tpreviousToken = 1;", "+\t\t\t\tpreviousToken = 2000;", "-    \t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || newLine || previousToken == -1) && (!firstWord || !hasTokens);", "+    \t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE) && (!firstWord || !hasTokens);", "+\t\t\t\t\t\tif (hasTextOnFirstLine == 1 && multiLines) {", "+\t\t\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\t\t\thasTextOnFirstLine = -1;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!textOnFirstLine && multiLines) {", "-\t\t\t\t\t\t\ttextOnFirstLine = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\tpreviousToken = token;", "+\t\t\t\t\tif (previousToken == -1) {", "+\t\t\t\t\t\t// do not remember the first whitespace", "+\t\t\t\t\t\tpreviousToken = -2;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tpreviousToken = token;", "+\t\t\t\t\t}", "+\t\t\tlineNumber = Util.getLineNumber(this.scanner.getCurrentTokenEndPosition(), this.lineEnds, scannerLine>1 ? scannerLine-2 : 0, this.maxLines);", "+\t\t\t\t\t\tif (hasTextOnFirstLine == 1) {", "+\t\t\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\t\t\thasTextOnFirstLine = -1;", "+\t\t\t\t\t\t}", "-\t\t\tscannerLine = lineNumber;", "-\t\t\tlastTextLine = lineNumber;", "-    \t\tif (hasTextOnFirstLine == 0 && scannerLine == firstLine) {", "-    \t\t\thasTextOnFirstLine = 1;", "-    \t\t\ttextOnFirstLine = true;", "+    \t\tif (hasTextOnFirstLine == 0) {", "+    \t\t\tif (firstLine == lineNumber) {", "+\t    \t\t\thasTextOnFirstLine = 1;", "+\t    \t\t\tthis.column++; // include first space", "+\t    \t\t} else {", "+\t    \t\t\thasTextOnFirstLine = -1;", "+\t    \t\t}", "-    \t\tif (previousToken == -1 || insertSpace) lastColumn++;", "+    \t\tif (insertSpace) lastColumn++;", "-\t\t\t\tboolean alreadyHasNewLine = !bufferHasTokens && tokensBuffer.length() > 0 && multiLines;", "+\t\t\t\t// not enough space on the line", "+\t\t\t\tif (hasTextOnFirstLine == 1) {", "+\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t}", "-\t\t\t\t\tif (buffer.length() == 0) {", "-\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\tthis.column++;", "-\t\t\t\t\t}", "-\t\t\t\t\talreadyHasNewLine = false;", "-\t\t\t\t// not enough space on the line", "-\t\t\t\tif (!alreadyHasNewLine) {", "+\t\t\t\tif (bufferHasTokens) {", "-\t\t\t\t\tif (!bufferHasTokens) {", "-\t\t\t\t\t\ttextOnFirstLine = false;", "-\t\t\t\t\t}", "+\t\t\t\thasTextOnFirstLine = -1;", "+\t\t\tscannerLine = lineNumber;", "+\t\t\tlastTextLine = lineNumber;", "-\t\t\tif ((hasMultiLines || multiLines) && hasTextOnFirstLine == 1 && textOnFirstLine) {", "-\t\t\t\tint col = this.column;", "-\t\t\t\treplacement.append(this.lineSeparator);", "-\t\t\t\tthis.column = 1;", "-\t\t\t\tprintIndentationIfNecessary(replacement);", "-\t\t\t\tif (buffer.charAt(0) == ' ') {", "-\t\t\t\t\treplacement.append(' ');", "-\t\t\t\t\treplacement.append('*');", "-\t\t\t\t} else {", "+\t\t\tif (hasTextOnFirstLine == 1) {", "+\t\t\t\tif ((hasMultiLines || multiLines)) {", "+\t\t\t\t\tint col = this.column;", "+\t\t\t\t\treplacement.append(this.lineSeparator);", "+\t\t\t\t\tthis.column = 1;", "+\t\t\t\t\tprintIndentationIfNecessary(replacement);", "-\t\t\t\t\tthis.column++;", "+\t\t\t    \tthis.column = col;", "+\t\t\t\t} else {", "+\t\t\t\t\treplacement.append(' ');", "-\t\t    \tthis.column = col;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8abd1cb38d7555dd8835dbe8ecd7802", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "8e09a020c985a5c59c2f77650ea0c690b64e1566", "commitAfterChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected void updateLineEnd()", "signatureAfterChange": " \tprotected boolean pushThrowName(Object typeRef, boolean real)", "diff": ["-\tprotected void updateLineEnd() {", "-\t\twhile (this.index > (this.lineEnd+1)) {", "-\t\t\tif (this.linePtr < this.lastLinePtr) {", "-\t\t\t\tthis.lineEnd = this.sourceParser.scanner.getLineEnd(++this.linePtr) - 1;", "-\t\t\t} else {", "-\t\t\t\tthis.lineEnd = this.endComment;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tthis.lineStarted = false;", "+\t */", "+\tprotected boolean pushThrowName(Object typeRef, boolean real) {", "+\t\tif (this.astLengthPtr == -1) { // First push", "+\t\t\tpushOnAstStack(null, true);", "+\t\t\tpushOnAstStack(typeRef, true);", "+\t\t} else {", "+\t\t\tswitch (this.astLengthPtr % ORDERED_TAGS_NUMBER) {", "+\t\t\t\tcase PARAM_TAG_EXPECTED_ORDER :", "+\t\t\t\t\t// previous push was a @param tag => push new @throws tag", "+\t\t\t\t\tpushOnAstStack(typeRef, true);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase THROWS_TAG_EXPECTED_ORDER :", "+\t\t\t\t\t// previous push was a @throws tag => push another @throws tag", "+\t\t\t\t\tpushOnAstStack(typeRef, false);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SEE_TAG_EXPECTED_ORDER :", "+\t\t\t\t\t// previous push was a @see tag => push empty @param and new @throws tags", "+\t\t\t\t\tpushOnAstStack(null, true);", "+\t\t\t\t\tpushOnAstStack(typeRef, true);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\treturn true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5726f32c5f781675a66590ed88e802b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "signatureAfterChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "diff": ["+\t  */", "+\t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver) {", "+\t \tswitch (this.scanner.token) {", "+\t \t\tcase BindingKeyScanner.PACKAGE:", "+\t \t\t\treturn new PackageBinding(this.compoundName, null, resolver.lookupEnvironment);", "+\t \t\tcase BindingKeyScanner.TYPE:", "+\t \t\t\tif (this.compoundName.length == 1 && this.compoundName[0].length == 1) {", "+\t \t\t\t\t// case of base type", "+\t\t \t\t\tTypeBinding baseTypeBinding = getBaseTypeBinding(this.compoundName[0]);", "+\t\t \t\t\tif (baseTypeBinding != null) ", "+\t \t\t\t\t\treturn getArrayBinding(this.dimension, baseTypeBinding, resolver);", "+\t \t\t\t}", "+\t \t\t\tif (parsedUnit == null) ", "+\t \t\t\t\treturn getBinaryBinding(resolver);", "+\t \t\t\tchar[] typeName = this.compoundName[this.compoundName.length-1];", "+\t \t\t\tint dim = this.dimension;", "+\t \t\t\tTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName, resolver);", "+\t \t\t\tif (binding == null) return null;", "+\t \t\t\tif (this.scanner.isAtFieldOrMethodStart()) {", "+\t \t\t\t\tswitch (this.scanner.nextToken()) {", "+\t\t \t\t\t\tcase BindingKeyScanner.FIELD:", "+\t\t \t\t\t\t\treturn getFieldBinding(((SourceTypeBinding) binding).fields);", "+\t\t \t\t\t\tcase BindingKeyScanner.METHOD:", "+\t\t \t\t\t\t\treturn getMethodBinding(((SourceTypeBinding) binding).methods, resolver);", "+\t \t\t\t\t}", "+\t \t\t\t\treturn null; // malformed key", "+\t \t\t\t} else {", "+\t \t\t\t\tTypeBinding typeBinding = null;", "+\t \t\t\t\tif (this.scanner.isAtParametersStart()) {", "+\t\t\t\t\t\tif (this.scanner.isAtTypeParameterStart())\t \t\t\t\t\t", "+\t\t \t\t\t\t\t// generic type binding", "+\t\t \t\t\t\t\ttypeBinding = getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "+\t\t \t\t\t\telse if (this.scanner.isAtTypeStart())", "+\t \t\t\t\t\t\t// parameterized type binding", "+\t\t \t\t\t\t\ttypeBinding = getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver); ", "+\t \t\t\t\t} else if (binding.typeVariables().length > 0)", "+\t \t\t\t\t\t// raw type binding", "+\t \t\t\t\t\ttypeBinding = resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "+\t \t\t\t\telse", "+ \t\t\t\t\t\t// non-generic type binding", "+ \t\t\t\t\t\ttypeBinding = binding;", "+\t \t\t\t\treturn getArrayBinding(dim, typeBinding, resolver);", "+\t \t\t\t}", "+\t \t}", "+\t \treturn null;", "-\t  */", "-\t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver) {", "-\t \tswitch (this.scanner.token) {", "-\t \t\tcase BindingKeyScanner.PACKAGE:", "-\t \t\t\tif (this.compoundName.length > 0) {", "-\t\t \t\t\tTypeBinding baseTypeBinding = Scope.getBaseType(this.compoundName[this.compoundName.length-1]);", "-\t\t \t\t\tif (baseTypeBinding != null) // case of base type", "-\t \t\t\t\t\treturn baseTypeBinding;", "-\t \t\t\t}", "-\t \t\t\treturn new PackageBinding(this.compoundName, null, resolver.lookupEnvironment);", "-\t \t\tcase BindingKeyScanner.TYPE:", "-\t \t\t\tif (parsedUnit == null) ", "-\t \t\t\t\treturn getBinaryBinding(resolver);", "-\t \t\t\tchar[] typeName = this.compoundName[this.compoundName.length-1];", "-\t \t\t\tTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName, resolver);", "-\t \t\t\tswitch (this.scanner.token) {", "-\t \t\t\t\tcase BindingKeyScanner.PACKAGE:", "-\t\t\t\t\tcase BindingKeyScanner.END:", "-\t \t\t\t\t\tif (this.scanner.isAtTypeParameterStart())", "-\t \t\t\t\t\t\t// parameterized type binding", "-\t\t \t\t\t\t\treturn getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver);", "-\t \t\t\t\t\telse if (binding.typeVariables().length > 0)", "-\t \t\t\t\t\t\t// raw type binding", "-\t \t\t\t\t\t\treturn resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "-\t \t\t\t\t\telse", "-\t \t\t\t\t\t\t// non-generic type binding", "-\t \t\t\t\t\t\treturn binding;", "-\t \t\t\t\tcase BindingKeyScanner.ARRAY:", "-\t \t\t\t\t\treturn getArrayBinding(binding, resolver);", "-\t \t\t\t\tcase BindingKeyScanner.FIELD:", "-\t \t\t\t\t\treturn getFieldBinding(((SourceTypeBinding) binding).fields);", "-\t \t\t\t\tcase BindingKeyScanner.METHOD:", "-\t \t\t\t\t\treturn getMethodBinding(((SourceTypeBinding) binding).methods, resolver);", "-\t \t\t\t\tcase BindingKeyScanner.TYPE_PARAMETER:", "-\t \t\t\t\t\tif (this.scanner.isAtTypeParameterStart())", "-\t\t \t\t\t\t\treturn getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "-\t \t\t\t\t\telse", "-\t \t\t\t\t\t\treturn binding;", "-\t \t\t\t}", "-\t \t\t\tbreak;", "-\t \t\tcase BindingKeyScanner.ARRAY:", "-\t \t\t\tif (this.compoundName.length > 0) {", "-\t\t \t\t\tTypeBinding baseTypeBinding = Scope.getBaseType(this.compoundName[this.compoundName.length-1]);", "-\t\t \t\t\tif (baseTypeBinding != null)", "-\t \t\t\t\t\treturn getArrayBinding(baseTypeBinding, resolver);", "-\t \t\t\t}", "- \t\t\t\tbreak;", "-\t \t}", "-\t \treturn null;", "-\t }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c5d3ddb2a1f325b537b2fcdef40b5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tif (this.codegenBinding.canBeSeenBy(this.receiverType, this, currentScope)) {", "+\tFieldBinding codegenBinding = this.binding.original();", "+\tif (codegenBinding.canBeSeenBy(this.actualReceiverType, this, currentScope)) {", "-\t\tthis.receiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "+\t\tthis.receiver.generateCode(currentScope, codeStream, !(isStatic = codegenBinding.isStatic()));", "-\t\tcodeStream.generateEmulatedReadAccessForField(this.codegenBinding);", "+\t\tcodeStream.generateEmulatedReadAccessForField(codegenBinding);", "-\t\t// value value receiver value\t\t\t\t\t\tdup_x1 or dup2_x1", "-\t\t// value value receiver\t\t\t\t\t\t\t\tpop or pop2", "+\t\t// value value receiver value\t\t\t\t\tdup_x1 or dup2_x1", "+\t\t// value value receiver\t\t\t\t\t\t\tpop or pop2", "-\t\t// value value field receiver \t\t\t\t\t\tswap", "-\t\t// value field receiver value field receiver \t\tdup2_x1 or dup2_x2", "-\t\t// value field receiver value \t\t\t\t \t\tpop2", "-\t\t// value field receiver newvalue \t\t\t\t \tgenerate constant + op", "-\t\t// value \t\t\t\t\t\t\t\t\t\t\tstore", "-\t\tif (valueRequired) {", "-\t\t\tif ((this.codegenBinding.type == TypeBinding.LONG) || (this.codegenBinding.type == TypeBinding.DOUBLE)) {", "+\t\t// value value field receiver \t\t\t\t\tswap", "+\t\t// value field receiver value field receiver \tdup2_x1 or dup2_x2", "+\t\t// value field receiver value \t\t\t\t \tpop2", "+\t\t// value field receiver newvalue \t\t\t\tgenerate constant + op", "+\t\t// value \t\t\t\t\t\t\t\t\t\t\t\tstore", "+\t\tint typeID;", "+\t\tswitch (typeID = codegenBinding.type.id) {", "+\t\t\tcase TypeIds.T_long :", "+\t\t\tcase TypeIds.T_double :", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.dup2_x1();", "+\t\t\t\t}", "-\t\t\t} else {", "+\t\t\t\tcodeStream.pop2();", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.dup_x1();", "+\t\t\t\t}", "-\t\t\t}", "+\t\t\t\tcodeStream.pop();", "+\t\t\t\tbreak;", "-\t\tif ((this.codegenBinding.type == TypeBinding.LONG) || (this.codegenBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\tcodeStream.dup2_x1();", "-\t\t\tcodeStream.pop2();", "-\t\t} else {", "-\t\t\tcodeStream.dup_x1();", "-\t\t\tcodeStream.pop();", "-\t\t}", "-\t\tcodeStream.generateEmulationForField(this.codegenBinding);", "+\t\tcodeStream.generateEmulationForField(codegenBinding);", "-", "-\t\tif ((this.codegenBinding.type == TypeBinding.LONG) || (this.codegenBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\tcodeStream.dup2_x2();", "-\t\t} else {", "-\t\t\tcodeStream.dup2_x1();", "+\t\tswitch (typeID) {", "+\t\t\tcase TypeIds.T_long :", "+\t\t\tcase TypeIds.T_double :", "+\t\t\t\tcodeStream.dup2_x2();", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tcodeStream.dup2_x1();", "+\t\t\t\tbreak;", "-\t\tcodeStream.sendOperator(postIncrement.operator, this.codegenBinding.type.id);", "+\t\tcodeStream.sendOperator(postIncrement.operator, codegenBinding.type.id);", "-\t\tcodeStream.generateEmulatedWriteAccessForField(this.codegenBinding);", "+\t\tcodeStream.generateEmulatedWriteAccessForField(codegenBinding);"]}], "num": 47674}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "975ca955d58f5ae65383c0eb4611e1cc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "321137026b1c46376d2894f98dd99123", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public ReferenceBinding findSuperTypeErasingTo(int wellKnownErasureID, boolean erasureIsClass)", "signatureAfterChange": " public ReferenceBinding findSuperTypeErasingTo(int wellKnownErasureID, boolean erasureIsClass)", "diff": ["-\t\t\tif (currentType.id == wellKnownErasureID || (!currentType.isTypeVariable() && currentType.erasure().id == wellKnownErasureID)) return currentType;", "+\t\t\tif (currentType.id == wellKnownErasureID || (!currentType.isTypeVariable() && currentType.erasure().id == wellKnownErasureID))", "+\t\t\t\treturn currentType;", "-\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\tint lastPosition = -1;", "+\tReferenceBinding[] interfacesToVisit = null;", "+\tint nextPosition = 0;", "-\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t} else {", "+\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t}", "+\t\t\t}", "-\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\tif ((currentType = interfaces[j]).id == wellKnownErasureID || (!currentType.isTypeVariable() && currentType.erasure().id == wellKnownErasureID))", "-\t\t\t\treturn currentType;", "+\tfor (int i = 0; i < nextPosition; i++) {", "+\t\tcurrentType = interfacesToVisit[i];", "+\t\tif (currentType.id == wellKnownErasureID || (!currentType.isTypeVariable() && currentType.erasure().id == wellKnownErasureID))", "+\t\t\treturn currentType;", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "-\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "+\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fbc455f2dea200e33bafb30a520a9b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public boolean hasIncompatibleSuperType(ReferenceBinding otherType)", "signatureAfterChange": " public boolean hasIncompatibleSuperType(ReferenceBinding otherType)", "diff": ["+\tReferenceBinding[] interfacesToVisit = null;", "+\tint nextPosition = 0;", "-\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\tint lastPosition = -1;", "-\t\tif (match != null) {", "-\t\t\tif (!match.isIntersectingWith(currentType))", "-\t\t\t\t\treturn true;", "-\t\t}", "+\t\tif (match != null && !match.isIntersectingWith(currentType))", "+\t\t\treturn true;", "+", "-\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t} else {", "+\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t", "-\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\tif ((currentType = interfaces[j]) == otherType) return false;", "-\t\t\tmatch = otherType.findSuperTypeWithSameErasure(currentType);", "-\t\t\tif (match != null) {", "-\t\t\t\tif (!match.isIntersectingWith(currentType))", "-\t\t\t\t\t\treturn true;\t\t\t\t", "-\t\t\t}", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "-\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+", "+\tfor (int i = 0; i < nextPosition; i++) {", "+\t\tcurrentType = interfacesToVisit[i];", "+\t\tif (currentType == otherType) return false;", "+\t\tmatch = otherType.findSuperTypeWithSameErasure(currentType);", "+\t\tif (match != null && !match.isIntersectingWith(currentType))", "+\t\t\treturn true;\t\t\t\t", "+", "+\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "+\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dd6471d27935ba80ab7a820a470a316", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public boolean implementsInterface(ReferenceBinding anInterface, boolean searchHierarchy)", "signatureAfterChange": " public boolean implementsInterface(ReferenceBinding anInterface, boolean searchHierarchy)", "diff": ["-\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\tint lastPosition = -1;", "+\tReferenceBinding[] interfacesToVisit = null;", "+\tint nextPosition = 0;", "-\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t} else {", "+\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t", "-\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\tif ((currentType = interfaces[j]).isEquivalentTo(anInterface))", "-\t\t\t\treturn true;", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "-\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES && itsInterfaces != null) { // in code assist cases when source types are added late, may not be finished connecting hierarchy", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\tfor (int i = 0; i < nextPosition; i++) {", "+\t\tcurrentType = interfacesToVisit[i];", "+\t\tif (currentType.isEquivalentTo(anInterface))", "+\t\t\treturn true;", "+", "+\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "+\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES && itsInterfaces != null) { // in code assist cases when source types are added late, may not be finished connecting hierarchy", "+\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94c01c3db3be47947406c75dc1523b58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[3][];", "-\tint lastPosition = -1;", "+\tReferenceBinding[] interfacesToVisit = null;", "+\tint nextPosition = 0;", "-\tif (itsInterfaces != Binding.NO_SUPERINTERFACES)", "-\t\tinterfacesToVisit[++lastPosition] = itsInterfaces;", "+\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\tnextPosition = itsInterfaces.length;", "+\t\tinterfacesToVisit = itsInterfaces;", "+\t}", "-\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\torg.eclipse.jdt.internal.compiler.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.compiler.util.SimpleSet(lastPosition * 2);", "-\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\tfor (int j = 0, l = interfaces.length; j < l; j++) {", "-\t\t\tsuperType = interfaces[j];", "-\t\t\tif (!interfacesSeen.includes(superType)) {", "-\t\t\t\tinterfacesSeen.add(superType);", "-\t\t\t\tif (superType.isValidBinding()) {", "-\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t}", "-", "-\t\t\t\t\tMethodBinding[] methods = superType.unResolvedMethods();", "-\t\t\t\t\tnextMethod : for (int m = methods.length; --m >= 0;) { // Interface methods are all abstract public", "-\t\t\t\t\t\tMethodBinding inheritedMethod = methods[m];", "-\t\t\t\t\t\tMethodBinding[] existingMethods = (MethodBinding[]) this.inheritedMethods.get(inheritedMethod.selector);", "-\t\t\t\t\t\tif (existingMethods == null) {", "-\t\t\t\t\t\t\texistingMethods = new MethodBinding[] {inheritedMethod};", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tint length = existingMethods.length;", "-\t\t\t\t\t\t\t// look to see if any of the existingMethods implement this inheritedMethod", "-\t\t\t\t\t\t\tfor (int e = 0; e < length; e++)", "-\t\t\t\t\t\t\t\tif (isInterfaceMethodImplemented(inheritedMethod, existingMethods[e], superType))", "-\t\t\t\t\t\t\t\t\tcontinue nextMethod; // skip interface method with the same signature if visible to its declaringClass", "-\t\t\t\t\t\t\tSystem.arraycopy(existingMethods, 0, existingMethods = new MethodBinding[length + 1], 0, length);", "-\t\t\t\t\t\t\texistingMethods[length] = inheritedMethod;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.inheritedMethods.put(inheritedMethod.selector, existingMethods);", "-\t\t\t\t\t}", "+\tfor (int i = 0; i < nextPosition; i++) {", "+\t\tsuperType = interfacesToVisit[i];", "+\t\tif (superType.isValidBinding()) {", "+\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+", "+\t\t\tMethodBinding[] methods = superType.unResolvedMethods();", "+\t\t\tnextMethod : for (int m = methods.length; --m >= 0;) { // Interface methods are all abstract public", "+\t\t\t\tMethodBinding inheritedMethod = methods[m];", "+\t\t\t\tMethodBinding[] existingMethods = (MethodBinding[]) this.inheritedMethods.get(inheritedMethod.selector);", "+\t\t\t\tif (existingMethods == null) {", "+\t\t\t\t\texistingMethods = new MethodBinding[] {inheritedMethod};", "+\t\t\t\t} else {", "+\t\t\t\t\tint length = existingMethods.length;", "+\t\t\t\t\t// look to see if any of the existingMethods implement this inheritedMethod", "+\t\t\t\t\tfor (int e = 0; e < length; e++)", "+\t\t\t\t\t\tif (isInterfaceMethodImplemented(inheritedMethod, existingMethods[e], superType))", "+\t\t\t\t\t\t\tcontinue nextMethod; // skip interface method with the same signature if visible to its declaringClass", "+\t\t\t\t\tSystem.arraycopy(existingMethods, 0, existingMethods = new MethodBinding[length + 1], 0, length);", "+\t\t\t\t\texistingMethods[length] = inheritedMethod;", "+\t\t\t\t}", "+\t\t\t\tthis.inheritedMethods.put(inheritedMethod.selector, existingMethods);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0b1cbeb59e0aafeb00111ab519641a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "signatureAfterChange": " public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "diff": ["-\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\t\t\tint lastPosition = -1;", "+\t\t\tReferenceBinding[] interfacesToVisit = null;", "+\t\t\tint nextPosition = 0;", "-\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tif ((currentType = interfaces[j]) == otherType || (!currentType.isTypeVariable() && currentType.erasure() == otherType))", "-\t\t\t\t\t\treturn currentType;", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tcurrentType = interfacesToVisit[i];", "+\t\t\t\tif (currentType == otherType || (!currentType.isTypeVariable() && currentType.erasure() == otherType))", "+\t\t\t\t\treturn currentType;", "-\t\t\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "-\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "+\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}], "num": 46476}
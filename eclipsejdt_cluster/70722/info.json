{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff890601c01cb1de94e5f21ecfd5666d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6a55c12b2252c02a61e1b32ec3bc82e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "7757a5934fde86433c9c42221d6117d1b7f29e23", "commitAfterChange": "0bbfe267fb7eaaa77628088e8cdbd841ddb40de5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void testCreateCompilationUnitAndImportContainer() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void testCreateCompilationUnitAndImportContainer() throws JavaModelException, CoreException", "diff": ["-\t\t\tpreferences.setValue(ResourcesPlugin.PREF_ENCODING, \"UTF-8\");", "+\t\t\tString encoding = \"UTF-8\";", "+\t\t\tpreferences.setValue(ResourcesPlugin.PREF_ENCODING, encoding);", "-\t\t\tIJavaProject javaProject = createJavaProject(\"P\", new String[] { \"\" }, \"\");", "+\t\t\tIJavaProject newProject = createJavaProject(\"P\", new String[] { \"\" }, \"\");", "-\t\t\tICompilationUnit cu= pkg.createCompilationUnit(\"A.java\", ", "-\t\t\t\t(\"public class A {\\r\\n\" +", "+\t\t\tString source = \"public class A {\\r\\n\" +", "-\t\t\t\t\"}\"), false, new NullProgressMonitor());", "+\t\t\t\t\"}\";", "+\t\t\tICompilationUnit cu= pkg.createCompilationUnit(\"A.java\", source, false, new NullProgressMonitor());", "-\t\t\tbyte[] tab = new byte[90];", "-\t\t\ttab[0]=112;", "-\t\t\ttab[1]=117;", "-\t\t\ttab[2]=98;", "-\t\t\ttab[3]=108;", "-\t\t\ttab[4]=105;", "-\t\t\ttab[5]=99;", "-\t\t\ttab[6]=32;", "-\t\t\ttab[7]=99;", "-\t\t\ttab[8]=108;", "-\t\t\ttab[9]=97;", "-\t\t\ttab[10]=115;", "-\t\t\ttab[11]=115;", "-\t\t\ttab[12]=32;", "-\t\t\ttab[13]=65;", "-\t\t\ttab[14]=32;", "-\t\t\ttab[15]=123;", "-\t\t\ttab[16]=13;", "-\t\t\ttab[17]=10;", "-\t\t\ttab[18]=9;", "-\t\t\ttab[19]=112;", "-\t\t\ttab[20]=117;", "-\t\t\ttab[21]=98;", "-\t\t\ttab[22]=108;", "-\t\t\ttab[23]=105;", "-\t\t\ttab[24]=99;", "-\t\t\ttab[25]=32;", "-\t\t\ttab[26]=115;", "-\t\t\ttab[27]=116;", "-\t\t\ttab[28]=97;", "-\t\t\ttab[29]=116;", "-\t\t\ttab[30]=105;", "-\t\t\ttab[31]=99;", "-\t\t\ttab[32]=32;", "-\t\t\ttab[33]=109;", "-\t\t\ttab[34]=97;", "-\t\t\ttab[35]=105;", "-\t\t\ttab[36]=110;", "-\t\t\ttab[37]=40;", "-\t\t\ttab[38]=83;", "-\t\t\ttab[39]=116;", "-\t\t\ttab[40]=114;", "-\t\t\ttab[41]=105;", "-\t\t\ttab[42]=110;", "-\t\t\ttab[43]=103;", "-\t\t\ttab[44]=91;", "-\t\t\ttab[45]=93;", "-\t\t\ttab[46]=32;", "-\t\t\ttab[47]=97;", "-\t\t\ttab[48]=114;", "-\t\t\ttab[49]=103;", "-\t\t\ttab[50]=115;", "-\t\t\ttab[51]=41;", "-\t\t\ttab[52]=32;", "-\t\t\ttab[53]=123;", "-\t\t\ttab[54]=13;", "-\t\t\ttab[55]=10;", "-\t\t\ttab[56]=9;", "-\t\t\ttab[57]=9;", "-\t\t\ttab[58]=83;", "-\t\t\ttab[59]=121;", "-\t\t\ttab[60]=115;", "-\t\t\ttab[61]=116;", "-\t\t\ttab[62]=101;", "-\t\t\ttab[63]=109;", "-\t\t\ttab[64]=46;", "-\t\t\ttab[65]=111;", "-\t\t\ttab[66]=117;", "-\t\t\ttab[67]=116;", "-\t\t\ttab[68]=46;", "-\t\t\ttab[69]=112;", "-\t\t\ttab[70]=114;", "-\t\t\ttab[71]=105;", "-\t\t\ttab[72]=110;", "-\t\t\ttab[73]=116;", "-\t\t\ttab[74]=108;", "-\t\t\ttab[75]=110;", "-\t\t\ttab[76]=40;", "-\t\t\ttab[77]=34;", "-\t\t\ttab[78]=-61;", "-\t\t\ttab[79]=-87;", "-\t\t\ttab[80]=34;", "-\t\t\ttab[81]=41;", "-\t\t\ttab[82]=59;", "-\t\t\ttab[83]=13;", "-\t\t\ttab[84]=10;", "-\t\t\ttab[85]=9;", "-\t\t\ttab[86]=125;", "-\t\t\ttab[87]=13;", "-\t\t\ttab[88]=10;", "-\t\t\ttab[89]=125;", "-\t\t\tbyte[] encodedContents = Util.getResourceContentsAsByteArray(javaProject.getProject().getWorkspace().getRoot().getFile(cu.getPath()));", "+\t\t\tbyte[] tab = null;", "+\t\t\ttry {", "+\t\t\t\ttab = cu.getSource().getBytes(encoding);", "+\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\tthrow new RuntimeException(e);", "+\t\t\t}", "+\t\t\tbyte[] encodedContents = Util.getResourceContentsAsByteArray(newProject.getProject().getWorkspace().getRoot().getFile(cu.getPath()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f256559ebb6a718350ba65188aac91da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 370, "methodNumberAfterChange": 419, "signatureBeforeChange": " \tASTNode oneOfEach(AST target)", "signatureAfterChange": " \tASTNode oneOfEach(AST target)", "diff": ["-\t\tcu.setSourceRange(0, 1000);", "-\t\tpd.setSourceRange(0, 5);", "-\t\tim.setSourceRange(6, 5);", "-\t\tim.setSourceRange(11, 900);", "-\t\tJavadoc javadoc = target.newJavadoc();", "-\t\tjavadoc.setSourceRange(11, 5);", "-\t\ttd.setJavadoc(javadoc);", "-\t\t", "+\t\tJavadoc javadoc = target.newJavadoc();", "+\t\ttd.setJavadoc(javadoc);", "+\t\tjavadoc.fragments().add(target.newTextElement());", "+\t\tTagElement tg = target.newTagElement();", "+\t\tjavadoc.fragments().add(tg);", "+\t\ttg.fragments().add(target.newMemberRef());", "+\t\tMethodRef mr = target.newMethodRef();", "+\t\ttg.fragments().add(mr);", "+\t\tmr.parameters().add(target.newMethodRefParameter());", "+\t\t\t\t", "-\t\tvariableDeclarationFragment.setSourceRange(16, 5);", "-\t\tfd.setSourceRange(16, 5);", "-\t\tin.setSourceRange(21, 5);", "-\t\t", "+\t", "-\t\tmd.setSourceRange(26, 800);", "-\t\tsingleVariableDeclaration.setSourceRange(30, 5);", "-\t\tsn1.setSourceRange(35, 5);", "-\t\tsn2.setSourceRange(41, 5);", "-\t\tqn.setSourceRange(35, 11);", "-\t\tSimpleType st = target.newSimpleType(qn);", "-\t\tst.setSourceRange(35, 11);", "-\t\tpt.setSourceRange(41, 5);", "-\t\tArrayType at = target.newArrayType(st);", "-\t\tat.setSourceRange(41, 7);", "+\t\tArrayType at = target.newArrayType(pt);", "+\t\tfd.setType(at);", "-\t\tmd.setReturnType(at);", "-\t\tfd.setType(pt);", "-\t\t", "-\t\tb.setSourceRange(46, 700);", "-\t\tassertStatement.setSourceRange(46, 5);", "-\t\tblock.setSourceRange(51, 5);", "-\t\tbreakStatement.setSourceRange(55, 5);", "-\t\tcontinueStatement.setSourceRange(61, 5);", "-\t\tconstructorInvocation.setSourceRange(65, 5);", "-\t\tdoStatement.setSourceRange(70, 5);", "-\t\temptyStatement.setSourceRange(75, 5);", "-\t\tnullLiteral.setSourceRange(80, 5);", "-\t\texpressionStatement.setSourceRange(80, 5);", "-\t\tforStatement.setSourceRange(86, 5);", "-\t\tifStatement.setSourceRange(90, 5);", "-\t\tlabeledStatement.setSourceRange(95, 5);", "-\t\treturnStatement.setSourceRange(100, 5);", "-\t\tsuperConstructorInvocation.setSourceRange(105, 5);", "-\t\tss.setSourceRange(110, 5);", "-\t\tswitchCase.setSourceRange(110, 5);", "-\t\tswitchStatement.setSourceRange(115, 5);", "-\t\tswitchCase2.setSourceRange(120, 5);", "-\t\tsynchronizedStatement.setSourceRange(125, 5);", "-\t\tthrowStatement.setSourceRange(130, 5);", "-\t\ttr.setSourceRange(135, 5);", "-\t\tcatchClause.setSourceRange(135, 5);", "-\t\t\ttr.catchClauses().add(catchClause);", "-\t\t\tb.statements().add(tr);", "+\t\ttr.catchClauses().add(catchClause);", "+\t\tb.statements().add(tr);", "-\t\ttypeDeclaration.setSourceRange(140, 5);", "-\t\ttypeDeclarationStatement.setSourceRange(140, 6);", "-\t\tvariableDeclarationFragment2.setSourceRange(150, 5);", "-\t\tvariableDeclarationStatement.setSourceRange(150, 6);", "-\t\twhileStatement.setSourceRange(155, 5);", "-\t\tinv.setSourceRange(200, 300);", "-\t\texpressionStatement2.setSourceRange(400, 5);", "-\t\tarrayAccess.setSourceRange(200, 5);", "-\t\tarrayCreation.setSourceRange(210, 5);", "-\t\tarrayInitializer.setSourceRange(220, 5);", "-\t\tassignment.setSourceRange(230, 5);", "-\t\tbooleanLiteral.setSourceRange(240, 5);", "-\t\tcastExpression.setSourceRange(250, 5);", "-\t\tcharacterLiteral.setSourceRange(260, 5);", "-\t\tcic.setSourceRange(270, 9);", "-\t\tanonymousClassDeclaration.setSourceRange(270, 5);", "-\t\tconditionalExpression.setSourceRange(280, 5);", "-\t\tfieldAccess.setSourceRange(290, 5);", "-\t\tinfixExpression.setSourceRange(300, 5);", "-\t\tinstanceofExpression.setSourceRange(310, 5);", "-\t\tmethodInvocation.setSourceRange(320, 5);", "-\t\tname.setSourceRange(330, 5);", "-\t\tnullLiteral2.setSourceRange(336, 3);", "-\t\tnumberLiteral.setSourceRange(340, 5);", "-\t\tparenthesizedExpression.setSourceRange(350, 5);", "-\t\tpostfixExpression.setSourceRange(360, 5);", "-\t\tprefixExpression.setSourceRange(370, 5);", "-\t\tstringLiteral.setSourceRange(380, 5);", "-\t\tsuperFieldAccess.setSourceRange(390, 5);", "-\t\tsuperMethodInvocation.setSourceRange(400, 5);", "-\t\tthisExpression.setSourceRange(410, 6);", "-\t\ttypeLiteral.setSourceRange(420, 5);", "-\t\tvariableDeclarationFragment3.setSourceRange(430, 5);", "-\t\tvariableDeclarationExpression.setSourceRange(430, 5);", "-", "-\t\tASTNode clone = ASTNode.copySubtree(ast, cu);", "-\t\tassertTrue(cu.subtreeMatch(new CheckPositionsMatcher(), clone));", "-\t}\t", "+\t}"]}], "num": 70722}
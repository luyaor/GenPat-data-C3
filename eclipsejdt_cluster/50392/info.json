{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17f9b0fbbd3c131df0c379c84570d3d4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef463cbdbc6e109a44f146362adf714", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "bac18f086dd9a87e1d5b6dea3b31ca1c92463a84", "commitAfterChange": "1b53a525120894192853120c7678edb264d25490", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public final void addLocalType(TypeDeclaration localType)", "signatureAfterChange": " public final void addLocalType(TypeDeclaration localType)", "diff": ["+\t", "+\t// See comment in addAnonymousType.", "+\tMethodScope methodScope = methodScope();", "+\twhile (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {", "+\t\tLambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;", "+\t\tif (!lambda.scope.isStatic) {", "+\t\t\tlambda.shouldCaptureInstance = true;", "+\t\t}", "+\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bb0a55a87b2956710bf7f36a8acc1f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "bac18f086dd9a87e1d5b6dea3b31ca1c92463a84", "commitAfterChange": "1b53a525120894192853120c7678edb264d25490", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void resetEnclosingMethodStaticFlag()", "signatureAfterChange": " public void resetEnclosingMethodStaticFlag()", "diff": ["+\twhile (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {", "+\t\tLambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;", "+\t\tlambda.shouldCaptureInstance = true;", "+\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t}", "+\t\t\twhile (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {", "+\t\t\t\tLambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;", "+\t\t\t\tlambda.shouldCaptureInstance = true;", "+\t\t\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t\t\t}"]}], "num": 50392}
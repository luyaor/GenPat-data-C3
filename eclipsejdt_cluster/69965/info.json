{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4ade9e590307b99957a18b5042f1688", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b9c5f132c5c2bcf32921b5c943be391", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b371452cfc86edadd09f0bc9f3e25611ca4d4268", "commitAfterChange": "108cd17345619c887ab9a0af6e6482c84a0cbd69", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\t \t \tpublic MethodBinding findMethod0(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": "\t \t \tpublic MethodBinding findMethod0(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, compatibleMethod);", "+\t\t\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, new MethodBinding [] {compatibleMethod});", "+\t\t", "-\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "+\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, new MethodBinding [] { candidates[0] });", "-", "-\t\tMethodBinding mostSpecificMethod = mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite, receiverType);", "-\t\tif (searchForDefaultAbstractMethod) { // search interfaces for a better match", "-\t\t\tif (mostSpecificMethod.isValidBinding())", "-\t\t\t\t// see if there is a better match in the interfaces - see AutoBoxingTest 99, LookupTest#81", "-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, mostSpecificMethod);", "-\t\t\t// see if there is a match in the interfaces - see LookupTest#84", "-\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding() /* else return the same error as before */)", "-\t\t\t\treturn interfaceMethod;", "-\t\t}", "-\t\treturn mostSpecificMethod;", "+\t\tif (visiblesCount != candidates.length)", "+\t\t\tSystem.arraycopy(candidates, 0, candidates = new MethodBinding[visiblesCount], 0, visiblesCount);", "+\t\treturn searchForDefaultAbstractMethod ? findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates)", "+\t\t\t\t\t\t\t\t\t\t\t  : mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite, receiverType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "874070a9e6b23579c6a0b20cf0f595fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 185, "signatureBeforeChange": " public void invokeStringConcatenationStringConstructor()", "signatureAfterChange": " public void invokeStringConcatenationStringConstructor()", "diff": ["-\tcountLabels = 0;", "-\tif (classFileOffset + 2 >= bCodeStream.length) {", "-\t\tresizeByteArray();", "-\t}", "-\tposition++;", "-\tbCodeStream[classFileOffset++] = OPC_invokespecial;", "+\tchar[] declaringClass = QualifiedNamesConstants.JavaLangStringBufferConstantPoolName;", "-\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangStringBuilderConstructor());", "-\t} else {", "-\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangStringBufferConstructor());", "+\t\tdeclaringClass = QualifiedNamesConstants.JavaLangStringBuilderConstantPoolName;", "-\tstackDepth -= 2;", "+\tthis.invoke(", "+\t\t\tOPC_invokespecial,", "+\t\t\t1, // argCount", "+\t\t\t0, // return type size", "+\t\t\tdeclaringClass,", "+\t\t\tQualifiedNamesConstants.Init,", "+\t\t\tQualifiedNamesConstants.StringConstructorSignature);"]}], "num": 69965}
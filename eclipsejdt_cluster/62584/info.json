{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "877ca381370968879487b47ac8614858", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d5ea0805a3dba0c72c5b4d2f0d52aad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "380f51fb07b01d50fdf783879a49310c31bf8dde", "commitAfterChange": "cdb3e8d99e2ddf40df3afd879c65627abb3809dc", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  private boolean isClasspathBroken(IClasspathEntry[] classpath, IProject p) throws CoreException", "signatureAfterChange": "  private boolean isClasspathBroken(JavaProject jProj, boolean tryRepair) throws CoreException", "diff": ["-private boolean isClasspathBroken(IClasspathEntry[] classpath, IProject p) throws CoreException {", "-\tIMarker[] markers = p.findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ZERO);", "-\tfor (int i = 0, l = markers.length; i < l; i++)", "-\t\tif (markers[i].getAttribute(IMarker.SEVERITY, -1) == IMarker.SEVERITY_ERROR)", "+private boolean isClasspathBroken(JavaProject jProj, boolean tryRepair) throws CoreException {", "+\tIMarker[] markers = jProj.getProject().findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ZERO);", "+\tfor (int i = 0, l = markers.length; i < l; i++) {", "+\t\tif (markers[i].getAttribute(IMarker.SEVERITY, -1) == IMarker.SEVERITY_ERROR) {", "+\t\t\tif (tryRepair) {", "+\t\t\t\tObject code = markers[i].getAttribute(IJavaModelMarker.ID);", "+\t\t\t\tif (code instanceof Integer && ((Integer)code) == IJavaModelStatusConstants.CP_INVALID_EXTERNAL_ANNOTATION_PATH) {", "+\t\t\t\t\tnew ClasspathValidation(jProj).validate();", "+\t\t\t\t\treturn isClasspathBroken(jProj, false);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e71435eafa6ba4430be82225c2616b80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "14f732df2ebf38799e02f8fe1c01b744e4189a6c", "commitAfterChange": "98ff89450e35e650c13ed556e5be341179e4b294", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static IMarker[] getProblemsFor(IResource resource)", "signatureAfterChange": "  public static IMarker[] getProblemsFor(IResource resource)", "diff": ["-\t\tif (resource != null && resource.exists())", "-\t\t\treturn resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_INFINITE);", "+\t\tif (resource != null && resource.exists()) {", "+\t\t\tIMarker[] markers = resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_INFINITE);", "+\t\t\tSet markerTypes = JavaModelManager.getJavaModelManager().compilationParticipants.managedMarkerTypes();", "+\t\t\tif (markerTypes.isEmpty()) return markers;", "+\t\t\tArrayList markerList = new ArrayList(5);", "+\t\t\tfor (int i = 0, length = markers.length; i < length; i++) {", "+\t\t\t\tmarkerList.add(markers[i]);", "+\t\t\t}", "+\t\t\tIterator iterator = markerTypes.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tmarkers = resource.findMarkers((String) iterator.next(), false, IResource.DEPTH_INFINITE);", "+\t\t\t\tfor (int i = 0, length = markers.length; i < length; i++) {", "+\t\t\t\t\tmarkerList.add(markers[i]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tIMarker[] result;", "+\t\t\tmarkerList.toArray(result = new IMarker[markerList.size()]);", "+\t\t\treturn result;", "+\t\t}"]}], "num": 62584}
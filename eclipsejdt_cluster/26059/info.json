{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c761179f3ef0ea560fb74e418c031de", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ce9e442ec8ba2087e2617b851e58f76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["-\t\t\t\tthis.requestor.acceptField(", "-\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\tlengthField,", "-\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\tlengthField,", "-\t\t\t\t\tIConstants.AccPublic,", "-\t\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\trelevance);", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t//proposal.setDeclarationSignature(null);", "+\t\t\t\t\tproposal.setSignature(INT_SIGNATURE);", "+\t\t\t\t\t//proposal.setDeclarationPackageName(null);", "+\t\t\t\t\t//proposal.setDeclarationTypeName(null);", "+\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\tproposal.setTypeName(INT);", "+\t\t\t\t\tproposal.setName(lengthField);", "+\t\t\t\t\tproposal.setCompletion(lengthField);", "+\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\tthis.requestor.acceptMethod(", "-\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\tcloneMethod,", "-\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\tCharOperation.concat(JAVA, LANG, '.'),", "-\t\t\t\t\tOBJECT,", "-\t\t\t\t\tcompletion,", "-\t\t\t\t\tIConstants.AccPublic,", "-\t\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\trelevance);", "-\t\t\t\t\t", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t//proposal.setDeclarationSignature(null);", "+\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "+\t\t\t\t\t\t\t\t\tOBJECT));", "+\t\t\t\t\t//proposal.setDeclarationPackageName(null);", "+\t\t\t\t\t//proposal.setDeclarationTypeName(null);", "+\t\t\t\t\t//proposal.setParameterPackageNames(null);", "+\t\t\t\t\t//proposal.setParameterTypeNames(null);", "+\t\t\t\t\tproposal.setPackageName(CharOperation.concatWith(JAVA_LANG, '.'));", "+\t\t\t\t\tproposal.setTypeName(OBJECT);", "+\t\t\t\t\tproposal.setName(cloneMethod);", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf525536e710c760e7bbc68976d0c342", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "signatureAfterChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "diff": ["-\t\t\t\t\t\tthis.requestor.acceptAnonymousType(", "-\t\t\t\t\t\t\tcurrentType.qualifiedPackageName(),", "-\t\t\t\t\t\t\tcurrentType.qualifiedSourceName(),", "-\t\t\t\t\t\t\tparameterPackageNames,", "-\t\t\t\t\t\t\tparameterTypeNames,", "-\t\t\t\t\t\t\tparameterNames,", "-\t\t\t\t\t\t\tcompletion,", "-\t\t\t\t\t\t\tconstructor.modifiers,", "-\t\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)) {", "+\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.ANONYMOUS_CLASS_DECLARATION, this.actualCompletionPosition);", "+\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "+\t\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "+\t\t\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\tif(parameterNames == null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.requestor.acceptMethod(", "-\t\t\t\t\t\t\tcurrentType.qualifiedPackageName(),", "-\t\t\t\t\t\t\tcurrentType.qualifiedSourceName(),", "-\t\t\t\t\t\t\tcurrentType.sourceName(),", "-\t\t\t\t\t\t\tparameterPackageNames,", "-\t\t\t\t\t\t\tparameterTypeNames,", "-\t\t\t\t\t\t\tparameterNames,", "-\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\t\t\tcompletion,", "-\t\t\t\t\t\t\tconstructor.modifiers,", "-\t\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "+\t\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\t\t\tproposal.setName(currentType.sourceName());", "+\t\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "+\t\t\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f7812e7bd8411ecb837eda3661f6f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "6486279fd39d7600a3c581a75f5a979b2834ec56", "commitAfterChange": "ec093de0c723a8394ab4c83656f6e94579a11225", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " private static void initVersion()", "signatureAfterChange": " private static void initVersion(StringBuffer buffer)", "diff": ["-private static void initVersion() {", "+private static void initVersion(StringBuffer buffer) {", "-\tString version = null;", "-\tString patch = null;", "-\tboolean closed = false;", "+\tJDT_CORE_HEAD = true;", "-\t\t\t\tboolean first = version == null;", "-\t\t\t\tversion = line.substring(line.indexOf('\"')+1, line.lastIndexOf('\"'));", "+\t\t\t\tboolean first = JDT_CORE_VERSION == null;", "+\t\t\t\tJDT_CORE_VERSION = line.substring(line.indexOf('\"')+1, line.lastIndexOf('\"'));", "-\t\t\t\tclosed = line.indexOf(\"%date%\") < 0;", "-\t\t\t\tECLIPSE_VERSION = \"v\"+line.substring(12, 13)+line.substring(14, 15);", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(line);", "+\t\t\t\ttokenizer.nextToken(); // 'Eclipse'", "+\t\t\t\ttokenizer.nextToken(); // 'SDK'", "+\t\t\t\tString milestone = tokenizer.nextToken();", "+\t\t\t\tECLIPSE_VERSION = \"v\"+milestone.charAt(0)+milestone.charAt(2);", "+\t\t\t\tECLIPSE_MILESTONE = milestone.substring(3);", "+\t\t\t\ttokenizer.nextToken(); // '-'", "+\t\t\t\tJDT_CORE_HEAD = tokenizer.nextToken().equals(\"%date%\");", "-\t\t\t\t\tpatch = line;", "+\t\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(line);", "+\t\t\t\t\ttokenizer.nextToken(); // 'Patch'", "+\t\t\t\t\tString version = tokenizer.nextToken();", "+\t\t\t\t\tif (version.length() == 3 && version.charAt(0) == 'v') {", "+\t\t\t\t\t\tPATCH_VERSION = version;", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\tPATCH_BUG = tokenizer.nextToken();", "+\t\t\t\t\t}", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tInteger.parseInt(PATCH_BUG);", "+\t\t\t\t\t}", "+\t\t\t\t\tcatch (NumberFormatException nfe) {", "+\t\t\t\t\t\tSystem.err.println(\"Invalid patch bug number noticed in JDT/Core buildnotes:\"+PATCH_BUG);", "+\t\t\t\t\t}", "-\t\t\t\tif (closed) break;", "+\t\t\t\tif (!JDT_CORE_HEAD) break;", "-\tSystem.out.print(\"Version   : \");", "-\tif (patch != null) {", "-\t\tSystem.out.print(patch);", "-\t\tSystem.out.print(\" applied on \");", "+", "+\t// Log version info", "+\tbuffer.append(\"Version   : \");", "+\tif (PATCH_BUG != null) {", "+\t\tbuffer.append(PATCH_BUG);", "+\t\tbuffer.append(' ');", "+\t\tbuffer.append(PATCH_VERSION);", "+\t\tbuffer.append(\" applied on \");", "-\tif (!closed) {", "-\t\tSystem.out.print(\"HEAD on top of \");", "+\tif (JDT_CORE_HEAD) {", "+\t\tbuffer.append(\"HEAD on top of \");", "-\tSystem.out.println(version);", "+\tbuffer.append(JDT_CORE_VERSION);", "+\tbuffer.append(LINE_SEPARATOR);"]}], "num": 26059}
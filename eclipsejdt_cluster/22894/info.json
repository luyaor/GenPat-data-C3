{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31cdaa46f69f3511baf4f8dd02028291", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b99b7f8266b03c57cdffe048a9b89e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "ebc568fad377cf85a79bc0aeeea9122e5115f057", "commitAfterChange": "75c11b9993cee3cc0c66baeb87390d3f47878de0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprotected static IProblemFactory getProblemFactory( \t\tfinal char[] fileName,  \t\tfinal IProblemRequestor problemRequestor, \t\tfinal IProgressMonitor monitor)", "signatureAfterChange": "  \t \tprivate static void reportProblems(CompilationUnitDeclaration unit, IProblemRequestor problemRequestor, IProgressMonitor monitor)", "diff": ["-\tprotected static IProblemFactory getProblemFactory(", "-\t\tfinal char[] fileName, ", "-\t\tfinal IProblemRequestor problemRequestor,", "-\t\tfinal IProgressMonitor monitor) {", "-", "-\t\treturn new DefaultProblemFactory(Locale.getDefault()) {", "-\t\t\tpublic IProblem createProblem(", "-\t\t\t\tchar[] originatingFileName,", "-\t\t\t\tint problemId,", "-\t\t\t\tString[] problemArguments,", "-\t\t\t\tString[] messageArguments,", "-\t\t\t\tint severity,", "-\t\t\t\tint startPosition,", "-\t\t\t\tint endPosition,", "-\t\t\t\tint lineNumber) {", "-", "-\t\t\t\tif (monitor != null && monitor.isCanceled()){", "-\t\t\t\t\tthrow new AbortCompilation(true, null); // silent abort", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tIProblem problem =", "-\t\t\t\t\tsuper.createProblem(", "-\t\t\t\t\t\toriginatingFileName,", "-\t\t\t\t\t\tproblemId,", "-\t\t\t\t\t\tproblemArguments,", "-\t\t\t\t\t\tmessageArguments,", "-\t\t\t\t\t\tseverity,", "-\t\t\t\t\t\tstartPosition,", "-\t\t\t\t\t\tendPosition,", "-\t\t\t\t\t\tlineNumber);", "-\t\t\t\t// only report local problems", "-\t\t\t\tif (CharOperation.equals(originatingFileName, fileName)){", "-\t\t\t\t\tif (JavaModelManager.VERBOSE){", "-\t\t\t\t\t\tSystem.out.println(\"PROBLEM FOUND while reconciling : \"+problem.getMessage());//$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tproblemRequestor.acceptProblem(problem);", "-\t\t\t\t}", "-\t\t\t\tif (monitor != null && monitor.isCanceled()){", "-\t\t\t\t\tthrow new AbortCompilation(true, null); // silent abort", "-\t\t\t\t}", "-", "-\t\t\t\treturn problem;", "-\t\t\t}", "-\t\t};", "-\t}", "+\t", "+\tprivate static void reportProblems(CompilationUnitDeclaration unit, IProblemRequestor problemRequestor, IProgressMonitor monitor) {", "+\t\tCompilationResult unitResult = unit.compilationResult;", "+\t\tIProblem[] problems = unitResult.getAllProblems();", "+\t\tfor (int i = 0, problemLength = problems == null ? 0 : problems.length; i < problemLength; i++) {", "+\t\t\tif (JavaModelManager.VERBOSE){", "+\t\t\t\tSystem.out.println(\"PROBLEM FOUND while reconciling : \"+problems[i].getMessage());//$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (monitor != null && monitor.isCanceled()) break;", "+\t\t\tproblemRequestor.acceptProblem(problems[i]);\t\t\t\t", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d036f169521e0596e32ca6f5186fcd1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "542ce5451500fe1306b92aaa9a7c04d8d83f7f3f", "commitAfterChange": "9cbf7e62288f060b33b2dc1c1d579dae84747012", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\t\t\t\t \t\t\t\t\tpublic CategorizedProblem createProblem( \t\t\t\t\t\tchar[] originatingFileName, \t\t\t\t\t\tint problemId, \t\t\t\t\t\tString[] problemArguments, \t\t\t\t\t\tString[] messageArguments, \t\t\t\t\t\tint severity, \t\t\t\t\t\tint start, \t\t\t\t\t\tint end, \t\t\t\t\t\tint lineNumber, \t\t\t\t\t\tint columnNumber)", "signatureAfterChange": "  \t\tpublic CategorizedProblem createProblem( \t\t\tchar[] originatingFileName, \t\t\tint problemId, \t\t\tString[] problemArguments, \t\t\tString[] messageArguments, \t\t\tint severity, \t\t\tint start, \t\t\tint end, \t\t\tint lineNumber, \t\t\tint columnNumber)", "diff": ["+", "+\t\tpublic CategorizedProblem createProblem(", "+\t\t\tchar[] originatingFileName,", "+\t\t\tint problemId,", "+\t\t\tString[] problemArguments,", "+\t\t\tString[] messageArguments,", "+\t\t\tint severity,", "+\t\t\tint start,", "+\t\t\tint end,", "+\t\t\tint lineNumber,", "+\t\t\tint columnNumber) {", "+\t\t\t", "+\t\t\tCategorizedProblem pb = super.createProblem(", "+\t\t\t\toriginatingFileName,", "+\t\t\t\tproblemId,", "+\t\t\t\tproblemArguments,", "+\t\t\t\tmessageArguments,", "+\t\t\t\tseverity,", "+\t\t\t\tstart,", "+\t\t\t\tend,", "+\t\t\t\tlineNumber,", "+\t\t\t\tcolumnNumber);", "+\t\t\tint id = pb.getID();", "+\t\t\tif (CompletionEngine.this.actualCompletionPosition > start", "+\t\t\t\t&& this.lastErrorStart < start", "+\t\t\t\t&& pb.isError()", "+\t\t\t\t&& (id & IProblem.Syntax) == 0", "+\t\t\t\t&& (CompletionEngine.this.fileName == null || CharOperation.equals(CompletionEngine.this.fileName, originatingFileName))) {", "+\t\t\t\t\t", "+\t\t\t\tCompletionEngine.this.problem = pb;", "+\t\t\t\tthis.lastErrorStart = start;", "+\t\t\t}", "+\t\t\tif (this.checkProblems && !this.hasProblems) {", "+\t\t\t\tif (id == IProblem.UsingDeprecatedType) {", "+\t\t\t\t\tthis.hasProblems =", "+\t\t\t\t\t\tCompletionEngine.this.options.checkDeprecation;", "+\t\t\t\t} else if (id == IProblem.NotVisibleType) {", "+\t\t\t\t\tthis.hasProblems =", "+\t\t\t\t\t\tCompletionEngine.this.options.checkVisibility;", "+\t\t\t\t} else if (id == IProblem.ForbiddenReference) {", "+\t\t\t\t\tthis.hasProblems =", "+\t\t\t\t\t\tCompletionEngine.this.options.checkForbiddenReference;", "+\t\t\t\t} else if (id == IProblem.DiscouragedReference) {", "+\t\t\t\t\tthis.hasProblems =", "+\t\t\t\t\t\tCompletionEngine.this.options.checkDiscouragedReference;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.hasProblems = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\treturn pb;", "+\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tpublic CategorizedProblem createProblem(", "-\t\t\t\t\t\tchar[] originatingFileName,", "-\t\t\t\t\t\tint problemId,", "-\t\t\t\t\t\tString[] problemArguments,", "-\t\t\t\t\t\tString[] messageArguments,", "-\t\t\t\t\t\tint severity,", "-\t\t\t\t\t\tint start,", "-\t\t\t\t\t\tint end,", "-\t\t\t\t\t\tint lineNumber,", "-\t\t\t\t\t\tint columnNumber) {", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tCategorizedProblem pb = super.createProblem(", "-\t\t\t\t\t\t\toriginatingFileName,", "-\t\t\t\t\t\t\tproblemId,", "-\t\t\t\t\t\t\tproblemArguments,", "-\t\t\t\t\t\t\tmessageArguments,", "-\t\t\t\t\t\t\tseverity,", "-\t\t\t\t\t\t\tstart,", "-\t\t\t\t\t\t\tend,", "-\t\t\t\t\t\t\tlineNumber,", "-\t\t\t\t\t\t\tcolumnNumber);", "-\t\t\t\t\t\tif(CompletionEngine.this.actualCompletionPosition > start", "-\t\t\t\t\t\t\t&& this.lastErrorStart < start", "-\t\t\t\t\t\t\t&& pb.isError()", "-\t\t\t\t\t\t\t&& (pb.getID() & IProblem.Syntax) == 0", "-\t\t\t\t\t\t\t&& (CompletionEngine.this.fileName == null || CharOperation.equals(CompletionEngine.this.fileName, originatingFileName))) {", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tCompletionEngine.this.problem = pb;", "-\t\t\t\t\t\t\tthis.lastErrorStart = start;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\treturn pb;", "-\t\t\t\t\t}"]}], "num": 22894}
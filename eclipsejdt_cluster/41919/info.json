{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13d65c2b1c10ce6f2cc7ff4defac58b5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "588eab04246c241884d0ac35972a584a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompilationUnitTests.java", "commitBeforeChange": "938b1c8a022540a594cc122eea928c242180e400", "commitAfterChange": "3883b7541738126367cb07b1070bef67542d7472", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testDeprecatedFlag() throws JavaModelException", "signatureAfterChange": " public void testDeprecatedFlag01() throws JavaModelException", "diff": ["-public void testDeprecatedFlag() throws JavaModelException {", "+public void testDeprecatedFlag01() throws JavaModelException {", "-\tassertTrue(\"Type I should be deprecated\", Flags.isDeprecated(this.cu.getType(\"I\").getFlags()));", "-\t", "-\tassertTrue(\"Field f1 should not be deprecated\", !Flags.isDeprecated(type.getField(\"f1\").getFlags()));", "-\tassertTrue(\"Field f2 should be deprecated\", Flags.isDeprecated(type.getField(\"f2\").getFlags()));", "-\t", "-\tassertTrue(\"Method bar should not be deprecated\", !Flags.isDeprecated(type.getMethod(\"bar\", new String[]{}).getFlags()));", "-\tassertTrue(\"Method fred should be deprecated\", Flags.isDeprecated(type.getMethod(\"fred\", new String[]{}).getFlags()));", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18e6c140f0fc506db039ffdb069d9d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "a127c18eb2e0be7f3c68a60246b08a9a69e7be5d", "commitAfterChange": "771a62c1c5090742b5612a8958d0207ca0f557cc", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  \tprotected void checkSourceRange(ASTNode node, String expectedContents, char[] source)", "signatureAfterChange": "  \tprotected void checkSourceRange(ASTNode node, String expectedContents, char[] source)", "diff": ["+\t\tcheckSourceRange(node, expectedContents, source, false);", "+\t}"]}], "num": 41919}
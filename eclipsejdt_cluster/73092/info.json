{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ce254b2743a0ad206a53e46ee7d926e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bbe4fdd2cb0dea820623d88cff78ac2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "78d640f6bd5ff8e757b4b457bee3d92d7c8352e1", "commitAfterChange": "abfcb7bb2bf20458fc372ec46b98225419a0c876", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " void checkTypeVariableMethods(TypeParameter typeParameter)", "signatureAfterChange": " void checkTypeVariableMethods(TypeParameter typeParameter)", "diff": ["+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=314556", "+\t\t\t\t\tMethodBinding interfaceMethod = null, implementation = null;", "+\t\t\t\t\tif (first.declaringClass.isInterface()) {", "+\t\t\t\t\t\tinterfaceMethod = first;", "+\t\t\t\t\t} else if (first.declaringClass.isClass()) {", "+\t\t\t\t\t\timplementation = first;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (match.declaringClass.isInterface()) {", "+\t\t\t\t\t\tinterfaceMethod = match;", "+\t\t\t\t\t} else if (match.declaringClass.isClass()) {", "+\t\t\t\t\t\timplementation = match;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (interfaceMethod != null && implementation != null && !isAsVisible(implementation, interfaceMethod))", "+\t\t\t\t\t\tproblemReporter().inheritedMethodReducesVisibility(typeParameter, implementation, new MethodBinding [] {interfaceMethod});", "+\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d766d5e833d53d798d49350f08e8cfc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "7fa614421be752542e93fc8394ff005421401e06", "commitAfterChange": "8c40adfe15c680e040fa4c1f51e65e6986081149", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "signatureAfterChange": "  public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "diff": ["+\t\t", "+\t\tCompilationUnitDeclaration focusUnit = null;", "+\t\tBinaryTypeBinding focusBinaryBinding = null;", "+\t\tIType focus = this.requestor.getType();", "+\t\tOpenable focusOpenable = null;", "+\t\tif (focus != null) {", "+\t\t\tif (focus.isBinary()) {", "+\t\t\t\tfocusOpenable = (Openable)focus.getClassFile();", "+\t\t\t} else {", "+\t\t\t\tfocusOpenable = (Openable)focus.getCompilationUnit();", "+\t\t\t}", "+\t\t}", "+\t\t\t\t\t\tif (openable.equals(focusOpenable)) {", "+\t\t\t\t\t\t\tfocusUnit = parsedUnit;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (openable.equals(focusOpenable)) {", "+\t\t\t\t\t\t\tfocusBinaryBinding = binaryTypeBinding;", "+\t\t\t\t\t\t}", "-\t\treportHierarchy();", "+\t\treportHierarchy(focus, focusUnit, focusBinaryBinding);", "-}"]}], "num": 73092}
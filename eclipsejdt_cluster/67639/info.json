{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63411cf123ff985ebdfff8723c81595d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4ad8d4041267d01a801bce972a53d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "1ce14f7d38953baa0407a7c04bf1e650dc1a4ab4", "commitAfterChange": "188c9c7dc3851a0a188854f7875a3d0a8c55cb71", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject, IClasspathEntry[] focusEntriesForPolymorphicSearch)", "signatureAfterChange": " private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject)", "diff": ["-public static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject, IClasspathEntry[] focusEntriesForPolymorphicSearch) {", "+}", "+private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject) {", "-\t\tif (focus.equals(javaProject))", "-\t\t\treturn true;", "+\t\tif (focus == null) return false;", "+\t\tif (focus.equals(javaProject)) return true;", "-\t\tif (focusEntriesForPolymorphicSearch != null) {", "-\t\t\t// look for refering project", "-\t\t\tIPath projectPath = javaProject.getProject().getFullPath();", "-\t\t\tfor (int i = 0, length = focusEntriesForPolymorphicSearch.length; i < length; i++) {", "-\t\t\t\tIClasspathEntry entry = focusEntriesForPolymorphicSearch[i];", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && entry.getPath().equals(projectPath))", "-\t\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfd04a9c3b15389ded990434532ed4ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "9e6a3af9f4e67aab7b20e93de31ad260ee0978b5", "commitAfterChange": "59520c153ca7b41ec00a737644dceff58328b89a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void runTest( \t\t\tboolean shouldCompileOK,  \t\t\tString[] testFiles,  \t\t\tString commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory, \t\t\tTestCompilationProgress progress)", "signatureAfterChange": " \tprotected void runTest( \t\t\tboolean shouldCompileOK,  \t\t\tString[] testFiles,  \t\t\tObject extraArguments, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory, \t\t\tTestCompilationProgress progress)", "diff": ["-\tprivate void runTest(", "+\tprotected void runTest(", "-\t\t\tString commandLine,", "+\t\t\tObject extraArguments,", "-\t\tMain batchCompiler;", "-\t\t\t\tbatchCompiler = new Main(out, err, false/*systemExit*/, null/*options*/, progress);", "-\t\t\ttry {", "-\t\t\t\tfinal String[] tokenizeCommandLine = Main.tokenize(commandLine);", "-\t\t\t\tcompileOK = batchCompiler.compile(tokenizeCommandLine);", "-\t\t\t} catch (RuntimeException e) {", "-\t\t\t\tcompileOK = false;", "-\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\te.printStackTrace();", "-\t\t\t\tthrow e;", "-\t\t\t}", "+\t\t\tcompileOK = invokeCompiler(out, err, extraArguments, progress);", "-\t\t\t\t\t\t+ commandLine + \"]\",", "+\t\t\t\t\t\t+ extraArguments + \"]\",", "-\t\t\t\t\t\t+ commandLine + \"]\",", "+\t\t\t\t\t\t+ extraArguments + \"]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d481de311b5ea4315847a0d292d66eca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0fcbdf3f242eca695398990480b5252f47b13157", "commitAfterChange": "bdb5fd6b326428cc9f0c1c9c5974b9a701aacf91", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic GeneratedFileManager(final AptProject aptProject)", "signatureAfterChange": " \tpublic GeneratedFileManager(final AptProject aptProject, final GeneratedSourceFolderManager gsfm)", "diff": ["-\tpublic GeneratedFileManager(final AptProject aptProject) {", "-\t\t_aptProject = aptProject;", "-\t\tfinal IJavaProject javaProject = aptProject.getJavaProject();", "-\t\t", "-\t\t// get generated source dir from config ", "-\t\t// default value is set in org.eclipse.jdt.apt.core.internal.util.AptCorePreferenceInitializer", "-\t\t_generatedSourceFolderName = AptConfig.getString( javaProject, AptPreferenceConstants.APT_GENSRCDIR);", "-\t\t// properly initialize the GeneratedFileManager if project path is up-to-date and the generated ", "-\t\t// source folder is there.", "-\t\tfinal IFolder folder = javaProject.getProject().getFolder(_generatedSourceFolderName);", "-\t\tif(folder.exists()){", "-\t\t\tboolean uptodate = false;", "-\t\t\ttry{", "-\t\t\t\tuptodate = isProjectClassPathUpToDate(javaProject, null, folder.getFullPath(), null);", "-\t\t\t}catch(JavaModelException e){", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\t\tif( uptodate )", "-\t\t\t\t_generatedSourceFolder = folder;", "-\t\t}\t", "+\tpublic GeneratedFileManager(final AptProject aptProject, final GeneratedSourceFolderManager gsfm) {", "+\t\t_jProject = aptProject.getJavaProject();", "+\t\t_gsfm = gsfm;"]}], "num": 67639}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67a3b83ab36cfea0aac052627c5c0b4a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43842fa54ce0eedd6363250f17296c00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void testClasspathNoChanges() throws CoreException", "signatureAfterChange": " public void testClasspathNoChanges() throws CoreException", "diff": ["-", "-", "-//\t\ttry {", "-//\t\t\tjava.io.File file = p.getProject().getFile(JavaProject.CLASSPATH_FILENAME).getLocation().toFile();", "-//\t\t\tif (file.exists()){", "-//\t\t\t\tchar[] classpath = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(file, \"UTF-8\");", "-//\t\t\t\tSystem.out.println(new String(classpath));", "-//\t\t\t}", "-//\t\t} catch(java.io.IOException e){", "-//\t\t}", "-", "-\t\tStringBuffer buffer = new StringBuffer(10);", "-\t\tfor (int i = 0; i < this.deltaListener.deltas.length; i++){", "-\t\t\tbuffer.append(this.deltaListener.deltas[i].toString()).append('\\n');", "-\t\t}", "-\t\tassertEquals(\"No deltas should be generated for the same classpath\", \"\", buffer.toString());", "+\t\tassertDeltas(\"Unexpected delta\", \"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "996a7d8432c1bd63e43d49603ccb1e83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "0be5d06687e970925fd56f686bb007a501207716", "commitAfterChange": "d8a456bd9b26260c97b05c5b9053ba80ab69b578", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testClasspathNoChanges() throws CoreException", "signatureAfterChange": " public void testClasspathNoChanges() throws CoreException", "diff": ["-\t\tIJavaProject classFileProject= this.createJavaProject(\"P\", new String[] {\"\"}, \"\");", "-\t\tIClasspathEntry[] oldClasspath= classFileProject.getRawClasspath();", "+\t\tIJavaProject p = this.createJavaProject(\"P\", new String[] {\"\"}, \"\");", "+\t\tIClasspathEntry[] oldClasspath= p.getRawClasspath();", "-\t\tclassFileProject.setRawClasspath(oldClasspath, null);", "-\t\tassertTrue(\"No deltas should be generated for the same classpath\", ", "-\t\t\tthis.deltaListener.deltas.length == 0);", "+\t\tp.setRawClasspath(oldClasspath, null);", "+", "+", "+//\t\ttry {", "+//\t\t\tjava.io.File file = p.getProject().getFile(JavaProject.CLASSPATH_FILENAME).getLocation().toFile();", "+//\t\t\tif (file.exists()){", "+//\t\t\t\tchar[] classpath = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(file, \"UTF-8\");", "+//\t\t\t\tSystem.out.println(new String(classpath));", "+//\t\t\t}", "+//\t\t} catch(java.io.IOException e){", "+//\t\t}", "+", "+\t\tStringBuffer buffer = new StringBuffer(10);", "+\t\tfor (int i = 0; i < this.deltaListener.deltas.length; i++){", "+\t\t\tbuffer.append(this.deltaListener.deltas[i].toString()).append('\\n');", "+\t\t}", "+\t\tassertEquals(\"No deltas should be generated for the same classpath\", \"\", buffer.toString());"]}], "num": 45860}
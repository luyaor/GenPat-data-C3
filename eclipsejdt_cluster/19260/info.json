{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "058ccb254fb223781f09f0b8eaaddae2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7493616a50d4c75c50966d153c0d3d3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic String getQualifiedName()", "signatureAfterChange": " \tpublic String getQualifiedName()", "diff": ["-\t\tif (isAnonymous() || isLocal()) {", "-\t\t\treturn NO_NAME;", "-\t\t}", "-\t\tif (isPrimitive() || isNullType()) {", "-\t\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;", "-\t\t\treturn new String(baseTypeBinding.simpleName);", "-\t\t}", "-\t\tif (isWildcardType()) {", "-\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "-\t\t\tfinal ITypeBinding bound = getBound();", "-\t\t\tif (bound != null) {", "-\t\t\t\tswitch(wildcardBinding.kind) {", "-\t\t\t        case Wildcard.SUPER :", "-\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_SUPER);", "-\t\t\t            break;", "-\t\t\t        case Wildcard.EXTENDS :", "-\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "+\t\tStringBuffer buffer;", "+\t\tswitch (this.binding.kind()) {", "+\t\t\t", "+\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "+\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "+\t\t\t\tfinal ITypeBinding bound = getBound();", "+\t\t\t\tif (bound != null) {", "+\t\t\t\t\tswitch(wildcardBinding.boundKind) {", "+\t\t\t\t        case Wildcard.SUPER :", "+\t\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_SUPER);", "+\t\t\t\t            break;", "+\t\t\t\t        case Wildcard.EXTENDS :", "+\t\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(bound.getQualifiedName());", "-\t\t\t\tbuffer.append(bound.getQualifiedName());", "-\t\t\t}", "-\t\t\treturn String.valueOf(buffer);", "-\t\t}", "-\t\tif (isRawType()) {", "-\t\t\treturn getTypeDeclaration().getQualifiedName();", "-\t\t}", "-\t\tif (isArray()) {", "-\t\t\tITypeBinding elementType = getElementType();", "-\t\t\tif (elementType.isLocal() || elementType.isAnonymous()) {", "-\t\t\t\treturn NO_NAME;", "-\t\t\t}", "-\t\t\tfinal int dimensions = getDimensions();", "-\t\t\tchar[] brackets = new char[dimensions * 2];", "-\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "-\t\t\t\tbrackets[i] = ']';", "-\t\t\t\tbrackets[i - 1] = '[';", "-\t\t\t}", "-\t\t\tStringBuffer buffer = new StringBuffer(elementType.getQualifiedName());", "-\t\t\tbuffer.append(brackets);", "-\t\t\treturn String.valueOf(buffer);", "-\t\t}", "-\t\tif (isTypeVariable()) {", "-\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "-\t\t\treturn new String(typeVariableBinding.sourceName);", "-\t\t}", "-\t\tif (isMember()) {", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer", "-\t\t\t\t.append(getDeclaringClass().getQualifiedName())", "-\t\t\t\t.append('.');", "-\t\t\tif (isParameterizedType()) {", "-\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) this.binding;", "-\t\t\t\tbuffer.append(parameterizedTypeBinding.sourceName());", "+\t\t\t\treturn String.valueOf(buffer);", "+\t\t", "+\t\t\tcase Binding.RAW_TYPE :", "+\t\t\t\treturn getTypeDeclaration().getQualifiedName();", "+\t\t\t\t", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tITypeBinding elementType = getElementType();", "+\t\t\t\tif (elementType.isLocal() || elementType.isAnonymous() || elementType.isCapture()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}", "+\t\t\t\tfinal int dimensions = getDimensions();", "+\t\t\t\tchar[] brackets = new char[dimensions * 2];", "+\t\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "+\t\t\t\t\tbrackets[i] = ']';", "+\t\t\t\t\tbrackets[i - 1] = '[';", "+\t\t\t\t}", "+\t\t\t\tbuffer = new StringBuffer(elementType.getQualifiedName());", "+\t\t\t\tbuffer.append(brackets);", "+\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\tif (isCapture()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "+\t\t\t\treturn new String(typeVariableBinding.sourceName);", "+\t\t\t\t", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tif (isMember()) {", "+\t\t\t\t\tbuffer", "+\t\t\t\t\t\t.append(getDeclaringClass().getQualifiedName())", "+\t\t\t\t\t\t.append('.');", "+\t\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) this.binding;", "+\t\t\t\t\tbuffer.append(parameterizedTypeBinding.sourceName());", "+\t\t\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "+\t\t\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "+\t\t\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\t\t\tbuffer.append('<');", "+\t\t\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbuffer.append(typeArguments[i].getQualifiedName());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append('>');\t", "+\t\t\t\t\t}", "+\t\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tbuffer.append(getTypeDeclaration().getQualifiedName());", "-\t\t\t\t\tbuffer.append('>');\t", "+\t\t\t\t\tbuffer.append('>');", "-\t\t\t} else {", "+\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t", "+\t\t\tdefault :", "+\t\t\t\tif (isAnonymous() || isLocal()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}", "+\t\t\t\tif (isPrimitive() || isNullType()) {", "+\t\t\t\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;", "+\t\t\t\t\treturn new String(baseTypeBinding.simpleName);", "+\t\t\t\t}", "+\t\t\t\tif (isMember()) {", "+\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\tbuffer", "+\t\t\t\t\t\t.append(getDeclaringClass().getQualifiedName())", "+\t\t\t\t\t\t.append('.');", "+\t\t\t\t\tbuffer.append(getName());", "+\t\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t}", "+\t\t\t\tPackageBinding packageBinding = this.binding.getPackage();", "+\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tif (packageBinding != null && packageBinding.compoundName != CharOperation.NO_CHAR_CHAR) {", "+\t\t\t\t\tbuffer.append(CharOperation.concatWith(packageBinding.compoundName, '.')).append('.');", "+\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn String.valueOf(buffer);", "+\t\t\t\treturn String.valueOf(buffer);", "-\t\tif (isParameterizedType()) {", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer.append(getTypeDeclaration().getQualifiedName());", "-\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "-\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "-\t\t\tif (typeArgumentsLength != 0) {", "-\t\t\t\tbuffer.append('<');", "-\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "-\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\tbuffer.append(',');", "-\t\t\t\t\t}", "-\t\t\t\t\tbuffer.append(typeArguments[i].getQualifiedName());", "-\t\t\t\t}", "-\t\t\t\tbuffer.append('>');", "-\t\t\t}", "-\t\t\treturn String.valueOf(buffer);", "-\t\t}", "-\t\tif (isRawType()) {", "-\t\t\treturn getTypeDeclaration().getQualifiedName();", "-\t\t}", "-\t\tPackageBinding packageBinding = this.binding.getPackage();", "-\t\t", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tif (packageBinding != null && packageBinding.compoundName != CharOperation.NO_CHAR_CHAR) {", "-\t\t\tbuffer.append(CharOperation.concatWith(packageBinding.compoundName, '.')).append('.');", "-\t\t}", "-\t\tbuffer.append(getName());", "-", "-\t\treturn String.valueOf(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceb8cb02bff7c3a26c34e569b09ece5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "4374063ffc07d9e5a6e12269e991cbcb89c32543", "commitAfterChange": "996ea5997dae4e7ec05722a233804ef32ae29f15", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic String getQualifiedName()", "signatureAfterChange": " \tpublic String getQualifiedName()", "diff": ["-\t\t", "-\t\tif (isPrimitive() || isNullType() || this.isTypeVariable()) {", "-\t\t\treturn new String(this.binding.sourceName());", "+\t\tif (isPrimitive() || isNullType()) {", "+\t\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;", "+\t\t\treturn new String(baseTypeBinding.simpleName);", "-\t\t", "-\t\tif (isArray()) {", "-\t\t\tITypeBinding elementType = getElementType();", "-\t\t\tString elementTypeQualifiedName = elementType.getQualifiedName();", "-\t\t\tif (elementTypeQualifiedName.length() != 0) {", "-\t\t\t\tint dimensions = this.getDimensions();", "-\t\t\t\tchar[] brackets = new char[dimensions * 2];", "-\t\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "-\t\t\t\t\tbrackets[i] = ']';", "-\t\t\t\t\tbrackets[i - 1] = '[';", "-\t\t\t\t}", "-\t\t\t\tStringBuffer stringBuffer = new StringBuffer(elementTypeQualifiedName);", "-\t\t\t\tstringBuffer.append(brackets);", "-\t\t\t\treturn stringBuffer.toString();", "-\t\t\t} else {", "-\t\t\t\treturn NO_NAME;", "-\t\t\t}", "-\t\t}", "-\t\tif (isTopLevel() || isMember()) {", "-\t\t\tPackageBinding packageBinding = this.binding.getPackage();", "-\t\t\t", "+\t\tif (isWildcardType()) {", "+\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "-\t\t\tif (isWildcardType()) {", "-\t\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "-\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "-\t\t\t\tif (wildcardBinding.bound != null) {", "-\t\t\t\t\tswitch(wildcardBinding.kind) {", "-\t\t\t\t\t\tcase Wildcard.SUPER :", "-\t\t\t\t\t\t\tbuffer.append(TypeConstants.WILDCARD_SUPER);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase Wildcard.EXTENDS :", "-\t\t\t\t\t\t\tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tbuffer.append(getBound().getQualifiedName());\t\t\t\t", "+\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "+\t\t\tfinal ITypeBinding bound = getBound();", "+\t\t\tif (bound != null) {", "+\t\t\t\tswitch(wildcardBinding.kind) {", "+\t\t\t        case Wildcard.SUPER :", "+\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_SUPER);", "+\t\t\t            break;", "+\t\t\t        case Wildcard.EXTENDS :", "+\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "-\t\t\t} else {", "-\t\t\t\tif (packageBinding != null && packageBinding.compoundName != CharOperation.NO_CHAR_CHAR) {", "-\t\t\t\t\tbuffer.append(packageBinding.readableName()).append('.');", "-\t\t\t\t}", "-\t\t\t\tbuffer.append(this.binding.qualifiedSourceName());", "-\t\t\t\tif (!isRawType()) {", "-\t\t\t\t\t// only one of the type parameters or type arguments is non-empty at the same time", "-\t\t\t\t\tappendQualifiedTypeParameters(buffer, getTypeParameters());", "-\t\t\t\t\tappendQualifiedTypeArguments(buffer, getTypeArguments());", "-\t\t\t\t}", "+\t\t\t\tbuffer.append(bound.getQualifiedName());", "-\t\treturn NO_NAME;", "+\t\tif (isRawType()) {", "+\t\t\treturn getErasure().getQualifiedName();", "+\t\t}", "+\t\tif (isArray()) {", "+\t\t\tITypeBinding elementType = getElementType();", "+\t\t\tif (elementType.isLocal() || elementType.isAnonymous()) {", "+\t\t\t\treturn NO_NAME;", "+\t\t\t}", "+\t\t\tfinal int dimensions = getDimensions();", "+\t\t\tchar[] brackets = new char[dimensions * 2];", "+\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "+\t\t\t\tbrackets[i] = ']';", "+\t\t\t\tbrackets[i - 1] = '[';", "+\t\t\t}", "+\t\t\tStringBuffer buffer = new StringBuffer(elementType.getQualifiedName());", "+\t\t\tbuffer.append(brackets);", "+\t\t\treturn String.valueOf(buffer);", "+\t\t}", "+\t\tif (isTypeVariable()) {", "+\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "+\t\t\treturn new String(typeVariableBinding.sourceName);", "+\t\t}", "+\t\tif (isMember()) {", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tbuffer", "+\t\t\t\t.append(this.resolver.getTypeBinding(this.binding.enclosingType()).getQualifiedName())", "+\t\t\t\t.append('.')", "+\t\t\t\t.append(getName());", "+\t\t\treturn String.valueOf(buffer);", "+\t\t}", "+\t\tif (isParameterizedType()) {", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tbuffer.append(getErasure().getQualifiedName());", "+\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "+\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "+\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\tbuffer.append('<');", "+\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(typeArguments[i].getQualifiedName());", "+\t\t\t\t}", "+\t\t\t\tbuffer.append('>');", "+\t\t\t}", "+\t\t\treturn String.valueOf(buffer);", "+\t\t}", "+\t\tif (isRawType()) {", "+\t\t\treturn getErasure().getQualifiedName();", "+\t\t}", "+\t\tPackageBinding packageBinding = this.binding.getPackage();", "+\t\t", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tif (packageBinding != null && packageBinding.compoundName != CharOperation.NO_CHAR_CHAR) {", "+\t\t\tbuffer.append(CharOperation.concatWith(packageBinding.compoundName, '.')).append('.');", "+\t\t}", "+\t\tbuffer.append(getName());", "+", "+\t\treturn String.valueOf(buffer);"]}], "num": 19260}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a0cfcfe58253a22c6dd44ec2ed1ffc6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cc88592d121edf0f3ba7b382f216819", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "42a8e7b7f9382c59bb1ff340f0838c566aaa3094", "commitAfterChange": "eaac4cd91d3c13197436495a330942a49816eb54", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t\t\tif (!returnType.isParameterizedType())", "-\t\t\t\t\tthis.problemReporter(currentMethod).returnTypeUncheckedConversion(currentMethod, inheritedMethod);", "+\t\t\t\tif (!returnType.isParameterizedType()) ", "+\t\t\t\t\tthis.problemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, inheritedMethod, ((MethodDeclaration)currentMethod.sourceMethod()).returnType);", "-\t\t\t\tthis.problemReporter(currentMethod).returnTypeUncheckedConversion(currentMethod, inheritedMethod);", "+\t\t\t\tthis.problemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, inheritedMethod,  ((MethodDeclaration)currentMethod.sourceMethod()).returnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d18b5fcd38e7017147004fd54c4cd398", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "b3d6511bfc5dff5703062bc61c81c4162e5d04f0", "commitAfterChange": "93991dcca6f649b3226644169cf868ab7dae96df", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tUnconditionalFlowInfo checkFlowInfo;", "-\t\t\t\tcheckFlowInfo = actionInfo.", "-\t\t\t\t\taddPotentialNullInfoFrom(", "+\t\t\t\tflowInfo.unconditionalCopy().addPotentialNullInfoFrom(", "-\t\t\t\tcheckFlowInfo);", "+\t\t\t\tactionInfo.addPotentialNullInfoFrom(", "+\t\t\t\t  condInfo.initsWhenTrue().unconditionalInits()));"]}], "num": 8682}
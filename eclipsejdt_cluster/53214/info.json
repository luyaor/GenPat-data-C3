{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac17888dbde730482f7a2460b742ffb6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f9fca87a6813040a4c9e7c33c50d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\tpublic boolean boundCheck(Substitution substitution, TypeBinding argumentType) {", "+\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType) {", "-\t\tif (argumentType == NullBinding || this == argumentType) ", "-\t\t\treturn true;", "+\t\tif (argumentType == NullBinding || argumentType == this)", "+\t\t\treturn TypeConstants.OK;", "+\t\tboolean hasSubstitution = substitution != null;", "-\t\t\treturn false;\t", "+\t\t\treturn TypeConstants.MISMATCH;\t", "-\t        switch (wildcard.kind) {", "+\t        switch (wildcard.boundKind) {", "-\t\t            if (!boundCheck(substitution, wildcard.bound)) return false;", "-\t\t            break;", "+//\t\t            if (boundCheck(substitution, wildcard.bound) != TypeConstants.OK) return TypeConstants.MISMATCH;", "+//\t\t            break;", "+\t\t            return boundCheck(substitution, wildcard.bound); // only check the lower bound", "-\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\treturn TypeConstants.OK;", "-\t\tboolean hasSubstitution = substitution != null;", "+\t\tboolean unchecked = false;", "+\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t    return TypeConstants.MISMATCH;", "+\t\t\t}", "-\t\t\t\t\tif (match.isRawType() && !substitutedSuperType.isRawType())", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "+\t\t\t\t\t\tunchecked = true;", "-\t\t\t}", "-\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t    return false;", "+\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t    return TypeConstants.MISMATCH;", "+\t\t\t}", "-\t\t\t\t\tif (match.isRawType() && !substitutedSuperType.isRawType())", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "+\t\t\t\t\t\tunchecked = true;", "-\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t    return false;", "-\t\t\t}", "-\t    return true;", "+\t    return unchecked ? TypeConstants.UNCHECKED : TypeConstants.OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f09a39a693fd74dd6b466083d7556213", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (valueIfTrueType == TypeBinding.BOOLEAN) {", "+\t\t\tif (TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.BOOLEAN)) {", "-\t\t\tif ((valueIfTrueType == TypeBinding.BYTE && valueIfFalseType == TypeBinding.SHORT)", "-\t\t\t\t|| (valueIfTrueType == TypeBinding.SHORT && valueIfFalseType == TypeBinding.BYTE)) {", "+\t\t\tif ((TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.BYTE) && TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.SHORT))", "+\t\t\t\t|| (TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.SHORT) && TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.BYTE))) {", "-\t\t\tif ((valueIfTrueType == TypeBinding.BYTE || valueIfTrueType == TypeBinding.SHORT || valueIfTrueType == TypeBinding.CHAR)", "-\t\t\t\t\t&& (valueIfFalseType == TypeBinding.INT", "+\t\t\tif ((TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.BYTE) || TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.SHORT) || TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.CHAR))", "+\t\t\t\t\t&& (TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.INT)", "-\t\t\tif ((valueIfFalseType == TypeBinding.BYTE", "-\t\t\t\t\t|| valueIfFalseType == TypeBinding.SHORT", "-\t\t\t\t\t|| valueIfFalseType == TypeBinding.CHAR)", "-\t\t\t\t\t&& (valueIfTrueType == TypeBinding.INT", "+\t\t\tif ((TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.BYTE)", "+\t\t\t\t\t|| TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.SHORT)", "+\t\t\t\t\t|| TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.CHAR))", "+\t\t\t\t\t&& (TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.INT)"]}], "num": 53214}
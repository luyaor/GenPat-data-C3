{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d36be47040d7734bb556fbb12f1f7b07", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541bbfd0cfbdd316c54d9c8f61aa1ea5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "890f12769080ec7e336b8a6c7a5ccafda55e441c", "commitAfterChange": "59c21df7bbb3eb9f4d564c252a3eb81338b6548b", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": " protected void consumeEnumHeader()", "signatureAfterChange": " protected void consumeEnumHeader()", "diff": ["-\t// EnumHeader ::= Modifiersopt 'enum' Identifier", "+\tTypeDeclaration typeDecl = (TypeDeclaration) this.astStack[this.astPtr];\t", "+\tif (this.currentToken == TokenNameLBRACE) { ", "+\t\ttypeDecl.bodyStart = this.scanner.currentPosition;", "+\t}", "+", "+\tif (this.currentElement != null) {", "+\t\tthis.isInsideEnumConstantPart = true;", "+\t\tthis.restartRecovery = true; // used to avoid branching back into the regular automaton\t\t", "+\t}", "+\t", "+\t// flush the comments related to the enum header", "+\tthis.scanner.commentPtr = -1;", "+}", "-\tif (this.currentToken == TokenNameLBRACE) { ", "-\t\tenumDeclaration.bodyStart = this.scanner.currentPosition;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7efb54e918dc48c6d35abfaff143af56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "e8ae7ffc3de1911b69637cebec8d2d7f29a7dfa5", "commitAfterChange": "2118453a33ea6b9573a716041df3762f01e3c85f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected void consumeConstructorHeaderName()", "signatureAfterChange": " protected void consumeConstructorHeaderName()", "diff": ["-\t// ConstructorHeaderName ::=  Modifiersopt 'Identifier' '('", "-", "-\t/* recovering - might be an empty message send */", "-\tif (currentElement != null){", "-\t\tif (lastIgnoredToken == TokenNamenew){ // was an allocation expression", "-\t\t\tlastCheckPoint = scanner.startPosition; // force to restart at this exact position\t\t\t\t", "-\t\t\trestartRecovery = true;", "-\t\t\treturn;", "-\t\t}", "-\t}", "-\tSourceConstructorDeclaration cd = new SourceConstructorDeclaration(this.compilationUnit.compilationResult);", "-", "-\t//name -- this is not really revelant but we do .....", "-\tcd.selector = identifierStack[identifierPtr];", "-\tlong selectorSourcePositions = identifierPositionStack[identifierPtr--];", "-\tidentifierLengthPtr--;", "-", "-\t//modifiers", "-\tcd.declarationSourceStart = intStack[intPtr--];", "-\tcd.modifiers = intStack[intPtr--];", "-\t// consume annotations", "-\tint length;", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.expressionStack, ", "-\t\t\t(this.expressionPtr -= length) + 1, ", "-\t\t\tcd.annotations = new Annotation[length], ", "-\t\t\t0, ", "-\t\t\tlength); ", "-\t}", "-\t// javadoc", "-\tcd.javadoc = this.javadoc;", "-\tthis.javadoc = null;", "-", "-\t//highlight starts at the selector starts", "-\tcd.sourceStart = (int) (selectorSourcePositions >>> 32);", "-\tcd.selectorSourceEnd = (int) selectorSourcePositions;", "-\tpushOnAstStack(cd);", "-", "-\tcd.sourceEnd = lParenPos;", "-\tcd.bodyStart = lParenPos+1;", "-\tlistLength = 0; // initialize listLength before reading parameters/throws", "-", "-\t// recovery", "-\tif (currentElement != null){", "-\t\tlastCheckPoint = cd.bodyStart;", "-\t\tif ((currentElement instanceof RecoveredType && lastIgnoredToken != TokenNameDOT)", "-\t\t\t|| cd.modifiers != 0){", "-\t\t\tcurrentElement = currentElement.add(cd, 0);", "-\t\t\tlastIgnoredToken = -1;", "-\t\t}", "-\t}\t", "+\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr];", "+\tint selectorSourceEnd = (int) selectorSourcePositions;", "+\tint currentAstPtr = this.astPtr;", "+\tsuper.consumeConstructorHeaderName();", "+\tif (this.astPtr > currentAstPtr) // if ast node was pushed on the ast stack", "+\t\tthis.sourceEnds.put(this.astStack[this.astPtr], selectorSourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a192d73043fd171982dce327a66c3ab4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "97881e1f65dad02c5fcba69e18ae3332573c3839", "commitAfterChange": "5ae43aadc33d93b5c6af6a0612729105eee79d4f", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 238, "signatureBeforeChange": " public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit)", "signatureAfterChange": " public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit)", "diff": ["+\tparse(cd, unit, false);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f85f1ba4ba39d2c79a6aa35dddd54716", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "e8ae7ffc3de1911b69637cebec8d2d7f29a7dfa5", "commitAfterChange": "2118453a33ea6b9573a716041df3762f01e3c85f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void consumeConstructorHeaderNameWithTypeParameters()", "signatureAfterChange": " protected void consumeConstructorHeaderNameWithTypeParameters()", "diff": ["-", "-\t/* recovering - might be an empty message send */", "-\tif (this.currentElement != null){", "-\t\tif (this.lastIgnoredToken == TokenNamenew){ // was an allocation expression", "-\t\t\tthis.lastCheckPoint = this.scanner.startPosition; // force to restart at this exact position\t\t\t\t", "-\t\t\tthis.restartRecovery = true;", "-\t\t\treturn;", "-\t\t}", "-\t}", "-\t", "-\t// ConstructorHeaderName ::=  Modifiersopt TypeParameters 'Identifier' '('", "-\tSourceConstructorDeclaration cd = new SourceConstructorDeclaration(this.compilationUnit.compilationResult);", "-", "-\t//name -- this is not really revelant but we do .....", "-\tcd.selector = this.identifierStack[this.identifierPtr];", "-\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr--];", "-\tthis.identifierLengthPtr--;", "-", "-\t// consume type parameters", "-\tint length = this.genericsLengthStack[this.genericsLengthPtr--];", "-\tthis.genericsPtr -= length;", "-\tSystem.arraycopy(this.genericsStack, this.genericsPtr + 1, cd.typeParameters = new TypeParameter[length], 0, length);", "-\t", "-\t//modifiers", "-\tcd.declarationSourceStart = this.intStack[this.intPtr--];", "-\tcd.modifiers = this.intStack[this.intPtr--];", "-\t// consume annotations", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.expressionStack, ", "-\t\t\t(this.expressionPtr -= length) + 1, ", "-\t\t\tcd.annotations = new Annotation[length], ", "-\t\t\t0, ", "-\t\t\tlength); ", "-\t}", "-\t// javadoc", "-\tcd.javadoc = this.javadoc;", "-\tthis.javadoc = null;", "-", "-\t//highlight starts at the selector starts", "-\tcd.sourceStart = (int) (selectorSourcePositions >>> 32);", "-\tcd.selectorSourceEnd = (int) selectorSourcePositions;", "-\tpushOnAstStack(cd);", "-\tcd.sourceEnd = this.lParenPos;", "-\tcd.bodyStart = this.lParenPos+1;", "-\tthis.listLength = 0; // initialize listLength before reading parameters/throws", "-", "-\t// recovery", "-\tif (this.currentElement != null){", "-\t\tthis.lastCheckPoint = cd.bodyStart;", "-\t\tif ((this.currentElement instanceof RecoveredType && this.lastIgnoredToken != TokenNameDOT)", "-\t\t\t|| cd.modifiers != 0){", "-\t\t\tthis.currentElement = this.currentElement.add(cd, 0);", "-\t\t\tthis.lastIgnoredToken = -1;", "-\t\t}", "-\t}\t", "+\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr];", "+\tint selectorSourceEnd = (int) selectorSourcePositions;", "+\tint currentAstPtr = this.astPtr;", "+\tsuper.consumeConstructorHeaderNameWithTypeParameters();", "+\tif (this.astPtr > currentAstPtr) // if ast node was pushed on the ast stack", "+\t\tthis.sourceEnds.put(this.astStack[this.astPtr], selectorSourceEnd);"]}], "num": 10984}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04d26c05e386dcc8ac5fbfe1d40d2bc7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7dc83a491944f94f1a455a28164c0d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "21b06b1f77b7fda7b2358e6e2d335e77a6ac8125", "commitAfterChange": "b397fbf1ef2684ee73e7617091ec4c7be38fc011", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["+\t\tif( _skipTypeGeneration ) return null;", "+\t\telse if( _generatedPackageFragmentRoot == null ){\t\t\t", "+\t\t\tString message = Messages.bind(", "+\t\t\t\t\tMessages.GeneratedFileManager_missing_classpath_entry, ", "+\t\t\t\t\tnew String[] {_snapshotFolderName});", "+\t\t\tIMarker marker = _aptProject.getJavaProject().getProject().createMarker(AptPlugin.APT_CONFIG_PROBLEM_MARKER);", "+\t\t\tmarker.setAttributes(", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tIMarker.MESSAGE, ", "+\t\t\t\t\t\tIMarker.SEVERITY", "+\t\t\t\t\t},", "+\t\t\t\t\tnew Object[] {", "+\t\t\t\t\t\tmessage,", "+\t\t\t\t\t\tIMarker.SEVERITY_ERROR", "+\t\t\t\t\t}", "+\t\t\t\t);", "+\t\t\t// disable any future type generation", "+\t\t\t_skipTypeGeneration = true;", "+\t\t\treturn null;", "+\t\t}", "+\t\t", "-\t\t\t\tthrow new IllegalStateException(\"failed to locate package '\" + pkgName + \"'\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tfinal Exception e = new IllegalStateException(\"failed to locate package '\" + pkgName + \"'\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\te.printStackTrace();", "+\t\t\t\tthrow e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d965fa5c70e3a65cbb47a8e9a1593361", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "c0f9341badc01719d6b4f4d3ab99e20a8dc0821a", "commitAfterChange": "e50fba8828c054207eb4f1a56a83880c9a1ebbc8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, long ordering)", "signatureAfterChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, long ordering)", "diff": ["+\t} else if (ordering == BYTECODE_DECLARATION_ORDER) {", "+\t\ttry {", "+\t\t\tList bytecodeOrderedTestNames = OrderedTestSuite.getBytecodeOrderedTestNames(evaluationTestClass);", "+\t\t\tbytecodeOrderedTestNames.retainAll(names);", "+\t\t\tif (bytecodeOrderedTestNames.size() != names.size()) {", "+\t\t\t\tSystem.err.println(\"not all test names found in bytecode: \" + evaluationTestClass.getName());", "+\t\t\t}", "+\t\t\tnames = bytecodeOrderedTestNames;", "+\t\t} catch (IOException e) {", "+\t\t\tSystem.err.println(\"suite failed to detect test order: \" + evaluationTestClass.getName());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deda1e466be6256ece9fce75cb7571a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "3749ab08b3bcc9564a3496ebb9f23e5b7abd23aa", "commitAfterChange": "4a23c9efea3c3cfbb8a860d4cd8de9b8a033b86a", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  \t\tpublic void setLog(String logFileName) throws InvalidInputException", "signatureAfterChange": "  \t\tpublic void setLog(String logFileName) throws InvalidInputException", "diff": ["+\t\t\tfinal Date date = new Date();", "+\t\t\tfinal SimpleDateFormat dateFormat = new SimpleDateFormat(\"d MMM yyyy HH:mm:ss\", Locale.getDefault());//$NON-NLS-1$", "+\t\t\t\t\t\t// insert time stamp as comment", "+\t\t\t\t\t\tthis.log.println(\"<!-- \" + dateFormat.format(date) + \" -->\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.log.println(\"# \" + dateFormat.format(date));//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.log.println(\"# \" + dateFormat.format(date));//$NON-NLS-1$//$NON-NLS-2$"]}], "num": 4492}
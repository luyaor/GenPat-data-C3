{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b91f66550854d14ccfe28ad90ceee22", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08fa2a01c25b08b54425b1adb9567657", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "e56e767173dc5b5ba970e3e7ca9256e9541ebffc", "commitAfterChange": "071c3a7154f042f1dac67e366b91c1f1b510f2e9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected Object createArgumentReference(char[] name, int dim, boolean isVarargs, Object typeRef, long[] dimPositions, long argNamePos) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createArgumentReference(char[] name, int dim, boolean isVarargs, Object typeRef, long[] dimPositions, long argNamePos) throws InvalidInputException", "diff": ["-//\t\t\t\tif (dim > 0) {", "-//\t\t\t\t\targType = this.ast.newArrayType(argType, dim);", "-//\t\t\t\t\targType.setSourceRange(argStart, ((int) dimPositions[dim-1])-argStart+1);", "-//\t\t\t\t}", "-\t\t\t\tfor (int i=0; i<dim; i++) {", "-\t\t\t\t\targType = this.ast.newArrayType(argType);", "-\t\t\t\t\targType.setSourceRange(argStart, ((int) dimPositions[i])-argStart+1);", "+\t\t\t\tif (this.ast.apiLevel <= AST.JLS4_INTERNAL) {", "+\t\t\t\t\tfor (int i=0; i<dim; i++) {", "+\t\t\t\t\t\targType = this.ast.newArrayType(argType);", "+\t\t\t\t\t\targType.setSourceRange(argStart, ((int) dimPositions[i])-argStart+1);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tArrayType argArrayType = this.ast.newArrayType(argType, 0);", "+\t\t\t\t\targType = argArrayType;", "+\t\t\t\t\targType.setSourceRange(argStart, ((int) dimPositions[dim-1])-argStart+1);", "+\t\t\t\t\tfor (int i=0; i<dim; i++) {", "+\t\t\t\t\t\tDimension dimension = this.ast.newDimension();", "+\t\t\t\t\t\tint dimStart = (int) (dimPositions[i] >>> 32);", "+\t\t\t\t\t\tint dimEnd = (int) dimPositions[i];", "+\t\t\t\t\t\tdimension.setSourceRange(dimStart, dimEnd-dimStart+1);", "+\t\t\t\t\t\targArrayType.dimensions().add(dimension);", "+\t\t\t\t\t}", "+\t\t\targument.setVarargs(isVarargs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68981b6007aa4f52157d284c5a9fb9a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "  \tpublic TryStatement convert(org.eclipse.jdt.internal.compiler.ast.TryStatement statement)", "signatureAfterChange": "  \tpublic TryStatement convert(org.eclipse.jdt.internal.compiler.ast.TryStatement statement)", "diff": ["-", "+\t\tLocalDeclaration[] localDeclarations = statement.resources;", "+\t\tint resourcesLength = localDeclarations.length;", "+\t\tif (resourcesLength > 0) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t// convert it to a simple try statement tagged as MALFORMED", "+\t\t\t\t\ttryStatement.setFlags(tryStatement.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tfor (int i = 0; i < resourcesLength; i++) {", "+\t\t\t\t\t\tLocalDeclaration localDeclaration = localDeclarations[i];", "+\t\t\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression(localDeclaration);", "+\t\t\t\t\t\tint start = variableDeclarationExpression.getStartPosition();", "+\t\t\t\t\t\tint end = localDeclaration.declarationEnd;", "+\t\t\t\t\t\tvariableDeclarationExpression.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\ttryStatement.resources().add(variableDeclarationExpression);", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 39696}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91ed97d5f7351152661b744c6cd8e968", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4426d83122c3171882462fa44629aafd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Supertype() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Supertype() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [public class TestTypes extends \ufffd|type.def.Types|\ufffd {@81] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends \ufffd|Exception|\ufffd implements ITest1, ITest2 {@57] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements \ufffd|ITest1|\ufffd, ITest2 {@78] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, \ufffd|ITest2|\ufffd {@86] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends \ufffd|ITest1|\ufffd {}@184] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [public class TestTypes extends !|type.def.Types|! {@81] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends !|Exception|! implements ITest1, ITest2 {@57] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements !|ITest1|!, ITest2 {@78] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, !|ITest2|! {@86] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends !|ITest1|! {}@184] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90174d9d825448160a8f81321c30dda6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void test010()", "signatureAfterChange": " \tpublic void test010()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a46597e89658380b5522834ddea32012", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 917, "methodNumberAfterChange": 917, "signatureBeforeChange": " public void test0910()", "signatureAfterChange": " public void test0910()", "diff": ["-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection<?>> to List<Collection>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#1-of ? extends Collection<?>> to List<Collection>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection> to List<Collection>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#3-of ? extends Collection> to List<Collection>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection<?>> to List<Collection<?>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#4-of ? extends Collection<?>> to List<Collection<?>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection> to List<Collection<?>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#6-of ? extends Collection> to List<Collection<?>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection> to List<? extends Collection<?>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#13-of ? extends Collection> to List<? extends Collection<?>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e47c32e332102016b4e50bd260916b5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "e37ddd2cb60251da977bfe008d0c558febeb1616", "commitAfterChange": "ddff16f6a6b8fee88d497b4653d14d58ccda81b4", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testAbstract02b()", "signatureAfterChange": " \tpublic void testAbstract02b()", "diff": ["-\t// same as above but for interfaces this is illegal", "+\t// class is abstract", "+\t\trunNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"I1.java\",", "+\t\t\t\t\"public interface I1 {\\n\" +", "+\t\t\t\t\"    void test();\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"I2.java\",", "+\t\t\t\t\"public interface I2 {\\n\" +", "+\t\t\t\t\"    default void test() {}\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"C.java\",", "+\t\t\t\t\"public abstract class C implements I2, I1 {\\n\" +", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in C.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic abstract class C implements I2, I1 {\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\"The default method test() inherited from I2 conflicts with another method inherited from I1\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}"]}], "num": 46809}
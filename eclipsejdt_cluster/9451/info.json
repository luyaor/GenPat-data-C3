{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f981c6ad461fd43128e0bf780ec2166d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b9ef23249c8692db6cb500a784b6c00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatJavadocBlock.java", "commitBeforeChange": "49c7e567a30e3d9cc1c4880ba35031661d2a5415", "commitAfterChange": "c9d2c7d4276b8b0f65a3b8bbfa4009e8632940f9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void addBlock(FormatJavadocBlock block, int htmlLevel)", "signatureAfterChange": "  void addBlock(FormatJavadocBlock block, int htmlLevel)", "diff": ["+\t\t\t\tif (isParamTag()) {", "+\t\t\t\t\tblock.flags |= PARAM_TAG;", "+\t\t\t\t}", "+\tif (isParamTag()) {", "+\t\tblock.flags |= PARAM_TAG;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bed310323973e9031490a85e3533be6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "b82b9f7bd45cc7f7ad6f16b93ce9d9f1143b6b91", "commitAfterChange": "a53c452f023839a222149b35aed40944926f6f74", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "signatureAfterChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "diff": ["+\t\t\tif (startingPositionInCascade == 1) {", "+\t\t\t\tcascadingMessageSendAlignment.startingColumn = this.scribe.column;", "+\t\t\t}", "+\t\t\t\t\tcascadingMessageSendAlignment.startingColumn = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f5804203e461251469c9a1e05c336c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "45b2548f21c6553964603037785b1fef0bb3e0d3", "commitAfterChange": "3f4a2c82508dce46555bf8187ab30ef1054115be", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void consumeParameterizedGenericMethod()", "signatureAfterChange": "  \tpublic void consumeParameterizedGenericMethod()", "diff": ["+\t\tif (arguments == null) {", "+\t\t\tthis.methodBinding = null;", "+\t\t\tthis.compilerBinding = null;", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56a2527ca664b3135225636477a05ca1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "8635a189d924741fc24bc4be873c4d30df46a524", "commitAfterChange": "903406128c19b4f927e6592cfb93facd59066f36", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": "\r protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\t\tint level = this.matchLevel(fieldBinding);\r", "-\t\t\tswitch (level) {\r", "-\t\t\t\tcase ACCURATE_MATCH:\r", "-\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = IJavaSearchResultCollector.EXACT_MATCH;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase INACCURATE_MATCH:\r", "-\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = IJavaSearchResultCollector.POTENTIAL_MATCH;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tdefault:\r", "-\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = -1;\r", "+\t\t\tif (fieldBinding == null) {\r", "+\t\t\t\taccuracies[indexOfFirstFieldBinding] = accuracy;\r", "+\t\t\t} else {\r", "+\t\t\t\tint level = this.matchLevel(fieldBinding);\r", "+\t\t\t\tswitch (level) {\r", "+\t\t\t\t\tcase ACCURATE_MATCH:\r", "+\t\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = IJavaSearchResultCollector.EXACT_MATCH;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase INACCURATE_MATCH:\r", "+\t\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = IJavaSearchResultCollector.POTENTIAL_MATCH;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = -1;\r", "+\t\t\t\t}\r", "-\t\t\t\tint level = this.matchLevel(otherBinding);\r", "-\t\t\t\tswitch (level) {\r", "-\t\t\t\t\tcase ACCURATE_MATCH:\r", "-\t\t\t\t\t\taccuracies[i] = IJavaSearchResultCollector.EXACT_MATCH;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase INACCURATE_MATCH:\r", "-\t\t\t\t\t\taccuracies[i] = IJavaSearchResultCollector.POTENTIAL_MATCH;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tdefault:\r", "-\t\t\t\t\t\taccuracies[i] = -1;\r", "+\t\t\t\tif (otherBinding == null) {\r", "+\t\t\t\t\taccuracies[i] = accuracy;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tint level = this.matchLevel(otherBinding);\r", "+\t\t\t\t\tswitch (level) {\r", "+\t\t\t\t\t\tcase ACCURATE_MATCH:\r", "+\t\t\t\t\t\t\taccuracies[i] = IJavaSearchResultCollector.EXACT_MATCH;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase INACCURATE_MATCH:\r", "+\t\t\t\t\t\t\taccuracies[i] = IJavaSearchResultCollector.POTENTIAL_MATCH;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\t\taccuracies[i] = -1;\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619db74af53e1f59bc092913246c71e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "fff49fd0bdbee760e61edee27f88554273119578", "commitAfterChange": "05c0ef920f8f629670a61fe160e2d7350d9d88d5", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public int getNextToken() throws InvalidInputException", "signatureAfterChange": "  public int getNextToken() throws InvalidInputException", "diff": ["+\tif (token == TokenNameCOLON_COLON) {", "+\t\tthis.scanningHeadOfReferenceExpression = false;", "+\t}", "-\t\t} else if (token == TokenNameLESS) {", "+\t\t} else if (token == TokenNameLESS && !this.scanningHeadOfReferenceExpression) {", "+\t\t\t\tthis.scanningHeadOfReferenceExpression = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6be7b0dbb3527d1f91c6e0c5e1120f07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ConditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \tpublic FlowInfo setReachMode(int reachMode)", "signatureAfterChange": "  public FlowInfo setReachMode(int reachMode)", "diff": ["+", "+public FlowInfo setReachMode(int reachMode) {", "+\tif (reachMode == REACHABLE) {", "+\t\tthis.tagBits &= ~UNREACHABLE;", "+\telse {", "+\t\tthis.tagBits |= UNREACHABLE;", "+\tinitsWhenTrue.setReachMode(reachMode);", "+\tinitsWhenFalse.setReachMode(reachMode);", "+\treturn this;", "+}", "-\tpublic FlowInfo setReachMode(int reachMode) {", "-\t\t", "-\t\tinitsWhenTrue.setReachMode(reachMode);", "-\t\tinitsWhenFalse.setReachMode(reachMode);", "-\t\treturn this;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a06d7185ee4512f384fb25aca964f2fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/StackMapFrame.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic StackMapFrame( \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint offset) throws ClassFormatException", "signatureAfterChange": " \tpublic StackMapFrame( \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint offset) throws ClassFormatException", "diff": ["-\t\t\t\tthis.readOffset = 1;", "+\t\t\t\tthis.readOffset = 3;", "-\t\t\t\tthis.locals = new IVerificationTypeInfo[tempLocals];", "-\t\t\t\tfor (int i = 0; i < tempLocals; i++) {", "-\t\t\t\t\tVerificationInfo verificationInfo = new VerificationInfo(classFileBytes, constantPool, offset + this.readOffset);", "-\t\t\t\t\tthis.locals[i] = verificationInfo;", "-\t\t\t\t\tthis.readOffset += verificationInfo.sizeInBytes();", "+\t\t\t\tif (tempLocals != 0) {", "+\t\t\t\t\tthis.locals = new IVerificationTypeInfo[tempLocals];", "+\t\t\t\t\tfor (int i = 0; i < tempLocals; i++) {", "+\t\t\t\t\t\tVerificationInfo verificationInfo = new VerificationInfo(classFileBytes, constantPool, offset + this.readOffset);", "+\t\t\t\t\t\tthis.locals[i] = verificationInfo;", "+\t\t\t\t\t\tthis.readOffset += verificationInfo.sizeInBytes();", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.locals = EMPTY_LOCALS_OR_STACK_ITEMS;", "-\t\t\t\tthis.stackItems = new IVerificationTypeInfo[tempStackItems];", "-\t\t\t\tfor (int i = 0; i < tempStackItems; i++) {", "-\t\t\t\t\tVerificationInfo verificationInfo = new VerificationInfo(classFileBytes, constantPool, offset + this.readOffset);", "-\t\t\t\t\tthis.stackItems[i] = verificationInfo;", "-\t\t\t\t\tthis.readOffset += verificationInfo.sizeInBytes();", "+\t\t\t\tif (tempStackItems != 0) {", "+\t\t\t\t\tthis.stackItems = new IVerificationTypeInfo[tempStackItems];", "+\t\t\t\t\tfor (int i = 0; i < tempStackItems; i++) {", "+\t\t\t\t\t\tVerificationInfo verificationInfo = new VerificationInfo(classFileBytes, constantPool, offset + this.readOffset);", "+\t\t\t\t\t\tthis.stackItems[i] = verificationInfo;", "+\t\t\t\t\t\tthis.readOffset += verificationInfo.sizeInBytes();", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.stackItems = EMPTY_LOCALS_OR_STACK_ITEMS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1924dd3e1dd700e8cb2b04d32038c50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/LexStream.java", "commitBeforeChange": "4c2900096a422605a0884d5ca39839064ce0c89a", "commitAfterChange": "e0956e75ff6cb3066016adc9dae90f9c1534dda4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate void readTokenFromScanner()", "signatureAfterChange": "  \tprivate void readTokenFromScanner()", "diff": ["+\t\t\t\tif (tokenKind == TokenNameBeginTypeArguments) {", "+\t\t\t\t\tthis.awaitingColonColon = true;", "+\t\t\t\t} else if (tokenKind == TokenNameCOLON_COLON) {", "+\t\t\t\t\tthis.awaitingColonColon = false;", "+\t\t\t\t}"]}], "num": 9451}
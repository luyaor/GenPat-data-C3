{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "986267baf4467cbc1b53870891822ff4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1274e93ee5de45bf02069ef42762c414", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "90b5d0d22a673acac5fa922f69ac563d54cf8a91", "commitAfterChange": "3ef9e96615da3a52fd8a4f5bccecbd03a8a0e20a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void addElement(IJavaElement element)", "signatureAfterChange": " protected void addElement(IJavaElement element)", "diff": ["+\t", "+\tfor (int i = 0; i < elementLength; i++) {", "+\t\tif (this.elements[i].equals(element)) {", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "138626fcd4529ca320aaae30e9671820", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "4d1b2a602aa63e2d641e31567150dab25a5e04f3", "commitAfterChange": "7935d7046a5948ba0caaa49b731ab944081ed079", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "signatureAfterChange": " \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "diff": ["-\t\tfor (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+\t\tint paramLength = typeParameters.length;", "+\t\tfor (int i = 0; i < paramLength; i++) {", "-\t\tnextVariable: for (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+\t\tnextVariable: for (int i = 0; i < paramLength; i++) {", "+\t\t// after bounds have been resolved we're ready for resolving the type parameter itself,", "+\t\t// which includes resolving/evaluating type annotations and checking for inconsistencies", "+\t\tfor (int i = 0; i < paramLength; i++)", "+\t\t\tresolveTypeParameter(typeParameters[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f039be1692148913d9b146b3d6584e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "e370ba439679a26bb04e9b77917c8e22a1b8aa06", "commitAfterChange": "90d481edc9060cc498a8f085b08186108312e37b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected boolean mustResolve()", "signatureAfterChange": " protected boolean mustResolve()", "diff": ["-\tif (parameterSimpleNames != null && parameterSimpleNames.length > 0) return true;", "+\tif (parameterSimpleNames != null)", "+\t\tfor (int i = 0, max = parameterSimpleNames.length; i < max; i++)", "+\t\t\tif (parameterQualifications[i] != null) return true;"]}], "num": 46381}
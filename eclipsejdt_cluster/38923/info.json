{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06ffd3d71781680f8e68d8eb1fbcf688", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02aaa5c0480ef09cd990948aa8410a7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocFieldReference.java", "commitBeforeChange": "eee151556fa5628da58c297d3e841df408f33c62", "commitAfterChange": "6c856a22e62c9ef98dcc7d4e8f62170ac88f630e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\tif (!fieldBinding.isValidBinding()) {", "+\t\t\t// implicit lookup may discover issues due to static/constructor contexts. javadoc must be resilient", "+\t\t\tswitch (fieldBinding.problemId()) {", "+\t\t\t\tcase ProblemReasons.NonStaticReferenceInConstructorInvocation:", "+\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext:", "+\t\t\t\tcase ProblemReasons.InheritedNameHidesEnclosingName : ", "+\t\t\t\t\tFieldBinding closestMatch = ((ProblemFieldBinding)fieldBinding).closestMatch;", "+\t\t\t\t\tif (closestMatch != null) {", "+\t\t\t\t\t\tfieldBinding = closestMatch; // ignore problem if can reach target field through it", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a3c7b5c44fd88973d74fff3fcbbd53d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "eee151556fa5628da58c297d3e841df408f33c62", "commitAfterChange": "6c856a22e62c9ef98dcc7d4e8f62170ac88f630e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\t\t// implicit lookup may discover issues due to static/constructor contexts. javadoc must be resilient", "+\t\t\tswitch (this.binding.problemId()) {", "+\t\t\t\tcase ProblemReasons.NonStaticReferenceInConstructorInvocation:", "+\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext:", "+\t\t\t\tcase ProblemReasons.InheritedNameHidesEnclosingName : ", "+\t\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)this.binding).closestMatch;", "+\t\t\t\t\tif (closestMatch != null) {", "+\t\t\t\t\t\tthis.binding = closestMatch; // ignore problem if can reach target method through it", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (!this.binding.isValidBinding()) {"]}], "num": 38923}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63bfc7d7083eef6f5b2d0e36295a70bc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "326410034747c14b5ba2bf86178a9dd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tprivate void saveSettings()", "signatureAfterChange": " \t \tprivate void saveSettings()", "diff": ["-\t\tMap<FactoryContainer, Boolean> containers;", "+\t\tList<FactoryPathEntry> containers;", "-\t\t\tcontainers = new LinkedHashMap<FactoryContainer, Boolean>();", "-\t\t\tint count = fFactoryPathList.getSize();", "-\t\t\tfor (int i = 0; i < count; ++i) {", "-\t\t\t\tFactoryContainer fc = (FactoryContainer)fFactoryPathList.getElement(i);", "-\t\t\t\tBoolean enabled = fFactoryPathList.isChecked(fc);", "-\t\t\t\tcontainers.put(fc, new Boolean(enabled));", "-\t\t\t}", "+\t\t\tcontainers = getListContents();", "+\t\tMap<FactoryContainer, FactoryPath.Attributes> map = FactoryPathEntry.pathMapFromList(containers);", "+\t\t", "-\t\t\tFactoryPath.setContainers(fJProj, containers);", "+\t\t\tFactoryPath fp = new FactoryPath();", "+\t\t\tfp.setContainers(map);", "+\t\t\tAptConfig.setFactoryPath(fJProj, fp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8368d4199f3b35cee842fabeb314ce2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "07500b3aefa58aecd5e846627b7c70382793f29f", "commitAfterChange": "641c18a6fa8d154329ae2bcdac1ab25ff8b18f71", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \t \tprivate BrokenClasspathBuildFailureResult brokenClasspathBuildFailureNotify( BrokenClasspathBuildFailureEvent event )", "signatureAfterChange": " \t \tpublic void aboutToBuild(IJavaProject project)", "diff": ["-\t", "-\tprivate BrokenClasspathBuildFailureResult brokenClasspathBuildFailureNotify( BrokenClasspathBuildFailureEvent event )", "-\t{", "-\t\ttry", "-\t\t{", "-\t\t\tIJavaProject jp = event.getJavaProject();", "-\t\t\tIProject p = jp.getProject();", "-\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( p );", "-\t\t\tIFolder folder = gfm.getGeneratedSourceFolder();", "-\t\t\t", "-\t\t\tfolder.refreshLocal( IResource.DEPTH_INFINITE, null );", "-\t\t\tIClasspathEntry classpathEntry = GeneratedFileManager.findProjectSourcePath( jp, folder );", "-\t\t\tif ( classpathEntry != null && !folder.exists() )", "-\t\t\t{", "-\t\t\t\t// the generated source folder is part of the classpath, but it doesn't exist on disk", "-\t\t\t\t// try to fix this by creating the generated source folder. ", "-\t\t\t\tGeneratedFileManager.removeFromProjectClasspath( jp, folder, null );", "-\t\t\t\tgfm.ensureGeneratedSourceFolder( null );", "-\t\t\t}", "-\t\t}", "-\t\tcatch ( CoreException ce )", "-\t\t{", "-\t\t\tAptPlugin.log( ce, \"Failure trying to fix catastrophic build failure\"); //$NON-NLS-1$", "-\t\t}", "-\t\t", "-\t\treturn new BrokenClasspathBuildFailureResult();", "-\t}", "+\t", "+\tpublic void aboutToBuild(IJavaProject project) {", "+\t\tif (!AptConfig.isEnabled(project)) {", "+\t\t\treturn;", "+\t\t// setup the classpath and make sure the generated source folder is on disk.", "+\t\tGeneratedFileManager manager = AptPlugin.getAptProject(project).getGeneratedFileManager();", "+\t\tmanager.compilationStarted();"]}], "num": 49925}
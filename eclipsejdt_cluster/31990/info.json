{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f725ac8cca7395cab6bf4187795d5c4c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14c48212de7800fa18125359e4f68f90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "2c4584c2d5b726b4cdc708e96ad6b04e53986107", "commitAfterChange": "107f362cb3526a7bf91d7e9a22a75cf0b6b560f8", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 258, "signatureBeforeChange": " public void unsafeWildcardInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method, TypeBinding[] arguments)", "signatureAfterChange": " public void unsafeWildcardInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method, TypeBinding[] arguments)", "diff": ["+\tTypeBinding offendingArgument = null;", "+\tTypeBinding offendingParameter = null;", "+\tfor (int i = 0, length = method.parameters.length; i < length; i++) {", "+\t\tTypeBinding parameter = method.parameters[i];", "+\t\tif (parameter.isWildcard() && (((WildcardBinding) parameter).kind != Wildcard.SUPER)) {", "+\t\t\toffendingParameter = parameter;", "+\t\t\toffendingArgument = arguments[i];", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\t", "+\t\t\t\tnew String(offendingArgument.readableName()),", "+\t\t\t\tnew String(offendingParameter.readableName()),", "+\t\t\t\tnew String(offendingArgument.shortReadableName()),", "+\t\t\t\tnew String(offendingParameter.shortReadableName()),", "+\t\t\t\tnew String(offendingArgument.readableName()),", "+\t\t\t\tnew String(offendingParameter.readableName()),", "+\t\t\t\tnew String(offendingArgument.shortReadableName()),", "+\t\t\t\tnew String(offendingParameter.shortReadableName()),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67c93f394e56f2fab0901a39f0fcbc84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "d9e2e2bfbd91f5590cc17d29dbb01112d1067957", "commitAfterChange": "e61f569dbc4aa27cac18a55212d084c74e736bfb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic int generateDelta(JavaElementDelta delta)", "signatureAfterChange": " \tpublic int generateDelta(JavaElementDelta delta)", "diff": ["+", "+\t\tstate.addForRefresh(this.project); // ensure external jars are refreshed for this project (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=212769 )", "+\t\t\t\t", "+\t\t\t\t// remember timestamp of jars that were removed (in case they are added as external jar in the same operation)", "+\t\t\t\tfor (int j = 0, length = pkgFragmentRoots.length; j < length; j++) {", "+\t\t\t\t\tIPackageFragmentRoot root = pkgFragmentRoots[j];", "+\t\t\t\t\tif (root.isArchive() && !root.isExternal()) {", "+\t\t\t\t\t\tURI location = root.getResource().getLocationURI();", "+\t\t\t\t\t\tFile file = null;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tIFileStore fileStore = EFS.getStore(location);", "+\t\t\t\t\t\t\tfile = fileStore.toLocalFile(EFS.NONE, null);", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t// continue", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (file == null)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tlong timeStamp = DeltaProcessor.getTimeStamp(file);", "+\t\t\t\t\t\tIPath externalPath = new org.eclipse.core.runtime.Path(file.getAbsolutePath());", "+\t\t\t\t\t\tstate.getExternalLibTimeStamps().put(externalPath, new Long(timeStamp));", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbe489187ce8c62bbb71abd48264dfe1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 232, "signatureBeforeChange": " public void typeMismatchErrorActualTypeExpectedType(Expression expression, TypeBinding constantType, TypeBinding expectedType)", "signatureAfterChange": " public void typeMismatchError(TypeBinding typeArgument, TypeVariableBinding typeParameter, ReferenceBinding genericType, ASTNode location)", "diff": ["+public void typeMismatchError(TypeBinding typeArgument, TypeVariableBinding typeParameter, ReferenceBinding genericType, ASTNode location) {", "+    if (location == null) { // binary case", "+\t\tthis.handle(", "+\t\t\tIProblem.TypeArgumentMismatch,", "+\t\t\tnew String[] { new String(typeArgument.readableName()), new String(genericType.readableName()), new String(typeParameter.sourceName), parameterBoundAsString(typeParameter, false) },", "+\t\t\tnew String[] { new String(typeArgument.shortReadableName()), new String(genericType.shortReadableName()), new String(typeParameter.sourceName), parameterBoundAsString(typeParameter, true) },", "+\t\t\tAbortCompilation | Error,", "+\t\t\t0,", "+\t\t\t1);", "+        return;", "+    }", "+\t\tIProblem.TypeArgumentMismatch,", "+\t\tnew String[] { new String(typeArgument.readableName()), new String(genericType.readableName()), new String(typeParameter.sourceName), parameterBoundAsString(typeParameter, false) },", "+\t\tnew String[] { new String(typeArgument.shortReadableName()), new String(genericType.shortReadableName()), new String(typeParameter.sourceName), parameterBoundAsString(typeParameter, true) },", "-public void typeMismatchErrorActualTypeExpectedType(Expression expression, TypeBinding constantType, TypeBinding expectedType) {", "-\tString constantTypeName = new String(constantType.readableName());", "-\tString expectedTypeName = new String(expectedType.readableName());", "-\tString constantTypeShortName = new String(constantType.shortReadableName());", "-\tString expectedTypeShortName = new String(expectedType.shortReadableName());", "-\tif (constantTypeShortName.equals(expectedTypeShortName)){", "-\t\tconstantTypeShortName = constantTypeName;", "-\t\texpectedTypeShortName = expectedTypeName;", "-\t}", "-\t\tnew String[] {constantTypeName, expectedTypeName},", "-\t\tnew String[] {constantTypeShortName, expectedTypeShortName},", "-\t\texpression.sourceStart,", "-\t\texpression.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdb840578f9c4ef0e4eaad95f8af9e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "commitAfterChange": "192820efad9191d4773fbd88aa6d8a5ea915ea14", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "diff": ["-\t\t\t\tinferenceContext.currentBounds.captures.put(gbeta, parameterizedType.capture(inferenceContext.scope, invocationSite.sourceEnd())); // established: both types have nonnull arguments", "+\t\t\t\tinferenceContext.currentBounds.captures.put(gbeta, parameterizedType); // established: both types have nonnull arguments", "+\t\t\t\tif (InferenceContext18.SHOULD_WORKAROUND_BUG_JDK_8054721) {", "+\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length;i++) {", "+\t\t\t\t\t\tif (arguments[i].isWildcard() && arguments[i].isProperType(true)) {", "+\t\t\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) arguments[i];", "+\t\t\t\t\t\t\tSourceTypeBinding contextType = inferenceContext.scope.enclosingSourceType();", "+\t\t\t\t\t\t\tint position = invocationSite.sourceEnd();", "+\t\t\t\t\t\t\tCompilationUnitScope compilationUnitScope = inferenceContext.scope.compilationUnitScope();", "+\t\t\t\t\t\t\tASTNode cud = compilationUnitScope.referenceContext;", "+\t\t\t\t\t\t\tfinal int captureID = compilationUnitScope.nextCaptureID();", "+\t\t\t\t\t\t\tCaptureBinding capture = inferenceContext.environment.createCapturedWildcard(wildcard, contextType, position, cud, captureID);", "+\t\t\t\t\t\t\tinferenceContext.currentBounds.addBound(new TypeBound(betas[i], capture, SAME), inferenceContext.environment);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 31990}
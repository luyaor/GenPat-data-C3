{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4023f7d4fe662c132dde520580060f94", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af9aa40e935554800a45bcbb835df35c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t\t\tif (this.javadocParser.checkDeprecation(", "-\t\t\t\t\tthis.scanner.commentStarts[lastComment],", "-\t\t\t\t\tthis.scanner.commentStops[lastComment] - 1)) { //stop is one over,", "+\t\t\tint commentEnd = this.scanner.commentStops[lastComment] - 1; //stop is one over,", "+\t\t\t// do not report problem before last parsed comment while recovering code...", "+\t\t\tthis.javadocParser.reportProblems = this.currentElement == null || commentEnd > this.lastJavadocEnd;", "+\t\t\tif (this.javadocParser.checkDeprecation(this.scanner.commentStarts[lastComment], commentEnd)) {", "-\t\t\tthis.javadoc = this.javadocParser.docComment;\t// null if check javadoc is not activated ", "+\t\t\tthis.javadoc = this.javadocParser.docComment;\t// null if check javadoc is not activated", "+\t\t\tif (currentElement == null) this.lastJavadocEnd = commentEnd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d90a9a8e8c15f3242406277279023a92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void checkComment()", "signatureAfterChange": "  public void checkComment()", "diff": ["-\t\t\tif (this.javadocParser.checkDeprecation(", "-\t\t\t\t\tthis.scanner.commentStarts[lastComment],", "-\t\t\t\t\tthis.scanner.commentStops[lastComment] - 1)) { //stop is one over,", "+\t\t\tint commentEnd = this.scanner.commentStops[lastComment] - 1; //stop is one over,", "+\t\t\t// do not report problem before last parsed comment while recovering code...", "+\t\t\tthis.javadocParser.reportProblems = this.currentElement == null || commentEnd > this.lastJavadocEnd;", "+\t\t\tif (this.javadocParser.checkDeprecation(this.scanner.commentStarts[lastComment], commentEnd)) {", "-\t\t\tthis.javadoc = this.javadocParser.docComment;\t// null if check javadoc is not activated ", "+\t\t\tthis.javadoc = this.javadocParser.docComment;\t// null if check javadoc is not activated", "+\t\t\tif (currentElement == null) this.lastJavadocEnd = commentEnd;", "-\t\tTypeReference[] thrownExceptions = this.javadoc.thrownExceptions;", "+\t\tTypeReference[] thrownExceptions = this.javadoc.exceptionReferences;", "-\t\tExpression[] references = this.javadoc.references;", "+\t\tExpression[] references = this.javadoc.seeReferences;"]}], "num": 31702}
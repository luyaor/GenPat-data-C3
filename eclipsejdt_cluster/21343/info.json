{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "373f1abcb3a9c4b9a8206f1982d7f451", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84f7ebc0c6f6bb9fcafc808caf269f64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateOptimizedGreaterThanOrEqual( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateOptimizedGreaterThanOrEqual(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateOptimizedGreaterThanOrEqual(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tBranchLabel trueLabel,", "-\t\tBranchLabel falseLabel,", "-\t\tboolean valueRequired) {", "-", "-\t\tint promotedTypeID = (left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4;", "-\t\t// both sides got promoted in the same way", "-\t\tif (promotedTypeID == T_int) {", "-\t\t\t// 0 >= x", "-\t\t\tif ((left.constant != Constant.NotAConstant) && (left.constant.intValue() == 0)) {", "-\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\t// implicitly falling through the FALSE case", "-\t\t\t\t\t\t\tcodeStream.ifle(trueLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\t\t// implicitly falling through the TRUE case", "-\t\t\t\t\t\t\tcodeStream.ifgt(falseLabel);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t\t}", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\treturn;", "-\t\t\t// x >= 0", "-\t\t\tif ((right.constant != Constant.NotAConstant) && (right.constant.intValue() == 0)) {", "-\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\t// implicitly falling through the FALSE case", "-\t\t\t\t\t\t\tcodeStream.ifge(trueLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\t\t// implicitly falling through the TRUE case", "-\t\t\t\t\t\t\tcodeStream.iflt(falseLabel);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t// default comparison", "-\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\tif (valueRequired) {", "-\t\t\tif (falseLabel == null) {", "-\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\tswitch (promotedTypeID) {", "-\t\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t\tcodeStream.if_icmpge(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\t\tcodeStream.fcmpl();", "-\t\t\t\t\t\t\tcodeStream.ifge(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\tcodeStream.lcmp();", "-\t\t\t\t\t\t\tcodeStream.ifge(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\tcodeStream.dcmpl();", "-\t\t\t\t\t\t\tcodeStream.ifge(trueLabel);", "-\t\t\t\t\t// reposition the endPC", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tswitch (promotedTypeID) {", "-\t\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t\tcodeStream.if_icmplt(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\t\tcodeStream.fcmpl();", "-\t\t\t\t\t\t\tcodeStream.iflt(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\tcodeStream.lcmp();", "-\t\t\t\t\t\t\tcodeStream.iflt(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\tcodeStream.dcmpl();", "-\t\t\t\t\t\t\tcodeStream.iflt(falseLabel);", "-\t\t\t\t\t}", "-\t\t\t\t\t// reposition the endPC", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\t\treturn;", "-\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+ */", "+public void generateOptimizedGreaterThanOrEqual(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {", "+\tint promotedTypeID = (this.left.implicitConversion & TypeIds.IMPLICIT_CONVERSION_MASK) >> 4;", "+\t// both sides got promoted in the same way", "+\tif (promotedTypeID == TypeIds.T_int) {", "+\t\t// 0 >= x", "+\t\tif ((this.left.constant != Constant.NotAConstant) && (this.left.constant.intValue() == 0)) {", "+\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t// implicitly falling through the FALSE case", "+\t\t\t\t\t\tcodeStream.ifle(trueLabel);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\t// implicitly falling through the TRUE case", "+\t\t\t\t\t\tcodeStream.ifgt(falseLabel);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// reposition the endPC", "+\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\treturn;", "+\t\t}", "+\t\t// x >= 0", "+\t\tif ((this.right.constant != Constant.NotAConstant) && (this.right.constant.intValue() == 0)) {", "+\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t// implicitly falling through the FALSE case", "+\t\t\t\t\t\tcodeStream.ifge(trueLabel);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\t// implicitly falling through the TRUE case", "+\t\t\t\t\t\tcodeStream.iflt(falseLabel);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// reposition the endPC", "+\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t// default comparison", "+\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\tif (valueRequired) {", "+\t\tif (falseLabel == null) {", "+\t\t\tif (trueLabel != null) {", "+\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\tswitch (promotedTypeID) {", "+\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\tcodeStream.if_icmpge(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\tcodeStream.fcmpl();", "+\t\t\t\t\t\tcodeStream.ifge(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\tcodeStream.lcmp();", "+\t\t\t\t\t\tcodeStream.ifge(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\tcodeStream.dcmpl();", "+\t\t\t\t\t\tcodeStream.ifge(trueLabel);", "+\t\t\t\t}", "+\t\t\t\t// reposition the endPC", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (trueLabel == null) {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tswitch (promotedTypeID) {", "+\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\tcodeStream.if_icmplt(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\tcodeStream.fcmpl();", "+\t\t\t\t\t\tcodeStream.iflt(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\tcodeStream.lcmp();", "+\t\t\t\t\t\tcodeStream.iflt(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\tcodeStream.dcmpl();", "+\t\t\t\t\t\tcodeStream.iflt(falseLabel);", "+\t\t\t\t}", "+\t\t\t\t// reposition the endPC", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\t\treturn;", "+\t\t\t} else {", "+\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t}", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a56a007a3bc50fb47b85c56a0cc86dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tMethodScope initializationScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tMethodScope initializationScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif (binding != null", "-\t\t\t&& binding.isValidBinding()", "-\t\t\t&& binding.isStatic()", "-\t\t\t&& binding.constant == NotAConstant", "-\t\t\t&& binding.declaringClass.isNestedType()", "-\t\t\t&& binding.declaringClass.isClass()", "-\t\t\t&& !binding.declaringClass.isStatic()) {", "+\t\tif (this.binding != null", "+\t\t\t&& this.binding.isValidBinding()", "+\t\t\t&& this.binding.isStatic()", "+\t\t\t&& this.binding.constant == NotAConstant", "+\t\t\t&& this.binding.declaringClass.isNestedType()", "+\t\t\t&& this.binding.declaringClass.isClass()", "+\t\t\t&& !this.binding.declaringClass.isStatic()) {", "-\t\t\t\t(SourceTypeBinding) binding.declaringClass,", "+\t\t\t\t(SourceTypeBinding) this.binding.declaringClass,", "-\t\tif (initialization != null) {", "+\t\tif (this.initialization != null) {", "-\t\t\t\tinitialization", "+\t\t\t\tthis.initialization", "-\t\t\tflowInfo.markAsDefinitelyAssigned(binding);", "+\t\t\tflowInfo.markAsDefinitelyAssigned(this.binding);"]}], "num": 21343}
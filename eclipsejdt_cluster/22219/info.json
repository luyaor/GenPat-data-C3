{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4cdcb7d19a35e2b01827169e8c1c2d6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "604f8ab9eb1e83fb9a81a64fcddbb080", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3ec169b44d3736817b7c4ce9bf1791fcda57b692", "commitAfterChange": "4a83e27deea774790864c829cd5109d435b50edd", "methodNumberBeforeChange": 325, "methodNumberAfterChange": 325, "signatureBeforeChange": " \tpublic void _test323()", "signatureAfterChange": " \tpublic void test323()", "diff": ["-\t// TODO (philippe) reenable when addressed", "-\tpublic void _test323() {", "-\t\tthis.runConformTest(", "+\t// 76359 - also check warnings for raw conversion", "+\tpublic void test323() {", "+\t\tthis.runNegativeTest(", "-\t\t\t\t\"\tG<String>.Member x = new G().new Member();\\n\" + ", "-\t\t\t\t\"  Zork z;\\n\" +", "-\t\t\t\t\"}\\n\"\t\t\t", "+\t\t\t\t\"\tG<String>.Member gsm = g.new Member();\\n\" + ", "+\t\t\t\t\"\tG.Member gm = null;\\n\" + ", "+\t\t\t\t\"\tG<Thread>.Member gtm = gm;\\n\" + ", "+\t\t\t\t\"\tZork z;\\n\" +", "+\t\t\t\t\"}\\n\"\t\t", "-\t\t\t\"\");\t", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tG<String> g = new G();\\n\" + ", "+\t\t\t\"\t              ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type G is converted to G<String>. References to generic type G<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tG<Thread>.Member gtm = gm;\\n\" + ", "+\t\t\t\"\t                       ^^\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type G.Member is converted to G<Thread>.Member. References to generic type G<T>.Member should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62d0f409faaf20558ee410e93b79f19b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "66655f5e1f98e14cb994324b511a6633d4950147", "commitAfterChange": "05ac7a532e5c7862447e6e0fc351f30875c4dd96", "methodNumberBeforeChange": 310, "methodNumberAfterChange": 310, "signatureBeforeChange": " \tpublic void test0306()", "signatureAfterChange": " \tpublic void test0306()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "+\t\t\t\t\"  \tstatic int CONSTANT = 1;\\n\" + ", "+\t\t\t\t\"  \tpublic int foo2(T t) { return T.CONSTANT; }\\n\" + // why is this allowed?", "-\t\t\t\"\");\t", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tprivate static class M { private static int j = 2; }\\n\" + ", "+\t\t\t\"\t                     ^\\n\" + ", "+\t\t\t\"The type X<T>.M is never used locally\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tprivate static class M { private static int j = 2; }\\n\" + ", "+\t\t\t\"\t                                            ^\\n\" + ", "+\t\t\t\"The field X<T>.M.j is never read locally\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic int foo(T t) { return t.i + t.i() + T.M.j; }\\n\" + ", "+\t\t\t\"\t                                           ^^^\\n\" + ", "+\t\t\t\"T.M cannot be resolved\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// 5: cannot select from a type variable", "+\t\t\t// 5: operator + cannot be applied to int,<any>.j", "+\t\t\t// 5: incompatible type, found : <nulltype>, required: int", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95ce4c15c88442d91ba2a3538cf83c33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "commitAfterChange": "cf0fc1d100d6a0dfa353e3125744fa10a50c8d3b", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 125, "signatureBeforeChange": " public void testDefault01b()", "signatureAfterChange": " public void testDefault01b()", "diff": ["-// apply null default to type arguments - no effect on type variable or wildcard:", "+// apply null default to type arguments - no effect on type variable or wildcard, but apply strict checking assuming nothing", "-\trunConformTestWithLibs(", "+\trunNegativeTestWithLibs(", "-\t\t\t\"\t\tin.add(null); // OK\\n\" +", "-\t\t\t\"\t\treturn new ArrayList<@Nullable T>();\\n\" + // TODO: unannotated type variable should be regarded as 'could be either'", "+\t\t\t\"\t\tin.add(null); // NOK, cannot assume nullable\\n\" +", "+\t\t\t\"\t\tneedNN(in.get(0)); // NOK, cannot assume nonnull\\n\" +", "+\t\t\t\"\t\treturn new ArrayList<@Nullable T>(); // NOK, cannot assume nullable for T in List<T>\\n\" +", "+\t\t\t\"\tvoid needNN(@NonNull Number n) {}\\n\" +", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tin.add(null); // NOK, cannot assume nullable\\n\" + ", "+\t\t\"\t       ^^^^\\n\" + ", "+\t\t\"Null type mismatch (type annotations): \\'null\\' is not compatible to the free type variable '? extends Number'\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tneedNN(in.get(0)); // NOK, cannot assume nonnull\\n\" + ", "+\t\t\"\t       ^^^^^^^^^\\n\" + ", "+\t\t\"Null type safety (type annotations): The expression of type \\'capture#of ? extends Number\\' needs unchecked conversion to conform to \\'@NonNull Number\\'\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\treturn new ArrayList<@Nullable T>(); // NOK, cannot assume nullable for T in List<T>\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Null type mismatch (type annotations): required \\'List<T>\\' but this expression has type \\'ArrayList<@Nullable T>\\', corresponding supertype is \\'List<@Nullable T>\\'\\n\" + ", "+\t\t\"----------\\n\");"]}], "num": 22219}
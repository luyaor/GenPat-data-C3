{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e705427bcbf1bbd51c7211f08e30034", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13fdd3092036211e3ccabb8b0d8ac36f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\tfinal char classOrInterface;", "+\t\tfinal char typeSuffix;", "-\t\t\t\tclassOrInterface = IIndexConstants.CLASS_SUFFIX;", "+\t\t\t\ttypeSuffix = IIndexConstants.CLASS_SUFFIX;", "-\t\t\t\tclassOrInterface = IIndexConstants.INTERFACE_SUFFIX;", "+\t\t\t\ttypeSuffix = IIndexConstants.INTERFACE_SUFFIX;", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaSearchConstants.ENUM :", "+\t\t\t\ttypeSuffix = IIndexConstants.ENUM_SUFFIX;", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaSearchConstants.ANNOTATION_TYPE :", "+\t\t\t\ttypeSuffix = IIndexConstants.ANNOTATION_TYPE_SUFFIX;", "-\t\t\t\tclassOrInterface = IIndexConstants.TYPE_SUFFIX;", "+\t\t\t\ttypeSuffix = IIndexConstants.TYPE_SUFFIX;", "-\t\t\tclassOrInterface,", "+\t\t\ttypeSuffix,", "-\t\t\t\t\tboolean isClass = record.classOrInterface != IIndexConstants.INTERFACE_SUFFIX;", "-\t\t\t\t\tif (isClass) {", "-\t\t\t\t\t\tnameRequestor.acceptClass(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath);", "-\t\t\t\t\t} else {", "+\t\t\t\t\tswitch (record.typeSuffix) {", "+\t\t\t\t\t\tcase IIndexConstants.CLASS_SUFFIX :", "+\t\t\t\t\t\t\tnameRequestor.acceptClass(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IIndexConstants.INTERFACE_SUFFIX :", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IIndexConstants.ENUM_SUFFIX :", "+\t\t\t\t\t\t\t// TODO (frederic) need support", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IIndexConstants.ANNOTATION_TYPE_SUFFIX :", "+\t\t\t\t\t\t\t// TODO (frederic) need support", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchRule, type.isClass(), packageDeclaration, simpleName)) {", "-\t\t\t\t\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path);", "+\t\t\t\t\t\t\tint kind;", "+\t\t\t\t\t\t\tif (type.isClass()) {", "+\t\t\t\t\t\t\t\tkind = IGenericType.CLASS;", "+\t\t\t\t\t\t\t} else if (type.isInterface()) {", "+\t\t\t\t\t\t\t\tkind = IGenericType.INTERFACE;", "+\t\t\t\t\t\t\t} else if (type.isEnum()) {", "+\t\t\t\t\t\t\t\tkind = IGenericType.ENUM;", "+\t\t\t\t\t\t\t} else /*if (type.isAnnotation())*/ {", "+\t\t\t\t\t\t\t\tkind = IGenericType.ANNOTATION_TYPE;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, kind, packageDeclaration, simpleName)) {", "+\t\t\t\t\t\t\t\tswitch(kind) {", "+\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "+\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "+\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchRule, !typeDeclaration.isInterface(), packageDeclaration, typeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\t\tif (!typeDeclaration.isInterface()) {", "-\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, typeDeclaration.getKind(), packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\t\tswitch(typeDeclaration.getKind()) {", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "+\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "+\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "+\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "+\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchRule, !memberTypeDeclaration.isInterface(), packageDeclaration, memberTypeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, memberTypeDeclaration.getKind(), packageDeclaration, memberTypeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\t\tif (!memberTypeDeclaration.isInterface()) {", "-\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\tswitch(memberTypeDeclaration.getKind()) {", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "+\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "+\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "+\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "+\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b81028977483703fdad14fd3f081f1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "83e7ec555369f29d4b78a3a829caf1776dce39db", "commitAfterChange": "e965722f47023ae407b487744865b93f56cfe7d1", "methodNumberBeforeChange": 295, "methodNumberAfterChange": 295, "signatureBeforeChange": "  public void newArray(TypeReference typeReference, ArrayBinding arrayBinding)", "signatureAfterChange": "  public void newArray(TypeReference typeReference, Annotation[][] annotationsOnDimensions, ArrayBinding arrayBinding)", "diff": ["-", "-public void newArray(TypeReference typeReference, ArrayBinding arrayBinding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbd26ac5ce0da001fe6011967976e26e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "0f615671129895691d95f4bc3be292ee347de06e", "commitAfterChange": "cf5a3482900813b28764efd17a11c98c49b36dd5", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " private boolean isProvablyDistinctTypeArgument(TypeBinding otherArgument, final ParameterizedTypeBinding paramType, final int rank)", "signatureAfterChange": " private boolean isProvablyDistinctTypeArgument(TypeBinding otherArgument, final ParameterizedTypeBinding paramType, final int rank)", "diff": ["-\t\t\t\tlowerBound1 = capture.lowerBound;", "-\t\t\t\tif (lowerBound1 == null) {", "-\t\t\t\t\tif (capture.firstBound == null)", "+\t\t\t\tswitch (capture.wildcard.boundKind) {", "+\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\tupperBound1 = capture.wildcard.bound;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\tlowerBound1 = capture.wildcard.bound;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\t\tupperBound1 = capture.firstBound;", "-\t\t\t\tlowerBound2 = otherCapture.lowerBound;", "-\t\t\t\tif (lowerBound2 == null) {", "-\t\t\t\t\tif (otherCapture.firstBound == null)", "+\t\t\t\tswitch (otherCapture.wildcard.boundKind) {", "+\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\tupperBound2 = otherCapture.wildcard.bound;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\tlowerBound2 = otherCapture.wildcard.bound;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\t\tupperBound2 = otherCapture.firstBound;", "+\t\t\tif (lowerBound1.isTypeVariable() || upperBound2.isTypeVariable()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (lowerBound1.isTypeVariable() || otherArgument.isTypeVariable()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (lowerBound2.isTypeVariable() || this.isTypeVariable()) {", "+\t\t\t\treturn false;", "+\t\t\t}"]}], "num": 62111}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8defacb3d684a701614fd6f7f5533856", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "160a50c00699fe0c456b53626feb30bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "a0e1c3dcf228c336c502d98a3bf45af3be67e4df", "commitAfterChange": "d644fbac5b6fa9c32824a6e9c1731fdea560370f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\tboolean hasGenericError = false;", "-\t\tReferenceBinding currentType;", "+\t\tTypeBinding type = internalResolveLeafType(scope, enclosingType, checkBounds);", "+\t\t// handle three different outcomes:", "+\t\tif (type == null) {", "+\t\t\tthis.resolvedType = createArrayType(scope, this.resolvedType);", "+\t\t\treturn null;\t\t\t\t\t\t\t// no useful type, but still captured dimensions into this.resolvedType", "+\t\t} else {", "+\t\t\ttype = createArrayType(scope, type);", "+\t\t\tif (!this.resolvedType.isValidBinding())", "+\t\t\t\treturn type;\t\t\t\t\t\t// found some error, but could recover useful type (like closestMatch)", "+\t\t\telse ", "+\t\t\t\treturn this.resolvedType = type; \t// no complaint, keep fully resolved type (incl. dimensions)", "+\t\t}", "+\t}", "-\t\t\t\thasGenericError = true;", "-\t\t\t\thasGenericError = true;", "-\t\t\t\t// array type ?", "-\t\t\t\tTypeBinding type = currentType;", "-\t\t\t\tif (this.dimensions > 0) {", "-\t\t\t\t\tif (this.dimensions > 255)", "-\t\t\t\t\t\tscope.problemReporter().tooManyDimensions(this);", "-\t\t\t\t\ttype = scope.createArrayType(type, this.dimensions);", "-\t\t\t\t}", "-\t\t\t\tif (hasGenericError)", "-\t\t\t\t\treturn type;", "-\t\t\t\treturn this.resolvedType = type;", "-\t\tTypeBinding type = parameterizedType;", "-\t\t// array type ?", "-\t\t\ttype = scope.createArrayType(type, this.dimensions);", "-\t\tif (hasGenericError) {", "-\t\t\treturn type;", "-\t\t}", "-\t\treturn this.resolvedType = type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89d31ba19169c0f6b84d2d042849cd1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "442cfec5b0ec5f78f613dac66413d02e26889f22", "commitAfterChange": "d42d74dc89c043581d93318957eb6b633b137649", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t */", "-\tpublic final boolean checkCastTypesCompatibility(", "-\t\tBlockScope scope,", "-\t\tTypeBinding castType,", "-\t\tTypeBinding expressionType) {", "-\t", "-\t\t// see specifications 5.5", "-\t\t// handle errors and process constant when needed", "-\t", "-\t\t// if either one of the type is null ==>", "-\t\t// some error has been already reported some where ==>", "-\t\t// we then do not report an obvious-cascade-error.", "-\t", "-\t\tif (castType == null || expressionType == null) return true;", "-\t", "-\t\t// identity conversion cannot be performed upfront, due to side-effects", "-\t\t// like constant propagation", "-\t\t\t\t", "-\t\tif (castType.isBaseType()) {", "-\t\t\tif (expressionType.isBaseType()) {", "-\t\t\t\tif (expressionType == castType) {", "-\t\t\t\t\tconstant = expression.constant; //use the same constant", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tboolean necessary = false;", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)", "-\t\t\t\t\t\t|| (necessary = BaseTypeBinding.isNarrowing(castType.id, expressionType.id))) {", "-\t\t\t\t\texpression.implicitConversion = (castType.id << 4) + expressionType.id;", "-\t\t\t\t\tif (expression.constant != Constant.NotAConstant) {", "-\t\t\t\t\t\tconstant = expression.constant.castTo(expression.implicitConversion);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn necessary;", "-\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\t//-----------cast to something which is NOT a base type--------------------------\t", "-\t\tif (expressionType == NullBinding) {", "-\t\t\t//\tif (castType.isArrayType()){ // 26903 - need checkcast when casting null to array type", "-\t\t\t//\t\tneedRuntimeCheckcast = true;", "-\t\t\t//\t}", "-\t\t\treturn false; //null is compatible with every thing", "-\t\t}", "-\t\tif (expressionType.isBaseType()) {", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\tif (expressionType.isArrayType()) {", "-\t\t\tif (castType == expressionType) return false; // identity conversion", "-\t", "-\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t//------- (castType.isArray) expressionType.isArray -----------", "-\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType();", "-\t\t\t\tif (exprElementType.isBaseType()) {", "-\t\t\t\t\t// <---stop the recursion------- ", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType() == exprElementType) {", "-\t\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\t// recursively on the elements...", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(),", "-\t\t\t\t\texprElementType);", "-\t\t\t} else if (", "-\t\t\t\tcastType.isClass()) {", "-\t\t\t\t//------(castType.isClass) expressionType.isArray ---------------\t", "-\t\t\t\tif (castType.id == T_Object) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t} else { //------- (castType.isInterface) expressionType.isArray -----------", "-\t\t\t\tif (castType.id == T_JavaLangCloneable || castType.id == T_JavaIoSerializable) {", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\tif (expressionType.isClass()) {", "-\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t// ---- (castType.isArray) expressionType.isClass -------", "-\t\t\t\tif (expressionType.id == T_Object) { // potential runtime error", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)){ // no runtime error", "-\t\t\t\t\tif (castType.id == T_String) constant = expression.constant; // (String) cst is still a constant", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t// potential runtime  error", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "-\t\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} else { // ----- (castType.isInterface) expressionType.isClass -------  ", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)) {", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (!((ReferenceBinding) expressionType).isFinal()) {", "-\t\t\t\t\t// a subclass may implement the interface ==> no check at compile time", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "-\t\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;\t\t\t\t    ", "-\t\t\t\t}", "-\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "-\t\t\t}", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\t//\tif (expressionType.isInterface()) { cannot be anything else", "-\t\tif (castType.isArrayType()) {", "-\t\t\t// ----- (castType.isArray) expressionType.isInterface ------", "-\t\t\tif (expressionType.id == T_JavaLangCloneable", "-\t\t\t\t\t|| expressionType.id == T_JavaIoSerializable) {// potential runtime error", "-\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t} else {", "-\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "-\t\t\tif (castType.id == T_Object) { // no runtime error", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "-\t\t\t\t// no subclass for castType, thus compile-time check is valid", "-\t\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t// potential runtime error", "-\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else { // ----- (castType.isInterface) expressionType.isInterface -------", "-\t\t\tif (expressionType.isCompatibleWith(castType)) {", "-\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn false; ", "-\t\t\t}", "-\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "-\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tMethodBinding[] castTypeMethods = ((ReferenceBinding) castType).methods();", "-\t\t\t\tMethodBinding[] expressionTypeMethods =", "-\t\t\t\t\t((ReferenceBinding) expressionType).methods();", "-\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "-\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "-\t\t\t\t\t\t\t\t&& (CharOperation.equals(castTypeMethods[i].selector, expressionTypeMethods[j].selector))", "-\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "-\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\treturn true;", "+\t", "+\tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing) {", "+\t\tif (match == castType) {", "+\t\t\tif (!isNarrowing) tagAsUnnecessaryCast(scope, castType);", "+\t\t\treturn true;", "+\t\t}", "+\t\tif (castType.isBoundParameterizedType() || castType.isGenericType()) {", "+\t\t\tif (match.isProvablyDistinctFrom(isNarrowing ? expressionType : castType)) {", "+\t\t\t\treportIllegalCast(scope, castType, expressionType);", "+\t\t\t\treturn false; ", "+\t\t\t}", "+\t\t\tif (isNarrowing ? !expressionType.isEquivalentTo(match) : !match.isEquivalentTo(castType)) {", "+\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tif ((castType.tagBits & TagBits.HasWildcard) == 0) {", "+\t\t\t\tif ((!match.isParameterizedType() && !match.isGenericType())", "+\t\t\t\t\t\t|| expressionType.isRawType()) {", "+\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (!isNarrowing) tagAsUnnecessaryCast(scope, castType);", "+\t\treturn true;", "+\t}\t"]}], "num": 56104}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0093e7adc713fbfd9115fa664a5deac7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7035a8142dff33b249510d6236eca5a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "ad94e7c70968c32bc14232e983e71554b9e4e876", "commitAfterChange": "2a5005d0f0faf2e32a9545440516f869ce34bcdd", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "diff": ["-\t\tboolean needEnclosingInstanceNullCheck = currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\tboolean complyTo14 = currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_4;", "-\t\t\t\tif (needEnclosingInstanceNullCheck){", "+\t\t\t\tif (complyTo14){", "+\t\t\t\t// TODO (philippe) should have sender specify how to select enclosing instance 1.3/1.4 flavor ", "-\t\t\t\t\ttargetType.isAnonymousType());", "+\t\t\t\t\tcomplyTo14", "+\t\t\t\t\t\t? (invocationSite instanceof AllocationExpression ", "+\t\t\t\t\t\t\t|| (invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess()))", "+\t\t\t\t\t\t: invocationSite instanceof AllocationExpression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a14796642f16859fa3d91c7b985640b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "fd1845946d4d8575e4c790fb4a5ff99a2565c284", "commitAfterChange": "1b20dcfe1f475fdfa6c1b5a9779be9cb96d6bf35", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["+\t\t\tboolean inheritedHasPrecedence = compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "-\t\t\t\t\t\t\t\t\tif (sourceType == memberType.enclosingType() || compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\t\t\t\tif (sourceType == memberType.enclosingType() || inheritedHasPrecedence) {", "-\t\t\t\t\t\t\t\t\t\t// OR in 1.4 mode (inherited shadows enclosing)", "-\t\t\t\t\t\t\t\t\t\tif (foundType == null)", "+\t\t\t\t\t\t\t\t\t\t// OR in 1.4 mode (inherited visible shadows enclosing)", "+\t\t\t\t\t\t\t\t\t\tif (foundType == null || (inheritedHasPrecedence && foundType.problemId() == ProblemReasons.NotVisible))"]}], "num": 18459}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6f003b41aa6fee5a7d7c2e5fffc78e9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a240f6233d1ac7c4507773d020c7cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected void assertSourceEquals(String message, String expected, String actual)", "signatureAfterChange": " protected void assertSourceEquals(String message, String expected, String actual)", "diff": ["-\t\tif (IGNORE_WHITESPACES) {", "-\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "-\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "-\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\treturn;", "+\t\tif (COMPARE) {", "+\t\t\tString trimmedExpected;", "+\t\t\tString trimmedActual;", "+\t\t\tswitch (IGNORE_SPACES) {", "+\t\t\t\tcase ALL_SPACES:", "+\t\t\t\t\ttrimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "+\t\t\t\t\ttrimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase LINES_LEADING_SPACES:", "+\t\t\t\t\ttrimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);", "+\t\t\t\t\ttrimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\ttrimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "+\t\t\t\t\ttrimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\ttrimmedExpected = filterFormattingInComments(expected);", "+\t\t\t\t\ttrimmedActual= filterFormattingInComments(actual);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\t} else if (IGNORE_LINES_LEADING_WHITESPACES) {", "-\t\t\tString trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);", "-\t\t\tString trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);", "-\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "-\t\t\t\treturn;", "+\t\t\tif (DEBUG_TESTS && ASSERT_EQUALS_STRINGS) {", "+\t\t\t\tassertEquals(message, trimmedExpected, trimmedActual);", "-\t\tif (isExpectedFailure()) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "836d6b471dffdf7966db6ba08d9ce9e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "471b30fcd9175fdd69611c88984722b9e0b5e4ee", "commitAfterChange": "1a356ccfb3b5b00256393a405276ebc654766b8b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected void assertSourceEquals(String message, String expected, String actual)", "signatureAfterChange": " protected void assertSourceEquals(String message, String expected, String actual)", "diff": ["-\tif (ASSERT_EQUALS_STRINGS) {", "-\t\ttry {", "+\ttry {", "+\t\tif (ASSERT_EQUALS_STRINGS) {", "+\t\t} else {", "+\t\t\tassertTrue(message, actual.equals(expected));", "-\t\tcatch (ComparisonFailure cf) {", "-\t\t\tif (IGNORE_WHITESPACES) {", "-\t\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "-\t\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "-\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\t\tthis.spaceFailures++;", "-\t\t\t\t\tSystem.out.println(\"n\ufffd\"+this.spaceFailures+\": Different spaces than old formatter for \"+this.file.getName());", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t} else if (IGNORE_LINES_LEADING_WHITESPACES) {", "-\t\t\t\tString trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);", "-\t\t\t\tString trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);", "-\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\t\tthis.spaceFailures++;", "-\t\t\t\t\tSystem.out.println(\"n\ufffd\"+this.spaceFailures+\": Different line leading spaces than old formatter for \"+this.file.getName());", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "+\t}", "+\tcatch (ComparisonFailure cf) {", "+\t\tif (IGNORE_WHITESPACES) {", "+\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "+\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "+\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\treturn;", "-\t\t\tthis.failures++;", "-\t\t\tASSERT_EQUALS_STRINGS = this.failures < MAX_FAILURES;", "-\t\t\tthrow cf;", "+\t\t} else if (IGNORE_LINES_LEADING_WHITESPACES) {", "+\t\t\tString trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);", "+\t\t\tString trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);", "+\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "+\t\t\t\treturn;", "+\t\t\t}", "-\t} else {", "-\t\tassertTrue(message, actual.equals(expected));", "+\t\tthis.failures++;", "+\t\tASSERT_EQUALS_STRINGS = this.failures < MAX_FAILURES;", "+\t\tthrow cf;", "+\t}", "+\tcatch (AssertionFailedError afe) {", "+\t\tthis.failures++;", "+\t\tthrow afe;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a92b86a808cadd8765b061e47020e999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "dbb21f9a082cc8b4fc9a756e4b7778384b3f408c", "commitAfterChange": "bbd2ac48b173a123c7419ce013244d878b152c22", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected void assertSourceEquals(String message, String expected, String actual)", "signatureAfterChange": " protected void assertSourceEquals(String message, String expected, String actual)", "diff": ["+\tif (expected == null) {", "+\t\tassertNull(message, actual);", "+\t\treturn;", "+\t}", "+\texpected = Util.convertToIndependantLineDelimiter(expected);", "-\ttry {", "-\t\tif (ASSERT_EQUALS_STRINGS) {", "-\t\t\tassertEquals(message, expected, actual);", "-\t\t} else {", "-\t\t\tassertTrue(message, actual.equals(expected));", "-\t\t}", "+\tif (ASSERT_EQUALS_STRINGS) {", "+\t\tassertEquals(message, expected, actual);", "+\t} else {", "+\t\tassertTrue(message, actual.equals(expected));", "-\tcatch (ComparisonFailure cf) {", "-\t\tif (\"true\".equals(COMPARE)) {", "-\t\t\tString trimmedExpected = expected;", "-\t\t\tString trimmedActual = actual;", "-\t\t\tswitch (IGNORE_SPACES) {", "-\t\t\t\tcase ALL_SPACES:", "-\t\t\t\t\ttrimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "-\t\t\t\t\ttrimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "-\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase LINES_LEADING_SPACES:", "-\t\t\t\t\ttrimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);", "-\t\t\t\t\ttrimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);", "-\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\ttrimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "-\t\t\t\t\ttrimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "-\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (DEBUG_TESTS && ASSERT_EQUALS_STRINGS) {", "-\t\t\t\tassertEquals(message, trimmedExpected, trimmedActual);", "-\t\t\t}", "-\t\t}", "-\t\tthis.failures.add(this.path);", "-\t\tASSERT_EQUALS_STRINGS = this.failures.size() < MAX_FAILURES;", "-\t\tthrow cf;", "-\t}", "-\tcatch (AssertionFailedError afe) {", "-\t\tthis.failures.add(this.path);", "-\t\tthrow afe;", "-\t}", "-}"]}], "num": 21578}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76426424d44115aa94de6489f4dc698b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d73c2e6beb990a2e8316a06f5e7d972", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "2cf58056e866ff671cad90d5365fdd17bef2e395", "commitAfterChange": "5eaac7ac2a1f933d3823239cdabe42da5dc006f8", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " protected void consumeConstructorDeclaration()", "signatureAfterChange": " protected void consumeConstructorDeclaration()", "diff": ["-\t\tif (this.astStack[this.astPtr + 1] instanceof ExplicitConstructorCall) {", "-\t\t\t//avoid a isSomeThing that would only be used here BUT what is faster between two alternatives ?", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.astStack,", "-\t\t\t\tthis.astPtr + 2,", "-\t\t\t\tstatements = new Statement[length - 1],", "-\t\t\t\t0,", "-\t\t\t\tlength - 1);", "-\t\t\tconstructorCall = (ExplicitConstructorCall) this.astStack[this.astPtr + 1];", "-\t\t} else { //need to add explicitly the super();", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.astStack,", "-\t\t\t\tthis.astPtr + 1,", "-\t\t\t\tstatements = new Statement[length],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "-\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\tif (!this.options.ignoreMethodBodies) {", "+\t\t\tif (this.astStack[this.astPtr + 1] instanceof ExplicitConstructorCall) {", "+\t\t\t\t//avoid a isSomeThing that would only be used here BUT what is faster between two alternatives ?", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack,", "+\t\t\t\t\tthis.astPtr + 2,", "+\t\t\t\t\tstatements = new Statement[length - 1],", "+\t\t\t\t\t0,", "+\t\t\t\t\tlength - 1);", "+\t\t\t\tconstructorCall = (ExplicitConstructorCall) this.astStack[this.astPtr + 1];", "+\t\t\t} else { //need to add explicitly the super();", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack,", "+\t\t\t\t\tthis.astPtr + 1,", "+\t\t\t\t\tstatements = new Statement[length],", "+\t\t\t\t\t0,", "+\t\t\t\t\tlength);", "+\t\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "678a2984a1f591e9844929a8ae59a075", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 108, "signatureBeforeChange": " protected void consumeConstructorDeclaration()", "signatureAfterChange": " protected void consumeConstructorDeclaration()", "diff": ["-\t\tif (!this.diet || insideFieldInitializer){", "-\t\t\t// add it only in non-diet mode, if diet_bodies, then constructor call will be added elsewhere.", "-\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\tif (!this.options.ignoreMethodBodies) {", "+\t\t\tif (!this.diet || insideFieldInitializer){", "+\t\t\t\t// add it only in non-diet mode, if diet_bodies, then constructor call will be added elsewhere.", "+\t\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\t\t}"]}], "num": 18535}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50d474cd1bd71a60648b31622a82fd5e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1945c609c5aa6ed87d9c240d066fd7c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "dd94cf0bd440f6e64eda78265f5494ba3f323126", "commitAfterChange": "d1744bcd23d1403e6d9f13ec027be2082d1bac18", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   protected char[][][] collect() throws JavaModelException", "signatureAfterChange": "   protected char[][][] collect() throws JavaModelException", "diff": ["-\t\tsynchronized(this.locator.nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set", "-\t\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);", "-\t\t\ttry {", "-\t\t\t\tif (this.type.isBinary()) {", "-\t\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(this.type);", "-\t\t\t\t\tif (binding != null) {", "-\t\t\t\t\t\tthis.collectSuperTypeNames(binding);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tICompilationUnit unit = this.type.getCompilationUnit();", "-\t\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);", "-\t\t\t\t\tif (parsedUnit != null) {", "-\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "-\t\t\t\t\t}", "+\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies); // NB: this uses a PerThreadObject, so it is thread safe", "+\t\ttry {", "+\t\t\tif (this.type.isBinary()) {", "+\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(this.type);", "+\t\t\t\tif (binding != null) {", "+\t\t\t\t\tthis.collectSuperTypeNames(binding);", "-\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t// problem with classpath: report inacurrate matches", "-\t\t\t\treturn null;", "-\t\t\t} finally {", "-\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "+\t\t\t} else {", "+\t\t\t\tICompilationUnit unit = this.type.getCompilationUnit();", "+\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);", "+\t\t\t\tif (parsedUnit != null) {", "+\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "+\t\t\t\t}", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// problem with classpath: report inacurrate matches", "+\t\t\treturn null;", "+\t\t} finally {", "+\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff982d494d6a538ff66dee1e827ede7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \r protected char[][][] collect() throws JavaModelException", "signatureAfterChange": "\r \r protected char[][][] collect() throws JavaModelException", "diff": ["-\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);\r", "-\t\ttry {\r", "-\t\t\tif (this.type.isBinary()) {\r", "-\t\t\t\tBinaryTypeBinding binding = this.cacheBinaryType(this.type);\r", "-\t\t\t\tthis.collectSuperTypeNames(binding);\r", "-\t\t\t} else {\r", "-\t\t\t\tICompilationUnit unit = this.type.getCompilationUnit();\r", "-\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);\r", "-\t\t\t\tif (parsedUnit != null) {\r", "-\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);\r", "+\t\tsynchronized(this.locator.nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set\r", "+\t\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);\r", "+\t\t\ttry {\r", "+\t\t\t\tif (this.type.isBinary()) {\r", "+\t\t\t\t\tBinaryTypeBinding binding = this.cacheBinaryType(this.type);\r", "+\t\t\t\t\tthis.collectSuperTypeNames(binding);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tICompilationUnit unit = this.type.getCompilationUnit();\r", "+\t\t\t\t\tCompilationUnitDeclaration parsedUnit = this.buildBindings(unit);\r", "+\t\t\t\t\tif (parsedUnit != null) {\r", "+\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);\r", "+\t\t\t\t\t}\r", "+\t\t\t} catch (AbortCompilation e) {\r", "+\t\t\t\t// problem with classpath: report inacurrate matches\r", "+\t\t\t\treturn null;\r", "+\t\t\t} finally {\r", "+\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);\r", "-\t\t} catch (AbortCompilation e) {\r", "-\t\t\t// problem with classpath: report inacurrate matches\r", "-\t\t\treturn null;\r", "-\t\t} finally {\r", "-\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);\r"]}], "num": 9102}
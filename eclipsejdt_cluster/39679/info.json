{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "073f972d8a1bfd73a19b7763ebccbf0d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bef9e18045be7882a9d48885eca23cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "753d6a0ebf6c471f5abc3f7b84f5e9fd7d55bf9e", "commitAfterChange": "0f2486f3f34027c8ea6eadc698cc2470fccb1ae9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "signatureAfterChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "diff": ["-\t\t\tPrintWriter sourceFileWriter;", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tString fileName = OUTPUT_DIR + File.separator + testFiles[i];", "-\t\t\t\tFile file = new File(fileName), innerOutputDirectory = file", "-\t\t\t\t\t\t.getParentFile();", "-\t\t\t\tif (!innerOutputDirectory.isDirectory()) {", "-\t\t\t\t\tinnerOutputDirectory.mkdirs();", "+\t\t\tif (testFiles != null) {", "+\t\t\t\tPrintWriter sourceFileWriter;", "+\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\tString fileName = OUTPUT_DIR + File.separator + testFiles[i];", "+\t\t\t\t\tFile file = new File(fileName), innerOutputDirectory = file", "+\t\t\t\t\t\t\t.getParentFile();", "+\t\t\t\t\tif (!innerOutputDirectory.isDirectory()) {", "+\t\t\t\t\t\tinnerOutputDirectory.mkdirs();", "+\t\t\t\t\t}", "+\t\t\t\t\tsourceFileWriter = new PrintWriter(new FileOutputStream(file));", "+\t\t\t\t\tsourceFileWriter.write(testFiles[i + 1]);", "+\t\t\t\t\tsourceFileWriter.close();", "-\t\t\t\tsourceFileWriter = new PrintWriter(new FileOutputStream(file));", "-\t\t\t\tsourceFileWriter.write(testFiles[i + 1]);", "-\t\t\t\tsourceFileWriter.close();", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\");", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\");", "+\t\t\tif (testFiles != null) {", "+\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\tSystem.out.print(testFiles[i]);", "+\t\t\t\t\tSystem.out.println(\" [\");", "+\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "+\t\t\t\t\tSystem.out.println(\"]\");", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab230a423c5d39f4684c5a85a52b3836", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "c9aad4acd8f81ce40a05f5d7cf14d54593460190", "commitAfterChange": "0c4c74fca56aa2a771f7c3d6e30a98a885e70930", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "signatureAfterChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "diff": ["-\t\ttry {", "-\t\t\tbatchCompiler = new Main(new PrintWriter(new FileOutputStream(", "-\t\t\t\t\toutFileName)), new PrintWriter(new FileOutputStream(", "-\t\t\t\t\terrFileName)), false);", "-\t\t} catch (FileNotFoundException e) {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\te.printStackTrace();", "-\t\t\tthrow new RuntimeException(e);", "-\t\t}", "+\t\tPrintWriter out = null; ", "+\t\tPrintWriter err = null; ", "-\t\t\tfinal String[] tokenizeCommandLine = Main.tokenize(commandLine);", "-\t\t\tcompileOK = batchCompiler.compile(tokenizeCommandLine);", "-\t\t} catch (RuntimeException e) {", "-\t\t\tcompileOK = false;", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\te.printStackTrace();", "-\t\t\tthrow e;", "+\t\t\ttry {", "+\t\t\t\tout = new PrintWriter(new FileOutputStream(outFileName));", "+\t\t\t\terr = new PrintWriter(new FileOutputStream(errFileName));", "+\t\t\t\tbatchCompiler = new Main(out, err, false);", "+\t\t\t} catch (FileNotFoundException e) {", "+\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\t\te.printStackTrace();", "+\t\t\t\tthrow new RuntimeException(e);", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tfinal String[] tokenizeCommandLine = Main.tokenize(commandLine);", "+\t\t\t\tcompileOK = batchCompiler.compile(tokenizeCommandLine);", "+\t\t\t} catch (RuntimeException e) {", "+\t\t\t\tcompileOK = false;", "+\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\t\te.printStackTrace();", "+\t\t\t\tthrow e;", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tif (out != null)", "+\t\t\t\tout.close();", "+\t\t\tif (err != null)", "+\t\t\t\terr.close();"]}], "num": 39679}
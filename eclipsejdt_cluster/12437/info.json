{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32517f84f79800c33ec98b797e7a4293", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "993c61ec5042956db16834c172779de9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "2824ba5423780c179acf9a0b6a91351bf791cbe9", "commitAfterChange": "88e68aadcb2bef0d42f85bcbc67cd3093bf6d159", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate String[] convertTypeNamesToSigs(char[][] typeNames)", "signatureAfterChange": " \tprivate String[] convertTypeNamesToSigs(char[][] typeNames)", "diff": ["-\t\t\tString typeSig = Signature.createTypeSignature(typeNames[i], false);", "-\t\t\tint lastIndex = typeSig.lastIndexOf('.');", "-\t\t\tif (lastIndex == -1) {", "-\t\t\t\ttypeSigs[i] = typeSig;", "+\t\t\tchar[] typeSig = Signature.createCharArrayTypeSignature(typeNames[i], false);", "+\t\t\t", "+\t\t\t// transforms signatures that contains a qualification into unqualified signatures", "+\t\t\t// e.g. \"QX<+QMap.Entry;>;\" becomes \"QX<+QEntry;>;\"", "+\t\t\tStringBuffer simpleTypeSig = null;", "+\t\t\tint start = 0;", "+\t\t\tint dot = -1;", "+\t\t\tint length = typeSig.length;", "+\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\tswitch (typeSig[j]) {", "+\t\t\t\t\tcase Signature.C_UNRESOLVED:", "+\t\t\t\t\t\tif (simpleTypeSig != null)", "+\t\t\t\t\t\t\tsimpleTypeSig.append(typeSig, start, j-start);", "+\t\t\t\t\t\tstart = j;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Signature.C_DOT:", "+\t\t\t\t\t\tdot = j;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Signature.C_GENERIC_START:", "+\t\t\t\t\tcase Signature.C_NAME_END:", "+\t\t\t\t\t\tif (dot > start) {", "+\t\t\t\t\t\t\tif (simpleTypeSig == null)", "+\t\t\t\t\t\t\t\tsimpleTypeSig = new StringBuffer().append(typeSig, 0, start);", "+\t\t\t\t\t\t\tsimpleTypeSig.append(Signature.C_UNRESOLVED);", "+\t\t\t\t\t\t\tsimpleTypeSig.append(typeSig, dot+1, j-dot-1);", "+\t\t\t\t\t\t\tstart = j;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (simpleTypeSig == null) {", "+\t\t\t\ttypeSigs[i] = new String(typeSig);", "-\t\t\t\tint arrayEnd = 0;", "-\t\t\t\twhile(typeSig.charAt(arrayEnd) == Signature.C_ARRAY) arrayEnd++;", "-\t\t\t\ttypeSigs[i] = typeSig.substring(0, arrayEnd) + Signature.C_UNRESOLVED + typeSig.substring(lastIndex + 1, typeSig.length());", "+\t\t\t\tsimpleTypeSig.append(typeSig, start, length-start);", "+\t\t\t\ttypeSigs[i] = simpleTypeSig.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c25b66a9124edac709baf0ef18da36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public static char[] getTypeErasure(char[] parameterizedTypeSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[] getTypeErasure(char[] parameterizedTypeSignature) throws IllegalArgumentException", "diff": ["-\tint genericStart = CharOperation.indexOf(C_GENERIC_START, parameterizedTypeSignature);", "-\tif (genericStart == -1) return parameterizedTypeSignature;", "-\tchar[] result = new char[genericStart+1];", "-\tSystem.arraycopy(parameterizedTypeSignature, 0, result, 0, genericStart);", "-\tresult[genericStart] = C_SEMICOLON;", "-\treturn result;", "+\tint end = CharOperation.indexOf(C_GENERIC_START, parameterizedTypeSignature);", "+\tif (end == -1) return parameterizedTypeSignature;", "+\tint length = parameterizedTypeSignature.length;", "+\tchar[] result = new char[length];", "+\tint pos = 0;", "+\tint start = 0;", "+\tint deep= 0;", "+\tfor (int idx=end; idx<length; idx++) {", "+\t\tswitch (parameterizedTypeSignature[idx]) {", "+\t\t\tcase C_GENERIC_START:", "+\t\t\t\tif (deep == 0) {", "+\t\t\t\t\tint size = idx-start;", "+\t\t\t\t\tSystem.arraycopy(parameterizedTypeSignature, start, result, pos, size);", "+\t\t\t\t\tend = idx;", "+\t\t\t\t\tpos += size;", "+\t\t\t\t}", "+\t\t\t\tdeep++;", "+\t\t\t\tbreak;", "+\t\t\tcase C_GENERIC_END:", "+\t\t\t\tdeep--;", "+\t\t\t\tif (deep < 0) throw new IllegalArgumentException();", "+\t\t\t\tif (deep == 0) start = idx+1;", "+\t\t\t\tbreak;", "+\t\t}", "+\t}", "+\tif (deep > 0) throw new IllegalArgumentException();", "+\tint size = pos+length-start;", "+\tchar[] resized = new char[size];", "+\tSystem.arraycopy(result, 0, resized, 0, pos);", "+\tSystem.arraycopy(parameterizedTypeSignature, start, resized, pos, length-start);", "+\treturn resized;"]}], "num": 12437}
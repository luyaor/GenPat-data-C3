{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46264a206c34bb4323ef2dd87073402b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cbde491f1c76be6919f724fa343d62c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 619, "methodNumberAfterChange": 768, "signatureBeforeChange": "  \tpublic void testModifiers()", "signatureAfterChange": "  \tpublic void testModifiers()", "diff": ["+\t\t", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t// node type introduced in 3.0 API", "+\t\t\ttry {", "+\t\t\t\tast.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\t\tassertTrue(false);", "+\t\t\t} catch (UnsupportedOperationException e) {", "+\t\t\t\t// pass", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\tlong previousCount = ast.modificationCount();", "+\t\tfinal Modifier x = ast.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\tpreviousCount = ast.modificationCount();", "+\t\tassertTrue(x.getAST() == ast);", "+\t\tassertTrue(x.getParent() == null);", "+\t\tassertTrue(x.getKeyword() == Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\tassertTrue(x.getNodeType() == ASTNode.MODIFIER);", "+\t\t// make sure that reading did not change modification count", "+\t\tassertTrue(ast.modificationCount() == previousCount);", "+\t\t", "+\t\t// ModifierKeyword property - mandatory typesafe enumeration", "+\t\t// check the names of the modifiers", "+\t\tassertTrue(Modifier.ModifierKeyword.PUBLIC_KEYWORD.toString().equals(\"public\")); //$NON-NLS-1$", "+\t\tassertTrue(Modifier.ModifierKeyword.PROTECTED_KEYWORD.toString().equals(\"protected\")); //$NON-NLS-1$", "+\t\tassertTrue(Modifier.ModifierKeyword.PRIVATE_KEYWORD.toString().equals(\"private\")); //$NON-NLS-1$", "+\t\tassertTrue(Modifier.ModifierKeyword.STATIC_KEYWORD.toString().equals(\"static\")); //$NON-NLS-1$", "+\t\tassertTrue(Modifier.ModifierKeyword.ABSTRACT_KEYWORD.toString().equals(\"abstract\")); //$NON-NLS-1$", "+\t\tassertTrue(Modifier.ModifierKeyword.FINAL_KEYWORD.toString().equals(\"final\")); //$NON-NLS-1$", "+\t\tassertTrue(Modifier.ModifierKeyword.SYNCHRONIZED_KEYWORD.toString().equals(\"synchronized\")); //$NON-NLS-1$", "+\t\tassertTrue(Modifier.ModifierKeyword.NATIVE_KEYWORD.toString().equals(\"native\")); //$NON-NLS-1$", "+\t\tassertTrue(Modifier.ModifierKeyword.TRANSIENT_KEYWORD.toString().equals(\"transient\")); //$NON-NLS-1$", "+\t\tassertTrue(Modifier.ModifierKeyword.VOLATILE_KEYWORD.toString().equals(\"volatile\")); //$NON-NLS-1$", "+\t\tassertTrue(Modifier.ModifierKeyword.STRICTFP_KEYWORD.toString().equals(\"strictfp\")); //$NON-NLS-1$", "+", "+\t\tModifier.ModifierKeyword[] known = {", "+\t\t\tModifier.ModifierKeyword.PUBLIC_KEYWORD,", "+\t\t\tModifier.ModifierKeyword.PROTECTED_KEYWORD,", "+\t\t\tModifier.ModifierKeyword.PRIVATE_KEYWORD,", "+\t\t\tModifier.ModifierKeyword.STATIC_KEYWORD,", "+\t\t\tModifier.ModifierKeyword.ABSTRACT_KEYWORD,", "+\t\t\tModifier.ModifierKeyword.FINAL_KEYWORD,", "+\t\t\tModifier.ModifierKeyword.SYNCHRONIZED_KEYWORD,", "+\t\t\tModifier.ModifierKeyword.NATIVE_KEYWORD,", "+\t\t\tModifier.ModifierKeyword.TRANSIENT_KEYWORD,", "+\t\t\tModifier.ModifierKeyword.VOLATILE_KEYWORD,", "+\t\t\tModifier.ModifierKeyword.STRICTFP_KEYWORD,", "+\t\t};", "+\t\t", "+\t\t// check all modifiers are distinct", "+\t\tfor (int i = 0; i < known.length; i++) {", "+\t\t\tfor (int j = 0; j < known.length; j++) {", "+\t\t\t\tassertTrue(i == j || !known[i].equals(known[j]));", "+\t\t\t}", "+\t\t}", "+", "+\t\t// check all modifiers work", "+\t\tfor (int i = 0; i < known.length; i++) {", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setKeyword(known[i]);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getKeyword().equals(known[i]));", "+\t\t}", "+\t\t// ensure null does not work as an operator", "+\t\ttry {", "+\t\t\tx.setKeyword(null);", "+\t\t\tassertTrue(false);", "+\t\t} catch (RuntimeException e) {", "+\t\t\t// pass", "+\t\t}", "+", "+\t\t// check toKeyword lookup of modifier by name", "+\t\tfor (int i = 0; i < known.length; i++) {", "+\t\t\tString name = known[i].toString();", "+\t\t\tassertTrue(Modifier.ModifierKeyword.toKeyword(name).equals(known[i]));", "+\t\t}", "+\t\tassertTrue(Modifier.ModifierKeyword.toKeyword(\"huh\") == null); //$NON-NLS-1$", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7eb0b9817bd73a8992e76ab846e5e7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 206, "signatureBeforeChange": "\t \t \tpublic void testSingleVariableDeclaration()", "signatureAfterChange": "\t\t \t \tpublic void testSingleVariableDeclaration()", "diff": ["+\t", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t} else {", "+\t\t\tassertTrue(x.modifiers().size() == 0);", "+\t\t\tassertTrue(x.isVariableArity() == false);", "+\t\t}", "-\t\tint legal = Modifier.PUBLIC | Modifier.PROTECTED", "-\t\t\t| Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL", "-\t\t\t| Modifier.TRANSIENT | Modifier.VOLATILE;", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(legal);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == legal);", "-", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(Modifier.NONE);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tint legal = Modifier.PUBLIC | Modifier.PROTECTED", "+\t\t\t\t| Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL", "+\t\t\t\t| Modifier.TRANSIENT | Modifier.VOLATILE;", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(legal);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == legal);", "+\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(Modifier.NONE);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t}", "+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setVariableArity(true);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.isVariableArity() == true);", "+\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setVariableArity(false);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.isVariableArity() == false);", "+\t\t}", "+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.modifiers(), new Property(\"Modifiers\", true, ExtendedModifier.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tModifier result = targetAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\tTypeDeclaration pd = targetAst.newTypeDeclaration();", "+\t\t\t\t\t\tpd.modifiers().add(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\tSingleMemberAnnotation s1 = x.getAST().newSingleMemberAnnotation();", "+\t\t\t\t\tClassInstanceCreation s2 = x.getAST().newClassInstanceCreation();", "+\t\t\t\t\tAnonymousClassDeclaration s3 = x.getAST().newAnonymousClassDeclaration();", "+\t\t\t\t\tMethodDeclaration s4 = x.getAST().newMethodDeclaration();", "+\t\t\t\t\tSingleVariableDeclaration s5 = x.getAST().newSingleVariableDeclaration();", "+\t\t\t\t\ts1.setValue(s2);", "+\t\t\t\t\ts2.setAnonymousClassDeclaration(s3);", "+\t\t\t\t\ts3.bodyDeclarations().add(s4);", "+\t\t\t\t\ts4.parameters().add(s5);", "+\t\t\t\t\ts5.modifiers().add(x);", "+\t\t\t\t\treturn s1;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tSingleVariableDeclaration s5 = (SingleVariableDeclaration) x.getParent();", "+\t\t\t\t\ts5.modifiers().remove(x);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\t", "+\t\t\t// check that getModifiers() tracks changes to modifiers()", "+\t\t\tx.modifiers().clear();", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\tModifier[] allMods = allModifiers();", "+\t\t\t// one at a time", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tx.modifiers().add(allMods[i]);", "+\t\t\t\tassertTrue(x.getModifiers() == allMods[i].getKeyword().toFlagValue());", "+\t\t\t\tx.modifiers().remove(allMods[i]);", "+\t\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\t}", "+\t\t\t// all at same time", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tx.modifiers().add(allMods[i]);", "+\t\t\t}", "+\t\t\tint flags  = x.getModifiers();", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tassertTrue((flags & allMods[i].getKeyword().toFlagValue()) != 0);", "+\t\t\t}", "+\t\t}"]}], "num": 21411}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7c23041b40797358d6fbd70d5bf22a0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69a6757aca12e0c47879b82ed4004f86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9af380edbebe260c532550e38eabb05a50b6fe99", "commitAfterChange": "da0b64a41a819b0bc05baa0b849f027f121c825e", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": " protected void consumeStatementSwitch()", "signatureAfterChange": " protected void consumeStatementSwitch()", "diff": ["-\tSwitchStatement s = new SwitchStatement();", "+\tSwitchStatement switchStatement = new SwitchStatement();", "-\ts.testExpression = expressionStack[expressionPtr--];", "+\tswitchStatement.testExpression = expressionStack[expressionPtr--];", "-\t\t\ts.statements = new Statement[length], ", "+\t\t\tswitchStatement.statements = new Statement[length], ", "-\ts.explicitDeclarations = realBlockStack[realBlockPtr--];", "-\tpushOnAstStack(s);", "-\tintPtr--; // because of OpenBlock", "-\ts.sourceStart = intStack[intPtr--];", "-\ts.sourceEnd = endStatementPosition;", "+\tswitchStatement.explicitDeclarations = realBlockStack[realBlockPtr--];", "+\tpushOnAstStack(switchStatement);", "+\tswitchStatement.blockStart = intStack[intPtr--]; //  TODO (david) should rather provide blockStart", "+\tswitchStatement.sourceStart = intStack[intPtr--];", "+\tswitchStatement.sourceEnd = endStatementPosition;", "+\tif (length == 0 && !containsComment(switchStatement.blockStart, switchStatement.sourceEnd)) {", "+\t\tswitchStatement.bits |= AstNode.UndocumentedEmptyBlockMASK;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da67b4cf681f4a53d084bfa36c654dfd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "5d7b0ed4ccf6dc91337d9ac62f14ae585f547855", "commitAfterChange": "e706e02e84b0ab73a5fa0bab5675fe627a8c0157", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 239, "signatureBeforeChange": "  public void parse( \tInitializer ini,  \tTypeDeclaration type,  \tCompilationUnitDeclaration unit)", "signatureAfterChange": "  public void parse( \tInitializer initializer,  \tTypeDeclaration type,  \tCompilationUnitDeclaration unit)", "diff": ["-\tInitializer ini, ", "+\tInitializer initializer, ", "-\tscanner.resetTo(ini.bodyStart, ini.bodyEnd); // just on the beginning {", "+\tscanner.resetTo(initializer.bodyStart, initializer.bodyEnd); // just on the beginning {", "-\tcheckNonNLSAfterBodyEnd(ini.declarationSourceEnd);", "+\tcheckNonNLSAfterBodyEnd(initializer.declarationSourceEnd);", "-\tini.block.explicitDeclarations = realBlockStack[realBlockPtr--];", "+\tinitializer.block.explicitDeclarations = realBlockStack[realBlockPtr--];", "-\tif ((length = astLengthStack[astLengthPtr--]) != 0)", "-\t\tSystem.arraycopy(", "-\t\t\tastStack, ", "-\t\t\t(astPtr -= length) + 1, ", "-\t\t\tini.block.statements = new Statement[length], ", "-\t\t\t0, ", "-\t\t\tlength); ", "+\tif ((length = astLengthStack[astLengthPtr--]) > 0) {", "+\t\tSystem.arraycopy(astStack, (astPtr -= length) + 1, initializer.block.statements = new Statement[length], 0, length); ", "+\t} else {", "+\t\t// check whether this block at least contains some comment in it", "+\t\tif (!containsComment(initializer.block.sourceStart, initializer.block.sourceEnd)) {", "+\t\t\tinitializer.block.bits |= AstNode.UncommentedEmptyBlockMASK;", "+\t\t}", "+\t}", "-\t\tini.bits |= AstNode.HasLocalTypeMASK;", "+\t\tinitializer.bits |= AstNode.HasLocalTypeMASK;"]}], "num": 47538}
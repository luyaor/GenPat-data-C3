{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ced9908448451a73fb56d56374889cf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ec831b485f0fb43c08d22f954e6e682", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, \t\t\tInvocationSite invocationSite, int inferenceLevel, boolean tiebreakingVarargsMethods)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite, boolean tiebreakingVarargsMethods)", "diff": ["-\tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments,", "-\t\t\tInvocationSite invocationSite, int inferenceLevel, boolean tiebreakingVarargsMethods)", "+\tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite, boolean tiebreakingVarargsMethods)", "-\t\t\tmethod = ParameterizedGenericMethodBinding.computeCompatibleMethod(method, arguments, this, invocationSite, inferenceLevel);", "+\t\t\tmethod = ParameterizedGenericMethodBinding.computeCompatibleMethod(method, arguments, this, invocationSite);", "+\t\t\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8 && method instanceof ParameterizedGenericMethodBinding && invocationSite instanceof Invocation) {", "+\t\t\t\tInvocation invocation = (Invocation) invocationSite;", "+\t\t\t\tInferenceContext18 infCtx = invocation.getInferenceContext((ParameterizedGenericMethodBinding) method);", "+\t\t\t\tif (infCtx != null)", "+\t\t\t\t\treturn method; // inference is responsible, no need to recheck, actually we could check functional arguments, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c125", "+\t\t\t}", "-\t\tif ((parameterCompatibilityLevel18(method, arguments, tiebreakingVarargsMethods, invocationSite)) > NOT_COMPATIBLE) {", "+\t\tif ((parameterCompatibilityLevel(method, arguments, tiebreakingVarargsMethods)) > NOT_COMPATIBLE) {", "+\t\t// 18.5.1 ignores arguments not pertinent to applicability. When these are taken into consideration method could fail applicability (e.g, lambda shape/arity mismatch ...)", "+\t\tif (method instanceof PolyParameterizedGenericMethodBinding) // Not reached, but left in for now.", "+\t\t\treturn new ProblemMethodBinding(method, method.selector, method.parameters, ProblemReasons.InferredApplicableMethodInapplicable);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427d1a115092dc24cb7059a1d0022c6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "376d52c1cdc65e12a1dbf449737ba06d2101c4f4", "commitAfterChange": "7f3c64574901f5a013fb7527a4bb25411dd2afcf", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType) {", "+\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType) {", "-\t\tboolean useTiebreakMethod = invocationSite.genericTypeArguments() == null;", "+\t\tInvocationSite tieBreakInvocationSite = new InvocationSite() {", "+\t\t\tpublic TypeBinding[] genericTypeArguments() { return null; } // ignore genericTypeArgs", "+\t\t\tpublic boolean isSuperAccess() { return invocationSite.isSuperAccess(); }", "+\t\t\tpublic boolean isTypeAccess() { return invocationSite.isTypeAccess(); }", "+\t\t\tpublic void setActualReceiverType(ReferenceBinding actualReceiverType) { /* ignore */}", "+\t\t\tpublic void setDepth(int depth) { /* ignore */}", "+\t\t\tpublic void setFieldIndex(int depth) { /* ignore */}", "+\t\t\tpublic int sourceStart() { return invocationSite.sourceStart(); }", "+\t\t\tpublic int sourceEnd() { return invocationSite.sourceStart(); }", "+\t\t};", "-\t\t\t\tMethodBinding tiebreakMethod = useTiebreakMethod ? current.tiebreakMethod() : current;", "+\t\t\t\tMethodBinding tiebreakMethod = current.tiebreakMethod();", "-\t\t\t\t\tMethodBinding acceptable = computeCompatibleMethod(methodToTest, tiebreakMethod.parameters, invocationSite);", "+\t\t\t\t\tMethodBinding acceptable = computeCompatibleMethod(methodToTest, tiebreakMethod.parameters, tieBreakInvocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d301602587b4cf9b488f828e9a391f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected final boolean areParametersAssignable(TypeBinding[] parameters, TypeBinding[] arguments)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t// Internal use only", "-\tprotected final boolean areParametersAssignable(TypeBinding[] parameters, TypeBinding[] arguments) {", "-\t\tif (parameters == arguments)", "-\t\t\treturn true;", "-", "-\t\tint length = parameters.length;", "-\t\tif (length != arguments.length)", "-\t\t\treturn false;", "-", "-\t\tfor (int i = 0; i < length; i++)", "-\t\t\tif (parameters[i] != arguments[i])", "-\t\t\t\tif (!arguments[i].isCompatibleWith(parameters[i]))", "-\t\t\t\t\treturn false;", "-\t\treturn true;", "-\t}", "+\t */", "+\tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite) {", "+", "+\t\tTypeBinding[] genericTypeArguments = invocationSite.genericTypeArguments();", "+\t\tTypeBinding[] parameters = method.parameters;", "+\t\tif (parameters == arguments ", "+\t\t\t\t&& (method.returnType.tagBits & HasTypeVariable) == 0 ", "+\t\t\t\t&& genericTypeArguments == null)", "+\t\t\treturn method;", "+", "+\t\tint argLength = arguments.length;", "+\t\tif (argLength != parameters.length)", "+\t\t\treturn null; // incompatible", "+", "+\t\tTypeVariableBinding[] typeVariables = method.typeVariables;", "+\t\tif (typeVariables != NoTypeVariables) { // generic method", "+\t\t\tmethod = ParameterizedGenericMethodBinding.computeCompatibleMethod(method, arguments, this, invocationSite);", "+\t\t\tif (method == null) return null; // incompatible", "+\t\t\tif (!method.isValidBinding()) return method; // bound check issue is taking precedence", "+\t\t\tparameters = method.parameters; // reacquire them after type inference has performed", "+\t\t} else if (genericTypeArguments != null && !(method instanceof ParameterizedGenericMethodBinding)) {", "+\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeParameterArityMismatch);", "+\t\t}", "+\t\t", "+\t\targumentCompatibility: {", "+\t\t\tfor (int i = 0; i < argLength; i++)", "+\t\t\t\tif (parameters[i] != arguments[i] && !arguments[i].isCompatibleWith(parameters[i]))", "+\t\t\t\t\tbreak argumentCompatibility;", "+\t\t\treturn method; // compatible", "+\t\t}", "+\t\tif (genericTypeArguments != null) {", "+\t\t\treturn new ProblemMethodBinding(method, method.selector, arguments, ParameterizedMethodTypeMismatch);", "+\t\t}", "+\t\treturn null; // incompatible", "+\t}"]}], "num": 25942}
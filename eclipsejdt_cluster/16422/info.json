{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bd11716bfd3eb5ad3235a52dbe1efa6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71edfd2558124cac51998d382ea38df4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "8457dc17f56c4fff3fa2589438e210393d270f41", "commitAfterChange": "60249e9dd075ec142e7f7240fcef068b0fddb812", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public String toString()", "signatureAfterChange": "  public String toString()", "diff": ["+\t\t\tString[] paths = new String[this.relativePaths.length];", "+\t\t\tint index = 0;", "-\t\t\t\tresult.append(\"\\n\\t\"); //$NON-NLS-1$", "+\t\t\t\tString containerPath;", "-\t\t\t\t\tresult.append(((IFolder) target).getLocation().toOSString());", "+\t\t\t\t\tcontainerPath = ((IFolder) target).getLocation().toOSString();", "-\t\t\t\t\tresult.append(this.containerPaths[i]);", "+\t\t\t\t\tcontainerPath = this.containerPaths[i];", "-\t\t\t\t\tresult.append('/');", "-\t\t\t\t\tresult.append(path);", "+\t\t\t\t\tpaths[index++] = containerPath + '/' + path;", "+\t\t\t\t} else {", "+\t\t\t\t\tpaths[index++] = containerPath;", "+\t\t\tSystem.arraycopy(paths, 0, paths = new String[index], 0, index);", "+\t\t\tUtil.sort(paths);", "+\t\t\tfor (int i = 0; i < index; i++) {", "+\t\t\t\tresult.append(\"\\n\\t\"); //$NON-NLS-1$", "+\t\t\t\tresult.append(paths[i]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5f8bf4519f33ed05bf9b0b67463a6ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "46f0bf33fc17707f84a4651387bf3026d6bae545", "commitAfterChange": "4d6296b6ebb5111ab8825f79519da9de471cce30", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void append(IMethod method) throws JavaModelException", "signatureAfterChange": " \tprivate void append(IMethod method) throws JavaModelException", "diff": ["-\t\tString[] parameters = method.getParameterTypes();\t\t\t", "-\t\tfor (int i = 0; i < parameters.length; i++) {", "-\t\t\tresults.append(Signature.toString(parameters[i]));", "-\t\t\tif (i < parameters.length-1) {", "-\t\t\t\tresults.append(\", \");", "+\t\tString[] parameters = method.getParameterTypes();", "+\t\tboolean varargs = Flags.isVarargs(method.getFlags());", "+\t\tfor (int i = 0, length=parameters.length; i<length; i++) {", "+\t\t\tif (i < length - 1) {", "+\t\t\t\tresults.append(Signature.toString(parameters[i]));", "+\t\t\t\tresults.append(\", \"); //$NON-NLS-1$", "+\t\t\t} else if (varargs) {", "+\t\t\t\t// remove array from signature", "+\t\t\t\tString parameter = parameters[i].substring(1);", "+\t\t\t\tresults.append(Signature.toString(parameter));", "+\t\t\t\tresults.append(\" ...\"); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tresults.append(Signature.toString(parameters[i]));"]}], "num": 16422}
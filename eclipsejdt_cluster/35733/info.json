{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8400cf043a9c7591c148c51fd5b541e9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f190303bcbb97463a3043e19a3efea3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "18a717c02ecdc2d409aa7cc135839941fa4c74e6", "commitAfterChange": "96bd3255b48a32c1785eb6f69a6cdfc9035c7d2a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["+\t\tboolean isCompliant14 = compilationUnitScope().environment.options.complianceLevel >= CompilerOptions.JDK1_4;", "-\t\t\tif (compilationUnitScope().environment.options.complianceLevel >= CompilerOptions.JDK1_4){\t\t\t ", "+\t\t\tif (isCompliant14){\t\t\t ", "-\t\t\tif (matchingMethod != null && areParametersAssignable(matchingMethod.parameters, argumentTypes))", "+\t\t\tif (matchingMethod != null && areParametersAssignable(matchingMethod.parameters, argumentTypes)) {", "+\t\t\t\t// (if no default abstract) must explicitly look for one instead, which could be a better match", "+\t\t\t\tif (!matchingMethod.canBeSeenBy(receiverType, invocationSite, this)) {", "+\t\t\t\t\t// ignore matching method (to be consistent with multiple matches, none visible (matching method is then null)", "+\t\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, null, found);\t\t\t\t\t\t", "+\t\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "+\t\t\t\t}", "+\t\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b98faa593105cfc0d056d762a224397", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\tif (isCompliant14)", "-\t\t\treturn mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite);", "+\t\tif (isCompliant14) {", "+\t\t\tmatchingMethod = mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite);", "+\t\t\tif (parameterCompatibilityLevel(matchingMethod, argumentTypes) > COMPATIBLE) {", "+\t\t\t\t// see if there is a better match in the interfaces", "+\t\t\t\tMethodBinding interfaceMethod =", "+\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, new ObjectVector());", "+\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "+\t\t\t}", "+\t\t\treturn matchingMethod;", "+\t\t}"]}], "num": 35733}
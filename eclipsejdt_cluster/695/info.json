{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a0ce8ceb469ffb90bb2703ecb2a95a9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0692db93786146f69d1297c34dbf76f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "bbb0dcb779d919061a7831a79389e1c049a224cf", "commitAfterChange": "1757e38a5d83efbdcae1f40063864d000049242c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate FieldDeclaration convert(SourceField fieldHandle, TypeDeclaration type, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate FieldDeclaration convert(SourceField fieldHandle, TypeDeclaration type, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t\tif (childrenLength > 0) {", "+\t\t\tif (childrenLength == 1) {", "+\t\t\t\tfield.initialization = convert(children[0], isEnumConstant ? field : null, compilationResult);", "+\t\t\t} else if (childrenLength > 1) {", "-\t\t\t\t\tIJavaElement localType = children[i];", "-\t\t\t\t\tTypeDeclaration anonymousLocalTypeDeclaration = convert((SourceType) localType, compilationResult);", "-\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "-\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "-\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "-\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "-\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "-\t\t\t\t\tanonymousLocalTypeDeclaration.modifiers &= ~ClassFileConstants.AccEnum; // remove tag in case this is the init of an enum constant", "-\t\t\t\t\texpressions[i] = expression;", "+\t\t\t\t\texpressions[i] = convert(children[i], isEnumConstant ? field : null, compilationResult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7e012effaa1a8aa18c5ced7f5211754", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MemberTypeBinding.java", "commitBeforeChange": "b7e239ed905db549b7b097dee42d60985426c483", "commitAfterChange": "5b37648dead58e0f08eb29205d0792e2cc2d0ce3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void initializeDeprecatedAnnotationTagBits()", "signatureAfterChange": " public void initializeDeprecatedAnnotationTagBits()", "diff": ["+ */", "-\tif ((this.tagBits & (TagBits.AnnotationResolved|TagBits.AnnotationDeprecated)) == 0) {", "-\t\tReferenceBinding enclosing = this.enclosingType();", "-\t\tenclosing.initializeDeprecatedAnnotationTagBits();", "-\t\tTypeDeclaration typeDecl = this.scope.referenceContext;", "-\t\tboolean old = typeDecl.staticInitializerScope.insideTypeAnnotation;", "-\t\ttry {", "-\t\t\ttypeDecl.staticInitializerScope.insideTypeAnnotation = true;", "-\t\t\tASTNode.resolveDeprecatedAnnotations(typeDecl.staticInitializerScope, typeDecl.annotations, this);", "-\t\t} finally {", "-\t\t\ttypeDecl.staticInitializerScope.insideTypeAnnotation = old;", "-\t\t}", "-\t\tif ((this.tagBits & TagBits.AnnotationDeprecated) != 0) {", "-\t\t\tthis.modifiers |= ClassFileConstants.AccDeprecated;", "-\t\t} else if ((enclosing.modifiers & (ClassFileConstants.AccDeprecated |", "-\t\t\t\t\t\tExtraCompilerModifiers.AccDeprecatedImplicitly)) != 0) {", "-\t\t\tthis.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;", "+\tif ((this.tagBits & TagBits.DeprecatedAnnotationResolved) == 0) {", "+\t\tsuper.initializeDeprecatedAnnotationTagBits();", "+\t\tif ((this.tagBits & TagBits.AnnotationDeprecated) == 0) {", "+\t\t\t// check enclosing type", "+\t\t\tReferenceBinding enclosing;", "+\t\t\tif (((enclosing = this.enclosingType()).tagBits & TagBits.DeprecatedAnnotationResolved) == 0) {", "+\t\t\t\tenclosing.initializeDeprecatedAnnotationTagBits();", "+\t\t\t}", "+\t\t\tif (enclosing.isViewedAsDeprecated()) {", "+\t\t\t\tthis.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5eb5d139c7062236c50864383c17efb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e944f831810e143e8894d05428eb208a2cd78cce", "commitAfterChange": "45b2548f21c6553964603037785b1fef0bb3e0d3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 60, "signatureBeforeChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "signatureAfterChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "diff": ["-\t\tbuffer.append(this.scanner.currentCharacter);", "-\t\tbuffer.append(this.scanner.currentCharacter);", "+\t\tint editStart = this.scanner.currentPosition;", "-\t\tchar previousChar = 0;", "-\t\t\t\t\tpreviousPosition = this.scanner.currentPosition;", "-\t\t\t\t\tpreviousChar = this.scanner.currentCharacter;", "-\t\t\tpreviousChar = this.scanner.currentCharacter;", "+\t\tthis.scanner.skipComments = false;", "-\t\tif (previousChar == '\\n' || previousChar == '\\r') {", "-\t\t\t// line comment is normally ended with new line", "-\t\t\tthis.column = 1;", "-\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\tthis.line++;", "-\t\t\tthis.lastNumberOfNewLines++;", "-\t\t} else {", "-\t\t\tthis.scanner.resetTo(previousPosition, commentEnd);", "-\t\t\twhile (!this.scanner.atEnd()) {", "-\t\t\t\tthis.scanner.getNextChar();", "-\t\t\t\tif (this.scanner.currentCharacter == '\\n' || this.scanner.currentCharacter == '\\r') {", "-\t\t\t\t\t// line comment is normally ended with new line", "-\t\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t\t\tthis.column = 1;", "-\t\t\t\t\tthis.line++;", "-\t\t\t\t\tthis.lastNumberOfNewLines++;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\tthis.scanner.resetTo(previousPosition, commentEnd);", "+\t\twhile (!this.scanner.atEnd()) {", "+\t\t\tpreviousPosition = this.scanner.currentPosition;", "+\t\t\tthis.scanner.getNextChar();", "+\t\t\tif (this.scanner.currentCharacter == '\\n' || this.scanner.currentCharacter == '\\r') {", "+\t\t\t\t// line comment is normally ended with new line", "+\t\t\t\tthis.column = 1;", "+\t\t\t\tthis.line++;", "+\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\tbreak;", "-\t\taddReplaceEdit(commentStart, commentEnd, buffer.toString());", "-\t\tthis.scanner.skipComments = false;", "+\t\tif (buffer.length() > 0) {", "+\t\t\taddReplaceEdit(editStart, previousPosition - 1, buffer.toString());", "+\t\t}"]}], "num": 695}
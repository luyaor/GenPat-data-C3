{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26949ba62311cef3179e631b6244b70f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "317bcdccc4f7bc3a6f2b01ad04793023", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic boolean isParameterized()", "signatureAfterChange": " \tfinal void setTypeArguments(char[][][] typeArguments)", "diff": ["-\t */", "-\tpublic boolean isParameterized() {", "-\t\treturn this.typeArguments != null && this.typeArguments.length > 0;", "-\t}", "+\t */", "+\tfinal void setTypeArguments(char[][][] typeArguments) {", "+\t\tthis.typeArguments = typeArguments;", "+\t\t// update flags", "+\t\tif (this.typeArguments != null) {", "+\t\t\tint length = this.typeArguments.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tif (this.typeArguments[i] != null && this.typeArguments[i].length > 0) {", "+\t\t\t\t\tthis.flags |= HAS_TYPE_ARGUMENTS;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a4bf1183ab6e1dba5876d7ea06ac75d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "f4a4e733ec9a6ee8e5480938f7f746aa2704ad0d", "commitAfterChange": "f775b73fdbd5c38023656e438f9ccb262941721f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["+\t\t\t\t// be resilient, still attempt resolving arguments", "+\t\t\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "+\t\t\t\tint argLength = this.typeArguments.length;", "+\t\t\t\tfor (int i = 0; i < argLength; i++) {", "+\t\t\t\t    TypeReference typeArgument = this.typeArguments[i];", "+\t\t\t\t    if (isClassScope) {", "+\t\t\t\t    \ttypeArgument.resolveType((ClassScope) scope);", "+\t\t\t\t    } else {", "+\t\t\t\t    \ttypeArgument.resolveType((BlockScope) scope, checkBounds);", "+\t\t\t\t    }", "+\t\t\t\t}\t\t\t\t"]}], "num": 58033}
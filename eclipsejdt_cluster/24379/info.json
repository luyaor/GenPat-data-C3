{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19c4567ac0a1cfb5f52bc81bb5772266", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c992281cb7ad4285fa1f5dcd2ecbba71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "c2d49e45d6b46322a9c25ee69257f9e70ab7b1fe", "commitAfterChange": "b94cfd6319609252fee755f36ab03ad2aedb4df4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement)", "signatureAfterChange": " \tpublic Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement)", "diff": ["-\t\t} else if (scope.isBoxingCompatibleWith(caseType, switchExpressionType)) {", "-\t\t\tconstantExpression.computeConversion(scope, caseType, switchExpressionType);", "+\t\t} else if (scope.isBoxingCompatibleWith(caseType, switchExpressionType)", "+\t\t\t\t\t\t|| (caseType.isBaseType()  // narrowing then boxing ?", "+\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "+\t\t\t\t\t\t\t\t&& !switchExpressionType.isBaseType()", "+\t\t\t\t\t\t\t\t&& constantExpression.isConstantValueOfTypeAssignableToType(caseType, scope.environment().computeBoxingType(switchExpressionType)))) {", "+\t\t\t// constantExpression.computeConversion(scope, caseType, switchExpressionType); - do not report boxing/unboxing conversion"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cebb96d56bf8c3a4b8d380951b6695a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ad30422de59b5093c5225e2a4599516c056303dc", "commitAfterChange": "c1c045ff9c256acaa6d98530fa4640b4cd80b7c6", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  \tpublic boolean isBoxingCompatibleWith(TypeBinding left, TypeBinding right)", "signatureAfterChange": "  \tpublic boolean isBoxingCompatibleWith(TypeBinding expressionType, TypeBinding targetType)", "diff": ["-\tpublic boolean isBoxingCompatibleWith(TypeBinding left, TypeBinding right) {", "-\t\treturn left.isBaseType() != right.isBaseType() && environment().isBoxingCompatibleWith(left, right);", "+\tpublic boolean isBoxingCompatibleWith(TypeBinding expressionType, TypeBinding targetType) {", "+\t\tLookupEnvironment environment = environment();", "+\t\tif (environment.globalOptions.sourceLevel < ClassFileConstants.JDK1_5 || expressionType.isBaseType() == targetType.isBaseType())", "+\t\t\treturn false;", "+\t", "+\t\t// check if autoboxed type is compatible", "+\t\tTypeBinding convertedType = environment.computeBoxingType(expressionType);", "+\t\treturn convertedType == targetType || convertedType.isCompatibleWith(targetType);"]}], "num": 24379}
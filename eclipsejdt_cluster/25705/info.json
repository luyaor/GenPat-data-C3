{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b4997cdd60cd0e544c08f27b2401440", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2926f6405bd524db0a2513ca9e0f3eac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "commitAfterChange": "5138a70372af4817aefdd3da44dfadf7f7557bf3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two)", "signatureAfterChange": " static boolean areReturnTypesCompatible(MethodBinding one, MethodBinding two, LookupEnvironment environment)", "diff": ["-boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two) {", "-\t// short is compatible with int, but as far as covariance is concerned, its not", "-\tif (one.returnType.isBaseType()) return false;", "+static boolean areReturnTypesCompatible(MethodBinding one, MethodBinding two, LookupEnvironment environment) {", "+\tif (one.returnType == two.returnType) return true;", "+\tif (environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t// short is compatible with int, but as far as covariance is concerned, its not", "+\t\tif (one.returnType.isBaseType()) return false;", "-\tif (!one.declaringClass.isInterface() && one.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\treturn two.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "+\t\tif (!one.declaringClass.isInterface() && one.declaringClass.id == TypeIds.T_JavaLangObject)", "+\t\t\treturn two.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\treturn one.returnType.isCompatibleWith(two.returnType);", "+\t\treturn one.returnType.isCompatibleWith(two.returnType);", "+\t} else {", "+\t\treturn areTypesEqual(one.returnType.erasure(), two.returnType.erasure());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aef02049693f7d340d93bd3493e492f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "44d8236dd4abb494fc297db79d6ea2ed8f0d620e", "commitAfterChange": "da2dbc8ee1c4e3f2d651fde4a074689a00f209fc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "diff": ["-\t// check for methods from Object", "-\tif (one.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType);", "+\tif (one.declaringClass.isClass()) {", "+\t\tif (one.declaringClass.id == TypeIds.T_JavaLangObject)", "+\t\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "+\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "+\t}", "-\t// methods from classes are always before methods from interfaces", "-\tif (one.declaringClass.isClass() || one.declaringClass.implementsInterface(substituteTwo.declaringClass, true))", "+\t// check for methods from Object, every interface inherits from Object", "+\tif (substituteTwo.declaringClass.id == TypeIds.T_JavaLangObject)", "+\t// both are interfaces, see if they're related", "+\tif (one.declaringClass.implementsInterface(substituteTwo.declaringClass, true))", "+\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4e9eed80c3b1d7bcf608496ed309a47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two)", "signatureAfterChange": " boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two)", "diff": ["-\tif (!one.declaringClass.isInterface()) {", "-\t\tif (one.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\treturn two.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\t\treturn one.returnType.isCompatibleWith(two.returnType);", "-\t}", "+\tif (!one.declaringClass.isInterface() && one.declaringClass.id == TypeIds.T_JavaLangObject)", "+\t\treturn two.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\t// check for methods from Object, every interface inherits from Object", "-\tif (two.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\treturn one.returnType.isCompatibleWith(two.returnType);", "-", "-\t// both are interfaces, see if they're related", "-\tif (one.declaringClass.implementsInterface(two.declaringClass, true))", "-\t\treturn one.returnType.isCompatibleWith(two.returnType);", "-\tif (two.declaringClass.implementsInterface(one.declaringClass, true))", "-\t\treturn two.returnType.isCompatibleWith(one.returnType);", "-", "-\t// unrelated interfaces... one must be a subtype of the other", "-\treturn one.returnType.isCompatibleWith(two.returnType)", "-\t\t|| two.returnType.isCompatibleWith(one.returnType);", "+\treturn one.returnType.isCompatibleWith(two.returnType);"]}], "num": 25705}
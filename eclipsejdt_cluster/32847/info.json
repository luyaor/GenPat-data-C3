{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1701e18093e8b436a3cce7898075fe88", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8729f305ae9eeb221c35abf42944e40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "3c339caa1e7b5ca6c56cf03ac002e58b4380b89e", "commitAfterChange": "51917a0c83743a82a23c6f16badda9326a65b40d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tprivate boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, IJavaProject project) throws JavaModelException", "signatureAfterChange": " \tprivate boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, RootInfo rootInfo)", "diff": ["-\tprivate boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, IJavaProject project) throws JavaModelException {", "-\t\tOpenable element;", "-\t\tswitch (delta.getKind()) {", "-\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\tIResource deltaRes = delta.getResource();", "-\t\t\t\telement = this.createElement(deltaRes, elementType, project);", "-\t\t\t\tif (element == null) {", "-\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "-\t\t\t\t\tthis.updateRoots(deltaRes.getFullPath(), delta);", "-\t\t\t\t\tthrow newInvalidElementType();", "-\t\t\t\t}", "-\t\t\t\tthis.updateIndex(element, delta);", "-\t\t\t\tthis.elementAdded(element, delta);", "-\t\t\t\treturn false;", "-\t\t\tcase IResourceDelta.REMOVED :", "-\t\t\t\tdeltaRes = delta.getResource();", "-\t\t\t\telement = this.createElement(deltaRes, elementType, project);", "-\t\t\t\tif (element == null) {", "-\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "-\t\t\t\t\tthis.updateRoots(deltaRes.getFullPath(), delta);", "-\t\t\t\t\tthrow newInvalidElementType();", "-\t\t\t\t}", "-\t\t\t\tthis.updateIndex(element, delta);", "-\t\t\t\tthis.elementRemoved(element, delta);", "-\t", "-\t\t\t\tif (deltaRes.getType() == IResource.PROJECT){\t\t\t", "-\t\t\t\t\t// reset the corresponding project built state, since cannot reuse if added back", "-\t\t\t\t\tthis.manager.setLastBuiltState((IProject)deltaRes, null /*no state*/);", "-\t\t\t\t}", "-\t\t\t\treturn false;", "-\t\t\tcase IResourceDelta.CHANGED :", "-\t\t\t\tint flags = delta.getFlags();", "-\t\t\t\tif ((flags & IResourceDelta.CONTENT) != 0) {", "-\t\t\t\t\t// content has changed", "-\t\t\t\t\telement = this.createElement(delta.getResource(), elementType, project);", "-\t\t\t\t\tif (element == null) throw newInvalidElementType();", "+\tprivate boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, RootInfo rootInfo) {", "+\t\ttry {", "+\t\t\tOpenable element;", "+\t\t\tswitch (delta.getKind()) {", "+\t\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\t\tIResource deltaRes = delta.getResource();", "+\t\t\t\t\telement = this.createElement(deltaRes, elementType, rootInfo);", "+\t\t\t\t\tif (element == null) {", "+\t\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "+\t\t\t\t\t\tthis.updateRoots(deltaRes.getFullPath(), delta);", "+\t\t\t\t\t\tthrow newInvalidElementType();", "+\t\t\t\t\t}", "-\t\t\t\t\tthis.contentChanged(element, delta);", "-\t\t\t\t} else if (elementType == IJavaElement.JAVA_PROJECT) {", "-\t\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {", "-\t\t\t\t\t\t// project has been opened or closed", "-\t\t\t\t\t\tIProject res = (IProject)delta.getResource();", "-\t\t\t\t\t\telement = this.createElement(res, elementType, project);", "-\t\t\t\t\t\tif (element == null) {", "-\t\t\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "-\t\t\t\t\t\t\tthis.updateRoots(res.getFullPath(), delta);", "-\t\t\t\t\t\t\tthrow newInvalidElementType();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (res.isOpen()) {", "-\t\t\t\t\t\t\tif (this.hasJavaNature(res)) {", "-\t\t\t\t\t\t\t\tthis.elementAdded(element, delta);", "-\t\t\t\t\t\t\t\tthis.indexManager.indexAll(res);", "+\t\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "+\t\t\t\t\treturn false;", "+\t\t\t\tcase IResourceDelta.REMOVED :", "+\t\t\t\t\tdeltaRes = delta.getResource();", "+\t\t\t\t\telement = this.createElement(deltaRes, elementType, rootInfo);", "+\t\t\t\t\tif (element == null) {", "+\t\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "+\t\t\t\t\t\tthis.updateRoots(deltaRes.getFullPath(), delta);", "+\t\t\t\t\t\tthrow newInvalidElementType();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.updateIndex(element, delta);", "+\t\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "+\t\t", "+\t\t\t\t\tif (deltaRes.getType() == IResource.PROJECT){\t\t\t", "+\t\t\t\t\t\t// reset the corresponding project built state, since cannot reuse if added back", "+\t\t\t\t\t\tthis.manager.setLastBuiltState((IProject)deltaRes, null /*no state*/);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\tcase IResourceDelta.CHANGED :", "+\t\t\t\t\tint flags = delta.getFlags();", "+\t\t\t\t\tif ((flags & IResourceDelta.CONTENT) != 0) {", "+\t\t\t\t\t\t// content has changed", "+\t\t\t\t\t\telement = this.createElement(delta.getResource(), elementType, rootInfo);", "+\t\t\t\t\t\tif (element == null) throw newInvalidElementType();", "+\t\t\t\t\t\tthis.updateIndex(element, delta);", "+\t\t\t\t\t\tthis.contentChanged(element, delta);", "+\t\t\t\t\t} else if (elementType == IJavaElement.JAVA_PROJECT) {", "+\t\t\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {", "+\t\t\t\t\t\t\t// project has been opened or closed", "+\t\t\t\t\t\t\tIProject res = (IProject)delta.getResource();", "+\t\t\t\t\t\t\telement = this.createElement(res, elementType, rootInfo);", "+\t\t\t\t\t\t\tif (element == null) {", "+\t\t\t\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "+\t\t\t\t\t\t\t\tthis.updateRoots(res.getFullPath(), delta);", "+\t\t\t\t\t\t\t\tthrow newInvalidElementType();", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (res.isOpen()) {", "+\t\t\t\t\t\t\t\tif (this.hasJavaNature(res)) {", "+\t\t\t\t\t\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\t\tthis.indexManager.indexAll(res);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\t\t\t\t\t\tboolean wasJavaProject = javaModel.findJavaProject(res) != null;", "+\t\t\t\t\t\t\t\tif (wasJavaProject) {", "+\t\t\t\t\t\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\t\tthis.indexManager.discardJobs(element.getElementName());", "+\t\t\t\t\t\t\t\t\tthis.indexManager.removeIndexFamily(res.getFullPath());", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn false; // when a project is open/closed don't process children", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif ((flags & IResourceDelta.DESCRIPTION) != 0) {", "+\t\t\t\t\t\t\tIProject res = (IProject)delta.getResource();", "-\t\t\t\t\t\t\tif (wasJavaProject) {", "-\t\t\t\t\t\t\t\tthis.elementRemoved(element, delta);", "-\t\t\t\t\t\t\t\tthis.indexManager.discardJobs(element.getElementName());", "-\t\t\t\t\t\t\t\tthis.indexManager.removeIndexFamily(res.getFullPath());", "-\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tboolean isJavaProject = this.hasJavaNature(res);", "+\t\t\t\t\t\t\tif (wasJavaProject != isJavaProject) {", "+\t\t\t\t\t\t\t\t// project's nature has been added or removed", "+\t\t\t\t\t\t\t\telement = this.createElement(res, elementType, rootInfo);", "+\t\t\t\t\t\t\t\tif (element == null) throw newInvalidElementType(); // note its resources are still visible as roots to other projects", "+\t\t\t\t\t\t\t\tif (isJavaProject) {", "+\t\t\t\t\t\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\t\tthis.indexManager.indexAll(res);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\t\tthis.indexManager.discardJobs(element.getElementName());", "+\t\t\t\t\t\t\t\t\tthis.indexManager.removeIndexFamily(res.getFullPath());", "+\t\t\t\t\t\t\t\t\t// reset the corresponding project built state, since cannot reuse if added back", "+\t\t\t\t\t\t\t\t\tthis.manager.setLastBuiltState(res, null /*no state*/);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn false; // when a project's nature is added/removed don't process children", "-\t\t\t\t\t\treturn false; // when a project is open/closed don't process children", "-\t\t\t\t\tif ((flags & IResourceDelta.DESCRIPTION) != 0) {", "-\t\t\t\t\t\tIProject res = (IProject)delta.getResource();", "-\t\t\t\t\t\tJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\t\t\t\t\tboolean wasJavaProject = javaModel.findJavaProject(res) != null;", "-\t\t\t\t\t\tboolean isJavaProject = this.hasJavaNature(res);", "-\t\t\t\t\t\tif (wasJavaProject != isJavaProject) {", "-\t\t\t\t\t\t\t// project's nature has been added or removed", "-\t\t\t\t\t\t\telement = this.createElement(res, elementType, project);", "-\t\t\t\t\t\t\tif (element == null) throw newInvalidElementType(); // note its resources are still visible as roots to other projects", "-\t\t\t\t\t\t\tif (isJavaProject) {", "-\t\t\t\t\t\t\t\tthis.elementAdded(element, delta);", "-\t\t\t\t\t\t\t\tthis.indexManager.indexAll(res);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthis.elementRemoved(element, delta);", "-\t\t\t\t\t\t\t\tthis.indexManager.discardJobs(element.getElementName());", "-\t\t\t\t\t\t\t\tthis.indexManager.removeIndexFamily(res.getFullPath());", "-\t\t\t\t\t\t\t\t// reset the corresponding project built state, since cannot reuse if added back", "-\t\t\t\t\t\t\t\tthis.manager.setLastBuiltState(res, null /*no state*/);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn false; // when a project's nature is added/removed don't process children", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn true;", "+\t\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\treturn true;", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// non java resource or invalid project", "+\t\t\treturn false;", "-\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d65bf1dc64aea7c38f30f7b7822cc9e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "6cc0aa87dbd790892e0ef6bdcfc8cdf936879050", "commitAfterChange": "a41b2925160c65a681df4e0da0f3c0fa53a70e25", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprivate boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, RootInfo rootInfo)", "signatureAfterChange": " \tprivate boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, RootInfo rootInfo)", "diff": ["-\t\ttry {", "-\t\t\tOpenable element;", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\tIResource deltaRes = delta.getResource();", "-\t\t\t\t\telement = this.createElement(deltaRes, elementType, rootInfo);", "-\t\t\t\t\tif (element == null) {", "-\t\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "-\t\t\t\t\t\tthis.updateRoots(deltaRes.getFullPath(), delta);", "-\t\t\t\t\t\tthrow newInvalidElementType();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.updateIndex(element, delta);", "-\t\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "+\t\tOpenable element;", "+\t\tswitch (delta.getKind()) {", "+\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\tIResource deltaRes = delta.getResource();", "+\t\t\t\telement = this.createElement(deltaRes, elementType, rootInfo);", "+\t\t\t\tif (element == null) {", "+\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "+\t\t\t\t\tthis.updateRoots(deltaRes.getFullPath(), delta);", "-\t\t\t\tcase IResourceDelta.REMOVED :", "-\t\t\t\t\tdeltaRes = delta.getResource();", "-\t\t\t\t\telement = this.createElement(deltaRes, elementType, rootInfo);", "-\t\t\t\t\tif (element == null) {", "-\t\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "-\t\t\t\t\t\tthis.updateRoots(deltaRes.getFullPath(), delta);", "-\t\t\t\t\t\tthrow newInvalidElementType();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.updateIndex(element, delta);", "-\t\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "-\t\t", "-\t\t\t\t\tif (deltaRes.getType() == IResource.PROJECT){\t\t\t", "-\t\t\t\t\t\t// reset the corresponding project built state, since cannot reuse if added back", "-\t\t\t\t\t\tthis.manager.setLastBuiltState((IProject)deltaRes, null /*no state*/);", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.updateIndex(element, delta);", "+\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "+\t\t\t\treturn false;", "+\t\t\tcase IResourceDelta.REMOVED :", "+\t\t\t\tdeltaRes = delta.getResource();", "+\t\t\t\telement = this.createElement(deltaRes, elementType, rootInfo);", "+\t\t\t\tif (element == null) {", "+\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "+\t\t\t\t\tthis.updateRoots(deltaRes.getFullPath(), delta);", "-\t\t\t\tcase IResourceDelta.CHANGED :", "-\t\t\t\t\tint flags = delta.getFlags();", "-\t\t\t\t\tif ((flags & IResourceDelta.CONTENT) != 0) {", "-\t\t\t\t\t\t// content has changed", "-\t\t\t\t\t\telement = this.createElement(delta.getResource(), elementType, rootInfo);", "-\t\t\t\t\t\tif (element == null) throw newInvalidElementType();", "-\t\t\t\t\t\tthis.updateIndex(element, delta);", "-\t\t\t\t\t\tthis.contentChanged(element, delta);", "-\t\t\t\t\t} else if (elementType == IJavaElement.JAVA_PROJECT) {", "-\t\t\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {", "-\t\t\t\t\t\t\t// project has been opened or closed", "-\t\t\t\t\t\t\tIProject res = (IProject)delta.getResource();", "-\t\t\t\t\t\t\telement = this.createElement(res, elementType, rootInfo);", "-\t\t\t\t\t\t\tif (element == null) {", "-\t\t\t\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "-\t\t\t\t\t\t\t\tthis.updateRoots(res.getFullPath(), delta);", "-\t\t\t\t\t\t\t\tthrow newInvalidElementType();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (res.isOpen()) {", "-\t\t\t\t\t\t\t\tif (JavaProject.hasJavaNature(res)) {", "-\t\t\t\t\t\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "-\t\t\t\t\t\t\t\t\tthis.indexManager.indexAll(res);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\t\t\t\t\t\t\tboolean wasJavaProject = javaModel.findJavaProject(res) != null;", "-\t\t\t\t\t\t\t\tif (wasJavaProject) {", "-\t\t\t\t\t\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "-\t\t\t\t\t\t\t\t\tthis.indexManager.discardJobs(element.getElementName());", "-\t\t\t\t\t\t\t\t\tthis.indexManager.removeIndexFamily(res.getFullPath());", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn false; // when a project is open/closed don't process children", "+\t\t\t\t}", "+\t\t\t\tthis.updateIndex(element, delta);", "+\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "+\t", "+\t\t\t\tif (deltaRes.getType() == IResource.PROJECT){\t\t\t", "+\t\t\t\t\t// reset the corresponding project built state, since cannot reuse if added back", "+\t\t\t\t\tthis.manager.setLastBuiltState((IProject)deltaRes, null /*no state*/);", "+\t\t\t\t}", "+\t\t\t\treturn false;", "+\t\t\tcase IResourceDelta.CHANGED :", "+\t\t\t\tint flags = delta.getFlags();", "+\t\t\t\tif ((flags & IResourceDelta.CONTENT) != 0) {", "+\t\t\t\t\t// content has changed", "+\t\t\t\t\telement = this.createElement(delta.getResource(), elementType, rootInfo);", "+\t\t\t\t\tif (element == null) return false;", "+\t\t\t\t\tthis.updateIndex(element, delta);", "+\t\t\t\t\tthis.contentChanged(element, delta);", "+\t\t\t\t} else if (elementType == IJavaElement.JAVA_PROJECT) {", "+\t\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {", "+\t\t\t\t\t\t// project has been opened or closed", "+\t\t\t\t\t\tIProject res = (IProject)delta.getResource();", "+\t\t\t\t\t\telement = this.createElement(res, elementType, rootInfo);", "+\t\t\t\t\t\tif (element == null) {", "+\t\t\t\t\t\t\t// resource might be containing shared roots (see bug 19058)", "+\t\t\t\t\t\t\tthis.updateRoots(res.getFullPath(), delta);", "+\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\tif ((flags & IResourceDelta.DESCRIPTION) != 0) {", "-\t\t\t\t\t\t\tIProject res = (IProject)delta.getResource();", "+\t\t\t\t\t\tif (res.isOpen()) {", "+\t\t\t\t\t\t\tif (JavaProject.hasJavaNature(res)) {", "+\t\t\t\t\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\tthis.indexManager.indexAll(res);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(res);", "-\t\t\t\t\t\t\tif (wasJavaProject != isJavaProject) {", "-\t\t\t\t\t\t\t\t// project's nature has been added or removed", "-\t\t\t\t\t\t\t\telement = this.createElement(res, elementType, rootInfo);", "-\t\t\t\t\t\t\t\tif (element == null) throw newInvalidElementType(); // note its resources are still visible as roots to other projects", "-\t\t\t\t\t\t\t\tif (isJavaProject) {", "-\t\t\t\t\t\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "-\t\t\t\t\t\t\t\t\tthis.indexManager.indexAll(res);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "-\t\t\t\t\t\t\t\t\tthis.indexManager.discardJobs(element.getElementName());", "-\t\t\t\t\t\t\t\t\tthis.indexManager.removeIndexFamily(res.getFullPath());", "-\t\t\t\t\t\t\t\t\t// reset the corresponding project built state, since cannot reuse if added back", "-\t\t\t\t\t\t\t\t\tthis.manager.setLastBuiltState(res, null /*no state*/);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn false; // when a project's nature is added/removed don't process children", "+\t\t\t\t\t\t\tif (wasJavaProject) {", "+\t\t\t\t\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\tthis.indexManager.discardJobs(element.getElementName());", "+\t\t\t\t\t\t\t\tthis.indexManager.removeIndexFamily(res.getFullPath());", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\treturn false; // when a project is open/closed don't process children", "-\t\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// non java resource or invalid project", "-\t\t\treturn false;", "+\t\t\t\t\tif ((flags & IResourceDelta.DESCRIPTION) != 0) {", "+\t\t\t\t\t\tIProject res = (IProject)delta.getResource();", "+\t\t\t\t\t\tJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\t\t\t\tboolean wasJavaProject = javaModel.findJavaProject(res) != null;", "+\t\t\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(res);", "+\t\t\t\t\t\tif (wasJavaProject != isJavaProject) {", "+\t\t\t\t\t\t\t// project's nature has been added or removed", "+\t\t\t\t\t\t\telement = this.createElement(res, elementType, rootInfo);", "+\t\t\t\t\t\t\tif (element == null) return false; // note its resources are still visible as roots to other projects", "+\t\t\t\t\t\t\tif (isJavaProject) {", "+\t\t\t\t\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\tthis.indexManager.indexAll(res);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\tthis.indexManager.discardJobs(element.getElementName());", "+\t\t\t\t\t\t\t\tthis.indexManager.removeIndexFamily(res.getFullPath());", "+\t\t\t\t\t\t\t\t// reset the corresponding project built state, since cannot reuse if added back", "+\t\t\t\t\t\t\t\tthis.manager.setLastBuiltState(res, null /*no state*/);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn false; // when a project's nature is added/removed don't process children", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\treturn true;"]}], "num": 32847}
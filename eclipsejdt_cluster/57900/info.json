{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3863a16b3465a05e577af0e2897709e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc65f680a22655d44075f15a81a6712", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      \tReferenceBinding resolve()", "signatureAfterChange": "      \tReferenceBinding resolve()", "diff": ["-\t\tBinaryTypeBinding.resolveType(this.genericType, this.environment, null, 0);", "+\t\tBinaryTypeBinding.resolveType(this.genericType, this.environment, null, 0); // do not assign to genericType field, since will return a raw type", "+\t\t\t\tthis.bound = BinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);", "+\t        \tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "+\t\t\t\t\tthis.otherBounds[i]= BinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);", "+\t        \t}", "+\t\t\t\tbreak;", "-\t\t\t\tBinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);", "+\t\t\t\tthis.bound = BinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3fb8868c963d3ca1bc415c45485367", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 24, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\t\tmethod.returnType = resolveType(method.returnType);", "+\t\tmethod.returnType = resolveType(method.returnType, this.environment, null, 0);", "-\t\tmethod.parameters[i] = resolveType(method.parameters[i]);", "+\t\tmethod.parameters[i] = resolveType(method.parameters[i], this.environment, null, 0);", "-\t\tif (method.thrownExceptions[i] instanceof UnresolvedReferenceBinding)", "-\t\t\tmethod.thrownExceptions[i] = ((UnresolvedReferenceBinding) method.thrownExceptions[i]).resolve(environment);", "+\t\tmethod.thrownExceptions[i] = resolveType(method.thrownExceptions[i], this.environment, true);", "+\tfor (int i = method.typeVariables.length; --i >= 0;)", "+\t\tresolveTypesFor(method.typeVariables[i]);", "+}"]}], "num": 57900}
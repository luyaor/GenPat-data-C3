{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d32877cc669d5b132a8cd5453562b9b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7430f903e150c962bff3747900b9694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "a0eadc71777a6a16a10404c20bca3abf02882943", "commitAfterChange": "3f2164bd983652306103e9742bf42928f819f872", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprivate AST(int level)", "signatureAfterChange": " \tprivate AST(int level)", "diff": ["-\t\tswitch (level) {", "-\t\t\tcase AST.JLS3:", "-\t\t\tcase AST.JLS2:", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\tthrow new IllegalArgumentException();", "+\t\tif ((level != AST.JLS2)", "+\t\t\t&& (level != AST.JLS3)) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\tthis.apiLevel = level;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8d3ead3662b4e7b5b8d8ed721c71247", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "0e353f705bb9830cc1fd109d5dc51c65ea6af7fc", "commitAfterChange": "5bb0a260de6355c81b467c30181276237e1f1b45", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public static void searchAllPossibleSubTypes( \tIWorkspace workbench, \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException, CoreException", "signatureAfterChange": "  public static void searchAllPossibleSubTypes( \tIWorkspace workbench, \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException, CoreException", "diff": ["-\t\t\t(progressMonitor == null || ++ticks > MAXTICKS) ? null : new SubProgressMonitor(progressMonitor, 1));", "+\t\t\tnull); // don't pass a sub progress monitor as this is too costly for deep hierarchies", "+\t\tif (progressMonitor != null && ++ticks <= MAXTICKS) {", "+\t\t\tprogressMonitor.worked(1);", "+\t\t}"]}], "num": 69485}
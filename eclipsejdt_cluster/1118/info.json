{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8e1cab4320ebb1e628a7a95f56241b7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "084c2e132cdd966c35cd3ea09f756524", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "03fc554cf68f1f36f2dc500ea189964375922c0b", "commitAfterChange": "97a51de589d597058f0699be9a25a3de27447184", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void resolve(CompilationUnitScope unitScope)", "signatureAfterChange": " \tpublic void resolve(CompilationUnitScope unitScope)", "diff": ["+\t\tif ((this.bits & ASTNode.ResolveJavadoc) == 0) {", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c73db0df29c7e0ef66aa9a268ffbd36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "4f899ed65a6db0134a5169430983a39f00dbaf4c", "commitAfterChange": "302ba575da16bb6fb5610129dd618d637661239d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["-\tscope.problemReporter().typeMismatchError(expressionType, methodType, this.expression, null);", "+\tif ((methodType.tagBits & TagBits.HasMissingType) == 0) {", "+\t\t// no need to complain if return type was missing (avoid secondary error : 220967)", "+\t\tscope.problemReporter().typeMismatchError(expressionType, methodType, this.expression, null);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "653ef75d2e5ec828051c5cf81d29e3d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "03fc554cf68f1f36f2dc500ea189964375922c0b", "commitAfterChange": "97a51de589d597058f0699be9a25a3de27447184", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-", "+\t\tif ((this.bits & ASTNode.ResolveJavadoc) == 0) {", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72ca054a7cab3167538dc67428321480", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void boundCheck(Scope scope, TypeReference[] argumentReferences)", "signatureAfterChange": " \tpublic void boundCheck(Scope scope, TypeReference[] argumentReferences)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(this.arguments[i], typeVariables[i], this.type, argumentReferences[i]);", "+\t\t\t\t    \tif ((this.arguments[i].tagBits & TagBits.HasMissingType) == 0) {", "+\t\t\t\t    \t\t// do not report secondary error, if type reference already got complained against", "+\t\t\t\t\t\t\tscope.problemReporter().typeMismatchError(this.arguments[i], typeVariables[i], this.type, argumentReferences[i]);", "+\t\t\t\t    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73a170128865233da6238ec6a1067188", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "0bc4eaf2332f76add87890a8d0862524c059cd26", "commitAfterChange": "e363411076942736fed0971f36622bfda7287aa7", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public boolean hasNonNullDefaultFor(int location, boolean useTypeAnnotations)", "signatureAfterChange": " public boolean hasNonNullDefaultFor(int location, boolean useTypeAnnotations)", "diff": ["+\tif ((this.modifiers & ExtraCompilerModifiers.AccIsDefaultConstructor) != 0)", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e23132661a178897119acf86aaffe0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "51bd63a22899c3914a4700dcdf97ec58937533c9", "commitAfterChange": "84f1aab618cdc74f8c6aecebdc0fb845b80d6368", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " protected void consumeMemberValuePair()", "signatureAfterChange": " protected void consumeMemberValuePair()", "diff": ["-\tthis.patternLocator.match((MemberValuePair) this.astStack[this.astPtr], this.nodeSet);", "+\tif ((this.patternFineGrain & ~IJavaSearchConstants.METHOD_REFERENCE_EXPRESSION) != 0) {", "+\t\tthis.patternLocator.match((MemberValuePair) this.astStack[this.astPtr], this.nodeSet);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ea385a3127a09ebd3fc738df593b931", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\t\t\tif ((castType.tagBits & TagBits.HasMissingType) == 0) { // no complaint if secondary error", "+\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4eba4ce52a3cd0a88f66ea3a4337257", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "03fc554cf68f1f36f2dc500ea189964375922c0b", "commitAfterChange": "97a51de589d597058f0699be9a25a3de27447184", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void resolve(ClassScope scope)", "signatureAfterChange": " \tpublic void resolve(ClassScope scope)", "diff": ["+\t\tif ((this.bits & ASTNode.ResolveJavadoc) == 0) {", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3049a0cb2d189625aca9d8ecf815913", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "bdd2caf7038fc61f1afd6b5818fa3cecae49a2c7", "commitAfterChange": "901110738b530761a9230c7cdee9da8743b87763", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["-\t\tif (leftStatus == FlowInfo.NON_NULL && rightStatus == FlowInfo.NULL) {", "-\t\t\tleftNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.left, checkEquality);", "-\t\t} else if (leftStatus == FlowInfo.NULL && rightStatus == FlowInfo.NON_NULL) {", "-\t\t\trightNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.right, checkEquality);", "+\t\tif ((flowContext.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING_MASK) == 0) {", "+\t\t\tif (leftStatus == FlowInfo.NON_NULL && rightStatus == FlowInfo.NULL) {", "+\t\t\t\tleftNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.left, checkEquality);", "+\t\t\t} else if (leftStatus == FlowInfo.NULL && rightStatus == FlowInfo.NON_NULL) {", "+\t\t\t\trightNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.right, checkEquality);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bccab391dd0024777ce766fa0fdbc348", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "8ad7ea4a3e807d9d57eeeda9a3a7bd6598dfbdb1", "commitAfterChange": "b7a41e13e2a80300225883c3cc5ff3990406ce0a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tReferenceBinding resolve()", "signatureAfterChange": "  \tReferenceBinding resolve()", "diff": ["-\t\t\t\tthis.environment.problemReporter.nonGenericTypeCannotBeParameterized(0, null, resolvedType, this.arguments);", "-\t\t\t\treturn this; // cannot reach here as AbortCompilation is thrown", "+\t\t\t\tif ((resolvedType.tagBits & TagBits.HasMissingType) == 0) {", "+\t\t\t\t\tthis.environment.problemReporter.nonGenericTypeCannotBeParameterized(0, null, resolvedType, this.arguments);", "+\t\t\t\t}", "+\t\t\t\treturn this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eea0aabb4521fa0514f0596ae2e0a2ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "a3c940c9ba4fb947ed601c181e38c98afc79ec41", "commitAfterChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "methodNumberBeforeChange": 274, "methodNumberAfterChange": 274, "signatureBeforeChange": "  public void localVariableRedundantNullAssignment(LocalVariableBinding local, ASTNode location)", "signatureAfterChange": "  public void localVariableRedundantNullAssignment(LocalVariableBinding local, ASTNode location)", "diff": ["+\tif ((location.bits & ASTNode.FirstAssignmentToLocal) != 0) // https://bugs.eclipse.org/338303 - Warning about Redundant assignment conflicts with definite assignment", "+\t\treturn;"]}], "num": 1118}
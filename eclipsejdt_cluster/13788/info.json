{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3013478e270fa8a14903b419720c1675", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "346f65f6d22601d5c92f715cfa50df6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "576e848d928ff985089b0f6379553cd8a923a448", "commitAfterChange": "0bb31250e6dfa81e101547a2ec18bc13a11477d7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprotected CompilationUnitProblemFinder( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean creatingAST, \t\tboolean statementsRecovery)", "signatureAfterChange": " \tprotected CompilationUnitProblemFinder( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean creatingAST, \t\tboolean statementsRecovery)", "diff": ["-\t\t\tcreatingAST/*parse literal expressions as constants if creating ast*/,", "-\t\t\tcreatingAST/*store annotations in the bindings if creating ast*/,", "-\t\t\tstatementsRecovery/*perform statements recovery during parse if creating ast*/", "+\t\t\t!creatingAST/*parse literal expressions as constants only if not creating a DOM AST*/,", "+\t\t\tcreatingAST/*store annotations in the bindings if creating a DOM AST*/,", "+\t\t\tstatementsRecovery/*perform statements recovery during parse if creating a DOM AST*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fa06e4eb5f0474da21a6a3a36fb04f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprotected CompilationUnitProblemFinder( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean creatingAST, \t\tboolean statementsRecovery)", "signatureAfterChange": " \tprotected CompilationUnitProblemFinder( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tCompilerOptions compilerOptions, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory)", "diff": ["-\t\tMap settings,", "+\t\tCompilerOptions compilerOptions,", "-\t\tIProblemFactory problemFactory,", "-\t\tboolean creatingAST,", "-\t\tboolean statementsRecovery) {", "+\t\tIProblemFactory problemFactory) {", "-\t\t\tsettings,", "+\t\t\tcompilerOptions,", "-\t\t\tproblemFactory,", "-\t\t\t!creatingAST/*parse literal expressions as constants only if not creating a DOM AST*/,", "-\t\t\tcreatingAST/*store annotations in the bindings if creating a DOM AST*/,", "-\t\t\tstatementsRecovery/*perform statements recovery during parse if creating a DOM AST*/", "+\t\t\tproblemFactory"]}], "num": 13788}
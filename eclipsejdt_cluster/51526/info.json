{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "964ad650e3c712ff869f3d6a66da52cd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59ad49469ee203e42a87babf57f12727", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "fe0589daa77c35c2d529f4eb28b4a64d2d819b86", "commitAfterChange": "c06555674038b0a829a0207484cc16e77bccb8ed", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r public void setOption(ConfigurableOption setting)", "diff": ["-\t//String value = setting.getValue();\r", "-\t\tsetMaxLineLength(Integer.parseInt(setting.getValue()));\r", "-\t}else if(optionID.equals(componentName+\".styleCompactAssignment\"/*nonNLS*/)){\r", "+\t\ttry {\r", "+\t\t\tsetMaxLineLength(Integer.parseInt(setting.getValue()));\r", "+\t\t} catch(NumberFormatException e){\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName+\".compactAssignment\"/*nonNLS*/)){\r", "-\t\tsetTabSize(Integer.parseInt(setting.getValue()));\r", "+\t\ttry {\r", "+\t\t\tsetTabSize(Integer.parseInt(setting.getValue()));\r", "+\t\t} catch(NumberFormatException e){\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9608b9a747099321bdd68c85050fe9f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  protected void report(SearchMatch match) throws CoreException", "signatureAfterChange": "  protected void report(SearchMatch match) throws CoreException", "diff": ["-\t\tif (this.parser != null && match.getOffset() > 0 && match.getLength() > 0 && !(match.getElement() instanceof BinaryMember)) {", "-\t\t\tString selection = new String(this.parser.scanner.source, match.getOffset(), match.getLength());", "-\t\t\tSystem.out.println(\"\\tSelection: -->\" + selection + \"<--\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\ttry {", "+\t\t\tif (this.parser != null && match.getOffset() > 0 && match.getLength() > 0 && !(match.getElement() instanceof BinaryMember)) {", "+\t\t\t\tString selection = new String(this.parser.scanner.source, match.getOffset(), match.getLength());", "+\t\t\t\tSystem.out.println(\"\\tSelection: -->\" + selection + \"<--\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t}", "+\t\t} catch (Exception e) {", "+\t\t\t// it's just for debug purposes... ignore all exceptions in this area", "-\t\tSystem.out.println(\"\\tJava element: \" + ((JavaElement)match.getElement()).toStringWithAncestors()); //$NON-NLS-1$", "+\t\ttry {", "+\t\t\tSystem.out.println(\"\\tJava element: \" + ((JavaElement)match.getElement()).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t} catch (Exception e) {", "+\t\t\t// it's just for debug purposes... ignore all exceptions in this area", "+\t\t}"]}], "num": 51526}
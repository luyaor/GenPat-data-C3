{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efbaac90ebcb0ff63d910fa7d38fb161", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2926f6405bd524db0a2513ca9e0f3eac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "commitAfterChange": "5138a70372af4817aefdd3da44dfadf7f7557bf3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two)", "signatureAfterChange": " static boolean areReturnTypesCompatible(MethodBinding one, MethodBinding two, LookupEnvironment environment)", "diff": ["-boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two) {", "-\t// short is compatible with int, but as far as covariance is concerned, its not", "-\tif (one.returnType.isBaseType()) return false;", "+static boolean areReturnTypesCompatible(MethodBinding one, MethodBinding two, LookupEnvironment environment) {", "+\tif (one.returnType == two.returnType) return true;", "+\tif (environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t// short is compatible with int, but as far as covariance is concerned, its not", "+\t\tif (one.returnType.isBaseType()) return false;", "-\tif (!one.declaringClass.isInterface() && one.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\treturn two.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "+\t\tif (!one.declaringClass.isInterface() && one.declaringClass.id == TypeIds.T_JavaLangObject)", "+\t\t\treturn two.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\treturn one.returnType.isCompatibleWith(two.returnType);", "+\t\treturn one.returnType.isCompatibleWith(two.returnType);", "+\t} else {", "+\t\treturn areTypesEqual(one.returnType.erasure(), two.returnType.erasure());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da8983681d33a8484956d9852d0f3e3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "167e0a563c0934d033fb860086f34607180326b0", "commitAfterChange": "27ab9447fb0786cab5fb449fe90ffd060e3fc9d0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " MethodBinding computeSubstituteMethod(MethodBinding inheritedMethod, MethodBinding currentMethod)", "signatureAfterChange": " MethodBinding computeSubstituteMethod(MethodBinding inheritedMethod, MethodBinding currentMethod)", "diff": ["-\t\t\tif (Scope.substitute(substitute, inheritedTypeVariable.superclass) != typeVariable.superclass)  ", "+\t\t\tif (typeVariable.firstBound == inheritedTypeVariable.firstBound) {", "+\t\t\t\tif (typeVariable.firstBound == null)", "+\t\t\t\t\tcontinue; // both are null", "+\t\t\t} else if (typeVariable.firstBound != null && inheritedTypeVariable.firstBound != null) {", "+\t\t\t\tif (typeVariable.firstBound.isClass() != inheritedTypeVariable.firstBound.isClass())", "+\t\t\t\t\treturn inheritedMethod; // not a match", "+\t\t\t}", "+\t\t\tif (Scope.substitute(substitute, inheritedTypeVariable.superclass) != typeVariable.superclass)"]}], "num": 9540}
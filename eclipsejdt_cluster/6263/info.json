{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9357b96fd9b293e36626f1648d8e153b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0237643ecc8780550808b9cf9c9edec5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "e30351551cacd61d107b0f2c8e2d961ea6077c69", "commitAfterChange": "65c816d51274509d33505e25446def26adbebd32", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\tTypeBinding inheritedReturnType = originalInherited.returnType.leafComponentType();", "-\t\tTypeBinding returnType = currentMethod.returnType.leafComponentType();", "-\t\tswitch (inheritedReturnType.bindingType()) {", "-\t\t\tcase Binding.RAW_TYPE :", "-\t\t\t\tif (returnType.isParameterizedType() && hasBoundedParameters((ParameterizedTypeBinding) returnType)) {", "-\t\t\t\t\tproblemReporter(currentMethod).methodNameClash(currentMethod, originalInherited);", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\tswitch (originalInherited.returnType.leafComponentType().bindingType()) {", "-\t\t\t\tif (!returnType.isParameterizedType())", "+\t\t\t\tif (!currentMethod.returnType.leafComponentType().isParameterizedType())", "-\t\t\t\tif (!returnType.isTypeVariable())", "+\t\t\t\tif (!currentMethod.returnType.leafComponentType().isTypeVariable())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a796f41960c0b611bcdc9e3842b2c8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "commitAfterChange": "c60de4437b4d035451e0f92e32cb7ffd4a65170d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private void fixSupertypeBindings()", "signatureAfterChange": " private void fixSupertypeBindings()", "diff": ["-\t\t\t\tif (superclass instanceof ProblemReferenceBinding) {", "-\t\t\t\t\tsuperclass = ((ProblemReferenceBinding) superclass).closestMatch();", "-\t\t\t\t}", "+\t\t\t\t\tsuperclass = superclass.closestMatch();", "+\t\t\t\t}", "+\t\t\t\tif (superclass instanceof ReferenceBinding) {", "-\t\t\t\t\t\tReferenceBinding superInterface = (ReferenceBinding) superInterfaces[i].resolvedType;", "+\t\t\t\t\t\tTypeBinding superInterface = superInterfaces[i].resolvedType;", "-\t\t\t\t\t\t\tif (!superInterface.isValidBinding()) {", "-\t\t\t\t\t\t\t\tTypeBinding closestMatch = superInterface.closestMatch();", "-\t\t\t\t\t\t\t\tif (closestMatch instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\tsuperInterface = (ReferenceBinding) closestMatch;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tsuperInterface = null;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (superInterface != null) {", "-\t\t\t\t\t\t\t\t// ensure we are not creating a cycle (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=215681 )", "-\t\t\t\t\t\t\t\tif (!(subTypeOfType(superInterface, typeBinding))) {", "-\t\t\t\t\t\t\t\t\tinterfaceBindings[index++] = superInterface;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tsuperInterface = superInterface.closestMatch();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (superInterface instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t// ensure we are not creating a cycle (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=215681 )", "+\t\t\t\t\t\t\tif (!(subTypeOfType((ReferenceBinding) superInterface, typeBinding))) {", "+\t\t\t\t\t\t\t\tinterfaceBindings[index++] = (ReferenceBinding) superInterface;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d38eeca5d145e5eb4b58c1c2a1a72f48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "2bde2b2ad3abd756d3b6c192c1f99c1def67623d", "commitAfterChange": "e0d2ac0f68410ce5e24c00863a7757362b38f650", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void initializeRoots()", "signatureAfterChange": "  \tpublic void initializeRoots()", "diff": ["-\t\t// remember roots infos as old roots infos", "-\t\tHashMap newOldRoots;", "-\t\tHashMap newOldOtherRoots;", "-\t\tsynchronized(this) {", "-\t\t\tnewOldRoots = this.roots == null ? new HashMap() : this.roots;", "-\t\t\tnewOldOtherRoots = this.otherRoots == null ? new HashMap() : this.otherRoots;", "-\t\t\t// recompute root infos only if necessary", "-\t\t\tif (!this.rootsAreStale) {", "-\t\t\t\tthis.oldRoots = newOldRoots;", "-\t\t\t\tthis.oldOtherRoots = newOldOtherRoots;", "+\t\t// recompute root infos only if necessary", "+\t\tHashMap newRoots = null;", "+\t\tHashMap newOtherRoots = null;", "+\t\tHashMap newSourceAttachments = null;", "+\t\tif (this.rootsAreStale) {", "+", "+\t\t\tnewRoots = new HashMap();", "+\t\t\tnewOtherRoots = new HashMap();", "+\t\t\tnewSourceAttachments = new HashMap();", "+\t", "+\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\tIJavaProject[] projects;", "+\t\t\ttry {", "+\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// nothing can be done", "-\t\t}", "-\t\t", "-\t\tHashMap newRoots = new HashMap();", "-\t\tHashMap newOtherRoots = new HashMap();", "-\t\tHashMap newSourceAttachments = new HashMap();", "-", "-\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\tIJavaProject[] projects;", "-\t\ttry {", "-\t\t\tprojects = model.getJavaProjects();", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// nothing can be done", "-\t\t\treturn;", "-\t\t}", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\tIJavaProject project = projects[i];", "-\t\t\tIClasspathEntry[] classpath;", "-\t\t\ttry {", "-\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// continue with next project", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "-\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\t", "-\t\t\t\t// root path", "-\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\tif (newRoots.get(path) == null) {", "-\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "-\t\t\t\t} else {", "-\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "-\t\t\t\t\tif (rootList == null) {", "-\t\t\t\t\t\trootList = new ArrayList();", "-\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "-\t\t\t\t\t}", "-\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// source attachment path", "-\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "-\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "-\t\t\t\tString propertyString = null;", "+\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\tIJavaProject project = projects[i];", "+\t\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "-\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// continue with next project", "-\t\t\t\tIPath sourceAttachmentPath;", "-\t\t\t\tif (propertyString != null) {", "-\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "-\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "-\t\t\t\t} else {", "-\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t}", "-\t\t\t\tif (sourceAttachmentPath != null) {", "-\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "+\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\t", "+\t\t\t\t\t// root path", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tif (newRoots.get(path) == null) {", "+\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "+\t\t\t\t\t\tif (rootList == null) {", "+\t\t\t\t\t\t\trootList = new ArrayList();", "+\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// source attachment path", "+\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "+\t\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "+\t\t\t\t\tString propertyString = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tIPath sourceAttachmentPath;", "+\t\t\t\t\tif (propertyString != null) {", "+\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "+\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (sourceAttachmentPath != null) {", "+\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t\t\t}", "-\t\t\tif (this.rootsAreStale) { // double check again", "-\t\t\t\tthis.oldRoots = newOldRoots;", "-\t\t\t\tthis.oldOtherRoots = newOldOtherRoots;\t\t\t", "-\t\t\t\tif (newRoots != null) {", "-\t\t\t\t\tthis.roots = newRoots;", "-\t\t\t\t\tthis.otherRoots = newOtherRoots;", "-\t\t\t\t\tthis.sourceAttachments = newSourceAttachments;", "-\t\t\t\t\tthis.rootsAreStale = false;", "-\t\t\t\t}", "+\t\t\tthis.oldRoots = this.roots == null ? new HashMap() : this.roots;", "+\t\t\tthis.oldOtherRoots = this.otherRoots == null ? new HashMap() : this.otherRoots;\t\t\t", "+\t\t\tif (this.rootsAreStale && newRoots != null) { // double check again", "+\t\t\t\tthis.roots = newRoots;", "+\t\t\t\tthis.otherRoots = newOtherRoots;", "+\t\t\t\tthis.sourceAttachments = newSourceAttachments;", "+\t\t\t\tthis.rootsAreStale = false;"]}], "num": 6263}
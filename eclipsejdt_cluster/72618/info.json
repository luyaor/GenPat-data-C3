{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3f7d20905b7b3663f6e5ae0c7f04f11", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d3fd65fc57780def1b5321db9401da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c9df47e6bc4127d80d1e16ea8353f464e792fda3", "commitAfterChange": "514d8e9afb885d3be64fa67a03a4dd281867840f", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tpublic MethodBinding getMethod(TypeBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic MethodBinding getMethod(TypeBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t// TODO (kent) performance - we are accumulating super methods which are *hidden* during the walk (see testcase from bug 69141)", "-\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "-\t\t\tif (methodBinding.isValidBinding()) {", "-\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "-\t\t\t\tif (compatibleMethod == null)", "-\t\t\t\t\treturn new ProblemMethodBinding(methodBinding, selector, argumentTypes, ProblemReasons.NotFound);", "-\t\t\t\tif (!compatibleMethod.isValidBinding())", "-\t\t\t\t\treturn compatibleMethod;", "-\t", "-\t\t\t\tmethodBinding = compatibleMethod;", "-\t\t\t\tif (!methodBinding.canBeSeenBy(currentType, invocationSite, this))", "-\t\t\t\t\treturn new ProblemMethodBinding( methodBinding, selector, methodBinding.parameters, ProblemReasons.NotVisible);", "-\t\t\t}", "+\t\t\tif (!methodBinding.isValidBinding())", "+\t\t\t\treturn methodBinding;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9237654bc61a3c1b1bb506149e8dde34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "cab98b2b8859caae533ee4cfbe628b2265262135", "commitAfterChange": "2b49f89ec08ec07d960829d0eb3050d846fdb2ac", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\tif (interfaceMethod != null) return interfaceMethod;", "+\t\t\tif (interfaceMethod != null) {", "+\t\t\t\tif (soureLevel18 && foundSize > 0 && interfaceMethod.isVarargs() && interfaceMethod instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\t\tMethodBinding original = interfaceMethod.original();", "+\t\t\t\t\tfor (int i = 0; i < foundSize; i++) {", "+\t\t\t\t\t\tMethodBinding classMethod = (MethodBinding) found.elementAt(i);", "+\t\t\t\t\t\tif (!classMethod.isAbstract()) { // this check shouldn't matter, but to compatible with javac...", "+\t\t\t\t\t\t\tMethodBinding substitute = verifier.computeSubstituteMethod(original, classMethod);", "+\t\t\t\t\t\t\tif (substitute != null && verifier.isSubstituteParameterSubsignature(classMethod, substitute)) ", "+\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(interfaceMethod, selector, argumentTypes, ProblemReasons.ApplicableMethodOverriddenByInapplicable);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn interfaceMethod;", "+\t\t\t}"]}], "num": 72618}
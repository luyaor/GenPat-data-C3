{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "951346585d683e8f609511767ca42662", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69fba64db3ade0507e7dd998f3c099e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "6e909e2d43e962644adc7ba6bf38655e030104c8", "commitAfterChange": "4ff3ea6b5b4c2cf55112f425fef7f6afa1d0719d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic boolean isIntersectingWith(TypeBinding otherType)", "signatureAfterChange": "  \tpublic boolean isIntersectingWith(TypeBinding otherType)", "diff": ["-\t    \t", "+", "+\t    \tcase Binding.GENERIC_TYPE :", "+\t            SourceTypeBinding otherGenericType = (SourceTypeBinding) otherType;", "+\t            if (this.type != otherGenericType) ", "+\t                return false;", "+\t            if (!isStatic()) { // static member types do not compare their enclosing", "+\t            \tReferenceBinding enclosing = enclosingType();", "+\t            \tif (enclosing != null) {", "+\t            \t\tReferenceBinding otherEnclosing = otherGenericType.enclosingType();", "+\t            \t\tif (otherEnclosing == null) return false;", "+\t            \t\tif ((otherEnclosing.tagBits & HasDirectWildcard) == 0) {", "+\t\t\t\t\t\t\tif (enclosing != otherEnclosing) return false;", "+\t            \t\t} else {", "+\t            \t\t\tif (!enclosing.isEquivalentTo(otherGenericType.enclosingType())) return false;", "+\t            \t\t}", "+\t            \t}", "+\t            }", "+\t            length = this.arguments == null ? 0 : this.arguments.length;", "+\t            otherArguments = otherGenericType.typeVariables();", "+\t            otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t            if (otherLength != length) ", "+\t                return false;", "+\t            for (int i = 0; i < length; i++) {", "+\t            \tif (!this.arguments[i].isTypeArgumentIntersecting(otherArguments[i]))", "+\t            \t\treturn false;", "+\t            }", "+\t            return true;", "+\t            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c396b3cb6be3aa23b2880bddc1bde008", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "442cfec5b0ec5f78f613dac66413d02e26889f22", "commitAfterChange": "d42d74dc89c043581d93318957eb6b633b137649", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-    if (otherType.isRawType())", "+    if (otherType.isParameterizedType()) {", "+        if ((otherType.tagBits & HasWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "+        \treturn false; // should have been identical", "+        ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+        if (this != otherParamType.type) ", "+            return false;", "+        ReferenceBinding enclosing = enclosingType();", "+        if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "+            return false;", "+        int length = this.typeVariables == null ? 0 : this.typeVariables.length;", "+        TypeBinding[] otherArguments = otherParamType.arguments;", "+        int otherLength = otherArguments == null ? 0 : otherArguments.length;", "+        if (otherLength != length) ", "+            return false;", "+        // argument must be identical, only equivalence is allowed if wildcard other type", "+        for (int i = 0; i < length; i++) {", "+        \tTypeBinding argument = this.typeVariables[i];", "+        \tTypeBinding otherArgument = otherArguments[i];", "+\t\t\tif (!(argument == otherArgument", "+\t\t\t\t\t|| (otherArgument.isWildcard()) && argument.isEquivalentTo(otherArgument))) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+        }", "+        return true;", "+    } else if (otherType.isRawType())"]}], "num": 39318}
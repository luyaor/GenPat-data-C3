{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98a27001c5d66a5297c60634290bd873", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "218563dc4801e4ba4323d5cab802d65b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTypeHierarchyTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testPerfAllTypes() throws CoreException", "signatureAfterChange": "  \tpublic void testPerfAllTypes() throws CoreException", "diff": ["-\t\ttagAsSummary(\"Type Hierarchy>All Types\", Dimension.CPU_TIME, true/*put in fingerprint*/);", "+\t\ttagAsSummary(\"Type Hierarchy>All Types\", true); // put in fingerprint", "-\t\t// warm-up", "+\t\t// Warm up", "-\t\t// Loop of measures", "+\t\t// Clean memory", "+\t\trunGc();", "+", "+\t\t// Measures", "-//\t\t\tfor (int j=0; j<ITERATIONS_COUNT; j++) {", "-\t\t\t\tassertEquals(\"Unexpected classes number in hierarchy!\", length, unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses().length);", "-//\t\t\t}", "+\t\t\tassertEquals(\"Unexpected classes number in hierarchy!\", length, unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses().length);", "-\t\t// Commit measures", "+\t\t// Commit"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4bcb98433375690f3e723a31a469c85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "09eb4e140e56d67f0ba07a1283f7afed03f5d473", "commitAfterChange": "193042cfcc3e974ade1d4da172a703fabd891361", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testSearchAllTypeNames() throws CoreException", "signatureAfterChange": " \tpublic void testSearchAllTypeNames() throws CoreException", "diff": ["-\t\ttagAsGlobalSummary(\"Search all type names\", true); // put in global fingerprint", "-\t\tSearchTypeNameRequestor requestor = new SearchTypeNameRequestor();", "+\t\ttagAsGlobalSummary(\"Old Search all type names\", false); // do NOT put in global fingerprint", "+\t\tOldSearchTypeNameRequestor requestor = new OldSearchTypeNameRequestor();", "-\t\twaitUntilIndexesReady();", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+\t\tif (SEARCH_ALL_TYPE_NAMES_COUNT == -1) {", "+\t\t\tSEARCH_ALL_TYPE_NAMES_COUNT = requestor.count;", "+\t\t} else {", "+\t\t\tassertEquals(\"We should find same number of types in the workspace whatever the search method is!\", SEARCH_ALL_TYPE_NAMES_COUNT, requestor.count);", "+\t\t}"]}], "num": 29038}
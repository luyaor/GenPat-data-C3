{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e41b0a3359d0f31d4aea0fa043ed1eed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f87af00b27f70a8fdfeab6f4e59c52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "758f55a5a64497d7398f91effe575e974d834411", "commitAfterChange": "a920298c522cfd65cad97a6c929cd34516c3baed", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r public void replace(int position, int length, char[] text)", "signatureAfterChange": "\r public void replace(int position, int length, char[] text)", "diff": ["-\t\tif (text == null) {\r", "-\t\t\ttext = new char[0];\r", "-\t\t}\r", "+\t\tint textLength = text == null ? 0 : text.length;\r", "-\t\t\tadjustGap(position + length, text.length - length);\r", "+\t\t\tmoveAndResizeGap(position + length, textLength - length);\r", "-\t\t\tint min = Math.min(text.length, length);\r", "-\t\t\tfor (int i = position, j = 0; i < position + min; i++, j++)\r", "-\t\t\t\tthis.contents[i] = text[j];\r", "-\t\t\tif (length > text.length) {\r", "+\t\t\tint min = Math.min(textLength, length);\r", "+\t\t\tif (min > 0) {\r", "+\t\t\t\tSystem.arraycopy(text, 0, this.contents, position, min);\r", "+\t\t\t}\r", "+\t\t\tif (length > textLength) {\r", "-\t\t\t\tthis.gapStart -= (length - text.length);\r", "-\t\t\t} else\r", "-\t\t\t\tif (text.length > length) {\r", "-\t\t\t\t\t// shrink gap\r", "-\t\t\t\t\tthis.gapStart += (text.length - length);\r", "-\t\t\t\t\tfor (int i = length; i < text.length; i++)\r", "-\t\t\t\t\t\tthis.contents[position + i] = text[i];\r", "-\t\t\t\t}\r", "+\t\t\t\tthis.gapStart -= length - textLength;\r", "+\t\t\t} else if (textLength > length) {\r", "+\t\t\t\t// shrink gap\r", "+\t\t\t\tthis.gapStart += textLength - length;\r", "+\t\t\t\tSystem.arraycopy(text, 0, this.contents, position, textLength);\r", "+\t\t\t}\r", "-\t\tif (text.length > 0) {\r", "+\t\tif (textLength > 0) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ab425315730367d86ef5894ab698fc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "2f12a5295b6777dd565c4f2976cdf05dda8b968b", "commitAfterChange": "161af7fbcd3da7eae08b0772a6e9520634a306f1", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found)", "signatureAfterChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found)", "diff": ["-\t\t\tint lastPosition = -1;", "-\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\tinterfacesToVisit, 0,", "-\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0,", "-\t\t\t\t\tlastPosition);", "+\t\t\tint lastPosition = 0;", "+\t\t\tSimpleSet interfacesSeen = new SimpleSet(itsInterfaces.length * 2);", "-\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) {", "+\t\t\t\t\tif (!interfacesSeen.includes(currentType)) {", "-\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;", "+\t\t\t\t\t\tinterfacesSeen.add(currentType);", "-\t\t\t}", "-", "-\t\t\t// bit reinitialization", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)", "-\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7796db64ebaaf5d5651393e8d062bab8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "e67c77fc5e097eac99c8909bb016eff7011eb0ce", "commitAfterChange": "5d677f26e6a9dfca4bbd2cd8a965c43c4f46ed94", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private int indexOf(String relativePath, String containerPath)", "signatureAfterChange": " private int indexOf(String fullPath)", "diff": ["-private int indexOf(String relativePath, String containerPath) {", "-\tif (containerPath != null) {", "-\t\t// if container path is known, use the hash to get faster comparison", "-\t\tint index = (containerPath.hashCode()& 0x7FFFFFFF) % this.paths.length;", "-\t\tString currentContainerPath;", "-\t\twhile ((currentContainerPath = this.containerPaths[index]) != null) {", "-\t\t\tif (currentContainerPath.equals(containerPath)) {", "-\t\t\t\tString scopePath = this.paths[index];", "-\t\t\t\tif (encloses(scopePath, relativePath, index))", "-\t\t\t\t\treturn index;", "-\t\t\t}", "-\t\t\tindex = (index + 1) % this.paths.length;", "-\t\t}", "-\t\treturn -1;", "-\t}", "-\t", "+private int indexOf(String fullPath) {", "+\t// cannot guess the index of the container path", "-\tfor (int i = 0, length = this.paths.length; i < length; i++) {", "-\t\tString scopePath = this.paths[i];", "-\t\tif (scopePath == null) continue;", "-\t\tif (encloses(this.containerPaths[i] + '/' + scopePath, relativePath, i))", "+\tfor (int i = 0, length = this.relativePaths.length; i < length; i++) {", "+\t\tString currentRelativePath = this.relativePaths[i];", "+\t\tif (currentRelativePath == null) continue;", "+\t\tString currentContainerPath = this.containerPaths[i];", "+\t\tString currentFullPath = currentRelativePath.length() == 0 ? currentContainerPath : (currentContainerPath + '/' + currentRelativePath);", "+\t\tif (encloses(currentFullPath, fullPath, i))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bea711527bca5cb0680b5779448e65ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "cccafe00dbf29f156949d8f0d0aec370b02aa048", "commitAfterChange": "1a542c460a449efbae14d1057ba233825602248d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected void addAffectedChild(JavaElementDelta child)", "signatureAfterChange": " protected void addAffectedChild(JavaElementDelta child)", "diff": ["-\tif (this.affectedChildren == null || this.affectedChildren.length == 0) {", "-\t\tthis.affectedChildren = new IJavaElementDelta[] {child};", "-\t\treturn;", "-\t}", "-\tJavaElementDelta existingChild = null;", "-\tint existingChildIndex = -1;", "-\tfor (int i = 0; i < this.affectedChildren.length; i++) {", "-\t\tif (equalsAndSameParent(this.affectedChildren[i].getElement(), child.getElement())) { // handle case of two jars that can be equals but not in the same project", "-\t\t\texistingChild = (JavaElementDelta)this.affectedChildren[i];", "-\t\t\texistingChildIndex = i;", "-\t\t\tbreak;", "-\t\t}", "-\t}", "-\tif (existingChild == null) { //new affected child", "-\t\tthis.affectedChildren= growAndAddToArray(this.affectedChildren, child);", "+\tKey childKey = new Key(child.getElement());", "+\tInteger existingChildIndex = getChildIndex(childKey);", "+\tif (existingChildIndex == null) { //new affected child", "+\t\taddNewChild(child);", "+\t\tJavaElementDelta existingChild = (JavaElementDelta) this.affectedChildren[existingChildIndex];", "-\t\t\t\t\t\tthis.affectedChildren = removeAndShrinkArray(this.affectedChildren, existingChildIndex);", "+\t\t\t\t\t\tremoveExistingChild(childKey, existingChildIndex);"]}], "num": 26520}
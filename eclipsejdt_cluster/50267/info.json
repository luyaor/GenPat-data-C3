{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "506f45b2b8122ab9883560003aca3f65", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a51102f38468fcb7296b309eb78b599", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite, boolean tiebreakingVarargsMethods)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, \t\t\tInvocationSite invocationSite, int inferenceLevel, boolean tiebreakingVarargsMethods)", "diff": ["-\tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite, boolean tiebreakingVarargsMethods) {", "+\tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments,", "+\t\t\tInvocationSite invocationSite, int inferenceLevel, boolean tiebreakingVarargsMethods)", "+\t{", "-\t\t\tmethod = ParameterizedGenericMethodBinding.computeCompatibleMethod(method, arguments, this, invocationSite);", "+\t\t\tmethod = ParameterizedGenericMethodBinding.computeCompatibleMethod(method, arguments, this, invocationSite, inferenceLevel);", "-\t\tif ((compatibilityLevel = myParameterCompatibilityLevel(method, arguments, tiebreakingVarargsMethods, invocationSite)) > NOT_COMPATIBLE) {", "+\t\tif ((compatibilityLevel = parameterCompatibilityLevel18(method, arguments, tiebreakingVarargsMethods, invocationSite)) > NOT_COMPATIBLE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f66b37ea5a7d4eb6deec337dd421c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ef0d751764a03bfb7b7e9d8838fc454e1e51fa0c", "commitAfterChange": "878eb7333d4b0eef7a3f9e4be62a4fad044a7734", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, InvocationSite invocationSite) {", "+\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite) {", "+\t\tboolean varargsStatus = visible[0].isVarargs();", "+\t\tfor (int i = 1; i < visibleSize; i++) {", "+\t\t\tif (visible[i].isVarargs() != varargsStatus) {", "+\t\t\t\t// visible is a mix of fixed & variable arity methods, so double check the varargs methods, but consider their vararg argument as a fixed array", "+\t\t\t\tMethodBinding[] temp = new MethodBinding[visibleSize];", "+\t\t\t\tint newSize = 0;", "+\t\t\t\tfor (int j = 0; j < visibleSize; j++)", "+\t\t\t\t\tif (!visible[j].isVarargs() || computeCompatibleMethod(visible[j], argumentTypes, invocationSite, false) != null)", "+\t\t\t\t\t\ttemp[newSize++] = visible[j];", "+\t\t\t\tvisible = temp;", "+\t\t\t\tvisibleSize = newSize;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+"]}], "num": 50267}
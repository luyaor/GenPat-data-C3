{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68d5781dc8a72d5a29fe8748c85309dd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45ebd31782e19472cb19338a1c2c17fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "fd5fe0838929e5227d1524384a37e09b34bfb15e", "commitAfterChange": "35293aa2c53e258bd9815d912253aad7aabdda8f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void checkMethods()", "signatureAfterChange": "  void checkMethods()", "diff": ["+\t\tboolean[] isInherited = new boolean[inheritedLength];", "+\t\tArrays.fill(isInherited, true);", "-\t\t\t\t\tif (isSkippableOrOverridden(inheritedMethod, otherInheritedMethod, skip, isOverridden, j))", "+\t\t\t\t\tif (isSkippableOrOverridden(inheritedMethod, otherInheritedMethod, skip, isOverridden, isInherited, j))", "-\t\t\t\t\tif (isSkippableOrOverridden(otherInheritedMethod, inheritedMethod, skip, isOverridden, i))", "+\t\t\t\t\tif (isSkippableOrOverridden(otherInheritedMethod, inheritedMethod, skip, isOverridden, isInherited, i))", "-\t\t\t\tcheckInheritedMethods(matchingInherited, index + 1, isOverridden); // pass in the length of matching", "+\t\t\t\tcheckInheritedMethods(matchingInherited, index + 1, isOverridden, isInherited); // pass in the length of matching"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6183ad735a316f95020ad4f415ab1aa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "fb10f5b6f5b206adc99f69bee6a0a9b1052b5fcc", "commitAfterChange": "d7f3937eb856f99bfe441e00382ecd34ff8ecdb2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["-\t\t\t\t\tMethodBinding inheritedMethod = inherited[j];", "+\t\t\t\t\tMethodBinding inheritedMethod = computeSubstituteMethod(inherited[j], currentMethod);", "-\t\t\t\t\t\tinheritedMethod = computeSubstituteMethod(inheritedMethod, currentMethod);", "-\t\t\t\t\tif (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {", "-\t\t\t\t\t\tmatchingInherited[++index] = otherInheritedMethod;", "-\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcheckForInheritedNameClash(inheritedMethod, otherInheritedMethod);", "+\t\t\t\t\tif (otherInheritedMethod != null) {", "+\t\t\t\t\t\tif (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {", "+\t\t\t\t\t\t\tmatchingInherited[++index] = otherInheritedMethod;", "+\t\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcheckForInheritedNameClash(inheritedMethod, otherInheritedMethod);", "+\t\t\t\t\t\t}"]}], "num": 29633}
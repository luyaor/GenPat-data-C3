{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "543583ea00ea77f60ff7e003cb0ff6cb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47fea76c38dab9808fdd2326487d7a8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/visitors/VisitorProc.java", "commitBeforeChange": "82fb6745d0f2bc2c9b5e4740da70b2e364d6955a", "commitAfterChange": "c295624cf25dea9fdc929a62413bd288dbeb35d7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": "  \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["+\t\t", "+\t\tAnnotationVisitorTester annoValVisitor = new AnnotationVisitorTester();", "+\t\tTypeElement typedAnnosDecl = _elementUtils.getTypeElement(\"targets.model.pc.TypedAnnos\");", "+\t\tif (null == typedAnnosDecl) {", "+\t\t\treportError(\"Couldn't find targets.model.pc.TypedAnnos\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tfor (TypeElement anno : annotations) {", "+\t\t\tif (typedAnnosDecl.equals(anno.getEnclosingElement())) {", "+\t\t\t\tfor (Element elem : roundEnv.getElementsAnnotatedWith(anno)) {", "+\t\t\t\t\tfor (AnnotationMirror annoMirror : elem.getAnnotationMirrors()) {", "+\t\t\t\t\t\tif (anno.equals(annoMirror.getAnnotationType().asElement())) {", "+\t\t\t\t\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = annoMirror.getElementValues();", "+\t\t\t\t\t\t\tfor (AnnotationValue val : values.values()) {", "+\t\t\t\t\t\t\t\tval.accept(annoValVisitor, null);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (!annoValVisitor.checkVisits()) {", "+\t\t\treportError(\"Annotation value visitor was not visited as expected\");", "+\t\t\treturn false;", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b00d0a6549b87d7f8bc50f5443c4454", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "4de0afbdfacb5e6a73acacf38df6b15ebd7071ff", "commitAfterChange": "9ef16bbd886b16521464fbe002994d5fbaed976f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["-    \t// TODO", "-    \treturn null;", "+    \tMap<String, String> options = new HashMap<String, String>();", "+    \tString allOptions = getString(jproj, AptPreferenceConstants.APT_PROCESSOROPTIONS);", "+    \tif (null == allOptions) {", "+    \t\treturn options;", "+    \t}", "+    \tString[] parsedOptions = allOptions.split(\" \");", "+    \tfor (String keyAndVal : parsedOptions) {", "+    \t\tif (!keyAndVal.startsWith(\"-A\")) {", "+    \t\t\tcontinue;", "+    \t\t}", "+    \t\tString[] parsedKeyAndVal = keyAndVal.split(\"=\", 2);", "+    \t\tif (parsedKeyAndVal.length > 0) {", "+    \t\t\tString key = parsedKeyAndVal[0].substring(2);", "+    \t\t\tif (key.length() < 1) {", "+    \t\t\t\tcontinue;", "+    \t\t\t}", "+    \t\t\tif (parsedKeyAndVal.length == 1) {", "+    \t\t\t\toptions.put(key, null);", "+    \t\t\t}", "+    \t\t\telse {", "+    \t\t\t\toptions.put(key, parsedKeyAndVal[1]);", "+    \t\t\t}", "+    \t\t}", "+    \t}", "+    \treturn options;"]}], "num": 65225}
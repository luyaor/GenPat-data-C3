{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "874e9b444c3a625d399d82f5a3aaa140", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af4a3461af1da192014962fca830fd50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2a46362da18e1189829e578c276cfbf726376a20", "commitAfterChange": "948661c4cb198af70b598b9954e5159cb73d7234", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \t\r \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "signatureAfterChange": "\r \t\r \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "diff": ["-\t\t\t\t} else if(answer.isBinaryType()) {\r", "-\t\t\t\t\tIBinaryType binaryType = answer.getBinaryType();\r", "-\t\t\t\t\tIBinaryMethod[] binaryMethods = binaryType.getMethods();\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tfor(int i = 0; i < binaryMethods.length ; i++){\r", "-\t\t\t\t\t\tIBinaryMethod binaryMethod = binaryMethods[i];\r", "-\t\t\t\t\t\tString[] argTypeStringNames = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));\r", "-\t\t\t\t\t\tchar[][] argTypeNames = new char[argTypeStringNames.length][];\r", "-\t\t\t\t\t\tfor(int j = 0; j < argTypeStringNames.length; j++){\r", "-\t\t\t\t\t\t\targTypeNames[j] = argTypeStringNames[j].toCharArray();\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\r", "-\t\t\t\t\t\tif(argTypeNames != null &&\r", "-\t\t\t\t\t\t\tCharOperation.equals(method.selector,binaryMethod.getSelector()) &&\r", "-\t\t\t\t\t\t\tCharOperation.equals(argTypeNames,parameterTypeNames)){\r", "-\t\t\t\t\t\t\tparameterNames = binaryMethod.getArgumentNames();\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\t\r", "+\t\t\t\t} \r", "-\t\t// default parameters name\r", "-\t\tif(parameterNames == null) {\r", "-\t\t\tparameterNames = new char[length][];\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\t\tparameterNames[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d859995edbbc408cc617128f7da5a49b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate TypeReference createTypeReference( \t\tchar[] typeSignature, \t\tint start, \t\tint end)", "signatureAfterChange": " \tprivate TypeReference createTypeReference( \t\tchar[] typeName, \t\tint start, \t\tint end)", "diff": ["-\t\tchar[] typeSignature,", "+\t\tchar[] typeName,", "-\t\t/* count identifiers and dimensions */", "-\t\tint max = typeSignature.length;", "-\t\tint dimStart = max;", "-\t\tint dim = 0;", "+\t\tint length = typeName.length;", "+\t\tthis.namePos = 0;", "+\t\tTypeReference type = decodeType(typeName, length, start, end);", "+\t\treturn type;", "+\t}", "-\t\tfor (int i = 0; i < max; i++) {", "-\t\t\tswitch (typeSignature[i]) {", "-\t\t\t\t\tif (dim == 0)", "-\t\t\t\t\t\tdimStart = i;", "-\t\t\t\tcase '.' :", "-\t\t\t\t\tidentCount++;", "-\t\t/* rebuild identifiers and dimensions */", "-\t\tif (identCount == 1) { // simple type reference", "-\t\t\tif (dim == 0) {", "-\t\t\t\treturn new SingleTypeReference(typeSignature, (((long) start )<< 32) + end);", "-\t\t\t} else {", "-\t\t\t\tchar[] identifier = new char[dimStart];", "-\t\t\t\tSystem.arraycopy(typeSignature, 0, identifier, 0, dimStart);", "-\t\t\t\treturn new ArrayTypeReference(identifier, dim, (((long) start) << 32) + end);", "-\t\t} else { // qualified type reference", "-\t\t\tchar[][] identifiers =", "-\t\t\t\tCharOperation.splitOn('.', typeSignature, 0, dimStart);", "-\t\t\tif (dim == 0) {", "-\t\t\t\treturn new QualifiedTypeReference(identifiers, positions);", "-\t\t\t} else {", "-\t\t\t\treturn new ArrayQualifiedTypeReference(identifiers, dim, positions);", "-\t\t\t}"]}], "num": 2193}
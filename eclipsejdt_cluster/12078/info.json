{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9ae8d118e3a6ab45cb755d7a75fab07", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d769123a9aaf4b10e2e0174092c9540d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic int discardPerWorkingCopyInfo(CompilationUnit workingCopy) throws JavaModelException", "signatureAfterChange": " \tpublic int discardPerWorkingCopyInfo(CompilationUnit workingCopy) throws JavaModelException", "diff": ["-\t\t\tPerWorkingCopyInfo info = (PerWorkingCopyInfo)perWorkingCopyInfos.get(workingCopy);", "-\t\t\tif (info != null) {", "-\t\t\t\tif (--info.useCount == 0) {", "-\t\t\t\t\tIJavaElement originalElement = workingCopy.getOriginalElement();", "+\t\t\tWorkingCopyOwner owner = workingCopy.owner;", "+\t\t\tMap pathToPerWorkingCopyInfos = (Map)this.perWorkingCopyInfos.get(owner);", "+\t\t\tif (pathToPerWorkingCopyInfos == null) return -1;", "+\t\t\t", "+\t\t\tIPath path = workingCopy.getPath();", "+\t\t\tPerWorkingCopyInfo info = (PerWorkingCopyInfo)pathToPerWorkingCopyInfos.get(path);", "+\t\t\tif (info == null) return -1;", "+\t\t\t", "+\t\t\tif (--info.useCount == 0) {", "+\t\t\t\tIJavaElement originalElement = workingCopy.getOriginalElement();", "-\t\t\t\t\t// remove per working copy info", "-\t\t\t\t\tperWorkingCopyInfos.remove(workingCopy);", "-", "-\t\t\t\t\t// remove infos + close buffer (since no longer working copy)", "-\t\t\t\t\tremoveInfoAndChildren(workingCopy);", "-\t\t\t\t\tworkingCopy.closeBuffer();", "-\t\t\t\t\t", "-\t\t\t\t\t// if original element is not on classpath flush it from the cache ", "-\t\t\t\t\tif (!workingCopy.getParent().exists()) {", "-\t\t\t\t\t\t((CompilationUnit)originalElement).close();", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// remove working copy from the shared working copy cache if needed", "-\t\t\t\t\t// In order to be shared, working copies have to denote the same compilation unit ", "-\t\t\t\t\t// AND use the same owner.", "-\t\t\t\t\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "-\t\t\t\t\tMap perFactoryWorkingCopies = (Map) this.sharedWorkingCopies.get(workingCopy.owner);", "-\t\t\t\t\tif (perFactoryWorkingCopies != null){", "-\t\t\t\t\t\tif (perFactoryWorkingCopies.remove(originalElement) != null", "-\t\t\t\t\t\t\t\t&& CompilationUnit.SHARED_WC_VERBOSE) {", "-\t\t\t\t\t\t\tSystem.out.println(\"Destroying shared working copy \" + workingCopy.toStringWithAncestors());//$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (perFactoryWorkingCopies.isEmpty()) {", "-\t\t\t\t\t\t\tthis.sharedWorkingCopies.remove(workingCopy.owner);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\t// remove per working copy info", "+\t\t\t\tpathToPerWorkingCopyInfos.remove(path);", "+\t\t\t\tif (pathToPerWorkingCopyInfos.isEmpty()) {", "+\t\t\t\t\tthis.perWorkingCopyInfos.remove(owner);", "-\t\t\t\treturn info.useCount;", "-\t\t\t} else {", "-\t\t\t\treturn -1;", "-\t\t\t}\t", "+", "+\t\t\t\t// remove infos + close buffer (since no longer working copy)", "+\t\t\t\tremoveInfoAndChildren(workingCopy);", "+\t\t\t\tworkingCopy.closeBuffer();", "+\t\t\t\t", "+\t\t\t\t// if original element is not on classpath flush it from the cache ", "+\t\t\t\tif (!workingCopy.getParent().exists()) {", "+\t\t\t\t\t((CompilationUnit)originalElement).close();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn info.useCount;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddcc63fdad6d6f9dbb97e19302a57992", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "b9de5f3466a9b4d6687de837720c445097067b16", "commitAfterChange": "39416e9e4305b172d90b88aed3085d98ded0a86c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "diff": ["+\t\t\t\r", "+\t\tboolean conditionIsInlinedToTrue = \r", "+\t\t\tcondition == null || (condition.constant != NotAConstant && condition.constant.booleanValue() == true);\r", "+\t\tboolean conditionIsInlinedToFalse = \r", "+\t\t\t! conditionIsInlinedToTrue && (condition.constant != NotAConstant && condition.constant.booleanValue() == false);\r", "+\t\t\r", "-\t\t\tif ((condition.constant == NotAConstant)\r", "-\t\t\t\t|| (condition.constant.booleanValue() != true)) {\r", "+\t\t\tif (!conditionIsInlinedToTrue) {\r", "-\t\t\tif ((condition == null)\r", "-\t\t\t\t|| ((condition.constant != NotAConstant)\r", "-\t\t\t\t\t&& (condition.constant.booleanValue() == true))) {\r", "+\t\t\tif (conditionIsInlinedToTrue) {\r", "+\t\t\t\tif (conditionIsInlinedToFalse){\r", "+\t\t\t\t\tcontinueLabel = null; // for(;false;p());\r", "+\t\t\t\t}\r", "-\t\t\t\tactionInfo =\r", "-\t\t\t\t\t((condition != null)\r", "-\t\t\t\t\t\t&& (condition.constant != NotAConstant)\r", "-\t\t\t\t\t\t&& (condition.constant.booleanValue() == false))\r", "-\t\t\t\t\t? \tFlowInfo.DeadEnd  // unreachable when condition inlined to false\r", "+\t\t\t\tactionInfo = conditionIsInlinedToFalse\r", "+\t\t\t\t\t? FlowInfo.DeadEnd  // unreachable when condition inlined to false\r", "-\t\tif ((condition == null)\r", "-\t\t\t|| ((condition.constant != NotAConstant)\r", "-\t\t\t\t&& (condition.constant.booleanValue() == true))) {\r", "+\t\tif (conditionIsInlinedToTrue) {\r"]}], "num": 12078}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8d8f028be17e1c0dc1cfb3e681a443d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ccb8a4bb768e79cc7924297fdbec8a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8d1d658761d5e634e1f9986cdb54c46ecd8cbc2e", "commitAfterChange": "f4d9deb41a71301595419326392826169e31b674", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-\t\t\tfor (int i = 0; i < oneParamsLength; i++) {", "+\t\t\tnext : for (int i = 0; i < oneParamsLength; i++) {", "-\t\t\t\tif (oneParam == twoParam) {", "-\t\t\t\t\tif (twoParam.leafComponentType().isRawType()) {", "-\t\t\t\t\t\t// must detect & reject this case", "-\t\t\t\t\t\t// when Y<U> extends X<U>", "-\t\t\t\t\t\t// void foo(Y y) {}", "-\t\t\t\t\t\t// <T extends X<Object>> void foo(T t) {}", "-\t\t\t\t\t\t// foo(T) will show up as foo(Y#RAW) and not foo(X#RAW)", "-\t\t\t\t\t\t// Y#RAW is not more specific than a rawified X<T>", "-\t\t\t\t\t\tTypeBinding originalOneParam = one.original().parameters[i].leafComponentType();", "-\t\t\t\t\t\tif ((originalOneParam.isTypeVariable() ? ((TypeVariableBinding) originalOneParam).upperBound()", "-\t\t\t\t\t\t\t\t: originalOneParam).isRawType())", "-\t\t\t\t\t\t\tif (twoParam.leafComponentType().erasure() != two.original().parameters[i]", "-\t\t\t\t\t\t\t\t\t.leafComponentType().erasure())", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (oneParam.isCompatibleWith(twoParam)) {", "-\t\t\t\t\tif (oneParam.leafComponentType().isRawType()) {", "-\t\t\t\t\t\tif (oneParam.needsUncheckedConversion(twoParam))", "-\t\t\t\t\t\t\tif (oneParam.leafComponentType().erasure() != twoParam.leafComponentType().erasure())", "-\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\tif (oneParam == twoParam || oneParam.isCompatibleWith(twoParam)) {", "+\t\t\t\t\tif (two.declaringClass.isRawType()) continue next;", "+", "+\t\t\t\t\tTypeBinding originalOneParam = one.original().parameters[i].leafComponentType();", "+\t\t\t\t\tswitch (originalOneParam.kind()) {", "+\t\t\t\t\t   \tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t   \t\tif (!((TypeVariableBinding) originalOneParam).upperBound().isRawType()) break;", "+\t\t\t\t\t   \t\t//$FALL-THROUGH$", "+\t\t\t\t\t   \tcase Binding.RAW_TYPE:", "+\t\t\t\t\t   \t\t// originalOneParam is RAW so it cannot be more specific than a wildcard or parameterized type", "+\t\t\t\t\t\t\tTypeBinding originalTwoParam = two.original().parameters[i].leafComponentType();", "+\t\t\t\t\t\t\tswitch (originalTwoParam.kind()) {", "+\t\t\t\t\t\t\t   \tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t\t   \t\tif (((TypeVariableBinding) originalTwoParam).hasOnlyRawBounds())", "+\t\t\t\t\t\t\t\t   \t\tcontinue next;", "+\t\t\t\t\t\t\t\t   \treturn false;", "+\t\t\t\t\t\t\t   \tcase Binding.WILDCARD_TYPE :", "+\t\t\t\t\t\t\t   \tcase Binding.INTERSECTION_TYPE:", "+\t\t\t\t\t\t\t   \tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\t\t\t   \t\treturn false;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is", "-\t\t\t\t\t\t\t\t\t\t\t// Object[]", "+\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "-\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or", "-\t\t\t\t// (Integer, int...)", "+\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d62e5cf7430a1c4333c8aa66ae41a16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-\t\t\t\t\t\tif (oneParam == one.original().parameters[i]", "-\t\t\t\t\t\t\t\t&&  twoParam.leafComponentType().erasure() != two.original().parameters[i].leafComponentType().erasure()) {", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tTypeBinding originalOneParam = one.original().parameters[i].leafComponentType();", "+\t\t\t\t\t\tif ((originalOneParam.isTypeVariable() ? ((TypeVariableBinding) originalOneParam).upperBound()", "+\t\t\t\t\t\t\t\t: originalOneParam).isRawType())", "+\t\t\t\t\t\t\tif (twoParam.leafComponentType().erasure() != two.original().parameters[i]", "+\t\t\t\t\t\t\t\t\t.leafComponentType().erasure())", "+\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t// A#RAW is not more specific than a rawified A<T>", "-\t\t\t\t\t\tif (oneParam.needsUncheckedConversion(two.declaringClass.isRawType() ? twoParam : two.original().parameters[i]))", "-\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tif (oneParam.needsUncheckedConversion(twoParam))", "+\t\t\t\t\t\t\tif (oneParam.leafComponentType().erasure() != twoParam.leafComponentType().erasure())", "+\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is", "+\t\t\t\t\t\t\t\t\t\t\t// Object[]", "-\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "+\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or", "+\t\t\t\t// (Integer, int...)", "-\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "-\t\t\t\t\treturn true;", "+\t\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "+\t\t\t\treturn true;"]}], "num": 48382}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddd8fe833015e991b79efbdfaf441161", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb98bbdc687331ff1934dd63ed05cbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tvalueIfTrue.implicitWidening(valueIfTrueType, valueIfTrueType);", "+\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, valueIfTrueType);", "-\t\t\t\tvalueIfTrue.implicitWidening(ShortBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(ShortBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, ShortBinding, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, ShortBinding, valueIfFalseType);", "-\t\t\t\tvalueIfTrue.implicitWidening(valueIfTrueType, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(valueIfTrueType, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, valueIfFalseType);", "-\t\t\t\tvalueIfTrue.implicitWidening(valueIfFalseType, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(valueIfFalseType, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, valueIfFalseType);", "-\t\t\t\tvalueIfTrue.implicitWidening(IntBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(IntBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, IntBinding, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, IntBinding, valueIfFalseType);", "-\t\t\t\tvalueIfTrue.implicitWidening(LongBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(LongBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, LongBinding, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, LongBinding, valueIfFalseType);", "-\t\t\t\tvalueIfTrue.implicitWidening(FloatBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(FloatBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, FloatBinding, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, FloatBinding, valueIfFalseType);", "-\t\t\tvalueIfTrue.implicitWidening(DoubleBinding, valueIfTrueType);", "-\t\t\tvalueIfFalse.implicitWidening(DoubleBinding, valueIfFalseType);", "+\t\t\tvalueIfTrue.computeConversion(scope, DoubleBinding, valueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, DoubleBinding, valueIfFalseType);", "-\t\t\tvalueIfTrue.implicitWidening(valueIfTrueType, valueIfTrueType);", "-\t\t\tvalueIfFalse.implicitWidening(valueIfTrueType, valueIfFalseType);", "+\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, valueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, valueIfFalseType);", "-\t\t\tvalueIfTrue.implicitWidening(valueIfFalseType, valueIfTrueType);", "-\t\t\tvalueIfFalse.implicitWidening(valueIfFalseType, valueIfFalseType);", "+\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, valueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, valueIfFalseType);", "+\t\t// 1.5 addition: allow most common type ", "+\t\tif (scope.environment().options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\tTypeBinding commonType = scope.mostSpecificCommonType(new TypeBinding[] { valueIfTrueType, valueIfFalseType });", "+\t\t\tif (commonType != null) {", "+\t\t\t\treturn this.resolvedType = commonType;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31f0084c2f9faf5512cc3708ef1a8cc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "ebec254e498341be9350e02449a0dbae42c5870c", "commitAfterChange": "d100192f697f326dff66b368f9d71d16adde29e2", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\tthis.hasJavaLangObjectAsExpectedType = false;", "-\t\t\t\t\taddExpectedType(binding);", "+\t\t\t\t\taddExpectedType(binding, scope);", "-\t\t\t\taddExpectedType(binding);", "+\t\t\t\taddExpectedType(binding, scope);", "-\t\t\t\t\taddExpectedType(binding);", "+\t\t\t\t\taddExpectedType(binding, scope);", "-\t\t\t\taddExpectedType(binding);", "+\t\t\t\taddExpectedType(binding, scope);", "-\t\t\t\t\taddExpectedType(binding);", "+\t\t\t\t\taddExpectedType(binding, scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "-\t\t\t\t\t\taddExpectedType(scope.getJavaLangString());", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE, scope);", "+\t\t\t\t\t\taddExpectedType(scope.getJavaLangString(), scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BOOLEAN);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BOOLEAN, scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE, scope);", "-\t\t\t\t\t\t\t\taddExpectedType(typeVariableBindings[0].firstBound);", "+\t\t\t\t\t\t\t\taddExpectedType(typeVariableBindings[0].firstBound, scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BOOLEAN);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BOOLEAN, scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE, scope);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "-\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR, scope);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE, scope);", "-\t\t\taddExpectedType(TypeBinding.SHORT);", "-\t\t\taddExpectedType(TypeBinding.INT);", "-\t\t\taddExpectedType(TypeBinding.LONG);", "+\t\t\taddExpectedType(TypeBinding.SHORT, scope);", "+\t\t\taddExpectedType(TypeBinding.INT, scope);", "+\t\t\taddExpectedType(TypeBinding.LONG, scope);", "-\t\t\t\taddExpectedType(typeVariables[index].firstBound);", "+\t\t\t\t", "+\t\t\t\tTypeBinding bound = typeVariables[index].firstBound;", "+\t\t\t\taddExpectedType(bound == null ? scope.getJavaLangObject() : bound, scope);", "-\t\t\t\t\t\t\taddExpectedType(typeVariables[j].firstBound);", "+\t\t\t\t\t\t\tTypeBinding bound = typeVariables[j].firstBound;", "+\t\t\t\t\t\t\taddExpectedType(bound == null ? scope.getJavaLangObject() : bound, scope);", "-\t\t\t\taddExpectedType(memberValuePair.binding.returnType);", "+\t\t\t\taddExpectedType(memberValuePair.binding.returnType, scope);", "-\t\t\t\t\t\taddExpectedType(methodBindings[0].returnType);", "+\t\t\t\t\t\taddExpectedType(methodBindings[0].returnType, scope);", "-\t\t\t\t\t\t\taddExpectedType(exceptions[i]);", "+\t\t\t\t\t\t\taddExpectedType(exceptions[i], scope);"]}], "num": 25943}
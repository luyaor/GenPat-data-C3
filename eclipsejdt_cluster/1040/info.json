{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eea62e90be60c49e37fd8318518a34a4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "381feaacc23cbf499e53209cbbce59c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "2ae41539e386d12d9e7c121e231730e370deda2f", "commitAfterChange": "05dd526dbb279df7b7e23a1d7ccb53d445943919", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void add(IResource element, boolean addJarsAndSourceFolders)", "signatureAfterChange": "\r \r public void add(IJavaProject project, boolean includesPrereqProjects) throws JavaModelException", "diff": ["- */\r", "-public void add(IResource element, boolean addJarsAndSourceFolders) {\r", "-\tsuper.add(element);\r", "+public void add(IJavaProject project, boolean includesPrereqProjects) throws JavaModelException {\r", "-\t// clear indexer cache\r", "-\tfLastCheckedResource = null;\r", "+\tthis.addEnclosingProjectOrJar(project.getProject().getFullPath());\r", "-\tif (addJarsAndSourceFolders && element instanceof IProject) {\r", "-\t\t// remember the paths of its classpath entries\r", "-\t\tIJavaModel javaModel = JavaModelManager.getJavaModel(element.getWorkspace());\r", "-\t\tIJavaProject javaProject = javaModel.getJavaProject(element.getName());\r", "-\t\ttry {\r", "-\t\t\t// add only external jars, internal jars (that are internal to the project)\r", "-\t\t\t// and source folders of the project\r", "-\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\tIWorkspaceRoot root = project.getUnderlyingResource().getWorkspace().getRoot();\r", "+\tIClasspathEntry[] entries = project.getResolvedClasspath(true);\r", "+\tIJavaModel model = project.getJavaModel();\r", "+\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\tIClasspathEntry entry = entries[i];\r", "+\t\tswitch (entry.getEntryKind()) {\r", "+\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\tswitch (entry.getEntryKind()) {\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\t\t\tif (element.getFullPath().isPrefixOf(path) // jar internal to project \r", "-\t\t\t\t\t\t\t\t|| element.getWorkspace().getRoot().findMember(path) == null) { // jar external to workspace\r", "-\t\t\t\t\t\t\tthis.add(path);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "-\t\t\t\t\t\tif (element.getFullPath().isPrefixOf(path)) { // source folder inside project\r", "-\t\t\t\t\t\t\tthis.add(path);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\tthis.add(path, true);\r", "+\t\t\t\tthis.addEnclosingProjectOrJar(path);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "+\t\t\t\tif (includesPrereqProjects) {\r", "+\t\t\t\t\tthis.add(model.getJavaProject(entry.getPath().lastSegment()), true);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "+\t\t\t\tpath = entry.getPath();\r", "+\t\t\t\tif (path.segmentCount() == 1) {\r", "+\t\t\t\t\t// project is source\r", "+\t\t\t\t\tthis.add(root.getProject(path.lastSegment()));\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// regular source folder\r", "+\t\t\t\t\tthis.add(root.getFolder(path));\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+}\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\tthis.add(element.getFullPath());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ae208e0a37a27efb4c02ad321012c67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "8257947b843e715f21b92a87dc4b423cbc1eed03", "commitAfterChange": "00cae100ff4808e2019f6a4d94df4143c8fabbd0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "diff": ["-\t\t\t\t\t\t\tprojects = manager.getJavaModel().getOldJavaProjectsList();", "+\t\t\t\t\t\t\tprojects = this.manager.getJavaModel().getOldJavaProjectsList();", "-\t\t\tprojects = manager.getJavaModel().getOldJavaProjectsList();", "+\t\t\tprojects = this.manager.getJavaModel().getOldJavaProjectsList();", "-\t\t\t\t\t\t\tif (this.externalTimeStamps.containsKey(entryPath)){", "-\t\t\t\t\t\t\t\tthis.externalTimeStamps.remove(entryPath);", "+\t\t\t\t\t\t\tif (this.state.externalTimeStamps.remove(entryPath) != null){", "-\t\t\t\t\t\t\t\tindexManager.removeIndex(entryPath);", "+\t\t\t\t\t\t\t\tthis.manager.indexManager.removeIndex(entryPath);", "-\t\t\t\t\t\t\tLong oldTimestamp =(Long) this.externalTimeStamps.get(entryPath);", "+\t\t\t\t\t\t\tLong oldTimestamp =(Long) this.state.externalTimeStamps.get(entryPath);", "-\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.remove(entryPath);", "+\t\t\t\t\t\t\t\t\tthis.state.externalTimeStamps.remove(entryPath);", "-\t\t\t\t\t\t\t\t\tindexManager.removeIndex(entryPath);", "+\t\t\t\t\t\t\t\t\tthis.manager.indexManager.removeIndex(entryPath);", "-\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.put(entryPath, new Long(newTimeStamp));", "+\t\t\t\t\t\t\t\t\tthis.state.externalTimeStamps.put(entryPath, new Long(newTimeStamp));", "-\t\t\t\t\t\t\t\t\tindexManager.removeIndex(entryPath);", "+\t\t\t\t\t\t\t\t\tthis.manager.indexManager.removeIndex(entryPath);", "-\t\t\t\t\t\t\t\t\tindexManager.indexLibrary(entryPath, project.getProject());", "+\t\t\t\t\t\t\t\t\tthis.manager.indexManager.indexLibrary(entryPath, project.getProject());", "-\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.put(entryPath, new Long(newTimeStamp));", "+\t\t\t\t\t\t\t\t\tthis.state.externalTimeStamps.put(entryPath, new Long(newTimeStamp));", "-\t\t\t\t\t\t\t\t\tindexManager.indexLibrary(entryPath, project.getProject());", "+\t\t\t\t\t\t\t\t\tthis.manager.indexManager.indexLibrary(entryPath, project.getProject());"]}], "num": 1040}
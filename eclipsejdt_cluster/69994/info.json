{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34cd478ada391841b0e75cebad473022", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12de14ce4ea96e3bb8fbf2d48f989b3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "commitAfterChange": "5ce130e25c355987e77b700c026948aca2c3cdd7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate Annotation[] convertAnnotations(JavaElement element)", "signatureAfterChange": " \t \tprivate Annotation[] convertAnnotations(IAnnotatable element) throws JavaModelException", "diff": ["-\tprivate Annotation[] convertAnnotations(JavaElement element) {", "-\t\tif (this.annotationPositions == null) return null;", "+\tprivate Annotation[] convertAnnotations(IAnnotatable element) throws JavaModelException {", "-\t\tlong[] positions = (long[]) this.annotationPositions.get(element);", "-\t\tif (positions == null) return null;", "-\t\tint length = positions.length;", "-\t\tAnnotation[] annotations = new Annotation[length];", "+\t\tIAnnotation[] annotations = element.getAnnotations();", "+\t\tint length = annotations.length;", "+\t\tAnnotation[] astAnnotations = new Annotation[length];", "-\t\t\tlong position = positions[i];", "-\t\t\tint start = (int) (position >>> 32);", "-\t\t\tint end = (int) position;", "-\t\t\tchar[] annotationSource = CharOperation.subarray(cuSource, start, end+1);", "+\t\t\tISourceRange positions = annotations[i].getSourceRange();", "+\t\t\tint start = positions.getOffset();", "+\t\t\tint end = start + positions.getLength();", "+\t\t\tchar[] annotationSource = CharOperation.subarray(cuSource, start, end);", "-    \t\t\t * this parsing occured.", "+    \t\t\t * this parsing occurred.", "-    \t\t\t\tannotations[recordedAnnotations++] = (Annotation) expression;", "+    \t\t\t\tastAnnotations[recordedAnnotations++] = (Annotation) expression;", "-\t\t\tSystem.arraycopy(annotations, 0, (annotations = new Annotation[recordedAnnotations]), 0, recordedAnnotations);", "+\t\t\tSystem.arraycopy(astAnnotations, 0, (astAnnotations = new Annotation[recordedAnnotations]), 0, recordedAnnotations);", "-\t\treturn annotations;", "+\t\treturn astAnnotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ea9c7e081935880b401b8ef581c196a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "a069ec3e155df34e1c3faf73c5e321c7b4b692f7", "commitAfterChange": "6dea5cf1ef2d860c99ae96c566fbaac1cc8d1d31", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\t\tbeginToCompile(sourceUnits);", "+\t\t\tif (this.annotationProcessorManager == null) {", "+\t\t\t\tbeginToCompile(sourceUnits);", "+\t\t\t} else {", "+\t\t\t\tICompilationUnit[] originalUnits = (ICompilationUnit[]) sourceUnits.clone(); // remember source units in case a source type collision occurs", "+\t\t\t\ttry {", "+\t\t\t\t\tbeginToCompile(sourceUnits);", "-\t\t\tif (this.annotationProcessorManager != null) {", "-\t\t\t\tprocessAnnotations();", "-\t\t\t\tif (!this.options.generateClassFiles) {", "-\t\t\t\t\t// -proc:only was set on the command line", "+\t\t\t\t\tprocessAnnotations();", "+\t\t\t\t\tif (!this.options.generateClassFiles) {", "+\t\t\t\t\t\t// -proc:only was set on the command line", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t} catch (SourceTypeCollisionException e) {", "+\t\t\t\t\treset();", "+\t\t\t\t\t// a generated type was referenced before it was created", "+\t\t\t\t\t// the compiler either created a MissingType or found a BinaryType for it", "+\t\t\t\t\t// so add the processor's generated files & start over,", "+\t\t\t\t\t// but remember to only pass the generated files to the annotation processor", "+\t\t\t\t\tint originalLength = originalUnits.length;", "+\t\t\t\t\tint newProcessedLength = e.newAnnotationProcessorUnits.length;", "+\t\t\t\t\tICompilationUnit[] combinedUnits = new ICompilationUnit[originalLength + newProcessedLength];", "+\t\t\t\t\tSystem.arraycopy(originalUnits, 0, combinedUnits, 0, originalLength);", "+\t\t\t\t\tSystem.arraycopy(e.newAnnotationProcessorUnits, 0, combinedUnits, originalLength, newProcessedLength);", "+\t\t\t\t\tthis.annotationProcessorStartIndex  = originalLength;", "+\t\t\t\t\tcompile(combinedUnits);"]}], "num": 69994}
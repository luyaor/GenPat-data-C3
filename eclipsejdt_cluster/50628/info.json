{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f1fa46c5668456cdb6a2565fc9e0a7d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42e502ec057b5b96e296e0dba95b5122", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java", "commitBeforeChange": "82fb6745d0f2bc2c9b5e4740da70b2e364d6955a", "commitAfterChange": "c295624cf25dea9fdc929a62413bd288dbeb35d7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@Override \tpublic Object getValue()", "signatureAfterChange": "  \t@Override \tpublic Object getValue()", "diff": ["-\t\t//TODO: determine and cache object type", "-\t\tif (_value instanceof StringConstant) {", "-\t\t\treturn ((StringConstant)_value).stringValue();", "-\t\t}", "-\t\telse if (_value instanceof IntConstant) {", "-\t\t\treturn ((IntConstant)_value).intValue();", "-\t\t}", "-\t\treturn null;", "+\t\treturn _value;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c801b0b438279a576f62c7ce250573e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/InfixExpressionWrappingBuilder.java", "commitBeforeChange": "a744e65ca211ca7be2dd3830d1bd4009b273df27", "commitAfterChange": "c95e24ef2e4bfa2139fbca3e3b2078e40695cacf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate boolean isSplittable(Expression expression)", "signatureAfterChange": " \tprivate boolean isSplittable(Expression expression)", "diff": ["-\t\tif (expression instanceof InfixExpression) {", "-\t\t\tInfixExpression infixExpression = (InfixExpression) expression;", "-\t\t\treturn infixExpression.getLeftOperand() instanceof InfixExpression", "-\t\t\t\t\t||  infixExpression.getRightOperand() instanceof InfixExpression;", "-\t\t}", "-\t\treturn false;", "+//\t\tif (expression instanceof InfixExpression) {", "+//\t\t\tInfixExpression infixExpression = (InfixExpression) expression;", "+//\t\t\treturn infixExpression.getLeftOperand() instanceof InfixExpression", "+//\t\t\t\t\t||  infixExpression.getRightOperand() instanceof InfixExpression;", "+//\t\t}", "+//\t\treturn false;", "+\t\treturn true;"]}], "num": 50628}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8dd68eb7ae223240d6539e0bb59deac6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27c2e086c823047cbb6e7cae41a6a1fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "10278a797430cb698cfd46cf8e9f8d898ccc6e22", "commitAfterChange": "68f08d6c81f3b848e0fcb2f296b83150ef5cf8c0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic IJavaElement getJavaElement()", "signatureAfterChange": "  \tpublic IJavaElement getJavaElement()", "diff": ["-\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "-\t\tif (methodDeclaration != null) {", "-\t\t\tArrayList parameterSignatures = new ArrayList();", "-\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "-\t\t\t\tType type = parameter.getType();", "-\t\t\t\tparameterSignatures.add(Util.getSignature(type));", "+\t\tASTNode node = (ASTNode) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "+\t\tif (node != null) {", "+\t\t\tif (node instanceof MethodDeclaration) {", "+\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\t\t\tArrayList parameterSignatures = new ArrayList();", "+\t\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "+\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "+\t\t\t\t\tType type = parameter.getType();", "+\t\t\t\t\tparameterSignatures.add(Util.getSignature(type));", "+\t\t\t\t}", "+\t\t\t\tint parameterCount = parameterSignatures.size();", "+\t\t\t\tString[] parameters = new String[parameterCount];", "+\t\t\t\tparameterSignatures.toArray(parameters);", "+\t\t\t\treturn declaringType.getMethod(getName(), parameters);", "+\t\t\t} else {", "+\t\t\t\t// annotation type member declaration", "+\t\t\t\tAnnotationTypeMemberDeclaration typeMemberDeclaration = (AnnotationTypeMemberDeclaration) node;", "+\t\t\t\treturn declaringType.getMethod(typeMemberDeclaration.getName().getIdentifier(), new String[0]); // annotation type members don't have parameters", "-\t\t\tint parameterCount = parameterSignatures.size();", "-\t\t\tString[] parameters = new String[parameterCount];", "-\t\t\tparameterSignatures.toArray(parameters);", "-\t\t\treturn declaringType.getMethod(getName(), parameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0ba9453a0c263484598101e77c7060c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic boolean isDeclaration()", "signatureAfterChange": "  \tpublic boolean isDeclaration()", "diff": ["-\t\tASTNode parent = getParent();", "-\t\tif (parent == null) {", "+\t\tStructuralPropertyDescriptor d = getLocationInParent();", "+\t\tif (d == null) {", "+\t\tASTNode parent = getParent();", "-\t\t\t// could only be the name of the type", "-\t\t\treturn true;", "+\t\t\treturn (d == TypeDeclaration.NAME_PROPERTY);", "-\t\t\t// could be the name of the method or constructor", "-\t\t\treturn !p.isConstructor();", "+\t\t\t// could be the name of the method or constructor", "+\t\t\treturn !p.isConstructor() && (d == MethodDeclaration.NAME_PROPERTY);", "-\t\t\tSingleVariableDeclaration p = (SingleVariableDeclaration) parent;", "-\t\t\t// make sure its the name of the variable (not the initializer)", "-\t\t\treturn (p.getName() == this);", "+\t\t\treturn (d == SingleVariableDeclaration.NAME_PROPERTY);", "-\t\t\tVariableDeclarationFragment p = (VariableDeclarationFragment) parent;", "-\t\t\t// make sure its the name of the variable (not the initializer)", "-\t\t\treturn (p.getName() == this);", "+\t\t\treturn (d == VariableDeclarationFragment.NAME_PROPERTY);", "-\t\t\t// could only be the name of the enum type", "-\t\t\treturn true;", "+\t\t\treturn (d == EnumDeclaration.NAME_PROPERTY);", "-\t\t\t// could only be the name of the enum constant", "-\t\t\treturn true;", "-\t\t}", "-\t\tif (parent instanceof EnhancedForStatement) {", "-\t\t\tEnhancedForStatement p = (EnhancedForStatement) parent;", "-\t\t\t// make sure its the name of the loop variable (not the initializer)", "-\t\t\treturn (p.getName() == this);", "+\t\t\treturn (d == EnumConstantDeclaration.NAME_PROPERTY);", "-\t\t\t// could only be the type variable name", "-\t\t\treturn true;", "+\t\t\treturn (d == TypeParameter.NAME_PROPERTY);", "-\t\t\t// could only be the name of the annotation type", "-\t\t\treturn true;", "+\t\t\treturn (d == AnnotationTypeDeclaration.NAME_PROPERTY);", "-\t\t\tAnnotationTypeMemberDeclaration p = (AnnotationTypeMemberDeclaration) parent;", "-\t\t\t// make sure its the name of the member (not the default)", "-\t\t\treturn (p.getName() == this);", "+\t\t\treturn (d == AnnotationTypeMemberDeclaration.NAME_PROPERTY);"]}], "num": 14654}
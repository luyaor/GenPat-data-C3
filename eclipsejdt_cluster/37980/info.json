{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "497353218e7ff1f6bdf67eb5009bb699", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7a05f81e1d8c6466366a85827932be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic void test0086() throws JavaModelException", "signatureAfterChange": " \tpublic void test0086() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t\\n\" + ", "-\t\t\t\t\"public Object foo() {\\n\" +", "-\t\t\t\t\"\t\treturn /*start*/X.class/*end*/;\\n\" +", "-\t\t\t\t\"\t}\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"class A {}\\n\" + ", "-\t\t\t\t\"class B extends A {}\\n\",", "-\t\t\t\tworkingCopy);", "-\t\t\tTypeLiteral typeLiteral = (TypeLiteral) node;", "-\t\t\tITypeBinding typeBinding = typeLiteral.resolveTypeBinding();", "-\t\t\tassertEquals(\"Wrong name\", \"java.lang.Class<p.X>\", typeBinding.getQualifiedName());", "-\t\t\tassertEquals(\"Wrong name\", \"Class<X>\", typeBinding.getName());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\t\\n\" + ", "+\t\t\t\"public Object foo() {\\n\" +", "+\t\t\t\"\t\treturn /*start*/X.class/*end*/;\\n\" +", "+\t\t\t\"\t}\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class A {}\\n\" + ", "+\t\t\t\"class B extends A {}\\n\",", "+\t\t\tthis.workingCopy);", "+\t\tTypeLiteral typeLiteral = (TypeLiteral) node;", "+\t\tITypeBinding typeBinding = typeLiteral.resolveTypeBinding();", "+\t\tassertEquals(\"Wrong name\", \"java.lang.Class<p.X>\", typeBinding.getQualifiedName());", "+\t\tassertEquals(\"Wrong name\", \"Class<X>\", typeBinding.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1ac96a844fedb39556b16b98ad48ff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": " \tpublic void test0078() throws JavaModelException", "signatureAfterChange": " \tpublic void test0078() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\t\"  String foo(int i) { return /*start*/Integer.toString(i)/*end*/;}\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIMethodBinding methodBinding = ((MethodInvocation) node).resolveMethodBinding();", "-\t\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "-\t\t\tassertFalse(\"Is a parameterized method\", methodBinding.isParameterizedMethod());", "-\t\t\tassertFalse(\"Is a generic method\", methodBinding.isGenericMethod());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\"  String foo(int i) { return /*start*/Integer.toString(i)/*end*/;}\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tIMethodBinding methodBinding = ((MethodInvocation) node).resolveMethodBinding();", "+\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "+\t\tassertFalse(\"Is a parameterized method\", methodBinding.isParameterizedMethod());", "+\t\tassertFalse(\"Is a generic method\", methodBinding.isGenericMethod());"]}], "num": 37980}
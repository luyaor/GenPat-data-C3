{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "616691c2b4a3e6a28cc66292db4abee3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b32929bca4aca238e64875cde73366a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "72465f40b09586b7077dc16c43e2ab23727eff60", "commitAfterChange": "86316ee52fb877ee37d8d76a33df02613efc76e0", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \tpublic Expression convert(BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(BinaryExpression expression)", "diff": ["-\t\tif (expression.left instanceof BinaryExpression) {", "+\t\tif (expression.left instanceof BinaryExpression && !checkForParenthesis(expression.left)) {", "-\t\t\t\tif (((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID", "-\t\t\t\t || (rightOperand instanceof BinaryExpression && ((rightOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID)", "-\t\t\t\t || checkForParenthesis(leftOperand)) {", "-\t\t\t\t\tinfixExpression.extendedOperands().clear();", "-\t\t\t\t\tExpression leftExpression = convert(expression.left);", "-\t\t\t\t\tinfixExpression.setLeftOperand(leftExpression);", "-\t\t\t\t\tinfixExpression.setRightOperand(convert(expression.right));", "-\t\t\t\t\tint startPosition = leftExpression.getStartPosition();", "+\t\t\t\tif ((((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID && !checkForParenthesis(leftOperand))", "+\t\t\t\t || ((rightOperand instanceof BinaryExpression && ((rightOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID) && !checkForParenthesis(rightOperand))) {", "+\t\t\t\t \tList extendedOperands = infixExpression.extendedOperands();", "+\t\t\t\t \tInfixExpression temp = this.ast.newInfixExpression();", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\tthis.recordNodes(temp, expression);", "+\t\t\t\t\t}", "+\t\t\t\t \ttemp.setOperator(getOperatorFor(expressionOperatorID));", "+\t\t\t\t \tExpression leftSide = convert(leftOperand);", "+\t\t\t\t\ttemp.setLeftOperand(leftSide);", "+\t\t\t\t\ttemp.setSourceRange(leftSide.getStartPosition(), leftSide.getLength());", "+\t\t\t\t\tint size = extendedOperands.size();", "+\t\t\t\t \tfor (int i = 0; i < size - 1; i++) {", "+\t\t\t\t \t\tExpression expr = temp;", "+\t\t\t\t \t\ttemp = this.ast.newInfixExpression();", "+\t\t\t\t \t\t", "+\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\tthis.recordNodes(temp, expression);", "+\t\t\t\t\t\t}\t\t\t\t \t", "+\t\t\t\t \t\ttemp.setLeftOperand(expr);", "+\t\t\t\t\t \ttemp.setOperator(getOperatorFor(expressionOperatorID));", "+\t\t\t\t\t\ttemp.setSourceRange(expr.getStartPosition(), expr.getLength());", "+\t\t\t\t \t}", "+\t\t\t\t \tinfixExpression = temp;", "+\t\t\t\t \tfor (int i = 0; i < size; i++) {", "+\t\t\t\t \t\tExpression extendedOperand = (Expression) extendedOperands.remove(size - 1 - i);", "+\t\t\t\t \t\ttemp.setRightOperand(extendedOperand);", "+\t\t\t\t \t\tint startPosition = temp.getLeftOperand().getStartPosition();", "+\t\t\t\t \t\ttemp.setSourceRange(startPosition, extendedOperand.getStartPosition() + extendedOperand.getLength() - startPosition);", "+\t\t\t\t \t\tif (temp.getLeftOperand().getNodeType() == ASTNode.INFIX_EXPRESSION) {", "+\t\t\t\t \t\t\ttemp = (InfixExpression) temp.getLeftOperand();", "+\t\t\t\t \t\t}", "+\t\t\t\t \t}", "+\t\t\t\t\tint startPosition = infixExpression.getLeftOperand().getStartPosition();", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\tthis.recordNodes(infixExpression, expression);", "+\t\t\t\t\t}", "-\t\t\t} while (leftOperand instanceof BinaryExpression);", "+\t\t\t} while (leftOperand instanceof BinaryExpression && !(checkForParenthesis(leftOperand)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1d08d258435c9996568de8c287e7eda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "080a42c1d10403c7486b8cde9973df6dc09a8d9d", "commitAfterChange": "be2396778954f7686c95a2d45b5130702d13bfe1", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void format(TypeDeclaration typeDeclaration)", "signatureAfterChange": "  \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["-\t\t\t\tloop: for (int i = 0; i < length; i++) {", "+\t\t\t\tint enumConstantsLength = 0;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tif (fieldDeclaration.getKind() != AbstractVariableDeclaration.ENUM_CONSTANT) {", "-\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\tif (fieldDeclaration.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\tenumConstantsLength++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tif (i < length) {", "-\t\t\t\t\t\thasConstants = true;", "-\t\t\t\t\t\tfieldDeclaration.traverse(this, typeDeclaration.initializerScope);", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\thasConstants = enumConstantsLength != 0;", "+\t\t\t\tif (enumConstantsLength > 1) {", "+\t\t\t\t\tAlignment enumConstantsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\t\"enumConstants\",//$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.preferences.alignment_for_enum_constants,", "+\t\t\t\t\t\t\tenumConstantsLength,", "+\t\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "+\t\t\t\t\t\t\t0, // we don't want to indent enum constants when splitting to a new line", "+\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\tthis.scribe.enterAlignment(enumConstantsAlignment);", "+\t\t\t\t\tboolean ok = false;", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tfor (int i = 0; i < enumConstantsLength; i++) {", "+\t\t\t\t\t\t\t\tthis.scribe.alignFragment(enumConstantsAlignment, i);", "+\t\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = fieldDeclarations[i];", "+\t\t\t\t\t\t\t\tfieldDeclaration.traverse(this, typeDeclaration.initializerScope);", "+\t\t\t\t\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "+\t\t\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "+\t\t\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t\t\t\tif (fieldDeclaration.initialization instanceof QualifiedAllocationExpression) {", "+\t\t\t\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tok = true;", "+\t\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} while (!ok);", "+\t\t\t\t\tthis.scribe.exitAlignment(enumConstantsAlignment, true);", "+\t\t\t\t} else {", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = fieldDeclarations[0];", "+\t\t\t\t\tfieldDeclaration.traverse(this, typeDeclaration.initializerScope);", "-\t\t\t\t}\t\t\t", "+\t\t\t\t}"]}], "num": 36780}
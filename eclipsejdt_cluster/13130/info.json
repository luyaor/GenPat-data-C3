{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ccefb8263331581afff4f70ec7d22d9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3e0c4b49eb0c0f796fdade23fad4b7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "ae980cab0e47f9f9109f15f27f7ea765847cf9bc", "commitAfterChange": "4d657d16dcce8d103534cfb60b4be82696664aa1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (this.receiver instanceof CastExpression) this.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\tboolean receiverCast = false;", "+\t\tif (this.receiver instanceof CastExpression) {", "+\t\t\tthis.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\treceiverCast = true;", "+\t\t}", "+\t\tif (receiverCast) {", "+\t\t\t // due to change of declaring class with receiver type, only identity cast should be notified", "+\t\t\tif (((CastExpression)this.receiver).expression.resolvedType == this.receiverType) { ", "+\t\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)this.receiver);\t\t", "+\t\t\t}", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3820801634cdd4d2ce0049929a2dbe7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "ae980cab0e47f9f9109f15f27f7ea765847cf9bc", "commitAfterChange": "4d657d16dcce8d103534cfb60b4be82696664aa1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tboolean containsCast = false; ", "-\tif (this.receiver instanceof CastExpression) this.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\tboolean receiverCast = false, argumentsCast = false; ", "+\tif (this.receiver instanceof CastExpression) {", "+\t\tthis.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\treceiverCast = true;", "+\t}", "-\t", "+\tif (receiverCast && this.receiverType != null) {", "+\t\t // due to change of declaring class with receiver type, only identity cast should be notified", "+\t\tif (((CastExpression)this.receiver).expression.resolvedType == this.receiverType) { ", "+\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)this.receiver);\t\t", "+\t\t}", "+\t}", "-\t\t\t\tcontainsCast = true;", "+\t\t\t\targumentsCast = true;", "-\t\tif (containsCast) {", "+\t\tif (argumentsCast) {"]}], "num": 13130}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed7156e724c3a7f539a8b798492ad28c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15e335e41b9d72a96df39c548c60d9d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate TextEdit formatCompilationUnit(String source, int indentationLevel, String lineSeparator, IRegion[] regions)", "signatureAfterChange": "  \tprivate TextEdit formatCompilationUnit(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean formatJavadoc)", "diff": ["-\tprivate TextEdit formatCompilationUnit(String source, int indentationLevel, String lineSeparator, IRegion[] regions) {", "+\tprivate TextEdit formatCompilationUnit(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean formatJavadoc) {", "-\t\tthis.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil);", "+\t\tthis.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, formatJavadoc && this.preferences.comment_format_javadoc_comment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "631ea6d5fec68fb4b1b67469a5c38ecf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "08b295e40c7c27b53b1136298913fff09d368d63", "commitAfterChange": "d8bba06dba65d28b4ac0590368e9ea6b313bfaa8", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tprotected void assertDeltas(String message, String expected)", "signatureAfterChange": " \tprotected void assertDeltas(String message, String expected, boolean waitForResourceDelta)", "diff": ["+\t}", "+\tprotected void assertDeltas(String message, String expected, boolean waitForResourceDelta) {", "+\t\tif (waitForResourceDelta)", "+\t\t\tthis.deltaListener.waitForResourceDelta();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e481db6b0ff7c56f3b2476389e5d2533", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java", "commitBeforeChange": "cb586d1ec75e8da71f4da23a7a5eb911d6960b1c", "commitAfterChange": "543f951d6390669f9bed8c637d9d6aef509af249", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic SyntheticMethodBinding(FieldBinding targetField, boolean isReadAccess, ReferenceBinding declaringClass)", "signatureAfterChange": "  \tpublic SyntheticMethodBinding(FieldBinding targetField, boolean isReadAccess, boolean isSuperAccess, ReferenceBinding declaringClass)", "diff": ["-\tpublic SyntheticMethodBinding(FieldBinding targetField, boolean isReadAccess, ReferenceBinding declaringClass) {", "+\tpublic SyntheticMethodBinding(FieldBinding targetField, boolean isReadAccess, boolean isSuperAccess, ReferenceBinding declaringClass) {", "-\t\t\tthis.purpose = SyntheticMethodBinding.FieldReadAccess;", "+\t\t\tthis.purpose = isSuperAccess ? SyntheticMethodBinding.SuperFieldReadAccess : SyntheticMethodBinding.FieldReadAccess;", "-\t\t\tthis.purpose = SyntheticMethodBinding.FieldWriteAccess;", "+\t\t\tthis.purpose = isSuperAccess ? SyntheticMethodBinding.SuperFieldWriteAccess : SyntheticMethodBinding.FieldWriteAccess;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9dcf3dcb6b5cec0a867333dcfaab9a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocTag.java", "commitBeforeChange": "14e234724f203a6fef415e43d34432d323b84ca1", "commitAfterChange": "66e076adb0340dce3dd9bba5c2d65608184b470b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic CompletionOnJavadocTag(char[] source, long pos, int tagStart, int tagEnd, char[][][] possibleTags)", "signatureAfterChange": "  \tpublic CompletionOnJavadocTag(char[] source, long pos, int tagStart, int tagEnd, char[][][] possibleTags, boolean orphan)", "diff": ["-\tpublic CompletionOnJavadocTag(char[] source, long pos, int tagStart, int tagEnd, char[][][] possibleTags) {", "+\tpublic CompletionOnJavadocTag(char[] source, long pos, int tagStart, int tagEnd, char[][][] possibleTags, boolean orphan) {", "+\t\tif (orphan) this.completionFlags |= ALL_POSSIBLE_TAGS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb5c47d24e9a0b03dc74f5ee03c34d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "39b8f6b75b82f5da2d98cfd1c56a1cffeb468721", "commitAfterChange": "2ce280d5528def273827657b0266a19fea9f8b19", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " private TypeVariableBinding[] createTypeVariables(SignatureWrapper wrapper, Binding declaringElement)", "signatureAfterChange": " private TypeVariableBinding[] createTypeVariables(SignatureWrapper wrapper, boolean assignVariables)", "diff": ["-private TypeVariableBinding[] createTypeVariables(SignatureWrapper wrapper, Binding declaringElement) {", "+private TypeVariableBinding[] createTypeVariables(SignatureWrapper wrapper, boolean assignVariables) {", "-\t\t\t\t\t\tvariables.add(new TypeVariableBinding(variableName, declaringElement, rank++));", "+\t\t\t\t\t\tvariables.add(new TypeVariableBinding(variableName, this, rank++));", "+\t// when creating the type variables for a type, the type must remember them before initializing each variable", "+\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=163680", "+\tif (assignVariables)", "+\t\tthis.typeVariables = result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8201b1d0824420e6cb39d37e5c62c1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "f97912416c5f4661289c43d63ee763608220be3f", "commitAfterChange": "e5efe07482ca39d7bb013c10359ef31d2cc33138", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprotected void pushIdentifier(boolean newLength)", "signatureAfterChange": " \tprotected void pushIdentifier(boolean newLength, boolean isToken)", "diff": ["-\tprotected void pushIdentifier(boolean newLength) {", "+\tprotected void pushIdentifier(boolean newLength, boolean isToken) {", "-\t\tthis.identifierStack[this.identifierPtr] = this.scanner.getCurrentIdentifierSource();", "+\t\tthis.identifierStack[this.identifierPtr] = isToken ? this.scanner.getCurrentTokenSource() : this.scanner.getCurrentIdentifierSource();"]}], "num": 69981}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8a687744ee75bb05f65bf2528f53609", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30ebc5f1b4d58a8e23f98d17040b9248", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "40ff73b7071407f455ce167883a827d5d0333258", "commitAfterChange": "20607cc9da90bd1294c224d1eff6327bec9954ac", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword)", "signatureAfterChange": " \tprivate void findKeywords(char[] keyword, char[][] choices, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword)", "diff": ["-\tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword) {", "+\tprivate void findKeywords(char[] keyword, char[][] choices, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword) {", "-", "-\t\tif (canCompleteEmptyToken || length > 0)", "-\t\t\tfor (int i = 0; i < choices.length; i++)", "-\t\t\t\tif (length <= choices[i].length", "-\t\t\t\t\t&& CharOperation.prefixEquals(keyword, choices[i], false /* ignore case */", "-\t\t\t\t)){", "-\t\t\t\t\tif (ignorePackageKeyword && CharOperation.equals(choices[i], Keywords.PACKAGE))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\trelevance += computeRelevanceForResolution();", "-\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\t\trelevance += computeRelevanceForCaseMatching(keyword, choices[i]);", "-\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "-\t\t\t\t\tif (staticFieldsAndMethodOnly && this.insideQualifiedReference) relevance += R_NON_INHERITED;", "+\t\tfor (int i = 0; i < choices.length; i++)", "+\t\t\tif (length <= choices[i].length", "+\t\t\t&& CharOperation.prefixEquals(keyword, choices[i], false /* ignore case */", "+\t\t\t\t\t)){", "+\t\t\t\tif (ignorePackageKeyword && CharOperation.equals(choices[i], Keywords.PACKAGE))", "+\t\t\t\t\tcontinue;", "+\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\trelevance += computeRelevanceForResolution();", "+\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\trelevance += computeRelevanceForCaseMatching(keyword, choices[i]);", "+\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "+\t\t\t\tif (staticFieldsAndMethodOnly && this.insideQualifiedReference) relevance += R_NON_INHERITED;", "-\t\t\t\t\tif(CharOperation.equals(choices[i], Keywords.TRUE) || CharOperation.equals(choices[i], Keywords.FALSE)) {", "-\t\t\t\t\t\trelevance += computeRelevanceForExpectingType(TypeBinding.BOOLEAN);", "-\t\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "-\t\t\t\t\t\tproposal.setName(choices[i]);", "-\t\t\t\t\t\tproposal.setCompletion(choices[i]);", "-\t\t\t\t\t\tproposal.setReplaceRange((canCompleteEmptyToken && (this.startPosition < 0)) ? 0 : this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setTokenRange((canCompleteEmptyToken && (this.tokenStart < 0)) ? 0 : this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t}", "+\t\t\t\tif(CharOperation.equals(choices[i], Keywords.TRUE) || CharOperation.equals(choices[i], Keywords.FALSE)) {", "+\t\t\t\t\trelevance += computeRelevanceForExpectingType(TypeBinding.BOOLEAN);", "+\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "+\t\t\t\t}", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setName(choices[i]);", "+\t\t\t\t\tproposal.setCompletion(choices[i]);", "+\t\t\t\t\tproposal.setReplaceRange((this.startPosition < 0) ? 0 : this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange((this.tokenStart < 0) ? 0 : this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4735300938ef527be09213749f9f2229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void acceptInterface( \t\tchar[] packageName, \t\tchar[] interfaceName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] typeName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "diff": ["+\tpublic void acceptType(", "+\t\tchar[] typeName,", "+\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, typeName, '.');", "+\t\t\tif (mustQualifyType(packageName, typeName)) {", "+\t\t\t\tcompletionName = typeName;", "+\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, typeName);", "+\t\t\trelevance += computeRelevanceForExpectingType(packageName, typeName);", "+\t\t\t", "+\t\t\tint kind = modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);", "+\t\t\tswitch (kind) {", "+\t\t\t\tcase IConstants.AccAnnotation:", "+\t\t\t\tcase IConstants.AccAnnotation+IConstants.AccInterface:", "+\t\t\t\t\trelevance += computeRelevanceForAnnotation();", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstants.AccEnum:", "+\t\t\t\t\trelevance += computeRelevanceForEnum();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstants.AccInterface:", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\trelevance += computeRelevanceForClass();", "+\t\t\t\t\trelevance += computeRelevanceForException(typeName);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tproposal.setSignature(createNonGenericTypeSignature(packageName, typeName));", "+\t\t\tproposal.setTypeName(typeName);", "-\t */", "-\tpublic void acceptInterface(", "-\t\tchar[] packageName,", "-\t\tchar[] interfaceName,", "-\t\tint modifiers,", "-\t\tAccessRestriction accessRestriction) {", "-", "-\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, interfaceName, '.');", "-\t\tchar[] completionName = fullyQualifiedName;", "-", "-\t\tif (this.knownTypes.containsKey(completionName)) return;", "-", "-\t\tthis.knownTypes.put(completionName, this);", "-", "-\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "-\t\tif(accessRestriction != null) {", "-\t\t\tswitch (accessRestriction.getProblemId()) {", "-\t\t\t\tcase IProblem.ForbiddenReference:", "-\t\t\t\t\tif(this.options.checkForbiddenReference) return;", "-\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IProblem.DiscouragedReference:", "-\t\t\t\t\tif(this.options.checkDiscouragedReference) return;", "-\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tboolean isQualified = true;", "-\t\tint relevance = computeBaseRelevance();", "-\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\trelevance += computeRelevanceForRestrictions(accessibility);", "-\t\tif (this.resolvingImports) {", "-\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, fullyQualifiedName);", "-\t\t} else {", "-\t\t\tif (mustQualifyType(packageName, interfaceName)) {", "-\t\t\t\tif (packageName == null || packageName.length == 0)", "-\t\t\t\t\tif (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)", "-\t\t\t\t\t\treturn; // ignore types from the default package from outside it", "-\t\t\t} else {", "-\t\t\t\tcompletionName = interfaceName;", "-\t\t\t\tisQualified = false;", "-\t\t\t}", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, interfaceName);", "-\t\t\trelevance += computeRelevanceForExpectingType(packageName, interfaceName);", "-\t\t\trelevance += computeRelevanceForInterface();", "-\t\t\trelevance += computeRelevanceForQualification(isQualified);", "-\t\t}", "-\t\t", "-\t\tthis.noProposal = false;", "-\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\tproposal.setDeclarationSignature(packageName);", "-\t\t\tproposal.setSignature(createNonGenericTypeSignature(packageName, interfaceName));", "-\t\t\tproposal.setPackageName(packageName);", "-\t\t\tproposal.setTypeName(interfaceName);", "-\t\t\tproposal.setCompletion(completionName);", "-\t\t\tproposal.setFlags(modifiers | Flags.AccInterface);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe15f7cd5448ea04897504a9aea0912b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "40e5e462287b79ef847047a4bab6d5d9140df3cb", "commitAfterChange": "f9a29367ea8f3c4c9489072b937e0b301d28ae36", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " \tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword)", "signatureAfterChange": " \tprivate void findKeywords(char[] keyword, char[][] choices, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword)", "diff": ["-\tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword) {", "+\tprivate void findKeywords(char[] keyword, char[][] choices, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword) {", "-", "-\t\tif (canCompleteEmptyToken || length > 0)", "-\t\t\tfor (int i = 0; i < choices.length; i++)", "-\t\t\t\tif (length <= choices[i].length", "-\t\t\t\t\t&& CharOperation.prefixEquals(keyword, choices[i], false /* ignore case */", "-\t\t\t\t)){", "-\t\t\t\t\tif (ignorePackageKeyword && CharOperation.equals(choices[i], Keywords.PACKAGE))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\trelevance += computeRelevanceForResolution();", "-\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\t\trelevance += computeRelevanceForCaseMatching(keyword, choices[i]);", "-\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "-\t\t\t\t\tif (staticFieldsAndMethodOnly && this.insideQualifiedReference) relevance += R_NON_INHERITED;", "+\t\tfor (int i = 0; i < choices.length; i++)", "+\t\t\tif (length <= choices[i].length", "+\t\t\t&& CharOperation.prefixEquals(keyword, choices[i], false /* ignore case */", "+\t\t\t\t\t)){", "+\t\t\t\tif (ignorePackageKeyword && CharOperation.equals(choices[i], Keywords.PACKAGE))", "+\t\t\t\t\tcontinue;", "+\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\trelevance += computeRelevanceForResolution();", "+\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\trelevance += computeRelevanceForCaseMatching(keyword, choices[i]);", "+\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "+\t\t\t\tif (staticFieldsAndMethodOnly && this.insideQualifiedReference) relevance += R_NON_INHERITED;", "-\t\t\t\t\tif(CharOperation.equals(choices[i], Keywords.TRUE) || CharOperation.equals(choices[i], Keywords.FALSE)) {", "-\t\t\t\t\t\trelevance += computeRelevanceForExpectingType(TypeBinding.BOOLEAN);", "-\t\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "-\t\t\t\t\t\tproposal.setName(choices[i]);", "-\t\t\t\t\t\tproposal.setCompletion(choices[i]);", "-\t\t\t\t\t\tproposal.setReplaceRange((canCompleteEmptyToken && (this.startPosition < 0)) ? 0 : this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setTokenRange((canCompleteEmptyToken && (this.tokenStart < 0)) ? 0 : this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t}", "+\t\t\t\tif(CharOperation.equals(choices[i], Keywords.TRUE) || CharOperation.equals(choices[i], Keywords.FALSE)) {", "+\t\t\t\t\trelevance += computeRelevanceForExpectingType(TypeBinding.BOOLEAN);", "+\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "+\t\t\t\t}", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setName(choices[i]);", "+\t\t\t\t\tproposal.setCompletion(choices[i]);", "+\t\t\t\t\tproposal.setReplaceRange((this.startPosition < 0) ? 0 : this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange((this.tokenStart < 0) ? 0 : this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t}"]}], "num": 24357}
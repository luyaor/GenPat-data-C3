{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f83e2c30db9e336018b5c232ab0fed0d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e85b931116447fcd4a7bc655c45aa36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed)", "diff": ["-\t\tint fieldLength = fieldName.length;", "-\t\t\tif (fieldLength > field.name.length) continue next;", "-", "-\t\t\tif (!CharOperation.prefixEquals(fieldName, field.name, false /* ignore case */))\tcontinue next;", "+\t\t\tif (fieldName != null) {", "+\t\t\t\tif (fieldName.length > field.name.length) continue next;", "+\t\t\t\tif (!CharOperation.prefixEquals(fieldName, field.name, false /* ignore case */))\tcontinue next;", "+\t\t\t}", "+\t\t\t// Special case for javadoc completion", "+\t\t\tif (this.assistNodeInJavadoc > 0) {", "+\t\t\t\tif (invocationSite instanceof CompletionOnJavadocFieldReference) {", "+\t\t\t\t\tCompletionOnJavadocFieldReference fieldRef = (CompletionOnJavadocFieldReference) invocationSite;", "+\t\t\t\t\tif (fieldRef.receiver.isThis()) {", "+\t\t\t\t\t\tif (fieldRef.completeInText()) {", "+\t\t\t\t\t\t\tcompletion = CharOperation.concat(new char[] { '#' }, field.name);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (fieldRef.completeInText()) {", "+\t\t\t\t\t\tif (fieldRef.receiver instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\t\t\tJavadocSingleTypeReference typeRef = (JavadocSingleTypeReference) fieldRef.receiver;", "+\t\t\t\t\t\t\tcompletion = CharOperation.concat(typeRef.token, field.name, '#');", "+\t\t\t\t\t\t} else if (fieldRef.receiver instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\t\t\tJavadocQualifiedTypeReference typeRef = (JavadocQualifiedTypeReference) fieldRef.receiver;", "+\t\t\t\t\t\t\tcompletion = CharOperation.concat(CharOperation.concatWith(typeRef.tokens, '.'), field.name, '#');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+", "-\t\t\trelevance += computeRelevanceForCaseMatching(fieldName, field.name);", "+\t\t\tif (fieldName != null) relevance += computeRelevanceForCaseMatching(fieldName, field.name);", "-\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t// Standard proposal", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF) && (this.assistNodeInJavadoc & CompletionOnJavadoc.ONLY_INLINE_TAG) == 0) {", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t// Javadoc completions", "+\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0 && !this.requestor.isIgnored(CompletionProposal.JAVADOC_FIELD_REF)) {", "+\t\t\t\tchar[] javadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_LINK);", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.JAVADOC_FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\tproposal.setName(field.name);", "+\t\t\t\tproposal.setCompletion(javadocCompletion);", "+\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\tint start = (this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0 ? this.javadocTagPosition : this.startPosition;", "+\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance+R_INLINE_TAG);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t\t// Javadoc value completion for static fields", "+\t\t\t\tif (field.isStatic() && !this.requestor.isIgnored(CompletionProposal.JAVADOC_VALUE_REF)) {", "+\t\t\t\t\tjavadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_VALUE);", "+\t\t\t\t\tCompletionProposal valueProposal = this.createProposal(CompletionProposal.JAVADOC_VALUE_REF, this.actualCompletionPosition);", "+\t\t\t\t\tvalueProposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tvalueProposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tvalueProposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tvalueProposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tvalueProposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tvalueProposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tvalueProposal.setName(field.name);", "+\t\t\t\t\tvalueProposal.setCompletion(javadocCompletion);", "+\t\t\t\t\tvalueProposal.setFlags(field.modifiers);", "+\t\t\t\t\tvalueProposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tvalueProposal.setRelevance(relevance+R_VALUE_TAG);", "+\t\t\t\t\tthis.requestor.accept(valueProposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(valueProposal);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a22526226ba1bf60cca01c88f239b947", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "commitAfterChange": "3d9ca5323b31c8907d129d4437482cfc3b641c64", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": "  \tprotected void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems)", "signatureAfterChange": " \tprotected void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector methodsFound, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["+\t}", "+\t\tObjectVector fieldsFound,", "+\t\tObjectVector methodsFound,", "-\t\tboolean missingElementsHaveProblems) {", "+\t\tboolean missingElementsHaveProblems,", "+\t\tchar[] castedReceiver,", "+\t\tint receiverStart,", "+\t\tint receiverEnd) {", "-\t\tboolean proposeField = !this.isIgnored(CompletionProposal.FIELD_REF, missingElements != null);", "-\t\tboolean proposeMethod = !this.isIgnored(CompletionProposal.METHOD_REF, missingElements != null);", "-\t\t", "-\t\tObjectVector methodsFound = new ObjectVector();", "+\t\tboolean proposeField =", "+\t\t\tcastedReceiver == null ?", "+\t\t\t\t\t!this.isIgnored(CompletionProposal.FIELD_REF, missingElements != null) :", "+\t\t\t\t\t!this.isIgnored(CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER, missingElements != null) ;", "+\t\tboolean proposeMethod = ", "+\t\t\tcastedReceiver == null ?", "+\t\t\t\t\t!this.isIgnored(CompletionProposal.METHOD_REF, missingElements != null) :", "+\t\t\t\t\t!this.isIgnored(CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER, missingElements != null);", "-\t\t\t\tif(!isIgnored(CompletionProposal.FIELD_REF, missingElements != null)) {", "-\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "-\t\t\t\t\tproposal.setSignature(INT_SIGNATURE);", "-\t\t\t\t\t//proposal.setDeclarationPackageName(null);", "-\t\t\t\t\t//proposal.setDeclarationTypeName(null);", "-\t\t\t\t\t//proposal.setPackageName(null);", "-\t\t\t\t\tproposal.setTypeName(INT);", "-\t\t\t\t\tproposal.setName(lengthField);", "-\t\t\t\t\tif (missingElements != null) {", "-\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "-\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "-\t\t\t\t\t\t\tsubProposals[i] =", "-\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "-\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "-\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "-\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "-\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\tif (castedReceiver == null) {", "+\t\t\t\t\tif(!isIgnored(CompletionProposal.FIELD_REF, missingElements != null)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setSignature(INT_SIGNATURE);", "+\t\t\t\t\t\tproposal.setTypeName(INT);", "+\t\t\t\t\t\tproposal.setName(lengthField);", "+\t\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "-\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t\tproposal.setCompletion(lengthField);", "+\t\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "-\t\t\t\t\tproposal.setCompletion(lengthField);", "-\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t} else {", "+\t\t\t\t\tchar[] completion = CharOperation.concat(castedReceiver, lengthField);", "+\t\t\t\t\t", "+\t\t\t\t\tif(!this.isIgnored(CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER, missingElements != null)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setSignature(INT_SIGNATURE);", "+\t\t\t\t\t\tproposal.setReceiverSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setTypeName(INT);", "+\t\t\t\t\t\tproposal.setName(lengthField);", "+\t\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setReceiverRange(receiverStart - this.offset, receiverEnd - this.offset);", "+\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (castedReceiver != null) {", "+\t\t\t\t\tcompletion = CharOperation.concat(castedReceiver, completion);", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t\t\tif (!this.isIgnored(CompletionProposal.METHOD_REF, missingElements != null)) {", "-\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "-\t\t\t\t\tproposal.setSignature(", "-\t\t\t\t\t\t\tthis.compilerOptions.sourceLevel > ClassFileConstants.JDK1_4 && receiverType.isArrayType() ?", "-\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "-\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\t\t\t\tgetSignature(receiverType)) :", "-\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "-\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "-\t\t\t\t\t\t\t\t\t\t\tOBJECT));", "-\t\t\t\t\t//proposal.setOriginalSignature(null);", "-\t\t\t\t\t//proposal.setDeclarationPackageName(null);", "-\t\t\t\t\t//proposal.setDeclarationTypeName(null);", "-\t\t\t\t\t//proposal.setParameterPackageNames(null);", "-\t\t\t\t\t//proposal.setParameterTypeNames(null);", "-\t\t\t\t\tproposal.setPackageName(CharOperation.concatWith(JAVA_LANG, '.'));", "-\t\t\t\t\tproposal.setTypeName(OBJECT);", "-\t\t\t\t\tproposal.setName(cloneMethod);", "-\t\t\t\t\tif (missingElements != null) {", "-\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "-\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "-\t\t\t\t\t\t\tsubProposals[i] =", "-\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "-\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "-\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "-\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "-\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\tif (castedReceiver == null) {", "+\t\t\t\t\tif (!this.isIgnored(CompletionProposal.METHOD_REF, missingElements != null)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\t\tthis.compilerOptions.sourceLevel > ClassFileConstants.JDK1_4 && receiverType.isArrayType() ?", "+\t\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tgetSignature(receiverType)) :", "+\t\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "+\t\t\t\t\t\t\t\t\t\t\t\tOBJECT));", "+\t\t\t\t\t\t//proposal.setOriginalSignature(null);", "+\t\t\t\t\t\t//proposal.setDeclarationPackageName(null);", "+\t\t\t\t\t\t//proposal.setDeclarationTypeName(null);", "+\t\t\t\t\t\t//proposal.setParameterPackageNames(null);", "+\t\t\t\t\t\t//proposal.setParameterTypeNames(null);", "+\t\t\t\t\t\tproposal.setPackageName(CharOperation.concatWith(JAVA_LANG, '.'));", "+\t\t\t\t\t\tproposal.setTypeName(OBJECT);", "+\t\t\t\t\t\tproposal.setName(cloneMethod);", "+\t\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "-\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "-\t\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\tmethodsFound.add(new Object[]{objectRef.getMethods(cloneMethod)[0], objectRef});", "+\t\t\t\t} else {", "+\t\t\t\t\tif(!this.isIgnored(CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER, missingElements != null)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\t\tthis.compilerOptions.sourceLevel > ClassFileConstants.JDK1_4 && receiverType.isArrayType() ?", "+\t\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tgetSignature(receiverType)) :", "+\t\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "+\t\t\t\t\t\t\t\t\t\t\t\tOBJECT));", "+\t\t\t\t\t\tproposal.setReceiverSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setPackageName(CharOperation.concatWith(JAVA_LANG, '.'));", "+\t\t\t\t\t\tproposal.setTypeName(OBJECT);", "+\t\t\t\t\t\tproposal.setName(cloneMethod);", "+\t\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setReceiverRange(receiverStart - this.offset, receiverEnd - this.offset);", "+\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "-\t\t\t\tmethodsFound.add(new Object[]{objectRef.getMethods(cloneMethod)[0], objectRef});", "-\t\t\t\tnew ObjectVector(),", "+\t\t\t\tfieldsFound,", "-\t\t\t\tmissingElementsHaveProblems);", "+\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\tcastedReceiver,", "+\t\t\t\treceiverStart,", "+\t\t\t\treceiverEnd);", "-\t\t\t\tmissingElementsHaveProblems);", "+\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\tcastedReceiver,", "+\t\t\t\treceiverStart,", "+\t\t\t\treceiverEnd);"]}], "num": 42958}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fdc01a4ff684d2ee16803c19323fbfe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e84d53ff6aa3bd7d010f2488f2cef11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "beddf7ea3209e604e7dd085747cac8c41b2dfbd0", "commitAfterChange": "cafda46507ac63768e17397affc84b63092c7e46", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected static void createPrintStream(String className, PrintStream[] logStreams, int count, String prefix)", "signatureAfterChange": " \tstatic void createPrintStream(Class testClass, PrintStream[] logStreams, int count, String prefix)", "diff": ["-\tprotected static void createPrintStream(String className, PrintStream[] logStreams, int count, String prefix) {", "+\tstatic void createPrintStream(Class testClass, PrintStream[] logStreams, int count, String prefix) {", "-\t\t\tString testTypeName = className.substring(className.indexOf(\"FullSourceWorkspace\")+\"FullSourceWorkspace\".length(), className.lastIndexOf(\"Test\"));", "-\t\t\t\tFile logFile = new File(LOG_DIR, \"Perfs\"+testTypeName+LOG_VERSION+LOG_TYPES[i]+\".log\");", "+\t\t\t\tString suiteTypeName = suiteTypeShortName(testClass);", "+\t\t\t\tFile logFile = new File(LOG_DIR, suiteTypeName+'_'+LOG_TYPES[i]+\".log\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76e087ed3b6624a8c12edddc61cd62de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate void cleanupNoLongerGeneratedFiles( \t\t\tBuildContext parent, \t\t\tSet<IFile> lastGeneratedFiles,  \t\t\tSet<IFile> newGeneratedFiles, \t\t\tGeneratedFileManager gfm,\t\t \t\t\tBuildEnv processorEnv, \t\t\tCollection<IFile> deleted)", "signatureAfterChange": " \tprivate void cleanupNoLongerGeneratedFiles( \t\t\tIFile parentFile, \t\t\tSet<IFile> newGeneratedFiles, \t\t\tGeneratedFileManager gfm,\t\t \t\t\tBuildEnv processorEnv, \t\t\tCollection<IFile> deleted)", "diff": ["-\t//       Do not call unless caller is sure this is during build phase.", "+\t */", "-\t\t\tBuildContext parent,", "-\t\t\tSet<IFile> lastGeneratedFiles, ", "+\t\t\tIFile parentFile,", "-\t{\t", "-\t\tfinal int numLastGeneratedFiles = lastGeneratedFiles.size();", "-\t\t// make a copy into an array to avoid concurrent modification exceptions", "-\t\tIFile[] files = lastGeneratedFiles.toArray( new IFile[ numLastGeneratedFiles ] );", "-\t\t", "-\t\tfor ( IFile f : files )", "-\t\t{", "-\t\t\tif ( ! newGeneratedFiles.contains( f ) )", "-\t\t\t{", "-\t\t\t\tfinal IFile parentFile = parent.getFile();", "-\t\t\t\tif ( AptPlugin.DEBUG ) ", "-\t\t\t\t\ttrace( \"runAPT:  File \" + f + \" is no longer a generated file for \" + parentFile,  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\tprocessorEnv );", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tif ( gfm.deleteGeneratedFile( f, parentFile, null ) )", "-\t\t\t\t\t\tdeleted.add( f );", "-\t\t\t\t}", "-\t\t\t\tcatch ( CoreException ce )", "-\t\t\t\t{", "-\t\t\t\t\tAptPlugin.log(ce, \"Could not clean up generated files\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t{", "+\t\tgfm.deleteObsoleteFilesAfterBuild(parentFile, newGeneratedFiles);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b8a760564bc029a70376ab342fade7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3631cf47f01fc0da1be7732f6c067adbe5bd4214", "commitAfterChange": "bcf1522935dfbdb0bc359777ceee5d7211666ccc", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": " public void parseError( \tint startPosition,  \tint endPosition,  \tint currentToken, \tchar[] currentTokenSource,  \tString errorTokenName,  \tString[] possibleTokens)", "signatureAfterChange": " public void parseError( \tint startPosition,  \tint endPosition,  \tint currentToken, \tchar[] currentTokenSource,  \tString errorTokenName,  \tString[] possibleTokens)", "diff": ["-\tif ((errorTokenName.equals(\"IntegerLiteral\")) || //$NON-NLS-1$", "-\t\t(errorTokenName.equals(\"LongLiteral\")) || //$NON-NLS-1$", "-\t\t(errorTokenName.equals(\"FloatingPointLiteral\")) || //$NON-NLS-1$", "-\t\t(errorTokenName.equals(\"DoubleLiteral\")) || //$NON-NLS-1$", "-\t\t(errorTokenName.equals(\"StringLiteral\")) || //$NON-NLS-1$", "-\t\t(errorTokenName.equals(\"CharacterLiteral\")) || //$NON-NLS-1$", "-\t\t(errorTokenName.equals(\"Identifier\"))) { //$NON-NLS-1$", "+\tif (isLiteral(currentToken) ||", "+\t\tisIdentifier(currentToken)) { //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98672228ab9f7aa03cae8f2736b47fe6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "ee7d00c6fce3f5ac075ad1ae838556503fe6ca33", "commitAfterChange": "42a20f90363fe2e676c07d56364d6cc6b90a9458", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprivate Type createType(ITypeBinding binding, ITypeBinding bindingPoint, AST ast, Type qualifier, ImportRewriteContext context)", "signatureAfterChange": "  \tprivate Type annotateType(ITypeBinding binding, AST ast, ImportRewriteContext context, Type type)", "diff": ["+", "+\tprivate Type annotateType(ITypeBinding binding, AST ast, ImportRewriteContext context, Type type) {", "+\t\tIAnnotationBinding [] annotationBindings = binding.getTypeAnnotations();", "+\t\tif (annotationBindings != null && annotationBindings.length > 0 && type instanceof AnnotatableType) {", "+\t\t\tannotateList(((AnnotatableType) type).annotations(), annotationBindings, ast, context);", "+\t\t}", "+\t\treturn type;", "+\t}", "-\tprivate Type createType(ITypeBinding binding, ITypeBinding bindingPoint, AST ast, Type qualifier, ImportRewriteContext context) {", "-\t\tType type = null;", "-\t\tif (binding.equals(bindingPoint)) {", "-\t\t\ttype = createType(qualifier, binding, ast, context);", "-\t\t\tType currentType = binding.isMember() ? createType(binding.getDeclaringClass(), bindingPoint, ast, qualifier, context) : null;", "-\t\t\ttype = createType(currentType, binding, ast, context);", "-\t\t}", "-\t\tIAnnotationBinding [] annotationBindings = binding.getTypeAnnotations();", "-\t\tif (annotationBindings != null && annotationBindings.length > 0) {", "-\t\t\tAnnotatableType aType = type instanceof AnnotatableType ? (AnnotatableType) type : ", "-\t\t\t\ttype instanceof ParameterizedType ? (AnnotatableType) ((ParameterizedType) type).getType() : null;", "-\t\t\tif (aType != null)", "-\t\t\t\tannotateType(aType, annotationBindings, ast, context);"]}], "num": 71651}
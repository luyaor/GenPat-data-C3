{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d58f94c26190bf10d9b0825d8c00b63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "539066f99d522cf257220eb3628a8106", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate void resolveReference(Expression reference, Scope scope)", "signatureAfterChange": " \t \tprivate void resolveReference(Expression reference, Scope scope)", "diff": ["+\t\t\t// Verify type references", "+\t\t\t// TODO (frederic) fix for bug 119857", "+\t\t\t/*", "+\t\t\tif (fieldRef.binding != null && fieldRef.binding.isValidBinding() && fieldRef.receiverType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding resolvedType = (ReferenceBinding) fieldRef.receiverType;", "+\t\t\t\tverifyTypeReference(fieldRef.receiver, scope, source15, resolvedType);", "+\t\t\t}", "+\t\t\t*/", "+", "-\t\t\tif (reference.resolvedType.isValidBinding()) {", "-", "-\t\t\t\t// member types", "-\t\t\t\tif (resolvedType.isMemberType()) {", "-\t\t\t\t\tReferenceBinding topLevelType = resolvedType;", "-\t\t\t\t\tint depth = 0;", "-\t\t\t\t\twhile (topLevelType.enclosingType() != null) {", "-\t\t\t\t\t\ttopLevelType = topLevelType.enclosingType();", "-\t\t\t\t\t\tdepth++;", "-\t\t\t\t\t}", "-\t\t\t\t\tClassScope topLevelScope = scope.classScope();", "-\t\t\t\t\t// when scope is not on compilation unit type, then inner class may not be visible...", "-\t\t\t\t\tif (topLevelScope.parent.kind != Scope.COMPILATION_UNIT_SCOPE ||", "-\t\t\t\t\t\t!CharOperation.equals(topLevelType.sourceName, topLevelScope.referenceContext.name)) {", "-\t\t\t\t\t\ttopLevelScope = topLevelScope.outerMostClassScope();", "-\t\t\t\t\t\tif (reference instanceof JavadocSingleTypeReference) {", "-\t\t\t\t\t\t\t// inner class single reference can only be done in same unit", "-\t\t\t\t\t\t\tif ((!source15 && depth == 1) || topLevelType != topLevelScope.referenceContext.binding) {", "-\t\t\t\t\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "-\t\t\t\t\t\t\t\tscope.problemReporter().javadocNotVisibleReference(reference.sourceStart, reference.sourceEnd, scopeModifiers);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// inner class qualified reference can only be done in same package", "-\t\t\t\t\t\t\tif (topLevelType.getPackage() != topLevelScope.referenceContext.binding.getPackage()) {", "-\t\t\t\t\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "-\t\t\t\t\t\t\t\tscope.problemReporter().javadocNotVisibleReference(reference.sourceStart, reference.sourceEnd, scopeModifiers);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t\t// reference must have enough visibility to be used", "-\t\t\t\tif (!canBeSeen(scope.problemReporter().options.reportInvalidJavadocTagsVisibility, resolvedType)) {", "-\t\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "-\t\t\t\t\tscope.problemReporter().javadocNotVisibleReference(reference.sourceStart, reference.sourceEnd, scopeModifiers);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tverifyTypeReference(reference, scope, source15, resolvedType);", "+\t\t\t// Verify type references", "+\t\t\t// TODO (frederic) fix for bug 119857", "+\t\t\t/*", "+\t\t\tif (msgSend.binding != null && msgSend.binding.isValidBinding() && msgSend.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding resolvedType = (ReferenceBinding) msgSend.actualReceiverType;", "+\t\t\t\tverifyTypeReference(msgSend.receiver, scope, source15, resolvedType);", "+\t\t\t}", "+\t\t\t*/", "+\t\t\t// Verify type references", "+\t\t\t// TODO (frederic) fix for bug 119857", "+\t\t\t/*", "+\t\t\tif (alloc.binding != null && alloc.binding.isValidBinding() && alloc.resolvedType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding resolvedType = (ReferenceBinding) alloc.resolvedType;", "+\t\t\t\tverifyTypeReference(alloc.type, scope, source15, resolvedType);", "+\t\t\t}", "+\t\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e126e54860579a123bc901623f1f081", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "0df9f1687f9162f2dcdfeec3aed4b01b8d385a19", "commitAfterChange": "ce0f19288bc3747a9c0cb27b6996f5589afb99d1", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void seekTypes(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": "  \tpublic void seekTypes(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["+\tpublic void seekTypes(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor) {", "+\t\tseekTypes(name, pkg, partialMatch, acceptFlags, requestor, true);", "+\t}", "-\tpublic void seekTypes(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor) {", "-\t\t\t\tif (seekTypesInWorkingCopies(matchName, pkg, firstDot, partialMatch, topLevelTypeName, acceptFlags, requestor))"]}], "num": 26263}
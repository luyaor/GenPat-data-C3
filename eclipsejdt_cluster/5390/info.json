{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36aa10d1a964c7b1f378a101c700df81", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51fe8d05233ae67d1601f1d7e946c903", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "1aa1acf7e536c6add0a5c133c182e0530b15e40e", "commitAfterChange": "336363d3470bd5be33ebd91a109a774b90a2056d", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["+        \" Setting warning or error options using properties file:\\n\" + ", "+        \"    -properties: <file>   set warnings/errors option based on the properties\\n\" + ", "+        \"                          file contents. This option can be used with -nowarn,\\n\" + ", "+        \"                          -err:.. or -warn:.. options, but the last one on the\\n\" + ", "+        \"                          command line sets the options to be used.\\n\" + ", "+        \" \\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eabaf2a09789dd614c6a7fe8d1f9efca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "7a8728f6d81c28d6bb26a6aa19e5258c1824c75b", "commitAfterChange": "58d1213fc33b8c0012fb5fd98a7e0347bfcceca1", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " \tpublic void test094()", "signatureAfterChange": " \tpublic void test094()", "diff": ["-\t\t\t\"  // Method descriptor #8 (Ljava/lang/String;I)V\\n\" + ", "+\t\t\t\"  // Method descriptor #8 ()V\\n\" + ", "+\t\t\t\"  // Stack: 1, Locals: 0\\n\" + ", "+\t\t\t\"  static {};\\n\" + ", "+\t\t\t\"    0  iconst_0\\n\" + ", "+\t\t\t\"    1  anewarray X [1]\\n\" + ", "+\t\t\t\"    4  putstatic X.ENUM$VALUES : X[] [10]\\n\" + ", "+\t\t\t\"    7  return\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  // Method descriptor #15 (Ljava/lang/String;I)V\\n\" + ", "-\t\t\t\"    3  invokespecial java.lang.Enum(java.lang.String, int) [10]\\n\" + ", "+\t\t\t\"    3  invokespecial java.lang.Enum(java.lang.String, int) [16]\\n\" + ", "-\t\t\t\"  // Method descriptor #17 ()[LX;\\n\" + ", "+\t\t\t\"  // Method descriptor #21 ()[LX;\\n\" + ", "-\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [18]\\n\" + ", "+\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [10]\\n\" + ", "-\t\t\t\"    17  invokestatic java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) : void [20]\\n\" + ", "+\t\t\t\"    17  invokestatic java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) : void [22]\\n\" + ", "-\t\t\t\"  // Method descriptor #27 (Ljava/lang/String;)LX;\\n\" + ", "+\t\t\t\"  // Method descriptor #29 (Ljava/lang/String;)LX;\\n\" + ", "-\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [18]\\n\" + ", "+\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [10]\\n\" + ", "-\t\t\t\"    16  invokevirtual X.name() : java.lang.String [28]\\n\" + ", "-\t\t\t\"    19  invokevirtual java.lang.String.equals(java.lang.Object) : boolean [32]\\n\" + ", "+\t\t\t\"    16  invokevirtual X.name() : java.lang.String [30]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.lang.String.equals(java.lang.Object) : boolean [34]\\n\" + ", "-\t\t\t\"    34  new java.lang.IllegalArgumentException [38]\\n\" + ", "+\t\t\t\"    34  new java.lang.IllegalArgumentException [40]\\n\" + ", "-\t\t\t\"    39  invokespecial java.lang.IllegalArgumentException(java.lang.String) [40]\\n\" + ", "+\t\t\t\"    39  invokespecial java.lang.IllegalArgumentException(java.lang.String) [42]\\n\" + "]}], "num": 5390}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3a61da03aa5c40b46841ff1bb362ca3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "194028b2d0e0eb2ae2c1023d37d87e24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "44bb613cc5c3c46c068bd744b8bd3672d2dacb7a", "commitAfterChange": "3e29de302b9f16584da144bfb4192f62d3964b7a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r private void computeInheritedMethods()", "signatureAfterChange": "\r private void computeInheritedMethods()", "diff": ["+*/\r", "-\t} else {\r", "-\t\tMethodBinding[] methods = this.type.scope.getJavaLangObject().methods();\r", "-\t\tfor (int m = methods.length; --m >= 0;) {\r", "-\t\t\tMethodBinding method = methods[m];\r", "-\t\t\tif (!method.isConstructor()) {\r", "-\t\t\t\tMethodBinding[] existingMethods = (MethodBinding[]) this.inheritedMethods.get(method.selector);\r", "-\t\t\t\tif (existingMethods == null)\r", "-\t\t\t\t\texistingMethods = new MethodBinding[1];\r", "-\t\t\t\telse\r", "-\t\t\t\t\tSystem.arraycopy(existingMethods, 0,\r", "-\t\t\t\t\t\t(existingMethods = new MethodBinding[existingMethods.length + 1]), 0, existingMethods.length - 1);\r", "-\t\t\t\texistingMethods[existingMethods.length - 1] = method;\r", "-\t\t\t\tthis.inheritedMethods.put(method.selector, existingMethods);\r", "-\t\t\t}\r", "-\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46fe1bd67b166da821577d4d6bbd20a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "673b7eda95cd26449992e862f0c63f2c612903a0", "commitAfterChange": "b04602938404af4f8569a399fb36a5018768a262", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tprivate void computeInheritedMethods()", "signatureAfterChange": "\r private void computeInheritedMethods()", "diff": ["+}\r", "+private void computeInheritedMethods() {\r", "+\tthis.inheritedMethods = new HashtableOfObject(51); // maps method selectors to an array of methods... must search to match paramaters & return type\r", "+\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "+\tint lastPosition = 0;\r", "+\tinterfacesToVisit[lastPosition] = type.superInterfaces();\r", "-\t*/\r", "-\tprivate void computeInheritedMethods() {\r", "-\t\tthis.inheritedMethods = new HashtableOfObject(51);\r", "-\t\t// maps method selectors to an array of methods... must search to match paramaters & return type\r", "-\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\tint lastPosition = 0;\r", "-\t\tinterfacesToVisit[lastPosition] = type.superInterfaces();\r", "+\tif (this.type.isClass()) {\r", "+\t\tReferenceBinding superType = this.type;\r", "+\t\tMethodBinding[] nonVisibleDefaultMethods = null;\r", "+\t\tint nonVisibleCount = 0;\r", "-\t\tif (this.type.isClass()) {\r", "-\t\t\tReferenceBinding superType = this.type;\r", "-\t\t\tMethodBinding[] nonVisibleDefaultMethods = null;\r", "-\t\t\tint nonVisibleCount = 0;\r", "+\t\twhile ((superType = superType.superclass()) != null) {\r", "+\t\t\tif (superType.isValidBinding()) {\r", "+\t\t\t\tReferenceBinding[] itsInterfaces = superType.superInterfaces();\r", "+\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "+\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\t}\r", "-\t\t\twhile ((superType = superType.superclass()) != null) {\r", "-\t\t\t\tif (superType.isValidBinding()) {\r", "-\t\t\t\t\tReferenceBinding[] itsInterfaces = superType.superInterfaces();\r", "-\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\tMethodBinding[] methods = superType.methods();\r", "-\t\t\t\t\tnextMethod : for (int m = methods.length; --m >= 0;) {\r", "-\t\t\t\t\t\tMethodBinding method = methods[m];\r", "-\t\t\t\t\t\tif (!(method.isPrivate()\r", "-\t\t\t\t\t\t\t|| method.isConstructor()\r", "-\t\t\t\t\t\t\t|| method.isDefaultAbstract())) {\r", "-\t\t\t\t\t\t\t// look at all methods which are NOT private or constructors or default abstract\r", "-\t\t\t\t\t\t\tMethodBinding[] existingMethods =\r", "-\t\t\t\t\t\t\t\t(MethodBinding[]) this.inheritedMethods.get(method.selector);\r", "-\t\t\t\t\t\t\tif (existingMethods != null)\r", "-\t\t\t\t\t\t\t\tfor (int i = 0, length = existingMethods.length; i < length; i++)\r", "-\t\t\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType)\r", "-\t\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(existingMethods[i]))\r", "+\t\t\t\tMethodBinding[] methods = superType.methods();\r", "+\t\t\t\tnextMethod : for (int m = methods.length; --m >= 0;) {\r", "+\t\t\t\t\tMethodBinding method = methods[m];\r", "+\t\t\t\t\tif (!(method.isPrivate() || method.isConstructor() || method.isDefaultAbstract())) { // look at all methods which are NOT private or constructors or default abstract\r", "+\t\t\t\t\t\tMethodBinding[] existingMethods = (MethodBinding[]) this.inheritedMethods.get(method.selector);\r", "+\t\t\t\t\t\tif (existingMethods != null)\r", "+\t\t\t\t\t\t\tfor (int i = 0, length = existingMethods.length; i < length; i++)\r", "+\t\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType)\r", "+\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(existingMethods[i]))\r", "+\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;\r", "+\t\t\t\t\t\tif (nonVisibleDefaultMethods != null)\r", "+\t\t\t\t\t\t\tfor (int i = 0; i < nonVisibleCount; i++)\r", "+\t\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType)\r", "+\t\t\t\t\t\t\t\t\tif (CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector))\r", "+\t\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(nonVisibleDefaultMethods[i]))\r", "-\t\t\t\t\t\t\tif (nonVisibleDefaultMethods != null)\r", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < nonVisibleCount; i++)\r", "-\t\t\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType)\r", "-\t\t\t\t\t\t\t\t\t\tif (CharOperation\r", "-\t\t\t\t\t\t\t\t\t\t\t.equals(method.selector, nonVisibleDefaultMethods[i].selector))\r", "-\t\t\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(nonVisibleDefaultMethods[i]))\r", "-\t\t\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;\r", "-\t\t\t\t\t\t\tif (!(method.isDefault()\r", "-\t\t\t\t\t\t\t\t&& (method.declaringClass.fPackage != type.fPackage))) {\r", "-\t\t\t\t\t\t\t\t// ignore methods which have default visibility and are NOT defined in another package\r", "-\t\t\t\t\t\t\t\tif (existingMethods == null)\r", "-\t\t\t\t\t\t\t\t\texistingMethods = new MethodBinding[1];\r", "-\t\t\t\t\t\t\t\telse\r", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\texistingMethods,\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\t(existingMethods = new MethodBinding[existingMethods.length + 1]),\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\texistingMethods.length - 1);\r", "-\t\t\t\t\t\t\t\texistingMethods[existingMethods.length - 1] = method;\r", "-\t\t\t\t\t\t\t\tthis.inheritedMethods.put(method.selector, existingMethods);\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\tif (nonVisibleDefaultMethods == null)\r", "-\t\t\t\t\t\t\t\t\tnonVisibleDefaultMethods = new MethodBinding[10];\r", "-\t\t\t\t\t\t\t\telse\r", "-\t\t\t\t\t\t\t\t\tif (nonVisibleCount == nonVisibleDefaultMethods.length)\r", "-\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\t\tnonVisibleDefaultMethods,\r", "-\t\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\t\t(nonVisibleDefaultMethods = new MethodBinding[nonVisibleCount * 2]),\r", "-\t\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\t\tnonVisibleCount);\r", "-\t\t\t\t\t\t\t\tnonVisibleDefaultMethods[nonVisibleCount++] = method;\r", "+\t\t\t\t\t\tif (!(method.isDefault() && (method.declaringClass.fPackage != type.fPackage))) { // ignore methods which have default visibility and are NOT defined in another package\r", "+\t\t\t\t\t\t\tif (existingMethods == null)\r", "+\t\t\t\t\t\t\t\texistingMethods = new MethodBinding[1];\r", "+\t\t\t\t\t\t\telse\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(existingMethods, 0,\r", "+\t\t\t\t\t\t\t\t\t(existingMethods = new MethodBinding[existingMethods.length + 1]), 0, existingMethods.length - 1);\r", "+\t\t\t\t\t\t\texistingMethods[existingMethods.length - 1] = method;\r", "+\t\t\t\t\t\t\tthis.inheritedMethods.put(method.selector, existingMethods);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tif (nonVisibleDefaultMethods == null)\r", "+\t\t\t\t\t\t\t\tnonVisibleDefaultMethods = new MethodBinding[10];\r", "+\t\t\t\t\t\t\telse if (nonVisibleCount == nonVisibleDefaultMethods.length)\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(nonVisibleDefaultMethods, 0,\r", "+\t\t\t\t\t\t\t\t\t(nonVisibleDefaultMethods = new MethodBinding[nonVisibleCount * 2]), 0, nonVisibleCount);\r", "+\t\t\t\t\t\t\tnonVisibleDefaultMethods[nonVisibleCount++] = method;\r", "-\t\t\t\t\t\t\t\tif (method.isAbstract()\r", "-\t\t\t\t\t\t\t\t\t&& !this.type.isAbstract())\r", "-\t\t\t\t\t\t\t\t\t// non visible abstract methods cannot be overridden so the type must be defined abstract\r", "-\t\t\t\t\t\t\t\t\tthis.problemReporter().abstractMethodCannotBeOverridden(this.type, method);\r", "+\t\t\t\t\t\t\tif (method.isAbstract() && !this.type.isAbstract()) // non visible abstract methods cannot be overridden so the type must be defined abstract\r", "+\t\t\t\t\t\t\t\tthis.problemReporter().abstractMethodCannotBeOverridden(this.type, method);\r", "-\t\t\t\t\t\t\t\tMethodBinding[] current =\r", "-\t\t\t\t\t\t\t\t\t(MethodBinding[]) this.currentMethods.get(method.selector);\r", "-\t\t\t\t\t\t\t\tif (current != null) {\r", "-\t\t\t\t\t\t\t\t\t// non visible methods cannot be overridden so a warning is issued\r", "-\t\t\t\t\t\t\t\t\tfoundMatch : for (int i = 0, length = current.length; i < length; i++) {\r", "-\t\t\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType) {\r", "-\t\t\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(current[i])) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);\r", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak foundMatch;\r", "-\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tMethodBinding[] current = (MethodBinding[]) this.currentMethods.get(method.selector);\r", "+\t\t\t\t\t\t\tif (current != null) { // non visible methods cannot be overridden so a warning is issued\r", "+\t\t\t\t\t\t\t\tfoundMatch : for (int i = 0, length = current.length; i < length; i++) {\r", "+\t\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType) {\r", "+\t\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(current[i])) {\r", "+\t\t\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);\r", "+\t\t\t\t\t\t\t\t\t\t\tbreak foundMatch;\r", "+\t} else {\r", "+\t\tMethodBinding[] methods = this.type.scope.getJavaLangObject().methods();\r", "+\t\tfor (int m = methods.length; --m >= 0;) {\r", "+\t\t\tMethodBinding method = methods[m];\r", "+\t\t\tif (!method.isConstructor()) {\r", "+\t\t\t\tMethodBinding[] existingMethods = (MethodBinding[]) this.inheritedMethods.get(method.selector);\r", "+\t\t\t\tif (existingMethods == null)\r", "+\t\t\t\t\texistingMethods = new MethodBinding[1];\r", "+\t\t\t\telse\r", "+\t\t\t\t\tSystem.arraycopy(existingMethods, 0,\r", "+\t\t\t\t\t\t(existingMethods = new MethodBinding[existingMethods.length + 1]), 0, existingMethods.length - 1);\r", "+\t\t\t\texistingMethods[existingMethods.length - 1] = method;\r", "+\t\t\t\tthis.inheritedMethods.put(method.selector, existingMethods);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\tReferenceBinding superType = interfaces[j];\r", "-\t\t\t\tif ((superType.tagBits & InterfaceVisited) == 0) {\r", "-\t\t\t\t\tsuperType.tagBits |= InterfaceVisited;\r", "-\t\t\t\t\tif (superType.isValidBinding()) {\r", "-\t\t\t\t\t\tReferenceBinding[] itsInterfaces = superType.superInterfaces();\r", "-\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t\t}\r", "+\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "+\t\t\tReferenceBinding superType = interfaces[j];\r", "+\t\t\tif ((superType.tagBits & InterfaceVisited) == 0) {\r", "+\t\t\t\tsuperType.tagBits |= InterfaceVisited;\r", "+\t\t\t\tif (superType.isValidBinding()) {\r", "+\t\t\t\t\tReferenceBinding[] itsInterfaces = superType.superInterfaces();\r", "+\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "+\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\t\tMethodBinding[] methods = superType.methods();\r", "-\t\t\t\t\t\tfor (int m = methods.length;\r", "-\t\t\t\t\t\t\t--m >= 0;\r", "-\t\t\t\t\t\t\t) { // Interface methods are all abstract public\r", "-\t\t\t\t\t\t\tMethodBinding method = methods[m];\r", "-\t\t\t\t\t\t\tMethodBinding[] existingMethods =\r", "-\t\t\t\t\t\t\t\t(MethodBinding[]) this.inheritedMethods.get(method.selector);\r", "-\t\t\t\t\t\t\tif (existingMethods == null)\r", "-\t\t\t\t\t\t\t\texistingMethods = new MethodBinding[1];\r", "-\t\t\t\t\t\t\telse\r", "-\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\texistingMethods,\r", "-\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t(existingMethods = new MethodBinding[existingMethods.length + 1]),\r", "-\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\texistingMethods.length - 1);\r", "-\t\t\t\t\t\t\texistingMethods[existingMethods.length - 1] = method;\r", "-\t\t\t\t\t\t\tthis.inheritedMethods.put(method.selector, existingMethods);\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\tMethodBinding[] methods = superType.methods();\r", "+\t\t\t\t\tfor (int m = methods.length; --m >= 0;) { // Interface methods are all abstract public\r", "+\t\t\t\t\t\tMethodBinding method = methods[m];\r", "+\t\t\t\t\t\tMethodBinding[] existingMethods = (MethodBinding[]) this.inheritedMethods.get(method.selector);\r", "+\t\t\t\t\t\tif (existingMethods == null)\r", "+\t\t\t\t\t\t\texistingMethods = new MethodBinding[1];\r", "+\t\t\t\t\t\telse\r", "+\t\t\t\t\t\t\tSystem.arraycopy(existingMethods, 0,\r", "+\t\t\t\t\t\t\t\t(existingMethods = new MethodBinding[existingMethods.length + 1]), 0, existingMethods.length - 1);\r", "+\t\t\t\t\t\texistingMethods[existingMethods.length - 1] = method;\r", "+\t\t\t\t\t\tthis.inheritedMethods.put(method.selector, existingMethods);\r", "+\t}\r", "-\t\t// bit reinitialization\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\tinterfaces[j].tagBits &= ~InterfaceVisited;\r", "+\t// bit reinitialization\r", "+\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\tinterfaces[j].tagBits &= ~InterfaceVisited;\r", "+\t}\r", "+}\r"]}], "num": 41698}
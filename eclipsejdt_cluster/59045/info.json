{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8194384d001f6c49282bb8f29fa48cc0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "726559dc06a9138c22efd4955d7710ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tprivate void findInterfacesMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tReferenceBinding[] itsInterfaces, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "signatureAfterChange": "  \tprivate void findInterfacesMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tReferenceBinding[] itsInterfaces, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "diff": ["-\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\t\t\tint lastPosition = 0;", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\tSimpleSet interfacesSeen = new SimpleSet(itsInterfaces.length * 2);", "+\t\t\tReferenceBinding[] interfacesToVisit = itsInterfaces;", "+\t\t\tint nextPosition = interfacesToVisit.length;", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding currentType = interfacesToVisit[i];", "+\t\t\t\tMethodBinding[] methods = currentType.availableMethods();", "+\t\t\t\tif(methods != null) {", "+\t\t\t\t\tif(isCompletingDeclaration) {", "+\t\t\t\t\t\tfindLocalMethodDeclarations(", "+\t\t\t\t\t\t\tselector,", "+\t\t\t\t\t\t\tmethods,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\t\texactMatch,", "+\t\t\t\t\t\t\treceiverType);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfindLocalMethods(", "+\t\t\t\t\t\t\tselector,", "+\t\t\t\t\t\t\ttypeArgTypes,", "+\t\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\t\tmethods,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\t\t\texactMatch,", "+\t\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\t\timplicitCall,", "+\t\t\t\t\t\t\tsuperCall,", "+\t\t\t\t\t\t\tcanBePrefixed);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tReferenceBinding currentType = interfaces[j];", "-", "-\t\t\t\t\tif (!interfacesSeen.includes(currentType)) {", "-\t\t\t\t\t\t// if interface as not already been visited", "-\t\t\t\t\t\tinterfacesSeen.add(currentType);", "-", "-\t\t\t\t\t\tMethodBinding[] methods = currentType.availableMethods();", "-\t\t\t\t\t\tif(methods != null) {", "-\t\t\t\t\t\t\tif(isCompletingDeclaration){", "-\t", "-\t\t\t\t\t\t\t\tfindLocalMethodDeclarations(", "-\t\t\t\t\t\t\t\t\tselector,", "-\t\t\t\t\t\t\t\t\tmethods,", "-\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\t\t\t\treceiverType);", "-\t", "-\t\t\t\t\t\t\t} else {", "-\t", "-\t\t\t\t\t\t\t\tfindLocalMethods(", "-\t\t\t\t\t\t\t\t\tselector,", "-\t\t\t\t\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\t\t\t\tmethods,", "-\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\t\t\t\timplicitCall,", "-\t\t\t\t\t\t\t\t\tsuperCall,", "-\t\t\t\t\t\t\t\t\tcanBePrefixed);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();", "-\t\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-", "-\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tlastPosition);", "-\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t\t}", "+\t\t\t\tif ((itsInterfaces = currentType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfc8b95c5e4c48388a431e69c0e5abd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found)", "signatureAfterChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found)", "diff": ["-\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\t\t\tint lastPosition = 0;", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\tSimpleSet interfacesSeen = new SimpleSet(itsInterfaces.length * 2);", "-", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tcurrentType = interfaces[j];", "-\t\t\t\t\tif (!interfacesSeen.includes(currentType)) {", "-\t\t\t\t\t\t// if interface as not already been visited", "-\t\t\t\t\t\tinterfacesSeen.add(currentType);", "-", "-\t\t\t\t\t\tcompilationUnitScope().recordTypeReference(currentType);", "-\t\t\t\t\t\tMethodBinding[] currentMethods = currentType.getMethods(selector);", "-\t\t\t\t\t\tif (currentMethods.length > 0)", "-\t\t\t\t\t\t\tfound.addAll(currentMethods);", "-\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();", "-\t\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit, 0,", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0,", "-\t\t\t\t\t\t\t\t\tlastPosition);", "-\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t\t}", "+\t\t\tReferenceBinding[] interfacesToVisit = itsInterfaces;", "+\t\t\tint nextPosition = interfacesToVisit.length;", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tcurrentType = interfacesToVisit[i];", "+\t\t\t\tcompilationUnitScope().recordTypeReference(currentType);", "+\t\t\t\tMethodBinding[] currentMethods = currentType.getMethods(selector);", "+\t\t\t\tif (currentMethods.length > 0)", "+\t\t\t\t\tfound.addAll(currentMethods);", "+\t\t\t\tif ((itsInterfaces = currentType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}], "num": 59045}
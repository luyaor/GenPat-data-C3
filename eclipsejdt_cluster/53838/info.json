{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "522c5dde8e573eb9daf03fa2fed2f47c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77718f52a935ea18626ca7c08fc9ad5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "signatureAfterChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "diff": ["-\t    \tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t    \tint length = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\t\tif (headerLine) firstColumn++;", "-\t\t\t\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "-\t\t\t\t\tif (headerLine) firstColumn++;", "-\t\t\t    \t\ttokenLength++; // include space between nodes", "+\t\t\t    \t\tlength++; // include space between nodes", "-    \t\t\t\tint col = this.column + tokenLength;", "+    \t\t\t\tint col = this.column + length;", "-\t    \t\t\t\t\t\ttokenLength = 1;", "+\t    \t\t\t\t\t\tlength = 1;", "-\t    \t\t\t\t\t\ttokenLength = 1;", "+\t    \t\t\t\t\t\tlength = 1;", "-\t\t\t\t    \t\t\ttokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t\t\t    \t\t\tlength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t    \t\t\t\tcol += tokenLength;", "+\t    \t\t\t\tcol += length;", "-\t    \t\t\t\ttokenLength++;", "+\t    \t\t\t\tlength++;", "-\t    \t\t\ttokenLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t    \t\t\tlength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t    \t\t\ttokenLength++;", "+\t    \t\t\tlength++;", "-\t\t    \t\t\ttokenLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t    \t\t\tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t    \t\t\tif ((firstColumn + length + tokenLength) >= maxColumn) {", "+\t\t    \t\t\t\tbreak;", "+\t\t    \t\t\t}", "+\t\t    \t\t\tlength += tokenLength;", "-\t    \t\ttokenLength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;", "+\t    \t\tlength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;", "-\t    \t\ttokenLength++; // include space between nodes", "+\t    \t\tlength++; // include space between nodes", "-\t\t\tif ((this.column + tokenLength) > maxColumn) {", "+\t\t\tif ((this.column + length) > maxColumn) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0f84e96e685c360f214fa1aaec89c3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8bd987839355c299213c95f3874a2e3574283d9c", "commitAfterChange": "76b6723dbe61d0b9874754d0d6572d1a4d8c0cbc", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "signatureAfterChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "diff": ["-\t    \tint token = this.scanner.getNextToken();", "-\t    \tint length = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t    \tint length = 0;", "+\t\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\tif (this.commentIndentation != null) firstColumn += this.commentIndentation.length();", "+\t\t\tif (headerLine) maxColumn++;", "-\t\t\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "-\t\t\t\tif (headerLine) firstColumn++;", "-    \t\t\t\tint col = this.column + length;", "+    \t\t\t\tint lastColumn = this.column + length;", "-\t    \t\t\t\ttoken = this.scanner.getNextToken();", "+\t    \t\t\t\tint token = this.scanner.getNextToken();", "-\t    \t\t\t\tcol += length;", "-\t\t\t    \t\tif (headerLine) { // special case when text is on the same line of the javadoc's header", "-\t\t\t    \t\t\tif ((col-1) > maxColumn)  {", "-\t\t\t\t\t\t\t\tnewLines++;", "-\t\t\t\t\t\t\t\tcol = firstColumn;", "-\t\t\t\t\t\t\t\tfirstColumn--;", "+\t    \t\t\t\tlastColumn += length;", "+\t    \t\t\t\tif (lastColumn > maxColumn) {", "+\t\t\t\t\t\t\tnewLines++;", "+\t\t\t\t    \t\tif (headerLine) {", "+\t\t\t\t\t\t\t\tmaxColumn--;", "-\t\t\t    \t\t} else if (col > maxColumn) {", "-\t\t\t\t\t\t\tnewLines++;", "-\t\t\t\t\t\t\tcol = firstColumn;", "+\t\t\t\t\t\t\tlastColumn = firstColumn;", "+    \t\t\t\tif (text.getHtmlTagID() == JAVADOC_SINGLE_BREAK_TAG_ID) {", "+    \t\t\t\t\t// never break before single break tag", "+    \t\t\t\t\treturn 0;", "+    \t\t\t\t}", "+    \t\t\t\tthis.scanner.getNextToken();", "-\t    \t\t\t\ttoken = this.scanner.getNextToken();", "+\t    \t\t\t\tint token = this.scanner.getNextToken();", "-\t\t    \t\t\tif ((firstColumn + length + tokenLength) >= maxColumn) {", "+\t\t    \t\t\tlength += tokenLength;", "+\t\t    \t\t\tif ((this.column + length) >= maxColumn) {", "-\t\t    \t\t\tlength += tokenLength;", "-\t    \t\tlength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;", "+\t    \t\tlength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;  // tag length", "+\t    \t\tif (inlinedBlock.reference != null) {", "+\t\t    \t\tlength++; // space between tag and reference", "+\t\t\t\t\tthis.scanner.resetTo(inlinedBlock.reference.sourceStart, inlinedBlock.reference.sourceEnd);", "+\t\t\t\t\tint previousToken = -1;", "+\t\t\t\t\tloop: while (!this.scanner.atEnd()) {", "+\t\t\t\t\t\tint token = this.scanner.getNextToken();", "+\t\t\t    \t\tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t\t\t\t\tswitch (token) {", "+\t\t\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t\t\t\t\t\t\tif (previousToken == TerminalTokens.TokenNameCOMMA) { // space between method arguments", "+\t\t\t\t\t\t\t\t\tlength++;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tlength += tokenLength;", "+\t\t\t\t\t\t\t\tif ((this.column+length) > maxColumn) {", "+\t\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t    \t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpreviousToken = token;", "+\t\t    \t\t}", "+\t    \t\t}", "+\t    \t\tlength++; // one more for closing brace", "+    \t\tif ((firstColumn + length) >= maxColumn && node == block.nodes[0]) {", "+    \t\t\t// Do not split in this peculiar case as length would be also over the max", "+    \t\t\t// length on next line", "+    \t\t\treturn 0;", "+    \t\t}"]}], "num": 53838}
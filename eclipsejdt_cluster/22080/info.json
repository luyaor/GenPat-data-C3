{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58aacbee614062906f6cad42c7c2ad0e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0435a4ad6deabd290ea39e11028bf5ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "058f4956c302999db0dab277cf91883f2d016e2b", "commitAfterChange": "27d9d524a3b624cfc1260a727d1dfb92d53ae22a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(),", "-\t\t\t\t\texprElementType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, ((ArrayBinding) castType).elementsType(), exprElementType, expression);", "-\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "-\t\t\t\tif (match == null) {", "-\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\tif (expressionType instanceof ReferenceBinding) {", "+\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\t\tif (match == null) {", "+\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null, true);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\tcastType.erasure(),", "-\t\t\t\t\texpressionType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "-\t\t\tif (match != null) {", "-\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "-\t\t\t\treturn true;", "+\t\t\tif (castType instanceof ReferenceBinding) {", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "-\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\tscope,", "-\t\t\t\tcastType,", "-\t\t\t\texpressionType.erasure(),", "-\t\t\t\texpression);", "+\t\t\treturn checkCastTypesCompatibility(scope, castType, expressionType.erasure(), expression);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\tcastType.erasure(),", "-\t\t\t\t\texpressionType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\tscope,", "-\t\t\t\tcastType.erasure(),", "-\t\t\t\texpressionType,", "-\t\t\t\texpression);", "+\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\t\t\t\treportIllegalCast(scope, castType, expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131bf35c8c2811e3a020f5c16f012991", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "c8d00cbf2814182ef1ce07d7254dc4a8d85157bc", "commitAfterChange": "76285abc2e18a9626166def15ee7d0b4124f0aa5", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " public void ldc(String constant)", "signatureAfterChange": " public void ldc(String constant)", "diff": ["-\tint currentConstantPoolIndex = constantPool.currentIndex;", "-\tint currentConstantPoolOffset = constantPool.currentOffset;", "-\tint index = constantPool.literalIndexForLdc(constant.toCharArray());", "+\tchar[] constantChars = constant.toCharArray();", "+\tint index = constantPool.literalIndexForLdc(constantChars);", "-\t\tif (stackDepth > stackMax)", "+\t\tif (stackDepth > stackMax) {", "+\t\t}", "-\t\tchar[] constantChars = constant.toCharArray();", "-\t\tconstantPool.currentIndex = currentConstantPoolIndex;", "-\t\tconstantPool.currentOffset = currentConstantPoolOffset;", "-\t\tconstantPool.stringCache.remove(constantChars);", "-\t\tconstantPool.UTF8Cache.remove(constantChars);", "-\t\tif (stackDepth > stackMax)", "+\t\tif (stackDepth > stackMax) {", "+\t\t}", "-\t\t\t\tif (constantLength + 2 > (utf8encodingLength = utf8encoding.length)) {", "+\t\t\t\tif (length + 3 > (utf8encodingLength = utf8encoding.length)) {", "-\t\t\tsubChars = new char[i - startIndex];", "-\t\t\tSystem.arraycopy(constantChars, startIndex, subChars, 0, i - startIndex);", "+\t\t\tint newCharLength = i - startIndex;", "+\t\t\tsubChars = new char[newCharLength];", "+\t\t\tSystem.arraycopy(constantChars, startIndex, subChars, 0, newCharLength);"]}], "num": 22080}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d841e825288cc608a8e3a5b8d5f49107", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adeb1ebf5591b51962ecb0d4603aed0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompoundAssignment.java", "commitBeforeChange": "3fe2c90fe88afce7467b641aeb4882b502885aad", "commitAfterChange": "3c44432d0925693b8b2813ab5e130633ad6e547e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\treturn  ((Reference) this.lhs).analyseAssignment(currentScope, flowContext, flowInfo, this, true).unconditionalInits();", "+\tflowInfo = ((Reference) this.lhs).analyseAssignment(currentScope, flowContext, flowInfo, this, true).unconditionalInits();", "+\tif (this.resolvedType.id == T_JavaLangString) {", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=339250", "+\t\tLocalVariableBinding local = this.lhs.localVariableBinding();", "+\t\tif (local != null && this.resolvedType.id == T_JavaLangString) {", "+\t\t\t// compound assignment results in a definitely non null value for String", "+\t\t\tflowInfo.markAsDefinitelyNonNull(local);", "+\t\t\tif (flowContext.initsOnFinally != null)", "+\t\t\t\tflowContext.initsOnFinally.markAsDefinitelyNonNull(local);", "+\t\t}", "+\t}", "+\treturn flowInfo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babe80c86f56f1bcba0d53b408abbd64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "+public FlowInfo analyseCode(", "-", "-\t\tflowInfo = expression", "-\t\t\t.analyseCode(currentScope, flowContext, flowInfo)", "-\t\t\t.unconditionalInits();", "-\t\texpression.checkNullStatus(currentScope, flowContext, flowInfo, FlowInfo.NON_NULL);", "-\t\treturn flowInfo;", "+\tLocalVariableBinding local = this.expression.localVariableBinding();", "+\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\tflowContext.recordUsingNullReference(currentScope, local, ", "+\t\t\tthis.expression, FlowContext.CAN_ONLY_NULL, flowInfo);", "+\t\tflowInfo = expression.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t\tFlowInfo initsWhenFalse = flowInfo.copy();", "+\t\tflowInfo.markAsComparedEqualToNonNull(local);", "+\t\treturn FlowInfo.conditional(flowInfo, initsWhenFalse);", "+\treturn expression.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39afd87d0998001f73084387788179e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "6c050fdd50da181a73c24a3d84f6766ee118b95b", "commitAfterChange": "f13a5d135f0d6d82ec59c09667ba7900fd57b604", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tleft.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "-\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();", "-\tright.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "-\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();", "+\tif (this.resolvedType.id == T_JavaLangString) {", "+\t\treturn right.analyseCode(currentScope, flowContext, ", "+\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits()).", "+\t\t\tunconditionalInits();", "+\t}", "+\telse {", "+\t\tleft.checkNPE(currentScope, flowContext, flowInfo);", "+\t\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t\tright.checkNPE(currentScope, flowContext, flowInfo);", "+\t\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t}"]}], "num": 45838}
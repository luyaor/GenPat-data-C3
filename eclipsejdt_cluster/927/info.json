{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e11f174d01843555dea1e28d58bb973a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5029fc7ba8c339ce3dfba17dd2d21ffb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "e781f8e7f01bf193d5dc75f48e7e40aa2b3a1ff8", "commitAfterChange": "253b6e86274d6a434f078cf2295ba672e6b070f0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["-", "-\t\tString fullName;", "-\t\tif (this.rootPath != null && !this.rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "-\t\t\tfullName = this.rootPath + '/' + name;", "-\t\t} else {", "-\t\t\tfullName = name;", "+\t", "+\t\tchar[] source = null;", "+\t\tif (this.rootPath != null) {", "+\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "-\t\tchar[] source = findSource(fullName);", "-\t\t\t// root path may just have been a hint: try recomputing it", "-\t\t\tString rootPath = this.computeRootPath();", "-\t\t\tString newFullName;", "-\t\t\tif (rootPath != null && !rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "-\t\t\t\tif (rootPath.endsWith(\"/\")) { //$NON-NLS-1$", "-\t\t\t\t\tnewFullName = rootPath + name;", "-\t\t\t\t} else {", "-\t\t\t\t\tnewFullName = rootPath + '/' + name;", "+\t\t\t/*", "+\t\t\t * We should try all existing root paths. If none works, try to recompute it.", "+\t\t\t * If it still doesn't work, then return null", "+\t\t\t */", "+\t\t\tif (this.rootPaths != null) {", "+\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "+\t\t\t\t\tString currentRootPath = (String) iterator.next();", "+\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "+\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "+\t\t\t\t\t\tif (source != null) {", "+\t\t\t\t\t\t\t// remember right root path", "+\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "+\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tnewFullName = name;", "-\t\t\tif (!fullName.equals(newFullName)) {", "-\t\t\t\tsource = this.findSource(newFullName);", "-\t\t\t\tif (source != null) {", "-\t\t\t\t\t// remember right root path", "-\t\t\t\t\tthis.rootPath = rootPath;", "+\t\t\tif (source == null) {", "+\t\t\t\t// Try to recompute it and add the new root path to the rootPaths collection", "+\t\t\t\tString newRootPath = computeRootPath(name);", "+\t\t\t\tif (newRootPath != null) {", "+\t\t\t\t\tif (this.rootPaths == null) {", "+\t\t\t\t\t\tthis.rootPaths = new HashSet();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.rootPaths.add(newRootPath);", "+\t\t\t\t\tthis.rootPath = newRootPath;", "+\t\t\t\t\tsource = getSourceForRootPath(newRootPath, name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92e2c193a11b3d3f6918da3d3d7fab91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "ab65f9958c4ed5b3b45ee13b8e88b17d2c86ad3d", "commitAfterChange": "6fb362f5d4ff00934fbc56c75799ebc442d91e1a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic synchronized void initializeRoots()", "signatureAfterChange": "  \tpublic void initializeRoots()", "diff": ["-\tpublic synchronized void initializeRoots() {", "+\tpublic void initializeRoots() {", "+\t\t", "-\t\tthis.oldRoots = this.roots == null ? new Hashtable() : this.roots;", "-\t\tthis.oldOtherRoots = this.otherRoots == null ? new Hashtable() : this.otherRoots;", "+\t\tHashMap newOldRoots;", "+\t\tHashMap newOldOtherRoots;", "+\t\tsynchronized(this) {", "+\t\t\tnewOldRoots = this.roots == null ? new HashMap() : this.roots;", "+\t\t\tnewOldOtherRoots = this.otherRoots == null ? new HashMap() : this.otherRoots;", "+\t\t\t// recompute root infos only if necessary", "+\t\t\tif (!this.rootsAreStale) {", "+\t\t\t\tthis.oldRoots = newOldRoots;", "+\t\t\t\tthis.oldOtherRoots = newOldOtherRoots;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "-\t\t// recompute root infos only if necessary", "-\t\tif (!this.rootsAreStale) return;", "+\t\tHashMap newRoots = new HashMap();", "+\t\tHashMap newOtherRoots = new HashMap();", "+\t\tHashMap newSourceAttachments = new HashMap();", "-\t\tthis.roots = new Hashtable();", "-\t\tthis.otherRoots = new Hashtable();", "-\t\tthis.sourceAttachments = new Hashtable();", "-\t\t", "-\t\t\t\tif (this.roots.get(path) == null) {", "-\t\t\t\t\tthis.roots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "+\t\t\t\tif (newRoots.get(path) == null) {", "+\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "-\t\t\t\t\tArrayList rootList = (ArrayList)this.otherRoots.get(path);", "+\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "-\t\t\t\t\t\tthis.otherRoots.put(path, rootList);", "+\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "-\t\t\t\t\tthis.sourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "-\t\tthis.rootsAreStale = false;", "+\t\tsynchronized(this) {", "+\t\t\tif (this.rootsAreStale) { // double check again", "+\t\t\t\tthis.oldRoots = newOldRoots;", "+\t\t\t\tthis.oldOtherRoots = newOldOtherRoots;\t\t\t", "+\t\t\t\tif (newRoots != null) {", "+\t\t\t\t\tthis.roots = newRoots;", "+\t\t\t\t\tthis.otherRoots = newOtherRoots;", "+\t\t\t\t\tthis.sourceAttachments = newSourceAttachments;", "+\t\t\t\t\tthis.rootsAreStale = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 927}
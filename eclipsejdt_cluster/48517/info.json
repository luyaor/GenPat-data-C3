{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b438c7724d2e4ba8c685024c759781f5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a23621393c5af6ad62dd876afdc4980", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "602a7d55ff75dfdfa2cae12bead009c418215b66", "commitAfterChange": "183f54b68364b226246fe663acdbcbf6f6f1dd9e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "signatureAfterChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "diff": ["+\t\t\t\t\t\t\tif(importReference.isStatic()) {", "+\t\t\t\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\t\t\t\t\tif ((this.unitScope = parsedUnit.scope) != null) {", "+\t\t\t\t\t\t\t\t\tchar[][] oldTokens = importReference.tokens;", "+\t\t\t\t\t\t\t\t\tint tokenCount = oldTokens.length;", "+\t\t\t\t\t\t\t\t\tchar[] lastToken = oldTokens[tokenCount - 1];", "+\t\t\t\t\t\t\t\t\tchar[][] qualifierTokens = CharOperation.subarray(oldTokens, 0, tokenCount - 1);", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "+\t\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "+\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0c41480cec5d56bb063ee99be9e2d08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "5cb9f8ecd53559ff3c10df42a2bc3784ca7e7125", "commitAfterChange": "3d2e4bef103f9f9069998e5bb644641fa3ffad9f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void select( \t\tICompilationUnit sourceUnit, \t\tint selectionSourceStart, \t\tint selectionSourceEnd)", "signatureAfterChange": " \tpublic void select( \t\tICompilationUnit sourceUnit, \t\tint selectionSourceStart, \t\tint selectionSourceEnd)", "diff": ["+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif(importReference.isStatic()) {", "+\t\t\t\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\t\t\t\t\tif ((this.unitScope = parsedUnit.scope) != null) {", "+\t\t\t\t\t\t\t\t\tint tokenCount = tokens.length;", "+\t\t\t\t\t\t\t\t\tchar[] lastToken = tokens[tokenCount - 1];", "+\t\t\t\t\t\t\t\t\tchar[][] qualifierTokens = CharOperation.subarray(tokens, 0, tokenCount - 1);", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "+\t\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "+\t\t\t\t\t\t\t\t\t\tselectStaticFieldFromStaticImport(parsedUnit, lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\tselectStaticMethodFromStaticImport(parsedUnit, lastToken, ref);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8da072565678e4418bf254bfcaf8047", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "510157084fee658717584c7d1b83583284de1aee", "commitAfterChange": "c62f395f5b6154673520cf146ae6171d3654422c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "signatureAfterChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "diff": ["-\t\t\t\t\t// a extra lookup is required`\r", "+\t\t\t\t\t// a extra lookup is required\r", "+\t\t} else if (node instanceof QualifiedTypeReference) {\r", "+\t\t\tQualifiedTypeReference qualifiedTypeReference = (QualifiedTypeReference) node;\r", "+\t\t\tif (index == 0) {\r", "+\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedTypeReference.binding);\r", "+\t\t\t} else {\r", "+\t\t\t\tint qualifiedTypeLength = qualifiedTypeReference.tokens.length;\r", "+\t\t\t\tint indexInQualifiedName = qualifiedTypeLength - index; // one-based\r", "+\t\t\t\tScope internalScope = retrieveEnclosingScope(parent);\r", "+\t\t\t\tBinding binding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {\r", "+\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {\r", "+\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// it is a type\r", "+\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r"]}], "num": 48517}
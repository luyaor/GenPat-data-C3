{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "888ee1c9143fc8e790f95eba74be149d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3240b09a56068a5d4fe72fb507336a81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "d051e39b37c2132ed5482eec136a6f8669919913", "commitAfterChange": "27e5bf24465f583e3802225a581a8de5dc29abcf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=185682", "+\tif (!valueRequired && ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.LOCAL)) {", "+\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "+\t\tif (localBinding.useFlag == LocalVariableBinding.FAKE_USED) {", "+\t\t\t// compound assignment is the only usage of this local", "+\t\t\treportOnlyUselesslyReadLocal(currentScope, localBinding);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78046aa2b7f1b56b07345f6f081c2e6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "commitAfterChange": "07f0630efa2ba0b3ee43440c49e246f85c531281", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": "  \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=248897", "+\t\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\tpublic boolean visit(SingleNameReference reference, BlockScope scop) {", "+\t\t\t\t\tif (reference.binding instanceof LocalVariableBinding) {", "+\t\t\t\t\t\t((LocalVariableBinding) reference.binding).useFlag = LocalVariableBinding.USED;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tthis.value.traverse(visitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3f2646782e4f78c7e52aab540919ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "10a7931aec1c8332a21c39057c6b5465506f45bd", "commitAfterChange": "ac67adfb696f3d698561eed93e542c7d574b5a91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=185682", "-\tif (!valueRequired && ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.LOCAL)) {", "-\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "-\t\tif (localBinding.useFlag == LocalVariableBinding.FAKE_USED) {", "-\t\t\t// compound assignment is the only usage of this local", "-\t\t\treportOnlyUselesslyReadLocal(currentScope, localBinding);", "-\t\t}", "-\t}"]}], "num": 27815}
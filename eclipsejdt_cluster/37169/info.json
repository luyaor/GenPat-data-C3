{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "747d9c0707d8d01593ba8845ac6501cc", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "097001fb3a67e40dcc34788a7a8571fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 146, "signatureBeforeChange": " public void test1001() throws CoreException, InterruptedException, IOException", "signatureAfterChange": " public void test1001() throws CoreException, InterruptedException, IOException", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in /P3/Y.java (at line 1)\\n\" +", "-\t\t\t\"\tclass Y implements I {\\n\" +", "-\t\t\t\"\t      ^\\n\" +", "-// we miss the first diagnostic - see justification in bugzilla", "-//\t\t\t\"The type Y must implement the inherited abstract method I.bar(X)\\n\" +", "-//\t\t\t\"----------\\n\" +", "-//\t\t\t\"2. ERROR in /P3/Y.java (at line 1)\\n\" +", "-//\t\t\t\"\tclass Y implements I {\\n\" +", "-//\t\t\t\"\t      ^\\n\" +", "-\t\t\t\"The type Y must implement the inherited abstract method I.foo()\\n\" +", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in /P3/Y.java (at line 1)\\n\" + ", "+\t\t\t\t\"\tclass Y implements I {\\n\" + ", "+\t\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\t\"The type Y must implement the inherited abstract method I.bar(X)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in /P3/Y.java (at line 1)\\n\" + ", "+\t\t\t\t\"\tclass Y implements I {\\n\" + ", "+\t\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\t\"The type Y must implement the inherited abstract method I.foo()\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ea19a226fcfed9a5be69833c2f5a95b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "6d276ea2f2a087df8413734766ba1742b82876d0", "commitAfterChange": "4dfe9f04d4f1fc7a9e70c8aba9edf4b323d079b9", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void test0043()", "signatureAfterChange": " public void test0043()", "diff": ["-\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\"\tpublic static void foo(){}\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"Syntax error, insert \\\"enum Identifier\\\" to complete EnumHeader\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"Syntax error on token \\\"}\\\", delete this token\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"Syntax error, insert \\\"EnumBody\\\" to complete EnumDeclaration\\n\" + ", "+\t\t\"\t                         ^\\n\" + ", "+\t\t\"Syntax error, insert \\\"}\\\" to complete ClassBody\\n\" + ", "+\t\t\"----------\\n\";", "+\tString expected14ProblemLog =", "+\t\texpected13ProblemLog;", "+\t", "+\tString expected15ProblemLog = ", "+\t\texpected13ProblemLog;", "+\t", "+\trunComplianceParserTest(", "+\t\ttestFiles,", "+\t\texpected13ProblemLog,", "+\t\texpected14ProblemLog,", "+\t\texpected15ProblemLog", "+\t);", "+}", "-\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\"\tpublic static void foo(){}\\n\" + ", "-\t\t\"\t              ^^^^\\n\" + ", "-\t\t\"Syntax error on token \\\"void\\\", @ expected\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\"\tpublic static void foo(){}\\n\" + ", "-\t\t\"\t                       ^\\n\" + ", "-\t\t\"Syntax error, insert \\\"enum Identifier\\\" to complete EnumHeader\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bede27a97d95ed1df1a2ce2daa10728", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b2e6c1de11c5945ad0058b70deb343fdac78d55b", "commitAfterChange": "f51fdf456ddb08b822391ad1e88baeaffa718152", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " \tpublic void test082()", "signatureAfterChange": " \tpublic void test082()", "diff": ["-\t\t\t\t\"1. ERROR in test\\\\X.java (at line 2)\\n\" + ", "-\t\t\t\t\"\tpublic class X<A extends X1<X2<X3<String> {}\\n\" + ", "-\t\t\t\t\"\t                                        ^\\n\" + ", "-\t\t\t\t\"Syntax error, insert \\\">>>\\\" to complete ReferenceType3\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"2. ERROR in test\\\\X.java (at line 2)\\n\" + ", "-\t\t\t\t\"\tpublic class X<A extends X1<X2<X3<String> {}\\n\" + ", "-\t\t\t\t\"\t                                        ^\\n\" + ", "-\t\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete ArrayType\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. ERROR in test\\\\X.java (at line 3)\\n\" + ", "-\t\t\t\t\"\tclass X1<A extends X2<X3<String {}\\n\" + ", "-\t\t\t\t\"\t                         ^^^^^^\\n\" + ", "-\t\t\t\t\"Syntax error, insert \\\">>>\\\" to complete ReferenceType3\\n\" + ", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic class X<A extends X1<X2<X3<String> {}\\n\" + ", "+\t\t\t\"\t                                        ^\\n\" + ", "+\t\t\t\"Syntax error, insert \\\">>>\\\" to complete ReferenceType3\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass X1<A extends X2<X3<String {}\\n\" + ", "+\t\t\t\"\t                         ^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, insert \\\">>>\\\" to complete ReferenceType3\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dbadf20c4be8fa390c9b67a7748a26f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "d1d9c4b9d41b5dee6585f38ec44b96973779f261", "commitAfterChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " \tpublic void test032b()", "signatureAfterChange": " \tpublic void test032b()", "diff": ["-\t\t\t\t\"class A { public Object foo() { return null; } }\" +", "-\t\t\t\t\"public class X<T extends A&I> {}\\n\"", "+\t\t\t\t\"class A { public Object foo() { return null; } }\\n\" +", "+\t\t\t\t\"public class X<T extends A&I> {}\\n\" +", "+\t\t\t\t\"interface J extends I { Object foo(); }\\n\" +", "+\t\t\t\t\"class Y<T extends I&J> {}\\n\" +", "+\t\t\t\t\"class Z<T extends J&I> {}\"", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tclass A { public Object foo() { return null; } }public class X<T extends A&I> {}\\r\\n\" +", "-\t\t\t\"\t                                                               ^\\n\" +", "-\t\t\t\"The return types are incompatible for the inherited methods I.foo(), A.foo()\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class X<T extends A&I> {}\\n\" + ", "+\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\"The return types are incompatible for the inherited methods I.foo(), A.foo()\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tinterface J extends I { Object foo(); }\\n\" + ", "+\t\t\t\"\t                        ^^^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with I.foo()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7a354b1d407c15676c3f2bca29eaf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 309, "signatureBeforeChange": " public void test159()", "signatureAfterChange": " public void test159()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 15)\\n\" +", "-\t\t\"\tpublic abstract class X extends Root implements AFoo, BFoo {}\\n\" +", "-\t\t\"\t                      ^\\n\" +", "-\t\t\"The return types are incompatible for the inherited methods BFoo.bar(), AFoo.bar()\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 17)\\n\" +", "-\t\t\"\tclass Z extends X {}\\n\" +", "-\t\t\"\t      ^\\n\" +", "-\t\t\"The type Z must implement the inherited abstract method AFoo.bar()\\n\" +", "-\t\t\"----------\\n\"", "-\t);", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"\tpublic abstract class X extends Root implements AFoo, BFoo {}\\n\" + ", "+\t\t\"\t                      ^\\n\" + ", "+\t\t\"The return types are incompatible for the inherited methods BFoo.bar(), AFoo.bar()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\"\tabstract class Y extends X {}\\n\" + ", "+\t\t\"\t               ^\\n\" + ", "+\t\t\"The return types are incompatible for the inherited methods BFoo.bar(), AFoo.bar()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\"\tclass Z extends X {}\\n\" + ", "+\t\t\"\t      ^\\n\" + ", "+\t\t\"The type Z must implement the inherited abstract method AFoo.bar()\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e379fab34cff9eca1dff17daff0dc2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "dfe6cc33aaef3c9c6160f09ab2a92557f3d235f0", "commitAfterChange": "27bcc195c17809f9c7f757f8ebe6641240ab9c60", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " public void _test1001() throws CoreException, InterruptedException, IOException", "signatureAfterChange": " public void test1001() throws CoreException, InterruptedException, IOException", "diff": ["-public void _test1001() throws CoreException, InterruptedException, IOException {", "+// our mind", "+public void test1001() throws CoreException, InterruptedException, IOException {", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The type Y must implement the inherited abstract method I.bar(X)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in /P3/Y.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass Y implements I {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"\t      ^\\n\" +", "+// we miss the first diagnostic - see justification in bugzilla", "+//\t\t\t\"The type Y must implement the inherited abstract method I.bar(X)\\n\" + ", "+//\t\t\t\"----------\\n\" + ", "+//\t\t\t\"2. ERROR in /P3/Y.java (at line 1)\\n\" + ", "+//\t\t\t\"\tclass Y implements I {\\n\" + ", "+//\t\t\t\"\t      ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae183805051406a9c87413a6e131b41f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 384, "methodNumberAfterChange": 384, "signatureBeforeChange": " \tpublic void _test382()", "signatureAfterChange": " \tpublic void test382()", "diff": ["-\tpublic void _test382() {", "+\tpublic void test382() {", "-\t\t\t\"Class must implement the inherited abstract method I.foo(Class<? extends String>)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tclass Y { void foo(Class<String> s) {} }\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X extends Y implements I {}\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"Class must implement the inherited abstract method I.foo(Class<? extends String>)\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tclass Y { void foo(Class<? extends String> s) {} }\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic abstract class X extends Y implements I {}\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + "]}], "num": 37169}
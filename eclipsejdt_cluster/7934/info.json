{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b91c2f144f99b9d260699b19ea8ee8d2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9570aa1de373c22aa208eaa9e4b2f6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "ff4953718f4a4fa66bb0922d1821b22a0e2fdd84", "commitAfterChange": "b48f366c7cd622655a48ea734bdcd0016d20ec8b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["+", "+\t\t// Search for pattern locator matches in javadoc comment parameters @param tags", "+\t\tJavadocSingleNameReference[] paramReferences = this.javadoc.paramReferences;", "+\t\tint length = paramReferences == null ? 0 : paramReferences.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tthis.patternLocator.match(paramReferences[i], this.nodeSet);", "+\t\t}", "+", "+\t\t// Search for pattern locator matches in javadoc comment type parameters @param tags", "+\t\tJavadocSingleTypeReference[] paramTypeParameters = this.javadoc.paramTypeParameters;", "+\t\tlength = paramTypeParameters == null ? 0 : paramTypeParameters.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tthis.patternLocator.match(paramTypeParameters[i], this.nodeSet);", "+\t\t}", "+", "-\t\tint throwsTagsLength = thrownExceptions == null ? 0 : thrownExceptions.length;", "-\t\tfor (int i = 0; i < throwsTagsLength; i++) {", "-\t\t\tTypeReference typeRef = thrownExceptions[i];", "-\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "+\t\tlength = thrownExceptions == null ? 0 : thrownExceptions.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tthis.patternLocator.match(thrownExceptions[i], this.nodeSet);", "-\t\tint seeTagsLength = references == null ? 0 : references.length;", "-\t\tfor (int i = 0; i < seeTagsLength; i++) {", "+\t\tlength = references == null ? 0 : references.length;", "+\t\tfor (int i = 0; i < length; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec3170c94866b72d5ac0587830ed206b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "3e3563fc2739979022c8ed5ef771769e6ddb9cf7", "commitAfterChange": "ac01f488e9b6b2b17a11c53e0a49f85c3d9e7aeb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " protected void reportDeclaration(MethodBinding methodBinding, MatchLocator locator, SimpleSet knownMethods) throws CoreException", "signatureAfterChange": " protected void reportDeclaration(MethodBinding methodBinding, MatchLocator locator, SimpleSet knownMethods) throws CoreException", "diff": ["+\tboolean isBinary = type.isBinary();", "+\tIMethod method = null;", "-\tString[] parameterTypes = new String[parameterLength];", "-\tfor (int i = 0; i  < parameterLength; i++) {", "-\t\tchar[] typeName = parameters[i].shortReadableName();", "-\t\tif (parameters[i].isMemberType()) {", "-\t\t\ttypeName = CharOperation.subarray(typeName, CharOperation.indexOf('.', typeName)+1, typeName.length);", "+\tif (isBinary) {", "+\t\tchar[][] parameterTypes = new char[parameterLength][];", "+\t\tfor (int i = 0; i<parameterLength; i++) {", "+\t\t\tchar[] typeName = parameters[i].qualifiedSourceName();", "+\t\t\tfor (int j=0, dim=parameters[i].dimensions(); j<dim; j++) {", "+\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\t}", "+\t\t\tparameterTypes[i] = typeName;", "-\t\tparameterTypes[i] = Signature.createTypeSignature(typeName, false);", "+\t\tmethod = locator.createBinaryMethodHandle(type, methodBinding.selector, parameterTypes, locator);", "+\t} else {", "+\t\tString[] parameterTypes = new String[parameterLength];", "+\t\tfor (int i = 0; i  < parameterLength; i++) {", "+\t\t\tchar[] typeName = parameters[i].shortReadableName();", "+\t\t\tif (parameters[i].isMemberType()) {", "+\t\t\t\ttypeName = CharOperation.subarray(typeName, CharOperation.indexOf('.', typeName)+1, typeName.length);", "+\t\t\t}", "+\t\t\tparameterTypes[i] = Signature.createTypeSignature(typeName, false);", "+\t\t}", "+\t\tmethod = type.getMethod(new String(bindingSelector), parameterTypes);", "-\tIMethod method = type.getMethod(new String(bindingSelector), parameterTypes);", "-\tif (knownMethods.includes(method)) return;", "+\tif (method == null || knownMethods.includes(method)) return;", "-\tboolean isBinary = type.isBinary();"]}], "num": 7934}
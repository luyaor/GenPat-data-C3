{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df46cffdf49f1e0ac7432215e327b70c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d882f62fa399f31a6cac5ea8735fe94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ImportRewriteTest.java", "commitBeforeChange": "540532d90ea319b134aad3a0154f549c66728687", "commitAfterChange": "6a0eebe34bd6b3f3c957d0d1c92bc68d99fa8f40", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tprivate ImportRewrite newImportsRewrite(ICompilationUnit cu, String[] order, int normalThreshold, int staticThreshold, boolean restoreExistingImports) throws CoreException, BackingStoreException", "signatureAfterChange": " \t \tprivate ImportRewrite newImportsRewrite(ICompilationUnit cu, String[] order, int normalThreshold, int staticThreshold, boolean restoreExistingImports) throws CoreException, BackingStoreException", "diff": ["-\t\tStringBuffer buf= new StringBuffer();", "-\t\tfor (int i= 0; i < order.length; i++) {", "-\t\t\tbuf.append(order[i]);", "-\t\t\tbuf.append(';');", "-\t\t}", "-\t\tIJavaProject javaProject= cu.getJavaProject();", "-\t\tjavaProject.setOption(JavaCore.IMPORTREWRITE_IMPORT_ORDER, buf.toString());", "-\t\tjavaProject.setOption(JavaCore.IMPORTREWRITE_ONDEMAND_THRESHOLD, String.valueOf(normalThreshold));", "-\t\tjavaProject.setOption(JavaCore.IMPORTREWRITE_STATIC_ONDEMAND_THRESHOLD, String.valueOf(staticThreshold));", "-\t\treturn ImportRewrite.create(cu, restoreExistingImports);", "+\t\tImportRewrite rewrite= ImportRewrite.create(cu, restoreExistingImports);", "+\t\trewrite.setImportOrder(order);", "+\t\trewrite.setOnDemandImportThreshold(normalThreshold);", "+\t\trewrite.setStaticOnDemandImportThreshold(staticThreshold);", "+\t\treturn rewrite;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc17fa4b406dd30353d8f30ac50ee748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NamingConventionTests.java", "commitBeforeChange": "04b1f777f72aaed365425972c86158987dc99f47", "commitAfterChange": "627e74400f5d869da7cccfccaf9f22c5e00c372a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " private String toString(char[][] suggestions)", "signatureAfterChange": " public void testGetBaseName004()", "diff": ["-private String toString(char[][] suggestions) {", "-\tif(suggestions == null) {", "-\t\treturn \"\"; //$NON-NLS-1$", "-\t}", "-", "-\tStringBuffer buffer = new StringBuffer();", "-\tfor (int i = 0; i < suggestions.length; i++) {", "-\t\tif(i != 0) {", "-\t\t\tbuffer.append('\\n');", "-\t\t}", "-\t\tbuffer.append(suggestions[i]);", "-\t}", "-\treturn buffer.toString();", "+ */", "+public void testGetBaseName004() {", "+\tHashtable options = JavaCore.getOptions();", "+\toptions.put(JavaCore.CODEASSIST_STATIC_FINAL_FIELD_PREFIXES,\"pre\"); //$NON-NLS-1$", "+\toptions.put(JavaCore.CODEASSIST_STATIC_FINAL_FIELD_SUFFIXES,\"suf\"); //$NON-NLS-1$", "+\tJavaCore.setOptions(options);", "+\t", "+\tString baseName = NamingConventions.getBaseName(", "+\t\t\tNamingConventions.VK_CONSTANT_FIELD,", "+\t\t\t\"preONE_NAMEsuf\", //$NON-NLS-1$", "+\t\t\tthis.project);", "+\t", "+\tassertEquals(", "+\t\t\t\"OneName\", //$NON-NLS-1$", "+\t\t\tbaseName);"]}], "num": 34219}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe409d67e38732c02696d6f4a3822b1e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55485e77b4465e22071e6a80543b6c46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "76b6aef868544c4d2f6d21575e84412f247472ae", "commitAfterChange": "406d61c9a16be8f709e407a59600ccbf947335dd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tpublic void resolve(ClassScope upperScope)", "signatureAfterChange": "\r \tpublic void resolveStatements(ClassScope upperScope)", "diff": ["-\tpublic void resolve(ClassScope upperScope) {\r", "-\r", "-\t\tif (binding == null) {\r", "-\t\t\tignoreFurtherInvestigation = true;\r", "-\t\t}\r", "-\r", "+\tpublic void resolveStatements(ClassScope upperScope) {\r", "+/*\r", "+*/\r", "+\t\tif (!CharOperation.equals(scope.enclosingSourceType().sourceName, selector)){\r", "+\t\t\tscope.problemReporter().missingReturnType(this);\r", "+\t\t}\r", "-\t\tsuper.resolve(upperScope);\r", "-\r", "-\t\ttry {\r", "-\t\t\t// indirect reference: increment target constructor reference count\r", "-\t\t\tif (constructorCall != null){\r", "-\t\t\t\tif (constructorCall.binding != null\r", "-\t\t\t\t\t&& !constructorCall.isSuperAccess()\r", "-\t\t\t\t\t&& constructorCall.binding.isValidBinding()) {\r", "-\t\t\t\t\t((ConstructorDeclaration)\r", "-\t\t\t\t\t\t\t(upperScope.referenceContext.declarationOf(constructorCall.binding))).referenceCount++;\r", "-\t\t\t\t}\r", "+\t\t// if null ==> an error has occurs at parsing time ....\r", "+\t\tif (constructorCall != null) {\r", "+\t\t\t// e.g. using super() in java.lang.Object\r", "+\t\t\tif (binding != null\r", "+\t\t\t\t&& binding.declaringClass.id == T_Object\r", "+\t\t\t\t&& constructorCall.accessMode != ExplicitConstructorCall.This) {\r", "+\t\t\t\t\tif (constructorCall.accessMode == ExplicitConstructorCall.Super) {\r", "+\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(constructorCall);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tconstructorCall = null;\r", "+\t\t\t} else {\r", "+\t\t\t\tconstructorCall.resolve(scope);\r", "-\t\t} catch (AbortMethod e) {\r", "-\t\t\tthis.ignoreFurtherInvestigation = true;\r", "+\t\t}\r", "+\t\t\r", "+\t\tsuper.resolveStatements(upperScope);\r", "+\r", "+\t\t// indirect reference: increment target constructor reference count\r", "+\t\tif (constructorCall != null){\r", "+\t\t\tif (constructorCall.binding != null\r", "+\t\t\t\t&& !constructorCall.isSuperAccess()\r", "+\t\t\t\t&& constructorCall.binding.isValidBinding()) {\r", "+\t\t\t\t((ConstructorDeclaration)\r", "+\t\t\t\t\t\t(upperScope.referenceContext.declarationOf(constructorCall.binding))).referenceCount++;\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6969ad557a81f303e03f2f4ce18dc1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "784f86ce6732cf119976248cf85d648b31a1b3eb", "commitAfterChange": "04ca8b8834b8d337f24654f163a38f7df436213a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  protected boolean triggerRecoveryUponLambdaClosure(Statement statement, boolean shouldCommit)", "signatureAfterChange": "  protected boolean triggerRecoveryUponLambdaClosure(Statement statement, boolean shouldCommit)", "diff": ["-\t\t\tthis.restartRecovery = true;", "+\t\tthis.restartRecovery = true;", "-\t\t\tASTNode assistNodeParent = this.assistNodeParent();", "-\t\t\tASTNode enclosingNode = this.enclosingNode();", "-\t\t\tif (assistNodeParent != null || enclosingNode != null) {", "-\t\t\t\tRecoveredBlock recoveredBlock = (RecoveredBlock) (this.currentElement instanceof RecoveredBlock ? this.currentElement : ", "-\t\t\t\t\t(this.currentElement.parent instanceof RecoveredBlock) ? this.currentElement.parent : null);", "-\t\t\t\tif (recoveredBlock != null) {", "-\t\t\t\t\tRecoveredStatement recoveredStatement = recoveredBlock.statementCount > 0 ? recoveredBlock.statements[recoveredBlock.statementCount - 1] : null;", "-\t\t\t\t\tASTNode parseTree = recoveredStatement != null ? recoveredStatement.updatedStatement(0, new HashSet()) : null;", "-\t\t\t\t\tif (parseTree != null) {", "-\t\t\t\t\t\tif (parseTree == assistNodeParent || parseTree == enclosingNode) {", "-\t\t\t\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "-\t\t\t\t\t\t\tthis.currentElement = recoveredBlock;", "-\t\t\t\t\t\t} else if (recoveredStatement instanceof RecoveredLocalVariable && statement instanceof Expression) {", "-\t\t\t\t\t\t\tRecoveredLocalVariable local = (RecoveredLocalVariable) recoveredStatement;", "-\t\t\t\t\t\t\tif (local.localDeclaration.initialization == assistNodeParent || local.localDeclaration.initialization == enclosingNode) {", "+\t\t\tRecoveredBlock recoveredBlock = (RecoveredBlock) (this.currentElement instanceof RecoveredBlock ? this.currentElement : ", "+\t\t\t\t(this.currentElement.parent instanceof RecoveredBlock) ? this.currentElement.parent : null);", "+\t\t\tif (recoveredBlock != null) {", "+\t\t\t\tRecoveredStatement recoveredStatement = recoveredBlock.statementCount > 0 ? recoveredBlock.statements[recoveredBlock.statementCount - 1] : null;", "+\t\t\t\tASTNode parseTree = recoveredStatement != null ? recoveredStatement.updatedStatement(0, new HashSet()) : null;", "+\t\t\t\tif (parseTree != null) {", "+\t\t\t\t\tif ((parseTree.sourceStart == 0 || parseTree.sourceEnd == 0) || (parseTree.sourceStart >= statementStart && parseTree.sourceEnd <= statementEnd)) {", "+\t\t\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "+\t\t\t\t\t\tthis.currentElement = recoveredBlock;", "+\t\t\t\t\t} else if (recoveredStatement instanceof RecoveredLocalVariable && statement instanceof Expression) {", "+\t\t\t\t\t\tRecoveredLocalVariable local = (RecoveredLocalVariable) recoveredStatement;", "+\t\t\t\t\t\tif (local.localDeclaration != null && local.localDeclaration.initialization != null) {", "+\t\t\t\t\t\t\tif ((local.localDeclaration.initialization.sourceStart == 0 || local.localDeclaration.initialization.sourceEnd == 0) || ", "+\t\t\t\t\t\t\t        (local.localDeclaration.initialization.sourceStart >= statementStart && local.localDeclaration.initialization.sourceEnd <= statementEnd) ){", "+\t\t\t"]}], "num": 39721}
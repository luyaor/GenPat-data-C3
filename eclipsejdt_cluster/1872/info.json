{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a0c106d0b33a925561de87e019339ed", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a01a374134ee65be0bf5b2daa5e5e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\t\t\t\t\t\tObject[] emulationPath = currentScope.getExactEmulationPath(currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT));", "-\t\t\t\t\t\tif (emulationPath == null) {", "-\t\t\t\t\t\t\t// internal error, per construction we should have found it", "-\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, currentScope);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "+\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3ad69b1acbf9a7d5ab21a59113bf7c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\t\t\t\tObject[] emulationPath = currentScope.getExactEmulationPath(currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT));", "-\t\t\t\t\t\tif (emulationPath == null) {", "-\t\t\t\t\t\t\t// internal error, per construction we should have found it", "-\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, currentScope);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "+\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);"]}], "num": 1872}
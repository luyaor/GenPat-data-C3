{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a03bee15a4b98353f709d51709dd4401", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "482172717291834c3eb7372eb79e0a95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "1c1d418ad63ddf8e8c36736ccc520ce9790f3c20", "commitAfterChange": "253db1ad159947db401a053aab34e948bedb1e92", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic LambdaExpression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "diff": ["-\tpublic LambdaExpression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda) {", "+\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda) {", "+\t\tif (this.ast.apiLevel < AST.JLS8) {", "+\t\t\tif (this.referenceContext != null) {", "+\t\t\t\tthis.referenceContext.setFlags(this.referenceContext.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}", "+\t\t\tNullLiteral nullLiteral = new NullLiteral(this.ast);", "+\t\t\tnullLiteral.setFlags(nullLiteral.getFlags() | ASTNode.MALFORMED);", "+\t\t\tnullLiteral.setSourceRange(lambda.sourceStart, lambda.sourceEnd - lambda.sourceStart + 1);", "+\t\t\treturn nullLiteral;\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c5d185c7545cb8e03b2804dfd4d6bfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c539ab4170e4fe0d8578cc8fb0121c9a797f5894", "commitAfterChange": "44363e0012bf09a8a44565479ae5740426ed378a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t} else if (this.lhs.isSuper()) {", "-\t\t\tthis.binding = sourceType.addSyntheticSuperBridgeMethod(this.binding);", "+\t\t} else if (this.syntheticAccessor != null) {", "+\t\t\tif (this.lhs.isSuper() || isMethodReference())", "+\t\t\t\tthis.binding = this.syntheticAccessor;", "-\t\t\tbuffer.append(this.lhs.isSuper() ? sourceType.signature() : this.receiverType.signature());", "+\t\t\tif (this.lhs.isSuper()) {", "+\t\t\t\tif (this.lhs instanceof QualifiedSuperReference) {", "+\t\t\t\t\tQualifiedSuperReference qualifiedSuperReference = (QualifiedSuperReference) this.lhs;", "+\t\t\t\t\tTypeReference qualification = qualifiedSuperReference.qualification;", "+\t\t\t\t\tif (qualification.resolvedType.isInterface()) {", "+\t\t\t\t\t\tbuffer.append(sourceType.signature());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(((QualifiedSuperReference) this.lhs).currentCompatibleType.signature());", "+\t\t\t\t\t}", "+\t\t\t\t} else { ", "+\t\t\t\t\tbuffer.append(sourceType.signature());", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(this.receiverType.signature());", "+\t\t\t}"]}], "num": 68770}
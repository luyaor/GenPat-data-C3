{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a70ba6337c5be2333a63cc33438aeb0f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f61804b12249bc4a31f1834791d428c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "2b5adfd5bdf5a370e30eef7cf60813025897bdd3", "commitAfterChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": " public int matchLevel(AstNode node, boolean resolve)", "diff": ["+ */", "+public int matchLevel(AstNode node, boolean resolve) {", "+\tif (!(node instanceof TypeReference)) return IMPOSSIBLE_MATCH;", "+", "+\tTypeReference typeRef = (TypeReference) node;", "+\tif (resolve) {", "+\t\tTypeBinding binding = typeRef.resolvedType;", "+\t\tif (binding == null) return INACCURATE_MATCH;", "+\t\treturn matchLevelForType(this.superSimpleName, this.superQualification, binding);", "+\t}", "+", "+\tif (this.superSimpleName == null)", "+\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "+", "+\tchar[] typeRefSimpleName = null;", "+\tif (typeRef instanceof SingleTypeReference) {", "+\t\ttypeRefSimpleName = ((SingleTypeReference) typeRef).token;", "+\t} else { // QualifiedTypeReference", "+\t\tchar[][] tokens = ((QualifiedTypeReference) typeRef).tokens;", "+\t\ttypeRefSimpleName = tokens[tokens.length-1];", "+\t}\t\t\t\t", "+", "+\tif (matchesName(this.superSimpleName, typeRefSimpleName))", "+\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "+\treturn IMPOSSIBLE_MATCH;", "+}", "- */", "-public int matchLevel(AstNode node, boolean resolve) {", "-\tif (!(node instanceof TypeReference)) return IMPOSSIBLE_MATCH;", "-", "-\tTypeReference typeRef = (TypeReference)node;", "-\tif (resolve) {", "-\t\tTypeBinding binding = typeRef.resolvedType;", "-\t\tif (binding == null) {", "-\t\t\treturn INACCURATE_MATCH;", "-\t\t} else {", "-\t\t\treturn this.matchLevelForType(this.superSimpleName, this.superQualification, binding);", "-\t\t}", "-\t} else {", "-\t\tif (this.superSimpleName == null) {", "-\t\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "-\t\t} else {", "-\t\t\tchar[] typeRefSimpleName = null;", "-\t\t\tif (typeRef instanceof SingleTypeReference) {", "-\t\t\t\ttypeRefSimpleName = ((SingleTypeReference)typeRef).token;", "-\t\t\t} else { // QualifiedTypeReference", "-\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;", "-\t\t\t\ttypeRefSimpleName = tokens[tokens.length-1];", "-\t\t\t}\t\t\t\t", "-\t\t\tif (this.matchesName(this.superSimpleName, typeRefSimpleName))", "-\t\t\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "-\t\t\telse", "-\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aa071a2526d7030bc3a95cffecc1f38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof TypeReference)) return false;\r", "+\r", "+\tTypeReference typeRef = (TypeReference)node;\r", "+\tif (!resolve) {\r", "+\t\tif (this.superSimpleName != null) {\r", "+\t\t\tchar[] typeRefSimpleName = null;\r", "+\t\t\tif (typeRef instanceof SingleTypeReference) {\r", "+\t\t\t\ttypeRefSimpleName = ((SingleTypeReference)typeRef).token;\r", "+\t\t\t} else { // QualifiedTypeReference\r", "+\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;\r", "+\t\t\t\ttypeRefSimpleName = tokens[tokens.length-1];\r", "+\t\t\t}\t\t\t\t\r", "+\t\t\tif (!this.matchesName(this.superSimpleName, typeRefSimpleName))\r", "+\t\t\t\treturn false;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tTypeBinding binding = typeRef.binding;\r", "+\t\tif (binding != null && !this.matchesType(this.superSimpleName, this.superQualification, binding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof TypeReference)) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tTypeReference typeRef = (TypeReference)node;\r", "-\tif (resolve) {\r", "-\t\tTypeBinding binding = typeRef.binding;\r", "-\t\tif (binding == null) {\r", "-\t\t\treturn INACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn this.matchLevelForType(this.superSimpleName, this.superQualification, binding);\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.superSimpleName == null) {\r", "-\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tchar[] typeRefSimpleName = null;\r", "-\t\t\tif (typeRef instanceof SingleTypeReference) {\r", "-\t\t\t\ttypeRefSimpleName = ((SingleTypeReference)typeRef).token;\r", "-\t\t\t} else { // QualifiedTypeReference\r", "-\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;\r", "-\t\t\t\ttypeRefSimpleName = tokens[tokens.length-1];\r", "-\t\t\t}\t\t\t\t\r", "-\t\t\tif (this.matchesName(this.superSimpleName, typeRefSimpleName))\r", "-\t\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t\telse\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfc5a0872c4809d4943d75a41f5ca72f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof TypeReference)) return false;\r", "+\r", "+\tTypeReference typeRef = (TypeReference)node;\r", "+\tif (!resolve) {\r", "+\t\tif (this.superSimpleName != null) {\r", "+\t\t\tchar[] typeRefSimpleName = null;\r", "+\t\t\tif (typeRef instanceof SingleTypeReference) {\r", "+\t\t\t\ttypeRefSimpleName = ((SingleTypeReference)typeRef).token;\r", "+\t\t\t} else { // QualifiedTypeReference\r", "+\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;\r", "+\t\t\t\ttypeRefSimpleName = tokens[tokens.length-1];\r", "+\t\t\t}\t\t\t\t\r", "+\t\t\tif (!this.matchesName(this.superSimpleName, typeRefSimpleName))\r", "+\t\t\t\treturn false;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tTypeBinding binding = typeRef.binding;\r", "+\t\tif (binding != null && !this.matchesType(this.superSimpleName, this.superQualification, binding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof TypeReference)) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tTypeReference typeRef = (TypeReference)node;\r", "-\tif (resolve) {\r", "-\t\tTypeBinding binding = typeRef.binding;\r", "-\t\tif (binding == null) {\r", "-\t\t\treturn INACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn this.matchLevelForType(this.superSimpleName, this.superQualification, binding);\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.superSimpleName == null) {\r", "-\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tchar[] typeRefSimpleName = null;\r", "-\t\t\tif (typeRef instanceof SingleTypeReference) {\r", "-\t\t\t\ttypeRefSimpleName = ((SingleTypeReference)typeRef).token;\r", "-\t\t\t} else { // QualifiedTypeReference\r", "-\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;\r", "-\t\t\t\ttypeRefSimpleName = tokens[tokens.length-1];\r", "-\t\t\t}\t\t\t\t\r", "-\t\t\tif (this.matchesName(this.superSimpleName, typeRefSimpleName))\r", "-\t\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t\telse\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3b6ff3fb090f9f303b7e750007a9a20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof TypeReference)) return false;\r", "+\r", "+\tTypeReference typeRef = (TypeReference)node;\r", "+\tif (!resolve) {\r", "+\t\tif (this.superSimpleName != null) {\r", "+\t\t\tchar[] typeRefSimpleName = null;\r", "+\t\t\tif (typeRef instanceof SingleTypeReference) {\r", "+\t\t\t\ttypeRefSimpleName = ((SingleTypeReference)typeRef).token;\r", "+\t\t\t} else { // QualifiedTypeReference\r", "+\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;\r", "+\t\t\t\ttypeRefSimpleName = tokens[tokens.length-1];\r", "+\t\t\t}\t\t\t\t\r", "+\t\t\tif (!this.matchesName(this.superSimpleName, typeRefSimpleName))\r", "+\t\t\t\treturn false;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tTypeBinding binding = typeRef.binding;\r", "+\t\tif (binding != null && !this.matchesType(this.superSimpleName, this.superQualification, binding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof TypeReference)) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tTypeReference typeRef = (TypeReference)node;\r", "-\tif (resolve) {\r", "-\t\tTypeBinding binding = typeRef.binding;\r", "-\t\tif (binding == null) {\r", "-\t\t\treturn INACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn this.matchLevelForType(this.superSimpleName, this.superQualification, binding);\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.superSimpleName == null) {\r", "-\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tchar[] typeRefSimpleName = null;\r", "-\t\t\tif (typeRef instanceof SingleTypeReference) {\r", "-\t\t\t\ttypeRefSimpleName = ((SingleTypeReference)typeRef).token;\r", "-\t\t\t} else { // QualifiedTypeReference\r", "-\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;\r", "-\t\t\t\ttypeRefSimpleName = tokens[tokens.length-1];\r", "-\t\t\t}\t\t\t\t\r", "-\t\t\tif (this.matchesName(this.superSimpleName, typeRefSimpleName))\r", "-\t\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t\telse\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db9d24e81326061d63124fffcfb01bc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof TypeReference)) return false;\r", "+\r", "+\tTypeReference typeRef = (TypeReference)node;\r", "+\tif (!resolve) {\r", "+\t\tif (this.superSimpleName != null) {\r", "+\t\t\tchar[] typeRefSimpleName = null;\r", "+\t\t\tif (typeRef instanceof SingleTypeReference) {\r", "+\t\t\t\ttypeRefSimpleName = ((SingleTypeReference)typeRef).token;\r", "+\t\t\t} else { // QualifiedTypeReference\r", "+\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;\r", "+\t\t\t\ttypeRefSimpleName = tokens[tokens.length-1];\r", "+\t\t\t}\t\t\t\t\r", "+\t\t\tif (!this.matchesName(this.superSimpleName, typeRefSimpleName))\r", "+\t\t\t\treturn false;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tTypeBinding binding = typeRef.binding;\r", "+\t\tif (binding != null && !this.matchesType(this.superSimpleName, this.superQualification, binding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof TypeReference)) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tTypeReference typeRef = (TypeReference)node;\r", "-\tif (resolve) {\r", "-\t\tTypeBinding binding = typeRef.binding;\r", "-\t\tif (binding == null) {\r", "-\t\t\treturn INACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn this.matchLevelForType(this.superSimpleName, this.superQualification, binding);\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.superSimpleName == null) {\r", "-\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tchar[] typeRefSimpleName = null;\r", "-\t\t\tif (typeRef instanceof SingleTypeReference) {\r", "-\t\t\t\ttypeRefSimpleName = ((SingleTypeReference)typeRef).token;\r", "-\t\t\t} else { // QualifiedTypeReference\r", "-\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;\r", "-\t\t\t\ttypeRefSimpleName = tokens[tokens.length-1];\r", "-\t\t\t}\t\t\t\t\r", "-\t\t\tif (this.matchesName(this.superSimpleName, typeRefSimpleName))\r", "-\t\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t\telse\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t}\r", "-}\r"]}], "num": 16630}
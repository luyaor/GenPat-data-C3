{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf1a3e9915b36db430f50fb56ecc3be0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4792328c7a406375ea0e381ad9abd14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "7163191ad837ee4dbd99301bb257966d1ab9ea7a", "commitAfterChange": "efcbc8246985c2d4ce62d9f4d57040e9d6aab069", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tstatic boolean isAnnotationTargetAllowed(Annotation annotation, BlockScope scope, TypeBinding annotationType, int kind)", "signatureAfterChange": "  \tprivate static boolean isAnnotationTargetAllowed(Binding recipient, BlockScope scope, TypeBinding annotationType, int kind, long metaTagBits)", "diff": ["+\tprivate static boolean isAnnotationTargetAllowed(Binding recipient, BlockScope scope, TypeBinding annotationType, int kind, long metaTagBits) {", "+\t\tswitch (kind) {", "+\t\t\tcase Binding.PACKAGE :", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "+\t\t\t\t\treturn true;", "+\t\t\t\telse if (scope.compilerOptions().sourceLevel <= ClassFileConstants.JDK1_6) {", "+\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) recipient;", "+\t\t\t\t\tif (CharOperation.equals(sourceType.sourceName, TypeConstants.PACKAGE_INFO_NAME))", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE_USE :", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t// jsr 308", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\t\t// already reported as syntax error; don't report secondary problems", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE :", "+\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tif (((ReferenceBinding)recipient).isAnnotationType()) {", "+\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0)", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & (TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForPackage) != 0) {", "+\t\t\t\t\tif (CharOperation.equals(((ReferenceBinding) recipient).sourceName, TypeConstants.PACKAGE_INFO_NAME))", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.METHOD :", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) recipient;", "+\t\t\t\tif (methodBinding.isConstructor()) {", "+\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForConstructor | TagBits.AnnotationForTypeUse)) != 0)", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) methodBinding.declaringClass;", "+\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(methodBinding);", "+\t\t\t\t\tif (isTypeUseCompatible(methodDecl.returnType, scope)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.FIELD :", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tFieldBinding sourceField = (FieldBinding) recipient;", "+\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) sourceField.declaringClass;", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "+\t\t\t\t\tif (isTypeUseCompatible(fieldDeclaration.type, scope)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.LOCAL :", "+\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) recipient;", "+\t\t\t\tif ((localVariableBinding.tagBits & TagBits.IsArgument) != 0) {", "+\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391196", "+\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}", "-\t\tswitch (kind) {", "-\t\t\tcase Binding.PACKAGE :", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "-\t\t\t\t\treturn true;", "-\t\t\t\telse if (scope.compilerOptions().sourceLevel <= ClassFileConstants.JDK1_6) {", "-\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) annotation.recipient;", "-\t\t\t\t\tif (CharOperation.equals(sourceType.sourceName, TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE_USE :", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t// jsr 308", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\t\t// already reported as syntax error; don't report secondary problems", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE :", "-\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\tif (((ReferenceBinding)annotation.recipient).isAnnotationType()) {", "-\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0)", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & (TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForPackage) != 0) {", "-\t\t\t\t\tif (CharOperation.equals(((ReferenceBinding) annotation.recipient).sourceName, TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.METHOD :", "-\t\t\t\tMethodBinding methodBinding = (MethodBinding) annotation.recipient;", "-\t\t\t\tif (methodBinding.isConstructor()) {", "-\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForConstructor | TagBits.AnnotationForTypeUse)) != 0)", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) methodBinding.declaringClass;", "-\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(methodBinding);", "-\t\t\t\t\tif (isTypeUseCompatible(methodDecl.returnType, scope)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.FIELD :", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tFieldBinding sourceField = (FieldBinding) annotation.recipient;", "-\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) sourceField.declaringClass;", "-\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "-\t\t\t\t\tif (isTypeUseCompatible(fieldDeclaration.type, scope)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.LOCAL :", "-\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) annotation.recipient;", "-\t\t\t\tif ((localVariableBinding.tagBits & TagBits.IsArgument) != 0) {", "-\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391196", "-\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t}", "-\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6848a7c143466b67099466fe41f589b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tboolean use18specifics = sourceLevel >= ClassFileConstants.JDK1_8;", "+\t\tthis.use18specifics = sourceLevel >= ClassFileConstants.JDK1_8;", "-\t\tif (use18specifics) {", "+\t\tif (this.use18specifics) {", "-", "-\t\t\tif (isPolyExpression()) {", "-\t\t\t\tthis.polyExpressionScope = scope;", "-\t\t\t}", "-", "-\t\t\tif (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE || this.originalValueIfFalseType.kind() == Binding.POLY_TYPE) {", "-\t\t\t\treturn new PolyTypeBinding(this);", "-\t\t\t}", "+\t\t\t/* Not reached as of now as we don't evaluate conditional expressions multiple times, left in for now.", "+\t\t\t   If in future, we change things so control reaches here, a precondition is that this.expectedType is", "+\t\t\t   the final target type.", "+\t\t\t*/", "-\t\t", "+\t\tif (isPolyExpression()) {", "+\t\t\tif (this.expectedType == null) {", "+\t\t\t\tthis.polyExpressionScope = scope; // preserve for eventual resolution/error reporting.", "+\t\t\t\treturn new PolyTypeBinding(this);", "+\t\t\t}", "+\t\t\tcomputeConversions(scope, this.expectedType);", "+\t\t\treturn this.resolvedType = this.expectedType;", "+\t\t}", "-\t\tif (use18specifics && isPolyExpression()) {", "-\t\t\tif (this.expectedType == null) {", "-\t\t\t\tthis.polyExpressionScope = scope;", "-\t\t\t\treturn new PolyTypeBinding(this);", "-\t\t\t}", "-\t\t\tif (valueIfTrueType != null) {", "-\t\t\t\tif (!valueIfTrueType.isCompatibleWith(this.expectedType, scope)) {", "-\t\t\t\t\tscope.problemReporter().typeMismatchError(valueIfTrueType, this.expectedType, this.valueIfTrue, null);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.valueIfTrue.computeConversion(scope, this.expectedType, this.originalValueIfTrueType);\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (valueIfFalseType != null) {", "-\t\t\t\tif (!valueIfFalseType.isCompatibleWith(this.expectedType, scope)) {", "-\t\t\t\t\tscope.problemReporter().typeMismatchError(valueIfFalseType, this.expectedType, this.valueIfFalse, null);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.valueIfFalse.computeConversion(scope, this.expectedType, this.originalValueIfFalseType);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn this.resolvedType = this.expectedType;", "-\t\t}"]}], "num": 33769}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "059ce545688456c48fed06f7b922d8ca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d3236897464254383cf414d99cbab63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "e44084d11b78dee2352add7a7fb666daba7d3b97", "commitAfterChange": "7594e7e641998e4b739042718fe64988f6b36839", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic boolean visit(EqualExpression equalExpression, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(EqualExpression equalExpression, BlockScope scope)", "diff": ["-\t\tif (buildFragments(equalExpression)) {", "-\t\t\tswitch((equalExpression.bits & EqualExpression.OperatorMASK) >> EqualExpression.OperatorSHIFT) {", "-\t\t\t\tcase OperatorIds.EQUAL_EQUAL :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameEQUAL_EQUAL));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.NOT_EQUAL :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameNOT_EQUAL));", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} else {", "-\t\t\treturn false;", "-\t\t}", "+\t\tthis.fragmentsList.add(equalExpression);", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed2a7cd4a74fb704d6de10d9c375fcba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java", "commitBeforeChange": "d4fb0fb51b1c723a05d230645f038ab08aa3a386", "commitAfterChange": "f000b81f70edf0fb40319f8edb7c5d0c8cfe94b6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\t\tswitch (sam.problemId()) {", "-\t\t\t\tcase ProblemReasons.NoSuchSingleAbstractMethod:", "-\t\t\t\t\tblockScope.problemReporter().targetTypeIsNotAFunctionalInterface(this);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase ProblemReasons.NotAWellFormedParameterizedType:", "-\t\t\t\t\tblockScope.problemReporter().illFormedParameterizationOfFunctionalInterface(this);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase ProblemReasons.IntersectionHasMultipleFunctionalInterfaces:", "-\t\t\t\t\tblockScope.problemReporter().multipleFunctionalInterfaces(this);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\treturn null;", "+\t\t\treturn reportSamProblem(blockScope, sam);"]}], "num": 49427}
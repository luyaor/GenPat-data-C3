{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e60b5b8ebcb2250905dbf9b40ab7909", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06e56b0842fc2101ffb620a4d6ecf87a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic ClasspathEntry combineWith(ClasspathEntry referringEntry)", "signatureAfterChange": " \tpublic ClasspathEntry combineWith(ClasspathEntry referringEntry)", "diff": ["-\t\tif (referringEntry.isExported() || referringEntry.getAccessRuleSet() != null ) {", "+\t\tIClasspathAttribute[] referringExtraAttributes = referringEntry.getExtraAttributes();", "+\t\tif (referringEntry.isExported() || referringEntry.getAccessRuleSet() != null || referringExtraAttributes.length > 0) {", "+\t\t\tIClasspathAttribute[] combinedAttributes = this.extraAttributes;", "+\t\t\tint lenRefer = referringExtraAttributes.length;", "+\t\t\tif (lenRefer > 0) {", "+\t\t\t\tint lenCombined = combinedAttributes.length;", "+\t\t\t\tSystem.arraycopy(combinedAttributes, 0, combinedAttributes=new IClasspathAttribute[lenCombined+lenRefer], 0, lenCombined);", "+\t\t\t\tSystem.arraycopy(referringExtraAttributes, 0, combinedAttributes, lenCombined, lenRefer);", "+\t\t\t}", "-\t\t\t\t\t\t\t\tthis.extraAttributes);", "+\t\t\t\t\t\t\t\tcombinedAttributes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d6871e07b3a4948132b415ca92f55a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AllJavaModelTests.java", "commitBeforeChange": "04e492585ec94bbdfe8f3ba07279d9329063465d", "commitAfterChange": "3197772a63ef20d756d7f45892d94bccedcb3d16", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static Class[] getAllTestClasses()", "signatureAfterChange": " private static Class[] getAllTestClasses()", "diff": ["-static Class[] getAllTestClasses() {", "-\treturn new Class[] {", "+private static Class[] getAllTestClasses() {", "+\tClass[] classes = new Class[] {", "+\t", "+\t\t// Enter each test here, grouping the tests that are related", "+", "+\t\t// creation of method", "+\t\t", "+\t\t// Java Naming convention tests", "+\t", "+\t\t// Project & Root API unit tests", "+\t", "+\t\t// Compilation unit tests", "+\t", "+\t\t// Source attachment tests", "+\t\t", "+\t\t// Java search tests", "+\t\t\t", "+\t\t// Working copy tests", "+\t\t", "+\t\t// test IJavaModel", "+\t", "+\t\t// tests to check the encoding", "+\t\t", "+\t\t// test class name with special names like names containing '$'", "+\t\t", "+\t\t// IBuffer tests", "+\t", "+\t\t// Name lookup tests", "+\t", "+\t\t// Classpath and output location tests", "+\t", "+\t\t// Delta tests", "+\t", "+\t\t// Java element existence tests", "+\t\t", "+\t\t// Support for \"open on\" feature tests", "-\t\tSelectionJavadocModelTests.class,", "+\t\t", "+\t\t// Support for completion tests", "-\t\tCompletionTests_1_5.class,", "+\t\tCompletionTests_1_5.class,", "+\t\tSelectionJavadocModelTests.class,", "+\t\t", "+\t\t// Prefix and suffix tests", "+\t\t", "+\t\t// Code correction tests", "+\t\t", "+\t\t// Options tests", "+\t\t", "+\t\t// Type hierarchy tests", "+\t\t", "+\t\t// Resolve type tests", "+\t", "+\t\t// Reconciler tests", "+\t", "+\t\t// Copy and move operation tests", "+\t", "+\t\t// Rename tests", "+\t\t", "+\t\t// Exclusion patterns tests", "+\t\t", "+\t\t// Inclusion patterns tests", "+\t\t", "+\t\t// Signature tests", "+\t\t", "+\t\t// Variable initializers and container initializers tests", "+\t", "+\t\t// Java Model Factory tests", "+\t\t\t\t", "+\t\t// Java Element persistence tests", "+\t\t", "+\t\t// Java Element sorting tests", "+\t", "+\t\t// Package fragment root manipulation tests", "+\t\t", "+\t\t// Owverflowing cache tests", "+\t\t", "+\t\t// Working copy owner tests", "+\t", "+\t\t// Delete Java element tests", "+\t\t", "+\t\t// Local element tests", "+\t\t", "+\t\t// Get source tests", "+\t\t\t", "+\t\t// Create packages tests", "+\t", "+\t\t// Create compilation units tests", "+\t\t", "+\t\t// Create search participant tests", "+\t\tSearchParticipantTests.class,", "+\t\t", "+\t\t// Class file tests", "-\t\tBindingKeyTests.class", "+\t", "+\t};", "+\t", "+\tClass[] deprecatedClasses = getDeprecatedJDOMTestClasses();", "+\t", "+\tint classesLength = classes.length;", "+\tint deprecatedClassesLength = deprecatedClasses.length;", "+\tClass[] result = new Class[classesLength + deprecatedClassesLength];", "+\tSystem.arraycopy(classes, 0, result, 0, classesLength);", "+\tSystem.arraycopy(deprecatedClasses, 0, result, classesLength, deprecatedClassesLength);", "+\t", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "118b9ab37972e1102fe3948011600435", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "eaf368b1bbed77e5ac91194cb5cc62e7c3b2c07b", "commitAfterChange": "850c65069b948dc807fdf250e07cb482b9cf25c2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static void compile(String[] pathsAndContents, Map options, String outputPath)", "signatureAfterChange": " public static void compile(String[] pathsAndContents, Map options, String[] classpath, String outputPath)", "diff": ["+}", "+public static void compile(String[] pathsAndContents, Map options, String[] classpath, String outputPath) {", "-        INameEnvironment nameEnvironment = new FileSystem(getJavaClassLibs(), new String[] {}, null);", "+        String[] classLibs = getJavaClassLibs();", "+        if (classpath != null) {", "+        \tint length = classpath.length;", "+        \tint classLibsLength = classLibs.length;", "+        \tSystem.arraycopy(classpath, 0, classpath = new String[classLibsLength + length], classLibsLength, length);", "+        \tSystem.arraycopy(classLibs, 0, classpath, 0, classLibsLength);", "+        } else {", "+        \tclasspath = classLibs;", "+        }", "+        ", "+        INameEnvironment nameEnvironment = new FileSystem(classpath, new String[] {}, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3300e710fdae050ca8812f4f534367bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "38faf3efd9d7a9e66ede29f2210a34a5031698a0", "commitAfterChange": "102c35a2a8562c276abba3a19ac61f3d18639af8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "signatureAfterChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["-\t\t\t\t\t\t\tString fileName = new String(binaryType.getFileName()); // file name is used to recreate the Java element, so it has to be the .class file name", "-\t\t\t\t\t\t\tsourceUnit = new BasicCompilationUnit(sourceString.toCharArray(), Util.toCharArrays(packageFragment.names), fileName, this.project);", "+\t\t\t\t\t\t\t// file name is used to recreate the Java element, so it has to be the toplevel .class file name", "+\t\t\t\t\t\t\tchar[] fileName = binaryType.getFileName();", "+\t\t\t\t\t\t\tint firstDollar = CharOperation.indexOf('$', fileName);", "+\t\t\t\t\t\t\tif (firstDollar != -1) {", "+\t\t\t\t\t\t\t\tchar[] suffix = SuffixConstants.SUFFIX_class;", "+\t\t\t\t\t\t\t\tint suffixLength = suffix.length;", "+\t\t\t\t\t\t\t\tchar[] newFileName = new char[firstDollar + suffixLength];", "+\t\t\t\t\t\t\t\tSystem.arraycopy(fileName, 0, newFileName, 0, firstDollar);", "+\t\t\t\t\t\t\t\tSystem.arraycopy(suffix, 0, newFileName, firstDollar, suffixLength);", "+\t\t\t\t\t\t\t\tfileName = newFileName;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tsourceUnit = new BasicCompilationUnit(sourceString.toCharArray(), Util.toCharArrays(packageFragment.names), new String(fileName), this.project);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80b8dcea77213c9268569a9db6680145", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "735ec08d01cb739d2750c79098bb1ec5f311fb83", "commitAfterChange": "e872af6f3b1d66cbebb28423fbb7a0221da674d2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  private void computeClasspathLocations( \tIWorkspaceRoot workspaceRoot, \tJavaProject javaProject) throws CoreException", "signatureAfterChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "diff": ["-private void computeClasspathLocations(", "-\tIWorkspaceRoot workspaceRoot,", "-\tJavaProject javaProject) throws CoreException {", "+private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject) {", "-\tIPackageFragmentRoot[] roots = javaProject.getAllPackageFragmentRoots();", "+\tIPackageFragmentRoot[] roots = null;", "+\ttry {", "+\t\troots = javaProject.getAllPackageFragmentRoots();", "+\t} catch (JavaModelException e) {", "+\t\t// project doesn't exist", "+\t\tthis.locations = new ClasspathLocation[0];", "+\t\treturn;", "+\t}", "+\tint index = 0;", "-\t\tif (root.isArchive()) {", "-\t\t\tZipFile zipFile = manager.getZipFile(path);", "-\t\t\tcpLocations[i] = new ClasspathJar(zipFile);", "-\t\t} else {", "-\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);", "-\t\t\tif (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "-\t\t\t\tif (encoding == null) {", "-\t\t\t\t\tencoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);", "-\t\t\t\t}", "-\t\t\t\tcpLocations[i] = new ClasspathSourceDirectory((IContainer)target, encoding);", "+\t\ttry {", "+\t\t\tif (root.isArchive()) {", "+\t\t\t\tZipFile zipFile = manager.getZipFile(path);", "+\t\t\t\tcpLocations[index++] = new ClasspathJar(zipFile);", "-\t\t\t\tcpLocations[i] = ClasspathLocation.forBinaryFolder((IContainer) target, false);", "+\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);", "+\t\t\t\tif (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "+\t\t\t\t\tif (encoding == null) {", "+\t\t\t\t\t\tencoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);", "+\t\t\t\t\t}", "+\t\t\t\t\tcpLocations[index++] = new ClasspathSourceDirectory((IContainer)target, encoding);", "+\t\t\t\t} else {", "+\t\t\t\t\tcpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false);", "+\t\t\t\t}", "+\t\t} catch (CoreException e1) {", "+\t\t\t// problem opening zip file or getting root kind", "+\t\t\t// consider root corrupt and ignore", "+\t\t\t// just resize cpLocations", "+\t\t\tSystem.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "906f22c8720d31f51f210002f2db481b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "35479e92cf76ddb81a077e36ac9bcdd2a30c6978", "commitAfterChange": "0a0c65dd1c0bd06d4f10a0a8165667bb0b6d1700", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "signatureAfterChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "diff": ["+\t\tfinal boolean isConstructor = methodInfo.isConstructor();", "+\t\tboolean isEnum = false;", "+\t\ttry {", "+\t\t\tisEnum = type.isEnum();", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tString[] pNames = null;", "+\t\t\tif (isEnum && isConstructor) {", "+\t\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t\t\tint length = pNames.length - 2;", "+\t\t\t\tSystem.arraycopy(pNames, 2, pNames = new String[length], 0, length);", "+\t\t\t}", "-\t\tfinal boolean isConstructor = methodInfo.isConstructor();", "-\t\tString[] pNames = null;", "-\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t\tif (!(isEnum && isConstructor && !useGenericSignature)) {", "+\t\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t\t}", "-\t\t\t\tif (type.isEnum()) {", "+\t\t\t\tif (isEnum) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ea9c7e081935880b401b8ef581c196a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "a069ec3e155df34e1c3faf73c5e321c7b4b692f7", "commitAfterChange": "6dea5cf1ef2d860c99ae96c566fbaac1cc8d1d31", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\t\tbeginToCompile(sourceUnits);", "+\t\t\tif (this.annotationProcessorManager == null) {", "+\t\t\t\tbeginToCompile(sourceUnits);", "+\t\t\t} else {", "+\t\t\t\tICompilationUnit[] originalUnits = (ICompilationUnit[]) sourceUnits.clone(); // remember source units in case a source type collision occurs", "+\t\t\t\ttry {", "+\t\t\t\t\tbeginToCompile(sourceUnits);", "-\t\t\tif (this.annotationProcessorManager != null) {", "-\t\t\t\tprocessAnnotations();", "-\t\t\t\tif (!this.options.generateClassFiles) {", "-\t\t\t\t\t// -proc:only was set on the command line", "+\t\t\t\t\tprocessAnnotations();", "+\t\t\t\t\tif (!this.options.generateClassFiles) {", "+\t\t\t\t\t\t// -proc:only was set on the command line", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t} catch (SourceTypeCollisionException e) {", "+\t\t\t\t\treset();", "+\t\t\t\t\t// a generated type was referenced before it was created", "+\t\t\t\t\t// the compiler either created a MissingType or found a BinaryType for it", "+\t\t\t\t\t// so add the processor's generated files & start over,", "+\t\t\t\t\t// but remember to only pass the generated files to the annotation processor", "+\t\t\t\t\tint originalLength = originalUnits.length;", "+\t\t\t\t\tint newProcessedLength = e.newAnnotationProcessorUnits.length;", "+\t\t\t\t\tICompilationUnit[] combinedUnits = new ICompilationUnit[originalLength + newProcessedLength];", "+\t\t\t\t\tSystem.arraycopy(originalUnits, 0, combinedUnits, 0, originalLength);", "+\t\t\t\t\tSystem.arraycopy(e.newAnnotationProcessorUnits, 0, combinedUnits, originalLength, newProcessedLength);", "+\t\t\t\t\tthis.annotationProcessorStartIndex  = originalLength;", "+\t\t\t\t\tcompile(combinedUnits);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a051a068794a83a09121027238eeadc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "c0f8220101d45cc95e0339b31adfd53c34571071", "commitAfterChange": "f6e3b2cfdf325803724d69b4361d14343e55308a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void build()", "signatureAfterChange": " \t \tprivate void build()", "diff": ["-\t\t\t", "-\t\t\t// Construct build environment, this invokes the build inside a callback", "-\t\t\t// in order to keep open the DOM AST pipeline", "-\t\t\tBuildEnv.newBuildEnv( ", "-\t\t\t\t\t_filesWithAnnotation, ", "-\t\t\t\t\t_filesWithoutAnnotation, ", "-\t\t\t\t\t_aptProject.getJavaProject(),", "-\t\t\t\t\tbuildCallback);", "+\t\t\tboolean split = false;", "+\t\t\tif (SPLIT_FILES && !hasBatchFactory()) { // don't split the files if batch processors are present", "+\t\t\t\tsplit = _filesWithAnnotation.length > MAX_FILES_PER_ITERATION ? true : false;", "+\t\t\t}", "+\t\t\tif (!split) {", "+\t\t\t\t// Construct build environment, this invokes the build inside a callback", "+\t\t\t\t// in order to keep open the DOM AST pipeline", "+\t\t\t\tBuildEnv.newBuildEnv(", "+\t\t\t\t\t\t_filesWithAnnotation,", "+\t\t\t\t\t\t_filesWithoutAnnotation,", "+\t\t\t\t\t\t_aptProject.getJavaProject(),", "+\t\t\t\t\t\tbuildCallback);", "+\t\t\t} else {", "+\t\t\t\tfor (int index = 0; index < _filesWithAnnotation.length;) {", "+\t\t\t\t\tint numberToProcess = (index + MAX_FILES_PER_ITERATION) > _filesWithAnnotation.length ? _filesWithAnnotation.length - index : MAX_FILES_PER_ITERATION;", "+\t\t\t\t\tBuildContext[] filesToProcess = new BuildContext[numberToProcess];\t\t\t ", "+\t\t\t\t\tSystem.arraycopy(_filesWithAnnotation, index, filesToProcess, 0, numberToProcess);", "+\t\t\t\t\t// Construct build environment, this invokes the build inside a callback", "+\t\t\t\t\t// in order to keep open the DOM AST pipeline", "+\t\t\t\t\tBuildEnv.newBuildEnv( ", "+\t\t\t\t\t\t\tfilesToProcess, ", "+\t\t\t\t\t\t\t_filesWithoutAnnotation, ", "+\t\t\t\t\t\t\t_aptProject.getJavaProject(),", "+\t\t\t\t\t\t\tbuildCallback);", "+\t\t\t\t\t index += numberToProcess;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 39613}
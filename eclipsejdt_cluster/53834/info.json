{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc819f787e217c7f01b717c91ed87cf1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76a04798a15a8c10aa1b52be1f479e23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "7e61b3f01f8b2328acee556fdc4ddf75c1702dd3", "commitAfterChange": "f98c9e376d07d0e65cfd307c772db2eeb92af6b9", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic boolean dependsOnResolutionOf(InferenceVariable alpha, InferenceVariable beta)", "signatureAfterChange": " \tpublic boolean dependsOnResolutionOf(InferenceVariable alpha, InferenceVariable beta)", "diff": ["+\t\tboolean betaIsInCaptureLhs = false;", "-\t\t\t\t\tfor (int j = 0; j < g.arguments.length; j++) {", "-\t\t\t\t\t\tTypeBinding aj = g.arguments[j];", "-\t\t\t\t\t\tif (aj == beta) //$IDENTITY-COMPARISON$ InferenceVariable", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "+\t\t\t\t\t// An inference variable \u03b1 appearing on the left-hand side of a bound of the form G<..., \u03b1, ...> = capture(G<...>)", "+\t\t\t\t\t// depends on the resolution of every other inference variable mentioned in this bound (on both sides of the = sign).", "-\t\t\t\t\treturn false;", "+\t\t\t\t\tif (g.mentionsAny(new TypeBinding[]{beta}, i)) // exclude itself ", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t} else if (g.arguments[i] == beta) { //$IDENTITY-COMPARISON$ InferenceVariable", "+\t\t\t\t\tbetaIsInCaptureLhs = true;", "-", "-\t\tThreeSets sets = (ThreeSets) this.boundsPerVariable.get(alpha);", "-\t\tif (sets != null && sets.hasDependency(beta))", "-\t\t\treturn true;", "-\t\tsets = (ThreeSets) this.boundsPerVariable.get(beta);", "-\t\tif (sets != null && sets.hasDependency(alpha))", "-\t\t\treturn true;", "-", "+\t\tif (betaIsInCaptureLhs) { // swap \u03b1 and \u03b2 in the rule text to cover \"then \u03b2 depends on the resolution of \u03b1\"", "+\t\t\tThreeSets sets = (ThreeSets) this.boundsPerVariable.get(beta);", "+\t\t\tif (sets != null && sets.hasDependency(alpha))", "+\t\t\t\treturn true;", "+\t\t} else {", "+\t\t\tThreeSets sets = (ThreeSets) this.boundsPerVariable.get(alpha);", "+\t\t\tif (sets != null && sets.hasDependency(beta))", "+\t\t\t\treturn true;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b19020a8d5d3fe13c6bc69962e5580d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "7e61b3f01f8b2328acee556fdc4ddf75c1702dd3", "commitAfterChange": "f98c9e376d07d0e65cfd307c772db2eeb92af6b9", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate BoundSet resolve() throws InferenceFailureException", "signatureAfterChange": " \tprivate BoundSet resolve() throws InferenceFailureException", "diff": ["-\t\t\tfor (int i = 0; i < this.inferenceVariables.length; i++) {", "-\t\t\t\tInferenceVariable currentVariable = this.inferenceVariables[i];", "-\t\t\t\tif (this.currentBounds.isInstantiated(currentVariable)) continue;", "-\t\t\t\t// find a minimal set of dependent variables:", "-\t\t\t\tSet variableSet = new HashSet();", "-\t\t\t\tint numUninstantiated = addDependencies(tmpBoundSet, variableSet, i);", "+\t\t\t// find a minimal set of dependent variables:", "+\t\t\tSet variableSet;", "+\t\t\twhile ((variableSet = getSmallestVariableSet(tmpBoundSet)) != null) {", "+\t\t\t\tint oldNumUninstantiated = tmpBoundSet.numUninstantiatedVariables(this.inferenceVariables);", "-\t\t\t\t", "-\t\t\t\tif (numUninstantiated > 0 && numVars > 0) {", "+\t\t\t\tif (numVars > 0) {", "-\t\t\t\t\t\tTypeBinding[] lowerBounds = tmpBoundSet.lowerBounds(variable, false/*onlyProper*/);", "+\t\t\t\t\t\tTypeBinding[] lowerBounds = tmpBoundSet.lowerBounds(variable, true/*onlyProper*/);", "-\t\t\t\t\tif (tmpBoundSet.incorporate(this))", "+\t\t\t\t\tif (tmpBoundSet.incorporate(this)) {", "+\t\t\t\t\t\tif (tmpBoundSet.numUninstantiatedVariables(this.inferenceVariables) == oldNumUninstantiated)", "+\t\t\t\t\t\t\treturn null; // abort because we made no progress", "+\t\t\t\t\t}"]}], "num": 53834}
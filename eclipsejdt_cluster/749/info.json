{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ce1784d8f086203feb50571be5dc5b2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81f24de984849a0c0ca0d3302aea1979", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "25d711b6378677530fb32ec4af48437daa9af8c9", "commitAfterChange": "311302a34bca17cc44584d40a0411fdbd4638263", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "diff": ["-\t\t\t\talternateLeftTypeId = ((CastExpression)left).expression.resolvedType.id;", "-\t\t\t\tif (alternateLeftTypeId == leftTypeId) { // obvious identity cast", "+\t\t\t\tTypeBinding alternateLeftType = ((CastExpression)left).expression.resolvedType;", "+\t\t\t\tif (alternateLeftType == null) return; // cannot do better", "+\t\t\t\tif ((alternateLeftTypeId = alternateLeftType.id) == leftTypeId) { // obvious identity cast", "-\t\t\t\talternateRightTypeId = ((CastExpression)right).expression.resolvedType.id;", "-\t\t\t\tif (alternateRightTypeId == rightTypeId) { // obvious identity cast", "+\t\t\t\tTypeBinding alternateRightType = ((CastExpression)right).expression.resolvedType;", "+\t\t\t\tif (alternateRightType == null) return; // cannot do better", "+\t\t\t\tif ((alternateRightTypeId = alternateRightType.id) == rightTypeId) { // obvious identity cast"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05fe32bff9d017e24fea09c34386507", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "3e74f4ef73845fee74b0867380da94913c5a23bb", "commitAfterChange": "9b26565edd8f00a28f01564be0384c99bbdfa335", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, Expression right, int rightTypeId)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, Expression right, int rightTypeId)", "diff": ["+\t */", "+\t\tint alternateLeftTypeId = unnecessaryLeftCast ? ((CastExpression)left).expression.resolvedType.id : leftTypeId;", "+\t\tif (unnecessaryLeftCast && alternateLeftTypeId == leftTypeId) {", "+\t\t\t// obvious identity cast", "+\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)left); ", "+\t\t\tunnecessaryLeftCast = false;", "+\t\t}", "+\t\tint alternateRightTypeId = unnecessaryRightCast ? ((CastExpression)right).expression.resolvedType.id : rightTypeId;", "+\t\tif (unnecessaryRightCast && alternateRightTypeId == rightTypeId) {", "+\t\t\t// obvious identity cast", "+\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)right); ", "+\t\t\tunnecessaryRightCast = false;", "+\t\t}", "-\t\t\tint alternateLeftTypeId = unnecessaryLeftCast ? ((CastExpression)left).expression.resolvedType.id : leftTypeId;", "-\t\t\tint alternateRightTypeId = unnecessaryRightCast ? ((CastExpression)right).expression.resolvedType.id : rightTypeId;"]}], "num": 749}
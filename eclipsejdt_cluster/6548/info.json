{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e8608c656d6cffcdb68652ccaf3faa7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17b6b9debbf83b284a299c229bbbc793", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic abstract AnnotationBinding getAnnotationType(ReferenceBinding annotationType, boolean requireResolved);", "signatureAfterChange": " \tpublic final AnnotationBinding getAnnotationType(ReferenceBinding annotationType, boolean requiredResolved)", "diff": ["-\tpublic abstract AnnotationBinding getAnnotationType(ReferenceBinding annotationType, boolean requireResolved);", "+\t*/", "+\tpublic final AnnotationBinding getAnnotationType(ReferenceBinding annotationType, boolean requiredResolved) {", "+\t\tAnnotationBinding annotation = (AnnotationBinding) this.annotationTypes.get(annotationType);", "+\t\tif (annotation == null) {", "+\t\t\tif (requiredResolved)", "+\t\t\t\tannotation = new AnnotationBinding(annotationType, Binding.NO_ELEMENT_VALUE_PAIRS);", "+\t\t\telse ", "+\t\t\t\tannotation = new UnresolvedAnnotationBinding(annotationType, Binding.NO_ELEMENT_VALUE_PAIRS, this.environment);", "+\t\t\tthis.annotationTypes.put(annotationType, annotation);", "+\t\t}", "+\t\tif (requiredResolved)", "+\t\t\tannotation.resolve();", "+\t\treturn annotation;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e21aa6d15591aac142a918087f8d472", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "a5f6d4638626e6b63445e0dcc2d7df23ecb18614", "commitAfterChange": "7f7a05ae0877375c4e6f1763bbaeecff5ba0d990", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory, IProblemRequestor problemRequestor) throws JavaModelException", "signatureAfterChange": "\r public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory, IProblemRequestor problemRequestor) throws JavaModelException", "diff": ["+\r", "+\t\r", "+\t// In order to be shared, working copies have to denote the same compilation unit \r", "+\t// AND use the same buffer factory.\r", "+\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.\r", "-\tWorkingCopy workingCopy = (WorkingCopy)sharedWorkingCopies.get(this);\r", "+\t\r", "+\tMap perFactoryWorkingCopies = \r", "+\t\tfactory == null \r", "+\t\t\t?(Map) sharedWorkingCopies.get(CompilationUnit.DEFAULT_FACTORY) \r", "+\t\t\t: (Map) sharedWorkingCopies.get(factory);\r", "+\tif (perFactoryWorkingCopies == null){\r", "+\t\tperFactoryWorkingCopies = new HashMap();\r", "+\t\tif (factory == null){\r", "+\t\t\tsharedWorkingCopies.put(CompilationUnit.DEFAULT_FACTORY, perFactoryWorkingCopies); \r", "+\t\t} else {\r", "+\t\t\tsharedWorkingCopies.put(factory, perFactoryWorkingCopies);\r", "+\t\t}\r", "+\t}\r", "+\tWorkingCopy workingCopy = (WorkingCopy)perFactoryWorkingCopies.get(this);\r", "-\t\tsharedWorkingCopies.put(this, workingCopy);\r", "+\t\tperFactoryWorkingCopies.put(this, workingCopy);\r"]}], "num": 6548}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9e2e4fea7953479783d6c5a22f1fd9b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bad17444b68dbc01390eb9c47b0c4a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "058f4956c302999db0dab277cf91883f2d016e2b", "commitAfterChange": "27d9d524a3b624cfc1260a727d1dfb92d53ae22a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "diff": ["-\t\tif ((expression.bits & UnnecessaryCastMask) == 0 && expression.resolvedType.isBaseType()) {", "+\t\tif ((expression.bits & UnnecessaryCastMASK) == 0 && expression.resolvedType.isBaseType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3aadce954c4fc10b993710cdc99938a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "diff": ["-\t\tif ((expression.bits & UnnecessaryCastMASK) == 0 && expression.resolvedType.isBaseType()) {", "+\t\tif ((expression.bits & UnnecessaryCast) == 0 && expression.resolvedType.isBaseType()) {"]}], "num": 4911}
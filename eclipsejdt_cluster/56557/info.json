{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c36f138da8ff3d4852f30bdceb2e86b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a4901957000a85b88c9db50d865ca7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "97aa1dc82c96c4ef3bebbae850e5af4a78f8dcd4", "commitAfterChange": "92a7b5c8a7f265fdf9af699a7f44797a77112099", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprotected CompilationUnitProblemFinder( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean parseLiteralExpressionsAsConstants )", "signatureAfterChange": " \tprotected CompilationUnitProblemFinder( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean creatingAST)", "diff": ["-\t\tboolean parseLiteralExpressionsAsConstants ) {", "+\t\tboolean creatingAST) {", "-\t\tsuper(environment, policy, settings, requestor, problemFactory, parseLiteralExpressionsAsConstants );", "+\t\tsuper(environment,", "+\t\t\tpolicy,", "+\t\t\tsettings,", "+\t\t\trequestor,", "+\t\t\tproblemFactory,", "+\t\t\tcreatingAST/*parse literal expressions as constants if creating ast*/,", "+\t\t\tcreatingAST/*store annotations in the bindings if creating ast*/", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bea16e6aa8ee1fb5b006fcf713abdde1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "fcebf68426f9aa792d1f3380803ca144f79b6c3c", "commitAfterChange": "4da5a9a150c1a47a773a4fd9e96abe9171b5562d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnitDeclaration unit, \t\tICompilationUnit unitElement,  \t\tchar[] contents, \t\tParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tIProblemRequestor problemRequestor, \t\tboolean resetEnvironment, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnitDeclaration unit, \t\tICompilationUnit unitElement,  \t\tchar[] contents, \t\tParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tIProblemRequestor problemRequestor, \t\tboolean creatingAST, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\tboolean resetEnvironment,", "+\t\tboolean creatingAST,", "-\t\t\t\tproblemFactory);", "+\t\t\t\tproblemFactory,", "+\t\t\t\t!creatingAST); // optimize string literal only if not creating a DOM AST", "-\t\t\tif (problemFinder != null && resetEnvironment)", "-\t\t\t\tproblemFinder.lookupEnvironment.reset();\t\t\t", "+\t\t\tif (problemFinder != null && !creatingAST)", "+\t\t\t\tproblemFinder.lookupEnvironment.reset();\t\t"]}], "num": 56557}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8e9640f008b2b0d10ba79ca965842d7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05e3ade957cb50bf0ec30954fec103ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "b7259e61ad84f1dda95b63bf74b4b4f38727c3a6", "commitAfterChange": "db331d5badcb0b35069c87387ccad89f9c226a52", "methodNumberBeforeChange": 206, "methodNumberAfterChange": 213, "signatureBeforeChange": " public void testBug260381_wksp2_07() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_07() throws JavaModelException", "diff": ["-\t\t\"\t * comparable</i> by the specified comparator:\\n\" + ", "-\t\t\"\t * {@code comparator.compare(e1, e2)} must not throw a\\n\" + ", "-\t\t\"\t * {@code ClassCastException} for any elements {@code e1} and {@code e2} in\\n\" + ", "-\t\t\"\t * the multiset. If the user attempts to add an element to the multiset that\\n\" + ", "-\t\t\"\t * violates this constraint, the {@code add(Object)} call will throw a\\n\" + ", "-\t\t\"\t * {@code ClassCastException}.\\n\" + ", "+\t\t\"\t * comparable</i> by the specified comparator: {@code comparator.compare(e1,\\n\" + ", "+\t\t\"\t * e2)} must not throw a {@code ClassCastException} for any elements\\n\" + ", "+\t\t\"\t * {@code e1} and {@code e2} in the multiset. If the user attempts to add an\\n\" + ", "+\t\t\"\t * element to the multiset that violates this constraint, the\\n\" + ", "+\t\t\"\t * {@code add(Object)} call will throw a {@code ClassCastException}.\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bee051c716b35a37d62f1db73092efb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "9b5849b276b557fc60d6c04ed0f5505fe74ef589", "commitAfterChange": "a170a70f9fd89b9996c94f318397ff4dca1db782", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void testCompatibility3a()", "signatureAfterChange": " \tpublic void testCompatibility3a()", "diff": ["-\t// FIXME(Stephan) : Old messages are wrong, the new diagnostics are correct, but the leaf component types differ - null annotated readable names don't reflect that - this needs to be fixed.", "-\t\t\t\t+ \"\tvoid acceptNulls(@NonNull String[] noNulls) {}\\n\"", "+\t\t\t\t+ \"\tvoid acceptNulls(@Nullable String[] withNulls) {}\\n\"", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'@NonNull String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'@Nullable String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'@Nullable String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'@NonNull String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'@Nullable String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'@NonNull String []\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc6a5e851cf2970a4a7ed108cb549966", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "cc547ec5c074d17ff882a095dbec68dcad72a87a", "commitAfterChange": "99250bacae54994417cccb9e6d497671bd34c73a", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void test053()", "signatureAfterChange": " public void test053()", "diff": ["-\t\t\t\"     4  ifgt 7\\n\" + ", "+\t\t\t\"     4  ifle 7\\n\" + ", "-\t\t\t\"     4  ifgt 7\\n\" + ", "+\t\t\t\"     4  ifle 7\\n\" + ", "-\t\t\t\"      Stack map table: number of frames 4\\n\" + ", "-\t\t\t\"        [pc: 3, append: {int}]\\n\" + ", "-\t\t\t\"        [pc: 7, same]\\n\" + ", "+\t\t\t\"      Stack map table: number of frames 3\\n\" + ", "+\t\t\t\"        [pc: 7, append: {int}]\\n\" + "]}], "num": 60442}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa39ccb88c86475cd7147e1f4a59d796", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62c79f9c529c08d247ebf10e90a35853", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "90ab26b26139b04c1b21341903f9bda9323cd1a1", "commitAfterChange": "63bda44d804d11c0afa7e8111644ceeb5480e759", "methodNumberBeforeChange": 224, "methodNumberAfterChange": 119, "signatureBeforeChange": " public void nullParameterToVarargsMethod(MethodBinding method, ASTNode location)", "signatureAfterChange": " public void inexactParameterToVarargsMethod(MethodBinding method, ASTNode location)", "diff": ["+}", "+public void inexactParameterToVarargsMethod(MethodBinding method, ASTNode location) {", "+\tif (method.isConstructor()) {", "+\t\tthis.handle(", "+\t\t\tIProblem.InexactParameterToVarargsConstructor,", "+\t\t\tnew String[] {new String(method.declaringClass.readableName()), parametersAsString(method.parameters, false)},", "+\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), parametersAsString(method.parameters, true)},", "+\t\t\tlocation.sourceStart,", "+\t\t\tlocation.sourceEnd);", "+\t} else {", "+\t\tthis.handle(", "+\t\t\tIProblem.InexactParameterToVarargsMethod,", "+\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), parametersAsString(method.parameters, false)},", "+\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), parametersAsString(method.parameters, true)},", "+\t\t\tlocation.sourceStart,", "+\t\t\tlocation.sourceEnd);", "+\t}", "-}", "-public void nullParameterToVarargsMethod(MethodBinding method, ASTNode location) {", "-\tif (method.isConstructor()) {", "-\t\tthis.handle(", "-\t\t\tIProblem.NullParameterToVarargsConstructor,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), parametersAsString(method.parameters, false)},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), parametersAsString(method.parameters, true)},", "-\t\t\tlocation.sourceStart,", "-\t\t\tlocation.sourceEnd);", "-\t} else {", "-\t\tthis.handle(", "-\t\t\tIProblem.NullParameterToVarargsMethod,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), parametersAsString(method.parameters, false)},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), parametersAsString(method.parameters, true)},", "-\t\t\tlocation.sourceStart,", "-\t\t\tlocation.sourceEnd);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76bbca1421bd793cf017dc4713cd4f6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "commitAfterChange": "09b5bcfabb25c2c9040a9d902d7f8e5151952519", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 320, "signatureBeforeChange": " public void castArgumentToVarargsMethod(MethodBinding method, InvocationSite location)", "signatureAfterChange": " public void varargsArgumentNeedCast(MethodBinding method, TypeBinding argumentType, InvocationSite location)", "diff": ["-public void castArgumentToVarargsMethod(MethodBinding method, InvocationSite location) {", "-\tTypeBinding lastParam = method.parameters[method.parameters.length-1];", "-\tif (method.isConstructor()) {", "-\t\tthis.handle(", "-\t\t\tIProblem.CastArgumentToVarargsConstructor,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t} else {", "-\t\tthis.handle(", "-\t\t\tIProblem.CastArgumentToVarargsMethod,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t}", "-}", "+public void varargsArgumentNeedCast(MethodBinding method, TypeBinding argumentType, InvocationSite location) {", "+\tTypeBinding lastParam = method.parameters[method.parameters.length-1];", "+\tif (method.isConstructor()) {", "+\t\tthis.handle(", "+\t\t\tIProblem.ConstructorVarargsArgumentNeedCast,", "+\t\t\tnew String[] {new String(argumentType.readableName()), new String(lastParam.readableName()), new String(method.declaringClass.readableName()), typesAsString(method.isVarargs(), method.parameters, false), },", "+\t\t\tnew String[] {new String(argumentType.shortReadableName()), new String(lastParam.shortReadableName()), new String(method.declaringClass.shortReadableName()), typesAsString(method.isVarargs(), method.parameters, true), },", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t} else {", "+\t\tthis.handle(", "+\t\t\tIProblem.MethodVarargsArgumentNeedCast,", "+\t\t\tnew String[] { new String(argumentType.readableName()), new String(lastParam.readableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, false), new String(method.declaringClass.readableName()), },", "+\t\t\tnew String[] { new String(argumentType.shortReadableName()), new String(lastParam.shortReadableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, true), new String(method.declaringClass.shortReadableName()), },", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78545afece0cdb56ecc1fa333d7c15b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void inexactParameterToVarargsMethod(MethodBinding method, InvocationSite location)", "signatureAfterChange": " public void ambiguousArgumentToVarargsMethod(MethodBinding method, InvocationSite location)", "diff": ["+public void ambiguousArgumentToVarargsMethod(MethodBinding method, InvocationSite location) {", "+\tTypeBinding lastParam = method.parameters[method.parameters.length-1];", "+\tif (method.isConstructor()) {", "+\t\tthis.handle(", "+\t\t\tIProblem.AmbiguousArgumentToVarargsConstructor,", "+\t\t\tnew String[] {new String(method.declaringClass.readableName()), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "+\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t} else {", "+\t\tthis.handle(", "+\t\t\tIProblem.AmbiguousArgumentToVarargsMethod,", "+\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "+\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t}", "+}", "-}", "-public void inexactParameterToVarargsMethod(MethodBinding method, InvocationSite location) {", "-\tif (method.isConstructor()) {", "-\t\tthis.handle(", "-\t\t\tIProblem.InexactParameterToVarargsConstructor,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), parametersAsString(method.parameters, false)},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), parametersAsString(method.parameters, true)},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t} else {", "-\t\tthis.handle(", "-\t\t\tIProblem.InexactParameterToVarargsMethod,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), parametersAsString(method.parameters, false)},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), parametersAsString(method.parameters, true)},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cb3decf2f7a704ebd277009b4ddaf08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void ambiguousArgumentToVarargsMethod(MethodBinding method, InvocationSite location)", "signatureAfterChange": " public void castArgumentToVarargsMethod(MethodBinding method, InvocationSite location)", "diff": ["-public void ambiguousArgumentToVarargsMethod(MethodBinding method, InvocationSite location) {", "-\tTypeBinding lastParam = method.parameters[method.parameters.length-1];", "-\tif (method.isConstructor()) {", "-\t\tthis.handle(", "-\t\t\tIProblem.AmbiguousArgumentToVarargsConstructor,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t} else {", "-\t\tthis.handle(", "-\t\t\tIProblem.AmbiguousArgumentToVarargsMethod,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t}", "-}", "+public void castArgumentToVarargsMethod(MethodBinding method, InvocationSite location) {", "+\tTypeBinding lastParam = method.parameters[method.parameters.length-1];", "+\tif (method.isConstructor()) {", "+\t\tthis.handle(", "+\t\t\tIProblem.CastArgumentToVarargsConstructor,", "+\t\t\tnew String[] {new String(method.declaringClass.readableName()), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "+\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t} else {", "+\t\tthis.handle(", "+\t\t\tIProblem.CastArgumentToVarargsMethod,", "+\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "+\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t}", "+}"]}], "num": 11297}
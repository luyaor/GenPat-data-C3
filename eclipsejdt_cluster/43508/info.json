{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34fb2a8632b50ad470bb3c71a75c7c99", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27879784d9433978777be763946ed32d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "0e8ca24e8451f1d91ed53a269d184ea21d12301f", "commitAfterChange": "369ffd3db09511488e039ba2575df2eeea055320", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r private boolean updateCurrentDeltaAndIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": "\r private boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType)", "diff": ["-private boolean updateCurrentDeltaAndIndex(Openable element, IResourceDelta delta) {\r", "+private boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType) {\r", "+\tOpenable element;\r", "+\t\t\telement = this.createElement(delta.getResource(), elementType);\r", "+\t\t\tif (element == null) return false;\r", "-\t\t\tif (element instanceof IPackageFragmentRoot) {\r", "-\t\t\t\telement = (Openable)((IPackageFragmentRoot)element).getPackageFragment(\"\");//$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\tif (element instanceof IPackageFragment) {\r", "-\t\t\t\t// add subpackages\r", "-\t\t\t\tPackageFragmentRoot root = element.getPackageFragmentRoot();\r", "-\t\t\t\tString name = element.getElementName();\r", "-\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();\r", "-\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {\r", "-\t\t\t\t\tIResourceDelta child = children[i];\r", "-\t\t\t\t\tIResource resource = child.getResource();\r", "-\t\t\t\t\tif (resource instanceof IFolder) {", "-\t\t\t\t\t\tString subpkgName = \r", "-\t\t\t\t\t\t\tname.length() == 0 ? \r", "-\t\t\t\t\t\t\t\tresource.getName() : \r", "-\t\t\t\t\t\t\t\tname + \".\" + resource.getName(); //$NON-NLS-1$\r", "-\t\t\t\t\t\tOpenable subpkg = (Openable)root.getPackageFragment(subpkgName);\r", "-\t\t\t\t\t\tthis.updateCurrentDeltaAndIndex(subpkg, child);\r", "-\t\t\t\t\t}", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t\telement = this.createElement(delta.getResource(), elementType);\r", "+\t\t\tif (element == null) return false;\r", "-\t\t\tif (element instanceof IPackageFragmentRoot) {\r", "-\t\t\t\telement = (Openable)((IPackageFragmentRoot)element).getPackageFragment(\"\");//$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\tif (element instanceof IPackageFragment) {\r", "-\t\t\t\t// remove subpackages\r", "-\t\t\t\tPackageFragmentRoot root = element.getPackageFragmentRoot();\r", "-\t\t\t\tString name = element.getElementName();\r", "-\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();\r", "-\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {\r", "-\t\t\t\t\tIResourceDelta child = children[i];\r", "-\t\t\t\t\tIResource resource = child.getResource();\r", "-\t\t\t\t\tif (resource instanceof IFolder) {\r", "-\t\t\t\t\t\tString subpkgName = \r", "-\t\t\t\t\t\t\tname.length() == 0 ? \r", "-\t\t\t\t\t\t\t\tresource.getName() : \r", "-\t\t\t\t\t\t\t\tname + \".\" + resource.getName(); //$NON-NLS-1$\r", "-\t\t\t\t\t\tOpenable subpkg = (Openable)root.getPackageFragment(subpkgName);\r", "-\t\t\t\t\t\tthis.updateCurrentDeltaAndIndex(subpkg, child);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t\t\telement = this.createElement(delta.getResource(), elementType);\r", "+\t\t\t\tif (element == null) return false;\r", "+\t\t\t\telement = this.createElement(delta.getResource(), elementType);\r", "+\t\t\t\tif (element == null) return false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fb0370383671d91da0e41ba75dea5d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void locateMatches(String[] filePaths, IWorkspace workspace, org.eclipse.jdt.core.ICompilationUnit[] copies) throws JavaModelException", "signatureAfterChange": " public void locateMatches(SearchDocument[] searchDocuments) throws JavaModelException", "diff": ["-public void locateMatches(String[] filePaths, IWorkspace workspace, org.eclipse.jdt.core.ICompilationUnit[] copies) throws JavaModelException {", "+public void locateMatches(SearchDocument[] searchDocuments) throws JavaModelException {", "-\t\tSystem.out.println(\"Locating matches in files [\"); //$NON-NLS-1$", "-\t\tfor (int i = 0, length = filePaths.length; i < length; i++)", "-\t\t\tSystem.out.println(\"\\t\" + filePaths[i]); //$NON-NLS-1$", "+\t\tSystem.out.println(\"Locating matches in documents [\"); //$NON-NLS-1$", "+\t\tfor (int i = 0, length = searchDocuments.length; i < length; i++)", "+\t\t\tSystem.out.println(\"\\t\" + searchDocuments[i]); //$NON-NLS-1$", "-\t\tif (copies != null) {", "-\t\t\t System.out.println(\"and working copies [\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0, length = copies.length; i < length; i++)", "-\t\t\t\tSystem.out.println(\"\\t\" + ((JavaElement) copies[i]).toStringWithAncestors()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t}", "-\t\t// substitute compilation units with working copies", "-\t\tHashMap wcPaths = new HashMap(); // a map from path to working copies", "-\t\tif ((this.workingCopies = copies) != null) {", "-\t\t\tint wcLength = this.workingCopies.length;", "-\t\t\tif (wcLength > 0) {", "-\t\t\t\tString[] newPaths = new String[wcLength];", "-\t\t\t\tfor (int i = 0; i < wcLength; i++) {", "-\t\t\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = this.workingCopies[i];", "-\t\t\t\t\tString path = workingCopy.getPath().toString();", "-\t\t\t\t\twcPaths.put(path, workingCopy);", "-\t\t\t\t\tnewPaths[i] = path;", "-\t\t\t\t}", "-\t\t\t\tint filePathsLength = filePaths.length;", "-\t\t\t\tSystem.arraycopy(filePaths, 0, filePaths = new String[filePathsLength + wcLength], 0, filePathsLength);", "-\t\t\t\tSystem.arraycopy(newPaths, 0, filePaths, filePathsLength, wcLength);", "-\t\t\t}", "-\t\t}", "-", "-\t\t\tthis.progressMonitor.beginTask(\"\", filePaths.length * (this.pattern.mustResolve ? 10 : 5)); //$NON-NLS-1$", "+\t\t\tthis.progressMonitor.beginTask(\"\", searchDocuments.length * (this.pattern.mustResolve ? 10 : 5)); //$NON-NLS-1$", "-\t\tUtil.sort(filePaths); ", "-\t\tfor (int i = 0, l = filePaths.length; i < l; i++) {", "+\t\tUtil.sort(searchDocuments, new Util.Comparer() {", "+\t\t\tpublic int compare(Object a, Object b) {", "+\t\t\t\treturn ((SearchDocument)a).getPath().compareTo(((SearchDocument)b).getPath());", "+\t\t\t}", "+\t\t}); ", "+\t\tfor (int i = 0, l = searchDocuments.length; i < l; i++) {", "-\t\t\tString pathString = filePaths[i];", "-\t\t\tif (i > 0 && pathString.equals(filePaths[i - 1])) continue;", "+\t\t\tSearchDocument searchDocument = searchDocuments[i];", "+\t\t\tString pathString = searchDocument.getPath();", "+\t\t\tif (i > 0 && pathString.equals(searchDocuments[i - 1].getPath())) continue;", "-\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = (org.eclipse.jdt.core.ICompilationUnit) wcPaths.get(pathString);", "-\t\t\tif (workingCopy != null) {", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = null;", "+\t\t\tif (searchDocument instanceof JavaSearchParticipant.WorkingCopyDocument) {", "+\t\t\t\tworkingCopy = ((JavaSearchParticipant.WorkingCopyDocument)searchDocument).workingCopy;", "-\t\t\tmatchSet.add(new PossibleMatch(this, resource, openable));", "+\t\t\tmatchSet.add(new PossibleMatch(this, resource, openable, searchDocument));"]}], "num": 43508}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c31b71cd701b49c0848d264473cf846", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98e2014d8b65af991aac3a4cdffc223e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 148, "signatureBeforeChange": "  \tprivate QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "signatureAfterChange": "  \tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "diff": ["-", "-\tprivate QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {", "-\t\tint length = typeName.length;", "-\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));", "-\t\tfirstToken.index = length - 1;", "-\t\tint start0 = (int)(positions[0]>>>32);", "-\t\tint start = start0;", "-\t\tint end = (int)(positions[0] & 0xFFFFFFFF);", "-\t\tfirstToken.setSourceRange(start, end - start + 1);", "-\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));", "-\t\tsecondToken.index = length - 2;", "-\t\tstart = (int)(positions[1]>>>32);", "-\t\tend = (int)(positions[1] & 0xFFFFFFFF);", "-\t\tsecondToken.setSourceRange(start, end - start + 1);", "-\t\tQualifiedName qualifiedName = this.ast.newQualifiedName(firstToken, secondToken);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(qualifiedName, node);", "-\t\t\trecordPendingNameScopeResolution(qualifiedName);", "-\t\t\trecordNodes(firstToken, node);", "-\t\t\trecordNodes(secondToken, node);", "-\t\t\trecordPendingNameScopeResolution(firstToken);", "-\t\t\trecordPendingNameScopeResolution(secondToken);", "-\t\t}", "-\t\tqualifiedName.index = length - 2;", "-\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "-\t\tSimpleName newPart = null;", "-\t\tfor (int i = 2; i < length; i++) {", "-\t\t\tnewPart = this.ast.newSimpleName(new String(typeName[i]));", "-\t\t\tnewPart.index = length - i - 1;", "-\t\t\tstart = (int)(positions[i]>>>32);", "-\t\t\tend = (int)(positions[i] & 0xFFFFFFFF);", "-\t\t\tnewPart.setSourceRange(start,  end - start + 1);", "-\t\t\tqualifiedName = this.ast.newQualifiedName(qualifiedName, newPart);", "-\t\t\tqualifiedName.index = newPart.index;", "-\t\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "-\t\t\tif (this.resolveBindings) {", "-\t\t\t\trecordNodes(qualifiedName, node);", "-\t\t\t\trecordNodes(newPart, node);\t\t\t\t", "-\t\t\t\trecordPendingNameScopeResolution(qualifiedName);", "-\t\t\t\trecordPendingNameScopeResolution(newPart);", "-\t\t\t}", "-\t\t}", "-\t\tQualifiedName name = qualifiedName;", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(name, node);", "-\t\t\trecordPendingNameScopeResolution(name);", "-\t\t}", "-\t\treturn name;", "-\t}", "+", "+\tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {", "+\t\tint length = typeName.length;", "+\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));", "+\t\tfirstToken.index = length - 1;", "+\t\tint start0 = (int)(positions[0]>>>32);", "+\t\tint start = start0;", "+\t\tint end = (int)(positions[0] & 0xFFFFFFFF);", "+\t\tfirstToken.setSourceRange(start, end - start + 1);", "+\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));", "+\t\tsecondToken.index = length - 2;", "+\t\tstart = (int)(positions[1]>>>32);", "+\t\tend = (int)(positions[1] & 0xFFFFFFFF);", "+\t\tsecondToken.setSourceRange(start, end - start + 1);", "+\t\tQualifiedName qualifiedName = this.ast.newQualifiedName(firstToken, secondToken);", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(qualifiedName, node);", "+\t\t\trecordPendingNameScopeResolution(qualifiedName);", "+\t\t\trecordNodes(firstToken, node);", "+\t\t\trecordNodes(secondToken, node);", "+\t\t\trecordPendingNameScopeResolution(firstToken);", "+\t\t\trecordPendingNameScopeResolution(secondToken);", "+\t\t}", "+\t\tqualifiedName.index = length - 2;", "+\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "+\t\tSimpleName newPart = null;", "+\t\tfor (int i = 2; i < length; i++) {", "+\t\t\tnewPart = this.ast.newSimpleName(new String(typeName[i]));", "+\t\t\tnewPart.index = length - i - 1;", "+\t\t\tstart = (int)(positions[i]>>>32);", "+\t\t\tend = (int)(positions[i] & 0xFFFFFFFF);", "+\t\t\tnewPart.setSourceRange(start,  end - start + 1);", "+\t\t\tqualifiedName = this.ast.newQualifiedName(qualifiedName, newPart);", "+\t\t\tqualifiedName.index = newPart.index;", "+\t\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\trecordNodes(qualifiedName, node);", "+\t\t\t\trecordNodes(newPart, node);\t\t\t\t", "+\t\t\t\trecordPendingNameScopeResolution(qualifiedName);", "+\t\t\t\trecordPendingNameScopeResolution(newPart);", "+\t\t\t}", "+\t\t}", "+\t\tQualifiedName name = qualifiedName;", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(name, node);", "+\t\t\trecordPendingNameScopeResolution(name);", "+\t\t}", "+\t\treturn name;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbf89a3382d30c48dcb554788b5a990e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "f6d17bf597fd0ef9887d709f5d952b16020dad69", "commitAfterChange": "b0bfa6fe70ef1703e5c92b55f49636bcaa6a516b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  void write(DataOutputStream out) throws IOException", "signatureAfterChange": "  void write(DataOutputStream out) throws IOException", "diff": ["- * byte\t\t\tVERSION", "+ * byte\t\tVERSION", "- * int\t\t\t\tbuild number", "- * int\t\t\t\tlast structural build number", "+ * int\t\t\tbuild number", "+ * int\t\t\tlast structural build number", "- * int\t\t\t\tid", "+ * int\t\t\tid", "- * int\t\t\t\tid", "+ * int\t\t\tid", "- * int\t\t\t\tlast structural build number", "+ * int\t\t\tlast structural build number", "- * String[]\t\tInterned type locators", "+ * String[]\tInterned type locators", "-\tArrayList internedTypeLocators = new ArrayList(length);", "+\tSimpleLookupTable internedTypeLocators = new SimpleLookupTable(length);", "-\t\t\t\tinternedTypeLocators.add(key);", "+\t\t\t\tinternedTypeLocators.put(key, new Integer(internedTypeLocators.elementSize));", "- * int\t\t\t\tinterned locator id", "+ * int\t\t\tinterned locator id", "-\t\t\t\tout.writeInt(internedTypeLocators.indexOf(valueTable[i]));", "+\t\t\t\tInteger index = (Integer) internedTypeLocators.get(valueTable[i]);", "+\t\t\t\tout.writeInt(index.intValue());", "- * char[][]\t\tInterned simple names", "+ * char[][]\tInterned simple names", "-\tArrayList internedQualifiedNames = new ArrayList(31);", "-\tArrayList internedSimpleNames = new ArrayList(31);", "+\tSimpleLookupTable internedQualifiedNames = new SimpleLookupTable(31);", "+\tSimpleLookupTable internedSimpleNames = new SimpleLookupTable(31);", "-\t\t\t\tif (!internedQualifiedNames.contains(qName)) { // remember the names have been interned", "-\t\t\t\t\tinternedQualifiedNames.add(qName);", "+\t\t\t\tif (!internedQualifiedNames.containsKey(qName)) { // remember the names have been interned", "+\t\t\t\t\tinternedQualifiedNames.put(qName, new Integer(internedQualifiedNames.elementSize));", "-\t\t\t\t\t\tif (!internedSimpleNames.contains(sName)) // remember the names have been interned", "-\t\t\t\t\t\t\tinternedSimpleNames.add(sName);", "+\t\t\t\t\t\tif (!internedSimpleNames.containsKey(sName)) // remember the names have been interned", "+\t\t\t\t\t\t\tinternedSimpleNames.put(sName, new Integer(internedSimpleNames.elementSize));", "-\t\t\t\tif (!internedSimpleNames.contains(sName)) // remember the names have been interned", "-\t\t\t\t\tinternedSimpleNames.add(sName);", "+\t\t\t\tif (!internedSimpleNames.containsKey(sName)) // remember the names have been interned", "+\t\t\t\t\tinternedSimpleNames.put(sName, new Integer(internedSimpleNames.elementSize));", "-\tchar[][] internedArray = new char[internedSimpleNames.size()][];", "-\tinternedSimpleNames.toArray(internedArray);", "+\tchar[][] internedArray = new char[internedSimpleNames.elementSize][];", "+\tObject[] simpleNames = internedSimpleNames.keyTable;", "+\tObject[] positions = internedSimpleNames.valueTable;", "+\tfor (int i = positions.length; --i >= 0; ) {", "+\t\tif (positions[i] != null) {", "+\t\t\tint index = ((Integer) positions[i]).intValue();", "+\t\t\tinternedArray[index] = (char[]) simpleNames[i];", "+\t\t}", "+\t}", "-\tout.writeInt(length = internedQualifiedNames.size());", "+\tchar[][][] internedQArray = new char[internedQualifiedNames.elementSize][][];", "+\tObject[] qualifiedNames = internedQualifiedNames.keyTable;", "+\tpositions = internedQualifiedNames.valueTable;", "+\tfor (int i = positions.length; --i >= 0; ) {", "+\t\tif (positions[i] != null) {", "+\t\t\tint index = ((Integer) positions[i]).intValue();", "+\t\t\tinternedQArray[index] = (char[][]) qualifiedNames[i];", "+\t\t}", "+\t}", "+\tout.writeInt(length = internedQArray.length);", "-\t\tchar[][] qName = (char[][]) internedQualifiedNames.get(i);", "+\t\tchar[][] qName = internedQArray[i];", "-\t\tfor (int j = 0; j < qLength; j++)", "-\t\t\tout.writeInt(internedSimpleNames.indexOf(qName[j]));", "+\t\tfor (int j = 0; j < qLength; j++) {", "+\t\t\tInteger index = (Integer) internedSimpleNames.get(qName[j]);", "+\t\t\tout.writeInt(index.intValue());", "+\t\t}", "- * int\t\t\tinterned locator id", "+ * int\t\tinterned locator id", "-\t\t\t\tout.writeInt(internedTypeLocators.indexOf(keyTable[i]));", "+\t\t\t\tInteger index = (Integer) internedTypeLocators.get(keyTable[i]);", "+\t\t\t\tout.writeInt(index.intValue());", "-\t\t\t\tfor (int j = 0; j < qLength; j++)", "-\t\t\t\t\tout.writeInt(internedQualifiedNames.indexOf(qNames[j]));", "+\t\t\t\tfor (int j = 0; j < qLength; j++) {", "+\t\t\t\t\tindex = (Integer) internedQualifiedNames.get(qNames[j]);", "+\t\t\t\t\tout.writeInt(index.intValue());", "+\t\t\t\t}", "-\t\t\t\tfor (int j = 0; j < sLength; j++)", "-\t\t\t\t\tout.writeInt(internedSimpleNames.indexOf(sNames[j]));", "+\t\t\t\tfor (int j = 0; j < sLength; j++) {", "+\t\t\t\t\tindex = (Integer) internedSimpleNames.get(sNames[j]);", "+\t\t\t\t\tout.writeInt(index.intValue());", "+\t\t\t\t}"]}], "num": 4853}
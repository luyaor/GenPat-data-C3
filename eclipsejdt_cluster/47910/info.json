{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdad2b2ba3b5007f759128e8f4671b6f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb850d26456ef6111d5b0ba4ecbce7da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "673b7eda95cd26449992e862f0c63f2c612903a0", "commitAfterChange": "b04602938404af4f8569a399fb36a5018768a262", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["+}\r", "+public TypeBinding resolveType(BlockScope scope) {\r", "+\t// for code gen, harm the restrictiveFlag \t\r", "-\tpublic TypeBinding resolveType(BlockScope scope) {\r", "-\t\t// for code gen, harm the restrictiveFlag \t\r", "-\r", "-\t\tif ((binding = scope.getBinding(token, bits & RestrictiveFlagMASK, this))\r", "-\t\t\t.isValidBinding()) {\r", "-\t\t\tswitch (bits & RestrictiveFlagMASK) {\r", "-\t\t\t\tcase VARIABLE : // =========only variable============\r", "-\t\t\t\tcase VARIABLE | TYPE : //====both variable and type============\r", "-\t\t\t\t\tif (binding instanceof VariableBinding) {\r", "-\t\t\t\t\t\tVariableBinding vb = (VariableBinding) binding;\r", "-\t\t\t\t\t\tif (binding instanceof LocalVariableBinding) {\r", "-\t\t\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits\r", "-\t\t\t\t\t\t\tbits |= LOCAL;\r", "-\t\t\t\t\t\t\tconstant = vb.constant;\r", "-\t\t\t\t\t\t\tif ((!vb.isFinal()) && ((bits & DepthMASK) != 0))\r", "-\t\t\t\t\t\t\t\tscope.problemReporter().cannotReferToNonFinalOuterLocal(\r", "-\t\t\t\t\t\t\t\t\t(LocalVariableBinding) vb,\r", "-\t\t\t\t\t\t\t\t\tthis);\r", "-\t\t\t\t\t\t\treturn vb.type;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t// a field\r", "-\t\t\t\t\t\treturn checkFieldAccess(scope);\r", "+\tthis.receiverType = scope.enclosingSourceType();\r", "+\t\r", "+\tif ((binding = scope.getBinding(token, bits & RestrictiveFlagMASK, this)).isValidBinding()) {\r", "+\t\tswitch (bits & RestrictiveFlagMASK) {\r", "+\t\t\tcase VARIABLE : // =========only variable============\r", "+\t\t\tcase VARIABLE | TYPE : //====both variable and type============\r", "+\t\t\t\tif (binding instanceof VariableBinding) {\r", "+\t\t\t\t\tVariableBinding vb = (VariableBinding) binding;\r", "+\t\t\t\t\tif (binding instanceof LocalVariableBinding) {\r", "+\t\t\t\t\t\tbits &= ~RestrictiveFlagMASK;  // clear bits\r", "+\t\t\t\t\t\tbits |= LOCAL;\r", "+\t\t\t\t\t\tconstant = vb.constant;\r", "+\t\t\t\t\t\tif ((!vb.isFinal()) && ((bits & DepthMASK) != 0))\r", "+\t\t\t\t\t\t\tscope.problemReporter().cannotReferToNonFinalOuterLocal((LocalVariableBinding)vb, this);\r", "+\t\t\t\t\t\treturn vb.type;\r", "+\t\t\t\t\t// a field\r", "+\t\t\t\t\treturn checkFieldAccess(scope);\r", "+\t\t\t\t}\r", "-\t\t\t\t\t// thus it was a type\r", "-\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits\r", "-\t\t\t\t\tbits |= TYPE;\r", "-\t\t\t\tcase TYPE : //========only type==============\r", "-\t\t\t\t\tconstant = Constant.NotAConstant;\r", "-\t\t\t\t\t//deprecated test\r", "-\t\t\t\t\tif (isTypeUseDeprecated((TypeBinding) binding, scope))\r", "-\t\t\t\t\t\tscope.problemReporter().deprecatedType((TypeBinding) binding, this);\r", "-\t\t\t\t\treturn (TypeBinding) binding;\r", "-\t\t\t}\r", "+\t\t\t\t// thus it was a type\r", "+\t\t\t\tbits &= ~RestrictiveFlagMASK;  // clear bits\r", "+\t\t\t\tbits |= TYPE;\r", "+\t\t\tcase TYPE : //========only type==============\r", "+\t\t\t\tconstant = Constant.NotAConstant;\r", "+\t\t\t\t//deprecated test\r", "+\t\t\t\tif (isTypeUseDeprecated((TypeBinding) binding, scope))\r", "+\t\t\t\t\tscope.problemReporter().deprecatedType((TypeBinding) binding, this);\r", "+\t\t\t\treturn (TypeBinding) binding;\r", "-\r", "-\t\t// error scenarii\r", "-\t\treturn this.reportError(scope);\r", "+\t// error scenarii\r", "+\treturn this.reportError(scope);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e74c17ace25662304b61aba590df2e86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "673b7eda95cd26449992e862f0c63f2c612903a0", "commitAfterChange": "b04602938404af4f8569a399fb36a5018768a262", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["+}\r", "+public TypeBinding resolveType(BlockScope scope) {\r", "+\t// field and/or local are done before type lookups\r", "+\t// the only available value for the restrictiveFlag BEFORE\r", "+\t// the TC is Flag_Type Flag_LocalField and Flag_TypeLocalField \r", "+\tthis.receiverType = scope.enclosingSourceType();\r", "+\t\r", "+\tconstant = Constant.NotAConstant;\r", "+\tif ((binding = scope.getBinding(tokens, bits & RestrictiveFlagMASK, this)).isValidBinding()) {\r", "+\t\tswitch (bits & RestrictiveFlagMASK) {\r", "+\t\t\tcase VARIABLE : //============only variable===========\r", "+\t\t\tcase TYPE | VARIABLE :\r", "+\t\t\t\tif (binding instanceof LocalVariableBinding) {\r", "+\t\t\t\t\tif (!((LocalVariableBinding) binding).isFinal() && ((bits & DepthMASK) != 0))\r", "+\t\t\t\t\t\tscope.problemReporter().cannotReferToNonFinalOuterLocal((LocalVariableBinding) binding, this);\r", "+\t\t\t\t\tbits &= ~RestrictiveFlagMASK;  // clear bits\r", "+\t\t\t\t\tbits |= LOCAL;\r", "+\t\t\t\t\treturn getOtherFieldBindings(scope);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (binding instanceof FieldBinding) {\r", "+\t\t\t\t\t// check for forward references\r", "+\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;\r", "+\t\t\t\t\tMethodScope methodScope = scope.methodScope() ;\r", "+\t\t\t\t\tif (methodScope.enclosingSourceType() == fieldBinding.declaringClass\r", "+\t\t\t\t\t\t&& methodScope.fieldDeclarationIndex != methodScope.NotInFieldDecl\r", "+\t\t\t\t\t\t&& fieldBinding.id >= methodScope.fieldDeclarationIndex) {\r", "+\t\t\t\t\t\t\tif ((!fieldBinding.isStatic() || methodScope.isStatic) && this.indexOfFirstFieldBinding == 1)\r", "+\t\t\t\t\t\t\t\tscope.problemReporter().forwardReference(this,0,scope.enclosingSourceType());\r", "+\t\t\t\t\t}\t\t\t\t\t\r", "+\t\t\t\t\tbits &= ~RestrictiveFlagMASK;  // clear bits\r", "+\t\t\t\t\tbits |= FIELD;\t\t\t\t\t\r", "+\t\t\t\t\treturn getOtherFieldBindings(scope);\r", "+\t\t\t\t}\r", "+\r", "+\t\t\t\t// thus it was a type\r", "+\t\t\t\tbits &= ~RestrictiveFlagMASK;  // clear bits\r", "+\t\t\t\tbits |= TYPE;\t\t\t\t\r", "+\t\t\tcase TYPE : //=============only type ==============\r", "+\t\t\t\t//deprecated test\r", "+\t\t\t\tif (isTypeUseDeprecated((TypeBinding) binding, scope))\r", "+\t\t\t\t\tscope.problemReporter().deprecatedType((TypeBinding) binding, this);\r", "+\t\t\t\treturn (TypeBinding) binding;\r", "+\t//========error cases===============\r", "+\treturn this.reportError(scope);\r", "+}\r", "-\tpublic TypeBinding resolveType(BlockScope scope) {\r", "-\t\t// field and/or local are done before type lookups\r", "-\r", "-\t\t// the only available value for the restrictiveFlag BEFORE\r", "-\t\t// the TC is Flag_Type Flag_LocalField and Flag_TypeLocalField \r", "-\r", "-\t\tconstant = Constant.NotAConstant;\r", "-\t\tif ((binding = scope.getBinding(tokens, bits & RestrictiveFlagMASK, this))\r", "-\t\t\t.isValidBinding()) {\r", "-\t\t\tswitch (bits & RestrictiveFlagMASK) {\r", "-\t\t\t\tcase VARIABLE : //============only variable===========\r", "-\t\t\t\tcase TYPE | VARIABLE :\r", "-\t\t\t\t\tif (binding instanceof LocalVariableBinding) {\r", "-\t\t\t\t\t\tif (!((LocalVariableBinding) binding).isFinal() && ((bits & DepthMASK) != 0))\r", "-\t\t\t\t\t\t\tscope.problemReporter().cannotReferToNonFinalOuterLocal(\r", "-\t\t\t\t\t\t\t\t(LocalVariableBinding) binding,\r", "-\t\t\t\t\t\t\t\tthis);\r", "-\t\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits\r", "-\t\t\t\t\t\tbits |= LOCAL;\r", "-\t\t\t\t\t\treturn getOtherFieldBindings(scope);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (binding instanceof FieldBinding) {\r", "-\t\t\t\t\t\t// check for forward references\r", "-\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;\r", "-\t\t\t\t\t\tMethodScope methodScope = scope.methodScope();\r", "-\t\t\t\t\t\tif (methodScope.enclosingSourceType() == fieldBinding.declaringClass\r", "-\t\t\t\t\t\t\t&& methodScope.fieldDeclarationIndex != methodScope.NotInFieldDecl\r", "-\t\t\t\t\t\t\t&& fieldBinding.id >= methodScope.fieldDeclarationIndex) {\r", "-\t\t\t\t\t\t\tif ((!fieldBinding.isStatic() || methodScope.isStatic)\r", "-\t\t\t\t\t\t\t\t&& this.indexOfFirstFieldBinding == 1)\r", "-\t\t\t\t\t\t\t\tscope.problemReporter().forwardReference(this, 0, scope.enclosingSourceType());\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits\r", "-\t\t\t\t\t\tbits |= FIELD;\r", "-\t\t\t\t\t\treturn getOtherFieldBindings(scope);\r", "-\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t// thus it was a type\r", "-\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits\r", "-\t\t\t\t\tbits |= TYPE;\r", "-\t\t\t\tcase TYPE : //=============only type ==============\r", "-\t\t\t\t\t//deprecated test\r", "-\t\t\t\t\tif (isTypeUseDeprecated((TypeBinding) binding, scope))\r", "-\t\t\t\t\t\tscope.problemReporter().deprecatedType((TypeBinding) binding, this);\r", "-\t\t\t\t\treturn (TypeBinding) binding;\r", "-\t\t\t}\r", "-\r", "-\t\t//========error cases===============\r", "-\t\treturn this.reportError(scope);\r"]}], "num": 47910}
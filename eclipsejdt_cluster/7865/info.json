{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6151a318a2c7fdaac841a6ff5149a6ce", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ed1445c437efba0407e4a7c51b15a3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta, HashSet affectedProjects, Map preferredClasspaths, Map preferredOutputs)", "signatureAfterChange": "  \tprivate void validateClasspaths(IResourceDelta delta, HashSet affectedProjects)", "diff": ["-\t */", "-\tprivate void updateClasspathMarkers(IResourceDelta delta, HashSet affectedProjects, Map preferredClasspaths, Map preferredOutputs) {", "+\tprivate void validateClasspaths(IResourceDelta delta, HashSet affectedProjects) {", "-", "-\t", "-\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs); // in case .classpath got modified while closed", "+\t\t\t\t\t\t\t\tthis.state.addClasspathValidation(javaProject); // in case .classpath got modified while closed", "-\t\t\t\t\t\t\t\taffectedProjects.add(project.getFullPath());", "-\t\t\t\t\t\t\t\t// flush classpath markers", "-\t\t\t\t\t\t\t\tjavaProject.", "-\t\t\t\t\t\t\t\t\tflushClasspathProblemMarkers(", "-\t\t\t\t\t\t\t\t\t\ttrue, // flush cycle markers", "-\t\t\t\t\t\t\t\t\t\ttrue  //flush classpath format markers", "-\t\t\t\t\t\t\t\t\t);", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// remove problems and tasks created  by the builder", "-\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(project);", "+\t\t\t\t\t\t\t\tthis.state.addClasspathValidation(javaProject); ", "+", "+\t\t\t\t\t\t\t\taffectedProjects.add(project.getFullPath());", "+\t\t\t\t\t\t\t} if (isJavaProject) {", "+\t\t\t\t\t\t\t\t// check if all entries exist", "+\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\t\tthis.state.addClasspathValidation(javaProject); ", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\t\t\t\tjavaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, \ttrue/*generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t\t// project doesn't exist: ignore", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\tthis.state.addClasspathValidation(javaProject); ", "-\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs);", "+\t\t\t\t\tthis.state.addClasspathValidation(javaProject); ", "-//\t\t\t\t/* check custom preference file change */", "-//\t\t\t\tif (file.getName().equals(JavaProject.PREF_FILENAME)) {", "-//\t\t\t\t\treconcilePreferenceFileUpdate(delta, file, project);", "-//\t\t\t\t\tbreak;", "-//\t\t\t\t}", "-\t\t\t\tupdateClasspathMarkers(children[i], affectedProjects, preferredClasspaths, preferredOutputs);", "+\t\t\t\tvalidateClasspaths(children[i], affectedProjects);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9dd61a89ba50597f8a1d8b4b70a632a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "87f805fd793e783bd67ef36edfc8fad41ed06bae", "commitAfterChange": "178bf5efb66b2c316a3ccc6fa96731392d0de65d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r private IProject[] getRequiredProjects(boolean includeBinaryPrerequisites)", "signatureAfterChange": "\r private IProject[] getRequiredProjects(boolean includeBinaryPrerequisites)", "diff": ["-\t\t\tif (entry != null && entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {\r", "-\t\t\t\tIProject p = workspaceRoot.getProject(entry.getPath().lastSegment());\r", "+\t\t\tif (entry != null) {\r", "+\t\t\t\tIPath path = entry.getPath();\r", "+\t\t\t\tIProject p = null;\r", "+\t\t\t\tswitch (entry.getEntryKind()) {\r", "+\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :\r", "+\t\t\t\t\t\tp = workspaceRoot.getProject(path.lastSegment());\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :\r", "+\t\t\t\t\t\tif (includeBinaryPrerequisites && path.segmentCount() > 1) {\r", "+\t\t\t\t\t\t\t// some binary resources on the class path can come from projects that are not included in the project references\r", "+\t\t\t\t\t\t\tIResource resource = workspaceRoot.findMember(path.segment(0));\r", "+\t\t\t\t\t\t\tif (resource instanceof IProject)\r", "+\t\t\t\t\t\t\t\tp = (IProject) resource;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t}\r", "-\t\t\t\t\tprojects.add(p);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (includeBinaryPrerequisites && binaryResources != null) {\r", "-\t\t\t// some binary resources on the class path can come from projects that are not included in the project references\r", "-\t\t\tObject[] keyTable = binaryResources.keyTable;\r", "-\t\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "-\t\t\t\tIProject p = (IProject) keyTable[i];\r", "-\t\t\t\tif (p != null && p != currentProject && !projects.contains(p))\r"]}], "num": 7865}
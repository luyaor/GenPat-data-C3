{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba9b1d9d49465e87413c609b7e1901e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "001a4375e094ea5621d00514a1000cea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void test102()", "signatureAfterChange": " public void test102()", "diff": ["-\t\t\"The field A.B.length is never read locally\\n\" + ", "+\t\t\"The value of the field A.B.length is not used\\n\" + ", "-\t\t\"The field A.B is never read locally\\n\" + ", "+\t\t\"The value of the field A.B is not used\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "001a5ac707d33f9b7c3e199ccbe04154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 295, "methodNumberAfterChange": 295, "signatureBeforeChange": " public void testBug330313_wksp1_18_njl()", "signatureAfterChange": " public void testBug330313_wksp1_18_njl()", "diff": ["-\t\t\"\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "-\t\t\"\t\t\t\t\to.bodyDeclarations()));\\n\" + ", "+\t\t\"\t\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "+\t\t\"\t\t\t\t\t\to.bodyDeclarations()));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00367121cf3edf93976963998f93707d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 785, "methodNumberAfterChange": 785, "signatureBeforeChange": " public void test779()", "signatureAfterChange": " public void test779()", "diff": ["-\t\t\t\"  // Method descriptor #29 (I)Ljava/lang/Object;\\n\" + ", "-\t\t\t\"  // Stack: 2, Locals: 2\\n\" + ", "-\t\t\t\"  public bridge synthetic Object get(int arg);\\n\" + ", "-\t\t\t\"    0  aload_0\\n\" + ", "-\t\t\t\"    1  iload_1\\n\" + ", "-\t\t\t\"    2  invokevirtual X$1.get(int) : java.lang.String  [37]\\n\" + ", "-\t\t\t\"    5  areturn\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 1]\\n\";", "+\t\t\"  // Method descriptor #31 (I)Ljava/lang/Object;\\n\" + ", "+\t\t\"  // Stack: 2, Locals: 2\\n\" + ", "+\t\t\"  public bridge synthetic Object get(int arg);\\n\" + ", "+\t\t\"    0  aload_0\\n\" + ", "+\t\t\"    1  iload_1\\n\" + ", "+\t\t\"    2  invokevirtual X$1.get(int) : java.lang.String [36]\\n\" + ", "+\t\t\"    5  areturn\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 1]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0061a0026f817688a4b73673db57310f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "031774399eed50847f433b5425b7551aed0c6cbc", "commitAfterChange": "30ba2db951e79b89a330e1209e461b1c083d6de3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\t\t\t\t\t\"    ActionListener al = (public xyz) -> System.out.println(e); \\n\" +", "+\t\t\t\t\t\"    ActionListener al = (public xyz) -> System.out.println(xyz); \\n\" +", "-\t\t\t\t\"\tActionListener al = (public xyz) -> System.out.println(e); \\n\" + ", "+\t\t\t\t\"\tActionListener al = (public xyz) -> System.out.println(xyz); \\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00662f3c5ceebd21e90473278eb6bccc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "d9f5208ccd9842b7305a76e615fa0b04487a1a33", "commitAfterChange": "9ac3d3205dd69d72df25a75c1584224d5519622d", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test016() throws CoreException", "signatureAfterChange": " public void test016() throws CoreException", "diff": ["-\t\t\t\"   } \\n\" + ", "+\t\t\t\"   }\\n\" + ", "-\t\t\t\"   } \\n\" + ", "+\t\t\t\"   }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0072d25c9a263060dea23ac3372bf47f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6e1daeed1b338c470552c705d4bce7d654dc9164", "commitAfterChange": "284c289846ff27fe8fc104da5e422fc3fb8c5d90", "methodNumberBeforeChange": 796, "methodNumberAfterChange": 796, "signatureBeforeChange": " public void test790()", "signatureAfterChange": " public void test790()", "diff": ["-\t\t\"Bound mismatch: The generic method isGreater(T, T) of type X is not applicable for the arguments (Number&Comparable<?>, Number&Comparable<?>) since the type Number&Comparable<?> is not a valid substitute for the bounded parameter <T extends Comparable<T>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method isGreater(T, T) of type X is not applicable for the arguments (Integer, Double). The inferred type Number&Comparable<?> is not a valid substitute for the bounded parameter <T extends Comparable<T>>\\n\" + ", "-\t\t\"Bound mismatch: The generic method isGreater(T, T) of type X is not applicable for the arguments (Comparable<? extends Number>, Comparable<? extends Number>) since the type Comparable<? extends Number> is not a valid substitute for the bounded parameter <T extends Comparable<T>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method isGreater(T, T) of type X is not applicable for the arguments (Comparable<capture-of ? extends Number>, Comparable<capture-of ? extends Number>). The inferred type Comparable<? extends Number> is not a valid substitute for the bounded parameter <T extends Comparable<T>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "007416a8c13e1c0dd31981b95901f3d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "68f185fc63132d7b106a1c7ca52ed6d004b96329", "commitAfterChange": "4a85a8ee613913420acf3dde5af380e91d3bad2c", "methodNumberBeforeChange": 245, "methodNumberAfterChange": 245, "signatureBeforeChange": " public void test425512() throws Exception", "signatureAfterChange": " public void test425512() throws Exception", "diff": ["-\t\t\"\t                     ^^^\\n\" + ", "-\t\t\"Impossible interface for array type\\n\" + ", "+\t\t\"\t            ^^^^^^\\n\" + ", "+\t\t\"Arrays are not allowed in intersection cast operator\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "009dbad59d95e2e2fbdc803f03a3e808", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testBug80194string2() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80194string2() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00c57152bc3940a0b4b9da410e26444f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "87035e28d15718dec923cda9730195aba7b8ab31", "commitAfterChange": "d7e74f0817baa712407da5eb003f21f0a3eeda6d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003()", "diff": ["+\t\tassertBindingKeySignatureEquals(", "+\t\t\t\"LClazz;\",", "+\t\t\t\"LClazz;\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00cc8260b8f632b4ac6972817b390026", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 89, "signatureBeforeChange": " \tpublic void testBug83304_MethodGenericElementPattern() throws CoreException", "signatureAfterChange": " \tpublic void testBug83304_MethodGenericElementPattern() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e7b4c117dca121d0bf0cc48e0523a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 130, "signatureBeforeChange": " \tpublic void testBug92944_CLASS_AND_INTERFACE() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_CLASS_AND_INTERFACE() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00f62192d75f7d7333899f60507b0d02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " public void test070() throws JavaModelException", "signatureAfterChange": " public void test070() throws JavaModelException", "diff": ["-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class) }, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns() }, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\"", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class)}, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0118f3c41f9e06eb2c04201de259538f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments07() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments07() throws CoreException", "diff": ["-\t\tsearch(\"generic(Exception) % <Exception>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<Exception> generic ( Exception ) \", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [generic(new Exception())] EXACT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [<Exception>generic(new Exception())] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "013075b50d25f9c23fb43ef3b4d9fcbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "badff9a93fec2ed67e9ce195f8709b06674bcf81", "commitAfterChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void test005()", "signatureAfterChange": "  \tpublic void test005()", "diff": ["-\t\t\t\"\t                                      ^^^^^\\n\" + ", "+\t\t\t\"\t                                    ^\\n\" + ", "-\t\t\t\"\t                                             ^^^^^\\n\" + ", "+\t\t\t\"\t                                           ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01382172599254a1dd8507b261973e32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testDeleteSyntaxErrorInMethod2() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorInMethod2() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0193df4b8a91acbfe2c546810489d9d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "8ca64d051cb2b705e931d512b7e8165159874636", "commitAfterChange": "fb2f69442af38478fd737734fbf56ae45623c81f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test0026()", "signatureAfterChange": " public void test0026()", "diff": ["-\texpectedCompletionNodeToString = \"<CompleteOnName:cas>\";", "+\texpectedCompletionNodeToString = \"<CompleteOnKeyword:cas>\";", "-\t\t\"    <CompleteOnName:cas>;\\n\" +", "+\t\t\"    <CompleteOnKeyword:cas>;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01988febb527f9afbc29d8a2e37c7f66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["-\t\t\t\"        [pc: 0, pc: 3] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 3] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 3] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 3] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01a2b04f6fc2fc5757d75f8ca2386274", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LineNumberAttributeTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void test001() throws Exception", "signatureAfterChange": " public void test001() throws Exception", "diff": ["-\t\t\"        [pc: 46, line: 18]\\n\" +", "+\t\t\"        [pc: 43, line: 18]\\n\" +", "-\t\t\"        [pc: 23, pc: 46] local: x index: 1 type: X\\n\" +", "+\t\t\"        [pc: 23, pc: 43] local: x index: 1 type: X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e4e8c54610191051ee9f95a6c47b35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void test12() throws JavaModelException", "signatureAfterChange": "  \tpublic void test12() throws JavaModelException", "diff": ["-\t\t\t\"RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "-\t\t\t\"InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\\n\" + ", "+\t\t\t\"InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01f864d0896093cfbe706d956b215a77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/valueconversion/ValueConversionProcessor.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate void assertValueTypeMatch( \t\t\tfinal String name,  \t\t\tfinal Object actualValue,  \t\t\tfinal Class<?> expectedType, \t\t\tfinal Object expectedValue)", "signatureAfterChange": " \t \tprivate void assertValueTypeMatch( \t\t\tfinal String name,  \t\t\tfinal Object actualValue,  \t\t\tfinal Class<?> expectedType, \t\t\tfinal Object expectedValue)", "diff": ["-\t\t\tmsgr.printError(\"type mismatch for memeber \" + name + ", "+\t\t\tmsgr.printError(\"type mismatch for member \" + name + ", "-\t\t\tmsgr.printError(\"value mismatch for memeber \" + name + ", "+\t\t\tmsgr.printError(\"value mismatch for member \" + name + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02009c7eb9c9033b9c414391d61a04d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocFieldCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void test006() throws JavaModelException", "signatureAfterChange": "  public void test006() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02105b2c0abc21dede386d2d31276c09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "2fdd800912ee4f65c51a2ec384533d1146c71af7", "commitAfterChange": "844f82aaef831e55c4827a65ccd98caed0cd08f3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void test018()", "signatureAfterChange": " \tpublic void test018()", "diff": ["-\t\t\t\"The field b is not visible\\n\" + ", "+\t\t\t\"The field C.b is not visible\\n\" + ", "-\t\t\t\"The private field C.b is never read locally\\n\" + ", "+\t\t\t\"The field C.b is never read locally\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0297afcbc6f91755a60bdbe0c3b2150b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testBug80194string3() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80194string3() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02f710748f25d22d90daa8f00fa50a97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test034()", "signatureAfterChange": " \tpublic void test034()", "diff": ["-\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03280a0c3c24afd98e6ed9dc144bd5fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "87035e28d15718dec923cda9730195aba7b8ab31", "commitAfterChange": "d7e74f0817baa712407da5eb003f21f0a3eeda6d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["+\tpublic void test006() {", "-\tpublic void test006() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "033caf30a1f39b1e7022d914709cc0b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "c7e3aef21df3f0591914a420ab0b19c71702bf3d", "commitAfterChange": "dd795140f54bc6376ae5e7285597e4329da70b68", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic void test079()", "signatureAfterChange": " \tpublic void test079()", "diff": ["-\t\t\t\"  public static final strictfp X[] values();\\n\",", "-\t\t\t\"  public static final strictfp X valueOf(java.lang.String arg0);\\n\"", "+\t\t\t\"  public static strictfp X[] values();\\n\",", "+\t\t\t\"  public static strictfp X valueOf(java.lang.String arg0);\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "033e7ea51689770467c7e1e69dfa9e8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void testMethodDeclarationInHierarchyScope1() throws CoreException", "signatureAfterChange": " public void testMethodDeclarationInHierarchyScope1() throws CoreException", "diff": ["-\t\t\"src/p/X.java p.X.foo(int, String, X) -> void [foo]\\n\" +", "-\t\t\"src/p/Z.java p.Z.foo(int, String, X) -> void [foo]\", ", "+\t\t\"src/p/X.java void p.X.foo(int, String, X) [foo]\\n\" + ", "+\t\t\"src/p/Z.java void p.Z.foo(int, String, X) [foo]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03921cad837ff9801ad9766566f76134", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "b7259e61ad84f1dda95b63bf74b4b4f38727c3a6", "commitAfterChange": "db331d5badcb0b35069c87387ccad89f9c226a52", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 212, "signatureBeforeChange": " public void testBug260381_wksp2_06() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_06() throws JavaModelException", "diff": ["-\t\t\"\t * {@code addAll(Collections.nCopies(element, occurrences))}, which would\\n\" + ", "-\t\t\"\t * presumably perform much more poorly.\\n\" + ", "+\t\t\"\t * {@code addAll(Collections.nCopies(element,\\n\" + ", "+\t\t\"\t * occurrences))}, which would presumably perform much more poorly.\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03d66e25f8a93e36d917a877bb10ffd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "066f1fe71d5d139e5a681c9aeece89fa867b71b7", "commitAfterChange": "39951c3ce9f26380d44e65dd4f0a9c708c89c0d1", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void testEncodeDecodeEntry04()", "signatureAfterChange": " public void testEncodeDecodeEntry04()", "diff": ["-\t\t\"<classpathentry exported=\\\"true\\\" sourcepath=\\\"src.zip\\\" kind=\\\"lib\\\" rootpath=\\\"root\\\" path=\\\"lib.jar\\\">\\n\" + ", "+\t\t\"<classpathentry exported=\\\"true\\\" kind=\\\"lib\\\" path=\\\"lib.jar\\\" rootpath=\\\"root\\\" sourcepath=\\\"src.zip\\\">\\n\" + ", "-\t\t\"\t\t<attribute value=\\\"val1\\\" name=\\\"attr1\\\"/>\\n\" + ", "+\t\t\"\t\t<attribute name=\\\"attr1\\\" value=\\\"val1\\\"/>\\n\" + ", "-\t\t\"</classpathentry>\\n\",\t", "+\t\t\"</classpathentry>\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04292f38d2bb3e7809bd0f4d2f75b426", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " public void test073()", "signatureAfterChange": " public void test073()", "diff": ["-\t\t\"The return types are incompatible for the inherited methods J.a(), I.a()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods I.a(), J.a()\\n\" +", "-\t\t\"The return types are incompatible for the inherited methods I.a(), J.a()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.a(), I.a()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04582ff7d0c0153b167f52504d251715", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test032()", "signatureAfterChange": " \tpublic void test032()", "diff": ["-\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04832fe15c4ad305b19cb560f7c0a739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testDeleteSyntaxErrorInMethod3() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorInMethod3() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04b0229818d5dcc7990c0e8f8e3b2b8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " public void test056x()", "signatureAfterChange": " public void test056x()", "diff": ["-\t\t\"Resource leak: \\'reader\\' is not closed at this location\\n\" +", "+\t\t\"Resource leak: \\\"reader\\\" is not closed at this location\\n\" +", "-\t\t\"Resource leak: \\'reader\\' is never closed\\n\" +", "+\t\t\"Resource leak: \\\"reader\\\" is never closed\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04b5b3fdd54ca059e9018756b5bd224a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "aead974e874b102ec762c40a6c05d7a561535bd7", "commitAfterChange": "5ed07afb542d2d2a0a496e3ab79c15b4c0d21e07", "methodNumberBeforeChange": 239, "methodNumberAfterChange": 239, "signatureBeforeChange": " \tpublic void test091()", "signatureAfterChange": " \tpublic void test091()", "diff": ["-\t\t\t\"Name clash: The method toArray(S[]) of type DataSet<T> has the same erasure as toArray(T[]) of type List<E> but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method toArray(S[]) of type DataSet<T> has the same erasure as toArray(Object[]) of type List but does not override it\\n\" + ", "-\t\t\t\"Name clash: The method toArray(S[]) of type DataSet<T> has the same erasure as toArray(T[]) of type Collection<E> but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method toArray(S[]) of type DataSet<T> has the same erasure as toArray(Object[]) of type Collection but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0505b0ecc4b2791b8a79b0ca96cb71ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void testAnonymousType3() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType3() throws JavaModelException", "diff": ["-\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "052338ce9bf34fec0005ecb0a68613d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void test002() throws Exception", "signatureAfterChange": " \tpublic void test002() throws Exception", "diff": ["-\t\t\t\t\"        [pc: 40, line: 16]\\n\" +", "+\t\t\t\t\"        [pc: 37, line: 16]\\n\" +", "-\t\t\t\t\"        [pc: 12, pc: 40] local: j index: 5 type: int\\n\" +", "+\t\t\t\t\"        [pc: 12, pc: 37] local: j index: 5 type: int\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "057ff0b96ce4a471971415c3ce115e32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void test042()", "signatureAfterChange": " \tpublic void test042()", "diff": ["-\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "059a04304dfc66ce8174d32662ac33d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic void testBug86380_Field() throws CoreException", "signatureAfterChange": " \tpublic void testBug86380_Field() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 2, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 2, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05c549ca3f3bdf9dc37b6a4b960bfacc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 170, "signatureBeforeChange": "\t\t \tpublic void test168()", "signatureAfterChange": "\t\t \tpublic void test168()", "diff": ["-\t\t\t\"Unsafe type operation: Should not invoke the constructor AX(E) of raw type AX. References to generic type AX<E,F> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The constructor AX(Object) belongs to the raw type AX. References to generic type AX<E,F> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type AX to type AX<AX<T,T>,U>. References to generic type AX<E,F> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type AX is converted to AX<AX<T,T>,U>. References to generic type AX<E,F> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d7942f889d55291219c97b1d843ec0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 563, "signatureBeforeChange": " \tpublic void test559()", "signatureAfterChange": " \tpublic void test559()", "diff": ["-\t\t\t\"Type safety: Cell is a raw type. References to generic type Cell<T> should be parameterized\\n\" + ", "+\t\t\t\"Cell is a raw type. References to generic type Cell<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Cell is a raw type. References to generic type Cell<T> should be parameterized\\n\" + ", "+\t\t\t\"Cell is a raw type. References to generic type Cell<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0603fc283f0a9d69b2a4dde9a1b13396", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testBug027079c() throws JavaModelException", "signatureAfterChange": " public void testBug027079c() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t/** formatted comment */\\n\" + ", "-\t\t\"\t\t\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + ", "+\t\t\"\t\t/** formatted comment */\\n\" + ", "+\t\t\"\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06090fdf13050cac054f95e0e8dcb154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b9bb6123c3e4c0567c677af33c7c0e8037ba4975", "commitAfterChange": "4dd974a226271180ff02d909a12722017f80ff3a", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void test070()", "signatureAfterChange": " public void test070()", "diff": ["-\t\t\"The return types are incompatible for the inherited methods A.foo(), B.foo()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods B.foo(), A.foo()\\n\" +", "-\t\t\"The return types are incompatible for the inherited methods B.foo(), A.foo()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods A.foo(), B.foo()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0626987b1f3f0ba285e63a7e507c8e33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "f08e2fcfb74b9a513988b6c92b3d0f1c94eb6ecf", "commitAfterChange": "c35e0ba6a6bce7272fb4c8d0b339e50b59e7d2a3", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void testRenameWithSyntaxError() throws JavaModelException", "signatureAfterChange": " public void testRenameWithSyntaxError() throws JavaModelException", "diff": ["-\t\t\"\tbar[+]: {}\\n\" + ", "-\t\t\"\tfoo[-]: {}\"", "+\t\t\"\tbar()[+]: {}\\n\" + ", "+\t\t\"\tfoo()[-]: {}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "067775f0cd967228fef22962f03a5bdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 295, "methodNumberAfterChange": 295, "signatureBeforeChange": " public void testBug330313_wksp1_18_njl()", "signatureAfterChange": " public void testBug330313_wksp1_18_njl()", "diff": ["-\t\t\"\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "-\t\t\"\t\t\t\t\to.bodyDeclarations()));\\n\" + ", "+\t\t\"\t\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "+\t\t\"\t\t\t\t\t\to.bodyDeclarations()));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06851092aabd1e595102f3bacf235353", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NamingConventionTests.java", "commitBeforeChange": "8bd886e250da1d7ba05246af4bcb8cd1f0eb1b1d", "commitAfterChange": "f24a77ad357e70fcffddb8d1e5ab0bdc69ca2a2a", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void testSuggestGetterName008()", "signatureAfterChange": " public void testSuggestGetterName008()", "diff": ["-\t\t\"\ufffdfield\".toCharArray(), //$NON-NLS-1$", "+\t\t\"\u00e9field\".toCharArray(), //$NON-NLS-1$", "-\t\t\"get\ufffdfield\", //$NON-NLS-1$", "+\t\t\"get\u00c9field\", //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c532052ceb12215559bb488acf5ee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void test026()", "signatureAfterChange": " public void test026()", "diff": ["-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 6, pc: 21] local: i index: 0 type: I\\n\" + ", "-\t\t\t\"        [pc: 16, pc: 20] local: e index: 1 type: Ljava/lang/Throwable;\\n\";", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 6, pc: 21] local: i index: 0 type: int\\n\" + ", "+\t\t\"        [pc: 16, pc: 20] local: e index: 1 type: java.lang.Throwable\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06e63411d326948c8ca04de11f491c9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 403, "methodNumberAfterChange": 403, "signatureBeforeChange": " public void testBug375366c() throws IOException", "signatureAfterChange": " public void testBug375366c() throws IOException", "diff": ["-\t\t\t\"Missing nullable annotation: inherited method from X declares this parameter as @Nullable\\n\" + ", "+\t\t\t\"Missing nullable annotation: inherited method from X specifies this parameter as @Nullable\\n\" + ", "-\t\t\t\"Missing non-null annotation: inherited method from X declares this parameter as @NonNull\\n\" +", "+\t\t\t\"Missing non-null annotation: inherited method from X specifies this parameter as @NonNull\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0722fca996ccd3c10dd6561611126520", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " public void test_nonnull_return_014()", "signatureAfterChange": " public void test_nonnull_return_014()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value can be null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is inferred as @Nullable\\n\" + ", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value can be null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is inferred as @Nullable\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07439148d054825ef123db9851910f43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " public void testPB()", "signatureAfterChange": " public void testPB()", "diff": ["-\t\t\"          };\\n\" + ", "+\t\t\"          }\\n\" + ", "-\t\t\"    };\\n\" + ", "+\t\t\"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "074433f785a09820a7128adfe9549b17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "7a885694a78769fcc7c5da20228a2a64f2be7f4a", "commitAfterChange": "ff74276c8baa5dd1b97f048c2d579d65811daf6a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tpublic void fire()", "signatureAfterChange": "\r \tpublic void fire()", "diff": ["-\t\t\t\t\t\tSystem.out.println(\"FIRING Delta (\"+ Thread.currentThread()+\"):\"+ delta);//$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\t\t\t\tSystem.out.println(\"FIRING Delta [\"+Thread.currentThread()+\"]:\\n\" + delta);//$NON-NLS-1$//$NON-NLS-2$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0762f2b583889f2e969900e0193e4fb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": " public void testBug212599() throws CoreException", "signatureAfterChange": " public void testBug212599() throws CoreException", "diff": ["-\t\t\"src/Ref.java Ref Ref.foo() [\tpublic \ufffd|Ref|\ufffd foo() {@46] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Ref Test.bar() [\t\ufffd|Ref|\ufffd bar() {@100] EXACT_MATCH\"", "+\t\t\"src/Ref.java Ref Ref.foo() [\tpublic !|Ref|! foo() {@46] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Ref Test.bar() [\t!|Ref|! bar() {@100] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07ab6d76ff0f4ac830e73b977d1536f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d53835fbcb5535de123ca93c273d07ecdeb87abc", "commitAfterChange": "19110d19d788201e42baa0e6fca2d157b16d02af", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " public void test0525_try_finally_unchecked_exception()", "signatureAfterChange": " public void test0525_try_finally_unchecked_exception()", "diff": ["-\t\t\"1. ERROR in X.java (at line 13)\\r\\n\" +", "-\t\t\"\to.toString();\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 13)\\n\" +", "+\t\t\"\to.toString();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07bf4856a94af9c21a60a5ae04c45c95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestForInterface.java", "commitBeforeChange": "1dae9bed0f28b20df545c773f52fb80596048ada", "commitAfterChange": "73e6c55b6cebcb032c8128286708483f86167b64", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic void test044()", "signatureAfterChange": "  \tpublic void test044()", "diff": ["-\t\t\t\t+ \"\t               ^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                           ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                             ^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "082e7a76ba433556a300a275de041aa4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 215, "signatureBeforeChange": " \tpublic void test0214() throws JavaModelException", "signatureAfterChange": " \tpublic void test0214() throws JavaModelException", "diff": ["-\t\tString expectedContents = \"public class Test {\\r\\n\" +//$NON-NLS-1$", "-\t\t\t\"  int i;\\r\\n\"  +//$NON-NLS-1$", "+\t\tString expectedContents = \"public class Test {\\n\" +//$NON-NLS-1$", "+\t\t\t\"  int i;\\n\"  +//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "084a1c0dcfd7a71cfcd590ca3a311b48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test049() throws Exception", "signatureAfterChange": " public void test049() throws Exception", "diff": ["-\t\t\t\"        [pc: 36, line: 49]\\n\" +", "+\t\t\t\"        [pc: 36, line: 51]\\n\" +", "-\t\t\t\"        [pc: 36, line: 49]\\n\" +", "+\t\t\t\"        [pc: 36, line: 51]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0879df2b658eca54ce367d806fd6ebf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug101283d()", "signatureAfterChange": " \tpublic void testBug101283d()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08f294e4c536ffa20e51570213cbcf90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "1ab17a7eba14d35875267cc7b416da000a14dc1e", "commitAfterChange": "82adc87bce1ed4088802638154568eeec8ab8e88", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testCompatibility6()", "signatureAfterChange": " \tpublic void testCompatibility6()", "diff": ["-\t\t\t\t\"\tvoid foo(X<Object> x) {\\n\" + ", "+\t\t\t\t\"\tvoid foo(X<@Nullable Object> x) {\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'Map<@Nullable String,@NonNull Object>\\' but this expression has type \\'X<Object>\\', corresponding supertype is \\'Map<@Nullable String,@Nullable Object>\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'Map<@Nullable String,@NonNull Object>\\' but this expression has type \\'X<@Nullable Object>\\', corresponding supertype is \\'Map<@Nullable String,@Nullable Object>\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "092ca881b548374beb14e64a642b4de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f41df9b6ac9b62f616470e8ec0968732d823137f", "commitAfterChange": "2f379667b4f33f336f0003d6b2911b5403125b74", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tpublic void test100()", "signatureAfterChange": " \tpublic void test100()", "diff": ["-\t\t\t\"\t                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The constructor X(? extends AX) of type X<? extends AX> is not applicable for the arguments (AX<String>). The wildcard parameter ? extends AX has no lower bound, and may actually be more restrictive than argument AX<String>\\n\" + ", "-\t\t\t\"----------\\n\");\t\t", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"Cannot instantiate the type X<? extends AX>\\n\" + ", "+\t\t\t\"----------\\n\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "094e7dbb5137266cc9e41622d1689dd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "33070dd65248032bf868ef46597e20a0b147cc6d", "commitAfterChange": "82daf6d6a8a37bf14ad5d6b147f58afbb27df25a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tpublic synchronized void request(IJob job)", "signatureAfterChange": " \t \tpublic synchronized void request(IJob job)", "diff": ["-\t\t\t\tJobManager.verbose(\"ABORTED requested job - \" + job); //$NON-NLS-1$", "+\t\t\t\tJobManager.verbose(\"ABORTED request of background job - \" + job); //$NON-NLS-1$", "-\t\t\tJobManager.verbose(\"REQUESTING job - \" + job); //$NON-NLS-1$", "+\t\t\tJobManager.verbose(\"REQUEST   background job - \" + job); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09798cb81f6b6d540680884f27433d38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RepeatableAnnotationTest.java", "commitBeforeChange": "3c8db8654fc8e2927c75863ec1232c9bc3800c9b", "commitAfterChange": "533660d1560f1a7aff4c5ccabdcd0cb35c0194c1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003()", "diff": ["-\t\t\t\"The repeatable annotation @Foo is disallowed for this location since its container annotation @FooContainer is disallowed at this location\\n\" + ", "+\t\t\t\"The annotation @Foo cannot be repeated at this location since its container annotation type @FooContainer is disallowed at this location\\n\" + ", "-\t\t\t\"The repeatable annotation @Foo is disallowed for this location since its container annotation @FooContainer is disallowed at this location\\n\" + ", "+\t\t\t\"The annotation @Foo cannot be repeated at this location since its container annotation type @FooContainer is disallowed at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09b4cb32a52d429b051dc8813804111d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "be3076081a68f52e55442746b375d20d2f473b0c", "commitAfterChange": "85a51230859ba76a62ce4d566f4cbd47aac06488", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\"Inexact parameter for the vararg constructor Y(boolean, Object[])\\n\" + ", "+\t\t\t\"Inexact argument for the vararg constructor Y(boolean, Object[])\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg constructor Y(char, int[][])\\n\" + ", "+\t\t\t\"Inexact argument for the vararg constructor Y(char, int[][])\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09e081254811b15bd9bfeb4875c527c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "aead974e874b102ec762c40a6c05d7a561535bd7", "commitAfterChange": "5ed07afb542d2d2a0a496e3ab79c15b4c0d21e07", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": " \tpublic void test079()", "signatureAfterChange": " \tpublic void test079()", "diff": ["-\t\t\t\"Name clash: The method x(A<String>) of type B has the same erasure as x(A<String>) of type A<E> but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method x(A<String>) of type B has the same erasure as x(A) of type A but does not override it\\n\" + ", "-\t\t\t\"Name clash: The method x(A<Object>) of type D has the same erasure as x(A<String>) of type A<E> but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method x(A<Object>) of type D has the same erasure as x(A) of type A but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09ff5f5f0ce0eb252f704552e32455ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void test_default_nullness_003a()", "signatureAfterChange": " public void test_default_nullness_003a()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is specified as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is specified as @Nullable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a2f9595b87cfed14fac035196f31eee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " public void testBug311578d() throws JavaModelException", "signatureAfterChange": " public void testBug311578d() throws JavaModelException", "diff": ["-\t\t\"\t//// F--\\n\" + ", "+\t\t\"\t// //F--\\n\" + ", "-\t\t\"\t//// F++\\n\" + ", "+\t\t\"\t// //F++\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b0aad04bfeec4b75bb3d1b2c4e4d2a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [complete(new Exception(), gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [complete(new Exception(), gs)] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [complete(new Exception(), gs)] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [<Exception>complete(new Exception(), gs)] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b4e7719e9f3092996af47879abac28a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForField.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic void test044()", "signatureAfterChange": "  \tpublic void test044()", "diff": ["-\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Vector cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Vector cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ba30462496b3db5f6a0a46723fd282f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 199, "signatureBeforeChange": " public void testBug260274e() throws JavaModelException", "signatureAfterChange": " public void testBug260274e() throws JavaModelException", "diff": ["-\t\t\"\t * **************************************************\\n\" + ", "-\t\t\"\t * ********** Test ********** Test **************\\n\" + ", "+\t\t\"\t * ************************************************** ********** Test\\n\" + ", "+\t\t\"\t * ********** Test **************\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bb6b68deae0fd0e04eef6b3d45de0da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " public void testBug260381_wksp2_01c() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_01c() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bca62de5f1b9f64216a667ef0b33552", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": " public void testBug241687() throws JavaModelException", "signatureAfterChange": " public void testBug241687() throws JavaModelException", "diff": ["-\t\t\"\t test test test test test test \\n\" + ", "+\t\t\"\ttest test test test test test \\n\" + ", "-\t\t\"\t *\\n\" + ", "+\t\t\"\t*\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bebb3015ff03107456ac0a5ab942010", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void testBug117183b() throws JavaModelException", "signatureAfterChange": " public void testBug117183b() throws JavaModelException", "diff": ["-\t\t\"A_STATIC_FIELD[JAVADOC_FIELD_REF]{{@link Reference#A_STATIC_FIELD }, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DICENNRIT+\"}\\n\" + ", "-\t\t\"A_STATIC_FIELD[JAVADOC_VALUE_REF]{{@value Reference#A_STATIC_FIELD }, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DICENNRIT+\"}\"", "+\t\t\"A_STATIC_FIELD[JAVADOC_FIELD_REF]{{@link Reference#A_STATIC_FIELD}, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DICENNRIT+\"}\\n\" + ", "+\t\t\"A_STATIC_FIELD[JAVADOC_VALUE_REF]{{@value Reference#A_STATIC_FIELD}, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DICENNRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf71f8c929371a732e2f5979b9f8258", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "commitAfterChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": " public void test215()", "signatureAfterChange": " public void test215()", "diff": ["-\t\t\t\"1. ERROR in Y.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tpublic void foo() {}\\r\\n\" +", "+\t\t\t\"1. ERROR in Y.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic void foo() {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bfac13958068b7c4b72dcf088c0f0fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] POTENTIAL_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c15359c87747c640b84e7eebd671a97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "e5950298e29dbaf979a85e6f3f4a27d3f4b008e8", "commitAfterChange": "9473b3328ae3d850ecb04d4c484b0fd6f4ca2ab4", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void test086()", "signatureAfterChange": " public void test086()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 1)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"The import p.S is never used\\n\" + ", "+\t\t\t\"The static import p.S must be a field or member type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c497debcb21c37e9e2d1b690706e7a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testBug83127g()", "signatureAfterChange": " \tpublic void testBug83127g()", "diff": ["-\t\t\t\"Javadoc: The method add(Integer) is undefined for the type Unrelated1\\n\" + ", "+\t\t\t\"Javadoc: The method add(E) in the type Unrelated1 is not applicable for the arguments (Integer)\\n\" + ", "-\t\t\t\"The constructor Object(null) is undefined\\n\" + ", "+\t\t\t\"The constructor Test(T) refers to the missing type T\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cdb1b8464f1d59a6b1b2498c3775106", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 108, "signatureBeforeChange": " \tpublic void testBug84724c() throws CoreException", "signatureAfterChange": " \tpublic void testBug84724c() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 2, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 2, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ce586b5cf2b69cddd8b0ee5bba18a95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 215, "signatureBeforeChange": " public void test0119_Method()", "signatureAfterChange": " public void test0119_Method()", "diff": ["-\t\t\t\"case <CompleteOnName:zzz> : ;\\n\" +", "+\t\t\t\"case <CompleteOnName:zzz> :\\n\" +", "-\t\t\t\"      case <CompleteOnName:zzz> : ;\\n\" +", "+\t\t\t\"      case <CompleteOnName:zzz> :\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d190bd5a29e3b105bf562b21fd99d62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": " public void test0153()", "signatureAfterChange": " public void test0153()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pub>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pub>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d21783a258dbec78cf44fb2061adf49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 296, "methodNumberAfterChange": 296, "signatureBeforeChange": " public void testBug330313_wksp1_19_njl()", "signatureAfterChange": " public void testBug330313_wksp1_19_njl()", "diff": ["-\t\t\"\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "-\t\t\"\t\t\t\t\to.bodyDeclarations()));\\n\" + ", "+\t\t\"\t\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "+\t\t\"\t\t\t\t\t\to.bodyDeclarations()));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d3b66972ea702ad3ad1d4f3da9a3666", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testBug77093field() throws CoreException", "signatureAfterChange": " \tpublic void testBug77093field() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d3b79dabda8a24998bf91674bafad08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 300, "signatureBeforeChange": " \tpublic void test298()", "signatureAfterChange": " \tpublic void test298()", "diff": ["-\t\t\t\"Name clash: The method putAll(Map<String,? extends V>) of type X<V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<String,V> but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method putAll(Map<String,? extends V>) of type X<V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<K,V> but does not override it\\n\" + ", "-\t\t\t\"Name clash: The method putAll(Map<? extends String,? extends V>) of type X<S,V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<S,V> but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method putAll(Map<? extends String,? extends V>) of type X<S,V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<K,V> but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d7bf838afbd3fd17c5de7a4c89c2a4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void testBug83230_Explicit01() throws CoreException", "signatureAfterChange": " \tpublic void testBug83230_Explicit01() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d81721bac1fdea0dc3667bd4dde4681", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 384, "methodNumberAfterChange": 384, "signatureBeforeChange": " \tpublic void test382()", "signatureAfterChange": " \tpublic void test382()", "diff": ["-\t\t\t\"Name clash : The method foo(Class<String>) of type Y has the same erasure as foo(Class<? extends String>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<String>) of type Y has the same erasure as foo(Class<? extends String>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<? extends String>) of type Y has the same erasure as foo(Class<String>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<? extends String>) of type Y has the same erasure as foo(Class<String>) of type I but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d86b1a1da501607485a82aeed90f810", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "61742b7a485fa965b2f7b05fc8eadc51ecd60a49", "commitAfterChange": "d304d5cd9d0c4f90c63a024d76dece50501ce7a8", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "  public void test114() throws JavaModelException", "signatureAfterChange": "  public void test114() throws JavaModelException", "diff": ["-\t\t\"xtm[JAVADOC_PARAM_REF]{xtm, null, null, xtm, null, \"+this.positions+\"14}\\n\" +", "-\t\t\"xtc[JAVADOC_PARAM_REF]{xtc, null, null, xtc, null, \"+this.positions+\"13}\\n\" +", "+\t\t\"xtm[JAVADOC_PARAM_REF]{xtm, null, null, xtm, null, \"+this.positions+\"19}\\n\" +", "+\t\t\"xtc[JAVADOC_PARAM_REF]{xtc, null, null, xtc, null, \"+this.positions+\"18}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d9b0033610a642e52c7bca67371d623", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void testTypeMultipleArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testTypeMultipleArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dee2c83dc0b0136fe6e0fbdf0803e04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void testBug101283a()", "signatureAfterChange": " \tpublic void testBug101283a()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e01dbe77465daa1108a91f413a073b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 409, "methodNumberAfterChange": 409, "signatureBeforeChange": " public void testBug355838() throws Exception", "signatureAfterChange": " public void testBug355838() throws Exception", "diff": ["-\t\t\t\"Method output(List<String>) has the same erasure output(List<E>) as another method in type ErasureBug\\n\" + ", "+\t\t\t\"Erasure of method output(List<String>) is the same as another method in type ErasureBug\\n\" +", "-\t\t\t\"Method output(List) has the same erasure output(List<E>) as another method in type ErasureBug\\n\" + ", "+\t\t\t\"Erasure of method output(List) is the same as another method in type ErasureBug\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e4e2748d7953b3a9ec9e2b1f44db249", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NamingConventionTests.java", "commitBeforeChange": "da348589e3fa3fe0a889394dbec5343c317d63e7", "commitAfterChange": "cfb672e66d17bef31f4b5a6058666168ba53b0d0", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void testSuggestFieldName033()", "signatureAfterChange": " public void testSuggestFieldName033()", "diff": ["-\t\t\"myFirstType\\n\" +  //$NON-NLS-1$", "-\t\t\"firstType\\n\" +  //$NON-NLS-1$", "-\t\t\"type\", //$NON-NLS-1$", "+\t\t\t\"my_First_Type\\n\" + ", "+\t\t\t\"first_Type\\n\" + ", "+\t\t\t\"type\", //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef86ae3745a516305283cff5865b4bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testBug198074() throws JavaModelException", "signatureAfterChange": " public void testBug198074() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t\t+ \\\"from y \\\"\\n\" + ", "-\t\t\"\t\t\t\t\t+ \\\"where z=a\\\";\\n\" + ", "+\t\t\"\t\t\t\t+ \\\"from y \\\"\\n\" + ", "+\t\t\"\t\t\t\t+ \\\"where z=a\\\";\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f49990ba7a1b5d1982297fdf8eabbc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " public void test203_warn_options()", "signatureAfterChange": " public void test203_warn_options()", "diff": ["-\t\t\"The parameter i is never read\\n\" +", "+\t\t\"The value of the parameter i is not used\\n\" +", "-\t\t\"The local variable j is never read\\n\" +", "+\t\t\"The value of the local variable j is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f9ada19a7261bbab7e531e396c9b999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void test056throw5()", "signatureAfterChange": " public void test056throw5()", "diff": ["-\t\t\"Potential resource leak: \\\"reader\\\" may not be closed at this location\\n\" +", "+\t\t\"Potential resource leak: 'reader' may not be closed at this location\\n\" +", "-\t\t\"Potential resource leak: \\\"reader\\\" may not be closed at this location\\n\" +", "+\t\t\"Potential resource leak: 'reader' may not be closed at this location\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fa238e30628dc27d96dca941af49256", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test013e()", "signatureAfterChange": " \tpublic void test013e()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tclass X5 extends A implements I { public <T> void foo(Class<T> s) {} }\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tclass X5 extends A implements I { public <T> void foo(Class<T> s) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc3170dd257a9362e62c8265062012c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1370, "methodNumberAfterChange": 1370, "signatureBeforeChange": " public void test1336()", "signatureAfterChange": " public void test1336()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tOther<String>.Member m = (Other<String>.Member) om2;\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tOther<String>.Member m = (Other<String>.Member) om2;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ff2fafeb2c642f3d347b6d4eb0e7847", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void test007e()", "signatureAfterChange": " \tpublic void test007e()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tabstract class X6 extends A implements I {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tabstract class X6 extends A implements I {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1006353f0cb4b0c2fb50f16254c55709", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": " public void testBug241687() throws JavaModelException", "signatureAfterChange": " public void testBug241687() throws JavaModelException", "diff": ["-\t\t\"\ttest test test test test test \\n\" + ", "+\t\t\"\t test test test test test test \\n\" + ", "-\t\t\"\t*\\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1009dee4afb41062189e82d887e98cf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForClass.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tpublic void test048()", "signatureAfterChange": "  \tpublic void test048()", "diff": ["-\t\t\t\t+ \"Javadoc: Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Unknown cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "105ca2d7bec662b290648ee534bb8640", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " public void testBug260011_04() throws JavaModelException", "signatureAfterChange": " public void testBug260011_04() throws JavaModelException", "diff": ["-\t\t\"\t * The list of variable declaration fragments (element type:\\n\" + ", "-\t\t\"\t * <code VariableDeclarationFragment</code>). Defaults to an empty list.\\n\" + ", "+\t\t\"\t * The list of variable declaration fragments (element type: <code\\n\" + ", "+\t\t\"\t * VariableDeclarationFragment</code>). Defaults to an empty list.\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1088d743586d9a8ade7cd8427f96cad4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void testBug83304_TypeGenericElementPattern() throws CoreException", "signatureAfterChange": " \tpublic void testBug83304_TypeGenericElementPattern() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1092322d176b1b67ef4c75fdd8996391", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTypeCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void test007() throws JavaModelException", "signatureAfterChange": "  public void test007() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10af4999db90ddf92174539a9639fbb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "67643a7c27a6d261feaad810d2590f1f6d33b749", "commitAfterChange": "da7a5227e034c2b6c8a4762e61c3ccf43066f02e", "methodNumberBeforeChange": 438, "methodNumberAfterChange": 443, "signatureBeforeChange": " public void testBug253896b()", "signatureAfterChange": " public void testBug253896b()", "diff": ["-\t\t\t\"Null pointer access: The variable i1 can only be null at this location\\n\" +", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Potential null pointer access: The variable i1 may be null at this location\\n\" +", "+\t\t\t\"Potential null pointer access: This expression of type Integer may be null but requires auto-unboxing\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10ba2008bff9bc65bf058043b8fb7f98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-\t\t\t\"        [pc: 0, pc: 4] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 4] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 4] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 4] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10c9f3618daf78c24b69f28003dac8d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 198, "signatureBeforeChange": " public void testBug260274d() throws JavaModelException", "signatureAfterChange": " public void testBug260274d() throws JavaModelException", "diff": ["-\t\t\"\t/* *********************************************\\n\" + ", "-\t\t\"\t * Test\\n\" + ", "+\t\t\"\t/*\\n\" + ", "+\t\t\"\t * ********************************************* Test\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1157b94c5c1bf279af2ceb25902b1bb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "5ffa6d87d82bcd877c2c1c819145a0122be38cd2", "commitAfterChange": "712c3e08152ef0500611b85e95a98a332827c891", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-\t// TODO (olivier) unoptimal syntax error -> annotation type cannot extends/implements other types?", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Syntax error on tokens, ClassHeaderName expected instead\\n\" + ", "+\t\t\t\"\t                  ^^^\\n\" + ", "+\t\t\t\"Annotation type declaration cannot have explicit superinterfaces\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "115f874f16f921a82a5cee520f3fa42f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 809, "methodNumberAfterChange": 807, "signatureBeforeChange": " public void test771() throws Exception", "signatureAfterChange": " public void test771() throws Exception", "diff": ["-\t\t\"\t\t\t\t\tMyE | FileNotFoundException\\n\" + ", "-\t\t\"\t\t\t\t\t| ArrayIndexOutOfBoundsException | IllegalArgumentException ex) {\\n\" + ", "+\t\t\"\t\t\t\t\tMyE | FileNotFoundException | ArrayIndexOutOfBoundsException\\n\" + ", "+\t\t\"\t\t\t\t\t| IllegalArgumentException ex) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1160ce32f40a9de624f8374b87eed9f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "9b0a7dbe196111bace472ad6d38ba1cdd25696dc", "commitAfterChange": "a118736b4df6d2c2d76c2e8540c6ee6242953cb2", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void test045() throws CoreException", "signatureAfterChange": " \tpublic void test045() throws CoreException", "diff": ["-\t\t\t\t\"Lp1/Y<Lp1/Y;+Lp1/X;>;\"", "+\t\t\t\t\"Lp1/Y<Lp1/Y;{0}+Lp1/X;>;\"", "-\t\t\t\"Lp1/Y<Lp1/Y;+Lp1/X;>;\",", "+\t\t\t\"Lp1/Y<Lp1/Y;{0}+Lp1/X;>;\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "116b3133b6a9ddde6ce3c0619aa07cda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "5f2a6263ee8c5a6cbc591435f0a115b30cb3d4e1", "commitAfterChange": "b267dc5fd07e62c802290616c0cbe7abef453463", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void testProjectClose() throws JavaModelException, CoreException", "signatureAfterChange": " public void testProjectClose() throws JavaModelException, CoreException", "diff": ["-\t\t\t\"JavaProjectTests[-]: {}\\n\" + ", "+\t\t\t\"JavaProjectTests[*]: {CLOSED}\\n\" + ", "-\t\t\t\t\"JavaProjectTests[+]: {}\\n\" + ", "+\t\t\t\t\"JavaProjectTests[*]: {OPENED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "117c44e2ffdd61baf657d41cea030998", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "abe6a4b8c7a37b999ce782468f77dcc11e925eae", "commitAfterChange": "b3906111a4433325958de7604465d8f0e49325d2", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " public void test400556j()", "signatureAfterChange": " public void test400556j()", "diff": ["-\t\t\t\"\t                ^^^^^^\\n\" + ", "-\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<?>>[]\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The target type of this expression is not a well formed parameterized type due to bound(s) mismatch\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11dbe772c82a4b5e49f4855e5e050cde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "1fd45230f199f97d97dc93f43f8c1ecd8d598be3", "commitAfterChange": "e25e05f313fe0e8cf47abe127e89db464a1d8bc4", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void testBug400905_0029() throws CoreException", "signatureAfterChange": " public void testBug400905_0029() throws CoreException", "diff": ["-\tassertSearchResults(\"src/test/Test.java test.Y$Z.i [Z::goo] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/test/Test.java void test.X.main(String[]) [Y.Z::goo] EXACT_MATCH\");", "+\tassertSearchResults(\"src/test/Test.java test.Y$Z.i [goo] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/test/Test.java void test.X.main(String[]) [goo] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11e18a295c41b02ff96875942301bc72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchTests.java", "commitBeforeChange": "fe01542fcd3aa3aadeb3ef9dbecdc34ba5993c8d", "commitAfterChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void testSearchPatternCreation22()", "signatureAfterChange": " public void testSearchPatternCreation22()", "diff": ["-\t\t\"TypeDeclarationPattern: pkg<x.y.z>, enclosing<>, type<Foo>, exact match, case sensitive, erasure only\\n\" + ", "-\t\t\"| TypeReferencePattern: qualification<x.y.z>, type<Foo>, exact match, case sensitive, erasure only\",", "+\t\t\"TypeDeclarationPattern: pkg<x.y.z>, enclosing<>, type<Foo>, exact match, case sensitive, generic erasure match, fine grain: none\\n\" + ", "+\t\t\"| TypeReferencePattern: qualification<x.y.z>, type<Foo>, exact match, case sensitive, generic erasure match, fine grain: none\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12035f7e050de79fa33bf2a3d06876ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testAnonymousType6() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType6() throws JavaModelException", "diff": ["-\t\t\"  X {key=Lp8/X;} [in X.java [in p8 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X [in X.java [in p8 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12125f383531195a9faf4a3231fee088", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationDietRecoveryTest.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void test0019()", "signatureAfterChange": " public void test0019()", "diff": ["-\t\t\"public @AnAnnotation(name) @AnAnnotation2 class X {\\n\" + ", "+\t\t\"public @AnAnnotation(name) @AnAnnotation2(name2 = $missing$) class X {\\n\" + ", "-\t\t\"public @AnAnnotation(name) @AnAnnotation2 class X {\\n\" + ", "+\t\t\"public @AnAnnotation(name) @AnAnnotation2(name2 = $missing$) class X {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1224141a4963358942669df08a0ffc47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "af9bbbd46257142e006853d95525656db05c0be8", "commitAfterChange": "75441f37a4b77efa641f7e3f5866e117cb328da6", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testMoveSourceFolder3() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder3() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123b0446208ec5779fc0a0a91ba6bab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void test045()", "signatureAfterChange": " \tpublic void test045()", "diff": ["-\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123c215e375b1fc989c82ac486eeeec0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testMoveSourceFolder5() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder5() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12866ed17959cf985b7d3a5353b0279c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "commitAfterChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void testBinary08b()", "signatureAfterChange": " \tpublic void testBinary08b()", "diff": ["-\t\t\t\t\"Null type mismatch (type annotations): required \\'List<? super @NonNull X1>\\' but this expression has type \\'ArrayList<@Nullable Object>\\'\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<? super @NonNull X1>\\' but this expression has type \\'ArrayList<@Nullable Object>\\', corresponding supertype is \\'List<@Nullable Object>\\'\\n\" + ", "-\t\t\t\t\"Null type mismatch (type annotations): required \\'List<@Nullable ? extends p.X1>\\' but this expression has type \\'ArrayList<@NonNull X1>\\'\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<@Nullable ? extends p.X1>\\' but this expression has type \\'ArrayList<@NonNull X1>\\', corresponding supertype is \\'List<@NonNull X1>\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12d2b6eda4d3a856010b42f96e95a815", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "b86c62c9276301f4293d579436f1016659c6742c", "commitAfterChange": "9816d147cfcd9317931332a2edf2549b9a55fa79", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void testBug232768_Javadoc04() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Javadoc04() throws JavaModelException", "diff": ["-\t// TODO fix the incorrect indentation before the javadoc comment (also in 3.3 and 3.4M6)", "-\t\t\"\t\\n\" +", "-\t\t\"        /**\\n\" +", "+\t\t\"\\n\" +", "+\t\t\"\t/**\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12f0d79167ca1555e713b72003ebe355", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void test040()", "signatureAfterChange": " public void test040()", "diff": ["-\t\t\"Superclass Homonym is defined in an inherited type and an enclosing scope\\n\" + ", "+\t\t\"The type Homonym is defined in an inherited type and an enclosing scope\\n\" + ", "-\t\t\"Superclass Homonym is defined in an inherited type and an enclosing scope\\n\" + ", "+\t\t\"The type Homonym is defined in an inherited type and an enclosing scope\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12f13ad2c3bb1af2ea17867909abd0ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NamingConventionTests.java", "commitBeforeChange": "da348589e3fa3fe0a889394dbec5343c317d63e7", "commitAfterChange": "cfb672e66d17bef31f4b5a6058666168ba53b0d0", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void testSuggestFieldName035()", "signatureAfterChange": " public void testSuggestFieldName035()", "diff": ["-\t\t\"myFirstType\\n\" + //$NON-NLS-1$", "-\t\t\"firstType\\n\" + //$NON-NLS-1$", "-\t\t\"type\", //$NON-NLS-1$", "+\t\t\t\"my_first_Type\\n\" + ", "+\t\t\t\"first_Type\\n\" + ", "+\t\t\t\"type\", //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13a5682ede20c143e971538d3e050a73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "d04622d773e335e0114fd03c3d1b3d6001e8a321", "commitAfterChange": "e6dd60859dfdf5dc9e21714344e7dff2d05c9162", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic boolean visit(SwitchCase node)", "signatureAfterChange": " \tpublic boolean visit(SwitchCase node)", "diff": ["-\t\t\tbuffer.append(\"default : \");//$NON-NLS-1$", "+\t\t\tbuffer.append(\"default :\");//$NON-NLS-1$", "-\t\t\tbuffer.append(\": \");//$NON-NLS-1$", "+\t\t\tbuffer.append(\":\");//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14a3eb5706e9130478acf98ca7035855", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public void test022() throws JavaModelException", "signatureAfterChange": "  public void test022() throws JavaModelException", "diff": ["-\t\t\"BasicTestTextIns[JAVADOC_TYPE_REF]{{@link BasicTestTextIns }, javadoc.text, Ljavadoc.text.BasicTestTextIns;, null, null, \"+this.positions+(R_DICENUNR+R_INLINE_TAG)+\"}\\n\" +", "-\t\t\"BasicTestTextInsException[JAVADOC_TYPE_REF]{{@link BasicTestTextInsException }, javadoc.text, Ljavadoc.text.BasicTestTextInsException;, null, null, \"+this.positions+R_DICUNRIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_TYPE_REF]{{@link BasicTestTextIns}, javadoc.text, Ljavadoc.text.BasicTestTextIns;, null, null, \"+this.positions+(R_DICENUNR+R_INLINE_TAG)+\"}\\n\" +", "+\t\t\"BasicTestTextInsException[JAVADOC_TYPE_REF]{{@link BasicTestTextInsException}, javadoc.text, Ljavadoc.text.BasicTestTextInsException;, null, null, \"+this.positions+R_DICUNRIT+\"}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14da994e40e625e90381e9a268546f26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug101283b()", "signatureAfterChange": " \tpublic void testBug101283b()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class X<T, F> {\\n\" +", "-\t\t\t\"\t               ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\t* @see T Variable \\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\t* @see F Variable\\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\tstatic class Entry<L, R> {\\n\" +", "-\t\t\t\"\t                   ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "+\t\t\t\"\t               ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @see T Variable \\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see F Variable\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tstatic class Entry<L, R> {\\n\" + ", "+\t\t\t\"\t                   ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14dd1a005174b0af39199a930945cc6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "96c7afd29f6893c16cf00a3ac29701c1a81f919d", "commitAfterChange": "dd45817f66a0a68c9747e1c73f77cc12766ad25c", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void testBug232768_Block02() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Block02() throws JavaModelException", "diff": ["-\t\t\"\\n\" +", "-\t\t\"\t/*\\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /*\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1512eb31a9beb28b6a44e14a2c6e2c3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "418e34f57c9f7842d3534af171e657c264f02dd7", "commitAfterChange": "42a66623ce2a3ec71a2f28506ffd67d2c8d2cf8c", "methodNumberBeforeChange": 437, "methodNumberAfterChange": 442, "signatureBeforeChange": " public void testBug253896a()", "signatureAfterChange": " public void testBug253896a()", "diff": ["-\t\t\t\"Null pointer access: The variable f1 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Null pointer access: The variable f2 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "151a7094ca3f416ff9b06eb96f9fa0f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \t \tpublic void test052()", "signatureAfterChange": " \t \tpublic void test052()", "diff": ["-\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [32]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15e6ce162721b262ed2aad4a401e2e20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void test016()", "signatureAfterChange": " \tpublic void test016()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\timport static java.lang.*;\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\timport static java.lang.*;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15e9966a57f42b7671e9dd91187b7a76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test018a() throws JavaModelException", "signatureAfterChange": " public void test018a() throws JavaModelException", "diff": ["-\t\t\t\"expectedTypesSignatures=null\\n\" +", "-\t\t\t\"expectedTypesKeys=null\\n\" +", "+\t\t\t\"expectedTypesSignatures={Z,C,I,J,F,D,[C,Ljava.lang.String;,Ljava.lang.Object;}\\n\" +", "+\t\t\t\"expectedTypesKeys={Z,C,I,J,F,D,[C,Ljava/lang/String;,Ljava/lang/Object;}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15eb49bee7ec1b06b40490ae2c5a9395", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "2f57f8dfaade218a320169042ea7ed8e042be61d", "commitAfterChange": "870bb4f621dd0b8090426a7261d67a43a6dc9aa9", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void test014()", "signatureAfterChange": " \tpublic void test014()", "diff": ["-\t\t\t\t\"1 problem (1 error)\",", "+\t\t\t\t\"1 problem (1 error)\\n\",", "-\t\t\t\"1 problem (1 error)\";", "+\t\t\t\"1 problem (1 error)\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1620a0d87ba441e13cf0a294121e42a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "a4c3ac4c4476b0535c9f4bcee41fc3bc1a1adef9", "commitAfterChange": "67766e5b27ea79987add5b8cee1657ec3cbfbedb", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tpublic void test073()", "signatureAfterChange": " \tpublic void test073()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\ta(new Integer(1), 2);\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\ta(new Integer(1), 2);\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1637c31657dc31595308d2931941f0e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "df84bc0b0e74080458b4e3f35c6e77ec6fed2587", "commitAfterChange": "2bb013de372e754bf58118fac6dab82d5a5c9625", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "  public void test99()", "signatureAfterChange": "  public void test99()", "diff": ["-\t\t\"    specified $missing$;\\n\" +", "+\t\t\"    specified = $missing$;\\n\" +", "-\t\t\"    thread $missing$;\\n\" +", "+\t\t\"    thread = $missing$;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "179f2c226a4525aa114048b59c1f1d09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 309, "signatureBeforeChange": " public void testBug330313_wksp1_32_njl()", "signatureAfterChange": " public void testBug330313_wksp1_32_njl()", "diff": ["-\t\t\"\t\treturn (a.style == style && equals(a.foreground, foreground) && equals(\\n\" + ", "-\t\t\"\t\t\t\ta.background, background));\\n\" + ", "+\t\t\"\t\treturn (a.style == style && equals(a.foreground, foreground)\\n\" + ", "+\t\t\"\t\t\t\t&& equals(a.background, background));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17b1196691d1328e3176a38d3e1ac9c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug83230_Explicit04() throws CoreException", "signatureAfterChange": " \tpublic void testBug83230_Explicit04() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17cbb384774f8a0e99d714bef3a1b7f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void testBug101283a()", "signatureAfterChange": " \tpublic void testBug101283a()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17d861884f7e2a3d7a89dc9aa9500959", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 370, "methodNumberAfterChange": 370, "signatureBeforeChange": "\r public void testBug474918c()", "signatureAfterChange": "\r public void testBug474918c()", "diff": ["-\t\t\"\t\t                                        int\t\t\ta\t\t\t\t= 55;\\r\\n\" + \r", "-\t\t\"\t\t                                        Object\t\tcdddddddddddd\t= null;\\r\\n\" + \r", "+\t\t\"\t\t                                        int\t\ta\t\t\t\t= 55;\\r\\n\" + \r", "+\t\t\"\t\t                                        Object\tcdddddddddddd\t= null;\\r\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17da28caa35e87a105c59da4bb10a32d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test0047()", "signatureAfterChange": " public void test0047()", "diff": ["-\t\t\"Syntax error, annotation declarations are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, annotation declarations are only available if source level is 1.5\\n\" + ", "-\t\t\"Syntax error, annotations are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, annotations are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17ead9651dffc2a671d526cbac0d3cf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test039()", "signatureAfterChange": " \tpublic void test039()", "diff": ["-\t\t\t\"     3  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     3  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18023eff1d652c999c27cf812ac08f22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void testRenameJarFile2() throws CoreException", "signatureAfterChange": " public void testRenameJarFile2() throws CoreException", "diff": ["-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18047ca90d3b5b15b8495c78b717c8bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 214, "signatureBeforeChange": " \tpublic void test074b()", "signatureAfterChange": " \tpublic void test074b()", "diff": ["-\t\t\t\"The return type is incompatible with I.finalize(), Object.finalize()\\n\" +", "+\t\t\t\"The return types are incompatible for the inherited methods I.finalize(), Object.finalize()\\n\" +", "-\t\t\t\"The return type is incompatible with I.hashCode(), Object.hashCode()\\n\" +", "+\t\t\t\"The return types are incompatible for the inherited methods I.hashCode(), Object.hashCode()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1883a427938a49fe513e6aff689b40c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractNullAnnotationTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void setUp() throws Exception", "signatureAfterChange": " \tprotected void setUp() throws Exception", "diff": ["-\t\t\tString version = this.complianceLevel >= ClassFileConstants.JDK1_8 ? \"2.0.0\" : \"1.1.0\";", "+\t\t\tString version = this.complianceLevel >= ClassFileConstants.JDK1_8 ? \"[2.0.0,3.0.0)\" : \"[1.1.0,2.0.0)\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1886908909f79be4d174727f9e085f53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java", "commitBeforeChange": "e534993434659c9a128067cc81e53b914d835480", "commitAfterChange": "85fca2365612e79a6e7b22f1bfd4842ccf0748ee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testMissingLibrary1() throws JavaModelException", "signatureAfterChange": "  \tpublic void testMissingLibrary1() throws JavaModelException", "diff": ["-\t\t\t\tnew Problem(\"\", \"The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project.\", projectPath), //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p1\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files.\", classTest1) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"\", \"The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project\", projectPath), //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest1) //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18ca9d2370b09e31df6d757e6a0c1724", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java", "commitBeforeChange": "7f7fe7a0ba4a6e12c0bff10c900a5fe01a5f59ed", "commitAfterChange": "3f92e8a5a07dd9ede4257e502806d13fe53cd5fa", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void test0098() throws JavaModelException", "signatureAfterChange": " public void test0098() throws JavaModelException", "diff": ["-\t\t\t\t\"\t\tColor.valueof(\\\"RED\\\");\\n\" +", "+\t\t\t\t\"\t\tColor.valueOf(\\\"RED\\\");\\n\" +", "-\t\t\t\t\"valueof\");", "+\t\t\t\t\"valueOf\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "190e87a41774656c85de79acb7cb4d88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void test050() throws Exception", "signatureAfterChange": " public void test050() throws Exception", "diff": ["-\t\t\t\t\"        [pc: 31, line: 49]\\n\" +", "+\t\t\t\t\"        [pc: 31, line: 51]\\n\" +", "-\t\t\t\"        [pc: 31, line: 49]\\n\" +", "+\t\t\t\"        [pc: 31, line: 51]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1982f171d99bdafb0c1557d64852fecd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void test0114()", "signatureAfterChange": " public void test0114()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:fin>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:fin>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19c96c533fc9c968eaeee2bb41784b00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": "              public void test144()", "signatureAfterChange": "              public void test144()", "diff": ["-    \t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+    \t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-    \t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+    \t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19ca5df8add16b30415ad2d1af35f752", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  \tpublic void test063()", "signatureAfterChange": "  \tpublic void test063()", "diff": ["-\t\t\t\t+ \"Javadoc: Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Unknown cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Unknown cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19e022ef5615ee317f288ecc91d522b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test013b()", "signatureAfterChange": " \tpublic void test013b()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tabstract class X2 extends A implements I {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tabstract class X2 extends A implements I {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19e617e24e3619594426df0f6de487ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public void testBug400905_0001() throws CoreException", "signatureAfterChange": " public void testBug400905_0001() throws CoreException", "diff": ["-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#1.lambda$1() [() ->] EXACT_MATCH\\n\" +\t\t\t", "-\t\t\t\"src/b400905/X.java int void b400905.X.doit():<lambda>#2.lambda$2() [() ->] EXACT_MATCH\");\t", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [() ->] EXACT_MATCH\\n\" +\t\t\t", "+\t\t\t\"src/b400905/X.java int void b400905.X.doit():Lambda(I).foo() [() ->] EXACT_MATCH\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19f245893bd29c696c0031b0e7f26dda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "8ab73b3fd3410dbf30af626275dd87b20a54b001", "commitAfterChange": "37a33fa365c1afc824ee6b5c0e146fff8db0d79c", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "  public void test91()", "signatureAfterChange": "  public void test91()", "diff": ["-\t\t\"\tpublic spew(Crap x, int y);\t\\n\" +", "+\t\t\"\tpublic spew(X x, int y);\t\\n\" +", "-\t\t\"  public spew(Crap x, int y) {\\n\" + ", "+\t\t\"  public spew(X x, int y) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a18ff0d386c296725d0a5d5d59a0bca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 132, "signatureBeforeChange": " \tpublic void testBug92944_INTERFACE() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_INTERFACE() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a2bb16acd75ca57c2953bac59415b50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "\t\t\t\t  \tpublic void test092()", "signatureAfterChange": "\t\t\t\t  \tpublic void test092()", "diff": ["-\t\t\t\"Unnecessary cast to type X<String> for expression of type X<String>\\n\" + ", "+\t\t\t\"Unnecessary cast from X<String> to X<String>\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not assign expression of type X<T> to the field t of raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The field t from the raw type X is assigned a value of type X<T>. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a325512858c240030639f2f48ac82db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void testMultiLineCommentCodeSnippet6()", "signatureAfterChange": "  \tpublic void testMultiLineCommentCodeSnippet6()", "diff": ["-\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(), box\\n\" +", "-\t\t\t\t\" * \t\t\t\t.getGames().toArray());\\n\" +", "+\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(),\\n\" +", "+\t\t\t\t\" * \t\t\t\tbox.getGames().toArray());\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a534c5e99ffc19ec30e7d52305f41de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "3bee3efb3c3139a52dff7aa299065deb5290ece4", "commitAfterChange": "645825dd1e7c490f7b149a754d38a08b99765996", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void test080()", "signatureAfterChange": " \tpublic void test080()", "diff": ["-\t\t\t\t+ \"\t      ^^\\n\"", "+\t\t\t\t+ \"\t       ^\\n\"", "-\t\t\t\t+ \"\t      ^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a5bd11fd674f7c24cc74373ad0a22c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationCompletionParserTest.java", "commitBeforeChange": "63d13898e414da27bb1c178ed93753184a2e7833", "commitAfterChange": "a489ce78e2eb32838e144c0480573d4783205f0f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test0005()", "signatureAfterChange": " public void test0005()", "diff": ["-\t\t\"public class X {\\n\" + ", "-\t\t\"  public X() {\\n\" + ", "+\t\t\"class X {\\n\" + ", "+\t\t\"  X() {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a5e7bddb824a9bc2be5be8671c20451", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "42a8e7b7f9382c59bb1ff340f0838c566aaa3094", "commitAfterChange": "eaac4cd91d3c13197436495a330942a49816eb54", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": " \tpublic void test149()", "signatureAfterChange": " \tpublic void test149()", "diff": ["-\t\t\t\"\t                ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"return type needs unchecked conversion from Collection<Object>.toArray(T[])\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\"Unsafe type operation: The return type Object[] of the method toArray(Object[]) of type X needs unchecked conversion to conform to the return type T[] of inherited method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b34067ad4eeefcc543089760af9e546", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 266, "methodNumberAfterChange": 267, "signatureBeforeChange": " public void testBug305518_wksp2_03()", "signatureAfterChange": " public void testBug305518_wksp2_03()", "diff": ["-\t\t\"\t *  String s = ... ; // get string from somewhere\\n\" + ", "-\t\t\"\t *  byte [] compressed = UnicodeCompressor.compress(s);\\n\" + ", "+\t\t\"\t*  String s = ... ; // get string from somewhere\\n\" + ", "+\t\t\"\t*  byte [] compressed = UnicodeCompressor.compress(s);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b3ddbe6171f44657baa5a6d5f62be4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 306, "signatureBeforeChange": " public void testBug330313_wksp1_29_njl()", "signatureAfterChange": " public void testBug330313_wksp1_29_njl()", "diff": ["-\t\t\"\t\treturn (pack != null && otherpack != null && isSamePackage(pack,\\n\" + ", "-\t\t\"\t\t\t\totherpack));\\n\" + ", "+\t\t\"\t\treturn (pack != null && otherpack != null\\n\" + ", "+\t\t\"\t\t\t\t&& isSamePackage(pack, otherpack));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b468882d19ed2395abb776d5c57a4cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": " \tpublic void test050h()", "signatureAfterChange": " \tpublic void test050h()", "diff": ["-\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method c(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method c(A<Number>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b8fe8edb2b9fb912966e3cd4b67c0db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c2fa534b3da997c68c8a8428fa68767a0e6e936", "commitAfterChange": "1e17c9b14d7583b5c8ac33824ed705b25b4cdcaa", "methodNumberBeforeChange": 785, "methodNumberAfterChange": 785, "signatureBeforeChange": " public void test779()", "signatureAfterChange": " public void test779()", "diff": ["-\t\t\"    2  invokevirtual X$1.get(int) : java.lang.String [36]\\n\" + ", "+\t\t\"    2  invokevirtual X$Entry$1.get(int) : java.lang.String [36]\\n\" + ", "-\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X$1.class\");", "+\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X$Entry$1.class\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1be61a584faaf3d8db4f208e4250896c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments11() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments11() throws CoreException", "diff": ["-\t\tsearch(\"g5.m.def.Single<? extends Exception>.generic(Exception) % <? extends Exception>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"g5.m.def.Single<? extends Exception>.<? extends Exception>generic(Exception)\", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [generic(new Exception())] EQUIVALENT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [<Exception>generic(new Exception())] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c21f9d399906599430a4b8d4f8351cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 303, "methodNumberAfterChange": 303, "signatureBeforeChange": " \tpublic void test0302() throws JavaModelException", "signatureAfterChange": " \tpublic void test0302() throws JavaModelException", "diff": ["-\t\t\t\t\"do\\r\\n\" +  ", "-\t\t\t\t\"\t\t\tfoo();\\r\\n\" + ", "+\t\t\t\t\"do\\n\" +  ", "+\t\t\t\t\"\t\t\tfoo();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c7e1ec47af6e3dad6e4e495e1b7e204", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testDeleteMethod() throws CoreException", "signatureAfterChange": " public void testDeleteMethod() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c80841c2bd0d3633ca2e5566b908ad3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "96c7afd29f6893c16cf00a3ac29701c1a81f919d", "commitAfterChange": "dd45817f66a0a68c9747e1c73f77cc12766ad25c", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " public void testBug232768_Javadoc03() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Javadoc03() throws JavaModelException", "diff": ["-\t\t\"\\n\" +", "-\t\t\"\t/**\\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /**\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cccd2e77d43b7722aea461043c740b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "eb727711bfbefbe06ad25a796b42d61ffab45eca", "commitAfterChange": "c4ce580cb0d1d41b788a7611bd30d4cf0eba4f86", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 235, "signatureBeforeChange": " \tpublic void test223()", "signatureAfterChange": " \tpublic void test223()", "diff": ["-\t\t\t\"\t^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Unsafe type operation: The method foo(E) in the type X.MX<Class<? extends Object>> should not be applied for the arguments (Class). References to generic types should be parameterized\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^\\n\" + ", "+\t\t\t\"Unsafe type operation: Should not convert expression of raw type Class to type Class<? extends Object>. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cea2d041fa1cfdb80852f55d523c9d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "badff9a93fec2ed67e9ce195f8709b06674bcf81", "commitAfterChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 211, "signatureBeforeChange": " \tpublic void test074a()", "signatureAfterChange": " \tpublic void test074a()", "diff": ["-\t\t\t\"\t                             ^^^^^^^\\n\" + ", "+\t\t\t\"\t                        ^^^^\\n\" + ", "-\t\t\t\"\t                             ^^^^^^^\\n\" + ", "+\t\t\t\"\t                        ^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cfce569b81f4120356b27686575cb21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src-annotations/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "65f5152e309a08bb91b2b35f96e93b2fa93bae4f", "commitAfterChange": "a16b4bac72f18b88e0ee337c3ee2d4cf28bfb8b4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void testAnnotationImplementations(TypeDeclaration testClass)", "signatureAfterChange": " \tprivate void testAnnotationImplementations(TypeDeclaration testClass)", "diff": ["-\t\t", "+", "-\t\t", "+", "-        ProcessorTestStatus.assertTrue(\"Annotation mirror contents\", annoMirror.toString().startsWith(\"@MirrorDeclarationTestAnnotation\"));", "-        ", "+        ProcessorTestStatus.assertTrue(\"Annotation mirror contents\", annoMirror.toString().startsWith(\"@org.eclipse.jdt.apt.tests.annotations.mirrortest.MirrorDeclarationTestAnnotation\"));", "+", "-        ", "+", "-        ", "-        ", "+", "+", "-        \t}        \t\t", "+        \t}", "-        ProcessorTestStatus.assertEquals(\"\", \"bob\", valueString.toString());", "+        ProcessorTestStatus.assertEquals(\"\", \"\\\"bob\\\"\", valueString.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d0fc48d38bed0b33f06244f09ec7ac6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": " \tpublic void test043b()", "signatureAfterChange": " \tpublic void test043b()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tpublic class X { void test(E<Integer,Integer> e) { e.id(new Integer(111)); } }\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic class X { void test(E<Integer,Integer> e) { e.id(new Integer(111)); } }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d1080c2e59a3d460e05c07d1ded20e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "b86c62c9276301f4293d579436f1016659c6742c", "commitAfterChange": "9816d147cfcd9317931332a2edf2549b9a55fa79", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void testBug232768_Block04() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Block04() throws JavaModelException", "diff": ["-\t// TODO fix the incorrect indentation before the block comment (also in 3.3 and 3.4M6)", "-\t\t\"\t\\n\" +", "-\t\t\"        /*\\n\" +", "+\t\t\"\\n\" +", "+\t\t\"\t/*\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d3f3671697c37dafafb6079d2f94878", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " public void testBug260011_04() throws JavaModelException", "signatureAfterChange": " public void testBug260011_04() throws JavaModelException", "diff": ["-\t\t\"\t * The list of variable declaration fragments (element type: <code\\n\" + ", "-\t\t\"\t * VariableDeclarationFragment</code>). Defaults to an empty list.\\n\" + ", "+\t\t\"\t * The list of variable declaration fragments (element type:\\n\" + ", "+\t\t\"\t * <code VariableDeclarationFragment</code>). Defaults to an empty list.\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d5b53404f60091205f47e2e2348de07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "988db3ec863dadeb2db80ab85efafc59fca27d63", "commitAfterChange": "bba7694c48471620eaabd1cb9ca1daab01462bcd", "methodNumberBeforeChange": 284, "methodNumberAfterChange": 284, "signatureBeforeChange": " public void test134()", "signatureAfterChange": " public void test134()", "diff": ["-\t\t\t\"X.java\",", "+\t\t\t\"A.java\",", "-\t\t\"1. WARNING in X.java (at line 5)\\n\" +", "+\t\t\"1. WARNING in A.java (at line 5)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d5ec2fc316260198a6b83441cbac443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "201e3a3365c0b775f7c4b651b5af5fd66cfcae5d", "commitAfterChange": "1bce1c847528f6a56381642b4ddc63214726c70b", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " public void test0070() throws JavaModelException", "signatureAfterChange": " public void test0070() throws JavaModelException", "diff": ["-\t\t\t\t\"test0070.p[PACKAGE_REF]{test0070.p.*;, test0070.p, null, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"test0070[PACKAGE_REF]{test0070.*;, test0070, null, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\t\"test0070.p[PACKAGE_REF]{test0070.p., test0070.p, null, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"test0070[PACKAGE_REF]{test0070., test0070, null, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d704b49995faaf743f1b2a49e86f326", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1241, "methodNumberAfterChange": 1241, "signatureBeforeChange": " public void test1207()", "signatureAfterChange": " public void test1207()", "diff": ["-\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" +", "-\t\t\"\tthrowE(objs);\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\"\tthrowE(objs);\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1db74e564a4fb02dd9da4b343cc5b17c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 325, "methodNumberAfterChange": 325, "signatureBeforeChange": " \tpublic void test323()", "signatureAfterChange": " \tpublic void test323()", "diff": ["-\t\t\t\"Type safety: The expression of raw type G is converted to G<String>. References to generic type G<T> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type G is converted to G<String> using a raw conversion. References to generic type G<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type G.Member is converted to G<Thread>.Member. References to generic type G<T>.Member should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type G.Member is converted to G<Thread>.Member using a raw conversion. References to generic type G<T>.Member should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e268281d7c64b1777d99549242579a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [<Object, RuntimeException, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e499f458de6fd6cc1b4f75f8962bd3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic void testBug83388b() throws CoreException", "signatureAfterChange": " \tpublic void testBug83388b() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e4eb665a7b8622e09a5e59a7a9e65d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "f7f89d61cddd4437d454a7cce2d799dfbd0c94b0", "commitAfterChange": "bff2f093f2ca890f300037b450293438832a5492", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void testFallThrough()", "signatureAfterChange": " public void testFallThrough()", "diff": ["-\t\t\"    \twhile (true) {\\n\" +", "+\t\t\"    \touter: while (true) {\\n\" +", "-\t\t\"    \t\t\t\tSystem.exit(0);\\n\" +", "+\t\t\"    \t\t\t\tbreak outer;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e609dfb2f10bf723fadbe0bd7b3a3ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 193, "methodNumberAfterChange": 193, "signatureBeforeChange": " public void testBug264112_wksp1_02()", "signatureAfterChange": " public void testBug264112_wksp1_02()", "diff": ["-\t\t\"\t\t\tbuffer.append(\\\"- possible values:\t[\\\"); //$NON-NLS-1$ \\n\" + ", "-\t\t\"\t\t\tbuffer.append(\\\"]\\\\n\\\"); //$NON-NLS-1$ \\n\" + ", "+\t\t\"\t\t\tbuffer.append(\\\"- possible values:\t[\\\"); //$NON-NLS-1$\\n\" + ", "+\t\t\"\t\t\tbuffer.append(\\\"]\\\\n\\\"); //$NON-NLS-1$\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ea9422b1abcbef90ea2c1f10c008bf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExclusionPatternsTests.java", "commitBeforeChange": "75c11b9993cee3cc0c66baeb87390d3f47878de0", "commitAfterChange": "bf1e6d69eab09fcc8966c652a3845b7198223fbb", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testRenameResourceExcludedPackage() throws CoreException", "signatureAfterChange": " public void testRenameResourceExcludedPackage() throws CoreException", "diff": ["-\t\t\"\\n\" + // default package", "-\t\t\"q\",", "+\t\t\"[default] [in src [in P]]\\n\" + ", "+\t\t\"q [in src [in P]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f0e2f33529b06610ddf9ccfdc080030", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void test056h()", "signatureAfterChange": " public void test056h()", "diff": ["-\t\t\"Potential resource leak: \\\"fileReader\\\" may not be closed\\n\" + ", "+\t\t\"Potential resource leak: 'fileReader' may not be closed\\n\" + ", "-\t\t\"Resource leak: \\\"localReader\\\" is never closed\\n\" + ", "+\t\t\"Resource leak: 'localReader' is never closed\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f24c180665e863c56408424f7ed0511", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void testCompilationUnitRemoveAndAdd() throws CoreException", "signatureAfterChange": " public void testCompilationUnitRemoveAndAdd() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f2cc8d56beaf08a0b1036fef2d85902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 109, "signatureBeforeChange": " \tpublic void testBug84724d() throws CoreException", "signatureAfterChange": " \tpublic void testBug84724d() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 2, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 2, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f4161a4f712490639a27dd1f4431230", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test029()", "signatureAfterChange": " \tpublic void test029()", "diff": ["-\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f931692e5819e05b8d21fdd15acbb36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void test0088() throws JavaModelException", "signatureAfterChange": " public void test0088() throws JavaModelException", "diff": ["-\t\t\t\"foo(int) {key=Lp/MyClass0088;.foo(I)V} [in MyClass0088 [in [Working copy] MyClass0088.java [in p [in src2 [in Resolve]]]]]\\n\" + ", "-\t\t\t\"foo() {key=Lp/MyClass0088;.foo()V} [in MyClass0088 [in [Working copy] MyClass0088.java [in p [in src2 [in Resolve]]]]]\",", "+\t\t\t\"foo(int) [in MyClass0088 [in [Working copy] MyClass0088.java [in p [in src2 [in Resolve]]]]]\\n\" + ", "+\t\t\t\"foo() [in MyClass0088 [in [Working copy] MyClass0088.java [in p [in src2 [in Resolve]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa676bc7d662a53494625f5ea0edd11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "9bef3f15c43b07a14e76957980f62386b2bcee10", "commitAfterChange": "73f504e7d77d95d8fc2d6621b5727e1e3ab07530", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testConstructorReference04() throws CoreException", "signatureAfterChange": " public void testConstructorReference04() throws CoreException", "diff": ["-\t\t\"src/p/Y.java p.Y(int) [super(i)]\\n\" +", "-\t\t\"src/p/Y.java p.Y(boolean) [super(1)]\", ", "+\t\t\"src/p/Y.java p.Y(int) [super(i);]\\n\" +", "+\t\t\"src/p/Y.java p.Y(boolean) [super(1);]\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fb28923dc01b9776a4e83265afafdf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void testJavadocTypeStringDeclaration() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocTypeStringDeclaration() throws CoreException", "diff": ["-\t\t\t\t\"AnnSearched\",", "+\t\t\t\t\"JavadocSearched\",", "-\t\t\t\t\"src/j1/AnnSearched.java j1.AnnSearched [AnnSearched] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocSearched.java j1.JavadocSearched [JavadocSearched] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fbb9fe0c1e176841732ca6efa8f2749", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void testBug80264_FieldsIgnoreBothTypes() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80264_FieldsIgnoreBothTypes() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ff5cce5cbce05fbed21c02523d46820", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void testBug101283c()", "signatureAfterChange": " \tpublic void testBug101283c()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "202cc71a40e3f0a4c556082019a96fcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testBug83304_TypeGenericElementPattern() throws CoreException", "signatureAfterChange": " \tpublic void testBug83304_TypeGenericElementPattern() throws CoreException", "diff": ["-\t\t\t\"src/b83304/Types.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/b83304/Types.java b83304.Types.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/b83304/Types.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/b83304/Types.java b83304.Types.gen [Generic] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "204233d1d018d4b5d19c3775156a00df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void test02()", "signatureAfterChange": " public void test02()", "diff": ["-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + ", "-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2059fcf7fd82406fa9d0284b2ad88ef8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void test070()", "signatureAfterChange": " public void test070()", "diff": ["-\t\t\"The return types are incompatible for the inherited methods A.foo(), B.foo()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods B.foo(), A.foo()\\n\" +", "-\t\t\"The return types are incompatible for the inherited methods B.foo(), A.foo()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods A.foo(), B.foo()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207b68f970c562a778d377f597301521", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test007()", "signatureAfterChange": " \tpublic void test007()", "diff": ["-\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "209c6a0a8fd4a7eb53a0d2bea1fbbd35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 279, "methodNumberAfterChange": 279, "signatureBeforeChange": " \tpublic void test275()", "signatureAfterChange": " \tpublic void test275()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20e71a18348415d53824fc12fbfd6915", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": " \tpublic void test051a()", "signatureAfterChange": " \tpublic void test051a()", "diff": ["-\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20e9ca36d539391932799dc51e2e905d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "3cbc5a17035fd93e630a5ce3a447371924b2eaec", "commitAfterChange": "2fbac062d3f933d7974166e3d20ea9843fdd9750", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void testBug286601g()", "signatureAfterChange": " public void testBug286601g()", "diff": ["-\t\t\"public class X05b\\n\" +", "+\t\t\"public class X05\\n\" +", "-\t\t\"public class X05b {\\n\" +", "+\t\t\"public class X05 {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20f3026d89a8a1a5c4e4b6a1241c9470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testSingleWildcardExtendsStringPattern05() throws CoreException", "signatureAfterChange": " \tpublic void testSingleWildcardExtendsStringPattern05() throws CoreException", "diff": ["-\t// TODO (search-frederic) try to have a better match selection", "+\t// TODO [search] try to have a better match selection", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20f537a1fe1ea1dc53760e25f987fb44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " public void testBug400905_0013a() throws CoreException", "signatureAfterChange": " public void testBug400905_0013a() throws CoreException", "diff": ["-\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1() [() /*1*/->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int int void X.zoo():<lambda>#1.lambda$1():<lambda>#2.lambda$2() [() /*2*/->] EXACT_MATCH\");", "+\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit() [() /*1*/->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int int void X.zoo():Lambda(I).doit():Lambda(I).doit() [() /*2*/->] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20ffbbe5619771d4c114577da7617fea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 550, "methodNumberAfterChange": 550, "signatureBeforeChange": " \tpublic void test0545()", "signatureAfterChange": " \tpublic void test0545()", "diff": ["-\t\t\t\"Type mismatch: cannot convert from X<capture-of ? extends Object> to X<String>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<capture#2-of ? extends Object> to X<String>\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<capture-of ? extends Object> to X2\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<capture#3-of ? extends Object> to X2\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210216a7d181f3c91d553c42bb625138", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "3a0b65ddcf24695a9079f746a2a1a7b3a63b5916", "commitAfterChange": "98a4f4dd40a1ccd8fda6ff76be9ff0f622cee1c4", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void test30()", "signatureAfterChange": " public void test30()", "diff": ["-\t\t\"The method bar(String) from the type X2 is not visible\\n\" + ", "+\t\t\"The method bar(Object) from the type X2 is not visible\\n\" + ", "-\t\t\"The method barbar(String) from the type X2 is not visible\\n\" + ", "+\t\t\"The method barbar(Object) from the type X2 is not visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "212edde4c21392f723b700b34d95a7cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 952, "methodNumberAfterChange": 952, "signatureBeforeChange": " public void test0929()", "signatureAfterChange": " public void test0929()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 6)\\n\" +", "-\t\t\"\tClass<? extends Enum> enumType = null;\\n\" +", "-\t\t\"\t                ^^^^\\n\" +", "-\t\t\"Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 7)\\n\" +", "-\t\t\"\tfinal Collection<E> test = allOf(enumType);\\n\" +", "-\t\t\"\t                           ^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation allOf(Class<capture#1-of ? extends Enum>) of the generic method allOf(Class<E>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\tfinal Collection<E> test = allOf(enumType);\\n\" +", "-\t\t\"\t                           ^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Collection<capture#1-of ? extends Enum> to Collection<E>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 9)\\n\" +", "-\t\t\"\tCollection<? extends Enum> colType = null;\\n\" +", "-\t\t\"\t                     ^^^^\\n\" +", "-\t\t\"Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. ERROR in X.java (at line 10)\\n\" +", "-\t\t\"\tfinal Collection<E> test2 = colType;\\n\" +", "-\t\t\"\t                            ^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Collection<capture#2-of ? extends Enum> to Collection<E>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tClass<? extends Enum> enumType = null;\\n\" + ", "+\t\t\"\t                ^^^^\\n\" + ", "+\t\t\"Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tfinal Collection<E> test = allOf(enumType);\\n\" + ", "+\t\t\"\t                           ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation allOf(Class<capture#1-of ? extends Enum>) of the generic method allOf(Class<E>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tfinal Collection<E> test = allOf(enumType);\\n\" + ", "+\t\t\"\t                           ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type Collection needs unchecked conversion to conform to Collection<E>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tCollection<? extends Enum> colType = null;\\n\" + ", "+\t\t\"\t                     ^^^^\\n\" + ", "+\t\t\"Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"\tfinal Collection<E> test2 = colType;\\n\" + ", "+\t\t\"\t                            ^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Collection<capture#2-of ? extends Enum> to Collection<E>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21f24405a638c06a6d64c75dcc700104", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "90bd41abb04ddc0b62ccb0ab7de7fce3bd0144f4", "commitAfterChange": "53697a294b54e063a30982cc46502c67f3f098a5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\t\t\t\t\"-warn:allDeprecation,noEffectAssign,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$", "+\t\t\t\t\t\"-warn:allDeprecation,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$", "-\t\t\t\t\t\"-warn:noEffectAssign,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$", "+\t\t\t\t\t\"-warn:constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21f9f4e055f1f256bc007aaa133389aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1243, "methodNumberAfterChange": 1243, "signatureBeforeChange": " public void test1209()", "signatureAfterChange": " public void test1209()", "diff": ["-\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" +", "-\t\t\"\tthrowE(objs);\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\"\tthrowE(objs);\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "220daacd83bbea878dda2a6f230e3616", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \t \tpublic void testConditional1()", "signatureAfterChange": "  \tpublic void testConditional1()", "diff": ["-\t", "+", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                ^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "224c99a940b8d11fdbb62ec5b166e5cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testMoveSourceFolder3() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder3() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "225b3cbbfc63a4aa8eb6f3e690ccae28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void testTypeSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testTypeSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "227374c194bec181984b66cdcebe4b2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 248, "signatureBeforeChange": " public void test205_warn_options()", "signatureAfterChange": " public void test205_warn_options()", "diff": ["-\t\t\"The parameter i is never read\\n\" +", "+\t\t\"The value of the parameter i is not used\\n\" +", "-\t\t\"The local variable j is never read\\n\" +", "+\t\t\"The value of the local variable j is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "227b61eb9ee9248254f7b4eafab6c566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 381, "methodNumberAfterChange": 381, "signatureBeforeChange": "  public void test1023()", "signatureAfterChange": "  public void test1023()", "diff": ["-\t\t\t\"  void foo(Object that) {\\n\" +", "+\t\t\t\"  void foo() {\\n\" +", "-\t\t\t\"    while (that != null) {\\n\" +", "+\t\t\t\"    while (this != null) {\\n\" +", "-\t\t\"2. WARNING in X.java (at line 13)\\n\" +", "+\t\t\"2. WARNING in X.java (at line 13)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22aaa15baa997455ecef425475b1408d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void test022()", "signatureAfterChange": " \tpublic void test022()", "diff": ["-\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22b0a8d25b3d8b2ab593aacf92714c9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/modifying/ASTRewritingModifyingCopyTest.java", "commitBeforeChange": "0217fe699dae3418e82336ff6b6e5ebcab2d6807", "commitAfterChange": "f98315338f05019318b64fa2a92840c657a8762d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test0007() throws Exception", "signatureAfterChange": " \tpublic void test0007() throws Exception", "diff": ["-\t\tbuf.append(\"package test; public class Test {\\r\\n\");", "-\t\tbuf.append(\"\\r\\n\");", "+\t\tbuf.append(\"package test; public class Test {\\n\");", "+\t\tbuf.append(\"\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d04cb236e2783e3a7e910f120748e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations18Test.java", "commitBeforeChange": "a4e58088a1010e10b50ef0d8683567f65215eac1", "commitAfterChange": "e58a2ebf19f99fca487e8ddd26a3dd844cc59501", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tpublic void testLibsWithTypeParameters() throws Exception", "signatureAfterChange": "  \tpublic void testLibsWithTypeParameters() throws Exception", "diff": ["-\t\t\t\"Pb(964) Null constraint mismatch: The type '@Nullable String' is not a valid substitute for the type parameter '@NonNull W extends @NonNull U extends Object'\", // FIXME(stephan): @NonNull before W is bogus, see https://bugs.eclipse.org/456532", "+\t\t\t\"Pb(964) Null constraint mismatch: The type '@Nullable String' is not a valid substitute for the type parameter 'W extends @NonNull U extends Object'\",", "-\t\t\t\"Pb(964) Null constraint mismatch: The type '@Nullable String' is not a valid substitute for the type parameter '@NonNull Y extends @NonNull CharSequence'\", // FIXME(see above)", "+\t\t\t\"Pb(964) Null constraint mismatch: The type '@Nullable String' is not a valid substitute for the type parameter 'Y extends @NonNull CharSequence'\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230c54f07babc59088774e22f0bd4512", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "f7a4fed5e12ddd792bfd11e8778f8c9b3112f624", "commitAfterChange": "e10de2c4a1110dda4676cb780e20b994bb7f5186", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test0040() throws JavaModelException", "signatureAfterChange": " \tpublic void test0040() throws JavaModelException", "diff": ["-\t\tassertEquals(\"wrong key\", \"T:test0040/A/test0040.Tfoo()\", binding.getKey());", "+\t\tassertEquals(\"wrong key\", \"T:test0040/A/Tfoo()\", binding.getKey());", "-\t\tassertEquals(\"wrong key\", \"T:test0040/A/test0040.Tfoo()\", binding2.getKey());\t\t", "+\t\tassertEquals(\"wrong key\", \"T:test0040/A/Tfoo()\", binding2.getKey());\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23135f155e505930f1fdf9100ee2ff7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "0d3b917e085a30ae0d0e62e1fdd9fed7538807f0", "commitAfterChange": "76b6a3cfd736c0a5d2fa443496ebcce87b457034", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " public void test101()", "signatureAfterChange": " public void test101()", "diff": ["-\t\t\t\"3. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 14)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "234808111c71d5d02287f3216b5a5aac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 369, "methodNumberAfterChange": 369, "signatureBeforeChange": "\r public void testBug474918b()", "signatureAfterChange": "\r public void testBug474918b()", "diff": ["-\t\t\"                                          int      a             = 55;\\r\\n\" + \r", "-\t\t\"                                          Object   cdddddddddddd = null;\\r\\n\" + \r", "+\t\t\"                                          int    a             = 55;\\r\\n\" + \r", "+\t\t\"                                          Object cdddddddddddd = null;\\r\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "234db7355fbe5919b99ea0df921f33ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testAnonymousType1() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType1() throws JavaModelException", "diff": ["-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2353bf60f73005db8bbc6cc5f63dcd0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "775bb7e86633292b115b2935c87e101190166e9d", "commitAfterChange": "4a26249aa893b7bf1faa1e1388aeb96ba4c3a814", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003()", "diff": ["-\t\t\t\"  // Method descriptor  #15 ()I\\n\" + ", "+\t\t\t\"  // Method descriptor #15 ()I\\n\" + ", "-\t\t\t\"  // Method descriptor  #6 ()V\\n\" + ", "+\t\t\t\"  // Method descriptor #6 ()V\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "237ea61fd1a2b238ff949c6a08716091", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "fa568df637cfba49109de9a23ecbf57eda89325f", "commitAfterChange": "699f85df0061a8b41250aa99562a0fc140375ee5", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " public void test0074() throws JavaModelException", "signatureAfterChange": " public void test0074() throws JavaModelException", "diff": ["-\t\t\t\t\"ZZZ2[METHOD_IMPORT]{ZZZ2;, Ltest0074.p.ImportedClass$Inner;, ()V, ZZZ2, null, [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"ZZZ2[METHOD_IMPORT]{ZZZ2;, Ltest0074.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\t\"ZZZ2[METHOD_NAME_REFERENCE]{ZZZ2;, Ltest0074.p.ImportedClass$Inner;, ()V, ZZZ2, null, [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"ZZZ2[METHOD_NAME_REFERENCE]{ZZZ2;, Ltest0074.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23a3261c611c32f607db9b9b7c430794", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTypeCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void test006() throws JavaModelException", "signatureAfterChange": "  public void test006() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23f66ea6b42ecd40690bc84f492d2de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "84c5b115e7466dfc6e19cd3055480421b2384a2d", "commitAfterChange": "1d6638787ae042a98f74eaa1a6155e74e1a941be", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void test015()", "signatureAfterChange": " \tpublic void test015()", "diff": ["-\t\t\t\t\"1 problem (1 error)\",", "+\t\t\t\t\"1 problem (1 error)\\n\",", "-\t\t\t\"1 problem (1 error)\";", "+\t\t\t\"1 problem (1 error)\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2400c32eb0834f4be5efde89a2eddc61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void test004()", "signatureAfterChange": "  \tpublic void test004()", "diff": ["-\t\t\"Javadoc: Unknown cannot be resolved or is not a type\\n\" + ", "+\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" + ", "-\t\t\"Javadoc: Unknown cannot be resolved or is not a type\\n\" + ", "+\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "240b0bdd3d72e4379c33a4cc523671d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " \tpublic void test0547() throws JavaModelException", "signatureAfterChange": " \tpublic void test0547() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$74;\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$74;^1\", typeBinding.getKey());", "-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$100;\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$100;^1\", typeBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "241d315755b5a6d132b84c800f0a9f68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 323, "methodNumberAfterChange": 324, "signatureBeforeChange": "  public void test1018()", "signatureAfterChange": "  public void test1018()", "diff": ["-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o can only be null at this location\\n\" + ", "-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Redundant assignment: The variable o can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243203f0b224aa9a8ab00b3e326f71cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testTypeMultipleArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testTypeMultipleArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric.GenericMember] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [g1.t.m.def.NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [g1.t.m.def.NonGeneric.GenericMember] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2442ef40214781d98b477015043ef141", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  public void test023() throws JavaModelException", "signatureAfterChange": "  public void test023() throws JavaModelException", "diff": ["-\t\t\"BasicTestTextInsException[JAVADOC_TYPE_REF]{{@link BasicTestTextInsException }, javadoc.text, Ljavadoc.text.BasicTestTextInsException;, null, null, \"+this.positions+R_DICUNREETIT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_TYPE_REF]{{@link BasicTestTextIns }, javadoc.text, Ljavadoc.text.BasicTestTextIns;, null, null, \"+this.positions+R_DICENUNRIT+\"}\\n\" +", "+\t\t\"BasicTestTextInsException[JAVADOC_TYPE_REF]{{@link BasicTestTextInsException}, javadoc.text, Ljavadoc.text.BasicTestTextInsException;, null, null, \"+this.positions+R_DICUNREETIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_TYPE_REF]{{@link BasicTestTextIns}, javadoc.text, Ljavadoc.text.BasicTestTextIns;, null, null, \"+this.positions+R_DICENUNRIT+\"}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "244de99fdb02a8f99989751cae4ff05e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathInitializerTests.java", "commitBeforeChange": "20f9880068ffc8b9ca5e4df40a1417c5832ce46b", "commitAfterChange": "0fb012af3c6557520ab00415c58833602b027192", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testVariableInitializer7() throws CoreException", "signatureAfterChange": " public void testVariableInitializer7() throws CoreException", "diff": ["-\t\t\t\"\tlib.jar[*]: {REMOVED FROM CLASSPATH}\\n\" + ", "-\t\t\t\"\tlib2.jar[*]: {ADDED TO CLASSPATH}\"", "+\t\t\t\"\t/P1/lib.jar[*]: {REMOVED FROM CLASSPATH}\\n\" + ", "+\t\t\t\"\t/P1/lib2.jar[*]: {ADDED TO CLASSPATH}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2466b0983dce13e086a98dd29f65bd33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void testBug233259c() throws JavaModelException", "signatureAfterChange": " public void testBug233259c() throws JavaModelException", "diff": ["-\t\t\"\t * @see <a href=\\\"http://012346789\\\">\\n\" +", "-\t\t\"\t *      Test</a>\\n\" +", "+\t\t\"\t * @see <a\\n\" +", "+\t\t\"\t *      href=\\\"http://012346789\\\">Test</a>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "248c0ed7d7da89c84de48278839a34ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void testDeltaDiscardPrimaryWorkingCopy1() throws CoreException", "signatureAfterChange": " \tpublic void testDeltaDiscardPrimaryWorkingCopy1() throws CoreException", "diff": ["-\t\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24c85bbbc51f8b58442d82367e7bee06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 266, "methodNumberAfterChange": 267, "signatureBeforeChange": " public void testBug305518_wksp2_03()", "signatureAfterChange": " public void testBug305518_wksp2_03()", "diff": ["-\t\t\"\t *  String s = ... ; // get string from somewhere\\n\" + ", "-\t\t\"\t *  byte [] compressed = UnicodeCompressor.compress(s);\\n\" + ", "+\t\t\"\t*  String s = ... ; // get string from somewhere\\n\" + ", "+\t\t\"\t*  byte [] compressed = UnicodeCompressor.compress(s);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24e881a746c092ceff16471997b28e56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "87035e28d15718dec923cda9730195aba7b8ab31", "commitAfterChange": "d7e74f0817baa712407da5eb003f21f0a3eeda6d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void test009()", "signatureAfterChange": " \tpublic void test009()", "diff": ["+\tpublic void test009() {", "-\tpublic void test009() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "252da4d583213fffc7a161a760755fd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic void testBug83304_TypeStringPattern() throws CoreException", "signatureAfterChange": " \tpublic void testBug83304_TypeStringPattern() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "253d19f41dbebfbfbee9d14d147d7c50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void testJavadocMethodReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodReference() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25442e78805d490fb6b7ca74ec0f93fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "dee823e8e9454e3bbc323b61e0e66446bfc3e48a", "commitAfterChange": "c903817ea1b3b3294907f8d4a93524af350dfca3", "methodNumberBeforeChange": 656, "methodNumberAfterChange": 656, "signatureBeforeChange": " \tpublic void test0651()", "signatureAfterChange": " \tpublic void test0651()", "diff": ["-\t\t\t\t\"\t\treturn select(box.getValues()); // 1\\n\" + ", "+\t\t\t\t\"\t\treturn selectedValues(box.getValues()); // 1\\n\" + ", "-\t\t\t\t\"\tpublic static <G> Values<G> select(Values<? extends G> v) {\\n\" + ", "+\t\t\t\t\"\tpublic static <G> Values<G> selectedValues(Values<? extends G> v) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "254ebb21bed521288cbf944f60b0f556", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SelectionTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void test28()", "signatureAfterChange": " public void test28()", "diff": ["-\tString expectedCompletionNodeToString = \"<SelectOnExplicitConstructorCall:new G().super()>\";", "+\tString expectedCompletionNodeToString = \"<SelectOnExplicitConstructorCall:new G().super()>;\";", "-\t\t\"    };\\n\" + ", "+\t\t\"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "255c0ba1bb7fb63a75ed00f1501ce037", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 254, "signatureBeforeChange": " public void test0254()", "signatureAfterChange": " public void test0254()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:impl>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:impl>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2585e12e8e9e882d5afd12db544eb608", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 244, "methodNumberAfterChange": 244, "signatureBeforeChange": " public void test201_warn_options()", "signatureAfterChange": " public void test201_warn_options()", "diff": ["-\t\t\"The parameter i is never read\\n\" +", "+\t\t\"The value of the parameter i is not used\\n\" +", "-\t\t\"The local variable j is never read\\n\" +", "+\t\t\"The value of the local variable j is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "258de24d89c6968fb7ed418873eba5ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 572, "methodNumberAfterChange": 572, "signatureBeforeChange": " public void testBug210691() throws CoreException", "signatureAfterChange": " public void testBug210691() throws CoreException", "diff": ["-\t\t\"src/test/Ref.java [import \ufffd|pack.Test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Ref.java test.Ref.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\"", "+\t\t\"src/test/Ref.java [import !|pack.Test|!;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Ref.java test.Ref.test [\t!|Test|! test;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25a2dfe5a438583975242250d3b93f7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ArrayTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test005()", "signatureAfterChange": " public void test005()", "diff": ["-\t\t\"    1  anewarray java.lang.Object [4]\\n\" + ", "-\t\t\"    4  putstatic X.X : java.lang.Object[] [10]\\n\" + ", "+\t\t\"    1  anewarray java.lang.Object [3]\\n\" + ", "+\t\t\"    4  putstatic X.X : java.lang.Object[] [9]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25be68978c06fd5310aeba1f57983d1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "572725d14f6a5b50596855866ead2608fd5f6e51", "commitAfterChange": "bf41a0f465875b9e5984415f1f94595d93a282d9", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void test074()", "signatureAfterChange": " \tpublic void test074()", "diff": ["-\t\t\t\t\"    Foo _annotation() default @Foo();\\n\" + ", "+\t\t\t\t\"    Foo _annotation() default @Foo;\\n\" + ", "-\t\t\t\"  public abstract Foo _annotation() default @Foo();\\n\" + ", "+\t\t\t\"  public abstract Foo _annotation() default @Foo;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25bfac2ca37e5b1ce2190e057e9e417e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 88, "signatureBeforeChange": " public void testMethodReferenceInInnerClass() throws CoreException", "signatureAfterChange": " public void testMethodReferenceInInnerClass() throws CoreException", "diff": ["-\t\t\"src/CA.java CA$CB.f() -> void [m()]\\n\" +", "-\t\t\"src/CA.java CA$CB$CC.f() -> void [m()]\", ", "+\t\t\"src/CA.java void CA$CB.f() [m()]\\n\" + ", "+\t\t\"src/CA.java void CA$CB$CC.f() [m()]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25c02f930c32d6879843f39babef5b6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 173, "signatureBeforeChange": " public void test0172()", "signatureAfterChange": " public void test0172()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pri>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pri>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25dd236f185a06b7be8cbd424c642e9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "84c5b115e7466dfc6e19cd3055480421b2384a2d", "commitAfterChange": "1d6638787ae042a98f74eaa1a6155e74e1a941be", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t        \"8 problems (8 warnings)\",", "+\t        \"8 problems (8 warnings)\\n\",", "-        \"8 problems (8 warnings)\",", "+        \"8 problems (8 warnings)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261b4ffe67f4aa074df1c04f50e12999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "7365eb3c9bc3c4e2bcff5eac5d972246c40d599d", "commitAfterChange": "dd4e66116fa81ff4f74deaa928460684d87fc74d", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testNullTypeInference3b()", "signatureAfterChange": " \tpublic void testNullTypeInference3b()", "diff": ["-\t// conflicting annotations from type variable application and type variable substitution", "+\t// conflicting annotations from type variable application and type variable substitution -> exclude null annotations from inference", "-\t\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable String m1(@NonNull @Nullable String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@NonNull String\\' but this expression has type \\'@Nullable String\\'\\n\" + ", "-\t\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable String m2(@NonNull String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@NonNull String\\' but this expression has type \\'@Nullable String\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2627c33dcf188164f9db23021fae202f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void testBug233259c() throws JavaModelException", "signatureAfterChange": " public void testBug233259c() throws JavaModelException", "diff": ["-\t\t\"\t * @see <a\\n\" +", "-\t\t\"\t *      href=\\\"http://012346789\\\">Test</a>\\n\" +", "+\t\t\"\t * @see <a href=\\\"http://012346789\\\">\\n\" +", "+\t\t\"\t *      Test</a>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265cba70933a68f1f6ffdcd51a32bebd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "commitAfterChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic void test093()", "signatureAfterChange": " \tpublic void test093()", "diff": ["-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" +", "-\t\t\"\t@Inherited\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "+\t\t\"\t@Inherited\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26695bab03ebceeaf87296cc643951d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "87035e28d15718dec923cda9730195aba7b8ab31", "commitAfterChange": "d7e74f0817baa712407da5eb003f21f0a3eeda6d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test008()", "signatureAfterChange": " \tpublic void test008()", "diff": ["+\tpublic void test008() {", "-\tpublic void test008() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "268ad804e65664f3b0ae1bbfa0edce1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 913, "methodNumberAfterChange": 913, "signatureBeforeChange": " public void test0906()", "signatureAfterChange": " public void test0906()", "diff": ["-\t\t\t\"Type safety: The cast from X to I<Integer> is actually checking against the erased type I\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from X to I<Integer>\\n\" + ", "-\t\t\t\"Type safety: The cast from X to I<Integer> is actually checking against the erased type I\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from X to I<Integer>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "269eca01f058c87c89078ae6f6072b16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void test064()", "signatureAfterChange": " \tpublic void test064()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26f7bc4e12a788967a2c3b54fdc0f909", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "c9e02661baa80cf1f75154d10de9df61ce3f636d", "commitAfterChange": "d92419d7d90bedd902391c7e83696cf6304867ae", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void test004()", "signatureAfterChange": "  \tpublic void test004()", "diff": ["-\t\t\t\"Yint cannot be resolved\\n\" +", "+\t\t\t\"Yint cannot be resolved to a variable\\n\" +", "-\t\t\t\"Zint cannot be resolved\\n\" +", "+\t\t\t\"Zint cannot be resolved to a variable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27071281b0831947cfe8c2dfb6c48cee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void testJavadocConstructorReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocConstructorReferenceWithJavadoc() throws CoreException", "diff": ["-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\"", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched()] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched()] EXACT_MATCH INSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "273b72c103044937ed16fdc390f67879", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4c370db17fcad0e528d16b2fecef0952e714ead1", "commitAfterChange": "73b4b882573d866af4a2886a5430207907acc99e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void test0038() throws JavaModelException", "signatureAfterChange": " \tpublic void test0038() throws JavaModelException", "diff": ["-\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0038\", \"Data22.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0038\", \"X.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tassertEquals(\"Wrong name\", \"Data22<T>\", typeBinding2.getName());", "+\t\tassertEquals(\"Wrong name\", \"X<T>\", typeBinding2.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "274bdb31c7200d213c8a4ed871f4c5ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": " public void testUA_1FHISJJ_1()", "signatureAfterChange": " public void testUA_1FHISJJ_1()", "diff": ["-\tString expectedCompletionNodeToString = \"<CompleteOnMemberAccess:new String[]{\\\"Mark unublishable\\\",null,\\\"Properties...\\\",}.>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnMemberAccess:new String[]{\\\"Mark unublishable\\\", null, \\\"Properties...\\\"}.>\";", "-\t\t\"    Object[] items = <CompleteOnMemberAccess:new String[]{\\\"Mark unublishable\\\",null,\\\"Properties...\\\",}.>;\\n\" + ", "+\t\t\"    Object[] items = <CompleteOnMemberAccess:new String[]{\\\"Mark unublishable\\\", null, \\\"Properties...\\\"}.>;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28112dfa52c2b97090663f3840320d79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void test018()", "signatureAfterChange": " \tpublic void test018()", "diff": ["-\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "281faba37513e1474e410d2ada2d1ed0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public void test027() throws JavaModelException", "signatureAfterChange": "  public void test027() throws JavaModelException", "diff": ["-\t\t\"IllegalMonitorStateException[JAVADOC_TYPE_REF]{{@link IllegalMonitorStateException }, java.lang, Ljava.lang.IllegalMonitorStateException;, null, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "-\t\t\"InterruptedException[JAVADOC_TYPE_REF]{{@link InterruptedException }, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "+\t\t\"IllegalMonitorStateException[JAVADOC_TYPE_REF]{{@link IllegalMonitorStateException}, java.lang, Ljava.lang.IllegalMonitorStateException;, null, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "+\t\t\"InterruptedException[JAVADOC_TYPE_REF]{{@link InterruptedException}, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DICNRIT+\"}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28b030b165135370c993915a0f5b27b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " public void testBug260011_01() throws JavaModelException", "signatureAfterChange": " public void testBug260011_01() throws JavaModelException", "diff": ["-\t\t\"\t * <li style=\\\"font-variant:small-caps;\\\">some text to be styled a certain way\\n\" + ", "-\t\t\"\t * </li>\\n\" + ", "+\t\t\"\t * <li style=\\\"font-variant:small-caps;\\\">\\n\" + ", "+\t\t\"\t * some text to be styled a certain way</li>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2918a3ef9b08fca7e35d73b295871639", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "cb764d0f635c3538feb2f431a07bf4883bc5e3de", "commitAfterChange": "2fc42eeb502a121cefe1f87a9fd2e92cf7c57bec", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " public void test0525_try_finally_unchecked_exception()", "signatureAfterChange": " public void test0525_try_finally_unchecked_exception()", "diff": ["-\t\t\"1. ERROR in X.java (at line 13)\\r\\n\" +", "-\t\t\"\to.toString();\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 13)\\n\" +", "+\t\t\"\to.toString();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "293d800c4dc3216ec3161b4298a14113", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "20d87d7260da51837a3bc4f2cefbc874868e947f", "commitAfterChange": "b780374be3c7661000af7572b9b8f18e78e84d97", "methodNumberBeforeChange": 620, "methodNumberAfterChange": 620, "signatureBeforeChange": " \tpublic void test618()", "signatureAfterChange": " \tpublic void test618()", "diff": ["-\t\t\t\"Cannot make a static reference to the type parameter Entry\\n\" + ", "+\t\t\t\"Cannot make a static reference to the non-static type Entry\\n\" + ", "-\t\t\t\"Cannot make a static reference to the type parameter Entry\\n\" + ", "+\t\t\t\"Cannot make a static reference to the non-static type Entry\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29954f11ca857b7e083f244bf4403f3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "f7f89d61cddd4437d454a7cce2d799dfbd0c94b0", "commitAfterChange": "bff2f093f2ca890f300037b450293438832a5492", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void testFallThrough2()", "signatureAfterChange": " public void testFallThrough2()", "diff": ["-\t\t\"    \twhile (true) {\\n\" +", "+\t\t\"    \touter: while (true) {\\n\" +", "-\t\t\"    \t\t\t\tSystem.exit(0);\\n\" +", "+\t\t\"    \t\t\t\tbreak outer;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29a917bd73a487e4b63bf5db45f8e526", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " public void test070()", "signatureAfterChange": " public void test070()", "diff": ["-\t\t\"The return type is incompatible with A.foo(), B.foo()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods A.foo(), B.foo()\\n\" +", "-\t\t\"The return type is incompatible with B.foo(), A.foo()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods B.foo(), A.foo()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a2e85ab6febcf37903234c70b8e7acc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "7336215b569e42bf0d7946c272b0da8ff71d12fb", "commitAfterChange": "e29082e6108e43f171cfe9fae0a56914a1f2ec3e", "methodNumberBeforeChange": 984, "methodNumberAfterChange": 984, "signatureBeforeChange": " public void testBug350652d() throws JavaModelException", "signatureAfterChange": " public void testBug350652d() throws JavaModelException", "diff": ["-\t\t\t\"public class IZZException extends Exception {\\n\" +", "+\t\t\t\"class IZZException extends Exception {\\n\" +", "-\t\t\t\"public class IZZAException extends IZZException {\\n\" +", "+\t\t\t\"class IZZAException extends IZZException {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a3676a1e4fd7f49e771baeb7821778f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 372, "methodNumberAfterChange": 372, "signatureBeforeChange": " public void test314_warn_options()", "signatureAfterChange": " public void test314_warn_options()", "diff": ["-\t\t\"Missing nullable annotation: inherited method from X declares this parameter as @Nullable\\n\" + ", "+\t\t\"Missing nullable annotation: inherited method from X specifies this parameter as @Nullable\\n\" + ", "-\t\t\"Missing non-null annotation: inherited method from X declares this parameter as @NonNull\\n\" +", "+\t\t\"Missing non-null annotation: inherited method from X specifies this parameter as @NonNull\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a495784a3d9aa81c0b16d5b79874bca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 559, "methodNumberAfterChange": 559, "signatureBeforeChange": " \tpublic void test0554()", "signatureAfterChange": " \tpublic void test0554()", "diff": ["-\t\t\t\"Type safety: The cast from X<capture#1-of ? extends Object> to X<String> is actually checking against the erased type X\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from X<capture#1-of ? extends Object> to X<String>\\n\" + ", "-\t\t\t\"Type safety: The cast from X<capture#5-of ? extends Object> to X3<String> is actually checking against the erased type X3\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from X<capture#5-of ? extends Object> to X3<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a57704704ebd57c9a0dfeb5490c162d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 667, "methodNumberAfterChange": 667, "signatureBeforeChange": " public void test663()", "signatureAfterChange": " public void test663()", "diff": ["-\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a8ad369881f738079687fdf35709888", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " public void test0084()", "signatureAfterChange": " public void test0084()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:int>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:int>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a8e9c2d58e68ece1bc1aef9d2453a96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "d7c990d50da3096d1d0c829cba02221aeda7589f", "commitAfterChange": "924bb53fdc2b8abef6daacf4b8eb0fd3e9ce7fd5", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 205, "signatureBeforeChange": " \tpublic void test0575() throws JavaModelException", "signatureAfterChange": " \tpublic void test0575() throws JavaModelException", "diff": ["-\t\t\t\t\"\t/*start1*/String foo(String o) {}/*end1*/\\n\" + ", "-\t\t\t\t\"\t/*start2*/String foo(Object o) {}/*end2*/\\n\" + ", "+\t\t\t\t\"\t/*start1*/String foo(String o) {return null;}/*end1*/\\n\" + ", "+\t\t\t\t\"\t/*start2*/String foo(Object o) {return null;}/*end2*/\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2aaa80d9f6b877d3e1c105d0f8ea9d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments10() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments10() throws CoreException", "diff": ["-\t\tsearch(\"g5.m.def.Multiple<?,? extends Throwable,? extends RuntimeException>.generic(Object,Exception,RuntimeException) % <?,? extends Throwable,? extends RuntimeException>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"g5.m.def.Multiple<?,? extends Throwable,? extends RuntimeException>.<?,? extends Throwable,? extends RuntimeException>generic(Object,Exception,RuntimeException)\", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [generic(new Object(), new Exception(), new RuntimeException())] EQUIVALENT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [<Object, Exception, RuntimeException>generic(new Object(), new Exception(), new RuntimeException())] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2abc3dec05cfdff7de934431080bc339", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " public void test_default_nullness_011()", "signatureAfterChange": " public void test_default_nullness_011()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2abce02dbb3feb6420c09ee1399ab032", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 298, "signatureBeforeChange": " public void testBug330313_wksp1_21_njl()", "signatureAfterChange": " public void testBug330313_wksp1_21_njl()", "diff": ["-\t\t\"\t\treturn !(getViewer() == null || getViewer().getControl() == null || getViewer()\\n\" + ", "-\t\t\"\t\t\t\t.getControl().isDisposed());\\n\" + ", "+\t\t\"\t\treturn !(getViewer() == null || getViewer().getControl() == null\\n\" + ", "+\t\t\"\t\t\t\t|| getViewer().getControl().isDisposed());\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b11ba4af02fbba2eab7134f4d9ac132", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 325, "methodNumberAfterChange": 325, "signatureBeforeChange": " \tpublic void test323()", "signatureAfterChange": " \tpublic void test323()", "diff": ["-\t\t\t\"Type safety: The expression of type G is converted to G<String> using a raw conversion. References to generic type G<T> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type G needs unchecked conversion to conform to G<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type G.Member is converted to G<Thread>.Member using a raw conversion. References to generic type G<T>.Member should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type G.Member needs unchecked conversion to conform to G<Thread>.Member\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b58884fb5e519d79e31918105058c95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "973af06dbc6df022ac42e8e0a0c238581d8558f6", "commitAfterChange": "f61787e560ec300f4e60b2d9cc64378b38b8a03a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void test007()", "signatureAfterChange": " public void test007()", "diff": ["-\t\t\"\t^^^^^^^^^^\\n\" + ", "-\t\t\"Cannot throw null\\n\" + ", "-\t\t\"----------\\n\"", "-\t);", "+\t\t\"\t      ^^^^\\n\" + ", "+\t\t\"Cannot throw null as an exception\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b6e5fcdf324fcd895ac804890cf7381", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "commitAfterChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "methodNumberBeforeChange": 255, "methodNumberAfterChange": 255, "signatureBeforeChange": " public void test248()", "signatureAfterChange": " public void test248()", "diff": ["-\t\t\t\"1. ERROR in TestAnnotation.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tString targetItem() default void.class;\\r\\n\" +", "+\t\t\t\"1. ERROR in TestAnnotation.java (at line 2)\\n\" +", "+\t\t\t\"\tString targetItem() default void.class;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b7b55a1a22ef011d8b5ade982973a1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "af9bbbd46257142e006853d95525656db05c0be8", "commitAfterChange": "75441f37a4b77efa641f7e3f5866e117cb328da6", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testMoveSourceFolder5() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder5() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b7bbd2962d3f76e558da8382ef9ac7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug101283b()", "signatureAfterChange": " \tpublic void testBug101283b()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class X<T, F> {\\n\" +", "-\t\t\t\"\t               ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\t* @see T Variable \\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\t* @see F Variable\\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\tstatic class Entry<L, R> {\\n\" +", "-\t\t\t\"\t                   ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "+\t\t\t\"\t               ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @see T Variable \\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see F Variable\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tstatic class Entry<L, R> {\\n\" + ", "+\t\t\t\"\t                   ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ba97a4d82e104a25c79ba1aafd8193d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "21859368186bfa84e754d0992a1e8744a471fc21", "commitAfterChange": "616e0cc4b1bc013d67f08c19f7ad98694e8af3c9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test0005()", "signatureAfterChange": " public void test0005()", "diff": ["-\t\t\"Z cannot be resolved to a type\\n\" + ", "+\t\t\"Z[] cannot be resolved to a type\\n\" + ", "-\t\t\"Z cannot be resolved to a type\\n\" + ", "+\t\t\"Z[] cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c45d3d8830fd1f39072b776fd7244e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1317, "methodNumberAfterChange": 1317, "signatureBeforeChange": " public void test1283()", "signatureAfterChange": " public void test1283()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 8)\\r\\n\" +", "-\t\t\t\"\tcombine(too, oo);\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 8)\\n\" +", "+\t\t\t\"\tcombine(too, oo);\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c8a29f652d515f5a168001be4255dee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "fa7671585f2cb4ab0fcb2cd24f007231af7e30f8", "commitAfterChange": "4f48830884ee6a89ef511f38d2067ccf03cfa452", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": " \tpublic void testBug69302negative()", "signatureAfterChange": " \tpublic void testBug69302negative()", "diff": ["-\t\t\t\t\"Javadoc: Unknown cannot be resolved or is not a type\\n\" + ", "+\t\t\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" + ", "-\t\t\t\t\"Javadoc: Unknown cannot be resolved or is not a type\\n\" + ", "+\t\t\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c94054300df3b467494848774f98d0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bacbe6f6e994ffc49a94960691c76bff97cb04d5", "commitAfterChange": "719705b20dc5e72fab3b2b50b669f9dfc58049aa", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " public void test401610h()", "signatureAfterChange": " public void test401610h()", "diff": ["-\t\t\t\t\"\t                         ^^\\n\" + ", "-\t\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + ", "+\t\t\t\t\"\t                  ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Void methods cannot return a value\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ca9c3938eac79be8deb6daa35f45ec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 289, "methodNumberAfterChange": 291, "signatureBeforeChange": " public void testBug313651_wksp3_01()", "signatureAfterChange": " public void testBug313651_wksp3_01()", "diff": ["-\t\t\"// start of comment\\n\" + ", "-\t\t\"// MyFirstInterface {\\n\" + ", "+\t\t\"\t\t// start of comment\\n\" + ", "+\t\t\"\t\t// MyFirstInterface {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cb44b15068571f4976a4dc8270dfd2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 247, "methodNumberAfterChange": 247, "signatureBeforeChange": " public void test204_warn_options()", "signatureAfterChange": " public void test204_warn_options()", "diff": ["-\t\t\"The parameter i is never read\\n\" +", "+\t\t\"The value of the parameter i is not used\\n\" +", "-\t\t\"The local variable j is never read\\n\" +", "+\t\t\"The value of the local variable j is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cb504b43d715cabcaa8478496f23d83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " public void testBug239719() throws JavaModelException", "signatureAfterChange": " public void testBug239719() throws JavaModelException", "diff": ["-\t\t\" * \t&#064;Override\\n\" + ", "+\t\t\" * \t&#64;Override\\n\" + ", "-\t\t\" * \t\tSystem.out.println(&quot;Press Shift+Ctrl+F to format&quot;);\\n\" + ", "+\t\t\" * \t\tSystem.out.println(\\\"Press Shift+Ctrl+F to format\\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ce6fe69cf8defe3e44cbd283dff2612", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "5ae7e6b78bc18a365a04a008c907250a535fa48a", "commitAfterChange": "e30351551cacd61d107b0f2c8e2d961ea6077c69", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test0005()", "signatureAfterChange": " public void test0005()", "diff": ["-\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\"\t         ^\\n\" + ", "-\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\"\t         ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d506d9b65c8ec9f9864c17ba5007289", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test014()", "signatureAfterChange": " \tpublic void test014()", "diff": ["-\t\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    32  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    32  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2db3aad730b1f8e5ebfb9ec57f01c75d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test085()", "signatureAfterChange": " public void test085()", "diff": ["-\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, static imports are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, static imports are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e1e1c9a1ade02eea626944371b513b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug101283d()", "signatureAfterChange": " \tpublic void testBug101283d()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e263cddadc5394d81629b15d8db78d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "2a90d883e05154207090ce25c3cd6c71b66259ab", "commitAfterChange": "624d1b561ac3289a55fdc4319658cfc9a95be40b", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test032()", "signatureAfterChange": " \tpublic void test032()", "diff": ["-\t\t\t\"-<E:Ljava/lang/Object;>Ljava.util.List;\",", "-\t\t\t\"Ljava/util/List;&!Lp1/X;-Ljava/util/List<TE;>;123;\"", "+\t\t\t\"!-Ljava.util.List<TT;>;\",", "+\t\t\t\"Ljava/util/List;&!Lp1/X;-Ljava/util/List<Lp1/X;:TT;>;123;\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e29384647c2ed40c807ae56a273f5c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExclusionPatternsTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void testAddExclusionOnFolderUnderProject() throws CoreException", "signatureAfterChange": " public void testAddExclusionOnFolderUnderProject() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {ADDED TO CLASSPATH | REMOVED FROM CLASSPATH}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {ADDED TO CLASSPATH | REMOVED FROM CLASSPATH}\\n\" + ", "-\t\t\t\"[default] [in [project root] [in P1]]\",", "+\t\t\t\"<default> [in <project root> [in P1]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e4683016417c1d2d3f1877f0499dcbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testBug80264_MethodsIgnoreReturnType() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80264_MethodsIgnoreReturnType() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e568a0506c4d67f6e48b7e857ee5d5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "2f57f8dfaade218a320169042ea7ed8e042be61d", "commitAfterChange": "870bb4f621dd0b8090426a7261d67a43a6dc9aa9", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t        \"8 problems (8 warnings)\",", "+\t        \"8 problems (8 warnings)\\n\",", "-        \"8 problems (8 warnings)\",", "+        \"8 problems (8 warnings)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e69716ab1c7abf8c5e0194a180fc3a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug101283d()", "signatureAfterChange": " \tpublic void testBug101283d()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class X<T, F> {\\n\" +", "-\t\t\t\"\t               ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\t* @see T Variable \\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\t* @see F Variable\\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\tclass Entry<L, R> {\\n\" +", "-\t\t\t\"\t            ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "+\t\t\t\"\t               ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @see T Variable \\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see F Variable\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tclass Entry<L, R> {\\n\" + ", "+\t\t\t\"\t            ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eb2c6544fe9d2af0ac00c3978d2ed00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": " public void test0334_if_else()", "signatureAfterChange": " public void test0334_if_else()", "diff": ["-\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable o cannot be null at this location\\n\" + ", "-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null pointer access: The variable o can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ec70cfafc3a41b651d2fda71f57bf52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void test021()", "signatureAfterChange": " \tpublic void test021()", "diff": ["-\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ef09b87c845f91beb5f259a76e8825e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "598af0e6827857674121fca8a2bf3b4d237fcc0c", "commitAfterChange": "161fa8170f54ac05fe741bfd4320bed612f3336b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void testDeleteMultipleMembersFromVariousCUs() throws CoreException", "signatureAfterChange": " public void testDeleteMultipleMembersFromVariousCUs() throws CoreException", "diff": ["-\t\t\t\"\t\t\tX.java[*]: {CHILDREN | FINE GRAINED}\\n\" + ", "+\t\t\t\"\t\t\tX.java[*]: {CHILDREN | FINE GRAINED | PRIMARY RESOURCE}\\n\" + ", "-\t\t\t\"\t\t\tY.java[*]: {CHILDREN | FINE GRAINED}\\n\" + ", "+\t\t\t\"\t\t\tY.java[*]: {CHILDREN | FINE GRAINED | PRIMARY RESOURCE}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2efbf1c456034d56ca191eb4f385d1c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "87035e28d15718dec923cda9730195aba7b8ab31", "commitAfterChange": "d7e74f0817baa712407da5eb003f21f0a3eeda6d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test007()", "signatureAfterChange": " \tpublic void test007()", "diff": ["+\tpublic void test007() {", "-\tpublic void test007() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f06ab03d55c06eb627d4deaf138f3ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "613465937083a08b2d994b2ce9b19aa8585cfd49", "commitAfterChange": "e589570c4bd9e6c5ed804728bca5f124c9938845", "methodNumberBeforeChange": 1370, "methodNumberAfterChange": 1370, "signatureBeforeChange": " public void test1336()", "signatureAfterChange": " public void test1336()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\tOther<String>.Member m = (Other<String>.Member) om2;\\n\" +", "-\t\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot cast from Other2<?>.Member2<capture#1-of ?> to Other<String>.Member\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tOther<String>.Member m = (Other<String>.Member) om2;\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Other2<?>.Member2<capture#1-of ?> to Other<String>.Member\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f252df0d258c9dc9103161a79f92748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testDeltaBecomeWorkingCopy() throws CoreException", "signatureAfterChange": " \tpublic void testDeltaBecomeWorkingCopy() throws CoreException", "diff": ["-\t\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f2e96a02ddb93af1a41c1c9e80f5be8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 249, "methodNumberAfterChange": 249, "signatureBeforeChange": " public void testBug313524_wksp1_11() throws JavaModelException", "signatureAfterChange": " public void testBug313524_wksp1_11() throws JavaModelException", "diff": ["-\t\t\"\t\treportError(AntLaunchConfigurationMessages\\n\" + ", "-\t\t\"\t\t\t\t.getString(\\\"AntLaunchShortcut.Unable\\\"), null); //$NON-NLS-1$\t\\n\" + ", "+\t\t\"\t\treportError(AntLaunchConfigurationMessages.getString(\\n\" + ", "+\t\t\"\t\t\t\t\\\"AntLaunchShortcut.Unable\\\"), null); //$NON-NLS-1$\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f2f0227c61c96fb00d507e3ea5ba4c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new Single<Object>(new Object())] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new Single<Object>(new Object())] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f3fbe567dbd21987d94a7aada02962f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug101283b()", "signatureAfterChange": " \tpublic void testBug101283b()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "-\t\t\t\"\t               ^^^^\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t* @see T Variable \\n\" + ", "-\t\t\t\"\t       ^\\n\" + ", "-\t\t\t\"Javadoc: Invalid reference\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t* @see F Variable\\n\" + ", "-\t\t\t\"\t       ^\\n\" + ", "-\t\t\t\"Javadoc: Invalid reference\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tstatic class Entry<L, R> {\\n\" + ", "-\t\t\t\"\t                   ^^^^\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic class X<T, F> {\\n\" +", "+\t\t\t\"\t               ^^^^\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\t* @see T Variable \\n\" +", "+\t\t\t\"\t       ^\\n\" +", "+\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\t* @see F Variable\\n\" +", "+\t\t\t\"\t       ^\\n\" +", "+\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\"\tstatic class Entry<L, R> {\\n\" +", "+\t\t\t\"\t                   ^^^^\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f8480818e2ad5b15f0e43aa58e65220", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void test399793c() throws JavaModelException", "signatureAfterChange": " \tpublic void test399793c() throws JavaModelException", "diff": ["-\t\tassertEquals(\"(int[] ia) -> {\\n  return ia.clone();\\n}\\n\", lambdaExpression.toString());", "+\t\tassertEquals(\"(int [] ia) -> {\\n  return ia.clone();\\n}\\n\", lambdaExpression.toString());", "-\t\tassertEquals(\"int[] ia\", singleVariableDeclaration.toString());\t\t", "+\t\tassertEquals(\"int [] ia\", singleVariableDeclaration.toString());\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f9f6467a55da39b7cbddf1ec75e166e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 228, "signatureBeforeChange": " public void testBug260381_wksp2_07() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_07() throws JavaModelException", "diff": ["-\t\t\"\t * e2)} must not throw a {@code ClassCastException} for any elements {@code\\n\" + ", "-\t\t\"\t * e1} and {@code e2} in the multiset. If the user attempts to add an\\n\" + ", "+\t\t\"\t * e2)} must not throw a {@code ClassCastException} for any elements\\n\" + ", "+\t\t\"\t * {@code e1} and {@code e2} in the multiset. If the user attempts to add an\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fbb22ca04358abd02b7507cf5e2edb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "2fdd800912ee4f65c51a2ec384533d1146c71af7", "commitAfterChange": "844f82aaef831e55c4827a65ccd98caed0cd08f3", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t\t\"The field foo is not visible\\n\" + ", "+\t\t\"The field X2.foo is not visible\\n\" + ", "-\t\t\"The field bar is not visible\\n\" + ", "+\t\t\"The field X2.bar is not visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fec6736d0b80660df01bfcc586eb44a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": " public void testBug236406_EX2()", "signatureAfterChange": " public void testBug236406_EX2()", "diff": ["-\t\t\"/** Javadoc comment */\\n\" + ", "-\t\t\"1 + (/* Block comment */++a)\\n\",", "+\t\t\"\t\t/** Javadoc comment */\\n\" + ", "+\t\t\"\t\t1 + (/* Block comment */++a)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ff967cc7f7146460795b11349041d1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExclusionPatternsTests.java", "commitBeforeChange": "75c11b9993cee3cc0c66baeb87390d3f47878de0", "commitAfterChange": "bf1e6d69eab09fcc8966c652a3845b7198223fbb", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void testRemoveExclusionOnPackage() throws CoreException", "signatureAfterChange": " public void testRemoveExclusionOnPackage() throws CoreException", "diff": ["-\t\t\"\\n\" + // default package", "-\t\t\"p\",", "+\t\t\"[default] [in src [in P]]\\n\" + ", "+\t\t\"p [in src [in P]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ffd2221a36c0f8e80bfd74ca93b56ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void testMultiLineCommentIndentSpaces3()", "signatureAfterChange": "  \tpublic void testMultiLineCommentIndentSpaces3()", "diff": ["-\t\tString expected= PREFIX + DELIMITER + \"     \" + INFIX + \"test test\" + DELIMITER + \"     \" + POSTFIX;  //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\tString expected= PREFIX + DELIMITER + \"      \" + INFIX + \"test test\" + DELIMITER + \"      \" + POSTFIX;  //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30a38fa5e50faaf3f785e296a4a166b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 548, "methodNumberAfterChange": 548, "signatureBeforeChange": "\t\t \tpublic void test544()", "signatureAfterChange": "\t\t \tpublic void test544()", "diff": ["-\t\t\t\"Type safety: Vector is a raw type. References to generic type Vector<E> should be parameterized\\n\" + ", "+\t\t\t\"Vector is a raw type. References to generic type Vector<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Vector is a raw type. References to generic type Vector<E> should be parameterized\\n\" + ", "+\t\t\t\"Vector is a raw type. References to generic type Vector<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30c53e9401a12ed0313f65f82ab00436", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1170, "methodNumberAfterChange": 1170, "signatureBeforeChange": " public void test1141()", "signatureAfterChange": " public void test1141()", "diff": ["-\t\t\"1. ERROR in p\\\\X.java (at line 8)\\r\\n\" +", "-\t\t\"\tpublic class X extends p.X.Super<A<X>> {\\r\\n\" +", "+\t\t\"1. ERROR in p\\\\X.java (at line 8)\\n\" +", "+\t\t\"\tpublic class X extends p.X.Super<A<X>> {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30d54b8480fed213c19ee27c1e740e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void test101()", "signatureAfterChange": " public void test101()", "diff": ["-\t\t\"The field A.B.length is never read locally\\n\" + ", "+\t\t\"The value of the field A.B.length is not used\\n\" + ", "-\t\t\"The field A.B is never read locally\\n\" + ", "+\t\t\"The value of the field A.B is not used\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30dce6a78cecb770ced5b65bcadb219a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic void testMultiLineCommentIndentSpaces2()", "signatureAfterChange": "  \tpublic void testMultiLineCommentIndentSpaces2()", "diff": ["-\t\tString expected= PREFIX + DELIMITER + \"      \" + INFIX + \"test test\" + DELIMITER + \"      \" + POSTFIX;  //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\tString expected= PREFIX + DELIMITER + \"    \" + INFIX + \"test test\" + DELIMITER + \"    \" + POSTFIX;  //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30e84a6ebe965b109b4d7cda434cab85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "96a363e844088de7fad02c93968495ea0dca52ac", "commitAfterChange": "20306af2785b6993ef03f5b59102e1d76672145c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void test041()", "signatureAfterChange": " \tpublic void test041()", "diff": ["-\t\t\t\"Varargs argument Integer[] should be cast to Serializable[] when passed to the method array(Serializable...) from type X\\n\" + ", "+\t\t\t\"The argument of type Integer[] should explicitly be cast to Serializable[] for the invocation of the varargs method array(Serializable...) from type X. It could alternatively be cast to Serializable for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument null should be cast to Serializable[] when passed to the method array(Serializable...) from type X\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to Serializable[] for the invocation of the varargs method array(Serializable...) from type X. It could alternatively be cast to Serializable for a varargs invocation\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30f4c4cf9b20f261ebd2a64432319413", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 300, "signatureBeforeChange": " \tpublic void test298()", "signatureAfterChange": " \tpublic void test298()", "diff": ["-\t\t\t\"Name clash : The method putAll(Map<String,? extends V>) of type X<V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<String,V> but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method putAll(Map<String,? extends V>) of type X<V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<String,V> but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method putAll(Map<? extends String,? extends V>) of type X<S,V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<S,V> but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method putAll(Map<? extends String,? extends V>) of type X<S,V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<S,V> but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31173a9d0aded5ef7d1409d3a43e319b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "e0c7ca1486f055788a44dc24293c246757983c36", "commitAfterChange": "fffe8da84c964b60e288768d8e57c80a69c56c45", "methodNumberBeforeChange": 260, "methodNumberAfterChange": 260, "signatureBeforeChange": " public void test0250() throws JavaModelException", "signatureAfterChange": " public void test0250() throws JavaModelException", "diff": ["-\t\t\t\t\"oneTwoThree[METHOD_IMPORT]{camelcase.ImportedType.oneTwoThree;, Lcamelcase.ImportedType;, ()V, oneTwoThree, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CAMEL_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"oTTMethod[METHOD_IMPORT]{camelcase.ImportedType.oTTMethod;, Lcamelcase.ImportedType;, ()V, oTTMethod, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\t\"oneTwoThree[METHOD_IMPORT]{oneTwoThree;, Lcamelcase.ImportedType;, ()V, oneTwoThree, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CAMEL_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"oTTMethod[METHOD_IMPORT]{oTTMethod;, Lcamelcase.ImportedType;, ()V, oTTMethod, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316508f0b3eed7dde99c318e599fb25f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void test031()", "signatureAfterChange": " \tpublic void test031()", "diff": ["-\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31f707d205d7b285866414791f8ceda7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testChangeOutputLocation() throws JavaModelException, CoreException", "signatureAfterChange": " public void testChangeOutputLocation() throws JavaModelException, CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "-\t\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31fa831713b874d2a6224d5547e27bae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "\t \tpublic void test078()", "signatureAfterChange": "\t \tpublic void test078()", "diff": ["-\t\t\t\"Type safety: A is a raw type. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: A is a raw type. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "322032cf4dfdf713f84c80c5d0576817", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "20f9880068ffc8b9ca5e4df40a1417c5832ce46b", "commitAfterChange": "0fb012af3c6557520ab00415c58833602b027192", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void testBuildProjectUsedAsLib() throws CoreException", "signatureAfterChange": " public void testBuildProjectUsedAsLib() throws CoreException", "diff": ["-\t\t\t\"\tbin1[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t/P1/bin1[*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\tbin1[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t/P1/bin1[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "322937cb547b0adc0a9d263604c6f02d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 298, "signatureBeforeChange": " public void testBug330313_wksp1_21_njl()", "signatureAfterChange": " public void testBug330313_wksp1_21_njl()", "diff": ["-\t\t\"\t\treturn !(getViewer() == null || getViewer().getControl() == null\\n\" + ", "-\t\t\"\t\t\t\t|| getViewer().getControl().isDisposed());\\n\" + ", "+\t\t\"\t\treturn !(getViewer() == null || getViewer().getControl() == null || getViewer()\\n\" + ", "+\t\t\"\t\t\t\t.getControl().isDisposed());\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3240418ca72657bb6ee8c7d9a7301627", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 185, "signatureBeforeChange": " \tpublic void test183()", "signatureAfterChange": " \tpublic void test183()", "diff": ["-\t\t\t\"Type safety: The cast from Object to Hashtable<String,Integer> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to Hashtable<String,Integer> is actually checking against the erased type Hashtable\\n\" + ", "-\t\t\t\"Type safety: The cast from Z3 to Hashtable<String,Integer> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Z3 to Hashtable<String,Integer> is actually checking against the erased type Hashtable\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3267eb3b9819ad246a92d5ade6131096", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 327, "signatureBeforeChange": " \tpublic void test323()", "signatureAfterChange": " \tpublic void test323()", "diff": ["-\t\t\t\"Type safety: G is a raw type. References to generic type G<T> should be parameterized\\n\" + ", "+\t\t\t\"G is a raw type. References to generic type G<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: G.Member is a raw type. References to generic type G<T>.Member should be parameterized\\n\" + ", "+\t\t\t\"G.Member is a raw type. References to generic type G<T>.Member should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "328877f90faab50e78f9e143a15ec2fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test0050()", "signatureAfterChange": " public void test0050()", "diff": ["-\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"    Object[] o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    Object[] o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "329218ee2c6768e3428b3f794b4f45a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void test_nonnull_argument_001()", "signatureAfterChange": " public void test_nonnull_argument_001()", "diff": ["-\t\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3300b6f4128c4011d7f1875da3bab044", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "61742b7a485fa965b2f7b05fc8eadc51ecd60a49", "commitAfterChange": "d304d5cd9d0c4f90c63a024d76dece50501ce7a8", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "  public void test121() throws JavaModelException", "signatureAfterChange": "  public void test121() throws JavaModelException", "diff": ["-\t\t\"xtm[JAVADOC_PARAM_REF]{xtm, null, null, xtm, null, \"+this.positions+\"14}\\n\" +", "-\t\t\"xtc[JAVADOC_PARAM_REF]{xtc, null, null, xtc, null, \"+this.positions+\"13}\\n\" +", "+\t\t\"xtm[JAVADOC_PARAM_REF]{xtm, null, null, xtm, null, \"+this.positions+\"19}\\n\" +", "+\t\t\"xtc[JAVADOC_PARAM_REF]{xtc, null, null, xtc, null, \"+this.positions+\"18}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33068cd64d97886883add9f3b0c41bda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 750, "methodNumberAfterChange": 750, "signatureBeforeChange": " public void test744()", "signatureAfterChange": " public void test744()", "diff": ["-\t\t\"1. ERROR in java\\\\util\\\\X.java (at line 23)\\r\\n\" + ", "-\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\"1. ERROR in java\\\\util\\\\X.java (at line 23)\\n\" + ", "+\t\t\"\tZork z;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "335eef847130f1265b6aff5ba5337bce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ExecutionTests.java", "commitBeforeChange": "43f74f2641268dab605a152f25dcf07a245dabe8", "commitAfterChange": "6bace42b575464817bea9d0627df89cce9af5b42", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void testSuccess() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testSuccess() throws JavaModelException", "diff": ["-\t\t\t\"      System.out.println(\\\"Hello world\\\");\\n\"+ //$NON-NLS-1$", "+\t\t\t\"      System.out.print(\\\"Hello world\\\");\\n\"+ //$NON-NLS-1$", "-\t\texecuteClass(projectPath, \"p1.Hello\", \"Hello world\\r\\n\", \"\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\texecuteClass(projectPath, \"p1.Hello\", \"Hello world\", \"\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33b6365a2e96838ad3c44100315cc86f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void testTypeMultipleArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testTypeMultipleArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33c1709fc185369a4475f4753a9b277c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void test0047()", "signatureAfterChange": " public void test0047()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:ext>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:ext>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33d3f48bf6d631f36e8544a04eb1a873", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 211, "signatureBeforeChange": " \tpublic void test0210() throws JavaModelException", "signatureAfterChange": " \tpublic void test0210() throws JavaModelException", "diff": ["-\t\tjavadoc.setComment(\"/** JavaDoc Comment\\r\\n  */\");//$NON-NLS-1$*/", "+\t\tjavadoc.setComment(\"/** JavaDoc Comment*/\");//$NON-NLS-1$*/", "-\t\tcheckSourceRange(node, \"/** JavaDoc Comment\\r\\n  */\\r\\n  int i;\", source); //$NON-NLS-1$", "+\t\tcheckSourceRange(node, \"/** JavaDoc Comment*/\\n  int i;\", source); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33e4ec45a228509639d135dc8323966f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4c05b51e282281d245149ac856aed4eb689aee0d", "commitAfterChange": "fcd8f6eb5a6e4ad47715a6f446da38772d56031c", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void test0065() throws JavaModelException", "signatureAfterChange": " \tpublic void test0065() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong qualified name\", \"test0065.X<java.lang.String,java.util.List>\", typeBinding.getQualifiedName());\t\t", "+\t\tassertEquals(\"Wrong qualified name\", \"test0065.X<java.lang.String,java.util.List<?>>\", typeBinding.getQualifiedName());\t\t", "-\t\tassertEquals(\"Wrong qualified name\", \"java.util.List<? extends test0065.X>\", typeBinding.getQualifiedName());\t\t\t\t", "+\t\tassertEquals(\"Wrong qualified name\", \"java.util.List<? extends test0065.X<?,?>>\", typeBinding.getQualifiedName());\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ef40b675bc6085f516b3c16a5f4583", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void test024()", "signatureAfterChange": " \tpublic void test024()", "diff": ["-\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33fc0fda0d5c9704a39e0da4f1756220", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1371, "methodNumberAfterChange": 1371, "signatureBeforeChange": " public void test1337()", "signatureAfterChange": " public void test1337()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tOther<String>.Member m = (Other<String>.Member) om2;\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tOther<String>.Member m = (Other<String>.Member) om2;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3446411b82ea840473c731318350b2ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 308, "signatureBeforeChange": " public void testBug330313_wksp1_31_njl()", "signatureAfterChange": " public void testBug330313_wksp1_31_njl()", "diff": ["-\t\t\"\t\t\t\t\t\t&& hasOneOf(meta63, hashable, offset - 2, 2) && !hasOneOf(\\n\" + ", "-\t\t\"\t\t\t\t\t\t\tmeta64, hashable, offset - 4, 2)))\\n\" + ", "+\t\t\"\t\t\t\t\t\t&& hasOneOf(meta63, hashable, offset - 2, 2)\\n\" + ", "+\t\t\"\t\t\t\t\t\t&& !hasOneOf(meta64, hashable, offset - 4, 2)))\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34585c043c671b4a46251b549f867ed2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 415, "methodNumberAfterChange": 415, "signatureBeforeChange": " public void test354229d()", "signatureAfterChange": " public void test354229d()", "diff": ["-\t\t\"Method e(Action<T>) has the same erasure e(Action<T>) as another method in type X\\n\" + ", "+\t\t\"Erasure of method e(Action<T>) is the same as another method in type X\\n\" +", "-\t\t\"Method e(Action<S>) has the same erasure e(Action<T>) as another method in type X\\n\" + ", "+\t\t\"Erasure of method e(Action<S>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34a0e82363a26be538cb4791e16206a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "f711a2e15fc3de73f79ccc61d2dafcbdd0d9f0f1", "commitAfterChange": "e823242f8d03d0ef2504eab819b418e785f092ee", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  public void test070() throws Exception", "signatureAfterChange": "  public void test070() throws Exception", "diff": ["-\t\t\"    1  aload_1\\n\" +", "-\t\t\"    2  iload_2\\n\" +", "+\t\t\"    1  aload_1 [arg0]\\n\" +", "+\t\t\"    2  iload_2 [arg1]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e9754c0eb79d31c83b1b0505763b1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void test15() throws JavaModelException", "signatureAfterChange": "  \tpublic void test15() throws JavaModelException", "diff": ["-\t\t\t\"RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "-\t\t\t\"InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\\n\" + ", "+\t\t\t\"InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34f1e8650d649b2b182b3dbd7d6b806c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void test001() throws JavaModelException", "signatureAfterChange": "  public void test001() throws JavaModelException", "diff": ["-\t\t\t\"  static Foo f = (first, second) -> System.out.print(fi);\\n\" +", "+\t\t\t\"  static Foo f = (first, second) -> System.out.print(fir);\\n\" +", "-\tString completeBehind = \"fi\";", "+\tString completeBehind = \"fir\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "351a73573f5828739443288923a0accb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 660, "methodNumberAfterChange": 660, "signatureBeforeChange": " public void test0655()", "signatureAfterChange": " public void test0655()", "diff": ["-\t\t\"Type safety: The cast from X.BB<capture-of ? extends Number,capture-of ? super Integer> to X.BD<Number> is actually checking against the erased type X.BD\\n\" + ", "+\t\t\"Type safety: The cast from X.BB<capture#1-of ? extends Number,capture#2-of ? super Integer> to X.BD<Number> is actually checking against the erased type X.BD\\n\" + ", "-\t\t\"Unnecessary cast from X.BB<capture-of ? extends Number,capture-of ? super Integer> to X.BD<Number>\\n\" + ", "+\t\t\"Unnecessary cast from X.BB<capture#1-of ? extends Number,capture#2-of ? super Integer> to X.BD<Number>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3558afd92e836a0133bbe12a902b073b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test_default_nullness_003b()", "signatureAfterChange": " public void test_default_nullness_003b()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is specified as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is specified as @Nullable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35599e3e37b53f7367126b60e356b151", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void test062()", "signatureAfterChange": " \tpublic void test062()", "diff": ["-\t\t\t\"1. ERROR in p\\\\X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\timport static q.A.a;\\r\\n\" +", "+\t\t\t\"1. ERROR in p\\\\X.java (at line 2)\\n\" +", "+\t\t\t\"\timport static q.A.a;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355a5cd63e244cc66d687df3ffd170e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " public void test0083()", "signatureAfterChange": " public void test0083()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:int>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:int>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35b499774c64e16c61e9f4ab7dde2297", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 339, "methodNumberAfterChange": 340, "signatureBeforeChange": "  public void test1036()", "signatureAfterChange": "  public void test1036()", "diff": ["-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o can only be null at this location\\n\" + ", "-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable o can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "360e0a30186081495ba82e161ea038bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR335ClassFileTest.java", "commitBeforeChange": "59ccfc02e85b3cb54d1260f0f13d4e77dbe5b35a", "commitAfterChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void test430015a() throws IOException, ClassFormatException", "signatureAfterChange": " public void test430015a() throws IOException, ClassFormatException", "diff": ["-\t\t\t\t\"  private static synthetic void lambda$0(int <anonymous>);\\n\" + ", "+\t\t\t\t\"  private static synthetic void lambda$0(int i);\\n\" + ", "-\t\t\t\t\"        synthetic <anonymous>\\n\" + ", "+\t\t\t\t\"        i\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3626727032f779c2f002266cf451d183", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "aae374b319008b3e7997fb943d9dfc19fcb7029e", "commitAfterChange": "42b502cfe7b86a61a34884629d46e24cfbdfaa43", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test054() throws Exception", "signatureAfterChange": " public void test054() throws Exception", "diff": ["-\t\t\t\"Type safety: The expression of type Set[] needs unchecked conversion to conform to Set<String>[]\\n\" + ", "+\t\t\t\"Type safety: Elements of type Set need unchecked conversion to conform to Set<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type Set[] needs unchecked conversion to conform to Set<String>[]\\n\" + ", "+\t\t\t\"Type safety: Elements of type Set need unchecked conversion to conform to Set<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "365a863cb3b00107ceb07845357f9f19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic void testBug86380_Method() throws CoreException", "signatureAfterChange": " \tpublic void testBug86380_Method() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 2, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 2, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36806408a474bdab3fc280bc814fc119", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 410, "methodNumberAfterChange": 410, "signatureBeforeChange": " public void testBug355838() throws Exception", "signatureAfterChange": " public void testBug355838() throws Exception", "diff": ["-\t\t\t\"Method output(List<String>) has the same erasure output(List<E>) as another method in type ErasureBug\\n\" + ", "+\t\t\t\"Erasure of method output(List<String>) is the same as another method in type ErasureBug\\n\" +", "-\t\t\t\"Method output(List) has the same erasure output(List<E>) as another method in type ErasureBug\\n\" + ", "+\t\t\t\"Erasure of method output(List) is the same as another method in type ErasureBug\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36bcf1ad9cdc25d91b068747f0322de6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test035()", "signatureAfterChange": " \tpublic void test035()", "diff": ["-\t\t\t\"        [pc: 0, pc: 4] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 4] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 4] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 4] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36d34a2178b05b909e252620921c1bf4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "d1e273cb945ca7837538bce067a9c64261e68aab", "commitAfterChange": "04969acd296957373e2c11d1fa6749ece6b3b165", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic void testBug48385a()", "signatureAfterChange": " \tpublic void testBug48385a()", "diff": ["-\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid tag\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Missing closing brace for inline tag\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "370cf944173c464d616218a76f7d0825", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "e534993434659c9a128067cc81e53b914d835480", "commitAfterChange": "85fca2365612e79a6e7b22f1bfd4842ccf0748ee", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void testClasspathValidation38() throws CoreException", "signatureAfterChange": " public void testClasspathValidation38() throws CoreException", "diff": ["-\t\t\t\"Source folder 'src' in project P should not be allowed to output to included source subfolder 'src/output'.\",", "-\t\t\t\"Cannot nest output folder \\'P/src/output\\' inside \\'P/src\\'.\",", "+\t\t\t\"Source folder 'src' in project P should not be allowed to output to included source subfolder 'src/output'\",", "+\t\t\t\"Cannot nest output folder \\'P/src/output\\' inside \\'P/src\\'\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "373fd0a99e85211d03185fe0b3716473", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4c370db17fcad0e528d16b2fecef0952e714ead1", "commitAfterChange": "73b4b882573d866af4a2886a5430207907acc99e", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test0044() throws JavaModelException", "signatureAfterChange": " \tpublic void test0044() throws JavaModelException", "diff": ["-\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0044\", \"A.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0044\", \"X.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tassertEquals(\"wrong key\", \"Z:test0044/A/voidfoo(Z)\", binding.getKey());", "+\t\tassertEquals(\"wrong key\", \"Z:test0044/X/voidfoo(Z)\", binding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "375bc5a06c4bd41712f207a494f9d9eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void testBug84100e() throws CoreException", "signatureAfterChange": " \tpublic void testBug84100e() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 2, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 2, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3761ef7e49ae08d827833a20142b4619", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 256, "signatureBeforeChange": " public void test0256()", "signatureAfterChange": " public void test0256()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:impl>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:impl>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37709f4e3c34a95c37d0a7053a07d564", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchTests.java", "commitBeforeChange": "fe01542fcd3aa3aadeb3ef9dbecdc34ba5993c8d", "commitAfterChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " public void testSearchPatternCreation29()", "signatureAfterChange": " public void testSearchPatternCreation29()", "diff": ["-\t\t\"PackageDeclarationPattern: <x.y.z>, exact match, case sensitive, erasure only\\n\" +", "-\t\t\"| PackageReferencePattern: <x.y.z>, exact match, case sensitive, erasure only\",", "+\t\t\"PackageDeclarationPattern: <x.y.z>, exact match, case sensitive, generic erasure match, fine grain: none\\n\" +", "+\t\t\"| PackageReferencePattern: <x.y.z>, exact match, case sensitive, generic erasure match, fine grain: none\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3774b82d3db9f56a3602dc4f23e6dc1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void testCreateWorkingCopy() throws CoreException", "signatureAfterChange": " public void testCreateWorkingCopy() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37c295d644ce028ac0c580ed1162e0e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " \tpublic void test038a()", "signatureAfterChange": " \tpublic void test038a()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tpublic class X extends H<Number> { void foo(A<?> a) {} }\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic class X extends H<Number> { void foo(A<?> a) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d2e5afb43692de376b45caa4118aaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug101283d()", "signatureAfterChange": " \tpublic void testBug101283d()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class X<T, F> {\\n\" +", "-\t\t\t\"\t               ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\t* @see T Variable \\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\t* @see F Variable\\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\tclass Entry<L, R> {\\n\" +", "-\t\t\t\"\t            ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "+\t\t\t\"\t               ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @see T Variable \\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see F Variable\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tclass Entry<L, R> {\\n\" + ", "+\t\t\t\"\t            ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37e5d1ca8c8946757136dd17450364c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java", "commitBeforeChange": "5a709311100399f724e07cfa2abf31a306fb6f62", "commitAfterChange": "189d8495dd269a3e1a6eabd4118e6586a867755d", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void testIA_1FGNBPR_2()", "signatureAfterChange": " public void testIA_1FGNBPR_2()", "diff": ["-\tString expectedCompletionNodeToString = \"<CompleteOnName:la>\";", "+\tString expectedCompletionNodeToString = \"break <CompleteOnLabel:la>;\";", "-\t\t\"      <CompleteOnName:la>;\\n\" +", "+\t\t\"      break <CompleteOnLabel:la>;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3879b76a1334ab81433e3f48bcd9457d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 443, "methodNumberAfterChange": 443, "signatureBeforeChange": " \tpublic void test0438()", "signatureAfterChange": " \tpublic void test0438()", "diff": ["-\t\t\t\"Type safety: The cast from Object to T is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to T\\n\" + ", "-\t\t\t\"Type safety: The cast from capture#2-of ? super T to T is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from capture#2-of ? super T to T\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38998aad324ccabefb80fd907f5aca82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 815, "methodNumberAfterChange": 815, "signatureBeforeChange": " public void test809()", "signatureAfterChange": " public void test809()", "diff": ["-\t\t\"Type safety: Set1 is a raw type. References to generic type Set1<N> should be parameterized\\n\" + ", "+\t\t\"Set1 is a raw type. References to generic type Set1<N> should be parameterized\\n\" + ", "-\t\t\"Type safety: Set3 is a raw type. References to generic type Set3<N> should be parameterized\\n\" + ", "+\t\t\"Set3 is a raw type. References to generic type Set3<N> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38c73ae07a716c0753c22a755a8e5498", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test013c()", "signatureAfterChange": " \tpublic void test013c()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tabstract class X3 extends A implements I {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tabstract class X3 extends A implements I {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38d2d13c5f44eb1e967c8fdff0191b15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void testBug399773()", "signatureAfterChange": " public void testBug399773()", "diff": ["-\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\"\tdefault void doitalso () {}\\n\" +", "-\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\"\tdefault void doitalso () {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38ee3c2f3013b986dfaeaf211d77114b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void testTypeRef_Superinterface() throws CoreException", "signatureAfterChange": " public void testTypeRef_Superinterface() throws CoreException", "diff": ["-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements \ufffd|ITest1|\ufffd, ITest2 {@78] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends \ufffd|ITest1|\ufffd {}@184] EXACT_MATCH\"", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements !|ITest1|!, ITest2 {@78] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends !|ITest1|! {}@184] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f7936b0f3d104bbd883ac4628b2d59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic void test22() throws JavaModelException", "signatureAfterChange": "  \tpublic void test22() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest$85;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39504fc65f4fcfb4362738860e8beda5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 487, "methodNumberAfterChange": 487, "signatureBeforeChange": " \tpublic void test483()", "signatureAfterChange": " \tpublic void test483()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tm(new Y<Short>(), new Y<Integer>());\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tm(new Y<Short>(), new Y<Integer>());\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "395d22c4f2c2e266ded4b54e87ffaf07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "53df7d602035de3d31fcc1ea92403ee3f66bc84a", "commitAfterChange": "b501a050436f0ed4b21c2887b8c36095ae4a6672", "methodNumberBeforeChange": 1114, "methodNumberAfterChange": 1114, "signatureBeforeChange": " public void test1085()", "signatureAfterChange": " public void test1085()", "diff": ["-\t\t\"\t       ^^^^\\n\" + ", "-\t\t\"e2.e cannot be resolved or is not a field\\n\" + ", "+\t\t\"\t          ^\\n\" + ", "+\t\t\"e cannot be resolved or is not a field\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "398e8496d0556b2359d9699391575b40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void test023()", "signatureAfterChange": " \tpublic void test023()", "diff": ["-\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "398ed121e46f71a851c8c83e5fa73a8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void testBug027079c2() throws JavaModelException", "signatureAfterChange": " public void testBug027079c2() throws JavaModelException", "diff": ["-\t\t\"\t\t/** formatted comment */\\n\" + ", "-\t\t\"\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + ", "+\t\t\"\t\t\t\t/** formatted comment */\\n\" + ", "+\t\t\"\t\t\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39c26cf05a46bb7cfe143dcab2e68c4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public IPath getPath(int index) throws IOException", "signatureAfterChange": "\r public IPath getPath(int index) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"Error in format\");\r", "+\t\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "-\t\tthrow new IOException(\"Error in format\");\r", "+\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a12c65a68bf7e9d8ca54c2a7e3c73df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 361, "methodNumberAfterChange": 361, "signatureBeforeChange": "\t\t \tpublic void test357()", "signatureAfterChange": "\t\t \tpublic void test357()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t<T> T foo(Class<T> c) { return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T> T foo(Class<T> c) { return null; }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a2d83dcb948b0663518b5464c3687b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "b2b2f79127ceb81a70f0a7e9c4a14a4c97a6bb69", "commitAfterChange": "68d139bf0c56c6c993907701c5e076e9d3ee773d", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void test085()", "signatureAfterChange": " public void test085()", "diff": ["-\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, static imports are only available if source level is 5.0\\n\" + ", "-\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, static imports are only available if source level is 5.0\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a9ed549658a26d47d950a7c1586cfbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 249, "methodNumberAfterChange": 249, "signatureBeforeChange": " \tpublic void test245()", "signatureAfterChange": " \tpublic void test245()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ae2a20d60d0cabe167646ff61ed1590", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tpublic void test067()", "signatureAfterChange": " \tpublic void test067()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\timport static p.I.E.C;\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\timport static p.I.E.C;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b28ea6a3dacbbc0fe97eedb62d2f727", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testAddCuInDefaultPkg1() throws CoreException", "signatureAfterChange": " public void testAddCuInDefaultPkg1() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b2d80c1b21f2d9aade015f3d2855c24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "704618bf0334f929a0d1b0e5a85b722353ffddfe", "commitAfterChange": "f9e75995ec22944d0e73d7c89c7bf4920dad4fbf", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void test057()", "signatureAfterChange": " \tpublic void test057()", "diff": ["-\t\t\t\t\"The type Y<T>.Z is not generic; it cannot be parameterized with arguments <T>\\n\" + ", "+\t\t\t\t\"The type Y.Z is not generic; it cannot be parameterized with arguments <T>\\n\" + ", "-\t\t\t\t\"The type Y<T>.Z is not generic; it cannot be parameterized with arguments <T>\\n\" + ", "+\t\t\t\t\"The type Y.Z is not generic; it cannot be parameterized with arguments <T>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b32b6e4b5b885b41abe138298add601", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 796, "methodNumberAfterChange": 796, "signatureBeforeChange": " public void test790()", "signatureAfterChange": " public void test790()", "diff": ["-\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bab45f5751bb6d7d9cac71922164372", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "68f185fc63132d7b106a1c7ca52ed6d004b96329", "commitAfterChange": "4a85a8ee613913420acf3dde5af380e91d3bad2c", "methodNumberBeforeChange": 247, "methodNumberAfterChange": 247, "signatureBeforeChange": " public void test425512b() throws Exception", "signatureAfterChange": " public void test425512b() throws Exception", "diff": ["-\t\t\"\t                     ^^^\\n\" + ", "-\t\t\"Impossible interface for array type\\n\" + ", "+\t\t\"\t            ^^^^^^\\n\" + ", "+\t\t\"Arrays are not allowed in intersection cast operator\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bdadd2eb1783f822f9bd275b869eda0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "037cfa6bf481cd6ec3ad222bceff2d82fb8a8179", "commitAfterChange": "30d1d48bfa7e296fbeab8a3626c28e1130f44500", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testBinary05()", "signatureAfterChange": " \tpublic void testBinary05()", "diff": ["-\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'T\\' which is constrained as \\'@NonNull\\'\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'@NonNull T extends Object\\'\\n\" + ", "-\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull Object\\' is not a valid substitute for the type parameter \\'S\\' which is constrained as \\'@Nullable\\'\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull Object\\' is not a valid substitute for the type parameter \\'@Nullable S extends Object\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c4ae7a5efdc4ca6755f8004e5a856cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void testMultiLineCommentCodeSnippet4()", "signatureAfterChange": "  \tpublic void testMultiLineCommentCodeSnippet4()", "diff": ["-\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(), box\\n\" +", "-\t\t\t\t\" * \t\t\t\t.getGames().toArray());\\n\" +", "+\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(),\\n\" +", "+\t\t\t\t\" * \t\t\t\tbox.getGames().toArray());\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c4eda5b9b1827c5d85696c6661199dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void test013d()", "signatureAfterChange": " \tpublic void test013d()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tabstract class X4 extends A implements I {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tabstract class X4 extends A implements I {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c758d6da089c30944293f89821660da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "61742b7a485fa965b2f7b05fc8eadc51ecd60a49", "commitAfterChange": "d304d5cd9d0c4f90c63a024d76dece50501ce7a8", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "  public void test118() throws JavaModelException", "signatureAfterChange": "  public void test118() throws JavaModelException", "diff": ["-\t\t\"xtm[JAVADOC_PARAM_REF]{xtm, null, null, xtm, null, [105, 108], 14}\\n\" +", "-\t\t\"xtc[JAVADOC_PARAM_REF]{xtc, null, null, xtc, null, [105, 108], 13}\\n\" +", "+\t\t\"xtm[JAVADOC_PARAM_REF]{xtm, null, null, xtm, null, [105, 108], 19}\\n\" +", "+\t\t\"xtc[JAVADOC_PARAM_REF]{xtc, null, null, xtc, null, [105, 108], 18}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c7e08598427b7c95fd9b9358c2b9999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 1215, "methodNumberAfterChange": 1215, "signatureBeforeChange": " public void test1185()", "signatureAfterChange": " public void test1185()", "diff": ["-\t\t\"Method foo(Class<X>) has the same erasure foo(Class<T>) as another method in type X<U,V>\\n\" +", "+\t\t\"Erasure of method foo(Class<X>) is the same as another method in type X<U,V>\\n\" +", "-\t\t\"Method foo(Class<X<A,B>>) has the same erasure foo(Class<T>) as another method in type X<U,V>\\n\" +", "+\t\t\"Erasure of method foo(Class<X<A,B>>) is the same as another method in type X<U,V>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c912b34a673dde7b414d21a4d29adf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "e534993434659c9a128067cc81e53b914d835480", "commitAfterChange": "85fca2365612e79a6e7b22f1bfd4842ccf0748ee", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void testMissingRequiredBinaries() throws JavaModelException", "signatureAfterChange": " \tpublic void testMissingRequiredBinaries() throws JavaModelException", "diff": ["-\t\t\t\tnew Problem(\"p1\", \"The type p3.Z cannot be resolved. It is indirectly referenced from required .class files.\", x),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p1\", \"The project was not built since its build path is incomplete. Cannot find the class file for p3.Z. Fix the build path then try building this project.\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"The type p3.Z cannot be resolved. It is indirectly referenced from required .class files\", x),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"The project was not built since its build path is incomplete. Cannot find the class file for p3.Z. Fix the build path then try building this project\", p1)//$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cadb0f8e44e765702518f6a1d15ebbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " \tpublic void test050f()", "signatureAfterChange": " \tpublic void test050f()", "diff": ["-\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method a(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method a(A<Number>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d09d2d857b445811ec38a0e66a4403d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssignmentTest.java", "commitBeforeChange": "d32dbe370312bc68ef5b59c6268bfdfcda839b17", "commitAfterChange": "4b84620f8d71e6de7e42a2050aa5360e2143f846", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void test038()", "signatureAfterChange": " public void test038()", "diff": ["-\t\t\"The parameter e is hiding another local variable defined in an enclosing type scope\\n\" +", "+\t\t\"The parameter e is hiding another local variable defined in an enclosing scope\\n\" +", "-\t\t\"The parameter e is hiding another local variable defined in an enclosing type scope\\n\" +", "+\t\t\"The parameter e is hiding another local variable defined in an enclosing scope\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d11bdb783658a24f1b9abbeabea2d11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic void test009()", "signatureAfterChange": "  \tpublic void test009()", "diff": ["-\t\t\t\"Name clash : The method foo(G<A>) of type A has the same erasure as foo(G<I>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(G<A>) of type A has the same erasure as foo(G<I>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(G<A>) of type A has the same erasure as foo(G<I>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(G<A>) of type A has the same erasure as foo(G<I>) of type I but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d2fd6e1f7ace668ea16fda99ea89958", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void test048()", "signatureAfterChange": " \tpublic void test048()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d4e7fa67c0f3bdddae5d0f4a9a04732", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testInnerType2() throws JavaModelException", "signatureAfterChange": " public void testInnerType2() throws JavaModelException", "diff": ["-\t\t\"  Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  B [in A.java [in p6 [in src [in TypeHierarchy]]]]\\n\",", "+\t\t\"  B {key=Lp6/A~B;} [in A.java [in p6 [in src [in TypeHierarchy]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d8ccb29c2b6c770f6855a9b9a149099", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 359, "methodNumberAfterChange": 359, "signatureBeforeChange": "\t\t \tpublic void test355()", "signatureAfterChange": "\t\t \tpublic void test355()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t<T, S> S foo(Class<S> c) { return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T, S> S foo(Class<S> c) { return null; }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3da0b76b64408eaaa23dcda15ff77f23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 563, "signatureBeforeChange": " public void testBug209778() throws CoreException", "signatureAfterChange": " public void testBug209778() throws CoreException", "diff": ["-\t\t\"src/xy/Try.java @Constants(value=Try.class) [Try]\\n\" +", "-\t\t\"src/xy/Try.java @Constants(value=Try.class) [Try]\",", "+\t\t\"src/xy/Try.java xy.Try.fTryA [Try]+[@Constants on fTryA]+[@Constants on fTryB]\\n\" + ", "+\t\t\"src/xy/Try.java void xy.Try.tryB(int) [Try]+[@Constants on tryCopy]+[@Constants on tryCopy2]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dc561f0b4f16724b1a09976bfdd5aa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test006()", "signatureAfterChange": "  \tpublic void test006()", "diff": ["-\t\t\"Javadoc: Unknown cannot be resolved or is not a type\\n\" + ", "+\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" + ", "-\t\t\"Javadoc: Unknown cannot be resolved or is not a type\\n\" + ", "+\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dc91346b323e20d106625fb230b921b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void testMultiLineCommentCodeSnippet4()", "signatureAfterChange": "  \tpublic void testMultiLineCommentCodeSnippet4()", "diff": ["-\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(), box\\n\" +", "-\t\t\t\t\" * \t\t\t\t.getGames().toArray());\\n\" +", "+\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(),\\n\" +", "+\t\t\t\t\" * \t\t\t\tbox.getGames().toArray());\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dea2de30aac239b56730517cff6ed8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 352, "methodNumberAfterChange": 352, "signatureBeforeChange": " public void test200()", "signatureAfterChange": " public void test200()", "diff": ["-\t\t\t\t\"Method foo(Collection) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(Collection) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(Collection<String>) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(Collection<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3df9bf85552f1dbd28b6cd980395914c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "1fd45230f199f97d97dc93f43f8c1ecd8d598be3", "commitAfterChange": "e25e05f313fe0e8cf47abe127e89db464a1d8bc4", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void testBug400905_0010() throws CoreException", "signatureAfterChange": " public void testBug400905_0010() throws CoreException", "diff": ["-\t\tassertSearchResults(\"src/J.java void J.main(String[]) [Y::goo] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/J.java void J.foo() [Y::goo] EXACT_MATCH\");", "+\t\tassertSearchResults(\"src/J.java void J.main(String[]) [goo] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/J.java void J.foo() [goo] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e3da939dd73daeb57fd8b9cc0a1e62a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " public void testBug311578b() throws JavaModelException", "signatureAfterChange": " public void testBug311578b() throws JavaModelException", "diff": ["-\t\t\"\t//// J-\\n\" + ", "+\t\t\"\t// //J-\\n\" + ", "-\t\t\"\t//// J+\\n\" + ", "+\t\t\"\t// //J+\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e6bb29efae8d57c200670b3966845d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void testMultiLineCommentIndentSpaces3()", "signatureAfterChange": "  \tpublic void testMultiLineCommentIndentSpaces3()", "diff": ["-\t\tString expected= PREFIX + DELIMITER + \"      \" + INFIX + \"test test\" + DELIMITER + \"      \" + POSTFIX;  //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\tString expected= PREFIX + DELIMITER + \"     \" + INFIX + \"test test\" + DELIMITER + \"     \" + POSTFIX;  //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e7e81cc8cafe3368520e5f3b5536ed0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "3bee3efb3c3139a52dff7aa299065deb5290ece4", "commitAfterChange": "645825dd1e7c490f7b149a754d38a08b99765996", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tpublic void test066()", "signatureAfterChange": "  \tpublic void test066()", "diff": ["-\t\t\t\t+ \"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid class name\\n\"", "+\t\t\t\t+ \"\t   ^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Missing class name\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eb4edd4fb6c2e28df9b561636f8c7b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void testBug96237_Public08()", "signatureAfterChange": " \tpublic void testBug96237_Public08()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eee938080da718f2fb11bd5dee42b7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 309, "signatureBeforeChange": " public void testBug330313_wksp1_32_njl()", "signatureAfterChange": " public void testBug330313_wksp1_32_njl()", "diff": ["-\t\t\"\t\treturn (a.style == style && equals(a.foreground, foreground)\\n\" + ", "-\t\t\"\t\t\t\t&& equals(a.background, background));\\n\" + ", "+\t\t\"\t\treturn (a.style == style && equals(a.foreground, foreground) && equals(\\n\" + ", "+\t\t\"\t\t\t\ta.background, background));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f40feead03f2645260df2b93ad06d9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "75d40f492f36c88af377447ae9b0667fb12d17f9", "commitAfterChange": "ddf241255a9584a57e9d18e190ae7ef4b685d2ea", "methodNumberBeforeChange": 1063, "methodNumberAfterChange": 1063, "signatureBeforeChange": " public void test1035()", "signatureAfterChange": " public void test1035()", "diff": ["-\t\t\t\"@SuppressWarnings(\\\"unchecked\\\")\\n\" +", "+\t\t\t\"@SuppressWarnings({\\\"unchecked\\\", \\\"rawtypes\\\"})\\n\" +", "-\t\t\t\"@SuppressWarnings(\\\"unchecked\\\")\\n\" +", "+\t\t\t\"@SuppressWarnings({\\\"unchecked\\\", \\\"rawtypes\\\"})\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f6190e8d73044d26f9426e8f0af1fb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-\t\t\"Unnecessary cast to type X for expression of type X\\n\" + ", "+\t\t\"Unnecessary cast from X to X\\n\" + ", "-\t\t\"Unnecessary cast to type X.XM1 for expression of type X. It is already compatible with the argument type X\\n\" + ", "+\t\t\"Unnecessary cast from X to X.XM1. It is already compatible with the argument type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f6a91d370ca4be190175df5a2625600", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug101283b()", "signatureAfterChange": " \tpublic void testBug101283b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fa8974dd090880d4ede31ae5da4f3fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "d8f389cbde24bb1c104b01e8be23d8716da06c45", "commitAfterChange": "314f66e76f751455a7dd539f576706f5f92aab24", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " \tpublic void testBug68017javadocWarning1()", "signatureAfterChange": " \tpublic void testBug68017javadocWarning1()", "diff": ["-\t\t\t\t\"\t \t ^^^^^^^\\n\" + ", "+\t\t\t\t\"\t \t ^^^^^^\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fad56f57b00dda7bf1541333f430276", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void test0042() throws JavaModelException", "signatureAfterChange": " \tpublic void test0042() throws JavaModelException", "diff": ["-\t\tassertEquals(\"wrong key\", \"T:test0042/X/T[][]foo()\", binding.getKey());", "+\t\tassertEquals(\"wrong key\", \"Ltest0042/X;.foo<T:Ljava/lang/Object;>()[TT;:TT;\", binding.getKey());", "-\t\tassertEquals(\"wrong key\", \"T:test0042/X/T[][]foo()[]\", binding2.getKey());\t\t", "+\t\tassertEquals(\"wrong key\", \"[Ltest0042/X;.foo<T:Ljava/lang/Object;>()[TT;:TT;\", binding2.getKey());\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fdbb57aae6e002861df4589bccb3e8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 174, "signatureBeforeChange": " \tpublic void test051a()", "signatureAfterChange": " \tpublic void test051a()", "diff": ["-\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fe839bcb23d2e0674682cc7104f4155", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ArrayTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void test011() throws Exception", "signatureAfterChange": " public void test011() throws Exception", "diff": ["-\t\t\t\"        [pc: 15, line: 6]\\n\" +", "+\t\t\t\"        [pc: 12, line: 6]\\n\" +", "-\t\t\t\"        [pc: 5, pc: 15] local: all index: 1 type: java.lang.Object[][]\\n\" +", "+\t\t\t\"        [pc: 5, pc: 12] local: all index: 1 type: java.lang.Object[][]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3feaae5087fcf4cf741daba1d20c1589", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 241, "signatureBeforeChange": " public void testBug313524_wksp1_03() throws JavaModelException", "signatureAfterChange": " public void testBug313524_wksp1_03() throws JavaModelException", "diff": ["-\t\t\"\t\tprintTargets(project, subNames, null, InternalAntMessages\\n\" + ", "-\t\t\"\t\t\t\t.getString(\\\"InternalAntRunner.Subtargets__5\\\"), 0); //$NON-NLS-1$\\n\" + ", "+\t\t\"\t\tprintTargets(project, subNames, null, InternalAntMessages.getString(\\n\" + ", "+\t\t\"\t\t\t\t\\\"InternalAntRunner.Subtargets__5\\\"), 0); //$NON-NLS-1$\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ff96f218863aa4838e4fe7cc248201f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testAnonymousType5() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType5() throws JavaModelException", "diff": ["-\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40017f66e53db481d66b5c641304d3f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 337, "methodNumberAfterChange": 338, "signatureBeforeChange": " public void test1033()", "signatureAfterChange": " public void test1033()", "diff": ["-\t\t\"The variable a cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable a cannot be null at this location\\n\" + ", "-\t\t\"The variable a can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable a can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "401d4bad68913ade8b5533dc42c2819b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "8881369a7d0e4bdf41211abd8b5386c3693abb68", "commitAfterChange": "bf2117b5b91f53fb296d1eef53e3b05f16ac6939", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void test010()", "signatureAfterChange": " public void test010()", "diff": ["-\t\t\t\"Cannot switch on a value of type X. Only convertible int values, strings or enum constants are permitted\\n\" +", "+\t\t\t\"Cannot switch on a value of type X. Only convertible int values, strings or enum variables are permitted\\n\" +", "-\t\t\t\"Cannot switch on a value of type X. Only convertible int values or enum constants are permitted\\n\" +", "+\t\t\t\"Cannot switch on a value of type X. Only convertible int values or enum variables are permitted\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "402f770393ab95b45fb8e92a4b7e592d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 475, "methodNumberAfterChange": 475, "signatureBeforeChange": " \tpublic void test471()", "signatureAfterChange": " \tpublic void test471()", "diff": ["-\t\t\t\"1. ERROR in test2\\\\FooBar.java (at line 7)\\r\\n\" + ", "-\t\t\t\"\tthis.s = \\\"foo\\\";\\r\\n\" + ", "+\t\t\t\"1. ERROR in test2\\\\FooBar.java (at line 7)\\n\" + ", "+\t\t\t\"\tthis.s = \\\"foo\\\";\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4047e8f39db3e08961d0613c7926918e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testDeleteCompilationUnit2() throws CoreException", "signatureAfterChange": " public void testDeleteCompilationUnit2() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4057f70737ae642022747e5cd55de144", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "e4262ef08c6f8e26e57ca0c6211e0fdea3f40578", "commitAfterChange": "6a7a52c96b7229ab86908d69ec0e914d08a5352f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test017()", "signatureAfterChange": " \tpublic void test017()", "diff": ["-\t\t\t\"The annotation @Author must define the member name\\n\" + ", "+\t\t\t\"The annotation @Author must define the attribute name\\n\" + ", "-\t\t\t\"The member value is undefined for the annotation type Author\\n\" + ", "+\t\t\t\"The attribute value is undefined for the annotation type Author\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "405d1e5a99be66ad662a663b8fe85df8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 858, "methodNumberAfterChange": 858, "signatureBeforeChange": " public void test852()", "signatureAfterChange": " public void test852()", "diff": ["-\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\"\t<T extends Runnable, U extends T & Runnable>  T foo() { return null; }\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\t<T extends Runnable, U extends T & Runnable>  T foo() { return null; }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "407d1b5297b0b549bb752dcbbe856a9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void testDestroySharedWorkingCopy() throws CoreException", "signatureAfterChange": " public void testDestroySharedWorkingCopy() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4098876b2aa686bc5ee5d919412951b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "e37ddd2cb60251da977bfe008d0c558febeb1616", "commitAfterChange": "ddff16f6a6b8fee88d497b4653d14d58ccda81b4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void test009()", "signatureAfterChange": " \tpublic void test009()", "diff": ["-\t\t\t  \"Duplicate methods named stream with the parameters () and () are inherited from the types Set<E> and List<E>\\n\" + ", "+\t\t\t  \"Duplicate default methods named stream with the parameters () and () are inherited from the types Set<E> and List<E>\\n\" + ", "-\t\t\t  \"Duplicate methods named parallelStream with the parameters () and () are inherited from the types Set<E> and List<E>\\n\" + ", "+\t\t\t  \"Duplicate default methods named parallelStream with the parameters () and () are inherited from the types Set<E> and List<E>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40c2bf56e3cb217f3285c2c11cfa88e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "  \tpublic void test141()", "signatureAfterChange": "  \tpublic void test141()", "diff": ["-\t\t\t\t+ \"Javadoc: Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Unknown cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ee738f97fa83c23fb6e20955a81c1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 1215, "methodNumberAfterChange": 1215, "signatureBeforeChange": " public void test1185()", "signatureAfterChange": " public void test1185()", "diff": ["-\t\t\"Method foo(Class<X>) has the same erasure foo(Class<T>) as another method in type X<U,V>\\n\" +", "+\t\t\"Erasure of method foo(Class<X>) is the same as another method in type X<U,V>\\n\" +", "-\t\t\"Method foo(Class<X<A,B>>) has the same erasure foo(Class<T>) as another method in type X<U,V>\\n\" +", "+\t\t\"Erasure of method foo(Class<X<A,B>>) is the same as another method in type X<U,V>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "413e8cd1589987950d445a77684a6a17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void testDeleteJarFile2() throws CoreException", "signatureAfterChange": " public void testDeleteJarFile2() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41fb4d0a00a207ab8547dd9dc3f23264", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void test011()", "signatureAfterChange": " \tpublic void test011()", "diff": ["-\t\t\t\"Varargs methods should only override other varargs methods unlike count(int[]) and count(int...) from type X\\n\" + ", "+\t\t\t\"Varargs methods should only override other varargs methods unlike Y.count(int[]) and X.count(int...)\\n\" + ", "-\t\t\t\"Varargs methods should only override other varargs methods unlike count(int...) and count(int[]) from type Y\\n\" + ", "+\t\t\t\"Varargs methods should only override other varargs methods unlike Z.count(int...) and Y.count(int[])\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41fe5a9e049ea225746123d6f12f3d1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testDeleteAllImports() throws CoreException", "signatureAfterChange": " public void testDeleteAllImports() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "421ce5d12fae123913163e6603c715bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": " public void testCompletionInsideGenericClass() throws JavaModelException", "signatureAfterChange": " public void testCompletionInsideGenericClass() throws JavaModelException", "diff": ["-\t\t\t\"CompletionInsideGenericClas[POTENTIAL_METHOD_DECLARATION]{CompletionInsideGenericClas, Ltest.CompletionInsideGenericClass;, ()V, CompletionInsideGenericClas, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"CompletionInsideGenericClass[TYPE_REF]{CompletionInsideGenericClass, test, Ltest.CompletionInsideGenericClass;, null, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"CompletionInsideGenericClas[POTENTIAL_METHOD_DECLARATION]{CompletionInsideGenericClas, Ltest.CompletionInsideGenericClass<TCompletionInsideGenericClassParameter;>;, ()V, CompletionInsideGenericClas, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"CompletionInsideGenericClass<CompletionInsideGenericClassParameter>[TYPE_REF]{CompletionInsideGenericClass, test, Ltest.CompletionInsideGenericClass<TCompletionInsideGenericClassParameter;>;, null, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "424907c28cbb898c95d1ad2c604245b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void test043()", "signatureAfterChange": " \tpublic void test043()", "diff": ["-\t\t\t\"    29  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    29  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    33  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    33  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42bb15e285aeaee86444d859481a7e6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForField.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test010()", "signatureAfterChange": " \tpublic void test010()", "diff": ["-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "430f2952b743063b426bf862db7b02b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void testBug103304d()", "signatureAfterChange": " \tpublic void testBug103304d()", "diff": ["-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4317a2a4e30b3e8507e268b90239107e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "8c77956bb14bf31d316463be9556a2204834682b", "commitAfterChange": "366617dbc4fc1d9363db17217a7ae199f0f005ea", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test054()", "signatureAfterChange": " \tpublic void test054()", "diff": ["-\t\t\t\t\"The argument of type Integer[] should explicitly be cast to Object[] for the invocation of the varargs method varargs(Object...) from type X. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\t\"Type Integer[] of the last argument to method varargs(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\t\"The argument of type Integer[] should explicitly be cast to Object[] for the invocation of the varargs method varargs(Object...) from type X. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\t\"Type Integer[] of the last argument to method varargs(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "436d1fb2719048633b3d316eb9d276e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": " public void test0164()", "signatureAfterChange": " public void test0164()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pro>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pro>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43cfbcb0b6336ed2a7080b52ff218fc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void test012()", "signatureAfterChange": " \tpublic void test012()", "diff": ["-\t\t\t\"    2  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    5  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"    2  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"    5  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4411814cdae16ca591dcf5088b9801c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 742, "methodNumberAfterChange": 742, "signatureBeforeChange": " public void test736()", "signatureAfterChange": " public void test736()", "diff": ["-\t\t\"1. ERROR in X.java (at line 8)\\r\\n\" + ", "-\t\t\"\tD<? extends Exception> d = (D<? extends Exception>) c;\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tD<? extends Exception> d = (D<? extends Exception>) c;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44123e7129ec8f2759a3f1def8708937", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void test090()", "signatureAfterChange": " \tpublic void test090()", "diff": ["-\t\t\t\t\t+ \"\t * @see Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see AbstractVisibility.AvcPublic Valid ref: visible inner class of local class \\n\"", "-\t\t\t\t\t+ \"\t * @see test.Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see test.AbstractVisibility.AvcPublic Valid ref: visible inner class of local class \\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4433f569cd8f2296a2ecebf0d7455155", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void testMultiLineCommentCodeSnippet6()", "signatureAfterChange": "  \tpublic void testMultiLineCommentCodeSnippet6()", "diff": ["-\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(),\\n\" +", "-\t\t\t\t\" * \t\t\t\tbox.getGames().toArray());\\n\" +", "+\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(), box\\n\" +", "+\t\t\t\t\" * \t\t\t\t.getGames().toArray());\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "443619319cd5da08c9d3a2259fe6507f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "commitAfterChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 145, "signatureBeforeChange": "     public void test140()", "signatureAfterChange": "     public void test140()", "diff": ["-    \t\t\"1. ERROR in X.java (at line 6)\\r\\n\" +", "-    \t\t\"\tstatic void foo(){}\t\\r\\n\" +", "+    \t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+    \t\t\"\tstatic void foo(){}\t\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4475d878117572e2aa6485fd0bdcaeea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void test005()", "signatureAfterChange": "  \tpublic void test005()", "diff": ["-\t\t\t\"Type safety: I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<U> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "447f6658c74fc51689057fa429fbad1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "991f1409bd400be711e46d765f6fd8e3f406ddac", "commitAfterChange": "6ab6a87ca5d929b4ba822bcc3a8b7337ae50a5fb", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " public void testOutputFolder1() throws CoreException, IOException", "signatureAfterChange": " public void testOutputFolder1() throws CoreException, IOException", "diff": ["-\t\t\t\"Project P is missing required source folder: \\'src1\\'\\n\" + ", "-\t\t\t\"Project P is missing required source folder: \\'src2\\'\",", "+\t\t\t\"Project 'P' is missing required source folder: \\'src1\\'\\n\" + ", "+\t\t\t\"Project 'P' is missing required source folder: \\'src2\\'\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44bb52d188c9db8adb06a8dfe680ce06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 383, "methodNumberAfterChange": 383, "signatureBeforeChange": "  \tpublic void test381()", "signatureAfterChange": "  \tpublic void test381()", "diff": ["-\t\t\t\"Name clash : The method foo(Class<? extends String>) of type X has the same erasure as foo(Class<String>) of type Y but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<? extends String>) of type X has the same erasure as foo(Class<String>) of type Y but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<String>) of type X has the same erasure as foo(Class<? extends String>) of type Y but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<String>) of type X has the same erasure as foo(Class<? extends String>) of type Y but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44e0389602fe8747f0bd59568ad28af6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void testMultipleWildcardSuperStringPattern05() throws CoreException", "signatureAfterChange": " \tpublic void testMultipleWildcardSuperStringPattern05() throws CoreException", "diff": ["-\t// TODO (search-frederic) try to have a better match selection", "+\t// TODO [search] try to have a better match selection", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4518357ff4596a7e64470779b38c322f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "88d654461d0ed3eb0d08040c8705ca33e88a642d", "commitAfterChange": "1620250d45b78251214c0e2b99a9c2cbe0fab602", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void testBuildProjectUsedAsLib() throws CoreException", "signatureAfterChange": " public void testBuildProjectUsedAsLib() throws CoreException", "diff": ["-\t\t\t\"Unepected delta\",", "+\t\t\t\"Unexpected delta (1)\",", "-\t\t\t\"Unepected delta\",", "+\t\t\t\"Unexpected delta (2)\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4535ea9cf3a7764960d9a1d021038fa3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testMethodOccurences() throws CoreException", "signatureAfterChange": " public void testMethodOccurences() throws CoreException", "diff": ["-\t\t\t\"p/C.java [in P1] p.C.method(Object) -> void [method]\\n\" +", "-\t\t\t\"p/I.java [in P1] p.I.method(Object) -> void [method]\", ", "+\t\t\t\"p/C.java [in P1] void p.C.method(Object) [method]\\n\" +", "+\t\t\t\"p/I.java [in P1] void p.I.method(Object) [method]\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45a4d6b3cf29336432161618cd0784ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void testRegion4() throws CoreException", "signatureAfterChange": " public void testRegion4() throws CoreException", "diff": ["-\t\t\t\"public class Y extends X X {\\n\" +", "+\t\t\t\"public class Y extends X {\\n\" +", "-\t\t\t\"public class Z extends X X {\\n\" +", "+\t\t\t\"public class Z extends X {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45bc08975ac2f8106582fb0d06332997", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void testSubCUSearchScope1() throws CoreException", "signatureAfterChange": " public void testSubCUSearchScope1() throws CoreException", "diff": ["-\t\t\"src/b3/X.java b3.X.field [X]\\n\" +", "-\t\t\"src/b3/X.java b3.X.foo() -> Object [X]\\n\" +", "-\t\t\"src/b3/X.java b3.X$Y.field2 [X]\\n\" +", "-\t\t\"src/b3/X.java b3.X$Y.foo2() -> Object [X]\", ", "+\t\t\"src/b3/X.java b3.X.field [X]\\n\" + ", "+\t\t\"src/b3/X.java Object b3.X.foo() [X]\\n\" + ", "+\t\t\"src/b3/X.java b3.X$Y.field2 [X]\\n\" + ", "+\t\t\"src/b3/X.java Object b3.X$Y.foo2() [X]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45cdc31cdf7140ccf4f6be6d73ff9121", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test003() throws Exception", "signatureAfterChange": " \tpublic void test003() throws Exception", "diff": ["-\t\t\t\t\"        [pc: 24, line: 9]\\n\" +", "+\t\t\t\t\"        [pc: 21, line: 9]\\n\" +", "-\t\t\t\t\"        [pc: 17, pc: 24] local: j index: 2 type: int\\n\" +", "+\t\t\t\t\"        [pc: 17, pc: 21] local: j index: 2 type: int\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "465d57c3b346f3b2dac0dc9f5c708926", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " public void test0085_shortcut_boolean_expression()", "signatureAfterChange": " public void test0085_shortcut_boolean_expression()", "diff": ["-\t\t\"The variable i1 may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable i1 may be null at this location\\n\" + ", "-\t\t\"The variable i2 may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable i2 may be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "467c6cc564d106546518ac0aa6dce37c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 133, "signatureBeforeChange": " \tpublic void testBug92944_ENUM() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_ENUM() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "467d2d6aaf3385737e23371d6c7de6de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic void testBug96237_Private04()", "signatureAfterChange": " \tpublic void testBug96237_Private04()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4721ed95fc11ad443845b16f6a5264cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 199, "signatureBeforeChange": " public void testBug260274e() throws JavaModelException", "signatureAfterChange": " public void testBug260274e() throws JavaModelException", "diff": ["-\t\t\"\t * **************************************************\\n\" + ", "-\t\t\"\t * ********** Test ********** Test **************\\n\" + ", "+\t\t\"\t * ************************************************** ********** Test\\n\" + ", "+\t\t\"\t * ********** Test **************\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "472430d081d73074a7c36b06257bd9b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 291, "methodNumberAfterChange": 289, "signatureBeforeChange": " public void testBug313651_wksp3_01()", "signatureAfterChange": " public void testBug313651_wksp3_01()", "diff": ["-\t\t\"\t\t// start of comment\\n\" + ", "-\t\t\"\t\t// MyFirstInterface {\\n\" + ", "+\t\t\"// start of comment\\n\" + ", "+\t\t\"// MyFirstInterface {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "473dd8c01f36aa56aaa867e3e4796d7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "3bee3efb3c3139a52dff7aa299065deb5290ece4", "commitAfterChange": "645825dd1e7c490f7b149a754d38a08b99765996", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": " \tpublic void testBug76324string()", "signatureAfterChange": " \tpublic void testBug76324string()", "diff": ["-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\t\"\t/**\\n\" + ", "-\t\t\t\t\t\"\t * Inline string references \\n\" + ", "-\t\t\t\t\t\"\t *\\n\" + ", "-\t\t\t\t\t\"\t * {@link \\\"}\\n\" + ", "-\t\t\t\t\t\"\t * {@link \\\"unterminated string}\\n\" + ", "-\t\t\t\t\t\"\t * {@link \\\"invalid string\\\"\\\"}\\n\" + ", "-\t\t\t\t\t\"\t * {@link \\\"valid string\\\"}\\n\" + ", "-\t\t\t\t\t\"\t * {@link \\\"invalid\\\" no text allowed after the string}\\n\" + ", "-\t\t\t\t\t\"\t */\\n\" + ", "-\t\t\t\t\t\"\tpublic void s_foo() {\\n\" + ", "-\t\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\t\"}\\n\" },", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\t\t\"\t* {@link \\\"}\\n\" + ", "-\t\t\t\t\t\"\t        ^^^\\n\" + ", "-\t\t\t\t\t\"Javadoc: Invalid reference\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\t\t\"\t* {@link \\\"unterminated string}\\n\" + ", "-\t\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Javadoc: Invalid reference\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\t\t\"\t* {@link \\\"invalid string\\\"\\\"}\\n\" + ", "-\t\t\t\t\t\"\t                         ^^\\n\" + ", "-\t\t\t\t\t\"Javadoc: Unexpected text\\n\" + ", "-\t\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\t\t\t\"\t* {@link \\\"invalid\\\" no text allowed after the string}\\n\" + ", "-\t\t\t\t\t\"\t                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"Javadoc: Unexpected text\\n\" + ", "-\t\t\t\t\t\"----------\\n\"", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\t/**\\n\" + ", "+\t\t\t\"\t * Inline string references \\n\" + ", "+\t\t\t\"\t *\\n\" + ", "+\t\t\t\"\t * {@link \\\"}\\n\" + ", "+\t\t\t\"\t * {@link \\\"unterminated string}\\n\" + ", "+\t\t\t\"\t * {@link \\\"invalid string\\\"\\\"}\\n\" + ", "+\t\t\t\"\t * {@link \\\"valid string\\\"}\\n\" + ", "+\t\t\t\"\t * {@link \\\"invalid\\\" no text allowed after the string}\\n\" + ", "+\t\t\t\"\t */\\n\" + ", "+\t\t\t\"\tpublic void s_foo() {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" },", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* {@link \\\"}\\n\" + ", "+\t\t\t\"\t         ^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t* {@link \\\"unterminated string}\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t* {@link \\\"invalid string\\\"\\\"}\\n\" + ", "+\t\t\t\"\t                         ^^\\n\" + ", "+\t\t\t\"Javadoc: Unexpected text\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\t* {@link \\\"invalid\\\" no text allowed after the string}\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Unexpected text\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4748b8011658f3410ce9c612182c2c6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void test014()", "signatureAfterChange": "  \tpublic void test014()", "diff": ["-\t\t\t\"Name clash : The method foo(A<String>) of type Y has the same erasure as foo(A) of type X but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type Y has the same erasure as foo(A) of type X but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(A<String>[]) of type Y has the same erasure as foo(A[]) of type X but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>[]) of type Y has the same erasure as foo(A[]) of type X but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "474fc45104c5c25f1909ee9a747c4e45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "33070dd65248032bf868ef46597e20a0b147cc6d", "commitAfterChange": "82daf6d6a8a37bf14ad5d6b147f58afbb27df25a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void run()", "signatureAfterChange": " \tpublic void run()", "diff": ["-\t\t\t\t\t\tJobManager.verbose(\"STARTING to execute - \" + job); //$NON-NLS-1$", "+\t\t\t\t\t\tJobManager.verbose(\"STARTING  background job - \" + job); //$NON-NLS-1$", "-\t\t\t\t\t\t\tJobManager.verbose(\"DONE executing - \" + job); //$NON-NLS-1$", "+\t\t\t\t\t\t\tJobManager.verbose(\"FINISHED background job - \" + job); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4755586acffdf848f5bc8c1489d66938", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "c9e02661baa80cf1f75154d10de9df61ce3f636d", "commitAfterChange": "d92419d7d90bedd902391c7e83696cf6304867ae", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test0004()", "signatureAfterChange": " public void test0004()", "diff": ["-\t\t\"c cannot be resolved\\n\" +", "+\t\t\"c cannot be resolved to a variable\\n\" +", "-\t\t\"c cannot be resolved\\n\" +", "+\t\t\"c cannot be resolved to a variable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47a5de7f8e3449279d190614fcf57065", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testMoveSourceFolder4() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder4() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c3c402596b4cdef740b107c455fba9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumCompletionParserTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test0002()", "signatureAfterChange": " public void test0002()", "diff": ["-\t\t\"case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"case <CompleteOnName:FOO> :\\n\" +", "-\t\t\"      case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"      case <CompleteOnName:FOO> :\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47ee3a0b55fddd0e10253f8da137ebc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void testMultipleWildcardExtendsStringPattern05() throws CoreException", "signatureAfterChange": " \tpublic void testMultipleWildcardExtendsStringPattern05() throws CoreException", "diff": ["-\t// TODO (search-frederic) try to have a better match selection", "+\t// TODO [search] try to have a better match selection", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "480bce3fa8909ee9b7c427a1b1ccbce9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic void testMultiLineCommentIndentSpaces2()", "signatureAfterChange": "  \tpublic void testMultiLineCommentIndentSpaces2()", "diff": ["-\t\tString expected= PREFIX + DELIMITER + \"    \" + INFIX + \"test test\" + DELIMITER + \"    \" + POSTFIX;  //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\tString expected= PREFIX + DELIMITER + \"      \" + INFIX + \"test test\" + DELIMITER + \"      \" + POSTFIX;  //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "480c92db0cb8283d4ec1ae2f3349ea96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test049() throws Exception", "signatureAfterChange": " public void test049() throws Exception", "diff": ["-\t\t\t\"        [pc: 36, line: 49]\\n\" +", "+\t\t\t\"        [pc: 36, line: 51]\\n\" +", "-\t\t\t\"        [pc: 36, line: 49]\\n\" +", "+\t\t\t\"        [pc: 36, line: 51]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "481a80d4c22403a6844d62066bb21e23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " public void testBug400905_0013a() throws CoreException", "signatureAfterChange": " public void testBug400905_0013a() throws CoreException", "diff": ["-\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit() [() /*1*/->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int int void X.zoo():Lambda(I).doit():Lambda(I).doit() [() /*2*/->] EXACT_MATCH\");", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda #1>.doit() [() /*1*/->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int int void X.zoo():<lambda #1>.doit():<lambda #1>.doit() [() /*2*/->] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "489fdc0cf01b9199c1bee7879496c6c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "7336215b569e42bf0d7946c272b0da8ff71d12fb", "commitAfterChange": "e29082e6108e43f171cfe9fae0a56914a1f2ec3e", "methodNumberBeforeChange": 987, "methodNumberAfterChange": 987, "signatureBeforeChange": " public void testBug350652g() throws JavaModelException", "signatureAfterChange": " public void testBug350652g() throws JavaModelException", "diff": ["-\t\t\t\"public class IZZException extends Exception {\\n\" +", "+\t\t\t\"class IZZException extends Exception {\\n\" +", "-\t\t\t\"public class IZZAException extends IZZException {\\n\" +", "+\t\t\t\"class IZZAException extends IZZException {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48af2b1214e7d7a921f4553aa230a6e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "42a8e7b7f9382c59bb1ff340f0838c566aaa3094", "commitAfterChange": "eaac4cd91d3c13197436495a330942a49816eb54", "methodNumberBeforeChange": 287, "methodNumberAfterChange": 287, "signatureBeforeChange": " \tpublic void test275()", "signatureAfterChange": " \tpublic void test275()", "diff": ["-\t\t\t\"\t            ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"return type needs unchecked conversion from X.useList(List<String>)\\n\" + ", "+\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\"Unsafe type operation: The return type List of the method useList(List) of type Y needs unchecked conversion to conform to the return type List<String> of inherited method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48ca924e82d50e51a2538cd5cad0c9d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 368, "methodNumberAfterChange": 368, "signatureBeforeChange": " public void test0368()", "signatureAfterChange": " public void test0368()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pri>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pri>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4909c7a226fcf7aa6d803d959ae1bd53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "7e90cfc843b0651b2df6811a5c412b5db3d07d3e", "commitAfterChange": "5aa22ef02c63418c06be6cd6a1ebf3ebbd649c6f", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "\r \tpublic void test037()", "signatureAfterChange": "\r \tpublic void test037()", "diff": ["-\t\t\t\t\"Only annotation types that explicitly specify TYPE_PARAMETER as a possible target element type can be applied here\\n\" + \r", "+\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "-\t\t\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "491778f32c1e63aaa8877190aa02af8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void test0051()", "signatureAfterChange": " public void test0051()", "diff": ["-\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + ", "-\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49395b8b40d351b852b2213f5f9c30a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 257, "methodNumberAfterChange": 257, "signatureBeforeChange": " \tpublic void test0253()", "signatureAfterChange": " \tpublic void test0253()", "diff": ["-\t\t\t\"Type safety: The cast from List<capture-of ? extends Number> to List<Number> is actually checking against the erased type List\\n\" + ", "+\t\t\t\"Type safety: The cast from List<capture#1-of ? extends Number> to List<Number> is actually checking against the erased type List\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Number> to List<Number>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<capture#3-of ? extends Number> to List<Number>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "498dc8b423d9c10a4460a55a8f208095", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RepeatableAnnotationTest.java", "commitBeforeChange": "3c8db8654fc8e2927c75863ec1232c9bc3800c9b", "commitAfterChange": "533660d1560f1a7aff4c5ccabdcd0cb35c0194c1", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test035()", "signatureAfterChange": " \tpublic void test035()", "diff": ["-\t\t\t\"The containing annotation @TC is allowed at targets where the repeatable annotation @T is not: FIELD\\n\" + ", "+\t\t\t\"The container annotation type @TC is allowed at targets where the repeatable annotation type @T is not: FIELD\\n\" + ", "-\t\t\t\"The repeatable annotation @T is disallowed for this location since its container annotation @TC is disallowed at this location\\n\" + ", "+\t\t\t\"The annotation @T cannot be repeated at this location since its container annotation type @TC is disallowed at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "498fa40975f2e55c544f8e3b11ca6993", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 603, "methodNumberAfterChange": 603, "signatureBeforeChange": " \tpublic void test599()", "signatureAfterChange": " \tpublic void test599()", "diff": ["-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49a1321101054dccba09ac009e222645", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tpublic void testBug84100c() throws CoreException", "signatureAfterChange": " \tpublic void testBug84100c() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 2, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 2, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a25e8999227ecaad35a275876a1ec0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "4e6d8f47d5cf01ca6685229129ef01e43c5fc333", "commitAfterChange": "e19e57c2cfd4e1ac379028ba46599cac5e8fc684", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["-\t\t\t\tUtil.log(e, \"ClassFormatException in \" + this.document.getPath() + \". Please report this issue to JDT/Core including the problematic document\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tUtil.log(e, \"ClassFormatException in \" + this.document.getPath() + \". This document seems to be a corrupted .class file. Please report this issue against the .class file vendor\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tUtil.log(e, \"Indexer crashed on document \" + this.document.getPath() + \". Please report this issue to JDT/Core including the problematic document\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tUtil.log(e, \"Indexer crashed on document \" + this.document.getPath() + \". This document seems to be a corrupted .class file. Please report this issue against the .class file vendor\"); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a35f50d7dd44b74bed0fdef781b2d17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 809, "methodNumberAfterChange": 807, "signatureBeforeChange": " public void test771() throws Exception", "signatureAfterChange": " public void test771() throws Exception", "diff": ["-\t\t\"\t\t\t\t\tMyE | FileNotFoundException\\n\" + ", "-\t\t\"\t\t\t\t\t| ArrayIndexOutOfBoundsException | IllegalArgumentException ex) {\\n\" + ", "+\t\t\"\t\t\t\t\tMyE | FileNotFoundException | ArrayIndexOutOfBoundsException\\n\" + ", "+\t\t\"\t\t\t\t\t| IllegalArgumentException ex) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a4fa8b052c85445530d20140c566b05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "973af06dbc6df022ac42e8e0a0c238581d8558f6", "commitAfterChange": "f61787e560ec300f4e60b2d9cc64378b38b8a03a", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  public void test072()", "signatureAfterChange": "  public void test072()", "diff": ["-\t\t\"\t          ^^^^^^^^^^\\n\" + ", "-\t\t\"Cannot throw null\\n\" + ", "+\t\t\"\t                ^^^^\\n\" + ", "+\t\t\"Cannot throw null as an exception\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a92bbbe2ec8258dfb4674667e3f92b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void testBug83230_Explicit05() throws CoreException", "signatureAfterChange": " \tpublic void testBug83230_Explicit05() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aeec9b3b4d258cb0c800ff23336bea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 243, "methodNumberAfterChange": 243, "signatureBeforeChange": " public void test0243()", "signatureAfterChange": " public void test0243()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:ext>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:ext>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4afd748ed04cb4bef6e2e82aa1cd7741", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testDeleteSyntaxErrorType() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorType() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b08d730ec7781fabf53380f66b76c71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "6b1f52d06754e9410aa789dbd826f9d303675356", "commitAfterChange": "b62ba1f827cf4ea86ca5f1a1ddb9504a62920662", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "  public void test99()", "signatureAfterChange": "  public void test99()", "diff": ["-\t\t\"    specified = ;\\n\" + ", "+\t\t\"    specified = $missing$;\\n\" + ", "-\t\t\"    thread = ;\\n\" + ", "+\t\t\"    thread = $missing$;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b19359dfd31b9e126a05526eda7adb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] POTENTIAL_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b31e3ed9e5c68aab8422d1212614e93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0dc7155c5e6d95f70a9aded517c1b54b5c1563f1", "commitAfterChange": "f6b4d99cbdd9c3e7eddd18da23b2ebc6b500e5e0", "methodNumberBeforeChange": 1008, "methodNumberAfterChange": 1008, "signatureBeforeChange": " public void test0985()", "signatureAfterChange": " public void test0985()", "diff": ["-\t\t\t\"Type safety : A generic array of Class<? extends Object&Comparable<?>&Serializable> is created for a varargs parameter\\n\" + ", "+\t\t\t\"Type safety : A generic array of Class<? extends Object&Serializable&Comparable<?>> is created for a varargs parameter\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from List<Class<? extends Object&Comparable<?>&Serializable>> to List<Class<Object>>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<Class<? extends Object&Serializable&Comparable<?>>> to List<Class<Object>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ba005d13e5370d037285aace399f6c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "85fe43540d2fa2b41e90fbadb73dc3c8d856ecfb", "commitAfterChange": "e60ca02f81acc7600a43413bd7fb7c0779ae6a52", "methodNumberBeforeChange": 645, "methodNumberAfterChange": 645, "signatureBeforeChange": "\t\t\t \tpublic void test641()", "signatureAfterChange": "\t\t\t \tpublic void test641()", "diff": ["-\t\t\t\"----------\\n\" + ", "+\t        \"----------\\n\" + ", "-\t\t\t\"\t             ^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"\t             ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bbe9c1994802ef52c350034029f71ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 537, "methodNumberAfterChange": 537, "signatureBeforeChange": " \tpublic void test533()", "signatureAfterChange": " \tpublic void test533()", "diff": ["-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" + ", "+\t\t\t\"Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4be019824ad6194f516fa918620a57bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic void testBug96237_Public04()", "signatureAfterChange": " \tpublic void testBug96237_Public04()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c02c780b20f894c920a0bef00821c26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f89b6f69d5b1d8c03dfafeefd4581b8a274e18cd", "commitAfterChange": "5efcb08befcedce336af517de77febbf3477ef46", "methodNumberBeforeChange": 316, "methodNumberAfterChange": 316, "signatureBeforeChange": " \tpublic void _test304()", "signatureAfterChange": " \tpublic void _test304()", "diff": ["-\t\t\t\t\"public  X<T extends Y> {}\\n\" + ", "+\t\t\t\t\"public class X<T extends Y> {}\\n\" + ", "-\t\t\t\"SUCCESS\");\t", "+\t\t\t\"\");\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c06fec28c85f4c1348832e941d822a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test028()", "signatureAfterChange": " \tpublic void test028()", "diff": ["-\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c43cddf14f57d5a14ef65af2c29d47e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void testRenameJarFile2() throws CoreException", "signatureAfterChange": " public void testRenameJarFile2() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c752bdb1225cae58c0311f7204c6b5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void testJavadocConstructorArgReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocConstructorArgReference() throws CoreException", "diff": ["-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\"", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched()] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched(String)] EXACT_MATCH INSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c7bcf3111cd0bd2316f719ebc14c011", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "68f185fc63132d7b106a1c7ca52ed6d004b96329", "commitAfterChange": "4a85a8ee613913420acf3dde5af380e91d3bad2c", "methodNumberBeforeChange": 249, "methodNumberAfterChange": 249, "signatureBeforeChange": " public void test425512cd() throws Exception", "signatureAfterChange": " public void test425512cd() throws Exception", "diff": ["-\t\t\"\t                ^\\n\" + ", "-\t\t\"Impossible interface for array type\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Arrays are not allowed in intersection cast operator\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c7fac2d4daf2776a08bb4863f676243", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "96c7afd29f6893c16cf00a3ac29701c1a81f919d", "commitAfterChange": "dd45817f66a0a68c9747e1c73f77cc12766ad25c", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void testBug232768_Block03() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Block03() throws JavaModelException", "diff": ["-\t\t\"\\n\" +", "-\t\t\"\t/*\\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /*\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ca18f89910960cb79394f1a249889e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void test074()", "signatureAfterChange": " public void test074()", "diff": ["-\t\t\"Local cannot be resolved or is not a type\\n\" + ", "+\t\t\"Local cannot be resolved to a type\\n\" + ", "-\t\t\"Local cannot be resolved or is not a type\\n\" + ", "+\t\t\"Local cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ca9248c34d5d39254852fefaf56b139", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 292, "methodNumberAfterChange": 290, "signatureBeforeChange": " public void testBug313651_wksp3_02()", "signatureAfterChange": " public void testBug313651_wksp3_02()", "diff": ["-\t\t\"\t\t// start of comment\\n\" + ", "-\t\t\"\t\t// MyFirstInterface {\\n\" + ", "+\t\t\"// start of comment\\n\" + ", "+\t\t\"// MyFirstInterface {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cae4e2f0eb1ecf15a1bdedab5867130", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "332f2b4bbc61519d48f9e1634468f589fe6ec357", "commitAfterChange": "1dac44e6f5251febeac5322fb143c153ef780c6a", "methodNumberBeforeChange": 731, "methodNumberAfterChange": 731, "signatureBeforeChange": " public void test725()", "signatureAfterChange": " public void test725()", "diff": ["-\t\t\"\t       ^^^^^^\\n\" + ", "-\t\t\"The method resize(T[], T[]) in the type AbsC is not applicable for the arguments (T[][], Object[][])\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Object[][] to T[][]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d39fb8e17be8b70721d5a5030a6106f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "b56ee0a29e919d047b98aed991f4d73be016ed08", "commitAfterChange": "079de37f5a5bae65a968aa0699ca7ca223c351c8", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "\r public void test0062() throws IOException", "signatureAfterChange": "\r public void test0062() throws IOException", "diff": ["-\t\t\"                    if ((o instanceof  @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @NonEmpty [][]))\\n\" + \r", "+\t\t\"                    if ((o instanceof @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @NonEmpty [][]))\\n\" + \r", "-\t\t\"                            if ((o instanceof  @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator))\\n\" + \r", "+\t\t\"                            if ((o instanceof @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator))\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d40071162bbc5d615eb2deb9e803679", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void testTypeRefAll_Import() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Import() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java [import \ufffd|type.def.Bug|\ufffd;@31] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java [import \ufffd|type.def.Types|\ufffd;@52] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java [import !|type.def.Bug|!;@31] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java [import !|type.def.Types|!;@52] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d4dcbf3ac61672b9824a5264bdb8ffc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tpublic void test050f()", "signatureAfterChange": " \tpublic void test050f()", "diff": ["-\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method a(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method a(A<Number>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d66f7ae384fcac795fbfb226f7daeaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 168, "methodNumberAfterChange": 168, "signatureBeforeChange": " \tpublic void test050g()", "signatureAfterChange": " \tpublic void test050g()", "diff": ["-\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e3f2b99186fd9c51228f0ccccb8b0f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tpublic void testDefaultNonclash3()", "signatureAfterChange": " \t \tpublic void testDefaultNonclash3()", "diff": ["-\t\t\t\t\"\tIterable<BiValue<K, V>> asIterable() default {\\n\" +", "+\t\t\t\t\"\tdefault Iterable<BiValue<K, V>> asIterable() {\\n\" +", "-\t\t\t\t\"\tIterable<BiValue<K, V>> asIterable() default {\\n\" +", "+\t\t\t\t\"\tdefault Iterable<BiValue<K, V>> asIterable() {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e780ebdb6488be5693ba4e9f910d5ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "c7a9fd38200c4e189bbe3a395c03138a0d9a5d08", "commitAfterChange": "c75f4ebceed583005251ebcb11a8c3d8faa0a35e", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void test0028()", "signatureAfterChange": " public void test0028()", "diff": ["-\t\t\"Syntax error on token \\\"ELLIPSIS\\\", invalid VariableDeclaratorId\\n\" + ", "+\t\t\"Syntax error on token \\\"...\\\", invalid VariableDeclaratorId\\n\" + ", "-\t\t\"Syntax error on token \\\"ELLIPSIS\\\", VariableDeclaratorId expected after this token\\n\" + ", "+\t\t\"Syntax error on token \\\"...\\\", VariableDeclaratorId expected after this token\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e793877f1dd0064e38b1094c1f0b842", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void testRenameJarFile2() throws CoreException", "signatureAfterChange": " public void testRenameJarFile2() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e8301de141230901b13218f76f1f27b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "a12b1847e48d96ac5e805a907f4cf72bcc8b1f19", "commitAfterChange": "1f22eae4a2779bf8c236df5ff222307e09db45c0", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  public void testCompletionMethodDeclaration5() throws JavaModelException", "signatureAfterChange": "  public void testCompletionMethodDeclaration5() throws JavaModelException", "diff": ["-\t\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperClass;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\"+", "+\t\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a, Object b), LCompletionSuperClass;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\"+", "-\t\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperClass;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\"+", "+\t\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a, Object b), LCompletionSuperClass;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\"+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eafa749ce060d31a58253ad8f8bfc45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " public void testBug239719() throws JavaModelException", "signatureAfterChange": " public void testBug239719() throws JavaModelException", "diff": ["-\t\t\" * \t&#64;Override\\n\" + ", "+\t\t\" * \t&#064;Override\\n\" + ", "-\t\t\" * \t\tSystem.out.println(\\\"Press Shift+Ctrl+F to format\\\");\\n\" + ", "+\t\t\" * \t\tSystem.out.println(&quot;Press Shift+Ctrl+F to format&quot;);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eb256f2e0e23f791b9058d0e82667f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForClass.java", "commitBeforeChange": "3bee3efb3c3139a52dff7aa299065deb5290ece4", "commitAfterChange": "645825dd1e7c490f7b149a754d38a08b99765996", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void test010()", "signatureAfterChange": " \tpublic void test010()", "diff": ["-\t\t\t\t+ \"\t      ^^\\n\"", "+\t\t\t\t+ \"\t       ^\\n\"", "-\t\t\t\t+ \"\t      ^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eb833afa18f5f91ce90883dad1a13ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void testMultiLineCommentCodeSnippet5()", "signatureAfterChange": "  \tpublic void testMultiLineCommentCodeSnippet5()", "diff": ["-\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(),\\n\" +", "-\t\t\t\t\" * \t\t\t\tbox.getGames().toArray());\\n\" +", "+\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(), box\\n\" +", "+\t\t\t\t\" * \t\t\t\t.getGames().toArray());\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f0b7a655491d3e83b66ba2452852ba2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "85fe43540d2fa2b41e90fbadb73dc3c8d856ecfb", "commitAfterChange": "e60ca02f81acc7600a43413bd7fb7c0779ae6a52", "methodNumberBeforeChange": 474, "methodNumberAfterChange": 474, "signatureBeforeChange": " \tpublic void test470()", "signatureAfterChange": " \tpublic void test470()", "diff": ["-\t\t\t\"\t          ^^\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"\t          ^^\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fe703e637fac61a55f4a1dfe905109d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "c86229e56d86bc6c43c864b0c2be3c639790cc44", "commitAfterChange": "886274eeca44ac156a0ab29fb479330630b97083", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void testBug73348negative()", "signatureAfterChange": " \tpublic void testBug73348negative()", "diff": ["-\t\t\t\t\"Javadoc: Missing return type description\\n\" + ", "+\t\t\t\t\"Javadoc: Description expected after @return\\n\" + ", "-\t\t\t\t\"Javadoc: Missing return type description\\n\" + ", "+\t\t\t\t\"Javadoc: Description expected after @return\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4feac812b19e0df27f9a934c8d7cb61d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 462, "methodNumberAfterChange": 462, "signatureBeforeChange": " \tpublic void test458()", "signatureAfterChange": " \tpublic void test458()", "diff": ["-\t\t\t\"Type safety: A is a raw type. References to generic type A<E> should be parameterized\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: B is a raw type. References to generic type B<T> should be parameterized\\n\" + ", "+\t\t\t\"B is a raw type. References to generic type B<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "501862ce0f451d17691f6bb29e35fd2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 296, "methodNumberAfterChange": 296, "signatureBeforeChange": " public void testBug330313_wksp1_19_njl()", "signatureAfterChange": " public void testBug330313_wksp1_19_njl()", "diff": ["-\t\t\"\t\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "-\t\t\"\t\t\t\t\t\to.bodyDeclarations()));\\n\" + ", "+\t\t\"\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "+\t\t\"\t\t\t\t\to.bodyDeclarations()));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50b73d5cf1b3b5cd9583e3f135536473", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "85fe43540d2fa2b41e90fbadb73dc3c8d856ecfb", "commitAfterChange": "e60ca02f81acc7600a43413bd7fb7c0779ae6a52", "methodNumberBeforeChange": 811, "methodNumberAfterChange": 811, "signatureBeforeChange": " public void test805()", "signatureAfterChange": " public void test805()", "diff": ["-\t\t\"\t       ^\\n\" + ", "+\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"\t       ^^\\n\" + ", "+\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50b95c2870f58645df1e16c7d9b42866", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "f08e2fcfb74b9a513988b6c92b3d0f1c94eb6ecf", "commitAfterChange": "c35e0ba6a6bce7272fb4c8d0b339e50b59e7d2a3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void testRenameMethod1() throws JavaModelException", "signatureAfterChange": " public void testRenameMethod1() throws JavaModelException", "diff": ["-\t\t\"\tbar[+]: {}\\n\" + ", "-\t\t\"\tfoo[-]: {}\"", "+\t\t\"\tbar()[+]: {}\\n\" + ", "+\t\t\"\tfoo()[-]: {}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f8624d488cc33b8257b7988b7d1170", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testBug83127a()", "signatureAfterChange": " \tpublic void testBug83127a()", "diff": ["-\t\t\t\"\t            ^^^^\\n\" + ", "+\t\t\t\"\t            ^^^^^^^\\n\" + ", "-\t\t\t\"\t        ^^^^\\n\" + ", "+\t\t\t\"\t        ^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5135a967f270184792af99dea5ae422f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 459, "methodNumberAfterChange": 459, "signatureBeforeChange": " \t \tpublic void test457()", "signatureAfterChange": " \t \tpublic void test457()", "diff": ["-\t\t\t\"\t^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The method add(? extends X) of type List<? extends X> is not applicable for the arguments (X). The wildcard parameter ? extends X has no lower bound, and may actually be more restrictive than argument X\\n\" + ", "+\t\t\t\"\t  ^^^\\n\" + ", "+\t\t\t\"The method add(capture-of ? extends X) in the type List<capture-of ? extends X> is not applicable for the arguments (X)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5196eb84232a57f3486ba84aeabf57dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void testBug233259c() throws JavaModelException", "signatureAfterChange": " public void testBug233259c() throws JavaModelException", "diff": ["-\t\t\"\t * @see <a\\n\" +", "-\t\t\"\t *      href=\\\"http://012346789\\\">Test</a>\\n\" +", "+\t\t\"\t * @see <a href=\\\"http://012346789\\\">\\n\" +", "+\t\t\"\t *      Test</a>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51c640a26c9c5c66aff9dcda7ef58712", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void testBug027079c2() throws JavaModelException", "signatureAfterChange": " public void testBug027079c2() throws JavaModelException", "diff": ["-\t\t\"\t\t/** formatted comment */\\n\" + ", "-\t\t\"\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + ", "+\t\t\"\t\t\t\t/** formatted comment */\\n\" + ", "+\t\t\"\t\t\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51cdbe894c887900d88a9e5e68f0b37c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "53df7d602035de3d31fcc1ea92403ee3f66bc84a", "commitAfterChange": "b501a050436f0ed4b21c2887b8c36095ae4a6672", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic void test0077()", "signatureAfterChange": " \tpublic void test0077()", "diff": ["-\t\t\t\"\t      ^^^^\\n\" +", "-\t\t\t\"xt.t cannot be resolved or is not a field\\n\" +", "+\t\t\t\"\t         ^\\n\" +", "+\t\t\t\"t cannot be resolved or is not a field\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5203fa2c984cfe4960bace8e9dfc3547", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 244, "methodNumberAfterChange": 244, "signatureBeforeChange": " \tpublic void test093()", "signatureAfterChange": " \tpublic void test093()", "diff": ["-\t\t\t\"Method toArray(S[]) has the same erasure toArray(Object[]) as another method in type DataSet<T>\\n\" +", "+\t\t\t\"Erasure of method toArray(S[]) is the same as another method in type DataSet<T>\\n\" +", "-\t\t\t\"Method toArray(Object[]) has the same erasure toArray(Object[]) as another method in type DataSet<T>\\n\" +", "+\t\t\t\"Erasure of method toArray(Object[]) is the same as another method in type DataSet<T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5222e4ed4aecc1e3ea082c544c0271ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "651074214e4c9b56c8b80ed78ea44f52cab0c46b", "commitAfterChange": "7dd03532bcfb1c993a21c44294d5af3f093cd0ca", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test041()", "signatureAfterChange": " \tpublic void test041()", "diff": ["-\t\t\"\t      ^^^\\n\" + ", "-\t\t\"The annotation field X.tab must be initialized with a constant expression\\n\" + ", "+\t\t\"\t            ^^^^^\\n\" + ", "+\t\t\"Cannot make a static reference to the non-static method value() from the type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52232aa2a94e0020df6b088ae22e1f90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " public void testSaveWorkingCopy() throws CoreException", "signatureAfterChange": " public void testSaveWorkingCopy() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "525fd1266a3deda5602d2d4e5f389c8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 287, "methodNumberAfterChange": 287, "signatureBeforeChange": " public void testBug330313_wksp1_13()", "signatureAfterChange": " public void testBug330313_wksp1_13()", "diff": ["-\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0 && this\\n\" + ", "-\t\t\"\t\t\t\t\t.getNamesOfDeletedChildren().length == 0);\\n\" + ", "+\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0\\n\" + ", "+\t\t\"\t\t\t\t&& this.getNamesOfDeletedChildren().length == 0);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d664a33dbd3f1726ccbb2f04ef5f1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "130cb4765fd3f636bbf53ed159d4905dec0a5fd5", "commitAfterChange": "938f4b2ad6ef3c12e60db3be23aed731979677d7", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void test088()", "signatureAfterChange": " public void test088()", "diff": ["-\t\t\"The argument of type null should explicitly be cast to Class[] for the invocation of the varargs method getMethod(String, Class...) from type Class. It could alternatively be cast to Class for a varargs invocation\\n\" +", "+\t\t\"Type null of the last argument to method getMethod(String, Class...) doesn't exactly match the vararg parameter type. Cast to Class[] to confirm the non-varargs invocation, or pass individual arguments of type Class for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Class[] for the invocation of the varargs method getMethod(String, Class...) from type Class. It could alternatively be cast to Class for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method getMethod(String, Class...) doesn't exactly match the vararg parameter type. Cast to Class[] to confirm the non-varargs invocation, or pass individual arguments of type Class for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52e5be9ea26b8ef7550f4b60ade59ea5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void testBug101283c()", "signatureAfterChange": " \tpublic void testBug101283c()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52f40f88fb3651d2cb345a6e70a1d323", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 457, "methodNumberAfterChange": 457, "signatureBeforeChange": " \tpublic void test453()", "signatureAfterChange": " \tpublic void test453()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class X<T extends I & I> {}\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X<T extends I & I> {}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52fef8dff59cc1feca1d37190aa8bc28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "dee823e8e9454e3bbc323b61e0e66446bfc3e48a", "commitAfterChange": "c903817ea1b3b3294907f8d4a93524af350dfca3", "methodNumberBeforeChange": 596, "methodNumberAfterChange": 596, "signatureBeforeChange": " \tpublic void test0591()", "signatureAfterChange": " \tpublic void test0591()", "diff": ["-\t\t\t\t\"\t\treturn select(box.getValues());\\n\" + ", "+\t\t\t\t\"\t\treturn selectedValues(box.getValues());\\n\" + ", "-\t\t\t\t\"\tpublic static <G> Values<G> select(Values<? extends G> v) {\\n\" + ", "+\t\t\t\t\"\tpublic static <G> Values<G> selectedValues(Values<? extends G> v) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53033bf90a3f6bb71bfc38e290c91eff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testBug80264_MethodsIgnoreDeclaringType() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80264_MethodsIgnoreDeclaringType() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5316d474ce05ce261b2fc114c2137953", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssignmentTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test036()", "signatureAfterChange": " public void test036()", "diff": ["-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o can only be null at this location\\n\" + ", "-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable o can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5337b35a7ab1a501b2c317a631dcdfb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic void test011()", "signatureAfterChange": "  \tpublic void test011()", "diff": ["-\t\t\t\"Name clash : The method foo(T) of type A has the same erasure as foo(T) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type A has the same erasure as foo(T) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(T) of type A has the same erasure as foo(T) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type A has the same erasure as foo(T) of type I but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5367e4e4a65b0d43122b2386d81d9eeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "61742b7a485fa965b2f7b05fc8eadc51ecd60a49", "commitAfterChange": "d304d5cd9d0c4f90c63a024d76dece50501ce7a8", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "  public void test122() throws JavaModelException", "signatureAfterChange": "  public void test122() throws JavaModelException", "diff": ["-\t\t\"xtm[JAVADOC_PARAM_REF]{xtm, null, null, xtm, null, \"+this.positions+\"14}\\n\" +", "-\t\t\"xtc[JAVADOC_PARAM_REF]{xtc, null, null, xtc, null, \"+this.positions+\"13}\\n\" +", "+\t\t\"xtm[JAVADOC_PARAM_REF]{xtm, null, null, xtm, null, \"+this.positions+\"19}\\n\" +", "+\t\t\"xtc[JAVADOC_PARAM_REF]{xtc, null, null, xtc, null, \"+this.positions+\"18}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53d59e2f1d2db712d4ac6148d140e15d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f711a2e15fc3de73f79ccc61d2dafcbdd0d9f0f1", "commitAfterChange": "e823242f8d03d0ef2504eab819b418e785f092ee", "methodNumberBeforeChange": 799, "methodNumberAfterChange": 799, "signatureBeforeChange": " public void test0779() throws Exception", "signatureAfterChange": " public void test0779() throws Exception", "diff": ["-\t\t\"    0  aload_0\\n\" +", "-\t\t\"    1  iload_1\\n\" +", "+\t\t\"    0  aload_0 [this]\\n\" +", "+\t\t\"    1  iload_1 [arg0]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "546dfdcf7c24131c033fe4d590f7cbe1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 805, "methodNumberAfterChange": 805, "signatureBeforeChange": " public void test799()", "signatureAfterChange": " public void test799()", "diff": ["-\t\t\"Type safety: Y is a raw type. References to generic type Y<E> should be parameterized\\n\" + ", "+\t\t\"Y is a raw type. References to generic type Y<E> should be parameterized\\n\" + ", "-\t\t\"Type safety: Y is a raw type. References to generic type Y<E> should be parameterized\\n\" + ", "+\t\t\"Y is a raw type. References to generic type Y<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "547346b66b3236244375fd8b2dd6865a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 308, "signatureBeforeChange": " public void testBug330313_wksp1_31_njl()", "signatureAfterChange": " public void testBug330313_wksp1_31_njl()", "diff": ["-\t\t\"\t\t\t\t\t\t&& hasOneOf(meta63, hashable, offset - 2, 2) && !hasOneOf(\\n\" + ", "-\t\t\"\t\t\t\t\t\t\tmeta64, hashable, offset - 4, 2)))\\n\" + ", "+\t\t\"\t\t\t\t\t\t&& hasOneOf(meta63, hashable, offset - 2, 2)\\n\" + ", "+\t\t\"\t\t\t\t\t\t&& !hasOneOf(meta64, hashable, offset - 4, 2)))\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5479f7545c754ed552b36c0a8445de3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 600, "methodNumberAfterChange": 600, "signatureBeforeChange": " public void testBug251827a() throws CoreException", "signatureAfterChange": " public void testBug251827a() throws CoreException", "diff": ["-\t\t\"src/b251827/X.java [import static b251827.\ufffd|B251827|\ufffd.VAL;] EXACT_MATCH\\n\" + ", "-\t\t\"src/b251827/X.java [import static b251827.\ufffd|B251827|\ufffd.foo;] EXACT_MATCH\"", "+\t\t\"src/b251827/X.java [import static b251827.!|B251827|!.VAL;] EXACT_MATCH\\n\" + ", "+\t\t\"src/b251827/X.java [import static b251827.!|B251827|!.foo;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "547c68d7974b0475926961fd9170554f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "194abd534b611ec2d23ab367d4102b5723758d82", "commitAfterChange": "c7d3258ae74375a57da545fcb11a05d452eeaa7b", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " \tpublic void test0547() throws JavaModelException", "signatureAfterChange": " \tpublic void test0547() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$74;^1\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$74;\", typeBinding.getKey());", "-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$100;^1\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$100;\", typeBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54a3707107215ee9f372884d905b23bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 381, "methodNumberAfterChange": 381, "signatureBeforeChange": "  public void test1023()", "signatureAfterChange": "  public void test1023()", "diff": ["-\t\t\t\"  void foo() {\\n\" +", "+\t\t\t\"  void foo(Object that) {\\n\" +", "-\t\t\t\"    while (this != null) {\\n\" +", "+\t\t\t\"    while (that != null) {\\n\" +", "-\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 13)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54bbd1cbdd1a6f913b30e140b7eb2865", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic void test079()", "signatureAfterChange": " \tpublic void test079()", "diff": ["-\t\t\t\"  private strictfp X(String arg, int arg);\\n\",", "+\t\t\t\"  private strictfp X(java.lang.String arg, int arg);\\n\",", "-\t\t\t\"  public static final strictfp X valueOf(String arg);\\n\"", "+\t\t\t\"  public static final strictfp X valueOf(java.lang.String arg);\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54cc97df362cf28ec1c88812bd244244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ClasspathTests.java", "commitBeforeChange": "b6c3ef88a42ce595faa4897ed3f3cb935e51c7fb", "commitAfterChange": "80d11a1b2e7fe69d0ca6c0214575c56a017a1140", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void testMissingLibrary1() throws JavaModelException", "signatureAfterChange": "  \tpublic void testMissingLibrary1() throws JavaModelException", "diff": ["-\t\t\t\tnew Problem(\"\", \"The project was not built since its classpath is incomplete. Cannot find the class file for java.lang.Object. Fix the classpath then try rebuilding this project.\", projectPath), //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p1\", \"This compilation unit indirectly references the missing type java.lang.Object (typically some required class file is referencing a type outside the classpath)\", classTest1) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"\", \"The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try rebuilding this project.\", projectPath), //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files.\", classTest1) //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55460a0cc42ad50e03aec4c4554cd20f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/visitors/VisitorProc.java", "commitBeforeChange": "339cc4d6bf1e0c04b5fd8670b5c5775e9b614ac5", "commitAfterChange": "58ac3474e49d75029f8406ec492537c604468d2a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": "  \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["-\t\tTypeElement typedAnnosDecl = _elementUtils.getTypeElement(\"targets.model.pc.TypedAnnos\");", "+\t\tTypeElement typedAnnosDecl = _elementUtils.getTypeElement(\"org.eclipse.jdt.compiler.apt.tests.annotations.TypedAnnos\");", "-\t\t\treportError(\"Couldn't find targets.model.pc.TypedAnnos\");", "+\t\t\treportError(\"Couldn't find targets.model.pc.AnnotatedWithManyTypes\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55b3c3e9f4f5817204246fef1efb22f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "e3e2c6db2bd518e6c887dd95ff25a83382caa874", "commitAfterChange": "79dfe93fb5ee8f61e6c4f3be92a2d21cce1717db", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void testBug416175()", "signatureAfterChange": " \tpublic void testBug416175()", "diff": ["-\t\t\t\"Null type safety (type annotations): The expression of type \\'ArrayList<String>\\' needs unchecked conversion to conform to \\'List<@NonNull ? extends java.lang.String>\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'ArrayList<String>\\' needs unchecked conversion to conform to \\'List<@NonNull ? extends String>\\'\\n\" + ", "-\t\t\t\"Null type mismatch: required \\'@NonNull capture#\\' but the provided value is null\\n\" + ", "+\t\t\t\"Null type mismatch: required \\'@NonNull ? extends String\\' but the provided value is null\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55d3c104d256382fe6e549fcf1709259", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 371, "methodNumberAfterChange": 371, "signatureBeforeChange": " public void test313_warn_options()", "signatureAfterChange": " public void test313_warn_options()", "diff": ["-\t\t\"Missing nullable annotation: inherited method from X declares this parameter as @Nullable\\n\" + ", "+\t\t\"Missing nullable annotation: inherited method from X specifies this parameter as @Nullable\\n\" + ", "-\t\t\"Missing non-null annotation: inherited method from X declares this parameter as @NonNull\\n\" +", "+\t\t\"Missing non-null annotation: inherited method from X specifies this parameter as @NonNull\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55f821f05c06e96af61c2f907f36b42b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void test026()", "signatureAfterChange": " \tpublic void test026()", "diff": ["-\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56367d9097f838c3612cfebb56bd83f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testBug198074_dup213700() throws JavaModelException", "signatureAfterChange": " public void testBug198074_dup213700() throws JavaModelException", "diff": ["-\t\t\"\t\t\t(d == e) &&\\n\" + ", "-\t\t\"\t\t\t(f == g && h == i)) {\\n\" + ", "+\t\t\"\t\t\t\t(d == e) &&\\n\" + ", "+\t\t\"\t\t\t\t(f == g && h == i)) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56440defef5fb6bbcf46f74a78a0b49b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "ffeed267a99a88937f67ef7ac016311795643351", "commitAfterChange": "3a63318c7c971556de3d8eec3ac99b2852d8328d", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void testProjectClose() throws JavaModelException, CoreException", "signatureAfterChange": " public void testProjectClose() throws JavaModelException, CoreException", "diff": ["-\t\t\t\"JavaProjectTests[*]: {CLOSED}\\n\" + ", "+\t\t\t\"JavaProjectTests[-]: {}\\n\" + ", "-\t\t\t\t\"JavaProjectTests[*]: {OPENED}\\n\" + ", "+\t\t\t\t\"JavaProjectTests[+]: {}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5687d91543a69cf801cd25ec5693f322", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug101283b()", "signatureAfterChange": " \tpublic void testBug101283b()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class X<T, F> {\\n\" +", "-\t\t\t\"\t               ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\t* @see T Variable \\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\t* @see F Variable\\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\tstatic class Entry<L, R> {\\n\" +", "-\t\t\t\"\t                   ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "+\t\t\t\"\t               ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @see T Variable \\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see F Variable\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tstatic class Entry<L, R> {\\n\" + ", "+\t\t\t\"\t                   ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56c1c35b434fccb5d3eb26a4c3fdf824", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "582314aebaa81c30307377892044ded507af1f74", "commitAfterChange": "c0ecc47cac9e40a73cc3ed5a5be93bbace7cb891", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void test045() throws CoreException", "signatureAfterChange": " \tpublic void test045() throws CoreException", "diff": ["-\t\t\t\t\"Lp1/Y<+Lp1/X;>;^1\"", "+\t\t\t\t\"Lp1/Y<Lp1/Y<TE;>;+Lp1/X;>;^1\"", "-\t\t\t\"Lp1/Y<+Lp1/X;>;^1\",", "+\t\t\t\"Lp1/Y<Lp1/Y<TE;>;+Lp1/X;>;^1\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56da344865da6a5efde950ae9b907352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void test036()", "signatureAfterChange": " \tpublic void test036()", "diff": ["-\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56ec4c2934121ae43a43924def552d3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "f8e06af2d64912de617f742baa744d8cff14ca39", "commitAfterChange": "799bcf90c7e5ed6ce45339b7f5c6f4ecccd1d29c", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void test400556j()", "signatureAfterChange": " public void test400556j()", "diff": ["-\t\t\t\"\t               ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The target type of this expression is not a well formed parameterized type due to bound(s) mismatch\\n\" + ", "+\t\t\t\"\t                ^^^^^^\\n\" + ", "+\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<?>>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5717e8fb68dfd4fa73c454d69760f8ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EQUIVALENT_RAW_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5791ff3107e943288647de282d9d8277", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "cb764d0f635c3538feb2f431a07bf4883bc5e3de", "commitAfterChange": "2fc42eeb502a121cefe1f87a9fd2e92cf7c57bec", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": " public void test0459_while_nested()", "signatureAfterChange": " public void test0459_while_nested()", "diff": ["-\t\t\"1. ERROR in X.java (at line 11)\\r\\n\" +", "-\t\t\"\twhile (o == null) {\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 11)\\n\" +", "+\t\t\"\twhile (o == null) {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "579f06762f08b537f745b51d586c65f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericsCompletionParserTest.java", "commitBeforeChange": "c44d89fd5379544a6ddb472a22f014ab5bce19e8", "commitAfterChange": "a7e924b1651a1b9026ccc6590ce8e03365836a1b", "methodNumberBeforeChange": 195, "methodNumberAfterChange": 195, "signatureBeforeChange": " public void test0192()", "signatureAfterChange": " public void test0192()", "diff": ["-\texpectedCompletionNodeToString = \"<CompleteOnName:fo>\";", "+\texpectedCompletionNodeToString = \"<CompleteOnMessageSendName:zzz.<String>fo()>\";", "-\t\t\"    <CompleteOnName:fo>;\\n\" + ", "+\t\t\"    <CompleteOnMessageSendName:zzz.<String>fo()>;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57b51acbc0615a4a86986776436be738", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 228, "methodNumberAfterChange": 229, "signatureBeforeChange": " public void testBug260381_wksp2_07() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_07() throws JavaModelException", "diff": ["-\t\t\"\t * e2)} must not throw a {@code ClassCastException} for any elements\\n\" + ", "-\t\t\"\t * {@code e1} and {@code e2} in the multiset. If the user attempts to add an\\n\" + ", "+\t\t\"\t * e2)} must not throw a {@code ClassCastException} for any elements {@code\\n\" + ", "+\t\t\"\t * e1} and {@code e2} in the multiset. If the user attempts to add an\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57f137936713f3fd9a00af812be3d3c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 278, "methodNumberAfterChange": 278, "signatureBeforeChange": " \tpublic void test0277() throws JavaModelException", "signatureAfterChange": " \tpublic void test0277() throws JavaModelException", "diff": ["-\t\t\t\"public void foo() {\\r\\n\" +", "+\t\t\t\"public void foo() {\\n\" +", "-\t\t\t\"{\\r\\n\" +", "+\t\t\t\"{\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5872bb5252bce7cd59d1bcacd9391f4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SelectionTest.java", "commitBeforeChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "commitAfterChange": "0c7dcd00d6a732fdf9bc489cc88efc5a93db4f6e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void test19()", "signatureAfterChange": " public void test19()", "diff": ["-\tString expectedCompletionNodeToString = \"<SelectOnName:Object>\";", "+\tString expectedCompletionNodeToString = \"<SelectOnType:Object>\";", "-\t\t\"    <SelectOnName:Object>;\\n\" +", "+\t\t\"    return (<SelectOnType:Object>) this;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "587eeebe1a43b85a548e91248a50a6ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "2292d96d982a21ac668b3edcff1d774c928dd59d", "commitAfterChange": "e19275b58ad64aff1e057c59c0e35ec0b545a662", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic void test036() throws CoreException", "signatureAfterChange": " \tpublic void test036() throws CoreException", "diff": ["-\t\t\t\t\"    new X<String>().foo(\\\"\\\", this);\\n\" +", "+\t\t\t\t\"    /*start*/new X<String>().foo(\\\"\\\", this)/*end*/;\\n\" +", "-\t\t\t\"Lp1/X<Ljava/lang/String;>;.foo<U:Ljava/lang/Object;>(TT;TU;)V%<Lp1/X<>;>\");", "+\t\t\t\"Lp1/X<Ljava/lang/String;>;.foo<U:Ljava/lang/Object;>(Ljava/lang/String;TU;)V%<Lp1/X;>\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58b876fca185c99c799fae436a1c6866", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void test074()", "signatureAfterChange": " \tpublic void test074()", "diff": ["-\t\t\t\"  public abstract String _string() default \\\"\\\";\\n\" + ", "+\t\t\t\"  public abstract java.lang.String _string() default \\\"\\\";\\n\" + ", "-\t\t\t\"  public abstract Class _class() default I;\\n\" + ", "+\t\t\t\"  public abstract java.lang.Class _class() default I;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58d8612a91ae24e8307186279c844bcf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void test001()", "signatureAfterChange": "  \tpublic void test001()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<U> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e010d4fa3e0fda66a0217db23bb46e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 811, "methodNumberAfterChange": 811, "signatureBeforeChange": " public void test0804()", "signatureAfterChange": " public void test0804()", "diff": ["-\t\t\"The method foo(capture-of ? extends Object[]) in the type Y<capture-of ? extends Object[]> is not applicable for the arguments (Object[])\\n\" + ", "+\t\t\"The method foo(capture#3-of ? extends Object[]) in the type Y<capture#3-of ? extends Object[]> is not applicable for the arguments (Object[])\\n\" + ", "-\t\t\"The method foo(capture-of ? extends Cloneable) in the type Y<capture-of ? extends Cloneable> is not applicable for the arguments (Cloneable)\\n\" + ", "+\t\t\"The method foo(capture#4-of ? extends Cloneable) in the type Y<capture#4-of ? extends Cloneable> is not applicable for the arguments (Cloneable)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59cf7c648b2195c81779f0d0da206f3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void test025()", "signatureAfterChange": " \tpublic void test025()", "diff": ["-\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aca4ceff8507162438203b2f9ff64fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void test0336_if_else()", "signatureAfterChange": " public void test0336_if_else()", "diff": ["-\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable o cannot be null at this location\\n\" + ", "-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null pointer access: The variable o can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ae603246bf5bdf9ab19e4048fb6d124", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "af9bbbd46257142e006853d95525656db05c0be8", "commitAfterChange": "75441f37a4b77efa641f7e3f5866e117cb328da6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void testMoveSourceFolder1() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder1() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ae9ccc80775ff454c81b5452f720057", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void testTypeSingleArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testTypeSingleArgument02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5af928394fa522fd642f8d277b08a9d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void test0082_shortcut_boolean_expression()", "signatureAfterChange": " public void test0082_shortcut_boolean_expression()", "diff": ["-\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o cannot be null at this location\\n\" + ", "-\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o cannot be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b0065e27b28d76b89824084b1df0776", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/XLargeTest.java", "commitBeforeChange": "a430dcf4a558e1c36680a36ef4af1ace851e14d2", "commitAfterChange": "dce0303da6d0cbf1d565391873636c507bd68d3f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void test001()", "signatureAfterChange": "  public void test001()", "diff": ["-\t\t\t\"\tSystem.out.println(\\\"FAILED\\\");\\n\" +", "-\t\t\t\"    }\\n\" +", "+\t\t\t\"\telse System.out.println(\\\"FAILED\\\");\\n\" +", "+\t\t\t\"   }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b19293b3365933825676fcd052fd19f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\"  public static void main(java.lang.String[] args);\\n\" + ", "-\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\"  public static void main(java.lang.String[] args);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b332de410502dbec54df0dee61a0e54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 367, "methodNumberAfterChange": 367, "signatureBeforeChange": " public void test0367()", "signatureAfterChange": " public void test0367()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pri>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pri>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b512412761f48dfc4d6b80251877632", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test085()", "signatureAfterChange": " public void test085()", "diff": ["-\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, static imports are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, static imports are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bacb2c4e8f858cd41fc25dce35ec390", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 129, "signatureBeforeChange": " \tpublic void testBug92944_CLASS() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_CLASS() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c15b5578a6443e5ad846924fd94c9ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "988db3ec863dadeb2db80ab85efafc59fca27d63", "commitAfterChange": "bba7694c48471620eaabd1cb9ca1daab01462bcd", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": " public void testBug246712()", "signatureAfterChange": " public void testBug246712()", "diff": ["-\t\t\t\"src/X.java\",", "+\t\t\t\"X.java\",", "-\t\t\t\"src/Y.java\",", "+\t\t\t\"Y.java\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c24bd29bd23aed59efb42dfdd8499d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 416, "methodNumberAfterChange": 416, "signatureBeforeChange": " public void test354229d()", "signatureAfterChange": " public void test354229d()", "diff": ["-\t\t\"Method e(Action<T>) has the same erasure e(Action<T>) as another method in type X\\n\" + ", "+\t\t\"Erasure of method e(Action<T>) is the same as another method in type X\\n\" +", "-\t\t\"Method e(Action<S>) has the same erasure e(Action<T>) as another method in type X\\n\" + ", "+\t\t\"Erasure of method e(Action<S>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ca55a9c54dc7cdb2efab0136795a42b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 299, "methodNumberAfterChange": 300, "signatureBeforeChange": " public void test0956_assert_combined()", "signatureAfterChange": " public void test0956_assert_combined()", "diff": ["-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o can only be null at this location\\n\" + ", "-\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o cannot be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5caf528f6f6ea5e698c83a0e073c29d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "a209f427039b5b4db27a67f609cb706801ba28e5", "commitAfterChange": "712689471fd4116d08552bca059239228ce897f6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test012() throws Exception", "signatureAfterChange": " \tpublic void test012() throws Exception", "diff": ["-\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 4)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cefadcd5b2958b1db5bb5b886101549", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "a08b4c389632f0f20a50182ded68880addc0de18", "commitAfterChange": "5cb40e1ad24651b50221770b935dfa647cb41f4d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate static AnnotationProcessorFactory loadFactoryFromClassLoader( String factoryName, ClassLoader cl )", "signatureAfterChange": "  \tprivate static AnnotationProcessorFactory loadFactoryFromClassLoader( String factoryName, ClassLoader cl )", "diff": ["-\t\t\tAptPlugin.log(e, \"Unexpected failure to load APF: \" + factoryName); //$NON-NLS-1$", "+\t\t\tAptPlugin.log(e, \"Could not load annotation processor factory \" + factoryName);", "-\t\t\t", "-\t\t\tAptPlugin.log(ncdfe, \"Could not find APF: \" + factoryName); //$NON-NLS-1$", "+\t\t\tAptPlugin.log(ncdfe, \"Could not load annotation processor factory \" + factoryName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf0cd63c2eb24cd566e1b07c443bab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java", "commitBeforeChange": "e164f6513264532353828b2bd9ce24ea60f98687", "commitAfterChange": "c39eeb0c7df54699bfd8493b726747537e3838f3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testExternalFolder2() throws CoreException", "signatureAfterChange": " public void testExternalFolder2() throws CoreException", "diff": ["-\t\tsrc.createLink(new Path(getExternalFolder() + \"src\"), IResource.NONE, null);", "-\t\tString externalLib = getExternalFolder() + \"lib\";", "+\t\tsrc.createLink(new Path(getExternalFolder() + \"/src\"), IResource.NONE, null);", "+\t\tString externalLib = getExternalFolder() + \"/lib\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d28b467723b2e787e6562dfb3c57fb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void test03()", "signatureAfterChange": "  public void test03()", "diff": ["-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + ", "-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d46574b07bef77a201ddb6587907144", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/LocalElementTests.java", "commitBeforeChange": "ab96412d63e51e1fd7275237e383b745dfdb6660", "commitAfterChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void testAnonymousType2() throws CoreException", "signatureAfterChange": " \tpublic void testAnonymousType2() throws CoreException", "diff": ["-\t\t\t\t\"      class <anonymous>\\n\" + ", "-\t\t\t\t\"      class <anonymous>\\n\" + ", "+\t\t\t\t\"      class <anonymous #1>\\n\" + ", "+\t\t\t\t\"      class <anonymous #2>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d4a94b5bbed759e6ddf4f49ad2fa766", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void testBug79378b() throws CoreException", "signatureAfterChange": " \tpublic void testBug79378b() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5da33fba30acd2bb6da7d370de48a597", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void test015()", "signatureAfterChange": " \tpublic void test015()", "diff": ["-\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dd7bfac65e2ff1e9ca37df60268ad35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " public void test056x()", "signatureAfterChange": " public void test056x()", "diff": ["-\t\t\"Resource leak: \\\"reader\\\" is not closed at this location\\n\" +", "+\t\t\"Resource leak: 'reader' is not closed at this location\\n\" +", "-\t\t\"Resource leak: \\\"reader\\\" is never closed\\n\" +", "+\t\t\"Resource leak: 'reader' is never closed\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dfd645996a4a0ff2c38b5988b8976b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "2fc42eeb502a121cefe1f87a9fd2e92cf7c57bec", "commitAfterChange": "818dca3cf84fd118ea99497de1f8b977d4253551", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " public void test0525_try_finally_unchecked_exception()", "signatureAfterChange": " public void test0525_try_finally_unchecked_exception()", "diff": ["-\t\t\"1. ERROR in X.java (at line 13)\\n\" +", "-\t\t\"\to.toString();\\n\" +", "+\t\t\"1. ERROR in X.java (at line 13)\\r\\n\" +", "+\t\t\"\to.toString();\\r\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e066f8bfa5f7c344ec9e6274012f52a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void test050() throws Exception", "signatureAfterChange": " public void test050() throws Exception", "diff": ["-\t\t\t\t\"        [pc: 31, line: 49]\\n\" +", "+\t\t\t\t\"        [pc: 31, line: 51]\\n\" +", "-\t\t\t\"        [pc: 31, line: 49]\\n\" +", "+\t\t\t\"        [pc: 31, line: 51]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e4180ada6f4e5c9028799337172172b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "a8c16bcddf8ea1c15574f4c6305041f3a02174d1", "commitAfterChange": "653892de0ce6d92080f2ac329ebf5ae3bc092866", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void testFallThrough()", "signatureAfterChange": " public void testFallThrough()", "diff": ["-\t\t\"    \twhile (true) {\\n\" +", "+\t\t\"    \touter: while (true) {\\n\" +", "-\t\t\"    \t\t\t\tSystem.exit(0);\\n\" +", "+\t\t\"    \t\t\t\tbreak outer;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e928e1278d3a0895ab63300c9df5945", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void test011()", "signatureAfterChange": " \tpublic void test011()", "diff": ["-\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eae5b21aace518437e9855ea6b75b8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " public void test0084()", "signatureAfterChange": " public void test0084()", "diff": ["-\tString expectedParentNodeToString = \"new int[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new int[]{<CompleteOnName:zzz>}\";", "-\t\t\"      new int[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      new int[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ec472e06706341b7ad88eea2d07ff01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "21859368186bfa84e754d0992a1e8744a471fc21", "commitAfterChange": "616e0cc4b1bc013d67f08c19f7ad98694e8af3c9", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void test0016()", "signatureAfterChange": " public void test0016()", "diff": ["-\t\t\"Z cannot be resolved to a type\\n\" + ", "+\t\t\"Z[] cannot be resolved to a type\\n\" + ", "-\t\t\"Z cannot be resolved to a type\\n\" + ", "+\t\t\"Z[] cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eda99282a4507879f4613330dd00a4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SelectionTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void test29()", "signatureAfterChange": " public void test29()", "diff": ["-\tString expectedCompletionNodeToString = \"<SelectOnExplicitConstructorCall:new G().super((23 + \\\"hello\\\"))>\";", "+\tString expectedCompletionNodeToString = \"<SelectOnExplicitConstructorCall:new G().super((23 + \\\"hello\\\"))>;\";", "-\t\t\"    };\\n\" + ", "+\t\t\"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f6c50724763e3cdee033c1238e7f42a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments06() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments06() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] POTENTIAL_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f85f22112f003ca315f69ca4a058721", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "a8c16bcddf8ea1c15574f4c6305041f3a02174d1", "commitAfterChange": "653892de0ce6d92080f2ac329ebf5ae3bc092866", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void testFallThrough2()", "signatureAfterChange": " public void testFallThrough2()", "diff": ["-\t\t\"    \twhile (true) {\\n\" +", "+\t\t\"    \touter: while (true) {\\n\" +", "-\t\t\"    \t\t\t\tSystem.exit(0);\\n\" +", "+\t\t\"    \t\t\t\tbreak outer;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fc225d0ce93e5a25cf89607cbc6726f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "fe5861689c1e079de9f2e63c6fbfe017950ec3f3", "commitAfterChange": "035672481c2d56adf6c244f2439c7ebb1707c88e", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void test040()", "signatureAfterChange": " public void test040()", "diff": ["-\t\t\"The interface X.Homonym cannot be the superclass of Y; a superclass must be a class\\n\" + ", "+\t\t\"The type X.Homonym cannot be the superclass of Y; a superclass must be a class\\n\" + ", "-\t\t\"The interface X.Homonym cannot be the superclass of Y; a superclass must be a class\\n\" + ", "+\t\t\"The type X.Homonym cannot be the superclass of Y; a superclass must be a class\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fcf3e8d31ed46274e21ae98effabe9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 101, "signatureBeforeChange": " \tpublic void testBug84100b() throws CoreException", "signatureAfterChange": " \tpublic void testBug84100b() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 2, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 2, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "601f90327004242cec3891267364c790", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tpublic void testBug83304_MethodStringPattern() throws CoreException", "signatureAfterChange": " \tpublic void testBug83304_MethodStringPattern() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "603a28904be9b094dd89f8a069e374f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "fa568df637cfba49109de9a23ecbf57eda89325f", "commitAfterChange": "699f85df0061a8b41250aa99562a0fc140375ee5", "methodNumberBeforeChange": 331, "methodNumberAfterChange": 331, "signatureBeforeChange": " public void test0330() throws JavaModelException", "signatureAfterChange": " public void test0330() throws JavaModelException", "diff": ["-\t\t\t\"foo1[METHOD_IMPORT]{foo1;, Ltest0330.q.Y;, ()Ltest0330.p.X;, foo1, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"foo2[METHOD_IMPORT]{foo2;, Ltest0330.q.Y;, ()V, foo2, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"foo1[METHOD_NAME_REFERENCE]{foo1;, Ltest0330.q.Y;, ()Ltest0330.p.X;, foo1, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"foo2[METHOD_NAME_REFERENCE]{foo2;, Ltest0330.q.Y;, ()V, foo2, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60a784983b946f44c3e6e3fc87733501", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java", "commitBeforeChange": "a81195ff09b3e00d1785645fd080f14d3c2692cf", "commitAfterChange": "0300a57044fe7d054155c36f505a1e0c238247a4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void testHierarchyScope2() throws CoreException", "signatureAfterChange": " public void testHierarchyScope2() throws CoreException", "diff": ["-\t\t\t\"\tvoid foo() {\\n\" +", "+\t\t\t\"\tprotected void foo() {\\n\" +", "-\t\t\t\"\tvoid foo() {\\n\" +", "+\t\t\t\"\tprotected void foo() {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b92df375f587ad2a2668a4e44c3ab1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test032()", "signatureAfterChange": " \tpublic void test032()", "diff": ["-\t\t\t\"!-<E:>Ljava.util.List;\",", "-\t\t\t\"!-Ljava/util/List<TE;>;\"", "+\t\t\t\"-<E:>Ljava.util.List;\",", "+\t\t\t\"Ljava/util/List;!-Ljava/util/List<TE;>;123;\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60ba849f3d1aa9f2f31a84aa79564c8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug80257()", "signatureAfterChange": " \tpublic void testBug80257()", "diff": ["-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60bbc661549cd5bec67421db5f3b906f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "4015f9a338ca2f66537cce07f78a17ab467ebe74", "commitAfterChange": "77f2db9286e86f41c2ddfe17ae19b73d1c8f7cfb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void test0016()", "signatureAfterChange": " public void test0016()", "diff": ["-\t\t\"Z[] cannot be resolved to a type\\n\" + ", "+\t\t\"Z cannot be resolved to a type\\n\" + ", "-\t\t\"Z[] cannot be resolved to a type\\n\" + ", "+\t\t\"Z cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60be7689e79e303f4bf499d1801348f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "20f9880068ffc8b9ca5e4df40a1417c5832ce46b", "commitAfterChange": "0fb012af3c6557520ab00415c58833602b027192", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void testSetClasspathVariable1() throws CoreException", "signatureAfterChange": " public void testSetClasspathVariable1() throws CoreException", "diff": ["-\t\t\t\"\tmylib.jar[*]: {REMOVED FROM CLASSPATH}\\n\" +", "-\t\t\t\"\totherlib.jar[*]: {ADDED TO CLASSPATH}\"", "+\t\t\t\"\t/LibProj/mylib.jar[*]: {REMOVED FROM CLASSPATH}\\n\" +", "+\t\t\t\"\t/LibProj/otherlib.jar[*]: {ADDED TO CLASSPATH}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60c8720a28ef8b5572f10e5c324a2c2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug83230_Explicit02() throws CoreException", "signatureAfterChange": " \tpublic void testBug83230_Explicit02() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60c932de31912b7988fb75c8a01fec66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "dbfe97bed3f7feb8408fadbcb58741aa04540553", "commitAfterChange": "3d86d8fdd283e92da8b2fd4ec59e7d2f2b4add9f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void test034()", "signatureAfterChange": " public void test034()", "diff": ["-\t\t\"The method Y.foo() does not override the inherited method from X since it is private to a different package.\\n\" + ", "+\t\t\"The method Y.foo() does not override the inherited method from X since it is private to a different package\\n\" + ", "-\t\t\"This class must implement the inherited abstract method X.foo(), but cannot override it since it is not visible from Z. Either make the type abstract or make the inherited method visible.\\n\" + ", "+\t\t\"This class must implement the inherited abstract method X.foo(), but cannot override it since it is not visible from Z. Either make the type abstract or make the inherited method visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "613fec904e3d86c23ac5776bac0be495", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t        \"Type safety: The cast from X.XX<capture-of ?,capture-of ?> to X.XX<?,X.XY> is actually checking against the erased type X<T,U,V>.XX\\n\" + ", "+\t        \"Type safety: The cast from X.XX<capture#22-of ?,capture#23-of ?> to X.XX<?,X.XY> is actually checking against the erased type X<T,U,V>.XX\\n\" +", "-        \"Type safety: The cast from X.XX<capture-of ?,capture-of ?> to X.XX<?,X.XY> is actually checking against the erased type X<T,U,V>.XX\\n\" + ", "+        \"Type safety: The cast from X.XX<capture#22-of ?,capture#23-of ?> to X.XX<?,X.XY> is actually checking against the erased type X<T,U,V>.XX\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "616a35f1296861b159e4d1514878dc9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchTests.java", "commitBeforeChange": "e8833af919cd5aafe270f9176a133cb16029ea92", "commitAfterChange": "9f614fc97667efed681d3433770b756cc7555814", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " public void testSearchPatternCreation22()", "signatureAfterChange": " public void testSearchPatternCreation22()", "diff": ["-\t\t\"TypeDeclarationPattern: pkg<x.y.z>, enclosing<>, type<Foo>, exact match, case sensitive\\n\" + ", "-\t\t\"| TypeReferencePattern: qualification<x.y.z>, type<Foo>, exact match, case sensitive\",", "+\t\t\"TypeDeclarationPattern: pkg<x.y.z>, enclosing<>, type<Foo>, exact match, case sensitive, erasure only\\n\" + ", "+\t\t\"| TypeReferencePattern: qualification<x.y.z>, type<Foo>, exact match, case sensitive, erasure only\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6181be83af681e746865442c6ee5ca38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test038()", "signatureAfterChange": " \tpublic void test038()", "diff": ["-\t\t\t\"    29  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    29  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    33  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    33  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "618f0c7f563ce5e68fbf1935743b6dd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "3cbc5a17035fd93e630a5ce3a447371924b2eaec", "commitAfterChange": "2fbac062d3f933d7974166e3d20ea9843fdd9750", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void testBug286601h()", "signatureAfterChange": " public void testBug286601h()", "diff": ["-\t\t\"public class X05b\\n\" +", "+\t\t\"public class X05\\n\" +", "-\t\t\"public class X05b\\n\" +", "+\t\t\"public class X05\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61cc1c549d118d58d17a8cd417aa6a25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "2c4584c2d5b726b4cdc708e96ad6b04e53986107", "commitAfterChange": "107f362cb3526a7bf91d7e9a22a75cf0b6b560f8", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": " \tpublic void test145()", "signatureAfterChange": " \tpublic void test145()", "diff": ["-\t\t\t\"Unsafe wildcard operation: The method add(?) of type XList<?> is not applicable for the arguments (X)\\n\" + ", "+\t\t\t\"Unsafe wildcard operation: The method add(?) of type XList<?> is not applicable for the arguments (X). The wildcard parameter ? has no lower bound, and may actually be more restrictive than argument X\\n\" + ", "-\t\t\t\"Unsafe wildcard operation: Cannot assign expression of type X to wildcard type ?\\n\" + ", "+\t\t\t\"Unsafe wildcard operation: Cannot assign expression of type X to wildcard type ?. The wildcard type has no lower bound, and may actually be more restrictive than expression type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "620c3907d3f8e2f63b2aae3d5ec1e119", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testBug80257()", "signatureAfterChange": " \tpublic void testBug80257()", "diff": ["-\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^\\n\" + ", "-\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62250d2510e5e57546e7ab1533b2a912", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationCompletionParserTest.java", "commitBeforeChange": "63d13898e414da27bb1c178ed93753184a2e7833", "commitAfterChange": "a489ce78e2eb32838e144c0480573d4783205f0f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test0003()", "signatureAfterChange": " public void test0003()", "diff": ["-\"public enum X {\\n\" + ", "-\"  public X() {\\n\" + ", "-\"  }\\n\" + ", "-\"}\\n\";", "+\t\t\"enum X {\\n\" + ", "+\t\t\"  X() {\\n\" + ", "+\t\t\"  }\\n\" + ", "+\t\t\"}\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6278687e8a9c7f110aadfa42d8cde5cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "11ed38e74464eb2e7d149f52bb984520286f9a3a", "commitAfterChange": "ad8b3feb3cd31efef290116a3645f74aac42c9f3", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test055()", "signatureAfterChange": " public void test055()", "diff": ["-\t\t\"The argument a is hiding a field from type X.I1\\n\" + ", "+\t\t\"The parameter a is hiding a field from type X.I1\\n\" + ", "-\t\t\"The argument a is hiding a field from type X.I1\\n\" + ", "+\t\t\"The parameter a is hiding a field from type X.I1\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "627bbf8e7634c88c63cbf649f5cbce1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tpublic void test011()", "signatureAfterChange": "  \tpublic void test011()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tabstract class X1 extends A implements I {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tabstract class X1 extends A implements I {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62dca3b23621fda704969b17c5da7a96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "42a8e7b7f9382c59bb1ff340f0838c566aaa3094", "commitAfterChange": "eaac4cd91d3c13197436495a330942a49816eb54", "methodNumberBeforeChange": 291, "methodNumberAfterChange": 291, "signatureBeforeChange": " \tpublic void test279()", "signatureAfterChange": " \tpublic void test279()", "diff": ["-\t\t\t\"\t             ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"return type needs unchecked conversion from ISomething.getSomething()\\n\" + ", "+\t\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\t\"Unsafe type operation: The return type Class of the method getSomething() of type X needs unchecked conversion to conform to the return type Class<? extends Y> of inherited method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63100e28ce7dc19b99edfbb36238e678", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void testAnonymousType3() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType3() throws JavaModelException", "diff": ["-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "637f13c704d025a8c9afb216e81f07f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void testTypeMultipleArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testTypeMultipleArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64010481e5053d1bd41978d33497e002", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 300, "signatureBeforeChange": " public void test150()", "signatureAfterChange": " public void test150()", "diff": ["-\t\t\"Method method3(X.D1<String>, X.D1<String>, X.D1<Date>) has the same erasure method3(X.D1<T>, X.D1<T>, X.D1<T>) as another method in type X\\n\" +", "+\t\t\"Erasure of method method3(X.D1<String>, X.D1<String>, X.D1<Date>) is the same as another method in type X\\n\" +", "-\t\t\"Method method3(X.D1<String>, X.D1<String>, X.D1<String>) has the same erasure method3(X.D1<T>, X.D1<T>, X.D1<T>) as another method in type X\\n\" +", "+\t\t\"Erasure of method method3(X.D1<String>, X.D1<String>, X.D1<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64154ee0a7de63996b9f647f31a21db5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 440, "methodNumberAfterChange": 440, "signatureBeforeChange": " \tpublic void test438()", "signatureAfterChange": " \tpublic void test438()", "diff": ["-\t\t\t\"Unnecessary cast from ? extends T to T\\n\" + ", "+\t\t\t\"Unnecessary cast from capture-of ? extends T to T\\n\" + ", "-\t\t\t\"Type safety: The cast from ? super T to T is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"Type safety: The cast from capture-of ? super T to T is actually checking against the erased type Object\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "642e6e8d17c87417b963a6dc7b2f006d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void testSimpleSubTypeHierarchy() throws CoreException", "signatureAfterChange": " public void testSimpleSubTypeHierarchy() throws CoreException", "diff": ["-\t\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P]]]]\\n\" + ", "+\t\t\t\"  Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P]]]]\\n\" + ", "-\t\t\t\"  A {key=Lx/y/A;} [in [Working copy] A.java [in x.y [in src [in P]]]]\\n\",", "+\t\t\t\"  A [in [Working copy] A.java [in x.y [in src [in P]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6431988a45dd11d1747053d70e1c00f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testJavadocConstructorReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocConstructorReference() throws CoreException", "diff": ["-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\"", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched()] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched()] EXACT_MATCH INSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "643dafe623e6fa747c468021747657cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void testBug96237_Public05()", "signatureAfterChange": " \tpublic void testBug96237_Public05()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "645bbd9b7d107efbb79a2b9fe709e443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "e3beac235d122e4c3c54870082319a4f2cc2abeb", "commitAfterChange": "553b813a23ab25477516582ea0c9fc2d6eaf9fb4", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic void test056() throws CoreException, IOException", "signatureAfterChange": " \tpublic void test056() throws CoreException, IOException", "diff": ["-\t\t\t\t\"Lp/X$Y<Lp/X<TK;TV;>;:TK;Lp/X<TK;TV;>;:TV;>;^1\"", "+\t\t\t\t\"Lp/X$Y<Lp/X;:TK;Lp/X;:TV;>;^1\"", "-\t\t\t\t\"Lp/X$Y<Lp/X<TK;TV;>;:TK;Lp/X<TK;TV;>;:TV;>;^1\",", "+\t\t\t\t\"Lp/X$Y<Lp/X;:TK;Lp/X;:TV;>;^1\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64679ce49b6bce5c59ecaa5ccd4b24b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  \tpublic void test074()", "signatureAfterChange": "  \tpublic void test074()", "diff": ["-\t\t\t\t+ \"InvalidException cannot be resolved (or is not an exception type) for the method foo\\n\"", "+\t\t\t\t+ \"InvalidException cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"IOException cannot be resolved (or is not an exception type) for the method foo\\n\"", "+\t\t\t\t+ \"IOException cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64801de54e7097654a28f633eab8eec3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void testDeleteJarFile2() throws CoreException", "signatureAfterChange": " public void testDeleteJarFile2() throws CoreException", "diff": ["-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64af3e8860c9cac7749ec20d0f0ee515", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e8318218be917238c7f3ce1175e32d65aa1ee06f", "commitAfterChange": "5f326c0ac22507f8c85192a8307f736a5ad543dd", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " \tpublic void test100()", "signatureAfterChange": " \tpublic void test100()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"\tX<? extends AX> x = new X<? extends AX>(new AX<String>());\\n\" + ", "-\t\t\"\t                        ^\\n\" + ", "-\t\t\"Cannot instantiate the generic type X<T> using wildcard arguments (? extends AX)\\n\" + ", "-\t\t\"----------\\n\");\t\t", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX<? extends AX> x = new X<? extends AX>(new AX<String>());\\n\" + ", "+\t\t\t\"\t                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unsafe wildcard operation: The constructor X(? extends AX) of type X<? extends AX> is not applicable for the arguments (AX<String>). The wildcard parameter ? extends AX has no lower bound, and may actually be more restrictive than argument AX<String>\\n\" + ", "+\t\t\t\"----------\\n\");\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64c510251ece5dd2315f1215ecfe94af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "130cb4765fd3f636bbf53ed159d4905dec0a5fd5", "commitAfterChange": "938f4b2ad6ef3c12e60db3be23aed731979677d7", "methodNumberBeforeChange": 977, "methodNumberAfterChange": 977, "signatureBeforeChange": " public void test0952()", "signatureAfterChange": " public void test0952()", "diff": ["-\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method m(Object...) from type X. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\"Type null of the last argument to method m(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method m(Object...) from type X. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "+\t\t\t\"Type null of the last argument to method m(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64cfe55310b95f6ad2e167e280c220f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "64774f020d7005b54827ff53032895aaf4555d81", "commitAfterChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\t\"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 5)\\n\" +", "-\t\t\t\"\tWarn warn;\\n\" +", "-\t\t\t\"\t^^^^\\n\" +", "-\t\t\t\"Discouraged access: The type Warn is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 6)\\n\" +", "-\t\t\t\"\tKO ko;\\n\" +", "-\t\t\t\"\t^^\\n\" +", "-\t\t\t\"Access restriction: The type KO is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 7)\\n\" +", "-\t\t\t\"\tZork z;\\n\" +", "-\t\t\t\"\t^^^^\\n\" +", "-\t\t\t\"Zork cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "+\t\t\t\"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 5)\\n\" + ", "+\t\t\t\"\tWarn warn;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Discouraged access: The type \\'Warn\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 6)\\n\" + ", "+\t\t\t\"\tKO ko;\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'KO\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 7)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64fa7385e36111e13744d662e0a8a49d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastingContextTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test005()", "signatureAfterChange": " public void test005()", "diff": ["-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +", "-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65041361d3b558e04674f82b0fc48a55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  public void test0068()", "signatureAfterChange": "  public void test0068()", "diff": ["-\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"    Object o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    Object o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65052d1f4c13e4b26590a878c35446bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForClass.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test032()", "signatureAfterChange": "  \tpublic void test032()", "diff": ["-\t\t\t\t\"\t * @see VisibilityPublic#vf_public Valid ref to not visible field of other package class\\n\" +", "-\t\t\t\t\"\t * @see VisibilityPublic.VpPublic#vf_public Valid ref to not visible field of other package public inner class\\n\" +", "+\t\t\t\t\"\t * @see VisibilityPublic#vf_public Valid ref to visible field of other package class\\n\" +", "+\t\t\t\t\"\t * @see test.copy.VisibilityPublic.VpPublic#vf_public Valid ref to visible field of other package public inner class\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650a65d6736ded42e31152e130960336", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  public void test080() throws JavaModelException", "signatureAfterChange": "  public void test080() throws JavaModelException", "diff": ["-\t\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link BasicTestTextIns#BasicTestTextIns(int, float, Class) }, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "-\t\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link BasicTestTextIns#BasicTestTextIns() }, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\"", "+\t\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link BasicTestTextIns#BasicTestTextIns(int, float, Class)}, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "+\t\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link BasicTestTextIns#BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650ad3244e2aab8e38f609a46a68bbaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "7336215b569e42bf0d7946c272b0da8ff71d12fb", "commitAfterChange": "e29082e6108e43f171cfe9fae0a56914a1f2ec3e", "methodNumberBeforeChange": 992, "methodNumberAfterChange": 992, "signatureBeforeChange": " public void testBug350652l() throws JavaModelException", "signatureAfterChange": " public void testBug350652l() throws JavaModelException", "diff": ["-// types in same CU", "+// according to comment 5, subtypes of exceptions should also be proposed", "-\t\t\t\"public class IZZException extends Exception {\\n\" +", "+\t\t\t\"class IZZException extends Exception {\\n\" +", "-\t\t\t\"public class IZZAException extends IZZException {\\n\" +", "+\t\t\t\"class IZZAException extends IZZException {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6540ff0d9521f3c5372a5b214945c869", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 158, "methodNumberAfterChange": 158, "signatureBeforeChange": " \tpublic void test049()", "signatureAfterChange": " \tpublic void test049()", "diff": ["-\t\t\t\"Method id(T) has the same erasure id(A) as another method in type Y<T>\\n\" +", "+\t\t\t\"Erasure of method id(T) is the same as another method in type Y<T>\\n\" +", "-\t\t\t\"Method id(A) has the same erasure id(A) as another method in type Y<T>\\n\" +", "+\t\t\t\"Erasure of method id(A) is the same as another method in type Y<T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65869b35df11b0a1a85661ce6b15ad1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void test090()", "signatureAfterChange": " \tpublic void test090()", "diff": ["-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65c4408c70b152327b39712990e43a5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "2fc42eeb502a121cefe1f87a9fd2e92cf7c57bec", "commitAfterChange": "818dca3cf84fd118ea99497de1f8b977d4253551", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": " public void test0459_while_nested()", "signatureAfterChange": " public void test0459_while_nested()", "diff": ["-\t\t\"1. ERROR in X.java (at line 11)\\n\" +", "-\t\t\"\twhile (o == null) {\\n\" +", "+\t\t\"1. ERROR in X.java (at line 11)\\r\\n\" +", "+\t\t\"\twhile (o == null) {\\r\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e0dcd6a640a88639376785228a5fcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 193, "methodNumberAfterChange": 193, "signatureBeforeChange": " public void testBug264112_wksp1_02()", "signatureAfterChange": " public void testBug264112_wksp1_02()", "diff": ["-\t\t\"\t\t\tbuffer.append(\\\"- possible values:\t[\\\"); //$NON-NLS-1$\\n\" + ", "-\t\t\"\t\t\tbuffer.append(\\\"]\\\\n\\\"); //$NON-NLS-1$\\n\" + ", "+\t\t\"\t\t\tbuffer.append(\\\"- possible values:\t[\\\"); //$NON-NLS-1$ \\n\" + ", "+\t\t\"\t\t\tbuffer.append(\\\"]\\\\n\\\"); //$NON-NLS-1$ \\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65ed899bd00965c9324f99f66d259ee0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "\r public void test0069() throws IOException", "signatureAfterChange": "\r public void test0069() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1)]\", locations.get(\"@H\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6616c4bde6f251a5ebf5c24f1a142d62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void test0050()", "signatureAfterChange": " public void test0050()", "diff": ["-\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + ", "-\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66346675723eef9c99b2a8c1880641b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 241, "signatureBeforeChange": " public void test0241()", "signatureAfterChange": " public void test0241()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:ext>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:ext>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "663cd0b1a816939df0a13bce04039316", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 187, "signatureBeforeChange": " \tpublic void test0183()", "signatureAfterChange": " \tpublic void test0183()", "diff": ["-\t\t\t\"Type safety: The cast from Object to Hashtable<String,Integer> is actually checking against the erased type Hashtable\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to Hashtable<String,Integer>\\n\" + ", "-\t\t\t\"Type safety: The cast from Z3 to Hashtable<String,Integer> is actually checking against the erased type Hashtable\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Z3 to Hashtable<String,Integer>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66aca8dd854000bc93b9668896a15b28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  \tpublic void test0033()", "signatureAfterChange": "  \tpublic void test0033()", "diff": ["-\t\t\t\"Method foo(E) has the same erasure foo(Object) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(E) is the same as another method in type X<E,T>\\n\" +", "-\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(T) is the same as another method in type X<E,T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66cada731ca6fc2bcc3bba185d17ca3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void testSimpleSuperTypeHierarchy() throws CoreException", "signatureAfterChange": " public void testSimpleSuperTypeHierarchy() throws CoreException", "diff": ["-\t\t\t\"  B {key=Lx/y/A~B;} [in [Working copy] A.java [in x.y [in src [in P]]]]\\n\" + ", "-\t\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P]]]]\\n\" + ", "+\t\t\t\"  B [in [Working copy] A.java [in x.y [in src [in P]]]]\\n\" + ", "+\t\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "670850f399fdd63913a5001903af72d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "f7f89d61cddd4437d454a7cce2d799dfbd0c94b0", "commitAfterChange": "bff2f093f2ca890f300037b450293438832a5492", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  public void testDuplicateHashCode()", "signatureAfterChange": "  public void testDuplicateHashCode()", "diff": ["-\t\t\"\t\tfor (int i = 0; i < 100; i++) {\\n\" +", "+\t\t\"\t\touter: for (int i = 0; i < 100; i++) {\\n\" +", "-\t\t\"\t\t\t\tSystem.exit(0);\\n\" +", "+\t\t\"\t\t\t\tbreak outer;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "671021eb08518775e30bdf0efc0effbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void testBug101283a()", "signatureAfterChange": " \tpublic void testBug101283a()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67183c3d49c2a318d49f4489b59f499c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 653, "methodNumberAfterChange": 653, "signatureBeforeChange": " \tpublic void test649()", "signatureAfterChange": " \tpublic void test649()", "diff": ["-\t\t\t\"Type safety: Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "+\t\t\t\"Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner should be parameterized\\n\" + ", "+\t\t\t\"Outer.Inner is a raw type. References to generic type Outer<T>.Inner should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "671c901a489b07922df3db7f344d5230", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "da348589e3fa3fe0a889394dbec5343c317d63e7", "commitAfterChange": "cfb672e66d17bef31f4b5a6058666168ba53b0d0", "methodNumberBeforeChange": 708, "methodNumberAfterChange": 708, "signatureBeforeChange": " public void testCompletionVariableName1() throws JavaModelException", "signatureAfterChange": " public void testCompletionVariableName1() throws JavaModelException", "diff": ["-\t\t\"element:fooMyClass    completion:fooMyClass    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"\\n\" +", "+\t\t\"element:foo_MyClass    completion:foo_MyClass    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:testFOOMyClass    completion:testFOOMyClass    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),", "+\t\t\"element:test_FOO_MyClass    completion:test_FOO_MyClass    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6723820cdfb914af40994e5ea99d1a76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 882, "methodNumberAfterChange": 882, "signatureBeforeChange": " public void test0875()", "signatureAfterChange": " public void test0875()", "diff": ["-\t\t\"Type mismatch: cannot convert from Class<capture-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Class<capture#4-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>>\\n\" + ", "-\t\t\"Type safety: The cast from Class<capture-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>> is actually checking against the erased type Class\\n\" + ", "+\t\t\"Type safety: The cast from Class<capture#2-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>> is actually checking against the erased type Class\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "672440d4b79122b8d3b07e0d6f8a7ddc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NamingConventionTests.java", "commitBeforeChange": "da348589e3fa3fe0a889394dbec5343c317d63e7", "commitAfterChange": "cfb672e66d17bef31f4b5a6058666168ba53b0d0", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void testSuggestFieldName034()", "signatureAfterChange": " public void testSuggestFieldName034()", "diff": ["-\t\t\"myFIRSTType\\n\" +  //$NON-NLS-1$", "-\t\t\"firstType\\n\" +  //$NON-NLS-1$", "-\t\t\"type\", //$NON-NLS-1$", "+\t\t\t\"my_FIRST_Type\\n\" + ", "+\t\t\t\"first_Type\\n\" + ", "+\t\t\t\"type\", //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "674a50df1463e198d9518b3bea85eb4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 335, "methodNumberAfterChange": 336, "signatureBeforeChange": "  public void test1031()", "signatureAfterChange": "  public void test1031()", "diff": ["-\t\t\"The variable a can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable a can only be null at this location\\n\" + ", "-\t\t\"The variable a cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable a cannot be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6753f0f4dc3270eb7905a34e673a4d82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "85fe43540d2fa2b41e90fbadb73dc3c8d856ecfb", "commitAfterChange": "e60ca02f81acc7600a43413bd7fb7c0779ae6a52", "methodNumberBeforeChange": 805, "methodNumberAfterChange": 805, "signatureBeforeChange": " public void test799()", "signatureAfterChange": " public void test799()", "diff": ["-\t\t\"\t       ^\\n\" + ", "+\t\t\"\t           ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"\t       ^\\n\" + ", "+\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "678ae9f4ba55282e33576c4b3d265b99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic void test25() throws JavaModelException", "signatureAfterChange": "  \tpublic void test25() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest$107;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b7a846100158e080a375efb234b22b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void test_nonnull_parameter_011()", "signatureAfterChange": " public void test_nonnull_parameter_011()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67f3e0e94d88f73e699f0cb46819df39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 130, "signatureBeforeChange": " public void testTypeReferenceAsSingleNameReference() throws CoreException", "signatureAfterChange": " public void testTypeReferenceAsSingleNameReference() throws CoreException", "diff": ["-\t\t\"src/TypeReferenceAsSingleNameReference.java TypeReferenceAsSingleNameReference.hasReference() -> void [TypeReferenceAsSingleNameReference]\\n\" +", "-\t\t\"src/TypeReferenceAsSingleNameReference.java TypeReferenceAsSingleNameReference.hasReference() -> void [TypeReferenceAsSingleNameReference]\",", "+\t\t\"src/TypeReferenceAsSingleNameReference.java void TypeReferenceAsSingleNameReference.hasReference() [TypeReferenceAsSingleNameReference]\\n\" + ", "+\t\t\"src/TypeReferenceAsSingleNameReference.java void TypeReferenceAsSingleNameReference.hasReference() [TypeReferenceAsSingleNameReference]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68461e531c7493b2ab43a7775e6d8411", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void testTypeRef_InstanceOf() throws CoreException", "signatureAfterChange": " public void testTypeRef_InstanceOf() throws CoreException", "diff": ["-\t\t\"src/Test.java void Test.foo(Object) [\t\tif (field instanceof \ufffd|java.lang.String|\ufffd) {@84] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.foo(Object) [\t\tif (param instanceof \ufffd|Test|\ufffd) {@131] EXACT_MATCH\"", "+\t\t\"src/Test.java void Test.foo(Object) [\t\tif (field instanceof !|java.lang.String|!) {@84] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.foo(Object) [\t\tif (param instanceof !|Test|!) {@131] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "688436aa00056ddce2e597a97f88f87b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 915, "methodNumberAfterChange": 915, "signatureBeforeChange": " public void test909()", "signatureAfterChange": " public void test909()", "diff": ["-\t\t\"1. ERROR in X.java (at line 24)\\r\\n\" + ", "-\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 24)\\n\" + ", "+\t\t\"\tZork z;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68d37d3a4d1acd7021458b2451a68237", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void testSimpleSuperTypeHierarchy() throws CoreException", "signatureAfterChange": " public void testSimpleSuperTypeHierarchy() throws CoreException", "diff": ["-\t\t\t\"  B [in [Working copy] A.java [in x.y [in src [in P]]]]\\n\" + ", "-\t\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in P]]]]\\n\" + ", "+\t\t\t\"  B {key=Lx/y/A~B;} [in [Working copy] A.java [in x.y [in src [in P]]]]\\n\" + ", "+\t\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6944d0daec5d55af9303addb1062c581", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testGetReturnType()", "signatureAfterChange": " public void testGetReturnType()", "diff": ["-\tmethodSig = \"<X:Qlist<Qstring;>;>(Qstring;Qobject;I)I^Qexception;^Qerror;\";", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(Qstring;Qobject;I)IQexception;Qerror;\";", "-\tmethodSig = \"<X:Qlist<Qstring;>;>(Qlist<Qstring;>;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(Qlist<Qstring;>;)Qlist<Qxxx;>;Qexception;Qerror;\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6944dfd88f255e9a54ea01248d54f21c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "58aaea35ae4c64a4ecebe06d6b1ab1679e04698a", "commitAfterChange": "d5df66f62f879926d0ab37840f8644f7133a2a54", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \t\t public void test027()", "signatureAfterChange": " \t\t public void test027()", "diff": ["-        + \" -verbose -warn:+deprecation,syntheticAccess,uselessTypeCheck,unsafe,finalBound,unusedLocal\"", "+        + \" -warn:+deprecation,syntheticAccess,uselessTypeCheck,unsafe,finalBound,unusedLocal\"", "+        // TODO (maxime) reintroduce the -verbose option to check the number of files", "+        //               generated, once able to avoid console echoing", "-        \"[5 .class files generated]\\n\", ", "+        \"\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "696b0385ecb8c562f39f324a60522ca6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 164, "signatureBeforeChange": " public void test_nullable_field_10f()", "signatureAfterChange": " public void test_nullable_field_10f()", "diff": ["-\t\t\"Redundant null check: this expression cannot be null\\n\" + ", "+\t\t\"Redundant null check: The field o1 cannot be null at this location (ignoring concurrency)\\n\" + ", "-\t\t\"Redundant null check: this expression cannot be null\\n\" + ", "+\t\t\"Redundant null check: The field o1 cannot be null at this location (ignoring concurrency)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6971bb898f3cbfba13fed07aeafffc26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationCompletionParserTest.java", "commitBeforeChange": "63d13898e414da27bb1c178ed93753184a2e7833", "commitAfterChange": "a489ce78e2eb32838e144c0480573d4783205f0f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void test0010()", "signatureAfterChange": " public void test0010()", "diff": ["-\t\t\"  public class Y {\\n\" + ", "-\t\t\"    public Y() {\\n\" + ", "+\t\t\"  class Y {\\n\" + ", "+\t\t\"    Y() {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69c430ab80880ec0d32e9520834a843a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " public void testBug260381_wksp2_01() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_01() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69f7cef3d018a9f74f09bce9a9718bc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": " public void testBug313524_02() throws JavaModelException", "signatureAfterChange": " public void testBug313524_02() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t14, 15, 16, 17, 18, 19,\\n\" + ", "-\t\t\"\t\t\t\t20));\\n\" + ", "+\t\t\"\t\t\t\t\t\t14, 15, 16, 17,\\n\" + ", "+\t\t\"\t\t\t\t\t\t18, 19, 20));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aa6329d2a32057b9f784fb4fc9604b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  \tpublic void test065()", "signatureAfterChange": "  \tpublic void test065()", "diff": ["-\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom() : boolean  [27]\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 2, pc: 13] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6af8ee4923073e9f9937709c86581a7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "c70f61c3c606003f84ee6becbbb16bebc8f70603", "commitAfterChange": "51bc43a60d86b36a4e6615fa36384d0df9953c87", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": "     public void test0155() throws CoreException", "signatureAfterChange": "     public void test0155() throws CoreException", "diff": ["-\t\t\t\t\"\tpublic static void test(Integer i) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Integer i) {}\\n\" +", "-\t\tassertTrue(\"Is boxed\", methodInvocation.resolveBoxing());", "+\t\tassertTrue(\"Not boxed\", methodInvocation.resolveBoxing());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b784d76725ebecdbfe1e3605fc6fabe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testDeleteConstructor() throws CoreException", "signatureAfterChange": " public void testDeleteConstructor() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b800cce4fb7bdf4f4c73c52ce772ae3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExternalizeStringLiterals15Test.java", "commitBeforeChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "commitAfterChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void test002()", "signatureAfterChange": " public void test002()", "diff": ["-\t\t\t\"\t\\n\" +", "-\t\t\t\"\t@SuppressWarnings(\\\"nls\\\")\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b8e971f0d2aa4fd7903e47b618d042f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "9c0200613f6d3b1541431a53e81611b5e71da85a", "commitAfterChange": "beef2b6830a9b02687a5f8c1fac2a5984bded655", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " public void testOutputFolder1() throws CoreException", "signatureAfterChange": " public void testOutputFolder1() throws CoreException", "diff": ["-\t\t\t\"Project P is missing required source folder: 'src1'\\n\" + ", "-\t\t\t\"Project P is missing required source folder: 'src2'\",", "+\t\t\t\"Project P is missing required source folder: \\'src1\\'\\n\" + ", "+\t\t\t\"Project P is missing required source folder: \\'src2\\'\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bdac111aaa0b879e962faa98db04f5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SelectionTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void test36()", "signatureAfterChange": " public void test36()", "diff": ["-\tString expectedCompletionNodeToString = \"<SelectOnExplicitConstructorCall:new G().this()>\";", "+\tString expectedCompletionNodeToString = \"<SelectOnExplicitConstructorCall:new G().this()>;\";", "-\t\t\"    };\\n\" + ", "+\t\t\"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bf1107bce00c1c43951e7f756ab79d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " \tpublic void test242()", "signatureAfterChange": " \tpublic void test242()", "diff": ["-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c0d98ed9648f0cf1f3ccb1eb6ed79c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 357, "methodNumberAfterChange": 357, "signatureBeforeChange": " public void test0357()", "signatureAfterChange": " public void test0357()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pro>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pro>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c272da67fe35fedc2d0d8f1eef03657", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void test074()", "signatureAfterChange": " public void test074()", "diff": ["-\t\t\"The enum constant A must define the abstract method test()\\n\" +", "+\t\t\"The enum constant A must implement the abstract method test()\\n\" +", "-\t\t\"The enum constant A must define the abstract method test()\\n\" +", "+\t\t\"The enum constant A must implement the abstract method test()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c93346043c73bcf05010ac85cb0e23e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tpublic void test067()", "signatureAfterChange": "  \tpublic void test067()", "diff": ["-\t\t\t\"     9  invokestatic X.boom()Z [27]\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom() : boolean  [27]\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 14] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 3, pc: 14] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ca410d3877ff64f8a60881c60556ff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void test004()", "signatureAfterChange": " \tpublic void test004()", "diff": ["-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d10abe65201f7e3605942cc440095b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "582314aebaa81c30307377892044ded507af1f74", "commitAfterChange": "c0ecc47cac9e40a73cc3ed5a5be93bbace7cb891", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void test050() throws CoreException", "signatureAfterChange": " \tpublic void test050() throws CoreException", "diff": ["-\t\t\tnew String[] {\"Ljava/lang/Class<+[Ljava/lang/Object;>;\"});", "+\t\t\tnew String[] {\"Ljava/lang/Class<Ljava/lang/Class<TT;>;+[Ljava/lang/Object;>;\"});", "-\t\t\t\t\"Ljava/lang/Class<+[Ljava/lang/Object;>;^33\", ", "+\t\t\t\t\"Ljava/lang/Class<Ljava/lang/Class<TT;>;+[Ljava/lang/Object;>;^33\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d3dd4fa904f2806a738c3360663ca1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void test053()", "signatureAfterChange": " public void test053()", "diff": ["-\t\t\t\"        [pc: 0, pc: 17] -> 17 when : java.lang.Exception\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 14] -> 17 when : java.lang.Exception\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 17] -> 17 when : java.lang.Exception\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 14] -> 17 when : java.lang.Exception\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d4a0e2e05f46c4a78bdc163aa3bd89f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testBug80264_ClassesIgnoreTypes() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80264_ClassesIgnoreTypes() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d4d445448671af472ac9e6e5237aca1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "2a800be547e99862cb67025bbbfca4b49e09cdb9", "commitAfterChange": "7aad3361583d2df12bebea3ea848be558fb7c078", "methodNumberBeforeChange": 285, "methodNumberAfterChange": 285, "signatureBeforeChange": " public void test241_jar_ref_in_jar()", "signatureAfterChange": " public void test241_jar_ref_in_jar()", "diff": ["-\t\tnew String[] {", "-\t\t\t\"src/p/X.java\",", "-\t\t\t\"package p;\\n\" +", "-\t\t\t\"/** */\\n\" +", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"  int i = R.R2;\\n\" +", "-\t\t\t\"  int j = R.R3;\\n\" +", "-\t\t\t\"}\",", "-\t\t},", "-\t  \"\\\"\" + OUTPUT_DIR +  File.separator + \"src/p/X.java\\\"\"", "+\t\t\tnew String[] {", "+\t\t\t\t\t\"src/p/X.java\",", "+\t\t\t\t\t\"package p;\\n\" +", "+\t\t\t\t\t\"/** */\\n\" +", "+\t\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\t\"  int i = R.R2;\\n\" +", "+\t\t\t\t\t\"  int j = R.R3;\\n\" +", "+\t\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"src/p/X.java\\\"\"", "-\t  + \" -1.5 -g -preserveAllLocals\"", "-\t  + \" -proceedOnError -referenceInfo\"", "-\t  + \" -d \\\"\" + OUTPUT_DIR + File.separator + \"bin\\\" \",", "-\t  \"\",", "-\t  \"----------\\n\" +", "-\t  \"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/src/p/X.java (at line 5)\\n\" +", "-\t  \"\tint j = R.R3;\\n\" +", "-\t  \"\t        ^^^^\\n\" +", "-\t  \"R.R3 cannot be resolved to a variable\\n\" +", "-\t  \"----------\\n\" +", "-\t  \"1 problem (1 error)\",", "-\t  true);", "+\t\t\t+ \" -1.5 -g -preserveAllLocals\"", "+\t\t\t+ \" -proceedOnError -referenceInfo\"", "+\t\t\t+ \" -d \\\"\" + OUTPUT_DIR + File.separator + \"bin\\\" \",", "+\t\t\t\"\",", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/src/p/X.java (at line 5)\\n\" + ", "+\t\t\t\"\tint j = R.R3;\\n\" + ", "+\t\t\t\"\t          ^^\\n\" + ", "+\t\t\t\"R3 cannot be resolved or is not a field\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1 problem (1 error)\",", "+\t\t\ttrue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d7a96f2224aaf3af763539e96af2a5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic void testBug82208_CLASS_AND_ENUMERATION() throws CoreException", "signatureAfterChange": " \tpublic void testBug82208_CLASS_AND_ENUMERATION() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6da51ad75a3b291e6718d9f5e2da3437", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "d8e17e252326ade78baaea3eb05d18d16eaf07ae", "commitAfterChange": "f0f988f5ece8ab0a5ff8315152fd572c7964adb5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\t\t\t\t\"-warn:allDeprecation,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$", "+\t\t\t\t\t\"-warn:allDeprecation,noOpAssign,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$", "-\t\t\t\t\t\"-warn:constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$", "+\t\t\t\t\t\"-warn:noOpAssign,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6df72e81157bb2ebccaa7191f2db76d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " public void test0310_if_else()", "signatureAfterChange": " public void test0310_if_else()", "diff": ["-\t\t\"The variable o may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" + ", "-\t\t\"The variable o may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0630f3c2ff629adf02dfd8eb339c1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForField.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test020()", "signatureAfterChange": " \tpublic void test020()", "diff": ["-\t\t\t\t\t+ \"\t * @see Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see AbstractVisibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "-\t\t\t\t\t+ \"\t * @see test.Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see test.AbstractVisibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e494e8aa3599c20b0e2c4ac2b50e37c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "e534993434659c9a128067cc81e53b914d835480", "commitAfterChange": "85fca2365612e79a6e7b22f1bfd4842ccf0748ee", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void testOutputFolder1() throws CoreException", "signatureAfterChange": " public void testOutputFolder1() throws CoreException", "diff": ["-\t\t\t\"Project P is missing required source folder: 'src1'.\\n\" + ", "-\t\t\t\"Project P is missing required source folder: 'src2'.\",", "+\t\t\t\"Project P is missing required source folder: 'src1'\\n\" + ", "+\t\t\t\"Project P is missing required source folder: 'src2'\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e8c3a8e06f22de5b91fee7dd7062320", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void test007f()", "signatureAfterChange": " \tpublic void test007f()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tclass B extends A { @Override short get(short i, short s) {return i; } }\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 2)\\n\" +", "+\t\t\t\"\tclass B extends A { @Override short get(short i, short s) {return i; } }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ed4050fc4679e1ba4b86d516d0d152d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "775bb7e86633292b115b2935c87e101190166e9d", "commitAfterChange": "4a26249aa893b7bf1faa1e1388aeb96ba4c3a814", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\t\t\"  // Method descriptor  #6 ()V\\n\" + ", "+\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "-\t\t\t\"  // Method descriptor  #15 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\t\"  // Method descriptor #15 ([Ljava/lang/String;)V\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f0d1143f49054b48d17cc282f2de624", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "9ab1542db1d40bdde11e7c06d8c1a2b268c6c336", "commitAfterChange": "db8f8d603eab6d66db17c709d32ae91c3e024b5b", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void testBug400905_0004() throws CoreException", "signatureAfterChange": " public void testBug400905_0004() throws CoreException", "diff": ["-\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):<lambda #1>.foo() [() /* true */->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):<lambda #1>.foo() [() /* false */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):<lambda #1>.foo() [(() /* true */->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):<lambda #1>.foo() [(() /* false */ ->] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f52d804451f38261a1d4e0994cdab7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeAnnotationsConverterTest.java", "commitBeforeChange": "55189ed648ac780e2783a409705c9c8b61eeced6", "commitAfterChange": "cd7ab76e97bbde2dfa388ac94141efed3a1c5385", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void test0008() throws JavaModelException", "signatureAfterChange": " \tpublic void test0008() throws JavaModelException", "diff": ["-\t\t\t\"    Object o = (@One X<String> [] @Two [] [] @Three []) null;\\n\" +", "+\t\t\t\"    Object o = (@One X<String> [] @Two [][]@Three []) null;\\n\" +", "-\t\t\t\t\"  Object o=(@One X<String> [] @Two [] [] @Three [])null;\\n\" + ", "+\t\t\t\t\"  Object o=(@One X<String>[] @Two [][] @Three [])null;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f629fffc37cdce992dda269ab71ebf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test024()", "signatureAfterChange": " public void test024()", "diff": ["-\t\t\"        [pc: 38, pc: 56] local: arg index: 3 type: java.lang.String\\n\" + ", "-\t\t\"        [pc: 75, pc: 92] local: arg index: 3 type: java.lang.Object\\n\";", "+\t\t\"        [pc: 38, pc: 46] local: arg index: 3 type: java.lang.String\\n\" + ", "+\t\t\"        [pc: 75, pc: 82] local: arg index: 3 type: java.lang.Object\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f6bd9030ac2ff1974de9000fb207c5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssignmentTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test033()", "signatureAfterChange": " public void test033()", "diff": ["-\t\t\"The variable a cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable a cannot be null at this location\\n\" + ", "-\t\t\"The variable a can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable a can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f72d010753111cd6a66e1230c93063b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test008()", "signatureAfterChange": " \tpublic void test008()", "diff": ["-\t\t\t\"        [pc: 0, pc: 3] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 3] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 3] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 3] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f759861b224eb9cfd40fd462e211fdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " \tpublic void test176()", "signatureAfterChange": " \tpublic void test176()", "diff": ["-\t\t\t\"Type safety: The expression of raw type Vector is converted to Vector<T>. References to generic type Vector<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type Vector is converted to Vector<T> using a raw conversion. References to generic type Vector<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The cast from Object to Vector<Object> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to Vector<Object> is actually checking against the erased type Vector\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fa3451791f13ad0aa357b7a508c13db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug101283b()", "signatureAfterChange": " \tpublic void testBug101283b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fafb9dd99a705ce4cb6de2ca5227818", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "be06c671b4b6902b6ff40859d5c8635f6030fed8", "commitAfterChange": "1f0aede878bd9679fe6f1bdbe19692f824725764", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void test003()", "signatureAfterChange": "  public void test003()", "diff": ["-\t\t\"    System.out.println(\\\"\ufffd?\ufffd\\\");\\n\" + ", "-\t\t\"    System.out.println(Integer.toHexString(\\\"\ufffd?\ufffd\\\".charAt(0)));\\n\" + ", "+\t\t\"    System.out.println(\\\"\\u00E2?\\u00B0\\\");\\n\" + ", "+\t\t\"    System.out.println(Integer.toHexString(\\\"\\u00E2?\\u00B0\\\".charAt(0)));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb4c957520bf27c7642684f2d01a401", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "046a051c9cfc73b3b3d419bf3c1888e842c561e5", "commitAfterChange": "fe5861689c1e079de9f2e63c6fbfe017950ec3f3", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void test040()", "signatureAfterChange": " public void test040()", "diff": ["-\t\t\"The interface X.Homonym cannot be the superclass of Y; a superclass must be a class\\n\" + ", "+\t\t\"The type X.Homonym cannot be the superclass of Y; a superclass must be a class\\n\" + ", "-\t\t\"The interface X.Homonym cannot be the superclass of Y; a superclass must be a class\\n\" + ", "+\t\t\"The type X.Homonym cannot be the superclass of Y; a superclass must be a class\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6febaf6f5c6a46db01f7b9c62b9c41c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void test004()", "signatureAfterChange": "  \tpublic void test004()", "diff": ["-\t\t\t\"Type safety: I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<U> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "701a280ea3b1473369ab8e7b795d3f5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 309, "signatureBeforeChange": " public void testBug330313_wksp1_32_njl()", "signatureAfterChange": " public void testBug330313_wksp1_32_njl()", "diff": ["-\t\t\"\t\treturn (a.style == style && equals(a.foreground, foreground) && equals(\\n\" + ", "-\t\t\"\t\t\t\ta.background, background));\\n\" + ", "+\t\t\"\t\treturn (a.style == style && equals(a.foreground, foreground)\\n\" + ", "+\t\t\"\t\t\t\t&& equals(a.background, background));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7063ff8b8fe15dacd9c8135137d24fca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "96a363e844088de7fad02c93968495ea0dca52ac", "commitAfterChange": "20306af2785b6993ef03f5b59102e1d76672145c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void test008()", "signatureAfterChange": "  \tpublic void test008()", "diff": ["-\t\t\t\"Varargs argument null should be cast to Object[] when passed to the constructor Y(boolean, Object...)\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs constructor Y(boolean, Object...). It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument null should be cast to int[][] when passed to the constructor Y(char, int[]...)\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to int[][] for the invocation of the varargs constructor Y(char, int[]...). It could alternatively be cast to int[] for a varargs invocation\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7086ea256d6a2c19e6e3494550d79ecc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 198, "signatureBeforeChange": " public void testBug260274d() throws JavaModelException", "signatureAfterChange": " public void testBug260274d() throws JavaModelException", "diff": ["-\t\t\"\t/*\\n\" + ", "-\t\t\"\t * ********************************************* Test\\n\" + ", "+\t\t\"\t/* *********************************************\\n\" + ", "+\t\t\"\t * Test\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a2013c587360241fdbd22b99103853", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "commitAfterChange": "f391db9dfa982dbe09df7c4d362cd9e5a8546769", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public String getString(int index) throws IOException", "signatureAfterChange": "\r public String getString(int index) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "+\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "+\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70bb4f14b0c24273ea794741e57d3e26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4c05b51e282281d245149ac856aed4eb689aee0d", "commitAfterChange": "fcd8f6eb5a6e4ad47715a6f446da38772d56031c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t \tpublic void test0015() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0015() throws JavaModelException", "diff": ["-\t\tcheckSourceRange(typeParameter, \"A extends Object & java.io.Serializable & Comparable\", source);", "+\t\tcheckSourceRange(typeParameter, \"A extends Object & java.io.Serializable & Comparable<?>\", source);", "-\t\tcheckSourceRange(typeBound, \"Comparable\", source);\t\t", "+\t\tcheckSourceRange(typeBound, \"Comparable<?>\", source);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70c47daf92f370db9acfbc51cf0f8b1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "d9f5208ccd9842b7305a76e615fa0b04487a1a33", "commitAfterChange": "9ac3d3205dd69d72df25a75c1584224d5519622d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void test017() throws CoreException", "signatureAfterChange": " public void test017() throws CoreException", "diff": ["-\t\t\t\"   } \\n\" + ", "+\t\t\t\"   }\\n\" + ", "-\t\t\t\"   } \\n\" + ", "+\t\t\t\"   }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71358208b70f923b520195c42b17c55f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [generic(new Exception())] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [generic(new Exception())] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [generic(new Exception())] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [<Exception>generic(new Exception())] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "715a7faa75879a7ad15016160c346711", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testBug82208_CLASS() throws CoreException", "signatureAfterChange": " \tpublic void testBug82208_CLASS() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7174e09a628999cba995a8a9dee16a06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void testBug79860string() throws CoreException", "signatureAfterChange": " \tpublic void testBug79860string() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 2, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 2, workingCopies.length);", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71b2b0993226cca874b868ee9cd6cdfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "af9bbbd46257142e006853d95525656db05c0be8", "commitAfterChange": "75441f37a4b77efa641f7e3f5866e117cb328da6", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void testDeleteJarFile2() throws CoreException", "signatureAfterChange": " public void testDeleteJarFile2() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e884b6bf3f66ce6fd6c491bcf4399a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "b14a6c4d09a9bece1bab75937908ff44df19fa09", "commitAfterChange": "a846071c58f9098177eef02be0134294158f9c4f", "methodNumberBeforeChange": 381, "methodNumberAfterChange": 381, "signatureBeforeChange": "  public void test1023()", "signatureAfterChange": "  public void test1023()", "diff": ["-\t\t\t\"  void foo() {\\n\" +", "+\t\t\t\"  void foo(Object that) {\\n\" +", "-\t\t\t\"    while (this != null) {\\n\" +", "+\t\t\t\"    while (that != null) {\\n\" +", "-\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 13)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e8cc09bcd0e09326d68b0c2f735df8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 241, "signatureBeforeChange": " public void testBug313524_wksp1_03() throws JavaModelException", "signatureAfterChange": " public void testBug313524_wksp1_03() throws JavaModelException", "diff": ["-\t\t\"\t\tprintTargets(project, subNames, null, InternalAntMessages.getString(\\n\" + ", "-\t\t\"\t\t\t\t\\\"InternalAntRunner.Subtargets__5\\\"), 0); //$NON-NLS-1$\\n\" + ", "+\t\t\"\t\tprintTargets(project, subNames, null, InternalAntMessages\\n\" + ", "+\t\t\"\t\t\t\t.getString(\\\"InternalAntRunner.Subtargets__5\\\"), 0); //$NON-NLS-1$\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "723af32c77260edcb4673d3233bddacd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestMixed.java", "commitBeforeChange": "d5b9ab15bb3f769b7e2ac485fe6da55027818828", "commitAfterChange": "e98478cd38caef5e23457b8b0fdc364bf2846afc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tpublic void test012()", "signatureAfterChange": " \t \tpublic void test012()", "diff": ["-\t\t\t\t+ \"\t       ^\\n\"", "-\t\t\t\t+ \"Annotation: Missing javadoc for public member in API class or interface\\n\"", "+\t\t\t\t+ \"\t       ^^^\\n\"", "+\t\t\t\t+ \"Annotation: Missing javadoc comment for public declaration\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72a0b8c40ed7411cc2c8725761ee6e2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "8ca64d051cb2b705e931d512b7e8165159874636", "commitAfterChange": "fb2f69442af38478fd737734fbf56ae45623c81f", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " public void test0220()", "signatureAfterChange": " public void test0220()", "diff": ["-\texpectedCompletionNodeToString = \"<CompleteOnName:cas>\";", "+\texpectedCompletionNodeToString = \"<CompleteOnKeyword:cas>\";", "-\t\t\"      <CompleteOnName:cas>;\\n\" +", "+\t\t\"      <CompleteOnKeyword:cas>;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72fec81701c3fd457b87db939cba258c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "commitAfterChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void test049()", "signatureAfterChange": " \tpublic void test049()", "diff": ["-\t\t\"1. ERROR in X.java (at line 12)\\r\\n\" +", "-\t\t\"\tpublic @MyAnn void something() { }\t\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 12)\\n\" +", "+\t\t\"\tpublic @MyAnn void something() { }\t\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7315d0ceb71196da4803e6792a78e2cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void test056i()", "signatureAfterChange": " public void test056i()", "diff": ["-\t\t\"Resource leak: \\\"fileReader\\\" is never closed\\n\" + ", "+\t\t\"Resource leak: 'fileReader' is never closed\\n\" + ", "-\t\t\"Potential resource leak: \\\"fileReader\\\" may not be closed\\n\" + ", "+\t\t\"Potential resource leak: 'fileReader' may not be closed\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73545021eb3a7b6a8f19a298e78b9078", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "786bdcb54629de0c38fe45d8c9c539f76fe7da89", "commitAfterChange": "0f2bcb9853eb25fef3d26daa6737dcdc0dcad109", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void test025()", "signatureAfterChange": " public void test025()", "diff": ["-\t\t\t\"  J m = new Y();\" +", "+\t\t\t\"  J m = new Y();\\n\" +", "-\t\t\t\"    return null;\" +", "+\t\t\t\"    return null;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "735a17d3d15ede3ec0c13b322e29dc75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void test006() throws JavaModelException", "signatureAfterChange": "  public void test006() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "738cd4e8467a2849fdd39795f146d886", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82d58f9af854b98a92f7d694d40ac1e84e13013c", "commitAfterChange": "6d114aac1fbfd4c23041534efbb02c24c883ba25", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": " public void test139()", "signatureAfterChange": " public void test139()", "diff": ["- this.runNegativeTest(", "-     new String[] {", "-    \t    \"X.java\",", "- \t\t\t\"public enum X {\\n\" + ", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public enum X {\\n\" + ", "-     },", "-\t\"----------\\n\" + ", "-\t\"1. WARNING in X.java (at line 3)\\n\" + ", "-\t\"\tdouble eval(double x, double y) {\\n\" + ", "-\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\"The method eval(double, double) of type new X(){} should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\"----------\\n\" + ", "-\t\"2. ERROR in X.java (at line 7)\\n\" + ", "-\t\"\tMINUS {\\n\" + ", "-\t\"\t      ^\\n\" + ", "-\t\"The type new X(){} must implement the inherited abstract method X.eval(double, double)\\n\" + ", "-\t\"----------\\n\" + ", "-\t\"3. ERROR in X.java (at line 8)\\n\" + ", "-\t\"\tabstract double eval2(double x, double y);\\n\" + ", "-\t\"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\"The abstract method eval2 in type new X(){} can only be defined by an abstract class\\n\" + ", "-\t\"----------\\n\");", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tdouble eval(double x, double y) {\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method eval(double, double) of type new X(){} should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tMINUS {\\n\" + ", "+\t\t\"\t^^^^^\\n\" + ", "+\t\t\"The enum constant MINUS must define the abstract method eval(double, double)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tabstract double eval2(double x, double y);\\n\" + ", "+\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The abstract method eval2 in type new X(){} can only be defined by an abstract class\\n\" + ", "+\t\t\"----------\\n\"", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73f1061feed4809b3d5d1d8e0ac9f116", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SelectionTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void test37()", "signatureAfterChange": " public void test37()", "diff": ["-\tString expectedCompletionNodeToString = \"<SelectOnExplicitConstructorCall:new G().this((23 + \\\"hello\\\"))>\";", "+\tString expectedCompletionNodeToString = \"<SelectOnExplicitConstructorCall:new G().this((23 + \\\"hello\\\"))>;\";", "-\t\t\"    };\\n\" + ", "+\t\t\"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73fc11bfa46c52668308daf16b2ed954", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test0049()", "signatureAfterChange": " public void test0049()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:ext>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:ext>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74055f1dbf8ffef88f2e34b50a63eb9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "a8c16bcddf8ea1c15574f4c6305041f3a02174d1", "commitAfterChange": "653892de0ce6d92080f2ac329ebf5ae3bc092866", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void testDuplicateHashCode2()", "signatureAfterChange": " public void testDuplicateHashCode2()", "diff": ["-\t\t\"\t\twhile(true) {\\n\" +", "+\t\t\"\t\touter: while(true) {\\n\" +", "-\t\t\"\t\t\t\tSystem.exit(0);\\n\" +", "+\t\t\"\t\t\t\tbreak outer;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "740c522cdc8d49332dbcf432cdcd5a71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "8e69a3a7281a71cf8bb89a21d1bb526115e1dbf1", "commitAfterChange": "abf6eeb0171a16a4864dd1645223bf575f08c2ee", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void test042() throws CoreException", "signatureAfterChange": " \tpublic void test042() throws CoreException", "diff": ["-\t\t\t\t\t\"LX;.field\"", "+\t\t\t\t\t\"LX;.field)I\"", "-\t\t\t\t\"LX;.field\",", "+\t\t\t\t\"LX;.field)I\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "742ce0e65b3046e3f8f81ad326f9981e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "68f185fc63132d7b106a1c7ca52ed6d004b96329", "commitAfterChange": "4a85a8ee613913420acf3dde5af380e91d3bad2c", "methodNumberBeforeChange": 250, "methodNumberAfterChange": 250, "signatureBeforeChange": " public void test425512ce() throws Exception", "signatureAfterChange": " public void test425512ce() throws Exception", "diff": ["-\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from int[] to I\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Arrays are not allowed in intersection cast operator\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745d09304a870181705e652c527e9809", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "2a90d883e05154207090ce25c3cd6c71b66259ab", "commitAfterChange": "624d1b561ac3289a55fdc4319658cfc9a95be40b", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void test033()", "signatureAfterChange": " \tpublic void test033()", "diff": ["-\t\t\t\"+Ljava.util.ArrayList;\",", "-\t\t\t\"Ljava/util/List;&!Lp1/X;+Ljava/util/ArrayList;123;\"", "+\t\t\t\"!+Ljava.util.ArrayList;\",", "+\t\t\t\"Ljava/util/List;&!Lp1/X;+Ljava/util/ArrayList<>;123;\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745f8c3fda3fcf397463bea1e990a8ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "b2b2f79127ceb81a70f0a7e9c4a14a4c97a6bb69", "commitAfterChange": "68d139bf0c56c6c993907701c5e076e9d3ee773d", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void test085()", "signatureAfterChange": " public void test085()", "diff": ["-\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, static imports are only available if source level is 5.0\\n\" + ", "-\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, static imports are only available if source level is 5.0\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74a6d25a7a1f493fc83e4a6be151ac4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "32c058fe1055a2cb6eca9ee21cc0524d2604b76d", "commitAfterChange": "6971401de3002c8409cecc6b771fee57757ee1f7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\t\t\t\t\"-warn:allDeprecation,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedLocals,unusedArguments,unusedImports,syntheticAccess,staticReceiver\"); //$NON-NLS-1$", "+\t\t\t\t\t\"-warn:allDeprecation,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$", "-\t\t\t\t\t\"-warn:constructorName,packageDefaultMethod,maskedCatchBlocks,unusedLocals,unusedArguments,unusedImports,syntheticAccess,staticReceiver\"); //$NON-NLS-1$", "+\t\t\t\t\t\"-warn:constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "754907009f3868c58598c7bc89d24733", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " public void testBug311578b() throws JavaModelException", "signatureAfterChange": " public void testBug311578b() throws JavaModelException", "diff": ["-\t\t\"\t// //J-\\n\" + ", "+\t\t\"\t//// J-\\n\" + ", "-\t\t\"\t// //J+\\n\" + ", "+\t\t\"\t//// J+\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7582f574fddb020a13a66bf833285292", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 277, "methodNumberAfterChange": 277, "signatureBeforeChange": " public void test0277()", "signatureAfterChange": " public void test0277()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:int>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:int>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76028278682dcc762709604821dcc2c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "db3b4c118415b666a25a55dbff2928b26ade300a", "commitAfterChange": "7b0bea69584248f2e93748bb180ed48f6c7ea0f8", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": " \tpublic void test145()", "signatureAfterChange": " \tpublic void test145()", "diff": ["-\t\t\t\"Unsafe wildcard operation: The method add(?) of type XList<?> is not applicable for the arguments (X). The wildcard parameter ? has no lower bound, and may actually be more restrictive than argument X\\n\" + ", "+\t\t\t\"Bound mismatch: The method add(?) of type XList<?> is not applicable for the arguments (X). The wildcard parameter ? has no lower bound, and may actually be more restrictive than argument X\\n\" + ", "-\t\t\t\"Unsafe wildcard operation: Cannot assign expression of type X to wildcard type ?. The wildcard type has no lower bound, and may actually be more restrictive than expression type\\n\" + ", "+\t\t\t\"Bound mismatch: Cannot assign expression of type X to wildcard type ?. The wildcard type has no lower bound, and may actually be more restrictive than expression type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76a1bbafb47e642051a0899d7b111038", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void testBug400905_0001() throws CoreException", "signatureAfterChange": " public void testBug400905_0001() throws CoreException", "diff": ["-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [() ->] EXACT_MATCH\\n\" +\t\t\t", "-\t\t\t\"src/b400905/X.java int void b400905.X.doit():Lambda(I).foo() [() ->] EXACT_MATCH\");\t", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda #1>.foo() [() ->] EXACT_MATCH\\n\" +\t\t\t", "+\t\t\t\"src/b400905/X.java int void b400905.X.doit():<lambda #1>.foo() [() ->] EXACT_MATCH\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76df68636962ed41a9441a9425235fa5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments06() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments06() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Exception>Single<Object>(new Exception(), gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), gs)] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Exception>Single<Object>(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), gs)] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7766ed3d56ce786c23d6f7bdc34c406f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "df84bc0b0e74080458b4e3f35c6e77ec6fed2587", "commitAfterChange": "2bb013de372e754bf58118fac6dab82d5a5c9625", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  public void test75()", "signatureAfterChange": "  public void test75()", "diff": ["-\t\t\"        fo $missing$;\\n\" +", "+\t\t\"        fo = $missing$;\\n\" +", "-\t\t\"    ba $missing$;\\n\" +", "+\t\t\"    ba = $missing$;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "777a53e231b55fbec3338175c1c23ae9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void testBug82208_INTERFACE() throws CoreException", "signatureAfterChange": " \tpublic void testBug82208_INTERFACE() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "777ae65f0976dbce8ef7868eb168081f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastingContextTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void test003()", "signatureAfterChange": " public void test003()", "diff": ["-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +", "-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77818ad26ea52b482366099ca7f12a49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " public void testBug400905_0013c() throws CoreException", "signatureAfterChange": " public void testBug400905_0013c() throws CoreException", "diff": ["-\t\tassertSearchResults(\"src/X.java int int void X.zoo():<lambda>#1.lambda$1(X):<lambda>#2.lambda$2(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1(X) [X] EXACT_MATCH\");", "+\t\tassertSearchResults(\"src/X.java int int void X.zoo():Lambda(I).doit(X):Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77cf911ba11ffb67cf0a79f55794bce9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test032b()", "signatureAfterChange": " \tpublic void test032b()", "diff": ["-\t\t\t\"1. ERROR in X2.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tpublic class X2 { void test() {foo();} }\\r\\n\" +", "+\t\t\t\"1. ERROR in X2.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic class X2 { void test() {foo();} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77e5adc91de0446dd1ada09c733e6db1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "82b30bfac03ac2ea34c10939fc4a0ad2f786e3fe", "commitAfterChange": "71555c35d93413ff4c7140d1ebbefc900078bda1", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void test0042() throws JavaModelException", "signatureAfterChange": " \tpublic void test0042() throws JavaModelException", "diff": ["-\t\tassertEquals(\"wrong key\", \"T:test0042/A/T[]foo()\", binding.getKey());", "+\t\tassertEquals(\"wrong key\", \"T:test0042/A/T[][]foo()\", binding.getKey());", "-\t\tassertEquals(\"wrong key\", \"T:test0042/A/T[]foo()[]\", binding2.getKey());\t\t", "+\t\tassertEquals(\"wrong key\", \"T:test0042/A/T[][]foo()[]\", binding2.getKey());\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77fc2256c91ac0e64cf562f3b523cd38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": " public void test0051()", "signatureAfterChange": " public void test0051()", "diff": ["-\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +", "-\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "784d61be9f64b48a444a66672d30fcf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test003() throws Exception", "signatureAfterChange": " \tpublic void test003() throws Exception", "diff": ["-\t\t\t\t\"        [pc: 24, line: 9]\\n\" +", "+\t\t\t\t\"        [pc: 21, line: 9]\\n\" +", "-\t\t\t\t\"        [pc: 17, pc: 24] local: j index: 2 type: int\\n\" +", "+\t\t\t\t\"        [pc: 17, pc: 21] local: j index: 2 type: int\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7852af2165332ab5164d3a4eb3dcdc42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "2fdd800912ee4f65c51a2ec384533d1146c71af7", "commitAfterChange": "844f82aaef831e55c4827a65ccd98caed0cd08f3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\t\t\"The private field A.success is never read locally\\n\" + ", "+\t\t\"The field A.success is never read locally\\n\" + ", "-\t\t\"The field success is not visible\\n\" + ", "-\t\t\"----------\\n\"", "-", "-\t);", "+\t\t\"The field A.success is not visible\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "788f27a7fd739e60ca093645dea801d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument02() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EQUIVALENT_ERASURE_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "789968c50f607eedec48974623012a83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "be247eb150a4ae64408d691fa5f52cc64cf01665", "commitAfterChange": "560772312173d5112198fae503105dd04e5536f2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testAddNonJavaProject() throws CoreException", "signatureAfterChange": " public void testAddNonJavaProject() throws CoreException", "diff": ["-\t\tassertDeltas(\"Should get no delta\", \"\");", "+\t\tassertDeltas(", "+\t\t\t\"Should get a non-Java resource delta\", ", "+\t\t\t\"ResourceDelta(/P)\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78b19fc64b1791cbf733b3b6c9fa3057", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": " \tpublic void test048g()", "signatureAfterChange": " \tpublic void test048g()", "diff": ["-\t\t\t\"1. ERROR in X8.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tpublic Object foo(I<String> z) { return null; }\\r\\n\" +", "+\t\t\t\"1. ERROR in X8.java (at line 2)\\n\" +", "+\t\t\t\"\tpublic Object foo(I<String> z) { return null; }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78b34781ad0bbaf310be4fffd6db5b62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "dbfe97bed3f7feb8408fadbcb58741aa04540553", "commitAfterChange": "3d86d8fdd283e92da8b2fd4ec59e7d2f2b4add9f", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void test038()", "signatureAfterChange": " public void test038()", "diff": ["-\t\t\"The method Y.foo() does not override the inherited method from X since it is private to a different package.\\n\" + ", "+\t\t\"The method Y.foo() does not override the inherited method from X since it is private to a different package\\n\" + ", "-\t\t\"This class must implement the inherited abstract method X.foo(), but cannot override it since it is not visible from Z. Either make the type abstract or make the inherited method visible.\\n\" + ", "+\t\t\"This class must implement the inherited abstract method X.foo(), but cannot override it since it is not visible from Z. Either make the type abstract or make the inherited method visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78de0842536241f7b5b92e7779653be3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "   public void test0086()", "signatureAfterChange": "   public void test0086()", "diff": ["-\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"    X o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    X o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78f829e2bc6c89fd2c8e1837dc67827d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "  \tpublic void test145()", "signatureAfterChange": "  \tpublic void test145()", "diff": ["-\t\t\t\t\t+ \"\t * @see Visibility.AvcPublic#avm_public() Valid ref: visible inherited method in visible inner class\\n\"", "+\t\t\t\t\t+ \"\t * @see AbstractVisibility.AvcPublic#avm_public() Valid ref: visible method in visible inner class\\n\"", "-\t\t\t\t\t+ \"\t * @see test.Visibility.AvcPublic#avm_public() Valid ref: visible inherited method in visible inner class\\n\"", "+\t\t\t\t\t+ \"\t * @see test.AbstractVisibility.AvcPublic#avm_public() Valid ref: visible method in visible inner class\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7910a2ccb25686440e41e42a08cea7b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "d32dbe370312bc68ef5b59c6268bfdfcda839b17", "commitAfterChange": "4b84620f8d71e6de7e42a2050aa5360e2143f846", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void test013()", "signatureAfterChange": " public void test013()", "diff": ["-\t\t\"The parameter p is hiding another local variable defined in an enclosing type scope\\n\" + ", "+\t\t\"The parameter p is hiding another local variable defined in an enclosing scope\\n\" + ", "-\t\t\"The parameter y is hiding another local variable defined in an enclosing type scope\\n\" + ", "+\t\t\"The parameter y is hiding another local variable defined in an enclosing scope\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79146c8da5aa2c10d4c113b6a93afa60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "868f3524d040dcfdbf4e74b94162d240d48279bd", "commitAfterChange": "5ca6ee5fca8063f3ae4c037e5721f50897b59fe4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void test008()", "signatureAfterChange": "  \tpublic void test008()", "diff": ["-\t\t\t\"Varargs argument null should be cast to Object[] when passed to the constructor Y(boolean, Object...)\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs constructor Y(boolean, Object...). It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument null should be cast to int[][] when passed to the constructor Y(char, int[]...)\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to int[][] for the invocation of the varargs constructor Y(char, int[]...). It could alternatively be cast to int[] for a varargs invocation\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7915f571f917e767a666cc6f003d570b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1260, "methodNumberAfterChange": 1260, "signatureBeforeChange": " public void test1226()", "signatureAfterChange": " public void test1226()", "diff": ["-\t\t\"1. ERROR in X.java (at line 7)\\r\\n\" +", "-\t\t\"\tZork z;\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 7)\\n\" +", "+\t\t\"\tZork z;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7916411f2455c191a532f70b2ae3d817", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachedJavadocTests.java", "commitBeforeChange": "2881115df3db39d2fe7ea74c50c55027d1324a16", "commitAfterChange": "bbe5c2565fb8190610f9b139c18e465ccc5286bd", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void test020() throws JavaModelException", "signatureAfterChange": " \tpublic void test020() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong name\", \"arg0\", paramNames[0]); //$NON-NLS-1$", "-\t\tassertEquals(\"Wrong name\", \"arg1\", paramNames[1]); //$NON-NLS-1$", "+\t\tassertEquals(\"Wrong name\", \"i\", paramNames[0]); //$NON-NLS-1$", "+\t\tassertEquals(\"Wrong name\", \"j\", paramNames[1]); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "794c058fc04d81154b1540829106f937", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic void test22() throws JavaModelException", "signatureAfterChange": "  \tpublic void test22() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest$85;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\",", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other {key=LTest$85;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7988e75d370e6eaa038f6d1316b8a0af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void test021()", "signatureAfterChange": " public void test021()", "diff": ["-\t\t\t\"\t                 ^^^^^^^^\\n\" + ", "+\t\t\t\"\t                 ^^^^^\\n\" +", "-\t\t\t\"\t            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t            ^^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79a41bf7fc1c3a0e5552486c44c88123", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 199, "signatureBeforeChange": " public void testBug260274e() throws JavaModelException", "signatureAfterChange": " public void testBug260274e() throws JavaModelException", "diff": ["-\t\t\"\t * ************************************************** ********** Test\\n\" + ", "-\t\t\"\t * ********** Test **************\\n\" + ", "+\t\t\"\t * **************************************************\\n\" + ", "+\t\t\"\t * ********** Test ********** Test **************\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79ad9ce18b886776526cb52033ed0e5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tpublic void test062()", "signatureAfterChange": " \t \tpublic void test062()", "diff": ["-\t\t\t\"     2  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "+\t\t\t\"     2  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"     6  invokevirtual java.io.PrintStream.println(int) : void  [37]\\n\" + ", "+\t\t\t\"     6  invokevirtual java.io.PrintStream.println(int) : void [32]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d2fd75404b684766a3c1fe59f438d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 821, "methodNumberAfterChange": 821, "signatureBeforeChange": " public void test0814()", "signatureAfterChange": " public void test0814()", "diff": ["-\t\t\"Type safety: The cast from Object to E[] is actually checking against the erased type Object[]\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to E[]\\n\" + ", "-\t\t\"Type safety: The cast from Object to List<E>[] is actually checking against the erased type List[]\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to List<E>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d95d3e9ed537033837e2802cffdf6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void testBug83285b() throws CoreException", "signatureAfterChange": " \tpublic void testBug83285b() throws CoreException", "diff": ["-\t\t\t\"src/b83285/A.java b83285.B$C(String) [C] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b83285/A.java b83285.B$C(String) [bar] EXACT_MATCH INSIDE_JAVADOC\"", "+\t\t\t\"src/b83285/A.java b83285.B$C(String) [C(String)] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/b83285/A.java b83285.B$C(String) [bar()] EXACT_MATCH INSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a052fc05add3fbf8bd979f07c43a016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 306, "signatureBeforeChange": " public void testBug330313_wksp1_29_njl()", "signatureAfterChange": " public void testBug330313_wksp1_29_njl()", "diff": ["-\t\t\"\t\treturn (pack != null && otherpack != null && isSamePackage(pack,\\n\" + ", "-\t\t\"\t\t\t\totherpack));\\n\" + ", "+\t\t\"\t\treturn (pack != null && otherpack != null\\n\" + ", "+\t\t\"\t\t\t\t&& isSamePackage(pack, otherpack));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a706d64804a0a7964418438f08ba379", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " \tpublic void test027c()", "signatureAfterChange": " \tpublic void test027c()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tclass Y<T> extends X<T> { void test(Object o, T t) {} }\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\tclass Y<T> extends X<T> { void test(Object o, T t) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a83dfe442472893c5458f8ab6154481", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java", "commitBeforeChange": "36ef129881167aaca524bd32a5aa2c4e26ffd187", "commitAfterChange": "19b7207c9f9b8245eee7ba353b5eb784e8fb1b81", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void testLocalName2() throws JavaModelException", "signatureAfterChange": " public void testLocalName2() throws JavaModelException", "diff": ["-\tIJavaElement[] elements = codeSelect(cu, \"var2\", \"var2\");", "+\tIJavaElement[] elements = codeSelect(cu, \"var2 = 1;\", \"var2\");", "-\t\t\"\",", "+\t\t\"var2 [in foo() [in ResolveLocalName [in ResolveLocalName.java [in <default> [in src [in Resolve]]]]]]\",", "+\t\telements", "+\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aad94a713b36ad2b9e0592c1da5057a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 218, "methodNumberAfterChange": 218, "signatureBeforeChange": " \tpublic void test075b()", "signatureAfterChange": " \tpublic void test075b()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tclass B<V> extends A<V> { @Override <T1, S1 extends K & I<T1>> void foo(V v, T1 t, S1 s) { } }\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 2)\\n\" +", "+\t\t\t\"\tclass B<V> extends A<V> { @Override <T1, S1 extends K & I<T1>> void foo(V v, T1 t, S1 s) { } }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ab62729d7131d4a896d4fb6a6721675", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestForField.java", "commitBeforeChange": "1dae9bed0f28b20df545c773f52fb80596048ada", "commitAfterChange": "73e6c55b6cebcb032c8128286708483f86167b64", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void test044()", "signatureAfterChange": "  \tpublic void test044()", "diff": ["-\t\t\t\t+ \"\t               ^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                           ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                             ^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7abb40e470a4d64d51030fceae74867f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "50d8267275b181894c19c15246b42f9711f997ad", "commitAfterChange": "63715172f1a31dfb060df48fd8bde0bb2378c20d", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["-        \"\t   includeAssertNull    raise null warnings for variables\\n\" + ", "-        \"\t\t\t\t\t\t\tthat got tainted in an assert expression\\n\" + ", "+        \"      includeAssertNull    raise null warnings for variables\\n\" + ", "+        \"                           that got tainted in an assert expression\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac3b04e28b3cd1ff8dd0e0e2d1fb060", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "14e234724f203a6fef415e43d34432d323b84ca1", "commitAfterChange": "66e076adb0340dce3dd9bba5c2d65608184b470b", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void testBug139621b() throws JavaModelException", "signatureAfterChange": " public void testBug139621b() throws JavaModelException", "diff": ["-\t\t\" * This method returns an object\\n\" + ", "+\t\t\" * Test with an existing javadoc type declaration\\n\" + ", "+\t\t\"\t/**\\n\" + ", "+\t\t\"\t * Test with only an orphan comment in type declaration\\n\" + ", "+\t\t\"\t * @see Obj\\n\" + ", "+\t\t\"\t */\\n\" + ", "+\t\t\"}\\n\";", "+\tcompleteInJavadoc(\"/Completion/src/bugs/b139621/BasicTestBugs.java\", source, true, \"Obj\");", "+\tassertSortedResults(", "+\t\t\"Object[TYPE_REF]{Object, java.lang, Ljava.lang.Object;, null, null, \"+this.positions+R_DICUNR+\"}\"", "+\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aefe4ff63180ee8cccd77a5bcf47e7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "58aaea35ae4c64a4ecebe06d6b1ab1679e04698a", "commitAfterChange": "d5df66f62f879926d0ab37840f8644f7133a2a54", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": "     public void test127()", "signatureAfterChange": "     public void test127()", "diff": ["-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"The constructor X() is deprecated\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"The type X is deprecated\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b328b366b0e9716960ecfb0d63d0f52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationDietRecoveryTest.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void test0021()", "signatureAfterChange": " public void test0021()", "diff": ["-\t\t\"  @AnAnnotation int field;\\n\" + ", "+\t\t\"  @AnAnnotation(name = $missing$) int field;\\n\" + ", "-\t\t\"  @AnAnnotation int field;\\n\" + ", "+\t\t\"  @AnAnnotation(name = $missing$) int field;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b51b1bd4751cf72ae4c2c80d52ffcce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 278, "methodNumberAfterChange": 278, "signatureBeforeChange": " public void test0278()", "signatureAfterChange": " public void test0278()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:int>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:int>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b58f66ad30f48c1535136d338faadf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public void test0039()", "signatureAfterChange": "   public void test0039()", "diff": ["-\texpectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>};\";", "-\t\t\"    Object[] o = {<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    Object[] o = {<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bbcc4f65b11a835363c7b2bda6d0390", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NameLookupTests2.java", "commitBeforeChange": "75c11b9993cee3cc0c66baeb87390d3f47878de0", "commitAfterChange": "bf1e6d69eab09fcc8966c652a3845b7198223fbb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testAddPackageFragment2() throws CoreException", "signatureAfterChange": " public void testAddPackageFragment2() throws CoreException", "diff": ["-\t\t\t\"p1\",", "+\t\t\t\"p1 [in src [in P]]\",", "-\t\t\t\"p2\",", "+\t\t\t\"p2 [in src [in P]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bbdc027eb190d9df95bfc012f860c28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "572021b99f292f39a76e81c2ea834ac6a839b00b", "commitAfterChange": "727d8ca46d64642ad4f629f81ba37e76e7ae8c85", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void testBug232768_Block03() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Block03() throws JavaModelException", "diff": ["-\t\t\"\t\\n\" +", "-\t\t\"        /*\\n\" +", "+\t\t\"\\n\" +", "+\t\t\"\t/*\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c6c0fa7d6919ca4bd91f19e9a62e7fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4c370db17fcad0e528d16b2fecef0952e714ead1", "commitAfterChange": "73b4b882573d866af4a2886a5430207907acc99e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test0043() throws JavaModelException", "signatureAfterChange": " \tpublic void test0043() throws JavaModelException", "diff": ["-\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0043\", \"A.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0043\", \"X.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tassertEquals(\"Wrong qualified name\", \"X\", typeBinding.getQualifiedName());", "+\t\tassertEquals(\"Wrong qualified name\", \"T\", typeBinding.getQualifiedName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ca9e481fd43d64f9063cfee1c06512f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 370, "methodNumberAfterChange": 370, "signatureBeforeChange": " \tpublic void test0366()", "signatureAfterChange": " \tpublic void test0366()", "diff": ["-\t\t\t\"Type mismatch: cannot convert from MX<capture-of ? extends Object> to MX<? extends String>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from MX<capture#6-of ? extends Object> to MX<? extends String>\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from MX<capture-of ? super String> to MX<? super Object>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from MX<capture#8-of ? super String> to MX<? super Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cbe79377c5fe0b3749da2f31aa4b2fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 787, "methodNumberAfterChange": 787, "signatureBeforeChange": " public void test781()", "signatureAfterChange": " public void test781()", "diff": ["-\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\"\tpublic static <E, T extends E & Comparable<? super T>> Foo<E> doIt(T t) {\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tpublic static <E, T extends E & Comparable<? super T>> Foo<E> doIt(T t) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cd040fb617d27b22928f0187bd8e8ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 267, "signatureBeforeChange": "\t\t \tpublic void test265()", "signatureAfterChange": "\t\t \tpublic void test265()", "diff": ["-\t\t\t\"Unsafe type operation: The cast from X<E> to parameterized type XC<U> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from X<E> to XC<U> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from X<E> to parameterized type XC<? extends X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from X<E> to XC<? extends X> will not check conformance of type arguments at runtime\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d19be34ba4a3ee1f18368988f25fac9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void test056h()", "signatureAfterChange": " public void test056h()", "diff": ["-\t\t\"Potential resource leak: 'fileReader' may not be closed\\n\" + ", "+\t\t\"Potential resource leak: \\\"fileReader\\\" may not be closed\\n\" + ", "-\t\t\"Resource leak: 'localReader' is never closed\\n\" + ", "+\t\t\"Resource leak: \\\"localReader\\\" is never closed\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d3e9b6b22bfe22a12bd0832a0b9516b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastingContextTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test008()", "signatureAfterChange": " public void test008()", "diff": ["-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +", "-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d5510c89cf41c7b76f55d2be43dbf8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "8c77956bb14bf31d316463be9556a2204834682b", "commitAfterChange": "366617dbc4fc1d9363db17217a7ae199f0f005ea", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void test088()", "signatureAfterChange": " public void test088()", "diff": ["-\t\t\"The argument of type null should explicitly be cast to Class[] for the invocation of the varargs method getMethod(String, Class...) from type Class. It could alternatively be cast to Class for a varargs invocation\\n\" +", "+\t\t\"Type null of the last argument to method getMethod(String, Class...) doesn't exactly match the vararg parameter type. Cast to Class[] to confirm the non-varargs invocation, or pass individual arguments of type Class for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Class[] for the invocation of the varargs method getMethod(String, Class...) from type Class. It could alternatively be cast to Class for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method getMethod(String, Class...) doesn't exactly match the vararg parameter type. Cast to Class[] to confirm the non-varargs invocation, or pass individual arguments of type Class for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d57a14f3e39801b3eb401b842df64d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void test0057()", "signatureAfterChange": " public void test0057()", "diff": ["-\t\t\"  public void foo() default { System.out.println(); }\\n\" +", "+\t\t\"  public default void foo() { System.out.println(); }\\n\" +", "-\t\t\t\"\tpublic void foo() default { System.out.println(); }\\n\" + ", "+\t\t\t\"\tpublic default void foo() { System.out.println(); }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d580a182b000f3af684912dd8677b01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " \tpublic void test050g()", "signatureAfterChange": " \tpublic void test050g()", "diff": ["-\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d91a74cc5a6913a17c088225c903107", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic void testBug77260nested()", "signatureAfterChange": " \tpublic void testBug77260nested()", "diff": ["-\t\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\t\"\t           ^^^^^\\n\" + ", "-\t\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\t\"\t         ^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da24c53ac8b71ac73177c1063ef4877", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "6a618f5105b380b0a9a5dc6bfffb855693be7fab", "commitAfterChange": "93613529f4763965d02155d2aaa1cabf71be7897", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void testCreateBindings26() throws CoreException", "signatureAfterChange": " \tpublic void testCreateBindings26() throws CoreException", "diff": ["-\t\t\t\"LA;.foo(Ljava/lang/String;I)V#str\\n\" +", "-\t\t\t\"LA;.foo(Ljava/lang/String;I)V#i\",", "+\t\t\t\"LA;.foo(Ljava/lang/String;I)V#str#0#0\\n\" + // occurrence 0, rank 0", "+\t\t\t\"LA;.foo(Ljava/lang/String;I)V#i#0#1\", // occurrence 0, rank 1"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7de4975a35435c8d8b2483a9e5aabaf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 358, "methodNumberAfterChange": 358, "signatureBeforeChange": " public void test0358()", "signatureAfterChange": " public void test0358()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pro>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pro>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e14e906abd60cce925724959121e025", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "commitAfterChange": "99074098c6405e18b1f1a04aabe7c2838c777448", "methodNumberBeforeChange": 837, "methodNumberAfterChange": 837, "signatureBeforeChange": " public void test0817()", "signatureAfterChange": " public void test0817()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" +", "-\t\t\t\"\tprivate T t;\\n\" +", "-\t\t\t\"\t          ^\\n\" +", "-\t\t\t\"The field X<T>.t is never read locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 9)\\n\" +", "-\t\t\t\"\tif (this.inner instanceof X<?>.Inner) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The expression of type X<?>.Inner is already an instance of type X<?>.Inner\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tif (this.inners instanceof X<?>.Inner[]) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The expression of type X<?>.Inner[] is already an instance of type X<?>.Inner[]\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 14)\\n\" +", "-\t\t\t\"\tvoid foo(List l) {\\n\" +", "-\t\t\t\"\t         ^^^^\\n\" +", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. WARNING in X.java (at line 15)\\n\" +", "-\t\t\t\"\tif (l instanceof List<?>) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The expression of type List is already an instance of type List<?>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in X.java (at line 16)\\n\" +", "-\t\t\t\"\tif (l instanceof List<? extends String>) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>. Use instead its raw form List since generic type information will be erased at runtime\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in X.java (at line 18)\\n\" +", "-\t\t\t\"\tvoid foo(List[] ls) {\\n\" +", "-\t\t\t\"\t         ^^^^\\n\" +", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"8. WARNING in X.java (at line 19)\\n\" +", "-\t\t\t\"\tif (ls instanceof List<?>[]) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The expression of type List[] is already an instance of type List<?>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"9. ERROR in X.java (at line 20)\\n\" +", "-\t\t\t\"\tif (ls instanceof List<? extends String>[]) {}\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tprivate T t;\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"The field X<T>.t is never read locally\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tif (this.inner instanceof X<?>.Inner) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type X<?>.Inner is already an instance of type X<?>.Inner\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tif (this.inners instanceof X<?>.Inner[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type X<?>.Inner[] is already an instance of type X<?>.Inner[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tvoid foo(List l) {\\n\" + ", "+\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tif (l instanceof List<?>) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type List is already an instance of type List<?>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tif (l instanceof List<? extends String>) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>. Use the form List<?> instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tvoid foo(List[] ls) {\\n\" + ", "+\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"\tif (ls instanceof List<?>[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type List[] is already an instance of type List<?>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tif (ls instanceof List<? extends String>[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>[]. Use the form List<?>[] instead since further generic type information will be erased at runtime\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e1b83a0843709c9eb1e0ac3e2760901", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic void test034()", "signatureAfterChange": "  \tpublic void test034()", "diff": ["-\t\t\t\t\t+ \"}\\n\" },", "-\t\t\t\"----------\\n\"", "-\t\t\t\t+ \"1. ERROR in X.java (at line 4)\\n\"", "-\t\t\t\t+ \"\t* @param *\\n\"", "-\t\t\t\t+ \"\t         ^\\n\"", "-\t\t\t\t+ \"Javadoc: Missing parameter name\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"2. ERROR in X.java (at line 5)\\n\"", "-\t\t\t\t+ \"\t* @param ?\\n\"", "-\t\t\t\t+ \"\t         ^\\n\"", "-\t\t\t\t+ \"Javadoc: Missing parameter name\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"3. ERROR in X.java (at line 7)\\n\"", "-\t\t\t\t+ \"\tpublic void p_foo(int x) {\\n\"", "-\t\t\t\t+ \"\t                      ^\\n\"", "-\t\t\t\t+ \"Javadoc: Missing tag for parameter x\\n\"", "-\t\t\t\t+ \"----------\\n\");", "+\t\t\t\t\t+ \"}\\n\"", "+\t\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t* @param *\\n\" + ", "+\t\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t* @param ?\\n\" + ", "+\t\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tpublic void p_foo(int x) {\\n\" + ", "+\t\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\t\"Javadoc: Missing tag for parameter x\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e3877c350e21b284b2d89d555223cae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void test019()", "signatureAfterChange": " \tpublic void test019()", "diff": ["-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e4e6adba443a392914984679358ef0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "e01f7b4e1e11c7fc4bb5261cb6201076d2a4ea6c", "commitAfterChange": "8feea831d932345f8ff5f16d3fbc00e8afac7496", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test008()", "signatureAfterChange": " \tpublic void test008()", "diff": ["-\t\t\t\t\"  // Method descriptor #15 ([Ljava/lang/String;)V\\n\" + ", "-\t\t\t\t\"  // Stack: 2, Locals: 3\\n\" + ", "-\t\t\t\t\"  public static void main(java.lang.String[] args);\\n\" + ", "-\t\t\t\t\"     0  iconst_0\\n\" + ", "-\t\t\t\t\"     1  istore_1 [foo]\\n\" + ", "-\t\t\t\t\"     2  ldc <String \\\"zero\\\"> [16]\\n\" + ", "-\t\t\t\t\"     4  astore_2 [bar]\\n\" + ", "-\t\t\t\t\"     5  getstatic java.lang.System.out : java.io.PrintStream [18]\\n\" + ", "-\t\t\t\t\"     8  iload_1 [foo]\\n\" + ", "-\t\t\t\t\"     9  ifeq 19\\n\" + ", "-\t\t\t\t\"    12  iload_1 [foo]\\n\" + ", "-\t\t\t\t\"    13  invokestatic java.lang.Integer.valueOf(int) : java.lang.Integer [24]\\n\" + ", "-\t\t\t\t\"    16  goto 20\\n\" + ", "-\t\t\t\t\"    19  aload_2 [bar]\\n\" + ", "-\t\t\t\t\"    20  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [30]\\n\" + ", "-\t\t\t\t\"    23  return\\n\" + ", "-\t\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\t\"        [pc: 0, line: 3]\\n\" + ", "-\t\t\t\t\"        [pc: 2, line: 4]\\n\" + ", "-\t\t\t\t\"        [pc: 5, line: 5]\\n\" + ", "-\t\t\t\t\"        [pc: 23, line: 6]\\n\" + ", "-\t\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 24] local: args index: 0 type: java.lang.String[]\\n\" + ", "-\t\t\t\t\"        [pc: 2, pc: 24] local: foo index: 1 type: int\\n\" + ", "-\t\t\t\t\"        [pc: 5, pc: 24] local: bar index: 2 type: java.lang.String\\n\" + ", "-\t\t\t\t\"      Stack map table: number of frames 2\\n\" + ", "-\t\t\t\t\"        [pc: 19, full, stack: {java.io.PrintStream}, locals: {java.lang.String[], int, java.lang.String}]\\n\" + ", "-\t\t\t\t\"        [pc: 20, full, stack: {java.io.PrintStream, java.lang.Object}, locals: {java.lang.String[], int, java.lang.String}]\\n\" + ", "-\t\t\t\t\"  \\n\" + ", "-\t\t\t\t\"  // Method descriptor #46 (Ljava/lang/Comparable;)V\\n\" + ", "-\t\t\t\t\"  // Signature: <T::Ljava/lang/Comparable<*>;>(TT;)V\\n\" + ", "-\t\t\t\t\"  // Stack: 2, Locals: 3\\n\" + ", "-\t\t\t\t\"  void foo(java.lang.Comparable foo);\\n\" + ", "-\t\t\t\t\"     0  aconst_null\\n\" + ", "-\t\t\t\t\"     1  astore_2 [bar]\\n\" + ", "-\t\t\t\t\"     2  getstatic java.lang.System.out : java.io.PrintStream [18]\\n\" + ", "-\t\t\t\t\"     5  aload_1 [foo]\\n\" + ", "-\t\t\t\t\"     6  ifnull 13\\n\" + ", "-\t\t\t\t\"     9  aload_1 [foo]\\n\" + ", "-\t\t\t\t\"    10  goto 14\\n\" + ", "-\t\t\t\t\"    13  aload_2 [bar]\\n\" + ", "-\t\t\t\t\"    14  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [30]\\n\" + ", "-\t\t\t\t\"    17  return\\n\" + ", "-\t\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\t\"        [pc: 0, line: 8]\\n\" + ", "-\t\t\t\t\"        [pc: 2, line: 9]\\n\" + ", "-\t\t\t\t\"        [pc: 17, line: 10]\\n\" + ", "-\t\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 18] local: this index: 0 type: X\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 18] local: foo index: 1 type: java.lang.Comparable\\n\" + ", "-\t\t\t\t\"        [pc: 2, pc: 18] local: bar index: 2 type: java.lang.Comparable\\n\" + ", "-\t\t\t\t\"      Local variable type table:\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 18] local: foo index: 1 type: T\\n\" + ", "-\t\t\t\t\"        [pc: 2, pc: 18] local: bar index: 2 type: T\\n\" + ", "-\t\t\t\t\"      Stack map table: number of frames 2\\n\" + ", "-\t\t\t\t\"        [pc: 13, full, stack: {java.io.PrintStream}, locals: {X, java.lang.Comparable, java.lang.Comparable}]\\n\" + ", "-\t\t\t\t\"        [pc: 14, full, stack: {java.io.PrintStream, java.lang.Comparable}, locals: {X, java.lang.Comparable, java.lang.Comparable}]\\n\";", "+\t\t\t\t\t\"  // Method descriptor #15 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\t\t\t\"  // Stack: 2, Locals: 3\\n\" + ", "+\t\t\t\t\t\"  public static void main(java.lang.String[] args);\\n\" + ", "+\t\t\t\t\t\"     0  iconst_0\\n\" + ", "+\t\t\t\t\t\"     1  istore_1 [foo]\\n\" + ", "+\t\t\t\t\t\"     2  ldc <String \\\"zero\\\"> [16]\\n\" + ", "+\t\t\t\t\t\"     4  astore_2 [bar]\\n\" + ", "+\t\t\t\t\t\"     5  getstatic java.lang.System.out : java.io.PrintStream [18]\\n\" + ", "+\t\t\t\t\t\"     8  iload_1 [foo]\\n\" + ", "+\t\t\t\t\t\"     9  ifeq 19\\n\" + ", "+\t\t\t\t\t\"    12  iload_1 [foo]\\n\" + ", "+\t\t\t\t\t\"    13  invokestatic java.lang.Integer.valueOf(int) : java.lang.Integer [24]\\n\" + ", "+\t\t\t\t\t\"    16  goto 20\\n\" + ", "+\t\t\t\t\t\"    19  aload_2 [bar]\\n\" + ", "+\t\t\t\t\t\"    20  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [30]\\n\" + ", "+\t\t\t\t\t\"    23  return\\n\" + ", "+\t\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\t\"        [pc: 0, line: 3]\\n\" + ", "+\t\t\t\t\t\"        [pc: 2, line: 4]\\n\" + ", "+\t\t\t\t\t\"        [pc: 5, line: 5]\\n\" + ", "+\t\t\t\t\t\"        [pc: 23, line: 6]\\n\" + ", "+\t\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\t\"        [pc: 0, pc: 24] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\t\t\"        [pc: 2, pc: 24] local: foo index: 1 type: int\\n\" + ", "+\t\t\t\t\t\"        [pc: 5, pc: 24] local: bar index: 2 type: java.lang.String\\n\" + ", "+\t\t\t\t\t\"      Stack map table: number of frames 2\\n\" + ", "+\t\t\t\t\t\"        [pc: 19, full, stack: {java.io.PrintStream}, locals: {java.lang.String[], int, java.lang.String}]\\n\" + ", "+\t\t\t\t\t\"        [pc: 20, full, stack: {java.io.PrintStream, java.lang.Comparable}, locals: {java.lang.String[], int, java.lang.String}]\\n\" + ", "+\t\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\t\"  // Method descriptor #48 (Ljava/lang/Comparable;)V\\n\" + ", "+\t\t\t\t\t\"  // Signature: <T::Ljava/lang/Comparable<*>;>(TT;)V\\n\" + ", "+\t\t\t\t\t\"  // Stack: 2, Locals: 3\\n\" + ", "+\t\t\t\t\t\"  void foo(java.lang.Comparable foo);\\n\" + ", "+\t\t\t\t\t\"     0  aconst_null\\n\" + ", "+\t\t\t\t\t\"     1  astore_2 [bar]\\n\" + ", "+\t\t\t\t\t\"     2  getstatic java.lang.System.out : java.io.PrintStream [18]\\n\" + ", "+\t\t\t\t\t\"     5  aload_1 [foo]\\n\" + ", "+\t\t\t\t\t\"     6  ifnull 13\\n\" + ", "+\t\t\t\t\t\"     9  aload_1 [foo]\\n\" + ", "+\t\t\t\t\t\"    10  goto 14\\n\" + ", "+\t\t\t\t\t\"    13  aload_2 [bar]\\n\" + ", "+\t\t\t\t\t\"    14  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [30]\\n\" + ", "+\t\t\t\t\t\"    17  return\\n\" + ", "+\t\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\t\"        [pc: 0, line: 8]\\n\" + ", "+\t\t\t\t\t\"        [pc: 2, line: 9]\\n\" + ", "+\t\t\t\t\t\"        [pc: 17, line: 10]\\n\" + ", "+\t\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\t\"        [pc: 0, pc: 18] local: this index: 0 type: X\\n\" + ", "+\t\t\t\t\t\"        [pc: 0, pc: 18] local: foo index: 1 type: java.lang.Comparable\\n\" + ", "+\t\t\t\t\t\"        [pc: 2, pc: 18] local: bar index: 2 type: java.lang.Comparable\\n\" + ", "+\t\t\t\t\t\"      Local variable type table:\\n\" + ", "+\t\t\t\t\t\"        [pc: 0, pc: 18] local: foo index: 1 type: T\\n\" + ", "+\t\t\t\t\t\"        [pc: 2, pc: 18] local: bar index: 2 type: T\\n\" + ", "+\t\t\t\t\t\"      Stack map table: number of frames 2\\n\" + ", "+\t\t\t\t\t\"        [pc: 13, full, stack: {java.io.PrintStream}, locals: {X, java.lang.Comparable, java.lang.Comparable}]\\n\" + ", "+\t\t\t\t\t\"        [pc: 14, full, stack: {java.io.PrintStream, java.lang.Comparable}, locals: {X, java.lang.Comparable, java.lang.Comparable}]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f22a41a0df18cb4f2f1e9e938a6d326", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic void testBug96237_Private02()", "signatureAfterChange": " \tpublic void testBug96237_Private02()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f5b2f924aeb9ed817d2312923c1c3d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testBug80264_MethodsIgnoreBothTypes() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80264_MethodsIgnoreBothTypes() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f757ef2cf5e01c36200f7211c056f6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 241, "signatureBeforeChange": " public void testBug313524_wksp1_03() throws JavaModelException", "signatureAfterChange": " public void testBug313524_wksp1_03() throws JavaModelException", "diff": ["-\t\t\"\t\tprintTargets(project, subNames, null, InternalAntMessages\\n\" + ", "-\t\t\"\t\t\t\t.getString(\\\"InternalAntRunner.Subtargets__5\\\"), 0); //$NON-NLS-1$\\n\" + ", "+\t\t\"\t\tprintTargets(project, subNames, null, InternalAntMessages.getString(\\n\" + ", "+\t\t\"\t\t\t\t\\\"InternalAntRunner.Subtargets__5\\\"), 0); //$NON-NLS-1$\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f794618a919e22c7ac4dd228d0f3481", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void test033()", "signatureAfterChange": " \tpublic void test033()", "diff": ["-\t\t\t\"!+Ljava.util.ArrayList;\",", "-\t\t\t\"!+Ljava/util/ArrayList;\"", "+\t\t\t\"+Ljava.util.ArrayList;\",", "+\t\t\t\"Ljava/util/List;!+Ljava/util/ArrayList;123;\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f85427cea1954e2577a69ad4a9806db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "dbfe97bed3f7feb8408fadbcb58741aa04540553", "commitAfterChange": "3d86d8fdd283e92da8b2fd4ec59e7d2f2b4add9f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void test033()", "signatureAfterChange": " public void test033()", "diff": ["-\t\t\"This class must implement the inherited abstract method X.foo(), but cannot override it since it is not visible from Y. Either make the type abstract or make the inherited method visible.\\n\" + ", "+\t\t\"This class must implement the inherited abstract method X.foo(), but cannot override it since it is not visible from Y. Either make the type abstract or make the inherited method visible\\n\" + ", "-\t\t\"The method Y.foo() does not override the inherited method from X since it is private to a different package.\\n\" + ", "+\t\t\"The method Y.foo() does not override the inherited method from X since it is private to a different package\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fbabf0a342da4e8bd33de25abc717ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test0015() throws JavaModelException", "signatureAfterChange": " public void test0015() throws JavaModelException", "diff": ["-\t\t\"element:Z0015.Y0015    completion:Y0015    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE) + \"\\n\" +", "-\t\t\"element:Z0015.Y0015I    completion:Y0015I    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS),", "+\t\t\"element:Z0015<java.lang.Object>.Y0015    completion:Y0015    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE) + \"\\n\" +", "+\t\t\"element:Z0015<java.lang.Object>.Y0015I    completion:Y0015I    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fcd55d5915c346a1ba832311ec301fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void test0053()", "signatureAfterChange": " public void test0053()", "diff": ["-\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"      Object[] o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      Object[] o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8080daa1698ad7249d9fcdd3c8266c5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": " public void testBug241687() throws JavaModelException", "signatureAfterChange": " public void testBug241687() throws JavaModelException", "diff": ["-\t\t\"\t test test test test test test \\n\" + ", "+\t\t\"\ttest test test test test test \\n\" + ", "-\t\t\"\t *\\n\" + ", "+\t\t\"\t*\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80b6a75d157a9c53a8f915c3e9b8290c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "2a90d883e05154207090ce25c3cd6c71b66259ab", "commitAfterChange": "624d1b561ac3289a55fdc4319658cfc9a95be40b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void test029()", "signatureAfterChange": " \tpublic void test029()", "diff": ["-\t\t\t\"-<E:Ljava/lang/Object;>Ljava.util.List;\",", "-\t\t\t\"Lp1/X;-Ljava/util/List<TE;>;\"", "+\t\t\t\"-Ljava.util.List<TT;>;\",", "+\t\t\t\"Lp1/X;-Ljava/util/List<Lp1/X;:TT;>;\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8100eeb32933c835040a54982827c937", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void test0049()", "signatureAfterChange": " public void test0049()", "diff": ["-\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"  Object[] o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"  Object[] o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "811a9c057859df26e1ab573323c19f7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 288, "methodNumberAfterChange": 288, "signatureBeforeChange": " public void testBug330313_wksp1_13_njl()", "signatureAfterChange": " public void testBug330313_wksp1_13_njl()", "diff": ["-\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0\\n\" + ", "-\t\t\"\t\t\t\t&& this.getNamesOfDeletedChildren().length == 0);\\n\" + ", "+\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0 && this\\n\" + ", "+\t\t\"\t\t\t\t\t.getNamesOfDeletedChildren().length == 0);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8121141e6410824f5d30221c629d4040", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testMoveSourceFolder2() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder2() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81347ac00f967d2ecfa76f864719d131", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "65a63579ebc9b37573db7995b64988407cf25ede", "commitAfterChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void test016() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test016() throws JavaModelException, CoreException", "diff": ["-\t\t\t\t\" * Caract\ufffdres exotiques:\\n\"+", "-\t\t\t\t\" * \ufffd|#|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd\ufffd\\n\"+", "+\t\t\t\t\" * Caract?res exotiques:\\n\"+", "+\t\t\t\t\" * ?|#|?|?|?|?|?|?|?|?|??\\n\"+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "814be266e5e3441a34287bc323f3fa24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void test002()", "signatureAfterChange": "  \tpublic void test002()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<U> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "814d60cea52b352ec0178c01a42eba30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void testDestroyWorkingCopy() throws CoreException", "signatureAfterChange": " public void testDestroyWorkingCopy() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8183f56637efb1afcc2de29730af2849", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "4f48830884ee6a89ef511f38d2067ccf03cfa452", "commitAfterChange": "1c3577f5abe07ca9a1f5e8ed95ec7cecb20f5290", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testBug47215()", "signatureAfterChange": " \tpublic void testBug47215()", "diff": ["-\t\t\t\t\"Javadoc: Missing #: \\\"X(double\\\"\\n\" + ", "+\t\t\t\t\"Javadoc: Missing #: \\\"X(double)\\\"\\n\" + ", "-\t\t\t\t\"Javadoc: Missing #: \\\"foo(\\\"\\n\" + ", "+\t\t\t\t\"Javadoc: Missing #: \\\"foo()\\\"\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "819585fcc5a37b6a2723a4e425d60590", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": " \tpublic void test054()", "signatureAfterChange": " \tpublic void test054()", "diff": ["-\t\t\t\"Method a(Object) has the same erasure a(Object) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method a(Object) is the same as another method in type X\\n\" +", "-\t\t\t\"Method a(T) has the same erasure a(Object) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method a(T) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81b704fc809ba25f69d07b576b516d69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": " public void test0162()", "signatureAfterChange": " public void test0162()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pro>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pro>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81e6f829d9f460ecd3e62e1b9a65251b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "e0c7ca1486f055788a44dc24293c246757983c36", "commitAfterChange": "fffe8da84c964b60e288768d8e57c80a69c56c45", "methodNumberBeforeChange": 332, "methodNumberAfterChange": 332, "signatureBeforeChange": " public void test0330() throws JavaModelException", "signatureAfterChange": " public void test0330() throws JavaModelException", "diff": ["-\t\t\t\"foo1[METHOD_IMPORT]{test0330.q.Y.foo1;, Ltest0330.q.Y;, ()Ltest0330.p.X;, foo1, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"foo2[METHOD_IMPORT]{test0330.q.Y.foo2;, Ltest0330.q.Y;, ()V, foo2, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"foo1[METHOD_IMPORT]{foo1;, Ltest0330.q.Y;, ()Ltest0330.p.X;, foo1, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"foo2[METHOD_IMPORT]{foo2;, Ltest0330.q.Y;, ()V, foo2, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "821d75f9f88a9aabc11b3520cd8af3cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "96c7afd29f6893c16cf00a3ac29701c1a81f919d", "commitAfterChange": "dd45817f66a0a68c9747e1c73f77cc12766ad25c", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void testBug232768_Javadoc02() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Javadoc02() throws JavaModelException", "diff": ["-\t\t\"\\n\" +", "-\t\t\"\t/**\\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /**\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82812af377cb0e0a598ea08c432401bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/UtilTest.java", "commitBeforeChange": "aa3e581727ecbd82f62d5775da80f0c298f9ec87", "commitAfterChange": "d7e050c27656f3c655cbceb92a53dfdd3a265d24", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  public void test38()", "signatureAfterChange": "  public void test38()", "diff": ["-\t\t!CharOperation.pathMatch(\"*.java\".toCharArray(), \"hello/x/y/z/World/X.java\".toCharArray(), true, '/'));", "+\t\t!CharOperation.pathMatch(\"/*.java\".toCharArray(), \"/hello/x/y/z/World/X.java\".toCharArray(), true, '/'));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "828e694e0977a6d2022c6b1189a0cccf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "48774e458dcfc41c34b203c6488c7b9a8716e5cc", "commitAfterChange": "6224a5dcda094820e09b86e019ae927259ff3273", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void testBug232768_Javadoc02() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Javadoc02() throws JavaModelException", "diff": ["-\t\t\"\\n\" +", "-\t\t\"\t/**\\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /**\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "829a3c69553218edbf42914b55736abe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic void test017()", "signatureAfterChange": "  \tpublic void test017()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tclass Z extends Y { void test(X<Number> a) {} }\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tclass Z extends Y { void test(X<Number> a) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82ea92f41fb3024f33632823b1370de8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void testMultiLineCommentCodeSnippet5()", "signatureAfterChange": "  \tpublic void testMultiLineCommentCodeSnippet5()", "diff": ["-\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(), box\\n\" +", "-\t\t\t\t\" * \t\t\t\t.getGames().toArray());\\n\" +", "+\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(),\\n\" +", "+\t\t\t\t\" * \t\t\t\tbox.getGames().toArray());\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "830d694cf7fe8a12e7f293c0ea6c30d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void testBug400905_0013d() throws CoreException", "signatureAfterChange": " public void testBug400905_0013d() throws CoreException", "diff": ["-\t\t\t\t\"src/X.java int int void X.zoo():<lambda>#1.lambda$1(X):<lambda>#2.lambda$2(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1(X) [X] EXACT_MATCH\");", "+\t\t\t\t\"src/X.java int int void X.zoo():Lambda(I).doit(X):Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "830f90619dcb0c39a2af2dd3f06a6c87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "0d5d4b61217e2b3559edf7001ae24c184bef94b8", "commitAfterChange": "2ead4bdcbfe85e4d5b336d70f2ec655c30027212", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testMoveSourceFolder4() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder4() throws CoreException", "diff": ["-\t\t\t\"\tsrc1[*]: {REORDERED IN CLASSPATH}\\n\" + ", "-\t\t\t\"\tsrc2[*]: {REORDERED IN CLASSPATH}\\n\" + ", "+\t\t\t\"\tsrc1[*]: {REORDERED}\\n\" + ", "+\t\t\t\"\tsrc2[*]: {REORDERED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "833223c5acb08c59ecf6c24d23d04191", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "commitAfterChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void test101()", "signatureAfterChange": " \tpublic void test101()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\t@Target(Element)\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\t@Target(Element)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83759685b8fbefe6fc42742ebf29550e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": " \tpublic void test050j()", "signatureAfterChange": " \tpublic void test050j()", "diff": ["-\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83b32b37faacf1a0567be66e6050a9a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "572021b99f292f39a76e81c2ea834ac6a839b00b", "commitAfterChange": "727d8ca46d64642ad4f629f81ba37e76e7ae8c85", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void testBug232768_Block02() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Block02() throws JavaModelException", "diff": ["-\t\t\"\t\\n\" +", "-\t\t\"        /*\\n\" +", "+\t\t\"\\n\" +", "+\t\t\"\t/*\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "841dc7cfa458d13e4c8b9ff5296b253b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void testBug286668_60w() throws JavaModelException", "signatureAfterChange": " public void testBug286668_60w() throws JavaModelException", "diff": ["-\t\t\"\t\t.append(\\\"pqr\\\").append(\\\"stu\\\").append(\\\"vwx\\\").append(\\n\" + ", "-\t\t\"\t\t\t\t\\\"yz\\\");\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"pqr\\\").append(\\\"stu\\\").append(\\\"vwx\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"yz\\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84259220f635ad75a6091ee28ac5c8a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "f08e2fcfb74b9a513988b6c92b3d0f1c94eb6ecf", "commitAfterChange": "c35e0ba6a6bce7272fb4c8d0b339e50b59e7d2a3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void testDeleteMultipleMembersFromVariousCUs() throws CoreException", "signatureAfterChange": " public void testDeleteMultipleMembersFromVariousCUs() throws CoreException", "diff": ["-\t\t\t\"\t\t\t\t\tmain[-]: {}\\n\" + ", "+\t\t\t\"\t\t\t\t\tmain(String[])[-]: {}\\n\" + ", "-\t\t\t\"\t\t\t\t\tmain[-]: {}\"", "+\t\t\t\"\t\t\t\t\tmain(String[])[-]: {}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8438bc0f23c69198b4eb52fbd336c4f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "commitAfterChange": "0c7dcd00d6a732fdf9bc489cc88efc5a93db4f6e", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " public void test135()", "signatureAfterChange": " public void test135()", "diff": ["-\t\t\"\t                ^\\n\" +", "+\t\t\"\t                ^^^^^^^^\\n\" +", "-\t\t\"\t                ^^^^\\n\" +", "+\t\t\"\t                ^^^^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "843c6b7fb5e1d211d1ce1d5eb2b8c12b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "d8f389cbde24bb1c104b01e8be23d8716da06c45", "commitAfterChange": "314f66e76f751455a7dd539f576706f5f92aab24", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tpublic void test026()", "signatureAfterChange": " \t \tpublic void test026()", "diff": ["-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                                              ^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8479fdce57ec79ae856447c019babe0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionWithMissingTypesTests_1_5.java", "commitBeforeChange": "649631b834e755f12bf40b9c916ce9dfc765a8d0", "commitAfterChange": "19a679a95bc1c8afc10cb50ce5a617f6914888ae", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test0004() throws JavaModelException", "signatureAfterChange": " public void test0004() throws JavaModelException", "diff": ["-\t\t\t\"   MissingType<T>[TYPE_REF]{missing.MissingType, missing, Lmissing.MissingType<TT;>;, null, null, [\"+start2+\", \"+end2+\"], \" + (relevance1) + \"}\\n\" +", "+\t\t\t\"   MissingType[TYPE_REF]{missing.MissingType, missing, Lmissing.MissingType;, null, null, [\"+start2+\", \"+end2+\"], \" + (relevance1) + \"}\\n\" +", "-\t\t\t\"   MissingType<T>[TYPE_REF]{missing.MissingType, missing, Lmissing.MissingType<TT;>;, null, null, [\"+start2+\", \"+end2+\"], \" + (relevance1) + \"}\",", "+\t\t\t\"   MissingType[TYPE_REF]{missing.MissingType, missing, Lmissing.MissingType;, null, null, [\"+start2+\", \"+end2+\"], \" + (relevance1) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84881aef491bd76c203815821f020ea1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "2fdd800912ee4f65c51a2ec384533d1146c71af7", "commitAfterChange": "844f82aaef831e55c4827a65ccd98caed0cd08f3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test006()", "signatureAfterChange": " public void test006()", "diff": ["-\t\t\"The private field A.success is never read locally\\n\" + ", "+\t\t\"The field A.success is never read locally\\n\" + ", "-\t\t\"The field success is not visible\\n\" + ", "-\t\t\"----------\\n\"", "-", "-\t);", "+\t\t\"The field A.success is not visible\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8496bab484d64f7fe566773cfea9f7aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "af9bbbd46257142e006853d95525656db05c0be8", "commitAfterChange": "75441f37a4b77efa641f7e3f5866e117cb328da6", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void testRenameJarFile2() throws CoreException", "signatureAfterChange": " public void testRenameJarFile2() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84a67db8f4a74154b3825f8750519e8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test09()", "signatureAfterChange": "  public void test09()", "diff": ["-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + ", "-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84cf0c7e48c5ad9cd694ede0d4727678", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " public void test056y()", "signatureAfterChange": " public void test056y()", "diff": ["-\t\t\"Potential resource leak: \\'reader31\\' may not be closed\\n\" + ", "+\t\t\"Potential resource leak: \\\"reader31\\\" may not be closed\\n\" + ", "-\t\t\"Potential resource leak: \\'reader23\\' may not be closed\\n\" + ", "+\t\t\"Potential resource leak: \\\"reader23\\\" may not be closed\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84d699031ba60f50731b141583bcbe53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": " public void test191_warn_options()", "signatureAfterChange": " public void test191_warn_options()", "diff": ["-\t\t\"The parameter i is never read\\n\" +", "+\t\t\"The value of the parameter i is not used\\n\" +", "-\t\t\"The local variable j is never read\\n\" +", "+\t\t\"The value of the local variable j is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85147c34e55f0d3d2c9e911b895e2823", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug101283d()", "signatureAfterChange": " \tpublic void testBug101283d()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85277c6589b2faebeedffa2734b979c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "bd442b30672a7d31071cdbf23b509a80d715023a", "commitAfterChange": "260ff63e87f242ab982cdcea6ba42f866e16f101", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 230, "signatureBeforeChange": " public void testBug260381_wksp2_08() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_08() throws JavaModelException", "diff": ["-\t\t\"\t * {@code x}, the generated predicate returns {@code predicate(function(x))}\\n\" +", "-\t\t\"\t * .\\n\" +", "+\t\t\"\t * {@code x}, the generated predicate returns\\n\" +", "+\t\t\"\t * {@code predicate(function(x))}.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "855025567907ad6b2e5f87e26a12d5d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void testBug96237_Public08()", "signatureAfterChange": " \tpublic void testBug96237_Public08()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "855dc7257de52bf1ff57d5d90aacde98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "64774f020d7005b54827ff53032895aaf4555d81", "commitAfterChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  public void test027()", "signatureAfterChange": "  public void test027()", "diff": ["-        \"----------\\n\" +", "-        \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 5)\\n\" +", "-        \"\tWarn warn;\\n\" +", "-        \"\t^^^^\\n\" +", "-\t\t\"Discouraged access: The type Warn is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---/p1\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 6)\\n\" +", "-\t\t\"\tKO ko;\\n\" +", "-\t\t\"\t^^\\n\" +", "-\t\t\"Access restriction: The type KO is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" +", "-        \"----------\\n\" +", "-        \"3. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 7)\\n\" +", "-        \"\tZork z;\\n\" +", "-        \"\t^^^^\\n\" +", "-        \"Zork cannot be resolved to a type\\n\" +", "-        \"----------\\n\" +", "+        \"----------\\n\" + ", "+        \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 5)\\n\" + ", "+        \"\tWarn warn;\\n\" + ", "+        \"\t^^^^\\n\" + ", "+        \"Discouraged access: The type \\'Warn\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---/p1\\')\\n\" + ", "+        \"----------\\n\" + ", "+        \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 6)\\n\" + ", "+        \"\tKO ko;\\n\" + ", "+        \"\t^^\\n\" + ", "+        \"Access restriction: The type \\'KO\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---\\')\\n\" + ", "+        \"----------\\n\" + ", "+        \"3. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 7)\\n\" + ", "+        \"\tZork z;\\n\" + ", "+        \"\t^^^^\\n\" + ", "+        \"Zork cannot be resolved to a type\\n\" + ", "+        \"----------\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8587b6bef5bb67395042e7581c82f54f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void testTypeRefAll_MethodParameter() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_MethodParameter() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\tTypes method(\ufffd|Types|\ufffd param) throws Types {@472] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java Bug all.types.ref.TestTypes.bar(Bug) [\tBug bar(\ufffd|Bug|\ufffd bug) {@585] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\tTypes method(!|Types|! param) throws Types {@472] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java Bug all.types.ref.TestTypes.bar(Bug) [\tBug bar(!|Bug|! bug) {@585] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85968aee7b93d1f72e3bee447ea8ad8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void testBug027079c2() throws JavaModelException", "signatureAfterChange": " public void testBug027079c2() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t/** formatted comment */\\n\" + ", "-\t\t\"\t\t\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + ", "+\t\t\"\t\t/** formatted comment */\\n\" + ", "+\t\t\"\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85bd95e002bfb17dbff5831ecbde1610", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugs18Tests.java", "commitBeforeChange": "bb7b9521196186c5be108c1f350a453c12233137", "commitAfterChange": "871cac4ba4cecfc6322ce0af5777177652a514a9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void testBug433177() throws Exception", "signatureAfterChange": " public void testBug433177() throws Exception", "diff": ["-\t\t\t\"\t\t} );\\n\" +", "+\t\t\t\"\t\t});\\n\" +", "-\t\t\t\"\t\t} );\\n\" +", "+\t\t\t\"\t\t});\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85d0ae0867ae2b8f52a53e17b2f26e65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "066f1fe71d5d139e5a681c9aeece89fa867b71b7", "commitAfterChange": "39951c3ce9f26380d44e65dd4f0a9c708c89c0d1", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " public void testEncodeDecodeEntry02()", "signatureAfterChange": " public void testEncodeDecodeEntry02()", "diff": ["-\t\t\"<classpathentry including=\\\"**/Y.java\\\" excluding=\\\"**/X.java\\\" output=\\\"bin\\\" kind=\\\"src\\\" path=\\\"src\\\">\\n\" + ", "+\t\t\"<classpathentry excluding=\\\"**/X.java\\\" including=\\\"**/Y.java\\\" kind=\\\"src\\\" output=\\\"bin\\\" path=\\\"src\\\">\\n\" + ", "-\t\t\"\t\t<attribute value=\\\"some value\\\" name=\\\"attrName\\\"/>\\n\" + ", "+\t\t\"\t\t<attribute name=\\\"attrName\\\" value=\\\"some value\\\"/>\\n\" + ", "-\t\t\"</classpathentry>\\n\", ", "+\t\t\"</classpathentry>\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863ae233dc27e322f3f3ae1c004fc868", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " \tpublic void test0114() throws JavaModelException", "signatureAfterChange": " \tpublic void test0114() throws JavaModelException", "diff": ["-\t\tString expectedSource = \"try {\\r\\n\" +//$NON-NLS-1$", "-\t\t\t \"\t\t} catch(Exception e) {\\r\\n\" +//$NON-NLS-1$", "+\t\tString expectedSource = \"try {\\n\" +//$NON-NLS-1$", "+\t\t\t \"\t\t} catch(Exception e) {\\n\" +//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86430f2c3de573e1a4e0794be912a5da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tpublic void test060()", "signatureAfterChange": "  \tpublic void test060()", "diff": ["-\t\t\t\"     3  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "+\t\t\t\"     3  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void  [32]\\n\" + ", "+\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8656a0edd7fb480229b985f6921139aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testLocalType4() throws JavaModelException", "signatureAfterChange": " public void testLocalType4() throws JavaModelException", "diff": ["-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8693e4ce0a6e462b48b22d3fc142c131", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "04b1f777f72aaed365425972c86158987dc99f47", "commitAfterChange": "627e74400f5d869da7cccfccaf9f22c5e00c372a", "methodNumberBeforeChange": 710, "methodNumberAfterChange": 715, "signatureBeforeChange": " public void testCompletionVariableName2() throws JavaModelException", "signatureAfterChange": " public void testCompletionVariableName2() throws JavaModelException", "diff": ["-\t\t\"element:bar_MyClass    completion:bar_MyClass    relevance:\"+(R_DEFAULT  + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"\\n\" +", "+\t\t\"element:barMyClass    completion:barMyClass    relevance:\"+(R_DEFAULT  + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:test_Bar_MyClass    completion:test_Bar_MyClass    relevance:\"+(R_DEFAULT  + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),", "+\t\t\"element:testBarMyClass    completion:testBarMyClass    relevance:\"+(R_DEFAULT  + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "869a9fc3baadb87a864897fa0ed0d74e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void test015()", "signatureAfterChange": "  \tpublic void test015()", "diff": ["-\t\t\t\"Name clash : The method foo(A<String>) of type Y has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type Y has the same erasure as foo(A) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(A<String>[]) of type Y has the same erasure as foo(A[]) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>[]) of type Y has the same erasure as foo(A[]) of type I but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86ac9ed8141ba36480de337035f353cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void testAnonymousType2() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType2() throws JavaModelException", "diff": ["-\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86e7185763f9a3bf846bb58a1f43dd15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void test024()", "signatureAfterChange": " \tpublic void test024()", "diff": ["-\t\t\t\"1. ERROR in p\\\\B.java (at line 5)\\r\\n\" +", "-\t\t\t\"\tpublic class B { public static void main(String[] args) { m(); } }\\r\\n\" +", "+\t\t\t\"1. ERROR in p\\\\B.java (at line 5)\\n\" +", "+\t\t\t\"\tpublic class B { public static void main(String[] args) { m(); } }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f0368704bf049807b32a1b213ad2f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "53df7d602035de3d31fcc1ea92403ee3f66bc84a", "commitAfterChange": "b501a050436f0ed4b21c2887b8c36095ae4a6672", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "  public void test086()", "signatureAfterChange": "  public void test086()", "diff": ["-\t\t\"\t                   ^^^^^^^^\\n\" +", "-\t\t\"y.length cannot be resolved or is not a field\\n\" +", "+\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\"length cannot be resolved or is not a field\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f8a4f6196326b51b82b7a02c3e9611", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastingContextTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test002()", "signatureAfterChange": " public void test002()", "diff": ["-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +", "-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "873afb46939d944c3603d201341b6419", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 267, "signatureBeforeChange": "\t\t \tpublic void test265()", "signatureAfterChange": "\t\t \tpublic void test265()", "diff": ["-\t\t\t\"Type safety: The cast from X<E> to XC<U> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from X<E> to XC<U> is actually checking against the erased type XC\\n\" + ", "-\t\t\t\"Type safety: The cast from X<E> to XC<? extends X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from X<E> to XC<? extends X> is actually checking against the erased type XC\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "874d4f537cbe3540d9ba79d402eab7ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 228, "methodNumberAfterChange": 229, "signatureBeforeChange": " public void testBug260381_wksp2_07() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_07() throws JavaModelException", "diff": ["-\t\t\"\t * e2)} must not throw a {@code ClassCastException} for any elements\\n\" + ", "-\t\t\"\t * {@code e1} and {@code e2} in the multiset. If the user attempts to add an\\n\" + ", "+\t\t\"\t * e2)} must not throw a {@code ClassCastException} for any elements {@code\\n\" + ", "+\t\t\"\t * e1} and {@code e2} in the multiset. If the user attempts to add an\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8766d9b9732f37e29638abe7d01f1927", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tpublic void test032a()", "signatureAfterChange": " \tpublic void test032a()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tpublic class X<T extends I&J> {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic class X<T extends I&J> {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "876a5194015fa657e0861de37419ffed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void test0083_shortcut_boolean_expression()", "signatureAfterChange": " public void test0083_shortcut_boolean_expression()", "diff": ["-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable o can only be null at this location\\n\" + ", "-\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o cannot be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87831ed6af0d7b3017a078ccba5c92f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "9c6dae4d5407c167984e6ec84bc3e6250ddb6db9", "commitAfterChange": "bbf0b49c8f498bed7713f00ad060db01c62aa51c", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void test105()", "signatureAfterChange": " public void test105()", "diff": ["-\t\t\"  static int B;\\n\" +", "+\t\t\"  static int B = foo(new int[]{0,0,} , new int[]{0,0,});\\n\" +", "-\t\t\"  static int B;\\n\" +", "+\t\t\"  static int B = foo(new int[]{0,0,} , new int[]{0,0,});\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87cd2421b0f76be38b3b269d3b18100e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d35306cb5dcf7e4ac666fd0505f3086f50241fb2", "commitAfterChange": "3284f738bbf7a2dbd90434dea313c8629bed5722", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": " public void test401939ca()", "signatureAfterChange": " public void test401939ca()", "diff": ["-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87dbcf921816357839dd33a3aaf65c21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [generic(new Object(), new Exception(), new RuntimeException())] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [<Object, Exception, RuntimeException>generic(new Object(), new Exception(), new RuntimeException())] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [generic(new Object(), new Exception(), new RuntimeException())] ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [generic(new Object(), new Exception(), new RuntimeException())] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8824f70d9b063c88e0918bbd44a1719c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "53df7d602035de3d31fcc1ea92403ee3f66bc84a", "commitAfterChange": "b501a050436f0ed4b21c2887b8c36095ae4a6672", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\"\t                                ^^^^^^^^^\\n\" +", "-\t\t\"bar.other cannot be resolved or is not a field\\n\" +", "+\t\t\"\t                                    ^^^^^\\n\" +", "+\t\t\"other cannot be resolved or is not a field\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8869d90988b76dc3b46b6bd5789a5a7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "677c4b39a30069207f57550aec27ea9d04477c82", "commitAfterChange": "a8939af811304c63be0e7f585bcaea4e93cb581f", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \t\t public void test027()", "signatureAfterChange": " \t\t public void test027()", "diff": ["-        \"Discouraged access: Warn\\n\" + ", "-        \"----------\\n\" + ", "-        \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java\\n\" + ", "-        \" (at line 6)\\n\" + ", "-        \"\tKO ko;\\n\" + ", "-        \"\t^^\\n\" + ", "-        \"Access restriction: KO\\n\" + ", "+\t\t\"Discouraged access: The type Warn is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---/p1\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java\\n\" + ", "+\t\t\" (at line 6)\\n\" + ", "+\t\t\"\tKO ko;\\n\" + ", "+\t\t\"\t^^\\n\" + ", "+\t\t\"Access restriction: The type KO is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "889e621dbc54feec0fe81f331ca888dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testAnonymousType4() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType4() throws JavaModelException", "diff": ["-\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "889f3f40dcc4f0677524c73db52e42a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void testJavadocMethodReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodReferenceWithJavadoc() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b3d610beaeb7131fee37bf69925be2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EQUIVALENT_ERASURE_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c3b78b63141c29a22226ffb70f0b71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void testDeleteType1() throws CoreException", "signatureAfterChange": " public void testDeleteType1() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ff1e6d94a6cdafb3cf52c208860878", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " public void testBug400905_0013d() throws CoreException", "signatureAfterChange": " public void testBug400905_0013d() throws CoreException", "diff": ["-\t\t\t\t\"src/X.java int int void X.zoo():Lambda(I).doit(X):Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\");", "+\t\t\t\t\"src/X.java int int void X.zoo():<lambda #1>.doit(X):<lambda #1>.doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda #1>.doit(X) [X] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8938c9ac9c6f0bcdf574ad75f11aa37a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "48774e458dcfc41c34b203c6488c7b9a8716e5cc", "commitAfterChange": "6224a5dcda094820e09b86e019ae927259ff3273", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void testBug232768_Block02() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Block02() throws JavaModelException", "diff": ["-\t\t\"\\n\" +", "-\t\t\"\t/*\\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /*\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8953ff1e2a4f53d2368c5c55da44a882", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 1212, "methodNumberAfterChange": 1212, "signatureBeforeChange": " public void test1184()", "signatureAfterChange": " public void test1184()", "diff": ["-\t\t\"\t             ^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from Object to Runnable\\n\" + ", "+\t\t\"\t               ^^^\\n\" + ", "+\t\t\"The method get() from the type X refers to the missing type Zork\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89c6f9144633699045d8d90dab977c3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test043a()", "signatureAfterChange": " \tpublic void test043a()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89dfcad2e3d80a82d055ed492748c224", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "ff314154aaf435ac1ce17a549fe4ce4a6e5a4df6", "commitAfterChange": "020b99405c908e1423d26068fe97e236126a4df0", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void testProjectClose() throws JavaModelException, CoreException", "signatureAfterChange": " public void testProjectClose() throws JavaModelException, CoreException", "diff": ["-\t\t\t\"JavaProjectTests[-]: {}\\n\" + ", "+\t\t\t\"JavaProjectTests[*]: {CLOSED}\\n\" + ", "-\t\t\t\t\"JavaProjectTests[+]: {}\\n\" + ", "+\t\t\t\t\"JavaProjectTests[*]: {OPENED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a52ca41eed87f596a53192ede9bad87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 314, "methodNumberAfterChange": 314, "signatureBeforeChange": " public void test164()", "signatureAfterChange": " public void test164()", "diff": ["-\t\t\"1. ERROR in Concrete.java (at line 12)\\r\\n\" +", "-\t\t\"\tclass Concrete extends HalfConcrete implements I<Object, String> {}\\r\\n\" +", "+\t\t\"1. ERROR in Concrete.java (at line 12)\\n\" +", "+\t\t\"\tclass Concrete extends HalfConcrete implements I<Object, String> {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a739871fe6a5f6e332c3aae7c709e0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void testBug80264_ClassesIgnoreDeclaringType() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80264_ClassesIgnoreDeclaringType() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a7c4d5e5dedcea87b04199d9af1334d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void test04()", "signatureAfterChange": "  public void test04()", "diff": ["-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + ", "-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a7cfa86a0e414cf20db587828b7c7c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "5022709d9b0934611de6ddf11e79067d32b49675", "commitAfterChange": "994f6c0e00bbca016e96f8cedb045f0d49961de5", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test054() throws Exception", "signatureAfterChange": " public void test054() throws Exception", "diff": ["-\t\t\t\"Type safety: The expression of type Set[] needs unchecked conversion to conform to Set<String>[]\\n\" + ", "+\t\t\t\"Type safety: Elements of type Set need unchecked conversion to conform to Set<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type Set[] needs unchecked conversion to conform to Set<String>[]\\n\" + ", "+\t\t\t\"Type safety: Elements of type Set need unchecked conversion to conform to Set<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8af3d232df17af7d04497fb8c536e44f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \t \tpublic void test055()", "signatureAfterChange": " \t \tpublic void test055()", "diff": ["-\t\t\t\"     9  invokestatic X.boom()Z [27]\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom() : boolean  [27]\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 14] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 3, pc: 14] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8afb0954b0a83801c5c60e1d7eef3cc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "9bef3f15c43b07a14e76957980f62386b2bcee10", "commitAfterChange": "73f504e7d77d95d8fc2d6621b5727e1e3ab07530", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void test067()", "signatureAfterChange": " public void test067()", "diff": ["-\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^\\n\" + ", "-\t\t\"\t^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b18e8995fcd3f0dea1339d8ded58eb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void testBug83285a() throws CoreException", "signatureAfterChange": " \tpublic void testBug83285a() throws CoreException", "diff": ["-\t\t\t\"src/b83285/A.java b83285.B$C(String) [B] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b83285/A.java b83285.B$C(String) [foo] EXACT_MATCH INSIDE_JAVADOC\"", "+\t\t\t\"src/b83285/A.java b83285.B$C(String) [B(Exception)] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/b83285/A.java b83285.B$C(String) [foo()] EXACT_MATCH INSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b355414e1d030ced8bcf13551a3224c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void testCopySourceFolder6() throws CoreException", "signatureAfterChange": " public void testCopySourceFolder6() throws CoreException", "diff": ["-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c09fd9b1b36f294580d4a16e58ccf9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tpublic void test13() throws JavaModelException", "signatureAfterChange": "  \tpublic void test13() throws JavaModelException", "diff": ["-\t\t\t\"xxx [in foo(int, String) [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"str [in foo(int, String) [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\",", "+\t\t\t\"xxx [in foo(int, String) [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"str [in foo(int, String) [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c50b7268ede341e0759153da68e2805", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void testBug79803string() throws CoreException", "signatureAfterChange": " \tpublic void testBug79803string() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c64f797e28c7b20999af8e7bf2427fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": " public void test0174()", "signatureAfterChange": " public void test0174()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pri>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pri>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c727e56af2f666aefc38929851448b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "c4c5d1f7cea2c5dfe27a67808f94917c3f90af5b", "commitAfterChange": "fb92cfb822669ddb00db1cf41e3bdb1057d4d00d", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 145, "signatureBeforeChange": " public void test0141() throws JavaModelException", "signatureAfterChange": " public void test0141() throws JavaModelException", "diff": ["-\t\t\t\t\"expectedTypesSignatures=null\\n\" +", "-\t\t\t\t\"expectedTypesKeys=null\",", "+\t\t\t\t\"expectedTypesSignatures={Ltest0141.Colors;}\\n\" +", "+\t\t\t\t\"expectedTypesKeys={Ltest0141/Colors;}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cfe0b347d5c26b901680debf468febb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " \tpublic void test0138() throws JavaModelException", "signatureAfterChange": " \tpublic void test0138() throws JavaModelException", "diff": ["-\t\tString expectedContents = \"public class Test {\\r\\n\" +//$NON-NLS-1$", "-\t\t\t\"  int i;\\r\\n\"  +//$NON-NLS-1$", "+\t\tString expectedContents = \"public class Test {\\n\" +//$NON-NLS-1$", "+\t\t\t\"  int i;\\n\"  +//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d0945b1868e8ae622a31ff66d6d068c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void test08() throws JavaModelException", "signatureAfterChange": "  \tpublic void test08() throws JavaModelException", "diff": ["-\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "+\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\\n\" + ", "-\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d6b22e24fff075d7421c3ba94e68b13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  \tpublic void test107()", "signatureAfterChange": "  \tpublic void test107()", "diff": ["-\t\t\t\t\"\t * @see VisibilityPublic#vf_public Valid ref to not visible field of other package class\\n\" +", "-\t\t\t\t\"\t * @see VisibilityPublic.VpPublic#vf_public Valid ref to not visible field of other package public inner class\\n\" +", "+\t\t\t\t\"\t * @see VisibilityPublic#vf_public Valid ref to visible field of other package class\\n\" +", "+\t\t\t\t\"\t * @see test.copy.VisibilityPublic.VpPublic#vf_public Fully Qualified valid ref to visible field of other package public inner class\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dc03ba154a96a830a21a33485abfffa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 360, "methodNumberAfterChange": 360, "signatureBeforeChange": "\t\t \tpublic void test356()", "signatureAfterChange": "\t\t \tpublic void test356()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t<T, S> T foo(Class<T> c) { return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T, S> T foo(Class<T> c) { return null; }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dec58b34cf72a44bbfc5e50de950fb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 292, "signatureBeforeChange": " public void testBug313651_wksp3_02()", "signatureAfterChange": " public void testBug313651_wksp3_02()", "diff": ["-\t\t\"// start of comment\\n\" + ", "-\t\t\"// MyFirstInterface {\\n\" + ", "+\t\t\"\t\t// start of comment\\n\" + ", "+\t\t\"\t\t// MyFirstInterface {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8df926f725d8fc77c46a5c4d044c99e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 611, "methodNumberAfterChange": 611, "signatureBeforeChange": "\t\t \tpublic void test607()", "signatureAfterChange": "\t\t \tpublic void test607()", "diff": ["-    \t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+    \t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-    \t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+    \t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e09ac52cd816a40d2e7ca6dd4bafca8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " public void testBug260011_01() throws JavaModelException", "signatureAfterChange": " public void testBug260011_01() throws JavaModelException", "diff": ["-\t\t\"\t * <li style=\\\"font-variant:small-caps;\\\">\\n\" + ", "-\t\t\"\t * some text to be styled a certain way</li>\\n\" + ", "+\t\t\"\t * <li style=\\\"font-variant:small-caps;\\\">some text to be styled a certain way\\n\" + ", "+\t\t\"\t * </li>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e10f4b9a103acf754f46ab3738c65dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tpublic void test0035()", "signatureAfterChange": "  \tpublic void test0035()", "diff": ["-\t\t\t\"Method foo(E, Thread) has the same erasure foo(Exception, Thread) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(E, Thread) is the same as another method in type X<E,T>\\n\" +", "-\t\t\t\"Method foo(Exception, T) has the same erasure foo(Exception, Thread) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(Exception, T) is the same as another method in type X<E,T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e9b90fb4ca446b90f40aa27b0489621", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastingContextTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test004()", "signatureAfterChange": " public void test004()", "diff": ["-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +", "-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ea601a51478139556373e576db71163", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "0f3615b9d34177036abe735792350c6daafd5f0f", "commitAfterChange": "246965b39748e3da2ea49457412592390c45caa5", "methodNumberBeforeChange": 974, "methodNumberAfterChange": 974, "signatureBeforeChange": " public void testBug346454f() throws JavaModelException", "signatureAfterChange": " public void testBug346454f() throws JavaModelException", "diff": ["-\t\t\t\"T2[METHOD_REF<CONSTRUCTOR>]{, Lpack.Test<Ljava.lang.Object;>.T2;, (TZ;)V, T2, (z), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"Test<java.lang.Object>.T2[ANONYMOUS_CLASS_DECLARATION]{, Lpack.Test<Ljava.lang.Object;>.T2;, (TZ;)V, null, (z), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"T2[METHOD_REF<CONSTRUCTOR>]{, Lpack.Test<Ljava.lang.Object;>.T2<>;, (TZ;)V, T2, (z), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"Test<java.lang.Object>.T2<>[ANONYMOUS_CLASS_DECLARATION]{, Lpack.Test<Ljava.lang.Object;>.T2<>;, (TZ;)V, null, (z), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ebc6bab5abab72a01ebca708a5d0c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug101283b()", "signatureAfterChange": " \tpublic void testBug101283b()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "-\t\t\t\"\t               ^^^^\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t* @see T Variable \\n\" + ", "-\t\t\t\"\t       ^\\n\" + ", "-\t\t\t\"Javadoc: Invalid reference\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t* @see F Variable\\n\" + ", "-\t\t\t\"\t       ^\\n\" + ", "-\t\t\t\"Javadoc: Invalid reference\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tstatic class Entry<L, R> {\\n\" + ", "-\t\t\t\"\t                   ^^^^\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic class X<T, F> {\\n\" +", "+\t\t\t\"\t               ^^^^\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\t* @see T Variable \\n\" +", "+\t\t\t\"\t       ^\\n\" +", "+\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\t* @see F Variable\\n\" +", "+\t\t\t\"\t       ^\\n\" +", "+\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\"\tstatic class Entry<L, R> {\\n\" +", "+\t\t\t\"\t                   ^^^^\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ec56ae3810a5b6399a55afb9820f90f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test012b()", "signatureAfterChange": " \tpublic void test012b()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tclass Y3 extends A { @Override void foo(Class<Object> s) {} }\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 2)\\n\" +", "+\t\t\t\"\tclass Y3 extends A { @Override void foo(Class<Object> s) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f2ab73aeafbbdcb38d1e59f8e531780", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": " \tpublic void test051()", "signatureAfterChange": " \tpublic void test051()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class X implements I {\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X implements I {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f53ee695b51c72879beb9b521de62d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "c9e02661baa80cf1f75154d10de9df61ce3f636d", "commitAfterChange": "d92419d7d90bedd902391c7e83696cf6304867ae", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": " public void test226()", "signatureAfterChange": " public void test226()", "diff": ["-\t\t\"x cannot be resolved\\n\" +", "+\t\t\"x cannot be resolved to a variable\\n\" +", "-\t\t\"zork cannot be resolved\\n\" +", "+\t\t\"zork cannot be resolved to a variable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f80645fa8df852088bac8be42f44c6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tpublic void test048()", "signatureAfterChange": "  \tpublic void test048()", "diff": ["-\t\t\t\t+ \"Javadoc: Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Unknown cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "901f6ce04b4078b41306948b322fb5c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "  \tpublic void test118()", "signatureAfterChange": "  \tpublic void test118()", "diff": ["-\t\t\t\t+ \"Javadoc: Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Unknown cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9043247d5affc480154f7e4987e5a7ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test056d()", "signatureAfterChange": " public void test056d()", "diff": ["-\t\t\"Potential resource leak: \\\"fileReader2\\\" may not be closed\\n\" +", "+\t\t\"Potential resource leak: 'fileReader2' may not be closed\\n\" +", "-\t\t\"Resource leak: \\\"fileReader1\\\" is not closed at this location\\n\" + ", "+\t\t\"Resource leak: 'fileReader1' is not closed at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90bbe1829012cdad6cb2a4da583e603f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testJavadocConstructorArgReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocConstructorArgReferenceWithJavadoc() throws CoreException", "diff": ["-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\"", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched()] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched(String)] EXACT_MATCH INSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f7ca9f7d7d052a7897049193f74a01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void test020()", "signatureAfterChange": " \tpublic void test020()", "diff": ["-\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9126aee8105a9b252649f8b05d947f28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82d58f9af854b98a92f7d694d40ac1e84e13013c", "commitAfterChange": "6d114aac1fbfd4c23041534efbb02c24c883ba25", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test075()", "signatureAfterChange": " public void test075()", "diff": ["-\t\t\"\t    ^\\n\" + ", "-\t\t\"The type new X5c(){} must implement the inherited abstract method I.test()\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A must define the abstract method test()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91cfdc7cfc3e795950981b1124b1c3a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testMoveSourceFolder4() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder4() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91d3f3df1329b143fcb31c5e0ad0f2c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void testMoveSourceFolder1() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder1() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91e931527233729e99ee575534693d9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": " \tpublic void test221()", "signatureAfterChange": " \tpublic void test221()", "diff": ["-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The method add(? extends Integer) of type ArrayList<? extends Integer> is not applicable for the arguments (Integer). The wildcard parameter ? extends Integer has no lower bound, and may actually be more restrictive than argument Integer\\n\" + ", "+\t\t\t\"\t   ^^^\\n\" + ", "+\t\t\t\"The method add(capture-of ? extends Integer) in the type ArrayList<capture-of ? extends Integer> is not applicable for the arguments (Integer)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9252eedc34eeb8e4d6a64a673172512d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 152, "methodNumberAfterChange": 152, "signatureBeforeChange": " \tpublic void test048b()", "signatureAfterChange": " \tpublic void test048b()", "diff": ["-\t\t\t\"1. ERROR in X3.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tpublic void foo(I<String> z) {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X3.java (at line 2)\\n\" +", "+\t\t\t\"\tpublic void foo(I<String> z) {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9264550a2f852b9971900ae187051a6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92b2262a9b97d9f346db5a41e7bc0eaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d35306cb5dcf7e4ac666fd0505f3086f50241fb2", "commitAfterChange": "3284f738bbf7a2dbd90434dea313c8629bed5722", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": " public void test401939d()", "signatureAfterChange": " public void test401939d()", "diff": ["-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92c7142bbb2ecdb5931de7ff56ade445", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void testBug103304d()", "signatureAfterChange": " \tpublic void testBug103304d()", "diff": ["-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92d0f1f243c0aa1d63d2eba1707de893", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void testJavadocMethodReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodReferenceWithJavadoc() throws CoreException", "diff": ["-\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH INSIDE_JAVADOC\",", "+\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod()] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod()] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92ea918dac28f6e436b7ecab69f1054c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "930fb56a31bc2283c2662845a282c164", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \tpublic void test104()", "signatureAfterChange": " \tpublic void test104()", "diff": ["-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: BX is a raw type. References to generic type BX<Q> should be parameterized\\n\" + ", "+\t\t\t\"BX is a raw type. References to generic type BX<Q> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93821a5b7360781fa12390ffbb7cad6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testMoveSourceFolder3() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder3() throws CoreException", "diff": ["-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93e73158e71c7d99d466255ead06bc32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test009a()", "signatureAfterChange": " \tpublic void test009a()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tabstract class A implements I { I foo(G<A> x) { return null; } }\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 3)\\n\" +", "+\t\t\t\"\tabstract class A implements I { I foo(G<A> x) { return null; } }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "941267093c2cff699fc67522719deceb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationDietRecoveryTest.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test0018()", "signatureAfterChange": " public void test0018()", "diff": ["-\t\t\"public @AnAnnotation @AnAnnotation2(name2) class X {\\n\" + ", "+\t\t\"public @AnAnnotation(name = $missing$) @AnAnnotation2(name2) class X {\\n\" + ", "-\t\t\"public @AnAnnotation @AnAnnotation2(name2) class X {\\n\" + ", "+\t\t\"public @AnAnnotation(name = $missing$) @AnAnnotation2(name2) class X {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9423b8afd0aa420908aaaa848bcbe25f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void test073()", "signatureAfterChange": " \tpublic void test073()", "diff": ["-\t\t\t\"  public abstract String[] strings() default {\\\"\\\"};\\n\" + ", "+\t\t\t\"  public abstract java.lang.String[] strings() default {\\\"\\\"};\\n\" + ", "-\t\t\t\"  public abstract Class[] classes() default {I};\\n\" + ", "+\t\t\t\"  public abstract java.lang.Class[] classes() default {I};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9433ac707a9cbb3432fd67b791438a95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestForInterface.java", "commitBeforeChange": "1dae9bed0f28b20df545c773f52fb80596048ada", "commitAfterChange": "73e6c55b6cebcb032c8128286708483f86167b64", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tpublic void test114()", "signatureAfterChange": "  \tpublic void test114()", "diff": ["-\t\t\t\t+ \"\t               ^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                           ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                             ^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "945c4b060c693c619e7482901ecdbde4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "df6a831e25306aaf42082c3028bc10a53397f709", "commitAfterChange": "c4456745e85855490754a6de1916b6636cc95ad7", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " \tpublic void test0547() throws JavaModelException", "signatureAfterChange": " \tpublic void test0547() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$78;\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$74;\", typeBinding.getKey());", "-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$105;\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$100;\", typeBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94daa1d7a1d527e462e36530e37b3f18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "dbdde44f24ace4ee47bccce2cfe484eeeb8013f3", "commitAfterChange": "33bcc97ba28fd6319a8c922b4f8d989e4aab5311", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  \tpublic void testConditional2()", "signatureAfterChange": "  \tpublic void testConditional2()", "diff": ["-\t\t\t\"Null type safety (type annotations): The expression of type \\'ArrayList<String>\\' needs unchecked conversion to conform to \\'List<@NonNull String>\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'ArrayList<String>\\' needs unchecked conversion to conform to \\'List<@NonNull String>\\', corresponding supertype is 'List<String>'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'ArrayList<String>\\' needs unchecked conversion to conform to \\'List<@NonNull String>\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'ArrayList<String>\\' needs unchecked conversion to conform to \\'List<@NonNull String>\\', corresponding supertype is 'List<String>'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95010c4611a469899f91967f71773a50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testImplementBinaryInnerInterface() throws JavaModelException", "signatureAfterChange": " public void testImplementBinaryInnerInterface() throws JavaModelException", "diff": ["-\t\t\"  Inner {key=Lp58440/X$Inner;} [in X$Inner.class [in p58440 [in test58440.jar [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Inner [in X$Inner.class [in p58440 [in test58440.jar [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "951595eac19f1184801a01a28036ac15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 368, "methodNumberAfterChange": 368, "signatureBeforeChange": "\r public void testBug474918()", "signatureAfterChange": "\r public void testBug474918()", "diff": ["-\t\t\"\t\t\t\t\t\t\t\t\t\t\t\tint\t\t\ta\t\t\t\t= 55;\\r\\n\" + \r", "-\t\t\"\t\t\t\t\t\t\t\t\t\t\t\tObject\t\tcdddddddddddd\t= null;\\r\\n\" + \r", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t\tint\t\ta\t\t\t\t= 55;\\r\\n\" + \r", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t\tObject\tcdddddddddddd\t= null;\\r\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953838486364e8d830d10f42bc339bb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "272d365c8c794b76444b3643d2b9ddaaf32b6191", "commitAfterChange": "6c8b6c70bde19844df9a948acbc4f151c3d9aa74", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " public void testFieldReference21() throws CoreException", "signatureAfterChange": " public void testFieldReference21() throws CoreException", "diff": ["-\t\t\"src/s1/A.java [s1.j.l.S.in]\\n\" + ", "+\t\t\"src/s1/A.java [in]\\n\" + ", "-\t\t\"src/s1/D.java [s1.j.l.S.in]\\n\" + ", "+\t\t\"src/s1/D.java [in]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95808b2f7bb1d7753a7758ea52e7733a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "dbdde44f24ace4ee47bccce2cfe484eeeb8013f3", "commitAfterChange": "33bcc97ba28fd6319a8c922b4f8d989e4aab5311", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void testNullTypeInference3c()", "signatureAfterChange": " \tpublic void testNullTypeInference3c()", "diff": ["-\t\t\t\"Null type safety (type annotations): The expression of type \\'@NonNull List<Object>\\' needs unchecked conversion to conform to \\'Collection<@NonNull Object>\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'@NonNull List<Object>\\' needs unchecked conversion to conform to \\'Collection<@NonNull Object>\\', corresponding supertype is 'Collection<Object>'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'@NonNull List<Object>\\' needs unchecked conversion to conform to \\'Collection<@Nullable Object>\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'@NonNull List<Object>\\' needs unchecked conversion to conform to \\'Collection<@Nullable Object>\\', corresponding supertype is 'Collection<Object>'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "959dc9fb49f8cf070fe392dceb5151fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "328c06fa136c963530115a367863b6a931384871", "commitAfterChange": "c0d735bb59d0292c44074a58c867bfe7a8670833", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": " public void test384750n()", "signatureAfterChange": " public void test384750n()", "diff": ["-\t\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95a5f996f2f59d88696b0f4d049c8032", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 159, "signatureBeforeChange": " \tpublic void test049()", "signatureAfterChange": " \tpublic void test049()", "diff": ["-\t\t\t\"Method id(T) has the same erasure id(A) as another method in type Y<T>\\n\" +", "+\t\t\t\"Erasure of method id(T) is the same as another method in type Y<T>\\n\" +", "-\t\t\t\"Method id(A) has the same erasure id(A) as another method in type Y<T>\\n\" +", "+\t\t\t\"Erasure of method id(A) is the same as another method in type Y<T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95ae47c69a85cae32f05e12b5a875eb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug101283b()", "signatureAfterChange": " \tpublic void testBug101283b()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class X<T, F> {\\n\" +", "-\t\t\t\"\t               ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\t* @see T Variable \\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\t* @see F Variable\\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\tstatic class Entry<L, R> {\\n\" +", "-\t\t\t\"\t                   ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "+\t\t\t\"\t               ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @see T Variable \\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see F Variable\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tstatic class Entry<L, R> {\\n\" + ", "+\t\t\t\"\t                   ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95d5725d82f2f1f83265851f8201d786", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test005()", "signatureAfterChange": " public void test005()", "diff": ["-\t\t\"Unnecessary cast to type String for expression of type String\\n\" + ", "+\t\t\"Unnecessary cast from String to String\\n\" + ", "-\t\t\"Unnecessary cast to type String for expression of type String\\n\" + ", "+\t\t\"Unnecessary cast from String to String\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "968ef56672149a40b34b64f888df9ba0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "  \tpublic void test072()", "signatureAfterChange": "  \tpublic void test072()", "diff": ["-\t\t\t\t+ \"Javadoc: java.awt.AWTexception cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: java.awt.AWTexception cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: IOException cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: IOException cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96957666fb655457fb77e6339a57870b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "\r \tpublic void test040()", "signatureAfterChange": "\r \tpublic void test040()", "diff": ["-\t\t\t\t\t\"\t                    ^^^^^^^\\n\" + \r", "-\t\t\t\t\t\"Syntax error on token \\\"NonNull\\\", void expected after this token\\n\" + \r", "+\t\t\t\t\t\"\t                   ^\\n\" + \r", "+\t\t\t\t\t\"Syntax error on token \\\"@\\\", delete this token\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96bfefdf2fd937d14252149ad7c31cc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "b7bb9d2950572af77f85c2c708c3816367817930", "commitAfterChange": "6cea394a74122bc3b2f5fee1a70c7921f0e635d8", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "\r \tpublic void test043() throws Exception", "signatureAfterChange": "\r \tpublic void test043() throws Exception", "diff": ["-\t\t\t\t\"           Z(X. @Marker Y  X.Y.this) {\\n\" +\r", "+\t\t\t\t\"           Z(X. @Marker Y  Y.this) {\\n\" +\r", "-\t\t\t\"\tZ(X. @Marker Y  X.Y.this) {\\n\" + \r", "+\t\t\t\"\tZ(X. @Marker Y  Y.this) {\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96d10219c0892b6ecea9a41c4a0a8b01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void test010()", "signatureAfterChange": " \tpublic void test010()", "diff": ["-\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96d2184bde1bb3e4aabfc6dcae05c427", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "3527b3756f08ff89e126504842e7e163f70ed525", "commitAfterChange": "b6824a312418adc1d862d73cd66d59cf6690080f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void test024()", "signatureAfterChange": " \tpublic void test024()", "diff": ["-\t\tString key = BindingKey.createWilcardTypeBindingKey(\"Ljava/util/List;\", Signature.C_EXTENDS);", "+\t\tString key = BindingKey.createWilcardTypeBindingKey(\"Ljava/util/ArrayList;\", Signature.C_EXTENDS);", "-\t\t\t\"+Ljava/util/List;\",", "+\t\t\t\"+Ljava/util/ArrayList;\",", "+\t\t\tkey);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ecc5c263a1ac10cc02e98da5026120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "commitAfterChange": "f391db9dfa982dbe09df7c4d362cd9e5a8546769", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public SourceEntry getSourceEntry(int index) throws IOException", "signatureAfterChange": "\r public SourceEntry getSourceEntry(int index) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "+\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "+\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f12fb081bdfb27c8d26b61ae72f739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchTests.java", "commitBeforeChange": "e8833af919cd5aafe270f9176a133cb16029ea92", "commitAfterChange": "9f614fc97667efed681d3433770b756cc7555814", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void testSearchPatternCreation29()", "signatureAfterChange": " public void testSearchPatternCreation29()", "diff": ["-\t\t\"PackageDeclarationPattern: <x.y.z>, exact match, case sensitive\\n\" +", "-\t\t\"| PackageReferencePattern: <x.y.z>, exact match, case sensitive\",", "+\t\t\"PackageDeclarationPattern: <x.y.z>, exact match, case sensitive, erasure only\\n\" +", "+\t\t\"| PackageReferencePattern: <x.y.z>, exact match, case sensitive, erasure only\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9704a8857c523bca747a7687d4e8ca9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void test063()", "signatureAfterChange": " \tpublic void test063()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9749aa3a8788d60b7bdc437a040f697a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void test056throw1()", "signatureAfterChange": " public void test056throw1()", "diff": ["-\t\t\"Resource leak: \\'reader\\' is not closed at this location\\n\" +", "+\t\t\"Resource leak: \\\"reader\\\" is not closed at this location\\n\" +", "-\t\t\"Resource leak: \\'reader\\' is not closed at this location\\n\" +", "+\t\t\"Resource leak: \\\"reader\\\" is not closed at this location\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "975958bc92ca80f4017b978fe220e58f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void test056throw5()", "signatureAfterChange": " public void test056throw5()", "diff": ["-\t\t\"Potential resource leak: \\'reader\\' may not be closed at this location\\n\" +", "+\t\t\"Potential resource leak: \\\"reader\\\" may not be closed at this location\\n\" +", "-\t\t\"Potential resource leak: \\'reader\\' may not be closed at this location\\n\" +", "+\t\t\"Potential resource leak: \\\"reader\\\" may not be closed at this location\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97733135ebe0f04a46d06e3c7c7db3f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  public void test63()", "signatureAfterChange": "  public void test63()", "diff": ["-\t\t\"  int[] x = {0,1,};\\n\" + ", "+\t\t\"  int[] x = {0, 1};\\n\" + ", "-\t\t\"  int[] x = {0,1,};\\n\" + ", "+\t\t\"  int[] x = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97a4d3dee3565b8419b3a3875c04c159", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument02() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EQUIVALENT_RAW_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97ff04e95af271122a8d155f833a0da6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "130cb4765fd3f636bbf53ed159d4905dec0a5fd5", "commitAfterChange": "938f4b2ad6ef3c12e60db3be23aed731979677d7", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test041()", "signatureAfterChange": " \tpublic void test041()", "diff": ["-\t\t\t\"The argument of type Integer[] should explicitly be cast to Serializable[] for the invocation of the varargs method array(Serializable...) from type X. It could alternatively be cast to Serializable for a varargs invocation\\n\" +", "+\t\t\t\"Type Integer[] of the last argument to method array(Serializable...) doesn't exactly match the vararg parameter type. Cast to Serializable[] to confirm the non-varargs invocation, or pass individual arguments of type Serializable for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Serializable[] for the invocation of the varargs method array(Serializable...) from type X. It could alternatively be cast to Serializable for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method array(Serializable...) doesn't exactly match the vararg parameter type. Cast to Serializable[] to confirm the non-varargs invocation, or pass individual arguments of type Serializable for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9837d627deea773eceee56dc77613f6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1924cfa5e4209a8742be0104afe1beaad86d0922", "commitAfterChange": "dfe897878a3115c90160783084107f96dcd301be", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\t\t} else if (token.equals(\"Override\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"over-ann\")) { //$NON-NLS-1$", "-\t\t\t\t\t} else if (token.equals(\"Deprecated\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"dep-ann\")) { //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98555db8d30e26de5b01f96e099a77dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 214, "signatureBeforeChange": " \tpublic void test0213() throws JavaModelException", "signatureAfterChange": " \tpublic void test0213() throws JavaModelException", "diff": ["-\t\tString expectedContents = \"public class Test {\\r\\n\" +//$NON-NLS-1$", "-\t\t\t\"  int i;\\r\\n\"  +//$NON-NLS-1$", "+\t\tString expectedContents = \"public class Test {\\n\" +//$NON-NLS-1$", "+\t\t\t\"  int i;\\n\"  +//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9899cfa70fa05108e315a2ef19058682", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void test010()", "signatureAfterChange": "  public void test010()", "diff": ["-\t\t\"Unnecessary cast to type long for expression of type int. It is already compatible with the argument type long\\n\" + ", "+\t\t\"Unnecessary cast from int to long. It is already compatible with the argument type long\\n\" + ", "-\t\t\"Unnecessary cast to type long for expression of type int\\n\" + ", "+\t\t\"Unnecessary cast from int to long\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "990316ff5344be290d8ba636c95c8464", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void testBug198074b() throws JavaModelException", "signatureAfterChange": " public void testBug198074b() throws JavaModelException", "diff": ["-\t\t\"                 + \\\"from y \\\"\\n\" + ", "-\t\t\"                 + \\\"where z=a\\\";\\n\" + ", "+\t\t\"                + \\\"from y \\\"\\n\" + ", "+\t\t\"                + \\\"where z=a\\\";\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99c63e16d9791820db31b08306d98f05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": " \tpublic void test043a()", "signatureAfterChange": " \tpublic void test043a()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tpublic class X { void test(E<Integer,Integer> e) { e.id(new Integer(2)); } }\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic class X { void test(E<Integer,Integer> e) { e.id(new Integer(2)); } }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a213a8eeac9cedc7b7fc4bf2a66c522", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 855, "methodNumberAfterChange": 855, "signatureBeforeChange": " public void test0848()", "signatureAfterChange": " public void test0848()", "diff": ["-\t\t\"Type safety: The cast from Collection<capture#1-of ? extends Number> to List<Number> is actually checking against the erased type List\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Collection<capture#1-of ? extends Number> to List<Number>\\n\" + ", "-\t\t\"Type safety: The cast from Collection<capture#2-of ? extends Number> to LinkedList<Number> is actually checking against the erased type LinkedList\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Collection<capture#2-of ? extends Number> to LinkedList<Number>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a93e3c17b2d05fc819fd3a9f83e5ccb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "f08e2fcfb74b9a513988b6c92b3d0f1c94eb6ecf", "commitAfterChange": "c35e0ba6a6bce7272fb4c8d0b339e50b59e7d2a3", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " public void testRenameMethodAndSave() throws CoreException", "signatureAfterChange": " public void testRenameMethodAndSave() throws CoreException", "diff": ["-\t\t\t\"P[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\tx.y[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t\tA.java[*]: {CHILDREN | FINE GRAINED}\\n\" +", "-\t\t\t\"\t\t\t\tA[*]: {CHILDREN | FINE GRAINED}\\n\" +", "-\t\t\t\"\t\t\t\t\tfoo2[+]: {}\\n\" +", "-\t\t\t\"\t\t\t\t\tfoo1[-]: {}\"", "+\t\t\t\"P[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\tx.y[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t\tA.java[*]: {CHILDREN | FINE GRAINED}\\n\" + ", "+\t\t\t\"\t\t\t\tA[*]: {CHILDREN | FINE GRAINED}\\n\" + ", "+\t\t\t\"\t\t\t\t\tfoo2()[+]: {}\\n\" + ", "+\t\t\t\"\t\t\t\t\tfoo1()[-]: {}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aefc21cfd4f0b0754ad50b7fa036877", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e296d38bce70b50ae4223d7832ad4c72a95b5b55", "commitAfterChange": "837307d08b616384b505afc73627ca69c848f688", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void test041()", "signatureAfterChange": " \tpublic void test041()", "diff": ["-\t\t\t\"Varargs methods should only override other varargs methods unlike X.foo(String...) and I.foo(String[])\\n\" + ", "+\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike X.foo(String...) and I.foo(String[])\\n\" + ", "-\t\t\t\"Varargs methods should only override other varargs methods unlike X.foo(String[]) and I.foo(String...)\\n\" + ", "+\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike X.foo(String[]) and I.foo(String...)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b003f29ccfecb0dd26b1606afa5e686", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " public void test0062()", "signatureAfterChange": " public void test0062()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:impl>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:impl>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b04a403fd554ba70792c7b91a7a1a4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void testDeltaDiscardNonPrimaryWorkingCopy() throws CoreException", "signatureAfterChange": " \tpublic void testDeltaDiscardNonPrimaryWorkingCopy() throws CoreException", "diff": ["-\t\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b28c1f30d117248d1a19ff4f972775e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["-\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b5884ae078648427d6272b64437a661", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void testTypeMultipleArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testTypeMultipleArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b6264d9af309cb52e3c5607859db7ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": " \tpublic void test054()", "signatureAfterChange": " \tpublic void test054()", "diff": ["-\t\t\t\"Method a(Object) has the same erasure a(Object) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method a(Object) is the same as another method in type X\\n\" +", "-\t\t\t\"Method a(T) has the same erasure a(Object) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method a(T) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b729bf2a89fe016abd1248cb198cd3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic void testBug80264_FieldsIgnoreReturnType() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80264_FieldsIgnoreReturnType() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bbd0557c271f346d2f163bcdd921cba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "8c77956bb14bf31d316463be9556a2204834682b", "commitAfterChange": "366617dbc4fc1d9363db17217a7ae199f0f005ea", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test041()", "signatureAfterChange": " \tpublic void test041()", "diff": ["-\t\t\t\"The argument of type Integer[] should explicitly be cast to Serializable[] for the invocation of the varargs method array(Serializable...) from type X. It could alternatively be cast to Serializable for a varargs invocation\\n\" +", "+\t\t\t\"Type Integer[] of the last argument to method array(Serializable...) doesn't exactly match the vararg parameter type. Cast to Serializable[] to confirm the non-varargs invocation, or pass individual arguments of type Serializable for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Serializable[] for the invocation of the varargs method array(Serializable...) from type X. It could alternatively be cast to Serializable for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method array(Serializable...) doesn't exactly match the vararg parameter type. Cast to Serializable[] to confirm the non-varargs invocation, or pass individual arguments of type Serializable for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd59b7d62bc513c190187450418f508", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 168, "methodNumberAfterChange": 168, "signatureBeforeChange": " \tpublic void test050h()", "signatureAfterChange": " \tpublic void test050h()", "diff": ["-\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method c(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method c(A<Number>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c0a3e1527b99ac03e813a5d1606b66e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 121, "signatureBeforeChange": " \tpublic void testBug88300b() throws CoreException", "signatureAfterChange": " \tpublic void testBug88300b() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 3, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 3, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c28a86d01238a7ad14429bcb3446844", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "418e34f57c9f7842d3534af171e657c264f02dd7", "commitAfterChange": "42a66623ce2a3ec71a2f28506ffd67d2c8d2cf8c", "methodNumberBeforeChange": 438, "methodNumberAfterChange": 443, "signatureBeforeChange": " public void testBug253896b()", "signatureAfterChange": " public void testBug253896b()", "diff": ["-\t\t\t\"Null pointer access: The variable i1 can only be null at this location\\n\" +", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Potential null pointer access: The variable i1 may be null at this location\\n\" +", "+\t\t\t\"Potential null pointer access: This expression of type Integer may be null but requires auto-unboxing\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d00595b412dac1af31431d3da43799b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "af9bbbd46257142e006853d95525656db05c0be8", "commitAfterChange": "75441f37a4b77efa641f7e3f5866e117cb328da6", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testMoveSourceFolder4() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder4() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d92c1b254b74c589641012b9920146a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 198, "signatureBeforeChange": " public void testBug260274d() throws JavaModelException", "signatureAfterChange": " public void testBug260274d() throws JavaModelException", "diff": ["-\t\t\"\t/* *********************************************\\n\" + ", "-\t\t\"\t * Test\\n\" + ", "+\t\t\"\t/*\\n\" + ", "+\t\t\"\t * ********************************************* Test\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d9ce32a0c9d9e656ff00f10cf7aa441", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "2f57f8dfaade218a320169042ea7ed8e042be61d", "commitAfterChange": "870bb4f621dd0b8090426a7261d67a43a6dc9aa9", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 215, "signatureBeforeChange": " public void test172_warn_options()", "signatureAfterChange": " public void test172_warn_options()", "diff": ["-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\",", "-\t\t\"2 problems (2 warnings)\",", "+\t\t\"2 problems (2 warnings)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9df21c423a14d0c62cb7859c59035931", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tpublic void test032()", "signatureAfterChange": " \t \tpublic void test032()", "diff": ["-\t\t\t\t\"   public static void main(String[] s) {\\n\" +", "+\t\t\t\t\"   public static void main(String[] args) {\\n\" +", "-\t\t\t\"  public static void main(String[] s);\\n\" + ", "+\t\t\t\"  public static void main(java.lang.String[] args);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9df885a0f4298b23341b366fb5ff0b76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DeprecatedTest.java", "commitBeforeChange": "232201d6380e7830296a82a7b3422a333db36b2e", "commitAfterChange": "378f419edc5509790bbfa3083244109f6abafbe2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void test014()", "signatureAfterChange": " public void test014()", "diff": ["-\t\t\"\t^^^\\n\" +", "+\t\t\"\t  ^\\n\" +", "-\t\t\"\t^^^\\n\" +", "+\t\t\"\t  ^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e1ff7c002dc0d7b2d35c43b071dc45d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test085()", "signatureAfterChange": " public void test085()", "diff": ["-\t\t\t\"Syntax error, static imports are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, static imports are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e46913692772496cdcbcf80c286913a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  \tpublic void test056()", "signatureAfterChange": "  \tpublic void test056()", "diff": ["-\t\t\t\t+ \"Javadoc: IllegalArgumenException cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: IllegalArgumenException cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"InvalidException cannot be resolved (or is not an exception type) for the method t_foo\\n\"", "+\t\t\t\t+ \"InvalidException cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e49139c3f2bbc96f025e26b9cbd68d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "dee823e8e9454e3bbc323b61e0e66446bfc3e48a", "commitAfterChange": "c903817ea1b3b3294907f8d4a93524af350dfca3", "methodNumberBeforeChange": 955, "methodNumberAfterChange": 955, "signatureBeforeChange": " public void test0945()", "signatureAfterChange": " public void test0945()", "diff": ["-\t\t\"public static <Var> void  transferBug(Var[] from, Collection<Var> to){\\n\" + ", "-\t\t\"    to.add(from[0]);\\n\" + ", "+\t\t\"public static <Var> void  transferBug(Var[] src, Collection<Var> dest){\\n\" + ", "+\t\t\"    dest.add(src[0]);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e574cbe5aa18820418d823a8852b980", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "572021b99f292f39a76e81c2ea834ac6a839b00b", "commitAfterChange": "727d8ca46d64642ad4f629f81ba37e76e7ae8c85", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " public void testBug232768_Javadoc03() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Javadoc03() throws JavaModelException", "diff": ["-\t\t\"\t\\n\" +", "-\t\t\"        /**\\n\" +", "+\t\t\"\\n\" +", "+\t\t\"\t/**\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e643e3cf4ee71c4b1e7c870968dc834", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void testSimpleSubTypeHierarchy() throws CoreException", "signatureAfterChange": " public void testSimpleSubTypeHierarchy() throws CoreException", "diff": ["-\t\t\t\"  Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in P]]]]\\n\" + ", "+\t\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P]]]]\\n\" + ", "-\t\t\t\"  A [in [Working copy] A.java [in x.y [in src [in P]]]]\\n\",", "+\t\t\t\"  A {key=Lx/y/A;} [in [Working copy] A.java [in x.y [in src [in P]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eb480028da2399b2a2d60ae65936701", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void test050()", "signatureAfterChange": " public void test050()", "diff": ["-\t\t\t\"        [pc: 0, pc: 12] -> 12 when : java.lang.Exception\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 9] -> 12 when : java.lang.Exception\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 12] -> 12 when : java.lang.Exception\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 9] -> 12 when : java.lang.Exception\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eb74619b1fe208eb9982d5e0cc018a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2b797eb7226566ad166415dcfde6c744ad4c587", "commitAfterChange": "895b1bbc42bc6ec924c8066f964f04fd4701ee79", "methodNumberBeforeChange": 558, "methodNumberAfterChange": 558, "signatureBeforeChange": " \tpublic void test554()", "signatureAfterChange": " \tpublic void test554()", "diff": ["-\t\t\t\"Unnecessary cast from X<String> to X<? extends Object>\\n\" + ", "+\t\t\t\"Unnecessary cast from X<String> to X<capture-of ? extends Object>\\n\" + ", "-\t\t\t\"Unnecessary cast from X2 to X<? extends Object>\\n\" + ", "+\t\t\t\"Unnecessary cast from X2 to X<capture-of ? extends Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ee7e152d50eef371588cb8e68f6b4ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test0040() throws JavaModelException", "signatureAfterChange": " \tpublic void test0040() throws JavaModelException", "diff": ["-\t\tassertEquals(\"wrong key\", \"T:test0040/X/Tfoo()\", binding.getKey());", "+\t\tassertEquals(\"wrong key\", \"Ltest0040/X;.foo<T:Ljava/lang/Object;>()TT;:TT;\", binding.getKey());", "-\t\tassertEquals(\"wrong key\", \"T:test0040/X/Tfoo()\", binding2.getKey());\t\t", "+\t\tassertEquals(\"wrong key\", \"Ltest0040/X;.foo<T:Ljava/lang/Object;>()TT;:TT;\", binding2.getKey());\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f0e8fb1b62c555081aca6fd803dea56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f935896328504e7d9b42cf6662204e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void testBug81084string() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug81084string() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fb6424d8083edca58a5f19efcd11943", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "87035e28d15718dec923cda9730195aba7b8ab31", "commitAfterChange": "d7e74f0817baa712407da5eb003f21f0a3eeda6d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test010()", "signatureAfterChange": " \tpublic void test010()", "diff": ["+\tpublic void test010() {", "-\tpublic void test010() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fc980ca018eccda62295f626d05a1e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void testParameterizedTypeMultipleArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeMultipleArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fdeed31e9c3c72957dc8a8fb82cbcd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic void test062()", "signatureAfterChange": "  \tpublic void test062()", "diff": ["-\t\t\t\t+ \"Javadoc: java.awt.AWTexception cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: java.awt.AWTexception cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: IOException cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: IOException cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0279c781a9cefe6eab10ff5c860a51f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForField.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tpublic void test048()", "signatureAfterChange": "  \tpublic void test048()", "diff": ["-\t\t\t\t+ \"Javadoc: Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Unknown cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a058b636a83c6f49157d78be11138cf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public void testCreateSharedWorkingCopy() throws CoreException", "signatureAfterChange": "  public void testCreateSharedWorkingCopy() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0fe4ee03683f54082c5ac34d8fa4aeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 248, "signatureBeforeChange": " \tpublic void test244()", "signatureAfterChange": " \tpublic void test244()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a11b8dab0475a850650d455fdd8ee1c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LineNumberAttributeTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void test001() throws Exception", "signatureAfterChange": " public void test001() throws Exception", "diff": ["-\t\t\"        [pc: 46, line: 18]\\n\" +", "+\t\t\"        [pc: 43, line: 18]\\n\" +", "-\t\t\"        [pc: 23, pc: 46] local: x index: 1 type: X\\n\" +", "+\t\t\"        [pc: 23, pc: 43] local: x index: 1 type: X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a148db3dff0285d4554a0f1410aa4536", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 833, "methodNumberAfterChange": 833, "signatureBeforeChange": " public void test827()", "signatureAfterChange": " public void test827()", "diff": ["-\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a154040b73089535cc2c069d12d0a50d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test005()", "signatureAfterChange": " \tpublic void test005()", "diff": ["-\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1570abb70ba73aeeca98b2df4007c72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "232201d6380e7830296a82a7b3422a333db36b2e", "commitAfterChange": "378f419edc5509790bbfa3083244109f6abafbe2", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": " public void test142c()", "signatureAfterChange": " public void test142c()", "diff": ["-\t\t\"\t                       ^^^^^^^^^^\\n\" + ", "+\t\t\"\t                         ^^^^^^^^\\n\" + ", "-\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\"\t      ^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1c3538f806e96ca8c9991b8f50e8240", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationCompletionParserTest.java", "commitBeforeChange": "63d13898e414da27bb1c178ed93753184a2e7833", "commitAfterChange": "a489ce78e2eb32838e144c0480573d4783205f0f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test0007()", "signatureAfterChange": " public void test0007()", "diff": ["-\t\t\"public enum X {\\n\" + ", "-\t\t\"  public X() {\\n\" + ", "+\t\t\"enum X {\\n\" + ", "+\t\t\"  X() {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2041a2c5baad1ca812bed8907740291", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "0f3615b9d34177036abe735792350c6daafd5f0f", "commitAfterChange": "246965b39748e3da2ea49457412592390c45caa5", "methodNumberBeforeChange": 977, "methodNumberAfterChange": 977, "signatureBeforeChange": " public void testBug346454i() throws JavaModelException", "signatureAfterChange": " public void testBug346454i() throws JavaModelException", "diff": ["-\t\t\t\t\"T2[METHOD_REF<CONSTRUCTOR>]{, Lpack.Test<>.T2;, (TU;)V, T2, (u), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"Test<>.T2[ANONYMOUS_CLASS_DECLARATION]{, Lpack.Test<>.T2;, (TU;)V, null, (u), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\",\t", "+\t\t\t\t\"T2[METHOD_REF<CONSTRUCTOR>]{, Lpack.Test<>.T2<>;, (TU;)V, T2, (u), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"Test<>.T2<>[ANONYMOUS_CLASS_DECLARATION]{, Lpack.Test<>.T2<>;, (TU;)V, null, (u), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\",\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a22cb4df2827722d48bc082e3a05f064", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "15354ef30ff1d65c0145e0a7585cb94774313c51", "commitAfterChange": "f49cf7529ae8b80cdf3f120143dad37a4f24e498", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, boolean computeProblems) throws JavaModelException", "signatureAfterChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, boolean computeProblems) throws JavaModelException", "diff": ["-\t\t\tassertNotNull(\"Cannot compute problems if working copy owner is set to null!\", this.wcOwner.getProblemRequestor(wc));", "+\t\t\tassertNotNull(\"Cannot compute problems if the problem requestor of the working copy owner is set to null!\", this.wcOwner.getProblemRequestor(wc));", "-\t\t\tassertNull(\"Cannot ignore problems if working copy owner is not set to null!\", this.wcOwner.getProblemRequestor(wc));", "+\t\t\tassertNull(\"Cannot ignore problems if the problem requestor of the working copy owner is not set to null!\", this.wcOwner.getProblemRequestor(wc));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2342b224f106a5be00d6541b616c4b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "df6a831e25306aaf42082c3028bc10a53397f709", "commitAfterChange": "c4456745e85855490754a6de1916b6636cc95ad7", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " \tpublic void test0547() throws JavaModelException", "signatureAfterChange": " \tpublic void test0547() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$78;\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$74;\", typeBinding.getKey());", "-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$105;\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$100;\", typeBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a239472b2b87c332992ed2f79ad51f41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void testMergeResourceDeltas() throws CoreException", "signatureAfterChange": " public void testMergeResourceDeltas() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3016c7271d5be4106aa2ec3eb44f961", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic void testBug84727b() throws CoreException", "signatureAfterChange": " \tpublic void testBug84727b() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 3, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 3, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a31a08390d62e680c60b146058788650", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java", "commitBeforeChange": "85430bbb6b230d87cb672b19d866f291f4cf633d", "commitAfterChange": "a6058a3a6ffb64f6b6041d6178bab879afbd0b14", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test424080()", "signatureAfterChange": " public void test424080()", "diff": ["-\tString string = ", "+String string = ", "-\t\t\tString expectedCompletionNodeToString = \"<CompleteOnName:val>\";", "+\t\t\tString expectedCompletionNodeToString = \"<NONE>\";", "-\t\t\t\t\t\"  FI fi = <CompleteOnName:val>;\\n\" + ", "+\t\t\t\t\t\"  FI fi;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3387a157085af316abe66a79a72486f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "14d447e9b3a680ded3744f07910de88768216ea3", "commitAfterChange": "689526016f6ab442680e718d2760fc44e79dd9b5", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t\t\t\t\"\\n\" +", "+\t\t\t\t\"\t@SuppressWarnings(\\\"unlikely-arg-type\\\")\\n\" +", "-\t\t\t\"\\n\" +", "+\t\t\t\"\t@SuppressWarnings(\\\"unlikely-arg-type\\\")\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a37210445ad5ebadaad0f379b8d2496f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void test400556b()", "signatureAfterChange": " public void test400556b()", "diff": ["-\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t      ^^^^^^\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t      ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3d7ff487e531364af5886df38c5b404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 289, "methodNumberAfterChange": 291, "signatureBeforeChange": " public void testBug313651_wksp3_01()", "signatureAfterChange": " public void testBug313651_wksp3_01()", "diff": ["-\t\t\"// start of comment\\n\" + ", "-\t\t\"// MyFirstInterface {\\n\" + ", "+\t\t\"\t\t// start of comment\\n\" + ", "+\t\t\"\t\t// MyFirstInterface {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3e564980126b2a6adaf1844729537a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug101283d()", "signatureAfterChange": " \tpublic void testBug101283d()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "-\t\t\t\"\t               ^^^^\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t* @see T Variable \\n\" + ", "-\t\t\t\"\t       ^\\n\" + ", "-\t\t\t\"Javadoc: Invalid reference\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t* @see F Variable\\n\" + ", "-\t\t\t\"\t       ^\\n\" + ", "-\t\t\t\"Javadoc: Invalid reference\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tclass Entry<L, R> {\\n\" + ", "-\t\t\t\"\t            ^^^^\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic class X<T, F> {\\n\" +", "+\t\t\t\"\t               ^^^^\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\t* @see T Variable \\n\" +", "+\t\t\t\"\t       ^\\n\" +", "+\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\t* @see F Variable\\n\" +", "+\t\t\t\"\t       ^\\n\" +", "+\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\"\tclass Entry<L, R> {\\n\" +", "+\t\t\t\"\t            ^^^^\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4235c5048cf0f41424ed8a292ee482e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ArrayTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void test011() throws Exception", "signatureAfterChange": " public void test011() throws Exception", "diff": ["-\t\t\t\"        [pc: 15, line: 6]\\n\" +", "+\t\t\t\"        [pc: 12, line: 6]\\n\" +", "-\t\t\t\"        [pc: 5, pc: 15] local: all index: 1 type: java.lang.Object[][]\\n\" +", "+\t\t\t\"        [pc: 5, pc: 12] local: all index: 1 type: java.lang.Object[][]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a42e68a7fab8b8b6c536535c9b0a5e12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1316, "methodNumberAfterChange": 1316, "signatureBeforeChange": " public void test1282()", "signatureAfterChange": " public void test1282()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 8)\\r\\n\" +", "-\t\t\t\"\tcombine(too, oo);\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 8)\\n\" +", "+\t\t\t\"\tcombine(too, oo);\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4669348949d82c2a442c563b9093d4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "84c5b115e7466dfc6e19cd3055480421b2384a2d", "commitAfterChange": "1d6638787ae042a98f74eaa1a6155e74e1a941be", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void test014()", "signatureAfterChange": " \tpublic void test014()", "diff": ["-\t\t\t\t\"1 problem (1 error)\",", "+\t\t\t\t\"1 problem (1 error)\\n\",", "-\t\t\t\"1 problem (1 error)\";", "+\t\t\t\"1 problem (1 error)\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4721587a99a9b305594d641b42f4497", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1287, "methodNumberAfterChange": 1287, "signatureBeforeChange": " public void test1253()", "signatureAfterChange": " public void test1253()", "diff": ["-\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\"\tZork z;\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\"\tZork z;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4babb7d90e02d9507f178f85eff90fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java", "commitBeforeChange": "e164f6513264532353828b2bd9ce24ea60f98687", "commitAfterChange": "c39eeb0c7df54699bfd8493b726747537e3838f3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void testExternalFolder3() throws CoreException", "signatureAfterChange": " public void testExternalFolder3() throws CoreException", "diff": ["-\t\tString externalLib = getExternalFolder() + \"lib\";", "+\t\tString externalLib = getExternalFolder() + \"/lib\";", "-\t\tattachSource(root, getExternalFolder() + \"src\", \"\");", "+\t\tattachSource(root, getExternalFolder() + \"/src\", \"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4e3e9b2e46c2e8036a16c003f2e8c51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public void test0041()", "signatureAfterChange": "   public void test0041()", "diff": ["-\texpectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>};\";", "-\t\t\"      Object[] o = {<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      Object[] o = {<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a52bd808676496ca17c2b7eea8db2735", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 211, "signatureBeforeChange": " public void test0530_try_finally()", "signatureAfterChange": " public void test0530_try_finally()", "diff": ["-\t\t\"The variable x may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable x may be null at this location\\n\" + ", "-\t\t\"The variable y can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null pointer access: The variable y can only be null at this location\\n\" +  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5596096e996850a046b7df4f8614426", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void testAnonymousType2() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType2() throws JavaModelException", "diff": ["-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5f28cb53c4b70b8e44b5c18f84873dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 356, "methodNumberAfterChange": 356, "signatureBeforeChange": " public void test0356()", "signatureAfterChange": " public void test0356()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pro>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pro>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5fe0da4eeba8691c819469e049b6f5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 807, "methodNumberAfterChange": 809, "signatureBeforeChange": " public void test771() throws Exception", "signatureAfterChange": " public void test771() throws Exception", "diff": ["-\t\t\"\t\t\t\t\tMyE | FileNotFoundException | ArrayIndexOutOfBoundsException\\n\" + ", "-\t\t\"\t\t\t\t\t| IllegalArgumentException ex) {\\n\" + ", "+\t\t\"\t\t\t\t\tMyE | FileNotFoundException\\n\" + ", "+\t\t\"\t\t\t\t\t| ArrayIndexOutOfBoundsException | IllegalArgumentException ex) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a623f0677a3c2a432430367ebf1eb2d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test002() throws JavaModelException", "signatureAfterChange": " public void test002() throws JavaModelException", "diff": ["-\t\t\t\"      Foo f = (first, second) -> System.out.print(fi);\\n\" +", "+\t\t\t\"      Foo f = (first, second) -> System.out.print(fir);\\n\" +", "-\tString completeBehind = \"fi\";", "+\tString completeBehind = \"fir\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a66a4c2beb74c81888e01bd74fd2c2e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "53df7d602035de3d31fcc1ea92403ee3f66bc84a", "commitAfterChange": "b501a050436f0ed4b21c2887b8c36095ae4a6672", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void test072()", "signatureAfterChange": " \tpublic void test072()", "diff": ["-\t\t\t\"\t         ^^^^^^\\n\" + ", "-\t\t\t\"b.fooC cannot be resolved or is not a field\\n\" + ", "+\t\t\t\"\t           ^^^^\\n\" + ", "+\t\t\t\"fooC cannot be resolved or is not a field\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a66a50290ac454fd5cc0e49ba438d69f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "4b34ac952495406305286be091754126c6d25593", "commitAfterChange": "a3337f44ed6348a5f4f65ab1b2584cb8125066c6", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 117, "signatureBeforeChange": " public void testBug286668() throws JavaModelException", "signatureAfterChange": " public void testBug286668() throws JavaModelException", "diff": ["-\t\t\"\t\tbuilder.append(\\\"abc\\\").append(\\\"def\\\").append(\\\"ghi\\\").append(\\\"jkl\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\\\"mno\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"pqr\\\").append(\\\"stu\\\").append(\\\"vwx\\\").append(\\\"yz\\\");\\n\" +", "+\t\t\"\t\tbuilder.append(\\\"abc\\\").append(\\\"def\\\").append(\\\"ghi\\\").append(\\\"jkl\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"mno\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"pqr\\\").append(\\\"stu\\\").append(\\\"vwx\\\").append(\\\"yz\\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a680aee2cf5ce62105767cc42a884538", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "52f6144c4e9af7092e9f26d44a5197a00c39427c", "commitAfterChange": "d53835fbcb5535de123ca93c273d07ecdeb87abc", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 194, "signatureBeforeChange": " public void testBug260381d() throws JavaModelException", "signatureAfterChange": " public void testBug260381d() throws JavaModelException", "diff": ["-\t\t\" *  @see Object <code>$Revision: 1.2 $ $Date: 2009/01/07 12:27:50 $ $Author:myself $ $Source: /projects/cvs/module/project/src/com/foo/Main.java,v $</code>\\n\" + ", "+\t\t\" *  @see Object <code>$Revision: 1.49 $ $Date: 2010/02/11 12:18:55 $ $Author: ffusier $ $Source: /cvsroot/eclipse/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java,v $</code>\\n\" + ", "-\t\t\" *      <code>$Revision: 1.2 $ $Date: 2009/01/07 12:27:50 $ $Author:myself $ $Source: /projects/cvs/module/project/src/com/foo/Main.java,v $</code>\\n\" + ", "+\t\t\" *      <code>$Revision: 1.49 $ $Date: 2010/02/11 12:18:55 $ $Author: ffusier $ $Source: /cvsroot/eclipse/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java,v $</code>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6898952c857173ed14273ebadb769ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "97e6eff65e04dce7acb3a4b10558d6e9ea7e0a37", "commitAfterChange": "c14519ea32a4ea1ee3309a157338e6ed1eb4f28f", "methodNumberBeforeChange": 276, "methodNumberAfterChange": 276, "signatureBeforeChange": " public void testBug309835_wksp2_01()", "signatureAfterChange": " public void testBug309835_wksp2_01()", "diff": ["-\t\t\"     * <a href=\\\"http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider\\\">\\n\" + ", "+\t\t\"     * <a href=\\\"http://download.oracle.com/javase/6/docs/technotes/guides/jar/jar.html#Service%20Provider\\\">\\n\" + ", "-\t\t\"\t * \\\"http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider\\\"\\n\" + ", "+\t\t\"\t * \\\"http://download.oracle.com/javase/6/docs/technotes/guides/jar/jar.html#Service%20Provider\\\"\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6add550548597325fc66b45ddd59c18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void testTypeRef_InstanceOfWithParenthesis() throws CoreException", "signatureAfterChange": " public void testTypeRef_InstanceOfWithParenthesis() throws CoreException", "diff": ["-\t\t\"src/Test.java void Test.foo(Object) [\t\tif ((field instanceof \ufffd|Test|\ufffd)) {@85] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.foo(Object) [\t\tif ((param instanceof \ufffd|java.lang.Throwable|\ufffd)) {@122] EXACT_MATCH\"", "+\t\t\"src/Test.java void Test.foo(Object) [\t\tif ((field instanceof !|Test|!)) {@85] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.foo(Object) [\t\tif ((param instanceof !|java.lang.Throwable|!)) {@122] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6cc6265a20201e56d2ce197e00d103e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  public void test033() throws JavaModelException", "signatureAfterChange": "  public void test033() throws JavaModelException", "diff": ["-\t\t\"foo[JAVADOC_FIELD_REF]{{@link OtherFields#foo }, Ljavadoc.text.OtherFields;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "-\t\t\"foo[JAVADOC_VALUE_REF]{{@value OtherFields#foo }, Ljavadoc.text.OtherFields;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\"", "+\t\t\"foo[JAVADOC_FIELD_REF]{{@link OtherFields#foo}, Ljavadoc.text.OtherFields;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "+\t\t\"foo[JAVADOC_VALUE_REF]{{@value OtherFields#foo}, Ljavadoc.text.OtherFields;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6e661d634acff8af9f51771d638dd56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  public void test56()", "signatureAfterChange": "  public void test56()", "diff": ["-\t\t\"  int[] y = {0,1,};\\n\" + ", "+\t\t\"  int[] y = {0, 1};\\n\" + ", "-\t\t\"  int[] y = {0,1,};\\n\" + ", "+\t\t\"  int[] y = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6eb2f7cf6d8be582e802c5d90b844d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "4d9121ed2a04922a42c094ba9b1c4c45752bb46c", "commitAfterChange": "80cb491a0d87cd0b7ceb98c46af7cca4179710d0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testFindElementCompilationUnit() throws JavaModelException", "signatureAfterChange": " public void testFindElementCompilationUnit() throws JavaModelException", "diff": ["-\tIJavaElement element= project.findElement(new Path(\"x/y/A.java\"));", "+\tIJavaElement element= project.findElement(new Path(\"x/y/Main.java\"));", "-\t\t&& element.getElementName().equals(\"A.java\"));", "+\t\t&& element.getElementName().equals(\"Main.java\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a760d5f9ab5bbe965717f112c4a26d96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "9247f5a1413614555183073da9b25dcae829dcbb", "commitAfterChange": "ec2243f132866e54d9401c9f64dee23249b2b464", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-\t\t\"    -sourcepath <directories separated by \" + File.pathSeparator + \">\\n\" + ", "-\t\t\"                       specify location for application sources. Each directory can\\n\" + ", "+\t\t\"    -sourcepath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "+\t\t\"                       specify location for application sources. Each directory or file can\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a78340ef21abba9214fe4d1c43bce7dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "61742b7a485fa965b2f7b05fc8eadc51ecd60a49", "commitAfterChange": "d304d5cd9d0c4f90c63a024d76dece50501ce7a8", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  public void test123() throws JavaModelException", "signatureAfterChange": "  public void test123() throws JavaModelException", "diff": ["-\t\t\"xtm[JAVADOC_PARAM_REF]{xtm, null, null, xtm, null, \"+this.positions+\"14}\\n\" +", "-\t\t\"xtc[JAVADOC_PARAM_REF]{xtc, null, null, xtc, null, \"+this.positions+\"13}\\n\" +", "+\t\t\"xtm[JAVADOC_PARAM_REF]{xtm, null, null, xtm, null, \"+this.positions+\"19}\\n\" +", "+\t\t\"xtc[JAVADOC_PARAM_REF]{xtc, null, null, xtc, null, \"+this.positions+\"18}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7846664a93f1525ddabf7c8254030c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test035()", "signatureAfterChange": " \tpublic void test035()", "diff": ["-\t\t\t\"1. ERROR in C.java (at line 6)\\r\\n\" +", "-\t\t\t\"\tvoid test() { foo(1); }\\r\\n\" +", "+\t\t\t\"1. ERROR in C.java (at line 6)\\n\" +", "+\t\t\t\"\tvoid test() { foo(1); }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7dca0ced6d8b166309812b8a418eb47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug101283d()", "signatureAfterChange": " \tpublic void testBug101283d()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7fb6ad4b7a3b5dfb9c70bc1be34eb6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "commitAfterChange": "f391db9dfa982dbe09df7c4d362cd9e5a8546769", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public IPath getPath(int index) throws IOException", "signatureAfterChange": "\r public IPath getPath(int index) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "+\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "+\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8286762c4a945571a62f71715a91a0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 296, "methodNumberAfterChange": 297, "signatureBeforeChange": " public void test0953_assert_combined()", "signatureAfterChange": " public void test0953_assert_combined()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\"\tif (o1 == null) { };\\n\" + ", "-\t\t\"\t    ^^\\n\" + ", "-\t\t\"The variable o1 cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\tif (o2 == null) { };\\n\" + ", "-\t\t\"\t    ^^\\n\" + ", "-\t\t\"The variable o2 can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (o1 == null) { };\\n\" + ", "+\t\t\t\"\t    ^^\\n\" + ", "+\t\t\t\"Null comparison always yields false: The variable o1 cannot be null at this location\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tif (o2 == null) { };\\n\" + ", "+\t\t\t\"\t    ^^\\n\" + ", "+\t\t\t\"Redundant null check: The variable o2 can only be null at this location\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a85ec2cbf5be85a0b01d63549451a3b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "066f1fe71d5d139e5a681c9aeece89fa867b71b7", "commitAfterChange": "39951c3ce9f26380d44e65dd4f0a9c708c89c0d1", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void testExtraAttributes3() throws CoreException", "signatureAfterChange": " public void testExtraAttributes3() throws CoreException", "diff": ["-\t\t\t\"\t\t\t<attribute value=\\\"some value\\\" name=\\\"foo\\\"/>\\n\" + ", "-\t\t\t\"\t\t\t<attribute value=\\\"other value\\\" name=\\\"bar\\\"/>\\n\" + ", "+\t\t\t\"\t\t\t<attribute name=\\\"foo\\\" value=\\\"some value\\\"/>\\n\" + ", "+\t\t\t\"\t\t\t<attribute name=\\\"bar\\\" value=\\\"other value\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a86bb32ff10cb509fe0f4699dd09f034", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug80257()", "signatureAfterChange": " \tpublic void testBug80257()", "diff": ["-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8c36f47cd6549c0aaad4a1e190ecf33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "194abd534b611ec2d23ab367d4102b5723758d82", "commitAfterChange": "c7d3258ae74375a57da545fcb11a05d452eeaa7b", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic void test056() throws CoreException, IOException", "signatureAfterChange": " \tpublic void test056() throws CoreException, IOException", "diff": ["-\t\t\t\t\"Lp/X$Y<Lp/X;:TK;Lp/X;:TV;>;^1\"", "+\t\t\t\t\"Lp/X$Y<Lp/X;:TK;Lp/X;:TV;>;\"", "-\t\t\t\t\"Lp/X$Y<Lp/X;:TK;Lp/X;:TV;>;^1\",", "+\t\t\t\t\"Lp/X$Y<Lp/X;:TK;Lp/X;:TV;>;\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8c40ddefb1aa136efc4600a89e2d796", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testDeleteCompilationUnit3() throws CoreException", "signatureAfterChange": " public void testDeleteCompilationUnit3() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d0be0f685e1e0444aa79a448348d95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t\tprotected void writeLine() throws CoreException", "signatureAfterChange": " \t\tprotected void writeLine() throws CoreException", "diff": ["-\t\t\t\t\t\t\t\tthis.line.append(\"\ufffd|\");", "+\t\t\t\t\t\t\t\tthis.line.append(\"!|\");", "-\t\t\t\t\t\t\t\tthis.line.append(\"|\ufffd\");", "+\t\t\t\t\t\t\t\tthis.line.append(\"|!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8f1e6f811b9516af97053cd37897360", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "commitAfterChange": "e6d8789df9b4566a0124edc04d16cdf543582e67", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t\t\t\t\"\t@SuppressWarnings(\\\"unlikely-arg-type\\\")\\n\" +", "+\t\t\t\t\"\\n\" +", "-\t\t\t\"\t@SuppressWarnings(\\\"unlikely-arg-type\\\")\\n\" +", "+\t\t\t\"\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8f8fd22e6b19f4dc410b487a4347646", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "9c377922fe401713f5937bb475dd1fc1bedb4d8f", "commitAfterChange": "6a9a7eb1601e3179b18eecef90d5d4fdfbc52bfa", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " public void testOutputFolder1() throws CoreException", "signatureAfterChange": " public void testOutputFolder1() throws CoreException", "diff": ["-\t\t\"Missing required source folder: \\'P/src1\\'.\\n\" + ", "-\t\t\"Missing required source folder: \\'P/src2\\'.\",", "+\t\t\"Project P is missing required source folder: 'src1'.\\n\" + ", "+\t\t\"Project P is missing required source folder: 'src2'.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9bdb74de8ee45ea89105b5801a670a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void testTypeSingleArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testTypeSingleArgument02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa1b2de90c87d894d41295bbc2454e00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "37a33fa365c1afc824ee6b5c0e146fff8db0d79c", "commitAfterChange": "254a144fb8ad02730db7fb5ae51a3f1d563a3301", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void test01()", "signatureAfterChange": " public void test01()", "diff": ["-\t\tString commandLine = \"-classpath \\\"D:/a folder\\\";d:/jdk1.4/jre/lib/rt.jar -1.4 -preserveAllLocals -g -verbose d:/eclipse/workspaces/development2.0/plugins/Crap/src2/ -d d:/test\";", "-\t\tString expected = \" <-classpath> <D:/a folder;d:/jdk1.4/jre/lib/rt.jar> <-1.4> <-preserveAllLocals> <-g> <-verbose> <d:/eclipse/workspaces/development2.0/plugins/Crap/src2/> <-d> <d:/test>\";", "+\t\tString commandLine = \"-classpath \\\"D:/a folder\\\";d:/jdk1.4/jre/lib/rt.jar -1.4 -preserveAllLocals -g -verbose d:/eclipse/workspaces/development2.0/plugins/Bar/src2/ -d d:/test\";", "+\t\tString expected = \" <-classpath> <D:/a folder;d:/jdk1.4/jre/lib/rt.jar> <-1.4> <-preserveAllLocals> <-g> <-verbose> <d:/eclipse/workspaces/development2.0/plugins/Bar/src2/> <-d> <d:/test>\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa49ff357d1aa4b5b6ad89ebe46c256b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationCompletionParserTest.java", "commitBeforeChange": "63d13898e414da27bb1c178ed93753184a2e7833", "commitAfterChange": "a489ce78e2eb32838e144c0480573d4783205f0f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void test0001()", "signatureAfterChange": "  public void test0001()", "diff": ["-\t\t\"public class X {\\n\" + ", "-\t\t\"  public X() {\\n\" + ", "+\t\t\"class X {\\n\" + ", "+\t\t\"  X() {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa84eef77317e300c4dfe90e73abeeb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForConstructor.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test044()", "signatureAfterChange": "  \tpublic void test044()", "diff": ["-\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Vector cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Vector cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa9e84502c454ac12ad0484357e3c7e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForConstructor.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void test010()", "signatureAfterChange": " \tpublic void test010()", "diff": ["-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaa631d65e7b8ace6e9df6302f954b84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/LocalElementTests.java", "commitBeforeChange": "f08e2fcfb74b9a513988b6c92b3d0f1c94eb6ecf", "commitAfterChange": "c35e0ba6a6bce7272fb4c8d0b339e50b59e7d2a3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void testGetType()", "signatureAfterChange": " \tpublic void testGetType()", "diff": ["-\t\t\t\"<anonymous #1> [in foo [in X [in X.java [in <default> [in <project root> [in P]]]]]]\\n\" + ", "-\t\t\t\"Z [in foo [in X [in X.java [in <default> [in <project root> [in P]]]]]]\",", "+\t\t\t\"<anonymous #1> [in foo(int, String) [in X [in X.java [in <default> [in <project root> [in P]]]]]]\\n\" + ", "+\t\t\t\"Z [in foo(int, String) [in X [in X.java [in <default> [in <project root> [in P]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aae0582d6f36f893a29d4252bb047d07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForClass.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic void test044()", "signatureAfterChange": "  \tpublic void test044()", "diff": ["-\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Vector cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Vector cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aafb8c79ae9a58406e7cab602be4ee96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tpublic void test037()", "signatureAfterChange": "  \tpublic void test037()", "diff": ["-\t\t\t\t\t+ \"}\\n\" },", "-\t\t\t\"----------\\n\"", "-\t\t\t\t+ \"1. ERROR in X.java (at line 4)\\n\"", "-\t\t\t\t+ \"\t* @param java.lang.Hashtable\\n\"", "-\t\t\t\t+ \"\t         ^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Parameter java is not declared\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"2. ERROR in X.java (at line 6)\\n\"", "-\t\t\t\t+ \"\tpublic void p_foo(int x) {\\n\"", "-\t\t\t\t+ \"\t                      ^\\n\"", "-\t\t\t\t+ \"Javadoc: Missing tag for parameter x\\n\"", "-\t\t\t\t+ \"----------\\n\");", "+\t\t\t\t\t+ \"}\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t* @param java.lang.Hashtable\\n\" + ", "+\t\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tpublic void p_foo(int x) {\\n\" + ", "+\t\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\t\"Javadoc: Missing tag for parameter x\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aafc059a7e5476473784a4cd60c6d5d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void test047()", "signatureAfterChange": " \tpublic void test047()", "diff": ["-\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab3e22ea3b9d1592437f93f054d0b5a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NamingConventionTests.java", "commitBeforeChange": "da348589e3fa3fe0a889394dbec5343c317d63e7", "commitAfterChange": "cfb672e66d17bef31f4b5a6058666168ba53b0d0", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void testSuggestFieldName036()", "signatureAfterChange": " public void testSuggestFieldName036()", "diff": ["-\t\t\"myFirst_9Type\\n\" + //$NON-NLS-1$", "-\t\t\"first_9Type\\n\" + //$NON-NLS-1$", "-\t\t\"type\", //$NON-NLS-1$", "+\t\t\t\"myFirst_9_Type\\n\" + ", "+\t\t\t\"first_9_Type\\n\" + ", "+\t\t\t\"type\", //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab440f4b8a78a35722693947b03863f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void test077()", "signatureAfterChange": " \tpublic void test077()", "diff": ["-\t\t\t\"Unsafe type operation: Should not invoke the constructor X(T) of raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The constructor X(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not invoke the constructor X(X<T>) of raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The constructor X(X) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac52cdc335798e2281ec70c2c88085e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "fb0020e27808c429f3f311a11ef0ea9ea04441aa", "commitAfterChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void testNullTypeInference3c()", "signatureAfterChange": " \tpublic void testNullTypeInference3c()", "diff": ["-\t\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Contradictory null annotations: method was inferred as \\'Collection<@NonNull @Nullable String> map2(Collection<@NonNull @Nullable Object>, Function<@NonNull @Nullable Object,@NonNull @Nullable String>)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + ", "+\t\t\t\"\t     ^^^^^^\\n\" + ", "+\t\t\t\"Contradictory null annotations: method was inferred as \\'Collection<@NonNull String> map2(Collection<@NonNull @Nullable Object>, Function<@NonNull @Nullable Object,@NonNull String>)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac6f600e0c5d834608a1489669faf74b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "613465937083a08b2d994b2ce9b19aa8585cfd49", "commitAfterChange": "e589570c4bd9e6c5ed804728bca5f124c9938845", "methodNumberBeforeChange": 1371, "methodNumberAfterChange": 1371, "signatureBeforeChange": " public void test1337()", "signatureAfterChange": " public void test1337()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\tOther<String>.Member m = (Other<String>.Member) om2;\\n\" +", "-\t\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot cast from Other2.Member2<capture#1-of ?> to Other<String>.Member\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tOther<String>.Member m = (Other<String>.Member) om2;\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Other2.Member2<capture#1-of ?> to Other<String>.Member\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aca5e5820004979f268e95267b5865fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testBug027079c() throws JavaModelException", "signatureAfterChange": " public void testBug027079c() throws JavaModelException", "diff": ["-\t\t\"\t\t/** formatted comment */\\n\" + ", "-\t\t\"\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + ", "+\t\t\"\t\t\t\t/** formatted comment */\\n\" + ", "+\t\t\"\t\t\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aca6d12a9599c5cf5b4aa6eb37c23337", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " \tpublic void test0547() throws JavaModelException", "signatureAfterChange": " \tpublic void test0547() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$74;\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$74;^1\", typeBinding.getKey());", "-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$100;\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$100;^1\", typeBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad0421bb47a95e4ba8e7d8c1aa6b1c25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 287, "methodNumberAfterChange": 287, "signatureBeforeChange": " public void testBug330313_wksp1_13()", "signatureAfterChange": " public void testBug330313_wksp1_13()", "diff": ["-\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0\\n\" + ", "-\t\t\"\t\t\t\t&& this.getNamesOfDeletedChildren().length == 0);\\n\" + ", "+\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0 && this\\n\" + ", "+\t\t\"\t\t\t\t\t.getNamesOfDeletedChildren().length == 0);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad1681d555b95082f3133a85be356f9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f0a2b85aaf6b088579e27d2ecfb4517d7d426ed6", "commitAfterChange": "358c2d9eead1a2ad620bfd0dec02e0a53d937fcb", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 194, "signatureBeforeChange": " public void testBug260381d() throws JavaModelException", "signatureAfterChange": " public void testBug260381d() throws JavaModelException", "diff": ["-\t\t\" *  @see Object <code>$Revision: 1.49 $ $Date: 2010/02/11 12:18:55 $ $Author: ffusier $ $Source: /cvsroot/eclipse/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java,v $</code>\\n\" + ", "+\t\t\" *  @see Object <code>$Revision: 1.50 $ $Date: 2010/02/11 13:57:40 $ $Author: ffusier $ $Source: /cvsroot/eclipse/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java,v $</code>\\n\" + ", "-\t\t\" *      <code>$Revision: 1.49 $ $Date: 2010/02/11 12:18:55 $ $Author: ffusier $ $Source: /cvsroot/eclipse/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java,v $</code>\\n\" + ", "+\t\t\" *      <code>$Revision: 1.50 $ $Date: 2010/02/11 13:57:40 $ $Author: ffusier $ $Source: /cvsroot/eclipse/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java,v $</code>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad16bee9ad874e33fa7f717f81cc3410", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "37a33fa365c1afc824ee6b5c0e146fff8db0d79c", "commitAfterChange": "254a144fb8ad02730db7fb5ae51a3f1d563a3301", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "  public void test92()", "signatureAfterChange": "  public void test92()", "diff": ["-\t\t\"\tpublic spew(Spew x, int y);\t\\n\"+", "+\t\t\"\tpublic fred(Fred x, int y);\t\\n\"+", "-\t\t\"  public spew(Spew x, int y) {\\n\" + ", "+\t\t\"  public fred(Fred x, int y) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad28fe5186dbeb36a8094b7c7fd1b10c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 127, "signatureBeforeChange": " public void testTypeReference2() throws CoreException", "signatureAfterChange": " public void testTypeReference2() throws CoreException", "diff": ["-\t\t\"src/d7/A.java d7.A.A [A]\\n\" +", "-\t\t\"src/d7/A.java d7.A.A(A) -> A [A]\\n\" +", "-\t\t\"src/d7/A.java d7.A.A(A) -> A [A]\",", "+\t\t\"src/d7/A.java d7.A.A [A]\\n\" + ", "+\t\t\"src/d7/A.java A d7.A.A(A) [A]\\n\" + ", "+\t\t\"src/d7/A.java A d7.A.A(A) [A]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad7c983660489a346f0c635ffc5bd2b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "495647fc27f3ee65b1dc761ed141fc7f1d4222e1", "commitAfterChange": "5c3e3d5de78d44cce21c71744f14a64ef68307a6", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "\t  \tpublic void test047()", "signatureAfterChange": "\t  \tpublic void test047()", "diff": ["-\t\t\t\t\"\t\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\t\"\t\t\tSystem.out.println(\\\"SUCCESS\\\" + b);\\n\" + ", "-\t\t\t\"SUCCESS\");", "-\t}\t", "+\t\t\t\"SUCCESS2\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ada7b15a64aa2aece7c9c2c2523032bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void test013a()", "signatureAfterChange": " \tpublic void test013a()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tabstract class X1 extends A implements I {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tabstract class X1 extends A implements I {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ada9676519fabd6a01c54110bb9f70cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 351, "methodNumberAfterChange": 351, "signatureBeforeChange": " public void test200()", "signatureAfterChange": " public void test200()", "diff": ["-\t\t\t\t\"Method foo(Collection) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(Collection) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(Collection<String>) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(Collection<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adb9cd5bc0be8a7f4f23c73c1506cdc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 292, "signatureBeforeChange": " public void testBug313651_wksp3_02()", "signatureAfterChange": " public void testBug313651_wksp3_02()", "diff": ["-\t\t\"// start of comment\\n\" + ", "-\t\t\"// MyFirstInterface {\\n\" + ", "+\t\t\"\t\t// start of comment\\n\" + ", "+\t\t\"\t\t// MyFirstInterface {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2da01a416d9bb1a17b00cc92c035b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 318, "methodNumberAfterChange": 319, "signatureBeforeChange": " public void test1013()", "signatureAfterChange": " public void test1013()", "diff": ["-\t\t\"The variable x cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable x cannot be null at this location\\n\" + ", "-\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null pointer access: The variable x can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae38c274ee0544facf3a4abda6cb3246", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": " public void testTypeRefGenericsTest15_ClassInstanceCreation() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest15_ClassInstanceCreation() throws CoreException", "diff": ["-\t\t\"src/test15/Test.java Test test15.Test.foo() [\t\treturn new <String> \ufffd|Test|\ufffd(\\\"\\\");@108] EXACT_MATCH\\n\" +", "-\t\t\"src/test15/Test.java Test test15.Test.bar() [\t\treturn new \ufffd|Test|\ufffd();@156] EXACT_MATCH\"", "+\t\t\"src/test15/Test.java Test test15.Test.foo() [\t\treturn new <String> !|Test|!(\\\"\\\");@108] EXACT_MATCH\\n\" +", "+\t\t\"src/test15/Test.java Test test15.Test.bar() [\t\treturn new !|Test|!();@156] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aef512c298c2ff65ca9fcffd0e566ca8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "48774e458dcfc41c34b203c6488c7b9a8716e5cc", "commitAfterChange": "6224a5dcda094820e09b86e019ae927259ff3273", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void testBug232768_Block03() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Block03() throws JavaModelException", "diff": ["-\t\t\"\\n\" +", "-\t\t\"\t/*\\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /*\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af5df7a1675c34a9fd0c396fff9aa048", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test042()", "signatureAfterChange": " \tpublic void test042()", "diff": ["-\t\t\t\"1. ERROR in ImportTest.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tstatic void printArgs(Object... args) { toString2(args); }\\r\\n\" +", "+\t\t\t\"1. ERROR in ImportTest.java (at line 4)\\n\" +", "+\t\t\t\"\tstatic void printArgs(Object... args) { toString2(args); }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afb5bf02476aea47b422eeae8bf10015", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "b2b2f79127ceb81a70f0a7e9c4a14a4c97a6bb69", "commitAfterChange": "68d139bf0c56c6c993907701c5e076e9d3ee773d", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test0047()", "signatureAfterChange": " public void test0047()", "diff": ["-\t\t\"Syntax error, annotation declarations are only available if source level is 1.5\\n\" + ", "+\t\t\"Syntax error, annotation declarations are only available if source level is 5.0\\n\" + ", "-\t\t\"Syntax error, annotations are only available if source level is 1.5\\n\" + ", "+\t\t\"Syntax error, annotations are only available if source level is 5.0\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b009b93bc671deff1bba9644ffc6b4b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathInitializerTests.java", "commitBeforeChange": "20f9880068ffc8b9ca5e4df40a1417c5832ce46b", "commitAfterChange": "0fb012af3c6557520ab00415c58833602b027192", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void testContainerInitializer3() throws CoreException", "signatureAfterChange": " public void testContainerInitializer3() throws CoreException", "diff": ["-\t\t\t\"\tlib.jar[*]: {REMOVED FROM CLASSPATH}\\n\" + ", "-\t\t\t\"\tlib2.jar[*]: {ADDED TO CLASSPATH}\"", "+\t\t\t\"\t/P1/lib.jar[*]: {REMOVED FROM CLASSPATH}\\n\" + ", "+\t\t\t\"\t/P1/lib2.jar[*]: {ADDED TO CLASSPATH}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0479e14e5590919fb75b935fe1e6967", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " public void testBug311578b() throws JavaModelException", "signatureAfterChange": " public void testBug311578b() throws JavaModelException", "diff": ["-\t\t\"\t// //J-\\n\" + ", "+\t\t\"\t//// J-\\n\" + ", "-\t\t\"\t// //J+\\n\" + ", "+\t\t\"\t//// J+\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0701ca2af11277a82635b642615012f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "87035e28d15718dec923cda9730195aba7b8ab31", "commitAfterChange": "d7e74f0817baa712407da5eb003f21f0a3eeda6d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void test005()", "signatureAfterChange": " \tpublic void test005()", "diff": ["+\tpublic void test005() {", "-\tpublic void test005() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0774a657502bbac8f0396fd5ce4ba9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void testBug83230_Explicit03() throws CoreException", "signatureAfterChange": " \tpublic void testBug83230_Explicit03() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b080fd10a685a83c450a982d68a1e5c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForConstructor.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void test020()", "signatureAfterChange": " \tpublic void test020()", "diff": ["-\t\t\t\t\t+ \"\t * @see Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see AbstractVisibility.AvcPublic Valid ref: visible inner class of local class \\n\"", "-\t\t\t\t\t+ \"\t * @see test.Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see test.AbstractVisibility.AvcPublic Valid ref: visible inner class of local class \\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b08cb0f9cbca78534522e6b8117843c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "fa568df637cfba49109de9a23ecbf57eda89325f", "commitAfterChange": "699f85df0061a8b41250aa99562a0fc140375ee5", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void test0073() throws JavaModelException", "signatureAfterChange": " public void test0073() throws JavaModelException", "diff": ["-\t\t\t\t\"ZZZ2[METHOD_IMPORT]{ZZZ2;, Ltest0073.p.ImportedClass$Inner;, ()V, ZZZ2, null, [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"ZZZ2[METHOD_IMPORT]{ZZZ2;, Ltest0073.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\t\"ZZZ2[METHOD_NAME_REFERENCE]{ZZZ2;, Ltest0073.p.ImportedClass$Inner;, ()V, ZZZ2, null, [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"ZZZ2[METHOD_NAME_REFERENCE]{ZZZ2;, Ltest0073.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d57ebe6a7032077df8da117b2d8167", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void test0047()", "signatureAfterChange": " public void test0047()", "diff": ["-\t\t\"Syntax error, annotation declarations are only available if source level is 1.5\\n\" +", "+\t\t\"Syntax error, annotation declarations are only available if source level is 1.5 or greater\\n\" +", "-\t\t\"Syntax error, annotations are only available if source level is 1.5\\n\" +", "+\t\t\"Syntax error, annotations are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1108e9727949de7c8b784375a676375", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void test030()", "signatureAfterChange": " public void test030()", "diff": ["-\t\t\"myC1a cannot be resolved\\n\" + ", "+\t\t\"c1a cannot be resolved to a type\\n\" + ", "-\t\t\"myC1a cannot be resolved\\n\" + ", "-\t\t\"----------\\n\"", "-\t);\t\t\t\t\t\t\t\t\t", "+\t\t\"c1a cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\");\t\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b123fbab38c2bdc31aec0638184c4780", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "dbfe97bed3f7feb8408fadbcb58741aa04540553", "commitAfterChange": "3d86d8fdd283e92da8b2fd4ec59e7d2f2b4add9f", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void test036()", "signatureAfterChange": " public void test036()", "diff": ["-\t\t\"The method Y.foo() does not override the inherited method from X since it is private to a different package.\\n\" + ", "+\t\t\"The method Y.foo() does not override the inherited method from X since it is private to a different package\\n\" + ", "-\t\t\"This class must implement the inherited abstract method X.foo(), but cannot override it since it is not visible from Z. Either make the type abstract or make the inherited method visible.\\n\" + ", "+\t\t\"This class must implement the inherited abstract method X.foo(), but cannot override it since it is not visible from Z. Either make the type abstract or make the inherited method visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b125191fc91dd20bd5057ace9b7abdeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 838, "methodNumberAfterChange": 838, "signatureBeforeChange": " public void test0831()", "signatureAfterChange": " public void test0831()", "diff": ["-\t\t\"Type safety: The cast from Object to List<String> is actually checking against the erased type List\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to List<String>\\n\" + ", "-\t\t\"Type safety: The cast from Object to List<String> is actually checking against the erased type List\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to List<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b15bcdcc710e0ce847a07cdede441942", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "2881115df3db39d2fe7ea74c50c55027d1324a16", "commitAfterChange": "bbe5c2565fb8190610f9b139c18e465ccc5286bd", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": " public void testCompletionFindConstructor5() throws JavaModelException", "signatureAfterChange": " public void testCompletionFindConstructor5() throws JavaModelException", "diff": ["-\t\t\t\"Constructor5[ANONYMOUS_CLASS_DECLARATION]{, Lzconstructors.Constructor5;, (I)V, null, (arg0), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"Constructor5[METHOD_REF<CONSTRUCTOR>]{, Lzconstructors.Constructor5;, (I)V, Constructor5, (arg0), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"Constructor5[ANONYMOUS_CLASS_DECLARATION]{, Lzconstructors.Constructor5;, (I)V, null, (i), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"Constructor5[METHOD_REF<CONSTRUCTOR>]{, Lzconstructors.Constructor5;, (I)V, Constructor5, (i), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b161627a5a1cc7dcbf94d7ec23dad4d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "b7259e61ad84f1dda95b63bf74b4b4f38727c3a6", "commitAfterChange": "db331d5badcb0b35069c87387ccad89f9c226a52", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 210, "signatureBeforeChange": " public void testBug260381_wksp2_04() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_04() throws JavaModelException", "diff": ["-\t\t\"   * {@code ImmutableMultiset<Collection<String>>} containing one element (the\\n\" + ", "-\t\t\"   * given collection itself).\\n\" + ", "+\t\t\"   * {@code ImmutableMultiset<Collection<String>>} containing one element\\n\" + ", "+\t\t\"   * (the given collection itself).\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1779cdd9569f80c6e55e76d30c3a2b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void testBug96237_Public08()", "signatureAfterChange": " \tpublic void testBug96237_Public08()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1edfeb540f61592e0cd5ceb77fb8be7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic void test25() throws JavaModelException", "signatureAfterChange": "  \tpublic void test25() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest$107;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\",", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other {key=LTest$107;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1f823136289ba3e414c87e9b9af16f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " public void test0312_if_else()", "signatureAfterChange": " public void test0312_if_else()", "diff": ["-\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o cannot be null at this location\\n\" + ", "-\t\t\"The variable o may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1fb1602a60f315b12a1300cd4ae4f36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 288, "methodNumberAfterChange": 288, "signatureBeforeChange": " public void testBug330313_wksp1_13_njl()", "signatureAfterChange": " public void testBug330313_wksp1_13_njl()", "diff": ["-\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0 && this\\n\" + ", "-\t\t\"\t\t\t\t\t.getNamesOfDeletedChildren().length == 0);\\n\" + ", "+\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0\\n\" + ", "+\t\t\"\t\t\t\t&& this.getNamesOfDeletedChildren().length == 0);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b20cd6c9076f73fbf42a8b21c542515b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d53835fbcb5535de123ca93c273d07ecdeb87abc", "commitAfterChange": "19110d19d788201e42baa0e6fca2d157b16d02af", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": " public void test0459_while_nested()", "signatureAfterChange": " public void test0459_while_nested()", "diff": ["-\t\t\"1. ERROR in X.java (at line 11)\\r\\n\" +", "-\t\t\"\twhile (o == null) {\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 11)\\n\" +", "+\t\t\"\twhile (o == null) {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2109432fd03bca557dbf10d630f2bcf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4748f10b5a3e791bc8e4784d261c474bbab1449a", "commitAfterChange": "c3bed616fda9d34c9c223290e9dda976cadf693c", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 433, "signatureBeforeChange": " \tpublic void test429()", "signatureAfterChange": " \tpublic void test429()", "diff": ["-\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X5> and Comparable<Y>\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<Y> and Comparable<X5>\\n\" + ", "-\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X6> and Comparable<Z>\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<Z> and Comparable<X6>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b22b24e7cd36508f72936ab79a212695", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void test056i()", "signatureAfterChange": " public void test056i()", "diff": ["-\t\t\"Resource leak: 'fileReader' is never closed\\n\" + ", "+\t\t\"Resource leak: \\\"fileReader\\\" is never closed\\n\" + ", "-\t\t\"Potential resource leak: 'fileReader' may not be closed\\n\" + ", "+\t\t\"Potential resource leak: \\\"fileReader\\\" may not be closed\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b27d0d7dd419743fb29756077b69e87b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testAnonymousType5() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType5() throws JavaModelException", "diff": ["-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b28dc33127483225dd802018800a4656", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1168, "methodNumberAfterChange": 1168, "signatureBeforeChange": " public void test1139()", "signatureAfterChange": " public void test1139()", "diff": ["-\t\t\"1. ERROR in p\\\\X.java (at line 9)\\r\\n\" +", "-\t\t\"\tpublic class X extends Super<A<X>> {\\r\\n\" +", "+\t\t\"1. ERROR in p\\\\X.java (at line 9)\\n\" +", "+\t\t\"\tpublic class X extends Super<A<X>> {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2a8abad4abbffe91c42eb53a3cf056c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tpublic void test008()", "signatureAfterChange": "  \tpublic void test008()", "diff": ["-\t\t\t\"1. ERROR in ALL.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tclass C extends B { @Override public A foo() { return null; } }\\r\\n\" +", "+\t\t\t\"1. ERROR in ALL.java (at line 4)\\n\" +", "+\t\t\t\"\tclass C extends B { @Override public A foo() { return null; } }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2ea13e8e60bb3de6fdacc0251962cbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "f0f988f5ece8ab0a5ff8315152fd572c7964adb5", "commitAfterChange": "028f898f7afb803f90852bb4b65956b58cbfd780", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\t\t\t\t\"-warn:allDeprecation,noOpAssign,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$", "+\t\t\t\t\t\"-warn:allDeprecation,noEffectAssign,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$", "-\t\t\t\t\t\"-warn:noOpAssign,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$", "+\t\t\t\t\t\"-warn:noEffectAssign,constructorName,packageDefaultMethod,maskedCatchBlocks,unusedImports,staticReceiver\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2ea45e131e612859d9e67a880e4ac18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "ec2243f132866e54d9401c9f64dee23249b2b464", "commitAfterChange": "11fe35f9c407ba8445270c225d007172a716d5dc", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void testLocalVariableReference3() throws CoreException", "signatureAfterChange": " public void testLocalVariableReference3() throws CoreException", "diff": ["-    IClassFile classFile = getClassFile(\"JavaSearch\", \"test48725.jar\", \"p\", \"X.class\");", "+    IClassFile classFile = getClassFile(\"JavaSearch\", \"test48725.jar\", \"p48725\", \"X.class\");", "-\t\t\"test48725.jar int p.<anonymous>.bar()\",", "+\t\t\"test48725.jar int p48725.<anonymous>.bar()\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b30c86a875ad3e1685e4820f184e4bf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 308, "signatureBeforeChange": " public void test0308()", "signatureAfterChange": " public void test0308()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:fin>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:fin>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b30e735e847792eb0cfa223bc706002c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 443, "methodNumberAfterChange": 443, "signatureBeforeChange": " \tpublic void test0438()", "signatureAfterChange": " \tpublic void test0438()", "diff": ["-\t\t\t\"Unnecessary cast from capture-of ? extends T to T\\n\" + ", "+\t\t\t\"Unnecessary cast from capture#1-of ? extends T to T\\n\" + ", "-\t\t\t\"Type safety: The cast from capture-of ? super T to T is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"Type safety: The cast from capture#2-of ? super T to T is actually checking against the erased type Object\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3121225e8e0419424afe05e56a3b1f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void testBug400905_0001() throws CoreException", "signatureAfterChange": " public void testBug400905_0001() throws CoreException", "diff": ["-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [() ->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.doit() [() ->] EXACT_MATCH\"", "-\t);\t", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#1.lambda$1() [() ->] EXACT_MATCH\\n\" +\t\t\t", "+\t\t\t\"src/b400905/X.java int void b400905.X.doit():<lambda>#2.lambda$2() [() ->] EXACT_MATCH\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3141aaa12121675bf2d4a6540b0c6c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 131, "signatureBeforeChange": " \tpublic void testBug92944_CLASS_AND_ENUM() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_CLASS_AND_ENUM() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b386700ecb86d501538ecf44a140e53c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 464, "methodNumberAfterChange": 464, "signatureBeforeChange": " \tpublic void test0459()", "signatureAfterChange": " \tpublic void test0459()", "diff": ["-\t\t\t\"Type safety: Unchecked invocation getById(Class<capture-of ? extends Test>, Integer) of the generic method getById(Class<T>, Integer) of type Test.Manager<C>\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation getById(Class<capture#1-of ? extends Test>, Integer) of the generic method getById(Class<T>, Integer) of type Test.Manager<C>\\n\" + ", "-\t\t\t\"Type safety: The expression of type capture-of ? extends Test needs unchecked conversion to conform to ITest<C>\\n\" + ", "-\t\t\t\"----------\\n\"\t);", "+\t\t\t\"Type safety: The expression of type capture#1-of ? extends Test needs unchecked conversion to conform to ITest<C>\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b39ea2a7cfd881d7f4a0307bc56aea8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug101283d()", "signatureAfterChange": " \tpublic void testBug101283d()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class X<T, F> {\\n\" +", "-\t\t\t\"\t               ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\t* @see T Variable \\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\t* @see F Variable\\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\tclass Entry<L, R> {\\n\" +", "-\t\t\t\"\t            ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "+\t\t\t\"\t               ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @see T Variable \\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see F Variable\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tclass Entry<L, R> {\\n\" + ", "+\t\t\t\"\t            ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b42640bed2a5b3a97720d749b277f389", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "badff9a93fec2ed67e9ce195f8709b06674bcf81", "commitAfterChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "methodNumberBeforeChange": 999, "methodNumberAfterChange": 999, "signatureBeforeChange": " public void test0987()", "signatureAfterChange": " public void test0987()", "diff": ["-\t\t\"\t                    ^^^^^^^^^^^\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^\\n\" + ", "-\t\t\"\t                    ^^^^^^^^^^^\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4516bdc87c0320bac22be6ebf574371", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  public void test0072()", "signatureAfterChange": "  public void test0072()", "diff": ["-\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"      new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4a30d50f8e1af1f3beb2534155649e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testAnonymousType1() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType1() throws JavaModelException", "diff": ["-\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4b1ceea97ca32c0f1c0b87e5a61a556", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testDeltaDiscardPrimaryWorkingCopy2() throws CoreException", "signatureAfterChange": " \tpublic void testDeltaDiscardPrimaryWorkingCopy2() throws CoreException", "diff": ["-\t\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4f22a0036c7b65a1dbf1671354a544d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 74, "signatureBeforeChange": " public void testMethodDeclarationInHierarchyScope2() throws CoreException", "signatureAfterChange": " public void testMethodDeclarationInHierarchyScope2() throws CoreException", "diff": ["-\t\t\"src/p/X.java p.X.foo(int, String, X) -> void [foo]\\n\" +", "-\t\t\"src/p/Z.java p.Z.foo(int, String, X) -> void [foo]\", ", "+\t\t\"src/p/X.java void p.X.foo(int, String, X) [foo]\\n\" + ", "+\t\t\"src/p/Z.java void p.Z.foo(int, String, X) [foo]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4f8580ecac2eebaa517dad3360778d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void test016()", "signatureAfterChange": " \tpublic void test016()", "diff": ["-\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b50ee7859106d2b2b13e0018034722fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f5733c2118cce9570c584a3c84480228a3b7fc00", "commitAfterChange": "2325884dde9438b06c0c79c1dfd33a091d106072", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 433, "signatureBeforeChange": " \tpublic void test0429()", "signatureAfterChange": " \tpublic void test0429()", "diff": ["-\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<Y> and Comparable<X5>\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X5> and Comparable<Y>\\n\" + ", "-\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<Z> and Comparable<X6>\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X6> and Comparable<Z>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b51e8cc893a9b0f7b01d7d7797cf5ce7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void testFieldReference() throws CoreException", "signatureAfterChange": " public void testFieldReference() throws CoreException", "diff": ["-\t\t\"src/p8/A.java p8.A.m() -> void [g]\\n\" +", "-\t\t\"src/p8/A.java p8.B.m() -> void [g]\", ", "+\t\t\"src/p8/A.java void p8.A.m() [g]\\n\" + ", "+\t\t\"src/p8/A.java void p8.B.m() [g]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b527671ffeceedd6746421239eb4c189", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void testParameterizedTypeMultipleArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeMultipleArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b53d18689686c8a1ceaf9bef1c17fdd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  public void test31()", "signatureAfterChange": "  public void test31()", "diff": ["-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + ", "-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b55ee3878e746f2970c3e0c4420ef743", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "badff9a93fec2ed67e9ce195f8709b06674bcf81", "commitAfterChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 210, "signatureBeforeChange": " \tpublic void test074()", "signatureAfterChange": " \tpublic void test074()", "diff": ["-\t\t\t\"\t                                       ^^^^^^^\\n\" + ", "+\t\t\t\"\t                                  ^^^^\\n\" + ", "-\t\t\t\"\t                                       ^^^^^^^\\n\" + ", "+\t\t\t\"\t                                  ^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b57e489eb50bf8940cced041dd9f493d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test_nonnull_list_elements_03()", "signatureAfterChange": " \tpublic void test_nonnull_list_elements_03()", "diff": ["-\t\t\t\"Potential null pointer access: The variable l may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: this expression has a '@Nullable' type\\n\" + ", "-\t\t\t\"Potential null pointer access: The variable l may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: this expression has a '@Nullable' type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6210b725c9961ad50c22e647e5b5472", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 277, "methodNumberAfterChange": 277, "signatureBeforeChange": " \tpublic void test275()", "signatureAfterChange": " \tpublic void test275()", "diff": ["-\t\t\t\"Unsafe type operation: The return type List of the method useList(List) of type Y needs unchecked conversion to conform to the return type List<String> of inherited method\\n\" + ", "+\t\t\t\"Type safety: The return type List of the method useList(List) of type Y needs unchecked conversion to conform to the return type List<String> of inherited method\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not invoke the method add(E) of raw type List. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The method add(Object) belongs to the raw type List. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b63c9eb7b826806e8c0045f15e64bb50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/CompatibilityRulesTests.java", "commitBeforeChange": "2f6100c5f7b4bc3e90256fba53573c8e37b37527", "commitAfterChange": "0197b656327c42b2965c833fd2ce988e22a7b4a6", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test032() throws CoreException", "signatureAfterChange": " \tpublic void test032() throws CoreException", "diff": ["-\t\t\t\t\t\"/P/p1/X.java\",", "+\t\t\t\t\t\"/P2/p1/X.java\",", "-\t\t\t\t\t\"/P/p1/Y.java\",", "+\t\t\t\t\t\"/P2/p1/Y.java\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a45ecdabe5455c7f3103bb24ec0441", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "commitAfterChange": "a83a54ab80abf4613699946f179a101a3baa6d47", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public boolean build(SimpleLookupTable deltas)", "signatureAfterChange": "  public boolean build(SimpleLookupTable deltas)", "diff": ["-\t\t\tSystem.out.println(\"ABORTING incremental build... cannot find \" + e.qualifiedTypeName + //$NON-NLS-1$", "-\t\t\t\t\". Could have been renamed inside its existing source file.\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"ABORTING incremental build... problem with \" + e.qualifiedTypeName + //$NON-NLS-1$", "+\t\t\t\t\". Likely renamed inside its existing source file.\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b40bd337d3b9222b18689d9b87deb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void test095()", "signatureAfterChange": " \tpublic void test095()", "diff": ["-\t\t\t\t\t+ \"\t * @see Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see AbstractVisibility.AvcPublic Valid ref: visible inner class of local class \\n\"", "-\t\t\t\t\t+ \"\t * @see test.Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see test.AbstractVisibility.AvcPublic Valid ref: visible inner class of local class \\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6be97e47774183e38309f48a7919929", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic void test024a()", "signatureAfterChange": " \tpublic void test024a()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 5)\\r\\n\" +", "-\t\t\t\"\tpublic <E extends Object> void m(E e) {}\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 5)\\n\" +", "+\t\t\t\"\tpublic <E extends Object> void m(E e) {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6bef862956538743ab634abbd703558", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " public void testBug400905_0013b() throws CoreException", "signatureAfterChange": " public void testBug400905_0013b() throws CoreException", "diff": ["-\t\tassertSearchResults(\"src/X.java int int void X.zoo():<lambda>#1.lambda$1(X):<lambda>#2.lambda$2(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1(X) [X] EXACT_MATCH\");", "+\t\tassertSearchResults(\"src/X.java int int void X.zoo():Lambda(I).doit(X):Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6d2daacf0a1ee295b2dc98d3a162058", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 193, "methodNumberAfterChange": 193, "signatureBeforeChange": " public void testBug264112_wksp1_02()", "signatureAfterChange": " public void testBug264112_wksp1_02()", "diff": ["-\t\t\"\t\t\tbuffer.append(\\\"- possible values:\t[\\\"); //$NON-NLS-1$ \\n\" + ", "-\t\t\"\t\t\tbuffer.append(\\\"]\\\\n\\\"); //$NON-NLS-1$ \\n\" + ", "+\t\t\"\t\t\tbuffer.append(\\\"- possible values:\t[\\\"); //$NON-NLS-1$\\n\" + ", "+\t\t\"\t\t\tbuffer.append(\\\"]\\\\n\\\"); //$NON-NLS-1$\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b709a0d3b5caa20a39d9fedc327b2d0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test031()", "signatureAfterChange": " \tpublic void test031()", "diff": ["-\t\t\t\"!*\",", "-\t\t\t\"!*\"", "+\t\t\t\"*\",", "+\t\t\t\"Ljava/util/List;!*123;\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74754e71c65f43b3245ec6a3c320a67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "methodNumberBeforeChange": 381, "methodNumberAfterChange": 381, "signatureBeforeChange": "  public void test1023()", "signatureAfterChange": "  public void test1023()", "diff": ["-\t\t\t\"  void foo() {\\n\" +", "+\t\t\t\"  void foo(Object that) {\\n\" +", "-\t\t\t\"    while (this != null) {\\n\" +", "+\t\t\t\"    while (that != null) {\\n\" +", "-\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 13)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74b71168e2b9fc1ab2552e33ad6bd1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void testTypeSingleArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testTypeSingleArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b80397818af0ff2499c4703dd43c8c68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " public void test0163()", "signatureAfterChange": " public void test0163()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pro>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pro>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8167e44d19f49a7f906e5b94bd57bf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tpublic void test009()", "signatureAfterChange": "  \tpublic void test009()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tabstract class A implements I { void foo(G<A> x) {} }\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 3)\\n\" +", "+\t\t\t\"\tabstract class A implements I { void foo(G<A> x) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b820507b7cb8664bde0a852deb2c685d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClassFileTests.java", "commitBeforeChange": "2881115df3db39d2fe7ea74c50c55027d1324a16", "commitAfterChange": "bbe5c2565fb8190610f9b139c18e465ccc5286bd", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void testRawParameterNames02() throws CoreException", "signatureAfterChange": " public void testRawParameterNames02() throws CoreException", "diff": ["-\t\t\t\"arg0\\n\" +", "-\t\t\t\"arg1\\n\",", "+\t\t\t\"key\\n\" +", "+\t\t\t\"value\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b824605297dfd921cd8298c088526d57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void testBug400905_0013b() throws CoreException", "signatureAfterChange": " public void testBug400905_0013b() throws CoreException", "diff": ["-\t\tassertSearchResults(\"src/X.java int int void X.zoo():Lambda(I).doit(X):Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\");", "+\t\tassertSearchResults(\"src/X.java int int void X.zoo():<lambda #1>.doit(X):<lambda #1>.doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda #1>.doit(X) [X] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b88c19d4be7ffc5f63aa1800cd9eafdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "130cb4765fd3f636bbf53ed159d4905dec0a5fd5", "commitAfterChange": "938f4b2ad6ef3c12e60db3be23aed731979677d7", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test054()", "signatureAfterChange": " \tpublic void test054()", "diff": ["-\t\t\t\t\"The argument of type Integer[] should explicitly be cast to Object[] for the invocation of the varargs method varargs(Object...) from type X. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\t\"Type Integer[] of the last argument to method varargs(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\t\"The argument of type Integer[] should explicitly be cast to Object[] for the invocation of the varargs method varargs(Object...) from type X. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\t\"Type Integer[] of the last argument to method varargs(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8b248d3d325725309dbeabe336a9263", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "58aaea35ae4c64a4ecebe06d6b1ab1679e04698a", "commitAfterChange": "d5df66f62f879926d0ab37840f8644f7133a2a54", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": "     public void test119()", "signatureAfterChange": "     public void test119()", "diff": ["-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"The constructor X() is deprecated\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"The type X is deprecated\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8bcfc0f34e0aaa46019bb6f4e294ecd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "75fd26922e4c1a3951587500ef0d4c4aec9b93ba", "commitAfterChange": "ec933200149b0beb2aa7f1482e62f6a573c5bd61", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": "     public void test139()", "signatureAfterChange": "     public void test139()", "diff": ["-            \"----------\\n\" + ", "+    \t\t\"----------\\n\" + ", "-    \t\t\"Unhandled warning token zork\\n\" + ", "+    \t\t\"Unsupported @SuppressWarnings(\\\"zork\\\")\\n\" + ", "-    \t\t\"Unhandled warning token warningToken\\n\" + ", "+    \t\t\"Unsupported @SuppressWarnings(\\\"warningToken\\\")\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8bf283b176cd24216e154a77a3e1ea3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void test048() throws Exception", "signatureAfterChange": " public void test048() throws Exception", "diff": ["-\t\t\t\t\"        [pc: 29, line: 53]\\n\" +", "+\t\t\t\t\"        [pc: 29, line: 55]\\n\" +", "-\t\t\t\"        [pc: 29, line: 53]\\n\" +", "+\t\t\t\"        [pc: 29, line: 55]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8d10c2cfe14c4ee8048e72fb4992ce2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void testBug82208_ENUM() throws CoreException", "signatureAfterChange": " \tpublic void testBug82208_ENUM() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8dc8709f2cbe4028bdb489fb1dc1b03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "2a7eee99ab88729e1a4280573683337b8f71e818", "commitAfterChange": "0ac6b5233e70725ef3995b23684749c5c5bb399b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void test000()", "signatureAfterChange": " \tpublic void test000()", "diff": ["-\t\t\t\t\t\"\tFREDERIC;\\n\" + ", "+\t\t\t\t\t\"\tFREDERIC(54);\\n\" +  // TODO (frederic) check value", "-\t\t\t\"JDTCore team: PHILIPPE:37:SNZ:M DAVID:27:SNZ:D JEROME:33:SNZ:D OLIVIER:35:OTT:D KENT:40:OTT:D FREDERIC:0:SNZ:D\"", "+\t\t\t\"JDTCore team: PHILIPPE:37:SNZ:M DAVID:27:SNZ:D JEROME:33:SNZ:D OLIVIER:35:OTT:D KENT:40:OTT:D FREDERIC:54:SNZ:D\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8ddc05a6475df23f8723a6cf819564f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test009()", "signatureAfterChange": " \tpublic void test009()", "diff": ["-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8f56fac198ae6314244f0a5b41d96db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " \tpublic void test0139() throws JavaModelException", "signatureAfterChange": " \tpublic void test0139() throws JavaModelException", "diff": ["-\t\tString expectedContents = \"public class Test {\\r\\n\" +//$NON-NLS-1$", "-\t\t\t\"  int i;\\r\\n\"  +//$NON-NLS-1$", "+\t\tString expectedContents = \"public class Test {\\n\" +//$NON-NLS-1$", "+\t\t\t\"  int i;\\n\"  +//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8fd5ec631051b16b5f8c4e063025922", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testDeleteSyntaxErrorInMethod1() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorInMethod1() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9014adc716a05c88cc35bf431602ee2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": " \tpublic void test0135() throws JavaModelException", "signatureAfterChange": " \tpublic void test0135() throws JavaModelException", "diff": ["-\t\tjavadoc.setComment(\"/** JavaDoc Comment\\r\\n  */\");//$NON-NLS-1$*/", "+\t\tjavadoc.setComment(\"/** JavaDoc Comment*/\");//$NON-NLS-1$*/", "-\t\tcheckSourceRange(node, \"/** JavaDoc Comment\\r\\n  */\\r\\n  int i;\", source); //$NON-NLS-1$", "+\t\tcheckSourceRange(node, \"/** JavaDoc Comment*/\\n  int i;\", source); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba06dd7c775dd4ee298441e6378d4301", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 287, "methodNumberAfterChange": 287, "signatureBeforeChange": " public void testBug330313_wksp1_13()", "signatureAfterChange": " public void testBug330313_wksp1_13()", "diff": ["-\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0 && this\\n\" + ", "-\t\t\"\t\t\t\t\t.getNamesOfDeletedChildren().length == 0);\\n\" + ", "+\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0\\n\" + ", "+\t\t\"\t\t\t\t&& this.getNamesOfDeletedChildren().length == 0);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba4c31bbd4773bbe6bb4a8e514103fd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java", "commitBeforeChange": "e164f6513264532353828b2bd9ce24ea60f98687", "commitAfterChange": "c39eeb0c7df54699bfd8493b726747537e3838f3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void testExternalFolder1() throws CoreException", "signatureAfterChange": " public void testExternalFolder1() throws CoreException", "diff": ["-\t\tlib.createLink(new Path(getExternalFolder() + \"lib\"), IResource.NONE, null);", "+\t\tlib.createLink(new Path(getExternalFolder() + \"/lib\"), IResource.NONE, null);", "-\t\tattachSource(root, getExternalFolder() + \"src\", \"\");", "+\t\tattachSource(root, getExternalFolder() + \"/src\", \"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba9b2ea528134b30ed014e32567108cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "5ae7e6b78bc18a365a04a008c907250a535fa48a", "commitAfterChange": "e30351551cacd61d107b0f2c8e2d961ea6077c69", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void test0016()", "signatureAfterChange": " public void test0016()", "diff": ["-\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\"\t         ^\\n\" + ", "-\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\"\t         ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab2d2f3a27002ad3a3639a248c7570b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82d58f9af854b98a92f7d694d40ac1e84e13013c", "commitAfterChange": "6d114aac1fbfd4c23041534efbb02c24c883ba25", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void test054()", "signatureAfterChange": " public void test054()", "diff": ["-\t\"----------\\n\" + ", "-\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\"\tA() {}\\n\" + ", "-\t\"\t    ^\\n\" + ", "-\t\"The type new X(){} must implement the inherited abstract method X.foo()\\n\" + ", "-\t\"----------\\n\"", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tA() {}\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A must define the abstract method foo()\\n\" + ", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babd0fc4e55cb6b02f7c35f260868d83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "37d67ed9fa27dc85b6112e216c3af6d687e12530", "commitAfterChange": "8924c9453af0fcfcdde960b7165abadc76ad272e", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " \tpublic void test094()", "signatureAfterChange": " \tpublic void test094()", "diff": ["-\t\t\t\"  private X(java.lang.String arg, int arg);\\n\" + ", "+\t\t\t\"  private X(java.lang.String arg0, int arg1);\\n\" + ", "-\t\t\t\"  public static final X valueOf(java.lang.String arg);\\n\" + ", "+\t\t\t\"  public static final X valueOf(java.lang.String arg0);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babd654b0a1768082cf5a7be0c90d131", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "e33ceacdb6e9b17f29de3a23e3df28f1c6bec162", "commitAfterChange": "81fe472327b51c234112233c89df88e95ab01675", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  public void testClasspathValidation11() throws CoreException", "signatureAfterChange": "  public void testClasspathValidation11() throws CoreException", "diff": ["-\t\t\t\"should not allow nested library folder in output folder\", ", "-\t\t\t\"Cannot nest '/P/lib' inside output folder '/P'.\",", "+\t\t\t\"should allow nested library folder in output folder\", ", "+\t\t\t\"OK\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf5d19e577872b4bf20fd2638bebab5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathInitializerTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testContainerInitializer4() throws CoreException", "signatureAfterChange": " public void testContainerInitializer4() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bafb00ddc6a6fc453d441ad92c9becfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/LocalElementTests.java", "commitBeforeChange": "ab96412d63e51e1fd7275237e383b745dfdb6660", "commitAfterChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void testAnonymousType3() throws CoreException", "signatureAfterChange": " \tpublic void testAnonymousType3() throws CoreException", "diff": ["-\t\t\t\t\"      class <anonymous>\\n\" + ", "+\t\t\t\t\"      class <anonymous #1>\\n\" + ", "-\t\t\t\t\"          class <anonymous>\\n\" + ", "+\t\t\t\t\"          class <anonymous #1>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb19ef5ddace44a440b623cdad12e5b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testMoveSourceFolder6() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder6() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbb55cd15cf320243e3fe5ffd8f6db31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug101283d()", "signatureAfterChange": " \tpublic void testBug101283d()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "-\t\t\t\"\t               ^^^^\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t* @see T Variable \\n\" + ", "-\t\t\t\"\t       ^\\n\" + ", "-\t\t\t\"Javadoc: Invalid reference\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t* @see F Variable\\n\" + ", "-\t\t\t\"\t       ^\\n\" + ", "-\t\t\t\"Javadoc: Invalid reference\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tclass Entry<L, R> {\\n\" + ", "-\t\t\t\"\t            ^^^^\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic class X<T, F> {\\n\" +", "+\t\t\t\"\t               ^^^^\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\t* @see T Variable \\n\" +", "+\t\t\t\"\t       ^\\n\" +", "+\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\t* @see F Variable\\n\" +", "+\t\t\t\"\t       ^\\n\" +", "+\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\"\tclass Entry<L, R> {\\n\" +", "+\t\t\t\"\t            ^^^^\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbbb0cd77742f689be30170531584695", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "9bef3f15c43b07a14e76957980f62386b2bcee10", "commitAfterChange": "73f504e7d77d95d8fc2d6621b5727e1e3ab07530", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " public void test067()", "signatureAfterChange": " public void test067()", "diff": ["-\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^\\n\" + ", "-\t\t\"\t^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbcc9c8e61dd7211acc43f1af403b23a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "572021b99f292f39a76e81c2ea834ac6a839b00b", "commitAfterChange": "727d8ca46d64642ad4f629f81ba37e76e7ae8c85", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void testBug232768_Javadoc02() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Javadoc02() throws JavaModelException", "diff": ["-\t\t\"\t\\n\" +", "-\t\t\"        /**\\n\" +", "+\t\t\"\\n\" +", "+\t\t\"\t/**\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbd7c280a560478182118e86c939f00e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "48774e458dcfc41c34b203c6488c7b9a8716e5cc", "commitAfterChange": "6224a5dcda094820e09b86e019ae927259ff3273", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " public void testBug232768_Javadoc03() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Javadoc03() throws JavaModelException", "diff": ["-\t\t\"\\n\" +", "-\t\t\"\t/**\\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /**\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbf913c81846f3022eb33116fdb670b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 170, "signatureBeforeChange": " \tpublic void test050j()", "signatureAfterChange": " \tpublic void test050j()", "diff": ["-\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" +", "+\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc0fd1f9d681e63923e5e3ad1e960fef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "45a4bf71a614f82f4a9506597605186918f4c34e", "commitAfterChange": "ae712f0ebf4829621147d487684cd97c94226b25", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test054()", "signatureAfterChange": " \tpublic void test054()", "diff": ["-\t// TODO (olivier) update once https://bugs.eclipse.org/bugs/show_bug.cgi?id=79798 is fixed", "-\t\t\t\t\"    short value() default (short) 0;\\n\" + ", "+\t\t\t\t\"    short value() default 0;\\n\" + ", "-\t\t\t\t\"    @I((short)2) void foo() {\\n\" + ", "+\t\t\t\t\"    @I(2) void foo() {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc1af6f56bdb4059a578d9eeb0c07298", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 134, "signatureBeforeChange": " \tpublic void testBug92944_ANNOTATION_TYPE() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_ANNOTATION_TYPE() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc5e1983836a2cf5c58e998fab13923a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void test002() throws Exception", "signatureAfterChange": " \tpublic void test002() throws Exception", "diff": ["-\t\t\t\t\"        [pc: 40, line: 16]\\n\" +", "+\t\t\t\t\"        [pc: 37, line: 16]\\n\" +", "-\t\t\t\t\"        [pc: 12, pc: 40] local: j index: 5 type: int\\n\" +", "+\t\t\t\t\"        [pc: 12, pc: 37] local: j index: 5 type: int\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcf1a02b3fe4b112cfb55aee342d67e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void testMoveSourceFolder1() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder1() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcffce970328eae7658e4b9628ac376b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 288, "methodNumberAfterChange": 288, "signatureBeforeChange": " public void testBug330313_wksp1_13_njl()", "signatureAfterChange": " public void testBug330313_wksp1_13_njl()", "diff": ["-\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0 && this\\n\" + ", "-\t\t\"\t\t\t\t\t.getNamesOfDeletedChildren().length == 0);\\n\" + ", "+\t\t\"\t\t\t\t&& this.getNamesOfChildren().length == 0\\n\" + ", "+\t\t\"\t\t\t\t&& this.getNamesOfDeletedChildren().length == 0);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd03430838dd49dc790ed9dc52653d64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "328c06fa136c963530115a367863b6a931384871", "commitAfterChange": "c0d735bb59d0292c44074a58c867bfe7a8670833", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": " public void test406773()", "signatureAfterChange": " public void test406773()", "diff": ["-\t\t\t\"\t      ^^^^^^^\\n\" + ", "+\t\t\t\"\t      ^^^^^^\\n\" + ", "-\t\t\t\"\t    ^^^^^^^\\n\" + ", "+\t\t\t\"\t    ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd3118a920dd4f897d0a4eb5509d869b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testBug80264_ClassesIgnoreReturnType() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80264_ClassesIgnoreReturnType() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd776f799e0c38df609f13f51a03d739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "0faf571a2b978290e761500f873fc8f116675788", "commitAfterChange": "16ea2a8daece1ce57aeee98ca0579c5d79d5f9c9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void test001()", "signatureAfterChange": "  \tpublic void test001()", "diff": ["-\t\t\t\"Class must implement the inherited abstract method I<B>.foo(B)\\n\" + ", "+\t\t\t\"The type J<T> must implement the inherited abstract method I<B>.foo(B)\\n\" + ", "-\t\t\t\"Class must implement the inherited abstract method I.foo(Object)\\n\" + ", "+\t\t\t\"The type L<T> must implement the inherited abstract method I.foo(Object)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdb020aca800b63ce9764813833b30f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": "\t\t \tpublic void test169()", "signatureAfterChange": "\t\t \tpublic void test169()", "diff": ["-\t\t\t\"Unsafe type operation: Should not invoke the constructor AX(E) of raw type AX. References to generic type AX<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The constructor AX(Object) belongs to the raw type AX. References to generic type AX<E> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type AX to type AX<T>. References to generic type AX<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type AX is converted to AX<T>. References to generic type AX<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdcd41eed00627aae0415e0d6200f86c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void testTypeRefGeneric01_WildcardBound() throws CoreException", "signatureAfterChange": " public void testTypeRefGeneric01_WildcardBound() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {@178] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;@207] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super !|Types|!>> {@178] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends !|Types|!, ?, ?> field;@207] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdd11a62d75789fdb0a2822588e789eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 229, "signatureBeforeChange": " \tpublic void test227()", "signatureAfterChange": " \tpublic void test227()", "diff": ["-\t\t\t\"Type safety: The expression of type List is converted to List<X> using a raw conversion. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" + ", "-\t\t\t\"Type safety: The expression of type Iterator is converted to Iterator<X> using a raw conversion. References to generic type Iterator<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type Iterator needs unchecked conversion to conform to Iterator<X>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be17d7d5253af55dfa12349d2b980c7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "   public void test0090()", "signatureAfterChange": "   public void test0090()", "diff": ["-\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"      new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be28bf5755c2c3c4223cd7709b78abe2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/UtilTest.java", "commitBeforeChange": "a0feb61305a24ade473a3a9b76bc23e1585af5a0", "commitAfterChange": "31686ba6e4d4429361375ad3edda8c033e0f9ba4", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test65()", "signatureAfterChange": " public void test65()", "diff": ["-\tassertTrue(\"Camel pattern matching failure-6\",", "-\t\t\t!CharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"NullPointer/lang.Exception\".toCharArray()));", "+\t\t\t!CharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"NullPointer/lang.Exception\".toCharArray()));", "+\tassertTrue(\"Camel pattern matching failure-8\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be346c9477cf5aad538ac5708702a4f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 336, "methodNumberAfterChange": 337, "signatureBeforeChange": "  public void test1032()", "signatureAfterChange": "  public void test1032()", "diff": ["-\t\t\"The variable o1 cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable o1 cannot be null at this location\\n\" + ", "-\t\t\"The variable o3 cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable o3 cannot be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be3b6b5813a8a4a5c41f6005c55bcb5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void test019()", "signatureAfterChange": " \tpublic void test019()", "diff": ["-\t\t\t\"    21  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    21  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    25  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    25  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be68d6fb95a7ce8d33037611cd2ad57e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tpublic void test069()", "signatureAfterChange": "  \tpublic void test069()", "diff": ["-\t\t\t\t+ \"InvalidException cannot be resolved (or is not an exception type) for the method t_foo\\n\"", "+\t\t\t\t+ \"InvalidException cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"IOException cannot be resolved (or is not an exception type) for the method t_foo\\n\"", "+\t\t\t\t+ \"IOException cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be840fc5d7e0414583bd1d2d90d560d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastingContextTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test006()", "signatureAfterChange": " public void test006()", "diff": ["-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +", "-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beadb4ab1a19cb0dce7f05bc1179e43d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public String getString(int index) throws IOException", "signatureAfterChange": "\r public String getString(int index) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"Error in format\");\r", "+\t\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "-\t\tthrow new IOException(\"Error in format\");\r", "+\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beb22fcea1ad0b9b3d26e46fcc7a7183", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElement8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void test429966() throws CoreException", "signatureAfterChange": " \tpublic void test429966() throws CoreException", "diff": ["-\t\t\t\t\t\"  Lambda(Runnable) [in get() [in Lambda(Supplier) [in main(String[]) [in X [in X.java [in <default> [in src [in Bug429966]]]]]]]]\\n\" + ", "-\t\t\t\t\t\"  Lambda(Runnable) [in run() [in Lambda(Runnable) [in get() [in Lambda(Supplier) [in main(String[]) [in X [in X.java [in <default> [in src [in Bug429966]]]]]]]]]]\\n\",", "+\t\t\t\t\t\"  <lambda #1> [in get() [in <lambda #1> [in main(String[]) [in X [in X.java [in <default> [in src [in Bug429966]]]]]]]]\\n\" + ", "+\t\t\t\t\t\"  <lambda #1> [in run() [in <lambda #1> [in get() [in <lambda #1> [in main(String[]) [in X [in X.java [in <default> [in src [in Bug429966]]]]]]]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bedd22b6d5e710210427098f87774dc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test056d()", "signatureAfterChange": " public void test056d()", "diff": ["-\t\t\"Potential resource leak: 'fileReader2' may not be closed\\n\" +", "+\t\t\"Potential resource leak: \\\"fileReader2\\\" may not be closed\\n\" +", "-\t\t\"Resource leak: \\'fileReader1\\' is not closed at this location\\n\" + ", "+\t\t\"Resource leak: \\\"fileReader1\\\" is not closed at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf02fbc0aa23f9ef45d7ce3df7309724", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test009()", "signatureAfterChange": "  public void test009()", "diff": ["-\t\t\"Unnecessary cast to type X for expression of type X.XM1\\n\" + ", "+\t\t\"Unnecessary cast from X.XM1 to X\\n\" + ", "-\t\t\"Unnecessary cast to type X for expression of type null\\n\" + ", "+\t\t\"Unnecessary cast from null to X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf4b7e691a4048a62d926c3cb3e4a450", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsTests.java", "commitBeforeChange": "df0ced66f14be6d828e0c07bdfbf827df2636039", "commitAfterChange": "271d2b3d0e092e5a47b782d47da593583b7ccd8c", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": " public void testLineComments07() throws JavaModelException", "signatureAfterChange": " public void testLineComments07() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t// <TITLE>\\r\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t// <TITLE>\\r\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t// <STYLE>\\r\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t// <STYLE>\\r\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c037c99f00427642dc53c2801d52ef09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void test017()", "signatureAfterChange": " \tpublic void test017()", "diff": ["-\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c04618b207e1ba430710e4ed3729502a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": " public void testCompletionInsideGenericClass() throws JavaModelException", "signatureAfterChange": " public void testCompletionInsideGenericClass() throws JavaModelException", "diff": ["-\t\t\t\"CompletionInsideGenericClas[POTENTIAL_METHOD_DECLARATION]{CompletionInsideGenericClas, Ltest.CompletionInsideGenericClass<TCompletionInsideGenericClassParameter;>;, ()V, CompletionInsideGenericClas, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"CompletionInsideGenericClass<CompletionInsideGenericClassParameter>[TYPE_REF]{CompletionInsideGenericClass, test, Ltest.CompletionInsideGenericClass<TCompletionInsideGenericClassParameter;>;, null, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"CompletionInsideGenericClas[POTENTIAL_METHOD_DECLARATION]{CompletionInsideGenericClas, Ltest.CompletionInsideGenericClass;, ()V, CompletionInsideGenericClas, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"CompletionInsideGenericClass[TYPE_REF]{CompletionInsideGenericClass, test, Ltest.CompletionInsideGenericClass;, null, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0a61af06115ea306c1b51a378dfe20b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RepeatableAnnotationTest.java", "commitBeforeChange": "3c8db8654fc8e2927c75863ec1232c9bc3800c9b", "commitAfterChange": "533660d1560f1a7aff4c5ccabdcd0cb35c0194c1", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testUnspecifiedTarget2()", "signatureAfterChange": " \tpublic void testUnspecifiedTarget2()", "diff": ["-\t\t\t\"The containing annotation @TC is allowed at targets where the repeatable annotation @T is not: TYPE_PARAMETER\\n\" + ", "+\t\t\t\"The container annotation type @TC is allowed at targets where the repeatable annotation type @T is not: TYPE_PARAMETER\\n\" + ", "-\t\t\t\"The repeatable annotation @T is disallowed for this location since its container annotation @TC is disallowed at this location\\n\" + ", "+\t\t\t\"The annotation @T cannot be repeated at this location since its container annotation type @TC is disallowed at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0e629285ec918a9cae662f1890072ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": " \tpublic void test050f()", "signatureAfterChange": " \tpublic void test050f()", "diff": ["-\t\t\t\"Duplicate method a(A<String>) in type X\\n\" + ", "+\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1022d6f3c2e415a994856be54c2f564", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 567, "methodNumberAfterChange": 567, "signatureBeforeChange": " public void testBug210691() throws CoreException", "signatureAfterChange": " public void testBug210691() throws CoreException", "diff": ["-\t\t\"src/test/Ref.java [import \ufffd|pack.Test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Ref.java test.Ref.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\"", "+\t\t\"src/test/Ref.java [import \ufffd|pack.Test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Ref.java test.Ref.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c11a3b68f15da3dbb16679e7af757e81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testJavadocMethodStringDeclaration() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodStringDeclaration() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\t\"src/j1/JavadocSearched.java void j1.JavadocSearched.javadocSearchedMethod() [javadocSearchedMethod] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/j1/JavadocSearched.java void j1.JavadocSearched.javadocSearchedMethod(String) [javadocSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocSearched.java void j1.JavadocSearched.javadocSearchedMethod() [javadocSearchedMethod] EXACT_MATCH OUTSIDE_JAVADOC\\n\" + ", "+\t\t\t\t\"src/j1/JavadocSearched.java void j1.JavadocSearched.javadocSearchedMethod(String) [javadocSearchedMethod] EXACT_MATCH OUTSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c12455afbdc6629b95cfbfd3dce19888", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test008() throws JavaModelException", "signatureAfterChange": "  public void test008() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2264137e5f0b9befb81141e42c13001", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 220, "methodNumberAfterChange": 220, "signatureBeforeChange": " public void testBug260381_wksp2_01b() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_01b() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2739e9dcbd4164106bfcf57be296120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \t \tpublic void test058()", "signatureAfterChange": " \t \tpublic void test058()", "diff": ["-\t\t\t\"     2  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "+\t\t\t\"     2  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     6  invokevirtual java.io.PrintStream.println(int) : void  [32]\\n\" + ", "+\t\t\t\"     6  invokevirtual java.io.PrintStream.println(int) : void [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c27fbfb3fc3c091e59679e8b87e7c738", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "2fdd800912ee4f65c51a2ec384533d1146c71af7", "commitAfterChange": "844f82aaef831e55c4827a65ccd98caed0cd08f3", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t\t\"The field foo is not visible\\n\" + ", "+\t\t\"The field X2.foo is not visible\\n\" + ", "-\t\t\"The field bar is not visible\\n\" + ", "+\t\t\"The field X2.bar is not visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2dd8f36cd055f4b73432324cd80ef09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 210, "signatureBeforeChange": " public void test0529_try_finally()", "signatureAfterChange": " public void test0529_try_finally()", "diff": ["-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null pointer access: The variable o can only be null at this location\\n\" + ", "-\t\t\"The variable o2 can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null pointer access: The variable o2 can only be null at this location\\n\" +  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2e2e95ee5a2c0efd0e100817524118a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": " public void testCompletionInsideGenericClass() throws JavaModelException", "signatureAfterChange": " public void testCompletionInsideGenericClass() throws JavaModelException", "diff": ["-\t\t\t\"CompletionInsideGenericClas[POTENTIAL_METHOD_DECLARATION]{CompletionInsideGenericClas, Ltest.CompletionInsideGenericClass;, ()V, CompletionInsideGenericClas, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"CompletionInsideGenericClass[TYPE_REF]{CompletionInsideGenericClass, test, Ltest.CompletionInsideGenericClass;, null, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"CompletionInsideGenericClas[POTENTIAL_METHOD_DECLARATION]{CompletionInsideGenericClas, Ltest.CompletionInsideGenericClass<TCompletionInsideGenericClassParameter;>;, ()V, CompletionInsideGenericClas, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"CompletionInsideGenericClass<CompletionInsideGenericClassParameter>[TYPE_REF]{CompletionInsideGenericClass, test, Ltest.CompletionInsideGenericClass<TCompletionInsideGenericClassParameter;>;, null, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c31d094d51b5a2e22fa9a396daaab8ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "37d67ed9fa27dc85b6112e216c3af6d687e12530", "commitAfterChange": "8924c9453af0fcfcdde960b7165abadc76ad272e", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic void test079()", "signatureAfterChange": " \tpublic void test079()", "diff": ["-\t\t\t\"  private strictfp X(java.lang.String arg, int arg);\\n\",", "+\t\t\t\"  private strictfp X(java.lang.String arg0, int arg1);\\n\",", "-\t\t\t\"  public static final strictfp X valueOf(java.lang.String arg);\\n\"", "+\t\t\t\"  public static final strictfp X valueOf(java.lang.String arg0);\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c330e7e57f18ec725efb5362215c4e31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void testParameterizedTypeMultipleArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeMultipleArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric.GenericMember] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [g1.t.m.def.NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [g1.t.m.def.NonGeneric.GenericMember] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c342f36d4ff1b3cfd416172c3c806bfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \t \tpublic void test050()", "signatureAfterChange": " \t \tpublic void test050()", "diff": ["-\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [32]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c355315a1a8c6cb50674c34f8273ebc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testBinary02()", "signatureAfterChange": " \tpublic void testBinary02()", "diff": ["-\t\t\t\t\"\t  ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The method setAllStrings(int, List<@NonNull String>) in the type X is not applicable for the arguments (int, List<@Nullable String>)\\n\" + ", "+\t\t\t\t\"\t                    ^^\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<@NonNull String>\\' but this expression has type \\'List<@Nullable String>\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c35d8ef2d90708a1a83c62f50df365a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "commitAfterChange": "f391db9dfa982dbe09df7c4d362cd9e5a8546769", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r public IType getType(int index) throws IOException", "signatureAfterChange": "\r public IType getType(int index) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "+\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "+\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3c74be86f6b217a5aa96b58e823591d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " public void testBug281655() throws JavaModelException", "signatureAfterChange": " public void testBug281655() throws JavaModelException", "diff": ["-\t\t\"\t\t\t@ActivationConfigProperty(propertyName = \\\"cronTrigger\\\",\\n\" + ", "-\t\t\"\t\t\t\t\tpropertyValue = \\\"0/10 * * * * ?\\\")\\n\" + ", "+\t\t\"\t\t\t\t@ActivationConfigProperty(propertyName = \\\"cronTrigger\\\",\\n\" + ", "+\t\t\"\t\t\t\t\t\tpropertyValue = \\\"0/10 * * * * ?\\\")\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3e0e73428c82b30afb4433cbafef717", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 269, "methodNumberAfterChange": 269, "signatureBeforeChange": "\t\t \tpublic void test0265()", "signatureAfterChange": "\t\t \tpublic void test0265()", "diff": ["-\t\t\t\"Type safety: The cast from X<E> to XC<U> is actually checking against the erased type XC\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from X<E> to XC<U>\\n\" + ", "-\t\t\t\"Type safety: The cast from X<E> to XC<? extends X> is actually checking against the erased type XC\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from X<E> to XC<? extends X>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3ee38dc60b0b9a20029cf5f65256dd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tpublic void test052()", "signatureAfterChange": "  \tpublic void test052()", "diff": ["-\t\t\t\t+ \"Javadoc: java.awt.AWTexception cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: java.awt.AWTexception cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: IOException cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: IOException cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4047581dae085cf95c59184d5f37450", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8c77956bb14bf31d316463be9556a2204834682b", "commitAfterChange": "366617dbc4fc1d9363db17217a7ae199f0f005ea", "methodNumberBeforeChange": 976, "methodNumberAfterChange": 976, "signatureBeforeChange": " public void test0952()", "signatureAfterChange": " public void test0952()", "diff": ["-\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method m(Object...) from type X. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\"Type null of the last argument to method m(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method m(Object...) from type X. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "+\t\t\t\"Type null of the last argument to method m(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c40c1c4d42cd6ce8510a0d7998fea39a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "87035e28d15718dec923cda9730195aba7b8ab31", "commitAfterChange": "d7e74f0817baa712407da5eb003f21f0a3eeda6d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void test004()", "signatureAfterChange": " \tpublic void test004()", "diff": ["+\t */", "+\tpublic void test004() {", "-\tpublic void test004() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c415212d8b35a887235dd549ef42e751", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 266, "signatureBeforeChange": " public void testBug305518_wksp2_03()", "signatureAfterChange": " public void testBug305518_wksp2_03()", "diff": ["-\t\t\"\t*  String s = ... ; // get string from somewhere\\n\" + ", "-\t\t\"\t*  byte [] compressed = UnicodeCompressor.compress(s);\\n\" + ", "+\t\t\"\t *  String s = ... ; // get string from somewhere\\n\" + ", "+\t\t\"\t *  byte [] compressed = UnicodeCompressor.compress(s);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c42f747e9fbdf25062f95da8437eee26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  public void test64()", "signatureAfterChange": "  public void test64()", "diff": ["-\t\t\"  int[] x = {0,1,};\\n\" + ", "+\t\t\"  int[] x = {0, 1};\\n\" + ", "-\t\t\"  int[] x = {0,1,};\\n\" + ", "+\t\t\"  int[] x = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c43db524080bc493f36c8eb21521185f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "58aaea35ae4c64a4ecebe06d6b1ab1679e04698a", "commitAfterChange": "d5df66f62f879926d0ab37840f8644f7133a2a54", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": "     public void test120()", "signatureAfterChange": "     public void test120()", "diff": ["-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"The constructor X() is deprecated\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"The type X is deprecated\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4672cc73a678d9fdc6f99beaaaccc8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void testDeleteJarFile2() throws CoreException", "signatureAfterChange": " public void testDeleteJarFile2() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c47259b1118b7b3e6d167a812b566ce3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 533, "methodNumberAfterChange": 533, "signatureBeforeChange": " \tpublic void test529()", "signatureAfterChange": " \tpublic void test529()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c47502a425cb432d4a1d950ca472f0b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [<Object, RuntimeException, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [<Object, RuntimeException, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] POTENTIAL_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4fa007a955e81878ab10d8bba55c1cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 527, "methodNumberAfterChange": 527, "signatureBeforeChange": "\t\t\t \tpublic void test523()", "signatureAfterChange": "\t\t\t \tpublic void test523()", "diff": ["-\t\t\t\"Type safety: X.M is a raw type. References to generic type X.M<T> should be parameterized\\n\" + ", "+\t\t\t\"X.M is a raw type. References to generic type X.M<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.M is a raw type. References to generic type X.M<T> should be parameterized\\n\" + ", "+\t\t\t\"X.M is a raw type. References to generic type X.M<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c52a3f0c1092da750e68f0aeab32f19c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "commitAfterChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testBinary08()", "signatureAfterChange": " \tpublic void testBinary08()", "diff": ["-\t\t\t\t\"Null type mismatch (type annotations): required \\'List<? super @NonNull X1>\\' but this expression has type \\'ArrayList<@Nullable Object>\\'\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<? super @NonNull X1>\\' but this expression has type \\'ArrayList<@Nullable Object>\\', corresponding supertype is \\'List<@Nullable Object>\\'\\n\" + ", "-\t\t\t\t\"Null type mismatch (type annotations): required \\'List<@Nullable ? extends p.X1>\\' but this expression has type \\'ArrayList<@NonNull X1>\\'\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<@Nullable ? extends p.X1>\\' but this expression has type \\'ArrayList<@NonNull X1>\\', corresponding supertype is \\'List<@NonNull X1>\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c557683741b7711918dd2ea6b9315178", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void test046()", "signatureAfterChange": " \tpublic void test046()", "diff": ["-\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c59dd59a849099107f699c06ad536c39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "42a5591e6405d9d5a9661e1fdb211c39440692e6", "commitAfterChange": "90b5d0d22a673acac5fa922f69ac563d54cf8a91", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " \tpublic void test077a()", "signatureAfterChange": " \tpublic void test077a()", "diff": ["-\t\t\t\"The return type is incompatible with N.getI(), M.getI(), L.getI()\\n\" + ", "+\t\t\t\"The return type is incompatible with N.getI(), M.getI()\\n\" + ", "-\t\t\t\"The return type is incompatible with N.getI(), M.getI(), L.getI()\\n\" + ", "+\t\t\t\"The return type is incompatible with N.getI(), M.getI()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5fbf5b027f5dbd60fbfedd26184a03a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tpublic void test023()", "signatureAfterChange": "  \tpublic void test023()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 5)\\r\\n\" +", "-\t\t\t\"\tclass B extends A<String> {}\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 5)\\n\" +", "+\t\t\t\"\tclass B extends A<String> {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c66b0d83edc74b62ec6a693a6c3e9017", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  \tpublic void testBug416175()", "signatureAfterChange": " \tpublic void testBug416175()", "diff": ["-", "+\t// TODO(Stephan) : the message needs clean up.", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'ArrayList<String>\\' needs unchecked conversion to conform to \\'List<@NonNull ? extends String>\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'ArrayList<String>\\' needs unchecked conversion to conform to \\'List<@NonNull ? extends java.lang.String>\\'\\n\" + ", "-\t\t\t\"Null type mismatch: required \\'@NonNull ? extends String\\' but the provided value is null\\n\" + ", "+\t\t\t\"Null type mismatch: required \\'@NonNull capture#\\' but the provided value is null\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6b1dcf1260ca1ecbffd5074bc24a635", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "fe30c0f08ddab5b80fae1b7726ce1fae05bb7c1e", "commitAfterChange": "d3f5bd830eedcf03b196318e3635f46ef21397eb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test0005()", "signatureAfterChange": " public void test0005()", "diff": ["-\t\t\"\t         ^\\n\" + ", "+\t\t\"\t         ^^^^^\\n\" + ", "-\t\t\"\t         ^\\n\" + ", "+\t\t\"\t         ^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6e8ce02fd7aadd40c540905431317d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 202, "methodNumberAfterChange": 202, "signatureBeforeChange": " \tpublic void test0572() throws CoreException", "signatureAfterChange": " \tpublic void test0572() throws CoreException", "diff": ["-\t\t\t\t\"LX$40;.(LX;)V\\n\" + ", "-\t\t\t\t\"LX$40;.bar()V\",", "+\t\t\t\t\"LX$40;.(LX;)V^0\\n\" + ", "+\t\t\t\t\"LX$40;.bar()V^0\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c774cca02faad9723dfa8e938197085a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void test11() throws JavaModelException", "signatureAfterChange": "  \tpublic void test11() throws JavaModelException", "diff": ["-\t\t\t\"RuntimeException {key=Ljava/lang/RuntimeException;} [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "-\t\t\t\"InterruptedException {key=Ljava/lang/InterruptedException;} [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "+\t\t\t\"InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c77a98df11d1c95177033fc9f2057d47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "194abd534b611ec2d23ab367d4102b5723758d82", "commitAfterChange": "c7d3258ae74375a57da545fcb11a05d452eeaa7b", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " \tpublic void test0547() throws JavaModelException", "signatureAfterChange": " \tpublic void test0547() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$74;^1\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$74;\", typeBinding.getKey());", "-\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$100;^1\", typeBinding.getKey());", "+\t\tassertEquals(\"Wrong key\", \"Ltest0547/A$100;\", typeBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7f311b8d311386b8d439e5009f9c0d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "4015f9a338ca2f66537cce07f78a17ab467ebe74", "commitAfterChange": "77f2db9286e86f41c2ddfe17ae19b73d1c8f7cfb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test0005()", "signatureAfterChange": " public void test0005()", "diff": ["-\t\t\"Z[] cannot be resolved to a type\\n\" + ", "+\t\t\"Z cannot be resolved to a type\\n\" + ", "-\t\t\"Z[] cannot be resolved to a type\\n\" + ", "+\t\t\"Z cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7f8504afbc40eea7c46764e59bee777", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tpublic void test0035()", "signatureAfterChange": "  \tpublic void test0035()", "diff": ["-\t\t\t\"Method foo(E, Thread) has the same erasure foo(Exception, Thread) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(E, Thread) is the same as another method in type X<E,T>\\n\" +", "-\t\t\t\"Method foo(Exception, T) has the same erasure foo(Exception, Thread) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(Exception, T) is the same as another method in type X<E,T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c81596415ee412f5a4a85ee8684595d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "a8c16bcddf8ea1c15574f4c6305041f3a02174d1", "commitAfterChange": "653892de0ce6d92080f2ac329ebf5ae3bc092866", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  public void testDuplicateHashCode()", "signatureAfterChange": "  public void testDuplicateHashCode()", "diff": ["-\t\t\"\t\tfor (int i = 0; i < 100; i++) {\\n\" +", "+\t\t\"\t\touter: for (int i = 0; i < 100; i++) {\\n\" +", "-\t\t\"\t\t\t\tSystem.exit(0);\\n\" +", "+\t\t\"\t\t\t\tbreak outer;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c81b60e0fc6242af7eb6d4f55c1bb5e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r public IType getType(int index) throws IOException", "signatureAfterChange": "\r public IType getType(int index) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"Error in format\");\r", "+\t\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "-\t\tthrow new IOException(\"Error in format\");\r", "+\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c837db092e707048cc75649bd509f4ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternMultipleTypeParameter05() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternMultipleTypeParameter05() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] POTENTIAL_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c83a8f9d894c451bfb4b7203dd91e122", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "badff9a93fec2ed67e9ce195f8709b06674bcf81", "commitAfterChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "methodNumberBeforeChange": 212, "methodNumberAfterChange": 212, "signatureBeforeChange": " \tpublic void test074b()", "signatureAfterChange": " \tpublic void test074b()", "diff": ["-\t\t\t\"\t    ^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c86290f07364868d2bb0461a863ca57d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void test007() throws JavaModelException", "signatureAfterChange": "  public void test007() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87ffbc0c08c67968667d6776f7d771e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public void test0042()", "signatureAfterChange": "   public void test0042()", "diff": ["-\texpectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>};\";", "-\t\t\"    Object[] o = {<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    Object[] o = {<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c89f763a9ed533499f26bf5975382bff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 753, "methodNumberAfterChange": 753, "signatureBeforeChange": " public void test747()", "signatureAfterChange": " public void test747()", "diff": ["-\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\"\tclass Y<U extends T & I> {\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tclass Y<U extends T & I> {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8aabb333bc4fba2c29ef53201a6aa80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "2fdd800912ee4f65c51a2ec384533d1146c71af7", "commitAfterChange": "844f82aaef831e55c4827a65ccd98caed0cd08f3", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t\t\"The field foo is not visible\\n\" + ", "+\t\t\"The field X2.foo is not visible\\n\" + ", "-\t\t\"The field bar is not visible\\n\" + ", "+\t\t\"The field X2.bar is not visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8cdc168315e9f00cf0e0084a9642ab1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "dbfe97bed3f7feb8408fadbcb58741aa04540553", "commitAfterChange": "3d86d8fdd283e92da8b2fd4ec59e7d2f2b4add9f", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void test041()", "signatureAfterChange": " public void test041()", "diff": ["-\t\t\"This class must implement the inherited abstract method Y.bar(), but cannot override it since it is not visible from X. Either make the type abstract or make the inherited method visible.\\n\" + ", "+\t\t\"This class must implement the inherited abstract method Y.bar(), but cannot override it since it is not visible from X. Either make the type abstract or make the inherited method visible\\n\" + ", "-\t\t\"This class must implement the inherited abstract method Y.bar(), but cannot override it since it is not visible from M. Either make the type abstract or make the inherited method visible.\\n\" + ", "+\t\t\"This class must implement the inherited abstract method Y.bar(), but cannot override it since it is not visible from M. Either make the type abstract or make the inherited method visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d4e93c94b40c2f59e4533249e66e97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 212, "methodNumberAfterChange": 212, "signatureBeforeChange": " \tpublic void test073d()", "signatureAfterChange": " \tpublic void test073d()", "diff": ["-\t\t\t\"1. ERROR in NumericArray5.java (at line 5)\\r\\n\" +", "-\t\t\t\"\t@Override public void add(Number n, Integer i) {}\\r\\n\" +", "+\t\t\t\"1. ERROR in NumericArray5.java (at line 5)\\n\" +", "+\t\t\t\"\t@Override public void add(Number n, Integer i) {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d8879645c4321fec437b490c84dedb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "bac17f15a8a34e6fae5fc4cb9c288beecfe7e32e", "commitAfterChange": "0b02e7d24b56cd090e571bba489cfef95479d776", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void test000()", "signatureAfterChange": " \tpublic void test000()", "diff": ["-\t\t\t\t\t\"\tFREDERIC(41);\\n\" + ", "+\t\t\t\t\t\"\tFREDERIC;\\n\" + ", "-\t\t\t\t\t\"\tT() { this(54); }\\n\" + ", "+\t\t\t\t\t\"\tT() { this(41); }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c92f1b61bae1bf5f44876a753d247996", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1358, "methodNumberAfterChange": 1358, "signatureBeforeChange": " public void test1327()", "signatureAfterChange": " public void test1327()", "diff": ["-\t\t\t\"Type safety: Unchecked invocation foo(X, X) of the generic method foo(X<T>, X<U>) of type X<E>\\n\" +", "+\t\t\t\"Type safety: Unchecked invocation foo(X, X<String>) of the generic method foo(X<T>, X<U>) of type X<E>\\n\" +", "-\t\t\t\"Type safety: The expression of type X needs unchecked conversion to conform to X<T>\\n\" +", "+\t\t\t\"Type safety: The expression of type X needs unchecked conversion to conform to X<Object>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c95c86be86ff782b74be124558301746", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b9bb6123c3e4c0567c677af33c7c0e8037ba4975", "commitAfterChange": "4dd974a226271180ff02d909a12722017f80ff3a", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " public void test073()", "signatureAfterChange": " public void test073()", "diff": ["-\t\t\"The return types are incompatible for the inherited methods J.a(), I.a()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods I.a(), J.a()\\n\" +", "-\t\t\"The return types are incompatible for the inherited methods I.a(), J.a()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.a(), I.a()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9681b04ade3aaa11fc2aee8958979e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": " public void testBug260381_wksp2_03() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_03() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9709f45739b38ef0dbc16f347597516", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 249, "methodNumberAfterChange": 249, "signatureBeforeChange": " public void testBug313524_wksp1_11() throws JavaModelException", "signatureAfterChange": " public void testBug313524_wksp1_11() throws JavaModelException", "diff": ["-\t\t\"\t\treportError(AntLaunchConfigurationMessages.getString(\\n\" + ", "-\t\t\"\t\t\t\t\\\"AntLaunchShortcut.Unable\\\"), null); //$NON-NLS-1$\\n\" + ", "+\t\t\"\t\treportError(AntLaunchConfigurationMessages\\n\" + ", "+\t\t\"\t\t\t\t.getString(\\\"AntLaunchShortcut.Unable\\\"), null); //$NON-NLS-1$\t\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c982ef12ac0018f07c6a60916a88f619", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void test0040()", "signatureAfterChange": "   public void test0040()", "diff": ["-\tString expectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>};\";", "-\t\t\"  Object[] o = {<CompleteOnName:zzz>,};\\n\" +", "+\t\t\"  Object[] o = {<CompleteOnName:zzz>};\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c995e2e2276999febb7a4631a09fd43f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void test100()", "signatureAfterChange": " \tpublic void test100()", "diff": ["-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9aa96a518c2408fe4f4f652823cd856", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void testDeleteImportDeclaration() throws CoreException", "signatureAfterChange": " public void testDeleteImportDeclaration() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9bbd439961b726c252abd81819b0c55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " public void testTypeRefQualifiedAll_MethodParameter() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_MethodParameter() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\ttype.def.Types method(\ufffd|type.def.Types|\ufffd param) throws type.def.Types {@526] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Bug all.types.ref.TestTypes.bar(type.def.Bug) [\ttype.def.Bug bar(\ufffd|type.def.Bug|\ufffd bug) {@693] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\ttype.def.Types method(!|type.def.Types|! param) throws type.def.Types {@526] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Bug all.types.ref.TestTypes.bar(type.def.Bug) [\ttype.def.Bug bar(!|type.def.Bug|! bug) {@693] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9ef2d2503f57967dbdacae85e90b0a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " public void test056throw4()", "signatureAfterChange": " public void test056throw4()", "diff": ["-\t\t\"Potential resource leak: \\'reader\\' may not be closed at this location\\n\" +", "+\t\t\"Potential resource leak: \\\"reader\\\" may not be closed at this location\\n\" +", "-\t\t\"Potential resource leak: \\'reader\\' may not be closed at this location\\n\" +", "+\t\t\"Potential resource leak: \\\"reader\\\" may not be closed at this location\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9f9791b5849cc863d3de9948538891d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": " \tpublic void test118()", "signatureAfterChange": " \tpublic void test118()", "diff": ["-\t\t\t\"Type safety: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca22fac033f25e9819ab876ab302405a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testImplementBinaryInnerInterface() throws JavaModelException", "signatureAfterChange": " public void testImplementBinaryInnerInterface() throws JavaModelException", "diff": ["-\t\t\"  Inner [in X$Inner.class [in p58440 [in test58440.jar [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Inner {key=Lp58440/X$Inner;} [in X$Inner.class [in p58440 [in test58440.jar [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca848b0e26ca0b69015b8ca969308fd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " \tpublic void test176()", "signatureAfterChange": " \tpublic void test176()", "diff": ["-\t\t\t\"Unsafe type operation: Should not convert expression of raw type Vector to type Vector<T>. References to generic type Vector<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type Vector is converted to Vector<T>. References to generic type Vector<E> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from Object to parameterized type Vector<Object> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to Vector<Object> will not check conformance of type arguments at runtime\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb3aef2446835442c355276dc6737409", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testBug80194b() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80194b() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb5273dbed5a47b511fd2734a0d8fbc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t        \"The local variable l1 is never read\\n\" +", "+\t        \"The value of the local variable l1 is not used\\n\" +", "-        \"The local variable l1 is never read\\n\" +", "+        \"The value of the local variable l1 is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb59ff20e313b115a1036c94efc56733", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3f796b100e9b9a1c8682c406af615aae875d1ae1", "commitAfterChange": "0c453c4f27a5b3a5f4c158cd217e55ce6f30cbbe", "methodNumberBeforeChange": 669, "methodNumberAfterChange": 669, "signatureBeforeChange": " public void test665()", "signatureAfterChange": " public void test665()", "diff": ["-\t\t\"2. ERROR in Test.java (at line 5)\\n\" + ", "+\t\t\"2. WARNING in Test.java (at line 5)\\n\" + ", "-\t\t\"Cannot cast from A to Comparable<S>\\n\" + ", "+\t\t\"Type safety: The cast from A to Comparable<S> is actually checking against the erased type Comparable\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb5caba2c4589f27e1a3c10542116a71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/BindingKeyTests.java", "commitBeforeChange": "3527b3756f08ff89e126504842e7e163f70ed525", "commitAfterChange": "b6824a312418adc1d862d73cd66d59cf6690080f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void test023()", "signatureAfterChange": " \tpublic void test023()", "diff": ["-\t\tString key = BindingKey.createWilcardTypeBindingKey(\"Ljava/util/List;\", Signature.C_SUPER);", "+\t\tString key = BindingKey.createWilcardTypeBindingKey(\"Ljava/util/List<TE;>;\", Signature.C_SUPER);", "-\t\t\t\"-Ljava/util/List;\",", "+\t\t\t\"-Ljava/util/List<TE;>;\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb642cef45ddfaee295d34267bed59bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void testMultiLineCommentCodeSnippet6()", "signatureAfterChange": "  \tpublic void testMultiLineCommentCodeSnippet6()", "diff": ["-\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(), box\\n\" +", "-\t\t\t\t\" * \t\t\t\t.getGames().toArray());\\n\" +", "+\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(),\\n\" +", "+\t\t\t\t\" * \t\t\t\tbox.getGames().toArray());\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb74e4983a7d886bdfc743ba82a97a0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java", "commitBeforeChange": "5a709311100399f724e07cfa2abf31a306fb6f62", "commitAfterChange": "189d8495dd269a3e1a6eabd4118e6586a867755d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void testIA_1FGNBPR_1()", "signatureAfterChange": " public void testIA_1FGNBPR_1()", "diff": ["-\tString expectedCompletionNodeToString = \"<CompleteOnName:la>\";", "+\tString expectedCompletionNodeToString = \"break <CompleteOnLabel:la>;\";", "-\t\t\"    {\\n\" +", "-\t\t\"      class A {\\n\" +", "-\t\t\"        A() {\\n\" +", "-\t\t\"        }\\n\" +", "-\t\t\"        void foo2() {\\n\" +", "-\t\t\"          <CompleteOnName:la>;\\n\" +", "-\t\t\"        }\\n\" +", "-\t\t\"      }\\n\" +", "-\t\t\"    }\\n\" +", "+\t\t\"    {\\n\" + ", "+\t\t\"      class A {\\n\" + ", "+\t\t\"        A() {\\n\" + ", "+\t\t\"        }\\n\" + ", "+\t\t\"        void foo2() {\\n\" + ", "+\t\t\"          break <CompleteOnLabel:la>;\\n\" + ", "+\t\t\"        }\\n\" + ", "+\t\t\"      }\\n\" + ", "+\t\t\"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb91cabe15456b5aa4194d7c2cebe285", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "194abd534b611ec2d23ab367d4102b5723758d82", "commitAfterChange": "c7d3258ae74375a57da545fcb11a05d452eeaa7b", "methodNumberBeforeChange": 202, "methodNumberAfterChange": 202, "signatureBeforeChange": " \tpublic void test0572() throws CoreException", "signatureAfterChange": " \tpublic void test0572() throws CoreException", "diff": ["-\t\t\t\t\"LX$40;.(LX;)V^0\\n\" + ", "-\t\t\t\t\"LX$40;.bar()V^0\",", "+\t\t\t\t\"LX$40;.(LX;)V\\n\" + ", "+\t\t\t\t\"LX$40;.bar()V\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb97b60af6dc0d87a86eea6ff4729824", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void testBuildProjectUsedAsLib() throws CoreException", "signatureAfterChange": " public void testBuildProjectUsedAsLib() throws CoreException", "diff": ["-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbb863d743cdfd893ca82e3a618ec52f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "6cd0099c2021e34815eaba987a586ae52dacf569", "commitAfterChange": "d6dc74869d8c303dbb7a6d8b327d8b104cd5865b", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": " public void test401939d()", "signatureAfterChange": " public void test401939d()", "diff": ["-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + ", "+\t\t\t\t\"This method must return a result of type String\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc021251dd3789cae10104d765e8d39e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ea8c1e30cf973504ca98e76d7cfdb082a168ddaa", "commitAfterChange": "3bda3542f9d3046a6441c4a2aa2b2461ac8312ad", "methodNumberBeforeChange": 568, "methodNumberAfterChange": 568, "signatureBeforeChange": " \tpublic void test0550()", "signatureAfterChange": " \tpublic void test0550()", "diff": ["-// **", "-\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"Type safety: Unchecked cast from X<capture#1-of ? super A> to X<U>\\n\" + ", "+\t\t\t\"Cannot cast from X<capture#1-of ? super A> to X<U>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc0e4becda7a17a31a7eef97360820f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testMoveSourceFolder6() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder6() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc1b0a22c242262a39ebfbb855c77cf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tpublic void test024b()", "signatureAfterChange": " \tpublic void test024b()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 8)\\r\\n\" +", "-\t\t\t\"\tpublic <E extends Object> void m(E e) {}\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 8)\\n\" +", "+\t\t\t\"\tpublic <E extends Object> void m(E e) {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc60efc0bb1cf74c78ca4099b17a4259", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void test045b()", "signatureAfterChange": " \tpublic void test045b()", "diff": ["-\t\t\t\"1. ERROR in test\\\\Three.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tpublic class Three extends Two { public static void test(String s) { arrayList(s); } }\\r\\n\" +", "+\t\t\t\"1. ERROR in test\\\\Three.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic class Three extends Two { public static void test(String s) { arrayList(s); } }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccda0c1fb41f01184b2c5c9424abed10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void testBug96237_Public04()", "signatureAfterChange": " \tpublic void testBug96237_Public04()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd4703dac54ec7bae4ba5802097bc7cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClassFileTests.java", "commitBeforeChange": "2881115df3db39d2fe7ea74c50c55027d1324a16", "commitAfterChange": "bbe5c2565fb8190610f9b139c18e465ccc5286bd", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testParameterNames02() throws CoreException", "signatureAfterChange": " public void testParameterNames02() throws CoreException", "diff": ["-\t\t\t\"arg0\\n\" +", "-\t\t\t\"arg1\\n\",", "+\t\t\t\"key\\n\" +", "+\t\t\t\"value\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd65aa4ab0a81edda736aadaf055cf13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  public void test028() throws JavaModelException", "signatureAfterChange": "  public void test028() throws JavaModelException", "diff": ["-\t\t\"InterruptedException[JAVADOC_TYPE_REF]{{@link InterruptedException }, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DICNREETIT+\"}\\n\" + ", "-\t\t\"IllegalMonitorStateException[JAVADOC_TYPE_REF]{{@link IllegalMonitorStateException }, java.lang, Ljava.lang.IllegalMonitorStateException;, null, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "+\t\t\"InterruptedException[JAVADOC_TYPE_REF]{{@link InterruptedException}, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DICNREETIT+\"}\\n\" + ", "+\t\t\"IllegalMonitorStateException[JAVADOC_TYPE_REF]{{@link IllegalMonitorStateException}, java.lang, Ljava.lang.IllegalMonitorStateException;, null, null, \"+this.positions+R_DICNRIT+\"}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdb178785b8793b538a0ac0e582f4c53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void test11() throws JavaModelException", "signatureAfterChange": "  \tpublic void test11() throws JavaModelException", "diff": ["-\t\t\t\"RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "-\t\t\t\"InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\\n\" + ", "+\t\t\t\"InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce31233cd6b180c2ca2db88bbe41dbd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "bcf6d39cea27ed7bf3bf85709bd7e60dc5605058", "commitAfterChange": "6556a52f97cad4f6513f531b95066570adca8205", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\t\t\"\t    ^^^^^^^^\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^\\n\" + ", "-\t\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\t\"\t       ^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce624b2552f827f21eddc65e84028b20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void test052()", "signatureAfterChange": " public void test052()", "diff": ["-\t\t\t\"        [pc: 0, pc: 15] -> 15 when : java.lang.Exception\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 12] -> 15 when : java.lang.Exception\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] -> 15 when : java.lang.Exception\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 12] -> 15 when : java.lang.Exception\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce75a4834c3962abf4c7b969e708d54d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testBug83127g()", "signatureAfterChange": " \tpublic void testBug83127g()", "diff": ["-\t\t\t\"Javadoc: The method add(Integer) is undefined for the type Unrelated1\\n\" + ", "+\t\t\t\"Javadoc: The method add(E) in the type Unrelated1 is not applicable for the arguments (Integer)\\n\" + ", "-\t\t\t\"The constructor Object(null) is undefined\\n\" + ", "+\t\t\t\"The constructor Test(T) refers to the missing type T\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce99299bf45940645238ac2dd0e76a92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testDeleteSyntaxErrorField() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorField() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceab1643fd9eab56ee70fad416c549a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 368, "methodNumberAfterChange": 368, "signatureBeforeChange": " \tpublic void test366()", "signatureAfterChange": " \tpublic void test366()", "diff": ["-\t\t\t\"Type mismatch: cannot convert from MX<? extends Object> to MX<? extends String>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from MX<capture-of ? extends Object> to MX<? extends String>\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from MX<? super String> to MX<? super Object>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from MX<capture-of ? super String> to MX<? super Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf36b46611315f57d67097f219669048", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeAnnotationsConverterTest.java", "commitBeforeChange": "55189ed648ac780e2783a409705c9c8b61eeced6", "commitAfterChange": "cd7ab76e97bbde2dfa388ac94141efed3a1c5385", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test0007() throws JavaModelException", "signatureAfterChange": " \tpublic void test0007() throws JavaModelException", "diff": ["-\t\t\t\"    String [] [] [] [] o = (@One String [] @Two [] [] @Three []) null;\\n\" +", "+\t\t\t\"    String [][][][] o = (@One String[]@Two [][]@Three []) null;\\n\" +", "-\t\t\t\t\"  String [] [] [] [] o=(@One String [] @Two [] [] @Three [])null;\\n\" + ", "+\t\t\t\t\"  String[][][][] o=(@One String[] @Two [][] @Three [])null;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfaf17f2da3c5add176decbf1849def2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public SourceEntry getSourceEntry(int index) throws IOException", "signatureAfterChange": "\r public SourceEntry getSourceEntry(int index) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"Error in format\");\r", "+\t\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r", "-\t\tthrow new IOException(\"Error in format\");\r", "+\t\tthrow new IOException(\"build.formatError\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfb02ba7d026b8316d4ea65591654ef7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void testTypeRefGeneric01_TypeVariableBound() throws CoreException", "signatureAfterChange": " public void testTypeRefGeneric01_TypeVariableBound() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends !|Types|!, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends !|Types|! & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfc26fa98b9b12db998c16e7f88c5a0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test041()", "signatureAfterChange": " \tpublic void test041()", "diff": ["-\t\t\t\"    2  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    5  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"    2  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"    5  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0e035b79fd0a98ff7ba1395eaa329bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic void testBug83304_ConstructorParameterizedElementPattern() throws CoreException", "signatureAfterChange": " \tpublic void testBug83304_ConstructorParameterizedElementPattern() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0ffc11cd218717cf69352d85a3ee3cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "be247eb150a4ae64408d691fa5f52cc64cf01665", "commitAfterChange": "560772312173d5112198fae503105dd04e5536f2", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void testRemoveNonJavaProject() throws CoreException", "signatureAfterChange": " public void testRemoveNonJavaProject() throws CoreException", "diff": ["-\t\t\t\"Should get no delta\", ", "-\t\t\t\"\"", "+\t\t\t\"Should get a non-Java resource delta\", ", "+\t\t\t\"ResourceDelta(/P)\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d116ba39cdab8981196ce15b1ea0dafa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic void testBug80264_FieldsIgnoreDeclaringType() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80264_FieldsIgnoreDeclaringType() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d13b59daee5c04cc2788c8527a956534", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "e3beac235d122e4c3c54870082319a4f2cc2abeb", "commitAfterChange": "553b813a23ab25477516582ea0c9fc2d6eaf9fb4", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void test045() throws CoreException", "signatureAfterChange": " \tpublic void test045() throws CoreException", "diff": ["-\t\t\t\t\"Lp1/Y<Lp1/Y<TE;>;+Lp1/X;>;^1\"", "+\t\t\t\t\"Lp1/Y<Lp1/Y;+Lp1/X;>;^1\"", "-\t\t\t\"Lp1/Y<Lp1/Y<TE;>;+Lp1/X;>;^1\",", "+\t\t\t\"Lp1/Y<Lp1/Y;+Lp1/X;>;^1\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d157a837e1bccac6ff22bf6ff44457a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public void test031() throws JavaModelException", "signatureAfterChange": "  public void test031() throws JavaModelException", "diff": ["-\t\t\"foo[JAVADOC_FIELD_REF]{{@link BasicTestTextIns#foo }, Ljavadoc.text.BasicTestTextIns;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "-\t\t\"foo[JAVADOC_VALUE_REF]{{@value BasicTestTextIns#foo }, Ljavadoc.text.BasicTestTextIns;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\"", "+\t\t\"foo[JAVADOC_FIELD_REF]{{@link BasicTestTextIns#foo}, Ljavadoc.text.BasicTestTextIns;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "+\t\t\"foo[JAVADOC_VALUE_REF]{{@value BasicTestTextIns#foo}, Ljavadoc.text.BasicTestTextIns;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d15dcd4f328629c67bdc398077b092df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationDietRecoveryTest.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void test0035()", "signatureAfterChange": " public void test0035()", "diff": ["-\t\t\"public @AnAnnotation1 class X {\\n\" + ", "+\t\t\"public @AnAnnotation1(name = $missing$) class X {\\n\" + ", "-\t\t\"public @AnAnnotation1 class X {\\n\" + ", "+\t\t\"public @AnAnnotation1(name = $missing$) class X {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d182ad8d518814a38c00105e8a042703", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void test048() throws Exception", "signatureAfterChange": " public void test048() throws Exception", "diff": ["-\t\t\t\t\"        [pc: 29, line: 53]\\n\" +", "+\t\t\t\t\"        [pc: 29, line: 55]\\n\" +", "-\t\t\t\"        [pc: 29, line: 53]\\n\" +", "+\t\t\t\"        [pc: 29, line: 55]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d190d43397d567d2d86d12cd46f26192", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void test0060()", "signatureAfterChange": " public void test0060()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:impl>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:impl>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1c744f306ec0dc68603cba707f2b4e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testBug77093method() throws CoreException", "signatureAfterChange": " \tpublic void testBug77093method() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2f70b9345f1bf00d51c9d26375ea0ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "775bb7e86633292b115b2935c87e101190166e9d", "commitAfterChange": "4a26249aa893b7bf1faa1e1388aeb96ba4c3a814", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\t\t\"  // Method descriptor  #15 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\"  // Method descriptor #15 ([Ljava/lang/String;)V\\n\" + ", "-\t\t\"  // Method descriptor  #15 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\"  // Method descriptor #15 ([Ljava/lang/String;)V\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d309717bdc589e3fcb3f703ba96efaf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "4cdb299c3f5b0de082f2ec44442dd8762f2b077f", "commitAfterChange": "146b201b76577d8a0a09d69f0ce4d90e5c5e3978", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private void buildDeltas(SimpleLookupTable deltas)", "signatureAfterChange": "  private void buildDeltas(SimpleLookupTable deltas)", "diff": ["-\t\tSystem.out.println(\"Clearing last state : \" + this.lastState); //$NON-NLS-1$", "+\t\tSystem.out.println(\"JavaBuilder: Clearing last state : \" + this.lastState); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Performing full build since incremental build failed\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Performing full build since incremental build failed\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d412b3670cee1d65e1088d8954ca370b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic void testBug83304_ConstructorStringPattern() throws CoreException", "signatureAfterChange": " \tpublic void testBug83304_ConstructorStringPattern() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d45d23643bb119bb7ff64c92204fc8ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 208, "methodNumberAfterChange": 209, "signatureBeforeChange": " public void test0528_try_finally()", "signatureAfterChange": " public void test0528_try_finally()", "diff": ["-\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable x can only be null at this location\\n\" + ", "-\t\t\"The variable y can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable y can only be null at this location\\n\" +  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d466f24f03d0e578473ab69e8a542eec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testChangeOutputLocation() throws JavaModelException, CoreException", "signatureAfterChange": " public void testChangeOutputLocation() throws JavaModelException, CoreException", "diff": ["-\t\t\t\"JavaProjectTests[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"JavaProjectTests[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\t\"JavaProjectTests[*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"JavaProjectTests[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d47603cb40166337ffd7483770b7bea6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "fdb8d62f1c901c375bd2aaf491776e68829346d4", "commitAfterChange": "abac83588fd8774146bd06b2319f52de11bc9846", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void test022() throws CoreException", "signatureAfterChange": " public void test022() throws CoreException", "diff": ["-\t\t\t\" * Copyright (c) 2000, 2005 IBM Corporation and others.\" +", "+\t\t\t\" * Copyright (c) 2000, 2006 IBM Corporation and others.\" +", "-\t\t\t\" * Copyright (c) 2000, 2005 IBM Corporation and others.\" +", "+\t\t\t\" * Copyright (c) 2000, 2006 IBM Corporation and others.\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4895d34e18e0351ba67f40ab4e51e7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f0db8160832eccbdf8ab4b583e10d3d781380ec0", "commitAfterChange": "8fe11c1ac7d7c1995fb3d075901e37002ee51e03", "methodNumberBeforeChange": 558, "methodNumberAfterChange": 558, "signatureBeforeChange": " \tpublic void test554()", "signatureAfterChange": " \tpublic void test554()", "diff": ["-\t\t\t\"Unnecessary cast from X<String> to X<capture-of ? extends Object>\\n\" + ", "+\t\t\t\"Unnecessary cast from X<String> to X<? extends Object>\\n\" + ", "-\t\t\t\"Unnecessary cast from X2 to X<capture-of ? extends Object>\\n\" + ", "+\t\t\t\"Unnecessary cast from X2 to X<? extends Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d49565a9a08df2cab952a8fd25106ec6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "85c7cff1360bd81398e5c21f0560acd7376e740e", "commitAfterChange": "8a4bd8a6db890bd0552718e8332a5c8e90155329", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"    -deprecation     + deprecation outside deprecated code (on by default\\n\" + ", "-        \"                       unless the default warnings are overriden)\\n\" +", "+        \"    -deprecation     + deprecation outside deprecated code (equivalent to\\n\" + ", "+        \"                       -warn:+deprecation)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4ad9545b0026f819586210baf516293", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "2a800be547e99862cb67025bbbfca4b49e09cdb9", "commitAfterChange": "7aad3361583d2df12bebea3ea848be558fb7c078", "methodNumberBeforeChange": 286, "methodNumberAfterChange": 286, "signatureBeforeChange": " public void test242_jar_ref_in_jar()", "signatureAfterChange": " public void test242_jar_ref_in_jar()", "diff": ["-\t\tnew String[] {", "-\t\t\t\"src/p/X.java\",", "-\t\t\t\"package p;\\n\" +", "-\t\t\t\"/** */\\n\" +", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"  int i = R.R2;\\n\" +", "-\t\t\t\"  int j = R.R3;\\n\" +", "-\t\t\t\"}\",", "-\t\t},", "-\t  \"\\\"\" + OUTPUT_DIR +  File.separator + \"src/p/X.java\\\"\"", "+\t\t\tnew String[] {", "+\t\t\t\t\t\"src/p/X.java\",", "+\t\t\t\t\t\"package p;\\n\" +", "+\t\t\t\t\t\"/** */\\n\" +", "+\t\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\t\"  int i = R.R2;\\n\" +", "+\t\t\t\t\t\"  int j = R.R3;\\n\" +", "+\t\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"src/p/X.java\\\"\"", "-\t  + \" -1.5 -g -preserveAllLocals\"", "-\t  + \" -proceedOnError -referenceInfo\"", "-\t  + \" -d \\\"\" + OUTPUT_DIR + File.separator + \"bin\\\" \",", "-\t  \"\",", "-\t  \"----------\\n\" +", "-\t  \"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/src/p/X.java (at line 5)\\n\" +", "-\t  \"\tint j = R.R3;\\n\" +", "-\t  \"\t        ^^^^\\n\" +", "-\t  \"R.R3 cannot be resolved to a variable\\n\" +", "-\t  \"----------\\n\" +", "-\t  \"1 problem (1 error)\",", "-\t  true);", "+\t\t\t+ \" -1.5 -g -preserveAllLocals\"", "+\t\t\t+ \" -proceedOnError -referenceInfo\"", "+\t\t\t+ \" -d \\\"\" + OUTPUT_DIR + File.separator + \"bin\\\" \",", "+\t\t\t\"\",", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/src/p/X.java (at line 5)\\n\" + ", "+\t\t\t\"\tint j = R.R3;\\n\" + ", "+\t\t\t\"\t          ^^\\n\" + ", "+\t\t\t\"R3 cannot be resolved or is not a field\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1 problem (1 error)\",", "+\t\t\ttrue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d504b0b870aef1ca174fdf55f837df52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void testBug96237_Private04()", "signatureAfterChange": " \tpublic void testBug96237_Private04()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5112bd53a2a6bc4f208049f4ad2bb91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void testDeleteField() throws CoreException", "signatureAfterChange": " public void testDeleteField() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d53971b978d42f39137791a3b79933b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "badff9a93fec2ed67e9ce195f8709b06674bcf81", "commitAfterChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void test004()", "signatureAfterChange": "  \tpublic void test004()", "diff": ["-\t\t\t\"\t                                      ^^^^^\\n\" + ", "+\t\t\t\"\t                                    ^\\n\" + ", "-\t\t\t\"\t                                             ^^^^^\\n\" + ", "+\t\t\t\"\t                                           ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d565ba1c8eabd36c23e4bde649363d81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic void testBug82208_ANNOTATION_TYPE() throws CoreException", "signatureAfterChange": " \tpublic void testBug82208_ANNOTATION_TYPE() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b4e7c468c99d7d6ecb5a64d20b7a60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "0ac6b5233e70725ef3995b23684749c5c5bb399b", "commitAfterChange": "056f67c269508c117cece955acb1d19bde9a830b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void test000()", "signatureAfterChange": " \tpublic void test000()", "diff": ["-\t\t\t\t\t\"\tFREDERIC(54);\\n\" +  // TODO (frederic) check value", "+\t\t\t\t\t\"\tFREDERIC();\\n\" + ", "-\t\t\t\t\t\"\tT() {}\\n\" + ", "+\t\t\t\t\t\"\tT() { this(54); }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d62e44a3465775495849228e5f94f184", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tpublic void test0034()", "signatureAfterChange": "  \tpublic void test0034()", "diff": ["-\t\t\t\"Method foo(E) has the same erasure foo(Exception) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(E) is the same as another method in type X<E,T>\\n\" +", "-\t\t\t\"Method foo(T) has the same erasure foo(Exception) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(T) is the same as another method in type X<E,T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d644b1bc87aaa770ed1948a29a03fb16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/FlowAnalysisTest8.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void testLambda_01()", "signatureAfterChange": " public void testLambda_01()", "diff": ["-\t\t\"Null type safety: The expression of type String needs unchecked conversion to conform to \\'@NonNull String\\'\\n\" + ", "+\t\t\"Null type safety (type annotations): The expression of type 'String' needs unchecked conversion to conform to \\'@NonNull String\\'\\n\" + ", "-\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" + ", "+\t\t\"Potential null pointer access: this expression has a '@Nullable' type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6563fe171c3e872f296518ad5ce64cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 676, "methodNumberAfterChange": 676, "signatureBeforeChange": " public void test672()", "signatureAfterChange": " public void test672()", "diff": ["-\t\t\"Type safety: Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + ", "+\t\t\"Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + ", "+\t\t\"Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6764df8f050973f761e23b0a21f3c86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void testBug103304d()", "signatureAfterChange": " \tpublic void testBug103304d()", "diff": ["-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d67ca63933fa7cbe4ef9ec29ad608889", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest_1_5.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test0006()", "signatureAfterChange": " public void test0006()", "diff": ["-\t\t\"    @AnAnnotation class Y {\\n\" + ", "+\t\t\"    @AnAnnotation(name = $missing$) class Y {\\n\" + ", "-\t\t\"    @AnAnnotation class Y {\\n\" + ", "+\t\t\"    @AnAnnotation(name = $missing$) class Y {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6c6639e19e337511d493736d15ee057", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "badff9a93fec2ed67e9ce195f8709b06674bcf81", "commitAfterChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "methodNumberBeforeChange": 390, "methodNumberAfterChange": 390, "signatureBeforeChange": " \tpublic void test0384()", "signatureAfterChange": " \tpublic void test0384()", "diff": ["-\t\t\t\"\t                                  ^^^^^\\n\" + ", "+\t\t\t\"\t          ^^^^^\\n\" + ", "-\t\t\t\"\t                                    ^^^^^^\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6e249df2528ee47ececeb7ec0e43d05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "a4e58088a1010e10b50ef0d8683567f65215eac1", "commitAfterChange": "e58a2ebf19f99fca487e8ddd26a3dd844cc59501", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r \tpublic void testBinary06()", "signatureAfterChange": "\r \tpublic void testBinary06()", "diff": ["-\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'@NonNull T extends @NonNull Object\\'\\n\" + \r", "+\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'T extends @NonNull Object\\'\\n\" + \r", "-\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull Object\\' is not a valid substitute for the type parameter \\'@Nullable V extends @Nullable Object'\\n\" + \r", "+\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull Object\\' is not a valid substitute for the type parameter \\'V extends @Nullable Object'\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6e758f35f83dcef421f12a85911ad56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "e4262ef08c6f8e26e57ca0c6211e0fdea3f40578", "commitAfterChange": "6a7a52c96b7229ab86908d69ec0e914d08a5352f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void test018()", "signatureAfterChange": " \tpublic void test018()", "diff": ["-\t\t\t\"Duplicate member last in annotation @Name\\n\" + ", "+\t\t\t\"Duplicate attribute last in annotation @Name\\n\" + ", "-\t\t\t\"Duplicate member last in annotation @Name\\n\" + ", "+\t\t\t\"Duplicate attribute last in annotation @Name\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6eee938ca9c5baf76821cf1c0703622", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssignmentTest.java", "commitBeforeChange": "1826d0fe5b887e907f5db40f2da4d23b5ef1c8d6", "commitAfterChange": "0f549220f498cda7c86a65324f594a6b8e8c2616", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test044()", "signatureAfterChange": " public void test044()", "diff": ["-\t\t\"\t    ^^^^^^^\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"\t    ^^^^^^^\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6f408089fb5d13d6a3f7bc128bb0bc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "2f57f8dfaade218a320169042ea7ed8e042be61d", "commitAfterChange": "870bb4f621dd0b8090426a7261d67a43a6dc9aa9", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void test015()", "signatureAfterChange": " \tpublic void test015()", "diff": ["-\t\t\t\t\"1 problem (1 error)\",", "+\t\t\t\t\"1 problem (1 error)\\n\",", "-\t\t\t\"1 problem (1 error)\";", "+\t\t\t\"1 problem (1 error)\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d74af7679fd2a31d3d62c17b34c6949b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void testJavadocFieldStringDeclaration() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocFieldStringDeclaration() throws CoreException", "diff": ["-\t\t\t\t\"annSearchedVar\",", "+\t\t\t\t\"javadocSearchedVar\",", "-\t\t\t\t\"src/j1/AnnSearched.java j1.AnnSearched.annSearchedVar [annSearchedVar] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocSearched.java j1.JavadocSearched.javadocSearchedVar [javadocSearchedVar] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d752e7e19244d41d4bb57ff70ac7c931", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void testMultiLineCommentCodeSnippet5()", "signatureAfterChange": "  \tpublic void testMultiLineCommentCodeSnippet5()", "diff": ["-\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(), box\\n\" +", "-\t\t\t\t\" * \t\t\t\t.getGames().toArray());\\n\" +", "+\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(),\\n\" +", "+\t\t\t\t\" * \t\t\t\tbox.getGames().toArray());\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7a4e259d3ce205a8011aeb6cacffd21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testDeletePackageFragment3() throws CoreException", "signatureAfterChange": " public void testDeletePackageFragment3() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b80e5d5e5322289b902d8c534fef48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForConstructor.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void test003()", "signatureAfterChange": "  \tpublic void test003()", "diff": ["-\t\t\t\t+ \"Javadoc: Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Unknown cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Unknown cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7c53b99e9f894df4caa19f2cdf3acf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void testBug101283c()", "signatureAfterChange": " \tpublic void testBug101283c()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d821eaeaf8408d155e9da9fe6cb60d9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EQUIVALENT_RAW_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8453a71c38ef6132c95d770483552ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "45a4bf71a614f82f4a9506597605186918f4c34e", "commitAfterChange": "ae712f0ebf4829621147d487684cd97c94226b25", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic void test053()", "signatureAfterChange": " \tpublic void test053()", "diff": ["-\t// TODO (olivier) update once https://bugs.eclipse.org/bugs/show_bug.cgi?id=79798 is fixed", "-\t\t\t\t\"    byte value() default (byte) 0;\\n\" + ", "+\t\t\t\t\"    byte value() default 0;\\n\" + ", "-\t\t\t\t\"    @I((byte)2) void foo() {\\n\" + ", "+\t\t\t\t\"    @I(2) void foo() {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d86c57a3fe10a98923d7b914d55daf60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExternalizeStringLiterals15Test.java", "commitBeforeChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "commitAfterChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test003()", "signatureAfterChange": " public void test003()", "diff": ["-\t\t\t\"\t\\n\" +", "-\t\t\t\"\t@SuppressWarnings(\\\"nls\\\")\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d89c25489ac4d351bcd83547c5c5f37c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 347, "methodNumberAfterChange": 347, "signatureBeforeChange": " public void test0347()", "signatureAfterChange": " public void test0347()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pub>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pub>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8e97aba46f41acad19d2e4cabf05832", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "9bef3f15c43b07a14e76957980f62386b2bcee10", "commitAfterChange": "73f504e7d77d95d8fc2d6621b5727e1e3ab07530", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test011()", "signatureAfterChange": " public void test011()", "diff": ["-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c201d08b6f9edaf282a5ae024399f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 832, "methodNumberAfterChange": 832, "signatureBeforeChange": " public void test826()", "signatureAfterChange": " public void test826()", "diff": ["-\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da0041d91af8fb1dbc657025d274cac3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "9bef3f15c43b07a14e76957980f62386b2bcee10", "commitAfterChange": "73f504e7d77d95d8fc2d6621b5727e1e3ab07530", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test011()", "signatureAfterChange": " public void test011()", "diff": ["-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da02407e5877590547e47c17ad021ada", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "64774f020d7005b54827ff53032895aaf4555d81", "commitAfterChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 5)\\n\" +", "-\t\t\"\tWarn warn;\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"Discouraged access: The type Warn is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 6)\\n\" +", "-\t\t\"\tKO ko;\\n\" +", "-\t\t\"\t^^\\n\" +", "-\t\t\"Access restriction: The type KO is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 7)\\n\" +", "-\t\t\"\tZork z;\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"Zork cannot be resolved to a type\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3 problems (1 error, 2 warnings)\\n\",", "+        \"----------\\n\" + ", "+        \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 5)\\n\" + ", "+        \"\tWarn warn;\\n\" + ", "+        \"\t^^^^\\n\" + ", "+        \"Discouraged access: The type \\'Warn\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---\\')\\n\" + ", "+        \"----------\\n\" + ", "+        \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 6)\\n\" + ", "+        \"\tKO ko;\\n\" + ", "+        \"\t^^\\n\" + ", "+        \"Access restriction: The type \\'KO\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---\\')\\n\" + ", "+        \"----------\\n\" + ", "+        \"3. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 7)\\n\" + ", "+        \"\tZork z;\\n\" + ", "+        \"\t^^^^\\n\" + ", "+        \"Zork cannot be resolved to a type\\n\" + ", "+        \"----------\\n\" + ", "+        \"3 problems (1 error, 2 warnings)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da2863e4ad041943e224771f3cc85880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments09() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments09() throws CoreException", "diff": ["-\t\tsearch(\"Multiple(*) % <?,? extends Throwable,? extends RuntimeException>\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<?,? extends Throwable,? extends RuntimeException>Multiple(*)\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da497047b260b4e72969f3de33b0204c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "e733dacf7e2cb0f1c468842218b8cf0fff8a2c3b", "commitAfterChange": "ef98b1110b7ab3f8a6089643c80689cd9cb542d0", "methodNumberBeforeChange": 745, "methodNumberAfterChange": 745, "signatureBeforeChange": " public void testBug198074() throws JavaModelException", "signatureAfterChange": " public void testBug198074() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t+ \\\"from y \\\"\\n\" + ", "-\t\t\"\t\t\t\t+ \\\"where z=a\\\";\\n\" + ", "+\t\t\"\t\t\t\t\t+ \\\"from y \\\"\\n\" + ", "+\t\t\"\t\t\t\t\t+ \\\"where z=a\\\";\\n\" + ", "+\t\t\"}\\n\"", "+\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daade5e84f9dc9666445b30c3f61c9a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments08() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments08() throws CoreException", "diff": ["-\t\tsearch(\"Multiple(*,*,*) % <RuntimeException, RuntimeException, RuntimeException>\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<RuntimeException, RuntimeException, RuntimeException>Multiple(*,*,*)\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dadc2902edac166fff55505384ef981b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " public void testBug400905_0013c() throws CoreException", "signatureAfterChange": " public void testBug400905_0013c() throws CoreException", "diff": ["-\t\tassertSearchResults(\"src/X.java int int void X.zoo():Lambda(I).doit(X):Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\");", "+\t\tassertSearchResults(\"src/X.java int int void X.zoo():<lambda #1>.doit(X):<lambda #1>.doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda #1>.doit(X) [X] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db3ed2f6ced3b9d2f6789bc1fa03ebc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug101283b()", "signatureAfterChange": " \tpublic void testBug101283b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db404f7c78283a3530fc4dbb140dd5f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testSingleWildcardSuperStringPattern05() throws CoreException", "signatureAfterChange": " \tpublic void testSingleWildcardSuperStringPattern05() throws CoreException", "diff": ["-\t// TODO (search-frederic) try to have a better match selection", "+\t// TODO [search] try to have a better match selection", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbe57656197e91e035b09443df8e4be8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "da348589e3fa3fe0a889394dbec5343c317d63e7", "commitAfterChange": "cfb672e66d17bef31f4b5a6058666168ba53b0d0", "methodNumberBeforeChange": 720, "methodNumberAfterChange": 720, "signatureBeforeChange": " public void testCompletionVariableName2() throws JavaModelException", "signatureAfterChange": " public void testCompletionVariableName2() throws JavaModelException", "diff": ["-\t\t\"element:barMyClass    completion:barMyClass    relevance:\"+(R_DEFAULT  + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"\\n\" +", "+\t\t\"element:bar_MyClass    completion:bar_MyClass    relevance:\"+(R_DEFAULT  + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:testBarMyClass    completion:testBarMyClass    relevance:\"+(R_DEFAULT  + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),", "+\t\t\"element:test_Bar_MyClass    completion:test_Bar_MyClass    relevance:\"+(R_DEFAULT  + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc1426e0233c0946c0eda6b0bfe96e40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test_nonnull_parameter_012()", "signatureAfterChange": " public void test_nonnull_parameter_012()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc6ea8bcedfb22b7038110b33abb9e34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void test01()", "signatureAfterChange": " public void test01()", "diff": ["-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + ", "-\t\t\"  public int[] i = {0,1,};\\n\" + ", "+\t\t\"  public int[] i = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dca24bdace5ad9dc785e040a11cfba53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic void test112()", "signatureAfterChange": " \tpublic void test112()", "diff": ["-\t\t\t\t\"package com.annot;\\r\\n\" + ", "-\t\t\t\t\"\\r\\n\" + ", "+\t\t\t\t\"package com.annot;\\n\" + ", "+\t\t\t\t\"\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd0aaa981c9a68b1cc4750722c3e03b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 220, "methodNumberAfterChange": 220, "signatureBeforeChange": " public void testBug260381_wksp2_01b() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_01b() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd63e42e318a60382087ac9f83c101d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void test033()", "signatureAfterChange": " \tpublic void test033()", "diff": ["-\t\t\t\"    29  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    29  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    33  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    33  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dda98278a2d69632fc32cdcdf33d10e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ParserTest.java", "commitBeforeChange": "3dcd86f7bc41c382a54bdba5a413782953f2f447", "commitAfterChange": "e501ebeb8f2d4d3ffca048b0a3620770b3b21e32", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\"\t       ^\\n\" + ", "+\t\t\"\t     ^\\n\" + ", "-\t\t\"\t       ^\\n\" + ", "+\t\t\"\t     ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddc699249bb7bf3e9a59d34c8bca55ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 366, "methodNumberAfterChange": 366, "signatureBeforeChange": " public void test0366()", "signatureAfterChange": " public void test0366()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pri>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pri>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddd6680a8fff3a78477ebc0b91e72e1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 245, "methodNumberAfterChange": 240, "signatureBeforeChange": " public void testBug313524_wksp1_02() throws JavaModelException", "signatureAfterChange": " public void testBug313524_wksp1_02() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t\t\t\tnew String[] { buildFile.getAbsolutePath() }));\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\tnew String[] { buildFile.getAbsolutePath() }));\\n\" + ", "-\t\t\"\t\t\t\t\t\t\tnew String[] { buildFile.getAbsolutePath() }));\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\tnew String[] { buildFile.getAbsolutePath() }));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddde663409d73b3151910e17a7bd4d93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testMoveSourceFolder5() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder5() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddf518663d5cca5b0437fee19494a029", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 278, "methodNumberAfterChange": 278, "signatureBeforeChange": " \tpublic void test274()", "signatureAfterChange": " \tpublic void test274()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de4d18124987d3ea5591d2fe4cb75be6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " \tpublic void test031()", "signatureAfterChange": " \tpublic void test031()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tinterface X { long hashCode(); }\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tinterface X { long hashCode(); }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de8bdac5c3262c61ebf1b79d96069ba7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": " \tpublic void test037e()", "signatureAfterChange": " \tpublic void test037e()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tpublic abstract class X extends Y implements I { }\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic abstract class X extends Y implements I { }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df161f0fa7eaab0326092e15f42ec334", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "af9bbbd46257142e006853d95525656db05c0be8", "commitAfterChange": "75441f37a4b77efa641f7e3f5866e117cb328da6", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testMoveSourceFolder6() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder6() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df279ce0b23ecb9ebbd566cdb8fe624b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic void test044()", "signatureAfterChange": "  \tpublic void test044()", "diff": ["-\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Vector cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Vector cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df5cac80a8db9fb11b1434d4ea3c968b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " public void testBug311578d() throws JavaModelException", "signatureAfterChange": " public void testBug311578d() throws JavaModelException", "diff": ["-\t\t\"\t// //F--\\n\" + ", "+\t\t\"\t//// F--\\n\" + ", "-\t\t\"\t// //F++\\n\" + ", "+\t\t\"\t//// F++\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfb40df5efd06914576662607bd169d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void test010()", "signatureAfterChange": " \tpublic void test010()", "diff": ["-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfec1561f92e4f115fea094f33f2f17f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "68f185fc63132d7b106a1c7ca52ed6d004b96329", "commitAfterChange": "4a85a8ee613913420acf3dde5af380e91d3bad2c", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " public void test425512a() throws Exception", "signatureAfterChange": " public void test425512a() throws Exception", "diff": ["-\t\t\"\t                                    ^^^\\n\" + ", "-\t\t\"Impossible interface for array type\\n\" + ", "+\t\t\"\t            ^^^^^^\\n\" + ", "+\t\t\"Arrays are not allowed in intersection cast operator\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e01bc6a88d95e1d4f701ac22e5042f64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " public void testBug311578d() throws JavaModelException", "signatureAfterChange": " public void testBug311578d() throws JavaModelException", "diff": ["-\t\t\"\t// //F--\\n\" + ", "+\t\t\"\t//// F--\\n\" + ", "-\t\t\"\t// //F++\\n\" + ", "+\t\t\"\t//// F++\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e02a14e402e84f09157e017c58fe46ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "\r public void test0056() throws IOException", "signatureAfterChange": "\r public void test0056() throws IOException", "diff": ["-\t\t\"    @Marker HashMap<@Positive Integer, @Negative Integer>[] @NonNull [] @NonEmpty [][] p;\\n\" + \r", "-\t\t\"    HashMap<@Positive Integer, @Negative Integer>[] @NonNull [] @NonEmpty [][] q;\\n\" + \r", "+\t\t\"    @Marker HashMap<@Positive Integer, @Negative Integer> @NonEmpty [][][] @NonNull [] p;\\n\" + \r", "+\t\t\"    HashMap<@Positive Integer, @Negative Integer> @NonEmpty [][][] @NonNull [] q;\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0785215eef2f33d02538f78d2b1f222", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "c86229e56d86bc6c43c864b0c2be3c639790cc44", "commitAfterChange": "886274eeca44ac156a0ab29fb479330630b97083", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tpublic void testBug68017javadocWarning1()", "signatureAfterChange": " \tpublic void testBug68017javadocWarning1()", "diff": ["-\t\t\t\t\"Javadoc: Missing return type description\\n\" + ", "+\t\t\t\t\"Javadoc: Description expected after @return\\n\" + ", "-\t\t\t\t\"Javadoc: Missing return type description\\n\" + ", "+\t\t\t\t\"Javadoc: Description expected after @return\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e081c494843b7627a16a38d90bfa010c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test085()", "signatureAfterChange": " public void test085()", "diff": ["-\t\t\t\"Syntax error, static imports are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, static imports are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, static imports are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e08cb4dc361adc5c28d87f694bf3920c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testLocalType4() throws JavaModelException", "signatureAfterChange": " public void testLocalType4() throws JavaModelException", "diff": ["-\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e08ce91c83f7c86d7349ca6367d28ed9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test073()", "signatureAfterChange": " public void test073()", "diff": ["-\t\t\"The enum constant A must define the abstract method test()\\n\" +", "+\t\t\"The enum constant A must implement the abstract method test()\\n\" +", "-\t\t\"The enum constant A must define the abstract method test()\\n\" +", "+\t\t\"The enum constant A must implement the abstract method test()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0adaf1e97a78bf0ccc5f8ba9735dc5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void test013()", "signatureAfterChange": " public void test013()", "diff": ["-\t\t\"Unnecessary cast to type long for expression of type int\\n\" + ", "+\t\t\"Unnecessary cast from int to long\\n\" + ", "-\t\t\"Unnecessary cast to type long for expression of type int. It is already compatible with the argument type long\\n\" + ", "+\t\t\"Unnecessary cast from int to long. It is already compatible with the argument type long\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0e8b785a5b0ef05909e17bf65a515b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForConstructor.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void test048()", "signatureAfterChange": "  \tpublic void test048()", "diff": ["-\t\t\t\t+ \"Javadoc: Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Unknown cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Visibility.Unknown cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f33d2e4e97a729bd9339845302939e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "c3b5450dcf9ea13d0c83d8c3626a24c66b7fa575", "commitAfterChange": "6ba8aa99e5742ec9a6e7fd8289a420de51af2d80", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tprotected String displayString(String toPrint, int indent)", "signatureAfterChange": " \tprotected String displayString(String toPrint, int indent)", "diff": ["-\t\t\t\t(\"\\\"+  getExternalJCLPath() +\\\"\").toCharArray());", "+\t\t\t\t(\"\\\"+ getExternalJCLPath() + \\\"\").toCharArray());", "-\t\t\t\t(\"\\\"+  getExternalJCLSourcePath() +\\\"\").toCharArray());", "+\t\t\t\t(\"\\\"+ getExternalJCLSourcePath() + \\\"\").toCharArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0ffc666ee4b8b1014c9f0523792fde3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ArrayTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test005()", "signatureAfterChange": " public void test005()", "diff": ["-\t\t\"    1  anewarray java/lang/Object [4]\\n\" + ", "-\t\t\"    4  putstatic X.X [Ljava/lang/Object; [10]\\n\" + ", "+\t\t\"    1  anewarray java.lang.Object [4]\\n\" + ", "+\t\t\"    4  putstatic X.X : java.lang.Object[] [10]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1121158950f5f9e7ac7aab443445976", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "e733dacf7e2cb0f1c468842218b8cf0fff8a2c3b", "commitAfterChange": "ef98b1110b7ab3f8a6089643c80689cd9cb542d0", "methodNumberBeforeChange": 751, "methodNumberAfterChange": 754, "signatureBeforeChange": " public void testBug213700() throws JavaModelException", "signatureAfterChange": " public void testBug213700() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t(d == e) &&\\n\" + ", "-\t\t\"\t\t\t\t(f == g && h == i)) {\\n\" + ", "+\t\t\"\t\t\t(d == e) &&\\n\" + ", "+\t\t\"\t\t\t(f == g && h == i)) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e172e016addb75073010114f7f74d458", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void test027()", "signatureAfterChange": " \tpublic void test027()", "diff": ["-\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e17a4a2494fe69544c418c84efabbdd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 212, "signatureBeforeChange": " public void test0531_try_finally()", "signatureAfterChange": " public void test0531_try_finally()", "diff": ["-\t\t\"The variable x cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable x cannot be null at this location\\n\" + ", "-\t\t\"The variable y can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null pointer access: The variable y can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1b5a00c55c45ae0374c329e12381dda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "dbfe97bed3f7feb8408fadbcb58741aa04540553", "commitAfterChange": "3d86d8fdd283e92da8b2fd4ec59e7d2f2b4add9f", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void test040()", "signatureAfterChange": " public void test040()", "diff": ["-\t\t\"This class must implement the inherited abstract method Y.baz(), but cannot override it since it is not visible from X. Either make the type abstract or make the inherited method visible.\\n\" + ", "+\t\t\"This class must implement the inherited abstract method Y.baz(), but cannot override it since it is not visible from X. Either make the type abstract or make the inherited method visible\\n\" + ", "-\t\t\"The method X.baz() does not override the inherited method from Y since it is private to a different package.\\n\" + ", "+\t\t\"The method X.baz() does not override the inherited method from Y since it is private to a different package\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1d9ba7f7e778d24b273cca34c3c3f25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "fb0020e27808c429f3f311a11ef0ea9ea04441aa", "commitAfterChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  \tpublic void testBug416175()", "signatureAfterChange": "  \tpublic void testBug416175()", "diff": ["-\t\t\t\"Null type safety (type annotations): The expression of type \\'ArrayList<String>\\' needs unchecked conversion to conform to \\'List<@NonNull ? extends String>\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'ArrayList<String>\\' needs unchecked conversion to conform to \\'List<@NonNull ? extends @NonNull String>\\'\\n\" + ", "-\t\t\t\"Null type mismatch: required \\'@NonNull ? extends String\\' but the provided value is null\\n\" + ", "+\t\t\t\"Null type mismatch: required \\'@NonNull ? extends @NonNull String\\' but the provided value is null\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e20be479fee46ffac81225d52355b472", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "0f3615b9d34177036abe735792350c6daafd5f0f", "commitAfterChange": "246965b39748e3da2ea49457412592390c45caa5", "methodNumberBeforeChange": 975, "methodNumberAfterChange": 975, "signatureBeforeChange": " public void testBug346454g() throws JavaModelException", "signatureAfterChange": " public void testBug346454g() throws JavaModelException", "diff": ["-\t\t\t\t\"T2[METHOD_REF<CONSTRUCTOR>]{, Lpack.Test<>.T2;, (TZ;)V, T2, (z), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"Test<>.T2[ANONYMOUS_CLASS_DECLARATION]{, Lpack.Test<>.T2;, (TZ;)V, null, (z), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\t\"T2[METHOD_REF<CONSTRUCTOR>]{, Lpack.Test<>.T2<>;, (TZ;)V, T2, (z), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"Test<>.T2<>[ANONYMOUS_CLASS_DECLARATION]{, Lpack.Test<>.T2<>;, (TZ;)V, null, (z), \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e22b0efeef02071b87477e2bcbae1917", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java", "commitBeforeChange": "e164f6513264532353828b2bd9ce24ea60f98687", "commitAfterChange": "c39eeb0c7df54699bfd8493b726747537e3838f3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void setupExternalLibrary() throws IOException", "signatureAfterChange": " private void setupExternalLibrary() throws IOException", "diff": ["-\torg.eclipse.jdt.core.tests.util.Util.createClassFolder(pathsAndContents, externalFolder + \"lib\", \"1.4\");", "-\torg.eclipse.jdt.core.tests.util.Util.createSourceDir(pathsAndContents, externalFolder + \"src\");", "+\torg.eclipse.jdt.core.tests.util.Util.createClassFolder(pathsAndContents, externalFolder + \"/lib\", \"1.4\");", "+\torg.eclipse.jdt.core.tests.util.Util.createSourceDir(pathsAndContents, externalFolder + \"/src\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27f3d1c4ea0a6a8665d87c80a7ac558", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e28216c2bc3194891834880906f8a6bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": " \tpublic void test182()", "signatureAfterChange": " \tpublic void test182()", "diff": ["-\t\t\t\"Type safety: The cast from Object to AX<String> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to AX<String> is actually checking against the erased type AX\\n\" + ", "-\t\t\t\"Type safety: The cast from Object to AX<E> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to AX<E> is actually checking against the erased type AX\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c4ec4da0e38cc31cfdb7ba26eb0dc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " public void testBug260011_04() throws JavaModelException", "signatureAfterChange": " public void testBug260011_04() throws JavaModelException", "diff": ["-\t\t\"\t * The list of variable declaration fragments (element type:\\n\" + ", "-\t\t\"\t * <code VariableDeclarationFragment</code>). Defaults to an empty list.\\n\" + ", "+\t\t\"\t * The list of variable declaration fragments (element type: <code\\n\" + ", "+\t\t\"\t * VariableDeclarationFragment</code>). Defaults to an empty list.\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c62f4698ec5eeda53bb59ef865e625", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java", "commitBeforeChange": "69b02d68015b1f30ee38d1576a843274517957c7", "commitAfterChange": "c7a9edf536467451ba659d7e03ac6c483c5c0cfe", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void testHB_1FHSLDR()", "signatureAfterChange": " public void testHB_1FHSLDR()", "diff": ["-\tString expectedCompletionNodeToString = \"<CompleteOnName:fi>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:fi>\";", "-\t\t\"      <CompleteOnName:fi>;\\n\" + ", "+\t\t\"      <CompleteOnKeyword:fi>;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2e1e1983f68ddfc2bc58fca4e251fe9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void testDeltaCreateNonPrimaryWorkingCopy() throws CoreException", "signatureAfterChange": " \tpublic void testDeltaCreateNonPrimaryWorkingCopy() throws CoreException", "diff": ["-\t\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e303bb970db721a2bcba502ed6d1475c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testAnonymousType6() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType6() throws JavaModelException", "diff": ["-\t\t\"  X [in X.java [in p8 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp8/X;} [in X.java [in p8 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e30523de0093bb4b7339a0e5604e365f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 174, "signatureBeforeChange": " public void test0173()", "signatureAfterChange": " public void test0173()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:pri>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:pri>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e33d138834362e9c07785647d8ac789d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 543, "methodNumberAfterChange": 543, "signatureBeforeChange": " \tpublic void test539()", "signatureAfterChange": " \tpublic void test539()", "diff": ["-\t\t\t\"Type safety: X.B is a raw type. References to generic type X.B<C> should be parameterized\\n\" + ", "+\t\t\t\"X.B is a raw type. References to generic type X.B<C> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.B is a raw type. References to generic type X.B<C> should be parameterized\\n\" + ", "+\t\t\t\"X.B is a raw type. References to generic type X.B<C> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e387ff715d11ba46e4c84f75979074b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testMoveSourceFolder2() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder2() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39b26f66bc7641d99810b5660e2f569", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void testBug96237_Public05()", "signatureAfterChange": " \tpublic void testBug96237_Public05()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3a109cd65c7341ee87d9f28c777c718", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 301, "methodNumberAfterChange": 301, "signatureBeforeChange": " public void test150()", "signatureAfterChange": " public void test150()", "diff": ["-\t\t\"Method method3(X.D1<String>, X.D1<String>, X.D1<Date>) has the same erasure method3(X.D1<T>, X.D1<T>, X.D1<T>) as another method in type X\\n\" +", "+\t\t\"Erasure of method method3(X.D1<String>, X.D1<String>, X.D1<Date>) is the same as another method in type X\\n\" +", "-\t\t\"Method method3(X.D1<String>, X.D1<String>, X.D1<String>) has the same erasure method3(X.D1<T>, X.D1<T>, X.D1<T>) as another method in type X\\n\" +", "+\t\t\"Erasure of method method3(X.D1<String>, X.D1<String>, X.D1<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3aae85215b55aa8957bcc3151d99521", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  \tpublic void test0033()", "signatureAfterChange": "  \tpublic void test0033()", "diff": ["-\t\t\t\"Method foo(E) has the same erasure foo(Object) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(E) is the same as another method in type X<E,T>\\n\" +", "-\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(T) is the same as another method in type X<E,T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3c0f10f7bf0b65cf2b81c3d2d0ed4de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " \tpublic void test0182()", "signatureAfterChange": " \tpublic void test0182()", "diff": ["-\t\t\t\"Type safety: The cast from Object to AX<String> is actually checking against the erased type AX\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to AX<String>\\n\" + ", "-\t\t\t\"Type safety: The cast from Object to AX<E> is actually checking against the erased type AX\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to AX<E>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e440a1114fb57fd90f1bfebb1f4e407f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTypeCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void test005() throws JavaModelException", "signatureAfterChange": "  public void test005() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e446a58afd7d1c8e93553d8708d218d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testBug83127e()", "signatureAfterChange": " \tpublic void testBug83127e()", "diff": ["-\t\t\t\"Javadoc: The method add(Object) is undefined for the type Unrelated1\\n\" + ", "+\t\t\t\"Javadoc: The method add(E) in the type Unrelated1 is not applicable for the arguments (Object)\\n\" + ", "-\t\t\t\"The constructor Object(null) is undefined\\n\" + ", "+\t\t\t\"The constructor Test(T) refers to the missing type T\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e45d12a04d6292549b0e9316a6c67763", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "84c5b115e7466dfc6e19cd3055480421b2384a2d", "commitAfterChange": "1d6638787ae042a98f74eaa1a6155e74e1a941be", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 215, "signatureBeforeChange": " public void test172_warn_options()", "signatureAfterChange": " public void test172_warn_options()", "diff": ["-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\",", "-\t\t\"2 problems (2 warnings)\",", "+\t\t\"2 problems (2 warnings)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4d88bbcf3232e8537b594d8d4cc0f99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "0faf571a2b978290e761500f873fc8f116675788", "commitAfterChange": "16ea2a8daece1ce57aeee98ca0579c5d79d5f9c9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void test002()", "signatureAfterChange": "  \tpublic void test002()", "diff": ["-\t\t\t\"Class must implement the inherited abstract method I<B>.foo(B)\\n\" + ", "+\t\t\t\"The type J<T> must implement the inherited abstract method I<B>.foo(B)\\n\" + ", "-\t\t\t\"Class must implement the inherited abstract method I.foo(Object)\\n\" + ", "+\t\t\t\"The type L<T> must implement the inherited abstract method I.foo(Object)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4eb44c15b467e4692cfc497ab92344b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForClass.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void test020()", "signatureAfterChange": " \tpublic void test020()", "diff": ["-\t\t\t\t\t+ \"\t * @see Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see AbstractVisibility.AvcPublic Valid ref: visible inner class of local class \\n\"", "-\t\t\t\t\t+ \"\t * @see test.Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see test.AbstractVisibility.AvcPublic Valid ref: visible inner class of local class \\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4fb7fd3ccae4ed4efd7498545d50b82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic void testBug82208_CLASS_AND_INTERFACE() throws CoreException", "signatureAfterChange": " \tpublic void testBug82208_CLASS_AND_INTERFACE() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e539fb47a8d0c760548046e47223c0b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 295, "methodNumberAfterChange": 295, "signatureBeforeChange": " public void testBug330313_wksp1_18_njl()", "signatureAfterChange": " public void testBug330313_wksp1_18_njl()", "diff": ["-\t\t\"\t\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "-\t\t\"\t\t\t\t\t\to.bodyDeclarations()));\\n\" + ", "+\t\t\"\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "+\t\t\"\t\t\t\t\to.bodyDeclarations()));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e551889c2ab3fe0226a8d6dfffc24460", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "15be40cf5262e06998d74b41636698f1f284a564", "commitAfterChange": "a4862af7684f06076791ef9ff6f765210c06b259", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": " \tpublic void testBug86380_Type() throws CoreException", "signatureAfterChange": " \tpublic void testBug86380_Type() throws CoreException", "diff": ["-\t\t\t\"src/b86380/package-info.java b86380.package-info [Annot] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Annot] EXACT_MATCH OUTSIDE_JAVADOC\"", "+\t\t\t\"src/b86380/package-info.java [Annot] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/b86380/package-info.java [Annot] EXACT_MATCH OUTSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e59518f68dcd368107c2f3ba585568ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void testBug83304_TypeStringPattern() throws CoreException", "signatureAfterChange": " \tpublic void testBug83304_TypeStringPattern() throws CoreException", "diff": ["-\t\t\t\"src/b83304/Types.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/b83304/Types.java b83304.Types.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/b83304/Types.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/b83304/Types.java b83304.Types.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e598b2a864d8b613f135085d60c7d675", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 272, "methodNumberAfterChange": 272, "signatureBeforeChange": "\t\t \tpublic void test268()", "signatureAfterChange": "\t\t \tpublic void test268()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5e6818e3e2cd7c04fe2bd9cd8304125", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug80194string1() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80194string1() throws CoreException, JavaModelException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 1, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e62a11ec0d5d3347ffbb355136097dca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "f7f89d61cddd4437d454a7cce2d799dfbd0c94b0", "commitAfterChange": "bff2f093f2ca890f300037b450293438832a5492", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void testDuplicateHashCode2()", "signatureAfterChange": " public void testDuplicateHashCode2()", "diff": ["-\t\t\"\t\twhile(true) {\\n\" +", "+\t\t\"\t\touter: while(true) {\\n\" +", "-\t\t\"\t\t\t\tSystem.exit(0);\\n\" +", "+\t\t\"\t\t\t\tbreak outer;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6faaa97f74a111c193d3e158d61de96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " public void testBug260381_wksp2_01c() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_01c() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e735cebc58f6120a5ad214dad9efb72e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4c370db17fcad0e528d16b2fecef0952e714ead1", "commitAfterChange": "73b4b882573d866af4a2886a5430207907acc99e", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void test0030() throws JavaModelException", "signatureAfterChange": " \tpublic void test0030() throws JavaModelException", "diff": ["-\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0030\", \"A.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0030\", \"X.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tcheckSourceRange(node, \"<X>this();\", source);\t\t", "+\t\tcheckSourceRange(node, \"<T>this();\", source);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e77aaaea95d2a4ee0674114c1cdb5bc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EQUIVALENT_ERASURE_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e79be51043d5b6daf8e28713823897da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [generic(new Exception())] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [generic(new Object())] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [generic(new Exception())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [<Object>generic(new Object())] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7b96fa516cc38356d8a12b278b63b3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "commitAfterChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "methodNumberBeforeChange": 567, "methodNumberAfterChange": 567, "signatureBeforeChange": " public void testBug210691() throws CoreException", "signatureAfterChange": " public void testBug210691() throws CoreException", "diff": ["-\t\t\"src/test/Ref.java [import \ufffd|pack.Test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Ref.java test.Ref.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\"", "+\t\t\"src/test/Ref.java [import \ufffd|pack.Test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Ref.java test.Ref.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8036dac6d2e747e962ecd19381ae02e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 249, "methodNumberAfterChange": 249, "signatureBeforeChange": " public void testBug313524_wksp1_11() throws JavaModelException", "signatureAfterChange": " public void testBug313524_wksp1_11() throws JavaModelException", "diff": ["-\t\t\"\t\treportError(AntLaunchConfigurationMessages\\n\" + ", "-\t\t\"\t\t\t\t.getString(\\\"AntLaunchShortcut.Unable\\\"), null); //$NON-NLS-1$\t\\n\" + ", "+\t\t\"\t\treportError(AntLaunchConfigurationMessages.getString(\\n\" + ", "+\t\t\"\t\t\t\t\\\"AntLaunchShortcut.Unable\\\"), null); //$NON-NLS-1$\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e810f160d0cc8c79dc133b9620055a6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "03bbb455a7526db4bb0a71fbf77be36d181a38ed", "commitAfterChange": "116de5a69f461f367591f088b307195e63b32ffc", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": " public void test0223() throws JavaModelException", "signatureAfterChange": " public void test0223() throws JavaModelException", "diff": ["-\t\tint start = end - \"test0223.AType.va\".length();", "+\t\tint start = end - \"va\".length();", "-\t\t\t\t\"VAR[FIELD_REF]{test0223.AType.VAR;, Ltest0223.AType;, I, VAR, null, [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\t\"VAR[FIELD_REF]{VAR;, Ltest0223.AType;, I, VAR, null, [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81416611189b9694f1398db9cc4655f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "6a618f5105b380b0a9a5dc6bfffb855693be7fab", "commitAfterChange": "93613529f4763965d02155d2aaa1cabf71be7897", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testCreateBindings25() throws JavaModelException", "signatureAfterChange": " \tpublic void testCreateBindings25() throws JavaModelException", "diff": ["-\t\t\t\"LX;.foo(Ljava/lang/String;I)V#str\\n\" +", "-\t\t\t\"LX;.foo(Ljava/lang/String;I)V#i\",", "+\t\t\t\"LX;.foo(Ljava/lang/String;I)V#str#0#0\\n\" + // occurrence 0, rank 0", "+\t\t\t\"LX;.foo(Ljava/lang/String;I)V#i#0#1\", // occurrence 0, rank 1"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e85901c2283bd7eafde0c0ee9b2ff6cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 308, "signatureBeforeChange": " public void testBug330313_wksp1_31_njl()", "signatureAfterChange": " public void testBug330313_wksp1_31_njl()", "diff": ["-\t\t\"\t\t\t\t\t\t&& hasOneOf(meta63, hashable, offset - 2, 2)\\n\" + ", "-\t\t\"\t\t\t\t\t\t&& !hasOneOf(meta64, hashable, offset - 4, 2)))\\n\" + ", "+\t\t\"\t\t\t\t\t\t&& hasOneOf(meta63, hashable, offset - 2, 2) && !hasOneOf(\\n\" + ", "+\t\t\"\t\t\t\t\t\t\tmeta64, hashable, offset - 4, 2)))\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8764699347b35c8f32f46d41e188db9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "commitAfterChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "methodNumberBeforeChange": 1359, "methodNumberAfterChange": 1359, "signatureBeforeChange": " public void test1325()", "signatureAfterChange": " public void test1325()", "diff": ["-\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Object to X<String>\\n\" + ", "+\t\t\t\"Type safety: The expression of type X needs unchecked conversion to conform to X<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b8d0da23b975a5af13fd13b98e6131", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test_nonnull_parameter_010()", "signatureAfterChange": " public void test_nonnull_parameter_010()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c29495acecb5491d446cebfb62c471", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 414, "methodNumberAfterChange": 414, "signatureBeforeChange": " \tpublic void test0410()", "signatureAfterChange": " \tpublic void test0410()", "diff": ["-\t\t\t\"The method add(capture-of ? super Exception) in the type List<capture-of ? super Exception> is not applicable for the arguments (Object)\\n\" + ", "+\t\t\t\"The method add(capture#4-of ? super Exception) in the type List<capture#4-of ? super Exception> is not applicable for the arguments (Object)\\n\" + ", "-\t\t\t\"The method add(capture-of ? super Exception) in the type List<capture-of ? super Exception> is not applicable for the arguments (Throwable)\\n\" + ", "+\t\t\t\"The method add(capture#5-of ? super Exception) in the type List<capture#5-of ? super Exception> is not applicable for the arguments (Throwable)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e3596f4e7ddc1fad08243b0f2519b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testMoveSourceFolder3() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder3() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e90854281980a1c950f14f0310a7d97a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e3c6da4c0577b51f3bc6f224497075ba50ad5a4f", "commitAfterChange": "6660c81782a931b8b839acec6bb790d5cc445bc7", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["-\t\t\t\t\"\t\t     System.out.println(\\\"Number\\\");\\n\" + ", "+\t\t\t\t\"\t\t     System.out.print(\\\"Number\\\");\\n\" + ", "-\t\t\t\"StringNumber\"", "+\t\t\t\"StringNumberNumber\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9485a16a33272af7a4c8c70b1479c3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " public void test0115()", "signatureAfterChange": " public void test0115()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:fin>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:fin>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e965f60a405719c6fbd13aff4c8daad9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "5b2c155b9caca8bad7497ee7506c1681db8d49b2", "commitAfterChange": "f7b6c5bb1ddca0d93c72689a37e296273599775b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void test027()", "signatureAfterChange": " \tpublic void test027()", "diff": ["-\t\t\t\"Illegal modifier for the method X.X()\\n\" +", "+\t\t\t\"Illegal modifier for the constructor in type X; only public, protected & private are permitted\\n\" +", "-\t\t\t\"Illegal modifier for the method X.X()\\n\" +", "+\t\t\t\"Illegal modifier for the constructor in type X; only public, protected & private are permitted\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9752eb5ba997ddf1e4d331795defa11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "f7a4fed5e12ddd792bfd11e8778f8c9b3112f624", "commitAfterChange": "e10de2c4a1110dda4676cb780e20b994bb7f5186", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void test0042() throws JavaModelException", "signatureAfterChange": " \tpublic void test0042() throws JavaModelException", "diff": ["-\t\tassertEquals(\"wrong key\", \"T:test0042/A/test0042.T[]foo()\", binding.getKey());", "+\t\tassertEquals(\"wrong key\", \"T:test0042/A/T[]foo()\", binding.getKey());", "-\t\tassertEquals(\"wrong key\", \"T:test0042/A/test0042.T[]foo()[]\", binding2.getKey());\t\t", "-\t}\t", "+\t\tassertEquals(\"wrong key\", \"T:test0042/A/T[]foo()[]\", binding2.getKey());\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9d898ec679655cc95399dbd7296a7b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 309, "signatureBeforeChange": " public void test0309()", "signatureAfterChange": " public void test0309()", "diff": ["-\tString expectedCompletionNodeToString = \"<NONE>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:fin>\";", "-\t\t\"\";", "+\t\t\"import <CompleteOnKeyword:fin>;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea55de6133f0a52847f6c4b68c773280", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java", "commitBeforeChange": "db0d99936b529038f502f3c42e4c67fa5380c5bc", "commitAfterChange": "5988789db77abec94d1b8a17fd42ed09f795c5be", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void test0088() throws JavaModelException", "signatureAfterChange": " public void test0088() throws JavaModelException", "diff": ["-\t\t\t\"foo(int) [in MyClass0088 [in [Working copy] MyClass0088.java [in p [in src2 [in Resolve]]]]]\\n\" + ", "-\t\t\t\"foo() [in MyClass0088 [in [Working copy] MyClass0088.java [in p [in src2 [in Resolve]]]]]\",", "+\t\t\t\"foo(int) {key=Lp/MyClass0088;.foo(I)V} [in MyClass0088 [in [Working copy] MyClass0088.java [in p [in src2 [in Resolve]]]]]\\n\" + ", "+\t\t\t\"foo() {key=Lp/MyClass0088;.foo()V} [in MyClass0088 [in [Working copy] MyClass0088.java [in p [in src2 [in Resolve]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eab640d8f7538f0a16a83b3dd3d41b50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 296, "methodNumberAfterChange": 296, "signatureBeforeChange": " public void testBug330313_wksp1_19_njl()", "signatureAfterChange": " public void testBug330313_wksp1_19_njl()", "diff": ["-\t\t\"\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "-\t\t\"\t\t\t\t\to.bodyDeclarations()));\\n\" + ", "+\t\t\"\t\t\t\t\t\tnode.bodyDeclarations(),\\n\" + ", "+\t\t\"\t\t\t\t\t\to.bodyDeclarations()));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eabdfa77d06854c223d85aae10cf1335", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "fe30c0f08ddab5b80fae1b7726ce1fae05bb7c1e", "commitAfterChange": "d3f5bd830eedcf03b196318e3635f46ef21397eb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void test0016()", "signatureAfterChange": " public void test0016()", "diff": ["-\t\t\"\t         ^\\n\" + ", "+\t\t\"\t         ^^^^^\\n\" + ", "-\t\t\"\t         ^\\n\" + ", "+\t\t\"\t         ^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eacb5dfc93d37c724cd23bd34578c97c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void testBug399773()", "signatureAfterChange": " public void testBug399773()", "diff": ["-\t\t\t\"\t                   ^^^^^^^^\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" +", "-\t\t\t\"\t                   ^^^^^^^^\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ead7e0b598a8e6167cb98c71dcc0d20f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " \tpublic void test094()", "signatureAfterChange": " \tpublic void test094()", "diff": ["-\t\t\t\"  private X(String arg, int arg);\\n\" + ", "+\t\t\t\"  private X(java.lang.String arg, int arg);\\n\" + ", "-\t\t\t\"  public static final X valueOf(String arg);\\n\" + ", "+\t\t\t\"  public static final X valueOf(java.lang.String arg);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaf49416422bda9e4f48d97e3b38cb98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [<Object, Exception, RuntimeException>complete(new Object(), new Exception(), new RuntimeException(), gm)] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb285b4b1d60d039b62bc274b0228d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "3cc06fb7cc2e976d4ba8e2177671985fa3530135", "commitAfterChange": "34d4ca4280b68a204e5286da02786e0f5a69a506", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprotected void compileAndDeploy(String source, String directoryName, String className)", "signatureAfterChange": "  \tprotected void compileAndDeploy(String source, String directoryName, String className)", "diff": ["-\t\t\tbuffer.append(\"\\\" -1.6\");", "+\t\t\tbuffer.append(\"\\\" -1.6 -proc:none\");", "-\t\t\tbuffer.append(\"\\\" -1.7\");", "+\t\t\tbuffer.append(\"\\\" -1.7 -proc:none\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb50a4525c0b44b5d7c0c98cc82efad2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug101283b()", "signatureAfterChange": " \tpublic void testBug101283b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eba796bd6f117f13b63f307cac851d0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testBug027079c() throws JavaModelException", "signatureAfterChange": " public void testBug027079c() throws JavaModelException", "diff": ["-\t\t\"\t\t/** formatted comment */\\n\" + ", "-\t\t\"\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + ", "+\t\t\"\t\t\t\t/** formatted comment */\\n\" + ", "+\t\t\"\t\t\t\t\\\"this\\\", \\\"is\\\", \\\"a specific\\\", \\\"line wrapping \\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc0db6c09cf14beb2be4999d09d2ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "eaa3dc329700f9b17c5ba178d826ab61f47e8466", "commitAfterChange": "1534c3fb9312be746c807d9f0aa370d7a2598284", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void test066()", "signatureAfterChange": " \tpublic void test066()", "diff": ["-\t\t\t\t\"1. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\t\"2. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 20)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebd115a854f12627011cd08700865e7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void testMultiLineCommentCodeSnippet4()", "signatureAfterChange": "  \tpublic void testMultiLineCommentCodeSnippet4()", "diff": ["-\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(),\\n\" +", "-\t\t\t\t\" * \t\t\t\tbox.getGames().toArray());\\n\" +", "+\t\t\t\t\" * \t\treturn concat(box.getBoxes().toArray(), box.getBooks().toArray(), box\\n\" +", "+\t\t\t\t\" * \t\t\t\t.getGames().toArray());\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebfef475bcfc040d4bb82df8f80a28b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void test10()", "signatureAfterChange": "  public void test10()", "diff": ["-\t\t\"    public int[] i = {0,1,};\\n\" + ", "+\t\t\"    public int[] i = {0, 1};\\n\" + ", "-\t\t\"    public int[] i = {0,1,};\\n\" + ", "+\t\t\"    public int[] i = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec557ab791d73abb2fccced8dac7b63d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testInnerType2() throws JavaModelException", "signatureAfterChange": " public void testInnerType2() throws JavaModelException", "diff": ["-\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  B {key=Lp6/A~B;} [in A.java [in p6 [in src [in TypeHierarchy]]]]\\n\",", "+\t\t\"  B [in A.java [in p6 [in src [in TypeHierarchy]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec7f327acd362873bf03081eee2575e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeSignatureTest.java", "commitBeforeChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "commitAfterChange": "0f27abdc440c19d22cca8de897116ef5e59c08c4", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tpublic void test011()", "signatureAfterChange": " \t \tpublic void test011()", "diff": ["-\t\t\t\"  void foo(X<String>.MX mx) {\\n\" + ", "+\t\t\t\"  void foo(X<String>.MX<?> mx) {\\n\" + ", "-\t\t\tassertEquals(\"Wrong signature\", \"(LX<Ljava/lang/String;>.MX;)V\", new String(signature));", "+\t\t\tassertEquals(\"Wrong signature\", \"(LX<Ljava/lang/String;>.MX<*>;)V\", new String(signature));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec88f1788cb863c01e4e37fec34b6e83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "16bbff04917b9cd9bd7cceaf4adfc1563daef0bc", "commitAfterChange": "898da07e1ab8f70e81db909fb2e1c38edc9b87c3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test012_compiler_problems_tuning()", "signatureAfterChange": " public void test012_compiler_problems_tuning()", "diff": ["-\t\texpectedProblemAttributes.put(\"ReferenceExpressionParameterMismatchPromisedNullable\", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_SPECIFICATION_VIOLATION));", "-\t\texpectedProblemAttributes.put(\"ReferenceExpressionParameterRequiredNonnullUnchecked\", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_UNCHECKED_CONVERSION));", "+\t\texpectedProblemAttributes.put(\"ReferenceExpressionParameterNullityMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_SPECIFICATION_VIOLATION));", "+\t\texpectedProblemAttributes.put(\"ReferenceExpressionParameterNullityUnchecked\", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_UNCHECKED_CONVERSION));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec90da47b10309af45b6df9ce9e6466f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "20d87d7260da51837a3bc4f2cefbc874868e947f", "commitAfterChange": "b780374be3c7661000af7572b9b8f18e78e84d97", "methodNumberBeforeChange": 614, "methodNumberAfterChange": 614, "signatureBeforeChange": "\t\t\t \tpublic void test612()", "signatureAfterChange": "\t\t\t \tpublic void test612()", "diff": ["-\t\t\t\"Cannot make a static reference to the type parameter K\\n\" + ", "+\t\t\t\"Cannot make a static reference to the non-static type K\\n\" + ", "-\t\t\t\"Cannot make a static reference to the type parameter V\\n\" + ", "+\t\t\t\"Cannot make a static reference to the non-static type V\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecc02e3a729ae8d0d616a870a62cf91d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testDeleteCompilationUnit1() throws CoreException", "signatureAfterChange": " public void testDeleteCompilationUnit1() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" + ", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed0d2ad2fc718ee8fc1ca6fa1af495c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "af9bbbd46257142e006853d95525656db05c0be8", "commitAfterChange": "75441f37a4b77efa641f7e3f5866e117cb328da6", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testMoveSourceFolder2() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder2() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P1[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\"P2[*]: {CHILDREN}\\n\" + ", "+\t\t\t\"P2[*]: {CHILDREN | CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed2acc0f2fd37a67b59d653b29204a09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3f796b100e9b9a1c8682c406af615aae875d1ae1", "commitAfterChange": "0c453c4f27a5b3a5f4c158cd217e55ce6f30cbbe", "methodNumberBeforeChange": 665, "methodNumberAfterChange": 665, "signatureBeforeChange": " public void test661()", "signatureAfterChange": " public void test661()", "diff": ["-\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\"Cannot cast from Integer to S\\n\" + ", "+\t\t\"Type safety: The cast from Integer to S is actually checking against the erased type Comparable\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed5078fe1b200fde53dbf91b693320bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "fa568df637cfba49109de9a23ecbf57eda89325f", "commitAfterChange": "699f85df0061a8b41250aa99562a0fc140375ee5", "methodNumberBeforeChange": 259, "methodNumberAfterChange": 259, "signatureBeforeChange": " public void test0250() throws JavaModelException", "signatureAfterChange": " public void test0250() throws JavaModelException", "diff": ["-\t\t\t\t\"oneTwoThree[METHOD_IMPORT]{oneTwoThree;, Lcamelcase.ImportedType;, ()V, oneTwoThree, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CAMEL_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"oTTMethod[METHOD_IMPORT]{oTTMethod;, Lcamelcase.ImportedType;, ()V, oTTMethod, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\t\"oneTwoThree[METHOD_NAME_REFERENCE]{oneTwoThree;, Lcamelcase.ImportedType;, ()V, oneTwoThree, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CAMEL_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"oTTMethod[METHOD_NAME_REFERENCE]{oTTMethod;, Lcamelcase.ImportedType;, ()V, oTTMethod, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed54e7aa67277bfb3e067700c598f350", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java", "commitBeforeChange": "69b02d68015b1f30ee38d1576a843274517957c7", "commitAfterChange": "c7a9edf536467451ba659d7e03ac6c483c5c0cfe", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void testDB_1FHSLDR()", "signatureAfterChange": " public void testDB_1FHSLDR()", "diff": ["-\tString expectedCompletionNodeToString = \"<CompleteOnName:fi>\";", "+\tString expectedCompletionNodeToString = \"<CompleteOnKeyword:fi>\";", "-\t\t\"    <CompleteOnName:fi>;\\n\" + ", "+\t\t\"    <CompleteOnKeyword:fi>;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed897ae935ede133cd6543beea652b9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "fc4721a5d5acdb33b51e50b3cf56e7eabfae4a87", "commitAfterChange": "91f52bd5be936f7bbe4c16807f2507407ccf8fc5", "methodNumberBeforeChange": 593, "methodNumberAfterChange": 593, "signatureBeforeChange": " public void testCompletionBasicAnonymousDeclaration1() throws JavaModelException", "signatureAfterChange": " public void testCompletionBasicAnonymousDeclaration1() throws JavaModelException", "diff": ["-\t\t\t\"Object[ANONYMOUS_CLASS_DECLARATION]{), Ljava.lang.Object;, ()V, null, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"Object[METHOD_REF<CONSTRUCTOR>]{), Ljava.lang.Object;, ()V, Object, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"Object[ANONYMOUS_CLASS_DECLARATION]{, Ljava.lang.Object;, ()V, null, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"Object[METHOD_REF<CONSTRUCTOR>]{, Ljava.lang.Object;, ()V, Object, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb7cebf4c802bd9353ae1e4ef69b42b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void testJavadocMethodReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodReference() throws CoreException", "diff": ["-\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH INSIDE_JAVADOC\",", "+\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod()] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod()] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edbb0385d75fb73c20de1b6d80d3eb21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java", "commitBeforeChange": "33e03339ed2881c9f793c3a49497633bbac5c8a8", "commitAfterChange": "09c3f545375b31028657f0b8044c5cbcb5324abc", "methodNumberBeforeChange": 192, "methodNumberAfterChange": 192, "signatureBeforeChange": " public void test0148_Method()", "signatureAfterChange": " public void test0148_Method()", "diff": ["-\tString expectedParentNodeToString = \"<NONE>\";", "+\tString expectedParentNodeToString = \"if (<CompleteOnName:syn>)\\n    ;\";", "-\t\t\t\"    <CompleteOnName:syn>;\\n\" +", "+\t\t\t\"    if (<CompleteOnName:syn>)\\n        ;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edc4b5de65a4508644d6ed3a1205678e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": " public void testBug313524_02() throws JavaModelException", "signatureAfterChange": " public void testBug313524_02() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t14, 15, 16, 17, 18, 19,\\n\" + ", "-\t\t\"\t\t\t\t20));\\n\" + ", "+\t\t\"\t\t\t\t\t\t14, 15, 16, 17,\\n\" + ", "+\t\t\"\t\t\t\t\t\t18, 19, 20));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edd25eea9345e8f3cbc5bb9bac23c3a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "31fea9d4803df7fab0143d7b74b39d6e7aaeb10f", "commitAfterChange": "5c2e3d94299a51097fdf6bf1f78d1b50f9bfee9d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void test0003() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0003() throws JavaModelException", "diff": ["-\t\t\t\t\"Cannot nest '/P/src/f1' inside '/P/src'. \" + //$NON-NLS-1$", "-\t\t\t\t\"To enable the nesting exclude 'f1/' from '/P/src'.\", //$NON-NLS-1$", "+\t\t\t\t\"Cannot nest 'P/src/f1' inside 'P/src'. \" + //$NON-NLS-1$", "+\t\t\t\t\"To enable the nesting exclude 'f1/' from 'P/src'.\", //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee19f16cce14637611c5dae15c7ed79f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments08() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments08() throws CoreException", "diff": ["-\t\tsearch(\"complete(Exception, Single<? super Exception>) % <? extends Exception>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<? extends Exception>complete(Exception, Single<? super Exception>)\", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [complete(new Exception(), gs)] EQUIVALENT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [<Exception>complete(new Exception(), gs)] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee2648feae352a459717978bbdb320e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void testBug96237_Public05()", "signatureAfterChange": " \tpublic void testBug96237_Public05()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee31509af45fc55cf04df511bd1b155d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test025() throws CoreException", "signatureAfterChange": " \tpublic void test025() throws CoreException", "diff": ["-\t\t\t\t\"      void bar(int i, X x, String[][] s, Y[] args) {\\n\" +", "+\t\t\t\t\"      void bar(int i, X x, String[][] s, Y[] args, boolean b, Object o) {\\n\" +", "-\t\t\t\"p1/X$1/bar(int,p1/X,java.lang/String[][],p1/X$Y[],)\");", "+\t\t\t\"Lp1/X$1;.bar(ILp1/X;[[Ljava/lang/String;[Lp1/X$Y;ZLjava/lang/Object;)V\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee3ba56913736adf688290498785c1b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "27a11ce8ecc325901777098d9d0eafdb0be3dc5b", "commitAfterChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "methodNumberBeforeChange": 567, "methodNumberAfterChange": 567, "signatureBeforeChange": " public void testBug210691() throws CoreException", "signatureAfterChange": " public void testBug210691() throws CoreException", "diff": ["-\t\t\"src/test/Ref.java [import \ufffd|pack.Test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Ref.java test.Ref.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\"", "+\t\t\"src/test/Ref.java [import \ufffd|pack.Test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Ref.java test.Ref.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee9f5299b304ed1380b1310fdbe53ef4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void testMethod3() throws JavaModelException", "signatureAfterChange": " \tpublic void testMethod3() throws JavaModelException", "diff": ["-\t */", "-\tpublic void testMethod3() throws JavaModelException {", "-\t\tICompilationUnit otherWorkingCopy = null;", "-\t\ttry {", "-\t\t\totherWorkingCopy = getWorkingCopy(", "-\t\t\t\t\"/P/Y.java\",", "-\t\t\t\t\"public class Y {\\n\" +", "-\t\t\t\t\"  void foo(int i, String[] args, java.lang.Class clazz) {}\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tthis.workingCopy.getOwner(), ", "-\t\t\t\tnull", "-\t\t\t);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"  void bar() {\\n\" +", "-\t\t\t\t\"    Y y = new Y();\\n\" +", "-\t\t\t\t\"    /*start*/y.foo(1, new String[0], getClass())/*end*/;\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t);", "-\t\t\tIBinding binding = ((MethodInvocation) node).resolveMethodBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tIJavaElement element = binding.getJavaElement();", "-\t\t\tassertElementEquals(", "-\t\t\t\t\"Unexpected Java element\",", "-\t\t\t\t\"foo(int, String[], java.lang.Class) [in Y [in [Working copy] Y.java [in <default> [in <project root> [in P]]]]]\",", "-\t\t\t\telement", "-\t\t\t);", "-\t\t\tassertTrue(\"Element should exist\", element.exists());", "-\t\t} finally {", "-\t\t\tif (otherWorkingCopy != null)", "-\t\t\t\totherWorkingCopy.discardWorkingCopy();", "-\t\t}", "-\t}", "+\t */", "+\tpublic void testMethod3() throws JavaModelException {", "+\t\tICompilationUnit otherWorkingCopy = null;", "+\t\t\totherWorkingCopy = getWorkingCopy(", "+\t\t\t\t\"/P/src/Y.java\",", "+\t\t\t\t\"  void foo(int i, String[] args, java.lang.Class clazz) {}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t\tthis.workingCopy.getOwner(), ", "+\t\t\t\tnull", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"  void bar() {\\n\" +", "+\t\t\t\t\"    Y y = new Y();\\n\" +", "+\t\t\t\t\"    /*start*/y.foo(1, new String[0], getClass())/*end*/;\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\tIBinding binding = ((MethodInvocation) node).resolveMethodBinding();", "+\t\t\t\t\"foo(int, String[], java.lang.Class) [in Y [in [Working copy] Y.java [in <default> [in src [in P]]]]]\",", "+\t\t\tif (otherWorkingCopy != null)", "+\t\t\t\totherWorkingCopy.discardWorkingCopy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeece848cb17f8d955eafc20d393dc02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 884, "methodNumberAfterChange": 884, "signatureBeforeChange": " public void test0877()", "signatureAfterChange": " public void test0877()", "diff": ["-\t\t\"Type safety: The expression of type capture-of ? extends T needs unchecked conversion to conform to Class<Object>\\n\" + ", "+\t\t\"Type safety: The expression of type capture#1-of ? extends T needs unchecked conversion to conform to Class<Object>\\n\" + ", "-\t\t\"Type safety: The expression of type capture-of ? extends Class needs unchecked conversion to conform to Class<Object>\\n\" + ", "+\t\t\"Type safety: The expression of type capture#2-of ? extends Class needs unchecked conversion to conform to Class<Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef4e43cae624dbdb18dac5b6f65a4fe4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "  \tpublic void test114()", "signatureAfterChange": "  \tpublic void test114()", "diff": ["-\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Vector cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Vector cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef5ee032cd344a20ad33c73b4687b493", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "e296d38bce70b50ae4223d7832ad4c72a95b5b55", "commitAfterChange": "837307d08b616384b505afc73627ca69c848f688", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void test011()", "signatureAfterChange": " \tpublic void test011()", "diff": ["-\t\t\t\"Varargs methods should only override other varargs methods unlike Y.count(int[]) and X.count(int...)\\n\" + ", "+\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike Y.count(int[]) and X.count(int...)\\n\" + ", "-\t\t\t\"Varargs methods should only override other varargs methods unlike Z.count(int...) and Y.count(int[])\\n\" + ", "+\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike Z.count(int...) and Y.count(int[])\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efc530c8ca65ab8792ed93f5343ec580", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testBug83127e()", "signatureAfterChange": " \tpublic void testBug83127e()", "diff": ["-\t\t\t\"Javadoc: The method add(Object) is undefined for the type Unrelated1\\n\" + ", "+\t\t\t\"Javadoc: The method add(E) in the type Unrelated1 is not applicable for the arguments (Object)\\n\" + ", "-\t\t\t\"The constructor Object(null) is undefined\\n\" + ", "+\t\t\t\"The constructor Test(T) refers to the missing type T\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efcd2a0e7bf523420f7a9a7406f5896d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug101283d()", "signatureAfterChange": " \tpublic void testBug101283d()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class X<T, F> {\\n\" +", "-\t\t\t\"\t               ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\t* @see T Variable \\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: T cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\t* @see F Variable\\n\" +", "-\t\t\t\"\t       ^\\n\" +", "-\t\t\t\"Javadoc: F cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\tclass Entry<L, R> {\\n\" +", "-\t\t\t\"\t            ^^^^\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X<T, F> {\\n\" + ", "+\t\t\t\"\t               ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @see T Variable \\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see F Variable\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tclass Entry<L, R> {\\n\" + ", "+\t\t\t\"\t            ^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f002df4220ef8371840f978d7cc4bb9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  \tpublic void test053()", "signatureAfterChange": "  \tpublic void test053()", "diff": ["-\t\t\"public class X {\\n\" + ", "-\t\t\"\tstatic boolean boom() { \\n\" + ", "-\t\t\"\t\tthrow new NullPointerException();\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\"\t\tfoo2();\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\tstatic void foo2() {\\n\" + ", "-\t\t\"\t\tint i = 5;\\n\" + ", "-\t\t\"\t\tif ((i == 6) && (boom() && false)) {\\n\" + ", "-\t\t\"\t\t   \tSystem.out.println(i);\\n\" + ", "-\t\t\"\t\t}\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"}\";", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tstatic boolean boom() { \\n\" + ", "+\t\t\t\"\t\tthrow new NullPointerException();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\"\t\tfoo2();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tstatic void foo2() {\\n\" + ", "+\t\t\t\"\t\tint i = 5;\\n\" + ", "+\t\t\t\"\t\tif ((i == 6) && (boom() && false)) {\\n\" + ", "+\t\t\t\"\t\t   \tSystem.out.println(i);\\n\" + ", "+\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\";", "-\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom() : boolean  [27]\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 2, pc: 13] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f00cc00786fd8ee5fb60dda38496fdb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testBug83304_TypeParameterizedElementPattern() throws CoreException", "signatureAfterChange": " \tpublic void testBug83304_TypeParameterizedElementPattern() throws CoreException", "diff": ["-\t\t\t\"src/b83304/Types.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/b83304/Types.java b83304.Types.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/b83304/Types.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/b83304/Types.java b83304.Types.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f01412eb9972838a3f9cfd04de81efee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ed03b97e41cec71a1f276a24a6c89d537dde57f2", "commitAfterChange": "3617e411ab09a4b93e5840b8e6d451f0c6a8a8c9", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": " \tpublic void test149()", "signatureAfterChange": " \tpublic void test149()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\t\"The return type is incompatible with Collection<Object>.toArray(T[])\\n\" + ", "-// TODO (kent) name clash: toArray(java.lang.Object[]) in X and <T>toArray(T[]) in java.util.Collection<java.lang.Object> have the same erasure, yet neither overrides the other", "+\t\t\t\"return type needs unchecked conversion from Collection<Object>.toArray(T[])\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0332856e8ba5fd3d2ff6982674c9863", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void testBug101283c()", "signatureAfterChange": " \tpublic void testBug101283c()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0b1ac6256c619c3b4a033bd5c556e1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": " public void testBug313524_02() throws JavaModelException", "signatureAfterChange": " public void testBug313524_02() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t\t\t14, 15, 16, 17,\\n\" + ", "-\t\t\"\t\t\t\t\t\t18, 19, 20));\\n\" + ", "+\t\t\"\t\t\t\t14, 15, 16, 17, 18, 19,\\n\" + ", "+\t\t\"\t\t\t\t20));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0bedf8bf144f973e4f94516106c19c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void test018()", "signatureAfterChange": " public void test018()", "diff": ["-\t\t\"    26  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\"    26  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\"    30  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\"    30  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0d81caf0625264f1a2da09e791dc2e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR335ClassFileTest.java", "commitBeforeChange": "62f4198121495ae184573e68231f47c9011b5815", "commitAfterChange": "ed946ccd4c40fd03fb87770eaaaa24036f629ae3", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void test430015a() throws IOException, ClassFormatException", "signatureAfterChange": " public void test430015a() throws IOException, ClassFormatException", "diff": ["-\t\t\t\t\"  private static synthetic void lambda$0(int arg0);\\n\" + ", "+\t\t\t\t\"  private static synthetic void lambda$0(int <anonymous>);\\n\" + ", "-\t\t\t\t\"        synthetic arg0\\n\" + ", "+\t\t\t\t\"        synthetic <anonymous>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f5568f95e32a3852e7ecd6c7dce76b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestForClass.java", "commitBeforeChange": "1dae9bed0f28b20df545c773f52fb80596048ada", "commitAfterChange": "73e6c55b6cebcb032c8128286708483f86167b64", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic void test044()", "signatureAfterChange": "  \tpublic void test044()", "diff": ["-\t\t\t\t+ \"\t               ^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                           ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                             ^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1137925686d071a02aff921b3b5e802", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "d239bd5948c1f3fdf8bc0b77924d220fefde31ce", "commitAfterChange": "fa7d50ac51966a79c3d2cf5f38e668c0cb98a72e", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"    -1.5               use 1.5 compliance level (implicit -source 1.5\\n\" + ", "+        \"    -1.5 -5 -5.0       use 1.5 compliance level (implicit -source 1.5\\n\" + ", "-        \"    -1.6               use 1.6 compliance level (implicit -source 1.6\\n\" + ", "+        \"    -1.6 -6 -6.0       use 1.6 compliance level (implicit -source 1.6\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f11ae971962cb7c39c3fb6453a7741b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "67643a7c27a6d261feaad810d2590f1f6d33b749", "commitAfterChange": "da7a5227e034c2b6c8a4762e61c3ccf43066f02e", "methodNumberBeforeChange": 437, "methodNumberAfterChange": 442, "signatureBeforeChange": " public void testBug253896a()", "signatureAfterChange": " public void testBug253896a()", "diff": ["-\t\t\t\"Null pointer access: The variable f1 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Null pointer access: The variable f2 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f12f196194470178f3d02a960a3c7947", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": " public void testBug260381_wksp2_03() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_03() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f13b7040b7e5cc7170abacc04eccec46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 138, "signatureBeforeChange": " \tpublic void test043c()", "signatureAfterChange": " \tpublic void test043c()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tm.id(new Integer(111));\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\tm.id(new Integer(111));\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f13d8d64c026eda9949a7b7e3529b2cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 320, "methodNumberAfterChange": 320, "signatureBeforeChange": " \tpublic void test316()", "signatureAfterChange": " \tpublic void test316()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f14a1dba08a930ecc2eed097384c8aaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void testBug84100d() throws CoreException", "signatureAfterChange": " \tpublic void testBug84100d() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 2, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 2, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f17369964f24fc49706640fae698f995", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug80257()", "signatureAfterChange": " \tpublic void testBug80257()", "diff": ["-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f23dc8eb19202070221521aca39c3638", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " public void testBug239719() throws JavaModelException", "signatureAfterChange": " public void testBug239719() throws JavaModelException", "diff": ["-\t\t\" * \t&#064;Override\\n\" + ", "+\t\t\" * \t&#64;Override\\n\" + ", "-\t\t\" * \t\tSystem.out.println(&quot;Press Shift+Ctrl+F to format&quot;);\\n\" + ", "+\t\t\" * \t\tSystem.out.println(\\\"Press Shift+Ctrl+F to format\\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f24ad946dc0d72fbe5d9e221fff0c45d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void test056throw1()", "signatureAfterChange": " public void test056throw1()", "diff": ["-\t\t\"Resource leak: \\\"reader\\\" is not closed at this location\\n\" +", "+\t\t\"Resource leak: 'reader' is not closed at this location\\n\" +", "-\t\t\"Resource leak: \\\"reader\\\" is not closed at this location\\n\" +", "+\t\t\"Resource leak: 'reader' is not closed at this location\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ee8b5dac8674e62c727a0a697d3567", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments07() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments07() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [<Object, RuntimeException, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [<Object, RuntimeException, IllegalMonitorStateException>complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [<Object, RuntimeException, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [<Object, RuntimeException, IllegalMonitorStateException>complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] POTENTIAL_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f318b15d4bec754c41bb649d0596197f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public void test0038()", "signatureAfterChange": "   public void test0038()", "diff": ["-\texpectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>};\";", "-\t\t\"    Object[] o = {<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    Object[] o = {<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f33132bc24d6decdc5a739947df72040", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 806, "methodNumberAfterChange": 806, "signatureBeforeChange": " public void test0799()", "signatureAfterChange": " public void test0799()", "diff": ["-\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<capture-of ? extends T>\\n\" + ", "+\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<capture#2-of ? extends T>\\n\" + ", "-\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<capture-of ? extends T>\\n\" + ", "+\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<capture#5-of ? extends T>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3414ac18ad345047c9773c426e55835", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void testSetClasspathVariable2() throws CoreException", "signatureAfterChange": " public void testSetClasspathVariable2() throws CoreException", "diff": ["-\t\t\t\"P1[*]: {CHILDREN}\\n\" +", "+\t\t\t\"P1[*]: {CHILDREN | RESOLVED CLASSPATH CHANGED}\\n\" +", "-\t\t\t\"P2[*]: {CHILDREN}\\n\" +", "+\t\t\t\"P2[*]: {CHILDREN | RESOLVED CLASSPATH CHANGED}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f37458b183c5c40e554f743e1cd9310c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "6616b103b53af13bafcc8a32713ca6371865f9c4", "commitAfterChange": "fcd90e4a2f5e40578ea3ad28461a3e5ea180ab4e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private void buildDeltas(SimpleLookupTable deltas)", "signatureAfterChange": "  private void buildDeltas(SimpleLookupTable deltas)", "diff": ["-\t\tSystem.out.println(\"Clearing last state : \" + this.lastState); //$NON-NLS-1$", "+\t\tSystem.out.println(\"JavaBuilder: Clearing last state : \" + this.lastState); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Performing full build since incremental build failed\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Performing full build since incremental build failed\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3c5c8f4dce98712824ef15839e8b351", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " public void test056throw4()", "signatureAfterChange": " public void test056throw4()", "diff": ["-\t\t\"Potential resource leak: \\\"reader\\\" may not be closed at this location\\n\" +", "+\t\t\"Potential resource leak: 'reader' may not be closed at this location\\n\" +", "-\t\t\"Potential resource leak: \\\"reader\\\" may not be closed at this location\\n\" +", "+\t\t\"Potential resource leak: 'reader' may not be closed at this location\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3fa9a878fddec0f307295e4a6adb5e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 298, "signatureBeforeChange": " public void testBug330313_wksp1_21_njl()", "signatureAfterChange": " public void testBug330313_wksp1_21_njl()", "diff": ["-\t\t\"\t\treturn !(getViewer() == null || getViewer().getControl() == null || getViewer()\\n\" + ", "-\t\t\"\t\t\t\t.getControl().isDisposed());\\n\" + ", "+\t\t\"\t\treturn !(getViewer() == null || getViewer().getControl() == null\\n\" + ", "+\t\t\"\t\t\t\t|| getViewer().getControl().isDisposed());\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4087ecdad7061e545ac129161352dea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void test12() throws JavaModelException", "signatureAfterChange": "  \tpublic void test12() throws JavaModelException", "diff": ["-\t\t\t\"RuntimeException {key=Ljava/lang/RuntimeException;} [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "-\t\t\t\"InterruptedException {key=Ljava/lang/InterruptedException;} [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "+\t\t\t\"InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f42e8b305aee013437c9979ccd68f248", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " public void test0052()", "signatureAfterChange": " public void test0052()", "diff": ["-\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"  Object[] o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"  Object[] o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f44fb9e5e28f72337546f4693942b535", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void test015()", "signatureAfterChange": " \tpublic void test015()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tBLANC(),\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tBLANC(),\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f46e82932a8f56474a5ee777e5442440", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 306, "signatureBeforeChange": " public void testBug330313_wksp1_29_njl()", "signatureAfterChange": " public void testBug330313_wksp1_29_njl()", "diff": ["-\t\t\"\t\treturn (pack != null && otherpack != null\\n\" + ", "-\t\t\"\t\t\t\t&& isSamePackage(pack, otherpack));\\n\" + ", "+\t\t\"\t\treturn (pack != null && otherpack != null && isSamePackage(pack,\\n\" + ", "+\t\t\"\t\t\t\totherpack));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f49bcddc4c72f876fd87d433bd84e27e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "2292d96d982a21ac668b3edcff1d774c928dd59d", "commitAfterChange": "e19275b58ad64aff1e057c59c0e35ec0b545a662", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic void test037() throws CoreException", "signatureAfterChange": " \tpublic void test037() throws CoreException", "diff": ["-\t\t\t\t\"    new X().foo(\\\"\\\", this);\\n\" +", "+\t\t\t\t\"    /*start*/new X().foo(\\\"\\\", this)/*end*/;\\n\" +", "-\t\t\t\"Lp1/X<>;.foo<U:Ljava/lang/Object;>(TT;TU;)V%<>\");", "+\t\t\t\"Lp1/X;.foo<U:Ljava/lang/Object;>(TT;TU;)V%<>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51d22af740f54f8548bc592dad2831a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void test025()", "signatureAfterChange": "  \tpublic void test025()", "diff": ["-\t\t\t\"Type safety: The return type Integer of the method test() of type B needs unchecked conversion to conform to the return type T of inherited method\\n\" + ", "+\t\t\t\"Type safety: The return type Integer for test() from the type B needs unchecked conversion to conform to T from the type A\\n\" + ", "-\t\t\t\"Type safety: The return type Integer[] of the method test() of type B needs unchecked conversion to conform to the return type T[] of inherited method\\n\" + ", "+\t\t\t\"Type safety: The return type Integer[] for test() from the type B needs unchecked conversion to conform to T[] from the type A\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f55d5a477eb366d3a2bc82c5940fe8f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug80257()", "signatureAfterChange": " \tpublic void testBug80257()", "diff": ["-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f566e7452b40049ff4d40be8d3501cc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "fa568df637cfba49109de9a23ecbf57eda89325f", "commitAfterChange": "699f85df0061a8b41250aa99562a0fc140375ee5", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " public void test0072() throws JavaModelException", "signatureAfterChange": " public void test0072() throws JavaModelException", "diff": ["-\t\t\t\t\"ZZZ2[METHOD_IMPORT]{ZZZ2;, Ltest0072.p.ImportedClass;, ()V, ZZZ2, null, [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"ZZZ2[METHOD_IMPORT]{ZZZ2;, Ltest0072.p.ImportedClass;, (I)V, ZZZ2, (i), [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\t\"ZZZ2[METHOD_NAME_REFERENCE]{ZZZ2;, Ltest0072.p.ImportedClass;, ()V, ZZZ2, null, [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"ZZZ2[METHOD_NAME_REFERENCE]{ZZZ2;, Ltest0072.p.ImportedClass;, (I)V, ZZZ2, (i), [\"+start+\", \"+end+\"], \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f567b6048fd7f360bab60864f0f1e1b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 245, "methodNumberAfterChange": 245, "signatureBeforeChange": " \tpublic void test093()", "signatureAfterChange": " \tpublic void test093()", "diff": ["-\t\t\t\"Method toArray(S[]) has the same erasure toArray(Object[]) as another method in type DataSet<T>\\n\" +", "+\t\t\t\"Erasure of method toArray(S[]) is the same as another method in type DataSet<T>\\n\" +", "-\t\t\t\"Method toArray(Object[]) has the same erasure toArray(Object[]) as another method in type DataSet<T>\\n\" +", "+\t\t\t\"Erasure of method toArray(Object[]) is the same as another method in type DataSet<T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f56dbeb254a020394ebba4fd2311a231", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "16bbff04917b9cd9bd7cceaf4adfc1563daef0bc", "commitAfterChange": "898da07e1ab8f70e81db909fb2e1c38edc9b87c3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test011_problem_categories()", "signatureAfterChange": " public void test011_problem_categories()", "diff": ["-\t\texpectedProblemAttributes.put(\"ReferenceExpressionParameterMismatchPromisedNullable\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"ReferenceExpressionParameterRequiredNonnullUnchecked\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"ReferenceExpressionParameterNullityMismatch\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"ReferenceExpressionParameterNullityUnchecked\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f595bac8ad60700ae7b22a5064b25b46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void test08()", "signatureAfterChange": "  public void test08()", "diff": ["-\t\t\"    public int[] i = {0,1,};\\n\" + ", "+\t\t\"    public int[] i = {0, 1};\\n\" + ", "-\t\t\"    public int[] i = {0,1,};\\n\" + ", "+\t\t\"    public int[] i = {0, 1};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5afc9e17e7f579b7aa300c0bdd7da27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "55189ed648ac780e2783a409705c9c8b61eeced6", "commitAfterChange": "cd7ab76e97bbde2dfa388ac94141efed3a1c5385", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void test399793c() throws JavaModelException", "signatureAfterChange": " \tpublic void test399793c() throws JavaModelException", "diff": ["-\t\tassertEquals(\"(int [] ia) -> {\\n  return ia.clone();\\n}\\n\", lambdaExpression.toString());", "+\t\tassertEquals(\"(int[] ia) -> {\\n  return ia.clone();\\n}\\n\", lambdaExpression.toString());", "-\t\tassertEquals(\"int [] ia\", singleVariableDeclaration.toString());\t\t", "+\t\tassertEquals(\"int[] ia\", singleVariableDeclaration.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5b64134dc217ce1ad820d3f45e350cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "53df7d602035de3d31fcc1ea92403ee3f66bc84a", "commitAfterChange": "b501a050436f0ed4b21c2887b8c36095ae4a6672", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test020()", "signatureAfterChange": " public void test020()", "diff": ["-\t\t\"\t                                ^^^^^^^^^\\n\" +", "-\t\t\"bar.other cannot be resolved or is not a field\\n\" +", "+\t\t\"\t                                    ^^^^^\\n\" +", "+\t\t\"other cannot be resolved or is not a field\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5c70ec9d9613ed289faaaf1e3fabfc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tpublic void test0034()", "signatureAfterChange": "  \tpublic void test0034()", "diff": ["-\t\t\t\"Method foo(E) has the same erasure foo(Exception) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(E) is the same as another method in type X<E,T>\\n\" +", "-\t\t\t\"Method foo(T) has the same erasure foo(Exception) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(T) is the same as another method in type X<E,T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5ee9597dd60f8523a81b897f3e9c5b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 474, "methodNumberAfterChange": 474, "signatureBeforeChange": " \tpublic void test470()", "signatureAfterChange": " \tpublic void test470()", "diff": ["-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f60759dead9bb78358c2ec4e572e48f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void test021()", "signatureAfterChange": " public void test021()", "diff": ["-\t\t\"    111  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\"    111  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\"    115  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\"    115  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f623c83d93a626ccf011a9b1e7b9e383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "a4e58088a1010e10b50ef0d8683567f65215eac1", "commitAfterChange": "e58a2ebf19f99fca487e8ddd26a3dd844cc59501", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \tpublic void testBinary06b()", "signatureAfterChange": "\r \tpublic void testBinary06b()", "diff": ["-\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'@NonNull T extends @NonNull Object\\'\\n\" + \r", "+\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'T extends @NonNull Object\\'\\n\" + \r", "-\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull Object\\' is not a valid substitute for the type parameter \\'@Nullable V extends @Nullable Object\\'\\n\" + \r", "+\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull Object\\' is not a valid substitute for the type parameter \\'V extends @Nullable Object\\'\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f627ceb8a38f9c6b01ab58a77467c19c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void testBug117183a() throws JavaModelException", "signatureAfterChange": " public void testBug117183a() throws JavaModelException", "diff": ["-\t\t\"A_STATIC_FIELD[JAVADOC_FIELD_REF]{{@link Reference#A_STATIC_FIELD }, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "-\t\t\"A_STATIC_FIELD[JAVADOC_VALUE_REF]{{@value Reference#A_STATIC_FIELD }, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DICNRIT+\"}\"", "+\t\t\"A_STATIC_FIELD[JAVADOC_FIELD_REF]{{@link Reference#A_STATIC_FIELD}, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "+\t\t\"A_STATIC_FIELD[JAVADOC_VALUE_REF]{{@value Reference#A_STATIC_FIELD}, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DICNRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6d49c8603e50f3aa3d5cb43b0d98c5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " public void testBug260381_wksp2_01() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_01() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6e0660433e0e3e1a5fd6cf505bfeabb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 110, "signatureBeforeChange": " public void testSimpleMethodDeclaration() throws CoreException", "signatureAfterChange": " public void testSimpleMethodDeclaration() throws CoreException", "diff": ["-\t\t\"src/p/X.java p.X.foo(int, String, X) -> void [foo]\\n\" +", "-\t\t\"src/p/Z.java p.Z.foo(int, String, X) -> void [foo]\", ", "+\t\t\"src/p/X.java void p.X.foo(int, String, X) [foo]\\n\" + ", "+\t\t\"src/p/Z.java void p.Z.foo(int, String, X) [foo]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7036cebdbf166ccba8214ccf3e890b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "7a3f519b00fed94107cfc009c8f906bb41441f6c", "commitAfterChange": "36953857ec204432ce079b8cdc9bdf8b23fc1bb7", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 154, "signatureBeforeChange": " \tpublic void testBug153399d()", "signatureAfterChange": " \tpublic void testBug153399d()", "diff": ["-\t\t\t\t\"Javadoc: Unexpected duplicated tag @value\\n\" + ", "+\t\t\t\t\"Javadoc: Unexpected tag\\n\" + ", "-\t\t\t\t\"Javadoc: Unexpected duplicated tag @value\\n\" + ", "+\t\t\t\t\"Javadoc: Unexpected tag\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f71c3b0e5451551867531b73fc0a79fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 567, "methodNumberAfterChange": 567, "signatureBeforeChange": " public void testBug210691() throws CoreException", "signatureAfterChange": " public void testBug210691() throws CoreException", "diff": ["-\t\t\"src/test/Ref.java [import \ufffd|pack.Test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Ref.java test.Ref.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\"", "+\t\t\"src/test/Ref.java [import \ufffd|pack.Test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Ref.java test.Ref.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73a937da3adb1494aae94d4f5ef58f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "fc4721a5d5acdb33b51e50b3cf56e7eabfae4a87", "commitAfterChange": "91f52bd5be936f7bbe4c16807f2507407ccf8fc5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testCompletionFindConstructor() throws JavaModelException", "signatureAfterChange": " public void testCompletionFindConstructor() throws JavaModelException", "diff": ["-\t\t\t\"CompletionFindConstructor[ANONYMOUS_CLASS_DECLARATION]{), LCompletionFindConstructor;, (I)V, null, (i), \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\\n\" +", "-\t\t\t\"CompletionFindConstructor[METHOD_REF<CONSTRUCTOR>]{), LCompletionFindConstructor;, (I)V, CompletionFindConstructor, (i), \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\",", "+\t\t\t\"CompletionFindConstructor[ANONYMOUS_CLASS_DECLARATION]{, LCompletionFindConstructor;, (I)V, null, (i), \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"CompletionFindConstructor[METHOD_REF<CONSTRUCTOR>]{, LCompletionFindConstructor;, (I)V, CompletionFindConstructor, (i), \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f76f3f7d4c8692654960ab7f59784054", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExclusionPatternsTests.java", "commitBeforeChange": "75c11b9993cee3cc0c66baeb87390d3f47878de0", "commitAfterChange": "bf1e6d69eab09fcc8966c652a3845b7198223fbb", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testRenameExcludedPackage() throws CoreException", "signatureAfterChange": " public void testRenameExcludedPackage() throws CoreException", "diff": ["-\t\t\"\\n\" + // default package", "-\t\t\"q\",", "+\t\t\"[default] [in src [in P]]\\n\" + ", "+\t\t\"q [in src [in P]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f776f1d5d6a5a89242f7d14579c75787", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "fa568df637cfba49109de9a23ecbf57eda89325f", "commitAfterChange": "699f85df0061a8b41250aa99562a0fc140375ee5", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test430656() throws JavaModelException", "signatureAfterChange": " public void test430656() throws JavaModelException", "diff": ["-\t\t\t\"getClass[METHOD_IMPORT]{getClass, Ljava.lang.Object;, ()Ljava.lang.Class<*>;, getClass, null, 35}\\n\" +", "-\t\t\t\"getLastName[METHOD_IMPORT]{getLastName, Ltest.Person;, ()Ljava.lang.String;, getLastName, null, 35}\",", "+\t\t\t\"getClass[METHOD_NAME_REFERENCE]{getClass, Ljava.lang.Object;, ()Ljava.lang.Class<*>;, getClass, null, 35}\\n\" +", "+\t\t\t\"getLastName[METHOD_NAME_REFERENCE]{getLastName, Ltest.Person;, ()Ljava.lang.String;, getLastName, null, 35}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7b19906de6054f00971a29f3b1948e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationDietRecoveryTest.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void test0023()", "signatureAfterChange": " public void test0023()", "diff": ["-\t\t\"  @AnAnnotation void foo() {\\n\" + ", "+\t\t\"  @AnAnnotation(name = $missing$) void foo() {\\n\" + ", "-\t\t\"  @AnAnnotation void foo() {\\n\" + ", "+\t\t\"  @AnAnnotation(name = $missing$) void foo() {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7c64f4791567d59c998d2d26505adb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationCompletionParserTest.java", "commitBeforeChange": "63d13898e414da27bb1c178ed93753184a2e7833", "commitAfterChange": "a489ce78e2eb32838e144c0480573d4783205f0f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void test0011()", "signatureAfterChange": " public void test0011()", "diff": ["-\t\t\"  public class Y {\\n\" + ", "-\t\t\"    public Y() {\\n\" + ", "+\t\t\"  class Y {\\n\" + ", "+\t\t\"    Y() {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7f79a6cfd84e8c980d0de7c766ee66b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic void test056() throws CoreException, IOException", "signatureAfterChange": " \tpublic void test056() throws CoreException, IOException", "diff": ["-\t\t\t\t\"Lp/X$Y<Lp/X<TK;TV;>;:TK;Lp/X<TK;TV;>;:TV;>;\"", "+\t\t\t\t\"Lp/X$Y<Lp/X<TK;TV;>;:TK;Lp/X<TK;TV;>;:TV;>;^1\"", "-\t\t\t\t\"Lp/X$Y<Lp/X<TK;TV;>;:TK;Lp/X<TK;TV;>;:TV;>;\",", "+\t\t\t\t\"Lp/X$Y<Lp/X<TK;TV;>;:TK;Lp/X<TK;TV;>;:TV;>;^1\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8c55bd7cb940bd666a5a64265eec2ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tpublic void test064()", "signatureAfterChange": "  \tpublic void test064()", "diff": ["-\t\t\t\"     3  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "+\t\t\t\"     3  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void  [37]\\n\" + ", "+\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void [32]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9b70dd66ce46213a677341659fa504c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 836, "methodNumberAfterChange": 836, "signatureBeforeChange": " public void test830()", "signatureAfterChange": " public void test830()", "diff": ["-\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9bff5610f6dfa6cceac23051f9c4ac5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 243, "methodNumberAfterChange": 243, "signatureBeforeChange": " public void test200_warn_options()", "signatureAfterChange": " public void test200_warn_options()", "diff": ["-\t\t\"The parameter i is never read\\n\" +", "+\t\t\"The value of the parameter i is not used\\n\" +", "-\t\t\"The local variable j is never read\\n\" +", "+\t\t\"The value of the local variable j is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa01d3bb9026b313587984821e458f7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestForConstructor.java", "commitBeforeChange": "1dae9bed0f28b20df545c773f52fb80596048ada", "commitAfterChange": "73e6c55b6cebcb032c8128286708483f86167b64", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic void test044()", "signatureAfterChange": "  \tpublic void test044()", "diff": ["-\t\t\t\t+ \"\t               ^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                           ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                             ^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa7da858c7720d44cc95ae2fa15732ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "0f82c3c2351d2b4aa115f915a692d896ffbf12db", "commitAfterChange": "42ba068696287a55bc72837ef925c3e42a2ffc11", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tpublic void test056() throws CoreException, IOException", "signatureAfterChange": " \tpublic void test056() throws CoreException, IOException", "diff": ["-\t\t\t\t\"Lp/X$Y<Lp/X;:TK;Lp/X;:TV;>;\"", "+\t\t\t\t\"Lp/X<>.Y<Lp/X;:TK;Lp/X;:TV;>;\"", "-\t\t\t\t\"Lp/X$Y<Lp/X;:TK;Lp/X;:TV;>;\",", "+\t\t\t\t\"Lp/X<>.Y<Lp/X;:TK;Lp/X;:TV;>;\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa84a77da4fbbe1f475a0ae9bccaf3d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testBug96237_Private02()", "signatureAfterChange": " \tpublic void testBug96237_Private02()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "facc3f7da15e7ef5536747766eaad2e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " public void testBug236406_EX1()", "signatureAfterChange": " public void testBug236406_EX1()", "diff": ["-\t\t\"/**        Javadoc\t\tcomment    \t    */\\n\" + ", "-\t\t\"1 + (/*      Block\t\tcomment*/++a)\\n\",", "+\t\t\"\t\t/**        Javadoc\t\tcomment    \t    */\\n\" + ", "+\t\t\"\t\t1 + (/*      Block\t\tcomment*/++a)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb3cba4acd1a2fc885a5ce2c74157052", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c886d02294a141648a4834ce44dd29510bcd61cd", "commitAfterChange": "d8ca36af474d3d873e7cd2a89b66282b98b81a66", "methodNumberBeforeChange": 1460, "methodNumberAfterChange": 1460, "signatureBeforeChange": " public void test1426()", "signatureAfterChange": " public void test1426()", "diff": ["-\t\t\t\"Cannot perform instanceof check against type parameter T. Use instead its erasure List<?> instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against type parameter T. Use its erasure List<?> instead since further generic type information will be erased at runtime\\n\" + ", "-\t\t\t\"Cannot perform instanceof check against type parameter T. Use instead its erasure Map<?,?> instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against type parameter T. Use its erasure Map<?,?> instead since further generic type information will be erased at runtime\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc37951cbd4667c44109828727d26f3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " public void testBug260011_01() throws JavaModelException", "signatureAfterChange": " public void testBug260011_01() throws JavaModelException", "diff": ["-\t\t\"\t * <li style=\\\"font-variant:small-caps;\\\">\\n\" + ", "-\t\t\"\t * some text to be styled a certain way</li>\\n\" + ", "+\t\t\"\t * <li style=\\\"font-variant:small-caps;\\\">some text to be styled a certain way\\n\" + ", "+\t\t\"\t * </li>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc578acedb7d9ae7e74485dcf921c1ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void test030()", "signatureAfterChange": " \tpublic void test030()", "diff": ["-\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc5e2596c82fb132ca4fa01d3cffb568", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " public void test056y()", "signatureAfterChange": " public void test056y()", "diff": ["-\t\t\"Potential resource leak: \\\"reader31\\\" may not be closed\\n\" + ", "+\t\t\"Potential resource leak: 'reader31' may not be closed\\n\" + ", "-\t\t\"Potential resource leak: \\\"reader23\\\" may not be closed\\n\" + ", "+\t\t\"Potential resource leak: 'reader23' may not be closed\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc881439667149e50ca9619f0d6b2a5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testChangeOutputLocation() throws JavaModelException, CoreException", "signatureAfterChange": " public void testChangeOutputLocation() throws JavaModelException, CoreException", "diff": ["-\t\t\t\"JavaProjectTests[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\"JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + ", "-\t\t\t\t\"JavaProjectTests[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\\n\" + ", "+\t\t\t\t\"JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9474c8389283e69d7c6fa1827e64be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeAnnotationsConverterTest.java", "commitBeforeChange": "55189ed648ac780e2783a409705c9c8b61eeced6", "commitAfterChange": "cd7ab76e97bbde2dfa388ac94141efed3a1c5385", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test0006() throws JavaModelException", "signatureAfterChange": " \tpublic void test0006() throws JavaModelException", "diff": ["-\t\t\t\"    int [] [] [] [] o = (@One int [] @Two [] [] @Three []) null;\\n\" +", "+\t\t\t\"    int[][][][] o = (@One int[] @Two [][] @Three []) null;\\n\" +", "-\t\t\t\t\"  int [] [] [] [] o=(@One int [] @Two [] [] @Three [])null;\\n\" + ", "+\t\t\t\t\"  int[][][][] o=(@One int[] @Two [][] @Three [])null;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcea2b948b9243fa98ba4c60a0f5b23d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "11ed38e74464eb2e7d149f52bb984520286f9a3a", "commitAfterChange": "ad8b3feb3cd31efef290116a3645f74aac42c9f3", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test055()", "signatureAfterChange": " public void test055()", "diff": ["-\t\t\"The argument a is hiding a field from type X.I1\\n\" + ", "+\t\t\"The parameter a is hiding a field from type X.I1\\n\" + ", "-\t\t\"The argument a is hiding a field from type X.I1\\n\" + ", "+\t\t\"The parameter a is hiding a field from type X.I1\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd01f42ddca8f91afcaf57ebc9e40b7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RuntimeTests.java", "commitBeforeChange": "dee823e8e9454e3bbc323b61e0e66446bfc3e48a", "commitAfterChange": "c903817ea1b3b3294907f8d4a93524af350dfca3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test0500_synchronization()", "signatureAfterChange": " public void test0500_synchronization()", "diff": ["-\t\t\t\"  void logStep(String from) {\\n\" + ", "-\t\t\t\"    System.out.println(from + \\\" \\\" + this.step); //$NON-NLS-1$\\n\" + ", "+\t\t\t\"  void logStep(String start) {\\n\" + ", "+\t\t\t\"    System.out.println(start + \\\" \\\" + this.step); //$NON-NLS-1$\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd48d43d4ff7fff0b716c4da0ede55c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "9bef3f15c43b07a14e76957980f62386b2bcee10", "commitAfterChange": "73f504e7d77d95d8fc2d6621b5727e1e3ab07530", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void test011()", "signatureAfterChange": " public void test011()", "diff": ["-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd7140c5d5f8e586dc45875aa9d7e728", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 770, "methodNumberAfterChange": 770, "signatureBeforeChange": " public void test764()", "signatureAfterChange": " public void test764()", "diff": ["-\t\t\"1. ERROR in X.java (at line 7)\\r\\n\" + ", "-\t\t\"\tthis(label, bindings, (List<IIfClosure>)Collections.emptyList());\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tthis(label, bindings, (List<IIfClosure>)Collections.emptyList());\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fda8002c199d16f71ccc777ada39d545", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void testBug101283a()", "signatureAfterChange": " \tpublic void testBug101283a()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdc59a4cb34921a54a7967c243a6ce97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void test07() throws JavaModelException", "signatureAfterChange": "  \tpublic void test07() throws JavaModelException", "diff": ["-\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "+\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\\n\" + ", "-\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdc5f1254ff7206c5238facaf643aa39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic void test008()", "signatureAfterChange": "  \tpublic void test008()", "diff": ["-\t\t\"Javadoc: Unknown cannot be resolved or is not a type\\n\" + ", "+\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" + ", "-\t\t\"Javadoc: Unknown cannot be resolved or is not a type\\n\" + ", "+\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdd580285cb109b6f2e50383b9681e35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "8fdb14b64608b58e620c67bc0f2758fb559de717", "commitAfterChange": "447dafd45d9eea3d096b0cc1d1d11fe893f03ec0", "methodNumberBeforeChange": 557, "methodNumberAfterChange": 557, "signatureBeforeChange": " public void testBug210567() throws CoreException", "signatureAfterChange": " public void testBug210567() throws CoreException", "diff": ["-\t\t\"src/generics/Generic.java [import java.io.\ufffd|Serializable|\ufffd;] EXACT_MATCH\\n\" + ", "-\t\t\"src/generics/Generic.java [import type.def.\ufffd|Types|\ufffd;] EXACT_MATCH\\n\" + ", "+\t\t\"src/generics/Generic.java [import \ufffd|java.io.Serializable|\ufffd;] EXACT_MATCH\\n\" + ", "+\t\t\"src/generics/Generic.java [import \ufffd|type.def.Types|\ufffd;] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe4b5ca7e21bcd13dc350b8ff5a453da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void testBug84724b() throws CoreException", "signatureAfterChange": " \tpublic void testBug84724b() throws CoreException", "diff": ["-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 2, workingCopies.length);", "+\t\tassertNotNull(\"There should be working copies!\", workingCopies);", "+\t\tassertEquals(\"Invalid number of working copies kept between tests!\", 2, workingCopies.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe67be3325163752d477ef40f7f6de09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "e33f7779451c8006c5a8cd25656f596a447d136a", "commitAfterChange": "71461454c011188604de602b101178a9fe2bbd9e", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"    -source <version>  set source level: 1.3 to 1.6 (or 6 or 6.0)\\n\" + ", "-        \"    -target <version>  set classfile target level: 1.1 to 1.6 (or 6 or 6.0)\\n\" + ", "+        \"    -source <version>  set source level: 1.3 to 1.6 (or 5, 5.0, 6 or 6.0)\\n\" + ", "+        \"    -target <version>  set classfile target level: 1.1 to 1.6 (or 5, 5.0, 6 or 6.0)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7bfe3d9a764d00946f414830698d3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "   public void test0080()", "signatureAfterChange": "   public void test0080()", "diff": ["-\texpectedParentNodeToString = \"new int[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new int[]{<CompleteOnName:zzz>}\";", "-\t\t\"    int o = new int[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    int o = new int[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "febcb0d851d54c46170b120a95e2b1c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void test044()", "signatureAfterChange": " \tpublic void test044()", "diff": ["-\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feedcbbf68f51b9f61053dfa758e1720", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "9b0a7dbe196111bace472ad6d38ba1cdd25696dc", "commitAfterChange": "a118736b4df6d2c2d76c2e8540c6ee6242953cb2", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " \tpublic void test050() throws CoreException", "signatureAfterChange": " \tpublic void test050() throws CoreException", "diff": ["-\t\t\tnew String[] {\"Ljava/lang/Class<Ljava/lang/Class<TT;>;+[Ljava/lang/Object;>;\"});", "+\t\t\tnew String[] {\"Ljava/lang/Class<Ljava/lang/Class<TT;>;{0}+[Ljava/lang/Object;>;\"});", "-\t\t\t\t\"Ljava/lang/Class<Ljava/lang/Class;+[Ljava/lang/Object;>;\",", "+\t\t\t\t\"Ljava/lang/Class<Ljava/lang/Class;{0}+[Ljava/lang/Object;>;\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff4fff4a8df15037287e2a12ab1d5aa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f711a2e15fc3de73f79ccc61d2dafcbdd0d9f0f1", "commitAfterChange": "e823242f8d03d0ef2504eab819b418e785f092ee", "methodNumberBeforeChange": 240, "methodNumberAfterChange": 240, "signatureBeforeChange": " \tpublic void test090() throws Exception", "signatureAfterChange": " \tpublic void test090() throws Exception", "diff": ["-\t\t\t\"    0  aload_0\\n\" +", "+\t\t\t\"    0  aload_0 [this]\\n\" +", "-\t\t\t\"    0  aload_0\\n\" +", "+\t\t\t\"    0  aload_0 [this]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff67b214bd739b6d8b62e202b3be6bb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testBug80257()", "signatureAfterChange": " \tpublic void testBug80257()", "diff": ["-\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^\\n\" + ", "-\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"\t         ^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff6b3108d6675dfeefe364c4dd34d409", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void test0037()", "signatureAfterChange": " public void test0037()", "diff": ["-\tString expectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"Object[] o = {<CompleteOnName:zzz>};\";", "-\t\t\"  Object[] o = {<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"  Object[] o = {<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff959b685003840be52f43da03141993", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 451, "methodNumberAfterChange": 451, "signatureBeforeChange": " \tpublic void test447()", "signatureAfterChange": " \tpublic void test447()", "diff": ["-\t\t\t\"Type safety: X.Inner is a raw type. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "+\t\t\t\"X.Inner is a raw type. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.Inner is a raw type. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "+\t\t\t\"X.Inner is a raw type. References to generic type X<A>.Inner<B> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffbfd12abe0a628ac6908207d4dc8893", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 321, "methodNumberAfterChange": 322, "signatureBeforeChange": "  public void test1016()", "signatureAfterChange": "  public void test1016()", "diff": ["-\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Redundant assignment: The variable x can only be null at this location\\n\" + ", "-\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable x can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffc67deeda975f59f9d6994d49b59151", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void test020()", "signatureAfterChange": " \tpublic void test020()", "diff": ["-\t\t\t\t\t+ \"\t * @see Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see AbstractVisibility.AvcPublic Valid ref: visible inner class of local class \\n\"", "-\t\t\t\t\t+ \"\t * @see test.Visibility.AvcPublic Valid ref: visible inherited inner class of local class \\n\"", "+\t\t\t\t\t+ \"\t * @see test.AbstractVisibility.AvcPublic Valid ref: visible inner class of local class \\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffcb7640a249eba53ce9d87a3c0999df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1296, "methodNumberAfterChange": 1296, "signatureBeforeChange": " public void test1262()", "signatureAfterChange": " public void test1262()", "diff": ["-\t\t\"1. ERROR in X.java (at line 5)\\r\\n\" +", "-\t\t\"\tstatic XList<Sub<? super Number>> LIST = asList(ARRAY); \\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "+\t\t\"\tstatic XList<Sub<? super Number>> LIST = asList(ARRAY); \\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fffd459979d85465ac6dbf1fe2f658fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void testTypeSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testTypeSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + "]}], "num": 68015}
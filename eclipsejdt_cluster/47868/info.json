{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "436ab4d0667d546b92703d7c097a930c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3408f15e4854dc2f6f8f272f1b4d4418", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite, boolean uncheckedBoundCheck)", "diff": ["-\tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite) {", "+\tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite, boolean uncheckedBoundCheck) {", "-\t\t\t\tif (paramMethod.isUnchecked || (paramMethod.isRaw && method.hasSubstitutedParameters())) {", "+\t\t\t\tif (paramMethod.isRaw && method.hasSubstitutedParameters()) {", "-\t\t\t\t}", "-", "-\t\t\t   if (paramLength == argumentTypes.length) { // 70056", "+\t\t\t\t} ", "+\t\t\t\tif (paramLength == argLength) { // 70056", "-\t\t} else if (rawOriginalGenericMethod != null) {", "-\t\t    scope.problemReporter().unsafeRawGenericMethodInvocation((ASTNode)invocationSite, method);", "+\t\t} else if (rawOriginalGenericMethod != null ", "+\t\t\t\t|| uncheckedBoundCheck", "+\t\t\t\t|| ((invocationStatus & INVOCATION_ARGUMENT_UNCHECKED) != 0 ", "+\t\t\t\t\t\t&& method instanceof ParameterizedGenericMethodBinding", "+\t\t\t\t\t\t/*&& method.returnType != scope.environment().convertToRawType(method.returnType.erasure(), true)*/)) {", "+\t\t\tinvocationSite.setUnchecked(true);", "+\t\t    scope.problemReporter().unsafeRawGenericMethodInvocation((ASTNode)invocationSite, method, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79c59fc541defef5b00de9f0b059a2fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void checkUnclosedCloseables(FlowInfo flowInfo, ASTNode location, BlockScope locationScope)", "signatureAfterChange": " public void checkUnclosedCloseables(FlowInfo flowInfo, FlowContext flowContext, ASTNode location, BlockScope locationScope)", "diff": ["-public void checkUnclosedCloseables(FlowInfo flowInfo, ASTNode location, BlockScope locationScope) {", "+public void checkUnclosedCloseables(FlowInfo flowInfo, FlowContext flowContext, ASTNode location, BlockScope locationScope) {", "-\t\t\t((BlockScope) this.parent).checkUnclosedCloseables(flowInfo, location, locationScope);", "+\t\t\t((BlockScope) this.parent).checkUnclosedCloseables(flowInfo, flowContext, location, locationScope);", "-\t\tif (location != null && trackingVar.originalBinding != null && flowInfo.isDefinitelyNull(trackingVar.originalBinding))", "-\t\t\tcontinue; // reporting against a specific location, resource is null at this flow, don't complain", "-\t\t", "+\t\tif (location != null && trackingVar.hasDefinitelyNoResource(flowInfo)) {", "+\t\t\tcontinue; // reporting against a specific location, there is no resource at this flow, don't complain", "+\t\t}", "+", "+\t\tif (location != null && flowContext != null && flowContext.recordExitAgainstResource(this, flowInfo, trackingVar, location)) {", "+\t\t\tcontinue; // handled by the flow context", "+\t\t}", "+"]}], "num": 47868}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f980c0007165b85cd6bf4648133eeef", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3e3ae9692193626ee0717e49aab47ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "24eb072a7e8fa246f853df0748e7c66069f4ff20", "commitAfterChange": "cd140389e1d0cdca9f232f9b33d1b09e90034b22", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "  \tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind)", "signatureAfterChange": "  \tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind, boolean firstIsTypeAnnotation)", "diff": ["-\tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind) {", "+\tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind, boolean firstIsTypeAnnotation) {", "-\t\t\tboolean foundNonAnnotModifiers = false;", "+\t\t\tboolean treatNextAsTypeAnnotation = firstIsTypeAnnotation;", "-\t\t\t\t\t\tfoundNonAnnotModifiers = true;", "+\t\t\t\t\t\ttreatNextAsTypeAnnotation = true;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_type) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_type;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_field) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_field;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_method) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_method;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_package) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_package;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_parameter) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_parameter;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_local_variable) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_local_variable;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9b00b4dd28c1204cda9249de7e7ed46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "4c1d4b601e686baad6c5a6a92ddbbebe0b64a62d", "commitAfterChange": "efbaf5f01b1dd1c4f8135936aa48ce411ca71c6c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\tfinal Object bracePositionForBlockInCaseOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_BLOCK_IN_CASE);", "+\t\tif (bracePositionForBlockInCaseOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_block_in_case = (String) bracePositionForBlockInCaseOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_block_in_case = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeCatchInTryStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CATCH_IN_TRY_STATEMENT);", "+\t\tif (insertNewLineBeforeCatchInTryStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_catch_in_try_statement = JavaCore.INSERT.equals(insertNewLineBeforeCatchInTryStatementOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeElseInIfStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_ELSE_IN_IF_STATEMENT);", "+\t\tif (insertNewLineBeforeElseInIfStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_else_in_if_statement = JavaCore.INSERT.equals(insertNewLineBeforeElseInIfStatementOption);", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeFinallyInTryStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_FINALLY_IN_TRY_STATEMENT);", "+\t\tif (insertNewLineBeforeFinallyInTryStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_finally_in_try_statement = JavaCore.INSERT.equals(insertNewLineBeforeFinallyInTryStatementOption);", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeWhileInDoStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_WHILE_IN_DO_STATEMENT);", "+\t\tif (insertNewLineBeforeWhileInDoStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_while_in_do_statement = JavaCore.INSERT.equals(insertNewLineBeforeWhileInDoStatementOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterColonInCaseOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE);", "+\t\tif (insertSpaceAfterColonInCaseOption != null) {", "+\t\t\tthis.insert_space_after_colon_in_case = JavaCore.INSERT.equals(insertSpaceAfterColonInCaseOption);", "+\t\tfinal Object keepEmptyArrayInitializerOnOneLineOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_EMPTY_ARRAY_INITIALIZER_ON_ONE_LINE);", "+\t\tif (keepEmptyArrayInitializerOnOneLineOption != null) {", "+\t\t\tthis.keep_empty_array_initializer_on_one_line = DefaultCodeFormatterConstants.TRUE.equals(keepEmptyArrayInitializerOnOneLineOption);", "+\t\t}"]}], "num": 65796}
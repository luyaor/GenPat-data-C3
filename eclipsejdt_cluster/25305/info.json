{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14f8c77e85f8feb98d111100974e3e16", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07d3bce0b437c9aab76877788ead95a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " public void testCompletionAbstractMethodRelevance2() throws JavaModelException", "signatureAfterChange": " public void testCompletionAbstractMethodRelevance2() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionAbstractMethodRelevance2.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"eq\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\"element:eqFoo    completion:public int eqFoo(int a,Object b)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:equals    completion:public boolean equals(Object obj)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),", "-\t\trequestor.getResults());", "+\tICompilationUnit superClass = null;", "+\ttry {", "+\t\tsuperClass = getWorkingCopy(", "+\t            \"/Completion/src/CompletionSuperInterface.java\",", "+\t            \"public interface CompletionSuperInterface{\\n\"+", "+\t            \"\tpublic int eqFoo(int a,Object b);\\n\"+", "+\t            \"}\");", "+\t\t", "+\t\tthis.wc = getWorkingCopy(", "+\t            \"/Completion/src/CompletionAbstractMethodRelevance2.java\",", "+\t            \"public class CompletionAbstractMethodRelevance2 implements CompletionSuperInterface {\\n\"+", "+\t            \"\teq\\n\"+", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"eq\";", "+\t    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\"eq[POTENTIAL_METHOD_DECLARATION]{eq, LCompletionAbstractMethodRelevance2;, ()V, eq, null, \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperInterface;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+\"}\",", "+\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(superClass != null) {", "+\t\t\tsuperClass.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d5f960e6f49004934edb38fd3fb0c74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 563, "signatureBeforeChange": " public void testCompletionStaticMethod1() throws JavaModelException", "signatureAfterChange": " public void testCompletionStaticMethod1() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionStaticMethod1.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"foo\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\t\"element:foo    completion:CompletionStaticMethod1.foo()    relevance:\"+ (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED) + \"\\n\" +", "-\t\t\t\"element:foo    completion:foo()    relevance:\"+ (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXACT_NAME + R_NON_RESTRICTED) + \"\\n\" +", "-\t\t\t\"element:foo0    completion:CompletionStaticMethod1.this.foo0()    relevance:\"+ (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"\\n\" +", "-\t\t\t\"element:foo0    completion:foo0()    relevance:\" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED),", "-\t\t\trequestor.getResults());", "+\tICompilationUnit aType = null;", "+\ttry {", "+\t\taType = getWorkingCopy(", "+\t            \"/Completion/src/TypeWithAMethodAndAStaticMethod .java\",", "+\t            \"public class TypeWithAMethodAndAStaticMethod {\\n\"+", "+\t            \"\tpublic static void foo(){}\\n\"+", "+\t            \"\tpublic void foo0(){}\\n\"+", "+\t            \"}\");", "+\t\t\t", "+\t\tthis.wc = getWorkingCopy(", "+\t            \"/Completion/src/CompletionStaticMethod1.java\",", "+\t            \"public class CompletionStaticMethod1 extends TypeWithAMethodAndAStaticMethod {\\n\"+", "+\t            \"\tvoid bar(){\\n\"+", "+\t            \"\t\tnew TypeWithAMethodAndAStaticMethod(){\\n\"+", "+\t            \"\t\t\tclass Inner1 extends TypeWithAMethodAndAStaticMethod {\\n\"+", "+\t            \"\t\t\t\tvoid bar(){\\n\"+", "+\t            \"\t\t\t\t\tfoo\\n\"+", "+\t            \"\t\t\t\t}\\n\"+", "+\t            \"\t\t\t}\\n\"+", "+\t            \"\t\t};\\n\"+", "+\t            \"\t}\\n\"+", "+\t            \"\t\\n\"+", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"foo\";", "+\t    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"foo0[METHOD_REF]{CompletionStaticMethod1.this.foo0(), LTypeWithAMethodAndAStaticMethod;, ()V, foo0, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"foo0[METHOD_REF]{foo0(), LTypeWithAMethodAndAStaticMethod;, ()V, foo0, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"foo[METHOD_REF]{CompletionStaticMethod1.foo(), LTypeWithAMethodAndAStaticMethod;, ()V, foo, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"foo[METHOD_REF]{foo(), LTypeWithAMethodAndAStaticMethod;, ()V, foo, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXACT_NAME + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(aType != null) {", "+\t\t\taType.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c06123d3aa1bd3dd1af70fd214d345b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "   public void testCompletionMethodDeclaration4() throws JavaModelException", "signatureAfterChange": "   public void testCompletionMethodDeclaration4() throws JavaModelException", "diff": ["-", "-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionMethodDeclaration4.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"eq\";", "-\tint cursorLocation = str.indexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\"should have one completion\", ", "-\t\t\"element:eqFoo    completion:public int eqFoo(int a,Object b)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"\\n\"+", "-\t\t\"element:equals    completion:public boolean equals(Object obj)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),", "-\t\trequestor.getResults());", "-}", "+\tICompilationUnit superClass = null;", "+\ttry {", "+\t\tsuperClass = getWorkingCopy(", "+\t            \"/Completion/src/CompletionSuperInterface.java\",", "+\t            \"public interface CompletionSuperInterface{\\n\"+", "+\t            \"\tpublic int eqFoo(int a,Object b);\\n\"+", "+\t            \"}\");", "+\t\t", "+\t\tthis.wc = getWorkingCopy(", "+\t            \"/Completion/src/CompletionMethodDeclaration4.java\",", "+\t            \"public abstract class CompletionMethodDeclaration4 implements CompletionSuperInterface {\\n\"+", "+\t            \"\teq\\n\"+", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"eq\";", "+\t    int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\"eq[POTENTIAL_METHOD_DECLARATION]{eq, LCompletionMethodDeclaration4;, ()V, eq, null, \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\"+", "+\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperInterface;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+\"}\",", "+\t} finally {", "+\t\tif(superClass != null) {", "+\t\t\tsuperClass.discardWorkingCopy();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210badbd2f83583d510c47230e39128a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  public void testCompletionMethodDeclaration2() throws JavaModelException", "signatureAfterChange": "  public void testCompletionMethodDeclaration2() throws JavaModelException", "diff": ["-", "-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionMethodDeclaration2.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"eq\";", "-\tint cursorLocation = str.indexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\"should have two completions\", ", "-\t\t\"element:eqFoo    completion:public int eqFoo(int a,Object b)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:equals    completion:public boolean equals(Object obj)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),", "-\t\trequestor.getResults());", "+\tICompilationUnit superClass = null;", "+\ttry {", "+\t\tsuperClass = getWorkingCopy(", "+\t            \"/Completion/src/CompletionSuperClass.java\",", "+\t            \"public class CompletionSuperClass{\\n\" +", "+\t            \"\tpublic class Inner {}\\n\" +", "+\t            \"\tpublic int eqFoo(int a,Object b){\\n\" +", "+\t            \"\t\treturn 1;\\n\" +", "+\t            \"\t}\\n\" +", "+\t            \"}\");", "+\t\t", "+\t\tthis.wc = getWorkingCopy(", "+\t            \"/Completion/src/CompletionMethodDeclaration2.java\",", "+\t            \"public class CompletionMethodDeclaration2 extends CompletionSuperClass {\\n\" +", "+\t            \"\teq\\n\" +", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"eq\";", "+\t    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\"eq[POTENTIAL_METHOD_DECLARATION]{eq, LCompletionMethodDeclaration2;, ()V, eq, null, \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperClass;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+\"}\",", "+\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(superClass != null) {", "+\t\t\tsuperClass.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d10960c3cfad8abe4fe08109eed6f06f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void testCompletionMethodDeclaration3() throws JavaModelException", "signatureAfterChange": " public void testCompletionMethodDeclaration3() throws JavaModelException", "diff": ["-", "-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionMethodDeclaration3.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"eq\";", "-\tint cursorLocation = str.indexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\"should have one completion\", ", "-\t\t\"element:equals    completion:public boolean equals(Object obj)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),", "-\t\trequestor.getResults());", "+\tICompilationUnit superClass = null;", "+\ttry {", "+\t\tsuperClass = getWorkingCopy(", "+\t            \"/Completion/src/CompletionSuperClass.java\",", "+\t            \"public class CompletionSuperClass{\\n\" +", "+\t            \"\tpublic class Inner {}\\n\" +", "+\t            \"\tpublic int eqFoo(int a,Object b){\\n\" +", "+\t            \"\t\treturn 1;\\n\" +", "+\t            \"\t}\\n\" +", "+\t            \"}\");", "+\t\t", "+\t\tthis.wc = getWorkingCopy(", "+\t            \"/Completion/src/CompletionMethodDeclaration3.java\",", "+\t            \"public class CompletionMethodDeclaration3 extends CompletionSuperClass {\\n\" +", "+\t            \"\teq\\n\" +", "+\t            \"\t\\n\" +", "+\t            \"\tpublic int eqFoo(int a,Object b){\\n\" +", "+\t            \"\t\treturn 1;\\n\" +", "+\t            \"\t}\\n\" +", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"eq\";", "+\t    int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\"eq[POTENTIAL_METHOD_DECLARATION]{eq, LCompletionMethodDeclaration3;, ()V, eq, null, \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+\"}\",", "+\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(superClass != null) {", "+\t\t\tsuperClass.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe66b16b88c7810a25c916219f21ddb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": " public void testCompletionAbstractMethodRelevance1() throws JavaModelException", "signatureAfterChange": " public void testCompletionAbstractMethodRelevance1() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionAbstractMethodRelevance1.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"foo\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\"element:foo1    completion:public void foo1()    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:foo2    completion:public void foo2()    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:foo3    completion:public void foo3()    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),", "-\t\trequestor.getResults());", "+\tICompilationUnit superClass = null;", "+\ttry {", "+\t\tsuperClass = getWorkingCopy(", "+\t            \"/Completion/src/CompletionAbstractSuperClass.java\",", "+\t            \"public abstract class CompletionAbstractSuperClass {\\n\"+", "+\t            \"\tpublic void foo1(){}\\n\"+", "+\t            \"\tpublic abstract void foo2();\\n\"+", "+\t            \"\tpublic void foo3(){}\\n\"+", "+\t            \"}\");", "+\t\t", "+\t\tthis.wc = getWorkingCopy(", "+\t            \"/Completion/src/CompletionAbstractMethodRelevance1.java\",", "+\t            \"public class CompletionAbstractMethodRelevance1 extends CompletionAbstractSuperClass {\\n\"+", "+\t            \"\tfoo\\n\"+", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"foo\";", "+\t    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\"foo[POTENTIAL_METHOD_DECLARATION]{foo, LCompletionAbstractMethodRelevance1;, ()V, foo, null, \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"foo1[METHOD_DECLARATION]{public void foo1(), LCompletionAbstractSuperClass;, ()V, foo1, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"foo3[METHOD_DECLARATION]{public void foo3(), LCompletionAbstractSuperClass;, ()V, foo3, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"foo2[METHOD_DECLARATION]{public void foo2(), LCompletionAbstractSuperClass;, ()V, foo2, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+\"}\",", "+\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(superClass != null) {", "+\t\t\tsuperClass.discardWorkingCopy();", "+\t\t}", "+\t}"]}], "num": 25305}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5dcea6fc65a89263a3657ed56203a597", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01002ff819b759f1b7d69980cb0ee136", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "2193765f6a14f1428523dab68858768ca623c9d3", "commitAfterChange": "5450463d69e66bedc3d0797b782f5dab3b9072d6", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tprivate static IJavaModelStatus validateLibraryEntry(IPath path, IJavaProject project, String container, IPath sourceAttachment, String entryPathMsg)", "signatureAfterChange": " \tprivate static IJavaModelStatus validateLibraryEntry(IPath path, IJavaProject project, String container, IPath sourceAttachment, String entryPathMsg)", "diff": ["+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=229042", "+\t\t\t\t\t\t// Validate the contents of the archive", "+\t\t\t\t\t\tIJavaModelStatus status = validateLibraryContents(path, project, entryPathMsg);", "+\t\t\t\t\t\tif (status != JavaModelStatus.VERIFIED_OK) ", "+\t\t\t\t\t\t\treturn status;", "-\t\t\t\t} else if (sourceAttachment != null", "-\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "-\t\t\t\t\t\t&& JavaModel.getTarget(sourceAttachment, true) == null){", "-\t\t\t\t\tif (container != null) {", "-\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_unboundSourceAttachmentInContainedLibrary, new String [] {sourceAttachment.toString(), path.toOSString(), container}));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_unboundSourceAttachment, new String [] {sourceAttachment.toString(), path.toOSString(), project.getElementName()}));", "+\t\t\t\t} else {", "+\t\t\t\t\tif (sourceAttachment != null", "+\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "+\t\t\t\t\t\t\t&& JavaModel.getTarget(sourceAttachment, true) == null){", "+\t\t\t\t\t\tif (container != null) {", "+\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_unboundSourceAttachmentInContainedLibrary, new String [] {sourceAttachment.toString(), path.toOSString(), container}));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_unboundSourceAttachment, new String [] {sourceAttachment.toString(), path.toOSString(), project.getElementName()}));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=229042", "+\t\t\t\t\t// Validate the contents of the archive", "+\t\t\t\t\tif(file.isFile()) {", "+\t\t\t\t\t\tIJavaModelStatus status = validateLibraryContents(path, project, entryPathMsg);", "+\t\t\t\t\t\tif (status != JavaModelStatus.VERIFIED_OK) ", "+\t\t\t\t\t\t\treturn status;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a397bacfd140fe07381ca9e6dbe2f233", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 36, "signatureBeforeChange": " \t\tpublic synchronized void updateClasspathInformation(IClasspathEntry[] newRawClasspath)", "signatureAfterChange": " \t\tpublic synchronized IClasspathEntry[] readAndCacheClasspath(JavaProject javaProject)", "diff": ["-\t\t// updating raw classpath need to flush obsoleted cached information about resolved entries", "-\t\tpublic synchronized void updateClasspathInformation(IClasspathEntry[] newRawClasspath) {", "-", "-\t\t\tthis.resolvedClasspath = null;", "-\t\t\tthis.resolvedPathToRawEntries = null;", "+\t\t */", "+\t\tpublic synchronized IClasspathEntry[] readAndCacheClasspath(JavaProject javaProject) {", "+\t\t\t// read file entries and update status", "+\t\t\tIClasspathEntry[] classpath;", "+\t\t\tIJavaModelStatus status;", "+\t\t\ttry {", "+\t\t\t\tclasspath = javaProject.readFileEntriesWithException(null/*not interested in unknown elements*/);", "+\t\t\t\tstatus = JavaModelStatus.VERIFIED_OK;", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tclasspath = JavaProject.INVALID_CLASSPATH;", "+\t\t\t\tstatus = ", "+\t\t\t\t\tnew JavaModelStatus(", "+\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, javaProject.getElementName()));", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tclasspath = JavaProject.INVALID_CLASSPATH;", "+\t\t\t\tif (Messages.file_badFormat.equals(e.getMessage()))", "+\t\t\t\t\tstatus = ", "+\t\t\t\t\t\tnew JavaModelStatus(", "+\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\tMessages.bind(Messages.classpath_xmlFormatError, javaProject.getElementName(), Messages.file_badFormat));", "+\t\t\t\telse\t\t\t\t", "+\t\t\t\t\tstatus = ", "+\t\t\t\t\t\tnew JavaModelStatus(", "+\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, javaProject.getElementName()));", "+\t\t\t} catch (AssertionFailedException e) {", "+\t\t\t\tclasspath = JavaProject.INVALID_CLASSPATH;", "+\t\t\t\tstatus =  ", "+\t\t\t\t\tnew JavaModelStatus(", "+\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\tMessages.bind(Messages.classpath_illegalEntryInClasspathFile, new String[] {javaProject.getElementName(), e.getMessage()}));", "+\t\t\t}", "+\t\t", "+\t\t\t// extract out the output location", "+\t\t\tIPath output = null;", "+\t\t\tif (classpath.length > 0) {", "+\t\t\t\tIClasspathEntry entry = classpath[classpath.length - 1];", "+\t\t\t\tif (entry.getContentKind() == ClasspathEntry.K_OUTPUT) {", "+\t\t\t\t\toutput = entry.getPath();", "+\t\t\t\t\tIClasspathEntry[] copy = new IClasspathEntry[classpath.length - 1];", "+\t\t\t\t\tSystem.arraycopy(classpath, 0, copy, 0, copy.length);", "+\t\t\t\t\tclasspath = copy;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// store new raw classpath, new output and new status, and null out resolved info", "+\t\t\tsetClasspath(classpath, output, status, null, null, null);", "+\t\t\t", "+\t\t\treturn classpath;", "+\t\t}"]}], "num": 67128}
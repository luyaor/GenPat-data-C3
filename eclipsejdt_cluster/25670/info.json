{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4933783398345d1fe54327076a51bef", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61f31d77559766fa3ffc2fe5aeedd7c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1666c32b249d36aa9547f4f66f511c5bb00d3d63", "commitAfterChange": "4e6bb96b0e120539a45cc4860f508bf12e097d37", "methodNumberBeforeChange": 1480, "methodNumberAfterChange": 1480, "signatureBeforeChange": " public void test1445()", "signatureAfterChange": " public void test1445()", "diff": ["-\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Throwable>\\n\" + ", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8", "+\t\t\t? \"Type safety: The expression of type List needs unchecked conversion to conform to List<Throwable>\\n\"", "+\t\t\t: \"Type safety: The expression of type List needs unchecked conversion to conform to List<RuntimeException>\\n\" ) +", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Throwable>\\n\" + ", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8", "+\t\t\t? \"Type safety: The expression of type List needs unchecked conversion to conform to List<Throwable>\\n\"", "+\t\t\t: \"Type safety: The expression of type List needs unchecked conversion to conform to List<RuntimeException>\\n\" ) +", "-\t\t\t\"----------\\n\"", "-\t\t\t: // 1.8 infers type parameters in throws clauses to RuntimeException, hence no errors", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tstatic void bar(List l) {\\n\" + ", "-\t\t\t\"\t                ^^^^\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<RuntimeException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tnew X(l).foo(l);\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<RuntimeException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tstatic void baz(List l) throws IOException {\\n\" + ", "-\t\t\t\"\t                ^^^^\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"8. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"9. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t                    ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"10. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l). <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t                                          ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"11. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\t\"\tX(List l, long l2) throws IOException {\\n\" + ", "-\t\t\t\"\t  ^^^^\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"12. WARNING in X.java (at line 16)\\n\" + ", "-\t\t\t\"\t<IOException> this(l);\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"13. WARNING in X.java (at line 16)\\n\" + ", "-\t\t\t\"\t<IOException> this(l);\\n\" + ", "-\t\t\t\"\t                   ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"14. WARNING in X.java (at line 19)\\n\" + ", "-\t\t\t\"\tstatic void baz2(List l) throws IOException {\\n\" + ", "-\t\t\t\"\t                 ^^^^\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"15. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation X(List) of the generic constructor X(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"16. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"17. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t                    ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"18. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tnew <IOException> X(l){}. <IOException> foo(l);\\n\" + ", "-\t\t\t\"\t                                            ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<IOException>\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t\t));", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2cfb3482545084048fec87830f11e45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "9a9af4e642a47932f3bfeeec13330339dcc48de3", "commitAfterChange": "c3ad34ec44b228feb09e91ff5ac00fc774236d05", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic void test051()", "signatureAfterChange": " \tpublic void test051()", "diff": ["+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=89470", "-\t\t\t\t\"import java.util.List;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\tclass C1 {\\n\" + ", "-\t\t\t\t\"\t\tInteger foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\t\"\t\tString foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tclass C2 {\\n\" + ", "-\t\t\t\t\"\t\t<T extends Integer> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\t\"\t\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tclass C3 {\\n\" + ", "-\t\t\t\t\"\t\tInteger foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\t\"\t\t<T extends String> T foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tclass C4 {\\n\" + ", "-\t\t\t\t\"\t\tList<Integer> foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\t\"\t\tList<String> foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tclass C5 {\\n\" + ", "-\t\t\t\t\"\t\tList<Integer> foo(List<Integer> o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\t\"\t\tList<String> foo(List<String> o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tclass C6 {\\n\" + ", "-\t\t\t\t\"\t\t<T extends Integer> T foo(List<Integer> o) {  return null; } // ok\\n\" + ", "-\t\t\t\t\"\t\t<T extends String> T foo(List<String> o) {  return null; } // ok\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tclass C7 {\\n\" + ", "-\t\t\t\t\"\t\t<T extends Integer, U> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\t\"\t\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\t\"\t}\t\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"//\t\tnew X().new C2().foo((List<String>) null);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"public class X implements I {\\n\" + ", "+\t\t\t\t\"\t\t public <T extends I> void foo(T t) {}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"interface I {\\n\" + ", "+\t\t\t\t\"\t\t <T> void foo(T t);\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tInteger foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t        ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(Object) in type X.C1\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tString foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(Object) in type X.C1\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"\t<T extends Integer> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t           ^^^^^^^\\n\" + ", "-\t\t\t\"The type parameter T should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t           ^^^^^^\\n\" + ", "-\t\t\t\"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tInteger foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t        ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(Object) in type X.C3\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t           ^^^^^^\\n\" + ", "-\t\t\t\"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(Object) in type X.C3\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"8. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\"\tList<Integer> foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(Object) in type X.C4\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"9. ERROR in X.java (at line 19)\\n\" + ", "-\t\t\t\"\tList<String> foo(Object o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t             ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(Object) in type X.C4\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"10. ERROR in X.java (at line 22)\\n\" + ", "-\t\t\t\"\tList<Integer> foo(List<Integer> o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(List<Integer>) in type X.C5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"11. ERROR in X.java (at line 23)\\n\" + ", "-\t\t\t\"\tList<String> foo(List<String> o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(List<String>) in type X.C5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"12. WARNING in X.java (at line 26)\\n\" + ", "-\t\t\t\"\t<T extends Integer> T foo(List<Integer> o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t           ^^^^^^^\\n\" + ", "-\t\t\t\"The type parameter T should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"13. WARNING in X.java (at line 27)\\n\" + ", "-\t\t\t\"\t<T extends String> T foo(List<String> o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t           ^^^^^^\\n\" + ", "-\t\t\t\"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"14. WARNING in X.java (at line 30)\\n\" + ", "-\t\t\t\"\t<T extends Integer, U> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t           ^^^^^^^\\n\" + ", "-\t\t\t\"The type parameter T should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"15. WARNING in X.java (at line 31)\\n\" + ", "-\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t           ^^^^^^\\n\" + ", "-\t\t\t\"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\");", "-\t}\t", "+\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tpublic class X implements I {\\r\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"The type X must implement the inherited abstract method I.foo(T)\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// X is not abstract and does not override abstract method <T>foo(T) in I", "+\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "+\t\t\t\t\"\tObject foo(A<Integer> a) { return null; }\\n\" +", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class A<T> {}\\n\",", "+\t\t\t},", "+\t\t\t\"\"", "+\t\t);", "+\t}"]}], "num": 25670}
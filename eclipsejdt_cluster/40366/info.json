{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07d151f8853b4b284552cedf73175cea", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e6366bd6765e6a0b3d528b145a25c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\tfinal Object alignmentForResourcesInTry = settings.get(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_RESOURCES_IN_TRY);", "+\t\tif (alignmentForResourcesInTry != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_resources_in_try = Integer.parseInt((String) alignmentForResourcesInTry);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_resources_in_try = Alignment.M_NEXT_PER_LINE_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_resources_in_try = Alignment.M_NEXT_PER_LINE_SPLIT;", "+\t\t\t}", "+\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object alignmentForUnionTypeInMulticatch = settings.get(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_UNION_TYPE_IN_MULTICATCH);", "+\t\tif (alignmentForUnionTypeInMulticatch != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_union_type_in_multicatch = Integer.parseInt((String) alignmentForUnionTypeInMulticatch);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_union_type_in_multicatch = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_union_type_in_multicatch = Alignment.M_COMPACT_SPLIT;", "+\t\tfinal Object insertSpaceAfterOpeningParenInTryOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TRY);", "+\t\tif (insertSpaceAfterOpeningParenInTryOption != null) {", "+\t\t\tthis.insert_space_after_opening_paren_in_try = JavaCore.INSERT.equals(insertSpaceAfterOpeningParenInTryOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceAfterSemicolonInTryOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_TRY_RESOURCES);", "+\t\tif (insertSpaceAfterSemicolonInTryOption != null) {", "+\t\t\tthis.insert_space_after_semicolon_in_try_resources = JavaCore.INSERT.equals(insertSpaceAfterSemicolonInTryOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeClosingParenInTryOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TRY);", "+\t\tif (insertSpaceBeforeClosingParenInTryOption != null) {", "+\t\t\tthis.insert_space_before_closing_paren_in_try = JavaCore.INSERT.equals(insertSpaceBeforeClosingParenInTryOption);", "+\t\tfinal Object insertSpaceBeforeOpeningParenInTryOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TRY);", "+\t\tif (insertSpaceBeforeOpeningParenInTryOption != null) {", "+\t\t\tthis.insert_space_before_opening_paren_in_try = JavaCore.INSERT.equals(insertSpaceBeforeOpeningParenInTryOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeSemicolonInTryOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_TRY_RESOURCES);", "+\t\tif (insertSpaceBeforeSemicolonInTryOption != null) {", "+\t\t\tthis.insert_space_before_semicolon_in_try_resources = JavaCore.INSERT.equals(insertSpaceBeforeSemicolonInTryOption);", "+\t\t}", "+\t\tfinal Object wrapBeforeOrOperatorMulticatchOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_WRAP_BEFORE_OR_OPERATOR_MULTICATCH);", "+\t\tif (wrapBeforeOrOperatorMulticatchOption != null) {", "+\t\t\tthis.wrap_before_or_operator_multicatch = DefaultCodeFormatterConstants.TRUE.equals(wrapBeforeOrOperatorMulticatchOption);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ad6a52cf7f57654b8e89e0e9b118d5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "24c681585ef2f4b155e3d0f5cb2c551e612e2484", "commitAfterChange": "1075c02575f13a345cda8e06bd18891df8b3e61e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void setDeprecatedOptions(Map settings)", "signatureAfterChange": " \tprivate void setDeprecatedOptions(Map settings)", "diff": ["-\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=122247", "+\t\t// New line after annotations", "-\t\tif (insertNewLineAfterAnnotationOption != null) { // check if deprecated option was used", "-\t\t\tthis.insert_new_line_after_annotation_on_member = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "-\t\t\tthis.insert_new_line_after_annotation_on_parameter = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "-\t\t\tthis.insert_new_line_after_annotation_on_local_variable = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "+\t\tif (insertNewLineAfterAnnotationOption != null) { // check if deprecated 3.1 option was used", "+\t\t\tboolean insert = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "+\t\t\tthis.insert_new_line_after_annotation_on_type = insert;", "+\t\t\tthis.insert_new_line_after_annotation_on_field = insert;", "+\t\t\tthis.insert_new_line_after_annotation_on_method = insert;", "+\t\t\tthis.insert_new_line_after_annotation_on_package = insert;", "+\t\t\tthis.insert_new_line_after_annotation_on_parameter = insert;", "+\t\t\tthis.insert_new_line_after_annotation_on_local_variable = insert;", "-\t\t\tif (insertNewLineAfterAnnotationOnMemberOption != null) { // otherwhise, use the new options", "-\t\t\t\tthis.insert_new_line_after_annotation_on_member = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMemberOption);", "+\t\t\tif (insertNewLineAfterAnnotationOnMemberOption != null) { // check if deprecated 3.4 option was used", "+\t\t\t\tboolean insert = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMemberOption);", "+\t\t\t\tthis.insert_new_line_after_annotation_on_type = insert;", "+\t\t\t\tthis.insert_new_line_after_annotation_on_field = insert;", "+\t\t\t\tthis.insert_new_line_after_annotation_on_method = insert;", "+\t\t\t\tthis.insert_new_line_after_annotation_on_package = insert;", "+\t\t\t} else { // otherwise use new options", "+\t\t\t\tfinal Object insertNewLineAfterAnnotationOnTypeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE);", "+\t\t\t\tif (insertNewLineAfterAnnotationOnTypeOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_type = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnTypeOption);", "+\t\t\t\t}", "+\t\t\t\tfinal Object insertNewLineAfterAnnotationOnFieldOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD);", "+\t\t\t\tif (insertNewLineAfterAnnotationOnFieldOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_field = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnFieldOption);", "+\t\t\t\t}", "+\t\t\t\tfinal Object insertNewLineAfterAnnotationOnMethodOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD);", "+\t\t\t\tif (insertNewLineAfterAnnotationOnMethodOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_method = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMethodOption);", "+\t\t\t\t}", "+\t\t\t\tfinal Object insertNewLineAfterAnnotationOnPackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE);", "+\t\t\t\tif (insertNewLineAfterAnnotationOnPackageOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_package = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnPackageOption);", "+\t\t\t\t}"]}], "num": 40366}
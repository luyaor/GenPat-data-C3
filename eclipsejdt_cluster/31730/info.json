{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "adb904800717e7da4ae265aacfd3fae7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25605b02c59235fe62b5b697d4870ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "7c3080ba45bd79ddd7d628abfc7780ee747e39e8", "commitAfterChange": "5658c822d90e268f3a7dca76bdc6b8fd41b3f9c3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder)", "signatureAfterChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder)", "diff": ["-\t\ttry {", "-\t\t\t/* ensure no concurrent write access to index */", "-\t\t\tIPath indexPath = javaProject.getPath();", "-\t\t\tIIndex index = this.getIndex(indexPath, true, /*reuse index file*/ false /*create if none*/);", "-\t\t\tif (index == null) return;", "-\t\t\tReadWriteMonitor monitor = this.getMonitorFor(index);", "-\t\t\tif (monitor == null) return; // index got deleted since acquired", "+\tIProject project = javaProject.getProject();", "+\tif (this.jobEnd >= this.jobStart) {", "+\t\t// check if a job to index the project is not already in the queue", "+\t\tIndexRequest request = new IndexAllProject(project, this);", "+\t\tfor (int i = this.jobEnd; i >= this.jobStart; i--)", "+\t\t\tif (request.equals(this.awaitingJobs[i])) return;", "+\t}", "-\t\t\ttry {", "-\t\t\t\tmonitor.enterRead(); // ask permission to read", "-\t\t\t\tIQueryResult[] results = index.queryInDocumentNames(sourceFolder.toString());", "-\t\t\t\t// all file names belonging to the folder or its subfolders", "-\t\t\t\tfor (int i = 0, max = results == null ? 0 : results.length; i < max; i++)", "-\t\t\t\t\t// TODO: Should not remove excluded resources", "-\t\t\t\t\tthis.remove(results[i].getPath(), indexPath); // write lock will be acquired by the remove operation", "-\t\t\t} finally {", "-\t\t\t\tmonitor.exitRead(); // free read lock", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t\tif (JobManager.VERBOSE) {", "-\t\t\t\tJobManager.verbose(\"-> failed to remove \" + sourceFolder.toString() + \" from index because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\t}", "+\tthis.request(new RemoveFolderFromIndex(sourceFolder, project, this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87644cb1be636a56bcd3ba512ebb0ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "ce9d82264275b3c4ad926312ca4ca735e225fab4", "commitAfterChange": "3f70f3f99df21def4574d8396aee2d34db8ebf8e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \r public void shutdown()", "signatureAfterChange": "\r \r public void shutdown()", "diff": ["-\ttry {\r", "-\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();\r", "-\t\tHashMap keepingIndexesPaths = new HashMap();\r", "-\t\tif (model != null) {\r", "-\t\t\t// remove unused indexes\r", "-\t\t\tIJavaProject[] projects = model.getJavaProjects();\r", "-\t\t\tfor (int i = 0, max = projects.length; i < max; i++) {\r", "-\t\t\t\tif (projects[i].exists()) {\r", "-\t\t\t\t\tString path = this.getIndex(projects[i].getProject().getFullPath()).getIndexFile().getPath();\r", "-\t\t\t\t\tkeepingIndexesPaths.put(path,path);\r", "-\t\t\t\t\tIClasspathEntry[] entries = projects[i].getResolvedClasspath(true);\r", "-\t\t\t\t\tfor (int j = 0, max2 = entries.length; j < max2; j++) {\r", "-\t\t\t\t\t\tif (entries[j].getEntryKind() == ClasspathEntry.CPE_LIBRARY) {\r", "-\t\t\t\t\t\t\tpath = this.getIndex(entries[j].getPath()).getIndexFile().getPath();\r", "-\t\t\t\t\t\t\tkeepingIndexesPaths.put(path,path);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tFile indexesDirectory = new File(this.getJavaPluginWorkingLocation().toOSString());\r", "-\t\t\tif (indexesDirectory.isDirectory()) {\r", "-\t\t\t\tFile[] indexesFiles = indexesDirectory.listFiles();\r", "-\t\t\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {\r", "-\t\t\t\t\tif (keepingIndexesPaths.get(indexesFiles[i].getAbsolutePath()) == null) {\r", "-\t\t\t\t\t\tindexesFiles[i].delete();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\t\r", "+\tHashMap keepingIndexesPaths = new HashMap();\r", "+\tIndexSelector indexSelector = new IndexSelector(new JavaWorkspaceScope(), null, this);\r", "+\tIIndex[] selectedIndexes = indexSelector.getIndexes();\r", "+\tfor (int i = 0, max = selectedIndexes.length; i < max; i++) {\r", "+\t\tString path = selectedIndexes[i].getIndexFile().getAbsolutePath();\r", "+\t\tkeepingIndexesPaths.put(path, path);\r", "+\t}\r", "+\tFile indexesDirectory = new File(this.getJavaPluginWorkingLocation().toOSString());\r", "+\tif (indexesDirectory.isDirectory()) {\r", "+\t\tFile[] indexesFiles = indexesDirectory.listFiles();\r", "+\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {\r", "+\t\t\tif (keepingIndexesPaths.get(indexesFiles[i].getAbsolutePath()) == null) {\r", "+\t\t\t\tindexesFiles[i].delete();\r", "-\t} catch(JavaModelException e) {\r", "+\t\t\r"]}], "num": 31730}
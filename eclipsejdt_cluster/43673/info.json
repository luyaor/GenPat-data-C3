{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "709ea196679be432e72153c3be02bcc0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40550ea0caaa9ef717e9966361246a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 36, "signatureBeforeChange": " public SyntheticAccessMethodBinding[] syntheticAccessMethods()", "signatureAfterChange": " public SyntheticMethodBinding[] syntheticMethods()", "diff": ["-public SyntheticAccessMethodBinding[] syntheticAccessMethods() {", "+public SyntheticMethodBinding[] syntheticMethods() {", "-\tSyntheticAccessMethodBinding[] bindings = new SyntheticAccessMethodBinding[1];", "+\tSyntheticMethodBinding[] bindings = new SyntheticMethodBinding[1];", "-\t\t\tSyntheticAccessMethodBinding[] methodAccessors = (SyntheticAccessMethodBinding[]) synthetics[METHOD_EMUL].get(fieldOrMethod);", "+\t\t\tSyntheticMethodBinding[] methodAccessors = (SyntheticMethodBinding[]) synthetics[METHOD_EMUL].get(fieldOrMethod);", "-\t\t\t\tSystem.arraycopy(bindings, 0, (bindings = new SyntheticAccessMethodBinding[index + numberOfAccessors]), 0, index);", "+\t\t\t\tSystem.arraycopy(bindings, 0, (bindings = new SyntheticMethodBinding[index + numberOfAccessors]), 0, index);", "-\t\t\tSyntheticAccessMethodBinding[] fieldAccessors = (SyntheticAccessMethodBinding[]) synthetics[METHOD_EMUL].get(fieldOrMethod);", "+\t\t\tSyntheticMethodBinding[] fieldAccessors = (SyntheticMethodBinding[]) synthetics[METHOD_EMUL].get(fieldOrMethod);", "-\t\t\t\tSystem.arraycopy(bindings, 0, (bindings = new SyntheticAccessMethodBinding[index + numberOfAccessors]), 0, index);", "+\t\t\t\tSystem.arraycopy(bindings, 0, (bindings = new SyntheticMethodBinding[index + numberOfAccessors]), 0, index);", "-\tSyntheticAccessMethodBinding[] sortedBindings = new SyntheticAccessMethodBinding[length = bindings.length];", "+\tSyntheticMethodBinding[] sortedBindings = new SyntheticMethodBinding[length = bindings.length];", "-\t\tSyntheticAccessMethodBinding binding = bindings[i];", "+\t\tSyntheticMethodBinding binding = bindings[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16e40f4fee8851ff6d7b2a435892598", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e3d53567a2da30642563e64ed917c4bae8913786", "commitAfterChange": "ccf24ba3615c241f4b234ee572c67902c4cad252", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public SyntheticMethodBinding addSyntheticArrayConstructor(ArrayBinding arrayType)", "signatureAfterChange": " public SyntheticMethodBinding addSyntheticArrayMethod(ArrayBinding arrayType, int purpose)", "diff": ["-/* Add a new synthetic method for array constructor reference expressions of the form X[]::new */", "-public SyntheticMethodBinding addSyntheticArrayConstructor(ArrayBinding arrayType) {", "+public SyntheticMethodBinding addSyntheticArrayMethod(ArrayBinding arrayType, int purpose) {", "-\tSyntheticMethodBinding constructor = null;", "-\tSyntheticMethodBinding[] constructors = (SyntheticMethodBinding[]) this.synthetics[SourceTypeBinding.METHOD_EMUL].get(arrayType);", "-\t", "-\tif (constructors == null) {", "-\t\tconstructor = new SyntheticMethodBinding(arrayType, CharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.lambdaOrdinal++).toCharArray()), this);", "-\t\tthis.synthetics[SourceTypeBinding.METHOD_EMUL].put(arrayType, constructors = new SyntheticMethodBinding[1]);", "-\t\tconstructors[0] = constructor;", "+\tSyntheticMethodBinding arrayMethod = null;", "+\tSyntheticMethodBinding[] arrayMethods = (SyntheticMethodBinding[]) this.synthetics[SourceTypeBinding.METHOD_EMUL].get(arrayType);", "+\tif (arrayMethods == null) {", "+\t\tchar [] selector = CharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.lambdaOrdinal++).toCharArray());", "+\t\tarrayMethod = new SyntheticMethodBinding(purpose, arrayType, selector, this);", "+\t\tthis.synthetics[SourceTypeBinding.METHOD_EMUL].put(arrayType, arrayMethods = new SyntheticMethodBinding[2]);", "+\t\tarrayMethods[purpose == SyntheticMethodBinding.ArrayConstructor ? 0 : 1] = arrayMethod;", "-\t\tconstructor = constructors[0];", "+\t\tif ((arrayMethod = arrayMethods[purpose == SyntheticMethodBinding.ArrayConstructor ? 0 : 1]) == null) {", "+\t\t\tchar [] selector = CharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.lambdaOrdinal++).toCharArray());", "+\t\t\tarrayMethod = new SyntheticMethodBinding(purpose, arrayType, selector, this);", "+\t\t\tarrayMethods[purpose == SyntheticMethodBinding.ArrayConstructor ? 0 : 1] = arrayMethod;", "+\t\t}", "-\treturn constructor;", "+\treturn arrayMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2fa389b9c5c51b816d9050dcdc4b457", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "dd591858ac48139d4dd1afe12bb6509dd5a3fa14", "commitAfterChange": "248956ddd382f7e1eeaf69c3ef6c5416a402e296", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public SyntheticMethodBinding[] syntheticMethods()", "signatureAfterChange": " public SyntheticMethodBinding[] syntheticMethods()", "diff": ["-", "-\tif (this.synthetics == null || this.synthetics[SourceTypeBinding.METHOD_EMUL] == null || this.synthetics[SourceTypeBinding.METHOD_EMUL].size() == 0) return null;", "-", "+\tif (this.synthetics == null ", "+\t\t\t|| this.synthetics[SourceTypeBinding.METHOD_EMUL] == null ", "+\t\t\t|| this.synthetics[SourceTypeBinding.METHOD_EMUL].size() == 0) {", "+\t\treturn null;", "+\t}", "-\tIterator fieldsOrMethods = this.synthetics[SourceTypeBinding.METHOD_EMUL].keySet().iterator();", "-\twhile (fieldsOrMethods.hasNext()) {", "-", "-\t\tObject fieldOrMethod = fieldsOrMethods.next();", "-", "-\t\tif (fieldOrMethod instanceof MethodBinding) {", "-", "-\t\t\tSyntheticMethodBinding[] methodAccessors = (SyntheticMethodBinding[]) this.synthetics[SourceTypeBinding.METHOD_EMUL].get(fieldOrMethod);", "-\t\t\tint numberOfAccessors = 0;", "-\t\t\tif (methodAccessors[0] != null) numberOfAccessors++;", "-\t\t\tif (methodAccessors[1] != null) numberOfAccessors++;", "-\t\t\tif (index + numberOfAccessors > bindings.length)", "-\t\t\t\tSystem.arraycopy(bindings, 0, (bindings = new SyntheticMethodBinding[index + numberOfAccessors]), 0, index);", "-\t\t\tif (methodAccessors[0] != null)", "-\t\t\t\tbindings[index++] = methodAccessors[0]; // super access", "-\t\t\tif (methodAccessors[1] != null)", "-\t\t\t\tbindings[index++] = methodAccessors[1]; // normal access or bridge", "-", "-\t\t} else {", "-", "-\t\t\tSyntheticMethodBinding[] fieldAccessors = (SyntheticMethodBinding[]) this.synthetics[SourceTypeBinding.METHOD_EMUL].get(fieldOrMethod);", "-\t\t\tint numberOfAccessors = 0;", "-\t\t\tif (fieldAccessors[0] != null) numberOfAccessors++;", "-\t\t\tif (fieldAccessors[1] != null) numberOfAccessors++;", "-\t\t\tif (index + numberOfAccessors > bindings.length)", "-\t\t\t\tSystem.arraycopy(bindings, 0, (bindings = new SyntheticMethodBinding[index + numberOfAccessors]), 0, index);", "-\t\t\tif (fieldAccessors[0] != null)", "-\t\t\t\tbindings[index++] = fieldAccessors[0]; // read access", "-\t\t\tif (fieldAccessors[1] != null)", "-\t\t\t\tbindings[index++] = fieldAccessors[1]; // write access", "+\tIterator methodArrayIterator = this.synthetics[SourceTypeBinding.METHOD_EMUL].values().iterator();", "+\twhile (methodArrayIterator.hasNext()) {", "+\t\tSyntheticMethodBinding[] methodAccessors = (SyntheticMethodBinding[]) methodArrayIterator.next();", "+\t\tfor (int i = 0, max = methodAccessors.length; i < max; i++) {", "+\t\t\tif (methodAccessors[i] != null) {", "+\t\t\t\tif (index+1 > bindings.length) {", "+\t\t\t\t\tSystem.arraycopy(bindings, 0, (bindings = new SyntheticMethodBinding[index + 1]), 0, index);", "+\t\t\t\t}", "+\t\t\t\tbindings[index++] = methodAccessors[i]; ", "+\t\t\t}", "-"]}], "num": 43673}
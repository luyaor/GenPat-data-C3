{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59ba138d1e806b44082392b4e476d475", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76108c2ac90ba5444c585040f1196a7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate TypeDeclaration convert(SourceType typeHandle, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate TypeDeclaration convert(SourceType typeHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t// Digest type parameters if compliance level of current project or its prerequisite is >= 1.5", "-\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=323633 && https://bugs.eclipse.org/bugs/show_bug.cgi?id=305259", "-\t\tif (this.has1_5Compliance || this.problemReporter.options.complianceLevel >= ClassFileConstants.JDK1_5) {", "-\t\t\t/* convert type parameters */", "-\t\t\tchar[][] typeParameterNames = typeInfo.getTypeParameterNames();", "-\t\t\tif (typeParameterNames.length > 0) {", "-\t\t\t\tint parameterCount = typeParameterNames.length;", "-\t\t\t\tchar[][][] typeParameterBounds = typeInfo.getTypeParameterBounds();", "-\t\t\t\ttype.typeParameters = new TypeParameter[parameterCount];", "-\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\t\t\ttype.typeParameters[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "-\t\t\t\t}", "+\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, even in a 1.4 project, we", "+\t\t   must internalize type variables and observe any parameterization of super class", "+\t\t   and/or super interfaces in order to be able to detect overriding in the presence", "+\t\t   of generics.", "+\t\t */", "+\t\tchar[][] typeParameterNames = typeInfo.getTypeParameterNames();", "+\t\tif (typeParameterNames.length > 0) {", "+\t\t\tint parameterCount = typeParameterNames.length;", "+\t\t\tchar[][][] typeParameterBounds = typeInfo.getTypeParameterBounds();", "+\t\t\ttype.typeParameters = new TypeParameter[parameterCount];", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\ttype.typeParameters[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "-\t\t\ttype.superclass = createTypeReference(typeInfo.getSuperclassName(), start, end);", "+\t\t\ttype.superclass = createTypeReference(typeInfo.getSuperclassName(), start, end, true /* include generics */);", "-\t\t\t\ttype.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end);", "+\t\t\t\ttype.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end, true /* include generics */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7f453062ad381e1e729b9230e212fb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate TypeDeclaration convert(SourceType typeHandle, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate TypeDeclaration convert(SourceType typeHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t// Digest type parameters if compliance level of current project or its prerequisite is >= 1.5", "-\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=323633 && https://bugs.eclipse.org/bugs/show_bug.cgi?id=305259", "-\t\tif (this.has1_5Compliance || this.problemReporter.options.complianceLevel >= ClassFileConstants.JDK1_5) {", "-\t\t\t/* convert type parameters */", "-\t\t\tchar[][] typeParameterNames = typeInfo.getTypeParameterNames();", "-\t\t\tif (typeParameterNames.length > 0) {", "-\t\t\t\tint parameterCount = typeParameterNames.length;", "-\t\t\t\tchar[][][] typeParameterBounds = typeInfo.getTypeParameterBounds();", "-\t\t\t\ttype.typeParameters = new TypeParameter[parameterCount];", "-\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\t\t\ttype.typeParameters[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "-\t\t\t\t}", "+\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, even in a 1.4 project, we", "+\t\t   must internalize type variables and observe any parameterization of super class", "+\t\t   and/or super interfaces in order to be able to detect overriding in the presence", "+\t\t   of generics.", "+\t\t */", "+\t\tchar[][] typeParameterNames = typeInfo.getTypeParameterNames();", "+\t\tif (typeParameterNames.length > 0) {", "+\t\t\tint parameterCount = typeParameterNames.length;", "+\t\t\tchar[][][] typeParameterBounds = typeInfo.getTypeParameterBounds();", "+\t\t\ttype.typeParameters = new TypeParameter[parameterCount];", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\ttype.typeParameters[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "-\t\t\ttype.superclass = createTypeReference(typeInfo.getSuperclassName(), start, end);", "+\t\t\ttype.superclass = createTypeReference(typeInfo.getSuperclassName(), start, end, true /* include generics */);", "-\t\t\t\ttype.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end);", "+\t\t\t\ttype.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end, true /* include generics */);"]}], "num": 23613}
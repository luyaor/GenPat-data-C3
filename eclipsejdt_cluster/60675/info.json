{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2233c5414abd8f029949484a77042cb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0522c6e8e605f2ba06f540b276d6419a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "03525d5333122348a198e2e98f2ec5602bfa2061", "commitAfterChange": "9ca09d5ed1be915e478e63cfb298cfaff9af7f75", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  protected static Test suite(File inputDir, String profile, Map directories)", "signatureAfterChange": "  protected static Test suite(File inputDir, String profile, Map directories)", "diff": ["+\t\tFile listFile = new File(inputDir.getParentFile(), inputDir.getName()+\".lst\");", "+\t\tBufferedWriter listFileWriter = null;", "-\t\t\tSystem.out.print(\"Get all files from \"+inputDir+\"...\");", "-\t\t\tallFiles = ModelTestsUtil.getAllFiles(inputDir, filter);", "-\t\t\tdirectories.put(inputDir, allFiles);", "-\t\t\tSystem.out.println(\"done\");", "+\t\t\tif (CLEAN || !listFile.exists()) {", "+\t\t\t\t// Get the files list", "+\t\t\t\tSystem.out.print(\"Get all files from \"+inputDir+\"...\");", "+\t\t\t\tallFiles = ModelTestsUtil.getAllFiles(inputDir, filter);", "+\t\t\t\tdirectories.put(inputDir, allFiles);", "+\t\t\t\tSystem.out.println(\"done\");", "+\t\t\t\t// Delete the files list", "+\t\t\t\tif (listFile.exists()) {", "+\t\t\t\t\tlistFile.delete();", "+\t\t\t\t}", "+\t\t\t\t// Initialize the files list writer", "+\t\t\t\tlistFileWriter = new BufferedWriter(new FileWriter(listFile));", "+\t\t\t\tlistFileWriter.write(Integer.toString(allFiles.length));", "+\t\t\t\tlistFileWriter.newLine();", "+\t\t\t} else {", "+\t\t\t\tSystem.out.print(\"Get all files from stored list in \"+listFile.getPath()+\"...\");", "+\t\t\t\tBufferedReader listFileReader = new BufferedReader(new InputStreamReader(new FileInputStream(listFile.getAbsolutePath())));", "+\t\t\t\ttry {", "+\t\t\t\t\t// First line is the number of files", "+\t\t\t\t\tString line = listFileReader.readLine();", "+\t\t\t\t\tint maxFiles = Integer.parseInt(line);", "+\t\t\t\t\t// Following lines are the files path", "+\t\t\t\t\tallFiles = new File[maxFiles];", "+\t\t\t\t\tfor (int i=0; i<maxFiles; i++) {", "+\t\t\t\t\t\tallFiles[i] = new File(inputDir, listFileReader.readLine());", "+\t\t\t\t\t\tif (!allFiles[i].exists()) {", "+\t\t\t\t\t\t\tthrow new IOException(\"Cannot find file \"+allFiles[i]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tcatch (NumberFormatException nfe) {", "+\t\t\t\t\tnfe.printStackTrace();", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException ioe) {", "+\t\t\t\t\tioe.printStackTrace();", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tfinally {", "+\t\t\t\t\tlistFileReader.close();", "+\t\t\t\t}", "+\t\t\t}", "-\t\tfor (int i=0; i<maxFiles[0]; i++) {", "-\t\t\tif (CLEAN) {", "-\t\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(inputDir, allFiles[i], i, profiles, false/*do not compare while cleaning*/));", "-\t\t\t} else {", "-\t\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(inputDir, allFiles[i], i, profiles, CAN_COMPARE));", "+\t\ttry {", "+\t\t\tfinal int inputDirPathLength = inputDir.getPath().length()+1;", "+\t\t\tfor (int i=0; i<maxFiles[0]; i++) {", "+\t\t\t\tif (CLEAN) {", "+\t\t\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(inputDir, allFiles[i], i, profiles, false/*do not compare while cleaning*/));", "+\t\t\t\t} else {", "+\t\t\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(inputDir, allFiles[i], i, profiles, CAN_COMPARE));", "+\t\t\t\t}", "+\t\t\t\tif (listFileWriter != null) {", "+\t\t\t\t\tlistFileWriter.write(allFiles[i].getPath().substring(inputDirPathLength));", "+\t\t\t\t\tlistFileWriter.newLine();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (listFileWriter != null) {", "+\t\t\t\tlistFileWriter.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "778e6556512a32e342a1d2bf1e85900d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "64adb94de0734c7d5adfd2cb11839ed3d3641dfc", "commitAfterChange": "a12b1847e48d96ac5e805a907f4cf72bcc8b1f19", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 83, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-", "-\t\t\t", "-\t\t", "-\t\t// load variables and containers from preferences into cache", "-\t\tIEclipsePreferences preferences = getInstancePreferences();", "-\t\t// only get variable from preferences not set to their default", "+\t\t// backward compatibility, load variables and containers from preferences into cache", "+\t\tIEclipsePreferences preferences = getInstancePreferences();", "+\t\t\t// only get variable from preferences not set to their default", "+\t\t\t\t\t\tpreferences.remove(propertyName); // cleanup old preferences", "-\t\t\t\t}", "-\t\t\t\tif (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)){", "+\t\t\t\t} else if (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)){", "-\t\t\t\t\tif (propertyValue != null)", "+\t\t\t\t\tif (propertyValue != null) {", "+\t\t\t\t\t\tpreferences.remove(propertyName); // cleanup old preferences", "+\t\t\t\t\t}", "+", "+\t\t// load variables and containers from saved file into cache", "+\t\tFile file = getVariableAndContainersFile();", "+\t\tDataInputStream in = null;", "+\t\ttry {", "+\t\t\tin = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));", "+\t\t\tif (VARIABLES_AND_CONTAINERS_FILE_VERSION == in.readInt()) {", "+\t\t\t\t", "+\t\t\t\t// variables", "+\t\t\t\tint size = in.readInt();", "+\t\t\t\twhile (size-- > 0) {", "+\t\t\t\t\tString varName = in.readUTF();", "+\t\t\t\t\tString pathString = in.readUTF();", "+\t\t\t\t\tif (CP_ENTRY_IGNORE.equals(pathString))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tIPath varPath = Path.fromPortableString(pathString);", "+\t\t\t\t\tthis.variables.put(varName, varPath);", "+\t\t\t\t\tthis.previousSessionVariables.put(varName, varPath);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// containers", "+\t\t\t\tIJavaModel model = getJavaModel();", "+\t\t\t\tint projectSize = in.readInt();", "+\t\t\t\twhile (projectSize-- > 0) {", "+\t\t\t\t\tString projectName = in.readUTF();", "+\t\t\t\t\tIJavaProject project = model.getJavaProject(projectName);", "+\t\t\t\t\tint containerSize = in.readInt();", "+\t\t\t\t\twhile (containerSize-- > 0) {", "+\t\t\t\t\t\tIPath containerPath = Path.fromPortableString(in.readUTF());", "+\t\t\t\t\t\tint length = in.readInt();", "+\t\t\t\t\t\tbyte[] containerString = new byte[length];", "+\t\t\t\t\t\tin.readFully(containerString);", "+\t\t\t\t\t\trecreatePersistedContainer(project, containerPath, new String(containerString), true/*add to container values*/);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (IOException e) {", "+\t\t\tif (file.exists())", "+\t\t\t\tUtil.log(e, \"Unable to read variable and containers file\"); //$NON-NLS-1$", "+\t\t} finally {", "+\t\t\tif (in != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tin.close();", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t// nothing we can do: ignore", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+"]}], "num": 60675}
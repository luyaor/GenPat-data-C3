{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2227408fe750ee5d65aa287a5651a20", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21fce7d5b1d3b5d6e71c476b297038a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "commitAfterChange": "14bf482e9ce4e28aba53c29fe3155a9c59b88f63", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedTb)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedType)", "diff": ["-\t\tTypeBinding expectedTb) {", "+\t\tTypeBinding expectedType) {", "-\t\tTypeBinding thisTb = this.resolveType(scope);", "-\t\tif (thisTb == null)", "-\t\t\treturn null;", "-\t\tif (!Scope.areTypesCompatible(thisTb, expectedTb)) {", "-\t\t\tscope.problemReporter().typeMismatchError(thisTb, expectedTb, this);", "+\t\tTypeBinding expressionType = this.resolveType(scope);", "+\t\tif (expressionType == null) return null;", "+\t\tif (expressionType == expectedType) return expressionType;", "+\t\t", "+\t\tif (!expressionType.isCompatibleWith(expectedType)) {", "+\t\t\tscope.problemReporter().typeMismatchError(expressionType, expectedType, this);", "-\t\treturn thisTb;", "+\t\treturn expressionType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f86eab3ee139916b139a56c2046e151", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "dff921f9753af71f3b0ef787d0390dd7cd591b56", "commitAfterChange": "a899cd29a75883646450816539797817299ec777", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (enclosingInstanceType.isCompatibleWith(expectedType)) {", "-\t\t\t\tenclosingInstance.computeConversion(scope, expectedType, enclosingInstanceType);", "-\t\t\t\treturn receiverType;", "-\t\t\t} else if (scope.isBoxingCompatibleWith(enclosingInstanceType, expectedType)) {", "+\t\t\tif (enclosingInstanceType.isCompatibleWith(expectedType) || scope.isBoxingCompatibleWith(enclosingInstanceType, expectedType)) {", "-\t\t\t} else \tif (!enclosingInstanceType.isCompatibleWith(targetEnclosing)) {", "+\t\t\t} else if (!enclosingInstanceType.isCompatibleWith(targetEnclosing) && !scope.isBoxingCompatibleWith(enclosingInstanceType, targetEnclosing)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd81997c1ea2677e97ed772c114eb45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "commitAfterChange": "14bf482e9ce4e28aba53c29fe3155a9c59b88f63", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\tTypeBinding checkTb = type.resolveType(scope);", "-\t\tif (expressionTb == null || checkTb == null)", "+\t\tTypeBinding expressionType = expression.resolveType(scope);", "+\t\tTypeBinding checkType = type.resolveType(scope);", "+\t\tif (expressionType == null || checkType == null)", "-\t\tif (!areTypesCastCompatible(scope, checkTb, expressionTb)) {", "-\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionTb, checkTb);", "+\t\tif (!areTypesCastCompatible(scope, checkType, expressionType)) {", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c78a8bb0544054f16e68e508f5acb79d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding checkType = type.resolveType(scope);", "-\t\tif (expressionType == null || checkType == null)", "+\t\tTypeBinding checkedType = type.resolveType(scope);", "+\t\tif (expressionType == null || checkedType == null)", "-\t\tboolean necessary = checkCastTypesCompatibility(scope, checkType, expressionType);", "-\t\tif (!necessary) {", "-\t\t\tscope.problemReporter().unnecessaryInstanceof(this, checkType);", "+\t\tif (checkedType.isTypeVariable() || checkedType.isParameterizedType() || checkedType.isGenericType()) {", "+\t\t\tscope.problemReporter().illegalInstanceOfGenericType(checkedType, this);", "+\t\t} else {", "+\t\t\tboolean necessary = checkCastTypesCompatibility(scope, checkedType, expressionType);", "+\t\t\tif (!necessary) {", "+\t\t\t\tscope.problemReporter().unnecessaryInstanceof(this, checkedType);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f52861d27e65873a16f466db01fd67c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "a899cd29a75883646450816539797817299ec777", "commitAfterChange": "bdf79fcc26d1f82ae3c59775bd7a3df51c38f892", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedType)", "diff": ["-\t\tif (scope.isBoxingCompatibleWith(expressionType, expectedType)) {", "-\t\t\tthis.computeConversion(scope, expectedType, expressionType);", "-\t\t} else if (!expressionType.isCompatibleWith(expectedType)) {", "-\t\t\tscope.problemReporter().typeMismatchError(expressionType, expectedType, this);", "-\t\t\treturn null;", "+\t\tif (!expressionType.isCompatibleWith(expectedType)) {", "+\t\t\tif (scope.isBoxingCompatibleWith(expressionType, expectedType)) {", "+\t\t\t\tthis.computeConversion(scope, expectedType, expressionType);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().typeMismatchError(expressionType, expectedType, this);", "+\t\t\t\treturn null;", "+\t\t\t}"]}], "num": 41267}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbc42b89151a2b6c9a4c4c4ec4f00b86", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32efcca66bc151ce6405be8ecd3279e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tITypeBinding resolveExpressionType(Expression expression)", "diff": ["-\t\t\treturn this.getTypeBinding(operatorExpression.typeBinding);", "+\t\t\treturn this.getTypeBinding(operatorExpression.expressionType);", "-\t\t\treturn this.getTypeBinding(instanceOfExpression.typeBinding);", "+\t\t\treturn this.getTypeBinding(instanceOfExpression.expressionType);", "-\t\t\treturn this.getTypeBinding(conditionalExpression.typeBinding);", "+\t\t\treturn this.getTypeBinding(conditionalExpression.expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ef061c3168d8b4c003b40a05f4c677", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tBinding getDirectBinding(Expression someExpression)", "signatureAfterChange": "  \tBinding getDirectBinding(Expression someExpression)", "diff": ["-\t\t} else if (someExpression instanceof PostfixExpression) { // recurse for postfix: i++ --> i", "-\t\t\treturn getDirectBinding(((PostfixExpression) someExpression).lhs);", "+//\t\t} else if (someExpression instanceof PostfixExpression) { // recurse for postfix: i++ --> i", "+//\t\t\t// note: \"b = b++\" is equivalent to doing nothing, not to \"b++\"", "+//\t\t\treturn getDirectBinding(((PostfixExpression) someExpression).lhs);"]}], "num": 21387}
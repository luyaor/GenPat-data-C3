{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3d614e0ffe6195a7f72f2c95d542ebd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79dc863f3998a1e834e81db06e1d0b80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "e5afcb0ec821099a058acc796f2348c4c58a2e3e", "commitAfterChange": "1a36ae2092977e6a13134bbe916d1e02aefe6f2e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic boolean checkNegative4()", "signatureAfterChange": " \tpublic boolean checkNegative4() throws Exception", "diff": ["-\tpublic boolean checkNegative4() {", "+\tpublic boolean checkNegative4() throws Exception {", "-\t\tboolean foundZorkRaw = false;", "-\t\tboolean foundZorkOfString = false;", "-\t\tboolean foundIFooOfString = false;", "-\t\tboolean foundIBarRaw = false;", "-\t\tboolean foundIBarOfT1T2 = false;", "-\t\tList<? extends Element> enclosedElements = elementN4.getEnclosedElements();", "-\t\tfor (Element element : enclosedElements) {", "-\t\t\tElementKind kind = element.getKind();", "-\t\t\tif (kind != ElementKind.METHOD)", "-\t\t\t\tcontinue;", "-\t\t\tString name = element.getSimpleName().toString();", "-\t\t\tif (\"zorkRaw\".equals(name)) {", "-\t\t\t\tfoundZorkRaw = true;", "-\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "-\t\t\t\tTypeKind retKind = retType.getKind();", "-\t\t\t\t// javac returns ERROR type", "-\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "-\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"zorkOfString\".equals(name)) {", "-\t\t\t\tfoundZorkOfString = true;", "-\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "-\t\t\t\tTypeKind retKind = retType.getKind();", "-\t\t\t\t// javac returns ERROR type", "-\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "-\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"ifooOfString\".equals(name)) {", "-\t\t\t\tfoundIFooOfString = true;", "-\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "-\t\t\t\tTypeKind retKind = retType.getKind();", "-\t\t\t\t// javac returns ERROR type", "-\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "-\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"ibarRaw\".equals(name)) {", "-\t\t\t\tfoundIBarRaw = true;", "-\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "-\t\t\t\tTypeKind retKind = retType.getKind();", "-\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "-\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"ibarOfT1T2\".equals(name)) {", "-\t\t\t\tfoundIBarOfT1T2 = true;", "-\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "-\t\t\t\tTypeKind retKind = retType.getKind();", "-\t\t\t\t// javac returns ERROR type", "-\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "-\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (!foundZorkRaw) {", "-\t\t\treportError(\"Didn't find element Negative4.zorkRaw\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (!foundZorkOfString) {", "-\t\t\treportError(\"Didn't find element Negative4.zorkOfString\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (!foundIFooOfString) {", "-\t\t\treportError(\"Didn't find element Negative4.ifooOfString\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (!foundIBarRaw) {", "-\t\t\treportError(\"Didn't find element Negative4.ibarRaw\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (!foundIBarOfT1T2) {", "-\t\t\treportError(\"Didn't find element Negative4.ibarOfT1T2\");", "-\t\t\treturn false;", "-\t\t}", "-\t\treturn true;", "+\t\t", "+\t\treturn checkModel(Collections.singletonList(elementN4), NEGATIVE_4_MODEL, \"Negative4\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f13d1451d932232ee14fa117686b0151", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "2b8cdf5b25e07227dc18107b83f738581752bc80", "commitAfterChange": "c97d2bafa36295328a1a888b1de6ae8961b94266", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean checkNegative1()", "signatureAfterChange": " \tpublic boolean checkNegative1() throws Exception", "diff": ["-\tpublic boolean checkNegative1() {", "-\t\tTypeElement elementN1 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative1\");", "-\t\tif (null == elementN1 || elementN1.getKind() != ElementKind.CLASS) {", "+\tpublic boolean checkNegative1() throws Exception {", "+\t\t", "+\t\t// Get the root of the Negative1 model", "+\t\tTypeElement element = _elementUtils.getTypeElement(\"targets.negative.pa.Negative1\");", "+\t\tif (null == element || element.getKind() != ElementKind.CLASS) {", "-\t\tAnnotationMirror am3 = findAnnotation(elementN1, \"A3\");", "-\t\tif (_reportFailingCases && null == am3) {", "-\t\t\treportError(\"Couldn't find annotation A3 on class Negative1\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tList<? extends Element> enclosedElements = elementN1.getEnclosedElements();", "-\t\tboolean foundM1 = false; // do we find an element of unresolved type?", "-\t\tfor (Element element : enclosedElements) {", "-\t\t\tString name = element.getSimpleName().toString();", "-\t\t\tif (\"m1\".equals(name)) {", "-\t\t\t\tfoundM1 = true;", "-\t\t\t\tTypeKind tk = element.asType().getKind();", "-\t\t\t\tif (tk != TypeKind.ERROR && tk != TypeKind.DECLARED) {", "-\t\t\t\t\treportError(\"Field Negative1.m1 has a type of unexpected kind \" + tk);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tAnnotationMirror am4 = findAnnotation(element, \"A4\");", "-\t\t\t\tif (_reportFailingCases && null == am4) {", "-\t\t\t\t\treportError(\"Couldn't find annotation A4 on field Negative1.m1\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"i1\".equals(name)) {", "-\t\t\t\tAnnotationMirror am5 = findAnnotation(element, \"A5\");", "-\t\t\t\tif (_reportFailingCases && null == am5) {", "-\t\t\t\t\treportError(\"Couldn't find annotation A5 on field Negative1.i1\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"m2\".equals(name)) {", "-\t\t\t\tAnnotationMirror am8 = findAnnotation(element, \"A8\");", "-\t\t\t\tif (_reportFailingCases && null == am8) {", "-\t\t\t\t\treportError(\"Couldn't find annotation A8 on field Negative1.m2\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"s1\".equals(name)) {", "-\t\t\t\tAnnotationMirror am = findAnnotation(element, \"Anno1\");", "-\t\t\t\tif (null == am) {", "-\t\t\t\t\treportError(\"Couldn't find annotation Anno on field Negative1.s1\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = am.getElementValues();", "-\t\t\t\tfor (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "-\t\t\t\t\tif (\"value\".equals(entry.getKey().getSimpleName().toString())) {", "-\t\t\t\t\t\tif (!\"spud\".equals(entry.getValue().getValue())) {", "-\t\t\t\t\t\t\treportError(\"Unexpected value for Anno1 on Negative1.s1: \" + entry.getValue().getValue());", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (_reportFailingCases && !foundM1) {", "-\t\t\treportError(\"Couldn't find field Negative1.m1, presumably because its type is missing\");", "-\t\t\treturn false;", "-\t\t}", "-\t\treturn true;", "+\t\t", "+\t\treturn checkModel(Collections.singletonList(element), NEGATIVE_1_MODEL, \"Negative1\");"]}], "num": 49129}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "494a99df9ad549d9a0186b939bb81d53", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03330f2337ae2c48fe48a90f26c51a4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "69c496e755cc6913b44756320f466e0fd51afc57", "commitAfterChange": "039347d7e4ee8e1deb95513f2bd485f15185146e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["-\t\t\t\t\t\t\tif (compatibleMethod.isDefaultMethod() && methodVerifier.isParameterSubsignature(concreteMatch, compatibleMethod))", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t\tMethodBinding concreteMethod = (MethodBinding) found.elementAt(j);", "-\t\t\t\t\t\t\t\tif (concreteMethod != null) {", "-\t\t\t\t\t\t\t\t\tif (methodVerifier.areMethodsCompatible(concreteMethod, compatibleMethod))", "-\t\t\t\t\t\t\t\t\t\tcontinue next; // can skip this method since concreteMethod overrides it", "-\t\t\t\t\t\t\t\t\tif (compatibleMethod.isDefaultMethod() && methodVerifier.isParameterSubsignature(concreteMethod, compatibleMethod))", "-\t\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tMethodBinding classMethod = (MethodBinding) found.elementAt(j);", "+\t\t\t\t\t\t\t\tif (classMethod != null && methodVerifier.areMethodsCompatible(classMethod, compatibleMethod))", "+\t\t\t\t\t\t\t\t\tcontinue next; // can skip this method since classMethod overrides it"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74b44ca49ff470b5a4e77eb7785368df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "cc95db68297f07027a83fc8b08b9b05722eceebc", "commitAfterChange": "58545256b19d6ccce458cb08a759eadafac6f6df", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["+\t\t\tfinal MethodVerifier methodVerifier = environment().methodVerifier();", "-\t\t\t\t\t\tif (concreteMatch != null && environment().methodVerifier().areMethodsCompatible(concreteMatch, compatibleMethod))", "-\t\t\t\t\t\t\tcontinue; // can skip this method since concreteMatch overrides it", "+\t\t\t\t\t\tif (concreteMatch != null) {", "+\t\t\t\t\t\t\tif (methodVerifier.areMethodsCompatible(concreteMatch, compatibleMethod))", "+\t\t\t\t\t\t\t\tcontinue; // can skip this method since concreteMatch overrides it", "+\t\t\t\t\t\t\tif (compatibleMethod.isDefaultMethod() && methodVerifier.isParameterSubsignature(concreteMatch, compatibleMethod))", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (concreteMethod != null && environment().methodVerifier().areMethodsCompatible(concreteMethod, compatibleMethod))", "-\t\t\t\t\t\t\t\t\tcontinue next; // can skip this method since concreteMethod overrides it", "+\t\t\t\t\t\t\t\tif (concreteMethod != null) {", "+\t\t\t\t\t\t\t\t\tif (methodVerifier.areMethodsCompatible(concreteMethod, compatibleMethod))", "+\t\t\t\t\t\t\t\t\t\tcontinue next; // can skip this method since concreteMethod overrides it", "+\t\t\t\t\t\t\t\t\tif (compatibleMethod.isDefaultMethod() && methodVerifier.isParameterSubsignature(concreteMethod, compatibleMethod))", "+\t\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}"]}], "num": 53967}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98cb606cf5b836bd0e1756c0ed9e3621", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f6ccb27d2f5a08399790cca0430ffe1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "6e3484e93dc48a09ac8c425df0144a313c14ab99", "commitAfterChange": "4258235f7bd226d0dfb8701ffe19643b12592deb", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "  \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope)", "signatureAfterChange": " \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope)", "diff": ["+\t}", "+\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\ttrue);", "+\t\t", "+\t\tImportBinding[] importBindings = scope.compilationUnitScope().imports;", "+\t\tfor (int i = 0; i < importBindings.length; i++) {", "+\t\t\tImportBinding importBinding = importBindings[i];", "+\t\t\tif(importBinding.isValidBinding() && importBinding.isStatic()) {", "+\t\t\t\tBinding binding = importBinding.resolvedImport;", "+\t\t\t\tif(binding != null && binding.isValidBinding()) {", "+\t\t\t\t\tif(importBinding.onDemand) {", "+\t\t\t\t\t\tif(binding.bindingType() == BindingIds.TYPE) {", "+\t\t\t\t\t\t\tfindFields(", "+\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t(ReferenceBinding)binding,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\t\t\tlocalsFound,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t(ReferenceBinding)binding,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (binding.bindingType() == BindingIds.FIELD) {", "+\t\t\t\t\t\t\t\tfindFields(", "+\t\t\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t\t\tnew FieldBinding[]{(FieldBinding)binding},", "+\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\t\t\t\t\tlocalsFound,", "+\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\t((FieldBinding)binding).declaringClass,", "+\t\t\t\t\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "490ec6532dfa7aa701e7fdc11b37e8f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "2a736526cf0c07c962b917711ed6666ebeefdfa1", "commitAfterChange": "c012c3900814a42f4ddf6062be7a4a09cfd10693", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void saving(ISaveContext context) throws CoreException", "signatureAfterChange": " \tpublic void saving(ISaveContext context) throws CoreException", "diff": ["+\t    // save container values on snapshot/full save", "+\t\tPreferences preferences = JavaCore.getPlugin().getPluginPreferences();", "+\t\tIJavaProject[] projects = getJavaModel().getJavaProjects();", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t    IJavaProject project = projects[i];", "+\t\t\tMap projectContainers = (Map)this.containers.get(project);", "+\t\t\tif (projectContainers == null) continue;", "+\t\t\tfor (Iterator keys = projectContainers.keySet().iterator(); keys.hasNext();) {", "+\t\t\t    IPath containerPath = (IPath) keys.next();", "+\t\t\t    IClasspathContainer container = (IClasspathContainer) projectContainers.get(containerPath);", "+\t\t\t\tString containerKey = CP_CONTAINER_PREFERENCES_PREFIX+project.getElementName() +\"|\"+containerPath;//$NON-NLS-1$", "+\t\t\t\tString containerString = CP_ENTRY_IGNORE;", "+\t\t\t\ttry {", "+\t\t\t\t\tif (container != null) {", "+\t\t\t\t\t\tcontainerString = ((JavaProject)project).encodeClasspath(container.getClasspathEntries(), null, false);", "+\t\t\t\t\t}", "+\t\t\t\t} catch(JavaModelException e){", "+\t\t\t\t\t// could not encode entry: leave it as CP_ENTRY_IGNORE", "+\t\t\t\t}", "+\t\t\t\tpreferences.setDefault(containerKey, CP_ENTRY_IGNORE); // use this default to get rid of removed ones", "+\t\t\t\tpreferences.setValue(containerKey, containerString);", "+\t\t\t}", "+\t\t}", "+\t\tJavaCore.getPlugin().savePluginPreferences();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88e80059ec588084006438be74e9d6e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic void loadVariables() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-\tpublic void loadVariables() throws CoreException {", "+\tpublic void loadVariablesAndContainers() throws CoreException {", "-\t\t// load variables from preferences into cache", "+\t\t// load variables and containers from preferences into cache", "-\t\tint prefixLength = CP_VARIABLE_PREFERENCES_PREFIX.length();", "+\t\tint variablePrefixLength = CP_VARIABLE_PREFERENCES_PREFIX.length();", "-\t\t\t\tString varName = propertyName.substring(prefixLength);", "+\t\t\t\tString varName = propertyName.substring(variablePrefixLength);", "+\t\t\t\tPreviousSessionVariables.put(varName, varPath);", "-\t\t}\t\t", "+\t\t\tif (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)){", "+\t\t\t\trecreatePersistedContainer(propertyName, preferences.getString(propertyName).trim(), true/*add to previous session values*/);", "+\t\t\t}", "+\t\t}", "+\t\t}", "+\t\t// override persisted values for containers which have a registered initializer", "+\t\tString[] registeredContainerIDs = getRegisteredContainerIDs();", "+\t\tfor (int i = 0; i < registeredContainerIDs.length; i++) {", "+\t\t\tString containerID = registeredContainerIDs[i];", "+\t\t\tIterator projectIterator = Containers.keySet().iterator();", "+\t\t\twhile (projectIterator.hasNext()){", "+\t\t\t\tIJavaProject project = (IJavaProject)projectIterator.next();", "+\t\t\t\tMap projectContainers = (Map)Containers.get(project);", "+\t\t\t\tif (projectContainers != null){", "+\t\t\t\t\tIterator containerIterator = projectContainers.keySet().iterator();", "+\t\t\t\t\twhile (containerIterator.hasNext()){", "+\t\t\t\t\t\tIPath containerPath = (IPath)containerIterator.next();", "+\t\t\t\t\t\tif (containerPath.segment(0).equals(containerID)) { // registered container", "+\t\t\t\t\t\t\tprojectContainers.put(containerPath, null); // reset container value, but leave entry in Map", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c46634832be9e68a3c46f204842695e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "70ee08b37d9e1985bf6e556eb4c75b0a1c82e56b", "commitAfterChange": "a46f42e6852cac4afd504be345bfdc6cb42a6150", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "signatureAfterChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "diff": ["+\t\tHashMap oldTypeCategories = oldSourceTypeInfo.categories;", "+\t\tHashMap newTypeCategories = newSourceTypeInfo.categories;", "+\t\tif (oldTypeCategories != null) {", "+\t\t\tIterator elements = oldTypeCategories.keySet().iterator();", "+\t\t\twhile (elements.hasNext()) {", "+\t\t\t\tIJavaElement element = (IJavaElement) elements.next();", "+\t\t\t\tString[] oldCategories = (String[]) oldTypeCategories.get(element);", "+\t\t\t\tString[] newCategories = newTypeCategories == null ? null : (String[]) newTypeCategories.get(element);", "+\t\t\t\tif (!Util.equalArraysOrNull(oldCategories, newCategories)) {", "+\t\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (newTypeCategories != null) {", "+\t\t\tIterator elements = newTypeCategories.keySet().iterator();", "+\t\t\twhile (elements.hasNext()) {", "+\t\t\t\tIJavaElement element = (IJavaElement) elements.next();", "+\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES); // all categories for this element were removed", "+\t\t\t}", "+\t\t}"]}], "num": 10139}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29b287ac242ee1dcbe08118baad47cc2", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14346a74847ee3c8254a0ae4e1fdbfb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "signatureAfterChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "diff": ["+\t\tlong sourceLevel = scope.compilerOptions().sourceLevel;", "-\t\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5;", "+\t\t\tboolean argHasError = sourceLevel < ClassFileConstants.JDK1_5;", "-\t\t\tTypeBinding argumentType;", "-\t\t\t\tif ((argumentType = argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\t\t\tif (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)", "+\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && argument.isPolyExpression())", "-\t\t\tthis.binding = scope.getConstructor(allocationType, argumentTypes, this);", "-\t\t\tif (polyExpressionSeen)", "-\t\t\t\tresolvePolyExpressionArguments(scope, this.binding, this.arguments, argumentTypes);", "+\t\t\tthis.binding = findConstructorBinding(scope, this, allocationType, argumentTypes, polyExpressionSeen);", "-\t\tMethodBinding inheritedBinding = scope.getConstructor(anonymousSuperclass, argumentTypes, this);", "-\t\tif (polyExpressionSeen)", "-\t\t\tresolvePolyExpressionArguments(scope, inheritedBinding, this.arguments, argumentTypes);", "+\t\tMethodBinding inheritedBinding = findConstructorBinding(scope, this, anonymousSuperclass, argumentTypes, polyExpressionSeen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdf22ccf04e9a9358e4748b7af756a66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["+\t\t\tlong sourceLevel = scope.compilerOptions().sourceLevel;", "-\t\t\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5;", "+\t\t\t\tboolean argHasError = sourceLevel < ClassFileConstants.JDK1_5;", "-\t\t\t\tTypeBinding argumentType;", "-\t\t\t\t\tif ((argumentType = argumentTypes[i] = argument.resolveType(scope)) == null) {", "+\t\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null) {", "-\t\t\t\t\tif (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)", "+\t\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && argument.isPolyExpression())", "-\t\t\tthis.binding = scope.getConstructor(receiverType, argumentTypes, this);", "-\t\t\tif (polyExpressionSeen)", "-\t\t\t\tresolvePolyExpressionArguments(scope, this.binding, this.arguments, argumentTypes);", "-\t\t\t\t", "+\t\t\tthis.binding = findConstructorBinding(scope, this, receiverType, argumentTypes, polyExpressionSeen);", "+"]}], "num": 37424}
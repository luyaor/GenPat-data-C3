{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e804f40ff7daf55c6d9656aa8e2598ee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13c44bcc3d6e751fc0d0b802f8354a96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\tif (actualOutput.indexOf(expectedOutput) == -1){", "-\t\tSystem.out.println(Util.displayString(actualOutput, 2));", "+\t", "+\tString expectedOutput15 =", "+\t\t\"  // Method descriptor  #15 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\"  // Stack: 3, Locals: 4\\n\" + ", "+\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\"     0  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"     3  ldc #23 <String \\\"1\\\">\\n\" + ", "+\t\t\"     5  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"     8  aconst_null\\n\" + ", "+\t\t\"     9  goto 13\\n\" + ", "+\t\t\"    12  aconst_null\\n\" + ", "+\t\t\"    13  aconst_null\\n\" + ", "+\t\t\"    14  goto 18\\n\" + ", "+\t\t\"    17  aconst_null\\n\" + ", "+\t\t\"    18  if_acmpne 29\\n\" + ", "+\t\t\"    21  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    24  ldc #31 <String \\\"2\\\">\\n\" + ", "+\t\t\"    26  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    29  new #33 java/lang/StringBuilder\\n\" + ", "+\t\t\"    32  dup\\n\" + ", "+\t\t\"    33  ldc #35 <String \\\"[\\\">\\n\" + ", "+\t\t\"    35  invokespecial #37 <Method java/lang/StringBuilder.<init>(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    38  aconst_null\\n\" + ", "+\t\t\"    39  invokevirtual #41 <Method java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;>\\n\" + ", "+\t\t\"    42  ldc #43 <String \\\"]\\\">\\n\" + ", "+\t\t\"    44  invokevirtual #41 <Method java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;>\\n\" + ", "+\t\t\"    47  invokevirtual #47 <Method java/lang/StringBuilder.toString()Ljava/lang/String;>\\n\" + ", "+\t\t\"    50  ldc #49 <String \\\"[null]\\\">\\n\" + ", "+\t\t\"    52  if_acmpne 59\\n\" + ", "+\t\t\"    55  iconst_1\\n\" + ", "+\t\t\"    56  goto 60\\n\" + ", "+\t\t\"    59  iconst_0\\n\" + ", "+\t\t\"    60  istore_1\\n\" + ", "+\t\t\"    61  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    64  ldc #51 <String \\\"3\\\">\\n\" + ", "+\t\t\"    66  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    69  aconst_null\\n\" + ", "+\t\t\"    70  astore_2\\n\" + ", "+\t\t\"    71  aload_2\\n\" + ", "+\t\t\"    72  ifnonnull 83\\n\" + ", "+\t\t\"    75  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    78  ldc #53 <String \\\"4\\\">\\n\" + ", "+\t\t\"    80  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    83  ldc #55 <String \\\"aaa\\\">\\n\" + ", "+\t\t\"    85  astore_3\\n\" + ", "+\t\t\"    86  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    89  ldc #57 <String \\\"5\\\">\\n\" + ", "+\t\t\"    91  invokevirtual #60 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    94  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 3]\\n\" + ", "+\t\t\"        [pc: 8, line: 4]\\n\" + ", "+\t\t\"        [pc: 21, line: 5]\\n\" + ", "+\t\t\"        [pc: 29, line: 6]\\n\" + ", "+\t\t\"        [pc: 61, line: 7]\\n\" + ", "+\t\t\"        [pc: 69, line: 8]\\n\" + ", "+\t\t\"        [pc: 71, line: 9]\\n\" + ", "+\t\t\"        [pc: 83, line: 10]\\n\" + ", "+\t\t\"        [pc: 86, line: 11]\\n\" + ", "+\t\t\"        [pc: 94, line: 12]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 95] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "+\t\t\"        [pc: 61, pc: 95] local: b index: 1 type: Z\\n\" + ", "+\t\t\"        [pc: 71, pc: 95] local: s index: 2 type: Ljava/lang/String;\\n\" + ", "+\t\t\"        [pc: 86, pc: 95] local: s2 index: 3 type: Ljava/lang/String;\\n\";", "+\t", "+\tif (COMPLIANCE_1_5.equals(this.complianceLevel)) {", "+\t\tif (actualOutput.indexOf(expectedOutput15) == -1){", "+\t\t\tSystem.out.println(Util.displayString(actualOutput, 2));", "+\t\t}", "+\t\tassertTrue(\"unexpected bytecode sequence\", actualOutput.indexOf(expectedOutput15) != -1);", "+\t} else {", "+\t\tif (actualOutput.indexOf(expectedOutput) == -1){", "+\t\t\tSystem.out.println(Util.displayString(actualOutput, 2));", "+\t\t}", "+\t\tassertTrue(\"unexpected bytecode sequence\", actualOutput.indexOf(expectedOutput) != -1);", "-\tassertTrue(\"unexpected bytecode sequence\", actualOutput.indexOf(expectedOutput) != -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4740519ac435f86d069982f99ab25d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "33fe687f9742cf59d8c34585b372a06d8716fd96", "commitAfterChange": "c8352169d5ab78913503c9b071086020edbb98df", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " public void test135()", "signatureAfterChange": " public void test135()", "diff": ["+\t\t\t\"p/X.java\",", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"import p.A;\\n\" + ", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\t\\n\" + ", "+\t\t\t\"\tvoid foo(Object o, Object [] os) {\\n\" + ", "+\t\t\t\"\t\tA.M2.MM1 mm1 = (A.M2.MM1) o;\\n\" + ", "+\t\t\t\"\t\tA.M2.MM1[] mm1s = (A.M2.MM1[]) os;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tprivate interface Outer {\\n\" + ", "+\t\t\t\"\t\tinterface Inner {\\n\" + ", "+\t\t\t\"\t\t\tString variable = \\\"my testing\\\";\\n\" + ", "+\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\"\t\tSystem.out.println(Outer.Inner.variable);\\n\" + ", "+\t\t\t\"\t\tZork z;\\n\" +", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\", // =================,", "+\t\t\t\"p/A.java\",", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"/** @deprecated */\\n\" +", "+\t\t\t\"public class A {\\n\" + ", "+\t\t\t\"\tpublic class M1 {\\n\" +", "+\t\t\t\"\t\tpublic class MM1 {\\n\" +", "+\t\t\t\"\t\t}\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tpublic class M2 extends M1 {\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\", // =================,", "+\t\t}, ", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in p\\\\X.java (at line 2)\\n\" + ", "+\t\t\"\timport p.A;\\n\" + ", "+\t\t\"\t       ^^^\\n\" + ", "+\t\t\"The type A is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in p\\\\X.java (at line 6)\\n\" + ", "+\t\t\"\tA.M2.MM1 mm1 = (A.M2.MM1) o;\\n\" + ", "+\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\"The type A is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in p\\\\X.java (at line 6)\\n\" + ", "+\t\t\"\tA.M2.MM1 mm1 = (A.M2.MM1) o;\\n\" + ", "+\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\"The type A.M2 is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in p\\\\X.java (at line 6)\\n\" + ", "+\t\t\"\tA.M2.MM1 mm1 = (A.M2.MM1) o;\\n\" + ", "+\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\"The type A.M1.MM1 is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in p\\\\X.java (at line 6)\\n\" + ", "+\t\t\"\tA.M2.MM1 mm1 = (A.M2.MM1) o;\\n\" + ", "+\t\t\"\t                ^^^^^^^^\\n\" + ", "+\t\t\"The type A.M1.MM1 is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in p\\\\X.java (at line 7)\\n\" + ", "+\t\t\"\tA.M2.MM1[] mm1s = (A.M2.MM1[]) os;\\n\" + ", "+\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\"The type A is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in p\\\\X.java (at line 7)\\n\" + ", "+\t\t\"\tA.M2.MM1[] mm1s = (A.M2.MM1[]) os;\\n\" + ", "+\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\"The type A.M2 is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"8. WARNING in p\\\\X.java (at line 7)\\n\" + ", "+\t\t\"\tA.M2.MM1[] mm1s = (A.M2.MM1[]) os;\\n\" + ", "+\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\"The type A.M1.MM1 is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"9. WARNING in p\\\\X.java (at line 7)\\n\" + ", "+\t\t\"\tA.M2.MM1[] mm1s = (A.M2.MM1[]) os;\\n\" + ", "+\t\t\"\t                   ^^^^^^^^\\n\" + ", "+\t\t\"The type A is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"10. WARNING in p\\\\X.java (at line 7)\\n\" + ", "+\t\t\"\tA.M2.MM1[] mm1s = (A.M2.MM1[]) os;\\n\" + ", "+\t\t\"\t                   ^^^^^^^^\\n\" + ", "+\t\t\"The type A.M2 is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"11. WARNING in p\\\\X.java (at line 7)\\n\" + ", "+\t\t\"\tA.M2.MM1[] mm1s = (A.M2.MM1[]) os;\\n\" + ", "+\t\t\"\t                   ^^^^^^^^\\n\" + ", "+\t\t\"The type A.M1.MM1 is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"12. WARNING in p\\\\X.java (at line 9)\\n\" + ", "+\t\t\"\tprivate interface Outer {\\n\" + ", "+\t\t\"\t                  ^^^^^\\n\" + ", "+\t\t\"The type X.Outer is never used locally\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"13. ERROR in p\\\\X.java (at line 16)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d52c04ef768c87a2988dc8dc2b3752d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "750aa30159270a8e5e3dda43d0a97cfb8878627d", "commitAfterChange": "f8c4bd6d317c7bd673dbcf053ccf33d3004de38a", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " \tpublic void _test091()", "signatureAfterChange": " \tpublic void test091()", "diff": ["-\tpublic void _test091() {", "+\tpublic void test091() {", "-\t\t\t\"should have a nameclash issue ?\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in DataSet.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass DataSet<T extends Number> implements List, Iterator, Serializable {\\n\" + ", "+\t\t\t\"\t      ^^^^^^^\\n\" + ", "+\t\t\t\"The type DataSet<T> must implement the inherited abstract method List.toArray(Object[])\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in DataSet.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass DataSet<T extends Number> implements List, Iterator, Serializable {\\n\" + ", "+\t\t\t\"\t      ^^^^^^^\\n\" + ", "+\t\t\t\"The serializable class DataSet does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in DataSet.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass DataSet<T extends Number> implements List, Iterator, Serializable {\\n\" + ", "+\t\t\t\"\t                                           ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in DataSet.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass DataSet<T extends Number> implements List, Iterator, Serializable {\\n\" + ", "+\t\t\t\"\t                                                 ^^^^^^^^\\n\" + ", "+\t\t\t\"Iterator is a raw type. References to generic type Iterator<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in DataSet.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic <S> S[] toArray(S[] s) {\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method toArray(S[]) of type DataSet<T> has the same erasure as toArray(T[]) of type List<E> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in DataSet.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic <S> S[] toArray(S[] s) {\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method toArray(S[]) of type DataSet<T> has the same erasure as toArray(T[]) of type Collection<E> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in DataSet.java (at line 12)\\n\" + ", "+\t\t\t\"\tpublic boolean addAll(Collection c) {\treturn false; }\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in DataSet.java (at line 13)\\n\" + ", "+\t\t\t\"\tpublic boolean addAll(int index, Collection c) {\treturn false; }\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in DataSet.java (at line 16)\\n\" + ", "+\t\t\t\"\tpublic boolean containsAll(Collection c) { return false; }\\n\" + ", "+\t\t\t\"\t                           ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in DataSet.java (at line 20)\\n\" + ", "+\t\t\t\"\tpublic Iterator iterator() {\treturn null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\"Iterator is a raw type. References to generic type Iterator<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"11. WARNING in DataSet.java (at line 22)\\n\" + ", "+\t\t\t\"\tpublic ListIterator listIterator() {\treturn null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"ListIterator is a raw type. References to generic type ListIterator<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in DataSet.java (at line 23)\\n\" + ", "+\t\t\t\"\tpublic ListIterator listIterator(int index) {\treturn null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"ListIterator is a raw type. References to generic type ListIterator<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. WARNING in DataSet.java (at line 26)\\n\" + ", "+\t\t\t\"\tpublic boolean removeAll(Collection c) {\treturn false; }\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. WARNING in DataSet.java (at line 27)\\n\" + ", "+\t\t\t\"\tpublic boolean retainAll(Collection c) {\treturn false; }\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"15. WARNING in DataSet.java (at line 30)\\n\" + ", "+\t\t\t\"\tpublic List subList(int fromIndex, int toIndex) {\treturn null; }\\n\" + ", "+\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\""]}], "num": 7194}
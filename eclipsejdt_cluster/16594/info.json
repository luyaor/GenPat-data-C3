{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "967561027235c55d245806e0974687cb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12c0747e7515c5f5c606c9a876e2d896", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprotected void logPerfResult(PrintStream[] logStreams, int count)", "signatureAfterChange": " \tprotected void logPerfResult(PrintStream[] logStreams, int count)", "diff": ["-\t\tString[] comments = new String[2];", "+\t\tint length = DIM_NAMES.length;", "+\t\tString[] comments = new String[length];", "-\t\tboolean haveTimes  = JdtCorePerformanceMeter.CPU_TIMES != null && JdtCorePerformanceMeter.ELAPSED_TIMES != null;", "-\t\tif (haveTimes) {", "-\t\t\tNumberFormat pFormat = NumberFormat.getPercentInstance();", "-\t\t\tpFormat.setMaximumFractionDigits(1);", "-\t\t\tNumberFormat dFormat = NumberFormat.getNumberInstance();", "-\t\t\tdFormat.setMaximumFractionDigits(0);", "-\t\t\tString stddevThresholdStr = dFormat.format(STDDEV_THRESHOLD*100);", "-\t\t\tNumberFormat dFormat2 = NumberFormat.getNumberInstance();", "-\t\t\tdFormat2.setMaximumFractionDigits(2);", "-\t\t\ttry {", "-\t\t\t\t// Store CPU Time", "-\t\t\t\tJdtCorePerformanceMeter.Statistics cpuStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.CPU_TIMES.get(this.scenarioReadableName);", "-\t\t\t\tif (cpuStats != null) {", "-\t\t\t\t\tdouble percent = cpuStats.stddev/cpuStats.average;", "-\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "-\t\t\t\t\t\t//if (logStreams[0] != null) logStreams[0].print(\"'\"); // disable over threshold result for xls table", "-\t\t\t\t\t\tSystem.out.println(\"\tWARNING: CPU time standard deviation is over \"+stddevThresholdStr+\"%: \"+dFormat2.format(cpuStats.stddev)+\"/\"+cpuStats.average+\"=\"+ pFormat.format(percent));", "-\t\t\t\t\t\tcomments[0] = \"stddev=\" + pFormat.format(percent);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (logStreams[0] != null) {", "-\t\t\t\t\t\tlogStreams[0].print(\"\"+cpuStats.sum+\"\\t\");", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tThread.sleep(1000);", "-\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored CPU time!\");", "-\t\t\t\t\tThread.sleep(1000);", "+\t\tboolean haveStats = JdtCorePerformanceMeter.STATISTICS != null;", "+\t\tif (haveStats) {", "+\t\t\tDataPoint[] dataPoints = (DataPoint[]) JdtCorePerformanceMeter.STATISTICS.get(this.scenarioReadableName);", "+\t\t\tif (dataPoints != null) {", "+\t\t\t\tStatistics statistics = new Statistics(dataPoints);", "+\t\t\t\tfor (int idx=0; idx<length; idx++) {", "+\t\t\t\t\tstoreDimension(logStreams, comments, statistics, idx);", "-\t\t\t\t// Store Elapsed time", "-\t\t\t\tJdtCorePerformanceMeter.Statistics elapsedStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.ELAPSED_TIMES.get(this.scenarioReadableName);", "-\t\t\t\tif (elapsedStats != null) {", "-\t\t\t\t\tdouble percent = elapsedStats.stddev/elapsedStats.average;", "-\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "-\t\t\t\t\t\t//if (logStreams[1] != null) logStreams[1].print(\"'\"); // disable over threshold result for xls table", "-\t\t\t\t\t\tSystem.out.println(\"\tWARNING: Elapsed time standard deviation is over \"+stddevThresholdStr+\"%: \"+dFormat.format(elapsedStats.stddev)+\"/\"+elapsedStats.average+\"=\"+ pFormat.format(percent));", "-\t\t\t\t\t\tcomments[1] = \"stddev=\" + pFormat.format(percent);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (logStreams[1] != null) {", "-\t\t\t\t\t\tlogStreams[1].print(\"\"+elapsedStats.sum+\"\\t\");", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "+\t\t\t} else {", "+\t\t\t\ttry {", "+\t\t\t\t\thaveStats = false;", "-\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored Elapsed time\");", "+\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored statistics!\");", "+\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t// do nothing", "-\t\t\t} catch (InterruptedException e) {", "-\t\t\t\t// do nothing", "-\t\t\tscenarioComments = new StringBuffer[LOG_TYPES.length];", "+\t\t\tscenarioComments = new StringBuffer[length];", "-\t\tfor (int i=0, ln=LOG_TYPES.length; i<ln; i++) {", "+\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\tif (haveTimes) {", "+\t\t\t\t\tif (haveStats) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec80aabadc5ae813ecfa4b25a60f63d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "73ac4b89b07a19913f32c5be3407713232b8261e", "commitAfterChange": "6309bc7b393d4ea593b349299d066f391f072168", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tIBinding resolveName(Name name)", "signatureAfterChange": "\r \tIBinding resolveName(Name name)", "diff": ["-\t\t\tPackageDeclaration packageDeclaration = (PackageDeclaration) name.getParent();\r", "-\t\t\tCompilationUnit unit = (CompilationUnit) packageDeclaration.getParent();\r", "-\t\t\tList types = unit.types();\r", "-\t\t\tif (types.size() == 0) {\r", "-\t\t\t\treturn super.resolveName(name);\r", "-\t\t\t}\r", "-\t\t\tTypeDeclaration type = (TypeDeclaration) types.get(0);\r", "-\t\t\tITypeBinding typeBinding = type.resolveBinding();\r", "-\t\t\treturn typeBinding.getPackage();\r", "+\t\t\treturn resolveNameForPackageDeclaration(name);\r", "+\t\tif (node instanceof NameReference || node == null) {\r", "+\t\t\treturn resolveNameForNameReference(name, node);\r", "+\t\t}\r", "+\t\tif (node instanceof MessageSend) {\r", "+\t\t\treturn resolveNameForMessageSend(name, node);\r", "+\t\t}\r", "+\t\treturn super.resolveName(name);\r", "+\t}\r", "-\t\t\t\t\r", "-\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - 1]);\t\t\t\t\r", "-\t\t} else {\r"]}], "num": 16594}
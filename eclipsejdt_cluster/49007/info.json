{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ba5c020b966d0101f4c52e38806f2d2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1c3329039223d9a934e8c2c488b7be7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tprivate void verifyNamePositions(int nameStart, Name name, char[] source)", "signatureAfterChange": " \tprivate void verifyNamePositions(int nameStart, Name name, char[] source)", "diff": ["-\t\t\tString str = new String(source, qualified.getName().getStartPosition(), qualified.getName().getLength());", "-\t\t\tassertEquals(this.prefix+\"Misplaced or wrong name component \"+name, str, qualified.getName().toString());", "+\t\t\tint start = qualified.getName().getStartPosition();", "+\t\t\tString str = new String(source, start, qualified.getName().getLength());", "+\t\t\tassumeEquals(this.prefix+\"Misplaced or wrong name at <\"+start+\"> for qualified name: \"+name, str, qualified.getName().toString());", "-\t\tassertEquals(this.prefix+\"Misplaced or wrong name component at \"+nameStart, str, name.toString());", "+\t\tif (str.indexOf('\\n') < 0) { // cannot compare if text contains new line", "+\t\t\tassumeEquals(this.prefix+\"Misplaced name at <\"+nameStart+\"> for qualified name: \", str, name.toString());", "+\t\t} else {", "+\t\t\tSystem.out.println(this.prefix+\"Name contains new line at <\"+nameStart+\"> for qualified name: \"+name);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb6cf0a92030c89eb71b19e2d1730458", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ab74babcdf0f89ee66e36b91189c0d301a4da95d", "commitAfterChange": "66a4221dd418603b7f2bc6722d99e4e300585ef1", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["-\t\t\t\t\ttext = new String(source, start, name.getLength());", "-\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref name at <\"+start+\">: \", text, name.toString());", "+\t\t\t\t\tint nameLength = name.getLength();", "+\t\t\t\t\ttext = new String(source, start, nameLength);", "+\t\t\t\t\tif (!text.equals(name.toString())) { // may have qualified constructor reference for inner classes", "+\t\t\t\t\t\tif (methodRef.getQualifier().isQualifiedName()) {", "+\t\t\t\t\t\t\ttext = new String(source, start, methodRef.getQualifier().getLength());", "+\t\t\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref name at <\"+start+\">: \", text, methodRef.getQualifier().toString());", "+\t\t\t\t\t\t\twhile (source[start] != '.' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\twhile (source[start] != '.' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\ttext = new String(source, start, nameLength);", "+\t\t\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref name at <\"+start+\">: \", text, name.toString());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tstart += name.getLength();", "+\t\t\t\t\tstart += nameLength;"]}], "num": 49007}
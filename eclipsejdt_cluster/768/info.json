{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97ffc483431bac521722559c5708a64a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0de9458a5ca8452a4af1f55d78fd48d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "cb1229e517a2018e5263ed249b199ae2a321da49", "commitAfterChange": "4732df192beaa38106d940c4bfeefb54a9e4a1cf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "signatureAfterChange": " public static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "diff": ["+\tint alternateLeftTypeId = expressionTypeId;", "-\t} else {", "+\t} else  {", "-\t\tif (alternateLeftType.id == expressionTypeId) { // obvious identity cast", "+\t\tif ((alternateLeftTypeId = alternateLeftType.id) == expressionTypeId) { // obvious identity cast", "+\t\t\treturn;", "+\t\t} else if (alternateLeftTypeId == TypeIds.T_null) {", "+\t\t\talternateLeftTypeId = expressionTypeId;  // tolerate null argument cast", "+/*\t\ttolerate widening cast in unary expressions, as may be used when combined in binary expressions (41680)", "+\t\tint alternateOperatorSignature = OperatorExpression.OperatorSignatures[operator][(alternateLeftTypeId << 4) + alternateLeftTypeId];", "+\t\t// (cast)  left   Op (cast)  right --> result", "+\t\t//  1111   0000       1111   0000     1111", "+\t\t//  <<16   <<12       <<8    <<4       <<0", "+\t\tfinal int CompareMASK = (0xF<<16) + (0xF<<8) + 0xF; // mask hiding compile-time types", "+\t\tif ((operatorSignature & CompareMASK) == (alternateOperatorSignature & CompareMASK)) { // same promotions and result", "+\t\t\tscope.problemReporter().unnecessaryCastForArgument((CastExpression)expression,  TypeBinding.wellKnownType(scope, expression.implicitConversion >> 4));", "+\t\t}", "+*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10d0abbf8d1effbd733d3f950006ddac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "71895c81fed55af12d70112075adbee60bd4e2a4", "commitAfterChange": "4a8e4bc6253cbe53e5dc0d89214baeb1f9444811", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \tprivate void findKeywords(char[] keyword, char[][] choices, Scope scope)", "signatureAfterChange": "\r \tprivate void findKeywords(char[] keyword, char[][] choices, Scope scope)", "diff": ["-\t\t\t\t\t))\r", "-\t\t\t\t\trequestor.acceptKeyword(choices[i], startPosition - offset, endPosition - offset);\r", "+\t\t\t\t)){\r", "+\t\t\t\t\tint relevance = DEFAULTRELEVANCE;\r", "+\t\t\t\t\tif(CharOperation.prefixEquals(keyword, choices[i], true /* do not ignore case */)){\r", "+\t\t\t\t\t\trelevance += CASEMATCHRELEVANCE;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\t\r", "+\t\t\t\t\trequestor.acceptKeyword(choices[i], startPosition - offset, endPosition - offset,relevance);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5370516283dd829bfb08e65c3310b487", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "71895c81fed55af12d70112075adbee60bd4e2a4", "commitAfterChange": "4a8e4bc6253cbe53e5dc0d89214baeb1f9444811", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r \tprivate void findLocalMethods(\r \t\tchar[] methodName,\r \t\tTypeBinding[] argTypes,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "signatureAfterChange": "\r \tprivate void findLocalMethods(\r \t\tchar[] methodName,\r \t\tTypeBinding[] argTypes,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "diff": ["+\t\t\tint relevance = DEFAULTRELEVANCE;\r", "+\t\t\tif (CharOperation.prefixEquals(methodName, method.selector, true /* do not ignore case */)) {\r", "+\t\t\t\trelevance += CASEMATCHRELEVANCE;\r", "+\t\t\t}\r", "+\r", "-\t\t\t\tendPosition - offset);\r", "+\t\t\t\tendPosition - offset,\r", "+\t\t\t\trelevance);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17dafd830cae2d7904f2a85c908d97c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "99b584120d57fd9f2c2a7464785e4049acdac490", "commitAfterChange": "62bb0df3439a3337bf19f66c0d56ac16589e94ca", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "signatureAfterChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "diff": ["+\t\tint adjustment = 0;", "+\t\tif (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\tadjustment = 1;", "+\t\t}", "-\t\t\t\t\t\tthis.preferences.array_initializer_continuation_indentation,", "+\t\t\t\t\t\tthis.preferences.array_initializer_continuation_indentation + adjustment,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7528406fc443575c3b4be93a34c2f51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "71895c81fed55af12d70112075adbee60bd4e2a4", "commitAfterChange": "4a8e4bc6253cbe53e5dc0d89214baeb1f9444811", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "signatureAfterChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "diff": ["+\t\t\tint relevance = DEFAULTRELEVANCE;\r", "+\t\t\tif (CharOperation.prefixEquals(methodName, method.selector, true /* do not ignore case */)) {\r", "+\t\t\t\trelevance += CASEMATCHRELEVANCE;\r", "+\t\t\t}\r", "+\r", "-\t\t\t\tendPosition - offset);\r", "+\t\t\t\tendPosition - offset,\r", "+\t\t\t\trelevance);\r"]}], "num": 768}
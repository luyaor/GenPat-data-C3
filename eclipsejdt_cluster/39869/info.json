{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4610ce0ae9a909d4cdcda29b62af84f3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5de00a32df75f9f98c3aee7bc2ea0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic void printQualifiedReference(int sourceEnd)", "signatureAfterChange": "  \tpublic void printQualifiedReference(int sourceEnd)", "diff": ["+\t\tint currentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\tdefault: ", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_BLOCK :", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_JAVADOC :", "+\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_LINE :", "+\t\t\t\t\t\tthis.printCommentLine(this.scanner.getRawTokenSource());", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\tcase TerminalTokens.TokenNameDOT :", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "294d843a15cec56133a1a417b831ee85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic ClassInstanceCreation convert(org.eclipse.jdt.internal.compiler.ast.AllocationExpression expression)", "signatureAfterChange": "\t \t \tpublic ClassInstanceCreation convert(org.eclipse.jdt.internal.compiler.ast.AllocationExpression expression)", "diff": ["-\t\tclassInstanceCreation.setName(convert(expression.type));", "+\t\tif (expression.typeArguments != null) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tclassInstanceCreation.setFlags(classInstanceCreation.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tfor (int i = 0, max = expression.typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\tclassInstanceCreation.typeArguments().add(convertType(expression.typeArguments[i]));", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tswitch(this.ast.apiLevel) {", "+\t\t\tcase AST.JLS2 :", "+\t\t\t\tclassInstanceCreation.setName(convert(expression.type));", "+\t\t\t\tbreak;", "+\t\t\tcase AST.JLS3 :", "+\t\t\t\tclassInstanceCreation.setType(convertType(expression.type));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdd82405d8cfc241dc6fba79cd860a9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 152, "signatureBeforeChange": "  \tprivate void setTypeForMethodDeclaration(MethodDeclaration methodDeclaration, Type type, int extraDimension)", "signatureAfterChange": " \t \tprotected void setTypeForMethodDeclaration(MethodDeclaration methodDeclaration, Type type, int extraDimension)", "diff": ["-", "-\tprivate void setTypeForMethodDeclaration(MethodDeclaration methodDeclaration, Type type, int extraDimension) {", "-\t\tif (extraDimension != 0) {", "-\t\t\tif (type.isArrayType()) {", "-\t\t\t\tArrayType arrayType = (ArrayType) type;", "-\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "-\t\t\t\tif (remainingDimensions == 0)  {", "-\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "-\t\t\t\t\tType elementType = arrayType.getElementType();", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\telementType.setParent(null, null);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "-\t\t\t\t\tmethodDeclaration.setReturnType(elementType);", "-\t\t\t\t} else {", "-\t\t\t\t\tint start = type.getStartPosition();", "-\t\t\t\t\tint length = type.getLength();", "-\t\t\t\t\tArrayType subarrayType = arrayType;", "-\t\t\t\t\tint index = extraDimension;", "-\t\t\t\t\twhile (index > 0) {", "-\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "-\t\t\t\t\t\tindex--;", "-\t\t\t\t\t}", "-\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "-\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\tsubarrayType.setParent(null, null);", "-\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "-\t\t\t\t\tmethodDeclaration.setReturnType(subarrayType);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tmethodDeclaration.setReturnType(type);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tmethodDeclaration.setReturnType(type);", "-\t\t}", "-\t}", "+\t", "+\tprotected void setTypeForMethodDeclaration(MethodDeclaration methodDeclaration, Type type, int extraDimension) {", "+\t\tif (extraDimension != 0) {", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "+\t\t\t\tif (remainingDimensions == 0)  {", "+\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "+\t\t\t\t\tType elementType = arrayType.getElementType();", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\telementType.setParent(null, null);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "+\t\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\t\tmethodDeclaration.setReturnType(elementType);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\t\tmethodDeclaration.setReturnType2(elementType);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tint start = type.getStartPosition();", "+\t\t\t\t\tint length = type.getLength();", "+\t\t\t\t\tArrayType subarrayType = arrayType;", "+\t\t\t\t\tint index = extraDimension;", "+\t\t\t\t\twhile (index > 0) {", "+\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "+\t\t\t\t\t\tindex--;", "+\t\t\t\t\t}", "+\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "+\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\tsubarrayType.setParent(null, null);", "+\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "+\t\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\t\tmethodDeclaration.setReturnType(subarrayType);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\t\tmethodDeclaration.setReturnType2(subarrayType);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\tmethodDeclaration.setReturnType(type);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tmethodDeclaration.setReturnType2(type);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tmethodDeclaration.setReturnType(type);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tmethodDeclaration.setReturnType2(type);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 39869}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5adc1716ff4f40ee62f226abbd45029c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0479cd7c7fb0eba124310f653144599", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "26de20ae619c91a55a35147a34aba32ab3111d61", "commitAfterChange": "6aa15157c4a89778b30fbac85a8e1c76029da034", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate static boolean updateType(StringBuffer buf, char[] oldType, char[] newType, MergeStrategy mergeStrategy)", "signatureAfterChange": " \tprivate static boolean updateType(StringBuffer buf, char[] oldType, char[] newType, MergeStrategy mergeStrategy)", "diff": ["-\t\tSignatureWrapper oWrap = new SignatureWrapper(oldType, true, true); // may already contain annotations", "-\t\tSignatureWrapper nWrap = new SignatureWrapper(newType, true, true); // may already contain annotations", "-\t\tif (match(buf, oWrap, nWrap, 'L', false)", "-\t\t\t|| match(buf, oWrap, nWrap, 'T', false))", "-\t\t{", "-\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "-\t\t\tbuf.append(oWrap.nextName());", "-\t\t\tnWrap.nextName(); // skip", "-\t\t\tif (match(buf, oWrap, nWrap, '<', false)) {", "-\t\t\t\tdo {", "-\t\t\t\t\tint oStart = oWrap.start;", "-\t\t\t\t\tint nStart = nWrap.start;", "-\t\t\t\t\toWrap.computeEnd();", "-\t\t\t\t\tnWrap.computeEnd();", "-\t\t\t\t\tif (updateType(buf, oWrap.getFrom(oStart), nWrap.getFrom(nStart), mergeStrategy))", "-\t\t\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "-\t\t\t\t} while (!match(buf, oWrap, nWrap, '>', false));", "+\t\ttry {", "+\t\t\tSignatureWrapper oWrap = new SignatureWrapper(oldType, true, true); // may already contain annotations", "+\t\t\tSignatureWrapper nWrap = new SignatureWrapper(newType, true, true); // may already contain annotations", "+\t\t\tif (match(buf, oWrap, nWrap, 'L', false)", "+\t\t\t\t|| match(buf, oWrap, nWrap, 'T', false))", "+\t\t\t{", "+\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "+\t\t\t\tbuf.append(oWrap.nextName());", "+\t\t\t\tnWrap.nextName(); // skip", "+\t\t\t\tif (match(buf, oWrap, nWrap, '<', false)) {", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\tint oStart = oWrap.start;", "+\t\t\t\t\t\tint nStart = nWrap.start;", "+\t\t\t\t\t\toWrap.computeEnd();", "+\t\t\t\t\t\tnWrap.computeEnd();", "+\t\t\t\t\t\tif (updateType(buf, oWrap.getFrom(oStart), nWrap.getFrom(nStart), mergeStrategy))", "+\t\t\t\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "+\t\t\t\t\t} while (!match(buf, oWrap, nWrap, '>', false));", "+\t\t\t\t}", "+\t\t\t\tmatch(buf, oWrap, nWrap, ';', true);", "+\t\t\t} else if (match(buf, oWrap, nWrap, '[', false)) {", "+\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "+\t\t\t\tupdateType(buf, oWrap.tail(), nWrap.tail(), mergeStrategy);", "+\t\t\t} else if (match(buf, oWrap, nWrap, '*', false)", "+\t\t\t\t\t|| match(buf, oWrap, nWrap, '+', false)", "+\t\t\t\t\t|| match(buf, oWrap, nWrap, '-', false))", "+\t\t\t{", "+\t\t\t\treturn true; // annotation allowed after this (not included in oldType / newType)", "+\t\t\t} else {\t\t\t", "+\t\t\t\tbuf.append(oldType);", "-\t\t\tmatch(buf, oWrap, nWrap, ';', true);", "-\t\t} else if (match(buf, oWrap, nWrap, '[', false)) {", "-\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "-\t\t\tupdateType(buf, oWrap.tail(), nWrap.tail(), mergeStrategy);", "-\t\t} else if (match(buf, oWrap, nWrap, '*', false)", "-\t\t\t\t|| match(buf, oWrap, nWrap, '+', false)", "-\t\t\t\t|| match(buf, oWrap, nWrap, '-', false))", "-\t\t{", "-\t\t\treturn true; // annotation allowed after this (not included in oldType / newType)", "-\t\t} else {\t\t\t", "-\t\t\tbuf.append(oldType);", "+\t\t} catch (ArrayIndexOutOfBoundsException aioobe) { // from several locations inside match() or mergeAnnotation().", "+\t\t\tStringBuilder msg = new StringBuilder(\"Structural mismatch between \").append(oldType).append(\" and \").append(newType); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tthrow new IllegalArgumentException(msg.toString(), aioobe);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6b8d1c3ba8cb64f6736be1e7ead53cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "65b4e15798189e35310112aac16988bcdf7eef0b", "commitAfterChange": "78b182da9e370f6f00f239fd2a2de8309bdf9aac", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\t\t\tfor (int i = 0; i < exceptionTableLength - 1; i++) {", "+\t\t\tfor (int i = 0; i < exceptionTableLength; i++) {", "+\t\t\t\tif (i != 0) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForExceptionAttribute + 1);", "+\t\t\t\t}", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForExceptionAttribute + 1);", "-\t\t\tIExceptionTableEntry exceptionTableEntry = exceptionTableEntries[exceptionTableLength - 1];", "-\t\t\tchar[] catchType;", "-\t\t\tif (exceptionTableEntry.getCatchTypeIndex() != 0) {", "-\t\t\t\tcatchType = exceptionTableEntry.getCatchType();", "-\t\t\t\tCharOperation.replace(catchType, '/', '.');", "-\t\t\t\tcatchType = returnClassName(catchType, '.', mode);", "-\t\t\t} else {", "-\t\t\t\tcatchType = ANY_EXCEPTION;", "-\t\t\t}", "-\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_exceptiontableentry,", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tInteger.toString(exceptionTableEntry.getStartPC()),", "-\t\t\t\t\tInteger.toString(exceptionTableEntry.getEndPC()),", "-\t\t\t\t\tInteger.toString(exceptionTableEntry.getHandlerPC()),", "-\t\t\t\t\tnew String(catchType)", "-\t\t\t\t}));", "-\t\t\tfor (int i = 0; i < lineAttributeLength - 1; i++) {", "+\t\t\tfor (int i = 0; i < lineAttributeLength; i++) {", "+\t\t\t\tif (i != 0) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLineAttribute + 1);", "+\t\t\t\t}", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLineAttribute + 1);", "-\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_linenumbertableentry,", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tInteger.toString(lineattributesEntries[lineAttributeLength - 1][0]),", "-\t\t\t\t\tInteger.toString(lineattributesEntries[lineAttributeLength - 1][1])", "-\t\t\t\t}));", "-\t\t\tfor (int i = 0; i < localVariableAttributeLength - 1; i++) {", "+\t\t\tfor (int i = 0; i < localVariableAttributeLength; i++) {", "+\t\t\t\tif (i != 0) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "+\t\t\t\t}", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "-\t\t\tILocalVariableTableEntry localVariableTableEntry = localVariableTableEntries[localVariableAttributeLength - 1];", "-\t\t\tint index= localVariableTableEntry.getIndex();", "-\t\t\tint startPC = localVariableTableEntry.getStartPC();", "-\t\t\tint length  = localVariableTableEntry.getLength();", "-\t\t\tfinal char[] typeName = Signature.toCharArray(localVariableTableEntry.getDescriptor());", "-\t\t\tCharOperation.replace(typeName, '/', '.');", "-\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_localvariabletableentry,", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tInteger.toString(startPC),", "-\t\t\t\t\tInteger.toString(startPC + length),", "-\t\t\t\t\tnew String(localVariableTableEntry.getName()),", "-\t\t\t\t\tInteger.toString(index),", "-\t\t\t\t\tnew String(returnClassName(typeName, '.', mode))", "-\t\t\t\t}));", "-\t\t\tfor (int i = 0; i < localVariableTypeTableLength - 1; i++) {", "+\t\t\tfor (int i = 0; i < localVariableTypeTableLength; i++) {", "+\t\t\t\tif (i != 0) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "+\t\t\t\t}", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "-\t\t\tILocalVariableTypeTableEntry localVariableTypeTableEntry = localVariableTypeTableEntries[localVariableTypeTableLength - 1];", "-\t\t\tint index= localVariableTypeTableEntry.getIndex();", "-\t\t\tint startPC = localVariableTypeTableEntry.getStartPC();", "-\t\t\tint length  = localVariableTypeTableEntry.getLength();", "-\t\t\tfinal char[] typeName = Signature.toCharArray(localVariableTypeTableEntry.getSignature());", "-\t\t\tCharOperation.replace(typeName, '/', '.');", "-\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_localvariabletableentry,", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tInteger.toString(startPC),", "-\t\t\t\t\tInteger.toString(startPC + length),", "-\t\t\t\t\tnew String(localVariableTypeTableEntry.getName()),", "-\t\t\t\t\tInteger.toString(index),", "-\t\t\t\t\tnew String(returnClassName(typeName, '.', mode))", "-\t\t\t\t}));"]}], "num": 48371}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c05b045fec398fa07f41ab5c7806c45", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08f04d73da675589f15134a5dfad34fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "ded90d967b480e6d7d22b3283d60f4ed44ccc489", "commitAfterChange": "18c83b91d182e52feafdad6b2c46eb79ffb0e002", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tprotected Hashtable warningOptions(boolean all)", "signatureAfterChange": " \tprotected Hashtable warningOptions(int kind)", "diff": ["-\tprotected Hashtable warningOptions(boolean all) {", "+\tprotected Hashtable warningOptions(int kind) {", "-\t\tHashtable optionsMap = new Hashtable(30);", "-\t\tString generate = all ? CompilerOptions.GENERATE : CompilerOptions.DO_NOT_GENERATE;", "-\t\tString warning = all ? CompilerOptions.WARNING : CompilerOptions.IGNORE;", "-\t\tString enabled = all ? CompilerOptions.ENABLED : CompilerOptions.DISABLED;", "-\t\tString preserve = all ? CompilerOptions.OPTIMIZE_OUT : CompilerOptions.PRESERVE;", "+\t\tHashtable optionsMap = null;", "+\t\tswitch (kind) {", "+\t\t\tcase 0:", "+\t\t\t\toptionsMap = JavaCore.getDefaultOptions();", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\toptionsMap = new Hashtable(350);", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tif (kind == 0) {", "+\t\t\t// Default set since 3.1", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.IGNORE); ", "+\t\t} else {", "+\t\t\tboolean all = kind == 1;", "+\t\t\tString generate = all ? CompilerOptions.GENERATE : CompilerOptions.DO_NOT_GENERATE;", "+\t\t\tString warning = all ? CompilerOptions.WARNING : CompilerOptions.IGNORE;", "+\t\t\tString enabled = all ? CompilerOptions.ENABLED : CompilerOptions.DISABLED;", "+\t\t\tString preserve = all ? CompilerOptions.OPTIMIZE_OUT : CompilerOptions.PRESERVE;", "+\t\t\t", "+\t\t\t// Set options values", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_LocalVariableAttribute, generate); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_LineNumberAttribute, generate);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_SourceFileAttribute, generate);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_PreserveUnusedLocal, preserve);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_DocCommentSupport, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecation, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedLocal, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameter, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoEffectAssignment, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportLocalVariableHiding, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportFieldHiding, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportEmptyStatement, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportAssertIdentifier, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryElse, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadoc, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTags, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocComments, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskTags, all ? JavaCore.DEFAULT_TASK_TAGS : \"\");", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskPriorities, all ? JavaCore.DEFAULT_TASK_PRIORITIES : \"\");", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskCaseSensitive, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_InlineJsr, enabled);", "+\t\t}", "-\t\t// Set options values", "-\t\toptionsMap.put(CompilerOptions.OPTION_LocalVariableAttribute, generate); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_LineNumberAttribute, generate);", "-\t\toptionsMap.put(CompilerOptions.OPTION_SourceFileAttribute, generate);", "-\t\toptionsMap.put(CompilerOptions.OPTION_PreserveUnusedLocal, preserve);", "-\t\toptionsMap.put(CompilerOptions.OPTION_DocCommentSupport, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecation, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedLocal, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameter, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoEffectAssignment, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportLocalVariableHiding, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportFieldHiding, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportEmptyStatement, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportAssertIdentifier, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryElse, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadoc, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTags, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocComments, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_TaskTags, all ? JavaCore.DEFAULT_TASK_TAGS : \"\");", "-\t\toptionsMap.put(CompilerOptions.OPTION_TaskPriorities, all ? JavaCore.DEFAULT_TASK_PRIORITIES : \"\");", "-\t\toptionsMap.put(CompilerOptions.OPTION_TaskCaseSensitive, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_InlineJsr, enabled);", "-\t\t", "-\t\t// Since 3.1 options", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingSerialVersion, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportEnumIdentifier, warning); ", "+\t\t// Ignore 3.1 options", "+\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingSerialVersion, CompilerOptions.IGNORE); ", "+\t\toptionsMap.put(CompilerOptions.OPTION_ReportEnumIdentifier, CompilerOptions.IGNORE); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26ef7f55a7a892d3d9e1463817f62cc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\tboolean didSpecifySource = false;", "+\t\t\tif (currentArg.equals(\"-1.5\")) { //$NON-NLS-1$", "+\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t\tmode = Default;", "+\t\t\t\tcontinue;", "+\t\t\t}\t\t\t", "+\t\t\t\t\t} else if (token.equals(\"unsafe\")) {//$NON-NLS-1$ ", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnsafeTypeOperation,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);", "+\t\t\t\t\t} else if (token.equals(\"finalBound\")) {//$NON-NLS-1$ ", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportFinalParameterBound,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);", "-\t\t\t\t\t} else if (token.equals(\"javadoc\")) {//$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"javadoc\")) {//$NON-NLS-1$ ", "+\t\t\t\tif (didSpecifyTarget) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateTarget\", currentArg));//$NON-NLS-1$", "+\t\t\t\t}\t\t\t\t", "-\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) <= ClassFileConstants.JDK1_3) {", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\t\t} else if (currentArg.equals(\"1.5\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t\tif (didSpecifySource) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateSource\", currentArg));//$NON-NLS-1$", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tdidSpecifySource = true;", "+\t\t\t\t} else if (currentArg.equals(\"1.5\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-", "-\t\t// target must be 1.4 if source is 1.4", "-\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_4", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_4", "-\t\t\t\t&& didSpecifyTarget){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource14\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$", "-\t\t}", "-", "-\t\t// target cannot be 1.4 if compliance is 1.3", "-\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) >= ClassFileConstants.JDK1_4", "-\t\t\t\t&& didSpecifyTarget){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "-\t\t}", "-\t\t// check and set compliance/source/target compatibilities", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)){", "-\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\tif (didSpecifyCompliance) {", "+\t\t\tObject version = this.options.get(CompilerOptions.OPTION_Compliance);", "+\t\t\tif (CompilerOptions.VERSION_1_3.equals(version)) {", "+\t\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "+\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\t\t} else if (CompilerOptions.VERSION_1_4.equals(version)) {", "+\t\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "+\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t} else if (CompilerOptions.VERSION_1_5.equals(version)) {", "+\t\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "+\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t}", "-\t\t// compliance must be 1.4 if source is 1.4", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t&& !this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource14\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\tif (didSpecifySource) {", "+\t\t\tObject version = this.options.get(CompilerOptions.OPTION_Source);", "+\t\t\t if (CompilerOptions.VERSION_1_4.equals(version)) {", "+\t\t\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t} else if (CompilerOptions.VERSION_1_5.equals(version)) {", "+\t\t\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t}", "+\t\t// check and set compliance/source/target compatibilities", "+\t\tif (didSpecifyTarget) {", "+\t\t\t// target must be 1.5 if source is 1.5", "+\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_5", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_5){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t}", "+\t   \t\t // target must be 1.4 if source is 1.4", "+\t   \t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_4", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_4){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t   \t\t}", "+\t\t\t// target cannot be greater than compliance level", "+\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform))){ ", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), (String)this.options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+", "+\t\t// compliance must be 1.5 if source is 1.5", "+\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)", "+\t\t\t\t&& !this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_5)){", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t} else ", "+\t\t\t// compliance must be 1.4 if source is 1.4", "+\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "+\t\t\t\t&& !this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t}", "+\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t\t}"]}], "num": 8996}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7dcc54c803507d0fb65b225871260908", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0749e7277fdaec73885a03adcac73def", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "0faf571a2b978290e761500f873fc8f116675788", "commitAfterChange": "16ea2a8daece1ce57aeee98ca0579c5d79d5f9c9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void abstractMethodMustBeImplemented(SourceTypeBinding type, MethodBinding abstractMethod)", "signatureAfterChange": " public void abstractMethodMustBeImplemented(SourceTypeBinding type, MethodBinding abstractMethod)", "diff": ["-\t\tnew String[] {", "-\t\t\tnew String(", "-\t\t\t\tCharOperation.concat(", "-\t\t\t\t\tabstractMethod.declaringClass.readableName(),", "-\t\t\t\t\tabstractMethod.readableName(),", "-\t\t\t\t\t'.'))},", "-\t\tnew String[] {", "-\t\t\tnew String(", "-\t\t\t\tCharOperation.concat(", "-\t\t\t\t\tabstractMethod.declaringClass.shortReadableName(),", "-\t\t\t\t\tabstractMethod.shortReadableName(),", "-\t\t\t\t\t'.'))},", "+\t\tnew String[] { ", "+\t\t        new String(abstractMethod.selector),", "+\t\t        typesAsString(abstractMethod.isVarargs(), abstractMethod.parameters, false), ", "+\t\t        new String(abstractMethod.declaringClass.readableName()), ", "+\t\t        new String(type.readableName()), ", "+\t\t},", "+\t\tnew String[] { ", "+\t\t        new String(abstractMethod.selector),", "+\t\t        typesAsString(abstractMethod.isVarargs(), abstractMethod.parameters, true), ", "+\t\t        new String(abstractMethod.declaringClass.shortReadableName()), ", "+\t\t        new String(type.shortReadableName()), ", "+\t\t},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "752820375bf682de6499aa893f4bc834", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "cab98b2b8859caae533ee4cfbe628b2265262135", "commitAfterChange": "2b49f89ec08ec07d960829d0eb3050d846fdb2ac", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["+\t\tcase ProblemReasons.ApplicableMethodOverriddenByInapplicable:", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tif (problemMethod.closestMatch != null) {", "+\t\t\t    shownMethod = problemMethod.closestMatch.original();", "+\t\t    }", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.ApplicableMethodOverriddenByInapplicable,", "+\t\t\t\tnew String[] {", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        typesAsString(shownMethod, false),", "+\t\t\t\t        new String(shownMethod.declaringClass.readableName()),", "+\t\t\t\t},", "+\t\t\t\tnew String[] {", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        typesAsString(shownMethod, true),", "+\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()),", "+\t\t\t\t},", "+\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t(int) messageSend.nameSourcePosition);", "+\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e8bf0f45e4e457bfb4899b1baf1a5c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "37d61d5c5c650829214bf858cd078e7d345a9a26", "commitAfterChange": "dd98852dd97e40bffde60b114dfaf133a2c50581", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["-\t\t\t", "+\t\tcase TypeArgumentsForRawGenericMethod :", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tshownMethod = problemMethod.closestMatch;", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.TypeArgumentsForRawGenericMethod ,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        parametersAsString(shownMethod.parameters, false), ", "+\t\t\t\t        new String(shownMethod.declaringClass.readableName()), ", "+\t\t\t\t        parametersAsString(method.parameters, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        parametersAsString(shownMethod.parameters, true), ", "+\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()), ", "+\t\t\t\t        parametersAsString(method.parameters, true) },", "+\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t(int) messageSend.nameSourcePosition);\t\t       ", "+\t\t\treturn;"]}], "num": 35645}
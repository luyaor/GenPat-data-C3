{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afb11814cc80d8abc70ecaf9a46750c0", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3048a676b2b85b307069fbdbecd201b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "5ecdad70bb6e2e1bbd5c5ec539acc885a5698c4e", "commitAfterChange": "7f8c41fdd4e487762406a2cb6aaa3aa1d260201c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind, AnnotationBinding [] annotations)", "signatureAfterChange": "  \tpublic WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind, AnnotationBinding [] annotations)", "diff": ["-\t\t// See explanation on misplaced annotations in getParameterizedType.", "-\t\tAnnotationBinding [] misplacedAnnotations = genericType.getTypeAnnotations();", "-\t\tif (misplacedAnnotations != null && misplacedAnnotations != Binding.NO_ANNOTATIONS) {", "-\t\t\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS)", "-\t\t\t\tthrow new IllegalStateException(); // cannot cut both ways.", "-\t\t\tannotations = misplacedAnnotations;", "-\t\t\tgenericType = (ReferenceBinding) this.unannotatedTypeSystem.getUnannotatedType(genericType);", "-\t\t}", "-\t\t// generic type is expected to come in unannotated, if it came in with any misattributed annotations, they have been duly re-attributed and it is unannotated now.\t", "+\t\tif (genericType.hasTypeAnnotations())", "+\t\t\tthrow new IllegalStateException();", "-\t\tTypeBinding keyType = getUnannotatedType(genericType);\t\t", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(keyType);  // promotes better instance sharing.", "+\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(genericType);  // promotes better instance sharing.", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo = new TypeBinding[4]);", "+\t\t\tthis.annotatedTypes.put(genericType, cachedInfo = new TypeBinding[4]);", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo);", "+\t\t\tthis.annotatedTypes.put(genericType, cachedInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c35fa1a8a4438232361ea0afdb45389", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "5ecdad70bb6e2e1bbd5c5ec539acc885a5698c4e", "commitAfterChange": "7f8c41fdd4e487762406a2cb6aaa3aa1d260201c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "signatureAfterChange": " \t \tpublic RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "diff": ["-\t\t// See explanation on misplaced annotations in getParameterizedType.", "-\t\tAnnotationBinding [] misplacedAnnotations = genericType.getTypeAnnotations();", "-\t\tif (misplacedAnnotations != null && misplacedAnnotations != Binding.NO_ANNOTATIONS) {", "-\t\t\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS)", "-\t\t\t\tthrow new IllegalStateException(); // cannot cut both ways.", "-\t\t\tannotations = misplacedAnnotations;", "-\t\t\tgenericType = (ReferenceBinding) this.unannotatedTypeSystem.getUnannotatedType(genericType);", "-\t\t}", "-\t\t// generic type is expected to come in unannotated, if it came in with any misattributed annotations, they have been duly re-attributed and it is unannotated now.\t", "+\t\tif (genericType.hasTypeAnnotations())", "+\t\t\tthrow new IllegalStateException();", "-\t\tTypeBinding keyType = getUnannotatedType(genericType);", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(keyType);", "+\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(genericType);", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo = new TypeBinding[4]);", "+\t\t\tthis.annotatedTypes.put(genericType, cachedInfo = new TypeBinding[4]);", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo);", "+\t\t\tthis.annotatedTypes.put(genericType, cachedInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afb585e3f24609529a4c97ba970693e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "5ecdad70bb6e2e1bbd5c5ec539acc885a5698c4e", "commitAfterChange": "7f8c41fdd4e487762406a2cb6aaa3aa1d260201c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "signatureAfterChange": "  \tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "diff": ["-\t\t/* When restoring annotations from class files, we encounter a situation where the generic type comes in attributed with the annotations that should", "-\t\t   really belong to the parameterized type that is being created just now. e.g @T List<String> => comes in as (@T List)<String>. The question really ", "-\t\t   is List being parameterized by String and then the resultant type is annotated or is \"@T List\" being parameterized with String ? We don't care one", "-\t\t   way or other except that we would want a uniform treatment. As a stop gap, we \"repair\" the situation here, so it is consistent with treatment of ", "-\t\t   type references in source code.", "-\t\t*/", "-\t\tAnnotationBinding [] misplacedAnnotations = genericType.getTypeAnnotations();", "-\t\tif (misplacedAnnotations != null && misplacedAnnotations != Binding.NO_ANNOTATIONS) {", "-\t\t\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS)", "-\t\t\t\tthrow new IllegalStateException(); // cannot cut both ways.", "-\t\t\tannotations = misplacedAnnotations;", "-\t\t\tgenericType = (ReferenceBinding) this.unannotatedTypeSystem.getUnannotatedType(genericType);", "-\t\t}", "-\t\t// generic type is expected to come in unannotated, if it came in with any misattributed annotations, they have been duly re-attributed and it is unannotated now.\t", "+\t\tif (genericType.hasTypeAnnotations())", "+\t\t\tthrow new IllegalStateException();", "-\t\tTypeBinding keyType = getUnannotatedType(genericType);", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(keyType); // promotes better instance sharing", "+\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(genericType);", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo = new TypeBinding[4]);", "+\t\t\tthis.annotatedTypes.put(genericType, cachedInfo = new TypeBinding[4]);", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo);", "+\t\t\tthis.annotatedTypes.put(genericType, cachedInfo);"]}], "num": 60533}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6efadf8bcba2c1015e15f908db3e9928", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33c4f097ac54f58a7667bf17954c2b4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "d32d841c2eb6f8ce13caef29b10e91882a28b77e", "commitAfterChange": "4e0764ea101fbf846e6a07a87eac2236fd29f236", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " protected void removeExistingChild(Key key, int index)", "signatureAfterChange": " protected void removeExistingChild(Key key, int index)", "diff": ["-\t\tif (this.affectedChildren.length < NEED_CHILD_INDEX)", "+\t\tint length = this.affectedChildren.length;", "+\t\tif (length < NEED_CHILD_INDEX)", "-\t\telse", "+\t\telse {", "+\t\t\tfor (int i = index; i < length; i++) {", "+\t\t\t\tthis.childIndex.put(new Key(this.affectedChildren[i].getElement()), i);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47d63ad0cf01fb27b7c73f3885502d4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTypeHierarchyTests.java", "commitBeforeChange": "f15f3a4daa4f7cbf363475bdb20d4707912f834f", "commitAfterChange": "1e2211eded7d5ae87dfcf507bb00676a5a81d8e9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void testPerfAllTypes() throws CoreException", "signatureAfterChange": "  \tpublic void testPerfAllTypes() throws CoreException", "diff": ["-\t// Do NOT forget that tests must start with \"testPerf\"", "-\t\ttagAsSummary(\"Type Hierarchy all types\", Dimension.CPU_TIME);", "+\t\ttagAsSummary(\"Type Hierarchy>All Types\", Dimension.CPU_TIME, true/*put in fingerprint*/);", "-\t\tstartMeasuring();", "-\t\tITypeHierarchy hierarchy = unit.getType(\"ASTNode\").newTypeHierarchy(null);", "-\t\tIType[] types = hierarchy.getAllClasses();", "-\t\tstopMeasuring();", "+", "+\t\t// warm-up", "+\t\tIType[] types = unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses();", "+\t\tint length = types.length;", "+", "+\t\t// Loop of measures", "+\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "+\t\t\tstartMeasuring();", "+//\t\t\tfor (int j=0; j<ITERATIONS_COUNT; j++) {", "+\t\t\t\tassertEquals(\"Unexpected classes number in hierarchy!\", length, unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses().length);", "+//\t\t\t}", "+\t\t\tstopMeasuring();", "+\t\t}", "+\t\t", "+\t\t// Commit measures", "-\t\t// store counter", "-\t\tCOUNTERS[0] = types.length;", "+", "+\t\t// Store counter", "+\t\tCOUNTERS[0] = length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee499cad479a7b904170732d18b81656", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "81400db64234d6cf1ce3b6a87a8f065ac6bd072f", "commitAfterChange": "72316be54b9086b28cc8ddca3e0761905b39515b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r private void addToResult(char[][] compoundName)", "signatureAfterChange": "\r private void addToResult(char[][] compoundName)", "diff": ["-\tif (this.result.length == this.resultIndex) {\r", "-\t\tSystem.arraycopy(this.result, 0, this.result = new char[this.resultIndex*2][][], 0, this.resultIndex);\r", "+\tint resultLength = this.result.length;\r", "+\tfor (int i = 0; i < resultLength; i++) {", "+\t\tif (CharOperation.equals(this.result[i], compoundName)) {\r", "+\t\t\t// already known\r", "+\t\t\treturn;\r", "+\t\t}", "+\t}\r", "+\tif (resultLength == this.resultIndex) {\r", "+\t\tSystem.arraycopy(\r", "+\t\t\tthis.result, \r", "+\t\t\t0, \r", "+\t\t\tthis.result = new char[resultLength*2][][], \r", "+\t\t\t0, \r", "+\t\t\tresultLength);\r"]}], "num": 59565}
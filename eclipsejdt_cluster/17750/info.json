{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42cd83784a1d656e665468d3beb4422b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f5f94650c33aefa0f24dd549cbba4eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames) {", "+private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames) {", "-\tTypeAnnotationWalker walker = getTypeAnnotationWalker(method.getTypeAnnotations());", "+\tITypeAnnotationWalker walker = getTypeAnnotationWalker(method.getTypeAnnotations());", "+\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) { // below 1.8, external annotations will be attached later", "+\t\t\twalker = binaryType.enrichWithExternalAnnotationsFor(walker, method, this.environment);", "+\t\t}", "+\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) { // below 1.8, external annotations will be attached later", "+\t\t\twalker = binaryType.enrichWithExternalAnnotationsFor(walker, method, this.environment);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff2da105660f7fb590fc57f409df987", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "580481ae11bd0f856242b0cf44caa66107bf550d", "commitAfterChange": "d08e87c35b21123010227cf2729df51d820e4d50", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames) {", "+private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames) {", "-\tTypeAnnotationWalker walker = getTypeAnnotationWalker(method.getTypeAnnotations());", "+\tITypeAnnotationWalker walker = getTypeAnnotationWalker(method.getTypeAnnotations());", "+\t\tif (walker == ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER && binaryType instanceof ClassFileReader) {// TODO: avoid cast? add method to IBinaryType?", "+\t\t\twalker = ((ClassFileReader)binaryType).getAnnotationsForMethod(method, methodDescriptor, this.environment);", "+\t\t}", "+\t\tif (walker == ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER && binaryType instanceof ClassFileReader) {// TODO: avoid cast? add method to IBinaryType?", "+\t\t\twalker = ((ClassFileReader)binaryType).getAnnotationsForMethod(method, methodSignature, this.environment);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecfbca28a8b64e7d91c6023d1afdf820", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  private void createFields(IBinaryField[] iFields, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "   private void createFields(IBinaryField[] iFields, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-private void createFields(IBinaryField[] iFields, long sourceLevel, char[][][] missingTypeNames) {", "+", "+private void createFields(IBinaryField[] iFields, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames) {", "-\t\t\t\tTypeAnnotationWalker walker = getTypeAnnotationWalker(binaryField.getTypeAnnotations()).toField();", "+\t\t\t\tITypeAnnotationWalker walker = getTypeAnnotationWalker(binaryField.getTypeAnnotations());", "+\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) { // below 1.8, external annotations will be attached later", "+\t\t\t\t\twalker = binaryType.enrichWithExternalAnnotationsFor(walker, iFields[i], this.environment);", "+\t\t\t\t}", "+\t\t\t\twalker = walker.toField();"]}], "num": 17750}
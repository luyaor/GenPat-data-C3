{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ed386473ec5a2f683f662c0fbbba386", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08f5a7440a780bdeaefb09053c559150", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\tif (CharOperation.equals(scope.enclosingSourceType().sourceName, selector)) {", "-\t\t\tscope.problemReporter().methodWithConstructorName(this);", "+\t\tif (CharOperation.equals(this.scope.enclosingSourceType().sourceName, selector)) {", "+\t\t\tthis.scope.problemReporter().methodWithConstructorName(this);", "+\t\t}", "+\t\t", "+\t\tif (this.typeParameters != null) {", "+\t\t\tfor (int i = 0, length = this.typeParameters.length; i < length; i++) {", "+\t\t\t\tthis.typeParameters[i].resolve(this.scope);", "+\t\t\t}", "-\t\tif (this.binding != null) {", "+\t\tcheckOverride: {", "+\t\t\tif (this.binding == null) break checkOverride;", "+\t\t\tif (this.scope.compilerOptions().sourceLevel < JDK1_5) break checkOverride;", "-\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) != 0 ", "-\t\t\t\t\t&& (bindingModifiers & AccOverriding) == 0) {", "-\t\t\t\t// claims to override, and doesn't actually do so", "-\t\t\t\tscope.problemReporter().methodMustOverride(this);", "-\t\t\t} else\tif ((this.binding.tagBits & TagBits.AnnotationOverride) == 0 ", "-\t\t\t\t\t\t&& (this.binding.declaringClass.modifiers & AccInterface) == 0", "-\t\t\t\t\t\t&& (bindingModifiers & (AccStatic|AccOverriding)) == AccOverriding", "-\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= JDK1_5) {", "+\t\t\tboolean hasOverrideAnnotation = (this.binding.tagBits & TagBits.AnnotationOverride) != 0;", "+\t\t\tboolean isInterfaceMethod = this.binding.declaringClass.isInterface();", "+\t\t\tif (hasOverrideAnnotation) {", "+\t\t\t\tif ((bindingModifiers & AccOverriding) == 0 || isInterfaceMethod)", "+\t\t\t\t\t// claims to override, and doesn't actually do so", "+\t\t\t\t\tthis.scope.problemReporter().methodMustOverride(this);\t\t\t\t\t", "+\t\t\t} else if (!isInterfaceMethod \t&& (bindingModifiers & (AccStatic|AccOverriding)) == AccOverriding) {", "-\t\t\t\tscope.problemReporter().missingOverrideAnnotation(this);", "+\t\t\t\tthis.scope.problemReporter().missingOverrideAnnotation(this);", "-\t\tswitch (scope.referenceType().kind()) {", "+\t\tswitch (this.scope.referenceType().kind()) {", "-\t\t\t\t\t\t\tscope.problemReporter().methodNeedBody(this);", "+\t\t\t\t\t\t\tthis.scope.problemReporter().methodNeedBody(this);", "-\t\t\t\t\t\tscope.problemReporter().methodNeedingNoBody(this);", "+\t\t\t\t\t\tthis.scope.problemReporter().methodNeedingNoBody(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c826848127b30c1ff1d6a6227dee826", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void resolveStatements()", "signatureAfterChange": " \tpublic void resolveStatements()", "diff": ["-\t\tif (!CharOperation.equals(scope.enclosingSourceType().sourceName, selector)){", "-\t\t\tscope.problemReporter().missingReturnType(this);", "+\t\tif (!CharOperation.equals(this.scope.enclosingSourceType().sourceName, selector)){", "+\t\t\tthis.scope.problemReporter().missingReturnType(this);", "+\t\tif (this.typeParameters != null) {", "+\t\t\tfor (int i = 0, length = this.typeParameters.length; i < length; i++) {", "+\t\t\t\tthis.typeParameters[i].resolve(this.scope);", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\t\tscope.problemReporter().annotationTypeDeclarationCannotHaveConstructor(this);", "+\t\t\tthis.scope.problemReporter().annotationTypeDeclarationCannotHaveConstructor(this);", "-\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "+\t\t\t\t\t\tthis.scope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "-\t\t\tscope.problemReporter().methodNeedBody(this);\t\t", "+\t\t\tthis.scope.problemReporter().methodNeedBody(this);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d93cca1cec7a422c2f6f51bef3b15a08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "183bd75c46b88010e052308e0b5a2ec9acc24639", "commitAfterChange": "70e7dc8284deadd5b37cb25d1eb08df1105ac893", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "diff": ["-\t\t\t", "-\t\tif (expectedType.isArrayType()) {", "+\t\tif (expectedType instanceof ArrayBinding) {", "-\t\t\tfor (int i = 0, length = expressions.length; i < length; i++) {", "-\t\t\t\tExpression expression = expressions[i];", "+\t\t\tfor (int i = 0, length = this.expressions.length; i < length; i++) {", "+\t\t\t\tExpression expression = this.expressions[i];", "-\t\t\treturn binding;", "+\t\t\treturn this.binding;", "-\t\tif (expressions == null) {", "+\t\tif (this.expressions == null) {", "-\t\t\tExpression currentExpression = expressions[0];", "-\t\t\twhile(currentExpression != null && currentExpression instanceof ArrayInitializer) {", "+\t\t\tExpression expression = this.expressions[0];", "+\t\t\twhile(expression != null && expression instanceof ArrayInitializer) {", "-\t\t\t\tExpression[] subExprs = ((ArrayInitializer) currentExpression).expressions;", "+\t\t\t\tExpression[] subExprs = ((ArrayInitializer) expression).expressions;", "-\t\t\t\t\tcurrentExpression = null;", "+\t\t\t\t\texpression = null;", "-\t\t\t\tcurrentExpression = ((ArrayInitializer) currentExpression).expressions[0];", "+\t\t\t\texpression = ((ArrayInitializer) expression).expressions[0];", "-\t\t\tif (currentExpression != null) {", "-\t\t\t\tleafElementType = currentExpression.resolveType(scope);", "+\t\t\tif (expression != null) {", "+\t\t\t\tleafElementType = expression.resolveType(scope);", "-\t\t\tTypeBinding probableTb = scope.createArrayType(leafElementType, dim);", "-\t\t\tscope.problemReporter().typeMismatchError(probableTb, expectedType, this);", "+\t\t\tthis.resolvedType = scope.createArrayType(leafElementType, dim);", "+\t\t\tif (expectedType != null)", "+\t\t\t\tscope.problemReporter().typeMismatchError(this.resolvedType, expectedType, this);", "+\t\t}", "+\t\t// fault-tolerance - resolve other expressions as well", "+\t\tfor (int i = 1, length = this.expressions.length; i < length; i++) {", "+\t\t\tExpression expression = this.expressions[i];", "+\t\t\tif (expression != null) {", "+\t\t\t\texpression.resolveType(scope)\t;", "+\t\t\t}"]}], "num": 18970}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cb4a4a0f490b5524130f018e854b76a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e0fc95764f83cae3df5dd2750978c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "035e81e22d7f5ffa0ef14b6015456b50ec72de9a", "commitAfterChange": "3d4c80327c4bd6f61a1ef852d9f8cb11ff6d9d62", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private int encloses(IPath path)", "signatureAfterChange": " private int indexOf(String path)", "diff": ["-private int encloses(IPath path) {", "+private int indexOf(String path) {", "-\t\t\tif (this.paths[i].isPrefixOf(path)) {", "+\t\t\tif (path.startsWith(this.paths[i])) {", "-\t\t\tIPath scopePath = this.paths[i];", "-\t\t\tif (scopePath.isPrefixOf(path) ", "-\t\t\t\t&& ((scopePath.segmentCount() == path.segmentCount() - 1)", "-\t\t\t\t\t|| (scopePath.segmentCount() == path.segmentCount()))) {", "+\t\t\tString scopePath = this.paths[i];", "+\t\t\tif (path.startsWith(scopePath) ", "+\t\t\t\t&& ((scopePath.length() == path.lastIndexOf('/'))", "+\t\t\t\t\t|| (scopePath.length() == path.length()))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ca148481e221ea82bd62c3c7ff82592", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/LineBreaksPreparator.java", "commitBeforeChange": "f3886d8ab47e0b5dc32179a8d3e8db45c6fe8498", "commitAfterChange": "6b66bca84f13c7e210ac53b9682e41436c31dce2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void handleBodyDeclarations(List<BodyDeclaration> bodyDeclarations)", "signatureAfterChange": "  \tprivate void handleBodyDeclarations(List<BodyDeclaration> bodyDeclarations)", "diff": ["-\t\t\t\tthis.tm.firstTokenIn(bodyDeclaration, -1).putLineBreaksBefore(", "-\t\t\t\t\t\tthis.options.blank_lines_before_first_class_body_declaration + 1);", "+\t\t\t\tputBlankLinesBefore(bodyDeclaration, this.options.blank_lines_before_first_class_body_declaration);", "-\t\t\t\tthis.tm.firstTokenIn(bodyDeclaration, -1).putLineBreaksBefore(blankLines + 1);", "+\t\t\t\tputBlankLinesBefore(bodyDeclaration, blankLines);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f4034601bcadffddad51f59e3db476f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "97440b391c635506f5f4a55bdf928fd939af0079", "commitAfterChange": "3fe624c67af16da435bfe838d515c72d7679da3e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "\t \tprivate  boolean isValidPackageNameForClass(String className)", "signatureAfterChange": " \tprivate  boolean isValidPackageNameForClass(String className)", "diff": ["+\t}", "+\t\t// use 1.7 as the source level as there are more valid identifiers in 1.7 mode", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=376673", "-\t\t\t\t\tClassFileConstants.JDK1_3/* sourceLevel */, null/* taskTag */, null/* taskPriorities */, true /* taskCaseSensitive */);", "+\t\t\t\t\tClassFileConstants.JDK1_7/* sourceLevel */, null/* taskTag */, null/* taskPriorities */, true /* taskCaseSensitive */);", "+\t\t", "-\t\t\tif (this.scanner.scanIdentifier() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\tif (isIdentifier()) {", "-\t\t\t\t\tif (this.scanner.scanIdentifier() != TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "+\t\t\t\t\tif (!isIdentifier()) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fa482875e07ce76a1df9832a0c1d620", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "commitAfterChange": "dfbfbdb005b6918ef7f4e0e8457536fa445ed30f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t\tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, ASTRewrite rewriter) throws JavaModelException", "signatureAfterChange": " \t\tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, ASTRewrite rewriter) throws JavaModelException", "diff": ["-\t\t\t\tString oldTypeName= oldName.substring(0, oldName.length() - 5); //TODO (jerome) should not hardcode extension length", "-\t\t\t\tString newTypeName= newName.substring(0, newName.length() - 5); //TODO (jerome) should not hardcode extension length", "+\t\t\t\tString oldTypeName= Util.getNameWithoutJavaLikeExtension(oldName);", "+\t\t\t\tString newTypeName= Util.getNameWithoutJavaLikeExtension(newName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ebdc8ab1f49920cf5f32caba9307da9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c9b41a51584b0a4b8cbae83e380daef609822331", "commitAfterChange": "9aae33cf4df26db9b564eb1fe45a0fac6f4a5ef5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tprivate void formatThrowsClause( \t\tAbstractMethodDeclaration methodDeclaration, \t\tboolean spaceBeforeComma, \t\tboolean spaceAfterComma)", "signatureAfterChange": " \t \tprivate void formatThrowsClause( \t\tAbstractMethodDeclaration methodDeclaration, \t\tboolean spaceBeforeComma, \t\tboolean spaceAfterComma)", "diff": ["-\t\t\t\t\tthrownExceptionsLength + 1, // throws is the first token", "+\t\t\t\t\tthrownExceptionsLength, // throws is the first token", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(throwsAlignment, i + 1);", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(throwsAlignment, i);", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(throwsAlignment, i + 1);", "-\t\t\t\t\t\tthis.scribe.alignFragment(throwsAlignment, i + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "614a5f4441490114be76128976999de7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "commitAfterChange": "dfbfbdb005b6918ef7f4e0e8457536fa445ed30f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, PackageFragment dest) throws JavaModelException", "signatureAfterChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, PackageFragment dest) throws JavaModelException", "diff": ["-\t\t\t\tString oldName = source.getElementName();", "-\t\t\t\toldName = oldName.substring(0, oldName.length() - 5); //TODO (jerome) should not hardcode extension length", "-\t\t\t\tString newName = newCUName;", "-\t\t\t\tnewName = newName.substring(0, newName.length() - 5); //TODO (jerome) should not hardcode extension length", "+\t\t\t\tString oldName = Util.getNameWithoutJavaLikeExtension(source.getElementName());", "+\t\t\t\tString newName = Util.getNameWithoutJavaLikeExtension(newCUName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "697fc234e9c4b54492e481c640cbf4e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/TestVerifier.java", "commitBeforeChange": "a430dcf4a558e1c36680a36ef4af1ace851e14d2", "commitAfterChange": "dce0303da6d0cbf1d565391873636c507bd68d3f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private boolean checkBuffers(String errorString, String outputString, String sourceFileName, String expectedSuccessOutputString)", "signatureAfterChange": " private boolean checkBuffers(String errorString, String outputString, String sourceFileName, String expectedSuccessOutputString)", "diff": ["-\tString platformIndependantOutputString = Util.convertToIndependantLineDelimiter(outputString);", "-\tif (expectedSuccessOutputString != null && (platformIndependantOutputString.indexOf(expectedSuccessOutputString) == -1", "-\t\t|| expectedSuccessOutputString.length() == 0 && platformIndependantOutputString.length() != 0)) {", "+\tString platformIndependantOutputString = Util.convertToIndependantLineDelimiter(outputString.trim());", "+\tif (expectedSuccessOutputString != null && !Util.convertToIndependantLineDelimiter(expectedSuccessOutputString).equals(platformIndependantOutputString)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4940e4b1ad7788c6648683d1c2a61dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/LineBreaksPreparator.java", "commitBeforeChange": "f3886d8ab47e0b5dc32179a8d3e8db45c6fe8498", "commitAfterChange": "6b66bca84f13c7e210ac53b9682e41436c31dce2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(CompilationUnit node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(CompilationUnit node)", "diff": ["-\t\t\t\tthis.tm.firstTokenIn(types.get(0), -1).putLineBreaksBefore(this.options.blank_lines_after_imports + 1);", "-\t\t\tfor (int i = 1; i < types.size(); i++) {", "-\t\t\t\tthis.tm.firstTokenIn(types.get(i), -1).putLineBreaksBefore(", "-\t\t\t\t\t\tthis.options.blank_lines_between_type_declarations + 1);", "-\t\t\t}", "+\t\t\t\tputBlankLinesBefore(types.get(0), this.options.blank_lines_after_imports);", "+\t\t\tfor (int i = 1; i < types.size(); i++)", "+\t\t\t\tputBlankLinesBefore(types.get(i), this.options.blank_lines_between_type_declarations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16182dfb024dc91d540aa5fa7d5bec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalJarDeltaTests.java", "commitBeforeChange": "e5768103d107f9b2dcb4a1b6e2eaa25ca6df9ded", "commitAfterChange": "cc753dfd5dc8aa2f0fd254c2b2605f03b1d3d8a6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void testExternalJarInternalExternalJar() throws CoreException, IOException", "signatureAfterChange": " public void testExternalJarInternalExternalJar() throws CoreException, IOException", "diff": ["-\t\tf = new File(externalFooPath.toString());", "+\t\tf = new File(externalFooPath.toOSString());", "-\t\tString deltaPath = externalFooPath.toOSString();", "-\t\tdeltaPath = Character.toUpperCase(deltaPath.charAt(0)) + deltaPath.substring(1);", "+\t\tString externalFooPathString = f.getCanonicalPath();", "-\t\t\t\"\t\"+deltaPath+\"[+]: {}\\n\"+", "+\t\t\t\"\t\"+externalFooPathString+\"[+]: {}\\n\"+", "-\t\t\t\"\t\"+deltaPath+\"[*]: {CONTENT | ARCHIVE CONTENT CHANGED}\"", "+\t\t\t\"\t\"+externalFooPathString+\"[*]: {CONTENT | ARCHIVE CONTENT CHANGED}\""]}], "num": 52024}
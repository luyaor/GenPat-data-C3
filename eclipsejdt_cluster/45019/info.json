{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddfa55a047b9ae080fa4ef8aa48f822f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75f3b56702de8720c27ffd570d942c1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BaseTypeBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean isCompatibleWith(TypeBinding right)", "signatureAfterChange": " \tpublic final boolean isCompatibleWith(TypeBinding right)", "diff": ["-\t\t\treturn this == NullBinding;", "+\t\t\treturn this == TypeBinding.NULL;", "-\t\t\tcase T_boolean :", "-\t\t\tcase T_byte :", "-\t\t\tcase T_char :", "+\t\t\tcase TypeIds.T_boolean :", "+\t\t\tcase TypeIds.T_byte :", "+\t\t\tcase TypeIds.T_char :", "-\t\t\tcase T_double :", "+\t\t\tcase TypeIds.T_double :", "-\t\t\t\t\tcase T_byte :", "-\t\t\t\t\tcase T_char :", "-\t\t\t\t\tcase T_short :", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\tcase T_float :", "+\t\t\t\t\tcase TypeIds.T_byte :", "+\t\t\t\t\tcase TypeIds.T_char :", "+\t\t\t\t\tcase TypeIds.T_short :", "+\t\t\t\t\tcase TypeIds.T_int :", "+\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\tcase TypeIds.T_float :", "-\t\t\tcase T_float :", "+\t\t\tcase TypeIds.T_float :", "-\t\t\t\t\tcase T_byte :", "-\t\t\t\t\tcase T_char :", "-\t\t\t\t\tcase T_short :", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\tcase T_long :", "+\t\t\t\t\tcase TypeIds.T_byte :", "+\t\t\t\t\tcase TypeIds.T_char :", "+\t\t\t\t\tcase TypeIds.T_short :", "+\t\t\t\t\tcase TypeIds.T_int :", "+\t\t\t\t\tcase TypeIds.T_long :", "-\t\t\tcase T_long :", "+\t\t\tcase TypeIds.T_long :", "-\t\t\t\t\tcase T_byte :", "-\t\t\t\t\tcase T_char :", "-\t\t\t\t\tcase T_short :", "-\t\t\t\t\tcase T_int :", "+\t\t\t\t\tcase TypeIds.T_byte :", "+\t\t\t\t\tcase TypeIds.T_char :", "+\t\t\t\t\tcase TypeIds.T_short :", "+\t\t\t\t\tcase TypeIds.T_int :", "-\t\t\tcase T_int :", "+\t\t\tcase TypeIds.T_int :", "-\t\t\t\t\tcase T_byte :", "-\t\t\t\t\tcase T_char :", "-\t\t\t\t\tcase T_short :", "+\t\t\t\t\tcase TypeIds.T_byte :", "+\t\t\t\t\tcase TypeIds.T_char :", "+\t\t\t\t\tcase TypeIds.T_short :", "-\t\t\tcase T_short :", "-\t\t\t\treturn (id == T_byte);", "+\t\t\tcase TypeIds.T_short :", "+\t\t\t\treturn (id == TypeIds.T_byte);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ce50497a95ab4d5faa6f9f8ca82c67a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding conditionType = condition.resolveTypeExpecting(scope, BooleanBinding);", "-\t\tcondition.computeConversion(scope, BooleanBinding, conditionType);", "+\t\tTypeBinding conditionType = condition.resolveTypeExpecting(scope, TypeBinding.BOOLEAN);", "+\t\tcondition.computeConversion(scope, TypeBinding.BOOLEAN, conditionType);", "-\t\t\t\t\tif (valueIfTrueType == NullBinding) {  // bool ? null : 12 --> Integer", "+\t\t\t\t\tif (valueIfTrueType == TypeBinding.NULL) {  // bool ? null : 12 --> Integer", "-\t\t\t\t\t} else if (valueIfFalseType == NullBinding) {  // bool ? 12 : null --> Integer", "+\t\t\t\t\t} else if (valueIfFalseType == TypeBinding.NULL) {  // bool ? 12 : null --> Integer", "-\t\t\t\t\t} else if (valueIfTrueType != NullBinding) {  // bool ? 12 : new Integer(12) --> int", "+\t\t\t\t\t} else if (valueIfTrueType != TypeBinding.NULL) {  // bool ? 12 : new Integer(12) --> int", "-\t\t\t\t\t} else if (valueIfFalseType != NullBinding) {  // bool ? new Integer(12) : 12 --> int", "+\t\t\t\t\t} else if (valueIfFalseType != TypeBinding.NULL) {  // bool ? new Integer(12) : 12 --> int", "-\t\t\tif (valueIfTrueType == BooleanBinding) {", "+\t\t\tif (valueIfTrueType == TypeBinding.BOOLEAN) {", "-\t\t\tif ((valueIfTrueType == ByteBinding && valueIfFalseType == ShortBinding)", "-\t\t\t\t|| (valueIfTrueType == ShortBinding && valueIfFalseType == ByteBinding)) {", "-\t\t\t\tvalueIfTrue.computeConversion(scope, ShortBinding, originalValueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, ShortBinding, originalValueIfFalseType);", "-\t\t\t\treturn this.resolvedType = ShortBinding;", "+\t\t\tif ((valueIfTrueType == TypeBinding.BYTE && valueIfFalseType == TypeBinding.SHORT)", "+\t\t\t\t|| (valueIfTrueType == TypeBinding.SHORT && valueIfFalseType == TypeBinding.BYTE)) {", "+\t\t\t\tvalueIfTrue.computeConversion(scope, TypeBinding.SHORT, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, TypeBinding.SHORT, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = TypeBinding.SHORT;", "-\t\t\tif ((valueIfTrueType == ByteBinding || valueIfTrueType == ShortBinding || valueIfTrueType == CharBinding)", "-\t\t\t\t\t&& (valueIfFalseType == IntBinding", "+\t\t\tif ((valueIfTrueType == TypeBinding.BYTE || valueIfTrueType == TypeBinding.SHORT || valueIfTrueType == TypeBinding.CHAR)", "+\t\t\t\t\t&& (valueIfFalseType == TypeBinding.INT", "-\t\t\tif ((valueIfFalseType == ByteBinding", "-\t\t\t\t\t|| valueIfFalseType == ShortBinding", "-\t\t\t\t\t|| valueIfFalseType == CharBinding)", "-\t\t\t\t\t&& (valueIfTrueType == IntBinding", "+\t\t\tif ((valueIfFalseType == TypeBinding.BYTE", "+\t\t\t\t\t|| valueIfFalseType == TypeBinding.SHORT", "+\t\t\t\t\t|| valueIfFalseType == TypeBinding.CHAR)", "+\t\t\t\t\t&& (valueIfTrueType == TypeBinding.INT", "-\t\t\t\tvalueIfTrue.computeConversion(scope, IntBinding, originalValueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, IntBinding, originalValueIfFalseType);", "-\t\t\t\treturn this.resolvedType = IntBinding;", "+\t\t\t\tvalueIfTrue.computeConversion(scope, TypeBinding.INT, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, TypeBinding.INT, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = TypeBinding.INT;", "-\t\t\t\tvalueIfTrue.computeConversion(scope, LongBinding, originalValueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, LongBinding, originalValueIfFalseType);", "-\t\t\t\treturn this.resolvedType = LongBinding;", "+\t\t\t\tvalueIfTrue.computeConversion(scope, TypeBinding.LONG, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, TypeBinding.LONG, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = TypeBinding.LONG;", "-\t\t\t\tvalueIfTrue.computeConversion(scope, FloatBinding, originalValueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, FloatBinding, originalValueIfFalseType);", "-\t\t\t\treturn this.resolvedType = FloatBinding;", "+\t\t\t\tvalueIfTrue.computeConversion(scope, TypeBinding.FLOAT, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, TypeBinding.FLOAT, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = TypeBinding.FLOAT;", "-\t\t\tvalueIfTrue.computeConversion(scope, DoubleBinding, originalValueIfTrueType);", "-\t\t\tvalueIfFalse.computeConversion(scope, DoubleBinding, originalValueIfFalseType);", "-\t\t\treturn this.resolvedType = DoubleBinding;", "+\t\t\tvalueIfTrue.computeConversion(scope, TypeBinding.DOUBLE, originalValueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, TypeBinding.DOUBLE, originalValueIfFalseType);", "+\t\t\treturn this.resolvedType = TypeBinding.DOUBLE;", "-\t\tif (valueIfTrueType.isBaseType() && valueIfTrueType != NullBinding) {", "+\t\tif (valueIfTrueType.isBaseType() && valueIfTrueType != TypeBinding.NULL) {", "-\t\t} else if (valueIfFalseType.isBaseType() && valueIfFalseType != NullBinding) {", "+\t\t} else if (valueIfFalseType.isBaseType() && valueIfFalseType != TypeBinding.NULL) {", "-\t\t\tif (valueIfTrueType == NullBinding) {", "+\t\t\tif (valueIfTrueType == TypeBinding.NULL) {", "-\t\t\t} else if (valueIfFalseType == NullBinding) {", "+\t\t\t} else if (valueIfFalseType == TypeBinding.NULL) {"]}], "num": 45019}
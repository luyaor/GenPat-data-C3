{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ec470bb3bd9ad9d879256768dd55a48", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96307f847df70402050d6ee393d0fe6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryTypeConverter.java", "commitBeforeChange": "0d26f33d2368616b169d9d0ce27616e4f15842d7", "commitAfterChange": "8cdc61b6b707bf96c21479c4f3fa2f70a5114782", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException", "signatureAfterChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException", "diff": ["-\t\t\tdecl.returnType = createTypeReference(Signature.toString(method.getReturnType()).toCharArray(), typeNames);", "+\t\t\tTypeReference typeReference = createTypeReference(Signature.toString(method.getReturnType()).toCharArray(), typeNames);", "+\t\t\tif (typeReference == null) return null;", "+\t\t\tdecl.returnType = typeReference;", "+\t\t\tif (typeReference == null) return null;", "-\t\t\t\tmethodDeclaration.thrownExceptions[i] =", "-\t\t\t\t\tcreateTypeReference(Signature.toString(exceptionTypeNames[i]).toCharArray(), typeNames);", "+\t\t\t\tTypeReference typeReference = createTypeReference(Signature.toString(exceptionTypeNames[i]).toCharArray(), typeNames);", "+\t\t\t\tif (typeReference == null) return null;", "+\t\t\t\tmethodDeclaration.thrownExceptions[i] = typeReference;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b3c4b1ebfb29edf4c4e38c6f51f958", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryTypeConverter.java", "commitBeforeChange": "991fd6e4b6634483ff414608784017adef86e93b", "commitAfterChange": "88f4789ab87b5741bd84f761926c87f3851c7700", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException", "diff": ["-\tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult) throws JavaModelException {", "+\tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException {", "-\t\t\tdecl.returnType = createTypeReference(Signature.toString(method.getReturnType()).toCharArray());", "+\t\t\tdecl.returnType = createTypeReference(Signature.toString(method.getReturnType()).toCharArray(), typeNames);", "-\t\t\tTypeReference typeReference = createTypeReference(Signature.toString(argumentTypeName).toCharArray());", "+\t\t\tTypeReference typeReference = createTypeReference(Signature.toString(argumentTypeName).toCharArray(), typeNames);", "-\t\t\t\t\tcreateTypeReference(Signature.toString(exceptionTypeNames[i]).toCharArray());", "+\t\t\t\t\tcreateTypeReference(Signature.toString(exceptionTypeNames[i]).toCharArray(), typeNames);"]}], "num": 14615}
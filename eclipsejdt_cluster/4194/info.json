{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a79deceb5b7096221bfce6b294b9b258", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0fe393034bf296f58801d3d441a99a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "be26f089c0f3f72db1f135f30599168ca702cc38", "commitAfterChange": "18117c19f72c2371b4731ee20c2330f8e794dc46", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "\r \t\r \tpublic InfixExpression convert(BinaryExpression expression)", "signatureAfterChange": "\r \t\r \tpublic InfixExpression convert(BinaryExpression expression)", "diff": ["-\t\tinfixExpression.setSourceRange(expression.sourceStart, expression.sourceEnd - expression.sourceStart + 1);\r", "-\t\t\t\t\tinfixExpression.setLeftOperand(convert(expression.left));\r", "+\t\t\t\t\tExpression leftExpression = convert(expression.left);\r", "+\t\t\t\t\tinfixExpression.setLeftOperand(leftExpression);\r", "+\t\t\t\t\tint startPosition = leftExpression.getStartPosition();\r", "+\t\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);\r", "-\t\t\t\tinfixExpression.setLeftOperand(convert(expression.left));\r", "+\t\t\t\tExpression leftExpression = convert(expression.left);\r", "+\t\t\t\tinfixExpression.setLeftOperand(leftExpression);\r", "+\t\t\t\tint startPosition = leftExpression.getStartPosition();\r", "+\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);\r", "-\t\t\t\tinfixExpression.setLeftOperand(convert(leftOperand));\r", "+\t\t\t\tExpression leftExpression = convert(leftOperand);\r", "+\t\t\t\tinfixExpression.setLeftOperand(leftExpression);\r", "+\t\t\t\tint startPosition = leftExpression.getStartPosition();\r", "+\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);\r", "-\t\tinfixExpression.setLeftOperand(convert(expression.left));\r", "+\t\tExpression leftExpression = convert(expression.left);\r", "+\t\tinfixExpression.setLeftOperand(leftExpression);\r", "+\t\tint startPosition = leftExpression.getStartPosition();\r", "+\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2dc87f4b9663c4f7ce61ab9ca15584d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b0e343630efd670bdc9f26e96e6e31fc42c27d54", "commitAfterChange": "420aa82752ec3e926a634ee4daaacddae8a8ab80", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \tpublic InfixExpression convert(BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(BinaryExpression expression)", "diff": ["-\tpublic InfixExpression convert(BinaryExpression expression) {", "+\tpublic Expression convert(BinaryExpression expression) {", "-\t\t\t\tif (((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID) {", "+\t\t\t\trightOperand = ((BinaryExpression) leftOperand).right;", "+\t\t\t\tif (((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID", "+\t\t\t\t || (rightOperand instanceof BinaryExpression && ((rightOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID)", "+\t\t\t\t || checkForParenthesis(leftOperand)) {", "-\t\t\t\trightOperand = ((BinaryExpression) leftOperand).right;", "-\t\t\t// check that the right operand wasn't a BinaryExpression", "-\t\t\tif (rightOperand instanceof BinaryExpression) {", "-\t\t\t\tinfixExpression.extendedOperands().clear();", "-\t\t\t\tExpression leftExpression = convert(expression.left);", "-\t\t\t\tinfixExpression.setLeftOperand(leftExpression);", "-\t\t\t\tinfixExpression.setRightOperand(convert(expression.right));", "-\t\t\t\tint startPosition = leftExpression.getStartPosition();", "-\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "-\t\t\t\treturn infixExpression;", "-\t\t\t} else {", "-\t\t\t\tExpression leftExpression = convert(leftOperand);", "-\t\t\t\tinfixExpression.setLeftOperand(leftExpression);", "-\t\t\t\tinfixExpression.setRightOperand((Expression)infixExpression.extendedOperands().remove(0));", "-\t\t\t\tint startPosition = leftExpression.getStartPosition();", "-\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "-\t\t\t\treturn infixExpression;", "-\t\t\t}", "+\t\t\tExpression leftExpression = convert(leftOperand);", "+\t\t\tinfixExpression.setLeftOperand(leftExpression);", "+\t\t\tinfixExpression.setRightOperand((Expression)infixExpression.extendedOperands().remove(0));", "+\t\t\tint startPosition = leftExpression.getStartPosition();", "+\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\treturn infixExpression;"]}], "num": 4194}
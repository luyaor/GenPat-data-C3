{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5498bf9dac4cb9c627a4ed8864455f13", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32534dd1d66047f83eec7caacd753932", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseFileManager.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic boolean handleOption(String current, Iterator<String> remaining)", "signatureAfterChange": " \tpublic boolean handleOption(String current, Iterator<String> remaining)", "diff": ["-\t\t\t\t\tfinal Iterable<? extends File> bootclasspaths = getBootclasspathFrom(remaining.next());", "+\t\t\t\t\tfinal Iterable<? extends File> bootclasspaths = getPathsFrom(remaining.next());", "-\t\t\t\t\tfinal Iterable<? extends File> classpaths = getClasspathFrom(remaining.next());", "+\t\t\t\t\tfinal Iterable<? extends File> classpaths = getPathsFrom(remaining.next());", "-\t\t\t\t\tfinal Iterable<? extends File> sourcepaths = getSourcepathFrom(remaining.next());", "+\t\t\t\t\tfinal Iterable<? extends File> sourcepaths = getPathsFrom(remaining.next());", "-\t\t\tif (\"-d\".equals(current)) {//$NON-NLS-1$", "+\t\t\tif (\"-d\".equals(current)) { //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tremaining.remove();", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (\"-s\".equals(current)) { //$NON-NLS-1$", "+\t\t\t\tremaining.remove(); // remove the current option", "+\t\t\t\tif (remaining.hasNext()) {", "+\t\t\t\t\tfinal Iterable<? extends File> outputDir = getOutputDir(remaining.next());", "+\t\t\t\t\tif (outputDir != null) {", "+\t\t\t\t\t\tsetLocation(StandardLocation.SOURCE_OUTPUT, outputDir);", "+\t\t\t\t\t}", "+\t\t\t\t\tremaining.remove();", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}\t\t\t\t", "+\t\t\t}", "+\t\t\tif (\"-processorpath\".equals(current) || \"-cp\".equals(current)) {//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\tremaining.remove(); // remove the current option", "+\t\t\t\tif (remaining.hasNext()) {", "+\t\t\t\t\tfinal Iterable<? extends File> processorpaths = getPathsFrom(remaining.next());", "+\t\t\t\t\tif (processorpaths != null) {", "+\t\t\t\t\t\tIterable<? extends File> iterable = getLocation(StandardLocation.ANNOTATION_PROCESSOR_PATH);", "+\t\t\t\t\t\tsetLocation(StandardLocation.ANNOTATION_PROCESSOR_PATH, ", "+\t\t\t\t\t\t\tprependFiles(iterable, processorpaths));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b78b1802c0ba291da3640a53065e4fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "commitAfterChange": "a502b956779c4dac7f761502999cc6d149ba7556", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 41, "signatureBeforeChange": " \t\t \t\tpublic void setLog(PrintWriter log)", "signatureAfterChange": "  \t\tpublic void setLog(String logFileName) throws InvalidInputException", "diff": ["-\t\t", "-\t\tpublic void setLog(PrintWriter log) {", "-\t\t\tthis.log = log;", "+", "+\t\tpublic void setLog(String logFileName) throws InvalidInputException {", "+\t\t\ttry {", "+\t\t\t\tthis.log = new PrintWriter(new FileOutputStream(logFileName, false));", "+\t\t\t\tint index = logFileName.lastIndexOf('.');", "+\t\t\t\tif (index != 0) {", "+\t\t\t\t\tif (logFileName.substring(index).toLowerCase().equals(\".xml\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tthis.isXml = true;", "+\t\t\t\t\t\tthis.log.println(XML_HEADER);", "+\t\t\t\t\t\tthis.log.println(XML_DTD_DECLARATION);", "+\t\t\t\t\t\tthis.tab = 0;", "+\t\t\t\t\t\tparameters.clear();", "+\t\t\t\t\t\tparameters.put(COMPILER_NAME, Main.bind(\"compiler.name\")); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\tparameters.put(COMPILER_VERSION, Main.bind(\"compiler.version\")); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\tparameters.put(COMPILER_COPYRIGHT, Main.bind(\"compiler.copyright\")); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\tthis.printTag(COMPILER, parameters, true, false);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (FileNotFoundException e) {", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.cannotOpenLog\")); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}], "num": 52847}
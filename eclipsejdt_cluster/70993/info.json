{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1249563e012f878e38e2c0843c9e250", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3da02220617780610138550f21d0e79c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic ArrayCreation convert(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression expression)", "signatureAfterChange": "  \tpublic ArrayCreation convert(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression expression)", "diff": ["+\t\t\tif (expression.annotationsOnDimensions != null) {", "+\t\t\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\t\t\tarrayType.setFlags(arrayType.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t} else {", "+\t\t\t\t\tsetArrayTypeAnnotationsAndSource(arrayType, expression.annotationsOnDimensions);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tarrayType = this.ast.newArrayType(type, dimensionsLength);", "-\t\t\tif (this.resolveBindings) {", "-\t\t\t\tcompleteRecord(arrayType, expression);", "-\t\t\t}", "-\t\t\tint start = type.getStartPosition();", "-\t\t\tint end = type.getStartPosition() + type.getLength();", "-\t\t\tint previousSearchStart = end - 1;", "-\t\t\tArrayType componentType = (ArrayType) type.getParent();", "-\t\t\tfor (int i = 0; i < dimensionsLength; i++) {", "-\t\t\t\tpreviousSearchStart = retrieveRightBracketPosition(previousSearchStart + 1, this.compilationUnitSourceLength);", "-\t\t\t\tcomponentType.setSourceRange(start, previousSearchStart - start + 1);", "-\t\t\t\tcomponentType = (ArrayType) componentType.getParent();", "-\t\t\t}", "-\t\t}", "-\t\tif (expression.annotationsOnDimensions != null) {", "-\t\t\tannotateType(arrayType, expression.annotationsOnDimensions);", "+\t\t\tarrayType = convertToArray(type, type.getStartPosition(), -1, dimensionsLength, expression.annotationsOnDimensions);", "-\t\t\trecordNodes(arrayType, expression);", "+\t\t\tcompleteRecord(arrayType, expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "862725fdad348a99dc36efb5b6b515c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3ef93f23afcd2f32a7f2e702fed5d9d29c70e752", "commitAfterChange": "a54ce0f1a5965500a06d345ce2b572137c5b2f38", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r \r \tpublic ArrayCreation convert(ArrayAllocationExpression expression)", "signatureAfterChange": "\r \r \tpublic ArrayCreation convert(ArrayAllocationExpression expression)", "diff": ["+\t\tif (this.resolveBindings) {\r", "+\t\t\trecordNodes(type, expression.type);\r", "+\t\t}\t\t\r", "+\t\t\tint start = type.getStartPosition();\r", "+\t\t\tint end = type.getStartPosition() + type.getLength();\r", "+\t\t\tint previousSearchStart = end;\r", "+\t\t\tArrayType componentType = (ArrayType) type.getParent();\r", "+\t\t\tfor (int i = 0; i < dimensionsLength; i++) {\r", "+\t\t\t\tpreviousSearchStart = retrieveRightBracketPosition(previousSearchStart + 1, this.compilationUnitSource.length);\r", "+\t\t\t\tcomponentType.setSourceRange(start, previousSearchStart - start + 1);\r", "+\t\t\t\tcomponentType = (ArrayType) componentType.getParent();\r", "+\t\t\t}\r", "+\t\tif (this.resolveBindings) {\r", "+\t\t\trecordNodes(arrayType, expression);\r", "+\t\t}\t\r"]}], "num": 70993}
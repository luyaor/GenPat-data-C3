{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81f5d3fe94cee337a805003fbbf87e77", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15c1097914f52bea9937162092eb7ab0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic MethodBinding getExactConstructor(TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic MethodBinding getExactConstructor(TypeBinding[] argumentTypes)", "diff": ["-\t\t\tnextMethod : for (int m = methods.length; --m >= 0;) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector == TypeConstants.INIT && method.parameters.length == argCount) {", "-\t\t\t\t\tTypeBinding[] toMatch = method.parameters;", "-\t\t\t\t\tfor (int p = 0; p < argCount; p++)", "-\t\t\t\t\t\tif (toMatch[p] != argumentTypes[p])", "-\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\treturn method;", "+\t\t\tlong range;", "+\t\t\tif ((range = ReferenceBinding.binarySearch(TypeConstants.INIT, this.methods)) >= 0) {", "+\t\t\t\tnextMethod: for (int imethod = (int)range, end = (int)(range >> 32); imethod <= end; imethod++) {", "+\t\t\t\t\tMethodBinding method = methods[imethod];\t\t\t", "+\t\t\t\t\tif (method.parameters.length == argCount) {", "+\t\t\t\t\t\tTypeBinding[] toMatch = method.parameters;", "+\t\t\t\t\t\tfor (int iarg = 0; iarg < argCount; iarg++)", "+\t\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\treturn method;", "+\t\t\t\t\t}", "-\t\t\tMethodBinding[] constructors = getMethods(TypeConstants.INIT); // takes care of duplicates & default abstract methods", "-\t\t\tnextConstructor : for (int c = constructors.length; --c >= 0;) {", "-\t\t\t\tMethodBinding constructor = constructors[c];", "-\t\t\t\tTypeBinding[] toMatch = constructor.parameters;", "+\t\t\tMethodBinding[] matchingMethods = getMethods(TypeConstants.INIT); // takes care of duplicates & default abstract methods", "+\t\t\tnextMethod : for (int m = matchingMethods.length; --m >= 0;) {", "+\t\t\t\tMethodBinding method = matchingMethods[m];", "+\t\t\t\tTypeBinding[] toMatch = method.parameters;", "-\t\t\t\t\t\t\tcontinue nextConstructor;", "-\t\t\t\t\treturn constructor;", "+\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\treturn method;", "-\t\t}", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dd1eb52550ee8377d92d54cdc1405c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-\t\tint selectorLength = selector.length;", "-\t\t\tnextMethod : for (int m = methods.length; --m >= 0;) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "+\t\t\tlong range;", "+\t\t\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\t\t\tnextMethod: for (int imethod = (int)range, end = (int)(range >> 32); imethod <= end; imethod++) {", "+\t\t\t\t\tMethodBinding method = methods[imethod];\t\t\t", "-\t\t\t\t\t\tfor (int p = 0; p < argCount; p++)", "-\t\t\t\t\t\t\tif (toMatch[p] != argumentTypes[p])", "+\t\t\t\t\t\tfor (int iarg = 0; iarg < argCount; iarg++)", "+\t\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])"]}], "num": 23524}
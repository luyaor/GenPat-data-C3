{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cf3c3d6bcab0d4989e799289f0aa42b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e6558f7073434d3a022b11a8cb0a7cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tlong sourceLevel = scope.compilerOptions().sourceLevel;", "+\tif (this.receiver.resolvedType != null)", "+\t\tthis.receiver.unresolve(); // some cleanup before second attempt", "-\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5; // typeChecks all arguments", "+\t\tboolean argHasError = sourceLevel < ClassFileConstants.JDK1_5; // typeChecks all arguments", "-\t\tTypeBinding argumentType;", "+\t\t\tif (this.arguments[i].resolvedType != null) ", "+\t\t\t\tthis.arguments[i].unresolve(); // some cleanup before second attempt", "-\t\t\tif ((argumentType = argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\t\tif (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)", "+\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && argument.isPolyExpression())", "-\tthis.binding = this.receiver.isImplicitThis()", "-\t\t\t? scope.getImplicitMethod(this.selector, argumentTypes, this)", "-\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this);", "-\t", "-\tif (polyExpressionSeen)", "-\t\tresolvePolyExpressionArguments(scope, this.binding, this.arguments, argumentTypes);", "+", "+\tfindMethodBinding(scope, argumentTypes, polyExpressionSeen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c68c43494a6e7eba2773ba8e4a42f59d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "commitAfterChange": "cbe2b622e81a27ceffd382724966e1dd065a9d5c", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t// Apply one level of filtering per poly expression more specific rules.", "-\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {", "+", "+\t\tboolean isJdk18 = compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "+\t\tif (isJdk18) {", "+\t\t\t// Apply one level of filtering per poly expression more specific rules.", "-\t\tfor (int i = 0; i < visibleSize; i++)", "-\t\t\tcompatibilityLevels[i] = parameterCompatibilityLevel(visible[i], argumentTypes);", "+\t\tfor (int i = 0; i < visibleSize; i++) {", "+\t\t\tTypeBinding[] argTypes = argumentTypes;", "+\t\t\tif (isJdk18 && invocationSite instanceof Invocation) {", "+\t\t\t\tInnerInferenceHelper innerInferenceHelper = ((Invocation)invocationSite).innerInferenceHelper();", "+\t\t\t\tif (innerInferenceHelper != null)", "+\t\t\t\t\targTypes = innerInferenceHelper.getArgumentTypesForCandidate(visible[i], argumentTypes);", "+\t\t\t}", "+\t\t\tcompatibilityLevels[i] = parameterCompatibilityLevel(visible[i], argTypes);", "+\t\t}"]}], "num": 25013}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "579ebcf1aa4170cf5bc1f777e7797eb6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "005ccf11243e72f88b20c4bd3b9714db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "62e6598ad525aedf54491e9cd53ee24a52fbe8f9", "commitAfterChange": "d0983045319f4deaedb594fb4398659a34901dc9", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testGetParameterTypes()", "signatureAfterChange": " public void testGetParameterTypes()", "diff": ["-\tString[] types= Signature.getParameterTypes(methodSig);", "-\tassertEquals(\"Signature#getParameterTypes is not correct1\", 3, types.length);", "-\tassertEquals(\"Signature#getParameterTypes is not correct2\", \"QObject;\", types[1]);", "+\tString[] parameterTypes = Signature.getParameterTypes(methodSig);", "+\tassertEquals(\"Signature#getParameterTypes is not correct1\", 3, parameterTypes.length);", "+\tassertEquals(\"Signature#getParameterTypes is not correct2\", \"QObject;\", parameterTypes[1]);", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "-\t\t\tSignature.getParameterTypes(methodSig).length);", "+\t\t\tparameterTypes.length);", "-\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\t\t\tparameterTypes[0]);", "-\t\t\tSignature.getParameterTypes(methodSig)[1]);", "+\t\t\tparameterTypes[1]);", "-\t\t\tSignature.getParameterTypes(methodSig)[2]);", "+\t\t\tparameterTypes[2]);", "-\t\t\tSignature.getParameterTypes(methodSig)[3]);", "+\t\t\tparameterTypes[3]);", "-\t\t\tSignature.getParameterTypes(methodSig)[4]);", "+\t\t\tparameterTypes[4]);", "-\t\t\tSignature.getParameterTypes(methodSig)[5]);", "+\t\t\tparameterTypes[5]);", "-\t\t\tSignature.getParameterTypes(methodSig)[6]);", "+\t\t\tparameterTypes[6]);", "-\t\t\tSignature.getParameterTypes(methodSig)[7]);", "+\t\t\tparameterTypes[7]);", "-\t\t\tSignature.getParameterTypes(methodSig)[8]);", "+\t\t\tparameterTypes[8]);", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "-\t\t\tSignature.getParameterTypes(methodSig).length);", "+\t\t\tparameterTypes.length);", "-\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\t\t\tparameterTypes[0]);", "-\t\t\tSignature.getParameterTypes(methodSig)[1]);", "+\t\t\tparameterTypes[1]);", "-\t\t\tSignature.getParameterTypes(methodSig)[2]);", "+\t\t\tparameterTypes[2]);", "-\t\t\tSignature.getParameterTypes(methodSig)[3]);", "+\t\t\tparameterTypes[3]);", "-\t\t\tSignature.getParameterTypes(methodSig)[4]);", "+\t\t\tparameterTypes[4]);", "-\t\t\tSignature.getParameterTypes(methodSig)[5]);", "+\t\t\tparameterTypes[5]);", "-\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "-\t\t\tSignature.getParameterTypes(methodSig).length);", "-\tassertEquals(\"Signature#getParameterTypes 6\", \"La;\",", "-\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1, parameterTypes.length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La;\", parameterTypes[0]);", "+\t", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "-\t\t\tSignature.getParameterTypes(methodSig).length);", "+\t\t\tparameterTypes.length);", "-\t\t\tSignature.getParameterTypes(methodSig)[0]);", "-\tmethodSig = \"(La/b/c<TE;>.d<TF;>;)V\";", "+\t\t\tparameterTypes[0]);", "+", "+\tmethodSig = \"(La.b.c<TE;>.d<TF;>;)V\";", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "-\t\t\tSignature.getParameterTypes(methodSig).length);", "-\tassertEquals(\"Signature#getParameterTypes 6\", \"La/b/c<TE;>.d<TF;>;\",", "-\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\t\t\tparameterTypes.length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La.b.c<TE;>.d<TF;>;\",", "+\t\t\tparameterTypes[0]);", "+", "+\t// signature with type variable", "+\tmethodSig = \"<TYPE:Ljava.lang.Object;>(Ljava.lang.Object;Ljava.lang.Class<TTYPE;>;)TTYPE;\";", "+\tparameterTypes = Signature.getParameterTypes(methodSig);", "+\tassertEquals(\"Signature#getParameterTypes 7\", 2,", "+\t\t\tparameterTypes.length);", "+\tassertEquals(\"Signature#getParameterTypes 7\", \"Ljava.lang.Object;\",", "+\t\t\tparameterTypes[0]);", "+\tassertEquals(\"Signature#getParameterTypes 7\", \"Ljava.lang.Class<TTYPE;>;\",", "+\t\t\tparameterTypes[1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c9f19fb29a121e05607a30f8dc7a78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testGetParameterTypes()", "signatureAfterChange": " public void testGetParameterTypes()", "diff": ["-\tassertTrue(\"Signature#getParameterTypes is not correct1\", types.length == 3);", "-\tassertTrue(\"Signature#getParameterTypes is not correct2\", types[1].equals(\"QObject;\"));", "+\tassertEquals(\"Signature#getParameterTypes is not correct1\", 3, types.length);", "+\tassertEquals(\"Signature#getParameterTypes is not correct2\", \"QObject;\", types[1]);", "-\t// tests with 1.5-specific elements", "-\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "-\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "-\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "-\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "-\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");", "-//\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist<Qstring;>;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "-//\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "-//\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "-//\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "-//\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");", "+\t// primitive types", "+\tmethodSig = \"(BCDFIJSVZ)V\";", "+\tassertEquals(\"Signature#getParameterTypes 4\", 9,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"B\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"C\",", "+\t\t\tSignature.getParameterTypes(methodSig)[1]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"D\",", "+\t\t\tSignature.getParameterTypes(methodSig)[2]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"F\",", "+\t\t\tSignature.getParameterTypes(methodSig)[3]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"I\",", "+\t\t\tSignature.getParameterTypes(methodSig)[4]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"J\",", "+\t\t\tSignature.getParameterTypes(methodSig)[5]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"S\",", "+\t\t\tSignature.getParameterTypes(methodSig)[6]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"V\",", "+\t\t\tSignature.getParameterTypes(methodSig)[7]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"Z\",", "+\t\t\tSignature.getParameterTypes(methodSig)[8]);", "+", "+\t// array types", "+\tmethodSig = \"([I[[J[[[B[Qstring;[Tv;[Lstring;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 5\", 6,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[I\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[[J\",", "+\t\t\tSignature.getParameterTypes(methodSig)[1]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[[[B\",", "+\t\t\tSignature.getParameterTypes(methodSig)[2]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[Qstring;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[3]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[Tv;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[4]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[Lstring;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[5]);", "+\t", "+\t// resolved types", "+\tmethodSig = \"(La;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tmethodSig = \"(La<TE;>;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La<TE;>;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tmethodSig = \"(La/b/c<TE;>.d<TF;>;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La/b/c<TE;>.d<TF;>;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+"]}], "num": 63189}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25810c15f5422ab643c727c2da8832b8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4818f8d0ade832ac5b7f30b2a9ad46d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic static Hashtable getOptions()", "signatureAfterChange": " \tpublic static Hashtable getOptions()", "diff": ["-\t\t", "-\t\tHashtable options = new Hashtable(10);", "-\t\t// see #initializeDefaultPluginPreferences() for changing default settings", "-\t\tPlugin plugin = getPlugin();", "-\t\tif (plugin != null) {", "-\t\t\tPreferences preferences = getPlugin().getPluginPreferences();", "-\t\t\tHashSet optionNames = JavaModelManager.getJavaModelManager().optionNames;", "-\t\t\t", "-\t\t\t// initialize preferences to their default", "-\t\t\tIterator iterator = optionNames.iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t    String propertyName = (String) iterator.next();", "-\t\t\t    options.put(propertyName, preferences.getDefaultString(propertyName));", "-\t\t\t}", "-\t\t\t// get preferences not set to their default", "-\t\t\tString[] propertyNames = preferences.propertyNames();", "-\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "-\t\t\t\tString propertyName = propertyNames[i];", "-\t\t\t\tString value = preferences.getString(propertyName).trim();", "-\t\t\t\tif (optionNames.contains(propertyName)){", "-\t\t\t\t\toptions.put(propertyName, value);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// get encoding through resource plugin", "-\t\t\toptions.put(CORE_ENCODING, getEncoding()); ", "-\t\t\t// backward compatibility", "-\t\t\toptions.put(COMPILER_PB_INVALID_IMPORT, ERROR);", "-\t\t\toptions.put(COMPILER_PB_UNREACHABLE_CODE, ERROR);", "+\t\t// init", "+\t\tHashtable options = new Hashtable(10);", "+\t\tHashSet optionNames = JavaModelManager.getJavaModelManager().optionNames;", "+\t\tIPreferencesService service = Platform.getPreferencesService();", "+", "+\t\t// set options using preferences service lookup", "+\t\tIterator iterator = optionNames.iterator();", "+\t\twhile (iterator.hasNext()) {", "+\t\t    String propertyName = (String) iterator.next();", "+\t\t    String propertyValue = service.get(propertyName, null, preferencesLookup);", "+\t\t    if (propertyValue != null) {", "+\t\t\t    options.put(propertyName, propertyValue);", "+\t\t    }", "+", "+\t\t// get encoding through resource plugin", "+\t\toptions.put(CORE_ENCODING, getEncoding()); ", "+", "+\t\t// backward compatibility", "+\t\toptions.put(COMPILER_PB_INVALID_IMPORT, ERROR);", "+\t\toptions.put(COMPILER_PB_UNREACHABLE_CODE, ERROR);", "+", "+\t\t// return built map"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82015eac2294b47ae986aefae7538ddb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "63e1f1decc43a525e62efd06af41afe94624af82", "commitAfterChange": "75e4065d4db8d1c67a280c4b46e8853fada67561", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["-\t\t", "-\t\t// Get cached preferences if exist", "-\t\tJavaModelManager.PerProjectInfo perProjectInfo = null;", "-\t\tif (inheritJavaCoreOptions) {", "-\t\t\ttry {", "-\t\t\t\tperProjectInfo = getPerProjectInfo();", "-\t\t\t\tif (perProjectInfo.options != null) {", "-\t\t\t\t\treturn new Hashtable(perProjectInfo.options);", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException jme) {", "-\t\t\t\t// skip", "-\t\t\t}", "-\t\t}", "-\t\tIEclipsePreferences projectPreferences= getEclipsePreferences();", "-\t\tif (projectPreferences == null) return options; // cannot do better (non-Java project)", "+\t\t// Get project specific options", "+\t\tJavaModelManager.PerProjectInfo perProjectInfo = null;", "+\t\tHashtable projectOptions = null;", "-\t\t", "-\t\t// project cannot hold custom preferences set to their default, as it uses CUSTOM_DEFAULT_OPTION_VALUE", "-", "-\t\t// get custom preferences not set to their default", "-\t\t\tString[] propertyNames = projectPreferences.keys();", "-\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "-\t\t\t\tString propertyName = propertyNames[i];", "-\t\t\t\tString value = projectPreferences.get(propertyName, null);", "-\t\t\t\tif (value != null && optionNames.contains(propertyName)){", "-\t\t\t\t\toptions.put(propertyName, value.trim());", "-\t\t\t\t}", "-\t\t\t}\t\t", "+\t\t\tperProjectInfo = getPerProjectInfo();", "+\t\t\tprojectOptions = perProjectInfo.options;", "+\t\t\tif (projectOptions == null) {", "+\t\t\t\t// get eclipse preferences", "+\t\t\t\tIEclipsePreferences projectPreferences= getEclipsePreferences();", "+\t\t\t\tif (projectPreferences == null) return options; // cannot do better (non-Java project)", "+\t\t\t\t// create project options", "+\t\t\t\tString[] propertyNames = projectPreferences.keys();", "+\t\t\t\tprojectOptions = new Hashtable(propertyNames.length);", "+\t\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "+\t\t\t\t\tString propertyName = propertyNames[i];", "+\t\t\t\t\tString value = projectPreferences.get(propertyName, null);", "+\t\t\t\t\tif (value != null && optionNames.contains(propertyName)){", "+\t\t\t\t\t\tprojectOptions.put(propertyName, value.trim());", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t", "+\t\t\t\t// cache project options", "+\t\t\t\tperProjectInfo.options = projectOptions;", "+\t\t\t}", "+\t\t} catch (JavaModelException jme) {", "+\t\t\tprojectOptions = new Hashtable();", "-\t\t\t// nothing to do", "+\t\t\tprojectOptions = new Hashtable();", "-\t\t// Cache computed map", "-\t\tif (perProjectInfo != null) {", "-\t\t\tperProjectInfo.options = options;", "+\t\t// Inherit from JavaCore options if specified", "+\t\tif (inheritJavaCoreOptions) {", "+\t\t\tIterator propertyNames = projectOptions.keySet().iterator();", "+\t\t\twhile (propertyNames.hasNext()) {", "+\t\t\t\tString propertyName = (String) propertyNames.next();", "+\t\t\t\tString propertyValue = (String) perProjectInfo.options.get(propertyName);", "+\t\t\t\tif (propertyValue != null && optionNames.contains(propertyName)){", "+\t\t\t\t\toptions.put(propertyName, propertyValue.trim());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn options;", "-\t\treturn options;", "+\t\treturn projectOptions;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de10fde2c5a66778de025ffeb243b2fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f08c46fb1026d88b9a2aa81335fad4d5823323f2", "commitAfterChange": "b080f0d7bae3add3e26aca56768f25b351884bac", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic static Hashtable getOptions()", "signatureAfterChange": " \tpublic static Hashtable getOptions()", "diff": ["-\t\tPreferences preferences = getPlugin().getPluginPreferences();", "-\t\tHashSet optionNames = JavaModelManager.OptionNames;", "-\t\t", "-\t\t// get preferences set to their default", "-\t\tString[] defaultPropertyNames = preferences.defaultPropertyNames();", "-\t\tfor (int i = 0; i < defaultPropertyNames.length; i++){", "-\t\t\tString propertyName = defaultPropertyNames[i];", "-\t\t\tif (optionNames.contains(propertyName)){", "-\t\t\t\toptions.put(propertyName, preferences.getDefaultString(propertyName));", "-\t\t\t}", "-\t\t}\t\t", "-\t\t// get preferences not set to their default", "-\t\tString[] propertyNames = preferences.propertyNames();", "-\t\tfor (int i = 0; i < propertyNames.length; i++){", "-\t\t\tString propertyName = propertyNames[i];", "-\t\t\tif (optionNames.contains(propertyName)){", "-\t\t\t\toptions.put(propertyName, preferences.getString(propertyName).trim());", "-\t\t\t}", "-\t\t}\t\t", "-\t\t// get encoding through resource plugin", "-\t\toptions.put(CORE_ENCODING, ResourcesPlugin.getEncoding());", "-", "+\t\tPlugin plugin = getPlugin();", "+\t\tif (plugin != null) {", "+\t\t\tPreferences preferences = getPlugin().getPluginPreferences();", "+\t\t\tHashSet optionNames = JavaModelManager.OptionNames;", "+\t\t\t", "+\t\t\t// get preferences set to their default", "+\t\t\tString[] defaultPropertyNames = preferences.defaultPropertyNames();", "+\t\t\tfor (int i = 0; i < defaultPropertyNames.length; i++){", "+\t\t\t\tString propertyName = defaultPropertyNames[i];", "+\t\t\t\tif (optionNames.contains(propertyName)){", "+\t\t\t\t\toptions.put(propertyName, preferences.getDefaultString(propertyName));", "+\t\t\t\t}", "+\t\t\t}\t\t", "+\t\t\t// get preferences not set to their default", "+\t\t\tString[] propertyNames = preferences.propertyNames();", "+\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "+\t\t\t\tString propertyName = propertyNames[i];", "+\t\t\t\tif (optionNames.contains(propertyName)){", "+\t\t\t\t\toptions.put(propertyName, preferences.getString(propertyName).trim());", "+\t\t\t\t}", "+\t\t\t}\t\t", "+\t\t\t// get encoding through resource plugin", "+\t\t\toptions.put(CORE_ENCODING, ResourcesPlugin.getEncoding());", "+\t\t}"]}], "num": 66370}
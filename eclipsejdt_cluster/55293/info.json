{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d27890fb67d24748c56bcb3898f60f41", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a494e12ee0cc33c1f35312f09b56d190", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 221, "signatureBeforeChange": " \tpublic void test0301_switch()", "signatureAfterChange": " public void test0801_switch()", "diff": ["-\t// null analysis -- switch", "-\tpublic void test0301_switch() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\tint k;\\n\" + ", "-\t\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\t\"\t\tObject o = null;\\n\" + ", "-\t\t\t\t\"\t\tswitch (k) {\\n\" + ", "-\t\t\t\t\"\t\t\tcase 0 :\\n\" + ", "-\t\t\t\t\"\t\t\t\to = new Object();\\n\" + ", "-\t\t\t\t\"\t\t\t\tbreak;\\n\" + ", "-\t\t\t\t\"\t\t\tdefault :\\n\" + ", "-\t\t\t\t\"\t\t\t\treturn;\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t\tif(o == null) { /* */\t}\\n\" + // complain: only get there through 0, o non null", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tif(o == null) { /* */\t}\\n\" + ", "-\t\t\t\"\t   ^\\n\" + ", "-\t\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}", "+// null analysis -- switch", "+public void test0801_switch() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\" int k;\\n\" + ", "+\t\t\t\" void foo() {\\n\" + ", "+\t\t\t\"   Object o = null;\\n\" + ", "+\t\t\t\"   switch (k) {\\n\" + ", "+\t\t\t\"     case 0 :\\n\" + ", "+\t\t\t\"       o = new Object();\\n\" + ", "+\t\t\t\"       break;\\n\" + ", "+\t\t\t\"     default :\\n\" + ", "+\t\t\t\"       return;\\n\" + ", "+\t\t\t\"   }\\n\" + ", "+\t\t\t\"   if(o == null) { /* */ }\\n\" + // complain: only get there through 0, o non null", "+\t\t\t\" }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"\tif(o == null) { /* */ }\\n\" + ", "+\t\t\"\t   ^\\n\" + ", "+\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c09911a8aa17e681d5af34923ade27a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/FlowAnalysisTest.java", "commitBeforeChange": "15a94ab3b4696b9a91478e597e9917a9f9bf6f55", "commitAfterChange": "13b381b7a61a1accd91cc69ca0442c11b12a7bba", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void _test036()", "signatureAfterChange": " public void test036()", "diff": ["-// variant", "-public void _test036() {", "-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"  void foo3() {\\n\" + ", "-\t\t\t\"    switch (1) {\\n\" + ", "-\t\t\t\"    case 0:\\n\" + ", "-\t\t\t\"      class Local {\\n\" + ", "-\t\t\t\"      }\\n\" + ", "-\t\t\t\"      ;\\n\" + ", "-\t\t\t\"    case 1:\\n\" + ", "-\t\t\t\"      new Local(); // should complain: Local undefined\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"  }\\n\" + ", "-\t\t\t\"}\",", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tnew Local(); // should complain: Local undefined\\n\" + ", "-\t\t\"\t    ^^^^^\\n\" + ", "-\t\t\"Local cannot be resolved to a type\\n\" + ", "-\t\t\"----------\\n\");", "+// variant - not a flow analysis issue per se, contrast with 34 and 35 above", "+public void test036() {", "+\tString src =", "+\t\t\"public class X {\\n\" + ", "+\t\t\"  void foo3() {\\n\" + ", "+\t\t\"    switch (1) {\\n\" + ", "+\t\t\"    case 0:\\n\" + ", "+\t\t\"      class Local {\\n\" + ", "+\t\t\"      }\\n\" + ", "+\t\t\"      ;\\n\" + ", "+\t\t\"    case 1:\\n\" + ", "+\t\t\"      new Local();\\n\" +  // complain for compliance >= 1.4", "+\t\t\"    }\\n\" + ", "+\t\t\"  }\\n\" + ", "+\t\t\"}\";", "+\tif (complianceLevel.compareTo(COMPLIANCE_1_3) <= 0) {", "+\t\tthis.runConformTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\tsrc", "+\t\t\t\t},", "+\t\t\t\t\"\"", "+\t\t\t);", "+\t} else {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\tsrc", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tnew Local();\\n\" + ", "+\t\t\t\"\t    ^^^^^\\n\" + ", "+\t\t\t\"Local cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}"]}], "num": 55293}
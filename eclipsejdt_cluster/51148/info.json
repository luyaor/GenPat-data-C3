{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c8a2cc2ba24cb01fff4c4c6b655317d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e80520c023ec57625593109f969b855", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t\treturn this.options.getSeverity(CompilerOptions.UnsafeTypeOperation);", "+\t\t\treturn this.options.getSeverity(CompilerOptions.UncheckedTypeOperation);", "-\t\t\treturn this.options.getSeverity(CompilerOptions.InconsistentNullCheck);", "+\t\t\treturn this.options.getSeverity(CompilerOptions.NullReference);", "+\t\tcase IProblem.BoxingConversion :", "+\t\tcase IProblem.UnboxingConversion :", "+\t\t\treturn this.options.getSeverity(CompilerOptions.Autoboxing);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cae96ef700e455d1f526e628b6b3098", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 51, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t\t", "-\t\t// all problems detected inside annotations are associated with a generic severity\t\t\t", "-//\t\tif (referenceContext.isProcessingAnnotation()) {", "-//\t\t\treturn this.options.getSeverity(CompilerOptions.AnnotationProblem);", "-//\t\t}", "-\t\t\t", "-\t\t// by default, all other problems are errors.", "+", "+\t\t// by default, if not annotation, then problems are errors.", "+\t\t\tif ((problemId & IProblem.Annotation) == IProblem.Annotation) {", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+\t\t\t}"]}], "num": 51148}
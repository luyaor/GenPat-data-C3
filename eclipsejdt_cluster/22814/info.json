{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ac83b48d3a9fc584b92f7d33cfe8096", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef3934dd3ddfca10419255cefbd99cc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "deab97e9d6d46862931efe9ba2f1c6c782f191e3", "commitAfterChange": "5da4e2969d847b90ef5747fa353d6487a9be6c2a", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\tfor (int i = 0, length = argumentTypes.length; i < length; i++) {", "-\t\t\t\tTypeBinding argumentType = argumentTypes[i];", "-\t\t\t\tif (argumentType.kind() != Binding.POLY_TYPE)", "-\t\t\t\t\tcontinue;", "-\t\t\t\t", "-\t\t\t\tfor (int j = 0; j < visibleSize; j++) {", "-\t\t\t\t\tfinal TypeBinding[] mbjParameters = visible[j].parameters;", "-\t\t\t\t\tfinal int mbjParametersLength = mbjParameters.length;", "-\t\t\t\t\tTypeBinding s = i < mbjParametersLength ? mbjParameters[i] : mbjParameters[mbjParametersLength - 1];", "-\t\t\t\t\tboolean sIsMoreSpecific = true;", "-\t\t\t\t\tfor (int k = 0; k < visibleSize; k++) {", "-\t\t\t\t\t\tif (j == k) continue;", "-\t\t\t\t\t\tfinal TypeBinding[] mbkParameters = visible[k].parameters;", "-\t\t\t\t\t\tfinal int mbkParametersLength = mbkParameters.length;", "+\t\t\tnextJ: for (int j = 0; j < visibleSize; j++) {", "+\t\t\t\tMethodBinding mbj = visible[j].original();", "+\t\t\t\tfinal TypeBinding[] mbjParameters = mbj.parameters;", "+\t\t\t\tfinal int mbjParametersLength = mbjParameters.length;", "+\t\t\t\tfor (int k = 0; k < visibleSize; k++) {", "+\t\t\t\t\tif (j == k) continue;", "+\t\t\t\t\tMethodBinding mbk = visible[k].original();", "+\t\t\t\t\tfinal TypeBinding[] mbkParameters = mbk.parameters;", "+\t\t\t\t\tfinal int mbkParametersLength = mbkParameters.length;", "+", "+\t\t\t\t\tfor (int i = 0, length = argumentTypes.length; i < length; i++) {", "+\t\t\t\t\t\tTypeBinding argumentType = argumentTypes[i];", "+\t\t\t\t\t\tif (argumentType.kind() != Binding.POLY_TYPE)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tTypeBinding s = i < mbjParametersLength ? mbjParameters[i] : mbjParameters[mbjParametersLength - 1];", "-\t\t\t\t\t\tif (!argumentType.sIsMoreSpecific(s,t)) { ", "-\t\t\t\t\t\t\tsIsMoreSpecific = false;", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tif (!argumentType.sIsMoreSpecific(s,t)) {", "+\t\t\t\t\t\t\tcontinue nextJ;", "-\t\t\t\t\tif (sIsMoreSpecific)", "-\t\t\t\t\t\tmoreSpecific[count++] = visible[j];", "+\t\t\t\tmoreSpecific[count++] = visible[j];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efafed0a7da0689b35e0c2121540b848", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "003491686c72056382b17a1410bd6c4b2d79bf5e", "commitAfterChange": "4d06a4f56325db8a10e4906ef01b4abfaea21af7", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\tnext:", "-\t\t\t\t\tfor (int j = 0; j < visibleSize; j++) {", "-\t\t\t\t\t\tfinal TypeBinding[] mbjParameters = visible[j].parameters;", "-\t\t\t\t\t\tfinal int mbjParametersLength = mbjParameters.length;", "-\t\t\t\t\t\tTypeBinding t = i < mbjParametersLength ? mbjParameters[i] : mbjParameters[mbjParametersLength - 1];", "-\t\t\t\t\t\tboolean tIsMoreSpecific = false;", "-\t\t\t\t\t\tfor (int k = 0; k < visibleSize; k++) {", "-\t\t\t\t\t\t\tif (j == k) continue;", "-\t\t\t\t\t\t\tfinal TypeBinding[] mbkParameters = visible[k].parameters;", "-\t\t\t\t\t\t\tfinal int mbkParametersLength = mbkParameters.length;", "-\t\t\t\t\t\t\tTypeBinding s = i < mbkParametersLength ? mbkParameters[i] : mbkParameters[mbkParametersLength - 1];", "-\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(t, s))", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\tif (!argumentType.sIsMoreSpecific(t,s)) ", "-\t\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t\ttIsMoreSpecific = true;", "+\t\t\t\t", "+\t\t\t\tfor (int j = 0; j < visibleSize; j++) {", "+\t\t\t\t\tfinal TypeBinding[] mbjParameters = visible[j].parameters;", "+\t\t\t\t\tfinal int mbjParametersLength = mbjParameters.length;", "+\t\t\t\t\tTypeBinding s = i < mbjParametersLength ? mbjParameters[i] : mbjParameters[mbjParametersLength - 1];", "+\t\t\t\t\tboolean sIsMoreSpecific = true;", "+\t\t\t\t\tfor (int k = 0; k < visibleSize; k++) {", "+\t\t\t\t\t\tif (j == k) continue;", "+\t\t\t\t\t\tfinal TypeBinding[] mbkParameters = visible[k].parameters;", "+\t\t\t\t\t\tfinal int mbkParametersLength = mbkParameters.length;", "+\t\t\t\t\t\tTypeBinding t = i < mbkParametersLength ? mbkParameters[i] : mbkParameters[mbkParametersLength - 1];", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(s, t))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (!argumentType.sIsMoreSpecific(s,t)) { ", "+\t\t\t\t\t\t\tsIsMoreSpecific = false;", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tif (tIsMoreSpecific)", "-\t\t\t\t\t\t\tmoreSpecific[count++] = visible[j];", "+\t\t\t\t\tif (sIsMoreSpecific)", "+\t\t\t\t\t\tmoreSpecific[count++] = visible[j];", "+\t\t\t\t}"]}], "num": 22814}
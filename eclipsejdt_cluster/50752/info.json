{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6f2b5ee2bc1e2379f65d0bd4448f796", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5879b63734e9b1bd990c0eb05615c110", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalCompletionProposal.java", "commitBeforeChange": "78489a1112068ad791184216a4e6b3439ea59739", "commitAfterChange": "44562039ccc53dd5301ff720c35ac750589a8412", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprotected char[][] findMethodParameterNames(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] paramPackageNames, char[][] paramTypeNames)", "signatureAfterChange": " \tprotected char[][] findMethodParameterNames(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] paramTypeNames)", "diff": ["+\t}", "+\tprotected char[][] findMethodParameterNames(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] paramTypeNames){", "+\t\tif(paramTypeNames == null || declaringTypeName == null) return null;", "+\t\tchar[] tName = CharOperation.concat(declaringTypePackageName,declaringTypeName,'.');", "+\t\t// default parameters name", "+\t\t\tparameterNames = createDefaultParameterNames(length);", "-\t", "-\tprotected char[][] findMethodParameterNames(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] paramPackageNames, char[][] paramTypeNames){", "-\t\tif(paramTypeNames == null) return null;", "-\t\t", "-\t\tchar[][] parameterNames = null;", "-\t\tint length = paramTypeNames.length;", "-\t\t", "-\t\tchar[] tName = CharOperation.concat(declaringTypePackageName,declaringTypeName,'.');", "-\t\tObject cachedType = this.completionEngine.typeCache.get(tName);", "-\t\t", "-\t\tIType type = null;", "-\t\tif(cachedType != null) {", "-\t\t\tif(cachedType != NO_ATTACHED_SOURCE && cachedType instanceof BinaryType) {", "-\t\t\t\ttype = (BinaryType)cachedType;", "-\t\t\t}", "-\t\t} else { ", "-\t\t\t// TODO (david) shouldn't it be NameLookup.ACCEPT_ALL ?", "-\t\t\ttype = this.nameLookup.findType(new String(tName), false, NameLookup.ACCEPT_CLASSES & NameLookup.ACCEPT_INTERFACES);", "-\t\t\tif(type instanceof BinaryType){", "-\t\t\t\tif(((BinaryType)type).getSourceMapper() != null) {", "-\t\t\t\t\tthis.completionEngine.typeCache.put(tName, type);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.completionEngine.typeCache.put(tName, NO_ATTACHED_SOURCE);", "-\t\t\t\t\ttype = null;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\ttype = null;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tif(type != null) {", "-\t\t\tString[] args = new String[length];", "-\t\t\tfor(int i = 0;\ti< length ; i++){", "-\t\t\t\tchar[] parameterType = CharOperation.concat(paramPackageNames[i],paramTypeNames[i],'.');", "-\t\t\t\targs[i] = Signature.createTypeSignature(parameterType,true);", "-\t\t\t}", "-\t\t\tIMethod method = type.getMethod(new String(selector),args);", "-\t\t\ttry{", "-\t\t\t\tparameterNames = new char[length][];", "-\t\t\t\tString[] params = method.getParameterNames();", "-\t\t\t\tfor(int i = 0;\ti< length ; i++){", "-\t\t\t\t\tparameterNames[i] = params[i].toCharArray();", "-\t\t\t\t}", "-\t\t\t} catch(JavaModelException e){", "-\t\t\t\tparameterNames = null;", "-\t\t\t}", "-\t\t}", "-\t\t// default parameters name", "-\t\tif(parameterNames == null) {", "-\t\t\tswitch (length) {", "-\t\t\t\tcase 0 :", "-\t\t\t\t\tparameterNames = new char[length][];", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 1 :", "-\t\t\t\t\tparameterNames = ARGS1;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 2 :", "-\t\t\t\t\tparameterNames = ARGS2;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 3 :", "-\t\t\t\t\tparameterNames = ARGS3;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 4 :", "-\t\t\t\t\tparameterNames = ARGS4;", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\tparameterNames = new char[length][];", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tparameterNames[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\t", "-\t\t}", "-\t\treturn parameterNames;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62c8d204acfe89d00e9248fdd46ac5af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalCompletionProposal.java", "commitBeforeChange": "24cf489e4c973e29dff7eade9d41897f72a37db0", "commitAfterChange": "f924ed86fe1dbe148077a9cade20b11e404ba89b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tprotected char[][] createDefaultParameterNames(int length)", "signatureAfterChange": " \t \tprotected char[][] findConstructorParameterNames(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] paramTypeNames)", "diff": ["+\t", "+\tprotected char[][] findConstructorParameterNames(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] paramTypeNames){", "+\t\tif(paramTypeNames == null || declaringTypeName == null) return null;", "-\tprotected char[][] createDefaultParameterNames(int length) {", "-\t\tchar[][] parameters;", "-\t\tswitch (length) {", "-\t\t\tcase 0 :", "-\t\t\t\tparameters = new char[length][];", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tparameters = ARGS1;", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tparameters = ARGS2;", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tparameters = ARGS3;", "-\t\t\t\tbreak;", "-\t\t\tcase 4 :", "-\t\t\t\tparameters = ARGS4;", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tparameters = new char[length][];", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tparameters[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\tchar[][] parameters = null;", "+\t\tint length = paramTypeNames.length;", "+", "+\t\tchar[] tName = CharOperation.concat(declaringTypePackageName,declaringTypeName,'.');", "+\t\tObject cachedType = this.completionEngine.typeCache.get(tName);", "+", "+\t\tIType type = null;", "+\t\tif(cachedType != null) {", "+\t\t\tif(cachedType != NO_ATTACHED_SOURCE && cachedType instanceof BinaryType) {", "+\t\t\t\ttype = (BinaryType)cachedType;", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// TODO (david) shouldn't it be NameLookup.ACCEPT_ALL ?", "+\t\t\tNameLookup.Answer answer = this.nameLookup.findType(new String(tName),", "+\t\t\t\tfalse,", "+\t\t\t\tNameLookup.ACCEPT_CLASSES & NameLookup.ACCEPT_INTERFACES,", "+\t\t\t\ttrue/* consider secondary types */,", "+\t\t\t\tfalse/* do NOT wait for indexes */,", "+\t\t\t\tfalse/*don't check restrictions*/,", "+\t\t\t\tnull);", "+\t\t\ttype = answer == null ? null : answer.type;", "+\t\t\tif(type instanceof BinaryType){", "+\t\t\t\tthis.completionEngine.typeCache.put(tName, type);", "+\t\t\t} else {", "+\t\t\t\ttype = null;", "+\t\t\t}", "+", "+\t\tif(type != null) {", "+\t\t\tString[] args = new String[length];", "+\t\t\tfor(int i = 0;\ti< length ; i++){", "+\t\t\t\targs[i] = new String(paramTypeNames[i]);", "+\t\t\t}", "+\t\t\tIMethod method = type.getMethod(new String(selector),args);", "+\t\t\t", "+\t\t\tif (this.hasNoParameterNamesFromIndex) {", "+\t\t\t\tIPackageFragmentRoot packageFragmentRoot = (IPackageFragmentRoot)type.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\t\tif (packageFragmentRoot.isArchive() ||", "+\t\t\t\t\t\tthis.completionEngine.openedBinaryTypes < OPENED_BYNARY_TYPES_THRESHOLD) {", "+\t\t\t\t\tSourceMapper mapper = ((JavaElement)method).getSourceMapper();", "+\t\t\t\t\tif (mapper != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tchar[][] paramNames = mapper.getMethodParameterNames(method);", "+\t\t\t\t\t", "+\t\t\t\t\t\t\t// map source and try to find parameter names", "+\t\t\t\t\t\t\tif(paramNames == null) {", "+\t\t\t\t\t\t\t\tif (!packageFragmentRoot.isArchive()) this.completionEngine.openedBinaryTypes++;", "+\t\t\t\t\t\t\t\tIBinaryType info = (IBinaryType) ((BinaryType) type).getElementInfo();", "+\t\t\t\t\t\t\t\tchar[] source = mapper.findSource(type, info);", "+\t\t\t\t\t\t\t\tif (source != null){", "+\t\t\t\t\t\t\t\t\tmapper.mapSource(type, source, info);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tparamNames = mapper.getMethodParameterNames(method);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif(paramNames != null) {", "+\t\t\t\t\t\t\t\tparameters = paramNames;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch(JavaModelException e){", "+\t\t\t\t\t\t\t//parameters == null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\ttry{", "+\t\t\t\t\tIBinaryMethod info = (IBinaryMethod) ((JavaElement)method).getElementInfo();", "+\t\t\t\t\tchar[][] argumentNames = info.getArgumentNames();", "+\t\t\t\t\tif (argumentNames != null && argumentNames.length == length) {", "+\t\t\t\t\t\tparameters = argumentNames;", "+\t\t\t\t\t}", "+\t\t\t\t} catch(JavaModelException e){", "+\t\t\t\t\t//parameters == null;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\ttry{", "+\t\t\t\t\tparameters = new char[length][];", "+\t\t\t\t\tString[] params = method.getParameterNames();", "+\t\t\t\t\tfor(int i = 0;\ti< length ; i++){", "+\t\t\t\t\t\tparameters[i] = params[i].toCharArray();", "+\t\t\t\t\t}", "+\t\t\t\t} catch(JavaModelException e){", "+\t\t\t\t\tparameters = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\t// default parameters name", "+\t\tif(parameters == null) {", "+\t\t\tparameters = CompletionEngine.createDefaultParameterNames(length);", "+\t\t}", "+"]}], "num": 50752}
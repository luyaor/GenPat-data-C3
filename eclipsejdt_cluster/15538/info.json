{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06cdc7cce177c841f04e1df5897f3b8b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e0b906b03fcdcffe466c45366216515", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "2cc831f9f10c3e24fea148434274a75abab8dd26", "commitAfterChange": "56054b620e1ac782aff2fc22f58c08767c873829", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void analyseCode( \t\tClassScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void analyseCode( \t\tClassScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\t\t\t// special test for empty methods that should return something", "-\t\t\t\t\tif ((statements == null) && (returnType != VoidBinding)) {", "-\t\t\t\t\t\tscope.problemReporter().shouldReturn(returnType, this);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscope.problemReporter().shouldReturn(", "-\t\t\t\t\t\t\treturnType,", "-\t\t\t\t\t\t\tstatements[statements.length - 1]);", "-\t\t\t\t\t}", "+\t\t\t\t\tscope.problemReporter().shouldReturn(returnType, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8daa4ee48fba02f1a67b6a89f14f45c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocReturnStatement.java", "commitBeforeChange": "a283419708f25fe1336a00a0cfc8b4d7ffdb4ea6", "commitAfterChange": "78df60c293834e15ab5138d21694328394cc129c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\tif (this.description != null) {", "-\t\t\t\tscope.problemReporter().javadocUnexpectedTag(this.sourceStart, this.sourceEnd);", "-\t\t\t}", "-\t\t}", "-\t\telse{", "-\t\t\tif (this.description == null) {", "-\t\t\t\tscope.problemReporter().javadocInvalidReturnTag(this.sourceStart, this.sourceEnd, true);", "-\t\t\t}", "+\t\t\tscope.problemReporter().javadocUnexpectedTag(this.sourceStart, this.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d98c1245203f04f0c9c80b38f65c6a53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "8f26d11c4ba332f2be7ec8dbf571250694ed7207", "commitAfterChange": "43a0c55f94ed86f30ef95f5f1ba26a35207a73d3", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic boolean match(Javadoc node, Object other)", "signatureAfterChange": " \tpublic boolean match(Javadoc node, Object other)", "diff": ["-\t\t// for backwards compatibility, treat the deprecated comment string", "-\t\t// and the new list of tags as separate properties, and", "-\t\t// compare both", "-\t\tif (compareDeprecatedComment(node, o)) {", "-\t\t\tif (node.tags().size() > 0 && o.tags().size() > 0) {", "-\t\t\t\treturn safeSubtreeListMatch(node.tags(), o.tags());", "-\t\t\t} else {", "-\t\t\t\treturn true;", "-\t\t\t}", "+\t\tif (this.matchDocTags) {", "+\t\t\treturn safeSubtreeListMatch(node.tags(), o.tags());", "+\t\t} else {", "+\t\t\treturn compareDeprecatedComment(node, o);", "-\t\treturn false;"]}], "num": 15538}
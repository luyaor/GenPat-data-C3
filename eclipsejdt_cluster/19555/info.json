{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f22e556d49e92b99857f11c618fa18a4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7372786aac21409e27d826215dee26e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DefaultBytecodeVisitor.java", "commitBeforeChange": "d01bd30b2c1c81a666d411511a64de9d1ca823b7", "commitAfterChange": "ad8944ba8706757e37dc2af79b4fac14d5ba14dd", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate String getLocalVariableName(int i)", "signatureAfterChange": " \tprivate String getLocalVariableName(int pc, int index)", "diff": ["-\tprivate String getLocalVariableName(int i) {", "-\t\tString localVariableName = null;", "-\t\tif (this.hashMap != null) {", "-\t\t\tif (i < 4) {", "-\t\t\t\tlocalVariableName = (String) this.hashMap.get(INDEXES[i]);", "-\t\t\t} else {", "-\t\t\t\tlocalVariableName = (String) this.hashMap.get(new Integer(i));", "-\t\t\t}", "-\t\t}", "-\t\tif (localVariableName == null) {", "-\t\t\tlocalVariableName = Util.bind(\"disassembler.localvariablename\", Integer.toString(i)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t}", "+\tprivate String getLocalVariableName(int pc, int index) {", "+        int nextPC = pc + 1;", "+        switch(index) {", "+            case 0 :", "+            case 1 :", "+            case 2 :", "+            case 3 :", "+                break;", "+            default :", "+                nextPC = index <= 255 ? pc + 2 : pc + 3;", "+        }        ", "+        ", "+        for (int i = 0, max = this.localVariableAttributeLength; i < max; i++) {", "+            final ILocalVariableTableEntry entry = this.localVariableTableEntries[i];", "+            final int startPC = entry.getStartPC();", "+            if (entry.getIndex() == index && (startPC <= nextPC) && ((startPC + entry.getLength()) > nextPC)) {", "+                return new String(entry.getName());", "+            }", "+        }", "+\t\tString localVariableName = Util.bind(\"disassembler.localvariablename\", Integer.toString(index)); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf4403dee3517501eda801a918432466", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected IJavaElement[] getUnqualifiedMethodHandle(IMethod method, boolean noDollar)", "signatureAfterChange": " \tprotected IJavaElement[] getUnqualifiedMethodHandle(IMethod method, boolean noDollar)", "diff": ["-\t\t\tif (qualifiedName.charAt(count) == Signature.C_RESOLVED) {", "+\t\t\tchar currentChar = qualifiedName.charAt(count);", "+\t\t\tif (currentChar == Signature.C_RESOLVED || currentChar == Signature.C_TYPE_VARIABLE) {", "-\t\t\t\tif(!noDollar) {", "-\t\t\t\t\tif(!hasDollar && simpleName.indexOf('$') != -1) {", "-\t\t\t\t\t\thasDollar = true;", "+\t\t\t\tint lastDollar = simpleName.lastIndexOf('$');", "+\t\t\t\thasDollar |= lastDollar != -1;", "+\t\t\t\tint start = noDollar ? lastDollar + 1 : 0;", "+\t\t\t\tboolean sigStart = false;", "+\t\t\t\tfor (int j = start, length = simpleName.length(); j < length; j++) {", "+\t\t\t\t\tchar current = simpleName.charAt(j);", "+\t\t\t\t\tswitch (current) {", "+\t\t\t\t\t\tcase Signature.C_SUPER:", "+\t\t\t\t\t\tcase Signature.C_EXTENDS:", "+\t\t\t\t\t\tcase Signature.C_GENERIC_START:", "+\t\t\t\t\t\tcase Signature.C_NAME_END:", "+\t\t\t\t\t\t\tunqualifiedName.append(current);", "+\t\t\t\t\t\t\tsigStart = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tif (sigStart) {", "+\t\t\t\t\t\t\t\tif (current == Signature.C_TYPE_VARIABLE) {", "+\t\t\t\t\t\t\t\t\tunqualifiedName.append(Signature.C_UNRESOLVED);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tunqualifiedName.append(current);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tsigStart = false;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tunqualifiedName.append(current);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tunqualifiedName.append(simpleName);", "-\t\t\t\t} else {", "-\t\t\t\t\tunqualifiedName.append(CharOperation.lastSegment(simpleName.toCharArray(), '$'));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5798d350719e7220e4c4c5bb7ebff3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation, int stateIndex, LocalVariableBinding secretLocal)", "signatureAfterChange": " public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation, int stateIndex, LocalVariableBinding secretLocal)", "diff": ["+\tint resourceCount = this.resources.length;", "+\tif (resourceCount > 0) {", "+\t\tfor (int i = resourceCount; i > 0; --i) {", "+\t\t\t// Disarm the handlers and take care of resource closure.", "+\t\t\tthis.resourceExceptionLabels[i].placeEnd();", "+\t\t\tLocalVariableBinding localVariable = this.resources[i-1].binding;", "+\t\t\tBranchLabel exitLabel = new BranchLabel(codeStream);", "+\t\t\tint invokeCloseStartPc = codeStream.position; // https://bugs.eclipse.org/bugs/show_bug.cgi?id=343785", "+\t\t\tcodeStream.load(localVariable);", "+\t\t\tcodeStream.ifnull(exitLabel);", "+\t\t\tcodeStream.load(localVariable);", "+\t\t\tcodeStream.invokeAutoCloseableClose(localVariable.type);", "+\t\t\tcodeStream.recordPositionsFrom(invokeCloseStartPc, this.tryBlock.sourceEnd);", "+\t\t\texitLabel.place();", "+\t\t}", "+\t\t// Reinstall handlers", "+\t\tfor (int i = resourceCount; i > 0; --i) {", "+\t\t\tthis.resourceExceptionLabels[i].placeStart();", "+\t\t}", "+\t}", "+", "-\t\t\tif (this.naturalExitMergeInitStateIndex != -1 || stateIndex != -1) {", "-\t\t\t\t// reset initialization state, as for a normal catch block", "-\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "-\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (this.naturalExitMergeInitStateIndex != -1) {", "-\t\t\t\t// reset initialization state, as for a normal catch block", "-\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "-\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "-\t\t\t}"]}], "num": 19555}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10fbe02f3c940c79f49166c9daa0f7ef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bd362432fc66e8dd644e01f28b88348", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "33bcc97ba28fd6319a8c922b4f8d989e4aab5311", "commitAfterChange": "fe8f03030c996e7f3abaa101bf62fc6c88122090", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private FlowInfo prepareCatchInfo(FlowInfo flowInfo, ExceptionHandlingFlowContext handlingContext, FlowInfo tryInfo, int i)", "signatureAfterChange": " private FlowInfo prepareCatchInfo(FlowInfo flowInfo, ExceptionHandlingFlowContext handlingContext, FlowInfo tryInfo, int i)", "diff": ["-\t\tif ((handlingContext.tagBits & (FlowContext.DEFER_NULL_DIAGNOSTIC | FlowContext.PREEMPT_NULL_DIAGNOSTIC))", "-\t\t\t\t== FlowContext.DEFER_NULL_DIAGNOSTIC)", "-\t\t{", "-\t\t\t// if null diagnostics are being deferred, initsOnException are incomplete,", "-\t\t\t// need to start with the more accurate upstream flowInfo", "-\t\t\tcatchInfo =", "-\t\t\t\tflowInfo.unconditionalCopy()", "-\t\t\t\t\t.addPotentialInitializationsFrom(initsOnException)", "-\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\ttryInfo.unconditionalCopy())", "-\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnReturn.nullInfoLessUnconditionalCopy());\t\t\t\t\t\t", "-\t\t} else {", "-\t\t\t// here initsOnException are precise, so use them as the only source for null information into the catch block:", "-\t\t\tcatchInfo =", "-\t\t\t\tflowInfo.nullInfoLessUnconditionalCopy()", "-\t\t\t\t\t.addPotentialInitializationsFrom(initsOnException)", "-\t\t\t\t\t.addNullInfoFrom(initsOnException)", "-\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "-\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnReturn.nullInfoLessUnconditionalCopy());", "-\t\t}", "+\t\tcatchInfo =", "+\t\t\tflowInfo.nullInfoLessUnconditionalCopy()", "+\t\t\t\t.addPotentialInitializationsFrom(initsOnException)", "+\t\t\t\t.addNullInfoFrom(initsOnException) // <<== Null info only from here!", "+\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "+\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\thandlingContext.initsOnReturn.nullInfoLessUnconditionalCopy());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9595ab7ce5dec27a77ee212e3640b447", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "commitAfterChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tif (   (this.binding.tagBits & TagBits.AnnotationNonNull) != 0", "-\t\t&& nullStatus != FlowInfo.NON_NULL)", "-\t{", "-\t\tcurrentScope.problemReporter().possiblyNullToNonNullLocal(this.name, this.initialization, ", "-\t\t\t\t\tnullStatus, currentScope.environment().globalOptions.nonNullAnnotationName);", "-\t\tnullStatus = FlowInfo.NON_NULL; // from now on assume we adhere to the contract", "-\t}\t\t"]}], "num": 67101}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ab5b396e1e692ec66cff33629e51359", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c0341bfb17a212d7b7e34e04f690fe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "1f16b07138a4ff3970eb777fe51b4defd3508931", "commitAfterChange": "30166c06d6dd51fd7dbca34d0d55442f8ed395c4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void generateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": " \tpublic void generateCode(ClassScope classScope, ClassFile classFile)", "diff": ["+\t\tboolean restart = false;", "+\t\tboolean abort = false;", "-\t\ttry {", "-\t\t\tproblemResetPC = classFile.contentsOffset;", "-\t\t\tthis.generateCode(classFile);", "-\t\t} catch (AbortMethod e) {", "-\t\t\t// a fatal error was detected during code generation, need to restart code gen if possible", "-\t\t\tif (e.compilationResult == CodeStream.RESTART_IN_WIDE_MODE) {", "-\t\t\t\t// a branch target required a goto_w, restart code gen in wide mode.", "-\t\t\t\ttry {", "+\t\tdo {", "+\t\t\ttry {", "+\t\t\t\tproblemResetPC = classFile.contentsOffset;", "+\t\t\t\tthis.generateCode(classFile);", "+\t\t\t\trestart = false;", "+\t\t\t} catch (AbortMethod e) {", "+\t\t\t\t// a fatal error was detected during code generation, need to restart code gen if possible", "+\t\t\t\tif (e.compilationResult == CodeStream.RESTART_IN_WIDE_MODE) {", "+\t\t\t\t\t// a branch target required a goto_w, restart code gen in wide mode.", "+\t\t\t\t\tif (!restart) {", "+\t\t\t\t\t\tclassFile.contentsOffset = problemResetPC;", "+\t\t\t\t\t\tclassFile.methodCount--;", "+\t\t\t\t\t\tclassFile.codeStream.resetInWideMode(); // request wide mode", "+\t\t\t\t\t\trestart = true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// after restarting in wide mode, code generation failed again", "+\t\t\t\t\t\t// report a problem", "+\t\t\t\t\t\trestart = false;", "+\t\t\t\t\t\tabort = true;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (e.compilationResult == CodeStream.RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE) {", "-\t\t\t\t\tclassFile.codeStream.resetInWideMode(); // request wide mode", "-\t\t\t\t\tthis.generateCode(classFile); // restart method generation", "-\t\t\t\t} catch (AbortMethod e2) {", "-\t\t\t\t\tint problemsLength;", "-\t\t\t\t\tCategorizedProblem[] problems =", "-\t\t\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getAllProblems();", "-\t\t\t\t\tCategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];", "-\t\t\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);", "-\t\t\t\t\tclassFile.addProblemMethod(this, this.binding, problemsCopy, problemResetPC);", "+\t\t\t\t\tclassFile.codeStream.resetForCodeGenUnusedLocals();", "+\t\t\t\t\trestart = true;", "+\t\t\t\t} else {", "+\t\t\t\t\trestart = false;", "+\t\t\t\t\tabort = true; ", "-\t\t\t} else {", "-\t\t\t\t// produce a problem method accounting for this fatal error", "-\t\t\t\tint problemsLength;", "-\t\t\t\tCategorizedProblem[] problems =", "-\t\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getAllProblems();", "-\t\t\t\tCategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];", "-\t\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);", "-\t\t\t\tclassFile.addProblemMethod(this, this.binding, problemsCopy, problemResetPC);", "+\t\t} while (restart);", "+\t\t// produce a problem method accounting for this fatal error", "+\t\tif (abort) {", "+\t\t\tint problemsLength;", "+\t\t\tCategorizedProblem[] problems =", "+\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getAllProblems();", "+\t\t\tCategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];", "+\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);", "+\t\t\tclassFile.addProblemMethod(this, this.binding, problemsCopy, problemResetPC);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7a4e132d7b72b899de906cfc56d687e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "1f16b07138a4ff3970eb777fe51b4defd3508931", "commitAfterChange": "30166c06d6dd51fd7dbca34d0d55442f8ed395c4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": " public void generateCode(ClassScope classScope, ClassFile classFile)", "diff": ["-\ttry {", "-\t\tproblemResetPC = classFile.contentsOffset;", "-\t\tinternalGenerateCode(classScope, classFile);", "-\t} catch (AbortMethod e) {", "-\t\tif (e.compilationResult == CodeStream.RESTART_IN_WIDE_MODE) {", "-\t\t\t// a branch target required a goto_w, restart code gen in wide mode.", "-\t\t\ttry {", "+\tboolean restart = false;", "+\tboolean abort = false;", "+\tdo {", "+\t\ttry {", "+\t\t\tproblemResetPC = classFile.contentsOffset;", "+\t\t\tinternalGenerateCode(classScope, classFile);", "+\t\t\trestart = false;", "+\t\t} catch (AbortMethod e) {", "+\t\t\tif (e.compilationResult == CodeStream.RESTART_IN_WIDE_MODE) {", "+\t\t\t\t// a branch target required a goto_w, restart code gen in wide mode.", "+\t\t\t\tif (!restart) {", "+\t\t\t\t\tclassFile.contentsOffset = problemResetPC;", "+\t\t\t\t\tclassFile.methodCount--;", "+\t\t\t\t\tclassFile.codeStream.resetInWideMode(); // request wide mode", "+\t\t\t\t\trestart = true;", "+\t\t\t\t} else {", "+\t\t\t\t\trestart = false;", "+\t\t\t\t\tabort = true;", "+\t\t\t\t}", "+\t\t\t} else if (e.compilationResult == CodeStream.RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE) {", "-\t\t\t\tclassFile.codeStream.resetInWideMode(); // request wide mode", "-\t\t\t\tinternalGenerateCode(classScope, classFile); // restart method generation", "-\t\t\t} catch (AbortMethod e2) {", "-\t\t\t\tint problemsLength;", "-\t\t\t\tCategorizedProblem[] problems =", "-\t\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getAllProblems();", "-\t\t\t\tCategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];", "-\t\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);", "-\t\t\t\tclassFile.addProblemConstructor(this, this.binding, problemsCopy, problemResetPC);", "+\t\t\t\tclassFile.codeStream.resetForCodeGenUnusedLocals();", "+\t\t\t\trestart = true;", "+\t\t\t} else {", "+\t\t\t\trestart = false;", "+\t\t\t\tabort = true;", "-\t\t} else {", "-\t\t\tint problemsLength;", "-\t\t\tCategorizedProblem[] problems =", "-\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getAllProblems();", "-\t\t\tCategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];", "-\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);", "-\t\t\tclassFile.addProblemConstructor(this, this.binding, problemsCopy, problemResetPC);", "+\t} while (restart);", "+\tif (abort) {", "+\t\tint problemsLength;", "+\t\tCategorizedProblem[] problems =", "+\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getAllProblems();", "+\t\tCategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];", "+\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);", "+\t\tclassFile.addProblemConstructor(this, this.binding, problemsCopy, problemResetPC);"]}], "num": 17048}
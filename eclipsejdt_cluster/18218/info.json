{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18a56ce0838db97ef5cbbc29e82fa76d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7895be54a9efcd7f0ce93a039e2e0ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "01c0777b298a5c62a2819ec93e382b1ab9650906", "commitAfterChange": "f58d2dbeb8fe5ca58dc0a3fee57b3d7a41711711", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void discardJobs(String jobFamily)", "signatureAfterChange": " \tpublic void discardJobs(String jobFamily)", "diff": ["-\t\t\t\t\tthis.awaitingJobs[i] = null;", "-\t\t\t\t\tif (!(jobFamily == null || currentJob.belongsTo(jobFamily))) { // copy down, compacting", "-\t\t\t\t\t\tthis.awaitingJobs[++loc] = currentJob;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\t\tUtil.verbose(\"-> discarding background job  - \" + currentJob); //$NON-NLS-1$", "-\t\t\t\t\t\tcurrentJob.cancel();", "+\t\t\t\t\tif (currentJob != null) { // sanity check", "+\t\t\t\t\t\tthis.awaitingJobs[i] = null;", "+\t\t\t\t\t\tif (!(jobFamily == null || currentJob.belongsTo(jobFamily))) { // copy down, compacting", "+\t\t\t\t\t\t\tthis.awaitingJobs[++loc] = currentJob;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\t\tUtil.verbose(\"-> discarding background job  - \" + currentJob); //$NON-NLS-1$", "+\t\t\t\t\t\t\tcurrentJob.cancel();", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f795207eab57019cdbadb7e86836e5e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "7daf62bc284b30571754ce8d7fd5c3a7c9740dcb", "commitAfterChange": "b8c9923212bd9598e5d2ca68e0dc316b81a3eccb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void discardJobs(String jobFamily)", "signatureAfterChange": " \tpublic void discardJobs(String jobFamily)", "diff": ["-\t\t\tif (currentJob != null ", "-\t\t\t\t\t&& (jobFamily == null || currentJob.belongsTo(jobFamily))) {", "-\t", "+\t\t\tif (currentJob != null && jobFamily == null || currentJob.belongsTo(jobFamily)) {", "-\t\t\t", "+", "-\t\t\t\twhile (this.processingThread != null && executing){", "+\t\t\t\twhile (this.processingThread != null && this.executing){", "-\t", "+", "-\t\t\t\tfor (int i = jobStart; i <= jobEnd; i++) {", "-\t\t\t\t\tcurrentJob = awaitingJobs[i];", "-\t\t\t\t\tawaitingJobs[i] = null;", "-\t\t\t\t\tif (!(jobFamily == null", "-\t\t\t\t\t\t|| currentJob.belongsTo(jobFamily))) { // copy down, compacting", "-\t\t\t\t\t\tawaitingJobs[++loc] = currentJob;", "+\t\t\t\tfor (int i = this.jobStart; i <= this.jobEnd; i++) {", "+\t\t\t\t\tcurrentJob = this.awaitingJobs[i];", "+\t\t\t\t\tthis.awaitingJobs[i] = null;", "+\t\t\t\t\tif (!(jobFamily == null || currentJob.belongsTo(jobFamily))) { // copy down, compacting", "+\t\t\t\t\t\tthis.awaitingJobs[++loc] = currentJob;", "-\t\t\t\tjobStart = 0;", "-\t\t\t\tjobEnd = loc;", "+\t\t\t\tthis.jobStart = 0;", "+\t\t\t\tthis.jobEnd = loc;"]}], "num": 18218}
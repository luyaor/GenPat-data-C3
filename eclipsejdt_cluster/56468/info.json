{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d09b8c37dba6ee8fc459900cff39de26", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72bec621ea316d7318f88f334a9110af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 141, "signatureBeforeChange": "\r \tprotected void consumeRule(int act)", "signatureAfterChange": "\r protected void consumeRule(int act)", "diff": ["-\t// This method is part of an automatic generation : do NOT edit-modify  \r", "-\tprotected void consumeRule(int act) {\r", "-\t\tswitch (act) {\r", "-\t\t\tcase 29 : // System.out.println(\"Type ::= PrimitiveType\");\r", "-\t\t\t\tconsumePrimitiveType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 43 : // System.out.println(\"ReferenceType ::= ClassOrInterfaceType\");\r", "-\t\t\t\tconsumeReferenceType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 52 : // System.out.println(\"QualifiedName ::= Name DOT SimpleName\");\r", "-\t\t\t\tconsumeQualifiedName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 53 : // System.out.println(\"CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt ImportDeclarationsopt\");\r", "-\t\t\t\tconsumeCompilationUnit();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 54 : // System.out.println(\"EnterCompilationUnit ::=\");\r", "-\t\t\t\tconsumeEnterCompilationUnit();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 66 : // System.out.println(\"CatchHeader ::= catch LPAREN FormalParameter RPAREN LBRACE\");\r", "-\t\t\t\tconsumeCatchHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 68 : // System.out.println(\"ImportDeclarations ::= ImportDeclarations ImportDeclaration\");\r", "-\t\t\t\tconsumeImportDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 70 : // System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\");\r", "-\t\t\t\tconsumeTypeDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 71 : // System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\");\r", "-\t\t\t\tconsumePackageDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 72 : // System.out.println(\"PackageDeclarationName ::= package Name\");\r", "-\t\t\t\tconsumePackageDeclarationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 75 : // System.out.println(\"SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName SEMICOLON\");\r", "-\t\t\t\tconsumeSingleTypeImportDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 76 : // System.out.println(\"SingleTypeImportDeclarationName ::= import Name\");\r", "-\t\t\t\tconsumeSingleTypeImportDeclarationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 77 : // System.out.println(\"TypeImportOnDemandDeclaration ::= TypeImportOnDemandDeclarationName SEMICOLON\");\r", "-\t\t\t\tconsumeTypeImportOnDemandDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 78 : // System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT MULTIPLY\");\r", "-\t\t\t\tconsumeTypeImportOnDemandDeclarationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 81 : // System.out.println(\"TypeDeclaration ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyTypeDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 95 : // System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\");\r", "-\t\t\t\tconsumeClassDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 96 : // System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt ClassHeaderImplementsopt\");\r", "-\t\t\t\tconsumeClassHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 97 : // System.out.println(\"ClassHeaderName ::= Modifiersopt class Identifier\");\r", "-\t\t\t\tconsumeClassHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 98 : // System.out.println(\"ClassHeaderExtends ::= extends ClassType\");\r", "-\t\t\t\tconsumeClassHeaderExtends();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 99 : // System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\");\r", "-\t\t\t\tconsumeClassHeaderImplements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 101 : // System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA InterfaceType\");\r", "-\t\t\t\tconsumeInterfaceTypeList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 102 : // System.out.println(\"InterfaceType ::= ClassOrInterfaceType\");\r", "-\t\t\t\tconsumeInterfaceType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 105 : // System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\");\r", "-\t\t\t\tconsumeClassBodyDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 109 : // System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod Block\");\r", "-\t\t\t\tconsumeClassBodyDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 110 : // System.out.println(\"Diet ::=\");\r", "-\t\t\t\tconsumeDiet();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 111 : // System.out.println(\"Initializer ::= Diet NestedMethod Block\");\r", "-\t\t\t\tconsumeClassBodyDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 118 : // System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyClassMemberDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 119 : // System.out.println(\"FieldDeclaration ::= Modifiersopt Type VariableDeclarators SEMICOLON\");\r", "-\t\t\t\tconsumeFieldDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 121 : // System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator\");\r", "-\t\t\t\tconsumeVariableDeclarators();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 124 : // System.out.println(\"EnterVariable ::=\");\r", "-\t\t\t\tconsumeEnterVariable();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 125 : // System.out.println(\"ExitVariableWithInitialization ::=\");\r", "-\t\t\t\tconsumeExitVariableWithInitialization();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 126 : // System.out.println(\"ExitVariableWithoutInitialization ::=\");\r", "-\t\t\t\tconsumeExitVariableWithoutInitialization();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 127 : // System.out.println(\"ForceNoDiet ::=\");\r", "-\t\t\t\tconsumeForceNoDiet();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 128 : // System.out.println(\"RestoreDiet ::=\");\r", "-\t\t\t\tconsumeRestoreDiet();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 133 : // System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\");\r", "-\t\t\t\t// set to true to consume a method with a body\r", "-\t\t\t\tconsumeMethodDeclaration(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 134 : // System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\");\r", "-\t\t\t\t// set to false to consume a method without body\r", "-\t\t\t\tconsumeMethodDeclaration(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 135 : // System.out.println(\"MethodHeader ::= MethodHeaderName MethodHeaderParameters MethodHeaderExtendedDims\");\r", "-\t\t\t\tconsumeMethodHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 136 : // System.out.println(\"MethodPushModifiersHeader ::= MethodPushModifiersHeaderName MethodHeaderParameters\");\r", "-\t\t\t\tconsumeMethodHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 137 : // System.out.println(\"MethodPushModifiersHeaderName ::= Modifiers Type PushModifiers Identifier LPAREN\");\r", "-\t\t\t\tconsumeMethodPushModifiersHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 138 : // System.out.println(\"MethodPushModifiersHeaderName ::= Type PushModifiers Identifier LPAREN\");\r", "-\t\t\t\tconsumeMethodPushModifiersHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 139 : // System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\");\r", "-\t\t\t\tconsumeMethodHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 140 : // System.out.println(\"MethodHeaderParameters ::= FormalParameterListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodHeaderParameters();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 141 : // System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\");\r", "-\t\t\t\tconsumeMethodHeaderExtendedDims();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 142 : // System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\");\r", "-\t\t\t\tconsumeMethodHeaderThrowsClause();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 143 : // System.out.println(\"ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters...\");\r", "-\t\t\t\tconsumeConstructorHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 144 : // System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\");\r", "-\t\t\t\tconsumeConstructorHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 146 : // System.out.println(\"FormalParameterList ::= FormalParameterList COMMA FormalParameter\");\r", "-\t\t\t\tconsumeFormalParameterList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 147 : // System.out.println(\"FormalParameter ::= Modifiersopt Type VariableDeclaratorId\");\r", "-\t\t\t\t// the boolean is used to know if the modifiers should be reset\r", "-\t\t\t\tconsumeFormalParameter();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 149 : // System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\");\r", "-\t\t\t\tconsumeClassTypeList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 150 : // System.out.println(\"ClassTypeElt ::= ClassType\");\r", "-\t\t\t\tconsumeClassTypeElt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 151 : // System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt RBRACE\");\r", "-\t\t\t\tconsumeMethodBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 152 : // System.out.println(\"NestedMethod ::=\");\r", "-\t\t\t\tconsumeNestedMethod();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 153 : // System.out.println(\"StaticInitializer ::= StaticOnly Block\");\r", "-\t\t\t\tconsumeStaticInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 154 : // System.out.println(\"StaticOnly ::= static\");\r", "-\t\t\t\tconsumeStaticOnly();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 155 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "-\t\t\t\tconsumeConstructorDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 156 : // System.out.println(\"ConstructorBody ::= NestedMethod LBRACE ConstructorBlockStatementsopt RBRACE\");\r", "-\t\t\t\tconsumeConstructorBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 159 : // System.out.println(\"ConstructorBlockStatementsopt ::= ExplicitConstructorInvocation BlockStatements\");\r", "-\t\t\t\tconsumeConstructorBlockStatements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 160 : // System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(0, ExplicitConstructorCall.This);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 161 : // System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(0, ExplicitConstructorCall.Super);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 162 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.Super);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 163 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.Super);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 164 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.This);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 165 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.This);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 166 : // System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\");\r", "-\t\t\t\tconsumeInterfaceDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 167 : // System.out.println(\"InterfaceHeader ::= InterfaceHeaderName InterfaceHeaderExtendsopt\");\r", "-\t\t\t\tconsumeInterfaceHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 168 : // System.out.println(\"InterfaceHeaderName ::= Modifiersopt interface Identifier\");\r", "-\t\t\t\tconsumeInterfaceHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 170 : // System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\");\r", "-\t\t\t\tconsumeInterfaceHeaderExtends();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 173 : // System.out.println(\"InterfaceMemberDeclarations ::= InterfaceMemberDeclarations...\");\r", "-\t\t\t\tconsumeInterfaceMemberDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 174 : // System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyInterfaceMemberDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 177 : // System.out.println(\"InterfaceMemberDeclaration ::= InvalidMethodDeclaration\");\r", "-\t\t\t\tignoreMethodBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 178 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "-\t\t\t\tignoreInvalidConstructorDeclaration(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 179 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader SEMICOLON\");\r", "-\t\t\t\tignoreInvalidConstructorDeclaration(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 185 : // System.out.println(\"ArrayInitializer ::= LBRACE ,opt RBRACE\");\r", "-\t\t\t\tconsumeEmptyArrayInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 186 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers RBRACE\");\r", "-\t\t\t\tconsumeArrayInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 187 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers COMMA RBRACE\");\r", "-\t\t\t\tconsumeArrayInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 189 : // System.out.println(\"VariableInitializers ::= VariableInitializers COMMA VariableInitializer\");\r", "-\t\t\t\tconsumeVariableInitializers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 190 : // System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\");\r", "-\t\t\t\tconsumeBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 191 : // System.out.println(\"OpenBlock ::=\");\r", "-\t\t\t\tconsumeOpenBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 193 : // System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\");\r", "-\t\t\t\tconsumeBlockStatements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 197 : // System.out.println(\"BlockStatement ::= InvalidInterfaceDeclaration\");\r", "-\t\t\t\tignoreInterfaceDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 198 : // System.out.println(\"LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON\");\r", "-\t\t\t\tconsumeLocalVariableDeclarationStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 199 : // System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers VariableDeclarators\");\r", "-\t\t\t\tconsumeLocalVariableDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 200 : // System.out.println(\"LocalVariableDeclaration ::= Modifiers Type PushModifiers VariableDeclarators\");\r", "-\t\t\t\tconsumeLocalVariableDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 201 : // System.out.println(\"PushModifiers ::=\");\r", "-\t\t\t\tconsumePushModifiers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 225 : // System.out.println(\"EmptyStatement ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 226 : // System.out.println(\"LabeledStatement ::= Identifier COLON Statement\");\r", "-\t\t\t\tconsumeStatementLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 227 : // System.out.println(\"LabeledStatementNoShortIf ::= Identifier COLON StatementNoShortIf\");\r", "-\t\t\t\tconsumeStatementLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 228 : // System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\");\r", "-\t\t\t\tconsumeExpressionStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 236 : // System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN Statement\");\r", "-\t\t\t\tconsumeStatementIfNoElse();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 237 : // System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN StatementNoShortIf else...\");\r", "-\t\t\t\tconsumeStatementIfWithElse();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 238 : // System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression RPAREN StatementNoShortIf...\");\r", "-\t\t\t\tconsumeStatementIfWithElse();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 239 : // System.out.println(\"SwitchStatement ::= switch OpenBlock LPAREN Expression RPAREN SwitchBlock\");\r", "-\t\t\t\tconsumeStatementSwitch();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 240 : // System.out.println(\"SwitchBlock ::= LBRACE RBRACE\");\r", "-\t\t\t\tconsumeEmptySwitchBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 243 : // System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements SwitchLabels RBRACE\");\r", "-\t\t\t\tconsumeSwitchBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 245 : // System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\");\r", "-\t\t\t\tconsumeSwitchBlockStatements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 246 : // System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\");\r", "-\t\t\t\tconsumeSwitchBlockStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 248 : // System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\");\r", "-\t\t\t\tconsumeSwitchLabels();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 249 : // System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\");\r", "-\t\t\t\tconsumeCaseLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 250 : // System.out.println(\"SwitchLabel ::= default COLON\");\r", "-\t\t\t\tconsumeDefaultLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 251 : // System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN Statement\");\r", "-\t\t\t\tconsumeStatementWhile();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 252 : // System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression RPAREN StatementNoShortIf\");\r", "-\t\t\t\tconsumeStatementWhile();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 253 : // System.out.println(\"DoStatement ::= do Statement while LPAREN Expression RPAREN SEMICOLON\");\r", "-\t\t\t\tconsumeStatementDo();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 254 : // System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON...\");\r", "-\t\t\t\tconsumeStatementFor();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 255 : // System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON\");\r", "-\t\t\t\tconsumeStatementFor();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 256 : // System.out.println(\"ForInit ::= StatementExpressionList\");\r", "-\t\t\t\tconsumeForInit();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 260 : // System.out.println(\"StatementExpressionList ::= StatementExpressionList COMMA StatementExpression\");\r", "-\t\t\t\tconsumeStatementExpressionList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 261 : // System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\");\r", "-\t\t\t\tconsumeSimpleAssertStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 262 : // System.out.println(\"AssertStatement ::= assert Expression COLON Expression SEMICOLON\");\r", "-\t\t\t\tconsumeAssertStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 263 : // System.out.println(\"BreakStatement ::= break SEMICOLON\");\r", "-\t\t\t\tconsumeStatementBreak();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 264 : // System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\");\r", "-\t\t\t\tconsumeStatementBreakWithLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 265 : // System.out.println(\"ContinueStatement ::= continue SEMICOLON\");\r", "-\t\t\t\tconsumeStatementContinue();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 266 : // System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\");\r", "-\t\t\t\tconsumeStatementContinueWithLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 267 : // System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\");\r", "-\t\t\t\tconsumeStatementReturn();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 268 : // System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\");\r", "-\t\t\t\tconsumeStatementThrow();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 269 : // System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN Expression RPAREN Block\");\r", "-\t\t\t\tconsumeStatementSynchronized();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 270 : // System.out.println(\"OnlySynchronized ::= synchronized\");\r", "-\t\t\t\tconsumeOnlySynchronized();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 271 : // System.out.println(\"TryStatement ::= try Block Catches\");\r", "-\t\t\t\tconsumeStatementTry(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 272 : // System.out.println(\"TryStatement ::= try Block Catchesopt Finally\");\r", "-\t\t\t\tconsumeStatementTry(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 274 : // System.out.println(\"Catches ::= Catches CatchClause\");\r", "-\t\t\t\tconsumeCatches();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 275 : // System.out.println(\"CatchClause ::= catch LPAREN FormalParameter RPAREN Block\");\r", "-\t\t\t\tconsumeStatementCatch();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 277 : // System.out.println(\"PushLPAREN ::= LPAREN\");\r", "-\t\t\t\tconsumeLeftParen();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 278 : // System.out.println(\"PushRPAREN ::= RPAREN\");\r", "-\t\t\t\tconsumeRightParen();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 282 : // System.out.println(\"PrimaryNoNewArray ::= this\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayThis();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 283 : // System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression PushRPAREN\");\r", "-\t\t\t\tconsumePrimaryNoNewArray();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 286 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT this\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayNameThis();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 287 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT super\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayNameSuper();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 288 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT class\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 289 : // System.out.println(\"PrimaryNoNewArray ::= ArrayType DOT class\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayArrayType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 290 : // System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayPrimitiveType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 293 : // System.out.println(\"AllocationHeader ::= new ClassType LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeAllocationHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 294 : // System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 295 : // System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new SimpleName LPAREN...\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpressionQualified();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 296 : // System.out.println(\"ClassInstanceCreationExpression ::= ClassInstanceCreationExpressionName new...\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpressionQualified();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 297 : // System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpressionName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 298 : // System.out.println(\"ClassBodyopt ::=\");\r", "-\t\t\t\tconsumeClassBodyopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 300 : // System.out.println(\"EnterAnonymousClassBody ::=\");\r", "-\t\t\t\tconsumeEnterAnonymousClassBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 302 : // System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\");\r", "-\t\t\t\tconsumeArgumentList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 303 : // System.out.println(\"ArrayCreationExpression ::= new PrimitiveType DimWithOrWithOutExprs...\");\r", "-\t\t\t\tconsumeArrayCreationExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 304 : // System.out.println(\"ArrayCreationExpression ::= new ClassOrInterfaceType DimWithOrWithOutExprs...\");\r", "-\t\t\t\tconsumeArrayCreationExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 306 : // System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\");\r", "-\t\t\t\tconsumeDimWithOrWithOutExprs();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 308 : // System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\");\r", "-\t\t\t\tconsumeDimWithOrWithOutExpr();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 309 : // System.out.println(\"Dims ::= DimsLoop\");\r", "-\t\t\t\tconsumeDims();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 312 : // System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\");\r", "-\t\t\t\tconsumeOneDimLoop();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 313 : // System.out.println(\"FieldAccess ::= Primary DOT Identifier\");\r", "-\t\t\t\tconsumeFieldAccess(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 314 : // System.out.println(\"FieldAccess ::= super DOT Identifier\");\r", "-\t\t\t\tconsumeFieldAccess(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 315 : // System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodInvocationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 316 : // System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodInvocationPrimary();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 317 : // System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodInvocationSuper();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 318 : // System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\");\r", "-\t\t\t\tconsumeArrayAccess(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 319 : // System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression RBRACKET\");\r", "-\t\t\t\tconsumeArrayAccess(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 321 : // System.out.println(\"PostfixExpression ::= Name\");\r", "-\t\t\t\tconsumePostfixExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 324 : // System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS, true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 325 : // System.out.println(\"PostDecrementExpression ::= PostfixExpression MINUS_MINUS\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS, true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 326 : // System.out.println(\"PushPosition ::=\");\r", "-\t\t\t\tconsumePushPosition();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 329 : // System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 330 : // System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 332 : // System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS, false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 333 : // System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS, false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 335 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.TWIDDLE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 336 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.NOT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 338 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN UnaryExpression\");\r", "-\t\t\t\tconsumeCastExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 339 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN UnaryExpressionNotPlusMinus\");\r", "-\t\t\t\tconsumeCastExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 340 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN UnaryExpressionNotPlusMinus\");\r", "-\t\t\t\tconsumeCastExpressionLL1();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 342 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY UnaryExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.MULTIPLY);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 343 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE UnaryExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.DIVIDE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 344 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER UnaryExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.REMAINDER);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 346 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.PLUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 347 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.MINUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 349 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.LEFT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 350 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 351 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.UNSIGNED_RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 353 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.LESS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 354 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.GREATER);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 355 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.LESS_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 356 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.GREATER_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 357 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof ReferenceType\");\r", "-\t\t\t\tconsumeInstanceOfExpression(OperatorExpression.INSTANCEOF);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 359 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression\");\r", "-\t\t\t\tconsumeEqualityExpression(OperatorExpression.EQUAL_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 360 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL RelationalExpression\");\r", "-\t\t\t\tconsumeEqualityExpression(OperatorExpression.NOT_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 362 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.AND);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 364 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.XOR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 366 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR ExclusiveOrExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.OR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 368 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND InclusiveOrExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.AND_AND);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 370 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR ConditionalAndExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.OR_OR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 372 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON...\");\r", "-\t\t\t\tconsumeConditionalExpression(OperatorExpression.QUESTIONCOLON);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 375 : // System.out.println(\"Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression\");\r", "-\t\t\t\tconsumeAssignment();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 377 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");\r", "-\t\t\t\tignoreExpressionAssignment();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 378 : // System.out.println(\"LeftHandSide ::= Name\");\r", "-\t\t\t\tconsumeLeftHandSide();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 381 : // System.out.println(\"AssignmentOperator ::= EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 382 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(MULTIPLY);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 383 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(DIVIDE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 384 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(REMAINDER);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 385 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(PLUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 386 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(MINUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 387 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(LEFT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 388 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 389 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 390 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(AND);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 391 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(XOR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 392 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(OR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 399 : // System.out.println(\"Expressionopt ::=\");\r", "-\t\t\t\tconsumeEmptyExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 403 : // System.out.println(\"ImportDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyImportDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 404 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");\r", "-\t\t\t\tconsumeImportDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 405 : // System.out.println(\"TypeDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyTypeDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 406 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");\r", "-\t\t\t\tconsumeTypeDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 407 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyClassBodyDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 408 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");\r", "-\t\t\t\tconsumeClassBodyDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 409 : // System.out.println(\"Modifiersopt ::=\");\r", "-\t\t\t\tconsumeDefaultModifiers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 410 : // System.out.println(\"Modifiersopt ::= Modifiers\");\r", "-\t\t\t\tconsumeModifiers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 411 : // System.out.println(\"BlockStatementsopt ::=\");\r", "-\t\t\t\tconsumeEmptyBlockStatementsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 413 : // System.out.println(\"Dimsopt ::=\");\r", "-\t\t\t\tconsumeEmptyDimsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 415 : // System.out.println(\"ArgumentListopt ::=\");\r", "-\t\t\t\tconsumeEmptyArgumentListopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 419 : // System.out.println(\"FormalParameterListopt ::=\");\r", "-\t\t\t\tconsumeFormalParameterListopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 423 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyInterfaceMemberDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 424 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\");\r", "-\t\t\t\tconsumeInterfaceMemberDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 425 : // System.out.println(\"NestedType ::=\");\r", "-\t\t\t\tconsumeNestedType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 426 : // System.out.println(\"ForInitopt ::=\");\r", "-\t\t\t\tconsumeEmptyForInitopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 428 : // System.out.println(\"ForUpdateopt ::=\");\r", "-\t\t\t\tconsumeEmptyForUpdateopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 432 : // System.out.println(\"Catchesopt ::=\");\r", "-\t\t\t\tconsumeEmptyCatchesopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 434 : // System.out.println(\"ArrayInitializeropt ::=\");\r", "-\t\t\t\tconsumeEmptyArrayInitializeropt();\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "+// This method is part of an automatic generation : do NOT edit-modify  \r", "+protected void consumeRule(int act) {\r", "+\tswitch (act) {\r", "+\t\tcase 29 : // System.out.println(\"Type ::= PrimitiveType\");\r", "+\t\t\tconsumePrimitiveType();\r", "+\t\t\tbreak;\r", "+\t\tcase 43 : // System.out.println(\"ReferenceType ::= ClassOrInterfaceType\");\r", "+\t\t\tconsumeReferenceType();\r", "+\t\t\tbreak;\r", "+\t\tcase 52 : // System.out.println(\"QualifiedName ::= Name DOT SimpleName\");\r", "+\t\t\tconsumeQualifiedName();\r", "+\t\t\tbreak;\r", "+\t\tcase 53 : // System.out.println(\"CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt ImportDeclarationsopt\");\r", "+\t\t\tconsumeCompilationUnit();\r", "+\t\t\tbreak;\r", "+\t\tcase 54 : // System.out.println(\"EnterCompilationUnit ::=\");\r", "+\t\t\tconsumeEnterCompilationUnit();\r", "+\t\t\tbreak;\r", "+\t\tcase 66 : // System.out.println(\"CatchHeader ::= catch LPAREN FormalParameter RPAREN LBRACE\");\r", "+\t\t\tconsumeCatchHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 68 : // System.out.println(\"ImportDeclarations ::= ImportDeclarations ImportDeclaration\");\r", "+\t\t\tconsumeImportDeclarations();\r", "+\t\t\tbreak;\r", "+\t\tcase 70 : // System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\");\r", "+\t\t\tconsumeTypeDeclarations();\r", "+\t\t\tbreak;\r", "+\t\tcase 71 : // System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\");\r", "+\t\t\tconsumePackageDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 72 : // System.out.println(\"PackageDeclarationName ::= package Name\");\r", "+\t\t\tconsumePackageDeclarationName();\r", "+\t\t\tbreak;\r", "+\t\tcase 75 : // System.out.println(\"SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName SEMICOLON\");\r", "+\t\t\tconsumeSingleTypeImportDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 76 : // System.out.println(\"SingleTypeImportDeclarationName ::= import Name\");\r", "+\t\t\tconsumeSingleTypeImportDeclarationName();\r", "+\t\t\tbreak;\r", "+\t\tcase 77 : // System.out.println(\"TypeImportOnDemandDeclaration ::= TypeImportOnDemandDeclarationName SEMICOLON\");\r", "+\t\t\tconsumeTypeImportOnDemandDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 78 : // System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT MULTIPLY\");\r", "+\t\t\tconsumeTypeImportOnDemandDeclarationName();\r", "+\t\t\tbreak;\r", "+\t\tcase 81 : // System.out.println(\"TypeDeclaration ::= SEMICOLON\");\r", "+\t\t\tconsumeEmptyTypeDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 95 : // System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\");\r", "+\t\t\tconsumeClassDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 96 : // System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt ClassHeaderImplementsopt\");\r", "+\t\t\tconsumeClassHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 97 : // System.out.println(\"ClassHeaderName ::= Modifiersopt class Identifier\");\r", "+\t\t\tconsumeClassHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 98 : // System.out.println(\"ClassHeaderExtends ::= extends ClassType\");\r", "+\t\t\tconsumeClassHeaderExtends();\r", "+\t\t\tbreak;\r", "+\t\tcase 99 : // System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\");\r", "+\t\t\tconsumeClassHeaderImplements();\r", "+\t\t\tbreak;\r", "+\t\tcase 101 : // System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA InterfaceType\");\r", "+\t\t\tconsumeInterfaceTypeList();\r", "+\t\t\tbreak;\r", "+\t\tcase 102 : // System.out.println(\"InterfaceType ::= ClassOrInterfaceType\");\r", "+\t\t\tconsumeInterfaceType();\r", "+\t\t\tbreak;\r", "+\t\tcase 105 : // System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\");\r", "+\t\t\tconsumeClassBodyDeclarations();\r", "+\t\t\tbreak;\r", "+\t\tcase 109 : // System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod Block\");\r", "+\t\t\tconsumeClassBodyDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 110 : // System.out.println(\"Diet ::=\");\r", "+\t\t\tconsumeDiet();\r", "+\t\t\tbreak;\r", "+\t\tcase 117 : // System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\");\r", "+\t\t\tconsumeEmptyClassMemberDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 118 : // System.out.println(\"FieldDeclaration ::= Modifiersopt Type VariableDeclarators SEMICOLON\");\r", "+\t\t\tconsumeFieldDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 120 : // System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator\");\r", "+\t\t\tconsumeVariableDeclarators();\r", "+\t\t\tbreak;\r", "+\t\tcase 123 : // System.out.println(\"EnterVariable ::=\");\r", "+\t\t\tconsumeEnterVariable();\r", "+\t\t\tbreak;\r", "+\t\tcase 124 : // System.out.println(\"ExitVariableWithInitialization ::=\");\r", "+\t\t\tconsumeExitVariableWithInitialization();\r", "+\t\t\tbreak;\r", "+\t\tcase 125 : // System.out.println(\"ExitVariableWithoutInitialization ::=\");\r", "+\t\t\tconsumeExitVariableWithoutInitialization();\r", "+\t\t\tbreak;\r", "+\t\tcase 126 : // System.out.println(\"ForceNoDiet ::=\");\r", "+\t\t\tconsumeForceNoDiet();\r", "+\t\t\tbreak;\r", "+\t\tcase 127 : // System.out.println(\"RestoreDiet ::=\");\r", "+\t\t\tconsumeRestoreDiet();\r", "+\t\t\tbreak;\r", "+\t\tcase 132 : // System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\");\r", "+\t\t\t// set to true to consume a method with a body\r", "+\t\t\tconsumeMethodDeclaration(true);\r", "+\t\t\tbreak;\r", "+\t\tcase 133 : // System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\");\r", "+\t\t\t// set to false to consume a method without body\r", "+\t\t\tconsumeMethodDeclaration(false);\r", "+\t\t\tbreak;\r", "+\t\tcase 134 : // System.out.println(\"MethodHeader ::= MethodHeaderName MethodHeaderParameters MethodHeaderExtendedDims\");\r", "+\t\t\tconsumeMethodHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 135 : // System.out.println(\"MethodPushModifiersHeader ::= MethodPushModifiersHeaderName MethodHeaderParameters\");\r", "+\t\t\tconsumeMethodHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 136 : // System.out.println(\"MethodPushModifiersHeaderName ::= Modifiers Type PushModifiers Identifier LPAREN\");\r", "+\t\t\tconsumeMethodPushModifiersHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 137 : // System.out.println(\"MethodPushModifiersHeaderName ::= Type PushModifiers Identifier LPAREN\");\r", "+\t\t\tconsumeMethodPushModifiersHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 138 : // System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\");\r", "+\t\t\tconsumeMethodHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 139 : // System.out.println(\"MethodHeaderParameters ::= FormalParameterListopt RPAREN\");\r", "+\t\t\tconsumeMethodHeaderParameters();\r", "+\t\t\tbreak;\r", "+\t\tcase 140 : // System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\");\r", "+\t\t\tconsumeMethodHeaderExtendedDims();\r", "+\t\t\tbreak;\r", "+\t\tcase 141 : // System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\");\r", "+\t\t\tconsumeMethodHeaderThrowsClause();\r", "+\t\t\tbreak;\r", "+\t\tcase 142 : // System.out.println(\"ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters...\");\r", "+\t\t\tconsumeConstructorHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 143 : // System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\");\r", "+\t\t\tconsumeConstructorHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 145 : // System.out.println(\"FormalParameterList ::= FormalParameterList COMMA FormalParameter\");\r", "+\t\t\tconsumeFormalParameterList();\r", "+\t\t\tbreak;\r", "+\t\tcase 146 : // System.out.println(\"FormalParameter ::= Modifiersopt Type VariableDeclaratorId\");\r", "+\t\t\t// the boolean is used to know if the modifiers should be reset\r", "+\t\t\tconsumeFormalParameter();\r", "+\t\t\tbreak;\r", "+\t\tcase 148 : // System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\");\r", "+\t\t\tconsumeClassTypeList();\r", "+\t\t\tbreak;\r", "+\t\tcase 149 : // System.out.println(\"ClassTypeElt ::= ClassType\");\r", "+\t\t\tconsumeClassTypeElt();\r", "+\t\t\tbreak;\r", "+\t\tcase 150 : // System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt RBRACE\");\r", "+\t\t\tconsumeMethodBody();\r", "+\t\t\tbreak;\r", "+\t\tcase 151 : // System.out.println(\"NestedMethod ::=\");\r", "+\t\t\tconsumeNestedMethod();\r", "+\t\t\tbreak;\r", "+\t\tcase 152 : // System.out.println(\"StaticInitializer ::= StaticOnly Block\");\r", "+\t\t\tconsumeStaticInitializer();\r", "+\t\t\tbreak;\r", "+\t\tcase 153 : // System.out.println(\"StaticOnly ::= static\");\r", "+\t\t\tconsumeStaticOnly();\r", "+\t\t\tbreak;\r", "+\t\tcase 154 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "+\t\t\tconsumeConstructorDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 155 : // System.out.println(\"ConstructorBody ::= NestedMethod LBRACE ConstructorBlockStatementsopt RBRACE\");\r", "+\t\t\tconsumeConstructorBody();\r", "+\t\t\tbreak;\r", "+\t\tcase 158 : // System.out.println(\"ConstructorBlockStatementsopt ::= ExplicitConstructorInvocation BlockStatements\");\r", "+\t\t\tconsumeConstructorBlockStatements();\r", "+\t\t\tbreak;\r", "+\t\tcase 159 : // System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(0, ExplicitConstructorCall.This);\r", "+\t\t\tbreak;\r", "+\t\tcase 160 : // System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(0, ExplicitConstructorCall.Super);\r", "+\t\t\tbreak;\r", "+\t\tcase 161 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.Super);\r", "+\t\t\tbreak;\r", "+\t\tcase 162 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.Super);\r", "+\t\t\tbreak;\r", "+\t\tcase 163 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.This);\r", "+\t\t\tbreak;\r", "+\t\tcase 164 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.This);\r", "+\t\t\tbreak;\r", "+\t\tcase 165 : // System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\");\r", "+\t\t\tconsumeInterfaceDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 166 : // System.out.println(\"InterfaceHeader ::= InterfaceHeaderName InterfaceHeaderExtendsopt\");\r", "+\t\t\tconsumeInterfaceHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 167 : // System.out.println(\"InterfaceHeaderName ::= Modifiersopt interface Identifier\");\r", "+\t\t\tconsumeInterfaceHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 169 : // System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\");\r", "+\t\t\tconsumeInterfaceHeaderExtends();\r", "+\t\t\tbreak;\r", "+\t\tcase 172 : // System.out.println(\"InterfaceMemberDeclarations ::= InterfaceMemberDeclarations...\");\r", "+\t\t\tconsumeInterfaceMemberDeclarations();\r", "+\t\t\tbreak;\r", "+\t\tcase 173 : // System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\");\r", "+\t\t\tconsumeEmptyInterfaceMemberDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 176 : // System.out.println(\"InterfaceMemberDeclaration ::= InvalidMethodDeclaration\");\r", "+\t\t\tignoreMethodBody();\r", "+\t\t\tbreak;\r", "+\t\tcase 177 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "+\t\t\tignoreInvalidConstructorDeclaration(true);\r", "+\t\t\tbreak;\r", "+\t\tcase 178 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader SEMICOLON\");\r", "+\t\t\tignoreInvalidConstructorDeclaration(false);\r", "+\t\t\tbreak;\r", "+\t\tcase 184 : // System.out.println(\"ArrayInitializer ::= LBRACE ,opt RBRACE\");\r", "+\t\t\tconsumeEmptyArrayInitializer();\r", "+\t\t\tbreak;\r", "+\t\tcase 185 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers RBRACE\");\r", "+\t\t\tconsumeArrayInitializer();\r", "+\t\t\tbreak;\r", "+\t\tcase 186 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers COMMA RBRACE\");\r", "+\t\t\tconsumeArrayInitializer();\r", "+\t\t\tbreak;\r", "+\t\tcase 188 : // System.out.println(\"VariableInitializers ::= VariableInitializers COMMA VariableInitializer\");\r", "+\t\t\tconsumeVariableInitializers();\r", "+\t\t\tbreak;\r", "+\t\tcase 189 : // System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\");\r", "+\t\t\tconsumeBlock();\r", "+\t\t\tbreak;\r", "+\t\tcase 190 : // System.out.println(\"OpenBlock ::=\");\r", "+\t\t\tconsumeOpenBlock();\r", "+\t\t\tbreak;\r", "+\t\tcase 192 : // System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\");\r", "+\t\t\tconsumeBlockStatements();\r", "+\t\t\tbreak;\r", "+\t\tcase 196 : // System.out.println(\"BlockStatement ::= InvalidInterfaceDeclaration\");\r", "+\t\t\tignoreInterfaceDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 197 : // System.out.println(\"LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON\");\r", "+\t\t\tconsumeLocalVariableDeclarationStatement();\r", "+\t\t\tbreak;\r", "+\t\tcase 198 : // System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers VariableDeclarators\");\r", "+\t\t\tconsumeLocalVariableDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 199 : // System.out.println(\"LocalVariableDeclaration ::= Modifiers Type PushModifiers VariableDeclarators\");\r", "+\t\t\tconsumeLocalVariableDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 200 : // System.out.println(\"PushModifiers ::=\");\r", "+\t\t\tconsumePushModifiers();\r", "+\t\t\tbreak;\r", "+\t\tcase 223 : // System.out.println(\"EmptyStatement ::= SEMICOLON\");\r", "+\t\t\tconsumeEmptyStatement();\r", "+\t\t\tbreak;\r", "+\t\tcase 224 : // System.out.println(\"LabeledStatement ::= Identifier COLON Statement\");\r", "+\t\t\tconsumeStatementLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 225 : // System.out.println(\"LabeledStatementNoShortIf ::= Identifier COLON StatementNoShortIf\");\r", "+\t\t\tconsumeStatementLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 226 : // System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\");\r", "+\t\t\tconsumeExpressionStatement();\r", "+\t\t\tbreak;\r", "+\t\tcase 234 : // System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN Statement\");\r", "+\t\t\tconsumeStatementIfNoElse();\r", "+\t\t\tbreak;\r", "+\t\tcase 235 : // System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN StatementNoShortIf else...\");\r", "+\t\t\tconsumeStatementIfWithElse();\r", "+\t\t\tbreak;\r", "+\t\tcase 236 : // System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression RPAREN StatementNoShortIf...\");\r", "+\t\t\tconsumeStatementIfWithElse();\r", "+\t\t\tbreak;\r", "+\t\tcase 237 : // System.out.println(\"SwitchStatement ::= switch OpenBlock LPAREN Expression RPAREN SwitchBlock\");\r", "+\t\t\tconsumeStatementSwitch();\r", "+\t\t\tbreak;\r", "+\t\tcase 238 : // System.out.println(\"SwitchBlock ::= LBRACE RBRACE\");\r", "+\t\t\tconsumeEmptySwitchBlock();\r", "+\t\t\tbreak;\r", "+\t\tcase 241 : // System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements SwitchLabels RBRACE\");\r", "+\t\t\tconsumeSwitchBlock();\r", "+\t\t\tbreak;\r", "+\t\tcase 243 : // System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\");\r", "+\t\t\tconsumeSwitchBlockStatements();\r", "+\t\t\tbreak;\r", "+\t\tcase 244 : // System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\");\r", "+\t\t\tconsumeSwitchBlockStatement();\r", "+\t\t\tbreak;\r", "+\t\tcase 246 : // System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\");\r", "+\t\t\tconsumeSwitchLabels();\r", "+\t\t\tbreak;\r", "+\t\tcase 247 : // System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\");\r", "+\t\t\tconsumeCaseLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 248 : // System.out.println(\"SwitchLabel ::= default COLON\");\r", "+\t\t\tconsumeDefaultLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 249 : // System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN Statement\");\r", "+\t\t\tconsumeStatementWhile();\r", "+\t\t\tbreak;\r", "+\t\tcase 250 : // System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression RPAREN StatementNoShortIf\");\r", "+\t\t\tconsumeStatementWhile();\r", "+\t\t\tbreak;\r", "+\t\tcase 251 : // System.out.println(\"DoStatement ::= do Statement while LPAREN Expression RPAREN SEMICOLON\");\r", "+\t\t\tconsumeStatementDo();\r", "+\t\t\tbreak;\r", "+\t\tcase 252 : // System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON...\");\r", "+\t\t\tconsumeStatementFor();\r", "+\t\t\tbreak;\r", "+\t\tcase 253 : // System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON\");\r", "+\t\t\tconsumeStatementFor();\r", "+\t\t\tbreak;\r", "+\t\tcase 254 : // System.out.println(\"ForInit ::= StatementExpressionList\");\r", "+\t\t\tconsumeForInit();\r", "+\t\t\tbreak;\r", "+\t\tcase 258 : // System.out.println(\"StatementExpressionList ::= StatementExpressionList COMMA StatementExpression\");\r", "+\t\t\tconsumeStatementExpressionList();\r", "+\t\t\tbreak;\r", "+\t\tcase 259 : // System.out.println(\"BreakStatement ::= break SEMICOLON\");\r", "+\t\t\tconsumeStatementBreak();\r", "+\t\t\tbreak;\r", "+\t\tcase 260 : // System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\");\r", "+\t\t\tconsumeStatementBreakWithLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 261 : // System.out.println(\"ContinueStatement ::= continue SEMICOLON\");\r", "+\t\t\tconsumeStatementContinue();\r", "+\t\t\tbreak;\r", "+\t\tcase 262 : // System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\");\r", "+\t\t\tconsumeStatementContinueWithLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 263 : // System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\");\r", "+\t\t\tconsumeStatementReturn();\r", "+\t\t\tbreak;\r", "+\t\tcase 264 : // System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\");\r", "+\t\t\tconsumeStatementThrow();\r", "+\t\t\tbreak;\r", "+\t\tcase 265 : // System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN Expression RPAREN Block\");\r", "+\t\t\tconsumeStatementSynchronized();\r", "+\t\t\tbreak;\r", "+\t\tcase 266 : // System.out.println(\"OnlySynchronized ::= synchronized\");\r", "+\t\t\tconsumeOnlySynchronized();\r", "+\t\t\tbreak;\r", "+\t\tcase 267 : // System.out.println(\"TryStatement ::= try Block Catches\");\r", "+\t\t\tconsumeStatementTry(false);\r", "+\t\t\tbreak;\r", "+\t\tcase 268 : // System.out.println(\"TryStatement ::= try Block Catchesopt Finally\");\r", "+\t\t\tconsumeStatementTry(true);\r", "+\t\t\tbreak;\r", "+\t\tcase 270 : // System.out.println(\"Catches ::= Catches CatchClause\");\r", "+\t\t\tconsumeCatches();\r", "+\t\t\tbreak;\r", "+\t\tcase 271 : // System.out.println(\"CatchClause ::= catch LPAREN FormalParameter RPAREN Block\");\r", "+\t\t\tconsumeStatementCatch();\r", "+\t\t\tbreak;\r", "+\t\tcase 273 : // System.out.println(\"PushLPAREN ::= LPAREN\");\r", "+\t\t\tconsumeLeftParen();\r", "+\t\t\tbreak;\r", "+\t\tcase 274 : // System.out.println(\"PushRPAREN ::= RPAREN\");\r", "+\t\t\tconsumeRightParen();\r", "+\t\t\tbreak;\r", "+\t\tcase 278 : // System.out.println(\"PrimaryNoNewArray ::= this\");\r", "+\t\t\tconsumePrimaryNoNewArrayThis();\r", "+\t\t\tbreak;\r", "+\t\tcase 279 : // System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression PushRPAREN\");\r", "+\t\t\tconsumePrimaryNoNewArray();\r", "+\t\t\tbreak;\r", "+\t\tcase 282 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT this\");\r", "+\t\t\tconsumePrimaryNoNewArrayNameThis();\r", "+\t\t\tbreak;\r", "+\t\tcase 283 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT super\");\r", "+\t\t\tconsumePrimaryNoNewArrayNameSuper();\r", "+\t\t\tbreak;\r", "+\t\tcase 284 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT class\");\r", "+\t\t\tconsumePrimaryNoNewArrayName();\r", "+\t\t\tbreak;\r", "+\t\tcase 285 : // System.out.println(\"PrimaryNoNewArray ::= ArrayType DOT class\");\r", "+\t\t\tconsumePrimaryNoNewArrayArrayType();\r", "+\t\t\tbreak;\r", "+\t\tcase 286 : // System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\");\r", "+\t\t\tconsumePrimaryNoNewArrayPrimitiveType();\r", "+\t\t\tbreak;\r", "+\t\tcase 289 : // System.out.println(\"AllocationHeader ::= new ClassType LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\tconsumeAllocationHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 290 : // System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\tconsumeClassInstanceCreationExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 291 : // System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new SimpleName LPAREN...\");\r", "+\t\t\tconsumeClassInstanceCreationExpressionQualified();\r", "+\t\t\tbreak;\r", "+\t\tcase 292 : // System.out.println(\"ClassInstanceCreationExpression ::= ClassInstanceCreationExpressionName new...\");\r", "+\t\t\tconsumeClassInstanceCreationExpressionQualified();\r", "+\t\t\tbreak;\r", "+\t\tcase 293 : // System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\");\r", "+\t\t\tconsumeClassInstanceCreationExpressionName();\r", "+\t\t\tbreak;\r", "+\t\tcase 294 : // System.out.println(\"ClassBodyopt ::=\");\r", "+\t\t\tconsumeClassBodyopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 296 : // System.out.println(\"EnterAnonymousClassBody ::=\");\r", "+\t\t\tconsumeEnterAnonymousClassBody();\r", "+\t\t\tbreak;\r", "+\t\tcase 298 : // System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\");\r", "+\t\t\tconsumeArgumentList();\r", "+\t\t\tbreak;\r", "+\t\tcase 299 : // System.out.println(\"ArrayCreationExpression ::= new PrimitiveType DimWithOrWithOutExprs...\");\r", "+\t\t\tconsumeArrayCreationExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 300 : // System.out.println(\"ArrayCreationExpression ::= new ClassOrInterfaceType DimWithOrWithOutExprs...\");\r", "+\t\t\tconsumeArrayCreationExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 302 : // System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\");\r", "+\t\t\tconsumeDimWithOrWithOutExprs();\r", "+\t\t\tbreak;\r", "+\t\tcase 304 : // System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\");\r", "+\t\t\tconsumeDimWithOrWithOutExpr();\r", "+\t\t\tbreak;\r", "+\t\tcase 305 : // System.out.println(\"Dims ::= DimsLoop\");\r", "+\t\t\tconsumeDims();\r", "+\t\t\tbreak;\r", "+\t\tcase 308 : // System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\");\r", "+\t\t\tconsumeOneDimLoop();\r", "+\t\t\tbreak;\r", "+\t\tcase 309 : // System.out.println(\"FieldAccess ::= Primary DOT Identifier\");\r", "+\t\t\tconsumeFieldAccess(false);\r", "+\t\t\tbreak;\r", "+\t\tcase 310 : // System.out.println(\"FieldAccess ::= super DOT Identifier\");\r", "+\t\t\tconsumeFieldAccess(true);\r", "+\t\t\tbreak;\r", "+\t\tcase 311 : // System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\tconsumeMethodInvocationName();\r", "+\t\t\tbreak;\r", "+\t\tcase 312 : // System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\tconsumeMethodInvocationPrimary();\r", "+\t\t\tbreak;\r", "+\t\tcase 313 : // System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\tconsumeMethodInvocationSuper();\r", "+\t\t\tbreak;\r", "+\t\tcase 314 : // System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\");\r", "+\t\t\tconsumeArrayAccess(true);\r", "+\t\t\tbreak;\r", "+\t\tcase 315 : // System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression RBRACKET\");\r", "+\t\t\tconsumeArrayAccess(false);\r", "+\t\t\tbreak;\r", "+\t\tcase 317 : // System.out.println(\"PostfixExpression ::= Name\");\r", "+\t\t\tconsumePostfixExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 320 : // System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS, true);\r", "+\t\t\tbreak;\r", "+\t\tcase 321 : // System.out.println(\"PostDecrementExpression ::= PostfixExpression MINUS_MINUS\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS, true);\r", "+\t\t\tbreak;\r", "+\t\tcase 322 : // System.out.println(\"PushPosition ::=\");\r", "+\t\t\tconsumePushPosition();\r", "+\t\t\tbreak;\r", "+\t\tcase 325 : // System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 326 : // System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 328 : // System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS, false);\r", "+\t\t\tbreak;\r", "+\t\tcase 329 : // System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS, false);\r", "+\t\t\tbreak;\r", "+\t\tcase 331 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.TWIDDLE);\r", "+\t\t\tbreak;\r", "+\t\tcase 332 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.NOT);\r", "+\t\t\tbreak;\r", "+\t\tcase 334 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN UnaryExpression\");\r", "+\t\t\tconsumeCastExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 335 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN UnaryExpressionNotPlusMinus\");\r", "+\t\t\tconsumeCastExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 336 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN UnaryExpressionNotPlusMinus\");\r", "+\t\t\tconsumeCastExpressionLL1();\r", "+\t\t\tbreak;\r", "+\t\tcase 338 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY UnaryExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.MULTIPLY);\r", "+\t\t\tbreak;\r", "+\t\tcase 339 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE UnaryExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.DIVIDE);\r", "+\t\t\tbreak;\r", "+\t\tcase 340 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER UnaryExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.REMAINDER);\r", "+\t\t\tbreak;\r", "+\t\tcase 342 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.PLUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 343 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.MINUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 345 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.LEFT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 346 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.RIGHT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 347 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.UNSIGNED_RIGHT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 349 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.LESS);\r", "+\t\t\tbreak;\r", "+\t\tcase 350 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER ShiftExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.GREATER);\r", "+\t\t\tbreak;\r", "+\t\tcase 351 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL ShiftExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.LESS_EQUAL);\r", "+\t\t\tbreak;\r", "+\t\tcase 352 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL ShiftExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.GREATER_EQUAL);\r", "+\t\t\tbreak;\r", "+\t\tcase 353 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof ReferenceType\");\r", "+\t\t\tconsumeInstanceOfExpression(OperatorExpression.INSTANCEOF);\r", "+\t\t\tbreak;\r", "+\t\tcase 355 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression\");\r", "+\t\t\tconsumeEqualityExpression(OperatorExpression.EQUAL_EQUAL);\r", "+\t\t\tbreak;\r", "+\t\tcase 356 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL RelationalExpression\");\r", "+\t\t\tconsumeEqualityExpression(OperatorExpression.NOT_EQUAL);\r", "+\t\t\tbreak;\r", "+\t\tcase 358 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.AND);\r", "+\t\t\tbreak;\r", "+\t\tcase 360 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.XOR);\r", "+\t\t\tbreak;\r", "+\t\tcase 362 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR ExclusiveOrExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.OR);\r", "+\t\t\tbreak;\r", "+\t\tcase 364 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND InclusiveOrExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.AND_AND);\r", "+\t\t\tbreak;\r", "+\t\tcase 366 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR ConditionalAndExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.OR_OR);\r", "+\t\t\tbreak;\r", "+\t\tcase 368 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON...\");\r", "+\t\t\tconsumeConditionalExpression(OperatorExpression.QUESTIONCOLON);\r", "+\t\t\tbreak;\r", "+\t\tcase 371 : // System.out.println(\"Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression\");\r", "+\t\t\tconsumeAssignment();\r", "+\t\t\tbreak;\r", "+\t\tcase 373 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");\r", "+\t\t\tignoreExpressionAssignment();\r", "+\t\t\tbreak;\r", "+\t\tcase 374 : // System.out.println(\"LeftHandSide ::= Name\");\r", "+\t\t\tconsumeLeftHandSide();\r", "+\t\t\tbreak;\r", "+\t\tcase 377 : // System.out.println(\"AssignmentOperator ::= EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(EQUAL);\r", "+\t\t\tbreak;\r", "+\t\tcase 378 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(MULTIPLY);\r", "+\t\t\tbreak;\r", "+\t\tcase 379 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(DIVIDE);\r", "+\t\t\tbreak;\r", "+\t\tcase 380 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(REMAINDER);\r", "+\t\t\tbreak;\r", "+\t\tcase 381 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(PLUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 382 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(MINUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 383 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(LEFT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 384 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(RIGHT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 385 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 386 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(AND);\r", "+\t\t\tbreak;\r", "+\t\tcase 387 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(XOR);\r", "+\t\t\tbreak;\r", "+\t\tcase 388 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(OR);\r", "+\t\t\tbreak;\r", "+\t\tcase 395 : // System.out.println(\"Expressionopt ::=\");\r", "+\t\t\tconsumeEmptyExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 399 : // System.out.println(\"ImportDeclarationsopt ::=\");\r", "+\t\t\tconsumeEmptyImportDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 400 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");\r", "+\t\t\tconsumeImportDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 401 : // System.out.println(\"TypeDeclarationsopt ::=\");\r", "+\t\t\tconsumeEmptyTypeDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 402 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");\r", "+\t\t\tconsumeTypeDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 403 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");\r", "+\t\t\tconsumeEmptyClassBodyDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 404 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");\r", "+\t\t\tconsumeClassBodyDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 405 : // System.out.println(\"Modifiersopt ::=\");\r", "+\t\t\tconsumeDefaultModifiers();\r", "+\t\t\tbreak;\r", "+\t\tcase 406 : // System.out.println(\"Modifiersopt ::= Modifiers\");\r", "+\t\t\tconsumeModifiers();\r", "+\t\t\tbreak;\r", "+\t\tcase 407 : // System.out.println(\"BlockStatementsopt ::=\");\r", "+\t\t\tconsumeEmptyBlockStatementsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 409 : // System.out.println(\"Dimsopt ::=\");\r", "+\t\t\tconsumeEmptyDimsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 411 : // System.out.println(\"ArgumentListopt ::=\");\r", "+\t\t\tconsumeEmptyArgumentListopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 415 : // System.out.println(\"FormalParameterListopt ::=\");\r", "+\t\t\tconsumeFormalParameterListopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 419 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");\r", "+\t\t\tconsumeEmptyInterfaceMemberDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 420 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\");\r", "+\t\t\tconsumeInterfaceMemberDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 421 : // System.out.println(\"NestedType ::=\");\r", "+\t\t\tconsumeNestedType();\r", "+\t\t\tbreak;\r", "+\t\tcase 422 : // System.out.println(\"ForInitopt ::=\");\r", "+\t\t\tconsumeEmptyForInitopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 424 : // System.out.println(\"ForUpdateopt ::=\");\r", "+\t\t\tconsumeEmptyForUpdateopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 428 : // System.out.println(\"Catchesopt ::=\");\r", "+\t\t\tconsumeEmptyCatchesopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 430 : // System.out.println(\"ArrayInitializeropt ::=\");\r", "+\t\t\tconsumeEmptyArrayInitializeropt();\r", "+\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e299e26ee70be2ae22a9534664cd76ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 141, "signatureBeforeChange": "\r \tprotected void consumeRule(int act)", "signatureAfterChange": "\r protected void consumeRule(int act)", "diff": ["-\t// This method is part of an automatic generation : do NOT edit-modify  \r", "-\tprotected void consumeRule(int act) {\r", "-\t\tswitch (act) {\r", "-\t\t\tcase 29 : // System.out.println(\"Type ::= PrimitiveType\");\r", "-\t\t\t\tconsumePrimitiveType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 43 : // System.out.println(\"ReferenceType ::= ClassOrInterfaceType\");\r", "-\t\t\t\tconsumeReferenceType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 52 : // System.out.println(\"QualifiedName ::= Name DOT SimpleName\");\r", "-\t\t\t\tconsumeQualifiedName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 53 : // System.out.println(\"CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt ImportDeclarationsopt\");\r", "-\t\t\t\tconsumeCompilationUnit();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 54 : // System.out.println(\"EnterCompilationUnit ::=\");\r", "-\t\t\t\tconsumeEnterCompilationUnit();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 66 : // System.out.println(\"CatchHeader ::= catch LPAREN FormalParameter RPAREN LBRACE\");\r", "-\t\t\t\tconsumeCatchHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 68 : // System.out.println(\"ImportDeclarations ::= ImportDeclarations ImportDeclaration\");\r", "-\t\t\t\tconsumeImportDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 70 : // System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\");\r", "-\t\t\t\tconsumeTypeDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 71 : // System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\");\r", "-\t\t\t\tconsumePackageDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 72 : // System.out.println(\"PackageDeclarationName ::= package Name\");\r", "-\t\t\t\tconsumePackageDeclarationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 75 : // System.out.println(\"SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName SEMICOLON\");\r", "-\t\t\t\tconsumeSingleTypeImportDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 76 : // System.out.println(\"SingleTypeImportDeclarationName ::= import Name\");\r", "-\t\t\t\tconsumeSingleTypeImportDeclarationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 77 : // System.out.println(\"TypeImportOnDemandDeclaration ::= TypeImportOnDemandDeclarationName SEMICOLON\");\r", "-\t\t\t\tconsumeTypeImportOnDemandDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 78 : // System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT MULTIPLY\");\r", "-\t\t\t\tconsumeTypeImportOnDemandDeclarationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 81 : // System.out.println(\"TypeDeclaration ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyTypeDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 95 : // System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\");\r", "-\t\t\t\tconsumeClassDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 96 : // System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt ClassHeaderImplementsopt\");\r", "-\t\t\t\tconsumeClassHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 97 : // System.out.println(\"ClassHeaderName ::= Modifiersopt class Identifier\");\r", "-\t\t\t\tconsumeClassHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 98 : // System.out.println(\"ClassHeaderExtends ::= extends ClassType\");\r", "-\t\t\t\tconsumeClassHeaderExtends();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 99 : // System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\");\r", "-\t\t\t\tconsumeClassHeaderImplements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 101 : // System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA InterfaceType\");\r", "-\t\t\t\tconsumeInterfaceTypeList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 102 : // System.out.println(\"InterfaceType ::= ClassOrInterfaceType\");\r", "-\t\t\t\tconsumeInterfaceType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 105 : // System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\");\r", "-\t\t\t\tconsumeClassBodyDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 109 : // System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod Block\");\r", "-\t\t\t\tconsumeClassBodyDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 110 : // System.out.println(\"Diet ::=\");\r", "-\t\t\t\tconsumeDiet();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 111 : // System.out.println(\"Initializer ::= Diet NestedMethod Block\");\r", "-\t\t\t\tconsumeClassBodyDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 118 : // System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyClassMemberDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 119 : // System.out.println(\"FieldDeclaration ::= Modifiersopt Type VariableDeclarators SEMICOLON\");\r", "-\t\t\t\tconsumeFieldDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 121 : // System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator\");\r", "-\t\t\t\tconsumeVariableDeclarators();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 124 : // System.out.println(\"EnterVariable ::=\");\r", "-\t\t\t\tconsumeEnterVariable();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 125 : // System.out.println(\"ExitVariableWithInitialization ::=\");\r", "-\t\t\t\tconsumeExitVariableWithInitialization();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 126 : // System.out.println(\"ExitVariableWithoutInitialization ::=\");\r", "-\t\t\t\tconsumeExitVariableWithoutInitialization();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 127 : // System.out.println(\"ForceNoDiet ::=\");\r", "-\t\t\t\tconsumeForceNoDiet();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 128 : // System.out.println(\"RestoreDiet ::=\");\r", "-\t\t\t\tconsumeRestoreDiet();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 133 : // System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\");\r", "-\t\t\t\t// set to true to consume a method with a body\r", "-\t\t\t\tconsumeMethodDeclaration(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 134 : // System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\");\r", "-\t\t\t\t// set to false to consume a method without body\r", "-\t\t\t\tconsumeMethodDeclaration(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 135 : // System.out.println(\"MethodHeader ::= MethodHeaderName MethodHeaderParameters MethodHeaderExtendedDims\");\r", "-\t\t\t\tconsumeMethodHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 136 : // System.out.println(\"MethodPushModifiersHeader ::= MethodPushModifiersHeaderName MethodHeaderParameters\");\r", "-\t\t\t\tconsumeMethodHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 137 : // System.out.println(\"MethodPushModifiersHeaderName ::= Modifiers Type PushModifiers Identifier LPAREN\");\r", "-\t\t\t\tconsumeMethodPushModifiersHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 138 : // System.out.println(\"MethodPushModifiersHeaderName ::= Type PushModifiers Identifier LPAREN\");\r", "-\t\t\t\tconsumeMethodPushModifiersHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 139 : // System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\");\r", "-\t\t\t\tconsumeMethodHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 140 : // System.out.println(\"MethodHeaderParameters ::= FormalParameterListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodHeaderParameters();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 141 : // System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\");\r", "-\t\t\t\tconsumeMethodHeaderExtendedDims();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 142 : // System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\");\r", "-\t\t\t\tconsumeMethodHeaderThrowsClause();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 143 : // System.out.println(\"ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters...\");\r", "-\t\t\t\tconsumeConstructorHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 144 : // System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\");\r", "-\t\t\t\tconsumeConstructorHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 146 : // System.out.println(\"FormalParameterList ::= FormalParameterList COMMA FormalParameter\");\r", "-\t\t\t\tconsumeFormalParameterList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 147 : // System.out.println(\"FormalParameter ::= Modifiersopt Type VariableDeclaratorId\");\r", "-\t\t\t\t// the boolean is used to know if the modifiers should be reset\r", "-\t\t\t\tconsumeFormalParameter();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 149 : // System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\");\r", "-\t\t\t\tconsumeClassTypeList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 150 : // System.out.println(\"ClassTypeElt ::= ClassType\");\r", "-\t\t\t\tconsumeClassTypeElt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 151 : // System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt RBRACE\");\r", "-\t\t\t\tconsumeMethodBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 152 : // System.out.println(\"NestedMethod ::=\");\r", "-\t\t\t\tconsumeNestedMethod();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 153 : // System.out.println(\"StaticInitializer ::= StaticOnly Block\");\r", "-\t\t\t\tconsumeStaticInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 154 : // System.out.println(\"StaticOnly ::= static\");\r", "-\t\t\t\tconsumeStaticOnly();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 155 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "-\t\t\t\tconsumeConstructorDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 156 : // System.out.println(\"ConstructorBody ::= NestedMethod LBRACE ConstructorBlockStatementsopt RBRACE\");\r", "-\t\t\t\tconsumeConstructorBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 159 : // System.out.println(\"ConstructorBlockStatementsopt ::= ExplicitConstructorInvocation BlockStatements\");\r", "-\t\t\t\tconsumeConstructorBlockStatements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 160 : // System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(0, ExplicitConstructorCall.This);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 161 : // System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(0, ExplicitConstructorCall.Super);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 162 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.Super);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 163 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.Super);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 164 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.This);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 165 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.This);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 166 : // System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\");\r", "-\t\t\t\tconsumeInterfaceDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 167 : // System.out.println(\"InterfaceHeader ::= InterfaceHeaderName InterfaceHeaderExtendsopt\");\r", "-\t\t\t\tconsumeInterfaceHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 168 : // System.out.println(\"InterfaceHeaderName ::= Modifiersopt interface Identifier\");\r", "-\t\t\t\tconsumeInterfaceHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 170 : // System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\");\r", "-\t\t\t\tconsumeInterfaceHeaderExtends();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 173 : // System.out.println(\"InterfaceMemberDeclarations ::= InterfaceMemberDeclarations...\");\r", "-\t\t\t\tconsumeInterfaceMemberDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 174 : // System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyInterfaceMemberDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 177 : // System.out.println(\"InterfaceMemberDeclaration ::= InvalidMethodDeclaration\");\r", "-\t\t\t\tignoreMethodBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 178 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "-\t\t\t\tignoreInvalidConstructorDeclaration(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 179 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader SEMICOLON\");\r", "-\t\t\t\tignoreInvalidConstructorDeclaration(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 185 : // System.out.println(\"ArrayInitializer ::= LBRACE ,opt RBRACE\");\r", "-\t\t\t\tconsumeEmptyArrayInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 186 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers RBRACE\");\r", "-\t\t\t\tconsumeArrayInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 187 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers COMMA RBRACE\");\r", "-\t\t\t\tconsumeArrayInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 189 : // System.out.println(\"VariableInitializers ::= VariableInitializers COMMA VariableInitializer\");\r", "-\t\t\t\tconsumeVariableInitializers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 190 : // System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\");\r", "-\t\t\t\tconsumeBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 191 : // System.out.println(\"OpenBlock ::=\");\r", "-\t\t\t\tconsumeOpenBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 193 : // System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\");\r", "-\t\t\t\tconsumeBlockStatements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 197 : // System.out.println(\"BlockStatement ::= InvalidInterfaceDeclaration\");\r", "-\t\t\t\tignoreInterfaceDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 198 : // System.out.println(\"LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON\");\r", "-\t\t\t\tconsumeLocalVariableDeclarationStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 199 : // System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers VariableDeclarators\");\r", "-\t\t\t\tconsumeLocalVariableDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 200 : // System.out.println(\"LocalVariableDeclaration ::= Modifiers Type PushModifiers VariableDeclarators\");\r", "-\t\t\t\tconsumeLocalVariableDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 201 : // System.out.println(\"PushModifiers ::=\");\r", "-\t\t\t\tconsumePushModifiers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 225 : // System.out.println(\"EmptyStatement ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 226 : // System.out.println(\"LabeledStatement ::= Identifier COLON Statement\");\r", "-\t\t\t\tconsumeStatementLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 227 : // System.out.println(\"LabeledStatementNoShortIf ::= Identifier COLON StatementNoShortIf\");\r", "-\t\t\t\tconsumeStatementLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 228 : // System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\");\r", "-\t\t\t\tconsumeExpressionStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 236 : // System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN Statement\");\r", "-\t\t\t\tconsumeStatementIfNoElse();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 237 : // System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN StatementNoShortIf else...\");\r", "-\t\t\t\tconsumeStatementIfWithElse();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 238 : // System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression RPAREN StatementNoShortIf...\");\r", "-\t\t\t\tconsumeStatementIfWithElse();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 239 : // System.out.println(\"SwitchStatement ::= switch OpenBlock LPAREN Expression RPAREN SwitchBlock\");\r", "-\t\t\t\tconsumeStatementSwitch();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 240 : // System.out.println(\"SwitchBlock ::= LBRACE RBRACE\");\r", "-\t\t\t\tconsumeEmptySwitchBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 243 : // System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements SwitchLabels RBRACE\");\r", "-\t\t\t\tconsumeSwitchBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 245 : // System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\");\r", "-\t\t\t\tconsumeSwitchBlockStatements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 246 : // System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\");\r", "-\t\t\t\tconsumeSwitchBlockStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 248 : // System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\");\r", "-\t\t\t\tconsumeSwitchLabels();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 249 : // System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\");\r", "-\t\t\t\tconsumeCaseLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 250 : // System.out.println(\"SwitchLabel ::= default COLON\");\r", "-\t\t\t\tconsumeDefaultLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 251 : // System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN Statement\");\r", "-\t\t\t\tconsumeStatementWhile();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 252 : // System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression RPAREN StatementNoShortIf\");\r", "-\t\t\t\tconsumeStatementWhile();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 253 : // System.out.println(\"DoStatement ::= do Statement while LPAREN Expression RPAREN SEMICOLON\");\r", "-\t\t\t\tconsumeStatementDo();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 254 : // System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON...\");\r", "-\t\t\t\tconsumeStatementFor();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 255 : // System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON\");\r", "-\t\t\t\tconsumeStatementFor();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 256 : // System.out.println(\"ForInit ::= StatementExpressionList\");\r", "-\t\t\t\tconsumeForInit();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 260 : // System.out.println(\"StatementExpressionList ::= StatementExpressionList COMMA StatementExpression\");\r", "-\t\t\t\tconsumeStatementExpressionList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 261 : // System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\");\r", "-\t\t\t\tconsumeSimpleAssertStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 262 : // System.out.println(\"AssertStatement ::= assert Expression COLON Expression SEMICOLON\");\r", "-\t\t\t\tconsumeAssertStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 263 : // System.out.println(\"BreakStatement ::= break SEMICOLON\");\r", "-\t\t\t\tconsumeStatementBreak();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 264 : // System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\");\r", "-\t\t\t\tconsumeStatementBreakWithLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 265 : // System.out.println(\"ContinueStatement ::= continue SEMICOLON\");\r", "-\t\t\t\tconsumeStatementContinue();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 266 : // System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\");\r", "-\t\t\t\tconsumeStatementContinueWithLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 267 : // System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\");\r", "-\t\t\t\tconsumeStatementReturn();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 268 : // System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\");\r", "-\t\t\t\tconsumeStatementThrow();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 269 : // System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN Expression RPAREN Block\");\r", "-\t\t\t\tconsumeStatementSynchronized();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 270 : // System.out.println(\"OnlySynchronized ::= synchronized\");\r", "-\t\t\t\tconsumeOnlySynchronized();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 271 : // System.out.println(\"TryStatement ::= try Block Catches\");\r", "-\t\t\t\tconsumeStatementTry(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 272 : // System.out.println(\"TryStatement ::= try Block Catchesopt Finally\");\r", "-\t\t\t\tconsumeStatementTry(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 274 : // System.out.println(\"Catches ::= Catches CatchClause\");\r", "-\t\t\t\tconsumeCatches();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 275 : // System.out.println(\"CatchClause ::= catch LPAREN FormalParameter RPAREN Block\");\r", "-\t\t\t\tconsumeStatementCatch();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 277 : // System.out.println(\"PushLPAREN ::= LPAREN\");\r", "-\t\t\t\tconsumeLeftParen();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 278 : // System.out.println(\"PushRPAREN ::= RPAREN\");\r", "-\t\t\t\tconsumeRightParen();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 282 : // System.out.println(\"PrimaryNoNewArray ::= this\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayThis();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 283 : // System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression PushRPAREN\");\r", "-\t\t\t\tconsumePrimaryNoNewArray();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 286 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT this\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayNameThis();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 287 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT super\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayNameSuper();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 288 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT class\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 289 : // System.out.println(\"PrimaryNoNewArray ::= ArrayType DOT class\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayArrayType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 290 : // System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayPrimitiveType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 293 : // System.out.println(\"AllocationHeader ::= new ClassType LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeAllocationHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 294 : // System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 295 : // System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new SimpleName LPAREN...\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpressionQualified();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 296 : // System.out.println(\"ClassInstanceCreationExpression ::= ClassInstanceCreationExpressionName new...\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpressionQualified();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 297 : // System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpressionName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 298 : // System.out.println(\"ClassBodyopt ::=\");\r", "-\t\t\t\tconsumeClassBodyopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 300 : // System.out.println(\"EnterAnonymousClassBody ::=\");\r", "-\t\t\t\tconsumeEnterAnonymousClassBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 302 : // System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\");\r", "-\t\t\t\tconsumeArgumentList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 303 : // System.out.println(\"ArrayCreationExpression ::= new PrimitiveType DimWithOrWithOutExprs...\");\r", "-\t\t\t\tconsumeArrayCreationExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 304 : // System.out.println(\"ArrayCreationExpression ::= new ClassOrInterfaceType DimWithOrWithOutExprs...\");\r", "-\t\t\t\tconsumeArrayCreationExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 306 : // System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\");\r", "-\t\t\t\tconsumeDimWithOrWithOutExprs();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 308 : // System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\");\r", "-\t\t\t\tconsumeDimWithOrWithOutExpr();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 309 : // System.out.println(\"Dims ::= DimsLoop\");\r", "-\t\t\t\tconsumeDims();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 312 : // System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\");\r", "-\t\t\t\tconsumeOneDimLoop();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 313 : // System.out.println(\"FieldAccess ::= Primary DOT Identifier\");\r", "-\t\t\t\tconsumeFieldAccess(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 314 : // System.out.println(\"FieldAccess ::= super DOT Identifier\");\r", "-\t\t\t\tconsumeFieldAccess(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 315 : // System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodInvocationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 316 : // System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodInvocationPrimary();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 317 : // System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodInvocationSuper();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 318 : // System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\");\r", "-\t\t\t\tconsumeArrayAccess(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 319 : // System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression RBRACKET\");\r", "-\t\t\t\tconsumeArrayAccess(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 321 : // System.out.println(\"PostfixExpression ::= Name\");\r", "-\t\t\t\tconsumePostfixExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 324 : // System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS, true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 325 : // System.out.println(\"PostDecrementExpression ::= PostfixExpression MINUS_MINUS\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS, true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 326 : // System.out.println(\"PushPosition ::=\");\r", "-\t\t\t\tconsumePushPosition();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 329 : // System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 330 : // System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 332 : // System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS, false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 333 : // System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS, false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 335 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.TWIDDLE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 336 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.NOT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 338 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN UnaryExpression\");\r", "-\t\t\t\tconsumeCastExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 339 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN UnaryExpressionNotPlusMinus\");\r", "-\t\t\t\tconsumeCastExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 340 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN UnaryExpressionNotPlusMinus\");\r", "-\t\t\t\tconsumeCastExpressionLL1();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 342 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY UnaryExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.MULTIPLY);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 343 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE UnaryExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.DIVIDE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 344 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER UnaryExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.REMAINDER);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 346 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.PLUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 347 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.MINUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 349 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.LEFT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 350 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 351 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.UNSIGNED_RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 353 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.LESS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 354 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.GREATER);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 355 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.LESS_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 356 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.GREATER_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 357 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof ReferenceType\");\r", "-\t\t\t\tconsumeInstanceOfExpression(OperatorExpression.INSTANCEOF);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 359 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression\");\r", "-\t\t\t\tconsumeEqualityExpression(OperatorExpression.EQUAL_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 360 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL RelationalExpression\");\r", "-\t\t\t\tconsumeEqualityExpression(OperatorExpression.NOT_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 362 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.AND);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 364 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.XOR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 366 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR ExclusiveOrExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.OR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 368 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND InclusiveOrExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.AND_AND);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 370 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR ConditionalAndExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.OR_OR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 372 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON...\");\r", "-\t\t\t\tconsumeConditionalExpression(OperatorExpression.QUESTIONCOLON);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 375 : // System.out.println(\"Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression\");\r", "-\t\t\t\tconsumeAssignment();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 377 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");\r", "-\t\t\t\tignoreExpressionAssignment();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 378 : // System.out.println(\"LeftHandSide ::= Name\");\r", "-\t\t\t\tconsumeLeftHandSide();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 381 : // System.out.println(\"AssignmentOperator ::= EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 382 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(MULTIPLY);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 383 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(DIVIDE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 384 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(REMAINDER);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 385 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(PLUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 386 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(MINUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 387 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(LEFT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 388 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 389 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 390 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(AND);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 391 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(XOR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 392 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(OR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 399 : // System.out.println(\"Expressionopt ::=\");\r", "-\t\t\t\tconsumeEmptyExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 403 : // System.out.println(\"ImportDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyImportDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 404 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");\r", "-\t\t\t\tconsumeImportDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 405 : // System.out.println(\"TypeDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyTypeDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 406 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");\r", "-\t\t\t\tconsumeTypeDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 407 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyClassBodyDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 408 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");\r", "-\t\t\t\tconsumeClassBodyDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 409 : // System.out.println(\"Modifiersopt ::=\");\r", "-\t\t\t\tconsumeDefaultModifiers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 410 : // System.out.println(\"Modifiersopt ::= Modifiers\");\r", "-\t\t\t\tconsumeModifiers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 411 : // System.out.println(\"BlockStatementsopt ::=\");\r", "-\t\t\t\tconsumeEmptyBlockStatementsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 413 : // System.out.println(\"Dimsopt ::=\");\r", "-\t\t\t\tconsumeEmptyDimsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 415 : // System.out.println(\"ArgumentListopt ::=\");\r", "-\t\t\t\tconsumeEmptyArgumentListopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 419 : // System.out.println(\"FormalParameterListopt ::=\");\r", "-\t\t\t\tconsumeFormalParameterListopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 423 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyInterfaceMemberDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 424 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\");\r", "-\t\t\t\tconsumeInterfaceMemberDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 425 : // System.out.println(\"NestedType ::=\");\r", "-\t\t\t\tconsumeNestedType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 426 : // System.out.println(\"ForInitopt ::=\");\r", "-\t\t\t\tconsumeEmptyForInitopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 428 : // System.out.println(\"ForUpdateopt ::=\");\r", "-\t\t\t\tconsumeEmptyForUpdateopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 432 : // System.out.println(\"Catchesopt ::=\");\r", "-\t\t\t\tconsumeEmptyCatchesopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 434 : // System.out.println(\"ArrayInitializeropt ::=\");\r", "-\t\t\t\tconsumeEmptyArrayInitializeropt();\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "+// This method is part of an automatic generation : do NOT edit-modify  \r", "+protected void consumeRule(int act) {\r", "+\tswitch (act) {\r", "+\t\tcase 29 : // System.out.println(\"Type ::= PrimitiveType\");\r", "+\t\t\tconsumePrimitiveType();\r", "+\t\t\tbreak;\r", "+\t\tcase 43 : // System.out.println(\"ReferenceType ::= ClassOrInterfaceType\");\r", "+\t\t\tconsumeReferenceType();\r", "+\t\t\tbreak;\r", "+\t\tcase 52 : // System.out.println(\"QualifiedName ::= Name DOT SimpleName\");\r", "+\t\t\tconsumeQualifiedName();\r", "+\t\t\tbreak;\r", "+\t\tcase 53 : // System.out.println(\"CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt ImportDeclarationsopt\");\r", "+\t\t\tconsumeCompilationUnit();\r", "+\t\t\tbreak;\r", "+\t\tcase 54 : // System.out.println(\"EnterCompilationUnit ::=\");\r", "+\t\t\tconsumeEnterCompilationUnit();\r", "+\t\t\tbreak;\r", "+\t\tcase 66 : // System.out.println(\"CatchHeader ::= catch LPAREN FormalParameter RPAREN LBRACE\");\r", "+\t\t\tconsumeCatchHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 68 : // System.out.println(\"ImportDeclarations ::= ImportDeclarations ImportDeclaration\");\r", "+\t\t\tconsumeImportDeclarations();\r", "+\t\t\tbreak;\r", "+\t\tcase 70 : // System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\");\r", "+\t\t\tconsumeTypeDeclarations();\r", "+\t\t\tbreak;\r", "+\t\tcase 71 : // System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\");\r", "+\t\t\tconsumePackageDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 72 : // System.out.println(\"PackageDeclarationName ::= package Name\");\r", "+\t\t\tconsumePackageDeclarationName();\r", "+\t\t\tbreak;\r", "+\t\tcase 75 : // System.out.println(\"SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName SEMICOLON\");\r", "+\t\t\tconsumeSingleTypeImportDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 76 : // System.out.println(\"SingleTypeImportDeclarationName ::= import Name\");\r", "+\t\t\tconsumeSingleTypeImportDeclarationName();\r", "+\t\t\tbreak;\r", "+\t\tcase 77 : // System.out.println(\"TypeImportOnDemandDeclaration ::= TypeImportOnDemandDeclarationName SEMICOLON\");\r", "+\t\t\tconsumeTypeImportOnDemandDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 78 : // System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT MULTIPLY\");\r", "+\t\t\tconsumeTypeImportOnDemandDeclarationName();\r", "+\t\t\tbreak;\r", "+\t\tcase 81 : // System.out.println(\"TypeDeclaration ::= SEMICOLON\");\r", "+\t\t\tconsumeEmptyTypeDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 95 : // System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\");\r", "+\t\t\tconsumeClassDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 96 : // System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt ClassHeaderImplementsopt\");\r", "+\t\t\tconsumeClassHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 97 : // System.out.println(\"ClassHeaderName ::= Modifiersopt class Identifier\");\r", "+\t\t\tconsumeClassHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 98 : // System.out.println(\"ClassHeaderExtends ::= extends ClassType\");\r", "+\t\t\tconsumeClassHeaderExtends();\r", "+\t\t\tbreak;\r", "+\t\tcase 99 : // System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\");\r", "+\t\t\tconsumeClassHeaderImplements();\r", "+\t\t\tbreak;\r", "+\t\tcase 101 : // System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA InterfaceType\");\r", "+\t\t\tconsumeInterfaceTypeList();\r", "+\t\t\tbreak;\r", "+\t\tcase 102 : // System.out.println(\"InterfaceType ::= ClassOrInterfaceType\");\r", "+\t\t\tconsumeInterfaceType();\r", "+\t\t\tbreak;\r", "+\t\tcase 105 : // System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\");\r", "+\t\t\tconsumeClassBodyDeclarations();\r", "+\t\t\tbreak;\r", "+\t\tcase 109 : // System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod Block\");\r", "+\t\t\tconsumeClassBodyDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 110 : // System.out.println(\"Diet ::=\");\r", "+\t\t\tconsumeDiet();\r", "+\t\t\tbreak;\r", "+\t\tcase 117 : // System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\");\r", "+\t\t\tconsumeEmptyClassMemberDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 118 : // System.out.println(\"FieldDeclaration ::= Modifiersopt Type VariableDeclarators SEMICOLON\");\r", "+\t\t\tconsumeFieldDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 120 : // System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator\");\r", "+\t\t\tconsumeVariableDeclarators();\r", "+\t\t\tbreak;\r", "+\t\tcase 123 : // System.out.println(\"EnterVariable ::=\");\r", "+\t\t\tconsumeEnterVariable();\r", "+\t\t\tbreak;\r", "+\t\tcase 124 : // System.out.println(\"ExitVariableWithInitialization ::=\");\r", "+\t\t\tconsumeExitVariableWithInitialization();\r", "+\t\t\tbreak;\r", "+\t\tcase 125 : // System.out.println(\"ExitVariableWithoutInitialization ::=\");\r", "+\t\t\tconsumeExitVariableWithoutInitialization();\r", "+\t\t\tbreak;\r", "+\t\tcase 126 : // System.out.println(\"ForceNoDiet ::=\");\r", "+\t\t\tconsumeForceNoDiet();\r", "+\t\t\tbreak;\r", "+\t\tcase 127 : // System.out.println(\"RestoreDiet ::=\");\r", "+\t\t\tconsumeRestoreDiet();\r", "+\t\t\tbreak;\r", "+\t\tcase 132 : // System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\");\r", "+\t\t\t// set to true to consume a method with a body\r", "+\t\t\tconsumeMethodDeclaration(true);\r", "+\t\t\tbreak;\r", "+\t\tcase 133 : // System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\");\r", "+\t\t\t// set to false to consume a method without body\r", "+\t\t\tconsumeMethodDeclaration(false);\r", "+\t\t\tbreak;\r", "+\t\tcase 134 : // System.out.println(\"MethodHeader ::= MethodHeaderName MethodHeaderParameters MethodHeaderExtendedDims\");\r", "+\t\t\tconsumeMethodHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 135 : // System.out.println(\"MethodPushModifiersHeader ::= MethodPushModifiersHeaderName MethodHeaderParameters\");\r", "+\t\t\tconsumeMethodHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 136 : // System.out.println(\"MethodPushModifiersHeaderName ::= Modifiers Type PushModifiers Identifier LPAREN\");\r", "+\t\t\tconsumeMethodPushModifiersHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 137 : // System.out.println(\"MethodPushModifiersHeaderName ::= Type PushModifiers Identifier LPAREN\");\r", "+\t\t\tconsumeMethodPushModifiersHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 138 : // System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\");\r", "+\t\t\tconsumeMethodHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 139 : // System.out.println(\"MethodHeaderParameters ::= FormalParameterListopt RPAREN\");\r", "+\t\t\tconsumeMethodHeaderParameters();\r", "+\t\t\tbreak;\r", "+\t\tcase 140 : // System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\");\r", "+\t\t\tconsumeMethodHeaderExtendedDims();\r", "+\t\t\tbreak;\r", "+\t\tcase 141 : // System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\");\r", "+\t\t\tconsumeMethodHeaderThrowsClause();\r", "+\t\t\tbreak;\r", "+\t\tcase 142 : // System.out.println(\"ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters...\");\r", "+\t\t\tconsumeConstructorHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 143 : // System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\");\r", "+\t\t\tconsumeConstructorHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 145 : // System.out.println(\"FormalParameterList ::= FormalParameterList COMMA FormalParameter\");\r", "+\t\t\tconsumeFormalParameterList();\r", "+\t\t\tbreak;\r", "+\t\tcase 146 : // System.out.println(\"FormalParameter ::= Modifiersopt Type VariableDeclaratorId\");\r", "+\t\t\t// the boolean is used to know if the modifiers should be reset\r", "+\t\t\tconsumeFormalParameter();\r", "+\t\t\tbreak;\r", "+\t\tcase 148 : // System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\");\r", "+\t\t\tconsumeClassTypeList();\r", "+\t\t\tbreak;\r", "+\t\tcase 149 : // System.out.println(\"ClassTypeElt ::= ClassType\");\r", "+\t\t\tconsumeClassTypeElt();\r", "+\t\t\tbreak;\r", "+\t\tcase 150 : // System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt RBRACE\");\r", "+\t\t\tconsumeMethodBody();\r", "+\t\t\tbreak;\r", "+\t\tcase 151 : // System.out.println(\"NestedMethod ::=\");\r", "+\t\t\tconsumeNestedMethod();\r", "+\t\t\tbreak;\r", "+\t\tcase 152 : // System.out.println(\"StaticInitializer ::= StaticOnly Block\");\r", "+\t\t\tconsumeStaticInitializer();\r", "+\t\t\tbreak;\r", "+\t\tcase 153 : // System.out.println(\"StaticOnly ::= static\");\r", "+\t\t\tconsumeStaticOnly();\r", "+\t\t\tbreak;\r", "+\t\tcase 154 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "+\t\t\tconsumeConstructorDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 155 : // System.out.println(\"ConstructorBody ::= NestedMethod LBRACE ConstructorBlockStatementsopt RBRACE\");\r", "+\t\t\tconsumeConstructorBody();\r", "+\t\t\tbreak;\r", "+\t\tcase 158 : // System.out.println(\"ConstructorBlockStatementsopt ::= ExplicitConstructorInvocation BlockStatements\");\r", "+\t\t\tconsumeConstructorBlockStatements();\r", "+\t\t\tbreak;\r", "+\t\tcase 159 : // System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(0, ExplicitConstructorCall.This);\r", "+\t\t\tbreak;\r", "+\t\tcase 160 : // System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(0, ExplicitConstructorCall.Super);\r", "+\t\t\tbreak;\r", "+\t\tcase 161 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.Super);\r", "+\t\t\tbreak;\r", "+\t\tcase 162 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.Super);\r", "+\t\t\tbreak;\r", "+\t\tcase 163 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.This);\r", "+\t\t\tbreak;\r", "+\t\tcase 164 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.This);\r", "+\t\t\tbreak;\r", "+\t\tcase 165 : // System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\");\r", "+\t\t\tconsumeInterfaceDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 166 : // System.out.println(\"InterfaceHeader ::= InterfaceHeaderName InterfaceHeaderExtendsopt\");\r", "+\t\t\tconsumeInterfaceHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 167 : // System.out.println(\"InterfaceHeaderName ::= Modifiersopt interface Identifier\");\r", "+\t\t\tconsumeInterfaceHeaderName();\r", "+\t\t\tbreak;\r", "+\t\tcase 169 : // System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\");\r", "+\t\t\tconsumeInterfaceHeaderExtends();\r", "+\t\t\tbreak;\r", "+\t\tcase 172 : // System.out.println(\"InterfaceMemberDeclarations ::= InterfaceMemberDeclarations...\");\r", "+\t\t\tconsumeInterfaceMemberDeclarations();\r", "+\t\t\tbreak;\r", "+\t\tcase 173 : // System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\");\r", "+\t\t\tconsumeEmptyInterfaceMemberDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 176 : // System.out.println(\"InterfaceMemberDeclaration ::= InvalidMethodDeclaration\");\r", "+\t\t\tignoreMethodBody();\r", "+\t\t\tbreak;\r", "+\t\tcase 177 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "+\t\t\tignoreInvalidConstructorDeclaration(true);\r", "+\t\t\tbreak;\r", "+\t\tcase 178 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader SEMICOLON\");\r", "+\t\t\tignoreInvalidConstructorDeclaration(false);\r", "+\t\t\tbreak;\r", "+\t\tcase 184 : // System.out.println(\"ArrayInitializer ::= LBRACE ,opt RBRACE\");\r", "+\t\t\tconsumeEmptyArrayInitializer();\r", "+\t\t\tbreak;\r", "+\t\tcase 185 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers RBRACE\");\r", "+\t\t\tconsumeArrayInitializer();\r", "+\t\t\tbreak;\r", "+\t\tcase 186 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers COMMA RBRACE\");\r", "+\t\t\tconsumeArrayInitializer();\r", "+\t\t\tbreak;\r", "+\t\tcase 188 : // System.out.println(\"VariableInitializers ::= VariableInitializers COMMA VariableInitializer\");\r", "+\t\t\tconsumeVariableInitializers();\r", "+\t\t\tbreak;\r", "+\t\tcase 189 : // System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\");\r", "+\t\t\tconsumeBlock();\r", "+\t\t\tbreak;\r", "+\t\tcase 190 : // System.out.println(\"OpenBlock ::=\");\r", "+\t\t\tconsumeOpenBlock();\r", "+\t\t\tbreak;\r", "+\t\tcase 192 : // System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\");\r", "+\t\t\tconsumeBlockStatements();\r", "+\t\t\tbreak;\r", "+\t\tcase 196 : // System.out.println(\"BlockStatement ::= InvalidInterfaceDeclaration\");\r", "+\t\t\tignoreInterfaceDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 197 : // System.out.println(\"LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON\");\r", "+\t\t\tconsumeLocalVariableDeclarationStatement();\r", "+\t\t\tbreak;\r", "+\t\tcase 198 : // System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers VariableDeclarators\");\r", "+\t\t\tconsumeLocalVariableDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 199 : // System.out.println(\"LocalVariableDeclaration ::= Modifiers Type PushModifiers VariableDeclarators\");\r", "+\t\t\tconsumeLocalVariableDeclaration();\r", "+\t\t\tbreak;\r", "+\t\tcase 200 : // System.out.println(\"PushModifiers ::=\");\r", "+\t\t\tconsumePushModifiers();\r", "+\t\t\tbreak;\r", "+\t\tcase 223 : // System.out.println(\"EmptyStatement ::= SEMICOLON\");\r", "+\t\t\tconsumeEmptyStatement();\r", "+\t\t\tbreak;\r", "+\t\tcase 224 : // System.out.println(\"LabeledStatement ::= Identifier COLON Statement\");\r", "+\t\t\tconsumeStatementLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 225 : // System.out.println(\"LabeledStatementNoShortIf ::= Identifier COLON StatementNoShortIf\");\r", "+\t\t\tconsumeStatementLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 226 : // System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\");\r", "+\t\t\tconsumeExpressionStatement();\r", "+\t\t\tbreak;\r", "+\t\tcase 234 : // System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN Statement\");\r", "+\t\t\tconsumeStatementIfNoElse();\r", "+\t\t\tbreak;\r", "+\t\tcase 235 : // System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN StatementNoShortIf else...\");\r", "+\t\t\tconsumeStatementIfWithElse();\r", "+\t\t\tbreak;\r", "+\t\tcase 236 : // System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression RPAREN StatementNoShortIf...\");\r", "+\t\t\tconsumeStatementIfWithElse();\r", "+\t\t\tbreak;\r", "+\t\tcase 237 : // System.out.println(\"SwitchStatement ::= switch OpenBlock LPAREN Expression RPAREN SwitchBlock\");\r", "+\t\t\tconsumeStatementSwitch();\r", "+\t\t\tbreak;\r", "+\t\tcase 238 : // System.out.println(\"SwitchBlock ::= LBRACE RBRACE\");\r", "+\t\t\tconsumeEmptySwitchBlock();\r", "+\t\t\tbreak;\r", "+\t\tcase 241 : // System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements SwitchLabels RBRACE\");\r", "+\t\t\tconsumeSwitchBlock();\r", "+\t\t\tbreak;\r", "+\t\tcase 243 : // System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\");\r", "+\t\t\tconsumeSwitchBlockStatements();\r", "+\t\t\tbreak;\r", "+\t\tcase 244 : // System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\");\r", "+\t\t\tconsumeSwitchBlockStatement();\r", "+\t\t\tbreak;\r", "+\t\tcase 246 : // System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\");\r", "+\t\t\tconsumeSwitchLabels();\r", "+\t\t\tbreak;\r", "+\t\tcase 247 : // System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\");\r", "+\t\t\tconsumeCaseLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 248 : // System.out.println(\"SwitchLabel ::= default COLON\");\r", "+\t\t\tconsumeDefaultLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 249 : // System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN Statement\");\r", "+\t\t\tconsumeStatementWhile();\r", "+\t\t\tbreak;\r", "+\t\tcase 250 : // System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression RPAREN StatementNoShortIf\");\r", "+\t\t\tconsumeStatementWhile();\r", "+\t\t\tbreak;\r", "+\t\tcase 251 : // System.out.println(\"DoStatement ::= do Statement while LPAREN Expression RPAREN SEMICOLON\");\r", "+\t\t\tconsumeStatementDo();\r", "+\t\t\tbreak;\r", "+\t\tcase 252 : // System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON...\");\r", "+\t\t\tconsumeStatementFor();\r", "+\t\t\tbreak;\r", "+\t\tcase 253 : // System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON\");\r", "+\t\t\tconsumeStatementFor();\r", "+\t\t\tbreak;\r", "+\t\tcase 254 : // System.out.println(\"ForInit ::= StatementExpressionList\");\r", "+\t\t\tconsumeForInit();\r", "+\t\t\tbreak;\r", "+\t\tcase 258 : // System.out.println(\"StatementExpressionList ::= StatementExpressionList COMMA StatementExpression\");\r", "+\t\t\tconsumeStatementExpressionList();\r", "+\t\t\tbreak;\r", "+\t\tcase 259 : // System.out.println(\"BreakStatement ::= break SEMICOLON\");\r", "+\t\t\tconsumeStatementBreak();\r", "+\t\t\tbreak;\r", "+\t\tcase 260 : // System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\");\r", "+\t\t\tconsumeStatementBreakWithLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 261 : // System.out.println(\"ContinueStatement ::= continue SEMICOLON\");\r", "+\t\t\tconsumeStatementContinue();\r", "+\t\t\tbreak;\r", "+\t\tcase 262 : // System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\");\r", "+\t\t\tconsumeStatementContinueWithLabel();\r", "+\t\t\tbreak;\r", "+\t\tcase 263 : // System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\");\r", "+\t\t\tconsumeStatementReturn();\r", "+\t\t\tbreak;\r", "+\t\tcase 264 : // System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\");\r", "+\t\t\tconsumeStatementThrow();\r", "+\t\t\tbreak;\r", "+\t\tcase 265 : // System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN Expression RPAREN Block\");\r", "+\t\t\tconsumeStatementSynchronized();\r", "+\t\t\tbreak;\r", "+\t\tcase 266 : // System.out.println(\"OnlySynchronized ::= synchronized\");\r", "+\t\t\tconsumeOnlySynchronized();\r", "+\t\t\tbreak;\r", "+\t\tcase 267 : // System.out.println(\"TryStatement ::= try Block Catches\");\r", "+\t\t\tconsumeStatementTry(false);\r", "+\t\t\tbreak;\r", "+\t\tcase 268 : // System.out.println(\"TryStatement ::= try Block Catchesopt Finally\");\r", "+\t\t\tconsumeStatementTry(true);\r", "+\t\t\tbreak;\r", "+\t\tcase 270 : // System.out.println(\"Catches ::= Catches CatchClause\");\r", "+\t\t\tconsumeCatches();\r", "+\t\t\tbreak;\r", "+\t\tcase 271 : // System.out.println(\"CatchClause ::= catch LPAREN FormalParameter RPAREN Block\");\r", "+\t\t\tconsumeStatementCatch();\r", "+\t\t\tbreak;\r", "+\t\tcase 273 : // System.out.println(\"PushLPAREN ::= LPAREN\");\r", "+\t\t\tconsumeLeftParen();\r", "+\t\t\tbreak;\r", "+\t\tcase 274 : // System.out.println(\"PushRPAREN ::= RPAREN\");\r", "+\t\t\tconsumeRightParen();\r", "+\t\t\tbreak;\r", "+\t\tcase 278 : // System.out.println(\"PrimaryNoNewArray ::= this\");\r", "+\t\t\tconsumePrimaryNoNewArrayThis();\r", "+\t\t\tbreak;\r", "+\t\tcase 279 : // System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression PushRPAREN\");\r", "+\t\t\tconsumePrimaryNoNewArray();\r", "+\t\t\tbreak;\r", "+\t\tcase 282 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT this\");\r", "+\t\t\tconsumePrimaryNoNewArrayNameThis();\r", "+\t\t\tbreak;\r", "+\t\tcase 283 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT super\");\r", "+\t\t\tconsumePrimaryNoNewArrayNameSuper();\r", "+\t\t\tbreak;\r", "+\t\tcase 284 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT class\");\r", "+\t\t\tconsumePrimaryNoNewArrayName();\r", "+\t\t\tbreak;\r", "+\t\tcase 285 : // System.out.println(\"PrimaryNoNewArray ::= ArrayType DOT class\");\r", "+\t\t\tconsumePrimaryNoNewArrayArrayType();\r", "+\t\t\tbreak;\r", "+\t\tcase 286 : // System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\");\r", "+\t\t\tconsumePrimaryNoNewArrayPrimitiveType();\r", "+\t\t\tbreak;\r", "+\t\tcase 289 : // System.out.println(\"AllocationHeader ::= new ClassType LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\tconsumeAllocationHeader();\r", "+\t\t\tbreak;\r", "+\t\tcase 290 : // System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\tconsumeClassInstanceCreationExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 291 : // System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new SimpleName LPAREN...\");\r", "+\t\t\tconsumeClassInstanceCreationExpressionQualified();\r", "+\t\t\tbreak;\r", "+\t\tcase 292 : // System.out.println(\"ClassInstanceCreationExpression ::= ClassInstanceCreationExpressionName new...\");\r", "+\t\t\tconsumeClassInstanceCreationExpressionQualified();\r", "+\t\t\tbreak;\r", "+\t\tcase 293 : // System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\");\r", "+\t\t\tconsumeClassInstanceCreationExpressionName();\r", "+\t\t\tbreak;\r", "+\t\tcase 294 : // System.out.println(\"ClassBodyopt ::=\");\r", "+\t\t\tconsumeClassBodyopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 296 : // System.out.println(\"EnterAnonymousClassBody ::=\");\r", "+\t\t\tconsumeEnterAnonymousClassBody();\r", "+\t\t\tbreak;\r", "+\t\tcase 298 : // System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\");\r", "+\t\t\tconsumeArgumentList();\r", "+\t\t\tbreak;\r", "+\t\tcase 299 : // System.out.println(\"ArrayCreationExpression ::= new PrimitiveType DimWithOrWithOutExprs...\");\r", "+\t\t\tconsumeArrayCreationExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 300 : // System.out.println(\"ArrayCreationExpression ::= new ClassOrInterfaceType DimWithOrWithOutExprs...\");\r", "+\t\t\tconsumeArrayCreationExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 302 : // System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\");\r", "+\t\t\tconsumeDimWithOrWithOutExprs();\r", "+\t\t\tbreak;\r", "+\t\tcase 304 : // System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\");\r", "+\t\t\tconsumeDimWithOrWithOutExpr();\r", "+\t\t\tbreak;\r", "+\t\tcase 305 : // System.out.println(\"Dims ::= DimsLoop\");\r", "+\t\t\tconsumeDims();\r", "+\t\t\tbreak;\r", "+\t\tcase 308 : // System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\");\r", "+\t\t\tconsumeOneDimLoop();\r", "+\t\t\tbreak;\r", "+\t\tcase 309 : // System.out.println(\"FieldAccess ::= Primary DOT Identifier\");\r", "+\t\t\tconsumeFieldAccess(false);\r", "+\t\t\tbreak;\r", "+\t\tcase 310 : // System.out.println(\"FieldAccess ::= super DOT Identifier\");\r", "+\t\t\tconsumeFieldAccess(true);\r", "+\t\t\tbreak;\r", "+\t\tcase 311 : // System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\tconsumeMethodInvocationName();\r", "+\t\t\tbreak;\r", "+\t\tcase 312 : // System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\tconsumeMethodInvocationPrimary();\r", "+\t\t\tbreak;\r", "+\t\tcase 313 : // System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\tconsumeMethodInvocationSuper();\r", "+\t\t\tbreak;\r", "+\t\tcase 314 : // System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\");\r", "+\t\t\tconsumeArrayAccess(true);\r", "+\t\t\tbreak;\r", "+\t\tcase 315 : // System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression RBRACKET\");\r", "+\t\t\tconsumeArrayAccess(false);\r", "+\t\t\tbreak;\r", "+\t\tcase 317 : // System.out.println(\"PostfixExpression ::= Name\");\r", "+\t\t\tconsumePostfixExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 320 : // System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS, true);\r", "+\t\t\tbreak;\r", "+\t\tcase 321 : // System.out.println(\"PostDecrementExpression ::= PostfixExpression MINUS_MINUS\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS, true);\r", "+\t\t\tbreak;\r", "+\t\tcase 322 : // System.out.println(\"PushPosition ::=\");\r", "+\t\t\tconsumePushPosition();\r", "+\t\t\tbreak;\r", "+\t\tcase 325 : // System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 326 : // System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 328 : // System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS, false);\r", "+\t\t\tbreak;\r", "+\t\tcase 329 : // System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS, false);\r", "+\t\t\tbreak;\r", "+\t\tcase 331 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.TWIDDLE);\r", "+\t\t\tbreak;\r", "+\t\tcase 332 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition UnaryExpression\");\r", "+\t\t\tconsumeUnaryExpression(OperatorExpression.NOT);\r", "+\t\t\tbreak;\r", "+\t\tcase 334 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN UnaryExpression\");\r", "+\t\t\tconsumeCastExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 335 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN UnaryExpressionNotPlusMinus\");\r", "+\t\t\tconsumeCastExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 336 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN UnaryExpressionNotPlusMinus\");\r", "+\t\t\tconsumeCastExpressionLL1();\r", "+\t\t\tbreak;\r", "+\t\tcase 338 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY UnaryExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.MULTIPLY);\r", "+\t\t\tbreak;\r", "+\t\tcase 339 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE UnaryExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.DIVIDE);\r", "+\t\t\tbreak;\r", "+\t\tcase 340 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER UnaryExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.REMAINDER);\r", "+\t\t\tbreak;\r", "+\t\tcase 342 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.PLUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 343 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.MINUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 345 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.LEFT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 346 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.RIGHT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 347 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.UNSIGNED_RIGHT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 349 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.LESS);\r", "+\t\t\tbreak;\r", "+\t\tcase 350 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER ShiftExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.GREATER);\r", "+\t\t\tbreak;\r", "+\t\tcase 351 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL ShiftExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.LESS_EQUAL);\r", "+\t\t\tbreak;\r", "+\t\tcase 352 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL ShiftExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.GREATER_EQUAL);\r", "+\t\t\tbreak;\r", "+\t\tcase 353 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof ReferenceType\");\r", "+\t\t\tconsumeInstanceOfExpression(OperatorExpression.INSTANCEOF);\r", "+\t\t\tbreak;\r", "+\t\tcase 355 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression\");\r", "+\t\t\tconsumeEqualityExpression(OperatorExpression.EQUAL_EQUAL);\r", "+\t\t\tbreak;\r", "+\t\tcase 356 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL RelationalExpression\");\r", "+\t\t\tconsumeEqualityExpression(OperatorExpression.NOT_EQUAL);\r", "+\t\t\tbreak;\r", "+\t\tcase 358 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.AND);\r", "+\t\t\tbreak;\r", "+\t\tcase 360 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.XOR);\r", "+\t\t\tbreak;\r", "+\t\tcase 362 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR ExclusiveOrExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.OR);\r", "+\t\t\tbreak;\r", "+\t\tcase 364 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND InclusiveOrExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.AND_AND);\r", "+\t\t\tbreak;\r", "+\t\tcase 366 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR ConditionalAndExpression\");\r", "+\t\t\tconsumeBinaryExpression(OperatorExpression.OR_OR);\r", "+\t\t\tbreak;\r", "+\t\tcase 368 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON...\");\r", "+\t\t\tconsumeConditionalExpression(OperatorExpression.QUESTIONCOLON);\r", "+\t\t\tbreak;\r", "+\t\tcase 371 : // System.out.println(\"Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression\");\r", "+\t\t\tconsumeAssignment();\r", "+\t\t\tbreak;\r", "+\t\tcase 373 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");\r", "+\t\t\tignoreExpressionAssignment();\r", "+\t\t\tbreak;\r", "+\t\tcase 374 : // System.out.println(\"LeftHandSide ::= Name\");\r", "+\t\t\tconsumeLeftHandSide();\r", "+\t\t\tbreak;\r", "+\t\tcase 377 : // System.out.println(\"AssignmentOperator ::= EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(EQUAL);\r", "+\t\t\tbreak;\r", "+\t\tcase 378 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(MULTIPLY);\r", "+\t\t\tbreak;\r", "+\t\tcase 379 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(DIVIDE);\r", "+\t\t\tbreak;\r", "+\t\tcase 380 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(REMAINDER);\r", "+\t\t\tbreak;\r", "+\t\tcase 381 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(PLUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 382 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(MINUS);\r", "+\t\t\tbreak;\r", "+\t\tcase 383 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(LEFT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 384 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(RIGHT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 385 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);\r", "+\t\t\tbreak;\r", "+\t\tcase 386 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(AND);\r", "+\t\t\tbreak;\r", "+\t\tcase 387 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(XOR);\r", "+\t\t\tbreak;\r", "+\t\tcase 388 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");\r", "+\t\t\tconsumeAssignmentOperator(OR);\r", "+\t\t\tbreak;\r", "+\t\tcase 395 : // System.out.println(\"Expressionopt ::=\");\r", "+\t\t\tconsumeEmptyExpression();\r", "+\t\t\tbreak;\r", "+\t\tcase 399 : // System.out.println(\"ImportDeclarationsopt ::=\");\r", "+\t\t\tconsumeEmptyImportDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 400 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");\r", "+\t\t\tconsumeImportDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 401 : // System.out.println(\"TypeDeclarationsopt ::=\");\r", "+\t\t\tconsumeEmptyTypeDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 402 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");\r", "+\t\t\tconsumeTypeDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 403 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");\r", "+\t\t\tconsumeEmptyClassBodyDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 404 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");\r", "+\t\t\tconsumeClassBodyDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 405 : // System.out.println(\"Modifiersopt ::=\");\r", "+\t\t\tconsumeDefaultModifiers();\r", "+\t\t\tbreak;\r", "+\t\tcase 406 : // System.out.println(\"Modifiersopt ::= Modifiers\");\r", "+\t\t\tconsumeModifiers();\r", "+\t\t\tbreak;\r", "+\t\tcase 407 : // System.out.println(\"BlockStatementsopt ::=\");\r", "+\t\t\tconsumeEmptyBlockStatementsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 409 : // System.out.println(\"Dimsopt ::=\");\r", "+\t\t\tconsumeEmptyDimsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 411 : // System.out.println(\"ArgumentListopt ::=\");\r", "+\t\t\tconsumeEmptyArgumentListopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 415 : // System.out.println(\"FormalParameterListopt ::=\");\r", "+\t\t\tconsumeFormalParameterListopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 419 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");\r", "+\t\t\tconsumeEmptyInterfaceMemberDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 420 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\");\r", "+\t\t\tconsumeInterfaceMemberDeclarationsopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 421 : // System.out.println(\"NestedType ::=\");\r", "+\t\t\tconsumeNestedType();\r", "+\t\t\tbreak;\r", "+\t\tcase 422 : // System.out.println(\"ForInitopt ::=\");\r", "+\t\t\tconsumeEmptyForInitopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 424 : // System.out.println(\"ForUpdateopt ::=\");\r", "+\t\t\tconsumeEmptyForUpdateopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 428 : // System.out.println(\"Catchesopt ::=\");\r", "+\t\t\tconsumeEmptyCatchesopt();\r", "+\t\t\tbreak;\r", "+\t\tcase 430 : // System.out.println(\"ArrayInitializeropt ::=\");\r", "+\t\t\tconsumeEmptyArrayInitializeropt();\r", "+\t\t\tbreak;\r"]}], "num": 56468}
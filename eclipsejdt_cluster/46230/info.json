{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c7a4f5ca2dca7b099a638468763c5b9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "371edb69fdb3238843b9563dba76d7d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "140d5208fae36b92de255acde8dd7fe538818d2b", "commitAfterChange": "14842eb62da3e660c575d5193079230a000aa781", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r \tprivate static void updateVariableValues(\r \t\tString[] variableNames,\r \t\tIPath[] variablePaths,\r \t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r \tprivate static void updateVariableValues(\r \t\tString[] variableNames,\r \t\tIPath[] variablePaths,\r \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\tboolean mayChangeProjectDependencies = false;\r", "+\t\t\t\t\t\t\tif (entry.getPath().segment(0).equals(variableName)){\r", "+\t\t\t\t\t\t\t\taffectedProjects.put(project, ((JavaProject)project).getExpandedClasspath(true));\r", "+\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t// also check whether it will be necessary to update proj references and cycle markers\r", "+\t\t\t\t\t\t\t\tif (!mayChangeProjectDependencies && entry.getPath().segmentCount() ==  1){\r", "+\t\t\t\t\t\t\t\t\tIPath oldPath = (IPath)JavaModelManager.Variables.get(variableName);\r", "+\t\t\t\t\t\t\t\t\tif (oldPath != null && oldPath.segmentCount() == 1) {\r", "+\t\t\t\t\t\t\t\t\t\tmayChangeProjectDependencies = true;\r", "+\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\tIPath newPath = variablePaths[k];\r", "+\t\t\t\t\t\t\t\t\t\tif (newPath != null && newPath.segmentCount() == 1) {\r", "+\t\t\t\t\t\t\t\t\t\t\tmayChangeProjectDependencies = true;\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tcontinue nextProject;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif (entry.getPath().segment(0).equals(variableName)\r", "-\t\t\t\t\t\t\t\t\t\t|| ((sourcePath = entry.getSourceAttachmentPath()) != null\t&& sourcePath.segment(0).equals(variableName))\r", "-\t\t\t\t\t\t\t\t\t\t|| ((sourceRootPath = entry.getSourceAttachmentRootPath()) != null\t&& sourceRootPath.segment(0).equals(variableName))) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\tif (((sourcePath = entry.getSourceAttachmentPath()) != null\t&& sourcePath.segment(0).equals(variableName))\r", "+\t\t\t\t\t\t\t\t|| ((sourceRootPath = entry.getSourceAttachmentRootPath()) != null\t&& sourceRootPath.segment(0).equals(variableName))) {\r", "+\r", "-\t\t\t\t\t\t\t(IClasspathEntry[]) affectedProjects.get(project));\r", "+\t\t\t\t\t\t\t(IClasspathEntry[]) affectedProjects.get(project),\r", "+\t\t\t\t\t\t\tmayChangeProjectDependencies);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d3672f3795fa6d2ec55784aabe289d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\t\tIJavaElement focus = ((InternalSearchPattern) this.pattern).focus;", "+\t\t// verify closest match if pattern was bound", "+\t\t// (see bug 70827)", "+\t\tif (focus != null && focus.getElementType() == IJavaElement.METHOD) {", "+\t\t\tMethodBinding patternMethodBinding = locator.getMethodBinding((IMethod) focus);", "+\t\t\tif (patternMethodBinding != null && patternMethodBinding.isValidBinding()) {", "+\t\t\t\tMethodBinding method = ((MessageSend)reference).binding;", "+\t\t\t\tif (method != null) {", "+\t\t\t\t\tmethod = method.original();", "+\t\t\t\t\tif (method != null && patternMethodBinding.isPrivate() && patternMethodBinding.declaringClass != method.declaringClass)", "+\t\t\t\t\t\treturn; // finally the match was not possible", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 46230}
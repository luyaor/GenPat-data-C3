{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50cec998553d0fa805f083e3d96a4670", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9dc5ec4baf0dc760cbdd1694fa004b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c326c940f9ef138395e800fef452568d0c87c6c0", "commitAfterChange": "a6829de4e3db7f328203e4f515f45bdc76ef3eb6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\tif (this.expectedType != null && this.original == this) {  // final resolution ? may be not - i.e may be, but only in a non-final universe.", "-\t\t\tthis.ordinal = recordFunctionalType(blockScope);", "-\t\t}", "-\t\t", "-\t\tthis.constant = Constant.NotAConstant;", "-\t\tthis.enclosingScope = blockScope;", "-\t\t", "-\t\tif (!argumentsTypeElided) {", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tthis.argumentTypes[i] = this.arguments[i].type.resolveType(blockScope, true /* check bounds*/);", "+\t\t", "+\t\tif (this.constant != Constant.NotAConstant) {", "+\t\t\tthis.constant = Constant.NotAConstant;", "+\t\t\tthis.enclosingScope = blockScope;", "+\t\t\tif (this.original == this)", "+\t\t\t\tthis.ordinal = recordFunctionalType(blockScope);", "+\t\t\t", "+\t\t\tif (!argumentsTypeElided) {", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.argumentTypes[i] = this.arguments[i].type.resolveType(blockScope, true /* check bounds*/);", "+\t\t\t}", "+\t\t\tif (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {", "+\t\t\t\treturn this.resolvedType = new PolyTypeBinding(this);", "+\t\t\t} ", "-\t\tif (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {", "-\t\t\treturn this.resolvedType = new PolyTypeBinding(this);", "-\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddf98c4de6ae219d1152b5175b10b7ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "b7295bb19a68269f09e5fdceeecf4f4c701e7063", "commitAfterChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tthis.constant = Constant.NotAConstant;", "-\tif (this.type == null) {", "-\t\t// initialization of an enum constant", "-\t\tthis.resolvedType = scope.enclosingReceiverType();", "+\tfinal boolean isDiamond = this.type != null && (this.type.bits & ASTNode.IsDiamond) != 0;", "+\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "+\tif (this.constant != Constant.NotAConstant) {", "+\t\tthis.constant = Constant.NotAConstant;", "+\t\tif (this.type == null) {", "+\t\t\t// initialization of an enum constant", "+\t\t\tthis.resolvedType = scope.enclosingReceiverType();", "+\t\t} else {", "+\t\t\tthis.resolvedType = this.type.resolveType(scope, true /* check bounds*/);", "+\t\t\tif (isDiamond && this.typeExpected == null && this.expressionContext == INVOCATION_CONTEXT && compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t\treturn this.resolvedType = new PolyTypeBinding(this);", "+\t\t\t}", "+\t\t}", "-\t\tthis.resolvedType = this.type.resolveType(scope, true /* check bounds*/);", "+\t\tthis.resolvedType = this.type.resolvedType;", "+\t}", "+", "+\tif (this.type != null) {", "-\tfinal boolean isDiamond = this.type != null && (this.type.bits & ASTNode.IsDiamond) != 0;", "-\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5;", "+\t\tboolean argHasError = compilerOptions.sourceLevel < ClassFileConstants.JDK1_5;", "-\tfinal CompilerOptions compilerOptions = scope.compilerOptions();"]}], "num": 7796}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79b373ffbe6e9318ee118d0d995bae95", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e15da9a56d8243856d6361078e910b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "dfb3637702f1e682e6ee6d2d1c5b6ed54a2efc28", "commitAfterChange": "40fae5391d4f13359de5727f38342f6b018e40a2", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void _test027()", "signatureAfterChange": " \tpublic void test027()", "diff": ["-\tpublic void _test027() {", "+\tpublic void test027() {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X { <T> void test() {} }\\n\" + ", "+\t\t\t\t\"class Y extends X { void test() {} }\\n\"", "+\t\t\t},", "+\t\t\t\"\"", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X { void test() {} }\\n\" + ", "+\t\t\t\t\"class Y extends X { <T> void test() {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass Y extends X { <T> void test() {} }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test() of type Y has the same erasure as test() of type X but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// name clash: <T>foo() in Y and foo() in X have the same erasure, yet neither overrides the other", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T> { void test(T o) {} }\\n\" + ", "+\t\t\t\t\"class Y<T> extends X<T> { void test(Object o) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tclass Y<T> extends X<T> { void test(Object o) {} }\\r\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test(Object) of type Y<T> has the same erasure as test(T) of type X<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// no error unless you try to do a super send which then fails", "+\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T> { void test(T o, T t) {} }\\n\" + ", "+\t\t\t\t\"class Y<T> extends X<T> { void test(Object o, T t) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tclass Y<T> extends X<T> { void test(Object o, T t) {} }\\r\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test(Object, T) of type Y<T> has the same erasure as test(T, T) of type X<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// name clash: test(java.lang.Object,T) in Y<T> and test(T,T) in X<T> have the same erasure, yet neither overrides the other", "+\t\t);", "-\t\t\t\"name clash: \"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tpublic void setA(A a) {}\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method setA(A) of type InvertedPair<A,B> has the same erasure as setA(A) of type Pair<B,A> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa2821f367024d898874ec90daeceb5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "0e160bd57ca4572e4cc317f77eef59eff0c912a6", "commitAfterChange": "1b0238cbdda2702f17c4f0b30e4c8493818f8888", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void test014()", "signatureAfterChange": " \tpublic void test014()", "diff": ["+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid a(G x) { System.out.print(1); }\\n\" + ", "+\t\t\t\t\"\tvoid b(F x) { System.out.print(2); }\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tH<C> h = null;\\n\" +", "+\t\t\t\t\"\t\tG<C> g = null;\\n\" +", "+\t\t\t\t\"\t\tnew X().a(h);\\n\" +", "+\t\t\t\t\"\t\tnew X().a(g);\\n\" +", "+\t\t\t\t\"\t\tnew X().b(h);\\n\" +", "+\t\t\t\t\"\t\tnew X().b(g);\\n\" +", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A {}\\n\" + ", "+\t\t\t\t\"class B extends A {}\\n\" +", "+\t\t\t\t\"class C extends B {}\\n\" +", "+\t\t\t\t\"class F<T1> {} \\n\" + ", "+\t\t\t\t\"class G<T2> extends F<T2> {}\\n\" +", "+\t\t\t\t\"class H<T3> extends G<T3> {}\"", "+\t\t\t},", "+\t\t\t\"1122\"", "+\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid a(G<C> x) { System.out.print(1); }\\n\" + ", "+\t\t\t\t\"\tvoid b(F<C> x) { System.out.print(2); }\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tH h = null;\\n\" +", "+\t\t\t\t\"\t\tG g = null;\\n\" +", "+\t\t\t\t\"\t\tnew X().a(h);\\n\" +", "+\t\t\t\t\"\t\tnew X().a(g);\\n\" +", "+\t\t\t\t\"\t\tnew X().b(h);\\n\" +", "+\t\t\t\t\"\t\tnew X().b(g);\\n\" +", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A {}\\n\" + ", "+\t\t\t\t\"class B extends A {}\\n\" +", "+\t\t\t\t\"class C extends B {}\\n\" +", "+\t\t\t\t\"class F<T1> {} \\n\" + ", "+\t\t\t\t\"class G<T2> extends F<T2> {}\\n\" +", "+\t\t\t\t\"class H<T3> extends G<T3> {}\"", "+\t\t\t},", "+\t\t\t\"1122\"", "+\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "-//\t\tthis.runConformTest(", "-//\t\t\tnew String[] {", "-//\t\t\t\t\"X.java\",", "-//\t\t\t\t\"public class X {\\n\" + ", "-//\t\t\t\t\"\tvoid four(G x) { System.out.print(5); }\\n\" + ", "-//\t\t\t\t\"\tvoid four(F<C> x) { System.out.print(6); }\\n\" + ", "-//\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-//\t\t\t\t\"\t\tH<C> h = null;\\n\" +", "-//\t\t\t\t\"\t\tnew X().four(h);\\n\" +", "-//\t\t\t\t\"\t}\\n\" + ", "-//\t\t\t\t\"}\\n\" +", "-//\t\t\t\t\"class A {}\\n\" + ", "-//\t\t\t\t\"class B extends A {}\\n\" +", "-//\t\t\t\t\"class C extends B {}\\n\" +", "-//\t\t\t\t\"class F<T1> {} \\n\" + ", "-//\t\t\t\t\"class G<T2> extends F<T2> {}\\n\" +", "-//\t\t\t\t\"class H<T3> extends G<T3> {}\"", "-//\t\t\t},", "-//\t\t\t\"ambiguous?\"", "-//\t\t\t// reference to four is ambiguous, both method four(G) in X and method four(F<C>) in X match", "-//\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid a(G x) {}\\n\" + ", "+\t\t\t\t\"\tvoid a(F<C> x) {}\\n\" + ", "+\t\t\t\t\"\tvoid b(G<C> x) {}\\n\" + ", "+\t\t\t\t\"\tvoid b(F x) {}\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tH<C> h = null;\\n\" +", "+\t\t\t\t\"\t\tnew X().a(h);\\n\" +", "+\t\t\t\t\"\t\tnew X().b(h);\\n\" +", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A {}\\n\" + ", "+\t\t\t\t\"class B extends A {}\\n\" +", "+\t\t\t\t\"class C extends B {}\\n\" +", "+\t\t\t\t\"class F<T1> {} \\n\" + ", "+\t\t\t\t\"class G<T2> extends F<T2> {}\\n\" +", "+\t\t\t\t\"class H<T3> extends G<T3> {}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tvoid a(G x) {}\\r\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"G is a raw type. References to generic type G<T2> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\r\\n\" + ", "+\t\t\t\"\tvoid b(F x) {}\\r\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"F is a raw type. References to generic type F<T1> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\r\\n\" + ", "+\t\t\t\"\tnew X().a(h);\\r\\n\" + ", "+\t\t\t\"\t        ^\\n\" + ", "+\t\t\t\"The method a(G) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// reference to a is ambiguous, both method a(G) in X and method a(F<C>) in X match", "+\t\t);", "-//\t\tthis.runNegativeTest(", "-//\t\t\tnew String[] {", "-//\t\t\t\t\"X.java\",", "-//\t\t\t\t\"public class X {\\n\" + ", "-//\t\t\t\t\"\t<E1, E2 extends B> void three(G<E2> x) {}\\n\" + ", "-//\t\t\t\t\"\t<E3 extends C> void three(F<E3> x) {}\\n\" + ", "-//\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-//\t\t\t\t\"\t\tH<C> h = null;\\n\" +", "-//\t\t\t\t\"\t\tnew X().three(h);\\n\" +", "-//\t\t\t\t\"\t}\\n\" + ", "-//\t\t\t\t\"}\\n\" +", "-//\t\t\t\t\"class A {}\\n\" + ", "-//\t\t\t\t\"class B extends A {}\\n\" +", "-//\t\t\t\t\"class C extends B {}\\n\" +", "-//\t\t\t\t\"class F<T1> {} \\n\" + ", "-//\t\t\t\t\"class G<T2> extends F<T2> {}\\n\" +", "-//\t\t\t\t\"class H<T3> extends G<T3> {}\"", "-//\t\t\t},", "-//\t\t\t\"----------\\n\" + ", "-//\t\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" + ", "-//\t\t\t\"\tnew X().three(h);\\r\\n\" + ", "-//\t\t\t\"\t        ^^^^^\\n\" + ", "-//\t\t\t\"The method three(G<C>) is ambiguous for the type X\\n\" + ", "-//\t\t\t\"----------\\n\"", "-//\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\t<E1, E2 extends B> void three(G<E2> x) {}\\n\" + ", "+\t\t\t\t\"\t<E3 extends C> void three(F<E3> x) {}\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tH<C> h = null;\\n\" +", "+\t\t\t\t\"\t\tnew X().three(h);\\n\" +", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A {}\\n\" + ", "+\t\t\t\t\"class B extends A {}\\n\" +", "+\t\t\t\t\"class C extends B {}\\n\" +", "+\t\t\t\t\"class F<T1> {} \\n\" + ", "+\t\t\t\t\"class G<T2> extends F<T2> {}\\n\" +", "+\t\t\t\t\"class H<T3> extends G<T3> {}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" + ", "+\t\t\t\"\tnew X().three(h);\\r\\n\" + ", "+\t\t\t\"\t        ^^^^^\\n\" + ", "+\t\t\t\"The method three(G<C>) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}], "num": 4732}
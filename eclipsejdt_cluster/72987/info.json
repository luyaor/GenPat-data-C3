{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5d1ed7c957077ff86de919bd8b8c351", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0081674cc3a917b50184191d2ea9c021", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "3fa437321fe88b141d60a98c3b39cea46c7fbc44", "commitAfterChange": "ac6a9f56760bba7aec9ca8548c00a789a95fdc11", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "signatureAfterChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "diff": ["-\t// only perform resource copying if no source folders coincidates with the output location\r", "+\t// only perform resource copying if the output location does not match a source folder\r", "-\tthis.hasSeparateOutputFolder = true;\r", "-\tfor (int i = 0; i < this.sourceFolders.length; i++) {\r", "-\t\tIContainer sourceFolder = this.sourceFolders[i];\r", "-\t\tif (sourceFolder.getFullPath().equals(this.outputFolder.getFullPath())){\r", "-\t\t\tthis.hasSeparateOutputFolder = false;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "+\tIPath outputPath = outputFolder.getFullPath();\r", "+\tthis.hasSeparateOutputFolder = !outputPath.equals(javaBuilder.currentProject.getFullPath());\r", "+\tfor (int i = 0, length = sourceFolders.length; hasSeparateOutputFolder && i < length; i++)\r", "+\t\tthis.hasSeparateOutputFolder = !outputPath.equals(sourceFolders[i].getFullPath());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e30eead0c8c18d7284c3d4686c5e992", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " public synchronized Index getIndex(IPath containerPath, String indexLocation, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized Index getIndex(IPath containerPath, IPath indexLocation, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-public synchronized Index getIndex(IPath containerPath, String indexLocation, boolean reuseExistingFile, boolean createIfMissing) {", "+public synchronized Index getIndex(IPath containerPath, IPath indexLocation, boolean reuseExistingFile, boolean createIfMissing) {", "-\tIndex index = (Index) indexes.get(indexLocation);", "+\tIndex index = getIndex(indexLocation);", "+\t\tString indexLocationString = indexLocation.toOSString();", "-\t\t\tFile indexFile = new File(indexLocation);", "+\t\t\tFile indexFile = new File(indexLocationString);", "-\t\t\t\t\tindex = new Index(indexLocation, containerPathString, true /*reuse index file*/);", "-\t\t\t\t\tindexes.put(indexLocation, index);", "+\t\t\t\t\tindex = new Index(indexLocationString, containerPathString, true /*reuse index file*/);", "+\t\t\t\t\tthis.indexes.put(indexLocation, index);", "-\t\t\t\t\t\t\tUtil.verbose(\"-> cannot reuse existing index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\tUtil.verbose(\"-> cannot reuse existing index: \"+indexLocationString+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\tUtil.verbose(\"-> create empty index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tindex = new Index(indexLocation, containerPathString, false /*do not reuse index file*/);", "-\t\t\t\tindexes.put(indexLocation, index);", "+\t\t\t\t\tUtil.verbose(\"-> create empty index: \"+indexLocationString+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tindex = new Index(indexLocationString, containerPathString, false /*do not reuse index file*/);", "+\t\t\t\tthis.indexes.put(indexLocation, index);", "-\t\t\t\t\tUtil.verbose(\"-> unable to create empty index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tUtil.verbose(\"-> unable to create empty index: \"+indexLocationString+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$"]}], "num": 72987}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ee260038bc9e660d281438c1e24c198", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3afe45295815e03f21fe7218d70d8427", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "commitAfterChange": "309aed033cc4257b36692ed1549ee0025e0800df", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate boolean checkNegative5()", "signatureAfterChange": " \tpublic boolean checkNegative5()", "diff": ["-\tprivate boolean checkNegative5() {", "+\tpublic boolean checkNegative5() {", "-\t\t\tTestElement(String n) {", "-\t\t\t\tname = n;", "-\t\t\t\telement = null;", "+\t\t\tTestElement(String name) {", "+\t\t\t\tthis.name = name;", "+\t\t\t\tthis.element = null;", "-\t\t\t// TODO: check superclass and superinterfaces against expected values", "+\t\t\t// TODO: there are substantial differences between javac and Eclipse in how", "+\t\t\t// missing types are recovered (e.g., as error types or as declared types),", "+\t\t\t// and the toString() implementations are also different.  The JSR269 spec", "+\t\t\t// does not require these to match.  Do we want to enforce matching anyway?", "-\t\t\tList<? extends TypeMirror> superInterfaces = testElement.element.getInterfaces();", "-\t\t\tif (superClass == null) {", "+\t\t\tif (_reportFailingCases && superClass == null) {", "+\t\t\tList<? extends TypeMirror> superInterfaces = testElement.element.getInterfaces();", "+\t\t\tif (_reportFailingCases && (superInterfaces == null || superInterfaces.isEmpty())) {", "+\t\t\t\treportError(\"Element \" + testElement.name + \" has empty list of superinterfaces\");", "+\t\t\t\treturn false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abd86f8ad46fd214c020032f73e450b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "871b0f40e9e339645b67b1702d022860281790a0", "commitAfterChange": "fcce3a40f127b06d48ac4dff6ae2430d45c1a962", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t} else if (type != null && receiverType.isEnum()) { // tolerate enum constant body", "+\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t\treturn this.resolvedType = receiverType;"]}], "num": 39296}
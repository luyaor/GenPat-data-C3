{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a82943b7fa4a443e3aea5b95d2d32084", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50c9ae6e98e5ecc3d62dc560c4825b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ChangeClasspathOperation.java", "commitBeforeChange": "98fa84ee39c41fd289fab405c645f226d27b7c68", "commitAfterChange": "f85e940f5bc47c34840682e379f1da2263835e88", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void classpathChanged(JavaProject project) throws JavaModelException", "signatureAfterChange": " \tprotected void classpathChanged(JavaProject project) throws JavaModelException", "diff": ["-\t\t\tif (change.generateDelta(delta)) {", "+\t\t\tint result = change.generateDelta(delta);", "+\t\t\tif ((result & ClasspathChange.HAS_DELTA) != 0) {", "-\t\t", "+\t\t\t}", "+\t\t\tif ((result & ClasspathChange.HAS_PROJECT_CHANGE) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e72c38c9ef569961dc291b39e11383eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "e87f626a0744f3e42bfbad630a4e9545c488a83d", "commitAfterChange": "1dd3d22e7e24bc65554988bf75295210111ce474", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\t\tfor (int i = 0, max = entries.length; i < max; i++){", "-", "+\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\tif (references == null) {", "-\t\t\t/* no references */", "-\t\t\treturn;", "+\t\tif (references == null) return;", "+\t\tif (potentialRefs == null) {", "+\t\t\t/* first query : these are the potential references */", "+\t\t\tpotentialRefs = references;", "+\t\t\tmaxRefs = numFiles;", "-\t\t\tif (potentialRefs == null) {", "-\t\t\t\t/* first query : these are the potential references */", "-\t\t\t\tpotentialRefs = references;", "-\t\t\t\tmaxRefs = numFiles;", "-\t\t\t} else {", "-\t\t\t\t/* eliminate potential references that don't match the current references */", "-\t\t\t\tfor (int i = 0, length = references.length; i < length; i++) {", "-\t\t\t\t\tif (i < potentialRefs.length) {", "-\t\t\t\t\t\tpotentialRefs[i] &= references[i];", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tpotentialRefs[i] = 0;", "-\t\t\t\t\t}", "+\t\t\t/* eliminate potential references that don't match the current references */", "+\t\t\tint potentialLength = potentialRefs.length;", "+\t\t\tfor (int i = 0, length = references.length; i < length; i++) {", "+\t\t\t\tif (i < potentialLength) {", "+\t\t\t\t\tpotentialRefs[i] &= references[i];", "+\t\t\t\t} else {", "+\t\t\t\t\tpotentialRefs[i] = 0;", "-\t\t\t}\t\t\t\t", "+\t\t\t}", "+\t\t\t// check to see that there are still potential references after the merge", "+\t\t\twhile (--potentialLength >= 0 && potentialRefs[potentialLength] == 0) {}", "+\t\t\tif (potentialLength == -1) return;", "-\t\t\t\t\t\t"]}], "num": 60571}
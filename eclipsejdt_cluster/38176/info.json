{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d5ba87ae01a034d3e31811bc8e969c6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50c730ecdab030c797d8606422983a08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "3efacb4c0e7ac2e42c4e43c21798bc7d222547ef", "commitAfterChange": "6ced618abda6388e93adbeddacd810115cd52b10", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 126, "signatureBeforeChange": " \t \tprivate ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, boolean usePreviousSession) throws JavaModelException", "signatureAfterChange": " \t \tpublic ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, boolean usePreviousSession, boolean resolveChainedLibraries) throws JavaModelException", "diff": ["-\tprivate ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, boolean usePreviousSession) throws JavaModelException {", "+\tpublic ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, boolean usePreviousSession, boolean resolveChainedLibraries) throws JavaModelException {", "-\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\t\tif (resolveChainedLibraries && resolvedEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "-\t\t\t\t\t\t\t// resolve Class-Path: in manifest", "-\t\t\t\t\t\t\tClasspathEntry[] extraEntries = cEntry.resolvedChainedLibraries();", "-\t\t\t\t\t\t\tfor (int k = 0, length2 = extraEntries.length; k < length2; k++) {", "-\t\t\t\t\t\t\t\taddToResult(rawEntry, extraEntries[k], result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\t\t\tif (resolveChainedLibraries) {", "+\t\t\t\t\t\t\t\t// resolve Class-Path: in manifest", "+\t\t\t\t\t\t\t\tClasspathEntry[] extraEntries = cEntry.resolvedChainedLibraries();", "+\t\t\t\t\t\t\t\tfor (int k = 0, length2 = extraEntries.length; k < length2; k++) {", "+\t\t\t\t\t\t\t\t\taddToResult(rawEntry, extraEntries[k], result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t// resolve Class-Path: in manifest", "-\t\t\t\t\tClasspathEntry[] extraEntries = ((ClasspathEntry) resolvedEntry).resolvedChainedLibraries();", "-\t\t\t\t\tfor (int k = 0, length2 = extraEntries.length; k < length2; k++) {", "-\t\t\t\t\t\taddToResult(rawEntry, extraEntries[k], result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\tif (resolveChainedLibraries) {", "+\t\t\t\t\t\t// resolve Class-Path: in manifest", "+\t\t\t\t\t\tClasspathEntry[] extraEntries = ((ClasspathEntry) resolvedEntry).resolvedChainedLibraries();", "+\t\t\t\t\t\tfor (int k = 0, length2 = extraEntries.length; k < length2; k++) {", "+\t\t\t\t\t\t\taddToResult(rawEntry, extraEntries[k], result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c230dc57d2cad54e30f6e7dd46e20952", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "d25d8e2aefb1fe7881a3b669cacd403afc528b1a", "commitAfterChange": "c768bb705d25a055607160ce11d239f196ca5653", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "  private int initializeBuilder(int kind) throws CoreException", "signatureAfterChange": "  private int initializeBuilder(int kind, boolean forBuild) throws CoreException", "diff": ["-private int initializeBuilder(int kind) throws CoreException {", "+private int initializeBuilder(int kind, boolean forBuild) throws CoreException {", "+\t// some calls just need the nameEnvironment initialized so skip the rest", "-\t// cache the known participants for this project", "-\tthis.participants = JavaModelManager.getJavaModelManager().compilationParticipants.getCompilationParticipants(this.javaProject);", "-\tif (this.participants != null)", "-\t\tfor (int i = 0, l = this.participants.length; i < l; i++)", "-\t\t\tif (this.participants[i].buildStarting(this.javaProject) == CompilationParticipant.NEEDS_FULL_BUILD)", "-\t\t\t\tkind = FULL_BUILD;", "-", "-\t// Flush the existing external files cache if this is the beginning of a build cycle", "-\tString projectName = currentProject.getName();", "-\tif (builtProjects == null || builtProjects.contains(projectName)) {", "-\t\tJavaModel.flushExternalFileCache();", "-\t\tbuiltProjects = new ArrayList();", "+\tif (forBuild) {", "+\t\t// cache the known participants for this project", "+\t\tthis.participants = JavaModelManager.getJavaModelManager().compilationParticipants.getCompilationParticipants(this.javaProject);", "+\t\tif (this.participants != null)", "+\t\t\tfor (int i = 0, l = this.participants.length; i < l; i++)", "+\t\t\t\tif (this.participants[i].buildStarting(this.javaProject) == CompilationParticipant.NEEDS_FULL_BUILD)", "+\t\t\t\t\tkind = FULL_BUILD;", "+\t", "+\t\t// Flush the existing external files cache if this is the beginning of a build cycle", "+\t\tString projectName = currentProject.getName();", "+\t\tif (builtProjects == null || builtProjects.contains(projectName)) {", "+\t\t\tJavaModel.flushExternalFileCache();", "+\t\t\tbuiltProjects = new ArrayList();", "+\t\t}", "+\t\tbuiltProjects.add(projectName);", "-\tbuiltProjects.add(projectName);", "-\tString filterSequence = javaProject.getOption(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, true);", "-\tchar[][] filters = filterSequence != null && filterSequence.length() > 0", "-\t\t? CharOperation.splitAndTrimOn(',', filterSequence.toCharArray())", "-\t\t: null;", "-\tif (filters == null) {", "-\t\tthis.extraResourceFileFilters = null;", "-\t\tthis.extraResourceFolderFilters = null;", "-\t} else {", "-\t\tint fileCount = 0, folderCount = 0;", "-\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "-\t\t\tchar[] f = filters[i];", "-\t\t\tif (f.length == 0) continue;", "-\t\t\tif (f[f.length - 1] == '/') folderCount++; else fileCount++;", "-\t\t}", "-\t\tthis.extraResourceFileFilters = new char[fileCount][];", "-\t\tthis.extraResourceFolderFilters = new String[folderCount];", "-\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "-\t\t\tchar[] f = filters[i];", "-\t\t\tif (f.length == 0) continue;", "-\t\t\tif (f[f.length - 1] == '/')", "-\t\t\t\textraResourceFolderFilters[--folderCount] = new String(f, 0, f.length - 1);", "-\t\t\telse", "-\t\t\t\textraResourceFileFilters[--fileCount] = f;", "+\tif (forBuild) {", "+\t\tString filterSequence = javaProject.getOption(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, true);", "+\t\tchar[][] filters = filterSequence != null && filterSequence.length() > 0", "+\t\t\t? CharOperation.splitAndTrimOn(',', filterSequence.toCharArray())", "+\t\t\t: null;", "+\t\tif (filters == null) {", "+\t\t\tthis.extraResourceFileFilters = null;", "+\t\t\tthis.extraResourceFolderFilters = null;", "+\t\t} else {", "+\t\t\tint fileCount = 0, folderCount = 0;", "+\t\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "+\t\t\t\tchar[] f = filters[i];", "+\t\t\t\tif (f.length == 0) continue;", "+\t\t\t\tif (f[f.length - 1] == '/') folderCount++; else fileCount++;", "+\t\t\t}", "+\t\t\tthis.extraResourceFileFilters = new char[fileCount][];", "+\t\t\tthis.extraResourceFolderFilters = new String[folderCount];", "+\t\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "+\t\t\t\tchar[] f = filters[i];", "+\t\t\t\tif (f.length == 0) continue;", "+\t\t\t\tif (f[f.length - 1] == '/')", "+\t\t\t\t\textraResourceFolderFilters[--folderCount] = new String(f, 0, f.length - 1);", "+\t\t\t\telse", "+\t\t\t\t\textraResourceFileFilters[--fileCount] = f;", "+\t\t\t}"]}], "num": 38176}
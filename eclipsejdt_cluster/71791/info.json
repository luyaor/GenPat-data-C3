{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cdcd6822ad350af136f175c0315db8a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5079f80a7c7d2dd37c1ee88d46d43379", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["-\t\tif (this.parameters != null) {", "-\t\t\tfor (int i=0; i<this.parameters.length; i++) {", "-\t\t\t\tJavadocSingleNameReference param = this.parameters[i];", "+\t\tif (this.paramReferences != null) {", "+\t\t\tfor (int i=0; i<this.paramReferences.length; i++) {", "+\t\t\t\tJavadocSingleNameReference param = this.paramReferences[i];", "-\t\tif (this.thrownExceptions != null) {", "-\t\t\tfor (int i=0; i<this.thrownExceptions.length; i++) {", "-\t\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "+\t\tif (this.exceptionReferences != null) {", "+\t\t\tfor (int i=0; i<this.exceptionReferences.length; i++) {", "+\t\t\t\tTypeReference typeRef = this.exceptionReferences[i];", "-\t\tif (this.references != null) {", "-\t\t\tfor (int i=0; i<this.references.length; i++) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = this.references[i];", "+\t\tif (this.seeReferences != null) {", "+\t\t\tfor (int i=0; i<this.seeReferences.length; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = this.seeReferences[i];", "-\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) this.references[i];", "+\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) this.seeReferences[i];", "-\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.references[i];", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.seeReferences[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "815f517d3783b808770762e3b4b973c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "53380a5830867128cd28d10f3919067730bbfb82", "commitAfterChange": "c0f393752b7d4523a5fc372912c7b4e192e52da7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["+\t\tint length = 0;", "-\t\t\tfor (int i=0; i<this.paramReferences.length; i++) {", "+\t\t\tlength = this.paramReferences.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\tfor (int i=0; i<this.invalidParameters.length; i++) {", "+\t\t\tlength = this.invalidParameters.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tif (param.sourceStart==start) {", "+\t\t\t\t\treturn param;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// type parameters array", "+\t\tif (this.paramTypeParameters != null) {", "+\t\t\tlength = this.paramTypeParameters.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "-\t\t\tfor (int i=0; i<this.exceptionReferences.length; i++) {", "+\t\t\tlength = this.exceptionReferences.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\tfor (int i=0; i<this.seeReferences.length; i++) {", "+\t\t\tlength = this.seeReferences.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\tfor (int j=0; j<allocationExpr.arguments.length; j++) {", "+\t\t\t\t\t\t\tfor (int j=0, l=allocationExpr.arguments.length; j<l; j++) {", "-\t\t\t\t\t\t\tfor (int j=0; j<messageSend.arguments.length; j++) {", "+\t\t\t\t\t\t\tfor (int j=0, l=messageSend.arguments.length; j<l; j++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82f0370225a6e4d0c90a1b6b09624670", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a83998eafb5710017d069118e5017f85165dc68d", "commitAfterChange": "507dcedd3a1fdac6fc22c9b1a4a0ec9c8798fdc1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["+\t */", "-\t\t// search for compiler ast nodes with same position", "-\t\tfor (int i=0; i<this.thrownExceptions.length; i++) {", "-\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "-\t\t\tif (typeRef.sourceStart==start) {", "-\t\t\t\treturn typeRef;", "+\t\t// parameters array", "+\t\tif (this.parameters != null) {", "+\t\t\tfor (int i=0; i<this.parameters.length; i++) {", "+\t\t\t\tJavadocSingleNameReference param = this.parameters[i];", "+\t\t\t\tif (param.sourceStart==start) {", "+\t\t\t\t\treturn param;", "+\t\t\t\t}", "-\t\tfor (int i=0; i<this.references.length; i++) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = this.references[i];", "-\t\t\tif (expression.sourceStart==start) {", "-\t\t\t\treturn expression;", "+\t\t// thrown exception array", "+\t\tif (this.thrownExceptions != null) {", "+\t\t\tfor (int i=0; i<this.thrownExceptions.length; i++) {", "+\t\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "+\t\t\t\tif (typeRef.sourceStart==start) {", "+\t\t\t\t\treturn typeRef;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// references array", "+\t\tif (this.references != null) {", "+\t\t\tfor (int i=0; i<this.references.length; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = this.references[i];", "+\t\t\t\tif (expression.sourceStart==start) {", "+\t\t\t\t\treturn expression;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "895c83dd8190a251d57a81371a2e9b0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate Expression parseArguments(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Expression parseArguments(TypeReference receiver) throws InvalidInputException", "diff": ["-\t\tint ptr = astPtr;", "-\t\tint lptr = astLengthPtr;", "+\t\tint ptr = this.astPtr;", "+\t\tint lptr = this.astLengthPtr;", "-\t\t\tchar[] memberName = identifierStack[0];", "+\t\t\tchar[] memberName = this.identifierStack[0];", "-\t\t\t\t\t\tJavadocAllocationExpression expr = new JavadocAllocationExpression(identifierPositionStack[0]);", "+\t\t\t\t\t\tJavadocAllocationExpression expr = new JavadocAllocationExpression(this.identifierPositionStack[0]);", "-\t\t\t\t\t\tJavadocMessageSend msg = new JavadocMessageSend(identifierStack[0], identifierPositionStack[0]);", "+\t\t\t\t\t\tJavadocMessageSend msg = new JavadocMessageSend(this.identifierStack[0], this.identifierPositionStack[0]);", "-\t\t\t\tint size = astLengthStack[astLengthPtr--];", "+\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "-\t\t\t\t\targuments[i] = (JavadocArgumentExpression) astStack[astPtr--];", "+\t\t\t\t\targuments[i] = (JavadocArgumentExpression) this.astStack[this.astPtr--];", "-\t\t\t\t\tJavadocAllocationExpression alloc = new JavadocAllocationExpression(identifierPositionStack[0]);", "+\t\t\t\t\tJavadocAllocationExpression alloc = new JavadocAllocationExpression(this.identifierPositionStack[0]);", "-\t\t\t\t\tJavadocMessageSend msg = new JavadocMessageSend(identifierStack[0], identifierPositionStack[0], arguments);", "+\t\t\t\t\tJavadocMessageSend msg = new JavadocMessageSend(this.identifierStack[0], this.identifierPositionStack[0], arguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b12f46abf66e36e0fdc67083e6621827", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "671178f1f1111f921cebcc377164efed75b9cfcb", "commitAfterChange": "635d7e113ce40e25df072667fd17a7c3dd9b4152", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["+\t\t\t\t} else if (expression instanceof JavadocAllocationExpression) {", "+\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) this.references[i];", "+\t\t\t\t\t// if binding is valid then look at arguments", "+\t\t\t\t\tif (allocationExpr.binding != null && allocationExpr.binding.isValidBinding()) {", "+\t\t\t\t\t\tif (allocationExpr.arguments != null) {", "+\t\t\t\t\t\t\tfor (int j=0; j<allocationExpr.arguments.length; j++) {", "+\t\t\t\t\t\t\t\tif (allocationExpr.arguments[j].sourceStart == start) {", "+\t\t\t\t\t\t\t\t\treturn allocationExpr.arguments[j];", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (expression instanceof JavadocMessageSend) {", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.references[i];", "+\t\t\t\t\t// if binding is valid then look at arguments", "+\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding()) {", "+\t\t\t\t\t\tif (messageSend.arguments != null) {", "+\t\t\t\t\t\t\tfor (int j=0; j<messageSend.arguments.length; j++) {", "+\t\t\t\t\t\t\t\tif (messageSend.arguments[j].sourceStart == start) {", "+\t\t\t\t\t\t\t\t\treturn messageSend.arguments[j];", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c81f7de2ae0383049789d6c6b63cbbe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "e1b169e81e77457e606284ca99eb647f32044188", "commitAfterChange": "3aabc067e22084d59ef0ea59b0d58e1085dede4c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "signatureAfterChange": " \t \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "diff": ["-\t\t", "+\t\tif (r2.findSuperTypeOriginatingFrom(r1) != null)", "+\t\t\treturn false;", "+\t\tint i;", "-\t\t\tfor (int i = 0; i < returnExpressionsLength; i++) {", "+\t\t\tfor (i = 0; i < returnExpressionsLength; i++) {", "-\t\t\treturn true;", "+\t\t\tif (i == returnExpressionsLength)", "+\t\t\t\treturn true;", "-\t\tif (returnExpressionsLength == 0)", "-\t\t\treturn false;", "-\t\t", "-\t\tsSam = s.getSingleAbstractMethod(this.enclosingScope);", "-\t\tfor (int i = 0; i < returnExpressionsLength; i++) {", "-\t\t\tExpression resultExpression = returnExpressions[i];", "-\t\t\tif (!resultExpression.sIsMoreSpecific(sSam.returnType, tSam.returnType))", "-\t\t\t\treturn false;", "+\t\tif (!r1.isBaseType() && r2.isBaseType()) {", "+\t\t\tfor (i = 0; i < returnExpressionsLength; i++) {", "+\t\t\t\tif (returnExpressions[i].resolvedType.isBaseType())", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (i == returnExpressionsLength)", "+\t\t\t\treturn true;", "-\t\treturn true;", "+\t\tif (r1.isFunctionalInterface(this.enclosingScope) && r2.isFunctionalInterface(this.enclosingScope)) {", "+\t\t\tfor (i = 0; i < returnExpressionsLength; i++) {", "+\t\t\t\tExpression resultExpression = returnExpressions[i];", "+\t\t\t\tif (!resultExpression.sIsMoreSpecific(r1, r2))", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (i != 0 && i == returnExpressionsLength)", "+\t\t\t\treturn true;", "+\t\t}", "+\t\treturn false;"]}], "num": 71791}
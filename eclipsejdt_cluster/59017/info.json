{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6ee4ef9f5b0f9aae346813a29ecd5e3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e49851c47b18a4b7c0e8e6a3c1a25c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "e67d1dc6830648c83fdb0e0b83b59925424638d8", "commitAfterChange": "4817a4bde9db799e7a793068d64037f59bfa521f", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": " void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "diff": ["-\tif (nullableAnnotationName == null || nonNullAnnotationName == null)", "+\tchar[][] nonNullByDefaultAnnotationName = this.environment.getNonNullByDefaultAnnotationName();", "+\tif (nullableAnnotationName == null || nonNullAnnotationName == null || nonNullByDefaultAnnotationName == null)", "+", "+\tint currentDefault = NO_NULL_DEFAULT;", "+\tif ((this.tagBits & TagBits.AnnotationNonNullByDefault) != 0) {", "+\t\tcurrentDefault = NONNULL_BY_DEFAULT;", "+\t} else if ((this.tagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0) {", "+\t\tcurrentDefault = NULL_UNSPECIFIED_BY_DEFAULT;", "+\t}", "+\tboolean explicitNullness = false;", "-\t\t\tif (CharOperation.equals(typeName, nonNullAnnotationName)) {", "-\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "-\t\t\t\tbreak;", "+\t\t\tif (CharOperation.equals(typeName, nonNullByDefaultAnnotationName)) {", "+\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNullByDefault;", "+\t\t\t\tcurrentDefault = NONNULL_BY_DEFAULT;", "-\t\t\tif (CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "+\t\t\t\texplicitNullness = true;", "+\t\t\t}", "+\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nullableAnnotationName)) {", "-\t\t\t\tbreak;", "+\t\t\t\texplicitNullness = true;", "+\t}", "+\tif (!explicitNullness && currentDefault == NONNULL_BY_DEFAULT) {", "+\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "-\tif (numParamAnnotations > 0) {", "-\t\tint startIndex = numParamAnnotations - numVisibleParams;", "+\tif (numParamAnnotations > 0 || currentDefault == NONNULL_BY_DEFAULT) {", "-\t\t\tIBinaryAnnotation[] paramAnnotations = method.getParameterAnnotations(j+startIndex);", "-\t\t\tif (paramAnnotations != null) {", "-\t\t\t\tfor (int i = 0; i < paramAnnotations.length; i++) {", "-\t\t\t\t\tchar[] annotationTypeName = paramAnnotations[i].getTypeName();", "-\t\t\t\t\tif (annotationTypeName[0] != Util.C_RESOLVED)", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tchar[][] typeName = CharOperation.splitOn('/', annotationTypeName, 1, annotationTypeName.length-1); // cut of leading 'L' and trailing ';'", "-\t\t\t\t\tif (CharOperation.equals(typeName, nonNullAnnotationName)) {", "-\t\t\t\t\t\tif (methodBinding.parameterNonNullness == null)", "-\t\t\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "-\t\t\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "-\t\t\t\t\t\tif (methodBinding.parameterNonNullness == null)", "-\t\t\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "-\t\t\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.FALSE;", "-\t\t\t\t\t\tbreak;", "+\t\t\texplicitNullness = false;", "+\t\t\tif (numParamAnnotations > 0) {", "+\t\t\t\tint startIndex = numParamAnnotations - numVisibleParams;", "+\t\t\t\tIBinaryAnnotation[] paramAnnotations = method.getParameterAnnotations(j+startIndex);", "+\t\t\t\tif (paramAnnotations != null) {", "+\t\t\t\t\tfor (int i = 0; i < paramAnnotations.length; i++) {", "+\t\t\t\t\t\tchar[] annotationTypeName = paramAnnotations[i].getTypeName();", "+\t\t\t\t\t\tif (annotationTypeName[0] != Util.C_RESOLVED)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tchar[][] typeName = CharOperation.splitOn('/', annotationTypeName, 1, annotationTypeName.length-1); // cut of leading 'L' and trailing ';'", "+\t\t\t\t\t\tif (CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\t\t\t\tif (methodBinding.parameterNonNullness == null)", "+\t\t\t\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "+\t\t\t\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;", "+\t\t\t\t\t\t\texplicitNullness = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t\t\t\t\tif (methodBinding.parameterNonNullness == null)", "+\t\t\t\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "+\t\t\t\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.FALSE;", "+\t\t\t\t\t\t\texplicitNullness = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!explicitNullness && currentDefault == NONNULL_BY_DEFAULT) {", "+\t\t\t\tif (methodBinding.parameterNonNullness == null)", "+\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "+\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4086574c2dd0978ee5661485549eec77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate int internalBoundCheck(Substitution substitution, TypeBinding argumentType, Scope scope)", "signatureAfterChange": " \tprivate TypeConstants.BoundCheckStatus internalBoundCheck(Substitution substitution, TypeBinding argumentType, Scope scope, ASTNode location)", "diff": ["-\tprivate int internalBoundCheck(Substitution substitution, TypeBinding argumentType, Scope scope) {", "+\tprivate TypeConstants.BoundCheckStatus internalBoundCheck(Substitution substitution, TypeBinding argumentType, Scope scope, ASTNode location) {", "-\t\t\treturn TypeConstants.OK;", "+\t\t\treturn BoundCheckStatus.OK;", "-\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\treturn BoundCheckStatus.MISMATCH;", "-\t\t\treturn TypeConstants.OK;", "+\t\t\treturn BoundCheckStatus.OK;", "-\t\t\t\t\t\treturn TypeConstants.OK;", "+\t\t\t\t\t\treturn BoundCheckStatus.OK;", "-\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t\treturn BoundCheckStatus.MISMATCH;", "-\t\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t\t\treturn BoundCheckStatus.MISMATCH;", "-\t\t\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t\t\t\treturn BoundCheckStatus.MISMATCH;", "-\t\t\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t\t\t\treturn BoundCheckStatus.MISMATCH;", "-\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t\treturn BoundCheckStatus.MISMATCH;", "-\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t\treturn BoundCheckStatus.MISMATCH;", "-\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH; // cannot be extended further to satisfy missing bounds", "+\t\t\t\t\t\t\t\t\treturn BoundCheckStatus.MISMATCH; // cannot be extended further to satisfy missing bounds", "-\t\t\t\t\treturn boundCheck(substitution, wildcard.bound, scope);", "+\t\t\t\t\treturn boundCheck(substitution, wildcard.bound, scope, location);", "-\t\t\treturn TypeConstants.OK;", "+\t\t\treturn BoundCheckStatus.OK;", "+\t\tboolean checkNullAnnotations = scope.environment().usesNullTypeAnnotations();", "+\t\tboolean haveReportedNullProblem = false;", "-\t\t\t\t    return TypeConstants.MISMATCH;", "+\t\t\t\t    return BoundCheckStatus.MISMATCH;", "+\t\t\tif (location != null && checkNullAnnotations) {", "+\t\t\t\tif (NullAnnotationMatching.analyse(this, argumentType, substitutedSuperType, substitution, -1, CheckMode.BOUND_CHECK).isAnyMismatch()) {", "+\t\t\t\t\tscope.problemReporter().nullityMismatchTypeArgument(this, argumentType, location);", "+\t\t\t\t\thaveReportedNullProblem = true;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\t    return TypeConstants.MISMATCH;", "+\t\t\t\t    return BoundCheckStatus.MISMATCH;", "+\t\t\tif (location != null && checkNullAnnotations) {", "+\t\t\t\tif (NullAnnotationMatching.analyse(this, argumentType, substitutedSuperType, substitution, -1, CheckMode.BOUND_CHECK).isAnyMismatch()) {", "+\t\t\t\t\tscope.problemReporter().nullityMismatchTypeArgument(this, argumentType, location);", "+\t\t\t\t\thaveReportedNullProblem = true;", "+\t\t\t\t}", "+\t\t\t}", "-\t    long nullTagBits = NullAnnotationMatching.validNullTagBits(this.tagBits);", "-\t    if (nullTagBits != 0) {", "-\t    \tlong argBits = NullAnnotationMatching.validNullTagBits(argumentType.tagBits);", "-\t    \tif (argBits != nullTagBits) {", "-//\t    \t\tSystem.err.println(\"TODO(stephan): issue proper error: bound conflict at \"+String.valueOf(this.declaringElement.readableName()));", "-\t    \t}", "+\t    if (location != null && checkNullAnnotations && !haveReportedNullProblem) {", "+\t    \tlong nullBits = this.tagBits & TagBits.AnnotationNullMASK;", "+\t    \tif (nullBits != 0 && nullBits != (argumentType.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\tscope.problemReporter().nullityMismatchTypeArgument(this, argumentType, location);", "+\t\t\t\thaveReportedNullProblem = true;", "+\t\t\t}", "-\t    return unchecked ? TypeConstants.UNCHECKED : TypeConstants.OK;", "+\t    return unchecked ? BoundCheckStatus.UNCHECKED : haveReportedNullProblem ? BoundCheckStatus.NULL_PROBLEM : BoundCheckStatus.OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "847f8a2b5037e727d2649f8ed33c0cc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "990743369489693dca5f5fa68483b66fb1bdecda", "commitAfterChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient)", "signatureAfterChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient)", "diff": ["-\tpublic static void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient) {", "-\t\tAnnotationBinding[] instances = null;", "-\t\tint length = annotations == null ? 0 : annotations.length;", "+\tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient) {", "+\t\tAnnotationBinding[] annotations = null;", "+\t\tint length = sourceAnnotations == null ? 0 : sourceAnnotations.length;", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\ttype.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\ttype.setAnnotations(annotations);", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\tmethod.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\tmethod.setAnnotations(annotations);", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\tfield.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\tfield.setAnnotations(annotations);", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\tlocal.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\tlocal.setAnnotations(annotations);", "-\t\tif (annotations == null)", "+\t\tif (sourceAnnotations == null)", "-\t\tTypeBinding[] annotationTypes = new TypeBinding[length];", "-\t\t\tAnnotation annotation = annotations[i];", "+\t\t\tAnnotation annotation = sourceAnnotations[i];", "-\t\t\t\tif (instances != null) {", "+\t\t\t\tif (annotations != null) {", "-\t\t\t\t\tinstances[0] = annotation.getCompilerAnnotation();", "+\t\t\t\t\tannotations[0] = annotation.getCompilerAnnotation();", "-\t\t\t\t\t\tAnnotation annot = annotations[j];", "-\t\t\t\t\t\tinstances[j] = annot.getCompilerAnnotation();", "+\t\t\t\t\t\tAnnotation annot = sourceAnnotations[j];", "+\t\t\t\t\t\tannotations[j] = annot.getCompilerAnnotation();", "-\t\t\t\tannotationTypes[i] = annotation.resolveType(scope);", "+\t\t\t\tannotation.resolveType(scope);", "-\t\t\t\tif (instances != null) {", "-\t\t\t\t\tinstances[i] = annotation.getCompilerAnnotation();", "+\t\t\t\tif (annotations != null) {", "+\t\t\t\t\tannotations[i] = annotation.getCompilerAnnotation();", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tTypeBinding annotationType = annotationTypes[i];", "-\t\t\tif (annotationType == null) continue;", "-\t\t\tboolean foundDuplicate = false;", "-\t\t\tfor (int j = i+1; j < length; j++) {", "-\t\t\t\tif (annotationTypes[j] == annotationType) {", "-\t\t\t\t\tfoundDuplicate = true;", "-\t\t\t\t\tannotationTypes[j] = null; // report it only once", "-\t\t\t\t\tscope.problemReporter().duplicateAnnotation(annotations[j]);", "+\t\tif (annotations != null) {", "+\t\t\tAnnotationBinding[] distinctAnnotations = annotations; // only copy after 1st duplicate is detected", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tAnnotationBinding annotation = distinctAnnotations[i];", "+\t\t\t\tif (annotation == null) continue;", "+\t\t\t\tTypeBinding annotationType = annotation.getAnnotationType();", "+\t\t\t\tboolean foundDuplicate = false;", "+\t\t\t\tfor (int j = i+1; j < length; j++) {", "+\t\t\t\t\tif (distinctAnnotations[j].getAnnotationType() == annotationType) {", "+\t\t\t\t\t\tfoundDuplicate = true;", "+\t\t\t\t\t\tif (distinctAnnotations == annotations) {", "+\t\t\t\t\t\t\tSystem.arraycopy(distinctAnnotations, 0, distinctAnnotations = new AnnotationBinding[length], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdistinctAnnotations[j] = null; // report it only once", "+\t\t\t\t\t\tscope.problemReporter().duplicateAnnotation(sourceAnnotations[j]);", "+\t\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (foundDuplicate) {", "-\t\t\t\tscope.problemReporter().duplicateAnnotation(annotations[i]);", "+\t\t\t\tif (foundDuplicate) {", "+\t\t\t\t\tscope.problemReporter().duplicateAnnotation(sourceAnnotations[i]);", "+\t\t\t\t}"]}], "num": 59017}
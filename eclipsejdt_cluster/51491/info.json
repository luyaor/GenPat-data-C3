{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b9858770e04d2151232a16a7377a883", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5514690c8c6d866f855d937bd79a8516", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "69622d139cf7be8059928288f19c2f5b2d55bdc5", "commitAfterChange": "bd0b42da240c9e3160dab0f23f741fededbd0813", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  public final void pushLineSeparator()", "signatureAfterChange": "  public final void pushLineSeparator()", "diff": ["-\t\tcurrentLine = null;", "+\t\tthis.currentLine = null;", "-\tif (currentCharacter == '\\r') {", "-\t\tint separatorPos = currentPosition - 1;", "-\t\t//TODO (olivier) david - why the following line was \"if ((linePtr > 0) && (lineEnds[linePtr] >= separatorPos)) return;\" ?", "-\t\tif ((linePtr >= 0) && (lineEnds[linePtr] >= separatorPos)) return;", "+\tif (this.currentCharacter == '\\r') {", "+\t\tint separatorPos = this.currentPosition - 1;", "+\t\t//TODO (olivier) david - why the following line was \"if ((this.linePtr > 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;\" ?", "+\t\tif ((this.linePtr >= 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;", "-\t\t\tlineEnds[++linePtr] = separatorPos;", "+\t\t\tthis.lineEnds[++this.linePtr] = separatorPos;", "-\t\t\t//linePtr value is correct", "-\t\t\tint oldLength = lineEnds.length;", "-\t\t\tint[] old = lineEnds;", "-\t\t\tlineEnds = new int[oldLength + INCREMENT];", "-\t\t\tSystem.arraycopy(old, 0, lineEnds, 0, oldLength);", "-\t\t\tlineEnds[linePtr] = separatorPos;", "+\t\t\t//this.linePtr value is correct", "+\t\t\tint oldLength = this.lineEnds.length;", "+\t\t\tint[] old = this.lineEnds;", "+\t\t\tthis.lineEnds = new int[oldLength + INCREMENT];", "+\t\t\tSystem.arraycopy(old, 0, this.lineEnds, 0, oldLength);", "+\t\t\tthis.lineEnds[this.linePtr] = separatorPos;", "-\t\t\tif (source[currentPosition] == '\\n') {", "-\t\t\t\t//System.out.println(\"look-ahead LF-\" + currentPosition);\t\t\t", "-\t\t\t\tlineEnds[linePtr] = currentPosition;", "-\t\t\t\tcurrentPosition++;", "-\t\t\t\twasAcr = false;", "+\t\t\tif (this.source[this.currentPosition] == '\\n') {", "+\t\t\t\t//System.out.println(\"look-ahead LF-\" + this.currentPosition);\t\t\t", "+\t\t\t\tthis.lineEnds[this.linePtr] = this.currentPosition;", "+\t\t\t\tthis.currentPosition++;", "+\t\t\t\tthis.wasAcr = false;", "-\t\t\t\twasAcr = true;", "+\t\t\t\tthis.wasAcr = true;", "-\t\t\twasAcr = true;", "+\t\t\tthis.wasAcr = true;", "-\t\tif (currentCharacter == '\\n') { //must merge eventual cr followed by lf", "-\t\t\tif (wasAcr && (lineEnds[linePtr] == (currentPosition - 2))) {", "-\t\t\t\t//System.out.println(\"merge LF-\" + (currentPosition - 1));\t\t\t\t\t\t\t", "-\t\t\t\tlineEnds[linePtr] = currentPosition - 1;", "+\t\tif (this.currentCharacter == '\\n') { //must merge eventual cr followed by lf", "+\t\t\tif (this.wasAcr && (this.lineEnds[this.linePtr] == (this.currentPosition - 2))) {", "+\t\t\t\t//System.out.println(\"merge LF-\" + (this.currentPosition - 1));\t\t\t\t\t\t\t", "+\t\t\t\tthis.lineEnds[this.linePtr] = this.currentPosition - 1;", "-\t\t\t\tint separatorPos = currentPosition - 1;", "-\t\t\t\t//TODO (olivier) david - why the following line was \"if ((linePtr > 0) && (lineEnds[linePtr] >= separatorPos)) return;\" ?", "-\t\t\t\tif ((linePtr >= 0) && (lineEnds[linePtr] >= separatorPos)) return;", "+\t\t\t\tint separatorPos = this.currentPosition - 1;", "+\t\t\t\t//TODO (olivier) david - why the following line was \"if ((this.linePtr > 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;\" ?", "+\t\t\t\tif ((this.linePtr >= 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;", "-\t\t\t\t\tlineEnds[++linePtr] = separatorPos;", "+\t\t\t\t\tthis.lineEnds[++this.linePtr] = separatorPos;", "-\t\t\t\t\t//linePtr value is correct", "-\t\t\t\t\tint oldLength = lineEnds.length;", "-\t\t\t\t\tint[] old = lineEnds;", "-\t\t\t\t\tlineEnds = new int[oldLength + INCREMENT];", "-\t\t\t\t\tSystem.arraycopy(old, 0, lineEnds, 0, oldLength);", "-\t\t\t\t\tlineEnds[linePtr] = separatorPos;", "+\t\t\t\t\t//this.linePtr value is correct", "+\t\t\t\t\tint oldLength = this.lineEnds.length;", "+\t\t\t\t\tint[] old = this.lineEnds;", "+\t\t\t\t\tthis.lineEnds = new int[oldLength + INCREMENT];", "+\t\t\t\t\tSystem.arraycopy(old, 0, this.lineEnds, 0, oldLength);", "+\t\t\t\t\tthis.lineEnds[this.linePtr] = separatorPos;", "-\t\t\twasAcr = false;", "+\t\t\tthis.wasAcr = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d08f572d2d7be135ffd6ad5d937672ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "2e3b506bd16c2dfca1b01615ff44e6bfc5c42dab", "commitAfterChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "  public final void pushLineSeparator()", "signatureAfterChange": "  public final void pushLineSeparator()", "diff": ["-\t\tcurrentLine = null;", "+\t\tthis.currentLine = null;", "-\tif (currentCharacter == '\\r') {", "-\t\tint separatorPos = currentPosition - 1;", "-\t\t//TODO (olivier) david - why the following line was \"if ((linePtr > 0) && (lineEnds[linePtr] >= separatorPos)) return;\" ?", "-\t\tif ((linePtr >= 0) && (lineEnds[linePtr] >= separatorPos)) return;", "+\tif (this.currentCharacter == '\\r') {", "+\t\tint separatorPos = this.currentPosition - 1;", "+\t\t//TODO (olivier) david - why the following line was \"if ((this.linePtr > 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;\" ?", "+\t\tif ((this.linePtr >= 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;", "-\t\t\tlineEnds[++linePtr] = separatorPos;", "+\t\t\tthis.lineEnds[++this.linePtr] = separatorPos;", "-\t\t\t//linePtr value is correct", "-\t\t\tint oldLength = lineEnds.length;", "-\t\t\tint[] old = lineEnds;", "-\t\t\tlineEnds = new int[oldLength + INCREMENT];", "-\t\t\tSystem.arraycopy(old, 0, lineEnds, 0, oldLength);", "-\t\t\tlineEnds[linePtr] = separatorPos;", "+\t\t\t//this.linePtr value is correct", "+\t\t\tint oldLength = this.lineEnds.length;", "+\t\t\tint[] old = this.lineEnds;", "+\t\t\tthis.lineEnds = new int[oldLength + INCREMENT];", "+\t\t\tSystem.arraycopy(old, 0, this.lineEnds, 0, oldLength);", "+\t\t\tthis.lineEnds[this.linePtr] = separatorPos;", "-\t\t\tif (source[currentPosition] == '\\n') {", "-\t\t\t\t//System.out.println(\"look-ahead LF-\" + currentPosition);\t\t\t", "-\t\t\t\tlineEnds[linePtr] = currentPosition;", "-\t\t\t\tcurrentPosition++;", "-\t\t\t\twasAcr = false;", "+\t\t\tif (this.source[this.currentPosition] == '\\n') {", "+\t\t\t\t//System.out.println(\"look-ahead LF-\" + this.currentPosition);\t\t\t", "+\t\t\t\tthis.lineEnds[this.linePtr] = this.currentPosition;", "+\t\t\t\tthis.currentPosition++;", "+\t\t\t\tthis.wasAcr = false;", "-\t\t\t\twasAcr = true;", "+\t\t\t\tthis.wasAcr = true;", "-\t\t\twasAcr = true;", "+\t\t\tthis.wasAcr = true;", "-\t\tif (currentCharacter == '\\n') { //must merge eventual cr followed by lf", "-\t\t\tif (wasAcr && (lineEnds[linePtr] == (currentPosition - 2))) {", "-\t\t\t\t//System.out.println(\"merge LF-\" + (currentPosition - 1));\t\t\t\t\t\t\t", "-\t\t\t\tlineEnds[linePtr] = currentPosition - 1;", "+\t\tif (this.currentCharacter == '\\n') { //must merge eventual cr followed by lf", "+\t\t\tif (this.wasAcr && (this.lineEnds[this.linePtr] == (this.currentPosition - 2))) {", "+\t\t\t\t//System.out.println(\"merge LF-\" + (this.currentPosition - 1));\t\t\t\t\t\t\t", "+\t\t\t\tthis.lineEnds[this.linePtr] = this.currentPosition - 1;", "-\t\t\t\tint separatorPos = currentPosition - 1;", "-\t\t\t\t//TODO (olivier) david - why the following line was \"if ((linePtr > 0) && (lineEnds[linePtr] >= separatorPos)) return;\" ?", "-\t\t\t\tif ((linePtr >= 0) && (lineEnds[linePtr] >= separatorPos)) return;", "+\t\t\t\tint separatorPos = this.currentPosition - 1;", "+\t\t\t\t//TODO (olivier) david - why the following line was \"if ((this.linePtr > 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;\" ?", "+\t\t\t\tif ((this.linePtr >= 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;", "-\t\t\t\t\tlineEnds[++linePtr] = separatorPos;", "+\t\t\t\t\tthis.lineEnds[++this.linePtr] = separatorPos;", "-\t\t\t\t\t//linePtr value is correct", "-\t\t\t\t\tint oldLength = lineEnds.length;", "-\t\t\t\t\tint[] old = lineEnds;", "-\t\t\t\t\tlineEnds = new int[oldLength + INCREMENT];", "-\t\t\t\t\tSystem.arraycopy(old, 0, lineEnds, 0, oldLength);", "-\t\t\t\t\tlineEnds[linePtr] = separatorPos;", "+\t\t\t\t\t//this.linePtr value is correct", "+\t\t\t\t\tint oldLength = this.lineEnds.length;", "+\t\t\t\t\tint[] old = this.lineEnds;", "+\t\t\t\t\tthis.lineEnds = new int[oldLength + INCREMENT];", "+\t\t\t\t\tSystem.arraycopy(old, 0, this.lineEnds, 0, oldLength);", "+\t\t\t\t\tthis.lineEnds[this.linePtr] = separatorPos;", "-\t\t\twasAcr = false;", "+\t\t\tthis.wasAcr = false;"]}], "num": 51491}
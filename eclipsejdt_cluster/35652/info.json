{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49e0773240374a36cfe25d50beef1fc1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b76b36b509b25b11f91c641e46b0913", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  protected CompilationParticipantResult[] notifyParticipants(SourceFile[] unitsAboutToCompile)", "signatureAfterChange": "  protected CompilationParticipantResult[] notifyParticipants(SourceFile[] unitsAboutToCompile)", "diff": ["+\tCompilationParticipantResult[] results = new CompilationParticipantResult[unitsAboutToCompile.length];", "+\tfor (int i = unitsAboutToCompile.length; --i >= 0;)", "+\t\tresults[i] = new CompilationParticipantResult(unitsAboutToCompile[i]);", "+", "-\tCompilationParticipantResult[] results = null;", "-\tfor (int i = 0, l = this.javaBuilder.participants == null ? 0 : this.javaBuilder.participants.length; i < l; i++) {", "-\t\tif (!this.javaBuilder.participants[i].isAnnotationProcessor()) {", "-\t\t\tif (results == null) {", "-\t\t\t\tresults = new CompilationParticipantResult[unitsAboutToCompile.length];", "-\t\t\t\tfor (int j = unitsAboutToCompile.length; --j >= 0;)", "-\t\t\t\t\tresults[j] = new CompilationParticipantResult(unitsAboutToCompile[j]);", "-\t\t\t}", "-\t\t\tthis.javaBuilder.participants[i].buildStarting(results);", "-\t\t}", "-\t}", "-\treturn results;", "-}", "+\t// and what happens if some participants do not expect to be called with only a few files, after seeing 'all' the files?", "+\t\tthis.javaBuilder.participants[i].buildStarting(results, this instanceof BatchImageBuilder);", "+\tSimpleSet uniqueFiles = null;", "+\tCompilationParticipantResult[] toAdd = null;", "+\tint added = 0;", "+\t\t\t\tif (uniqueFiles == null) {", "+\t\t\t\t\tuniqueFiles = new SimpleSet(unitsAboutToCompile.length + 3);", "+\t\t\t\t\tfor (int f = unitsAboutToCompile.length; --f >= 0;)", "+\t\t\t\t\t\tuniqueFiles.add(unitsAboutToCompile[f]);", "+\t\t\t\t}", "+\t\t\t\tif (!uniqueFiles.includes(sourceFile))", "+\t\t\t\t\tuniqueFiles.add(sourceFile);", "+\t\t\t\t\tCompilationParticipantResult newResult = new CompilationParticipantResult(sourceFile);", "+\t\t\t\t\t// is there enough room to add all the addedGeneratedFiles.length ?", "+\t\t\t\t\tif (toAdd == null) {", "+\t\t\t\t\t\ttoAdd = new CompilationParticipantResult[addedGeneratedFiles.length];", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint length = toAdd.length;", "+\t\t\t\t\t\tif (added == length)", "+\t\t\t\t\t\t\tSystem.arraycopy(toAdd, 0, toAdd = new CompilationParticipantResult[length + addedGeneratedFiles.length], 0, length);", "+\t\t\t\t\t}", "+\t\t\t\t\ttoAdd[added++] = newResult;", "+\tif (added >0 ) {", "+\t\tint length = results.length;", "+\t\tSystem.arraycopy(results, 0, results = new CompilationParticipantResult[length + added], 0 , length);", "+\t\tSystem.arraycopy(toAdd, 0, results, length, added);", "+\t}", "+\treturn results;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e94035d8281c3ba41999c8407da203a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public MethodBinding getMethodBinding(IMethod method)", "signatureAfterChange": " public MethodBinding getMethodBinding(IMethod method)", "diff": ["-\tMethodBinding methodBinding = null;", "-\t\t\tint length = parameterTypes.length;", "-\t\t\tTypeBinding[] parameters = new TypeBinding[length];", "-\t\t\tfor (int i=0;  i<length; i++) {", "-\t\t\t\tparameters[i] = this.unitScope.getType(Signature.toCharArray(parameterTypes[i].toCharArray()));", "+\t\t\tint paramTypeslength = parameterTypes.length;", "+\t\t\tchar[][] paramTypesChars = new char[paramTypeslength][];", "+\t\t\tfor (int i=0;  i<paramTypeslength; i++) {", "+\t\t\t\tparamTypesChars[i] = Signature.toCharArray(parameterTypes[i].toCharArray());", "-\t\t\tmethodBinding = referenceBinding.getExactMethod(method.getElementName().toCharArray(), parameters);", "-\t\t\tthis.bindings.put(method, methodBinding);", "-\t\t\treturn methodBinding;", "+\t\t\tMethodBinding[] methods = referenceBinding.getMethods(method.getElementName().toCharArray());", "+\t\t\tint methodsLength = methods.length;", "+\t\t\tTypeVariableBinding[] refTypeVariables = referenceBinding.typeVariables();", "+\t\t\tint typeVarLength = refTypeVariables==null ? 0 : refTypeVariables.length;", "+\t\t\tfor (int i=0; i<methodsLength; i++) {", "+\t\t\t\tTypeBinding[] methodParameters = methods[i].parameters;", "+\t\t\t\tint paramLength = methodParameters==null ? 0 : methodParameters.length;", "+\t\t\t\tTypeVariableBinding[] methodTypeVariables = methods[i].typeVariables;", "+\t\t\t\tint methTypeVarLength = methodTypeVariables==null ? 0 : methodTypeVariables.length;", "+\t\t\t\tboolean found = paramLength == paramTypeslength;", "+\t\t\t\tif (found) {", "+\t\t\t\t\tfor (int p=0; found && p<paramLength; p++) {", "+\t\t\t\t\t\tif (CharOperation.equals(methodParameters[p].erasure().shortReadableName(), paramTypesChars[p])) {", "+\t\t\t\t\t\t\t// param erasure match", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// type variable", "+\t\t\t\t\t\t\tboolean foundVar = true;", "+\t\t\t\t\t\t\tfor (int v=0; foundVar && v<typeVarLength; v++) {", "+\t\t\t\t\t\t\t\tif (!CharOperation.equals(refTypeVariables[v].sourceName, paramTypesChars[p])) {", "+\t\t\t\t\t\t\t\t\tfoundVar = false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (!foundVar) {", "+\t\t\t\t\t\t\t\tfoundVar = true;", "+\t\t\t\t\t\t\t\tfor (int v=0; foundVar && v<methTypeVarLength; v++) {", "+\t\t\t\t\t\t\t\t\tif (!CharOperation.equals(methodTypeVariables[v].sourceName, paramTypesChars[p])) {", "+\t\t\t\t\t\t\t\t\t\tfoundVar = false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (!foundVar) found = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (found) {", "+\t\t\t\t\tthis.bindings.put(method, methods[i]);", "+\t\t\t\t\treturn methods[i];", "+\t\t\t\t}", "+\t\t\t}", "+//\t\t\tmethodBinding = referenceBinding.getExactMethod(method.getElementName().toCharArray(), parameters);", "+//\t\t\tthis.bindings.put(method, methodBinding);", "+//\t\t\treturn methodBinding;"]}], "num": 35652}
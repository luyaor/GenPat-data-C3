{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a20ffd6da235e22fb52a83bcee503a0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "422debb7584530700950f143cdf9be9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "818dca3cf84fd118ea99497de1f8b977d4253551", "commitAfterChange": "52f6144c4e9af7092e9f26d44a5197a00c39427c", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "diff": ["-\t\t\t\t\tif (newLines == 0) {", "+\t\t\t\t\tif (newLines == 0 && (!node.isImmutable() || block.reference != null)) {", "-\t\t\t\tif (text.isHtmlTag()) {", "-\t\t\t\t\tif (text.isImmutableHtmlTag()) {", "-\t\t\t\t\t\t// Indent if new line was added", "-\t\t\t\t\t\tif (newLines > 0 && this.commentIndentation != null) {", "-\t\t\t\t\t    \taddInsertEdit(node.sourceStart, this.commentIndentation);", "-\t\t\t\t\t    \tthis.column += this.commentIndentation.length();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tprintJavadocHtmlImmutableTag(text, block, newLines > 0);", "-\t\t\t\t\t\tthis.column += getTextLength(block, text);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tprintJavadocHtmlTag(text, block, newLines>0);", "+\t\t\t\tif (text.isImmutable()) {", "+\t\t\t\t\t// Indent if new line was added", "+\t\t\t\t\tif (newLines > 0 && this.commentIndentation != null) {", "+\t\t\t\t    \taddInsertEdit(node.sourceStart, this.commentIndentation);", "+\t\t\t\t    \tthis.column += this.commentIndentation.length();", "+\t\t\t\t\tprintJavadocImmutableText(text, block, newLines > 0);", "+\t\t\t\t\tthis.column += getTextLength(block, text);", "+\t\t\t\t} else if (text.isHtmlTag()) {", "+\t\t\t\t\tprintJavadocHtmlTag(text, block, newLines>0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699cbe8f641118f193aebb0551592b72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "4a7d6bdefb8cc07325fb8a5c7d2a751e2d99c2eb", "commitAfterChange": "a887ec375dde41cb8473606c9dfedbcef88b3ca9", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "diff": ["-\t// perform some emulation work in case there is some and we are inside a local type only", "+\t// supplying enclosing instance for the anonymous type's superclass", "+\tReferenceBinding checkedTargetType = targetType.isAnonymousType() ? targetType.superclass() : targetType;", "-\tReferenceBinding[] syntheticArgumentTypes;", "+\tif (hasExtraEnclosingInstance ", "+\t\t\t&& (!checkedTargetType.isNestedType() || checkedTargetType.isStatic())) {", "+\t\tcurrentScope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, checkedTargetType);", "+\t\treturn;", "+\t}", "+\t// perform some emulation work in case there is some and we are inside a local type only", "+\tReferenceBinding[] syntheticArgumentTypes;", "-\t\tReferenceBinding targetEnclosingType = targetType.isAnonymousType() ? ", "-\t\t\t\ttargetType.superclass().enclosingType() // supplying enclosing instance for the anonymous type's superclass", "-\t\t\t\t: targetType.enclosingType();", "-", "+\t\tReferenceBinding targetEnclosingType = checkedTargetType.enclosingType();", "-\t\t\tcurrentScope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, targetType);", "-\t\t}", "-\t} else { // we may still have an enclosing instance to consider", "-\t\tif (hasExtraEnclosingInstance) {", "-\t\t\tcurrentScope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, targetType);", "+\t\t\tcurrentScope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, checkedTargetType);"]}], "num": 20534}
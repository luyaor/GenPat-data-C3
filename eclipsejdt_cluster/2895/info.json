{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f036d8d890d90f9ce58a05acbf143742", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44a12600742e12dbf66bbbef9d4312c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "e501ebeb8f2d4d3ffca048b0a3620770b3b21e32", "commitAfterChange": "40a6830e5d047359c5255f8a6387f3c89500c57a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "diff": ["-\t\tHashSet visitedProjects, ", "+\t\tHashSet rootIDs,", "-\t\tif (visitedProjects.contains(this)){", "+\t\t// for the project we add this, in case the project is its own source folder.", "+\t\t// we don't want the recursion to end if the source folder has been added", "+\t\t// so we might add it as a rootID and as a project", "+\t\tif (rootIDs.contains(this)){", "-\t\tvisitedProjects.add(this);", "+\t\trootIDs.add(this);", "-\t\t\tIClasspathEntry entry = immediateClasspath[i];", "+\t\t\tClasspathEntry entry = (ClasspathEntry) immediateClasspath[i];", "+\t\t\t\tString rootID = entry.rootID();", "+\t\t\t\tif (rootIDs.contains(rootID)) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\trootIDs.add(rootID);", "-\t\t\t\t\t\t\t\tvisitedProjects, ", "+\t\t\t\t\t\t\t\trootIDs,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b2163c426f49b6e1c85e94ba7e1e46b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "b4f075361126213edb4ab60051081d2143c229e2", "commitAfterChange": "69dd720d7e21bd212bdb2302822b71e51f298515", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected void updateAffectedProjects(IPath prerequisiteProjectPath)", "signatureAfterChange": " \tprotected void updateAffectedProjects(IPath prerequisiteProjectPath)", "diff": ["-\t\t\tIJavaProject originatingProject = getProject();", "+\t\t\tIJavaProject initialProject = this.project;", "-\t\t\t\t\tJavaProject project = (JavaProject) projects[i];", "-\t\t\t\t\tif (project.equals(originatingProject)) continue; // skip itself", "+\t\t\t\t\tJavaProject affectedProject = (JavaProject) projects[i];", "+\t\t\t\t\tif (affectedProject.equals(initialProject)) continue; // skip itself", "-\t\t\t\t\tIClasspathEntry[] classpath = project.getExpandedClasspath(true);", "+\t\t\t\t\tIClasspathEntry[] classpath = affectedProject.getExpandedClasspath(true);", "-\t\t\t\t\t\t\tproject.setRawClasspath(", "+\t\t\t\t\t\t\taffectedProject.setRawClasspath(", "-\t\t\t\t\t\t\t\tproject.getResolvedClasspath(true), ", "+\t\t\t\t\t\t\t\taffectedProject.getResolvedClasspath(true), "]}], "num": 2895}
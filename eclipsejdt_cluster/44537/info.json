{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90c1159308e33ca58ac13b764062a95c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ef205cb762ce5f2c72877905e9706f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "49c7e567a30e3d9cc1c4880ba35031661d2a5415", "commitAfterChange": "c9d2c7d4276b8b0f65a3b8bbfa4009e8632940f9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " protected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["-", "-\t// Get intermediate arguments positions", "-\tlong[] positions = null;", "-\tif (arguments != null) {", "-\t\tint size = arguments.size();", "-\t\tpositions = new long[size];", "-\t\tfor (int i=0; i<size; i++) {", "-\t\t\tFormatJavadocReference reference = (FormatJavadocReference) arguments.get(i);", "-\t\t\tpositions[i] = (((long) reference.sourceStart) << 32) + reference.sourceEnd;", "-\t\t}", "-\t}", "-", "-\t// Build the node", "-\tFormatJavadocReference reference = new FormatJavadocReference(start, this.scanner.getCurrentTokenEndPosition(), lineStart);", "-\treference.positions = positions;", "-\treturn reference;", "+\treturn new FormatJavadocReference(start, this.scanner.getCurrentTokenEndPosition(), lineStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8995d6034374ad368f757f6784847c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "cccafe00dbf29f156949d8f0d0aec370b02aa048", "commitAfterChange": "1a542c460a449efbae14d1057ba233825602248d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 27, "signatureBeforeChange": " protected JavaElementDelta getDeltaFor(IJavaElement element)", "signatureAfterChange": " protected JavaElementDelta getDeltaFor(IJavaElement element)", "diff": ["-\tif (equalsAndSameParent(getElement(), element)) // handle case of two jars that can be equals but not in the same project", "-\t\treturn this;", "-\tif (this.affectedChildren.length == 0)", "-\t\treturn null;", "-\tint childrenCount = this.affectedChildren.length;", "-\tfor (int i = 0; i < childrenCount; i++) {", "-\t\tJavaElementDelta delta = (JavaElementDelta)this.affectedChildren[i];", "-\t\tif (equalsAndSameParent(delta.getElement(), element)) { // handle case of two jars that can be equals but not in the same project", "-\t\t\treturn delta;", "-\t\t} else {", "-\t\t\tdelta = delta.getDeltaFor(element);", "-\t\t\tif (delta != null)", "-\t\t\t\treturn delta;", "-\t\t}", "-\t}", "-\treturn null;", "+\treturn find(element);"]}], "num": 44537}
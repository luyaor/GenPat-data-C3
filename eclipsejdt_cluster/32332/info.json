{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f07c14a1793bca509b930de64a6af08", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd8898d576d4802ea4692b2580ee9e5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java", "commitBeforeChange": "a8d9477532d4953ddbbeff7907775085b3a4bf13", "commitAfterChange": "c862962851317aa4f8381f94c14dfd8552af8943", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t@Override \tpublic List<? extends VariableElement> getParameters()", "signatureAfterChange": "  \t@Override \tpublic List<? extends VariableElement> getParameters()", "diff": ["-\t\tif (0 == binding.parameters.length) {", "-\t\t\treturn Collections.emptyList();", "+\t\tint length = binding.parameters == null ? 0 : binding.parameters.length;", "+\t\tif (0 != length) {", "+\t\t\tAbstractMethodDeclaration methodDeclaration = binding.sourceMethod();", "+\t\t\tList<VariableElement> params = new ArrayList<VariableElement>(length);", "+\t\t\tif (methodDeclaration != null) {", "+\t\t\t\tfor (Argument argument : methodDeclaration.arguments) {", "+\t\t\t\t\tVariableElement param = new VariableElementImpl(argument.binding);", "+\t\t\t\t\tparams.add(param);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// binary method", "+\t\t\t\tint i = 0;", "+\t\t\t\tfor (TypeBinding typeBinding : binding.parameters) {", "+\t\t\t\t\tStringBuilder builder = new StringBuilder(\"arg\");//$NON-NLS-1$", "+\t\t\t\t\tbuilder.append(i);", "+\t\t\t\t\tVariableElement param = new VariableElementImpl(new LocalVariableBinding(String.valueOf(builder).toCharArray(), typeBinding, 0, true));", "+\t\t\t\t\tparams.add(param);", "+\t\t\t\t\ti++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(params);", "-\t\tList<VariableElement> params = new ArrayList<VariableElement>(binding.parameters.length);", "-\t\tfor (TypeBinding paramBinding : binding.parameters) {", "-\t\t\tVariableElement param = new VariableElementImpl(paramBinding);", "-\t\t\tparams.add(param);", "-\t\t}", "-\t\treturn Collections.unmodifiableList(params);", "+\t\treturn Collections.emptyList();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f065fb12867d62c6d33de58aaaa6f4dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "605463bb98397b59c78b7fc56ee33e7e22fd8367", "commitAfterChange": "7428bd3b18a16b1860e6a1a28fbc6cd63967fdc6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private String expectedFormattedSource(String source)", "signatureAfterChange": "  private String expectedFormattedSource(String source)", "diff": ["-\t\tif (commentKind == CodeFormatter.K_JAVA_DOC) { // Only process javadoc for now", "-\t\t\tformattedComments[i] = runFormatter(codeFormatter, source.substring(commentStart, commentEnd), commentKind, indentationLevel, 0, commentEnd - commentStart, Util.LINE_SEPARATOR);", "+\t\tif (commentKind != CodeFormatter.K_MULTI_LINE_COMMENT) { // Does not process block comment", "+\t\t\tformattedComments[i] = runFormatter(codeFormatter, source.substring(commentStart, commentEnd), commentKind, indentationLevel, 0, commentEnd - commentStart, LINE_SEPARATOR);", "-\t\t\tint commentStart = positions[0] > 0 ? positions [0] : -positions[0];", "-\t\t\tint commentEnd = positions[1] > 0 ? positions [1] : -positions[1];", "+\t\t\tint commentStart = positions [0];", "+\t\t\tint commentEnd = positions [1];", "+\t\t\tif (commentEnd < 0) { // line or block comments have negative end position", "+\t\t\t\tcommentEnd = -commentEnd;", "+\t\t\t\tif (commentStart < 0) { // line comments have negative start position", "+\t\t\t\t\tcommentStart = -commentStart;", "+\t\t\t\t\tString comment = formattedComments[i];", "+\t\t\t\t\tif (comment.trim().length() > 2) { // non empty comment", "+\t\t\t\t\t\tchar ch = source.charAt(commentEnd);", "+\t\t\t\t\t\tif (ch == '\\r' || ch == '\\n') {", "+\t\t\t\t\t\t\tcommentEnd++;", "+\t\t\t\t\t\t\tch = source.charAt(commentEnd);", "+\t\t\t\t\t\t\tif (ch == '\\r' || ch == '\\n') {", "+\t\t\t\t\t\t\t\tcommentEnd++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\treturn oldResult;", "+\treturn oldResult == null ? newSource : oldResult;"]}], "num": 32332}
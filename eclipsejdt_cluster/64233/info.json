{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5eab2a8f5421952fc8b7fe27ca194d5f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cb027243cdf2a9f5d00752aeb19b0d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "commitAfterChange": "eaaf8d51568dee07a03eec3ae337eaee38c80f58", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 203, "signatureBeforeChange": " public void test197()", "signatureAfterChange": " public void test197()", "diff": ["+\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "+\t?\t\"----------\\n\" + ", "+\t\t\"1. WARNING in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\"The method X.foo() does not override the inherited method from OldStuff since it is private to a different package\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\"The method foo() of type X must override a superclass method\\n\" + ", "+\t\t\"----------\\n\"", "+\t:\t\"----------\\n\" + ", "+\t\t\"1. WARNING in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\"The method X.foo() does not override the inherited method from OldStuff since it is private to a different package\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\"The method foo() of type X must override or implement a supertype method\\n\" + ", "+\t\t\"----------\\n\";\t\t", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in p\\\\X.java (at line 4)\\n\" + ", "-\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\"\t     ^^^^^\\n\" + ", "-\t\t\"The method X.foo() does not override the inherited method from OldStuff since it is private to a different package\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in p\\\\X.java (at line 4)\\n\" + ", "-\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\"\t     ^^^^^\\n\" + ", "-\t\t\"The method foo() of type X must override a superclass method\\n\" + ", "-\t\t\"----------\\n\");", "+        expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7201cef427801f4d9c8f4d3ca0612ba7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "commitAfterChange": "eaaf8d51568dee07a03eec3ae337eaee38c80f58", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": " public void test194()", "signatureAfterChange": " public void test194()", "diff": ["+\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "+\t?\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\t@Override\\n\" + ", "+\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\"The annotation @Override is disallowed for this location\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tpublic static void foo() {}\\n\" + ", "+\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\"The method foo() of type X must override a superclass method\\n\" + ", "+\t\t\"----------\\n\"", "+\t:\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\t@Override\\n\" + ", "+\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\"The annotation @Override is disallowed for this location\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tpublic static void foo() {}\\n\" + ", "+\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\"The method foo() of type X must override or implement a supertype method\\n\" + ", "+\t\t\"----------\\n\";\t", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\t@Override\\n\" + ", "-\t\t\"\t^^^^^^^^^\\n\" + ", "-\t\t\"The annotation @Override is disallowed for this location\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tpublic static void foo() {}\\n\" + ", "-\t\t\"\t                   ^^^^^\\n\" + ", "-\t\t\"The method foo() of type X must override a superclass method\\n\" + ", "-\t\t\"----------\\n\");", "+\t\texpectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7525da9cdd81b997622edbc93a7c711a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "commitAfterChange": "eaaf8d51568dee07a03eec3ae337eaee38c80f58", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 210, "signatureBeforeChange": " \tpublic void test074()", "signatureAfterChange": " \tpublic void test074()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"I.java\",", "-\t\t\t\t\"interface I {}\\n\" +", "-\t\t\t\t\"interface J extends I { @Override void clone(); }\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "+\t\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "+\t\t?\t\"----------\\n\" + ", "-\t\t);", "-\t}", "+\t\t:\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in I.java (at line 2)\\n\" + ", "+\t\t\t\"\tinterface J extends I { @Override void clone(); }\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with Object.clone(), thus this interface cannot be implemented\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in I.java (at line 2)\\n\" + ", "+\t\t\t\"\tinterface J extends I { @Override void clone(); }\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^\\n\" + ", "+\t\t\t\"The method clone() of type J must override or implement a supertype method\\n\" + ", "+\t\t\t\"----------\\n\";\t\t", "+\t\t\t\t\"interface I {}\\n\" +", "+\t\t\t\t\"interface J extends I { @Override void clone(); }\"", "+\t\t\texpectedOutput);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97fc1efc847e4be43a0ee06046a60293", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "commitAfterChange": "eaaf8d51568dee07a03eec3ae337eaee38c80f58", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 211, "signatureBeforeChange": " \tpublic void test074a()", "signatureAfterChange": " \tpublic void test074a()", "diff": ["-\t//https://bugs.eclipse.org/bugs/show_bug.cgi?id=100970", "-\tpublic void test074a() {", "-\t\t\t\t\"interface I { @Override void clone(); }\\n\" +", "-\t\t\t\t\"interface J extends I {}\"", "-\t\t\t\"----------\\n\" + ", "+\t//https://bugs.eclipse.org/bugs/show_bug.cgi?id=100970", "+\tpublic void test074a() {", "+\t\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "+\t\t?\t\"----------\\n\" + ", "-\t\t);", "+\t\t:\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in I.java (at line 1)\\n\" + ", "+\t\t\t\"\tinterface I { @Override void clone(); }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with Object.clone(), thus this interface cannot be implemented\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in I.java (at line 1)\\n\" + ", "+\t\t\t\"\tinterface I { @Override void clone(); }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^\\n\" + ", "+\t\t\t\"The method clone() of type I must override or implement a supertype method\\n\" + ", "+\t\t\t\"----------\\n\";\t\t", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"I.java\",", "+\t\t\t\t\"interface I { @Override void clone(); }\\n\" +", "+\t\t\t\t\"interface J extends I {}\"", "+\t\t\t},", "+\t\t\texpectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3f9572f2092a0a5e5678859fb2a20b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "commitAfterChange": "eaaf8d51568dee07a03eec3ae337eaee38c80f58", "methodNumberBeforeChange": 997, "methodNumberAfterChange": 997, "signatureBeforeChange": " public void test0987()", "signatureAfterChange": " public void test0987()", "diff": ["+\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "+\t?\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tabstract class GLinkElementView<M,CM> extends AbstractLinkView<M> {}\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with EditPart.getViewer(), AbstractLinkView<M>.getViewer()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tpublic ISheetViewer getViewer() { return null; }\t\\n\" + ", "+\t\t\"\t                    ^^^^^^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with EditPart.getViewer()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tpublic ISheetViewer getViewer() { return null; }\t\\n\" + ", "+\t\t\"\t                    ^^^^^^^^^^^\\n\" + ", "+\t\t\"The method getViewer() of type AbstractLinkView<M> must override a superclass method\\n\" + ", "+\t\t\"----------\\n\"", "+\t:\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tabstract class GLinkElementView<M,CM> extends AbstractLinkView<M> {}\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with EditPart.getViewer(), AbstractLinkView<M>.getViewer()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tpublic ISheetViewer getViewer() { return null; }\t\\n\" + ", "+\t\t\"\t                    ^^^^^^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with EditPart.getViewer()\\n\" + ", "+\t\t\"----------\\n\";\t", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tabstract class GLinkElementView<M,CM> extends AbstractLinkView<M> {}\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The return type is incompatible with EditPart.getViewer(), AbstractLinkView<M>.getViewer()\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tpublic ISheetViewer getViewer() { return null; }\t\\n\" + ", "-\t\t\t\"\t                    ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The return type is incompatible with EditPart.getViewer()\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tpublic ISheetViewer getViewer() { return null; }\t\\n\" + ", "-\t\t\t\"\t                    ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method getViewer() of type AbstractLinkView<M> must override a superclass method\\n\" + ", "-\t\t\t\"----------\\n\");", "+\t\t\texpectedOutput);"]}], "num": 64233}
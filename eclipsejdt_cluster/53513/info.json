{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c102751dd43de38b634e08c8d24ecc11", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22a3b7f45d9a7f95133480353fe2c2a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "9c377922fe401713f5937bb475dd1fc1bedb4d8f", "commitAfterChange": "6a9a7eb1601e3179b18eecef90d5d4fdfbc52bfa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment)", "diff": ["+", "+\t\t// Build some common strings for status message", "+\t\tString projectName = project.getElementName();", "+\t\tboolean pathStartsWithProject = path.segment(0).toString().equals(projectName);", "+\t\tString entryPathMsg = pathStartsWithProject ? path.removeFirstSegments(1).toString() : path.makeRelative().toString();", "+", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalContainerPath\", path.makeRelative().toString()));\t\t\t\t\t //$NON-NLS-1$", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalContainerPath\", entryPathMsg, projectName));\t\t\t\t\t //$NON-NLS-1$", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalVariablePath\", path.makeRelative().toString()));\t\t\t\t\t //$NON-NLS-1$", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalVariablePath\", path.makeRelative().toString(), projectName));\t\t\t\t\t //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", sourceAttachment.makeRelative().toString(), path.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.makeRelative().toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", sourceAttachment.makeRelative().toString(), path.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.makeRelative().toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", sourceAttachment.toString(), path.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundLibrary\", path.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundLibrary\", path.makeRelative().toString(), projectName)); //$NON-NLS-1$", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalLibraryPath\", path.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalLibraryPath\", path.makeRelative().toString(), projectName)); //$NON-NLS-1$", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundProject\", path.makeRelative().segment(0).toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundProject\", path.makeRelative().segment(0).toString(), projectName)); //$NON-NLS-1$", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundProject\", path.segment(0).toString())); //$NON-NLS-1$", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundProject\", path.segment(0).toString(), projectName)); //$NON-NLS-1$", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalProjectPath\", path.segment(0).toString())); //$NON-NLS-1$", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalProjectPath\", path.segment(0).toString(), projectName)); //$NON-NLS-1$", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_EXCLUSION_PATTERNS, path);", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_EXCLUSION_PATTERNS, project, path);", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS, path);", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS, project, path);", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceFolder\", path.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceFolder\", entryPathMsg, projectName)); //$NON-NLS-1$", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalSourceFolderPath\", path.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalSourceFolderPath\", entryPathMsg, projectName)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325395620ea9b652e7de8c64a6ac0a47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "5d1db8479f658cfd5be11e3b7dee9299a0dc49cf", "commitAfterChange": "1cf93827c05a1d976af76bfeaae5b0af603714e4", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment)", "diff": ["-\t\t", "-\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\t\t\t", "-\t\tIPath path = entry.getPath();", "-", "-\t\t// Build some common strings for status message", "-\t\tString projectName = project.getElementName();", "-\t\tboolean pathStartsWithProject = path.segment(0).toString().equals(projectName);", "-\t\tString entryPathMsg = pathStartsWithProject ? path.removeFirstSegments(1).toString() : path.makeRelative().toString();", "-", "-\t\tswitch(entry.getEntryKind()){", "-\t", "-\t\t\t// container entry check", "-\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "-\t\t\t\tif (path != null && path.segmentCount() >= 1){", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(path, project);", "-\t\t\t\t\t\t// container retrieval is performing validation check on container entry kinds.", "-\t\t\t\t\t\tif (container == null){", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND, project, path);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();", "-\t\t\t\t\t\tif (containerEntries != null){", "-\t\t\t\t\t\t\tfor (int i = 0, length = containerEntries.length; i < length; i++){", "-\t\t\t\t\t\t\t\tIClasspathEntry containerEntry = containerEntries[i];", "-\t\t\t\t\t\t\t\tint kind = containerEntry == null ? 0 : containerEntry.getEntryKind();", "-\t\t\t\t\t\t\t\tif (containerEntry == null", "-\t\t\t\t\t\t\t\t\t|| kind == IClasspathEntry.CPE_SOURCE", "-\t\t\t\t\t\t\t\t\t|| kind == IClasspathEntry.CPE_VARIABLE", "-\t\t\t\t\t\t\t\t\t|| kind == IClasspathEntry.CPE_CONTAINER){", "-\t\t\t\t\t\t\t\t\t\tString description = container.getDescription();", "-\t\t\t\t\t\t\t\t\t\tif (description == null) description = path.makeRelative().toString();", "-\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY, project, path);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tIJavaModelStatus containerEntryStatus = validateClasspathEntry(project, containerEntry, checkSourceAttachment);", "-\t\t\t\t\t\t\t\tif (!containerEntryStatus.isOK()){", "-\t\t\t\t\t\t\t\t\treturn containerEntryStatus;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch(JavaModelException e){", "-\t\t\t\t\t\treturn new JavaModelStatus(e);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalContainerPath\", entryPathMsg, projectName));\t\t\t\t\t //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\t// variable entry check", "-\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "-\t\t\t\tif (path != null && path.segmentCount() >= 1){", "-\t\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);", "-\t\t\t\t\tif (entry == null){", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND, project, path);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn validateClasspathEntry(project, entry, checkSourceAttachment);", "-\t\t\t\t} else {", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalVariablePath\", path.makeRelative().toString(), projectName));\t\t\t\t\t //$NON-NLS-1$", "-\t\t\t\t}", "-", "-\t\t\t// library entry check", "-\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "-\t\t\t\tif (path != null && path.isAbsolute() && !path.isEmpty()) {", "-\t\t\t\t\tIPath sourceAttachment = entry.getSourceAttachmentPath();", "-\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, true);", "-\t\t\t\t\tif (target != null && project.getOption(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL, true) != JavaCore.IGNORE) {", "-\t\t\t\t\t\tlong projectTargetJDK = CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, true));", "-\t\t\t\t\t\tlong libraryJDK = Util.getJdkLevel(target);", "-\t\t\t\t\t\tif (libraryJDK != 0 && libraryJDK > projectTargetJDK) {", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INCOMPATIBLE_JDK_LEVEL, project, path, CompilerOptions.versionFromJdkLevel(libraryJDK)); ", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (target instanceof IResource){", "-\t\t\t\t\t\tIResource resolvedResource = (IResource) target;", "-\t\t\t\t\t\tswitch(resolvedResource.getType()){", "-\t\t\t\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\t\t\t\tif (Util.isArchiveFileName(resolvedResource.getFileExtension())) {", "-\t\t\t\t\t\t\t\t\tif (checkSourceAttachment ", "-\t\t\t\t\t\t\t\t\t\t&& sourceAttachment != null", "-\t\t\t\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "-\t\t\t\t\t\t\t\t\t\t&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){", "-\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.makeRelative().toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase IResource.FOLDER :\t// internal binary folder", "-\t\t\t\t\t\t\t\tif (checkSourceAttachment ", "-\t\t\t\t\t\t\t\t\t&& sourceAttachment != null ", "-\t\t\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "-\t\t\t\t\t\t\t\t\t&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){", "-\t\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.makeRelative().toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if (target instanceof File){", "-\t\t\t\t\t\tif (checkSourceAttachment ", "-\t\t\t\t\t\t\t&& sourceAttachment != null ", "-\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "-\t\t\t\t\t\t\t&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){", "-\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundLibrary\", path.makeRelative().toString(), projectName)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalLibraryPath\", path.makeRelative().toString(), projectName)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-", "-\t\t\t// project entry check", "-\t\t\tcase IClasspathEntry.CPE_PROJECT :", "-\t\t\t\tif (path != null && path.isAbsolute() && !path.isEmpty()) {", "-\t\t\t\t\tIProject prereqProjectRsc = workspaceRoot.getProject(path.segment(0));", "-\t\t\t\t\tIJavaProject prereqProject = JavaCore.create(prereqProjectRsc);", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tif (!prereqProjectRsc.exists() || !prereqProjectRsc.hasNature(JavaCore.NATURE_ID)){", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundProject\", path.makeRelative().segment(0).toString(), projectName)); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!prereqProjectRsc.isOpen()){", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.closedProject\", path.segment(0).toString())); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t//TODO: (philippe) may extend to also check prereq project exported items as well ", "-\t\t\t\t\t\tif (project.getOption(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL, true) != JavaCore.IGNORE) {", "-\t\t\t\t\t\t\tlong projectTargetJDK = CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, true));", "-\t\t\t\t\t\t\tlong prereqProjectTargetJDK = CompilerOptions.versionToJdkLevel(prereqProject.getOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, true));", "-\t\t\t\t\t\t\tif (prereqProjectTargetJDK > projectTargetJDK) {", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INCOMPATIBLE_JDK_LEVEL, project, path, CompilerOptions.versionFromJdkLevel(prereqProjectTargetJDK)); ", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (CoreException e){", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundProject\", path.segment(0).toString(), projectName)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalProjectPath\", path.segment(0).toString(), projectName)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-", "-\t\t\t// project source folder", "-\t\t\tcase IClasspathEntry.CPE_SOURCE :", "-\t\t\t\tif (entry.getExclusionPatterns() != null ", "-\t\t\t\t\t\t&& entry.getExclusionPatterns().length > 0", "-\t\t\t\t\t\t&& JavaCore.DISABLED.equals(project.getOption(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, true))) {", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_EXCLUSION_PATTERNS, project, path);", "-\t\t\t\t}", "-\t\t\t\tif (entry.getOutputLocation() != null && JavaCore.DISABLED.equals(project.getOption(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, true))) {", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS, project, path);", "-\t\t\t\t}", "-\t\t\t\tif (path != null && path.isAbsolute() && !path.isEmpty()) {", "-\t\t\t\t\tIPath projectPath= project.getProject().getFullPath();", "-\t\t\t\t\tif (!projectPath.isPrefixOf(path) || JavaModel.getTarget(workspaceRoot, path, true) == null){", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceFolder\", entryPathMsg, projectName)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalSourceFolderPath\", entryPathMsg, projectName)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t}", "-\t\treturn JavaModelStatus.VERIFIED_OK;\t\t", "+\t\treturn ClasspathEntry.validateClasspathEntry(project, entry, checkSourceAttachment, true/*recurse in container*/);"]}], "num": 53513}
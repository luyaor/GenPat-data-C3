{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f41ec84d48a8a563a3487e59d5c6b20d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05216c24be534ff3232798d318ee88d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java", "commitBeforeChange": "80b216af2abfbc335ce04bf55fc463ba47e45873", "commitAfterChange": "8eb843ef75292ca86ade9a64a79ec382d0e5f4fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic Collection<Modifier> getModifiers()", "signatureAfterChange": "            public TypeMirror getType()", "diff": ["-\t", "-\tpublic Collection<Modifier> getModifiers()", "-\t{", "-\t\tfinal SingleVariableDeclaration paramDecl = getAstNode();", "-\t\tif( paramDecl == null ) return Collections.emptyList();", "-\t\tfinal List<IExtendedModifier> extMods = paramDecl.modifiers();", "-        if( extMods == null || extMods.isEmpty() ) return Collections.emptyList();      ", "-        for( IExtendedModifier extMod : extMods ){", "-            if( extMod.isModifier() ){\t\t\t\t", "-\t\t\t\tfinal org.eclipse.jdt.core.dom.Modifier mod = ", "-\t\t\t\t\t(org.eclipse.jdt.core.dom.Modifier)extMod;", "-\t\t\t\tif( org.eclipse.jdt.core.dom.Modifier.isFinal(mod.getFlags()) )", "-\t\t\t\t\treturn Collections.singletonList(Modifier.FINAL);                ", "-            }", "-        }", "-\t\treturn Collections.emptyList();", "-\t}", "+    ", "+    public TypeMirror getType()", "+    {", "+    \tfinal SingleVariableDeclaration astNode = getAstNode();", "+    \tfinal Type  type = astNode.getType();", "+    \tif( type == null )", "+    \t\treturn Factory.createErrorClassType(EMPTY_STRING);", "+    \tfinal IVariableBinding varBinding = astNode.resolveBinding();", "+    \tif( varBinding == null ){", "+    \t\tString typeName = type.toString();", "+\t\t\t if( astNode.isVarargs() )", "+\t\t\t\t return Factory.createErrorArrayType(typeName, 1);", "+\t\t\t else", "+\t\t\t\t return Factory.createErrorClassType(typeName);", "+    \t}", "+    \telse{", "+    \t\t final ITypeBinding typeBinding = varBinding.getType();", "+    \t\t if( typeBinding == null ){", "+    \t\t\t String typeName = type.toString();", "+    \t\t\t if( astNode.isVarargs() )", "+    \t\t\t\t return Factory.createErrorArrayType(typeName, 1);", "+    \t\t\t else", "+    \t\t\t\t return Factory.createErrorClassType(typeName);", "+             }", "+    \t\t else{", "+\t        \tfinal TypeMirror mirrorType = Factory.createTypeMirror(typeBinding, _env);", "+\t            if(mirrorType == null )", "+\t                return Factory.createErrorClassType(type.toString());", "+\t            return mirrorType;", "+    \t     }", "+    \t}", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4effe03cf908de7acd0f3fbf56c52fae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "671178f1f1111f921cebcc377164efed75b9cfcb", "commitAfterChange": "635d7e113ce40e25df072667fd17a7c3dd9b4152", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "signatureAfterChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "diff": ["-\t\t\t\t\tmemberRef.setQualifier(convert((org.eclipse.jdt.internal.compiler.ast.TypeReference) fieldRef.receiver));", "+\t\t\t\t\trecordName(memberRef.getQualifier(), fieldRef.receiver);", "+\t\t\t\tName name = methodRef.getName();", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(node.getStartPosition());", "+\t\t\t\tint start = name.getStartPosition();", "+\t\t\t\t// get compiler node and record nodes", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(start);", "-\t\t\t\t\trecordNodes(methodRef.getName(), compilerNode);", "+\t\t\t\t\trecordNodes(name, compilerNode);", "-\t\t\t\t\t\tmethodRef.setQualifier(convert(typeRef));", "+\t\t\t\t\t\trecordName(methodRef.getQualifier(), typeRef);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// Resolve parameters", "+\t\t\t\tIterator parameters = methodRef.parameters().listIterator();", "+\t\t\t\twhile (parameters.hasNext()) {", "+\t\t\t\t\tMethodRefParameter param = (MethodRefParameter) parameters.next();", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = (org.eclipse.jdt.internal.compiler.ast.Expression) javadoc.getNodeStartingAt(param.getStartPosition());", "+\t\t\t\t\tif (expression != null) {", "+\t\t\t\t\t\trecordNodes(param, expression);", "+\t\t\t\t\t\tif (expression instanceof JavadocArgumentExpression) {", "+\t\t\t\t\t\t\tJavadocArgumentExpression argExpr = (JavadocArgumentExpression) expression;", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = argExpr.argument.type;", "+\t\t\t\t\t\t\trecordNodes(param.getType(), typeRef);", "+\t\t\t\t\t\t\tif (param.getType().isSimpleType()) {", "+\t\t\t\t\t\t\t\tSimpleType type = (SimpleType)param.getType();", "+\t\t\t\t\t\t\t\trecordName(type.getName(), typeRef);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\tif (compilerNode != null) {", "-\t\t\t\t\tif (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "-//\t\t\t\t\t\tconvert((org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode);", "-\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode;", "-\t\t\t\t\t\tName name = (Name) node;", "-\t\t\t\t\t\tif (name.isQualifiedName()) {", "-\t\t\t\t\t\t\tSimpleName simpleName = null;", "-\t\t\t\t\t\t\twhile (name.isQualifiedName()) {", "-\t\t\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "-\t\t\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "-\t\t\t\t\t\t\t\tname = ((QualifiedName) name).getQualifier();", "-\t\t\t\t\t\t\t\trecordNodes(name, typeRef);", "-\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "-//\t\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\trecordNodes(node, compilerNode);", "-\t\t\t\t}", "+\t\t\t\trecordName((Name) node, compilerNode);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 67232}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "421185636111d7d8a2bb9fc77092609c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c390e90e6f5891555f2f4a1fca19b26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "df58102577aeec0f20c498bd98bb398edac7a1ec", "commitAfterChange": "9b825b2b97fc1913934f4045fd19eacdb55241ff", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\tif (this.has1_5Compliance && ((CompilationUnitElementInfo) ((JavaElement) this.cu).getElementInfo()).annotationNumber > 10) { // experimental value", "+\t\tif (this.has1_5Compliance && ", "+\t\t\t\t((CompilationUnitElementInfo) ((JavaElement) this.cu).getElementInfo()).annotationNumber >= CompilationUnitElementInfo.ANNOTATION_THRESHOLD_FOR_DIET_PARSE) {", "-\t\t\t// the client wants local and anonymous types to be converted (https://bugs.eclipse.org/bugs/show_bug.cgi?id=254738) ", "+\t\t\t// the client wants local and anonymous types to be converted (https://bugs.eclipse.org/bugs/show_bug.cgi?id=254738)", "+\t\t\t// Also see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=405843", "+\t\t\t} else {", "+\t\t\t\treturn new Parser(this.problemReporter, true).parse(this.cu, compilationResult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5f112f22b7c1015627838cbb057cd8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "1b07739f9c8457dbcb0b9d2fe79d964b9c57b61f", "commitAfterChange": "b04265304d1dc524aca72cb541df0fdc355d218a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\tint typeCount = sourceTypes.length;", "-\t\tfinal TypeDeclaration[] types = new TypeDeclaration[typeCount];", "-\t\t/*", "-\t\t * We used a temporary types collection to prevent this.unit.types from being null during a call to", "-\t\t * convert(...) when the source is syntactically incorrect and the parser is flushing the unit's types.", "-\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=97466", "-\t\t */", "-\t\tfor (int i = 0; i < typeCount; i++) {", "-\t\t\tSourceTypeElementInfo typeInfo = (SourceTypeElementInfo) sourceTypes[i];", "-\t\t\ttypes[i] = convert((SourceType) typeInfo.getHandle(), compilationResult);", "+\t\ttry {", "+\t\t\tint typeCount = sourceTypes.length;", "+\t\t\tfinal TypeDeclaration[] types = new TypeDeclaration[typeCount];", "+\t\t\t/*", "+\t\t\t * We used a temporary types collection to prevent this.unit.types from being null during a call to", "+\t\t\t * convert(...) when the source is syntactically incorrect and the parser is flushing the unit's types.", "+\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=97466", "+\t\t\t */", "+\t\t\tfor (int i = 0; i < typeCount; i++) {", "+\t\t\t\tSourceTypeElementInfo typeInfo = (SourceTypeElementInfo) sourceTypes[i];", "+\t\t\t\ttypes[i] = convert((SourceType) typeInfo.getHandle(), compilationResult);", "+\t\t\t}", "+\t\t\tthis.unit.types = types;", "+\t\t\treturn this.unit;", "+\t\t} catch (AnonymousMemberFound e) {", "+\t\t\treturn new Parser(this.problemReporter, true).parse(this.cu, compilationResult);", "-\t\tthis.unit.types = types;", "-\t\treturn this.unit;"]}], "num": 41201}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "045ed6198729da45ded3a67703101ccf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32d3b9d819412afd908bfaf3c86f3753", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a2a25daab3f792071cba7e3d51c3d2abf00c6c2a", "commitAfterChange": "8bffc680730baeb75a0764c02d5d9479eee4502e", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q)", "signatureAfterChange": "  \tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q)", "diff": ["+", "+\tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q) {", "+\t\tif (p != null) {", "+\t\t\tfor (int i = 0; i < p.length; i++) {", "+\t\t\t\ttry {", "+\t\t\t\t\tif (!this.reduceAndIncorporate(new ConstraintTypeFormula(p[i], q[i], ReductionResult.SAME)))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t} catch (InferenceFailureException e) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-", "-\tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q) {", "-\t\tfor (int i = 0; i < p.length; i++) {", "-\t\t\ttry {", "-\t\t\t\tif (!this.reduceAndIncorporate(new ConstraintTypeFormula(p[i], q[i], ReductionResult.SAME)))", "-\t\t\t\t\treturn false;", "-\t\t\t} catch (InferenceFailureException e) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76cb48d4754d8cd68a1db8dc5661eec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/AptPlugin.java", "commitBeforeChange": "74cd39cf6e739108d05e5fe68e013caacb550927", "commitAfterChange": "8d179b274180ed6b0408715a3052c776545ec578", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static void log(Throwable e, String message)", "signatureAfterChange": " \tpublic static void log(Throwable e, String message)", "diff": ["-\t\te.printStackTrace();", "+\t\tif (e != null) {", "+\t\t\te.printStackTrace();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5c8d7e880a612714f497824be1d134d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AbstractIndexer.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void addMethodDeclaration(char[] methodName, char[][] parameterTypes, char[] returnType, char[][] exceptionTypes)", "signatureAfterChange": " \tpublic void addMethodDeclaration(char[] methodName, char[][] parameterTypes, char[] returnType, char[][] exceptionTypes)", "diff": ["-\t\tfor (int i = 0; i < argCount; i++)", "-\t\t\taddTypeReference(parameterTypes[i]);", "+\t\tif (parameterTypes != null) {", "+\t\t\tfor (int i = 0; i < argCount; i++)", "+\t\t\t\taddTypeReference(parameterTypes[i]);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb00afde49646140571ca3910d223618", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AbstractIndexer.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void addConstructorDeclaration(char[] typeName, char[][] parameterTypes, char[][] exceptionTypes)", "signatureAfterChange": " \tpublic void addConstructorDeclaration(char[] typeName, char[][] parameterTypes, char[][] exceptionTypes)", "diff": ["-\t\tfor (int i = 0; i < argCount; i++)", "-\t\t\taddTypeReference(parameterTypes[i]);", "+\t\tif (parameterTypes != null) {", "+\t\t\tfor (int i = 0; i < argCount; i++)", "+\t\t\t\taddTypeReference(parameterTypes[i]);", "+\t\t}"]}], "num": 14614}
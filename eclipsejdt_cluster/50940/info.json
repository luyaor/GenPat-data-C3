{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2508c5ff5adef8d00c661ca255019936", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2037cfeb32ada5604283176305383201", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "a02dc2635b15c289c546ca96a49f66d7180ade17", "commitAfterChange": "efe1773a267b3bdb803164d9b413b69c3685878f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (isDiamond && !diamondNeedsDeferring) {", "+\tResolutionState state = new ResolutionState(scope, isDiamond, diamondNeedsDeferring, argsContainCast, polyExpressionSeen, argumentTypes);", "+\tif (diamondNeedsDeferring) {", "+\t\tthis.suspendedResolutionState = state; // resolving to be continued later (via binding(TypeBinding targetType)).", "+\t\treturn new PolyTypeBinding(this);", "+\t}", "+", "+\tif (!resolvePart2(state))", "+\t\treturn null;", "+\treturn resolvePart3(state);", "+}", "-\t\tTypeBinding [] inferredTypes = inferElidedTypes(genericType, genericType.enclosingType(), argumentTypes, scope);", "-\t\t\tscope.problemReporter().cannotInferElidedTypes(this);", "-\t\t\treturn this.resolvedType = null;", "-\t\tthis.resolvedType = this.type.resolvedType = scope.environment().createParameterizedType(genericType, inferredTypes, ((ParameterizedTypeBinding) this.resolvedType).enclosingType());", "-\tif (diamondNeedsDeferring) {", "-\t\t// in this preliminary mode use the raw receiver type for constructor lookup, to avoid spurious type errors", "-\t\treceiverType = (ReferenceBinding) receiverType.original();", "-\t\treceiverType = scope.environment().createRawType(receiverType, receiverType.enclosingType());", "-\t}", "-\t", "-\tthis.binding = findConstructorBinding(scope, this, receiverType, argumentTypes, polyExpressionSeen);", "-\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\tscope.problemReporter().missingTypeInConstructor(this, this.binding);", "-\tif (isMethodUseDeprecated(this.binding, scope, true))", "-\t\tscope.problemReporter().deprecatedMethod(this.binding, this);", "-\tif (!diamondNeedsDeferring) { // don't check diamonds before we have the target type", "-\t\tif (checkInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this)) {", "-\t\t\tthis.bits |= ASTNode.Unchecked;", "-\t\t}", "-\t\tscope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(this.binding, this.genericTypeArguments, this.typeArguments);", "-\tif (!isDiamond && this.resolvedType.isParameterizedTypeWithActualArguments()) {", "- \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), argumentTypes, scope);", "-\t\tnew ImplicitNullAnnotationVerifier(scope.environment(), compilerOptions.inheritNullAnnotations)", "-\t\t\t\t.checkImplicitNullAnnotations(this.binding, null/*srcMethod*/, false, scope);", "-\tif (diamondNeedsDeferring)", "-\t\treturn new PolyTypeBinding(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b07ac1e8382f5e3ecdbc43f54e82569", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "d8a456bd9b26260c97b05c5b9053ba80ab69b578", "commitAfterChange": "a460dab1d90a50493c5778c6266a2505ebe8bca6", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "signatureAfterChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "diff": ["-\t\t\tIPath projectPath = getProject().getFullPath();", "-\t\t\t\t\tElement cpeElement = (Element) node;", "-\t", "-\t\t\t\t\tString cpeElementKind = cpeElement.getAttribute(\"kind\"); //$NON-NLS-1$", "-\t\t\t\t\tString pathStr = cpeElement.getAttribute(\"path\"); //$NON-NLS-1$", "-\t\t\t\t\t// ensure path is absolute", "-\t\t\t\t\tIPath path = new Path(pathStr);", "-\t\t\t\t\tint kind = kindFromString(cpeElementKind);", "-\t\t\t\t\tif (kind != IClasspathEntry.CPE_VARIABLE && kind != IClasspathEntry.CPE_CONTAINER && !path.isAbsolute()) {", "-\t\t\t\t\t\tpath = projectPath.append(path);", "-\t\t\t\t\t}", "-\t\t\t\t\t// source attachment info (optional)", "-\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\t//$NON-NLS-1$", "-\t\t\t\t\tIPath sourceAttachmentPath =", "-\t\t\t\t\t\tsourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$", "-\t\t\t\t\tString sourceAttachmentRootPathStr = cpeElement.getAttribute(\"rootpath\"); //$NON-NLS-1$", "-\t\t\t\t\tIPath sourceAttachmentRootPath =", "-\t\t\t\t\t\tsourceAttachmentRootPathStr.equals(\"\") //$NON-NLS-1$", "-\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t: new Path(sourceAttachmentRootPathStr);", "-\t\t\t\t\t", "-\t\t\t\t\t// exported flag (optional)", "-\t\t\t\t\tboolean isExported = cpeElement.getAttribute(\"exported\").equals(\"true\"); //$NON-NLS-1$ //$NON-NLS-2$", "-", "-\t\t\t\t\t// exclusion patterns (optional)", "-\t\t\t\t\tString exclusion = cpeElement.getAttribute(\"excluding\"); //$NON-NLS-1$ ", "-\t\t\t\t\tIPath[] exclusionPatterns = ClasspathEntry.NO_EXCLUSION_PATTERNS;", "-\t\t\t\t\tif (!exclusion.equals(\"\")) { //$NON-NLS-1$ ", "-\t\t\t\t\t\tchar[][] patterns = CharOperation.splitOn('|', exclusion.toCharArray());", "-\t\t\t\t\t\tint patternCount;", "-\t\t\t\t\t\tif ((patternCount  = patterns.length) > 0) {", "-\t\t\t\t\t\t\texclusionPatterns = new IPath[patternCount];", "-\t\t\t\t\t\t\tfor (int j = 0; j < patterns.length; j++){", "-\t\t\t\t\t\t\t\texclusionPatterns[j] = new Path(new String(patterns[j]));", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// recreate the CP entry", "-\t\t\t\t\tswitch (kind) {", "-\t\t\t", "-\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :", "-\t\t\t\t\t\t\tpaths.add(JavaCore.newProjectEntry(path, isExported));", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "-\t\t\t\t\t\t\tpaths.add(JavaCore.newLibraryEntry(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :", "-\t\t\t\t\t\t\t// must be an entry in this project or specify another project", "-\t\t\t\t\t\t\tString projSegment = path.segment(0);", "-\t\t\t\t\t\t\tif (projSegment != null && projSegment.equals(getElementName())) {", "-\t\t\t\t\t\t\t\t// this project", "-\t\t\t\t\t\t\t\tpaths.add(JavaCore.newSourceEntry(path, exclusionPatterns));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// another project", "-\t\t\t\t\t\t\t\tpaths.add(JavaCore.newProjectEntry(path, isExported));", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t", "-\t\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "-\t\t\t\t\t\t\tpaths.add(JavaCore.newVariableEntry(", "-\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "-\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath, ", "-\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "-\t\t\t\t\t\t\tpaths.add(JavaCore.newContainerEntry(", "-\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\tbreak;", "-", "-\t\t\t\t\t\tcase ClasspathEntry.K_OUTPUT :", "-\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "-\t\t\t\t\t\t\tpaths.add(new ClasspathEntry(", "-\t\t\t\t\t\t\t\t\tClasspathEntry.K_OUTPUT,", "-\t\t\t\t\t\t\t\t\tIClasspathEntry.CPE_LIBRARY,", "-\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\tClasspathEntry.NO_EXCLUSION_PATTERNS, ", "-\t\t\t\t\t\t\t\t\tnull, // source attachment", "-\t\t\t\t\t\t\t\t\tnull, // source attachment root", "-\t\t\t\t\t\t\t\t\tfalse));", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tthrow new Assert.AssertionFailedException(Util.bind(\"classpath.unknownKind\", cpeElementKind)); //$NON-NLS-1$", "-\t\t\t\t\t}", "+\t\t\t\t\tIClasspathEntry entry = ClasspathEntry.elementDecode((Element)node, this);", "+\t\t\t\t\tif (entry != null) paths.add(entry);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5413e01192a7aaa317b6cd929f7c5ab0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "0a4e091036fc111fccab2545e3cb076fb9fe9ddc", "commitAfterChange": "2812d86d568ba2c20ada48601e951ea64c90a8dd", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\tCompilationUnitDeclaration unit = null;", "-\t\tProcessTaskManager processingTask = null;", "+\t\t\tprocessCompiledUnits(0);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\tthis.handleInternalException(e, null);", "+\t\t}", "+\t\tif (this.options.verbose) {", "+\t\t\tif (this.totalUnits > 1) {", "+\t\t\t\tthis.out.println(", "+\t\t\t\t\tMessages.bind(Messages.compilation_units, String.valueOf(this.totalUnits)));", "+\t\t\t} else {", "+\t\t\t\tthis.out.println(", "+\t\t\t\t\tMessages.bind(Messages.compilation_unit, String.valueOf(this.totalUnits)));", "+\t\t\t}", "+\t\t}", "+\t}", "-\t\t\t\tfor (int i = 0; i < this.totalUnits; i++) {", "-\t\t\t\t\tthis.unitsToProcess[i] = null; // release reference to processed unit declaration", "-\t\t\t\tprocessingTask = new ProcessTaskManager(this);", "-\t\tif (this.options.verbose) {", "-\t\t\tif (this.totalUnits > 1) {", "-\t\t\t\tthis.out.println(", "-\t\t\t\t\tMessages.bind(Messages.compilation_units, String.valueOf(this.totalUnits)));", "-\t\t\t} else {", "-\t\t\t\tthis.out.println(", "-\t\t\t\t\tMessages.bind(Messages.compilation_unit, String.valueOf(this.totalUnits)));", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61efe28b40cf8a1805a397e6192c9ec0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "a59c911bb67a4a0588e810060c73cd3ec2f53032", "commitAfterChange": "f9b051d5e41bd27efd803711c20da8dcd750758f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["-\t\t}", "-\t\tfinal Object convertOldToNewOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_CONVERT_OLD_TO_NEW);", "-\t\tif (convertOldToNewOption != null) {", "-\t\t\tthis.convert_old_to_new = DefaultCodeFormatterConstants.TRUE.equals(convertOldToNewOption);", "-\t\t// TODO Remove before 3.0", "-\t\tif (this.convert_old_to_new) {", "-\t\t\tfinal Object clearBlankLines = settings.get(JavaCore.FORMATTER_CLEAR_BLANK_LINES);", "-\t\t\tif (clearBlankLines != null) {", "-\t\t\t\tif (JavaCore.CLEAR_ALL.equals(clearBlankLines)) {", "-\t\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "-\t\t\t\t} else if (JavaCore.PRESERVE_ONE.equals(clearBlankLines)) {", "-\t\t\t\t\tthis.number_of_empty_lines_to_preserve = 1;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.number_of_empty_lines_to_preserve = Integer.MAX_VALUE;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tfinal Object compactAssignment = settings.get(JavaCore.FORMATTER_COMPACT_ASSIGNMENT);", "-\t\t\tif (compactAssignment != null) {", "-\t\t\t\tthis.insert_space_before_assignment_operators = JavaCore.NORMAL.equals(compactAssignment);", "-\t\t\t}", "-\t\t\tfinal Object newLineOpenBrace = settings.get(JavaCore.FORMATTER_NEWLINE_OPENING_BRACE);", "-\t\t\tif(newLineOpenBrace != null){", "-\t\t\t\tif (JavaCore.INSERT.equals(newLineOpenBrace)) {", "-\t\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tfinal Object newLineControl = settings.get(JavaCore.FORMATTER_NEWLINE_CONTROL);", "-\t\t\tif (newLineControl != null) {", "-\t\t\t\tthis.insert_new_line_in_control_statements = JavaCore.INSERT.equals(newLineControl);", "-\t\t\t}", "-\t\t\tfinal Object newLineElseIf  = settings.get(JavaCore.FORMATTER_NEWLINE_ELSE_IF);", "-\t\t\tif (newLineElseIf != null) {", "-\t\t\t\tthis.compact_else_if = JavaCore.DO_NOT_INSERT.equals(newLineElseIf);", "-\t\t\t}", "-\t\t\tfinal Object newLineEmptyBlock  = settings.get(JavaCore.FORMATTER_NEWLINE_EMPTY_BLOCK);", "-\t\t\tif (newLineEmptyBlock != null) {", "-\t\t\t\tif (JavaCore.INSERT.equals(newLineEmptyBlock)) {", "-\t\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = true;", "-\t\t\t\t\tthis.insert_new_line_in_empty_type_declaration = true;", "-\t\t\t\t\tthis.insert_new_line_in_empty_method_body = true;", "-\t\t\t\t\tthis.insert_new_line_in_empty_block = true;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = false;", "-\t\t\t\t\tthis.insert_new_line_in_empty_type_declaration = false;", "-\t\t\t\t\tthis.insert_new_line_in_empty_method_body = false;", "-\t\t\t\t\tthis.insert_new_line_in_empty_block = false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tfinal Object castExpression = settings.get(JavaCore.FORMATTER_SPACE_CASTEXPRESSION);", "-\t\t\tif (castExpression != null) {", "-\t\t\t\tthis.insert_space_after_closing_paren_in_cast = JavaCore.INSERT.equals(castExpression);", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80b2003315bcf7ddadb2674d16679885", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "c9f8678d902ff26bed49cb8c584175946154d27d", "commitAfterChange": "d1ebbec671e9a9d01699a83b7f5d2a928487175e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public static void compile(String commandLine, PrintWriter writer)", "signatureAfterChange": "\r public static void compile(String commandLine, PrintWriter writer)", "diff": ["-\tint count = 0;\r", "-\tString[] argv = new String[10];\r", "-\tint startIndex = 0;\r", "-\tint lastIndex = commandLine.indexOf('\"');\r", "-\tboolean insideQuotes = false;\r", "-\tboolean insideClasspath = false;\r", "-\tStringTokenizer tokenizer;\r", "-\twhile (lastIndex != -1) {\r", "-\t\tif (insideQuotes) {\r", "-\t\t\tif (count == argv.length) {\r", "-\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t}\r", "-\t\t\tif (insideClasspath) {\r", "-\t\t\t\targv[count-1] += commandLine.substring(startIndex, lastIndex);\r", "-\t\t\t\tinsideClasspath = false;\r", "-\t\t\t} else {\r", "-\t\t\t\targv[count++] = commandLine.substring(startIndex, lastIndex);\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tString subCommandLine = commandLine.substring(startIndex, lastIndex);\r", "-\t\t\tif (subCommandLine.equals(File.pathSeparator)) {\r", "-\t\t\t\targv[count-1] += File.pathSeparator;\r", "-\t\t\t\tinsideClasspath = true;\r", "-\t\t\t} else {\r", "-\t\t\t\ttokenizer = new StringTokenizer(subCommandLine, File.pathSeparator + \" \"); //$NON-NLS-1$\r", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\t\tif (count == argv.length) {\r", "-\t\t\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\targv[count++] = tokenizer.nextToken();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tstartIndex = lastIndex + 1;\r", "-\t\tlastIndex = commandLine.indexOf('\"', startIndex);\r", "-\t\tinsideQuotes = !insideQuotes;\r", "-\t}\r", "-\tif (startIndex == 0) {\r", "-\t\ttokenizer = new StringTokenizer(commandLine);\r", "-\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\tif (count == argv.length) {\r", "-\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t}\r", "-\t\t\targv[count++] = tokenizer.nextToken();\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (startIndex + 1 <= commandLine.length()) {\r", "-\t\t\tif (insideQuotes) {\r", "-\t\t\t\tif (count == argv.length) {\r", "-\t\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t\t}\r", "-\t\t\t\targv[count++] = commandLine.substring(startIndex, commandLine.length());\r", "-\t\t\t} else {\r", "-\t\t\t\ttokenizer = new StringTokenizer(commandLine.substring(startIndex, commandLine.length()), File.pathSeparator + \" \"); //$NON-NLS-1$\r", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\t\tif (count == argv.length) {\r", "-\t\t\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\targv[count++] = tokenizer.nextToken();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tSystem.arraycopy(argv, 0, argv = new String[count], 0, count);\r", "-\tnew Main(writer, false).compile(argv);\r", "-}\r", "+\tnew Main(writer, false).compile(tokenize(commandLine));\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c044f31a8c4dff2bdbfc41c44d5db747", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "15931130cc3603cc40cf03dc17251cf7622502d5", "commitAfterChange": "80f1e7c4e4b868f26698d3e483443bcf19375a87", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(AnnotationTypeDeclaration node)", "diff": ["+", "+\t@Override", "+\tpublic boolean visit(AnnotationTypeDeclaration node) {", "+\t\tif (this.options.align_type_members_on_columns)", "+\t\t\tthis.fieldAligner.prepareAlign(node.bodyDeclarations());", "+\t\treturn true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de2f8dd2671168c2b44fe0534e6ad909", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistOptions.java", "commitBeforeChange": "cc758bfd339f8a87c20acc3346f061d63795c18c", "commitAfterChange": "2bc92b74226ce6025d1c26404f4960477e265708", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic AssistOptions(Map settings)", "signatureAfterChange": " \tpublic AssistOptions(Map settings)", "diff": ["-\t\t// filter options which are related to the assist component", "-\t\tIterator entries = settings.entrySet().iterator();", "-\t\twhile (entries.hasNext()) {", "-\t\t\tMap.Entry entry = (Map.Entry)entries.next();", "-\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\tcontinue;", "-\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\tcontinue;", "-\t\t\tString optionID = (String) entry.getKey();", "-\t\t\tString optionValue = (String) entry.getValue();", "+\t\tset(settings);", "+\t}", "-\t\t\tif (optionID.equals(OPTION_PerformVisibilityCheck)) {", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.checkVisibility = true;", "-\t\t\t\t} else", "-\t\t\t\t\tif (optionValue.equals(DISABLED)) {", "-\t\t\t\t\t\tthis.checkVisibility = false;", "-\t\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} else if (optionID.equals(OPTION_ForceImplicitQualification)) {", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.forceImplicitQualification = true;", "-\t\t\t\t} else", "-\t\t\t\t\tif (optionValue.equals(DISABLED)) {", "-\t\t\t\t\t\tthis.forceImplicitQualification = false;", "-\t\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_FieldPrefixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.fieldPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_StaticFieldPrefixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.staticFieldPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_LocalPrefixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.localPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_ArgumentPrefixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.argumentPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_FieldSuffixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.fieldSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_StaticFieldSuffixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.staticFieldSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_LocalSuffixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.localSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} else if(optionID.equals(OPTION_ArgumentSuffixes)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.argumentSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;"]}], "num": 50940}
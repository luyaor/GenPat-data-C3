{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dee2775d6938aa422de9aabc54145087", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "093b3318ed1364e9f86c94bd89bd353f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testBug51226() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51226() throws JavaModelException", "diff": ["-\t\t\tassumeEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "-\t\t\tassumeEquals(this.prefix+\"Wrong number of comments\", 1, unit.getCommentList().size());", "+\t\t\tassumeEquals(prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\t\tassumeEquals(prefix+\"Wrong number of comments\", 1, unit.getCommentList().size());", "-\t\t\tassumeTrue(this.prefix+\"Comment should be a Javadoc one\", comment.isDocComment());", "-\t\t\tJavadoc docComment = (Javadoc) comment;", "-\t\t\tassumeEquals(this.prefix+\"Wrong number of tags\", 1, docComment.tags().size());", "-\t\t\tTagElement tagElement = (TagElement) docComment.tags().get(0);", "-\t\t\tassumeNull(this.prefix+\"Wrong type of tag [\"+tagElement+\"]\", tagElement.getTagName());", "-\t\t\tassumeEquals(this.prefix+\"Wrong number of fragments in tag [\"+tagElement+\"]\", 1, tagElement.fragments().size());", "-\t\t\tASTNode fragment = (ASTNode) tagElement.fragments().get(0);", "-\t\t\tassumeEquals(this.prefix+\"Invalid type for fragment [\"+fragment+\"]\", ASTNode.TEXT_ELEMENT, fragment.getNodeType());", "-\t\t\tTextElement textElement = (TextElement) fragment;", "-\t\t\tassumeEquals(this.prefix+\"Invalid content for text element \", \"Test\", textElement.getText());", "-\t\t\tif (debug) System.out.println(docComment+\"\\nsuccessfully verified.\");", "+\t\t\tassumeTrue(prefix+\"Comment should be a Javadoc one\", comment.isDocComment());", "+\t\t\tif (docCommentSupport.equals(JavaCore.ENABLED)) {", "+\t\t\t\tJavadoc docComment = (Javadoc) comment;", "+\t\t\t\tassumeEquals(prefix+\"Wrong number of tags\", 1, docComment.tags().size());", "+\t\t\t\tTagElement tagElement = (TagElement) docComment.tags().get(0);", "+\t\t\t\tassumeNull(prefix+\"Wrong type of tag [\"+tagElement+\"]\", tagElement.getTagName());", "+\t\t\t\tassumeEquals(prefix+\"Wrong number of fragments in tag [\"+tagElement+\"]\", 1, tagElement.fragments().size());", "+\t\t\t\tASTNode fragment = (ASTNode) tagElement.fragments().get(0);", "+\t\t\t\tassumeEquals(prefix+\"Invalid type for fragment [\"+fragment+\"]\", ASTNode.TEXT_ELEMENT, fragment.getNodeType());", "+\t\t\t\tTextElement textElement = (TextElement) fragment;", "+\t\t\t\tassumeEquals(prefix+\"Invalid content for text element \", \"Test\", textElement.getText());", "+\t\t\t\tif (debug) System.out.println(docComment+\"\\nsuccessfully verified.\");", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9186d21a5601566d258ee1702a6046e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate void verifyBindings(TagElement tagElement)", "signatureAfterChange": " \tprivate void verifyBindings(TagElement tagElement)", "diff": ["-\t\t\t\t\t\tassumeTrue(this.prefix+\"Reference '\"+previousFragment+\"' should be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "+\t\t\t\t\t\tassumeTrue(prefix+\"Reference '\"+previousFragment+\"' should be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "-\t\t\t\t\t\tassumeTrue(this.prefix+\"Unknown reference '\"+previousFragment+\"' should NOT be bound!\", !text.getText().trim().startsWith(\"Unknown\"));", "+\t\t\t\t\t\tassumeTrue(prefix+\"Unknown reference '\"+previousFragment+\"' should NOT be bound!\", !text.getText().trim().startsWith(\"Unknown\"));", "-\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+name+\" binding was not found!\", name.resolveBinding());", "+\t\t\t\t\t\tassumeNotNull(prefix+\"\"+name+\" binding was not found!\", name.resolveBinding());", "-\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\tassumeNotNull(prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "-\t\t\t\t\t\t\t\t\tSystem.out.println(this.prefix+\"Binding for selector of  '\"+methodRef+\"' is null.\");", "+\t\t\t\t\t\t\t\t\tSystem.out.println(prefix+\"Binding for selector of  '\"+methodRef+\"' is null.\");", "-\t\t\t\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\t\t\t\tassumeNotNull(prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "-\t\t\t\t\t\t\t\t\tassumeNull(this.prefix+\"\"+methodName+\" binding should be null!\", methNameBinding);", "+\t\t\t\t\t\t\t\t\tassumeNull(prefix+\"\"+methodName+\" binding should be null!\", methNameBinding);", "-\t\t\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\t\t\tassumeNotNull(prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "-\t\t\t\t\t\t\t\tassumeNull(this.prefix+\"\"+methodName+\" binding should be null!\", methNameBinding);", "+\t\t\t\t\t\t\t\tassumeNull(prefix+\"\"+methodName+\" binding should be null!\", methNameBinding);", "-\t\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+param.getType()+\" binding was not found!\", param.getType().resolveBinding());", "+\t\t\t\t\t\t\tassumeNotNull(prefix+\"\"+param.getType()+\" binding was not found!\", param.getType().resolveBinding());", "-\t\tassumeTrue(this.prefix+\"Reference '\"+(previousFragment==null?tagElement:previousFragment)+\"' should be bound!\", (!resolvedBinding || previousBinding != null));", "+\t\tassumeTrue(prefix+\"Reference '\"+(previousFragment==null?tagElement:previousFragment)+\"' should be bound!\", (!resolvedBinding || previousBinding != null));"]}], "num": 29964}
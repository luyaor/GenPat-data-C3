{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c55d1f4de350c7c732c5cfb8a388988c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aca18a8a335d3e62c1f682fa3d59582b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 7, "signatureBeforeChange": " public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInitialize) throws ClassFormatException", "signatureAfterChange": " public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInitialize) throws ClassFormatException", "diff": ["-\t\t\t} else {", "-\t\t\t\tif (CharOperation.equals(attributeName, InnerClassName)) {", "-\t\t\t\t\tint innerOffset = readOffset + 6;", "-\t\t\t\t\tint number_of_classes = u2At(innerOffset);", "-\t\t\t\t\tif (number_of_classes != 0) {", "-\t\t\t\t\t\tinnerOffset+= 2;", "-\t\t\t\t\t\tthis.innerInfos = new InnerClassInfo[number_of_classes];", "-\t\t\t\t\t\tfor (int j = 0; j < number_of_classes; j++) {", "-\t\t\t\t\t\t\tthis.innerInfos[j] = ", "-\t\t\t\t\t\t\t\tnew InnerClassInfo(reference, this.constantPoolOffsets, innerOffset); ", "-\t\t\t\t\t\t\tif (this.classNameIndex == this.innerInfos[j].innerClassNameIndex) {", "-\t\t\t\t\t\t\t\tthis.innerInfo = this.innerInfos[j];", "-\t\t\t\t\t\t\t\tthis.innerInfoIndex = j;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tinnerOffset += 8;", "+\t\t\t} else if (CharOperation.equals(attributeName, InnerClassName)) {", "+\t\t\t\tint innerOffset = readOffset + 6;", "+\t\t\t\tint number_of_classes = u2At(innerOffset);", "+\t\t\t\tif (number_of_classes != 0) {", "+\t\t\t\t\tinnerOffset+= 2;", "+\t\t\t\t\tthis.innerInfos = new InnerClassInfo[number_of_classes];", "+\t\t\t\t\tfor (int j = 0; j < number_of_classes; j++) {", "+\t\t\t\t\t\tthis.innerInfos[j] = ", "+\t\t\t\t\t\t\tnew InnerClassInfo(reference, this.constantPoolOffsets, innerOffset); ", "+\t\t\t\t\t\tif (this.classNameIndex == this.innerInfos[j].innerClassNameIndex) {", "+\t\t\t\t\t\t\tthis.innerInfo = this.innerInfos[j];", "+\t\t\t\t\t\t\tthis.innerInfoIndex = j;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tif (CharOperation.equals(attributeName, SourceName)) {", "-\t\t\t\t\t\tutf8Offset = this.constantPoolOffsets[u2At(readOffset + 6)];", "-\t\t\t\t\t\tthis.sourceFileName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (CharOperation.equals(attributeName, SyntheticName)) {", "-\t\t\t\t\t\t\tthis.accessFlags |= AccSynthetic;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tinnerOffset += 8;", "+\t\t\t} else if (CharOperation.equals(attributeName, SourceName)) {", "+\t\t\t\tutf8Offset = this.constantPoolOffsets[u2At(readOffset + 6)];", "+\t\t\t\tthis.sourceFileName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));", "+\t\t\t} else if (CharOperation.equals(attributeName, SyntheticName)) {", "+\t\t\t\tthis.accessFlags |= AccSynthetic;", "+\t\t\t} else if (CharOperation.equals(attributeName, SignatureName)) {", "+\t\t\t\tutf8Offset = this.constantPoolOffsets[u2At(readOffset + 6)];", "+\t\t\t\tthis.signature = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));\t\t\t\t", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc888b464c790eadd6acfe8cf130c504", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "240072cebf5931ceec28dafb0db1caf3ab4b7757", "commitAfterChange": "5914e66771be7da6ef8574c5e81087b9d580e133", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInitialize) throws ClassFormatException", "signatureAfterChange": " public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInitialize) throws ClassFormatException", "diff": ["-\t\t\tif (CharOperation.equals(attributeName, DeprecatedName)) {", "-\t\t\t\tthis.accessFlags |= AccDeprecated;", "-\t\t\t} else if (CharOperation.equals(attributeName, InnerClassName)) {", "-\t\t\t\tint innerOffset = readOffset + 6;", "-\t\t\t\tint number_of_classes = u2At(innerOffset);", "-\t\t\t\tif (number_of_classes != 0) {", "-\t\t\t\t\tinnerOffset+= 2;", "-\t\t\t\t\tthis.innerInfos = new InnerClassInfo[number_of_classes];", "-\t\t\t\t\tfor (int j = 0; j < number_of_classes; j++) {", "-\t\t\t\t\t\tthis.innerInfos[j] = ", "-\t\t\t\t\t\t\tnew InnerClassInfo(reference, this.constantPoolOffsets, innerOffset); ", "-\t\t\t\t\t\tif (this.classNameIndex == this.innerInfos[j].innerClassNameIndex) {", "-\t\t\t\t\t\t\tthis.innerInfo = this.innerInfos[j];", "-\t\t\t\t\t\t\tthis.innerInfoIndex = j;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tinnerOffset += 8;", "+\t\t\tif (attributeName.length == 0) {", "+\t\t\t\treadOffset += (6 + u4At(readOffset + 2));", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tswitch(attributeName[0] ) {", "+\t\t\t\tcase 'D' :", "+\t\t\t\t\tif (CharOperation.equals(attributeName, DeprecatedName)) {", "+\t\t\t\t\t\tthis.accessFlags |= AccDeprecated;", "-\t\t\t\t}", "-\t\t\t} else if (CharOperation.equals(attributeName, SourceName)) {", "-\t\t\t\tutf8Offset = this.constantPoolOffsets[u2At(readOffset + 6)];", "-\t\t\t\tthis.sourceFileName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));", "-\t\t\t} else if (CharOperation.equals(attributeName, SyntheticName)) {", "-\t\t\t\tthis.accessFlags |= AccSynthetic;", "-\t\t\t} else if (CharOperation.equals(attributeName, SignatureName)) {", "-\t\t\t\tutf8Offset = this.constantPoolOffsets[u2At(readOffset + 6)];", "-\t\t\t\tthis.signature = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));\t\t\t\t", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'I' :", "+\t\t\t\t\tif (CharOperation.equals(attributeName, InnerClassName)) {", "+\t\t\t\t\t\tint innerOffset = readOffset + 6;", "+\t\t\t\t\t\tint number_of_classes = u2At(innerOffset);", "+\t\t\t\t\t\tif (number_of_classes != 0) {", "+\t\t\t\t\t\t\tinnerOffset+= 2;", "+\t\t\t\t\t\t\tthis.innerInfos = new InnerClassInfo[number_of_classes];", "+\t\t\t\t\t\t\tfor (int j = 0; j < number_of_classes; j++) {", "+\t\t\t\t\t\t\t\tthis.innerInfos[j] = ", "+\t\t\t\t\t\t\t\t\tnew InnerClassInfo(reference, this.constantPoolOffsets, innerOffset); ", "+\t\t\t\t\t\t\t\tif (this.classNameIndex == this.innerInfos[j].innerClassNameIndex) {", "+\t\t\t\t\t\t\t\t\tthis.innerInfo = this.innerInfos[j];", "+\t\t\t\t\t\t\t\t\tthis.innerInfoIndex = j;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tinnerOffset += 8;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'S' :", "+\t\t\t\t\tif (attributeName.length > 2) {", "+\t\t\t\t\t\tswitch(attributeName[1]) {", "+\t\t\t\t\t\t\tcase 'o' :", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(attributeName, SourceName)) {", "+\t\t\t\t\t\t\t\t\tutf8Offset = this.constantPoolOffsets[u2At(readOffset + 6)];", "+\t\t\t\t\t\t\t\t\tthis.sourceFileName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'y' :", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(attributeName, SyntheticName)) {", "+\t\t\t\t\t\t\t\t\tthis.accessFlags |= AccSynthetic;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'i' :", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(attributeName, SignatureName)) {", "+\t\t\t\t\t\t\t\t\tutf8Offset = this.constantPoolOffsets[u2At(readOffset + 6)];", "+\t\t\t\t\t\t\t\t\tthis.signature = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));\t\t\t\t", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'R' :", "+\t\t\t\t\tif (CharOperation.equals(attributeName, RuntimeVisibleAnnotationsName)) {", "+\t\t\t\t\t\tdecodeStandardAnnotations(readOffset);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;"]}], "num": 64332}
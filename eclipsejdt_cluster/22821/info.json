{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5647afff32a4b62ac26bb4e4f7ee4c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b3e78b634b88b3e09a0e7d68ba306f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "d9032a87dfcb69e19b4c3aae869d4a786d1fb149", "commitAfterChange": "eee6512d26cd1c50a9b02d1b4b78531f507d95fc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tprivate char[] findSource(ClassFile classFile)", "signatureAfterChange": "\r \tprivate String getSourceFileName()", "diff": ["-\tprivate char[] findSource(ClassFile classFile) {\r", "-\t\t\tSourceMapper sourceMapper = classFile.getSourceMapper();\r", "-\t\t\t\tIType type = classFile.getType();\r", "-\t\t\t\tif (classFile.isOpen() && type.getDeclaringType() == null) {\r", "-\t\t\t\t\tsource = sourceMapper.findSource(type);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tClassFileReader reader = this.locator.classFileReader(type);\r", "-\t\t\t\t\tif (reader != null) {\r", "-\t\t\t\t\t\tsource = sourceMapper.findSource(type, reader);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "+\t */\r", "+\tprivate String getSourceFileName() {\r", "+\t\tif (this.sourceFileName != null) return this.sourceFileName;\r", "+\t\tthis.sourceFileName = NO_SOURCE_FILE_NAME; \r", "+\t\ttry {\r", "+\t\t\tSourceMapper sourceMapper = this.openable.getSourceMapper();\r", "+\t\t\tif (sourceMapper != null) {\r", "+\t\t\t\tIType type = ((ClassFile)this.openable).getType();\r", "+\t\t\t\tClassFileReader reader = this.locator.classFileReader(type);\r", "+\t\t\t\tif (reader != null) {\r", "+\t\t\t\t\tthis.sourceFileName = sourceMapper.findSourceFileName(type, reader);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t}\r", "+\t\treturn this.sourceFileName;\r", "+\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "952e2a7ed0533fe458ef3ef06c23a878", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "14f89ca9b18a3480429e3f25bc68dd79b7e9f0db", "commitAfterChange": "eb21ce31e87e64ed6c3b487b0fe31d2556ab8015", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames)", "signatureAfterChange": " protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames)", "diff": ["-\tIJavaElement[] matches = new IJavaElement[] {};", "-\t\t\t\tmatches = growAndAddToArray(matches, methods[i]);", "+\t\t\t\taddElement(methods[i]);", "-\tif (matches.length == 0) {", "+\tif (this.elementIndex == -1) {", "-\t\tfElements = growAndAddToArray(fElements, type);", "+\t\taddElement(type);", "-\tif (matches.length == 1) {", "-\t\tfElements = growAndAddToArray(fElements, matches[0]);", "+\tif (this.elementIndex == 0) {", "-\t\t\tSystem.out.print(matches[0].toString());", "+\t\t\tSystem.out.print(this.elements[0].toString());", "-\tfor (int i = 0; i < matches.length; i++) {", "+\tIJavaElement[] matches = this.elements;", "+\tint matchesIndex = this.elementIndex;", "+\tthis.elements = JavaElement.NO_ELEMENTS;", "+\tthis.elementIndex = -1;", "+\tfor (int i = 0; i <= matchesIndex; i++) {", "-\t\t\tfElements = growAndAddToArray(fElements, method);", "+\t\t\taddElement(method);"]}], "num": 22821}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ac2cef4aedbe2ef726e53b3028feb4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d4bc14780bef31fc31819ffabf0981", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "98ad487e103c268099d7117573693243c8d3b8fc", "commitAfterChange": "721a9dcda02493639666143934bddb089e848d18", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-\t", "+", "-\t\tfor (int i=0, l=type.typeParameters.length; i<l; i++) {", "-\t\t\tTypeParameter typeParameter = type.typeParameters[i];", "-\t\t\tif (typeParameter != null) {", "-\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter);", "-\t\t\t\tif (level != null && matchedClassContainer) {", "-\t\t\t\t\tif (level.intValue() > -1 && enclosesElement) {", "-\t\t\t\t\t\tint offset = typeParameter.sourceStart;", "-\t\t\t\t\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(typeParameter, enclosingElement, type.binding, level.intValue(), typeParameter.sourceEnd-offset+1, this);", "-\t\t\t\t\t\treport(match);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (typeParameter.type != null) {", "-\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.type);", "-\t\t\t\t\tif (level != null && matchedClassContainer) {", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.type, enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (typeParameter.bounds != null) {", "-\t\t\t\t\tfor (int j=0, b=typeParameter.bounds.length; j<b; j++) {", "-\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.bounds[j]);", "-\t\t\t\t\t\tif (level != null && matchedClassContainer) {", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\treportMatching(type.typeParameters, enclosingElement, parent, type.binding, nodeSet);", "+\t// Visit fields", "-\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tif (nodeSet.matchingNodes.elementSize == 0) return;\t// end as all matching nodes were reported", "+\t\tIJavaElement[] otherElements = null;", "+\t\tint first = -1;", "-\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(field);", "-\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "-\t\t\treportMatching(field, type, enclosingElement, value, typeInHierarchy, nodeSet);", "+\t\t\tboolean last = field.endPart2Position == 0 || field.declarationEnd == field.endPart2Position;", "+\t\t\t// Store first index of multiple field declaration", "+\t\t\tif (!last) {", "+\t\t\t\tif (first == -1) {", "+\t\t\t\t\tfirst = i;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// Mutliple declaration fields", "+\t\t\tif (first >= 0) {", "+\t\t\t\t// Create handle for all multiple fields except first one as it would be returned through the match", "+\t\t\t\tif (i > first) {", "+\t\t\t\t\tif (otherElements == null) {", "+\t\t\t\t\t\totherElements = new IJavaElement[] { createHandle(field, type, enclosingElement) };", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint length = otherElements.length;", "+\t\t\t\t\t\tSystem.arraycopy(otherElements, 0, otherElements = new IJavaElement[length+1], 0, length);", "+\t\t\t\t\t\totherElements[length] = createHandle(field, type, enclosingElement);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// On last field, report match with all other elements", "+\t\t\t\tif (last) {", "+\t\t\t\t\tfor (int j=first; j<=i; j++) {", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(fields[j]);", "+\t\t\t\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "+\t\t\t\t\t\treportMatching(fields[j], type, enclosingElement, otherElements, value, typeInHierarchy, nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t\tfirst = -1;", "+\t\t\t\t\totherElements = null;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// Single field, report normally", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(field);", "+\t\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "+\t\t\t\treportMatching(field, type, enclosingElement, null, value, typeInHierarchy, nodeSet);", "+\t\t\t}", "+\t// Visit methods", "-\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tif (nodeSet.matchingNodes.elementSize == 0) return;\t// end as all matching nodes were reported", "+\t// Visit types", "-\t\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\t\tif (nodeSet.matchingNodes.elementSize == 0) return;\t// end as all matching nodes were reported"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbfec4a396b658c6c209a9105f2e319f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void reportSuperTypeReference(TypeReference typeRef, IJavaElement type, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, MatchingNodeSet nodeSet) throws CoreException", "diff": ["+ */", "+protected void reportMatching(TypeDeclaration type, IJavaElement parent, MatchingNodeSet nodeSet) throws CoreException {", "+\t// create type handle", "+\tIJavaElement enclosingElement;", "+\tif (parent == null) {", "+\t\tenclosingElement = createTypeHandle(type.name);", "+\t} else if (parent instanceof IType) {", "+\t\tenclosingElement = createTypeHandle((IType) parent, type.name);", "+\t\tif (enclosingElement == null) return;", "+\t} else {", "+\t\tenclosingElement = parent;", "+\t}", "+", "+\t// super types", "+\tboolean searchInsideTypes = (this.matchContainer & PatternLocator.CLASS_CONTAINER) != 0;", "+\tif (type instanceof AnonymousLocalTypeDeclaration) {", "+\t\tTypeReference superType = ((AnonymousLocalTypeDeclaration) type).allocation.type;", "+\t\tif (superType != null) {", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(superType);", "+\t\t\tif (level != null && searchInsideTypes)", "+\t\t\t\tthis.patternLocator.matchReportReference(superType, enclosingElement, level.intValue(), this);", "+\t\t}", "+\t} else {", "+\t\tTypeReference superClass = type.superclass;", "+\t\tif (superClass != null) {", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(superClass);", "+\t\t\tif (level != null && searchInsideTypes)", "+\t\t\t\tthis.patternLocator.matchReportReference(superClass, enclosingElement, level.intValue(), this);", "+\t\t}", "+\t\tTypeReference[] superInterfaces = type.superInterfaces;", "+\t\tif (superInterfaces != null) {", "+\t\t\tfor (int i = 0, l = superInterfaces.length; i < l; i++) {", "+\t\t\t\tTypeReference superInterface = superInterfaces[i];", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(superInterface);", "+\t\t\t\tif (level != null && searchInsideTypes)", "+\t\t\t\t\tthis.patternLocator.matchReportReference(superInterface, enclosingElement, level.intValue(), this);", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\t// filter out element not in hierarchy scope", "+\tboolean typeInHierarchy = type.binding == null || typeInHierarchy(type.binding);", "+", "+\tFieldDeclaration[] fields = type.fields;", "+\tif (fields != null) {", "+\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tfor (int i = 0, l = fields.length; i < l; i++) {", "+\t\t\tFieldDeclaration field = fields[i];", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(field);", "+\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "+\t\t\t\treportFieldDeclaration(field, enclosingElement, level.intValue());", "+\t\t\treportMatching(field, enclosingElement, type, nodeSet, typeInHierarchy);", "+\t\t}", "+\t}", "+", "+\tAbstractMethodDeclaration[] methods = type.methods;", "+\tif (methods != null) {", "+\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tfor (int i = 0, l = methods.length; i < l; i++) {", "+\t\t\tAbstractMethodDeclaration method = methods[i];", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(method);", "+\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "+\t\t\t\treportMethodDeclaration(method, enclosingElement, level.intValue());", "+\t\t\treportMatching(method, enclosingElement, nodeSet, typeInHierarchy);", "+\t\t}", "+\t}", "+", "+\tMemberTypeDeclaration[] memberTypes = type.memberTypes;", "+\tif (memberTypes != null) {", "+\t\tfor (int i = 0, l = memberTypes.length; i < l; i++) {", "+\t\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\t\tMemberTypeDeclaration memberType = memberTypes[i];", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(memberType);", "+\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "+\t\t\t\treportTypeDeclaration(memberType, enclosingElement, level.intValue());", "+\t\t\treportMatching(memberType, enclosingElement, nodeSet);", "+\t\t}", "+\t}", "- */", "-public void reportSuperTypeReference(TypeReference typeRef, IJavaElement type, int accuracy) throws CoreException {", "-\tthis.patternLocator.matchReportReference(typeRef, type, accuracy, this);", "-}"]}], "num": 10927}
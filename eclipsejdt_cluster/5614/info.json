{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62f1d6b8ed3b31d4902b6e87e551d58d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "266ffb57e4eb2293dced057ef15ea429", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "e425f149fdae0aea7f57f9ae5619eec87ca76f6f", "commitAfterChange": "614c231d5928442b6b06de8bb3ae1ac4c0801fb5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void bytecodeExceeds64KLimit(AbstractMethodDeclaration location)", "signatureAfterChange": " public void bytecodeExceeds64KLimit(AbstractMethodDeclaration location)", "diff": ["-\tString[] arguments = new String[] {new String(location.selector)};", "-\tthis.handle(", "-\t\tIProblem.BytecodeExceeds64KLimit,", "-\t\targuments,", "-\t\targuments,", "-\t\tError | Abort,", "-\t\tlocation.sourceStart,", "-\t\tlocation.sourceEnd);", "+\tString[] arguments = new String[] {new String(location.selector), parametersAsString(location.binding)};", "+\tif (location.isConstructor()) {", "+\t\tthis.handle(", "+\t\t\tIProblem.BytecodeExceeds64KLimitForConstructor,", "+\t\t\targuments,", "+\t\t\targuments,", "+\t\t\tError | Abort,", "+\t\t\tlocation.sourceStart,", "+\t\t\tlocation.sourceEnd);", "+\t} else {", "+\t\tthis.handle(", "+\t\t\tIProblem.BytecodeExceeds64KLimit,", "+\t\t\targuments,", "+\t\t\targuments,", "+\t\t\tError | Abort,", "+\t\t\tlocation.sourceStart,", "+\t\t\tlocation.sourceEnd);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeb184a2600ccba36ba05ea94e4865d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f49cf7529ae8b80cdf3f120143dad37a4f24e498", "commitAfterChange": "b2c3be7bd78bc61f04ab542749dc9420d42f47cb", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": " public void illegalAccessFromTypeVariable(TypeVariableBinding variable, ASTNode location)", "signatureAfterChange": " public void illegalAccessFromTypeVariable(TypeVariableBinding variable, ASTNode location)", "diff": ["-\tString[] arguments = new String[] { new String(variable.sourceName) };", "-\tthis.handle(", "-\t\tIProblem.IllegalAccessFromTypeVariable,", "-\t\targuments, ", "-\t\targuments,", "-\t\tlocation.sourceStart,", "-\t\tlocation.sourceEnd);", "+\tif ((location.bits & ASTNode.InsideJavadoc)!= 0) {", "+\t\tthis.javadocInvalidReference(location.sourceStart, location.sourceEnd);", "+\t} else {", "+\t\tString[] arguments = new String[] { new String(variable.sourceName) };", "+\t\tthis.handle(", "+\t\t\t\tIProblem.IllegalAccessFromTypeVariable,", "+\t\t\t\targuments, ", "+\t\t\t\targuments,", "+\t\t\t\tlocation.sourceStart,", "+\t\t\t\tlocation.sourceEnd);", "+\t}"]}], "num": 5614}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64f8f99065c4f0c9a1b3cb4ee9738491", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99e2c4b7bc886889cb64d6c5e1c96843", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8d903d0ba6af519462e797d9a7ec8393e31c70b2", "commitAfterChange": "7784cb2e8f17bfa5f33db4c9a4c52ad92916d78e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic Alignment createAlignment(String name, int mode, int tieBreakRule, int count, int sourceRestart)", "signatureAfterChange": " \t \tpublic Alignment createAlignment(String name, int mode, int tieBreakRule, int count, int sourceRestart)", "diff": ["+\t\t// adjust break indentation", "+\t\tif (this.currentAlignment != null) {", "+\t\t\tAlignment current = this.currentAlignment;", "+\t\t\twhile (current.enclosing != null) {", "+\t\t\t\tcurrent = current.enclosing;", "+\t\t\t}", "+\t\t\tswitch(current.chunkKind) {", "+\t\t\t\tcase Alignment.CHUNK_METHOD :", "+\t\t\t\tcase Alignment.CHUNK_TYPE :", "+\t\t\t\t\talignment.breakIndentationLevel = this.indentationLevel + (this.useTab ? 1 : this.tabSize);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Alignment.CHUNK_FIELD :", "+\t\t\t\t\talignment.breakIndentationLevel = current.originalIndentationLevel + (this.useTab ? 1 : this.tabSize);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf9b484084ac8c364185cd777ba40335", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java", "commitBeforeChange": "9f0ebc31be56acb3fbfdaeae5760bc6493eb0026", "commitAfterChange": "d5f7602600be2e39f513d08d9350d4d6dfba6305", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate void substitute(char[] parameter, char[][] typeParameterSigs, int typeParametersLength)", "signatureAfterChange": " \tprivate void substitute(char[] parameter, char[][] typeParameterSigs, int typeParametersLength)", "diff": ["-\t\t\tthis.signature.append(parameter);", "+\t\t\t// handle array, wildcard and capture", "+\t\t\tint index = 0;", "+\t\t\tint length = parameter.length;", "+\t\t\tloop: while (index < length) {", "+\t\t\t\tchar current = parameter[index];", "+\t\t\t\tswitch (current) {", "+\t\t\t\t\tcase Signature.C_CAPTURE:", "+\t\t\t\t\tcase Signature.C_EXTENDS:", "+\t\t\t\t\tcase Signature.C_SUPER:", "+\t\t\t\t\tcase Signature.C_ARRAY:", "+\t\t\t\t\t\tthis.signature.append(current);", "+\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tbreak loop;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (index > 0) ", "+\t\t\t\tsubstitute(CharOperation.subarray(parameter, index, length), typeParameterSigs, typeParametersLength);", "+\t\t\telse", "+\t\t\t\tthis.signature.append(parameter);"]}], "num": 34638}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "938912d0d783851b131d88509458f936", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0136515ceee177fe63e23d0058330500", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 279, "methodNumberAfterChange": 279, "signatureBeforeChange": " \tpublic void test0275()", "signatureAfterChange": " \tpublic void test0275()", "diff": ["-\t\t\t\"Type safety: The return type List for useList(List) from the type Y needs unchecked conversion to conform to List<String> from the type X\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The return type List for useList(List) from the type Y needs unchecked conversion to conform to List<String> from the type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "082e2907ca1da8660251f95d60dafa3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "commitAfterChange": "a8944173670c6319cce2438add6b3e87f478a46c", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "\r \tpublic void test0385137a()", "signatureAfterChange": "\r \tpublic void test0385137a()", "diff": ["-\t\t\t\t\t\"Type annotations are not allowed on type names used to access static members\\n\" + \r", "+\t\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r", "-\t\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r", "+\t\t\t\t\t\"Type annotations are not allowed on type names used to access static members\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08e50594b49fa489ab1ca7e15803dbdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": "\t\t \tpublic void test0168()", "signatureAfterChange": "\t\t \tpublic void test0168()", "diff": ["-\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<AX<T,T>,U>\\n\" + ", "+\t\t\t\"Type safety: The constructor AX(Object) belongs to the raw type AX. References to generic type AX<E,F> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The constructor AX(Object) belongs to the raw type AX. References to generic type AX<E,F> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<AX<T,T>,U>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d0808531b05cd85aeef1b82407d579e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 774, "methodNumberAfterChange": 774, "signatureBeforeChange": " public void test0768()", "signatureAfterChange": " public void test0768()", "diff": ["-\t\t\"The interface Y cannot be implemented more than once with different arguments: Y<Object> and Y<String>\\n\" + ", "+\t\t\"Cannot specify any additional bound Z when first bound is a type parameter\\n\" + ", "-\t\t\"Cannot specify any additional bound Z when first bound is a type parameter\\n\" + ", "+\t\t\"The interface Y cannot be implemented more than once with different arguments: Y<Object> and Y<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1651e7633c730904dabc80b5d8fe80b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testBug82514()", "signatureAfterChange": " \tpublic void testBug82514()", "diff": ["-\t\t\t\"T cannot be resolved to a type\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"T cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c28294a07e910772e96bd9c23b50ae9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 849, "methodNumberAfterChange": 849, "signatureBeforeChange": " public void test0843()", "signatureAfterChange": " public void test0843()", "diff": ["-\t\t\"Unnecessary cast from List<Object&Serializable&CharSequence> to List<? extends String>\\n\" + ", "+\t\t\"Type safety: The cast from List<Object&Serializable&CharSequence> to List<? extends String> is actually checking against the erased type List\\n\" + ", "-\t\t\"Type safety: The cast from List<Object&Serializable&CharSequence> to List<? extends String> is actually checking against the erased type List\\n\" + ", "+\t\t\"Unnecessary cast from List<Object&Serializable&CharSequence> to List<? extends String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "357702c709aaa53fc723367517948547", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testBug83127h()", "signatureAfterChange": " \tpublic void testBug83127h()", "diff": ["-\t\t\t\"E cannot be resolved to a type\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"E cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38bcda6c09a8da4eb72e362f4ca925b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " public void test_nonnull_var_in_constrol_structure_3()", "signatureAfterChange": " public void test_nonnull_var_in_constrol_structure_3()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is specified as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is inferred as @Nullable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7edfad05d4a046df9ed73b82c52340", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void test061()", "signatureAfterChange": " \tpublic void test061()", "diff": ["-\t\t\t\"The enum constant X.C has no corresponding case label\\n\" + ", "+\t\t\t\"The enum constant X.B has no corresponding case label\\n\" + ", "-\t\t\t\"The enum constant X.B has no corresponding case label\\n\" + ", "+\t\t\t\"The enum constant X.C has no corresponding case label\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b23b72bafa1ea5d4c635178e1b196ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  public void test059()", "signatureAfterChange": "  public void test059()", "diff": ["-\t\t\"The field Local.field is never read locally\\n\" + ", "+\t\t\"The field Local.field is hiding a field from type FieldQualification\\n\" + ", "-\t\t\"The field Local.field is hiding a field from type FieldQualification\\n\" + ", "+\t\t\"The field Local.field is never read locally\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "411b30491af984303f37e02e2b0204bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 108, "signatureBeforeChange": " public void test_nesting_1()", "signatureAfterChange": " public void test_nesting_1()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is specified as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is inferred as @Nullable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6109a2258a6762ceedd2d2be3a420d2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 173, "signatureBeforeChange": "\t\t \tpublic void test0169()", "signatureAfterChange": "\t\t \tpublic void test0169()", "diff": ["-\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<T>\\n\" + ", "+\t\t\t\"Type safety: The constructor AX(Object) belongs to the raw type AX. References to generic type AX<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The constructor AX(Object) belongs to the raw type AX. References to generic type AX<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<T>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e8a532955cc064570fa4e5a3ece20ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testBug83127h()", "signatureAfterChange": " \tpublic void testBug83127h()", "diff": ["-\t\t\t\"E cannot be resolved to a type\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"E cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "736ebacfcb93466afbc4f0803f72c126", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void test0044()", "signatureAfterChange": " public void test0044()", "diff": ["-\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "-\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7acff70ddf2d95d1f959b594c9cdb78c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic void test0083()", "signatureAfterChange": " \tpublic void test0083()", "diff": ["-\t\t\t\"Syntax error, insert \\\">\\\" to complete ReferenceType1\\n\" + ", "+\t\t\t\"Syntax error, insert \\\">>>\\\" to complete ReferenceType3\\n\" + ", "-\t\t\t\"Syntax error, insert \\\">>>\\\" to complete ReferenceType3\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"Syntax error, insert \\\">\\\" to complete ReferenceType1\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d97c02c99b8356f9a2b5b12ac00d83e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 552, "methodNumberAfterChange": 552, "signatureBeforeChange": "\t\t \tpublic void test0548()", "signatureAfterChange": "\t\t \tpublic void test0548()", "diff": ["-\t\t\t\"Unnecessary cast from DA<capture-of ?> to DC<?>\\n\" + ", "+\t\t\t\"Type safety: The cast from DA<capture-of ?> to DC<?> is actually checking against the erased type DC\\n\" + ", "-\t\t\t\"Type safety: The cast from DA<capture-of ?> to DC<?> is actually checking against the erased type DC\\n\" + ", "+\t\t\t\"Unnecessary cast from DA<capture-of ?> to DC<?>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e33e9f81bf4fa0800457576cc70adf4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SyntaxErrorTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test05()", "signatureAfterChange": " public void test05()", "diff": ["-\t\t\"Syntax error, insert \\\";\\\" to complete BlockStatements\\n\"+", "+\t\t\"Syntax error, insert \\\"AssignmentOperator Expression\\\" to complete Assignment\\n\"+", "-\t\t\"Syntax error, insert \\\"AssignmentOperator Expression\\\" to complete Assignment\\n\"+", "+\t\t\"Syntax error, insert \\\";\\\" to complete BlockStatements\\n\"+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84827907f53303d5e626e57220129316", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 542, "methodNumberAfterChange": 542, "signatureBeforeChange": " \tpublic void test0538()", "signatureAfterChange": " \tpublic void test0538()", "diff": ["-\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum<?>>\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "+\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum<?>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96a9a776fa3d380c71ce34ecb6598846", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "af0e25a1d5ee864ea84d164d70f77532a60cf58e", "commitAfterChange": "f9abe0eae1be0e7103573798b92ccd764f2825ac", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": "\r \tpublic void test418041a()", "signatureAfterChange": "\r \tpublic void test418041a()", "diff": ["-\t\t\t\t\"\t                                  ^^^^^^^^^\\n\" + \r", "+\t\t\t\t\"\t                                          ^\\n\" +\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ed2d72af8678c92b78906c5ff801ea0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test022()", "signatureAfterChange": "  \tpublic void test022()", "diff": ["-\t\t\t\"Type safety: The return type List for getList() from the type B needs unchecked conversion to conform to List<String> from the type A\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The return type List for getList() from the type B needs unchecked conversion to conform to List<String> from the type A\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b09295d3d3f8062706c71f1ea4a4eec8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  public void test059()", "signatureAfterChange": "  public void test059()", "diff": ["-\t\t\"The field Local.field is never read locally\\n\" + ", "+\t\t\"The field Local.field is hiding a field from type FieldQualification\\n\" + ", "-\t\t\"The field Local.field is hiding a field from type FieldQualification\\n\" + ", "+\t\t\"The field Local.field is never read locally\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc80ed7e638ef418bc732535e327f823", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void test062()", "signatureAfterChange": " \tpublic void test062()", "diff": ["-\t\t\t\"The method six(C) of type Ex<C> must override a superclass method\\n\" + ", "+\t\t\t\"Name clash: The method six(C) of type Ex<C> has the same erasure as six(TC) of type Top<TC> but does not override it\\n\" + ", "-\t\t\t\"Name clash: The method six(C) of type Ex<C> has the same erasure as six(TC) of type Top<TC> but does not override it\\n\" + ", "+\t\t\t\"The method six(C) of type Ex<C> must override a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c51b18617cc842120a3b34be165ec52d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " public void test_nonnull_var_in_constrol_structure_2()", "signatureAfterChange": " public void test_nonnull_var_in_constrol_structure_2()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is specified as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is inferred as @Nullable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e54dd49ef3b3132fb1ce8f42c0224d38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DeprecatedTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void test004()", "signatureAfterChange": " public void test004()", "diff": ["-\t\t\"The method UTC(int, int, int, int, int, int) from the type Date is deprecated\\n\" + ", "+\t\t\"The static method UTC(int, int, int, int, int, int) from the type Date should be accessed in a static way\\n\" + ", "-\t\t\"The static method UTC(int, int, int, int, int, int) from the type Date should be accessed in a static way\\n\" + ", "-\t\t\"----------\\n\"", "-", "-\t);", "+\t\t\"The method UTC(int, int, int, int, int, int) from the type Date is deprecated\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6225f75f1360439e17077ec4eb82da7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testBug82514()", "signatureAfterChange": " \tpublic void testBug82514()", "diff": ["-\t\t\t\"T cannot be resolved to a type\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"T cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee3d285629e76cd6da21d92671ad9f5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void test026()", "signatureAfterChange": "  \tpublic void test026()", "diff": ["-\t\t\t\"Type safety: The return type A for test() from the type C needs unchecked conversion to conform to A<T> from the type A<T>\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "-\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The return type A for test() from the type C needs unchecked conversion to conform to A<T> from the type A<T>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eed725acb9b6b88bb3d4ebd67556482b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 283, "methodNumberAfterChange": 283, "signatureBeforeChange": " \tpublic void test0279()", "signatureAfterChange": " \tpublic void test0279()", "diff": ["-\t\t\t\"Type safety: The return type Class for getSomething() from the type X needs unchecked conversion to conform to Class<? extends Y> from the type ISomething\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The return type Class for getSomething() from the type X needs unchecked conversion to conform to Class<? extends Y> from the type ISomething\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f63d20126d2a694ccc4a42978b927130", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void test_nonnull_var_in_constrol_structure_1()", "signatureAfterChange": " public void test_nonnull_var_in_constrol_structure_1()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is specified as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is inferred as @Nullable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb61ce5112fa76268a33e2a9098a5355", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 537, "methodNumberAfterChange": 537, "signatureBeforeChange": " \tpublic void test0533()", "signatureAfterChange": " \tpublic void test0533()", "diff": ["-\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum>\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "+\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc8a336308f87ed27e65033b9bb81fec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void test062()", "signatureAfterChange": " \tpublic void test062()", "diff": ["-\t\t\t\"The enum constant X.C has no corresponding case label\\n\" + ", "+\t\t\t\"The enum constant X.B has no corresponding case label\\n\" + ", "-\t\t\t\"The enum constant X.B has no corresponding case label\\n\" + ", "+\t\t\t\"The enum constant X.C has no corresponding case label\\n\" + "]}], "num": 19568}
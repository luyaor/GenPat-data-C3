{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8598a55e124e45a981716cfc010a88c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9c875bc7e58fc06dd60bd8c2f8f3c2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e980bec51b1b659da189c52a214379978c34468e", "commitAfterChange": "9f038d058d2bda926136df66ffdae620fcaf8616", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-\t\tIEclipsePreferences preferences = getInstancePreferences();", "-\t\ttry {", "-\t\t\t// only get variable from preferences not set to their default", "-\t\t\tString[] propertyNames = preferences.keys();", "-\t\t\tint variablePrefixLength = CP_VARIABLE_PREFERENCES_PREFIX.length();", "-\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "-\t\t\t\tString propertyName = propertyNames[i];", "-\t\t\t\tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)){", "-\t\t\t\t\tString varName = propertyName.substring(variablePrefixLength);", "-\t\t\t\t\tString propertyValue = preferences.get(propertyName, null);", "-\t\t\t\t\tif (propertyValue != null) {", "-\t\t\t\t\t\tString pathString = propertyValue.trim();", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (CP_ENTRY_IGNORE.equals(pathString)) {", "-\t\t\t\t\t\t\t// cleanup old preferences", "-\t\t\t\t\t\t\tpreferences.remove(propertyName); ", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// add variable to table", "-\t\t\t\t\t\tIPath varPath = new Path(pathString);", "-\t\t\t\t\t\tthis.variables.put(varName, varPath); ", "-\t\t\t\t\t\tthis.previousSessionVariables.put(varName, varPath);", "-\t\t\t\t\t}", "-\t\t\t\t} else if (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)){", "-\t\t\t\t\tString propertyValue = preferences.get(propertyName, null);", "-\t\t\t\t\tif (propertyValue != null) {", "-\t\t\t\t\t\t// cleanup old preferences", "-\t\t\t\t\t\tpreferences.remove(propertyName); ", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// recreate container", "-\t\t\t\t\t\trecreatePersistedContainer(propertyName, propertyValue, true/*add to container values*/);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (BackingStoreException e1) {", "-\t\t\t// TODO (frederic) see if it's necessary to report this failure...", "-\t\t}", "+\t\tloadVariablesAndContainers(getDefaultPreferences());", "+\t\tloadVariablesAndContainers(getInstancePreferences());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c93c3c9e6b80c9f8226b71a100e526", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "5ec4215ec4f52f55dcb6e314c5f755ceba34fff6", "commitAfterChange": "5a4580d346b40161405692269366aba5f28266bb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "signatureAfterChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "diff": ["-\tIWorkspace workspace = focusType.getJavaProject().getProject().getWorkspace();\r", "-\tHandleFactory factory = new HandleFactory(workspace);\r", "+\tHandleFactory factory = new HandleFactory(ResourcesPlugin.getWorkspace());\r", "-\t\t\tif (handle.isOpen()) {\r", "-\t\t\t\t// reuse the info from the java model cache\r", "-\t\t\t\tif (handle instanceof CompilationUnit) {\r", "-\t\t\t\t\tthis.addInfoFromOpenCU((CompilationUnit)handle, infos);\r", "-\t\t\t\t} else if (handle instanceof ClassFile) {\r", "-\t\t\t\t\tthis.addInfoFromOpenClassFile((ClassFile)handle, infos);\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\tHierarchyBinaryType binaryType = (HierarchyBinaryType) binariesFromIndexMatches.get(resourcePath);\r", "-\t\t\t\tif (binaryType != null){\r", "-\t\t\t\t\tthis.addInfoFromBinaryIndexMatch(handle, binaryType, infos);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\t// create a temporary info\r", "-\t\t\t\t\tIJavaElement pkg = handle.getParent();\r", "-\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)pkg.getParent();\r", "-\t\t\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t\t\t// class file in a jar\r", "-\t\t\t\t\t\tthis.createInfoFromClassFileInJar(handle, infos);\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t// file in a directory\r", "-\t\t\t\t\t\tIPath path = new Path(resourcePath);\r", "-\t\t\t\t\t\tIFile file = workspace.getRoot().getFile(path);\r", "-\t\t\t\t\t\tIPath location = file.getLocation();\r", "-\t\t\t\t\t\tif (location != null){\r", "-\t\t\t\t\t\t\tString osPath = location.toOSString();\r", "-\t\t\t\t\t\t\tif (handle instanceof CompilationUnit) {\r", "-\t\t\t\t\t\t\t\t// compilation unit in a directory\r", "-\t\t\t\t\t\t\t\tthis.createCompilationUnitFromPath(handle, osPath, units);\r", "-\t\t\t\t\t\t\t} else if (handle instanceof ClassFile) {\r", "-\t\t\t\t\t\t\t\t// class file in a directory\r", "-\t\t\t\t\t\t\t\tthis.createInfoFromClassFile(handle, osPath, infos);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t\t\r", "+\t\t\tthis.addInfoFromElement(handle, infos, units, resourcePath);\r", "+\t\t\t\r"]}], "num": 38759}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0f0d58ca89677331f3c80782a9bbb45", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21cceba8f1a2bda25f76288cd73bbeb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 175, "signatureBeforeChange": " \tpublic void _test0178_try_catch()", "signatureAfterChange": " public void test0558_try_catch()", "diff": ["-\t// TODO (maxime) fix", "-\tpublic void _test0178_try_catch() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t boolean dummy;\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t Object o = new Object();\\n\" + ", "-\t\t\t\t\"\t\t try {\\n\" + ", "-\t\t\t\t\"\t\t\t if (dummy) {\\n\" + ", "-\t\t\t\t\"\t\t\t   System.out.print(0);\\n\" + // may thow RuntimeException ", "-\t\t\t\t\"\t\t\t   o = null;\\n\" + ", "-\t\t\t\t\"\t\t\t   throw new LocalException();\\n\" + ", "-\t\t\t\t\"\t\t\t }\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t catch (LocalException e) {\\n\" + // doesn't catch RuntimeException", "-\t\t\t\t\"\t\t\t o.toString();\\n\" +", "-\t\t\t\t \t// complain: know o is null despite the lack of definite assignment", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t class LocalException extends Exception {\\n\" + ", "-\t\t\t\t\"\t\t private static final long serialVersionUID = 1L;\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"WARN\"", "-\t\t);", "-\t}", "+// null analysis - try/catch", "+public void test0558_try_catch() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  boolean dummy;\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    Object o = new Object();\\n\" + ", "+\t\t\t\"    try {\\n\" + ", "+\t\t\t\"      if (dummy) {\\n\" + ", "+\t\t\t\"        System.out.print(0);\\n\" + // may thow RuntimeException ", "+\t\t\t\"        o = null;\\n\" + ", "+\t\t\t\"        throw new LocalException();\\n\" + ", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    catch (LocalException e) {\\n\" + // doesn't catch RuntimeException", "+\t\t\t\"      o.toString();\\n\" + // complain NPE", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  class LocalException extends Exception {\\n\" + ", "+\t\t\t\"    private static final long serialVersionUID = 1L;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"\to.toString();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+//\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"The variable o may be null\\n\" +", "+\t\t// conservative flow analysis softens the error", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "633ca7ecd05fe37434e8ae737f603cf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 170, "signatureBeforeChange": " \tpublic void test0173_try_catch()", "signatureAfterChange": " public void test0553_try_catch()", "diff": ["-\t// null analysis - try/catch", "-\tpublic void test0173_try_catch() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t boolean dummy, other;\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t Object o = new Object();\\n\" + ", "-\t\t\t\t\"\t\t try {\\n\" + ", "-\t\t\t\t\"\t\t\t if (dummy) {\\n\" + ", "-\t\t\t\t\"\t\t\t   if (other) {\\n\" + ", "-\t\t\t\t\"\t\t\t     throw new LocalException();\\n\" + // may launch new exception", "-\t\t\t\t\"\t\t\t   }\\n\" + ", "-\t\t\t\t\"\t\t\t   o = null;\\n\" + ", "-\t\t\t\t\"\t\t\t   throw new LocalException();\\n\" + // must launch new exception", "-\t\t\t\t\"\t\t\t }\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t catch (LocalException e) {\\n\" + ", "-\t\t\t\t\"\t\t\t o.toString();\\n\" +", "-\t\t\t\t \t// quiet: don't know the exact state when exception is launched", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t class LocalException extends Exception {\\n\" + ", "-\t\t\t\t\"\t\t private static final long serialVersionUID = 1L;\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"", "-\t\t);", "-\t}", "+// null analysis - try/catch", "+public void test0553_try_catch() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  boolean dummy, other;\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    Object o = new Object();\\n\" + ", "+\t\t\t\"    try {\\n\" + ", "+\t\t\t\"      if (dummy) {\\n\" + ", "+\t\t\t\"        if (other) {\\n\" + ", "+\t\t\t\"          throw new LocalException();\\n\" + // may launch new exception", "+\t\t\t\"        }\\n\" + ", "+\t\t\t\"        o = null;\\n\" + ", "+\t\t\t\"        throw new LocalException();\\n\" + // must launch new exception", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    catch (LocalException e) {\\n\" + ", "+\t\t\t\"      o.toString();\\n\" + // complain", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  class LocalException extends Exception {\\n\" + ", "+\t\t\t\"    private static final long serialVersionUID = 1L;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"\to.toString();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The variable o may be null\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df154cde2aa8f26a178c1454e3d1b085", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 176, "signatureBeforeChange": " \tpublic void _test0179_try_catch()", "signatureAfterChange": " public void test0559_try_catch()", "diff": ["-\t// TODO (maxime) fix", "-\tpublic void _test0179_try_catch() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t boolean dummy;\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t Object o = new Object();\\n\" + ", "-\t\t\t\t\"\t\t try {\\n\" + ", "-\t\t\t\t\"\t\t\t if (dummy) {\\n\" + ", "-\t\t\t\t\"\t\t\t   o = null;\\n\" + ", "-\t\t\t\t\"\t\t\t   throw new SubException();\\n\" + ", "-\t\t\t\t\"\t\t\t }\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t catch (LocalException e) {\\n\" + // must catch SubException", "-\t\t\t\t\"\t\t\t o.toString();\\n\" +", "-\t\t\t\t \t// complain: know o is null despite the lack of definite assignment", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t class LocalException extends Exception {\\n\" + ", "-\t\t\t\t\"\t\t private static final long serialVersionUID = 1L;\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t class SubException extends LocalException {\\n\" + ", "-\t\t\t\t\"\t\t private static final long serialVersionUID = 1L;\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"WARN\"", "-\t\t);", "-\t}", "+// null analysis - try/catch", "+public void test0559_try_catch() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  boolean dummy;\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    Object o = new Object();\\n\" + ", "+\t\t\t\"    try {\\n\" + ", "+\t\t\t\"      if (dummy) {\\n\" + ", "+\t\t\t\"        o = null;\\n\" + ", "+\t\t\t\"        throw new SubException();\\n\" + ", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    catch (LocalException e) {\\n\" + // must catch SubException", "+\t\t\t\"      o.toString();\\n\" + // complain NPE", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  class LocalException extends Exception {\\n\" + ", "+\t\t\t\"    private static final long serialVersionUID = 1L;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  class SubException extends LocalException {\\n\" + ", "+\t\t\t\"    private static final long serialVersionUID = 1L;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"\to.toString();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+//\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"The variable o may be null\\n\" +", "+\t\t// conservative flow analysis softens the error", "+\t\t\"----------\\n\");", "+}"]}], "num": 65891}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "878dfda0a88796cbaa421858180859e6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d419185f3b29d11df36171320cefa29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "8f43eabe1403ef4601307ecfeddf822a49b29c34", "commitAfterChange": "3091564ff71d95ca83672941f8a4ec3464344683", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic boolean boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\t\tif (this.superclass.id != T_JavaLangObject && !argumentType.isCompatibleWith(hasSubstitution ? Scope.substitute(substitution, this.superclass) : this.superclass)) {", "-\t\t    return false;", "+\t\tif (this.superclass.id != T_JavaLangObject) {", "+\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superclass) : this.superclass;", "+\t\t\tif (argumentType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "+\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeErasingTo((ReferenceBinding)substitutedSuperType.erasure());", "+\t\t\t\tif (match != null){", "+\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "+\t\t\t\t\tif (match.isRawType() && !substitutedSuperType.isRawType())", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t    return false;", "+\t\t\t}", "-\t        if (!argumentType.isCompatibleWith(hasSubstitution ? Scope.substitute(substitution, this.superInterfaces[i]) : this.superInterfaces[i])) {", "-\t\t\t\treturn false;", "-\t        }", "+\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces[i]) : this.superInterfaces[i];", "+\t\t\tif (argumentType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "+\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeErasingTo((ReferenceBinding)substitutedSuperType.erasure());", "+\t\t\t\tif (match != null){", "+\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "+\t\t\t\t\tif (match.isRawType() && !substitutedSuperType.isRawType())", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t    return false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c718c4b47868655862a3b1a20491953c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-", "-\t\tif (argumentType == TypeBinding.NULL || argumentType == this)", "+\t\tif (argumentType == TypeBinding.NULL || argumentType == this) {", "+\t\t}", "-\t\t\t\t\tReferenceBinding superclassBound = hasSubstitution ? (ReferenceBinding)Scope.substitute(substitution, this.superclass) : this.superclass;", "-\t\t\t\t\t\tif (superclassBound.id != TypeIds.T_JavaLangObject) {", "+\t\t\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superclass) : this.superclass;", "+\t\t\t\t\t\tif (substitutedSuperType.id != TypeIds.T_JavaLangObject) {", "-\t\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(superclassBound))", "+\t\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(superclassBound);", "+\t\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(substitutedSuperType);", "-\t\t\t\t\t\t\t\t\tif (superclassBound.isProvablyDistinct(match)) {", "+\t\t\t\t\t\t\t\t\tif (substitutedSuperType.isProvablyDistinct(match)) {", "-\t\t\t\t\t\t\t\t\tmatch =  superclassBound.findSuperTypeOriginatingFrom(wildcardBound);", "+\t\t\t\t\t\t\t\t\tmatch =  substitutedSuperType.findSuperTypeOriginatingFrom(wildcardBound);", "-\t\t\t\t\t\t\t\t\t\tif (!wildcardBound.isTypeVariable() && !superclassBound.isTypeVariable()) {", "+\t\t\t\t\t\t\t\t\t\tif (!wildcardBound.isTypeVariable() && !substitutedSuperType.isTypeVariable()) {", "-\t\t\t\t\tReferenceBinding[] superInterfaceBounds = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces) : this.superInterfaces;", "-\t\t\t\t\tint length = superInterfaceBounds.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tTypeBinding superInterfaceBound = superInterfaceBounds[i];", "+\t\t\t\t\tfor (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "+\t\t\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces[i]) : this.superInterfaces[i];", "-\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(superInterfaceBound))", "+\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(superInterfaceBound);", "+\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(substitutedSuperType);", "-\t\t\t\t\t\t\t\tif (superInterfaceBound.isProvablyDistinct(match)) {", "+\t\t\t\t\t\t\t\tif (substitutedSuperType.isProvablyDistinct(match)) {"]}], "num": 52514}
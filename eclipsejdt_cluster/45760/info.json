{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bfc0c496a9fb55f873e23e5d381c977", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a097b8e19a33f696d0464c9986b87c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tprivate void updateClasspathMarkers()", "signatureAfterChange": " \tprivate void updateClasspathMarkers(Map preferredClasspaths, Map preferredOutputs)", "diff": ["-\tprivate void updateClasspathMarkers() {", "-\t\ttry {", "-\t\t\tif (!ResourcesPlugin.getWorkspace().isAutoBuilding()) {", "-\t\t\t\tIterator iterator = this.rootsToRefresh.iterator();", "-\t\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tJavaProject project = (JavaProject)iterator.next();", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t // force classpath marker refresh", "-\t\t\t\t\t\tproject.getResolvedClasspath(", "-\t\t\t\t\t\t\ttrue, // ignoreUnresolvedEntry", "-\t\t\t\t\t\t\ttrue); // generateMarkerOnError", "-\t\t\t\t\t\t", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// project doesn't exist: ignore", "+\tprivate void updateClasspathMarkers(Map preferredClasspaths, Map preferredOutputs) {", "+\t\t", "+\t\tif (!this.rootsToRefresh.isEmpty()) {", "+\t\t\ttry {", "+\t\t\t\tif (!ResourcesPlugin.getWorkspace().isAutoBuilding()) {", "+\t\t\t\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "+\t\t\t\t\tIProject[] projects = workspaceRoot.getProjects();", "+\t\t\t\t\tint length = projects.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++){", "+\t\t\t\t\t\tIProject project = projects[i];", "+\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true); // allowed to reuse model cache", "+\t\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "+\t\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && this.rootsToRefresh.contains(entry.getPath())) {", "+\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\t\t\t// project no longer exists", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t// update all cycle markers", "+\t\t\t\tJavaProject.updateAllCycleMarkers(preferredClasspaths);", "+\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t// project no longer exists", "+\t\t\t} finally {", "+\t\t\t\tthis.rootsToRefresh = new HashSet();", "-\t\t\tif (!this.rootsToRefresh.isEmpty()){", "-\t\t\t\ttry {", "-\t\t\t\t\t// update all cycle markers", "-\t\t\t\t\tJavaProject.updateAllCycleMarkers();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// one of the projects doesn't exist: ignore", "-\t\t\t\t}", "-\t\t\t}\t\t\t\t", "-\t\t} finally {", "-\t\t\tthis.rootsToRefresh = new HashSet();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aec4556acfa9900ae44a318cd64d1205", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5020b77badf5ed685242230a1e92cfedde9d0095", "commitAfterChange": "4f8203818eae84aa9b2839be10eb10037835da39", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta)", "diff": ["-", "+\t", "-\t\t\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\t\t\tIProject[] projects = workspaceRoot.getProjects();", "-\t\t\t\tint length = projects.length;", "-\t\t\t\tfor (int i = 0; i < length; i++){", "-\t\t\t\t\tIProject project = projects[i];", "-\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tIPath projectPath = project.getFullPath();", "-\t\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true); // allowed to reuse model cache", "-\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "-\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\t\t\tswitch (entry.getEntryKind()) {", "-\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:", "-\t\t\t\t\t\t\t\t\t\tif (affectedProjects.contains(entry.getPath())) {", "-\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "-\t\t\t\t\t\t\t\t\t\tIPath entryPath = entry.getPath();", "-\t\t\t\t\t\t\t\t\t\tIPath libProjectPath = entryPath.removeLastSegments(entryPath.segmentCount()-1);", "-\t\t\t\t\t\t\t\t\t\tif (!libProjectPath.equals(projectPath) // if library contained in another project", "-\t\t\t\t\t\t\t\t\t\t\t\t&& affectedProjects.contains(libProjectPath)) {", "-\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\tif (!ResourcesPlugin.getWorkspace().isAutoBuilding()) {", "+\t\t\t\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "+\t\t\t\t\tIProject[] projects = workspaceRoot.getProjects();", "+\t\t\t\t\tint length = projects.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++){", "+\t\t\t\t\t\tIProject project = projects[i];", "+\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tIPath projectPath = project.getFullPath();", "+\t\t\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true); // allowed to reuse model cache", "+\t\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "+\t\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\t\t\t\tswitch (entry.getEntryKind()) {", "+\t\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:", "+\t\t\t\t\t\t\t\t\t\t\tif (affectedProjects.contains(entry.getPath())) {", "+\t\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\t\t\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\t\t\t\t\t\t\tIPath libProjectPath = entryPath.removeLastSegments(entryPath.segmentCount()-1);", "+\t\t\t\t\t\t\t\t\t\t\tif (!libProjectPath.equals(projectPath) // if library contained in another project", "+\t\t\t\t\t\t\t\t\t\t\t\t\t&& affectedProjects.contains(libProjectPath)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\t\t\t// project no longer exists", "-\t\t\t\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t\t\t\t\t// project no longer exists"]}], "num": 45760}
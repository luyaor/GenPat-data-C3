{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0e088d1fbe2bd2481ece3c687bba03f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59cb75281c78158cc8a2fd9c8d5e30af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "a8939af811304c63be0e7f585bcaea4e93cb581f", "commitAfterChange": "707ad1739bb7e638a614100c483b30be80395fba", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic void test077()", "signatureAfterChange": " \tpublic void test077()", "diff": ["+\t\t\t\"1. ERROR in I.java (at line 8)\\n\" + ", "+\t\t\t\"\tinterface P extends L, M, N {}\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"The return type is incompatible with N.getI(), M.getI(), L.getI()\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in I.java (at line 10)\\n\" + ", "+\t\t\t\"\tabstract class Y implements L, M, N {}\\n\" + ", "+\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\"The return type is incompatible with N.getI(), M.getI(), L.getI()\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* See addtional comments in https://bugs.eclipse.org/bugs/show_bug.cgi?id=122881", "+\t\t\t\"----------\\n\" + ", "+*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69fba2abc3bb606373eba0f8bf561f0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test038() throws Exception", "signatureAfterChange": " \t \tpublic void test038_field() throws Exception", "diff": ["+\t", "+\tpublic void test038_field() throws Exception {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"class AA { class BB<T> {}}\" + ", "+\t\t\t\t\"class X {\\n\" +", "+\t\t\t\t\"  AA.@A BB field;\\n\" +", "+", "+\t\t\t\t\"A.java\",", "+\t\t\t\t\"import java.lang.annotation.*;\\n\" + ", "+\t\t\t\t\"@Target(ElementType.TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface A { }\\n\",", "+\t\t},", "+\t\t\"\");", "+\t\tString expectedOutput =", "+\t\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\t\"      #8 @A(\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [INNER_TYPE]\\n\" + ", "+\t\t\t\t\"      )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}", "-\t// make sure annotation without target appears twice when set on a method declaration", "-\tpublic void test038() throws Exception {"]}], "num": 34140}
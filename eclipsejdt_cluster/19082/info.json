{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2364df6921e978b520095fbc63b8ce72", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13e3712cf44f4a0bfb8c2fa3e572abc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "cdc10237964b5e1bb52dd155c2b2fa0b6040fe90", "commitAfterChange": "4c08e9806ec4b65134dfc5eb7deeaa7251e9bb4e", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "  \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": "  \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\t} else if (parent instanceof AssertStatement) {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=274466", "+\t\t\t// If the assertExpression is same as the node , then the assistNode is the conditional part of the assert statement", "+\t\t\tAssertStatement assertStatement = (AssertStatement) parent;", "+\t\t\tif (assertStatement.assertExpression == node) {", "+\t\t\t\taddExpectedType(TypeBinding.BOOLEAN, scope);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "594821c0dda8a56af649ef0bfe99caad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "9e5742b61aded25431e479f58d12ba05749a0cfe", "commitAfterChange": "375d61cac6e6ceaf21de776dc7872fd0618a786e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["+\t\tif (binaryExpression instanceof CombinedBinaryExpression) {", "+\t\t\tCombinedBinaryExpression expression = (CombinedBinaryExpression) binaryExpression;", "+\t\t\tif (expression.referencesTable != null) {", "+\t\t\t\treturn this.visit(expression, scope);", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 19082}
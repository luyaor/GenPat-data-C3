{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1aa15fac669f148bd83d81535b0d467e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "738f4b7452f6e7eec14847c238dd9d72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "85a51230859ba76a62ce4d566f4cbd47aac06488", "commitAfterChange": "3885d0327ef37626bb68aa8a0a9e1a4a5bb4ba7a", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 65, "signatureBeforeChange": " private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer)", "signatureAfterChange": " private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs)", "diff": ["-\t\t// need a minimum 1 char", "-\t\tif (start >= string.length) {", "-\t\t\tthrow new IllegalArgumentException();", "+ */", "+private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs) {", "+\t// need a minimum 1 char", "+\tif (start >= string.length) {", "+\t\tthrow new IllegalArgumentException();", "+\t}", "+\tchar c = string[start];", "+\tif (isVarArgs) {", "+\t\tswitch (c) {", "+\t\t\tcase C_ARRAY :", "+\t\t\t\treturn appendArrayTypeSignature(string, start, fullyQualifyTypeNames, buffer, true);", "+\t\t\tcase C_RESOLVED :", "+\t\t\tcase C_UNRESOLVED :", "+\t\t\tcase C_TYPE_VARIABLE :", "+\t\t\tcase C_BOOLEAN :", "+\t\t\tcase C_BYTE :", "+\t\t\tcase C_CHAR :", "+\t\t\tcase C_DOUBLE :", "+\t\t\tcase C_FLOAT :", "+\t\t\tcase C_INT :", "+\t\t\tcase C_LONG :", "+\t\t\tcase C_SHORT :", "+\t\t\tcase C_VOID :", "+\t\t\tcase C_STAR:", "+\t\t\tcase C_EXTENDS:", "+\t\t\tcase C_SUPER:", "+\t\t\tdefault:", "+\t\t\t\tthrow new IllegalArgumentException(); // a var args is an array type", "-\t\tchar c = string[start];", "+\t} else {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6b90580add1a89edb5ace158a571195", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "1639bd6af95429f315066bc991f1a39635a7a06b", "commitAfterChange": "39fac05fa8b77fcaf96c0cb04f6cdf322c685cfd", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " private final boolean atReferenceExpression()", "signatureAfterChange": " private final boolean atReferenceExpression()", "diff": ["-\treturn getVanguardParser().parse(TokenNameCOLON_COLON);", "+\tswitch (this.lookBack[1]) {", "+\t\tcase TokenNameIdentifier:", "+\t\t\tswitch (this.lookBack[0]) {", "+\t\t\t\tcase TokenNameSEMICOLON:  // for (int i = 0; i < 10; i++);", "+\t\t\t\tcase TokenNameRBRACE:     // class X { void foo() {} X<String> x = null; }", "+\t\t\t\tcase TokenNameclass:      // class X<T> {}", "+\t\t\t\tcase TokenNameinterface:  // interface I<T> {}", "+\t\t\t\tcase TokenNameenum:       // enum E<T> {}", "+\t\t\t\tcase TokenNamefinal:      // final Collection<String>", "+\t\t\t\tcase TokenNameLESS:       // Collection<IScalarData<AbstractData>>", "+\t\t\t\tcase TokenNameGREATER:    // public <T> List<T> foo() { /* */ }", "+\t\t\t\tcase TokenNameRIGHT_SHIFT:// static <T extends SelfType<T>> List<T> makeSingletonList(T t) { /* */ }", "+\t\t\t\tcase TokenNamenew:        // new ArrayList<String>();", "+\t\t\t\tcase TokenNamepublic:     // public List<String> foo() {}", "+\t\t\t\tcase TokenNameabstract:   // abstract List<String> foo() {}", "+\t\t\t\tcase TokenNameprivate:    // private List<String> foo() {}", "+\t\t\t\tcase TokenNameprotected:  // protected List<String> foo() {}", "+\t\t\t\tcase TokenNamestatic:     // public static List<String> foo() {}", "+\t\t\t\tcase TokenNameextends:    // <T extends Y<Z>>", "+\t\t\t\tcase TokenNamesuper:      // ? super Context<N>", "+\t\t\t\tcase TokenNameAND:        // T extends Object & Comparable<? super T>", "+\t\t\t\tcase TokenNameimplements: // class A implements I<Z>", "+\t\t\t\tcase TokenNamethrows:     // throws Y<Z>", "+\t\t\t\tcase TokenNameAT:         // @Deprecated <T> void foo() {} ", "+\t\t\t\tcase TokenNameinstanceof: // if (o instanceof List<E>[])  ", "+\t\t\t\t\treturn false;", "+\t\t\t\tdefault:", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase TokenNameNotAToken: // Not kosher, don't touch.", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\treturn false;", "+\t}", "+\treturn this.activeParser.atConflictScenario(TokenNameLESS) && getVanguardParser().parse(TokenNameCOLON_COLON);"]}], "num": 19851}
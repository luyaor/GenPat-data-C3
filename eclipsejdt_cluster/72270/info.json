{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cdf4365dfea09b6e08553da86ffc9f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37716ba265aeffff17b0833d5b1e6b9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "c232f63e38d9fdcfc4841ab866a4e36091735ec4", "commitAfterChange": "8dc325b5ad83fe486573fca06bedec7b37f7c533", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.constant = Constant.NotAConstant;", "-\t\tTypeBinding conditionType = this.condition.resolveTypeExpecting(scope, TypeBinding.BOOLEAN);", "-\t\tthis.condition.computeConversion(scope, TypeBinding.BOOLEAN, conditionType);", "-", "-\t\tif (this.valueIfTrue instanceof CastExpression) this.valueIfTrue.bits |= DisableUnnecessaryCastCheck; // will check later on", "-\t\t\t\t/* 15.25.3 : Where a poly reference conditional expression appears in a context of a particular kind with target ", "-\t\t\t\t   type T (5), its second and third operand expressions similarly appear in a context of the same kind with target", "-\t\t\t\t   type T. We eagerly propagate the context and target type here, but that should be harmless. Nonpoly expressions", "-\t\t\t\t   won't respond to it at all. If someone down below does get influenced, then the conditional is poly.", "-\t\t\t\t*/", "-", "-\t\tTypeBinding originalValueIfTrueType = this.valueIfTrue.resolveType(scope);", "+\t\tif (this.constant != Constant.NotAConstant) {", "+\t\t\tthis.constant = Constant.NotAConstant;", "-\t\tif (this.valueIfFalse instanceof CastExpression) this.valueIfFalse.bits |= DisableUnnecessaryCastCheck; // will check later on", "-\t\tTypeBinding originalValueIfFalseType = this.valueIfFalse.resolveType(scope);", "+\t\t\tTypeBinding conditionType = this.condition.resolveTypeExpecting(scope, TypeBinding.BOOLEAN);", "+\t\t\tthis.condition.computeConversion(scope, TypeBinding.BOOLEAN, conditionType);", "-\t\tif (conditionType == null || originalValueIfTrueType == null || originalValueIfFalseType == null)", "-\t\t\treturn null;", "+\t\t\tif (this.valueIfTrue instanceof CastExpression) this.valueIfTrue.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\t\tthis.originalValueIfTrueType = this.valueIfTrue.resolveType(scope);", "-\t\tif (use18specifics && this.expectedType != null) { // so the story is still untold for invocations.", "+\t\t\tif (this.valueIfFalse instanceof CastExpression) this.valueIfFalse.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\t\tthis.originalValueIfFalseType = this.valueIfFalse.resolveType(scope);", "+", "+\t\t\tif (conditionType == null || this.originalValueIfTrueType == null || this.originalValueIfFalseType == null)", "+\t\t\t\treturn null;", "-\t\t\t    TypeBinding trueType = originalValueIfTrueType;", "-\t\t\t    TypeBinding falseType = originalValueIfFalseType;", "-\t\t\t    if (this.valueIfTrue instanceof MessageSend) {", "-\t\t\t    \tMessageSend message = (MessageSend) this.valueIfTrue;", "-\t\t\t    \tif (message.binding instanceof ParameterizedGenericMethodBinding) {", "-\t\t\t    \t\tParameterizedGenericMethodBinding pgmb = (ParameterizedGenericMethodBinding) message.binding;", "-\t\t\t    \t\tif (pgmb.inferredReturnType) {", "-\t\t\t    \t\t\ttrueType = pgmb.original().returnType;", "-\t\t\t    \t\t}", "-\t\t\t    \t}", "-\t\t\t    }", "-\t\t\t    if (this.valueIfFalse instanceof MessageSend) {", "-\t\t\t    \tMessageSend message = (MessageSend) this.valueIfFalse;", "-\t\t\t    \tif (message.binding instanceof ParameterizedGenericMethodBinding) {", "-\t\t\t    \t\tParameterizedGenericMethodBinding pgmb = (ParameterizedGenericMethodBinding) message.binding;", "-\t\t\t    \t\tif (pgmb.inferredReturnType) {", "-\t\t\t    \t\t\tfalseType = pgmb.original().returnType;", "-\t\t\t    \t\t}", "-\t\t\t    \t}", "-\t\t\t    }", "-\t\t\t    ", "-\t\t\t    if (!trueType.isPrimitiveOrBoxedPrimitiveType() || !falseType.isPrimitiveOrBoxedPrimitiveType()) // reference conditional ==> poly expression.", "-\t\t\t    \tthis.isPolyExpression = true;", "+\t\t\tif (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE || this.originalValueIfFalseType.kind() == Binding.POLY_TYPE) {", "+\t\t\t\tthis.isPolyExpression = true;", "+\t\t\t\treturn new PolyTypeBinding(this);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE)", "+\t\t\t\tthis.originalValueIfTrueType = this.valueIfTrue.resolveType(scope);", "+\t\t\tif (this.originalValueIfFalseType.kind() == Binding.POLY_TYPE)", "+\t\t\t\tthis.originalValueIfFalseType = this.valueIfFalse.resolveType(scope);", "-\t\tTypeBinding valueIfTrueType = originalValueIfTrueType;", "-\t\tTypeBinding valueIfFalseType = originalValueIfFalseType;", "+\t\tTypeBinding valueIfTrueType = this.originalValueIfTrueType;", "+\t\tTypeBinding valueIfFalseType = this.originalValueIfFalseType;", "-\t\t\tthis.valueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "-\t\t\tthis.valueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "+\t\t\tthis.valueIfTrue.computeConversion(scope, valueIfTrueType, this.originalValueIfTrueType);", "+\t\t\tthis.valueIfFalse.computeConversion(scope, valueIfFalseType, this.originalValueIfFalseType);", "-\t\t\t\tthis.valueIfTrue.computeConversion(scope, TypeBinding.SHORT, originalValueIfTrueType);", "-\t\t\t\tthis.valueIfFalse.computeConversion(scope, TypeBinding.SHORT, originalValueIfFalseType);", "+\t\t\t\tthis.valueIfTrue.computeConversion(scope, TypeBinding.SHORT, this.originalValueIfTrueType);", "+\t\t\t\tthis.valueIfFalse.computeConversion(scope, TypeBinding.SHORT, this.originalValueIfFalseType);", "-\t\t\t\tthis.valueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "-\t\t\t\tthis.valueIfFalse.computeConversion(scope, valueIfTrueType, originalValueIfFalseType);", "+\t\t\t\tthis.valueIfTrue.computeConversion(scope, valueIfTrueType, this.originalValueIfTrueType);", "+\t\t\t\tthis.valueIfFalse.computeConversion(scope, valueIfTrueType, this.originalValueIfFalseType);", "-\t\t\t\tthis.valueIfTrue.computeConversion(scope, valueIfFalseType, originalValueIfTrueType);", "-\t\t\t\tthis.valueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "+\t\t\t\tthis.valueIfTrue.computeConversion(scope, valueIfFalseType, this.originalValueIfTrueType);", "+\t\t\t\tthis.valueIfFalse.computeConversion(scope, valueIfFalseType, this.originalValueIfFalseType);", "-\t\t\t\tthis.valueIfTrue.computeConversion(scope, TypeBinding.INT, originalValueIfTrueType);", "-\t\t\t\tthis.valueIfFalse.computeConversion(scope, TypeBinding.INT, originalValueIfFalseType);", "+\t\t\t\tthis.valueIfTrue.computeConversion(scope, TypeBinding.INT, this.originalValueIfTrueType);", "+\t\t\t\tthis.valueIfFalse.computeConversion(scope, TypeBinding.INT, this.originalValueIfFalseType);", "-\t\t\t\tthis.valueIfTrue.computeConversion(scope, TypeBinding.LONG, originalValueIfTrueType);", "-\t\t\t\tthis.valueIfFalse.computeConversion(scope, TypeBinding.LONG, originalValueIfFalseType);", "+\t\t\t\tthis.valueIfTrue.computeConversion(scope, TypeBinding.LONG, this.originalValueIfTrueType);", "+\t\t\t\tthis.valueIfFalse.computeConversion(scope, TypeBinding.LONG, this.originalValueIfFalseType);", "-\t\t\t\tthis.valueIfTrue.computeConversion(scope, TypeBinding.FLOAT, originalValueIfTrueType);", "-\t\t\t\tthis.valueIfFalse.computeConversion(scope, TypeBinding.FLOAT, originalValueIfFalseType);", "+\t\t\t\tthis.valueIfTrue.computeConversion(scope, TypeBinding.FLOAT, this.originalValueIfTrueType);", "+\t\t\t\tthis.valueIfFalse.computeConversion(scope, TypeBinding.FLOAT, this.originalValueIfFalseType);", "-\t\t\tthis.valueIfTrue.computeConversion(scope, TypeBinding.DOUBLE, originalValueIfTrueType);", "-\t\t\tthis.valueIfFalse.computeConversion(scope, TypeBinding.DOUBLE, originalValueIfFalseType);", "+\t\t\tthis.valueIfTrue.computeConversion(scope, TypeBinding.DOUBLE, this.originalValueIfTrueType);", "+\t\t\tthis.valueIfFalse.computeConversion(scope, TypeBinding.DOUBLE, this.originalValueIfFalseType);", "-\t\t\t\tthis.valueIfTrue.computeConversion(scope, commonType, originalValueIfTrueType);", "-\t\t\t\tthis.valueIfFalse.computeConversion(scope, commonType, originalValueIfFalseType);", "+\t\t\t\tthis.valueIfTrue.computeConversion(scope, commonType, this.originalValueIfTrueType);", "+\t\t\t\tthis.valueIfFalse.computeConversion(scope, commonType, this.originalValueIfFalseType);", "-\t\t\t\tthis.valueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "-\t\t\t\tthis.valueIfFalse.computeConversion(scope, valueIfTrueType, originalValueIfFalseType);", "+\t\t\t\tthis.valueIfTrue.computeConversion(scope, valueIfTrueType, this.originalValueIfTrueType);", "+\t\t\t\tthis.valueIfFalse.computeConversion(scope, valueIfTrueType, this.originalValueIfFalseType);", "-\t\t\t\tthis.valueIfTrue.computeConversion(scope, valueIfFalseType, originalValueIfTrueType);", "-\t\t\t\tthis.valueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "+\t\t\t\tthis.valueIfTrue.computeConversion(scope, valueIfFalseType, this.originalValueIfTrueType);", "+\t\t\t\tthis.valueIfFalse.computeConversion(scope, valueIfFalseType, this.originalValueIfFalseType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b00d60e217dd2ad00f7eacaa266890", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "1b80cae94595518122618b458eed60915f76d171", "commitAfterChange": "92d6141bb346285ff13c588faa5a059cb9f83b3d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif ((bits & IsReachable) == 0) {", "+\t\tif ((this.bits & ASTNode.IsReachable) == 0) {", "-\t\t\tthis.anyExceptionLabels = NO_EXCEPTION_HANDLER;", "+\t\t\tthis.anyExceptionLabels = SubRoutineStatement.NO_EXCEPTION_HANDLER;", "-\t\tif (subRoutineStartLabel == null) { ", "+\t\tif (this.subRoutineStartLabel == null) { ", "-\t\t\t} else if (scope.compilerOptions().inlineJsrBytecode) {", "+\t\t\t} else if (this.scope.compilerOptions().inlineJsrBytecode) {", "-\t\t\t\tcatchArguments == null ? 0 : catchArguments.length];", "+\t\t\t\tthis.catchArguments == null ? 0 : this.catchArguments.length];", "-\t\t\texceptionLabels[i] = new ExceptionLabel(codeStream, catchArguments[i].binding.type);", "+\t\t\texceptionLabels[i] = new ExceptionLabel(codeStream, this.catchArguments[i].binding.type);", "-\t\tif (subRoutineStartLabel != null) {", "-\t\t\tsubRoutineStartLabel.initialize(codeStream);", "+\t\tif (this.subRoutineStartLabel != null) {", "+\t\t\tthis.subRoutineStartLabel.initialize(codeStream);", "-\t\ttryBlock.generateCode(scope, codeStream);", "+\t\tthis.tryBlock.generateCode(this.scope, codeStream);", "-\t\t\tif (!tryBlockExit) {", "+\t\t\tif (!this.tryBlockExit) {", "-\t\t\t\t\t\tcodeStream.goto_(subRoutineStartLabel);", "+\t\t\t\t\t\tcodeStream.goto_(this.subRoutineStartLabel);", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(tryBlock.scope, position);", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(this.tryBlock.scope, position);", "-\t\t\tif (catchArguments != null) {", "+\t\t\tif (this.catchArguments != null) {", "-\t\t\t\t\tif (preTryInitStateIndex != -1) {", "-\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, preTryInitStateIndex);", "+\t\t\t\t\tif (this.preTryInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "-\t\t\t\t\tif ((catchVar = catchArguments[i].binding).resolvedPosition != -1) {", "+\t\t\t\t\tif ((catchVar = this.catchArguments[i].binding).resolvedPosition != -1) {", "-\t\t\t\t\tcodeStream.recordPositionsFrom(varPC, catchArguments[i].sourceStart);", "+\t\t\t\t\tcodeStream.recordPositionsFrom(varPC, this.catchArguments[i].sourceStart);", "-\t\t\t\t\tcatchBlocks[i].generateCode(scope, codeStream);", "-\t\t\t\t\tif (!catchExits[i]) {", "+\t\t\t\t\tthis.catchBlocks[i].generateCode(this.scope, codeStream);", "+\t\t\t\t\tif (!this.catchExits[i]) {", "-\t\t\t\t\t\t\t\tcodeStream.goto_(subRoutineStartLabel);", "+\t\t\t\t\t\t\t\tcodeStream.goto_(this.subRoutineStartLabel);", "-\t\t\tif (subRoutineStartLabel != null) {", "-\t\t\t\tcodeStream.pushOnStack(scope.getJavaLangThrowable());", "-\t\t\t\tif (preTryInitStateIndex != -1) {", "+\t\t\tif (this.subRoutineStartLabel != null) {", "+\t\t\t\tcodeStream.pushOnStack(this.scope.getJavaLangThrowable());", "+\t\t\t\tif (this.preTryInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, preTryInitStateIndex);", "+\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "-\t\t\t\t\t\tcodeStream.store(anyExceptionVariable, false);", "-\t\t\t\t\t\tcodeStream.jsr(subRoutineStartLabel);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, finallyBlock.sourceStart);", "+\t\t\t\t\t\tcodeStream.store(this.anyExceptionVariable, false);", "+\t\t\t\t\t\tcodeStream.jsr(this.subRoutineStartLabel);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, this.finallyBlock.sourceStart);", "-\t\t\t\t\t\tcodeStream.throwAnyException(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, finallyBlock.sourceEnd);", "-\t\t\t\t\t\tsubRoutineStartLabel.place();", "-\t\t\t\t\t\tcodeStream.pushOnStack(scope.getJavaLangThrowable());", "+\t\t\t\t\t\tcodeStream.throwAnyException(this.anyExceptionVariable);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, this.finallyBlock.sourceEnd);", "+\t\t\t\t\t\tthis.subRoutineStartLabel.place();", "+\t\t\t\t\t\tcodeStream.pushOnStack(this.scope.getJavaLangThrowable());", "-\t\t\t\t\t\tcodeStream.store(returnAddressVariable, false);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, finallyBlock.sourceStart);", "-\t\t\t\t\t\tfinallyBlock.generateCode(scope, codeStream);", "+\t\t\t\t\t\tcodeStream.store(this.returnAddressVariable, false);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, this.finallyBlock.sourceStart);", "+\t\t\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "-\t\t\t\t\t\tcodeStream.ret(returnAddressVariable.resolvedPosition);", "+\t\t\t\t\t\tcodeStream.ret(this.returnAddressVariable.resolvedPosition);", "-\t\t\t\t\t\t\tfinallyBlock.sourceEnd);", "+\t\t\t\t\t\t\tthis.finallyBlock.sourceEnd);", "-\t\t\t\t\t\tcodeStream.store(anyExceptionVariable, false);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, finallyBlock.sourceStart);", "+\t\t\t\t\t\tcodeStream.store(this.anyExceptionVariable, false);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, this.finallyBlock.sourceStart);", "-\t\t\t\t\t\tcodeStream.throwAnyException(anyExceptionVariable);", "-\t\t\t\t\t\tsubRoutineStartLabel.place();", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, finallyBlock.sourceEnd);", "+\t\t\t\t\t\tcodeStream.throwAnyException(this.anyExceptionVariable);", "+\t\t\t\t\t\tthis.subRoutineStartLabel.place();", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, this.finallyBlock.sourceEnd);", "-\t\t\t\t\t\tsubRoutineStartLabel.place();", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, finallyBlock.sourceStart);", "-\t\t\t\t\t\tfinallyBlock.generateCode(scope, codeStream);", "+\t\t\t\t\t\tthis.subRoutineStartLabel.place();", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, this.finallyBlock.sourceStart);", "+\t\t\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "-\t\t\t\t\t\t\tcodeStream.jsr(subRoutineStartLabel);", "+\t\t\t\t\t\t\tcodeStream.jsr(this.subRoutineStartLabel);", "-\t\t\t\t\t\t\t\tfinallyBlock.sourceEnd);\t", "+\t\t\t\t\t\t\t\tthis.finallyBlock.sourceEnd);\t", "-\t\t\t\t\t\t\tif (preTryInitStateIndex != -1) {", "-\t\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, preTryInitStateIndex);", "+\t\t\t\t\t\t\tif (this.preTryInitStateIndex != -1) {", "+\t\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "-\t\t\t\t\t\t\tfinallyBlock.generateCode(scope, codeStream);", "+\t\t\t\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "-\t\t\tif (subRoutineStartLabel != null) {", "-\t\t\t\tfinallyBlock.generateCode(scope, codeStream);", "+\t\t\tif (this.subRoutineStartLabel != null) {", "+\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "-\t\tif (mergedInitStateIndex != -1) {", "-\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "-\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "+\t\tif (this.mergedInitStateIndex != -1) {", "+\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.mergedInitStateIndex);", "+\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.mergedInitStateIndex);"]}], "num": 72270}
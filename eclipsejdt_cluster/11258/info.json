{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c66391df92b5afe8745cbb5a9969cd26", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40fa8fcbc9c90d500b66c8470b39caf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "0d5d4b61217e2b3559edf7001ae24c184bef94b8", "commitAfterChange": "2ead4bdcbfe85e4d5b336d70f2ec655c30027212", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " private boolean isPositionedCorrectly(IJavaElement element)", "signatureAfterChange": " private boolean isPositionedCorrectly(IJavaElement element)", "diff": ["-\tif (oldListItem == null)", "-\t\treturn false;", "-\tIJavaElement oldPrevious = oldListItem.previous;", "+\tif (oldListItem == null) return false;", "+\t", "-\tif (newListItem == null)", "-\t\treturn false;", "-\tIJavaElement newPrevious = newListItem.previous; ", "-\tif (oldPrevious == newPrevious)", "-\t\treturn true;", "-\tIJavaElement lastNewPrevious = null;", "-\twhile(lastNewPrevious != newPrevious) {", "-\t\tif (isIdentical((JavaElement)oldPrevious, (JavaElement)newPrevious))", "-\t\t\treturn true;", "-\t\tlastNewPrevious = newPrevious;", "-\t\t// if newPrevious is null at this time we should exit the loop.", "-\t\tif (newPrevious == null) break;", "-\t\tnewPrevious = (this.getNewPosition(newPrevious)).previous;", "+\tif (newListItem == null) return false;", "+\t", "+\tIJavaElement oldPrevious = oldListItem.previous;", "+\tIJavaElement newPrevious = newListItem.previous;", "+\tif (oldPrevious == null) {", "+\t\treturn newPrevious == null;", "+\t} else {", "+\t\treturn oldPrevious.equals(newPrevious);", "-\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef3990d06715e17e71f407da50773739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "349b245f426a9d65e4f19eb6b518fad225b1dccb", "commitAfterChange": "f7529141d7e838cb41f5908a7631797fc0e75f0a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\t} ", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);"]}], "num": 11258}
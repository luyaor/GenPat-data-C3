{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd0cdccef1efb4a7a042f22e1e43f42b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90407f88d9831c6561bcff7f10661a11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "90329a8061aecf116ef817e3a00ea13f48a88e85", "commitAfterChange": "f49548d71766106245f8b2c861ede2b817c0e68f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t@Override \tpublic boolean isAssignable(TypeMirror t1, TypeMirror t2)", "signatureAfterChange": " \t@Override \tpublic boolean isAssignable(TypeMirror t1, TypeMirror t2)", "diff": ["-\t\treturn ((TypeBinding)b1).isCompatibleWith((TypeBinding)b2);", "+\t\tif (((TypeBinding)b1).isCompatibleWith((TypeBinding)b2)) {", "+\t\t\treturn true;", "+\t\t}", "+\t\t", "+\t\tTypeBinding convertedType = _env.getLookupEnvironment().computeBoxingType((TypeBinding)b1);", "+\t\treturn null != convertedType && convertedType.isCompatibleWith((TypeBinding)b2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8653f0dbbf3dba5c89859f32e6894ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c4baf766be166b04f595eec5cebbd2a64f399daa", "commitAfterChange": "6574ecf5c4b5647220e5c6028073411e3f107ad7", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods)", "signatureAfterChange": "  \tpublic int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param)", "diff": ["+\tpublic int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param) {", "+\t\tif (arg.isCompatibleWith(param))", "+\t\t\treturn COMPATIBLE;", "+\t\t", "+\t\tif (arg.isBaseType() != param.isBaseType()) {", "+\t\t\tTypeBinding convertedType = environment().computeBoxingType(arg);", "+\t\t\tif (convertedType == param || convertedType.isCompatibleWith(param))", "+\t\t\t\treturn AUTOBOX_COMPATIBLE;", "+\t\t}", "+\t\treturn NOT_COMPATIBLE;", "+\t}"]}], "num": 1251}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ec70bde67a41ecbad2de1ff371de0ff", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b8d1c8d50db6161db0a9b8faae31af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "c73dc602d3a7bc78582f5168e9ef91cc511da90a", "commitAfterChange": "802408127f6c9d056b74d013d85acd8e4ce01d9f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tint expressionTypeId = expressionType.id;", "-\t\tif (expressionTypeId > 15) {", "+\t\tint expressionTypeID = expressionType.id;", "+\t\t// autoboxing support", "+\t\tboolean use15specifics = scope.environment().options.sourceLevel >= JDK1_5;", "+\t\tboolean unboxedExpression = false;", "+\t\tif (use15specifics) {", "+\t\t\tif (!expressionType.isBaseType()) {", "+\t\t\t\tint unboxedID = scope.computeBoxingType(expressionType).id;", "+\t\t\t\tif (unboxedID != expressionTypeID) {", "+\t\t\t\t\texpressionTypeID = unboxedID;", "+\t\t\t\t\tunboxedExpression = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}\t\t", "+\t\tif (expressionTypeID > 15) {", "-\t\tint operatorSignature = OperatorSignatures[tableId][(expressionTypeId << 4) + expressionTypeId];", "-\t\tthis.expression.implicitConversion = operatorSignature >>> 12;", "+\t\tint operatorSignature = OperatorSignatures[tableId][(expressionTypeID << 4) + expressionTypeID];", "+\t\tthis.expression.implicitConversion = (unboxedExpression ? UNBOXING : 0) | (operatorSignature >>> 12);", "-\t\t\t\tif (expressionTypeId != T_undefined)", "+\t\t\t\tif (expressionTypeID != T_undefined)", "-\t\t\t\t\texpressionTypeId,", "+\t\t\t\t\texpressionTypeID,", "-\t\t\tCastExpression.checkNeedForArgumentCast(scope, tableId, operatorSignature, this.expression, expressionTypeId);", "+\t\t\tCastExpression.checkNeedForArgumentCast(scope, tableId, operatorSignature, this.expression, expressionTypeID);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6529b5e207f78b091d510e56247b2ae7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "05bd6362ebc3db4accc519070d9c8a9ecd2a788b", "commitAfterChange": "905cf94d64f942e28e58015355605b9b9383c577", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t", "+\t\tboolean use15specifics = scope.environment().options.sourceLevel >= JDK1_5;", "+\t\t\t} else if (use15specifics) { // unboxing - only exact match is allowed", "+\t\t\t\tif (scope.computeBoxingType(expressionType) == castType) {", "+\t\t\t\t\t// TODO (philippe) could tagAsUnnecessaryCast(scope, castType);  ", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t} else if (use15specifics && expressionType.isBaseType()) { // boxing - only exact match is allowed", "+\t\t\tif (scope.computeBoxingType(castType) == expressionType) {", "+\t\t\t\t// TODO (philippe) could tagAsUnnecessaryCast(scope, castType);  ", "+\t\t\t\treturn true;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79c3f6aa091baba2a7fb9b405ddc739f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "9170036b60b531a506b4ffe0efeda8e18d918bef", "commitAfterChange": "f8aee71b6b129d09f997301cd8500148a6feb325", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "signatureAfterChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "diff": ["+\t// First test camel case if necessary", "+\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMELCASE_MATCH) != 0;", "+\tif (isCamelCase && pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {", "+\t\treturn true;", "+\t}", "+", "+\tmatchRule &= ~SearchPattern.R_CAMELCASE_MATCH;", "+\t\t\tif (isCamelCase) return false;", "-\t\t\t// avoid message send by comparing first character", "+\t\t\tif (isCamelCase) return false;", "-\t\t\t// avoid message send by comparing first character"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d21a68ebbd76b60529476a0e32bef66b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "f13fdcb2784e02f7feccade63189561cf467d9fb", "commitAfterChange": "c7f8e1325e711fa28068b6283dbd3a449790332b", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["+\t\t\t/* Below 1.5, discard any generics we have left in for the method verifier's benefit, (so it", "+\t\t\t   can detect method overriding properly in the presence of generic super types.) This is so", "+\t\t\t   as to allow us to determine whether we have been handed an acceptable method in 1.4 terms", "+\t\t\t   without all the 1.5isms below kicking in and spoiling the party.", "+\t\t\t   See https://bugs.eclipse.org/bugs/show_bug.cgi?id=331446", "+\t\t\t*/", "+\t\t\tboolean applyErasure =  environment().globalOptions.sourceLevel < ClassFileConstants.JDK1_5;", "-\t\t\t\tTypeBinding oneParam = oneParams[i];", "-\t\t\t\tTypeBinding twoParam = twoParams[i];", "+\t\t\t\tTypeBinding oneParam = applyErasure ? oneParams[i].erasure() : oneParams[i];", "+\t\t\t\tTypeBinding twoParam = applyErasure ? twoParams[i].erasure() : twoParams[i];", "-\t\t\t\t\tTypeBinding originalTwoParam = two.original().parameters[i].leafComponentType();", "+\t\t\t\t\tTypeBinding leafComponentType = two.original().parameters[i].leafComponentType();", "+\t\t\t\t\tTypeBinding originalTwoParam = applyErasure ? leafComponentType.erasure() : leafComponentType; "]}], "num": 44231}
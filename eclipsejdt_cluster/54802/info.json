{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38a31fce0964dea1aed8446b7353a63e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4978c276d86444c5c63caf3d0cfa091f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "e6634618f00448f9b6eeb2769052dd8505ce7a6a", "commitAfterChange": "71652f0a79ff3921fe17262dd43adc36ef8b0344", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\tif (this.verbose) {", "+\t\tif (this.verbose && this.destDir != null) {", "+\t\t\t/*", "+\t\t\t * if destDir is null, we don't generate any log.", "+\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=97744", "+\t\t\t */", "-\t\t\tcmd.createArgument().setValue(this.logFileName);", "+\t\t\tcmd.createArgument().setValue(this.logFileName);\t\t\t", "-\t\treturn cmd;", "+        System.out.println(cmd);", "+        return cmd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53a0eabd137f4d8a65c1589c1cb67b43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "ded90d967b480e6d7d22b3283d60f4ed44ccc489", "commitAfterChange": "18c83b91d182e52feafdad6b2c46eb79ffb0e002", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprotected void startBuild(Hashtable options, boolean noWarning) throws IOException, CoreException", "signatureAfterChange": " \tprotected void startBuild(Hashtable options, boolean noWarning) throws IOException, CoreException", "diff": ["-\t\t\t/*", "-\t\t\tif (LOG_DIR == null) {", "-\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\tint max = size > 10 ? 10 : size;", "-\t\t\t\tfor (int i=0; i<max; i++) {", "-\t\t\t\t\tbuffer.append(resources.get(i));", "-\t\t\t\t\tbuffer.append(\":\\n\\t\");", "-\t\t\t\t\tbuffer.append(messages.get(i));", "-\t\t\t\t\tbuffer.append('\\n');", "-\t\t\t\t}", "-\t\t\t\tif (size > max)", "-\t\t\t\t\tbuffer.append(\"...\\n\");", "-\t\t\t\tassertTrue(\"Unexpected marker(s):\\n\" + buffer.toString(), size==0);", "+\t\t\tStringBuffer debugBuffer = new StringBuffer();", "+\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\tdebugBuffer.append(resources.get(i));", "+\t\t\t\tdebugBuffer.append(\":\\n\\t\");", "+\t\t\t\tdebugBuffer.append(messages.get(i));", "+\t\t\t\tdebugBuffer.append('\\n');", "-\t\t\t*/", "-//\t\t\tif (LOG_DIR != null || DEBUG) {", "-\t\t\t\tStringBuffer debugBuffer = new StringBuffer();", "-\t\t\t\tfor (int i=0; i<size; i++) {", "-\t\t\t\t\tdebugBuffer.append(resources.get(i));", "-\t\t\t\t\tdebugBuffer.append(\":\\n\\t\");", "-\t\t\t\t\tdebugBuffer.append(messages.get(i));", "-\t\t\t\t\tdebugBuffer.append('\\n');", "-\t\t\t\t}", "-\t\t\t\tSystem.out.println(\"ERROR: Unexpected marker(s):\\n\" + debugBuffer.toString());", "-//\t\t\t}", "+\t\t\tSystem.out.println(this.scenarioShortName+\": Unexpected ERROR marker(s):\\n\" + debugBuffer.toString());", "+\t\t\tSystem.out.println(\"--------------------\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9498957097136765167ea61e096972ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 180, "signatureBeforeChange": " \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["+\t */", "+\t\tx1.fragments().add(TAG1);", "-\t\tassertTrue(\"[(JD/**?*//**?*/JD)]\".equals(result)); //$NON-NLS-1$", "+\t\tassertTrue((\"[(JD/**?*/\"+TAG1S+\"/**?*/JD)]\").equals(result)); //$NON-NLS-1$"]}], "num": 54802}
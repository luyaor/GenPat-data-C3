{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e79a71a5ec2e17a7642688ab0ab7439", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "283a2ca2e489e2bcfaca0bda47e5e4e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "a36dd75e73956716f89f32428543909e26b9a682", "commitAfterChange": "c2862088078b3d0bc7ba3af4b4865ffe4ca72da7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException", "signatureAfterChange": "  protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException", "diff": ["-\t// Default implementation just writes out the bytes for the new class file...", "-\tif (JavaBuilder.DEBUG)", "-\t\tSystem.out.println(\"Writing new class file \" + file.getName());//$NON-NLS-1$", "-\tfile.create(new ByteArrayInputStream(bytes), IResource.FORCE, null);", "-\tfile.setDerived(true);", "+\tif (file.exists()) {", "+\t\t// Deal with shared output folders... last one wins... no collision cases detected", "+\t\tif (JavaBuilder.DEBUG)", "+\t\t\tSystem.out.println(\"Writing changed class file \" + file.getName());//$NON-NLS-1$", "+\t\tfile.setContents(new ByteArrayInputStream(bytes), true, false, null);", "+\t\tif (!file.isDerived())", "+\t\t\tfile.setDerived(true);", "+\t} else {", "+\t\t// Default implementation just writes out the bytes for the new class file...", "+\t\tif (JavaBuilder.DEBUG)", "+\t\t\tSystem.out.println(\"Writing new class file \" + file.getName());//$NON-NLS-1$", "+\t\tfile.create(new ByteArrayInputStream(bytes), IResource.FORCE, null);", "+\t\tfile.setDerived(true);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f140799a63ff50f0a116c43784212a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "a36dd75e73956716f89f32428543909e26b9a682", "commitAfterChange": "c2862088078b3d0bc7ba3af4b4865ffe4ca72da7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException", "signatureAfterChange": "  protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException", "diff": ["+\t\t\tif (!file.isDerived())", "+\t\t\t\tfile.setDerived(true);", "-\t\tsuper.writeClassFileBytes(bytes, file, qualifiedFileName, isSecondaryType);", "+\t\tif (JavaBuilder.DEBUG)", "+\t\t\tSystem.out.println(\"Writing new class file \" + file.getName());//$NON-NLS-1$", "+\t\tfile.create(new ByteArrayInputStream(bytes), IResource.FORCE, null);", "+\t\tfile.setDerived(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccb595f03bf01725527def82e1ebfdc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "2e1e850482d90086f267196870c1a847d5fe0441", "commitAfterChange": "7cd8d4cd3f07fb844c8ea150f6fb9724f3e46dcf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  protected boolean writeClassFileCheck(IFile file, String fileName, byte[] bytes, boolean isSecondaryType) throws CoreException", "signatureAfterChange": "  protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException", "diff": ["-protected boolean writeClassFileCheck(IFile file, String fileName, byte[] bytes, boolean isSecondaryType) throws CoreException {", "-\t// In Incremental mode, compare the bytes against the previous file for structural changes", "-\treturn true;", "+protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException {", "+\t// Default implementation just writes out the bytes for the new class file...", "+\tif (JavaBuilder.DEBUG)", "+\t\tSystem.out.println(\"Writing new class file \" + file.getName());//$NON-NLS-1$", "+\tfile.create(new ByteArrayInputStream(bytes), IResource.FORCE, null);", "+\tfile.setDerived(true);"]}], "num": 13403}
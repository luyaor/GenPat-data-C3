{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cc658d2f84dc78ca40a68d747807e23", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280214c81f527c0e712f12a70b50624f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "7aa41fe639eb46a740b35e612973cada9ba8267f", "commitAfterChange": "7ec8f457fa5afa1822c5c5a2c51b29731a82c4ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\t\t\t\tqualifiedType = currentType.isGenericType() ? (ReferenceBinding)scope.environment().convertToRawType(currentType) : currentType;", "+\t\t\t\tqualifiedType = currentType.isGenericType() ? (ReferenceBinding)scope.environment().convertToRawType(currentType, false /*do not force conversion of enclosing types*/) : currentType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6b94045a74d10956a6b02ec92acb452", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "6749cc030d90192cf999f0626cd01904e0e896f4", "commitAfterChange": "a635e0ddaa17829d90f6d6f2096ec371117367d6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "signatureAfterChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "diff": ["-\t\t\t\tTypeBinding rAppl = potentiallyApplicable.isConstructor() ? potentiallyApplicable.declaringClass : potentiallyApplicable.returnType;", "+\t\t\t\tTypeBinding rAppl = potentiallyApplicable.isConstructor() && !reference.isArrayConstructorReference() ? potentiallyApplicable.declaringClass : potentiallyApplicable.returnType;"]}], "num": 25692}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c85ac3247a29274633ad9e0ad681d67", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1476864810093554048208b0b57019bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5046f0da42323773845d7a3edf39df0b8c6a1944", "commitAfterChange": "80f69cca108e407e297e62382ba04bd29eb1703d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tprotected String encodeClasspath(IClasspathEntry[] classpath, IPath outputLocation, boolean indent, Map unknownElements) throws JavaModelException", "signatureAfterChange": " \tprotected String encodeClasspath(IClasspathEntry[] classpath, IClasspathEntry[] referencedEntries, IPath outputLocation, boolean indent, Map unknownElements) throws JavaModelException", "diff": ["-\tprotected String encodeClasspath(IClasspathEntry[] classpath, IPath outputLocation, boolean indent, Map unknownElements) throws JavaModelException {", "+\tprotected String encodeClasspath(IClasspathEntry[] classpath, IClasspathEntry[] referencedEntries, IPath outputLocation, boolean indent, Map unknownElements) throws JavaModelException {", "-\t\t\t\t((ClasspathEntry)classpath[i]).elementEncode(xmlWriter, this.project.getFullPath(), indent, true, unknownElements);", "+\t\t\t\t((ClasspathEntry)classpath[i]).elementEncode(xmlWriter, this.project.getFullPath(), indent, true, unknownElements, false);", "+\t\t\tif (referencedEntries != null) {", "+\t\t\t\tfor (int i = 0; i < referencedEntries.length; ++i) {", "+\t\t\t\t\t((ClasspathEntry) referencedEntries[i]).elementEncode(xmlWriter, this.project.getFullPath(), indent, true, unknownElements, true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63db503de617233a36957fe83970159a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "db8326c8bf5f71d5857a001444f9a6b78ff12f0a", "commitAfterChange": "35479e92cf76ddb81a077e36ac9bcdd2a30c6978", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void initializeBounds(Scope scope, ParameterizedTypeBinding capturedParameterizedType)", "signatureAfterChange": " \tpublic void initializeBounds(Scope scope, ParameterizedTypeBinding capturedParameterizedType)", "diff": ["-\t\t\t\t\t\tsubstitutedVariableInterfaces[0] =  (ReferenceBinding) capturedWildcardBound;", "-\t\t\t\t\t\tthis.setSuperInterfaces(Scope.greaterLowerBound(substitutedVariableInterfaces));", "+\t\t\t\t\t\t// to properly support glb, perform capture *after* glb, so restart from the original bound:", "+\t\t\t\t\t\tsubstitutedVariableInterfaces[0] =  (ReferenceBinding) originalWildcardBound;", "+\t\t\t\t\t\tReferenceBinding[] glb = Scope.greaterLowerBound(substitutedVariableInterfaces);", "+\t\t\t\t\t\tif (glb != null) {", "+\t\t\t\t\t\t\tfor (int i = 0; i < glb.length; i++)", "+\t\t\t\t\t\t\t\tglb[i] = (ReferenceBinding) glb[i].capture(scope, this.position);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.setSuperInterfaces(glb);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67ab077e1336e87a0411485d8d05a1f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "132971f23d5ad724e7abdb8444fe685456f8fc05", "commitAfterChange": "243454d9ddff3b98b1fa12e536cfddbd176702ef", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public TypeBinding[] inferElidedTypes(ReferenceBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "signatureAfterChange": "  public TypeBinding[] inferElidedTypes(ReferenceBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "diff": ["+\t\t// this is our last chance to inspect the result of the inference that is connected to the throw-away factory binding", "+\t\tInferenceContext18 infCtx18 = getInferenceContext(genericFactory);", "+\t\tif (infCtx18 != null && infCtx18.stepCompleted == InferenceContext18.BINDINGS_UPDATED) {", "+\t\t\t// refresh argumentTypes from updated bindings in arguments:", "+\t\t\t// (this shouldn't be strictly necessary, as FunctionExpression.isCompatibleWith() should give the same result,", "+\t\t\t//  but it's probably be a good idea to avoid the necessity to call isCompatibleWith() in the first place). ", "+\t\t\tfor (int i = 0; i < argumentTypes.length; i++) {", "+\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding)", "+\t\t\t\t\targumentTypes[i] = this.arguments[i].resolvedType;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4c774ae7b48ee384bf21fbdf6418518", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c5659478737cfb72ca02f096294cf83949ad2a06", "commitAfterChange": "01bbc4729210ae876463a8b906a3322a1aeaf6c4", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \t \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems)", "signatureAfterChange": " \t \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems)", "diff": ["-\t\t\tif (notInJavadoc && hasPotentialDefaultAbstractMethods && (currentType.isAbstract() || currentType.isTypeVariable())){", "+\t\t\tif (notInJavadoc &&", "+\t\t\t\t\thasPotentialDefaultAbstractMethods &&", "+\t\t\t\t\t(currentType.isAbstract() || currentType.isTypeVariable() || currentType.isIntersectionType())){", "+\t\t\t\t", "+\t\t\t\tReferenceBinding[] superInterfaces = currentType.superInterfaces();", "+\t\t\t\tif (superInterfaces != null && currentType.isIntersectionType()) {", "+\t\t\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\t\t\t\tsuperInterfaces[i] = (ReferenceBinding)superInterfaces[i].capture(invocationScope, invocationSite.sourceEnd());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t\t\t\tcurrentType.superInterfaces(),", "+\t\t\t\t\tsuperInterfaces,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec9e8b953d1c5c5dda02347a0a5f8bac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "40f76b3d0fb01a4a7fa1aad4b09c356c31458c94", "commitAfterChange": "323d52f789e646d704223fd3ac5d22c4e4efec25", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tpublic TypeBinding unannotated()", "signatureAfterChange": "  \tpublic TypeBinding unannotated()", "diff": ["+\t\tif (!hasNullTypeAnnotations())", "+\t\t\treturn this;", "-\t\treturn this.environment.createParameterizedType(this.type, this.arguments, this.enclosingType);", "+\t\tTypeBinding[] unannotatedArguments = null;", "+\t\tif (this.arguments != null) {", "+\t\t\tunannotatedArguments = new TypeBinding[this.arguments.length];", "+\t\t\tfor (int i = 0; i < unannotatedArguments.length; i++) {", "+\t\t\t\tunannotatedArguments[i] = this.arguments[i].unannotated();", "+\t\t\t}", "+\t\t}", "+\t\treturn this.environment.createParameterizedType(this.type, unannotatedArguments, ", "+\t\t\t\tthis.enclosingType == null ? null : (ReferenceBinding) this.enclosingType.unannotated());"]}], "num": 20918}
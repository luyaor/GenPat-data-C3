{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fadbdcae0ffcc4851d64515a5f4e00e6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "336f9b8ea6db51decd252fad4330d8f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "70a53d5204889b0c58ec5456c0d1f369bcb8e6de", "commitAfterChange": "622a559c923758dc3f8dea6b74aa6c2ecba62dd5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic boolean createExternalArchiveDelta(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic boolean createExternalArchiveDelta(IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t", "+\t\tif (this.refreshedElements == null) return false;", "-\t\t\tfor (int i = 0; i < this.refreshedElementsSize; i++){", "-\t\t\t\tIJavaElement element = (IJavaElement)this.refreshedElements[i];", "+\t\t\tIterator iterator = this.refreshedElements.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tIJavaElement element = (IJavaElement)iterator.next();", "-\t\t\tthis.refreshedElementsSize = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92b3733830996f4a0ccf09b662b11d43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "2185e673ebc08a5106079919408a2a224cdce964", "commitAfterChange": "e23315438da307f57d974add8b859548ca4a3dcb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, ASTRewrite rewriter) throws JavaModelException", "signatureAfterChange": " \t\tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, ASTRewrite rewriter) throws JavaModelException", "diff": ["-\t */", "-\tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, ASTRewrite rewriter) throws JavaModelException {", "-\t\tif (newName != null) {", "-\t\t\tString oldTypeName= oldName.substring(0, oldName.length() - 5);", "-\t\t\tString newTypeName= newName.substring(0, newName.length() - 5);", "-\t\t\tAST ast = astCU.getAST();", "-\t\t\t// update main type name", "-\t\t\tIType[] types = cu.getTypes();", "-\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "-\t\t\t\tIType currentType = types[i];", "-\t\t\t\tif (currentType.getElementName().equals(oldTypeName)) {", "-\t\t\t\t\tAbstractTypeDeclaration typeNode = (AbstractTypeDeclaration) ((JavaElement) currentType).findNode(astCU);", "-\t\t\t\t\tif (typeNode != null) {", "-\t\t\t\t\t\t// rename type", "-\t\t\t\t\t\trewriter.replace(typeNode.getName(), ast.newSimpleName(newTypeName), null);", "-\t\t\t\t\t\tif (typeNode instanceof TypeDeclaration) {", "+\t\t */", "+\t\tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, ASTRewrite rewriter) throws JavaModelException {", "+\t\t\tif (newName != null) {", "+\t\t\t\tString oldTypeName= oldName.substring(0, oldName.length() - 5);", "+\t\t\t\tString newTypeName= newName.substring(0, newName.length() - 5);", "+\t\t\t\tAST ast = astCU.getAST();", "+\t\t\t\t// update main type name", "+\t\t\t\tIType[] types = cu.getTypes();", "+\t\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "+\t\t\t\t\tIType currentType = types[i];", "+\t\t\t\t\tif (currentType.getElementName().equals(oldTypeName)) {", "+\t\t\t\t\t\tAbstractTypeDeclaration typeNode = (AbstractTypeDeclaration) ((JavaElement) currentType).findNode(astCU);", "+\t\t\t\t\t\tif (typeNode != null) {", "+\t\t\t\t\t\t\t// rename type", "+\t\t\t\t\t\t\trewriter.replace(typeNode.getName(), ast.newSimpleName(newTypeName), null);", "-\t\t\t\t\t\t\tMethodDeclaration[] methods = ((TypeDeclaration) typeNode).getMethods();", "-\t\t\t\t\t\t\tfor (int j = 0, length = methods.length; j < length; j++) {", "-\t\t\t\t\t\t\t\tMethodDeclaration methodDeclaration = methods[j];", "-\t\t\t\t\t\t\t\tif (methodDeclaration.isConstructor()) {", "-\t\t\t\t\t\t\t\t\tSimpleName methodName = methodDeclaration.getName();", "-\t\t\t\t\t\t\t\t\tif (methodName.getIdentifier().equals(oldTypeName)) {", "-\t\t\t\t\t\t\t\t\t\trewriter.replace(methodName, ast.newSimpleName(newTypeName), null);", "+\t\t\t\t\t\t\tIterator bodyDeclarations = typeNode.bodyDeclarations().iterator();", "+\t\t\t\t\t\t\twhile (bodyDeclarations.hasNext()) {", "+\t\t\t\t\t\t\t\tObject bodyDeclaration = bodyDeclarations.next();", "+\t\t\t\t\t\t\t\tif (bodyDeclaration instanceof MethodDeclaration) {", "+\t\t\t\t\t\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) bodyDeclaration;", "+\t\t\t\t\t\t\t\t\tif (methodDeclaration.isConstructor()) {", "+\t\t\t\t\t\t\t\t\t\tSimpleName methodName = methodDeclaration.getName();", "+\t\t\t\t\t\t\t\t\t\tif (methodName.getIdentifier().equals(oldTypeName)) {", "+\t\t\t\t\t\t\t\t\t\t\trewriter.replace(methodName, ast.newSimpleName(newTypeName), null);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t}"]}], "num": 8800}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61cd520a760119834d1ce84decf550df", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1258623ab0d8277e811f117f88b48384", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b9e1f650b8042f3e1391656d8119b63cfa12caf6", "commitAfterChange": "50ccfd22c9edba40e321679792b900f0f1aa1621", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\tboolean checkArgsForRawTypes = false;", "-\t\t// in 1.5 mode or higher, we're expecting that an exact match with more than 2 args is not that common", "-\t\t// so save some time by not calling findExactMatch & use that time to handle the more common cases with 1 or 2 args.", "-\t\tswitch (argumentTypes.length) {", "-\t\t\tcase 0 : break;", "-\t\t\tcase 1 :", "-\t\t\tcase 2 :", "-\t\t\t\tcheckArgsForRawTypes = compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5;", "-\t\t\tdefault :", "-\t\t\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5)", "-\t\t\t\t\treturn null; // skip find exact match since its less likely to find a match & raw type check is not worth it", "-\t\t}", "-\t\t\tif (checkArgsForRawTypes)", "+\t\t\t// in >= 1.5 mode, ensure the exactMatch did not match raw types", "+\t\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc8a7d113a0b19837e34aa6ef1e165d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "fea4095ba208aac8a9915b5d68b0792beec39b62", "commitAfterChange": "c128054dedc80ef992da5c72e846a5d5eb550aee", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\tboolean checkArgsForRawTypes = false;", "+\t\t// in 1.5 mode or higher, we're expecting that an exact match with more than 2 args is not that common", "+\t\t// so save some time by not calling findExactMatch & use that time to handle the more common cases with 1 or 2 args.", "+\t\tswitch (argumentTypes.length) {", "+\t\t\tcase 0 : break;", "+\t\t\tcase 1 :", "+\t\t\tcase 2 :", "+\t\t\t\tcheckArgsForRawTypes = compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5;", "+\t\t\tdefault :", "+\t\t\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5)", "+\t\t\t\t\treturn null; // skip find exact match since its less likely to find a match & raw type check is not worth it", "+\t\t}", "-\t\t\t", "+\t\t\tif (checkArgsForRawTypes)", "+\t\t\t\tfor (int i = argumentTypes.length; --i >= 0;)", "+\t\t\t\t\tif (argumentTypes[i].isRawType())", "+\t\t\t\t\t\treturn null;"]}], "num": 58941}
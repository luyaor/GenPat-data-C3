{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eef46c1f1cd19c8092f6f28cde61aa21", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fadc9d2be6657f0803853c003661367", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "aaea056b63df0d51dde45ba7280dde54d23c0cca", "commitAfterChange": "c472000c78a59beb7304d9a44e86450b859aeee1", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "    public void resolve()", "signatureAfterChange": "    public void resolve()", "diff": ["+\t\t\t\t\t\t&& sourceType.findSuperTypeErasingTo(TypeIds.T_JavaIoExternalizable, false /*Serializable is not a class*/) == null", "-\t\t", "+", "+\t\tif (needSerialVersion) {", "+\t\t\t// if Object writeReplace() throws java.io.ObjectStreamException is present, then no serialVersionUID is needed", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=101476", "+    \t\tCompilationUnitScope compilationUnitScope = this.scope.compilationUnitScope();", "+\t\t\tMethodBinding methodBinding = sourceType.getExactMethod(TypeConstants.WRITEREPLACE, new TypeBinding[0], compilationUnitScope);", "+   \t\t\tReferenceBinding[] throwsExceptions;", "+\t\t\tneedSerialVersion = ", "+\t\t\t\tmethodBinding == null", "+    \t\t\t\t|| !methodBinding.isValidBinding()", "+    \t\t\t\t|| methodBinding.returnType.id != TypeIds.T_JavaLangObject", "+    \t\t\t\t|| (throwsExceptions = methodBinding.thrownExceptions).length != 1", "+    \t\t\t\t|| throwsExceptions[0].id != TypeIds.T_JavaIoObjectStreamException;", "+    \t\tif (needSerialVersion) {", "+    \t\t\t// check the presence of an implementation of the methods", "+    \t\t\t// private void writeObject(java.io.ObjectOutputStream out) throws IOException", "+    \t\t\t// private void readObject(java.io.ObjectInputStream out) throws IOException", "+    \t\t\tboolean hasWriteObjectMethod = false;", "+    \t\t\tboolean hasReadObjectMethod = false;", "+    \t\t\tTypeBinding argumentTypeBinding = this.scope.getType(TypeConstants.JAVA_IO_OBJECTOUTPUTSTREAM, 3);", "+     \t\t\tif (argumentTypeBinding.isValidBinding()) {", "+            \t\tmethodBinding = sourceType.getExactMethod(TypeConstants.WRITEOBJECT, new TypeBinding[] { argumentTypeBinding }, compilationUnitScope);", "+            \t\thasWriteObjectMethod = methodBinding != null", "+            \t\t\t\t&& methodBinding.isValidBinding()", "+            \t\t\t\t&& methodBinding.modifiers == ClassFileConstants.AccPrivate", "+            \t\t\t\t&& methodBinding.returnType == TypeBinding.VOID", "+            \t\t\t\t&& (throwsExceptions = methodBinding.thrownExceptions).length == 1", "+            \t\t\t\t&& throwsExceptions[0].id == TypeIds.T_JavaIoException;", "+    \t\t\t}", "+    \t\t\targumentTypeBinding = this.scope.getType(TypeConstants.JAVA_IO_OBJECTINPUTSTREAM, 3);", "+     \t\t\tif (argumentTypeBinding.isValidBinding()) {", "+            \t\tmethodBinding = sourceType.getExactMethod(TypeConstants.READOBJECT, new TypeBinding[] { argumentTypeBinding }, compilationUnitScope);", "+            \t\thasReadObjectMethod = methodBinding != null", "+            \t\t\t\t&& methodBinding.isValidBinding()", "+            \t\t\t\t&& methodBinding.modifiers == ClassFileConstants.AccPrivate", "+            \t\t\t\t&& methodBinding.returnType == TypeBinding.VOID", "+            \t\t\t\t&& (throwsExceptions = methodBinding.thrownExceptions).length == 1", "+            \t\t\t\t&& throwsExceptions[0].id == TypeIds.T_JavaIoException;", "+    \t\t\t}", "+    \t\t\tneedSerialVersion = !hasWriteObjectMethod || !hasReadObjectMethod;", "+    \t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "949a7c6e4f75c5c649859d7bcf4544d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/AnnotationDependencyTests.java", "commitBeforeChange": "19eef6f26c48016adc4a14301bf3da3ca0ccecb1", "commitAfterChange": "650839ed308774b6702bdf04023742a308aab499", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate void addAnnotationType()", "signatureAfterChange": " \t \tprivate void addAnnotationType()", "diff": ["+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoInt {\\n\"", "+\t\t\t+ \"int value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoInt\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoBoolean {\\n\"", "+\t\t\t+ \"boolean value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoBoolean\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoByte {\\n\"", "+\t\t\t+ \"byte value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoByte\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoChar {\\n\"", "+\t\t\t+ \"char value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoChar\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoShort {\\n\"", "+\t\t\t+ \"short value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoShort\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoDouble {\\n\"", "+\t\t\t+ \"double value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoDouble\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoFloat {\\n\"", "+\t\t\t+ \"float value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoFloat\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoLong {\\n\"", "+\t\t\t+ \"long value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoLong\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoStringArray {\\n\"", "+\t\t\t+ \"String[] value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoStringArray\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoAnnotation {\\n\"", "+\t\t\t+ \"AnnoLong value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoAnnotation\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"enum E {\\n\"", "+\t\t\t+ \"A, B, C\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"E\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoEnum {\\n\"", "+\t\t\t+ \"E value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoEnum\", annoCode);", "+\t\tannoCode = \"package p1;\\n\"", "+\t\t\t+ \"@interface AnnoClass {\\n\"", "+\t\t\t+ \"Class<?> value();\\n\"", "+\t\t\t+ \"}\\n\";", "+\t\tenv.addClass(this.srcRoot, \"p1\", \"AnnoClass\", annoCode);"]}], "num": 42562}
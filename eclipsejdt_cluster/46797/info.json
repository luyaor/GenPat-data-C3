{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68be446ecae336132ef2090af2db7d45", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "814fb6e02557cc7ecdd9480b0904f6de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 194, "signatureBeforeChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["-\t\t\t\t\tString closestParameterTypeNames = typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false);", "-\t\t\t\t\tString parameterTypeNames = typesAsString(false, problemMethod.parameters, false);", "-\t\t\t\t\tString closestParameterTypeShortNames = typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true);", "-\t\t\t\t\tString parameterTypeShortNames = typesAsString(false, problemMethod.parameters, true);", "+\t\t\t\t\tString closestParameterTypeNames = typesAsString(shownMethod, false);", "+\t\t\t\t\tString parameterTypeNames = typesAsString(problemMethod.parameters, false);", "+\t\t\t\t\tString closestParameterTypeShortNames = typesAsString(shownMethod, true);", "+\t\t\t\t\tString parameterTypeShortNames = typesAsString(problemMethod.parameters, true);", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t        typesAsString(false, invocationArguments, false),", "+\t\t\t\t        typesAsString(invocationArguments, false),", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t        typesAsString(false, invocationArguments, true),", "+\t\t\t\t        typesAsString(invocationArguments, true),", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t\t\ttypesAsString(false, shownMethod.typeVariables, false),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t\t\ttypesAsString(shownMethod.typeVariables, false),", "+\t\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t\t\ttypesAsString(false, shownMethod.typeVariables, true),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t\t\ttypesAsString(shownMethod.typeVariables, true),", "+\t\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownMethod).typeArguments, false),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownMethod).typeArguments, false),", "+\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownMethod).typeArguments, true),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownMethod).typeArguments, true),", "+\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t        typesAsString(method, true) },", "-\t\t\tnew String(shownMethod.selector), typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false)},", "+\t\t\tnew String(shownMethod.selector), typesAsString(shownMethod, false)},", "-\t\t\tnew String(shownMethod.selector), typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true)},", "+\t\t\tnew String(shownMethod.selector), typesAsString(shownMethod, true)},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88afa8523b412784c9edc0b482772100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tchar[] uniqueKey = typeBinding.computeUniqueKey();", "-\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t}", "-\t\t\t\tif (typeBinding.isAnnotationType()) {", "-\t\t\t\t\tthis.requestor.acceptAnnotation(", "-\t\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "-\t\t\t\t\t\ttypeBinding.qualifiedSourceName(),", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tuniqueKey,", "-\t\t\t\t\t\tthis.actualSelectionStart,", "-\t\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t\t} else if (typeBinding.isInterface()) {", "-\t\t\t\t\tthis.requestor.acceptInterface(", "-\t\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "-\t\t\t\t\t\ttypeBinding.qualifiedSourceName(),", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tuniqueKey,", "-\t\t\t\t\t\tthis.actualSelectionStart,", "-\t\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t\t} else if (typeBinding.isEnum()) {", "-\t\t\t\t\tthis.requestor.acceptEnum(", "-\t\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "-\t\t\t\t\t\ttypeBinding.qualifiedSourceName(),", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tuniqueKey,", "-\t\t\t\t\t\tthis.actualSelectionStart,", "-\t\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tthis.requestor.acceptClass(", "-\t\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "-\t\t\t\t\t\ttypeBinding.qualifiedSourceName(),", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tuniqueKey,", "-\t\t\t\t\t\tthis.actualSelectionStart,", "-\t\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t\t}", "+", "+\t\t\t\tthis.requestor.acceptType(", "+\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "+\t\t\t\t\ttypeBinding.qualifiedSourceName(),", "+\t\t\t\t\ttypeBinding.modifiers,", "+\t\t\t\t\tfalse,", "+\t\t\t\t\ttypeBinding.computeUniqueKey(),", "+\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t\t\tif(methodBinding instanceof ParameterizedMethodBinding) {", "-\t\t\t\t\t\tcompleteLocalTypes(methodBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\tchar[] uniqueKey = methodBinding.computeUniqueKey();", "-\t\t\t\t\tif(methodBinding instanceof ParameterizedMethodBinding) {", "-\t\t\t\t\t\tcompleteLocalTypes(methodBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\t\tuniqueKey,", "+\t\t\t\t\t\tmethodBinding.computeUniqueKey(),", "-\t\t\t\t\t\t\tif(fieldBinding instanceof ParameterizedFieldBinding) {", "-\t\t\t\t\t\t\t\tcompleteLocalTypes(fieldBinding.declaringClass);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tchar[] uniqueKey = fieldBinding.computeUniqueKey();", "-\t\t\t\t\t\t\tif(fieldBinding instanceof ParameterizedFieldBinding) {", "-\t\t\t\t\t\t\t\tcompleteLocalTypes(fieldBinding.declaringClass);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tuniqueKey,", "+\t\t\t\t\t\t\t\tfieldBinding.computeUniqueKey(),"]}], "num": 46797}
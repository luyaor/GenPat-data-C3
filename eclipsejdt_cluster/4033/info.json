{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47553bc474b77a9a91502adf3fd93479", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28d0a75ba9ff59f143b6d4f72b41b04a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "6cd0099c2021e34815eaba987a586ae52dacf569", "commitAfterChange": "d6dc74869d8c303dbb7a6d8b327d8b104cd5865b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, ReferenceBinding targetType, boolean argumentTypesElided)", "signatureAfterChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, TypeBinding targetType, boolean argumentTypesElided)", "diff": ["-\tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, ReferenceBinding targetType, boolean argumentTypesElided) {", "-\t\tif (!targetType.isValidBinding())", "-\t\t\treturn null;", "-\t\tParameterizedTypeBinding withWildCards = InferenceContext18.parameterizedWithWildcard(targetType);", "-\t\tif (withWildCards != null) {", "-\t\t\tif (!argumentTypesElided)", "-\t\t\t\treturn new InferenceContext18(blockScope).inferFunctionalInterfaceParameterization(this, blockScope, withWildCards);", "-\t\t\telse", "-\t\t\t\treturn findGroundTargetTypeForElidedLambda(blockScope, withWildCards);", "+\tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, TypeBinding targetType, boolean argumentTypesElided) {", "+\t\t", "+\t\tif (targetType instanceof IntersectionTypeBinding18)", "+\t\t\ttargetType = ((IntersectionTypeBinding18) targetType).getSAMType(blockScope); ", "+\t\t", "+\t\tif (targetType instanceof ReferenceBinding && targetType.isValidBinding()) {", "+\t\t\tParameterizedTypeBinding withWildCards = InferenceContext18.parameterizedWithWildcard(targetType);", "+\t\t\tif (withWildCards != null) {", "+\t\t\t\tif (!argumentTypesElided)", "+\t\t\t\t\treturn new InferenceContext18(blockScope).inferFunctionalInterfaceParameterization(this, blockScope, withWildCards);", "+\t\t\t\telse", "+\t\t\t\t\treturn findGroundTargetTypeForElidedLambda(blockScope, withWildCards);", "+\t\t\t}", "+\t\t\treturn (ReferenceBinding) targetType;", "-\t\treturn targetType;", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f383a4951d251a2c994ab6c6b2793ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "a0e794820a3e45ac013c44e55b82e935802d5378", "commitAfterChange": "a06fd70a66cd192fe200df3baf9406d9e87b6313", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\t\tParameterizedTypeBinding withWildCards = InferenceContext18.parameterizedWithWildcard(this.expectedType);", "-\t\t\tif (withWildCards != null) {", "-\t\t\t\t// invoke 18.5.3 Functional Interface Parameterization Inference", "-\t\t\t\tInferenceContext18 ctx = new InferenceContext18(methodScope);", "-\t\t\t\tTypeBinding[] q = ctx.createBoundsForFunctionalInterfaceParameterizationInference(withWildCards);", "-\t\t\t\tif (q == null || q.length != this.arguments.length) {", "-\t\t\t\t\t// fail  TODO: can lengths actually differ here?", "+\t\t\tReferenceBinding groundType = null;", "+\t\t\tif (this.expectedType instanceof ReferenceBinding)", "+\t\t\t\tgroundType = findGroundTargetType(blockScope, (ReferenceBinding)this.expectedType, argumentsTypeElided);", "+\t\t\tif (groundType != null) {", "+\t\t\t\tthis.descriptor = groundType.getSingleAbstractMethod(blockScope, true);", "+\t\t\t\tif (!this.descriptor.isValidBinding()) {", "+\t\t\t\t\treportSamProblem(blockScope, this.descriptor);", "-\t\t\t\t\tif (ctx.reduceWithEqualityConstraints(this.argumentTypes, q)) {", "-\t\t\t\t\t\tTypeBinding[] a = withWildCards.arguments;", "-\t\t\t\t\t\tTypeBinding[] aprime = ctx.getFunctionInterfaceArgumentSolutions(a);", "-\t\t\t\t\t\t// TODO If F<A'1, ..., A'm> is a well-formed type, ...", "-\t\t\t\t\t\tReferenceBinding genericType = withWildCards.genericType();", "-\t\t\t\t\t\tthis.resolvedType = blockScope.environment().createParameterizedType(genericType, aprime, genericType.enclosingType());", "-\t\t\t\t\t\tthis.descriptor = this.resolvedType.getSingleAbstractMethod(blockScope, true);", "-\t\t\t\t\t\tif (!this.descriptor.isValidBinding())", "-\t\t\t\t\t\t\treportSamProblem(blockScope, this.descriptor);", "-\t\t\t\t\t}", "+\t\t\t\t\tthis.resolvedType = groundType;", "+\t}"]}], "num": 4033}
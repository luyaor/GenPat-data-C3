{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c290fa27b357c13af721443dc96446bb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f0bf97ca16b3966a6dbfe4e765c43c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testSearchType() throws CoreException", "signatureAfterChange": " \tpublic void testSearchType() throws CoreException", "diff": ["-\t\tsearch(\"JavaCore\", TYPE, ALL_OCCURRENCES);", "+\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] { JDT_CORE_PROJECT }, IJavaSearchScope.SOURCES);", "+\t\tString name = \"JavaCore\";", "+\t\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "+\t\tsearch(name, TYPE, ALL_OCCURRENCES, scope, resultCollector);", "+\t\tNumberFormat intFormat = NumberFormat.getIntegerInstance();", "+\t\tSystem.out.println(\"\t- \"+intFormat.format(resultCollector.count)+\" occurences for type '\"+name+\"' in project \"+JDT_CORE_PROJECT.getElementName());", "-\t\t\tcleanCategoryTableCache(true);", "+\t\t\tcleanCategoryTableCache(true, scope, resultCollector);", "-\t\t\tsearch(\"JavaCore\", TYPE, ALL_OCCURRENCES);", "+\t\t\tsearch(name, TYPE, ALL_OCCURRENCES, scope, resultCollector);", "-", "-\t\t// Store counter", "-\t\tREFERENCES[0] = this.resultCollector.count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a28d433368c493142bbcc33d1678665a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testSearchMethod() throws CoreException", "signatureAfterChange": " \tpublic void testSearchMethod() throws CoreException", "diff": ["-\t\tsetComment(Performance.EXPLAINS_DEGRADATION_COMMENT, \"Test is not enough stable and will be rewritten...\");", "+\t\tsetComment(Performance.EXPLAINS_DEGRADATION_COMMENT, \"Test is not enough stable and will be replaced by another one...\");", "-\t\tsearch(\"equals\", METHOD, ALL_OCCURRENCES);", "+\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] { JDT_CORE_PROJECT }, IJavaSearchScope.SOURCES);", "+\t\tString name = \"equals\";", "+\t\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "+\t\tsearch(name, METHOD, ALL_OCCURRENCES, scope, resultCollector);", "+\t\tNumberFormat intFormat = NumberFormat.getIntegerInstance();", "+\t\tSystem.out.println(\"\t- \"+intFormat.format(resultCollector.count)+\" occurences for method '\"+name+\"' in project \"+JDT_CORE_PROJECT.getElementName());", "-\t\t\tcleanCategoryTableCache(false);", "+\t\t\tcleanCategoryTableCache(false, scope, resultCollector);", "-\t\t\tsearch(\"equals\", METHOD, ALL_OCCURRENCES);", "+\t\t\tsearch(name, METHOD, ALL_OCCURRENCES, scope, resultCollector);", "-\t", "-\t\t// Store counter", "-\t\tREFERENCES[2] = this.resultCollector.count;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5106508e1ea5934d50e2f114ba4e0a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void testSearchConstructor() throws CoreException", "signatureAfterChange": " \tpublic void testSearchConstructor() throws CoreException", "diff": ["-\t\tsearch(\"String\", CONSTRUCTOR, ALL_OCCURRENCES);", "+\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] { JDT_CORE_PROJECT }, IJavaSearchScope.SOURCES);", "+\t\tString name = \"String\";", "+\t\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "+\t\tsearch(name, CONSTRUCTOR, ALL_OCCURRENCES, scope, resultCollector);", "+\t\tNumberFormat intFormat = NumberFormat.getIntegerInstance();", "+\t\tSystem.out.println(\"\t- \"+intFormat.format(resultCollector.count)+\" occurences for constructor '\"+name+\"' in project \"+JDT_CORE_PROJECT.getElementName());", "-\t\t\tcleanCategoryTableCache(false);", "+\t\t\tcleanCategoryTableCache(false, scope, resultCollector);", "-\t\t\tsearch(\"String\", CONSTRUCTOR, ALL_OCCURRENCES);", "+\t\t\tsearch(name, CONSTRUCTOR, ALL_OCCURRENCES, scope, resultCollector);", "+\t}", "-\t\t// Store counter", "-\t\tREFERENCES[3] = this.resultCollector.count;"]}], "num": 46332}
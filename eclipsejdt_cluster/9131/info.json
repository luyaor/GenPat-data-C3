{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "329c196190288f3b3ec8220f439ff44c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a692b9c3ba38fb680e53be1ae825dc6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public MethodBinding binding(TypeBinding targetType)", "signatureAfterChange": " public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope)", "diff": ["-public MethodBinding binding(TypeBinding targetType) {", "+public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope) {", "-\t\tif (!resolvePart2(this.suspendedResolutionState))", "+\t\tif (!resolvePart2(this.suspendedResolutionState)) {", "+\t\t\tif (reportErrors && !this.suspendedResolutionState.hasReportedError) {", "+\t\t\t\tif (this.suspendedResolutionState.cannotInferDiamond)", "+\t\t\t\t\tscope.problemReporter().cannotInferElidedTypes(this);", "+\t\t\t\telse", "+\t\t\t\t\tscope.problemReporter().genericInferenceError(\"constructor is unexpectedly unresolved\", this); //$NON-NLS-1$", "+\t\t\t\tthis.suspendedResolutionState.hasReportedError = true;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (reportErrors && this.binding != null && !this.binding.isValidBinding()) {", "+\t\tif (this.binding.declaringClass == null)", "+\t\t\tthis.binding.declaringClass = (ReferenceBinding) this.resolvedType;", "+\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "+\t\tthis.suspendedResolutionState.hasReportedError = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ace2285d55c8545d35b8957ab891fe48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Wildcard.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding genericType, int rank)", "signatureAfterChange": "  \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding genericType, int rank)", "diff": ["-\t\tresolveAnnotations(scope);", "-\t\tWildcardBinding wildcard = scope.environment().createWildcard(genericType, rank, boundType, null /*no extra bound*/, this.kind);", "-\t\treturn this.resolvedType = wildcard;", "+\t\tthis.resolvedType = scope.environment().createWildcard(genericType, rank, boundType, null /*no extra bound*/, this.kind);", "+\t\tresolveAnnotations(scope);", "+\t\tif (boundType != null && boundType.hasNullTypeAnnotations() && this.resolvedType.hasNullTypeAnnotations()) {", "+\t\t\tif (((boundType.tagBits | this.resolvedType.tagBits) & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK) { // are both set?", "+\t\t\t\tAnnotation annotation = this.bound.findAnnotation(boundType.tagBits & TagBits.AnnotationNullMASK);", "+\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsOnBounds(annotation, this.resolvedType.tagBits);", "+\t\t\t\tthis.resolvedType = this.resolvedType.unannotated();", "+\t\t\t\tthis.bound.resolvedType = ((WildcardBinding)this.resolvedType).bound = boundType.unannotated();", "+\t\t\t}", "+\t\t}", "+\t\treturn this.resolvedType;"]}], "num": 9131}
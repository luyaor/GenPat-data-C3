{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "515f62215cba1af878a590ea51ed7594", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b6cd4babb8ed07932bd28ce25173cf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "7eeea60289161cbc82181c2049d38d6375b340c4", "commitAfterChange": "bac0b688c9760eba84723fa01c9ef8fce3bf0175", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "diff": ["+\t\t\tif (otherType instanceof InferenceVariable) {", "+\t\t\t\t// may interpret InferenceVariable as a joker, but only when within an outer lambda inference:", "+\t\t\t\tif (captureScope != null) {", "+\t\t\t\t\tMethodScope methodScope = captureScope.methodScope();", "+\t\t\t\t\tif (methodScope != null) {", "+\t\t\t\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "+\t\t\t\t\t\tif (referenceContext instanceof LambdaExpression", "+\t\t\t\t\t\t\t\t&& ((LambdaExpression)referenceContext).inferenceContext != null)", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b50f64de25be610d9ba8882bd5587f4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\t// Expected types for javadoc", "+\t\t} else if (parent instanceof Javadoc) {", "+\t\t\tif (scope.kind == Scope.METHOD_SCOPE) {", "+\t\t\t\tMethodScope methodScope = (MethodScope) scope;", "+\t\t\t\tAbstractMethodDeclaration methodDecl = methodScope.referenceMethod();", "+\t\t\t\tif (methodDecl != null && methodDecl.binding != null) {", "+\t\t\t\t\tReferenceBinding[] exceptions = methodDecl.binding.thrownExceptions;", "+\t\t\t\t\tif (exceptions != null) {", "+\t\t\t\t\t\tfor (int i = 0; i < exceptions.length; i++) {", "+\t\t\t\t\t\t\taddExpectedType(exceptions[i]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 66768}
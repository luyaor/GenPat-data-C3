{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "463a041c978ba3fb79fc65be08475907", "detectedBy": ["DIFF_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d887293abe2c19eab57ce0a0c82d885", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "811f4b05d58ca33710b13af0352652814cf9e788", "commitAfterChange": "2270533a2db02a384cae364b95bf4d107920358d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["+\t\t\tboolean isTargetJsr14 = this.scope.compilerOptions().targetJDK == ClassFileConstants.JDK1_4;", "+\t\t\t\tif (iterableType == null && isTargetJsr14) {", "+\t\t\t\t\titerableType = ((ReferenceBinding)collectionType).findSuperTypeOriginatingFrom(T_JavaUtilCollection, false /*Iterable is not a class*/);", "+\t\t\t\t}", "-\t\t\t\t\tif (((ReferenceBinding)this.iteratorReceiverType).findSuperTypeOriginatingFrom(T_JavaLangIterable, false) == null) {", "+\t\t\t\t\tif (isTargetJsr14) {", "+\t\t\t\t\t\tif (((ReferenceBinding)this.iteratorReceiverType).findSuperTypeOriginatingFrom(T_JavaUtilCollection, false) == null) {", "+\t\t\t\t\t\t\tthis.iteratorReceiverType = iterableType; // handle indirect inheritance thru variable secondary bound", "+\t\t\t\t\t\t\tthis.collection.computeConversion(this.scope, iterableType, collectionType);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.collection.computeConversion(this.scope, collectionType, collectionType);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (((ReferenceBinding)this.iteratorReceiverType).findSuperTypeOriginatingFrom(T_JavaLangIterable, false) == null) {", "-\t\t\t\t\tthis.scope.problemReporter().invalidTypeForCollection(this.collection);", "+\t\t\t\t\tif (isTargetJsr14) {", "+\t\t\t\t\t\tthis.scope.problemReporter().invalidTypeForCollectionTarget14(this.collection);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.scope.problemReporter().invalidTypeForCollection(this.collection);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5e3c29fd5c4cb3c7260cd04eb7ed4da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "4969581d5a6d33d41352c5234772269c8856458e", "commitAfterChange": "90d64e3947b5878cf419c087b17d8d3a7de6e96a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\t\t\tif (interfaceType.hasIncompatibleSuperType((ReferenceBinding)castType))", "+\t\t\t\t\t\t\t\tif (scope.compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\t\t\t\t\t\tif (interfaceType.hasIncompatibleSuperType((ReferenceBinding) castType)) {", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else if (!castType.isRawType() && interfaceType.hasIncompatibleSuperType((ReferenceBinding) castType)) {", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (((ReferenceBinding)castType).hasIncompatibleSuperType((ReferenceBinding) expressionType)) {", "+\t\t\t\t\t\t\t\tif (scope.compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\t\t\t\t\t\tif (((ReferenceBinding)castType).hasIncompatibleSuperType((ReferenceBinding) expressionType)) {", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else if (!castType.isRawType() && ((ReferenceBinding)castType).hasIncompatibleSuperType((ReferenceBinding) expressionType)) {", "-\t\t\t\t\t\t\t\tif (refExprType.hasIncompatibleSuperType((ReferenceBinding) castType))", "+\t\t\t\t\t\t\t\tif (scope.compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\t\t\t\t\t\tif (refExprType.hasIncompatibleSuperType((ReferenceBinding) castType)) {", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else if (!castType.isRawType() && refExprType.hasIncompatibleSuperType((ReferenceBinding) castType)) {", "+\t\t\t\t\t\t\t\t}"]}], "num": 23386}
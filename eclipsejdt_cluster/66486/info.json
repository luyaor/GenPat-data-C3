{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbe077a087bef3d12f2e2dc06db04bca", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c92effd8f0da88e9016e7653f308da4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/BlocksIndexInput.java", "commitBeforeChange": "12e6c9c820ceba19e41f45f62bc98ca6c5aaa307", "commitAfterChange": "82730fa91cab84d990d4e3898f46564d654b224e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic IEntryResult[] queryEntriesPrefixedBy(char[] prefix) throws IOException", "signatureAfterChange": " \tpublic EntryResult[] queryEntriesPrefixedBy(char[] prefix) throws IOException", "diff": ["-\tpublic IEntryResult[] queryEntriesPrefixedBy(char[] prefix) throws IOException {", "+\tpublic EntryResult[] queryEntriesPrefixedBy(char[] prefix) throws IOException {", "-\t\tIEntryResult[] entries = new IEntryResult[5];", "+\t\tEntryResult[] entries = new EntryResult[5];", "-\t\t\t\t\t\tSystem.arraycopy(entries, 0, entries = new IEntryResult[count*2], 0, count);", "+\t\t\t\t\t\tSystem.arraycopy(entries, 0, entries = new EntryResult[count*2], 0, count);", "-\t\t\tSystem.arraycopy(entries, 0, entries = new IEntryResult[count], 0, count);", "+\t\t\tSystem.arraycopy(entries, 0, entries = new EntryResult[count], 0, count);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4d1eb5fbaf23d981fb4139db58bd227", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/BlocksIndexInput.java", "commitBeforeChange": "12e6c9c820ceba19e41f45f62bc98ca6c5aaa307", "commitAfterChange": "82730fa91cab84d990d4e3898f46564d654b224e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic IEntryResult[] queryEntriesMatching(char[] pattern) throws IOException", "signatureAfterChange": " \tpublic EntryResult[] queryEntriesMatching(char[] pattern) throws IOException", "diff": ["-\tpublic IEntryResult[] queryEntriesMatching(char[] pattern/*, boolean isCaseSensitive*/) throws IOException {", "+\tpublic EntryResult[] queryEntriesMatching(char[] pattern/*, boolean isCaseSensitive*/) throws IOException {", "-\t\t\t\treturn new IEntryResult[]{ new EntryResult(entry.getWord(), entry.getRefs()) };", "+\t\t\t\treturn new EntryResult[]{ new EntryResult(entry.getWord(), entry.getRefs()) };", "-\t\tIEntryResult[] entries = new IEntryResult[5];", "+\t\tEntryResult[] entries = new EntryResult[5];", "-\t\t\t\t\tif (count == entries.length){", "-\t\t\t\t\t\tSystem.arraycopy(entries, 0, entries = new IEntryResult[count*2], 0, count);", "-\t\t\t\t\t}", "+\t\t\t\t\tif (count == entries.length)", "+\t\t\t\t\t\tSystem.arraycopy(entries, 0, entries = new EntryResult[count*2], 0, count);", "-\t\tif (count != entries.length){", "-\t\t\tSystem.arraycopy(entries, 0, entries = new IEntryResult[count], 0, count);", "-\t\t}", "+\t\tif (count != entries.length)", "+\t\t\tSystem.arraycopy(entries, 0, entries = new EntryResult[count], 0, count);"]}], "num": 66486}
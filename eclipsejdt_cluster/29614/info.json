{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5506bfcff4ce5e01ef06a257c7c3864", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8bb9f369e0f22efb9cbaa79bc09a7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tvoid buildMethods()", "signatureAfterChange": "  \tvoid buildMethods()", "diff": ["-\t\t\tMethodBinding[] abstractMethods = null;", "+\t\t\tboolean hasAbstractMethods = false;", "-\t\t\t\t\t\tif (methodBinding.isAbstract()) {", "-\t\t\t\t\t\t\tif (abstractMethods == null) {", "-\t\t\t\t\t\t\t\tabstractMethods = new MethodBinding[] {methodBinding};", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint length = abstractMethods.length;", "-\t\t\t\t\t\t\t\tSystem.arraycopy(abstractMethods, 0, abstractMethods = new MethodBinding[length + 1], 0, length);", "-\t\t\t\t\t\t\t\tabstractMethods[length] = methodBinding;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\thasAbstractMethods = hasAbstractMethods || methodBinding.isAbstract();", "-\t\t\tif (abstractMethods != null)", "-\t\t\t\tproblemReporter().abstractMethodInAbstractClass(sourceType, abstractMethods);", "+\t\t\tif (hasAbstractMethods)", "+\t\t\t\tproblemReporter().abstractMethodInConcreteClass(sourceType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bef472b2ec8bbcb1ada9de7d125563a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java", "commitBeforeChange": "b8967fb259bc4122f2d9f6e6be8973482d84bd2f", "commitAfterChange": "e7c40dbc434529a8379a830b9ae4ab2c74d0fc13", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r protected IMethod[] findMethods(IMethod method, IMethod[] methods)", "signatureAfterChange": "\r protected IMethod[] findMethods(IMethod method, IMethod[] methods)", "diff": ["-\t\tif (existingMethod.getElementName().equals(elementName)) {\r", "-\t\t\tString[] existingParams = existingMethod.getParameterTypes();\r", "-\t\t\tint existingParamLength = existingParams.length;\r", "-\t\t\tif (existingParamLength == paramLength) {\r", "-\t\t\t\tfor (int j = 0; j < paramLength; j++) {\r", "-\t\t\t\t\tString simpleName = Signature.getSimpleName(Signature.toString(existingParams[j]));\r", "-\t\t\t\t\tif (!simpleNames[j].equals(simpleName)) {\r", "-\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tlist.add(existingMethod);\r", "-\t\t\t}\r", "+\t\tif (this.areSimilarMethods(\r", "+\t\t\t\telementName,\r", "+\t\t\t\tparameters,\r", "+\t\t\t\texistingMethod.getElementName(),\r", "+\t\t\t\texistingMethod.getParameterTypes(),\r", "+\t\t\t\tsimpleNames)) {\r", "+\t\t\tlist.add(existingMethod);\r"]}], "num": 29614}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23e14cd77e77ddff5742b18b5d186cb0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28d2fb7149ad6afbafd25ce01591bdc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java", "commitBeforeChange": "4ab6cc8c24529af798fcb3762ec8aa5f9887812e", "commitAfterChange": "86d04547b51d0677dda29f45b4279354b3702983", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tboolean equalSubtrees(Object other)", "signatureAfterChange": "\r \tpublic boolean subtreeMatch(ASTMatcher matcher, Object other)", "diff": ["-\tboolean equalSubtrees(Object other) {\r", "-\t\tif (!(other instanceof ClassInstanceCreation)) {\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t\tClassInstanceCreation o = (ClassInstanceCreation) other;\r", "-\t\treturn \r", "-\t\t\t(ASTNode.equalNodes(getExpression(), o.getExpression())\r", "-\t\t\t&& ASTNode.equalNodes(getName(), o.getName())\r", "-\t\t\t&& ASTNode.equalLists(arguments(), o.arguments())\r", "-\t\t\t&& isAnonymousClassDeclaration() == o.isAnonymousClassDeclaration()\r", "-\t\t\t&& ASTNode.equalLists(bodyDeclarations(), o.bodyDeclarations()));\r", "+\tpublic boolean subtreeMatch(ASTMatcher matcher, Object other) {\r", "+\t\t// dispatch to correct overloaded match method\r", "+\t\treturn matcher.match(this, other);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39f2afe9c74db8a18c8cd9b110aa45a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/InfixExpression.java", "commitBeforeChange": "4ab6cc8c24529af798fcb3762ec8aa5f9887812e", "commitAfterChange": "86d04547b51d0677dda29f45b4279354b3702983", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tboolean equalSubtrees(Object other)", "signatureAfterChange": "\r \tpublic boolean subtreeMatch(ASTMatcher matcher, Object other)", "diff": ["-\tboolean equalSubtrees(Object other) {\r", "-\t\tif (!(other instanceof InfixExpression)) {\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t\tInfixExpression o = (InfixExpression) other;\r", "-\t\t// be careful not to trigger lazy creation of extended operand lists\r", "-\t\tif (hasExtendedOperands() && o.hasExtendedOperands()) {\r", "-\t\t\tif (!ASTNode.equalLists(extendedOperands(), o.extendedOperands())) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (hasExtendedOperands() != o.hasExtendedOperands()) {\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t\treturn \r", "-\t\t\t(getOperator().equals(o.getOperator())\r", "-\t\t\t&& ASTNode.equalNodes(getLeftOperand(), o.getLeftOperand())\r", "-\t\t\t&& ASTNode.equalNodes(getRightOperand(), o.getRightOperand()));\r", "+\tpublic boolean subtreeMatch(ASTMatcher matcher, Object other) {\r", "+\t\t// dispatch to correct overloaded match method\r", "+\t\treturn matcher.match(this, other);\r"]}], "num": 2940}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50e351775130e9a57d341b163f4e670a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d5ae87ce41ed2160c615ae21c8b758", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 684, "methodNumberAfterChange": 684, "signatureBeforeChange": " public void test0666()", "signatureAfterChange": " public void test0666()", "diff": ["-\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"Type safety: Unchecked cast from List<Object> to List<? extends Number>\\n\" + ", "+\t\t\"Cannot cast from List<Object> to List<? extends Number>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c273b40d71db6f8f5db776bdf17b1dff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "cb1176594034666f0f8d852dc8fc01987d54d11b", "commitAfterChange": "0096213f4b70c6196247b76dbfbdc7d2b6019590", "methodNumberBeforeChange": 823, "methodNumberAfterChange": 823, "signatureBeforeChange": " public void test817()", "signatureAfterChange": " public void test817()", "diff": ["-\t\t\"Cannot perform instanceof check against parameterized type X<?>.Inner. Use instead its raw form Inner since generic type information will be erased at runtime\\n\" + ", "+\t\t\"Incompatible conditional operand types X<?>.Inner[] and X<?>.Inner\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\"Cannot perform instanceof check against parameterized type X<?>.Inner[]. Use instead its raw form Inner[] since generic type information will be erased at runtime\\n\" + ", "+\t\t\"The expression of type X<?>.Inner[] is already an instance of type X<?>.Inner[]\\n\" + "]}], "num": 56124}
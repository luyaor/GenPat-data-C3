{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0eee659cabc7b45c8f3542c7825333d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19d2e35b0027d3fbb7b785d0fa8fb84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "faf66774125063b945b9059a75de1139a8d6264a", "commitAfterChange": "df7c7252bb25d1124375e0f48ecdac3fe62712d0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean isReadyToRun()", "signatureAfterChange": " \tpublic boolean isReadyToRun()", "diff": ["-\t\t// TODO: (jerome) Could improve by caching the index paths in the index selector", "-\t\tIndexSelector selector = new IndexSelector(this.scope, this.focus, this.isPolymorphicSearch, this.indexManager);", "-\t\tselector.getIndexes(); // do not want to cache these indexes since some may be null & need to be rebuilt", "+\t\tif (this.indexSelector == null) { // only check once, i.e. as long as this job is used, it will keep the same index picture", "+\t\t\tthis.indexSelector = new IndexSelector(this.scope, this.focus, this.isPolymorphicSearch, this.indexManager);", "+\t\t\tthis.indexSelector.getIndexes(); // will only cache answer if all indexes were available originally", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d494e143ef2426eccf2ee28754952212", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "ef6d0ed8f44402be2b4df60004e0bd04afc498e6", "commitAfterChange": "8ee5fa36071598355e44b420bae46ae82c697e43", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic boolean isReadyToRun()", "signatureAfterChange": " \tpublic void ensureReadyBeforeRun()", "diff": ["+\tpublic void ensureReadyBeforeRun() {", "+\t\tif (this.indexSelector == null) { // only check once. As long as this job is used, it will keep the same index picture", "+\t\t\tthis.indexSelector = new IndexSelector(this.scope, this.pattern, this.indexManager);", "+\t\t\tthis.indexSelector.getIndexes(); // will only cache answer if all indexes were available originally", "+\t\t}", "+\t}", "-\t}", "-\tpublic boolean isReadyToRun() {", "-\t\tif (this.indexSelector == null) { // only check once. As long as this job is used, it will keep the same index picture", "-\t\t\tthis.indexSelector = new IndexSelector(this.scope, this.pattern, this.indexManager);", "-\t\t\tthis.indexSelector.getIndexes(); // will only cache answer if all indexes were available originally", "-\t\t}", "-\t\treturn true;"]}], "num": 64865}
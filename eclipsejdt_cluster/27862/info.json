{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "467b5699bdea67167750f2f179d4c742", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "348f6142e636ac2d18e1d93be20185ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "6ce06528938fe7e21377a064a574540600275dd3", "commitAfterChange": "4f7bc7ed550fb18b593380689460147b32682704", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " protected int resolveLevelForType(char[] qualifiedPattern, TypeBinding type)", "signatureAfterChange": " protected int resolveLevelForType(char[] qualifiedPattern, TypeBinding type)", "diff": ["+\t// Type variable cannot be specified through pattern => this kind of binding cannot match it (see bug 79803)", "+\tif (type.isTypeVariable()) return IMPOSSIBLE_MATCH;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "429766acb0e603fa1ed4aff6d085e768", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "commitAfterChange": "c4fa4d272fd0c5fb7e1db44c8cef0ea47f3df504", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": "  \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-        return false;", "+\t    /* With the hybrid 1.4/1.5+ projects modes, while establishing type equivalence, we need to", "+\t       be prepared for a type such as Map appearing in one of three forms: As (a) a ParameterizedTypeBinding ", "+\t       e.g Map<String, String>, (b) as RawTypeBinding Map#RAW and finally (c) as a BinaryTypeBinding ", "+\t       When the usage of a type lacks type parameters, whether we land up with the raw form or not depends", "+\t       on whether the underlying type was \"seen to be\" a generic type in the particular build environment or", "+\t       not. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=328827 ", "+\t     */", "+\t    if (erasure() == otherType) {", "+\t    \treturn true;", "+\t    }", "+\t    return false;"]}], "num": 27862}
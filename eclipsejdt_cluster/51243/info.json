{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87eab127d3885018441f9aab7d440a18", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b6c52dab54ddb4c53fd08018468390d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariablePattern.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " protected StringBuffer print(StringBuffer output)", "diff": ["-public String toString() {", "-\tStringBuffer buffer = new StringBuffer(20);", "+protected StringBuffer print(StringBuffer output) {", "-\t\tbuffer.append(this.findReferences", "+\t\toutput.append(this.findReferences", "-\t\tbuffer.append(\"LocalVarReferencePattern: \"); //$NON-NLS-1$", "+\t\toutput.append(\"LocalVarReferencePattern: \"); //$NON-NLS-1$", "-\tbuffer.append(this.localVariable.toStringWithAncestors());", "-\tbuffer.append(\", \"); //$NON-NLS-1$", "-\tswitch(getMatchMode()) {", "-\t\tcase R_EXACT_MATCH : ", "-\t\t\tbuffer.append(\"exact match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t\tcase R_PREFIX_MATCH :", "-\t\t\tbuffer.append(\"prefix match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t\tcase R_PATTERN_MATCH :", "-\t\t\tbuffer.append(\"pattern match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t}", "-\tbuffer.append(isCaseSensitive() ? \"case sensitive\" : \"case insensitive\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\treturn buffer.toString();", "+\toutput.append(this.localVariable.toStringWithAncestors());", "+\treturn super.print(output);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb943933ec5d29bab77cb9475b900e19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "be1ab5866130739e4d5dea6be597450bab4d9fe1", "commitAfterChange": "b0e9bea8e580536e7492868aec6988424ff22cb7", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic java.io.File getGeneratedSourceFolderOutputLocation() \t\t throws JavaModelException", "signatureAfterChange": " \tpublic IPath getGeneratedSourceFolderOutputLocation() \t\t throws JavaModelException", "diff": ["-\tpublic java.io.File getGeneratedSourceFolderOutputLocation()", "+\tpublic IPath getGeneratedSourceFolderOutputLocation()", "-\t\tIPath outputRoot = null;", "-\t\tIFolder f = getGeneratedSourceFolder();", "-\t\tif ( f != null && f.exists() )", "+\t\tIPath outputRootPath = null;", "+\t\tIFolder generatedSourceFolder = getGeneratedSourceFolder();", "+\t\tif ( generatedSourceFolder != null && generatedSourceFolder.exists() )", "-\t\t\tIClasspathEntry cpe = findProjectSourcePath( _javaProject, f );", "+\t\t\tIClasspathEntry cpe = findProjectSourcePath( _javaProject, generatedSourceFolder );", "-\t\t\t\toutputRoot = cpe.getOutputLocation();", "+\t\t\t\toutputRootPath = cpe.getOutputLocation();", "-\t\tif ( outputRoot == null )", "-\t\t\toutputRoot = _javaProject.getOutputLocation();", "+\t\tif ( outputRootPath == null )", "+\t\t\toutputRootPath = _javaProject.getOutputLocation();", "-\t\tint segments = outputRoot.matchingFirstSegments( _javaProject.getPath() );", "-\t\toutputRoot = outputRoot.removeFirstSegments( segments );", "+\t\tint segments = outputRootPath.matchingFirstSegments( _javaProject.getPath() );", "+\t\toutputRootPath = outputRootPath.removeFirstSegments( segments );", "-\t\t// TODO - use getRawLocation() or getLocation()?  sometimes getRawLocation() returns null.  Investigate", "-\t\tIPath projectRoot = _javaProject.getProject().getRawLocation();", "-\t\tif ( projectRoot == null )", "-\t\t\tprojectRoot = _javaProject.getProject().getLocation();", "+\t\t// Now get the absolute path by prepending the project's path", "+\t\tIProject project = _javaProject.getProject();", "+\t\tIPath projectRoot = project.getLocation();", "+\t\toutputRootPath = projectRoot.append(outputRootPath);", "-\t\tjava.io.File file = projectRoot.toFile();", "-\t\tfile = new java.io.File( file, outputRoot.toFile().getPath() );", "-\t\treturn file;\t", "+\t\treturn outputRootPath;"]}], "num": 51243}
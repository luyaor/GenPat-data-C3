{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bccc1c423831026b80b4bf74a4f00cb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199da5457f1a638bc4ffad56099824d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "fa73f06745e7e6c8e84d2ccbc5e6982c2601c71e", "commitAfterChange": "abe804713571cdfdd296f9f85293e127191ccc0a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void select( \t\tICompilationUnit sourceUnit, \t\tint selectionSourceStart, \t\tint selectionSourceEnd)", "signatureAfterChange": " \tpublic void select( \t\tICompilationUnit sourceUnit, \t\tint selectionSourceStart, \t\tint selectionSourceEnd)", "diff": ["-\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "-\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "-\t\t\t\t\t\t\t\t\tselectMemberTypeFromImport(parsedUnit, lastToken, ref, importReference.isStatic());", "-\t\t\t\t\t\t\t\t\tif(importReference.isStatic()) {", "-\t\t\t\t\t\t\t\t\t\tselectStaticFieldFromStaticImport(parsedUnit, lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\tselectStaticMethodFromStaticImport(parsedUnit, lastToken, ref);", "+\t\t\t\t\t\t\t\tif(qualifierTokens != null && qualifierTokens.length > 0) {", "+\t\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "+\t\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "+\t\t\t\t\t\t\t\t\t\tselectMemberTypeFromImport(parsedUnit, lastToken, ref, importReference.isStatic());", "+\t\t\t\t\t\t\t\t\t\tif(importReference.isStatic()) {", "+\t\t\t\t\t\t\t\t\t\t\tselectStaticFieldFromStaticImport(parsedUnit, lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t\tselectStaticMethodFromStaticImport(parsedUnit, lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7bf6f376fa58ab6fa185e700c2c0ddc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "1c4db5a4cb89cc4b9085f6d427eba6f7566d5b74", "commitAfterChange": "9de11e1c2a41a21613174b6ab91cab4369b64686", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "signatureAfterChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "diff": ["-\t\t\t\tcase TerminalTokens.TokenNameboolean :\t", "+\t\t\t\tcase TerminalTokens.TokenNameboolean :", "+\t\t\t\t\t", "+\t\t\t\t\tif (internalPrefix != null && internalPrefix.length > 0) return;", "+\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f50314c4f71b3e85dc3f3f57704c4470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "7ff9b5e7960c9af4d2ba07d3470483b51a02c825", "commitAfterChange": "712b704995b043e4a4d99ad30227e5434cb6503c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["-\t\t\t\tTypeBinding parameterType = InferenceContext18.getParameter(parameters, i, variableArity); ", "+\t\t\t\tTypeBinding parameterType = InferenceContext18.getParameter(parameters, i, variableArity);", "+\t\t\t\tif (parameterType == null && problemReason != ProblemReasons.NoError)", "+\t\t\t\t\tcontinue; // not much we can do without a target type, assume it only happens after some resolve error"]}], "num": 40374}
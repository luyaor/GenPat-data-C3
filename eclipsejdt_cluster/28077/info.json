{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec5bf480867bdb6de0af85e6477233d7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355d3c51aa57fbe829328c1b9ea7b7c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "fced1a7a2b8f5ce77723d058091976d51b43704e", "commitAfterChange": "6900dd1a03d1ad901ee84c7d15bd4e318744abe6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void acceptInterface( \t\tchar[] packageName, \t\tchar[] interfaceName, \t\tint modifiers)", "signatureAfterChange": " \tpublic void acceptInterface( \t\tchar[] packageName, \t\tchar[] interfaceName, \t\tint modifiers)", "diff": ["-\t\tif (CharOperation.equals(interfaceName, selectedIdentifier)) {", "-\t\t\tif (qualifiedSelection != null", "+\t\tif (CharOperation.equals(interfaceName, this.selectedIdentifier)) {", "+\t\t\tif (this.qualifiedSelection != null", "-\t\t\t\t\tqualifiedSelection,", "+\t\t\t\t\tthis.qualifiedSelection,", "-\t\t\t\tif(acceptedInterfaces == null) {", "-\t\t\t\t\tacceptedInterfaces = new char[10][][];", "-\t\t\t\t\tacceptedInterfacesCount = 0;", "+\t\t\t\tif(this.acceptedInterfaces == null) {", "+\t\t\t\t\tthis.acceptedInterfaces = new char[10][][];", "+\t\t\t\t\tthis.acceptedInterfacesCount = 0;", "-\t\t\t\tint length = acceptedInterfaces.length;", "-\t\t\t\tif(length == acceptedInterfacesCount) {", "-\t\t\t\t\tSystem.arraycopy(acceptedInterfaces, 0, acceptedInterfaces = new char[(length + 1) * 2][][], 0, length);", "+\t\t\t\tint length = this.acceptedInterfaces.length;", "+\t\t\t\tif(length == this.acceptedInterfacesCount) {", "+\t\t\t\t\tSystem.arraycopy(this.acceptedInterfaces, 0, this.acceptedInterfaces = new char[(length + 1) * 2][][], 0, length);", "-\t\t\t\tacceptedInterfaces[acceptedInterfacesCount++] = acceptedInterface;", "+\t\t\t\tthis.acceptedInterfaces[this.acceptedInterfacesCount++] = acceptedInterface;", "-\t\t\t\tnoProposal = false;", "+\t\t\t\tthis.noProposal = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e595acffbefe8827e0497004b8d4ca39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": " public TypeBinding reportError(BlockScope scope)", "diff": ["-\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\tif (delegateThis == null){  // if not found then internal error, field should have been found", "+\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\tif (this.delegateThis == null){  // if not found then internal error, field should have been found", "-\tif ((binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound)", "-\t\t|| (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound)){", "+\tif ((this.binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) this.binding).problemId() == NotFound)", "+\t\t|| (this.binding instanceof ProblemBinding && ((ProblemBinding) this.binding).problemId() == NotFound)){", "-\t\tFieldBinding fieldBinding = scope.getField(delegateThis.type, this.tokens[0], this);", "+\t\tFieldBinding fieldBinding = scope.getField(this.delegateThis.type, this.tokens[0], this);", "-\t\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(delegateThis.type, this.tokens[0], this);", "-\t\t\t\tif (binding.isValidBinding()) {", "+\t\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(this.delegateThis.type, this.tokens[0], this);", "+\t\t\t\tif (this.binding.isValidBinding()) {", "-\t\tthis.codegenBinding = binding = fieldBinding;", "+\t\tthis.codegenBinding = this.binding = fieldBinding;", "-\tif (binding instanceof ProblemFieldBinding", "-\t\t&& ((ProblemFieldBinding) binding).problemId() == NotVisible) {", "+\tif (this.binding instanceof ProblemFieldBinding", "+\t\t&& ((ProblemFieldBinding) this.binding).problemId() == NotVisible) {"]}], "num": 28077}
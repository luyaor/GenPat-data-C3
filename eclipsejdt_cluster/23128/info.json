{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "977a498f207da9c29fe4a32dd4cf0225", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55d9de7b2fdc69e1f175a9b701480e54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic abstract TypeBinding getUnannotatedType(TypeBinding type);", "signatureAfterChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "diff": ["+\t// Given a type, answer its unannotated aka naked prototype. This is also a convenient way to \"register\" a type with TypeSystem and have it id stamped.", "+\tpublic final TypeBinding getUnannotatedType(TypeBinding type) {", "+\t\tif (type.id == TypeIds.NoId) {", "+\t\t\tif (type.hasTypeAnnotations())", "+\t\t\t\tthrow new IllegalStateException();", "+\t\t\tint typesLength = this.types.length;", "+\t\t\tif (this.typeid == typesLength)", "+\t\t\t\tSystem.arraycopy(this.types, 0, this.types = new TypeBinding[typesLength * 2][], 0, typesLength);", "+\t\t\tthis.types[type.id = this.typeid++] = new TypeBinding[4];", "+\t\t} else {", "+\t\t\tTypeBinding nakedType = this.types[type.id] == null ? null : this.types[type.id][0];", "+\t\t\tif (type.hasTypeAnnotations() && nakedType == null)", "+\t\t\t\tthrow new IllegalStateException();", "+\t\t\tif (nakedType != null)", "+\t\t\t\treturn nakedType;", "+\t\t\tthis.types[type.id] = new TypeBinding[4];  // well known type, assigned id elsewhere.", "+\t\t}", "+\t\treturn this.types[type.id][0] = type;", "+\t}", "-", "-\tpublic abstract TypeBinding getUnannotatedType(TypeBinding type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aea8690dba892cddcfd42de903353e00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  protected void recordExpectedType(TypeBinding expectedType, int nullCount)", "signatureAfterChange": "  protected void recordProvidedExpectedTypes(TypeBinding providedType, TypeBinding expectedType, int nullCount)", "diff": ["-protected void recordExpectedType(TypeBinding expectedType, int nullCount) {", "+protected void recordProvidedExpectedTypes(TypeBinding providedType, TypeBinding expectedType, int nullCount) {", "-\t\tthis.expectedTypes = new TypeBinding[5];", "-\t} else if (this.expectedTypes == null) {", "+\t\tthis.providedExpectedTypes = new TypeBinding[5][];", "+\t} else if (this.providedExpectedTypes == null) {", "-\t\tthis.expectedTypes = new TypeBinding[size];", "+\t\tthis.providedExpectedTypes = new TypeBinding[size][];", "-\telse if (nullCount >= this.expectedTypes.length) {", "-\t\tint oldLen = this.expectedTypes.length;", "-\t\tSystem.arraycopy(this.expectedTypes, 0,", "-\t\t\tthis.expectedTypes = new TypeBinding[nullCount * 2], 0, oldLen);", "+\telse if (nullCount >= this.providedExpectedTypes.length) {", "+\t\tint oldLen = this.providedExpectedTypes.length;", "+\t\tSystem.arraycopy(this.providedExpectedTypes, 0,", "+\t\t\tthis.providedExpectedTypes = new TypeBinding[nullCount * 2][], 0, oldLen);", "-\tthis.expectedTypes[nullCount] = expectedType;", "+\tthis.providedExpectedTypes[nullCount] = new TypeBinding[]{providedType, expectedType};"]}], "num": 23128}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c52ae0b915620f1e2ba7c6af9c842cb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e21216d69c7d5e1e000be4cd91e122c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-", "-\t\t\t&& ((operator == PLUS) || (operator == MULTIPLY)) // only commutative operations", "-\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == this.binding)", "-\t\t\t&& (operation.left.constant != Constant.NotAConstant) // exclude non constant expressions, since could have side-effect", "-\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString) // exclude string concatenation which would occur backwards", "-\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString)) { // exclude string concatenation which would occur backwards", "+\t\t\t\t&& ((operator == PLUS) || (operator == MULTIPLY)) // only commutative operations", "+\t\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == this.binding)", "+\t\t\t\t&& (operation.left.constant != Constant.NotAConstant) // exclude non constant expressions, since could have side-effect", "+\t\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString) // exclude string concatenation which would occur backwards", "+\t\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString)) { // exclude string concatenation which would occur backwards", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) this.codegenBinding;", "-\t\t\tif (fieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\tif (!fieldBinding.isStatic()) { // need a receiver?", "+\t\t\tFieldBinding codegenField = ((FieldBinding) this.binding).original();", "+\t\t\tif (codegenField.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\tif (!codegenField.isStatic()) { // need a receiver?", "-\t\t\t\tfieldStore(codeStream, fieldBinding, null, valueRequired);", "+\t\t\t\tfieldStore(currentScope, codeStream, codegenField, null, this.actualReceiverType, this.delegateThis == null /*implicit this*/, valueRequired);", "-\t\t\t\tcodeStream.generateEmulationForField(fieldBinding);", "-\t\t\t\tif (!fieldBinding.isStatic()) { // need a receiver?", "+\t\t\t\tcodeStream.generateEmulationForField(codegenField);", "+\t\t\t\tif (!codegenField.isStatic()) { // need a receiver?", "-\t\t\t\t\tif ((fieldBinding.type == TypeBinding.LONG) || (fieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\t\t\tif ((codegenField.type == TypeBinding.LONG) || (codegenField.type == TypeBinding.DOUBLE)) {", "-\t\t\t\tcodeStream.generateEmulatedWriteAccessForField(fieldBinding);", "+\t\t\t\tcodeStream.generateEmulatedWriteAccessForField(codegenField);", "-\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec4295bf4cbd784b396f83a0aafa9836", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnhancedForStatement.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void setName(SimpleName variableName)", "signatureAfterChange": "  \tpublic void setParameter(SingleVariableDeclaration parameter)", "diff": ["+\tpublic void setParameter(SingleVariableDeclaration parameter) {", "+\t\tif (parameter == null) {", "+\t\tpreReplaceChild(this.parameter, parameter, PARAMETER_PROPERTY);", "+\t\tthis.parameter = parameter;", "+\t\tpostReplaceChild(this.parameter, parameter, PARAMETER_PROPERTY);", "-\t */ ", "-\tpublic void setName(SimpleName variableName) {", "-\t\tif (variableName == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\treplaceChild(this.variableName, variableName, false);", "-\t\tthis.variableName = variableName;", "-\t}"]}], "num": 36659}
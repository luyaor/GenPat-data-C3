{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5252c8ca7b693a8fffda666b8cecb6b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc7eaf97e7ce41ea88555e31c4a3fd2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "3758ce6a10bd01302b15da1982aa821d553e3aa3", "commitAfterChange": "3f52c731c12e40c6d36b09a1af089b5451926fb5", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tboolean ignoreUnresolvedVariable,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tboolean ignoreUnresolvedVariable,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "diff": ["-\t\t// expanded path is cached on its info\r", "-//\t\tIClasspathEntry[] infoPath = getJavaProjectElementInfo().lastResolvedClasspath;\r", "-//\t\tif (infoPath != null) return infoPath;\r", "+\t\t// resolved path is cached on its info\r", "+\t\tJavaProjectElementInfo projectInfo = getJavaProjectElementInfo();\r", "+\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "+\t\tif (infoPath != null) return infoPath;\r", "-//\t\tgetJavaProjectElementInfo().lastResolvedClasspath = resolvedPath;\r", "+\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd0cbb4c8c8056981cc8bea82158d993", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "cb3d28a5bbc57c9dc9450ff6ca1c4148eb20218e", "commitAfterChange": "c4ef8d3dd9e4b5596957ea40b9cce8f1ba336f84", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tprivate static TypeDeclaration convert(\r \t\tISourceType sourceType,\r \t\tboolean needFieldsAndMethods,\r \t\tboolean needMemberTypes)", "signatureAfterChange": "\r \tprivate static TypeDeclaration convert(\r \t\tISourceType sourceType,\r \t\tboolean needFieldsAndMethods,\r \t\tboolean needMemberTypes)", "diff": ["+\t\t\tboolean isInterface = type.isInterface();\r", "-\t\t\t\ttype.methods[neededCount + i] = convert(sourceMethods[i]);\r", "+\t\t\t\tAbstractMethodDeclaration method =convert(sourceMethods[i]);\r", "+\t\t\t\tif (isInterface || method.isAbstract()) { // fix-up flag \r", "+\t\t\t\t\tmethod.modifiers |= AccSemicolonBody;\r", "+\t\t\t\t}\r", "+\t\t\t\ttype.methods[neededCount + i] = method;\r"]}], "num": 5144}
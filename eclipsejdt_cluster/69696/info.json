{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27805df97df6b0aed4afcbd33eebb310", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06e4795c9b1754c7edd7d9c025b0581b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "6afa93473446fb2c6b874f92c72045670997535f", "commitAfterChange": "e9d42bfbf494b3bd89965c526aaae07d7189c12c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["+\t\t\t\t\t\tbreak returnType;", "-\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod);", "+\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, useTypeAnnotations);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (useTypeAnnotations) {", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(inheritedMethod.returnType, currentMethod.returnType, 0, true).isAnyMismatch()) {", "+\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, useTypeAnnotations);", "-\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod);", "+\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, false);", "+\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod);", "+\t\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, false);", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t\tif (useTypeAnnotations) {", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedMethod.parameters[i], 0, true).isAnyMismatch()) {", "+\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c460eb7147e2b78e949f740e401ba5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "76a2ec884825e9edb380555c61500f23750ece32", "commitAfterChange": "0dc9f4a7cc769fd0c2e397d6cc32c352b61f03b4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t\tif (this.typeArguments != null && this.binding.original().typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\t\t\t\tscope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(this.binding, this.genericTypeArguments, this.typeArguments);", "+\t\t\t\t}\t\t\t\t", "+\t\tif (this.typeArguments != null && inheritedBinding.original().typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\t\tscope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(inheritedBinding, this.genericTypeArguments, this.typeArguments);", "+\t\t}\t\t"]}], "num": 69696}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc63b9f8f221e7e78f7aedfa03dc7b86", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26c2b47e25bf7bc58f709b201bb4e7bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "2b658a2e19b9466b65c78bf38bae4989bbb6fce3", "commitAfterChange": "52ad2d5b0def2732a36b65b6310c1844772d18ed", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_SOURCE)) ", "+\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE)", "-\t\t\t\t// nothing to index but want to save empty index file", "-// TODO (kent) how should empty projects be saved? if no rebuild job is issued then we would be ok", "-//\t\t\t\tIndex index = this.manager.getIndexForUpdate(this.containerPath, true, /*reuse index file*/ true /*create if none*/);", "-//\t\t\t\tif (index != null)", "-//\t\t\t\t\tthis.manager.saveIndex(index);", "-\t\t\t\t// also the project might be a library folder (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=89815)", "+\t\t\t\tIPath projectPath = javaProject.getPath();", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = entries[i];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && entry.getPath().equals(projectPath))", "+\t\t\t\t\t\treturn true; // the project is also a library folder (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=89815)", "+\t\t\t\t}", "+", "+\t\t\t\t// nothing to index but want to save an empty index file so its not 'rebuilt' when part of a search request", "+\t\t\t\tIndex index = this.manager.getIndexForUpdate(this.containerPath, true, /*reuse index file*/ true /*create if none*/);", "+\t\t\t\tif (index != null)", "+\t\t\t\t\tthis.manager.saveIndex(index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6470afe82394133267cd070799b38fd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "signatureAfterChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "diff": ["-    \t\t\tthis.typeArguments[i] = inferenceContext.substitutes[i];", "+    \t\t\tthis.typeArguments[i] = substitute;", "-\t    \t\tthis.typeArguments[i] = originalVariables[i].upperBound();", "+\t    \t\tthis.typeArguments[i] = inferenceContext.substitutes[i] = originalVariables[i].upperBound();", "-\t\t// may still need an extra substitution at the end (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=121369)", "-\t\t// to properly substitute a remaining unresolved variable which also appear in a formal bound", "-    \tthis.typeArguments = Scope.substitute(this, this.typeArguments);", "+\t\t/* May still need an extra substitution at the end (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=121369)", "+\t\t   to properly substitute a remaining unresolved variable which also appear in a formal bound. See also", "+\t\t   http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5021635. It is questionable though whether this extra", "+\t\t   substitution should take place when the invocation site offers no guidance whatsoever and the type variables", "+\t\t   are inferred to be the glb of the published bounds - as there can recursion in the formal bounds, the", "+\t\t   inferred bounds would no longer be glb.", "+\t\t*/", "+\t\t", "+\t\tthis.typeArguments = Scope.substitute(this, this.typeArguments);"]}], "num": 11592}
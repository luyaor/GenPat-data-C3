{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a505b8fc687ae41e2181fc1e04c8a7c0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb65cfc166e51a3d383364add7e606e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "678850fe27109f883daa0f4585d44c71bef496d8", "commitAfterChange": "34524ca2a2726d3f2d12d7ec232f0ab3f3d44b88", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic char[] findSource(IType type, String simpleSourceFileName)", "signatureAfterChange": " \tpublic char[] findSource(IType type, String simpleSourceFileName)", "diff": ["-\t\tJavaModelManager javaModelManager = JavaModelManager.getJavaModelManager();", "-\t\ttry {", "-\t\t\tjavaModelManager.cacheZipFiles(this); // Cache any zip files we open during this operation", "+\t\tif (this.rootPath != null) {", "+\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "+\t\t}", "-\t\t\tif (this.rootPath != null) {", "-\t\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "-\t\t\t}", "-\t", "-\t\t\tif (source == null) {", "-\t\t\t\tcomputeAllRootPaths(type);", "-\t\t\t\tif (this.rootPaths != null) {", "-\t\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "-\t\t\t\t\t\tString currentRootPath = (String) iterator.next();", "-\t\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "-\t\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "-\t\t\t\t\t\t\tif (source != null) {", "-\t\t\t\t\t\t\t\t// remember right root path", "-\t\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "-\t\t\t\t\t\t\t\tbreak loop;", "-\t\t\t\t\t\t\t}", "+\t\tif (source == null) {", "+\t\t\tcomputeAllRootPaths(type);", "+\t\t\tif (this.rootPaths != null) {", "+\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "+\t\t\t\t\tString currentRootPath = (String) iterator.next();", "+\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "+\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "+\t\t\t\t\t\tif (source != null) {", "+\t\t\t\t\t\t\t// remember right root path", "+\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "+\t\t\t\t\t\t\tbreak loop;", "-\t\t} finally {", "-\t\t\tjavaModelManager.flushZipFiles(this); // clean up cached zip files."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e41d68ab0cddf67562e74e827255b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "80b943f963112b96526206ea468e65d8b3811701", "commitAfterChange": "da8753945f9324ceda2d1052b9998ea992c54912", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic char[] findSource(IType type, String simpleSourceFileName)", "signatureAfterChange": " \tpublic char[] findSource(IType type, String simpleSourceFileName)", "diff": ["-\t\tJavaModelManager javaModelManager = JavaModelManager.getJavaModelManager();", "-\t\ttry {", "-\t\t\tjavaModelManager.cacheZipFiles(); // Cache any zip files we open during this operation", "+\t\tif (this.rootPath != null) {", "+\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "+\t\t}", "-\t\t\tif (this.rootPath != null) {", "-\t\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "-\t\t\t}", "-\t", "-\t\t\tif (source == null) {", "-\t\t\t\tcomputeAllRootPaths(type);", "-\t\t\t\tif (this.rootPaths != null) {", "-\t\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "-\t\t\t\t\t\tString currentRootPath = (String) iterator.next();", "-\t\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "-\t\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "-\t\t\t\t\t\t\tif (source != null) {", "-\t\t\t\t\t\t\t\t// remember right root path", "-\t\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "-\t\t\t\t\t\t\t\tbreak loop;", "-\t\t\t\t\t\t\t}", "+\t\tif (source == null) {", "+\t\t\tcomputeAllRootPaths(type);", "+\t\t\tif (this.rootPaths != null) {", "+\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "+\t\t\t\t\tString currentRootPath = (String) iterator.next();", "+\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "+\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "+\t\t\t\t\t\tif (source != null) {", "+\t\t\t\t\t\t\t// remember right root path", "+\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "+\t\t\t\t\t\t\tbreak loop;", "-\t\t} finally {", "-\t\t\tjavaModelManager.flushZipFiles(); // clean up cached zip files."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5029fc7ba8c339ce3dfba17dd2d21ffb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "e781f8e7f01bf193d5dc75f48e7e40aa2b3a1ff8", "commitAfterChange": "253b6e86274d6a434f078cf2295ba672e6b070f0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["-", "-\t\tString fullName;", "-\t\tif (this.rootPath != null && !this.rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "-\t\t\tfullName = this.rootPath + '/' + name;", "-\t\t} else {", "-\t\t\tfullName = name;", "+\t", "+\t\tchar[] source = null;", "+\t\tif (this.rootPath != null) {", "+\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "-\t\tchar[] source = findSource(fullName);", "-\t\t\t// root path may just have been a hint: try recomputing it", "-\t\t\tString rootPath = this.computeRootPath();", "-\t\t\tString newFullName;", "-\t\t\tif (rootPath != null && !rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "-\t\t\t\tif (rootPath.endsWith(\"/\")) { //$NON-NLS-1$", "-\t\t\t\t\tnewFullName = rootPath + name;", "-\t\t\t\t} else {", "-\t\t\t\t\tnewFullName = rootPath + '/' + name;", "+\t\t\t/*", "+\t\t\t * We should try all existing root paths. If none works, try to recompute it.", "+\t\t\t * If it still doesn't work, then return null", "+\t\t\t */", "+\t\t\tif (this.rootPaths != null) {", "+\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "+\t\t\t\t\tString currentRootPath = (String) iterator.next();", "+\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "+\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "+\t\t\t\t\t\tif (source != null) {", "+\t\t\t\t\t\t\t// remember right root path", "+\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "+\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tnewFullName = name;", "-\t\t\tif (!fullName.equals(newFullName)) {", "-\t\t\t\tsource = this.findSource(newFullName);", "-\t\t\t\tif (source != null) {", "-\t\t\t\t\t// remember right root path", "-\t\t\t\t\tthis.rootPath = rootPath;", "+\t\t\tif (source == null) {", "+\t\t\t\t// Try to recompute it and add the new root path to the rootPaths collection", "+\t\t\t\tString newRootPath = computeRootPath(name);", "+\t\t\t\tif (newRootPath != null) {", "+\t\t\t\t\tif (this.rootPaths == null) {", "+\t\t\t\t\t\tthis.rootPaths = new HashSet();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.rootPaths.add(newRootPath);", "+\t\t\t\t\tthis.rootPath = newRootPath;", "+\t\t\t\t\tsource = getSourceForRootPath(newRootPath, name);"]}], "num": 22658}
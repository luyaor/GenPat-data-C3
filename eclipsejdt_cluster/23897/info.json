{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02f275ac394bcfa5bcc28abd7e45ae26", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325ae77f0d3bbdae63d3f780644de87e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "4ec8463782f86806757a76ab2d360d5012825932", "commitAfterChange": "f7bc2ee5d62baf64b6f044f322b40cdaa75e5dcc", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": "\t \t \tpublic void testEnumDeclaration()", "signatureAfterChange": " \tpublic void testEnumDeclaration()", "diff": ["+\t */", "+\t\tassertTrue(x.enumConstants().size()== 0);", "+\t\tgenericPropertyListTest(x, x.enumConstants(),", "+\t\t\t\t  new Property(\"EnumConstants\", true, EnumConstantDeclaration.class) { //$NON-NLS-1$", "+\t\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\t\tEnumConstantDeclaration result = targetAst.newEnumConstantDeclaration();", "+\t\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\t\t// use fact that EnumConstantDeclaration is also a BodyDeclaration", "+\t\t\t\t\t\t\tTypeDeclaration d = targetAst.newTypeDeclaration();", "+\t\t\t\t\t\t\td.bodyDeclarations().add(result);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn result;", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\t\tEnumConstantDeclaration s1 = x.getAST().newEnumConstantDeclaration();", "+\t\t\t\t\t\ts1.bodyDeclarations().add(x);", "+\t\t\t\t\t\treturn s1;", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\t\tEnumConstantDeclaration s1 = (EnumConstantDeclaration) x.getParent();", "+\t\t\t\t\t\ts1.bodyDeclarations().remove(x);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\t", "-\t\tx.bodyDeclarations().add(c1);", "-\t\tx.bodyDeclarations().add(c2);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "+\t\tx.enumConstants().add(c1);", "+\t\tx.enumConstants().add(c2);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(t1);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "+\t\tx.bodyDeclarations().add(t1);", "-\t\tx.bodyDeclarations().add(ast.newInitializer());", "-\t\tList es = Arrays.asList(x.getEnumConstants());", "-\t\tassertTrue(es.size() == 2);", "-\t\tassertTrue(es.contains(c1));", "-\t\tassertTrue(es.contains(c2));", "+\t\t// getEnumConstants() is deprecated - this test will be removed after 3.1M3", "+\t\tEnumConstantDeclaration[] cs = x.getEnumConstants();", "+\t\tassertTrue(cs.length == 2);", "+\t\tassertEquals(c1, cs[0]);", "+\t\tassertEquals(c2, cs[1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f35871865d400636ad5cc6062aa82ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "600e48f032b359e080127669aade9cc1c66a15b1", "commitAfterChange": "0e6d4fe5469565f21baa2fd0ec88d178818c619b", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": "\t \t \tpublic void testEnumConstantDeclaration()", "signatureAfterChange": " \tpublic void testEnumConstantDeclaration()", "diff": ["+\t// TODO (jeem) - remove deprecation after 3.1 M4", "+\t\tassertTrue(x.getAnonymousClassDeclaration() == null);", "+\t\t// TODO (jeem) - after 3.1 M4 remove mention of bodyDeclarations", "+\t\tgenericPropertyTest(x, new Property(\"AnonymousClassDeclaration\", false, AnonymousClassDeclaration.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tAnonymousClassDeclaration result = targetAst.newAnonymousClassDeclaration();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\ttargetAst.newClassInstanceCreation().setAnonymousClassDeclaration(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t// return AnonymousClassDeclaration that embeds x", "+\t\t\t\tAnonymousClassDeclaration s0 = x.getAST().newAnonymousClassDeclaration();", "+\t\t\t\tEnumDeclaration s1 = x.getAST().newEnumDeclaration();", "+\t\t\t\ts0.bodyDeclarations().add(s1);", "+\t\t\t\ts1.bodyDeclarations().add(x);", "+\t\t\t\treturn s0;", "+\t\t\t}", "+\t\t\tpublic void unwrap() {", "+\t\t\t\tEnumDeclaration s1 = (EnumDeclaration) x.getParent();", "+\t\t\t\ts1.bodyDeclarations().remove(x);", "+\t\t\t}", "+\t\t\tpublic ASTNode get() {", "+\t\t\t\treturn x.getAnonymousClassDeclaration();", "+\t\t\t}", "+\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\tx.setAnonymousClassDeclaration((AnonymousClassDeclaration) value);", "+\t\t\t}", "+\t\t});", "+", "+\t\t// check that TypeDeclarations in body are classified correctly", "+\t\tx.setAnonymousClassDeclaration(null);", "+\t\tAnonymousClassDeclaration w0 = ast.newAnonymousClassDeclaration();", "+\t\tx.setAnonymousClassDeclaration(w0);", "+\t\tTypeDeclaration w1 = ast.newTypeDeclaration();", "+\t\tw0.bodyDeclarations().add(w1);", "+", "+\t\tassertTrue(w1.isLocalTypeDeclaration() == false);", "+\t\tassertTrue(w1.isMemberTypeDeclaration() == true);", "+\t\tassertTrue(w1.isPackageMemberTypeDeclaration() == false);", "+\t"]}], "num": 23897}
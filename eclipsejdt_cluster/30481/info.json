{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "861d5dad8bcda51906cdc4d8c1c48cf6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a6fdf9575979f42c39fd827e6e44a2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MemberDeclarationVisitor.java", "commitBeforeChange": "cefc7f3f8677282aa49e610700500999ffcaffcb", "commitAfterChange": "89e8879d5dd978e5f2535f9d8b7bac080dd4f73b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public boolean visit(LocalDeclaration declaration, BlockScope scope)", "signatureAfterChange": " public boolean visit(LambdaExpression lambdaExpression, BlockScope scope)", "diff": ["+public boolean visit(LambdaExpression lambdaExpression, BlockScope scope) {", "+\tInteger level = (Integer) this.nodeSet.matchingNodes.removeKey(lambdaExpression);", "+\ttry {", "+\t\tthis.locator.reportMatching(lambdaExpression, this.enclosingElement, level != null ? level.intValue() : -1, this.nodeSet);", "+\t} catch (CoreException e) {", "+\t\tthrow new WrappedCoreException(e);", "+\t}", "+\treturn true;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e8f3779bc7db6e22468fa3c9788bed7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "f36c718beb8bf08713390b2fd835e572041478ae", "commitAfterChange": "de0ec0255833f27449d5f59da580e82b41fe6f0d", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tprotected boolean parse(int specialToken)", "signatureAfterChange": " \tprotected Goal parse(Goal goal, Goal alternateGoal)", "diff": ["-\tprotected boolean parse(int specialToken) { // Canonical LALR pushdown automaton identical to Parser.parse() minus side effects of any kind.", "-\t\tthis.scanner.setFakeEofToken(specialToken);", "+\t// Canonical LALR pushdown automaton identical to Parser.parse() minus side effects of any kind, returns the rule reduced.", "+\tprotected Goal parse(Goal goal, Goal alternateGoal) {", "-\t\t\tthis.currentToken = specialToken; // steer the parser towards a single minded goal. ", "+\t\t\tthis.currentToken = goal.first; ", "-\t\t\t\t\treturn false;", "+\t\t\t\t\treturn Goal.FailedGoal;", "-\t\t\t\t    return true; // accept !", "+\t\t\t\t    return Goal.FailedGoal; // accept - we should never reach this state, we accept at reduce with a right member of follow set below.", "+\t\t\t\t\tif (goal.hasBeenReached(act, this.currentToken))", "+\t\t\t\t\t\treturn goal;", "+\t\t\t\t\tif (alternateGoal != null && alternateGoal.hasBeenReached(act,  this.currentToken))", "+\t\t\t\t\t\treturn alternateGoal;", "-\t\t\treturn false;", "+\t\t\treturn Goal.FailedGoal;"]}], "num": 30481}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fdf8843db2715ab062d1404d6225a81", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cfc992e4a640c697863724df172946b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "f72b9294e29a54b769c09b51ef7c0dfbd4791089", "commitAfterChange": "bf20c4733b5ba628131f77425b6d1ad646dfd787", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient)", "signatureAfterChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient)", "diff": ["-\t\t\t\t\t\tlocal.tagBits = ((LocalVariableBinding) annotationRecipient).tagBits;", "+\t\t\t\t\t\tlong otherLocalTagBits = ((LocalVariableBinding) annotationRecipient).tagBits;", "+\t\t\t\t\t\tlocal.tagBits = otherLocalTagBits;", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * Annotations are shared between two locals, but we still need to record", "+\t\t\t\t\t\t * the suppress annotation range for the second local", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\tif ((otherLocalTagBits & TagBits.AnnotationSuppressWarnings) != 0) {", "+\t\t\t\t\t\t\tLocalDeclaration localDeclaration = local.declaration;", "+\t\t\t\t\t\t\tannotation.recordSuppressWarnings(scope, localDeclaration.declarationSourceStart, localDeclaration.declarationSourceEnd, scope.compilerOptions().suppressWarnings);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8633344ee2083da707a08bfe6d328176", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/TypeAnnotationCodeStream.java", "commitBeforeChange": "963ad4c5e113eba29c599e5fefea6c28cb728772", "commitAfterChange": "cf4d63b8cb3eb4d0964e155767da7aeaa9651363", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding)", "signatureAfterChange": " \t \tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding, int currentPosition)", "diff": ["-\tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding) {", "+\tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding, int currentPosition) {", "-\t\t\t\t\tif ((typeReference.bits & ASTNode.HasTypeAnnotations) != 0)", "-\t\t\t\t\t\taddAnnotationContext(typeReference, this.position, i, AnnotationTargetTypeConstants.CAST);", "-\t\t\t\t\tsuper.checkcast(typeReference, typeReference.resolvedType);", "+\t\t\t\t\tif ((typeReference.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\tif (!typeReference.resolvedType.isBaseType()) {", "+\t\t\t\t\t\t\taddAnnotationContext(typeReference, this.position, i, AnnotationTargetTypeConstants.CAST);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// for base type record it against the start position of the expression", "+\t\t\t\t\t\t\taddAnnotationContext(typeReference, currentPosition, i, AnnotationTargetTypeConstants.CAST);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!typeReference.resolvedType.isBaseType()) {", "+\t\t\t\t\t\tsuper.checkcast(typeReference, typeReference.resolvedType, currentPosition);", "+\t\t\t\t\t}", "-\t\t\tsuper.checkcast(null, typeBinding);", "+\t\t\tsuper.checkcast(null, typeBinding, currentPosition);"]}], "num": 18089}
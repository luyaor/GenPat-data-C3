{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42f6cfdfd7a72fe63b78e468b33a457a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1200e90f6a50f2692637c41884f126fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "2325884dde9438b06c0c79c1dfd33a091d106072", "commitAfterChange": "1826d0fe5b887e907f5db40f2da4d23b5ef1c8d6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate boolean connectSuperInterfaces()", "signatureAfterChange": " \tprivate boolean connectSuperInterfaces()", "diff": ["-\t\t// check for parameterized interface collisions (when different parameterizations occur)", "-\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "-\t\t\tTypeBinding[] types = new TypeBinding[2];", "-\t\t\tMap invocations = new HashMap(2);", "-\t\t\tnextInterface: for (int i = 0; i < count; i++) {", "-\t\t\t\tReferenceBinding superInterface =  interfaceBindings[i];", "-\t\t\t\t// check against superclass", "-\t\t\t\tif (!sourceType.isInterface()) {", "-\t\t\t\t\ttypes[0] = sourceType.superclass;", "-\t\t\t\t\ttypes[1] = superInterface;", "-\t\t\t\t\tTypeBinding[] mecs = minimalErasedCandidates(types, invocations);", "-\t\t\t\t\tif (mecs != null) {", "-\t\t\t\t\t\tnextCandidate: for (int k = 0, max = mecs.length; k < max; k++) {", "-\t\t\t\t\t\t\tTypeBinding mec = mecs[k];", "-\t\t\t\t\t\t\tif (mec == null) continue nextCandidate;", "-\t\t\t\t\t\t\tSet invalidInvocations = (Set)invocations.get(mec);", "-\t\t\t\t\t\t\tint invalidSize = invalidInvocations.size();", "-\t\t\t\t\t\t\tif (invalidSize > 1) {", "-\t\t\t\t\t\t\t\tTypeBinding[] collisions;", "-\t\t\t\t\t\t\t\tinvalidInvocations.toArray(collisions = new TypeBinding[invalidSize]);", "-\t\t\t\t\t\t\t\tproblemReporter().superinterfacesCollide(collisions[0].erasure(), referenceContext, collisions[0], collisions[1]);", "-\t\t\t\t\t\t\t\tsourceType.tagBits |= TagBits.HierarchyHasProblems;", "-\t\t\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\t\t\tcontinue nextInterface;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\t// check against other super-interfaces", "-\t\t\t\ttypes[0] = superInterface;", "-\t\t\t\tnextOtherInterface: for (int j = 0; j < i; j++) {", "-\t\t\t\t\tReferenceBinding otherInterface = interfaceBindings[j];", "-\t\t\t\t\tif (otherInterface == null) continue nextOtherInterface;", "-\t\t\t\t\ttypes[1] = otherInterface;", "-\t\t\t\t\tinvocations.clear();", "-\t\t\t\t\tTypeBinding[] mecs = minimalErasedCandidates(types, invocations);", "-\t\t\t\t\tif (mecs != null) {", "-\t\t\t\t\t\tnextCandidate: for (int k = 0, max = mecs.length; k < max; k++) {", "-\t\t\t\t\t\t\tTypeBinding mec = mecs[k];", "-\t\t\t\t\t\t\tif (mec == null) continue nextCandidate;", "-\t\t\t\t\t\t\tSet invalidInvocations = (Set)invocations.get(mec);", "-\t\t\t\t\t\t\tint invalidSize = invalidInvocations.size();", "-\t\t\t\t\t\t\tif (invalidSize > 1) {", "-\t\t\t\t\t\t\t\tTypeBinding[] collisions;", "-\t\t\t\t\t\t\t\tinvalidInvocations.toArray(collisions = new TypeBinding[invalidSize]);", "-\t\t\t\t\t\t\t\tproblemReporter().superinterfacesCollide(collisions[0].erasure(), referenceContext, collisions[0], collisions[1]);", "-\t\t\t\t\t\t\t\tsourceType.tagBits |= TagBits.HierarchyHasProblems;", "-\t\t\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\t\t\tcontinue nextInterface;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "850016a004220fec1087826c5ce8597f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "f5733c2118cce9570c584a3c84480228a3b7fc00", "commitAfterChange": "2325884dde9438b06c0c79c1dfd33a091d106072", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "signatureAfterChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "diff": ["-\tprotected boolean connectTypeVariables(TypeParameter[] typeParameters) {", "+\tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions) {", "-\t\tTypeBinding[] types = new TypeBinding[2];", "-\t\t\t\t\ttypes[0] = superType;", "-\t\t\t\t\tif (typeVariable.firstBound == typeVariable.superclass) {", "-\t\t\t\t\t\ttypes[1] = typeVariable.superclass;", "-\t\t\t\t\t\tTypeBinding[] mecs = minimalErasedCandidates(types, invocations);", "-\t\t\t\t\t\tif (mecs != null) {", "-\t\t\t\t\t\t\tnextCandidate: for (int k = 0, max = mecs.length; k < max; k++) {", "-\t\t\t\t\t\t\t\tTypeBinding mec = mecs[k];", "-\t\t\t\t\t\t\t\tif (mec == null) continue nextCandidate;", "-\t\t\t\t\t\t\t\tSet invalidInvocations = (Set)invocations.get(mec);", "-\t\t\t\t\t\t\t\tint invalidSize = invalidInvocations.size();", "-\t\t\t\t\t\t\t\tif (invalidSize > 1) {", "-\t\t\t\t\t\t\t\t\tTypeBinding[] collisions;", "-\t\t\t\t\t\t\t\t\tinvalidInvocations.toArray(collisions = new TypeBinding[invalidSize]);", "-\t\t\t\t\t\t\t\t\tproblemReporter().superinterfacesCollide(collisions[0].erasure(), typeRef, collisions[1], collisions[0]); // swap collisions since mec types got swapped", "-\t\t\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "-\t\t\t\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}\t\t\t", "+\t\t\t\t\tif (checkForErasedCandidateCollisions && typeVariable.firstBound == typeVariable.superclass) {", "+\t\t\t\t\t\tif (hasErasedCandidatesCollisions(superType, typeVariable.superclass, invocations, typeVariable, typeRef)) {", "+\t\t\t\t\t\t\tnoProblems = false;", "+\t\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t\ttypes[1] = previousInterface;", "-\t\t\t\t\t\tinvocations.clear();", "-\t\t\t\t\t\tTypeBinding[] mecs = minimalErasedCandidates(types, invocations);", "-\t\t\t\t\t\tif (mecs != null) {", "-\t\t\t\t\t\t\tnextCandidate: for (int m = 0, max = mecs.length; m < max; m++) {", "-\t\t\t\t\t\t\t\tTypeBinding mec = mecs[m];", "-\t\t\t\t\t\t\t\tif (mec == null) continue nextCandidate;", "-\t\t\t\t\t\t\t\tSet invalidInvocations = (Set)invocations.get(mec);", "-\t\t\t\t\t\t\t\tint invalidSize = invalidInvocations.size();", "-\t\t\t\t\t\t\t\tif (invalidSize > 1) {", "-\t\t\t\t\t\t\t\t\tTypeBinding[] collisions;", "-\t\t\t\t\t\t\t\t\tinvalidInvocations.toArray(collisions = new TypeBinding[invalidSize]);", "-\t\t\t\t\t\t\t\t\tproblemReporter().superinterfacesCollide(collisions[0].erasure(), typeRef, collisions[0], collisions[1]);", "-\t\t\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "-\t\t\t\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\tif (checkForErasedCandidateCollisions) {", "+\t\t\t\t\t\t\tif (hasErasedCandidatesCollisions(superType, previousInterface, invocations, typeVariable, typeRef)) {", "+\t\t\t\t\t\t\t\tnoProblems = false;", "+\t\t\t\t\t\t\t\tcontinue nextVariable;", "+\t\t\t\t\t\t\t}"]}], "num": 33000}
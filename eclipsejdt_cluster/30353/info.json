{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "890664e53ab37f98364bb7a189b7eda1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8801b687ba9f89f44e4ba1c936e1b26a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "21f559feffbf2460bdd3a9d1e827cbd3c01012af", "commitAfterChange": "686f3b257f4d32050f06213668cbddf17fedbfcf", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-\t\tif (one.isVarargs() && two.isVarargs() && oneParamsLength > twoParamsLength) {", "-\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "-\t\t\tif (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)", "-\t\t\t\treturn false;", "+\t\tif (one.isVarargs() && two.isVarargs()) {", "+\t\t\tif (oneParamsLength > twoParamsLength) {", "+\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "+\t\t\t\tif (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)", "+\t\t\t\t\treturn false;", "+\t\t\t}", "-\t\t\tfor (int i = twoParamsLength - 2; i >= 0; i--)", "+\t\t\tfor (int i = (oneParamsLength > twoParamsLength ? twoParamsLength : oneParamsLength) - 2; i >= 0; i--)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab2c3112a0bc4b4ddb5d5d611b9a8832", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0edd2a8da94febc0bef7418a02cfac9f1a30d36a", "commitAfterChange": "85f48e0f08275e1f81e9995073d5c4f69bfd0707", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": " \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["+\t// Tie break IS running to determine the most specific method binding.", "+\t\t\t\t\t\tTypeBinding oType = ((ArrayBinding) oneParam).elementsType();", "-\t\t\t\t\t\tif (oneParam == eType || oneParam.isCompatibleWith(eType))", "+\t\t\t\t\t\tif (oType == eType || oType.isCompatibleWith(eType))", "-\t\t\tif (oneParamsLength > twoParamsLength) {", "-\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "-\t\t\t\tif (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)", "-\t\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (parameterCompatibilityLevel(one, twoParams) == NOT_COMPATIBLE", "-\t\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "+\t\t\tif (parameterCompatibilityLevel(one, twoParams, true) == NOT_COMPATIBLE", "+\t\t\t\t\t&& parameterCompatibilityLevel(two, oneParams, true) == VARARGS_COMPATIBLE)"]}], "num": 30353}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e6ffcd7c399c505a0a3351a649a86ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1777e353ab40b0855539cad21e0f26fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingInsertBoundTest.java", "commitBeforeChange": "bcce9ee16ff0ee90548a3a85ac47f57f1df6c6fc", "commitAfterChange": "154eb5a35bc8871be423c76826aa951bbdf84001", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void testRemoveInsert4Before() throws Exception", "signatureAfterChange": "  \tpublic void testRemoveInsert4Before() throws Exception", "diff": ["-", "-\t\trewrite.remove((ASTNode) decls.get(0), null);", "-\t\trewrite.remove((ASTNode) decls.get(2), null);", "-\t\tASTNode middleDecl= (ASTNode) decls.get(1);", "+\t\tASTNode firstDecl= (ASTNode) decls.get(0);", "+\t\tASTNode lastDecl= (ASTNode) decls.get(2);", "-\t\tlistRewrite.insertBefore(decl1, middleDecl, null);", "-\t\tlistRewrite.insertAfter(decl2, middleDecl, null);\t", "+\t\tlistRewrite.remove(firstDecl, null);", "+\t\tlistRewrite.remove(lastDecl, null);", "+\t\t", "+\t\tlistRewrite.insertAfter(decl1, firstDecl, null);", "+\t\tlistRewrite.insertBefore(decl2, lastDecl, null);\t   ", "+\t\tbuf.append(\"\\n\");", "+\t\tbuf.append(\"//c3\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82fdfcec89bc2e2ebd5c3a2868224677", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "signatureAfterChange": " \tprivate void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "diff": ["+\t */", "+\tprivate void checkProjectsBeingAddedOrRemoved(IResourceDelta delta) {", "+\t\tIResource resource = delta.getResource();", "+\t\tswitch (resource.getType()) {", "+\t\t\tcase IResource.ROOT :", "+\t\t\t\t// workaround for bug 15168 circular errors not reported ", "+\t\t\t\tif (this.manager.javaProjectsCache == null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.manager.javaProjectsCache = this.manager.getJavaModel().getJavaProjects();", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "+\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {", "+\t\t\t\t\tthis.checkProjectsBeingAddedOrRemoved(children[i]);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IResource.PROJECT :", "+\t\t\t\t// NB: No need to check project's nature as if the project is not a java project:", "+\t\t\t\t//     - if the project is added or changed this is a noop for projectsBeingDeleted", "+\t\t\t\t//     - if the project is closed, it has already lost its java nature", "+\t\t\t\tint deltaKind = delta.getKind();", "+\t\t\t\tif (deltaKind == IResourceDelta.ADDED) {", "+\t\t\t\t\t// remember project and its dependents", "+\t\t\t\t\tIProject project = (IProject)resource;", "+\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\tthis.addToRootsToRefreshWithDependents(javaProject);", "+\t\t\t\t\t", "+\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "+\t\t\t\t\tif (JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\tthis.addToParentInfo(javaProject);", "+\t\t\t\t\t}", "+", "+\t\t\t\t} else if (deltaKind == IResourceDelta.CHANGED) {", "+\t\t\t\t\tIProject project = (IProject)resource;", "+\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0) {", "+\t\t\t\t\t\t// project opened or closed: remember  project and its dependents", "+\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\tthis.addToRootsToRefreshWithDependents(javaProject);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "+\t\t\t\t\t\tif (project.isOpen()) {", "+\t\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\t\t\tthis.addToParentInfo(javaProject);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tjavaProject = (JavaProject)this.manager.getJavaModel().findJavaProject(project);", "+\t\t\t\t\t\t\tif (javaProject != null) {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tjavaProject.close();", "+\t\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.removeFromParentInfo(javaProject);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {", "+\t\t\t\t\t\tboolean wasJavaProject = this.manager.getJavaModel().findJavaProject(project) != null;", "+\t\t\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(project);", "+\t\t\t\t\t\tif (wasJavaProject != isJavaProject) {", "+\t\t\t\t\t\t\t// java nature added or removed: remember  project and its dependents", "+\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\tthis.addToRootsToRefreshWithDependents(javaProject);", "+", "+\t\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "+\t\t\t\t\t\t\tif (isJavaProject) {", "+\t\t\t\t\t\t\t\tthis.addToParentInfo(javaProject);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// flush classpath markers", "+\t\t\t\t\t\t\t\tjavaProject.", "+\t\t\t\t\t\t\t\t\tflushClasspathProblemMarkers(", "+\t\t\t\t\t\t\t\t\t\ttrue, // flush cycle markers", "+\t\t\t\t\t\t\t\t\t\ttrue  //flush classpath format markers", "+\t\t\t\t\t\t\t\t\t);", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t// remove problems and tasks created  by the builder", "+\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(project);", "+", "+\t\t\t\t\t\t\t\t// close project", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tjavaProject.close();", "+\t\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.removeFromParentInfo(javaProject);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// in case the project was removed then added then changed (see bug 19799)", "+\t\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) { // need nature check - 18698", "+\t\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "+\t\t\t\t\t\t// in case the project was removed then added then changed", "+\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) { // need nature check - 18698", "+\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t}", "-\t */", "-\tpublic void checkProjectsBeingAddedOrRemoved(IResourceDelta delta) {", "-\t\tIResource resource = delta.getResource();", "-\t\tswitch (resource.getType()) {", "-\t\t\tcase IResource.ROOT :", "-\t\t\t\t// workaround for bug 15168 circular errors not reported ", "-\t\t\t\tif (this.manager.javaProjectsCache == null) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.manager.javaProjectsCache = this.manager.getJavaModel().getJavaProjects();", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "-\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {", "-\t\t\t\t\tthis.checkProjectsBeingAddedOrRemoved(children[i]);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IResource.PROJECT :", "-\t\t\t\t// NB: No need to check project's nature as if the project is not a java project:", "-\t\t\t\t//     - if the project is added or changed this is a noop for projectsBeingDeleted", "-\t\t\t\t//     - if the project is closed, it has already lost its java nature", "-\t\t\t\tint deltaKind = delta.getKind();", "-\t\t\t\tif (deltaKind == IResourceDelta.ADDED) {", "-\t\t\t\t\t// remember project and its dependents", "-\t\t\t\t\tIProject project = (IProject)resource;", "-\t\t\t\t\tthis.addToProjectsToUpdateWithDependents(project);", "-\t\t\t\t\t", "-\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "-\t\t\t\t\tif (JavaProject.hasJavaNature(project)) {", "-\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "-\t\t\t\t\t}", "-", "-\t\t\t\t} else if (deltaKind == IResourceDelta.CHANGED) {", "-\t\t\t\t\tIProject project = (IProject)resource;", "-\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0) {", "-\t\t\t\t\t\t// project opened or closed: remember  project and its dependents", "-\t\t\t\t\t\tthis.addToProjectsToUpdateWithDependents(project);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "-\t\t\t\t\t\tif (project.isOpen()) {", "-\t\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) {", "-\t\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)this.manager.getJavaModel().findJavaProject(project);", "-\t\t\t\t\t\t\tif (javaProject != null) {", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tjavaProject.close();", "-\t\t\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.removeFromParentInfo(javaProject);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {", "-\t\t\t\t\t\tboolean wasJavaProject = this.manager.getJavaModel().findJavaProject(project) != null;", "-\t\t\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(project);", "-\t\t\t\t\t\tif (wasJavaProject != isJavaProject) {", "-\t\t\t\t\t\t\t// java nature added or removed: remember  project and its dependents", "-\t\t\t\t\t\t\tthis.addToProjectsToUpdateWithDependents(project);", "-", "-\t\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "-\t\t\t\t\t\t\tif (isJavaProject) {", "-\t\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// flush classpath markers", "-\t\t\t\t\t\t\t\tjavaProject.", "-\t\t\t\t\t\t\t\t\tflushClasspathProblemMarkers(", "-\t\t\t\t\t\t\t\t\t\ttrue, // flush cycle markers", "-\t\t\t\t\t\t\t\t\t\ttrue  //flush classpath format markers", "-\t\t\t\t\t\t\t\t\t);", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// remove problems and tasks created  by the builder", "-\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(project);", "-", "-\t\t\t\t\t\t\t\t// close project", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tjavaProject.close();", "-\t\t\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.removeFromParentInfo(javaProject);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// in case the project was removed then added then changed (see bug 19799)", "-\t\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) { // need nature check - 18698", "-\t\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "-\t\t\t\t\t\t// in case the project was removed then added then changed", "-\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) { // need nature check - 18698", "-\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd1c7bbaab72a244140a0f709a4a4b0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingInsertBoundTest.java", "commitBeforeChange": "bcce9ee16ff0ee90548a3a85ac47f57f1df6c6fc", "commitAfterChange": "154eb5a35bc8871be423c76826aa951bbdf84001", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tpublic void testRemoveInsert4() throws Exception", "signatureAfterChange": " \t \tpublic void testRemoveInsert4() throws Exception", "diff": ["-", "-\t\trewrite.remove((ASTNode) decls.get(0), null);", "-\t\trewrite.remove((ASTNode) decls.get(2), null);", "-\t\tASTNode middleDecl= (ASTNode) decls.get(1);", "+\t\tASTNode firstDecl= (ASTNode) decls.get(0);", "+\t\tASTNode lastDecl= (ASTNode) decls.get(2);", "-\t\tlistRewrite.insertBefore(decl1, middleDecl, null);", "-\t\tlistRewrite.insertAfter(decl2, middleDecl, null);\t   ", "+\t\t", "+\t\tlistRewrite.remove(firstDecl, null);", "+\t\tlistRewrite.remove(lastDecl, null);", "+\t\t", "+\t\tlistRewrite.insertAfter(decl1, firstDecl, null);", "+\t\tlistRewrite.insertBefore(decl2, lastDecl, null);\t   "]}], "num": 64812}
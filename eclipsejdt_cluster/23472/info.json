{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2aaf4691723534825b3f1dad6302b4f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28da0a53ff1d60b3c138a3f7bfb51bc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "a262b5af4032b43a755aa27634102b39ece22487", "commitAfterChange": "f23b5454f1ff57141b5d3b54b81fb753a1898b7e", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "\r \tprotected void setRawClasspath0(IClasspathEntry[] entries)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tprotected void setRawClasspath0(IClasspathEntry[] rawEntries)\r \t\tthrows JavaModelException", "diff": ["-\tprotected void setRawClasspath0(IClasspathEntry[] entries)\r", "+\tprotected void setRawClasspath0(IClasspathEntry[] rawEntries)\r", "-\t\t\tif (entries == null) {\r", "-\t\t\t\tentries = defaultClasspath();\r", "+\t\t\tif (rawEntries == null) {\r", "+\t\t\t\trawEntries = defaultClasspath();\r", "-\t\t\tinfo.setRawClasspath(entries);\r", "+\t\t\tinfo.setRawClasspath(rawEntries);\r", "-\t\t\t// determine the new children\r", "-\t\t\tfor (int i = 0; i < entries.length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\t\t\t// map of all immediate (resolved) entries\t\t\t\r", "+\t\t\tIClasspathEntry[] resolvedEntries = getResolvedClasspath(true);\r", "+\t\t\tHashtable immediateEntries = new Hashtable(resolvedEntries.length);\r", "+\t\t\tfor (int i = 0; i < resolvedEntries.length; i++) {\r", "+\t\t\t\timmediateEntries.put(resolvedEntries[i], this);\r", "+\t\t\t}\r", "+\r", "+\t\t\t// compute the new roots, and trigger indexing of referenced JARs\r", "+\t\t\tIClasspathEntry[] expandedEntries = getExpandedClasspath(true);\r", "+\t\t\tfor (int i = 0; i < expandedEntries.length; i++) {\r", "+\t\t\t\tIClasspathEntry entry = expandedEntries[i];\r", "-\t\t\t\t\t\tif (root.getKind() == IPackageFragmentRoot.K_BINARY && indexManager != null) {\r", "-\t\t\t\t\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t\t\t\t\tindexManager.indexJarFile(root.getPath(), getUnderlyingResource().getName());\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\tindexManager.indexBinaryFolder(\r", "-\t\t\t\t\t\t\t\t\t(IFolder) root.getUnderlyingResource(),\r", "-\t\t\t\t\t\t\t\t\t(IProject) this.getUnderlyingResource());\r", "+\t\t\t\t\t\t// only trigger indexing of immediate libraries\r", "+\t\t\t\t\t\tif (immediateEntries.get(entry) != null){\r", "+\t\t\t\t\t\t\tif (root.getKind() == IPackageFragmentRoot.K_BINARY && indexManager != null) {\r", "+\t\t\t\t\t\t\t\tif (root.isArchive()) {\r", "+\t\t\t\t\t\t\t\t\tindexManager.indexJarFile(root.getPath(), getUnderlyingResource().getName());\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tindexManager.indexBinaryFolder(\r", "+\t\t\t\t\t\t\t\t\t\t(IFolder) root.getUnderlyingResource(),\r", "+\t\t\t\t\t\t\t\t\t\t(IProject) this.getUnderlyingResource());\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tinfo.addChild(roots[j]);\r", "+\t\t\t\t\t\tinfo.addChild(root);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0834fc470720a2e8f63b6b9c727de6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "6dc2c6292eeb29ab819c1296b12d7a61265835da", "commitAfterChange": "d3d9c65ab8eabcabeb66c720711bcaf713684a64", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 80, "signatureBeforeChange": "\r \tprotected void setRawClasspath0(IClasspathEntry[] rawEntries)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tprotected void setRawClasspath0(IClasspathEntry[] rawEntries)\r \t\tthrows JavaModelException", "diff": ["-\t\t\t// map of all immediate (resolved) entries\t\t\t\r", "-\t\t\tIClasspathEntry[] resolvedEntries = getResolvedClasspath(true);\r", "-\t\t\tHashtable immediateEntries = new Hashtable(resolvedEntries.length);\r", "-\t\t\tfor (int i = 0; i < resolvedEntries.length; i++) {\r", "-\t\t\t\timmediateEntries.put(resolvedEntries[i], this);\r", "-\t\t\t}\r", "-\t\t\tIClasspathEntry[] expandedEntries = getExpandedClasspath(true);\r", "-\t\t\tfor (int i = 0; i < expandedEntries.length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = expandedEntries[i];\r", "-\t\t\t\tIPackageFragmentRoot[] roots = getPackageFragmentRoots(entry);\r", "-\t\t\t\tfor (int j = 0; j < roots.length; j++) {\r", "-\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[j];\r", "-\t\t\t\t\tif (root.exists0()) {\r", "-\t\t\t\t\t\t// only trigger indexing of immediate libraries\r", "-\t\t\t\t\t\tif (immediateEntries.get(entry) != null){\r", "-\t\t\t\t\t\t\tif (root.getKind() == IPackageFragmentRoot.K_BINARY && indexManager != null) {\r", "-\t\t\t\t\t\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t\t\t\t\t\tindexManager.indexJarFile(root.getPath(), getUnderlyingResource().getName());\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tindexManager.indexBinaryFolder(\r", "-\t\t\t\t\t\t\t\t\t\t(IFolder) root.getUnderlyingResource(),\r", "-\t\t\t\t\t\t\t\t\t\t(IProject) this.getUnderlyingResource());\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tinfo.addChild(root);\r", "+\t\t\tObjectVector accumulatedRoots = new ObjectVector();\r", "+\t\t\tcomputePackageFragmentRoots(accumulatedRoots, new ObjectSet(5), true, true, false);\r", "+\t\t\tIJavaElement[] rootArray = new IJavaElement[accumulatedRoots.size()];\r", "+\t\t\taccumulatedRoots.copyInto(rootArray);\r", "+\t\t\tinfo.setChildren(rootArray);\t\t\t\t\t\r", "+\t\t\t\r", "+\t\t\t// only trigger indexing of immediate libraries\r", "+\t\t\tIPackageFragmentRoot[] immediateRoots = getPackageFragmentRoots();\t\t\t\t\t\t\r", "+\t\t\tfor(int i = 0, length = immediateRoots.length; i < length; i++){\r", "+\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)immediateRoots[i];\r", "+\t\t\t\tif (root.getKind() == IPackageFragmentRoot.K_BINARY && indexManager != null) {\r", "+\t\t\t\t\tif (root.isArchive()) {\r", "+\t\t\t\t\t\tindexManager.indexJarFile(root.getPath(), getUnderlyingResource().getName());\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tindexManager.indexBinaryFolder(\r", "+\t\t\t\t\t\t\t(IFolder) root.getUnderlyingResource(),\r", "+\t\t\t\t\t\t\t(IProject) this.getUnderlyingResource());\r", "+\t\t\t\r"]}], "num": 23472}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d383550d7d8f6c0069ed25c535a151d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261b4ffe67f4aa074df1c04f50e12999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "7365eb3c9bc3c4e2bcff5eac5d972246c40d599d", "commitAfterChange": "dd4e66116fa81ff4f74deaa928460684d87fc74d", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testNullTypeInference3b()", "signatureAfterChange": " \tpublic void testNullTypeInference3b()", "diff": ["-\t// conflicting annotations from type variable application and type variable substitution", "+\t// conflicting annotations from type variable application and type variable substitution -> exclude null annotations from inference", "-\t\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable String m1(@NonNull @Nullable String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@NonNull String\\' but this expression has type \\'@Nullable String\\'\\n\" + ", "-\t\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable String m2(@NonNull String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@NonNull String\\' but this expression has type \\'@Nullable String\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76f3888377895bb14370d999921185cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "7365eb3c9bc3c4e2bcff5eac5d972246c40d599d", "commitAfterChange": "dd4e66116fa81ff4f74deaa928460684d87fc74d", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testNullTypeInference3()", "signatureAfterChange": " \tpublic void testNullTypeInference3()", "diff": ["-\t// conflicting annotations from type variable application and type variable substitution", "+\t// conflicting annotations from type variable application and type variable substitution -> exclude null annotations from inference", "+\t\tMap compilerOptions = getCompilerOptions();", "+\t\tcompilerOptions.put(JavaCore.COMPILER_PB_NULL_UNCHECKED_CONVERSION, JavaCore.ERROR);", "-\t\t\tgetCompilerOptions(),", "+\t\t\tcompilerOptions,", "-\t\t\t\"\t                      ^^\\n\" + ", "-\t\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull String m(@NonNull @Nullable String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + ", "+\t\t\t\"\t                    ^^^^^\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String\\' needs unchecked conversion to conform to \\'@NonNull String\\'\\n\" + "]}], "num": 7758}
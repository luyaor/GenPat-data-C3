{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae8be9b18beacd700ed9d53173f1c7eb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f5a266e0e7a262546387f0c8d73269", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \t \tprivate void parseFullyQualifiedName()", "signatureAfterChange": " \t \tprivate void parseFullyQualifiedName()", "diff": ["+\t\t\t\tthis.hasTypeName = false;", "+\t \t\tcase Scanner.WILDCARD:", "+\t\t\t \tchar[] source = this.scanner.getTokenSource();", "+\t\t\t \tif (source.length == 0) {", "+\t\t\t \t\tmalformedKey();", "+\t\t\t \t\treturn;", "+\t\t\t \t}", "+\t\t\t \tint kind = -1;", "+\t\t\t \tswitch (source[0]) {", "+\t\t\t\t \tcase '*':", "+\t\t\t\t \t\tkind = Wildcard.UNBOUND;", "+\t\t\t\t \t\tbreak;", "+\t\t\t\t \tcase '+':", "+\t\t\t\t \t\tkind = Wildcard.EXTENDS;", "+\t\t\t\t \t\tbreak;", "+\t\t\t\t \tcase '-':", "+\t\t\t\t \t\tkind = Wildcard.SUPER;", "+\t\t\t\t \t\tbreak;", "+\t\t\t \t}", "+\t\t\t \tif (kind == -1) {", "+\t\t\t \t\tmalformedKey();", "+\t\t\t \t\treturn;", "+\t\t\t \t}", "+\t\t\t \tconsumeWildCard(kind);", "+\t\t\t \tif (kind == Wildcard.UNBOUND) {", "+\t\t\t \t\tthis.hasTypeName = false;", "+\t\t\t \t\treturn;", "+\t\t\t \t}", "+\t\t\t \tparseFullyQualifiedName();", "+\t \t\t\tbreak;", "+\t \t\tcase Scanner.CAPTURE:", "+\t \t\t\tconsumeCapture();", "+\t \t\t\tparseFullyQualifiedName();", "+\t \t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f32694cb2aaf547c94018c8f6156bd3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NumberLiteral.java", "commitBeforeChange": "b8e01a5f88277b60beb56a34c689a6b2ce9e09e8", "commitAfterChange": "9151e30fba5ea02221400c736d4de2dda06ec7ac", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \r \tpublic void setToken(String token)", "signatureAfterChange": " \r \tpublic void setToken(String token)", "diff": ["+\t\tScanner scanner = new Scanner();\r", "+\t\tchar[] source = token.toCharArray();\r", "+\t\tscanner.setSourceBuffer(source);\r", "+\t\tscanner.resetTo(0, source.length);\r", "+\t\ttry {\r", "+\t\t\tint tokenType = scanner.getNextToken();\r", "+\t\t\tswitch(tokenType) {\r", "+\t\t\t\tcase Scanner.TokenNameDoubleLiteral:\r", "+\t\t\t\tcase Scanner.TokenNameIntegerLiteral:\r", "+\t\t\t\tcase Scanner.TokenNameFloatingPointLiteral:\r", "+\t\t\t\tcase Scanner.TokenNameLongLiteral:\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scanner.TokenNameMINUS :\r", "+\t\t\t\t\ttokenType = scanner.getNextToken();\r", "+\t\t\t\t\tswitch(tokenType) {\r", "+\t\t\t\t\t\tcase Scanner.TokenNameDoubleLiteral:\r", "+\t\t\t\t\t\tcase Scanner.TokenNameIntegerLiteral:\r", "+\t\t\t\t\t\tcase Scanner.TokenNameFloatingPointLiteral:\r", "+\t\t\t\t\t\tcase Scanner.TokenNameLongLiteral:\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Not a literal type\");\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\t\t\r", "+\t\t\t\tdefault:\r", "+\t\t\t\t\tthrow new IllegalArgumentException(\"Not a literal type\");\r", "+\t\t\t}\r", "+\t\t} catch(InvalidInputException e) {\r", "+\t\t\tthrow new IllegalArgumentException();\r", "+\t\t}\r"]}], "num": 45355}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18e8135ea32b2a6acfefea08b47ba4c3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c685a4e63213d69f41d4c2a747751227", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java", "commitBeforeChange": "a790cc2a1fe344908ce312351c9762d437d04475", "commitAfterChange": "96135df97393d0f8f1ee1a690487357a43849eda", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\t\tpublic IClasspathEntry[] getClasspathEntries()", "signatureAfterChange": " \t\t\tpublic IClasspathEntry[] getClasspathEntries()", "diff": ["+\t\t", "+\t\t\t\t    IAccessRule[] accessRules;", "+\t\t\t\t    if(forbiddenReferences != null && forbiddenReferences[j]!= null && forbiddenReferences[j].length() != 0) {", "+\t\t\t\t\t    StringTokenizer tokenizer = new StringTokenizer(forbiddenReferences[j], \";\");", "+\t\t\t\t\t    int count = tokenizer.countTokens();", "+\t\t\t\t\t    accessRules = new IAccessRule[count];", "+\t\t\t\t\t    String token = null;", "+\t\t\t\t\t    for (int i = 0; i < count; i++) {", "+\t\t\t\t\t    \ttoken = tokenizer.nextToken();", "+\t\t\t\t\t\t\taccessRules[i] = JavaCore.newAccessRule(new Path(token), IAccessRule.K_NON_ACCESSIBLE);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\taccessRules = new IAccessRule[0];", "+\t\t\t\t\t}", "-\t\t\t\t        entries[j] = JavaCore.newProjectEntry(path, isExported);", "+\t\t\t\t        entries[j] = JavaCore.newProjectEntry(path, accessRules, true, null, isExported);", "-\t\t\t\t\t\tentries[j] = JavaCore.newLibraryEntry(path, null, null, isExported);", "+\t\t\t\t\t\tentries[j] = JavaCore.newLibraryEntry(path, null, null, accessRules, null, isExported);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed6f2f497f0f328c22ef604100e7f10f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "38f73e89bd4606189d7e6d499593d5aa49ab247d", "commitAfterChange": "83b83ec335a27590393034d86f94208edbfcc45a", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\t\t\t\t\tboolean equalTypeVarLength = vars.length == vars2.length;", "-\t\t\t\t\t\tif (!equalTypeVars && equalTypeVarLength) {", "-\t\t\t\t\t\t\tLookupEnvironment env = this.scope.environment();", "-\t\t\t\t\t\t\tint varsLength = vars.length;", "-\t\t\t\t\t\t\tnotEqual : for (int v = 0; v < varsLength; v++) {", "-\t\t\t\t\t\t\t\tif (!vars[v].isInterchangeableWith(env, vars2[v])) {", "-\t\t\t\t\t\t\t\t\tequalTypeVars = false;", "-\t\t\t\t\t\t\t\t\tbreak notEqual;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!equalTypeVars) {", "+\t\t\t\t\t\t\tMethodBinding temp = method.computeSubstitutedMethod(method2, this.scope.environment());", "+\t\t\t\t\t\t\tif (temp != null) {", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (equalTypeVars) {", "-\t\t\t\t\t\t\t\t// must substitute to detect cases like:", "-\t\t\t\t\t\t\t\t//   <T1 extends X<T1>> void dup() {}", "-\t\t\t\t\t\t\t\t//   <T2 extends X<T2>> Object dup() {return null;}", "-\t\t\t\t\t\t\t\tsubMethod = new ParameterizedGenericMethodBinding(method2, vars, env);", "+\t\t\t\t\t\t\t\tsubMethod = temp;"]}], "num": 40338}
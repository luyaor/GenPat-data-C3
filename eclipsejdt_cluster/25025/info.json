{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab31e3de9d6e2fe848c5d3dc11d95f31", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cc0295774795cc42c2ea5ad53719ef5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 352, "methodNumberAfterChange": 257, "signatureBeforeChange": " public static UnconditionalFlowInfoTestHarness testUnconditionalFlowInfo( \t\tlong [] nullBits, int position, int extra)", "signatureAfterChange": " public void _test0738_for_unknown_protection()", "diff": ["+// TODO (maxime) reconsider when/if we bring full aliasing in", "+public void _test0738_for_unknown_protection() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"class X {\\n\" + ", "+\t\t\t\"  public boolean foo(Boolean p) {\\n\" + ", "+\t\t\t\"    Boolean b = null;\\n\" + ", "+\t\t\t\"    for (int i = 0; i < 1; i++) {\\n\" + ", "+\t\t\t\"      if (b == p) {\\n\" + ", "+\t\t\t\"        // empty\\n\" + ", "+\t\t\t\"      }\\n\" +", "+\t\t\t\"      else {\\n\" +", "+\t\t\t\"        b = p;\\n\" +", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"      if (b.booleanValue()) {\\n\" + // quiet because b is an alias for p, unknown", "+\t\t\t\"        return b.booleanValue();\\n\" + ", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    return false;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"},", "+\t\t\"\");", "- */", "-public static UnconditionalFlowInfoTestHarness testUnconditionalFlowInfo(", "-\t\tlong [] nullBits, int position, int extra) {", "- \tUnconditionalFlowInfoTestHarness result = ", "- \t\tnew UnconditionalFlowInfoTestHarness();", "-\tresult.testPosition = position;", "-\tif (position < BitCacheSize) {", "-\t\tresult.nullAssignmentStatusBit1 = nullBits[0] << position;", "-\t\tresult.nullAssignmentStatusBit2 = nullBits[1] << position;", "-\t\tresult.nullAssignmentValueBit1 = nullBits[2] << position;", "-\t\tresult.nullAssignmentValueBit2 = nullBits[3] << position;", "-\t} ", "- \telse {", "-\t\tint vectorIndex = (position / BitCacheSize) - 1,", "-\t\t\tlength = extra / BitCacheSize;", "-\t\tposition %= BitCacheSize;", "-        result.extra = new long[extraLength][];", "-\t\tresult.extra[0] = new long[length];", "-\t\tresult.extra[1] = new long[length];", "-        for (int j = 2; j < extraLength; j++) {", "-\t\t    result.extra[j] = new long[length];", "-\t\t    result.extra[j] [vectorIndex]= nullBits[j - 2] << position;", "-        }", "-\t}", "-\tif (nullBits[1] != 0 || nullBits[3] != 0 || nullBits[0] != 0 || nullBits[2] != 0 ) {", "-\t\t// cascade better than nullBits[0] | nullBits[1] | nullBits[2] | nullBits[3]", "-\t\t// by 10%+", "-\t\t// TODO (maxime) run stats to determine which is the better order", "-\t\tresult.tagBits |= NULL_FLAG_MASK;", "-\t}", "-\tresult.maxFieldCount = 0;", "-\treturn result;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af046090c20f5bdf688caa40e7b33dfd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 350, "methodNumberAfterChange": 318, "signatureBeforeChange": "  public FlowInfo copy()", "signatureAfterChange": " public void test1501()", "diff": ["+// encoding validation", "+public void test1501() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o, int i, boolean b, Object u) {\\n\" +", "+\t\t\t\"    if (b) {\\n\" +", "+\t\t\t\"      o = new Object();\\n\" +", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"    switch (i) {\\n\" + ", "+\t\t\t\"      case 0:\\n\" +", "+\t\t\t\"        if (b) {\\n\" +", "+\t\t\t\"          o = u;\\n\" +", "+\t\t\t\"        } else {\\n\" +", "+\t\t\t\"          o = new Object();\\n\" +", "+\t\t\t\"        }\\n\" +", "+\t\t\t\"        break;\\n\" + ", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"    if (o == null) { /* empty */ }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}", "-", "-public FlowInfo copy() {", "-\tUnconditionalFlowInfoTestHarness copy = ", "-\t\tnew UnconditionalFlowInfoTestHarness();", "-\tcopy.testPosition = this.testPosition;", "-\tcopy.definiteInits = this.definiteInits;", "-\tcopy.potentialInits = this.potentialInits;", "-\tboolean hasNullInfo = (this.tagBits & NULL_FLAG_MASK) != 0;", "-\tif (hasNullInfo) { ", "-\t\tcopy.nullAssignmentStatusBit1 = this.nullAssignmentStatusBit1;", "-\t\tcopy.nullAssignmentStatusBit2 = this.nullAssignmentStatusBit2;", "-\t\tcopy.nullAssignmentValueBit1 = this.nullAssignmentValueBit1;", "-\t\tcopy.nullAssignmentValueBit2 = this.nullAssignmentValueBit2;", "-\t}", "-\tcopy.tagBits = this.tagBits;", "-\tcopy.maxFieldCount = this.maxFieldCount;", "-\tif (this.extra != null) {", "-\t\tint length;", "-        copy.extra = new long[extraLength][];", "-\t\tSystem.arraycopy(this.extra[0], 0, ", "-\t\t\t(copy.extra[0] = new long[length = extra[0].length]), 0, length);", "-\t\tSystem.arraycopy(this.extra[1], 0, ", "-\t\t\t(copy.extra[1] = new long[length]), 0, length);", "-\t\tif (hasNullInfo) {", "-            for (int j = 0; j < extraLength; j++) {", "-\t\t\t    System.arraycopy(this.extra[j], 0, ", "-\t\t\t\t    (copy.extra[j] = new long[length]), 0, length);", "-            }", "-\t\t}", "-\t\telse {", "-            for (int j = 0; j < extraLength; j++) {", "-\t\t\t    copy.extra[j] = new long[length];", "-            }", "-\t\t}", "-\t}", "-\treturn copy;", "-}"]}], "num": 25025}
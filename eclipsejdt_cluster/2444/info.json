{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb511e27319b130d89618b370e18caef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96fa4ebee8f560ca585a8f77c652b890", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "          private ProcessorEnvImpl( \t\t\tfinal IFile[] files, \t\t\tfinal ICompilationUnit[] units, \t\t\tfinal IJavaProject javaProj, \t\t\tfinal Phase phase)", "signatureAfterChange": "     private ProcessorEnvImpl( \t\t\tfinal IFile[] filesWithAnnotations, \t\t\tfinal IFile[] additionalFiles,  \t\t\tfinal ICompilationUnit[] units, \t\t\tfinal IJavaProject javaProj, \t\t\tfinal Phase phase)", "diff": ["+     */", "-\t\t\tfinal IFile[] files,", "+\t\t\tfinal IFile[] filesWithAnnotations,", "+\t\t\tfinal IFile[] additionalFiles, ", "-    \tassert( phase == Phase.BUILD && files != null  ) :", "-    \t\t\"Unexpected phase value \" + phase; //$NON-NLS-1$", "-\t\t", "+    ", "-\t\t_files = files;", "+\t\t_filesWithAnnotation = filesWithAnnotations;", "+\t\t_additionFiles = additionalFiles;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf870e7a1a1b7acc15181f522fe59ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Token.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \t\tpublic WrapPolicy(int extraIndent, int wrapParentIndex, int structureDepth, float penaltyMultiplier, \t\t\t\tboolean isFirstInGroup, boolean indentOnColumn, int topPriorityGroupEnd, boolean isForced)", "signatureAfterChange": "  \t\tpublic WrapPolicy(WrapMode wrapMode, int wrapParentIndex, int groupEndIndex, int extraIndent, \t\t\t\tint structureDepth, float penaltyMultiplier, boolean isFirstInGroup, boolean indentOnColumn)", "diff": ["-\t\tpublic WrapPolicy(int extraIndent, int wrapParentIndex, int structureDepth, float penaltyMultiplier,", "-\t\t\t\tboolean isFirstInGroup, boolean indentOnColumn, int topPriorityGroupEnd, boolean isForced) {", "-\t\t\tthis.extraIndent = extraIndent;", "+\t\tpublic WrapPolicy(WrapMode wrapMode, int wrapParentIndex, int groupEndIndex, int extraIndent,", "+\t\t\t\tint structureDepth, float penaltyMultiplier, boolean isFirstInGroup, boolean indentOnColumn) {", "+\t\t\tassert wrapMode != null && (wrapParentIndex < groupEndIndex || groupEndIndex == -1);", "+", "+\t\t\tthis.wrapMode = wrapMode;", "+\t\t\tthis.groupEndIndex = groupEndIndex;", "+\t\t\tthis.extraIndent = extraIndent;", "-\t\t\tthis.topPriorityGroupEnd = topPriorityGroupEnd;", "-\t\t\tthis.isForced = isForced;"]}], "num": 2444}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4381a8f51eae82b97050ed0c6df0b5f2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "602c75b6c898c78b9e522974ec29c3f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/RawTypeBinding.java", "commitBeforeChange": "e3beac235d122e4c3c54870082319a4f2cc2abeb", "commitAfterChange": "553b813a23ab25477516582ea0c9fc2d6eaf9fb4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     \t \tpublic char[] computeUniqueKey(boolean withAccessFlags)", "signatureAfterChange": "     \t \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\tpublic char[] computeUniqueKey(boolean withAccessFlags) {", "+\tpublic char[] computeUniqueKey(boolean isLeaf) {", "-\t\t    char[] typeSig = enclosingType().computeUniqueKey(false/*without access flags*/);", "+\t\t    char[] typeSig = enclosingType().computeUniqueKey(false/*not a leaf*/);", "-\t\t     sig.append(this.type.signature()); // erasure", "+\t\t     sig.append(this.type.computeUniqueKey(false/*not a leaf*/));", "-\t\tif (withAccessFlags) {", "+\t\tif (isLeaf) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "621fbe76f986932a438921e8691d44eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "e3beac235d122e4c3c54870082319a4f2cc2abeb", "commitAfterChange": "553b813a23ab25477516582ea0c9fc2d6eaf9fb4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic char[] computeUniqueKey(boolean withAccessFlags)", "signatureAfterChange": " \t \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\tpublic char[] computeUniqueKey(boolean withAccessFlags) {", "+\tpublic char[] computeUniqueKey(boolean isLeaf) {", "-\t\t    char[] typeSig = enclosingType().computeUniqueKey(false/*without access flags*/);", "+\t\t    char[] typeSig = enclosingType().computeUniqueKey(false/*not a leaf*/);", "-\t\t\tchar[] typeSig = enclosing.signature();", "+\t\t\tchar[] typeSig = enclosing.computeUniqueKey(false/*not a leaf*/);", "-\t\t    char[] typeSig = this.type.signature();", "+\t\t    char[] typeSig = this.type.computeUniqueKey(false/*not a leaf*/);", "-\t\t        sig.append(this.arguments[i].computeUniqueKey(false/*without access flags*/));", "+\t\t        sig.append(this.arguments[i].computeUniqueKey(false/*not a leaf*/));", "-\t\tif (withAccessFlags) {", "+\t\tif (isLeaf) {"]}], "num": 30564}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71fc730b405dd7f8b144a8c9834b8485", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd163a58142a11e49dc9d61b909ee81a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RunJavaSearchTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": "  \tpublic static Test suite()", "diff": ["-}", "-public static Test suite() {", "-\tTestSuite ts = new TestSuite(RunJavaSearchTests.class.getName());", "-\t// Get all classes", "-\tAbstractJavaSearchTests.TEST_SUITES = new ArrayList(Arrays.asList(getJavaSearchTestClasses()));", "-\tList allClasses = new ArrayList(AbstractJavaSearchTests.TEST_SUITES);", "-\tallClasses.add(JavaSearchBugsTests.class);", "-\tallClasses.add(JavaSearchMultipleProjectsTests.class);", "-\tallClasses.add(SearchTests.class);", "-\tallClasses.add(JavaSearchScopeTests.class);", "-", "-\t// Reset forgotten subsets of tests", "-\tTestCase.TESTS_PREFIX = null;", "-\tTestCase.TESTS_NAMES = null;", "-\tTestCase.TESTS_NUMBERS = null;", "-\tTestCase.TESTS_RANGE = null;", "-", "-\t// Add all tests suite of tests", "-\tfor (int i = 0, size=allClasses.size(); i < size; i++) {", "-\t\tClass testClass = (Class) allClasses.get(i);", "-", "-\t\t// call the suite() method and add the resulting suite to the suite", "-\t\ttry {", "-\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "-\t\t\tTest suite = (Test)suiteMethod.invoke(null, new Object[0]);", "-\t\t\tts.addTest(suite);", "-\t\t} catch (IllegalAccessException e) {", "-\t\t\te.printStackTrace();", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\te.getTargetException().printStackTrace();", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\te.printStackTrace();", "-\t\t}", "-\treturn ts;", "-}", "+", "+\tpublic static Test suite() {", "+\t\tTestSuite ts = new TestSuite(RunJavaSearchTests.class.getName());", "+", "+\t\t// Store test classes with same \"JavaSearch\"project", "+\t\tAbstractJavaSearchTests.JAVA_SEARCH_SUITES = new ArrayList(TEST_CLASSES);", "+", "+\t\t// Get all classes", "+\t\tList allClasses = new ArrayList(TEST_CLASSES);", "+\t\tallClasses.add(JavaSearchBugsTests.class);", "+\t\tallClasses.add(JavaSearchMultipleProjectsTests.class);", "+\t\tallClasses.add(SearchTests.class);", "+\t\tallClasses.add(JavaSearchScopeTests.class);", "+", "+\t\t// Reset forgotten subsets of tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS = null;", "+\t\tTestCase.TESTS_RANGE = null;", "+", "+\t\t// Add all tests suite of tests", "+\t\tfor (int i = 0, size = allClasses.size(); i < size; i++) {", "+\t\t\tClass testClass = (Class) allClasses.get(i);", "+", "+\t\t\t// call the suite() method and add the resulting suite to the suite", "+\t\t\ttry {", "+\t\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "+\t\t\t\tTest suite = (Test) suiteMethod.invoke(null, new Object[0]);", "+\t\t\t\tts.addTest(suite);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\te.getTargetException().printStackTrace();", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\treturn ts;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de32eacf2881bbed22445bbca1b18907", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/target/CodeSnippetRunner.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static void main(String[] args)", "signatureAfterChange": " public static void main(String[] args)", "diff": ["-\t} else {", "-\t\tint evalPort = Integer.parseInt(args[1]);", "-\t\tString classPath = null;", "-\t\tString bootPath = null;", "-\t\tint mainClass = -1;", "-\t\tfor (int i = 2; i < length; i++) {", "-\t\t\tString arg = args[i];", "-\t\t\tif (arg.startsWith(\"-\")) {", "-\t\t\t\tif (arg.toLowerCase().equals(\"-cscp\")) {", "-\t\t\t\t\tif (++i < length) {", "-\t\t\t\t\t\tclassPath = args[i];", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tprintUsage();", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (arg.toLowerCase().equals(\"-csbp\")) {", "-\t\t\t\t\tif (++i < length) {", "-\t\t\t\t\t\tbootPath = args[i];", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tprintUsage();", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "+\t}", "+\tint evalPort = Integer.parseInt(args[1]);", "+\tString classPath = null;", "+\tString bootPath = null;", "+\tint mainClass = -1;", "+\tfor (int i = 2; i < length; i++) {", "+\t\tString arg = args[i];", "+\t\tif (arg.startsWith(\"-\")) {", "+\t\t\tif (arg.toLowerCase().equals(\"-cscp\")) {", "+\t\t\t\tif (++i < length) {", "+\t\t\t\t\tclassPath = args[i];", "+\t\t\t\t} else {", "+\t\t\t\t\tprintUsage();", "+\t\t\t\t\treturn;", "-\t\t\t} else {", "-\t\t\t\tmainClass = i;", "-\t\t\t\tbreak;", "+\t\t\t} else if (arg.toLowerCase().equals(\"-csbp\")) {", "+\t\t\t\tif (++i < length) {", "+\t\t\t\t\tbootPath = args[i];", "+\t\t\t\t} else {", "+\t\t\t\t\tprintUsage();", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "-\t\t}", "-\t\ttheRunner = new CodeSnippetRunner(evalPort, classPath, bootPath);", "-\t\tif (mainClass == -1) {", "-\t\t\ttheRunner.start();", "-\t\t\tThread server = new Thread() {", "-\t\t\t\tpublic void run() {", "-\t\t\t\t\ttheRunner.start();", "-\t\t\t\t}", "-\t\t\t};", "-\t\t\tserver.setDaemon(true);", "-\t\t\tserver.start();", "-\t\t\tint mainArgsLength = length-mainClass-1;", "-\t\t\tString[] mainArgs = new String[mainArgsLength];", "-\t\t\tSystem.arraycopy(args, mainClass+1, mainArgs, 0, mainArgsLength);", "-\t\t\ttry {", "-\t\t\t\tClass clazz = Class.forName(args[mainClass]);", "-\t\t\t\tMethod mainMethod = clazz.getMethod(\"main\", new Class[] {String[].class});", "-\t\t\t\tmainMethod.invoke(null, new String[][] {mainArgs});", "-\t\t\t} catch (ClassNotFoundException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t} catch (NoSuchMethodException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "+\t\t\tmainClass = i;", "+\t\t\tbreak;", "-\t}\t\t", "+\t}", "+\ttheRunner = new CodeSnippetRunner(evalPort, classPath, bootPath);", "+\tif (mainClass == -1) {", "+\t\ttheRunner.start();", "+\t} else {", "+\t\tThread server = new Thread() {", "+\t\t\tpublic void run() {", "+\t\t\t\ttheRunner.start();", "+\t\t\t}", "+\t\t};", "+\t\tserver.setDaemon(true);", "+\t\tserver.start();", "+\t\tint mainArgsLength = length-mainClass-1;", "+\t\tString[] mainArgs = new String[mainArgsLength];", "+\t\tSystem.arraycopy(args, mainClass+1, mainArgs, 0, mainArgsLength);", "+\t\ttry {", "+\t\t\tClass clazz = Class.forName(args[mainClass]);", "+\t\t\tMethod mainMethod = clazz.getMethod(\"main\", new Class[] {String[].class});", "+\t\t\tmainMethod.invoke(null, new String[][] {mainArgs});", "+\t\t} catch (ClassNotFoundException e) {", "+\t\t\te.printStackTrace();", "+\t\t} catch (NoSuchMethodException e) {", "+\t\t\te.printStackTrace();", "+\t\t} catch (IllegalAccessException e) {", "+\t\t\te.printStackTrace();", "+\t\t} catch (InvocationTargetException e) {", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t}"]}], "num": 19944}
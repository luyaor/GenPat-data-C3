{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78ea6309c656a548407005442cc8de6b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b4e820670cd8ede06b8594f5e19d2b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "53a88facba099a7ef05d98b75f25800af60438f8", "commitAfterChange": "086132dd6f6e6011785d8d9b469716062157a8c1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "signatureAfterChange": "   public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "diff": ["+\t// need enclosing type to access type variables", "+\tchar[] enclosingTypeName = binaryType.getEnclosingTypeName();", "+\tif (enclosingTypeName != null) {", "+\t\t// attempt to find the enclosing type if it exists in the cache (otherwise - resolve it when requested)", "+\t\tthis.enclosingType = environment.getTypeFromConstantPoolName(enclosingTypeName, 0, -1, true); // pretend parameterized to avoid raw", "+\t\tthis.tagBits |= MemberTypeMask;   // must be a member type not a top-level or local type", "+\t\tthis.tagBits |= \tHasUnresolvedEnclosingType;", "+\t\tif (this.enclosingType().isStrictfp())", "+\t\t\tthis.modifiers |= AccStrictfp;", "+\t\tif (this.enclosingType().isDeprecated())", "+\t\t\tthis.modifiers |= AccDeprecatedImplicitly;", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84d2b0f4238a2d6a92cb0e82e19b35ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "b7bb9d2950572af77f85c2c708c3816367817930", "commitAfterChange": "6cea394a74122bc3b2f5fee1a70c7921f0e635d8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void resolveReceiver()", "signatureAfterChange": "  \tpublic void resolveReceiver()", "diff": ["-\t\tif ((this.receiver.qualifyingName == null) ? this.isConstructor() : !isQualifierValidForType(this.receiver.qualifyingName.getName(), enclosingReceiver)) {", "-\t\t\tthis.scope.problemReporter().illegalQualifierForExplicitThis(this.receiver, enclosingReceiver);\t\t\t\t\t", "-\t\t}", "-\t}", "+\t\tchar[][] tokens = (this.receiver.qualifyingName == null) ? null : this.receiver.qualifyingName.getName();", "+\t\tif (this.isConstructor()) {", "+\t\t\tif (tokens == null || tokens.length > 1 || !CharOperation.equals(enclosingReceiver.sourceName(), tokens[0])) {", "+\t\t\t\tthis.scope.problemReporter().illegalQualifierForExplicitThis(this.receiver, enclosingReceiver);", "+\t\t\t\tthis.receiver.qualifyingName = null;", "+\t\t} else if (tokens != null && tokens.length > 0) {", "+\t\t\tthis.scope.problemReporter().illegalQualifierForExplicitThis2(this.receiver);", "+\t\t\tthis.receiver.qualifyingName = null;"]}], "num": 21945}
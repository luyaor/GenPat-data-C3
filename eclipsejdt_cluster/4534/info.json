{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f0fc8de6879996d337aed93430596f1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fe37741871d9b7c5f529c7782a36c05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\t\tif (this.nlsTags != null || this.stringLiterals != null) {", "-\t\t\t\tfinal int stringLiteralsLength = this.stringLiteralsPtr;", "-\t\t\t\tfinal int nlsTagsLength = this.nlsTags == null ? 0 : this.nlsTags.length;", "-\t\t\t\tif (stringLiteralsLength == 0) {", "-\t\t\t\t\tif (nlsTagsLength != 0) {", "-\t\t\t\t\t\tfor (int i = 0; i < nlsTagsLength; i++) {", "-\t\t\t\t\t\t\tNLSTag tag = this.nlsTags[i];", "-\t\t\t\t\t\t\tif (tag != null) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().unnecessaryNLSTags(tag.start, tag.end);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else if (nlsTagsLength == 0) {", "-\t\t\t\t\t// resize string literals", "-\t\t\t\t\tif (this.stringLiterals.length != stringLiteralsLength) {", "-\t\t\t\t\t\tSystem.arraycopy(this.stringLiterals, 0, (stringLiterals = new StringLiteral[stringLiteralsLength]), 0, stringLiteralsLength);", "-\t\t\t\t\t}", "-\t\t\t\t\tArrays.sort(this.stringLiterals, STRING_LITERAL_COMPARATOR);", "-\t\t\t\t\tfor (int i = 0; i < stringLiteralsLength; i++) {", "-\t\t\t\t\t\tscope.problemReporter().nonExternalizedStringLiteral(this.stringLiterals[i]);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// need to iterate both arrays to find non matching elements", "-\t\t\t\t\tif (this.stringLiterals.length != stringLiteralsLength) {", "-\t\t\t\t\t\tSystem.arraycopy(this.stringLiterals, 0, (stringLiterals = new StringLiteral[stringLiteralsLength]), 0, stringLiteralsLength);", "-\t\t\t\t\t}", "-\t\t\t\t\tArrays.sort(this.stringLiterals, STRING_LITERAL_COMPARATOR);", "-\t\t\t\t\tint indexInLine = 1;", "-\t\t\t\t\tint lastLineNumber = -1;", "-\t\t\t\t\tStringLiteral literal = null;", "-\t\t\t\t\tint index = 0;", "-\t\t\t\t\tint i = 0;", "-\t\t\t\t\tstringLiteralsLoop: for (; i < stringLiteralsLength; i++) {", "-\t\t\t\t\t\tliteral = this.stringLiterals[i];", "-\t\t\t\t\t\tfinal int literalLineNumber = literal.lineNumber;", "-\t\t\t\t\t\tif (lastLineNumber != literalLineNumber) {", "-\t\t\t\t\t\t\tindexInLine = 1;", "-\t\t\t\t\t\t\tlastLineNumber = literalLineNumber;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tindexInLine++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (index < nlsTagsLength) {", "-\t\t\t\t\t\t\tnlsTagsLoop: for (; index < nlsTagsLength; index++) {", "-\t\t\t\t\t\t\t\tNLSTag tag = this.nlsTags[index];", "-\t\t\t\t\t\t\t\tif (tag == null) continue nlsTagsLoop;", "-\t\t\t\t\t\t\t\tint tagLineNumber = tag.lineNumber;", "-\t\t\t\t\t\t\t\tif (literalLineNumber < tagLineNumber) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().nonExternalizedStringLiteral(literal);", "-\t\t\t\t\t\t\t\t\tcontinue stringLiteralsLoop;", "-\t\t\t\t\t\t\t\t} else if (literalLineNumber == tagLineNumber) {", "-\t\t\t\t\t\t\t\t\tif (tag.index == indexInLine) {", "-\t\t\t\t\t\t\t\t\t\tthis.nlsTags[index] = null;", "-\t\t\t\t\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\t\t\t\t\tcontinue stringLiteralsLoop;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tnlsTagsLoop2: for (int index2 = index + 1; index2 < nlsTagsLength; index2++) {", "-\t\t\t\t\t\t\t\t\t\t\tNLSTag tag2 = this.nlsTags[index2];", "-\t\t\t\t\t\t\t\t\t\t\tif (tag2 == null) continue nlsTagsLoop2;", "-\t\t\t\t\t\t\t\t\t\t\tint tagLineNumber2 = tag2.lineNumber;", "-\t\t\t\t\t\t\t\t\t\t\tif (literalLineNumber == tagLineNumber2) {", "-\t\t\t\t\t\t\t\t\t\t\t\tif (tag2.index == indexInLine) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.nlsTags[index2] = null;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue stringLiteralsLoop;", "-\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue nlsTagsLoop2;", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tscope.problemReporter().nonExternalizedStringLiteral(literal);", "-\t\t\t\t\t\t\t\t\t\t\t\tcontinue stringLiteralsLoop;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().nonExternalizedStringLiteral(literal);", "-\t\t\t\t\t\t\t\t\t\tcontinue stringLiteralsLoop;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().unnecessaryNLSTags(tag.start, tag.end);", "-\t\t\t\t\t\t\t\t\tcontinue nlsTagsLoop;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// all nls tags have been processed, so remaining string literals are not externalized", "-\t\t\t\t\t\tbreak stringLiteralsLoop;", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (; i < stringLiteralsLength; i++) {", "-\t\t\t\t\t\tscope.problemReporter().nonExternalizedStringLiteral(this.stringLiterals[i]);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (index < nlsTagsLength) {", "-\t\t\t\t\t\tfor (; index < nlsTagsLength; index++) {", "-\t\t\t\t\t\t\tNLSTag tag = this.nlsTags[index];", "-\t\t\t\t\t\t\tif (tag != null) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().unnecessaryNLSTags(tag.start, tag.end);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\treportNLSProblems();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e3de76650007c45a00f1bce44c91e7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "commitAfterChange": "15b09e3657f237aa7526b08315f9749226cbc20e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["+\t\t\tif (this.nlsTags != null || this.stringLiterals != null) {", "+\t\t\t\tfinal int stringLiteralsLength = this.stringLiteralsPtr;", "+\t\t\t\tfinal int nlsTagsLength = this.nlsTags == null ? 0 : this.nlsTags.length;", "+\t\t\t\tif (stringLiteralsLength == 0) {", "+\t\t\t\t\tif (nlsTagsLength != 0) {", "+\t\t\t\t\t\tfor (int i = 0; i < nlsTagsLength; i++) {", "+\t\t\t\t\t\t\tNLSTag tag = this.nlsTags[i];", "+\t\t\t\t\t\t\tif (tag != null) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().unnecessaryNLSTags(tag.start, tag.end);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (nlsTagsLength == 0) {", "+\t\t\t\t\t// resize string literals", "+\t\t\t\t\tif (this.stringLiterals.length != stringLiteralsLength) {", "+\t\t\t\t\t\tSystem.arraycopy(this.stringLiterals, 0, (stringLiterals = new StringLiteral[stringLiteralsLength]), 0, stringLiteralsLength);", "+\t\t\t\t\t}", "+\t\t\t\t\tArrays.sort(this.stringLiterals, STRING_LITERAL_COMPARATOR);", "+\t\t\t\t\tfor (int i = 0; i < stringLiteralsLength; i++) {", "+\t\t\t\t\t\tscope.problemReporter().nonExternalizedStringLiteral(this.stringLiterals[i]);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// need to iterate both arrays to find non matching elements", "+\t\t\t\t\tif (this.stringLiterals.length != stringLiteralsLength) {", "+\t\t\t\t\t\tSystem.arraycopy(this.stringLiterals, 0, (stringLiterals = new StringLiteral[stringLiteralsLength]), 0, stringLiteralsLength);", "+\t\t\t\t\t}", "+\t\t\t\t\tArrays.sort(this.stringLiterals, STRING_LITERAL_COMPARATOR);", "+\t\t\t\t\tint indexInLine = 1;", "+\t\t\t\t\tint lastLineNumber = -1;", "+\t\t\t\t\tStringLiteral literal = null;", "+\t\t\t\t\tint index = 0;", "+\t\t\t\t\tint i = 0;", "+\t\t\t\t\tstringLiteralsLoop: for (; i < stringLiteralsLength; i++) {", "+\t\t\t\t\t\tliteral = this.stringLiterals[i];", "+\t\t\t\t\t\tfinal int literalLineNumber = literal.lineNumber;", "+\t\t\t\t\t\tif (lastLineNumber != literalLineNumber) {", "+\t\t\t\t\t\t\tindexInLine = 1;", "+\t\t\t\t\t\t\tlastLineNumber = literalLineNumber;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tindexInLine++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (index < nlsTagsLength) {", "+\t\t\t\t\t\t\tnlsTagsLoop: for (; index < nlsTagsLength; index++) {", "+\t\t\t\t\t\t\t\tNLSTag tag = this.nlsTags[index];", "+\t\t\t\t\t\t\t\tif (tag == null) continue nlsTagsLoop;", "+\t\t\t\t\t\t\t\tint tagLineNumber = tag.lineNumber;", "+\t\t\t\t\t\t\t\tif (literalLineNumber < tagLineNumber) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().nonExternalizedStringLiteral(literal);", "+\t\t\t\t\t\t\t\t\tcontinue stringLiteralsLoop;", "+\t\t\t\t\t\t\t\t} else if (literalLineNumber == tagLineNumber) {", "+\t\t\t\t\t\t\t\t\tif (tag.index == indexInLine) {", "+\t\t\t\t\t\t\t\t\t\tthis.nlsTags[index] = null;", "+\t\t\t\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t\t\t\t\tcontinue stringLiteralsLoop;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tnlsTagsLoop2: for (int index2 = index + 1; index2 < nlsTagsLength; index2++) {", "+\t\t\t\t\t\t\t\t\t\t\tNLSTag tag2 = this.nlsTags[index2];", "+\t\t\t\t\t\t\t\t\t\t\tif (tag == null) continue nlsTagsLoop2;", "+\t\t\t\t\t\t\t\t\t\t\tint tagLineNumber2 = tag2.lineNumber;", "+\t\t\t\t\t\t\t\t\t\t\tif (literalLineNumber == tagLineNumber2) {", "+\t\t\t\t\t\t\t\t\t\t\t\tif (tag2.index == indexInLine) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tthis.nlsTags[index2] = null;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue stringLiteralsLoop;", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue nlsTagsLoop2;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\tscope.problemReporter().nonExternalizedStringLiteral(literal);", "+\t\t\t\t\t\t\t\t\t\t\t\tcontinue stringLiteralsLoop;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().nonExternalizedStringLiteral(literal);", "+\t\t\t\t\t\t\t\t\t\tcontinue stringLiteralsLoop;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().unnecessaryNLSTags(tag.start, tag.end);", "+\t\t\t\t\t\t\t\t\tcontinue nlsTagsLoop;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tbreak stringLiteralsLoop;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (; i < stringLiteralsLength; i++) {", "+\t\t\t\t\t\tscope.problemReporter().nonExternalizedStringLiteral(this.stringLiterals[i]);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (index < nlsTagsLength) {", "+\t\t\t\t\t\tfor (; index < nlsTagsLength; index++) {", "+\t\t\t\t\t\t\tNLSTag tag = this.nlsTags[index];", "+\t\t\t\t\t\t\tif (tag != null) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().unnecessaryNLSTags(tag.start, tag.end);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 4534}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57341b7f9f8af6bbc97d3e59c60826c3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d910d1249cd737d97680053a701fe4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "a184055df3953fc7636d02b495d8ddad60f03a7d", "commitAfterChange": "6ec8b600d2528691e914df35d7ab6d321bfc7cb2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["+\t\tFieldBinding field;", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\tif (!fieldBinding.isStatic()) {", "+\t\t\tfield = (FieldBinding) this.binding;", "+\t\t\tif (!field.isStatic()) {", "-\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "+\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, field);", "-\t\t\t\t\t\t&& fieldBinding.declaringClass != actualReceiverType) {", "-\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, fieldBinding);", "+\t\t\t\t\t\t&& field.declaringClass != actualReceiverType) {", "+\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, field);", "-\t\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length))", "-\t\t\t\tscope.problemReporter().deprecatedField(fieldBinding, this);", "+\t\t\tif (isFieldUseDeprecated(field, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length))", "+\t\t\t\tscope.problemReporter().deprecatedField(field, this);", "+\t\t} else {", "+\t\t\tfield = null;", "-\t\tthis.constant =", "-\t\t\t((bits & FIELD) != 0)", "+\t\tthis.constant = field != null", "+\t\t\t// set generic cast of for previous field (if any)", "+\t\t\tif (field != null) {", "+\t\t\t\tFieldBinding originalBinding = field.original();", "+\t\t\t\tif (originalBinding != field) {", "+\t\t\t\t    // extra cast needed if method return type has type variable", "+\t\t\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && type.id != T_Object) {", "+\t\t\t\t    \tsetGenericCast(index-1,originalBinding.type.genericCast(type));", "+\t\t\t\t    }", "+\t\t\t\t} \t", "+\t\t\t}", "-\t\t\tFieldBinding field = scope.getField(type, token, this);", "+\t\t\tfield = scope.getField(type, token, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "631c7eb9844dfb8cb3e5b3aabc4cea95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "caf7e000b252004e771c897e0eb1bc8ff720d879", "commitAfterChange": "a120c3eba1289fa5bdc2d2b34c4bf1b18bf73e31", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["+\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\t\t\r", "-\t\t\tif (fieldBinding.declaringClass != null\r", "+\t\t\tif (fieldBinding.declaringClass != this.actualReceiverType\r", "+\t\t\t\t&& fieldBinding.declaringClass != null\r", "-\t\t\t\t&& !fieldBinding.declaringClass.canBeSeenBy(scope))\r", "-\t\t\t\t\tbinding = new FieldBinding(fieldBinding, (ReferenceBinding) delegateThis.type);\r", "+\t\t\t\t&& (scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(scope))){\r", "+\t\t\t\tbinding = new FieldBinding(fieldBinding, (ReferenceBinding)this.actualReceiverType);\r", "+\t\t\t}\r", "-\t\t\tif (fieldBinding.declaringClass != null\r", "+\t\t\tif (fieldBinding.declaringClass != delegateThis.type\r", "+\t\t\t\t&& fieldBinding.declaringClass != null\r", "-\t\t\t\t&& !localScope.canBeSeenByForCodeSnippet(fieldBinding.declaringClass, (ReferenceBinding) delegateThis.type))\r", "+\t\t\t\t&& (scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\t\t\t\t\r", "+\t\t\t\t\t|| !localScope.canBeSeenByForCodeSnippet(fieldBinding.declaringClass, (ReferenceBinding) delegateThis.type))) {\r", "+\t\t\t}\r", "+\t\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\t\t\t\r", "-\t\t\t\t\t&& !field.declaringClass.canBeSeenBy(scope))\r", "+\t\t\t\t\t&& (scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\t\t\t\t\t\r", "+\t\t\t\t\t\t|| !field.declaringClass.canBeSeenBy(scope))) {\r", "+\t\t\t\t}\r", "-\t\t\t\t\t&& !localScope.canBeSeenByForCodeSnippet(field.declaringClass, (ReferenceBinding) delegateThis.type))\r", "-\t\t\t\t\t\totherBindings[place] = new FieldBinding(field, (ReferenceBinding)type);\r", "+\t\t\t\t\t&& (scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t\t\t|| !localScope.canBeSeenByForCodeSnippet(field.declaringClass, (ReferenceBinding) delegateThis.type))){\r", "+\t\t\t\t\totherBindings[place] = new FieldBinding(field, (ReferenceBinding)type);\r", "+\t\t\t\t}\r"]}], "num": 34079}
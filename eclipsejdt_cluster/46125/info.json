{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e329c1fb61abc81caf38d22d8591516", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81911d72d14536365b0e083f2a677b90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "8ad7ea4a3e807d9d57eeeda9a3a7bd6598dfbdb1", "commitAfterChange": "b7a41e13e2a80300225883c3cc5ff3990406ce0a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["+\t\t\t\t\t\t\tcase ProblemReasons.InheritedNameHidesEnclosingName :", "-\t\t\t\tif (qualifiedType != null && (qualifiedType.isGenericType() || qualifiedType.isParameterizedType())) {", "+\t\t\t\tif (qualifiedType != null) {", "-\t\t\tif (typeIsConsistent && currentType.isStatic() && qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isGenericType())) {", "+\t\t\tif (typeIsConsistent ", "+\t\t\t\t\t\t&& currentType.isStatic() ", "+\t\t\t\t\t\t&& qualifiedType != null ", "+\t\t\t\t\t\t&& ((qualifiedType.isParameterizedType() && ((ParameterizedTypeBinding)qualifiedType).arguments != null) || qualifiedType.isGenericType())) {", "+\t\t\t\tReferenceBinding currentErasure = (ReferenceBinding)currentType.erasure();", "-\t\t\t\t\t\t? arg.resolveTypeArgument((ClassScope) scope, currentType, j)", "-\t\t\t\t\t\t: arg.resolveTypeArgument((BlockScope) scope, currentType, j);", "+\t\t\t\t\t\t? arg.resolveTypeArgument((ClassScope) scope, currentErasure, j)", "+\t\t\t\t\t\t: arg.resolveTypeArgument((BlockScope) scope, currentErasure, j);", "-\t\t\t\t\tif (((ClassScope) scope).detectHierarchyCycle(currentType, this))", "+\t\t\t\t\tif (((ClassScope) scope).detectHierarchyCycle(currentErasure, this))", "-\t\t\t    TypeVariableBinding[] typeVariables = currentType.typeVariables();", "+\t\t\t    TypeVariableBinding[] typeVariables = currentErasure.typeVariables();", "-\t\t\t\t\t\t? scope.environment().createParameterizedType(currentType, null, qualifiedType)", "+\t\t\t\t\t\t? scope.environment().createParameterizedType(currentErasure, null, qualifiedType)", "-\t\t\t\t\t\t\t\tthis, scope.environment().createRawType((ReferenceBinding)currentType.erasure(), actualEnclosing), argTypes);", "+\t\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentErasure, actualEnclosing), argTypes);", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(currentErasure, argTypes, qualifiedType);", "-\t\t\t\tif (isClassScope)", "-\t\t\t\t\tif (((ClassScope) scope).detectHierarchyCycle(currentType, this))", "-\t\t\t\t\t\treturn null;", "+\t\t\t\tif (isClassScope)", "+\t\t\t\t\tif (((ClassScope) scope).detectHierarchyCycle(currentErasure, this))", "+\t\t\t\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af4c4d9c1277bb0eea832dbccd2d55b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "c4927c564b69494d646b05aeea68f92c6711e1ca", "commitAfterChange": "d5cfbf43310ee4287ca95e41bcf01793920b4037", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-", "-\t\t\t\tReferenceBinding currentErasure = (ReferenceBinding)currentType.erasure();", "+\t\t\t\tReferenceBinding currentOriginal = (ReferenceBinding)currentType.original();", "-\t\t\t\t\t\t? arg.resolveTypeArgument((ClassScope) scope, currentErasure, j)", "-\t\t\t\t\t\t: arg.resolveTypeArgument((BlockScope) scope, currentErasure, j);", "+\t\t\t\t\t\t? arg.resolveTypeArgument((ClassScope) scope, currentOriginal, j)", "+\t\t\t\t\t\t: arg.resolveTypeArgument((BlockScope) scope, currentOriginal, j);", "-\t\t\t\t\tif (((ClassScope) scope).detectHierarchyCycle(currentErasure, this))", "+\t\t\t\t\tif (((ClassScope) scope).detectHierarchyCycle(currentOriginal, this))", "-\t\t\t    TypeVariableBinding[] typeVariables = currentErasure.typeVariables();", "+\t\t\t    TypeVariableBinding[] typeVariables = currentOriginal.typeVariables();", "-\t\t\t\t\t\t? scope.environment().createParameterizedType(currentErasure, null, qualifyingType)", "+\t\t\t\t\t\t? scope.environment().createParameterizedType(currentOriginal, null, qualifyingType)", "-\t\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentErasure, actualEnclosing), argTypes);", "+\t\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentOriginal, actualEnclosing), argTypes);", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(currentErasure, argTypes, qualifyingType);", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(currentOriginal, argTypes, qualifyingType);", "-\t\t\t\tReferenceBinding currentErasure = (ReferenceBinding)currentType.erasure();", "+\t\t\t\tReferenceBinding currentOriginal = (ReferenceBinding)currentType.original();", "-\t\t\t\t\tif (((ClassScope) scope).detectHierarchyCycle(currentErasure, this))", "+\t\t\t\t\tif (((ClassScope) scope).detectHierarchyCycle(currentOriginal, this))", "-\t\t\t\tif (currentErasure.isGenericType()) {", "+\t\t\t\tif (currentOriginal.isGenericType()) {", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType(currentErasure, null, qualifyingType));", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType(currentOriginal, null, qualifyingType));", "-\t   \t\t\t    qualifyingType = scope.environment().createRawType(currentErasure, qualifyingType); // raw type", "+\t   \t\t\t    qualifyingType = scope.environment().createRawType(currentOriginal, qualifyingType); // raw type", "-\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.environment().createParameterizedType(currentErasure, null, qualifyingType)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.environment().createParameterizedType(currentOriginal, null, qualifyingType)"]}], "num": 46125}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75f120143e8c6f5eb51afc0b036e37c4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4de519ff2f2eee3e9aa10e17d640872b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "fbe6068a056e0c84ef6c205002f1a940414a157a", "commitAfterChange": "c6eaf8522a1a36af9ad6ac5cdc9ead859016f6c5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \tpublic MethodBinding findDefaultAbstractMethod(\r \t\tReferenceBinding receiverType, \r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite,\r \t\tReferenceBinding classHierarchyStart,\r \t\tMethodBinding matchingMethod,\r \t\tObjectVector found)", "signatureAfterChange": "\r \tpublic MethodBinding findDefaultAbstractMethod(\r \t\tReferenceBinding receiverType, \r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite,\r \t\tReferenceBinding classHierarchyStart,\r \t\tMethodBinding matchingMethod,\r \t\tObjectVector found)", "diff": ["+\t\t\tif (matchingMethod != null) compilationUnitScope().recordTypeReferences(matchingMethod.thrownExceptions);\r", "-\t\tif (candidatesCount == 1)\r", "-\t\t\treturn candidates[0]; // have not checked visibility\r", "+\t\tif (candidatesCount == 1){\r", "+\t\t\tcompilationUnitScope().recordTypeReferences(candidates[0].thrownExceptions);\r", "+\t\t\treturn candidates[0]; \r", "+\t\t}\r", "-\r", "-\t\t// visibility check\r", "-\t\tint visiblesCount = 0;\r", "-\t\tfor (int i = 0; i < candidatesCount; i++) {\r", "-\t\t\tMethodBinding methodBinding = candidates[i];\r", "-\t\t\tif (methodBinding.canBeSeenBy(receiverType, invocationSite, this)) {\r", "-\t\t\t\tif (visiblesCount != i) {\r", "-\t\t\t\t\tcandidates[i] = null;\r", "-\t\t\t\t\tcandidates[visiblesCount] = methodBinding;\r", "-\t\t\t\t}\r", "-\t\t\t\tvisiblesCount++;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (visiblesCount == 1) {\r", "-\t\t\tcompilationUnitScope().recordTypeReferences(candidates[0].thrownExceptions);\r", "-\t\t\treturn candidates[0];\r", "-\t\t}\r", "-\t\tif (visiblesCount == 0)\r", "-\t\t\treturn new ProblemMethodBinding(\r", "-\t\t\t\tcandidates[0].selector,\r", "-\t\t\t\targumentTypes,\r", "-\t\t\t\tcandidates[0].declaringClass,\r", "-\t\t\t\tNotVisible);\r", "-\t\t\t\t\r", "-\t\treturn mostSpecificInterfaceMethodBinding(candidates, visiblesCount);\r", "+\t\t// no need to check for visibility - interface methods are public\r", "+\t\treturn mostSpecificInterfaceMethodBinding(candidates, candidatesCount);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5db5ba20fbecdbc2b684cca454a1831b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "424cdde474240f77c6a95afe51d763a0380a2d1a", "commitAfterChange": "dea180787931d8ee1f626772e59d44fa10c93411", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\tint bestParamMatches = -1;", "-\t\t\t\tint paramMatches = 0;", "-\t\t\t\tnext: for (int p = 0; p < paramLength; p++) {", "-\t\t\t\t\tTypeBinding param = params[p];", "-\t\t\t\t\tfor (int a = p == 0 ? 0 : p - 1; a < argLength && a < p + 1; a++) { // look one slot before & after to see if the type matches", "-\t\t\t\t\t\tif (param == argumentTypes[a]) {", "-\t\t\t\t\t\t\tparamMatches++;", "-\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (argMatches + paramMatches < bestArgMatches + bestParamMatches)", "+\t\t\t\tif (argMatches < bestArgMatches)", "-\t\t\t\tif (argMatches + paramMatches == bestArgMatches + bestParamMatches) {", "+\t\t\t\tif (argMatches == bestArgMatches) {", "-\t\t\t\tbestParamMatches = paramMatches;"]}], "num": 58897}
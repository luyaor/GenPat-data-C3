{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fd84dddf0e4ba413bab26eb87d97748", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bc1c82c9515d363e1d9a4a4351d52d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8580e60642e681a1d666f59f018926e08e2e8a62", "commitAfterChange": "e4335f612db86aa6e739c4af37c0425a42aadb90", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\tif ((invocationSite instanceof Invocation) && mbk.typeVariables() != Binding.NO_TYPE_VARIABLES) {", "+\t\t\t\t\tif (((invocationSite instanceof Invocation) || (invocationSite instanceof ReferenceExpression))", "+\t\t\t\t\t\t\t&& mbk.typeVariables() != Binding.NO_TYPE_VARIABLES) ", "+\t\t\t\t\t{", "-\t\t\t\t\t\tInvocation invocation = (Invocation)invocationSite;", "-\t\t\t\t\t\tInferenceContext18 ic18 = new InferenceContext18(this, invocation.arguments(), invocation);", "-\t\t\t\t\t\tif (!ic18.isMoreSpecificThan(invocation, mbj, mbk, levelj == VARARGS_COMPATIBLE, levelk == VARARGS_COMPATIBLE)) {", "+\t\t\t\t\t\tExpression[] expressions = null;", "+\t\t\t\t\t\tif (invocationSite instanceof Invocation) {", "+\t\t\t\t\t\t\texpressions = ((Invocation)invocationSite).arguments();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\texpressions = ((ReferenceExpression)invocationSite).createPseudoExpressions(argumentTypes);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tInferenceContext18 ic18 = new InferenceContext18(this, expressions, null);", "+\t\t\t\t\t\tif (!ic18.isMoreSpecificThan(mbj, mbk, levelj == VARARGS_COMPATIBLE, levelk == VARARGS_COMPATIBLE)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbfe126b24b2b0927db0e789cc555491", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "86397dfc80023f615cc88c0705b2ada916e6efb2", "commitAfterChange": "24624a25f60573230ed7652730faedca15fd4d8b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] exclusionPatterns, String specificOutputLocation) throws JavaModelException", "signatureAfterChange": " \tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] patterns, boolean areExclusionPatterns, String specificOutputLocation) throws JavaModelException", "diff": ["+\t */", "+\tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] patterns, boolean areExclusionPatterns, String specificOutputLocation) throws JavaModelException {", "-\t\tIClasspathEntry entry = JavaCore.newSourceEntry(path, exclusionPatterns == null ? new Path[0] : exclusionPatterns, outputPath);", "+\t\tIClasspathEntry entry;", "+\t\tif (areExclusionPatterns)", "+\t\t\t// exclusion patterns", "+\t\t\tentry = JavaCore.newSourceEntry(path, patterns == null ? new Path[0] : patterns, outputPath);", "+\t\telse", "+\t\t\t// inclusion patterns", "+\t\t\tentry = JavaCore.newSourceEntry(path, patterns == null ? new Path[0] : patterns, new Path[0], outputPath);"]}], "num": 32971}
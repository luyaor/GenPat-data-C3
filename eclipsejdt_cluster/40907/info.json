{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4d5e28714aac0576dbaf2862aeb002e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10c63e7c8b98c90786e8f6313fe602d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": " \tpublic boolean visit(ArrayCreation node)", "diff": ["-\t\tType elementType= (Type) getChildNode(arrayType, ArrayType.COMPONENT_TYPE_PROPERTY);", "-\t\tint dimensions= 1; // always include this array type", "-\t\twhile (elementType.isArrayType()) {", "-\t\t\tdimensions++;", "-\t\t\telementType = (Type) getChildNode(elementType, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\tType elementType;", "+\t\tint dimensions;", "+\t\tboolean astLevelGTE8 = node.getAST().apiLevel() >= AST.JLS8 ? true : false;", "+\t\tif (astLevelGTE8) {", "+\t\t\telementType = (Type) getChildNode(arrayType, ArrayType.ELEMENT_TYPE_PROPERTY);", "+\t\t\tdimensions = getChildList(arrayType, ArrayType.DIMENSIONS_PROPERTY).size();", "+\t\t} else {", "+\t\t\telementType = (Type) getChildNode(arrayType, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\t\tdimensions = 1; // always include this array type", "+\t\t\twhile (elementType.isArrayType()) {", "+\t\t\t\tdimensions++;", "+\t\t\t\telementType = (Type) getChildNode(elementType, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\t\t}", "-\t\tType type= arrayType;", "-\t\t\tif (node.getAST().apiLevel() >= AST.JLS8 && type instanceof ArrayType) {", "-\t\t\t\tvisitList(type, ArrayType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "-\t\t\t\ttype = (Type) getChildNode(type, ArrayType.COMPONENT_TYPE_PROPERTY);", "-\t\t\t}", "+\t\t\tinternalVisitExtraDimensionAnnotations(arrayType, i, astLevelGTE8);", "-\t\t\tdimensions--;", "-\t\tfor (int i= 0; i < dimensions; i++) {", "-\t\t\tif (node.getAST().apiLevel() >= AST.JLS8 && type instanceof ArrayType) {", "-\t\t\t\tvisitList(type, ArrayType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "-\t\t\t\ttype = (Type) getChildNode(type, ArrayType.COMPONENT_TYPE_PROPERTY);", "-\t\t\t}", "+\t\tfor (int i= list.size(); i < dimensions; i++) {", "+\t\t\tinternalVisitExtraDimensionAnnotations(arrayType, i, astLevelGTE8);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbaa1d30e2f7e510a2a8c5e53e6205d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test0011() throws JavaModelException", "signatureAfterChange": " \tpublic void test0011() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(((ArrayType) type).annotations()));", "+\t\tExtraDimension extraDimension = ((ArrayType) type).getDimensionAt(0);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(1);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(2);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(extraDimension.annotations()));", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(((ArrayType) type).annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(0);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(1);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(2);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(extraDimension.annotations()));"]}], "num": 40907}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f9a11da5754373fe227671dd76effc1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "613a19b67c407ed8f8c4e33fa997c7c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "78ff15530e707d01377b0a6a2a0126d47f768ee6", "commitAfterChange": "f0576ea1b21b6541ff2e834545c520f4540fae3a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-", "+\t", "+\t\t\tCaseStatement[] duplicateCaseStatements = null;", "+\t\t\tint duplicateCaseStatementsCounter = 0;", "-\t\t\t\tif ((cst = statements[i].resolveCase(scope, testType, this)) != null) {", "+\t\t\t\tfinal Statement statement = statements[i];", "+\t\t\t\tif ((cst = statement.resolveCase(scope, testType, this)) != null) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase((CaseStatement) statements[i], cst); //TODO: (olivier) could improve diagnosis to indicate colliding case", "+\t\t\t\t\t\t\t\tfinal CaseStatement currentCaseStatement = (CaseStatement) statement;", "+\t\t\t\t\t\t\t\tif (duplicateCaseStatements == null) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase(cases[j]);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase(currentCaseStatement);", "+\t\t\t\t\t\t\t\t\tduplicateCaseStatements = new CaseStatement[length];", "+\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = cases[j];", "+\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = currentCaseStatement;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tboolean found = false;", "+\t\t\t\t\t\t\t\t\tsearchReportedDuplicate: for (int k = 2; k < duplicateCaseStatementsCounter; k++) {", "+\t\t\t\t\t\t\t\t\t\tif (duplicateCaseStatements[k] == statement) {", "+\t\t\t\t\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\t\t\t\t\tbreak searchReportedDuplicate;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase(currentCaseStatement);", "+\t\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = currentCaseStatement;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3d5b7439266dcad79905117221cf220", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "1aa5cee9e9697e028635f26ba41c923ef65834f6", "commitAfterChange": "3553ae2fde22d1bf8f8672de0126ed2f663e6d31", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method)", "signatureAfterChange": "  public void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method)", "diff": ["-\tfor (int i = 0, count = this.handledExceptions.length; i < count; i++) {", "+\tTypeBinding[] docCommentReferences = null;", "+\tint docCommentReferencesLength = 0;", "+\tif (scope.compilerOptions().", "+\t\t\t\treportUnusedDeclaredThrownExceptionIncludeDocCommentReference &&", "+\t\t\tmethod.javadoc != null &&", "+\t\t\tmethod.javadoc.exceptionReferences != null &&", "+\t\t\t(docCommentReferencesLength = method.javadoc.exceptionReferences.length) > 0) {", "+\t\tdocCommentReferences = new TypeBinding[docCommentReferencesLength];", "+\t\tfor (int i = 0; i < docCommentReferencesLength; i++) {", "+\t\t\tdocCommentReferences[i] = method.javadoc.exceptionReferences[i].resolvedType;", "+\t\t}", "+\t}", "+\tnextHandledException: for (int i = 0, count = this.handledExceptions.length; i < count; i++) {", "+\t\t\tfor (int j = 0; j < docCommentReferencesLength; j++) {", "+\t\t\t\tif (docCommentReferences[j] == this.handledExceptions[i]) {", "+\t\t\t\t\tcontinue nextHandledException;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 15826}
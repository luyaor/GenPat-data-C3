{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b2945cea427d22007fa44f2e9c964f9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ac138a091f9c98a9a24e8bd6ae8dfb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "cccafe00dbf29f156949d8f0d0aec370b02aa048", "commitAfterChange": "1a542c460a449efbae14d1057ba233825602248d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 38, "signatureBeforeChange": " protected void removeAffectedChild(JavaElementDelta child)", "signatureAfterChange": " protected void removeAffectedChild(JavaElementDelta child)", "diff": ["-\tint index = -1;", "-\tif (this.affectedChildren != null) {", "-\t\tfor (int i = 0; i < this.affectedChildren.length; i++) {", "-\t\t\tif (equalsAndSameParent(this.affectedChildren[i].getElement(), child.getElement())) { // handle case of two jars that can be equals but not in the same project", "-\t\t\t\tindex = i;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (index >= 0) {", "-\t\tthis.affectedChildren= removeAndShrinkArray(this.affectedChildren, index);", "+\tif (this.affectedChildren.length == 0)", "+\t\treturn;", "+\tKey childKey = new Key(child.getElement());", "+\tInteger exisingChildIndex = getChildIndex(childKey);", "+\tif (exisingChildIndex != null) {", "+\t\tremoveExistingChild(childKey, exisingChildIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c1a30343343e9b9cd89b26a4507a310", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "eeb0d779ca54bfa774f6270ba7624121d1e2d305", "commitAfterChange": "7b2f4aa5695fcdfd1d231766a2116c4508084163", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\t\t\t\tint numArrayBounds = 0;", "-\t\t\t\t\t\tif (intersection.bound.isArrayType()) numArrayBounds++;", "-\t\t\t\t\t\tfor (int i = 0; i < intersection.otherBounds.length; i++) {", "-\t\t\t\t\t\t\tif (intersection.otherBounds[i].isArrayType()) numArrayBounds++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (numArrayBounds == 0)", "-\t\t\t\t\t\t\treturn FALSE;", "-\t\t\t\t\t\tInferenceContext18.missingImplementation(\"Cannot filter most specific array type\"); //$NON-NLS-1$", "-\t\t\t\t\t\t// FIXME assign sPrime", "+\t\t\t\t\t\tsPrimeArray = findMostSpecificSuperArray(intersection.bound, intersection.otherBounds, intersection);", "+\t\t\t\tcase Binding.TYPE_PARAMETER:", "+\t\t\t\t\t{", "+\t\t\t\t\t\tTypeVariableBinding subTVB = (TypeVariableBinding)subCandidate;", "+\t\t\t\t\t\tsPrimeArray = findMostSpecificSuperArray(subTVB.firstBound, subTVB.otherUpperBounds(), subTVB);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\tif (sPrimeArray == null)", "+\t\t\t\t\treturn FALSE;"]}], "num": 22923}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bee213d0603b276edbb109d95ad026f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0625cbb8f1fb5606abd4ee68febf6883", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tpublic void test050g()", "signatureAfterChange": " \tpublic void test050g()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t<N extends B> N b(A<String> s) { return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<N extends B> N b(A<String> s) { return null; }\\n\" + ", "-\t\t\t\"Duplicate method b(A<String>) in type X\\n\" + ", "+\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" + ", "-\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" + ", "+\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "147abd1107d8d2e4cd112d2d5e0f8138", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["-\t\t\t\t\"class B extends A { Integer test() { return 1; } }\\n\"", "+\t\t\t\t\"class B extends A { @Override Integer test() { return 1; } }\\n\"", "-\t\t\t\"\tclass B extends A { Integer test() { return 1; } }\\n\" + ", "-\t\t\t\"\t                    ^^^^^^^\\n\" + ", "+\t\t\t\"\tclass B extends A { @Override Integer test() { return 1; } }\\n\" + ", "+\t\t\t\"\t                              ^^^^^^^\\n\" + ", "-\t\t\t\t\"class B extends A { List getList() { return null; } }\\n\"", "+\t\t\t\t\"class B extends A { @Override List getList() { return null; } }\\n\"", "-\t\t\t\"\tclass B extends A { List getList() { return null; } }\\n\" + ", "-\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"\tclass B extends A { @Override List getList() { return null; } }\\n\" + ", "+\t\t\t\"\t                              ^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1752371053ae42e9ed9ad3db1090a72f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 343, "methodNumberAfterChange": 343, "signatureBeforeChange": " public void testBug110336e() throws CoreException", "signatureAfterChange": " public void testBug110336e() throws CoreException", "diff": ["-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv1 [Test]+[lv2,lv3]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv2 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv4 [Test]+[lv5,lv6]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv4 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv7 [Test]+[lv8,lv9]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv9 [Test]\",", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv1]+[lv2,lv3]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv2]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv4]+[lv5,lv6]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv4]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv7]+[lv8,lv9]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv9]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb865d2af40e9b3319ba117befdbb6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 1211, "methodNumberAfterChange": 1211, "signatureBeforeChange": " public void test1181()", "signatureAfterChange": " public void test1181()", "diff": ["-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21dd82eefdd6992d7fec5ecaca299583", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testFloatConversion_Reflection() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testFloatConversion_Reflection() throws Exception", "diff": ["-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber z expected true but got false\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber s expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber i expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber c expected 1 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber b expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber l expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member z expected true but got false\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member s expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member i expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member c expected 1 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member b expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member l expected 49 but got 0\", testPath),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23121f47cd87bf4e910fe032d736a757", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "f8334cc2f4707a38bb8c442d2aa0203f2137a4bf", "commitAfterChange": "9a9eb1da67c537f40d1da2f5e30136ee08f18a99", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tpublic void test062()", "signatureAfterChange": " \t \tpublic void test062()", "diff": ["-\t\t\t\"    0  iconst_5\\n\" + ", "-\t\t\t\"    1  istore_0\\n\" + ", "-\t\t\t\"    2  getstatic #31 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    5  iload_0\\n\" + ", "-\t\t\t\"    6  invokevirtual #37 <Method java/io/PrintStream.println(I)V>\\n\" + ", "-\t\t\t\"    9  return\\n\" + ", "+\t\t\t\"     0  iconst_5\\n\" + ", "+\t\t\t\"     1  istore_0\\n\" + ", "+\t\t\t\"     2  getstatic #31 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\t\"     5  iload_0\\n\" + ", "+\t\t\t\"     6  invokevirtual #37 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  return\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3829568d8dccb9ede6bdb4a6c32bad8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 226, "methodNumberAfterChange": 226, "signatureBeforeChange": " public void testBug260381_wksp2_05() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_05() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "390a98381d78ffcada6acd99808a340e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "80adc997ad4594d86c098c1d65d4ab0307d988e5", "commitAfterChange": "bd9f1604b7023aa96308289af9053f02dd227d2f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void test017()", "signatureAfterChange": "  \tpublic void test017()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tY.count(new int[0], 1);\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tY.count(new int[0], 1);\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tY.count(new int[0], 1, 1);\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tY.count(new int[0], 1, 1);\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\t\"\tY.count(new int[0], 1, 1, 1);\\r\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tY.count(new int[0], 1, 1, 1);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cf70c163bbe2f8d835efe622a4aeb2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tpublic void test068()", "signatureAfterChange": "  \tpublic void test068()", "diff": ["-\t\t\t\"     2  istore_0\\n\" + ", "-\t\t\t\"     3  iload_0\\n\" + ", "+\t\t\t\"     2  istore_0 [i]\\n\" + ", "+\t\t\t\"     3  iload_0 [i]\\n\" + ", "-\t\t\t\"     9  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom()Z [27]\\n\" + ", "-\t\t\t\"    15  getstatic #33 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    18  iload_0\\n\" + ", "-\t\t\t\"    19  invokevirtual #39 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    18  iload_0 [i]\\n\" + ", "+\t\t\t\"    19  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3de0eec89ac74bb43c4cdc688ec32480", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 584, "methodNumberAfterChange": 584, "signatureBeforeChange": " public void testBug221081() throws CoreException", "signatureAfterChange": " public void testBug221081() throws CoreException", "diff": ["-\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\"", "+\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43433db66df2e281eca940a9c717c82f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTypeCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test008() throws JavaModelException", "signatureAfterChange": "  public void test008() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"code[JAVADOC_INLINE_TAG]{{@code }, null, null, code, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"literal[JAVADOC_INLINE_TAG]{{@literal }, null, null, literal, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"code[JAVADOC_INLINE_TAG]{{@code}, null, null, code, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"literal[JAVADOC_INLINE_TAG]{{@literal}, null, null, literal, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44cac7969a92bff21c26af9101633702", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testFloatConversion() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testFloatConversion() throws Exception", "diff": ["-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber z expected java.lang.Boolean but got java.lang.Float\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber s expected java.lang.Short but got java.lang.Float\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber i expected java.lang.Integer but got java.lang.Float\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber c expected java.lang.Character but got java.lang.Float\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber b expected java.lang.Byte but got java.lang.Float\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber l expected java.lang.Long but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member z expected java.lang.Boolean but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member s expected java.lang.Short but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member i expected java.lang.Integer but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member c expected java.lang.Character but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member b expected java.lang.Byte but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member l expected java.lang.Long but got java.lang.Float\", testPath),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4613134cc88377a035f270f2aaed006e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 226, "methodNumberAfterChange": 226, "signatureBeforeChange": " public void testBug260381_wksp2_05() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_05() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48af58a0e4215c71f6cbb61f77b36048", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "c8d7e735b1fdf27bd805f7e5ae0a6eacad7e4530", "commitAfterChange": "8fed2cc02e45d0c02f4805c1a6592bef37ca778a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void test037() throws Exception", "signatureAfterChange": " public void test037() throws Exception", "diff": ["-\t\t\"  // Method descriptor #43 (Ljava/util/ArrayList;)V\\n\" +", "-\t\t\"  // Signature: <T:Ljava/util/ArrayList<Ljava/lang/String;>;>(TT;)V\\n\" +", "-\t\t\"  // Stack: 2, Locals: 3\\n\" +", "-\t\t\"  public static void foo(java.util.ArrayList t);\\n\" +", "-\t\t\"     0  aload_0 [t]\\n\" +", "-\t\t\"     1  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator [45]\\n\" +", "-\t\t\"     4  astore_2\\n\" +", "-\t\t\"     5  goto 25\\n\" +", "-\t\t\"     8  aload_2\\n\" +", "-\t\t\"     9  invokeinterface java.util.Iterator.next() : java.lang.Object [49] [nargs: 1]\\n\" +", "-\t\t\"    14  checkcast java.lang.String [19]\\n\" +", "-\t\t\"    17  astore_1 [s]\\n\" +", "-\t\t\"    18  getstatic java.lang.System.out : java.io.PrintStream [55]\\n\" +", "-\t\t\"    21  aload_1 [s]\\n\" +", "-\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.String) : void [61]\\n\" +", "-\t\t\"    25  aload_2\\n\" +", "-\t\t\"    26  invokeinterface java.util.Iterator.hasNext() : boolean [67] [nargs: 1]\\n\" +", "-\t\t\"    31  ifne 8\\n\" +", "-\t\t\"    34  return\\n\" +", "-\t\t\"      Line numbers:\\n\" +", "-\t\t\"        [pc: 0, line: 8]\\n\" +", "-\t\t\"        [pc: 18, line: 9]\\n\" +", "-\t\t\"        [pc: 25, line: 8]\\n\" +", "-\t\t\"        [pc: 34, line: 10]\\n\" +", "-\t\t\"      Local variable table:\\n\" +", "-\t\t\"        [pc: 0, pc: 35] local: t index: 0 type: java.util.ArrayList\\n\" +", "-\t\t\"        [pc: 18, pc: 25] local: s index: 1 type: java.lang.String\\n\" +", "-\t\t\"      Local variable type table:\\n\" +", "+\t\t\"  // Method descriptor #41 (Ljava/util/ArrayList;)V\\n\" + ", "+\t\t\"  // Signature: <T:Ljava/util/ArrayList<Ljava/lang/String;>;>(TT;)V\\n\" + ", "+\t\t\"  // Stack: 2, Locals: 3\\n\" + ", "+\t\t\"  public static void foo(java.util.ArrayList t);\\n\" + ", "+\t\t\"     0  aload_0 [t]\\n\" + ", "+\t\t\"     1  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator [43]\\n\" + ", "+\t\t\"     4  astore_2\\n\" + ", "+\t\t\"     5  goto 25\\n\" + ", "+\t\t\"     8  aload_2\\n\" + ", "+\t\t\"     9  invokeinterface java.util.Iterator.next() : java.lang.Object [47] [nargs: 1]\\n\" + ", "+\t\t\"    14  checkcast java.lang.String [19]\\n\" + ", "+\t\t\"    17  astore_1 [s]\\n\" + ", "+\t\t\"    18  getstatic java.lang.System.out : java.io.PrintStream [53]\\n\" + ", "+\t\t\"    21  aload_1 [s]\\n\" + ", "+\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.String) : void [59]\\n\" + ", "+\t\t\"    25  aload_2\\n\" + ", "+\t\t\"    26  invokeinterface java.util.Iterator.hasNext() : boolean [65] [nargs: 1]\\n\" + ", "+\t\t\"    31  ifne 8\\n\" + ", "+\t\t\"    34  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 8]\\n\" + ", "+\t\t\"        [pc: 18, line: 9]\\n\" + ", "+\t\t\"        [pc: 25, line: 8]\\n\" + ", "+\t\t\"        [pc: 34, line: 10]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 35] local: t index: 0 type: java.util.ArrayList\\n\" + ", "+\t\t\"        [pc: 18, pc: 25] local: s index: 1 type: java.lang.String\\n\" + ", "+\t\t\"      Local variable type table:\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55b4ccbb55daf0a38e4006e0324b22b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void test010()", "signatureAfterChange": " public void test010()", "diff": ["-\t\t\"     0  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"     3  ldc #23 <String \\\"SUCCESS\\\">\\n\" + ", "-\t\t\"     5  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"     0  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     3  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "+\t\t\"     5  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "-\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    12  ldc #31 <String \\\"SHOULDN\\'T BE GENERATED\\\">\\n\" + ", "-\t\t\"    14  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    12  ldc <String \\\"SHOULDN\\'T BE GENERATED\\\"> [31]\\n\" + ", "+\t\t\"    14  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58abc39da33376bb6117f84793089ab6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\"    38  invokevirtual #32 <Method java/util/ArrayList.iterator()Ljava/util/Iterator;>\\n\" + ", "+\t\t\"    38  invokevirtual #31 <Method java/util/ArrayList.iterator()Ljava/util/Iterator;>\\n\" + ", "-\t\t\"    48  invokeinterface [nargs : 1] #38 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "+\t\t\"    48  invokeinterface [nargs : 1] #37 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "-\t\t\"    59  invokevirtual #42 <Method java/lang/Integer.intValue()I>\\n\" + ", "+\t\t\"    59  invokevirtual #41 <Method java/lang/Integer.intValue()I>\\n\" + ", "-\t\t\"    66  invokeinterface [nargs : 1] #46 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "+\t\t\"    66  invokeinterface [nargs : 1] #45 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "-\t\t\"    74  getstatic #52 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    74  getstatic #51 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    78  invokevirtual #57 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\"    78  invokevirtual #56 <Method java/io/PrintStream.println(I)V>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "665f248d4c2894051588e30fdb9d3849", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumCompletionParserTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test0005()", "signatureAfterChange": " public void test0005()", "diff": ["-\t\t\"case BAR : ;\\n\" +", "-\t\t\"    break ;\\n\" +", "-\t\t\"case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"case BAR :\\n\" +", "+\t\t\"    break;\\n\" +", "+\t\t\"case <CompleteOnName:FOO> :\\n\" +", "-\t\t\"      case BAR : ;\\n\" +", "-\t\t\"          break ;\\n\" +", "-\t\t\"      case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"      case BAR :\\n\" +", "+\t\t\"          break;\\n\" +", "+\t\t\"      case <CompleteOnName:FOO> :\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cc4236dedaa4667484325370773a0c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "80adc997ad4594d86c098c1d65d4ab0307d988e5", "commitAfterChange": "bd9f1604b7023aa96308289af9053f02dd227d2f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void test023()", "signatureAfterChange": " \tpublic void test023()", "diff": ["-\t\t\t\t\"public class X {\\r\\n\" + ", "-\t\t\t\t\"    public static void main (String[] args) {\\r\\n\" + ", "-\t\t\t\t\"        new X().test (new byte[5]);\\r\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"    public static void main (String[] args) {\\n\" + ", "+\t\t\t\t\"        new X().test (new byte[5]);\\n\" + ", "-\t\t\t\t\"    }\\r\\n\" + ", "-\t\t\t\t\"    private void test (Object... params) {\\r\\n\" + ", "-\t\t\t\t\"    }\\r\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    private void test (Object... params) {\\n\" + ", "+\t\t\t\t\"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "845d2e8457ba0f850503aec1e4cf782f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 589, "methodNumberAfterChange": 589, "signatureBeforeChange": " public void testBug221081() throws CoreException", "signatureAfterChange": " public void testBug221081() throws CoreException", "diff": ["-\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\"", "+\t\t\"src/Test.java Test [public class !|Test|! {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\tTest !|test|!;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\t!|Test|! test;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid !|test|!(Test test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid test(!|Test|! test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.!|test|!) {] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "864a4cb3eafa2e448459f0e53bd21d62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test039()", "signatureAfterChange": " \tpublic void test039()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\timport static p.A.foo_I;\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\timport static p.A.foo_I;\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tstatic int i = p.A.foo_I();\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\tstatic int i = p.A.foo_I();\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 6)\\r\\n\" +", "-\t\t\t\"\tstatic int m = foo_I();\\r\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\"\tstatic int m = foo_I();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ed940925662f28a94e21037e505be7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 1211, "methodNumberAfterChange": 1211, "signatureBeforeChange": " public void test1181()", "signatureAfterChange": " public void test1181()", "diff": ["-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92161151bdadd7129d9e51739a53461e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "27a11ce8ecc325901777098d9d0eafdb0be3dc5b", "commitAfterChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "methodNumberBeforeChange": 584, "methodNumberAfterChange": 584, "signatureBeforeChange": " public void testBug221081() throws CoreException", "signatureAfterChange": " public void testBug221081() throws CoreException", "diff": ["-\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\"", "+\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a33d402adf82e66551d9ff2a2416741f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 339, "methodNumberAfterChange": 339, "signatureBeforeChange": " public void testBug110336a() throws CoreException", "signatureAfterChange": " public void testBug110336a() throws CoreException", "diff": ["-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).TP [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).clazz [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).localVar1 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).localVar1 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).localVar2 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).localVar2 [Test]\",", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[TP]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[clazz]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[localVar1]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[localVar1]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[localVar2]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[localVar2]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b45ce63d6c5d3138d988104bab1af3fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 584, "methodNumberAfterChange": 584, "signatureBeforeChange": " public void testBug221081() throws CoreException", "signatureAfterChange": " public void testBug221081() throws CoreException", "diff": ["-\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\"", "+\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c21fc6983bef4e3f36ddf455dc85b156", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void testCompatibility3a()", "signatureAfterChange": " \tpublic void testCompatibility3a()", "diff": ["+\t// FIXME(Stephan) : Old messages are wrong, the new diagnostics are correct, but the leaf component types differ - null annotated readable names don't reflect that - this needs to be fixed.", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c271873ee990b4357f4b844fd9ca65b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 345, "methodNumberAfterChange": 345, "signatureBeforeChange": " public void testBug110336g() throws CoreException", "signatureAfterChange": " public void testBug110336g() throws CoreException", "diff": ["-\t\t\"src/b110336/Test.java b110336.Test.{}.lv1 [Test]+[lv2,lv3]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.{}.lv2 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.{}.lv4 [Test]+[lv5,lv6]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.{}.lv4 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.{}.lv7 [Test]+[lv8,lv9]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.{}.lv9 [Test]\",", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv1]+[lv2,lv3]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv2]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv4]+[lv5,lv6]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv4]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv7]+[lv8,lv9]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv9]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87d795d189b8c4a13f7acb116c0a68b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumCompletionParserTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test0004()", "signatureAfterChange": " public void test0004()", "diff": ["-\t\t\"case BAR : ;\\n\" +", "-\t\t\"    break ;\\n\" +", "-\t\t\"case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"case BAR :\\n\" +", "+\t\t\"    break;\\n\" +", "+\t\t\"case <CompleteOnName:FOO> :\\n\" +", "-\t\t\"      case BAR : ;\\n\" +", "-\t\t\"          break ;\\n\" +", "-\t\t\"      case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"      case BAR :\\n\" +", "+\t\t\"          break;\\n\" +", "+\t\t\"      case <CompleteOnName:FOO> :\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db109471ae4646f46dd23ba97ebfb49e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \t \tpublic void test066()", "signatureAfterChange": " \t \tpublic void test066()", "diff": ["-\t\t\t\"     1  istore_0\\n\" + ", "-\t\t\t\"     2  iload_0\\n\" + ", "+\t\t\t\"     1  istore_0 [i]\\n\" + ", "+\t\t\t\"     2  iload_0 [i]\\n\" + ", "-\t\t\t\"     8  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + ", "-\t\t\t\"    14  getstatic #33 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    17  iload_0\\n\" + ", "-\t\t\t\"    18  invokevirtual #39 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    14  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    17  iload_0 [i]\\n\" + ", "+\t\t\t\"    18  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8826490da15da8afaff05ecf623e945", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void testParameterizedTypeMultipleArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeMultipleArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] EQUIVALENT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eba43183b21309e5dfb28c939d1825e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public void testTypeRefGenericAll02_WildcardBound() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll02_WildcardBound() throws CoreException", "diff": ["-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends \ufffd|B|\ufffd, ? super C> field = new Test<A, Z<String>, X<String>> () {@65] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super \ufffd|C|\ufffd> field = new Test<A, Z<String>, X<String>> () {@76] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super \ufffd|A|\ufffd, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@303] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends \ufffd|C|\ufffd> foo(Test<? extends A, ? super B, C> param) {@319] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends \ufffd|A|\ufffd, ? super B, C> param) {@341] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super \ufffd|B|\ufffd, C> param) {@352] EXACT_MATCH\"", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends !|B|!, ? super C> field = new Test<A, Z<String>, X<String>> () {@65] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super !|C|!> field = new Test<A, Z<String>, X<String>> () {@76] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super !|A|!, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@303] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends !|C|!> foo(Test<? extends A, ? super B, C> param) {@319] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends !|A|!, ? super B, C> param) {@341] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super !|B|!, C> param) {@352] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec2dfee2189a4188a3f7f6a938877358", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic void test054()", "signatureAfterChange": "  \tpublic void test054()", "diff": ["-\t\t\t\"     1  istore_0\\n\" + ", "-\t\t\t\"     2  iload_0\\n\" + ", "+\t\t\t\"     1  istore_0 [i]\\n\" + ", "+\t\t\t\"     2  iload_0 [i]\\n\" + ", "-\t\t\t\"     8  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + ", "-\t\t\t\"    14  getstatic #33 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    17  iload_0\\n\" + ", "-\t\t\t\"    18  invokevirtual #39 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    14  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    17  iload_0 [i]\\n\" + ", "+\t\t\t\"    18  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed452b846fab07f70578350d13bc486c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testCompatibility4a()", "signatureAfterChange": " \tpublic void testCompatibility4a()", "diff": ["+\t// should mention the annotation on the leaf type.", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @Nullable[]\\' but this expression has type \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @NonNull[]\\' but this expression has type \\'String @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @NonNull[]\\' but this expression has type \\'String @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @Nullable[]\\' but this expression has type \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @NonNull[]\\' but this expression has type \\'String @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @Nullable[]\\' but this expression has type \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c83ae4fa8c379d9f0582d5e3348e4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void test075()", "signatureAfterChange": " \tpublic void test075()", "diff": ["-\t\t\t\"1. ERROR in X5.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic enum X5 implements I {\\r\\n\" + ", "+\t\t\t\"1. ERROR in X5.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic enum X5 implements I {\\n\" + ", "-\t\t\t\"1. ERROR in X5a.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic enum X5a implements I {\\r\\n\" + ", "+\t\t\t\"1. ERROR in X5a.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic enum X5a implements I {\\n\" + ", "-\t\t\t\"1. ERROR in X5c.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tA() { void random() {} };\\r\\n\" + ", "+\t\t\t\"1. ERROR in X5c.java (at line 2)\\n\" + ", "+\t\t\t\"\tA() { void random() {} };\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feb60451d8eb0d4840acece17af5357b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "cbc781423397a753d7a0e29b64da02f9ae05e6ae", "commitAfterChange": "e659592a32935b3480e8554de2e33b0870ea4573", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": "\r public void testDefault07()", "signatureAfterChange": "\r public void testDefault07()", "diff": ["-\t\t\t\"\t\t@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" +\r", "+\t\t\t\"\t\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" +\r", "-\t\t\"\t@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "-\t\t\"\t                                    ^^^^^^^^^^^^^^^^^\\n\" + \r", "-\t\t\"Null type safety (type annotations): The expression of type \\'int\\' needs unchecked conversion to conform to \\'@NonNull Integer\\'\\n\" + \r", "+\t\t\"\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "+\t\t\"\t                                    ^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"Null type safety (type annotations): The expression of type \\'Integer\\' needs unchecked conversion to conform to \\'@NonNull Integer\\'\\n\" + \r", "-\t\t\"\t@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "-\t\t\"\t                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "+\t\t\"\t                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + \r"]}], "num": 29213}
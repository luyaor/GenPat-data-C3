{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "091b2d6122eb8260d696ba07f084559b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "388c44dce9a7d22dfb8b1ed93fa8642d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 132, "signatureBeforeChange": " \t\t \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tboolean exactMatch, \t\tboolean isQualified, \t\tint relevance)", "signatureAfterChange": " \t\t \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tboolean exactMatch, \t\tboolean isQualified, \t\tint relevance)", "diff": ["-\t\tMethodBinding[] methods = currentType.availableMethods();", "+\t\tMethodBinding[] methods = null;", "+\t\tif (currentType instanceof ParameterizedTypeBinding && invocationSite instanceof CompletionOnQualifiedAllocationExpression) {", "+\t\t\tCompletionOnQualifiedAllocationExpression alloc = (CompletionOnQualifiedAllocationExpression) invocationSite;", "+\t\t\tif ((alloc.bits & ASTNode.IsDiamond) != 0) {", "+\t\t\t\t// inference failed. So don't substitute type arguments. Just return the unsubstituted methods", "+\t\t\t\t// and let the user decide what to substitute.", "+\t\t\t\tParameterizedTypeBinding binding = (ParameterizedTypeBinding) currentType;", "+\t\t\t\tReferenceBinding originalGenericType = binding.genericType();", "+\t\t\t\tif (originalGenericType != null)", "+\t\t\t\t\tmethods = originalGenericType.methods();", "+\t\t\t} else {", "+\t\t\t\tmethods = currentType.availableMethods();", "+\t\t\t}", "+\t\t} else {", "+\t\t\tmethods = currentType.availableMethods();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b00f1cef67c2bfa58c496a1766ce3a6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "d4f6fe9230c978161337e143c81b86685406bca7", "commitAfterChange": "b569ead8ca8eb70f2238fa7623595fd9d9d2052b", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\t\t\t\tTypeBinding methodTypeErasure = method.returnType == null ? null : method.returnType.erasure();", "+\t\t\t\tchar[] selector = method.selector;", "-\t\t\t\t\tif (method2 != null && CharOperation.equals(method.selector, method2.selector)) {", "-\t\t\t\t\t\tboolean paramsMatch = complyTo15 && method.returnType.erasure() == method2.returnType.erasure() // see 87956 & 88094", "+\t\t\t\t\tif (method2 != null && CharOperation.equals(selector, method2.selector)) {", "+\t\t\t\t\t\tboolean paramsMatch = complyTo15 && methodTypeErasure == (method2.returnType == null ? null : method2.returnType.erasure()) // see 87956 & 88094", "-\t\t\t\t\t\t\t\t&& (method.selector == TypeConstants.VALUEOF || method.selector == TypeConstants.VALUES);", "+\t\t\t\t\t\t\t\t&& (selector == TypeConstants.VALUEOF || selector == TypeConstants.VALUES);", "-\t\t\t\tif (method.returnType == null && methodDecl == null) { // forget method with invalid return type... was kept to detect possible collisions", "+\t\t\t\tif (methodTypeErasure == null && methodDecl == null) { // forget method with invalid return type... was kept to detect possible collisions"]}], "num": 65454}
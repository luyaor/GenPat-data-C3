{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc512cf3e26c79e4fa6cad5476264979", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d8194fe1bbbdc47bc4fe240b366840f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "cbce30b9f59e4652d4bd8e53671da318f5703bbd", "commitAfterChange": "bb6274460011ae3e14410332fdec5a35eeffca9b", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": " \tprivate void findFieldsAndMethodsFromCastedReceiver( \t\t\tASTNode enclosingNode, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector methodsFound, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope, \t\t\tExpression receiver)", "signatureAfterChange": " \tprivate void findFieldsAndMethodsFromCastedReceiver( \t\t\tASTNode enclosingNode, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector methodsFound, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope, \t\t\tExpression receiver)", "diff": ["-", "-\t\tif (!(ifStatement.condition instanceof InstanceOfExpression)) return;", "-", "-\t\tInstanceOfExpression instanceOfExpression = (InstanceOfExpression) ifStatement.condition;", "-", "-\t\tTypeReference instanceOfType = instanceOfExpression.type;", "-", "-\t\tif (instanceOfType.resolvedType == null) return;", "-", "-\t\tboolean findFromAnotherReceiver = false;", "-", "-\t\tchar[][] receiverName = null;", "-\t\tint receiverStart = -1;", "-\t\tint receiverEnd = -1;", "-", "-\t\tif (receiver instanceof QualifiedNameReference) {", "-\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) receiver;", "-", "-\t\t\treceiverName = qualifiedNameReference.tokens;", "-", "-\t\t\tif (receiverName.length != 1) return;", "-", "-\t\t\treceiverStart = (int) (qualifiedNameReference.sourcePositions[0] >>> 32);", "-\t\t\treceiverEnd = (int) qualifiedNameReference.sourcePositions[qualifiedNameReference.tokens.length - 1] + 1;", "-", "-\t\t\t// if (local instanceof X) local.|", "-\t\t\t// if (field instanceof X) field.|", "-\t\t\tif (instanceOfExpression.expression instanceof SingleNameReference &&", "-\t\t\t\t\t((SingleNameReference)instanceOfExpression.expression).binding == qualifiedBinding &&", "-\t\t\t\t\t(qualifiedBinding instanceof LocalVariableBinding || qualifiedBinding instanceof FieldBinding)) {", "-\t\t\t\tfindFromAnotherReceiver = true;", "-\t\t\t}", "-", "-\t\t\t// if (this.field instanceof X) field.|", "-\t\t\tif (instanceOfExpression.expression instanceof FieldReference) {", "-\t\t\t\tFieldReference fieldReference = (FieldReference)instanceOfExpression.expression;", "-", "-\t\t\t\tif (fieldReference.receiver instanceof ThisReference &&", "-\t\t\t\t\t\tqualifiedBinding instanceof FieldBinding &&", "-\t\t\t\t\t\tfieldReference.binding == qualifiedBinding) {", "-\t\t\t\t\t\t\tfindFromAnotherReceiver = true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else if (receiver instanceof FieldReference) {", "-\t\t\tFieldReference fieldReference1 = (FieldReference) receiver;", "-", "-\t\t\treceiverStart = fieldReference1.sourceStart;", "-\t\t\treceiverEnd = fieldReference1.sourceEnd + 1;", "-", "-\t\t\tif (fieldReference1.receiver instanceof ThisReference) {", "-", "-\t\t\t\treceiverName = new char[][] {THIS, fieldReference1.token};", "-", "-\t\t\t\t// if (field instanceof X) this.field.|", "+\t\twhile (true) {", "+\t\t\tif (!(ifStatement.condition instanceof InstanceOfExpression)) return;", "+\t", "+\t\t\tInstanceOfExpression instanceOfExpression = (InstanceOfExpression) ifStatement.condition;", "+\t", "+\t\t\tTypeReference instanceOfType = instanceOfExpression.type;", "+\t", "+\t\t\tif (instanceOfType.resolvedType == null) return;", "+\t", "+\t\t\tboolean findFromAnotherReceiver = false;", "+\t", "+\t\t\tchar[][] receiverName = null;", "+\t\t\tint receiverStart = -1;", "+\t\t\tint receiverEnd = -1;", "+\t", "+\t\t\tif (receiver instanceof QualifiedNameReference) {", "+\t\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) receiver;", "+\t", "+\t\t\t\treceiverName = qualifiedNameReference.tokens;", "+\t", "+\t\t\t\tif (receiverName.length != 1) return;", "+\t", "+\t\t\t\treceiverStart = (int) (qualifiedNameReference.sourcePositions[0] >>> 32);", "+\t\t\t\treceiverEnd = (int) qualifiedNameReference.sourcePositions[qualifiedNameReference.tokens.length - 1] + 1;", "+\t", "+\t\t\t\t// if (local instanceof X) local.|", "+\t\t\t\t// if (field instanceof X) field.|", "-\t\t\t\t\t\t((SingleNameReference)instanceOfExpression.expression).binding == fieldReference1.binding) {", "+\t\t\t\t\t\t((SingleNameReference)instanceOfExpression.expression).binding == qualifiedBinding &&", "+\t\t\t\t\t\t(qualifiedBinding instanceof LocalVariableBinding || qualifiedBinding instanceof FieldBinding)) {", "-", "-\t\t\t\t// if (this.field instanceof X) this.field.|", "+\t", "+\t\t\t\t// if (this.field instanceof X) field.|", "-\t\t\t\t\tFieldReference fieldReference2 = (FieldReference)instanceOfExpression.expression;", "-", "-\t\t\t\t\tif (fieldReference2.receiver instanceof ThisReference &&", "-\t\t\t\t\t\t\tfieldReference2.binding == fieldReference1.binding) {", "+\t\t\t\t\tFieldReference fieldReference = (FieldReference)instanceOfExpression.expression;", "+\t", "+\t\t\t\t\tif (fieldReference.receiver instanceof ThisReference &&", "+\t\t\t\t\t\t\tqualifiedBinding instanceof FieldBinding &&", "+\t\t\t\t\t\t\tfieldReference.binding == qualifiedBinding) {", "+\t\t\t} else if (receiver instanceof FieldReference) {", "+\t\t\t\tFieldReference fieldReference1 = (FieldReference) receiver;", "+\t", "+\t\t\t\treceiverStart = fieldReference1.sourceStart;", "+\t\t\t\treceiverEnd = fieldReference1.sourceEnd + 1;", "+\t", "+\t\t\t\tif (fieldReference1.receiver instanceof ThisReference) {", "+\t", "+\t\t\t\t\treceiverName = new char[][] {THIS, fieldReference1.token};", "+\t", "+\t\t\t\t\t// if (field instanceof X) this.field.|", "+\t\t\t\t\tif (instanceOfExpression.expression instanceof SingleNameReference &&", "+\t\t\t\t\t\t\t((SingleNameReference)instanceOfExpression.expression).binding == fieldReference1.binding) {", "+\t\t\t\t\t\tfindFromAnotherReceiver = true;", "+\t\t\t\t\t}", "+\t", "+\t\t\t\t\t// if (this.field instanceof X) this.field.|", "+\t\t\t\t\tif (instanceOfExpression.expression instanceof FieldReference) {", "+\t\t\t\t\t\tFieldReference fieldReference2 = (FieldReference)instanceOfExpression.expression;", "+\t", "+\t\t\t\t\t\tif (fieldReference2.receiver instanceof ThisReference &&", "+\t\t\t\t\t\t\t\tfieldReference2.binding == fieldReference1.binding) {", "+\t\t\t\t\t\t\t\t\tfindFromAnotherReceiver = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t}", "-", "-\t\tif (findFromAnotherReceiver) {", "-\t\t\tTypeBinding receiverTypeBinding = instanceOfType.resolvedType;", "-\t\t\tchar[] castedReceiver = null;", "-", "-\t\t\tchar[] castedTypeChars = CharOperation.concatWith(instanceOfType.getTypeName(), '.');", "-\t\t\tif(this.source != null) {", "-\t\t\t\tint memberRefStart = this.startPosition;", "-", "-\t\t\t\tchar[] receiverChars = CharOperation.subarray(this.source, receiverStart, receiverEnd);", "-\t\t\t\tchar[] dotChars = CharOperation.subarray(this.source, receiverEnd, memberRefStart);", "-", "-\t\t\t\tcastedReceiver =", "-\t\t\t\t\tCharOperation.concat(", "+\t", "+\t\t\tif (findFromAnotherReceiver) {", "+\t\t\t\tTypeBinding receiverTypeBinding = instanceOfType.resolvedType;", "+\t\t\t\tchar[] castedReceiver = null;", "+\t", "+\t\t\t\tchar[] castedTypeChars = CharOperation.concatWith(instanceOfType.getTypeName(), '.');", "+\t\t\t\tif(this.source != null) {", "+\t\t\t\t\tint memberRefStart = this.startPosition;", "+\t", "+\t\t\t\t\tchar[] receiverChars = CharOperation.subarray(this.source, receiverStart, receiverEnd);", "+\t\t\t\t\tchar[] dotChars = CharOperation.subarray(this.source, receiverEnd, memberRefStart);", "+\t", "+\t\t\t\t\tcastedReceiver =", "-\t\t\t\t\t\t\t'(',", "-\t\t\t\t\t\t\t\tCharOperation.concat('(', castedTypeChars, ')'),", "-\t\t\t\t\t\t\t\treceiverChars),", "-\t\t\t\t\t\t\t')'),", "-\t\t\t\t\t\tdotChars);", "+\t\t\t\t\t\t\t\t'(',", "+\t\t\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\t\t\tCharOperation.concat('(', castedTypeChars, ')'),", "+\t\t\t\t\t\t\t\t\treceiverChars),", "+\t\t\t\t\t\t\t\t')'),", "+\t\t\t\t\t\t\tdotChars);", "+\t\t\t\t} else {", "+\t\t\t\t\tcastedReceiver =", "+\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\t\t'(',", "+\t\t\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\t\t\tCharOperation.concat('(', castedTypeChars, ')'),", "+\t\t\t\t\t\t\t\t\tCharOperation.concatWith(receiverName, '.')),", "+\t\t\t\t\t\t\t\t')'),", "+\t\t\t\t\t\t\tDOT);", "+\t\t\t\t}", "+\t", "+\t\t\t\tif (castedReceiver == null) return;", "+\t", "+\t\t\t\tint oldStartPosition = this.startPosition;", "+\t\t\t\tthis.startPosition = receiverStart;", "+\t", "+\t\t\t\tfindFieldsAndMethods(", "+\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\treceiverTypeBinding,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tcastedReceiver,", "+\t\t\t\t\t\treceiverStart,", "+\t\t\t\t\t\treceiverEnd);", "+\t", "+\t\t\t\tthis.startPosition = oldStartPosition;", "+\t\t\t}", "+\t\t\t// traverse the enclosing node to find the instanceof expression corresponding", "+\t\t\t// to the completion node (if any)", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=304006", "+\t\t\tif (ifStatement.thenStatement instanceof IfStatement) {", "+\t\t\t\tifStatement = (IfStatement) ifStatement.thenStatement;", "-\t\t\t\tcastedReceiver =", "-\t\t\t\t\tCharOperation.concat(", "-\t\t\t\t\t\tCharOperation.concat(", "-\t\t\t\t\t\t\t'(',", "-\t\t\t\t\t\t\tCharOperation.concat(", "-\t\t\t\t\t\t\t\tCharOperation.concat('(', castedTypeChars, ')'),", "-\t\t\t\t\t\t\t\tCharOperation.concatWith(receiverName, '.')),", "-\t\t\t\t\t\t\t')'),", "-\t\t\t\t\t\tDOT);", "+\t\t\t\tbreak;", "-", "-\t\t\tif (castedReceiver == null) return;", "-", "-\t\t\tint oldStartPosition = this.startPosition;", "-\t\t\tthis.startPosition = receiverStart;", "-", "-\t\t\tfindFieldsAndMethods(", "-\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\treceiverTypeBinding,", "-\t\t\t\t\tscope,", "-\t\t\t\t\tfieldsFound,", "-\t\t\t\t\tmethodsFound,", "-\t\t\t\t\tinvocationSite,", "-\t\t\t\t\tinvocationScope,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tnull,", "-\t\t\t\t\tnull,", "-\t\t\t\t\tnull,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\treceiverStart,", "-\t\t\t\t\treceiverEnd);", "-", "-\t\t\tthis.startPosition = oldStartPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3da2e93f2dfb343a622669aa7b75607", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "dc897dd3e4818ca2b15bd3d143de606b0ce0335f", "commitAfterChange": "8536e94c328f058d5f377b8328af7061c65f8af1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tIBinding resolveName(Name name)", "signatureAfterChange": " \tIBinding resolveName(Name name)", "diff": ["-\t\tif (name instanceof QualifiedName) {", "-\t\t\treturn this.internalResolveNameForQualifiedName(name);", "-\t\t}", "-\t\tif (name instanceof SimpleName) {", "-\t\t\treturn this.internalResolveNameForSimpleName(name);", "+\t\tAstNode node = (AstNode) this.newAstToOldAst.get(name);", "+\t\tint index = name.index;", "+\t\tif (node instanceof QualifiedNameReference) {", "+\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;", "+\t\t\tint qualifiedNameLength = qualifiedNameReference.tokens.length;", "+\t\t\tint indexInQualifiedName = qualifiedNameLength - index; // one-based", "+\t\t\tint indexOfFirstFieldBinding = qualifiedNameReference.indexOfFirstFieldBinding; // one-based", "+\t\t\tint otherBindingLength = qualifiedNameLength - indexOfFirstFieldBinding;", "+\t\t\tif (indexInQualifiedName < indexOfFirstFieldBinding) {", "+\t\t\t\t// a extra lookup is required", "+\t\t\t\tBlockScope internalScope = (BlockScope) this.astNodesToBlockScope.get(name);", "+\t\t\t\tBinding binding = null;", "+\t\t\t\tif (internalScope == null) {", "+\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t} else {", "+\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t}", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "+\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn null;", "+\t\t\t} else if (indexInQualifiedName == indexOfFirstFieldBinding) {", "+\t\t\t\tif (qualifiedNameReference.isTypeReference()) {", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);", "+\t\t\t\t} else {", "+\t\t\t\t\tBinding binding = qualifiedNameReference.binding;", "+\t\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t/* This is the case for a name which is part of a qualified name that", "+\t\t\t\t * cannot be resolved. See PR 13063.", "+\t\t\t\t */", "+\t\t\t\tif (qualifiedNameReference.otherBindings == null || (otherBindingLength - index - 1) < 0) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (node instanceof QualifiedTypeReference) {", "+\t\t\tQualifiedTypeReference qualifiedTypeReference = (QualifiedTypeReference) node;", "+\t\t\tif (qualifiedTypeReference.binding == null || !qualifiedTypeReference.binding.isValidBinding()) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tif (index == 0) {", "+\t\t\t\treturn this.getTypeBinding(qualifiedTypeReference.binding.leafComponentType());", "+\t\t\t} else {", "+\t\t\t\tint qualifiedTypeLength = qualifiedTypeReference.tokens.length;", "+\t\t\t\tint indexInQualifiedName = qualifiedTypeLength - index; // one-based", "+\t\t\t\tif (indexInQualifiedName >= 0) {", "+\t\t\t\t\tBlockScope internalScope = (BlockScope) this.astNodesToBlockScope.get(name);", "+\t\t\t\t\tBinding binding = null;", "+\t\t\t\t\tif (internalScope == null) {", "+\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t}", "+\t\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "+\t\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (node instanceof ImportReference) {", "+\t\t\tImportReference importReference = (ImportReference) node;", "+\t\t\tint importReferenceLength = importReference.tokens.length;", "+\t\t\tint indexInImportReference = importReferenceLength - index; // one-based", "+\t\t\tif (indexInImportReference >= 0) {", "+\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, indexInImportReference));", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "+\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (node instanceof CompilationUnitDeclaration) {", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = (CompilationUnitDeclaration) node;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\t\tif (types == null || types.length == 0) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration type = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) types[0];", "+\t\t\tif (type != null) {", "+\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(type.binding);", "+\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\treturn typeBinding.getPackage();", "+\t\t\t}", "+\t\t} else if (node instanceof AbstractMethodDeclaration) {", "+\t\t\tAbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) node;", "+\t\t\tif (methodDeclaration != null) {", "+\t\t\t\tIMethodBinding methodBinding = this.getMethodBinding(methodDeclaration.binding);", "+\t\t\t\tif (methodBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tthis.bindingsToAstNodes.put(methodBinding, node);", "+\t\t\t\treturn methodBinding;", "+\t\t\t}", "+\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) node;", "+\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeDeclaration.binding);", "+\t\t\tif (typeBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tthis.bindingsToAstNodes.put(typeBinding, node);", "+\t\t\treturn typeBinding;", "+\t\t} if (node instanceof SingleNameReference) {", "+\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;", "+\t\t\tif (singleNameReference.isTypeReference()) {", "+\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);", "+\t\t\t} else {", "+\t\t\t\t// this is a variable or a field", "+\t\t\t\tBinding binding = singleNameReference.binding;", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (node instanceof QualifiedSuperReference) {", "+\t\t\tQualifiedSuperReference qualifiedSuperReference = (QualifiedSuperReference) node;", "+\t\t\treturn this.getTypeBinding(qualifiedSuperReference.qualification.binding);", "+\t\t} else if (node instanceof LocalDeclaration) {", "+\t\t\treturn this.getVariableBinding(((LocalDeclaration)node).binding);", "+\t\t} else if (node instanceof FieldReference) {", "+\t\t\treturn getVariableBinding(((FieldReference) node).binding);", "+\t\t} else if (node instanceof SingleTypeReference) {", "+\t\t\tSingleTypeReference singleTypeReference = (SingleTypeReference) node;", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding binding = singleTypeReference.binding;", "+\t\t\tif (binding == null || !binding.isValidBinding()) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\treturn this.getTypeBinding(binding.leafComponentType());", "+\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\treturn this.getVariableBinding(fieldDeclaration.binding);", "+\t\t} else if (node instanceof MessageSend) {", "+\t\t\tMessageSend messageSend = (MessageSend) node;", "+\t\t\treturn getMethodBinding(messageSend.binding);"]}], "num": 27664}
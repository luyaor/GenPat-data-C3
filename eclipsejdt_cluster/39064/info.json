{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5ae4886ea2a34fd112ff8eb501e9be9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "568a1fee62f987e7e5fa8393218a1d40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprivate void setTokenWrapPolicy(int index, WrapPolicy policy, boolean wrapPreceedingComments)", "signatureAfterChange": "  \tprivate void setTokenWrapPolicy(int index, WrapPolicy policy, boolean wrapPreceedingComments)", "diff": ["-\t\tif (this.options.join_wrapped_lines", "-\t\t\t\t&& (token.tokenType == TokenNameCOMMENT_BLOCK || token.tokenType == TokenNameCOMMENT_JAVADOC)) {", "+", "+\t\tif (this.options.join_wrapped_lines && token.tokenType == TokenNameCOMMENT_BLOCK) {", "-\t\t}", "-", "-\t\t// extend this policy to a token that is in the next line because of comments", "-\t\tfor (int i = index + 1; i < this.tm.size(); i++) {", "-\t\t\tToken next = this.tm.get(i);", "-\t\t\tWrapPolicy policy2 = next.getWrapPolicy();", "-\t\t\tif (policy2 != null && policy2.isForced && policy2.extraIndent == 0) {", "-\t\t\t\tnext.setWrapPolicy(policy);", "-\t\t\t} else if (next.tokenType != TokenNameCOMMENT_LINE && next.tokenType != TokenNameCOMMENT_BLOCK) {", "-\t\t\t\tbreak;", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9949d81166c2f346d9e1a9a88de9ad3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "bb7b9521196186c5be108c1f350a453c12233137", "commitAfterChange": "871cac4ba4cecfc6322ce0af5777177652a514a9", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(ArrayInitializer node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(ArrayInitializer node)", "diff": ["+\t\t}", "+\t\tif (!this.options.join_wrapped_lines", "+\t\t\t\t&& !this.options.insert_new_line_before_closing_brace_in_array_initializer) {", "+\t\t\t// if there is a line break before the closing brace, formatter should treat it as a valid wrap to preserve", "+\t\t\tint closingBraceIndex = this.tm.lastIndexIn(node, TokenNameRBRACE);", "+\t\t\tToken closingBrace = this.tm.get(closingBraceIndex);", "+\t\t\tif (this.tm.countLineBreaksBetween(this.tm.get(closingBraceIndex - 1), closingBrace) == 1) {", "+\t\t\t\tint openingBraceIndex = this.tm.firstIndexIn(node, TokenNameLBRACE);", "+\t\t\t\tclosingBrace.setWrapPolicy(", "+\t\t\t\t\t\tnew WrapPolicy(0, openingBraceIndex, this.currentDepth, 1, true, false, -1, false));", "+\t\t\t}"]}], "num": 39064}
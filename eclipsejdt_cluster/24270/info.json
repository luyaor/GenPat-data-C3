{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f30d7ef7119fbe97e24fc39b0ccfbe6f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d0029067c3f71d0127981f212ab78bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "142b4cee7fc63efbc8075023107573a5b585caaa", "commitAfterChange": "403e7e464831535d0b419fdd79236883baa68267", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r public boolean build(SimpleLookupTable deltas)", "signatureAfterChange": "\r \r public boolean build(SimpleLookupTable deltas)", "diff": ["-\t\t\t\tthis.previousLocations = null; // cannot optimize recompile case when a secondary type is deleted\r", "+\t\t\t\tif (previousLocations != null && previousLocations.size() > 1)\r", "+\t\t\t\t\tthis.previousLocations = null; // cannot optimize recompile case when a secondary type is deleted\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199da5457f1a638bc4ffad56099824d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "fa73f06745e7e6c8e84d2ccbc5e6982c2601c71e", "commitAfterChange": "abe804713571cdfdd296f9f85293e127191ccc0a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void select( \t\tICompilationUnit sourceUnit, \t\tint selectionSourceStart, \t\tint selectionSourceEnd)", "signatureAfterChange": " \tpublic void select( \t\tICompilationUnit sourceUnit, \t\tint selectionSourceStart, \t\tint selectionSourceEnd)", "diff": ["-\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "-\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "-\t\t\t\t\t\t\t\t\tselectMemberTypeFromImport(parsedUnit, lastToken, ref, importReference.isStatic());", "-\t\t\t\t\t\t\t\t\tif(importReference.isStatic()) {", "-\t\t\t\t\t\t\t\t\t\tselectStaticFieldFromStaticImport(parsedUnit, lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\tselectStaticMethodFromStaticImport(parsedUnit, lastToken, ref);", "+\t\t\t\t\t\t\t\tif(qualifierTokens != null && qualifierTokens.length > 0) {", "+\t\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "+\t\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "+\t\t\t\t\t\t\t\t\t\tselectMemberTypeFromImport(parsedUnit, lastToken, ref, importReference.isStatic());", "+\t\t\t\t\t\t\t\t\t\tif(importReference.isStatic()) {", "+\t\t\t\t\t\t\t\t\t\t\tselectStaticFieldFromStaticImport(parsedUnit, lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t\tselectStaticMethodFromStaticImport(parsedUnit, lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34018832261a3630dbb1a762d17d7468", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "signatureAfterChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "diff": ["-\t\t\t\t\t\t\tcontextAccepted = true;", "-\t\t\t\t\t\t\tthis.requestor.acceptContext(new CompletionContext());", "-\t\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);", "-\t\t\t\t\t\t\tif(this.noProposal && this.problem != null) {", "-\t\t\t\t\t\t\t\tthis.requestor.completionFailure(this.problem);", "-\t\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\t\tthis.printDebug(this.problem);", "+\t\t\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\t\t\t\tif ((this.unitScope = parsedUnit.scope) != null) {", "+\t\t\t\t\t\t\t\tcontextAccepted = true;", "+\t\t\t\t\t\t\t\tthis.requestor.acceptContext(new CompletionContext());", "+\t\t\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);", "+\t\t\t\t\t\t\t\tif(this.noProposal && this.problem != null) {", "+\t\t\t\t\t\t\t\t\tthis.requestor.completionFailure(this.problem);", "+\t\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\t\tthis.printDebug(this.problem);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif(importReference.isStatic()) {", "-\t\t\t\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "-\t\t\t\t\t\t\t\tif ((this.unitScope = parsedUnit.scope) != null) {", "+\t\t\t\t\t\t\t\tif(importReference.isStatic()) {", "-\t\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "-\t\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "-\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "+\t\t\t\t\t\t\t\t\tif(qualifierTokens != null && qualifierTokens.length != 0) {", "+\t\t\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "+\t\t\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "+\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcontextAccepted = true;", "-\t\t\t\t\t\t\tcomplete(e.astNode, this.parser.assistNodeParent, e.qualifiedBinding, e.scope, e.insideTypeAnnotation);", "+\t\t\t\t\t\t\tcontextAccepted = complete(e.astNode, this.parser.assistNodeParent, e.qualifiedBinding, e.scope, e.insideTypeAnnotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36dafdf050b8356a47b874c8c2f4a4e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "beb3420e6344dd8c91012f84d653468d212cc81a", "commitAfterChange": "55b6058f41a3ac1cbaaf225684b08a0a1c9e6c30", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " \tprotected void removeLibrary(IJavaProject javaProject, String jarName, String sourceZipName) throws CoreException, IOException", "signatureAfterChange": " \tprotected void removeLibrary(IJavaProject javaProject, String jarName, String sourceZipName) throws CoreException, IOException", "diff": ["-\t\tproject.getFile(sourceZipName).delete(false, null);", "+\t\tif (sourceZipName != null && sourceZipName.length() != 0) {", "+\t\t\tproject.getFile(sourceZipName).delete(false, null);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "925b4352b359679e43777c75a56190cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "4acdc3f9aad85a6fe619f404dbbc54bcddf3ce1f", "commitAfterChange": "c4ab4e0b73940ce1ec2be4b6701e6bacd26266b6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public IJavaElement getWorkingCopy(IProgressMonitor monitor, IBufferFactory factory) throws JavaModelException", "signatureAfterChange": "\r public IJavaElement getWorkingCopy(IProgressMonitor monitor, IBufferFactory factory) throws JavaModelException", "diff": ["-\tbuffer.setContents(contents);\r", "-\r", "+\tif (buffer != null && buffer.getCharacters() == null){\r", "+\t\tbuffer.setContents(contents);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7bf6f376fa58ab6fa185e700c2c0ddc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "1c4db5a4cb89cc4b9085f6d427eba6f7566d5b74", "commitAfterChange": "9de11e1c2a41a21613174b6ab91cab4369b64686", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "signatureAfterChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "diff": ["-\t\t\t\tcase TerminalTokens.TokenNameboolean :\t", "+\t\t\t\tcase TerminalTokens.TokenNameboolean :", "+\t\t\t\t\t", "+\t\t\t\t\tif (internalPrefix != null && internalPrefix.length > 0) return;", "+\t\t\t\t\t"]}], "num": 24270}
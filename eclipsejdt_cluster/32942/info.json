{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef2db8312999650ff36b062a1565e603", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745157fb4555e73afc512d5bf75759f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "28a0f94188bd26e1014d346f5919c1c6d87c7904", "commitAfterChange": "8a2a28b44267beff0fdfbe7d6582425d224ea02d", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": " \tpublic boolean visit(MethodInvocation node)", "signatureAfterChange": " \tpublic boolean visit(LambdaExpression node)", "diff": ["+\t */", "+\tpublic boolean visit(LambdaExpression node) {", "+\t\tif (!hasChildrenChanges(node)) {", "+\t\t\treturn doVisitUnchangedChildren(node);", "+\t\t}", "+\t\tBoolean newValue = (Boolean) getNewValue(node, LambdaExpression.PARENTHESES_PROPERTY);", "+\t\tboolean hasParentheses = newValue.equals(Boolean.TRUE);", "+\t\tif (!hasParentheses) {// Parentheses can be absent if and only if there is one and only one type elided parameter.", "+\t\t\tList parameters = (List) getNewValue(node, LambdaExpression.PARAMETERS_PROPERTY);", "+\t\t\thasParentheses = !(parameters.size() == 1 && parameters.get(0) instanceof VariableDeclarationFragment);", "+\t\t}", "+", "+\t\tboolean deleteParentheses = false;", "+\t\tboolean insertParentheses = false;", "+\t\tTextEditGroup editGroup = null;", "+", "+\t\tboolean oldHasParentheses = getOriginalValue(node, LambdaExpression.PARENTHESES_PROPERTY).equals(Boolean.TRUE);", "+\t\tRewriteEvent event = getEvent(node, LambdaExpression.PARENTHESES_PROPERTY);", "+\t\tif (event != null) {", "+\t\t\teditGroup = getEditGroup(event);", "+\t\t\tif (event.getChangeKind() == RewriteEvent.REPLACED) {", "+\t\t\t\tif (newValue != Boolean.FALSE) {", "+\t\t\t\t\tinsertParentheses = true;", "+\t\t\t\t} else {// apply the stricter check for parentheses deletion", "+\t\t\t\t\tdeleteParentheses = !hasParentheses;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (!oldHasParentheses && hasParentheses) {// parameter property changed to effect parentheses insertion", "+\t\t\tif ((event = getEvent(node, LambdaExpression.PARAMETERS_PROPERTY)) != null) {// a null check though event cannot be null here", "+\t\t\t\teditGroup = getEditGroup(event);", "+\t\t\t\tinsertParentheses = true;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tint pos = node.getStartPosition();", "+\t\tif (insertParentheses) {", "+\t\t\tdoTextInsert(pos, \"(\", editGroup); //$NON-NLS-1$", "+\t\t} else if (deleteParentheses) {", "+\t\t\ttry {", "+\t\t\t\tint lparensEnd = getScanner().getTokenEndOffset(TerminalTokens.TokenNameLPAREN, pos);", "+\t\t\t\tdoTextRemove(pos, lparensEnd - pos, editGroup);", "+\t\t\t\tpos = lparensEnd;", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\thandleException(e);", "+\t\t\t}", "+\t\t}", "+", "+\t\tif (isChanged(node, LambdaExpression.PARAMETERS_PROPERTY)) {", "+\t\t\ttry {", "+\t\t\t\tpos = oldHasParentheses ? getScanner().getTokenEndOffset(TerminalTokens.TokenNameLPAREN, pos) : pos;", "+\t\t\t\tpos = rewriteNodeList(node, LambdaExpression.PARAMETERS_PROPERTY, pos, Util.EMPTY_STRING, \", \"); //$NON-NLS-1$", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\thandleException(e);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tpos = doVisit(node, LambdaExpression.PARAMETERS_PROPERTY, pos);", "+\t\t}", "+", "+\t\tif (insertParentheses) {", "+\t\t\tdoTextInsert(pos, \")\", editGroup); //$NON-NLS-1$", "+\t\t} else if (deleteParentheses) {", "+\t\t\ttry {", "+\t\t\t\tdoTextRemove(pos, getScanner().getTokenEndOffset(TerminalTokens.TokenNameRPAREN, pos) - pos, editGroup);", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\thandleException(e);", "+\t\t\t}", "+\t\t}", "+\t\trewriteRequiredNode(node, LambdaExpression.BODY_PROPERTY);", "+", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76203819a5c846d49ff677b680a3356a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "3aeda49982d529a7b3b4520a8ddfc77c62e6f6ba", "commitAfterChange": "756bb6bed26516f6a7f37d505e2052383d6cc457", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tMemberValuePair valueAttribute = null; // remember the first 'value' pair", "+\t\t\t\t\tif (valueAttribute == null && CharOperation.equals(memberName, TypeConstants.VALUE)) {", "+\t\t\t\t\t\tvalueAttribute = valuePair;", "+\t\t\t\t\t}", "+\t\t// recognize standard annotations ?", "+\t\tlong tagBits = detectStandardAnnotation(scope, annotationType, valueAttribute);", "+\t\tif (this.recipient != null) {", "+\t\t\tif (tagBits != 0) {", "+\t\t\t\t// tag bits onto recipient", "+\t\t\t\tswitch (this.recipient.kind()) {", "+\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\t// TODO (philippe) need support for package annotations", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t((ReferenceBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\t((MethodBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\t((FieldBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\t((LocalVariableBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t", "+\t\t\t}", "+\t\t\t// check (meta)target compatibility", "+\t\t\tcheckTargetCompatibility: {", "+\t\t\t\tlong metaTagBits = annotationType.tagBits;", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) // does not specify any target restriction", "+\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t", "+\t\t\t\tswitch (recipient.kind()) {", "+\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\t\tif (((ReferenceBinding)this.recipient).isAnnotationType()) {", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForAnnotationType) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForType) != 0) ", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\tif (((MethodBinding)this.recipient).isConstructor()) {", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForConstructor) != 0)", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForMethod) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\tif ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t", "+\t\t\t\tscope.problemReporter().incompatibleTargetForAnnotation(this);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86405a827adbca3f73b24cdb38808c11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "2d75cef028da9a8fe8c9804711f5a598b2019a3c", "commitAfterChange": "e5a5a828b036dbe2b7c3417e8b56969576e779d4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "signatureAfterChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "diff": ["-\t\t/* TEMPORARY DISABLED\r", "+\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "+\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\t\t\t\t\troot = (IPackageFragmentRoot)this.currentElement;\r", "+\t\t\t\t\t\t\tIPath rootPath = root.getPath();\r", "+\t\t\t\t\t\t\tIPath pkgPath = path.removeLastSegments(1);\r", "+\t\t\t\t\t\t\tString pkgName = Util.packageName(pkgPath.removeFirstSegments(rootPath.segmentCount()));\r", "+\t\t\t\t\t\t\tif (pkgName != null) {\r", "+\t\t\t\t\t\t\t\tpkgFragment = root.getPackageFragment(pkgName);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t// create compilation unit handle \r", "-\t\t\t\t\t\tString fileName = path.lastSegment();\r", "-\t\t\t\t\t\tif (!Util.isValidCompilationUnitName(fileName)) return null;\r", "-\t\t\t\t\t\telement = pkgFragment.getCompilationUnit(fileName);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "-\t\t\t\t\t// find the element that encloses the resource\r", "-\t\t\t\t\tthis.popUntilPrefixOf(path);\r", "-\t\t\t\t\tif (this.currentElement == null) break;\r", "-\t\t\t\t\t\r", "-\t\t\t\t\t// find the package\r", "-\t\t\t\t\tpkgFragment = null;\r", "-\t\t\t\t\tswitch (this.currentElement.getElementType()) {\r", "-\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "-\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement;\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "-\t\t\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "-\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement.getParent();\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (pkgFragment != null) {\r", "-\t\t\t\t\t\t// create class file handle\r", "-\t\t\t\t\t\tString fileName = path.lastSegment();\r", "-\t\t\t\t\t\tif (!Util.isValidClassFileName(fileName)) return null;\r", "-\t\t\t\t\t\telement = pkgFragment.getClassFile(fileName);\r", "+\t\t\t\t\t\tif (elementType == IJavaElement.COMPILATION_UNIT) {\r", "+\t\t\t\t\t\t\t// create compilation unit handle \r", "+\t\t\t\t\t\t\tString fileName = path.lastSegment();\r", "+\t\t\t\t\t\t\tif (!Util.isValidCompilationUnitName(fileName)) return null;\r", "+\t\t\t\t\t\t\telement = pkgFragment.getCompilationUnit(fileName);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// create class file handle\r", "+\t\t\t\t\t\t\tString fileName = path.lastSegment();\r", "+\t\t\t\t\t\t\tif (!Util.isValidClassFileName(fileName)) return null;\r", "+\t\t\t\t\t\t\telement = pkgFragment.getClassFile(fileName);\r", "+\t\t\t\t\t\t}\r", "-\t\t*/\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "941eab654f132ffbf9080b7f19502658", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "e324bd72a2ecbc6e1bdd32341437a15a42c9f6a0", "commitAfterChange": "2a60eadf1435696edd56c36ce2da6024b8c6f1cd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\t\t}", "+\t\t}", "+\t\tfinal Object commentClearBlankLinesOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_CLEAR_BLANK_LINES);", "+\t\tif (commentClearBlankLinesOption != null) {", "+\t\t\tthis.comment_clear_blank_lines = DefaultCodeFormatterConstants.TRUE.equals(commentClearBlankLinesOption);", "+\t\t}", "+\t\tfinal Object commentFormatOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT);", "+\t\tif (commentFormatOption != null) {", "+\t\t\tthis.comment_format = DefaultCodeFormatterConstants.TRUE.equals(commentFormatOption);", "+\t\t}", "+\t\tfinal Object commentFormatHeaderOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_HEADER);", "+\t\tif (commentFormatHeaderOption != null) {", "+\t\t\tthis.comment_format_header = DefaultCodeFormatterConstants.TRUE.equals(commentFormatHeaderOption);", "+\t\t}", "+\t\tfinal Object commentFormatHtmlOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_HTML);", "+\t\tif (commentFormatHtmlOption != null) {", "+\t\t\tthis.comment_format_html = DefaultCodeFormatterConstants.TRUE.equals(commentFormatHtmlOption);", "+\t\t}", "+\t\tfinal Object commentFormatSourceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_SOURCE);", "+\t\tif (commentFormatSourceOption != null) {", "+\t\t\tthis.comment_format_source = DefaultCodeFormatterConstants.TRUE.equals(commentFormatSourceOption);", "+\t\t}", "+\t\tfinal Object commentIndentParameterDescriptionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_INDENT_PARAMETER_DESCRIPTION);", "+\t\tif (commentIndentParameterDescriptionOption != null) {", "+\t\t\tthis.comment_indent_parameter_description = DefaultCodeFormatterConstants.TRUE.equals(commentIndentParameterDescriptionOption);", "+\t\t}", "+\t\tfinal Object commentIndentRootTagsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_INDENT_ROOT_TAGS);", "+\t\tif (commentIndentRootTagsOption != null) {", "+\t\t\tthis.comment_indent_root_tags = DefaultCodeFormatterConstants.TRUE.equals(commentIndentRootTagsOption);", "+\t\t}", "+\t\tfinal Object commentInsertEmptyLineBeforeRootTagsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_INSERT_EMPTY_LINE_BEFORE_ROOT_TAGS);", "+\t\tif (commentInsertEmptyLineBeforeRootTagsOption != null) {", "+\t\t\tthis.comment_insert_empty_line_before_root_tags = JavaCore.INSERT.equals(commentInsertEmptyLineBeforeRootTagsOption);", "+\t\t}", "+\t\tfinal Object commentInsertNewLineForParameterOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_INSERT_NEW_LINE_FOR_PARAMETER);", "+\t\tif (commentInsertNewLineForParameterOption != null) {", "+\t\t\tthis.comment_insert_new_line_for_parameter = JavaCore.INSERT.equals(commentInsertNewLineForParameterOption);", "+\t\t}", "+\t\tfinal Object commentLineLengthOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_LINE_LENGTH);", "+\t\tif (commentLineLengthOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.comment_line_length = Integer.parseInt((String) commentLineLengthOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.comment_line_length = 80;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.comment_line_length = 80;"]}], "num": 32942}
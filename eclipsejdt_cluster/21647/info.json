{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be8857cb79de39534343d89e2f80928a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334e4903dd74ac8fd38318aa95fe8779", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "2c9facefb897e48eaff09e455771cc984ed9f6da", "commitAfterChange": "5560d8f0ae0785fb2b5baeb853846f71919562ba", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r protected void outputClassFiles(CompilationResult unitResult)", "signatureAfterChange": "\r \r protected void outputClassFiles(CompilationResult unitResult)", "diff": ["-\t\tif (destinationPath != null) {\r", "+\t\tif (!this.generatePackagesStructure) {\r", "+\t\t\twhile (classFiles.hasMoreElements()) {\r", "+\t\t\t\tthis.destinationPath = extractDestinationPathFromSourceFile(unitResult);\r", "+\t\t\t\t// retrieve the key and the corresponding classfile\r", "+\t\t\t\tClassFile classFile = (ClassFile) classFiles.nextElement();\r", "+\t\t\t\tchar[] filename = classFile.fileName();\r", "+\t\t\t\tint length = filename.length;\r", "+\t\t\t\tchar[] relativeName = new char[length + 6];\r", "+\t\t\t\tSystem.arraycopy(filename, 0, relativeName, 0, length);\r", "+\t\t\t\tSystem.arraycopy(CLASS_FILE_EXTENSION, 0, relativeName, length, 6);\r", "+\t\t\t\tCharOperation.replace(relativeName, '/', File.separatorChar);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tClassFile.writeToDisk(\r", "+\t\t\t\t\t\tgeneratePackagesStructure,\r", "+\t\t\t\t\t\tdestinationPath,\r", "+\t\t\t\t\t\tnew String(relativeName),\r", "+\t\t\t\t\t\tclassFile.getBytes());\r", "+\t\t\t\t} catch (IOException e) {\r", "+\t\t\t\t\tString fileName = destinationPath + new String(relativeName);\r", "+\t\t\t\t\te.printStackTrace();\r", "+\t\t\t\t\tSystem.out.println(Main.bind(\"output.noClassFileCreated\",fileName)); //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\texportedClassFilesCounter++;\r", "+\t\t\t}\r", "+\t\t} else if (destinationPath != null) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "533b98b21f8276b409608da851c8cd42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NamedMember.java", "commitBeforeChange": "1252d6bab1f9d9bcd087d91685fabf29808e5435", "commitAfterChange": "fe80fb2f9320067d19b473914ec4b9e11a8d423c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprotected String getKey(IMethod method, boolean forceOpen) throws JavaModelException", "signatureAfterChange": " \t \tprotected String getKey(IMethod method, boolean forceOpen) throws JavaModelException", "diff": ["+\t\t// type parameters", "+\t\tif (forceOpen) {", "+\t\t\tITypeParameter[] typeParameters = method.getTypeParameters();", "+\t\t\tint length = typeParameters.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tkey.append('<');", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tITypeParameter typeParameter = typeParameters[i];", "+\t\t\t\t\tString[] bounds = typeParameter.getBounds();", "+\t\t\t\t\tint boundsLength = bounds.length;", "+\t\t\t\t\tchar[][] boundSignatures = new char[boundsLength][];", "+\t\t\t\t\tfor (int j = 0; j < boundsLength; j++) {", "+\t\t\t\t\t\tboundSignatures[j] = Signature.createCharArrayTypeSignature(bounds[j].toCharArray(), method.isBinary());", "+\t\t\t\t\t\tCharOperation.replace(boundSignatures[j], '.', '/');", "+\t\t\t\t\t}", "+\t\t\t\t\tchar[] sig = Signature.createTypeParameterSignature(typeParameter.getElementName().toCharArray(), boundSignatures);", "+\t\t\t\t\tkey.append(sig);", "+\t\t\t\t}", "+\t\t\t\tkey.append('>');", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "702ff12a1fe17b5deee2ae5d49106450", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "d95449cf37bb2e33a7804a35ceffb191c7190444", "commitAfterChange": "131cd393eb4d930b10c57f065ce4f8717582ea2a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public JavaSearchNameEnvironment(IJavaProject javaProject)", "signatureAfterChange": " \t public JavaSearchNameEnvironment(IJavaProject javaProject, org.eclipse.jdt.core.ICompilationUnit[] copies)", "diff": ["-public JavaSearchNameEnvironment(IJavaProject javaProject) {", "+\t", "+public JavaSearchNameEnvironment(IJavaProject javaProject, org.eclipse.jdt.core.ICompilationUnit[] copies) {", "+\ttry {", "+\t\tint length = copies == null ? 0 : copies.length;", "+\t\tthis.workingCopies = new HashMap(length);", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = copies[i];", "+\t\t\tIPackageDeclaration[] pkgs = workingCopy.getPackageDeclarations();", "+\t\t\tString pkg = pkgs.length > 0 ? pkgs[0].getElementName() : \"\"; //$NON-NLS-1$", "+\t\t\tString cuName = workingCopy.getElementName();", "+\t\t\tString mainTypeName = cuName.substring(0, cuName.length() - SUFFIX_JAVA.length);", "+\t\t\tString qualifiedMainTypeName = pkg.length() == 0 ? mainTypeName : pkg.replace('.', '/') + '/' + mainTypeName;", "+\t\t\tthis.workingCopies.put(qualifiedMainTypeName, workingCopy);", "+\t\t}", "+\t} catch (JavaModelException e) {", "+\t\t// working copy doesn't exist: cannot happen", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0287affc8ea6017dfa0a19dc840751f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r protected void finishedWith(String location, CompilationResult result, char[][] additionalTypeNames) throws CoreException", "signatureAfterChange": "\r \r protected void finishedWith(String sourceLocation, CompilationResult result, char[] mainTypeName, ArrayList definedTypeNames, ArrayList duplicateTypeNames) throws CoreException", "diff": ["-protected void finishedWith(String location, CompilationResult result, char[][] additionalTypeNames) throws CoreException {\r", "-\tnewState.record(location, result.qualifiedReferences, result.simpleNameReferences, additionalTypeNames);\r", "+\r", "+protected void finishedWith(String sourceLocation, CompilationResult result, char[] mainTypeName, ArrayList definedTypeNames, ArrayList duplicateTypeNames) throws CoreException {\r", "+\tif (duplicateTypeNames == null) {\r", "+\t\tnewState.record(sourceLocation, result.qualifiedReferences, result.simpleNameReferences, mainTypeName, definedTypeNames);\r", "+\t\treturn;\r", "+\t}\r", "+\r", "+\tchar[][][] qualifiedRefs = result.qualifiedReferences;\r", "+\tchar[][] simpleRefs = result.simpleNameReferences;\r", "+\t// for each duplicate type p1.p2.A, add the type name A (package was already added)\r", "+\tnext : for (int i = 0, dLength = duplicateTypeNames.size(); i < dLength; i++) {\r", "+\t\tchar[][] compoundName = (char[][]) duplicateTypeNames.get(i);\r", "+\t\tchar[] typeName = compoundName[compoundName.length - 1];\r", "+\t\tint sLength = simpleRefs.length;\r", "+\t\tfor (int j = 0; j < sLength; j++)\r", "+\t\t\tif (CharOperation.equals(simpleRefs[j], typeName))\r", "+\t\t\t\tcontinue next;\r", "+\t\tSystem.arraycopy(simpleRefs, 0, simpleRefs = new char[sLength + 1][], 0, sLength);\r", "+\t\tsimpleRefs[sLength] = typeName;\r", "+\t}\r", "+\tnewState.record(sourceLocation, qualifiedRefs, simpleRefs, mainTypeName, definedTypeNames);\r", "+}\r"]}], "num": 21647}
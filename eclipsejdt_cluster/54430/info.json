{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b6bd18504dffc1f055b02d3d460a0ab", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08348165b95888727be839f013b94e2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "0f16652d495864a2012fd0fc0ed568e6ea4bc1e1", "commitAfterChange": "6041a9141290a5f24fe2eae74d79755d86c6b388", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \t \tpublic void tagAsHavingIgnoredMandatoryErrors(int problemId)", "signatureAfterChange": " \t \tpublic void tagAsHavingIgnoredMandatoryErrors(int problemId)", "diff": ["+\t\t\t\tMethodScope enclosingLambdaScope = this.scope == null ? null : this.scope.enclosingLambdaScope();", "+\t\t\t\twhile (enclosingLambdaScope != null) {", "+\t\t\t\t\tLambdaExpression enclosingLambda = (LambdaExpression) enclosingLambdaScope.referenceContext;", "+\t\t\t\t\tif (enclosingLambda.original != enclosingLambda)", "+\t\t\t\t\t\tenclosingLambda.original.hasIgnoredMandatoryErrors = true;", "+\t\t\t\t\tenclosingLambdaScope = enclosingLambdaScope.enclosingLambdaScope();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b9247df925327e6cbc79ec5e7981224", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "commitAfterChange": "07061c09a4baa11ac0a53e425e478493f3662bd4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void emulateOuterAccess(LocalVariableBinding outerLocalVariable)", "signatureAfterChange": " public void emulateOuterAccess(LocalVariableBinding outerLocalVariable)", "diff": ["+\t", "+\tint depth = 0;", "+\tScope scope = this;", "+\twhile (outerVariableScope != scope) {", "+\t\tswitch(scope.kind) {", "+\t\t\tcase CLASS_SCOPE:", "+\t\t\t\tdepth++;", "+\t\t\t\tbreak;", "+\t\t\tcase METHOD_SCOPE: ", "+\t\t\t\tif (scope.isLambdaScope()) {", "+\t\t\t\t\tLambdaExpression lambdaExpression = (LambdaExpression) scope.referenceContext();", "+\t\t\t\t\tlambdaExpression.addSyntheticArgument(outerLocalVariable);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tscope = scope.parent;", "+\t}", "+\tif (depth == 0) ", "+\t\treturn;", "+\t"]}], "num": 54430}
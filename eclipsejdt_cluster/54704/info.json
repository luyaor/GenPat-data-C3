{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52ca36c25d0a920b84bceff2efd448cd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "298a077dc75c61f519be4932ce3f290f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "b32bff89b335f9213e72a23b143872f67ac07452", "commitAfterChange": "25a9dba189bcefd34377713ece67fd65377cdf3c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void resolve(MethodScope initializationScope)", "signatureAfterChange": "  public void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tFieldBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=318171, find field skipping visibility checks", "+\t\t\t\t// we do the checks below ourselves, using the appropriate conditions for access check of", "+\t\t\t\t// protected members from superclasses.", "+\t\t\t\tFieldBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/, true /* no visibility checks please */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36220f92cbe6c5de303f26583438bb0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "78b625fa215070da4df50c1048fd705a8af21bd9", "commitAfterChange": "c3351db3ee00f1d1cf48b02e3dc7349a33a109cf", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited, boolean treatAsSynthetic)", "signatureAfterChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited, boolean treatAsSynthetic)", "diff": ["+\tMethodBinding original = methodToCheck.original(); // can be the same as inherited", "+\tif (!current.areParameterErasuresEqual(original))", "+\t\treturn false;", "+\t\t", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=315978 : we now defer this rather expensive", "+\t\t// check to just before reporting (the incorrect) name clash. In the event there is no name", "+\t\t// clash to report to begin with (the common case), no penalty needs to be paid.  ", "-\tMethodBinding original = methodToCheck.original(); // can be the same as inherited", "+\toriginal = methodToCheck.original(); // can be the same as inherited"]}], "num": 54704}
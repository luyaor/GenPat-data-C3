{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4f1de2c43df890e0b69e9da73e032a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dd5656cfb000ec1029c1c81a9c31e89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "d2fd0a411735601d08912dc407d669f4cabc6555", "commitAfterChange": "6e5a548d86606bf19201f8e25ff7972af2431caf", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "diff": ["-\twhile (methodDescriptor[++index] != '(') {", "+\twhile (methodDescriptor[++index] != Util.C_PARAM_START) {", "-\twhile ((nextChar = methodDescriptor[++index]) != ')') {", "-\t\tif (nextChar != '[') {", "+\twhile ((nextChar = methodDescriptor[++index]) != Util.C_PARAM_END) {", "+\t\tif (nextChar != Util.C_ARRAY) {", "-\t\t\tif (nextChar == 'L')", "-\t\t\t\twhile ((nextChar = methodDescriptor[++index]) != ';'){/*empty*/}", "+\t\t\tif (nextChar == Util.C_RESOLVED)", "+\t\t\t\twhile ((nextChar = methodDescriptor[++index]) != Util.C_NAME_END){/*empty*/}", "-\t\t\twhile ((nextChar = methodDescriptor[++end]) == '['){/*empty*/}", "-\t\t\tif (nextChar == 'L')", "-\t\t\t\twhile ((nextChar = methodDescriptor[++end]) != ';'){/*empty*/}", "+\t\t\twhile ((nextChar = methodDescriptor[++end]) == Util.C_ARRAY){/*empty*/}", "+\t\t\tif (nextChar == Util.C_RESOLVED)", "+\t\t\t\twhile ((nextChar = methodDescriptor[++end]) != Util.C_NAME_END){/*empty*/}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7eca0a22d04ef52ba9988ba67ef0093", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "d2fd0a411735601d08912dc407d669f4cabc6555", "commitAfterChange": "6e5a548d86606bf19201f8e25ff7972af2431caf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-\t\twhile ((nextChar = methodDescriptor[++index]) != ')') {", "-\t\t\tif (nextChar != '[') {", "+\t\twhile ((nextChar = methodDescriptor[++index]) != Util.C_PARAM_END) {", "+\t\t\tif (nextChar != Util.C_ARRAY) {", "-\t\t\t\tif (nextChar == 'L')", "-\t\t\t\t\twhile ((nextChar = methodDescriptor[++index]) != ';'){/*empty*/}", "+\t\t\t\tif (nextChar == Util.C_RESOLVED)", "+\t\t\t\t\twhile ((nextChar = methodDescriptor[++index]) != Util.C_NAME_END){/*empty*/}", "-\t\t\t\twhile ((nextChar = methodDescriptor[++end]) == '['){/*empty*/}", "-\t\t\t\tif (nextChar == 'L')", "-\t\t\t\t\twhile ((nextChar = methodDescriptor[++end]) != ';'){/*empty*/}", "+\t\t\t\twhile ((nextChar = methodDescriptor[++end]) == Util.C_ARRAY){/*empty*/}", "+\t\t\t\tif (nextChar == Util.C_RESOLVED)", "+\t\t\t\t\twhile ((nextChar = methodDescriptor[++end]) != Util.C_NAME_END){/*empty*/}", "-\t\tif (wrapper.signature[wrapper.start] == '<') {", "+\t\tif (wrapper.signature[wrapper.start] == Util.C_GENERIC_START) {", "-\t\tif (wrapper.signature[wrapper.start] == '(') {", "+\t\tif (wrapper.signature[wrapper.start] == Util.C_PARAM_START) {", "-\t\t\tif (wrapper.signature[wrapper.start] == ')') {", "+\t\t\tif (wrapper.signature[wrapper.start] == Util.C_PARAM_END) {", "-\t\t\t\twhile (wrapper.signature[wrapper.start] != ')')", "+\t\t\t\twhile (wrapper.signature[wrapper.start] != Util.C_PARAM_END)", "-\t\tif (!wrapper.atEnd() && wrapper.signature[wrapper.start] == '^') {", "+\t\tif (!wrapper.atEnd() && wrapper.signature[wrapper.start] == Util.C_EXCEPTION_START) {", "-\t\t\t} while (!wrapper.atEnd() && wrapper.signature[wrapper.start] == '^');", "+\t\t\t} while (!wrapper.atEnd() && wrapper.signature[wrapper.start] == Util.C_EXCEPTION_START);"]}], "num": 48262}
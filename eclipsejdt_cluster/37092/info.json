{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "962c66bd941f5de4257920a664065106", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f5825ee706b49fa50dee7d97f23ff62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "cac9429f9e1e6c3ad2af309bdebee3c3ed412664", "commitAfterChange": "00cd0ca8a53543548dcf06256caed9b4099fa9b2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\t// Read tag name", "+\t\t// Verify first character", "+\t\tthis.tagSourceStart = this.index;", "+\t\tthis.tagSourceEnd = previousPosition;", "+\t\tthis.scanner.startPosition = this.index;", "-\t\tint token = readTokenAndConsume();", "-\t    if (currentPosition != this.scanner.startPosition) {", "-\t\t\tthis.tagSourceStart = previousPosition;", "-\t\t\tthis.tagSourceEnd = currentPosition;", "-\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (this.index >= this.scanner.eofPosition) {", "-\t\t\tthis.tagSourceStart = previousPosition;", "-\t\t\tthis.tagSourceEnd = this.tokenPreviousPosition;", "-\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\treturn false;", "-\t\t}", "-\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\tchar[] tagName = this.scanner.getCurrentIdentifierSource();", "-", "-\t\t// Try to get tag name other than java identifier", "-\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51660)", "-\t\tif (this.scanner.currentCharacter != ' ' && !ScannerHelper.isWhitespace(this.scanner.currentCharacter)) {", "-\t\t\tboolean validTag = true;", "-\t\t\ttagNameToken: while (token != TerminalTokens.TokenNameEOF && this.index < this.scanner.eofPosition) {", "-\t\t\t\tint length = tagName.length;", "-\t\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "-\t\t\t\tswitch (this.scanner.currentCharacter) {", "-\t\t\t\t\tcase '}':", "-\t\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "-\t\t\t\t\t\tbreak tagNameToken;", "-\t\t\t\t\tcase '!':", "-\t\t\t\t\tcase '#':", "-\t\t\t\t\tcase '%':", "-\t\t\t\t\tcase '&':", "-\t\t\t\t\tcase '\\'':", "-\t\t\t\t\tcase '\"':", "-\t\t\t\t\tcase ':':", "-\t\t\t\t\tcase '<':", "-\t\t\t\t\tcase '>':", "-\t\t\t\t\tcase '@':", "-\t\t\t\t\t\tvalidTag = false;", "-\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\tthis.index = this.scanner.currentPosition;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase '-': // allowed in tag names as this character is often used in doclets (bug 68087)", "-\t\t\t\t\t\tSystem.arraycopy(tagName, 0, tagName = new char[length+1], 0, length);", "-\t\t\t\t\t\ttagName[length] = this.scanner.currentCharacter;", "-\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\tthis.index = this.scanner.currentPosition;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tif (this.scanner.currentCharacter == ' ' || ScannerHelper.isWhitespace(this.scanner.currentCharacter)) {", "-\t\t\t\t\t\t\tbreak tagNameToken;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttoken = readTokenAndConsume();", "-\t\t\t\t\t\tchar[] ident = this.scanner.getCurrentIdentifierSource();", "-\t\t\t\t\t\tSystem.arraycopy(tagName, 0, tagName = new char[length+ident.length], 0, length);", "-\t\t\t\t\t\tSystem.arraycopy(ident, 0, tagName, length, ident.length);", "-\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tthis.scanner.getNextChar();", "-\t\t\t}", "-\t\t\tif (!validTag) {", "-\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\tchar firstChar = readChar();", "+\t\tswitch (firstChar) {", "+\t\t\tcase ' ':", "+\t\t\tcase '*':", "+\t\t\tcase '}':", "+\t\t\tcase '#':", "+\t\t\t\t// the first character is not valid, hence report invalid empty tag", "+\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(previousPosition, currentPosition);", "+\t\t\t\tif (this.textStart == -1) this.textStart = currentPosition;", "+\t\t\t\tthis.scanner.currentCharacter = firstChar;", "+\t\t\tdefault:", "+\t\t\t\tif (ScannerHelper.isWhitespace(firstChar)) {", "+\t\t\t\t\t// the first character is not valid, hence report invalid empty tag", "+\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(previousPosition, currentPosition);", "+\t\t\t\t\tif (this.textStart == -1) this.textStart = currentPosition;", "+\t\t\t\t\tthis.scanner.currentCharacter = firstChar;", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\t", "+\t\t// Read tag name", "+\t\tchar[] tagName = new char[32];", "+\t\tint length = 0;", "+\t\tchar currentChar = firstChar;", "+\t\tint tagNameLength = tagName.length;", "+\t\tboolean validTag = true;", "+\t\ttagLoop: while (true) {", "+\t\t\tif (length == tagNameLength) {", "+\t\t\t\tSystem.arraycopy(tagName, 0, tagName = new char[tagNameLength+32], 0, tagNameLength);", "+\t\t\t\ttagNameLength = tagName.length;", "+\t\t\t}", "+\t\t\ttagName[length++] = currentChar;", "+\t\t\tcurrentPosition = this.index;", "+\t\t\tcurrentChar = readChar();", "+\t\t\tswitch (currentChar) {", "+\t\t\t\tcase ' ':", "+\t\t\t\tcase '*':", "+\t\t\t\tcase '}':", "+\t\t\t\t\t// these characters mark the end of the tag reading", "+\t\t\t\t\tbreak tagLoop;", "+\t\t\t\tcase '#':", "+\t\t\t\t\t// invalid tag character, mark the tag as invalid but continue until the end of the tag", "+\t\t\t\t\tvalidTag = false;", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tif (ScannerHelper.isWhitespace(currentChar)) {", "+\t\t\t\t\t\t// whitespace characters mark the end of the tag reading", "+\t\t\t\t\t\tbreak tagLoop;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\tint length = tagName.length;", "-\t\tif (length == 0) return false; // may happen for some parser (completion for example)", "+", "+\t\t// Init positions", "+\t\tthis.tagSourceEnd = currentPosition - 1;", "+\t\tthis.scanner.currentCharacter = currentChar;", "+\t\tthis.scanner.currentPosition = currentPosition;", "-\t\tthis.scanner.currentPosition = this.tagSourceEnd+1;", "-\t\tif ((this.kind & FORMATTER_COMMENT_PARSER) != 0) {", "-\t\t\tthis.tagSourceStart = previousPosition;", "+", "+\t\t// Return if the tag is not valid", "+\t\tif (!validTag) {", "+\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\tif (this.textStart == -1) this.textStart = this.index;", "+\t\t\tthis.scanner.currentCharacter = currentChar;", "+\t\t\treturn false;", "-\t\tswitch (token) {", "-\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\tswitch (tagName[0]) {", "-\t\t\t\t\tcase 'a':", "-\t\t\t\t\t\tif (length == TAG_AUTHOR_LENGTH && CharOperation.equals(TAG_AUTHOR, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_AUTHOR_VALUE;", "-\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'c':", "-\t\t\t\t\t\tif (length == TAG_CATEGORY_LENGTH && CharOperation.equals(TAG_CATEGORY, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_CATEGORY_VALUE;", "-\t\t\t\t\t\t\tvalid = parseIdentifierTag(false); // TODO (frederic) reconsider parameter value when @category will be significant in spec", "-\t\t\t\t\t\t} else if (length == TAG_CODE_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_CODE, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_CODE_VALUE;", "-\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'd':", "-\t\t\t\t\t\tif (length == TAG_DEPRECATED_LENGTH && CharOperation.equals(TAG_DEPRECATED, tagName)) {", "-\t\t\t\t\t\t\tthis.deprecated = true;", "-\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\tthis.tagValue = TAG_DEPRECATED_VALUE;", "-\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t} else if (length == TAG_DOC_ROOT_LENGTH && CharOperation.equals(TAG_DOC_ROOT, tagName)) {", "-\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227730", "-\t\t\t\t\t\t\t// identify @docRoot tag as a base tag that does not expect any argument", "-\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\tthis.tagValue = TAG_DOC_ROOT_VALUE;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'e':", "-\t\t\t\t\t\tif (length == TAG_EXCEPTION_LENGTH && CharOperation.equals(TAG_EXCEPTION, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_EXCEPTION_VALUE;", "-\t\t\t\t\t\t\tvalid = parseThrows();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'i':", "-\t\t\t\t\t\tif (length == TAG_INHERITDOC_LENGTH && CharOperation.equals(TAG_INHERITDOC, tagName)) {", "-\t\t\t\t\t\t\t// inhibits inherited flag when tags have been already stored", "-\t\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "-\t\t\t\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "-\t\t\t\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "-\t\t\t\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "-\t\t\t\t\t\t\tif (this.astPtr==-1) {", "-\t\t\t\t\t\t\t\tthis.inheritedPositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\tthis.tagValue = TAG_INHERITDOC_VALUE;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'l':", "-\t\t\t\t\t\tif (length == TAG_LINK_LENGTH && CharOperation.equals(TAG_LINK, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_LINK_VALUE;", "-\t\t\t\t\t\t\tif (this.inlineTagStarted || (this.kind & COMPLETION_PARSER) != 0) {", "-\t\t\t\t\t\t\t\tvalid= parseReference();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "-\t\t\t\t\t\t\t\t// Cannot have @link outside inline comment", "-\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\tif (this.reportProblems) {", "-\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (length == TAG_LINKPLAIN_LENGTH && CharOperation.equals(TAG_LINKPLAIN, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_LINKPLAIN_VALUE;", "-\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\tvalid = parseReference();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\tif (this.reportProblems) {", "-\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (length == TAG_LITERAL_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_LITERAL, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_LITERAL_VALUE;", "-\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'p':", "-\t\t\t\t\t\tif (length == TAG_PARAM_LENGTH && CharOperation.equals(TAG_PARAM, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_PARAM_VALUE;", "-\t\t\t\t\t\t\tvalid = parseParam();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 's':", "-\t\t\t\t\t\tif (length == TAG_SEE_LENGTH && CharOperation.equals(TAG_SEE, tagName)) {", "-\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "-\t\t\t\t\t\t\t\t// Cannot have @see inside inline comment", "-\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\tif (this.reportProblems) {", "-\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthis.tagValue = TAG_SEE_VALUE;", "-\t\t\t\t\t\t\t\tvalid = parseReference();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (length == TAG_SERIAL_LENGTH && CharOperation.equals(TAG_SERIAL, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_SERIAL_VALUE;", "-\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t} else if (length == TAG_SERIAL_DATA_LENGTH && CharOperation.equals(TAG_SERIAL_DATA, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_SERIAL_DATA_VALUE;", "-\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t} else if (length == TAG_SERIAL_FIELD_LENGTH && CharOperation.equals(TAG_SERIAL_FIELD, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_SERIAL_FIELD_VALUE;", "-\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t} else if (length == TAG_SINCE_LENGTH && CharOperation.equals(TAG_SINCE, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_SINCE_VALUE;", "-\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'v':", "-\t\t\t\t\t\tif (length == TAG_VALUE_LENGTH && CharOperation.equals(TAG_VALUE, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_VALUE_VALUE;", "-\t\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5) {", "-\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\tvalid = parseReference();", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (this.validValuePositions == -1) {", "-\t\t\t\t\t\t\t\t\tif (this.invalidValuePositions != -1) {", "-\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocUnexpectedTag((int) (this.invalidValuePositions>>>32), (int) this.invalidValuePositions);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (valid) {", "-\t\t\t\t\t\t\t\t\t\tthis.validValuePositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "-\t\t\t\t\t\t\t\t\t\tthis.invalidValuePositions = -1;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tthis.invalidValuePositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (length == TAG_VERSION_LENGTH && CharOperation.equals(TAG_VERSION, tagName)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_VERSION_VALUE;", "-\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcreateTag();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tcreateTag();", "-\t\t\t\t\t\tbreak;", "+\t\tswitch (firstChar) {", "+\t\t\tcase 'a':", "+\t\t\t\tif (length == TAG_AUTHOR_LENGTH && CharOperation.equals(TAG_AUTHOR, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_AUTHOR_VALUE;", "+\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\tthis.tagValue = TAG_RETURN_VALUE;", "-\t\t\t\tvalid = parseReturn();", "+\t\t\tcase 'c':", "+\t\t\t\tif (length == TAG_CATEGORY_LENGTH && CharOperation.equals(TAG_CATEGORY, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_CATEGORY_VALUE;", "+\t\t\t\t\tvalid = parseIdentifierTag(false); // TODO (frederic) reconsider parameter value when @category will be significant in spec", "+\t\t\t\t} else if (length == TAG_CODE_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_CODE, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_CODE_VALUE;", "+\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t}", "-\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\tthis.tagValue = TAG_THROWS_VALUE;", "-\t\t\t\tvalid = parseThrows();", "+\t\t\tcase 'd':", "+\t\t\t\tif (length == TAG_DEPRECATED_LENGTH && CharOperation.equals(TAG_DEPRECATED, tagName, 0, length)) {", "+\t\t\t\t\tthis.deprecated = true;", "+\t\t\t\t\tvalid = true;", "+\t\t\t\t\tthis.tagValue = TAG_DEPRECATED_VALUE;", "+\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t} else if (length == TAG_DOC_ROOT_LENGTH && CharOperation.equals(TAG_DOC_ROOT, tagName, 0, length)) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227730", "+\t\t\t\t\t// identify @docRoot tag as a base tag that does not expect any argument", "+\t\t\t\t\tvalid = true;", "+\t\t\t\t\tthis.tagValue = TAG_DOC_ROOT_VALUE;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'e':", "+\t\t\t\tif (length == TAG_EXCEPTION_LENGTH && CharOperation.equals(TAG_EXCEPTION, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_EXCEPTION_VALUE;", "+\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'i':", "+\t\t\t\tif (length == TAG_INHERITDOC_LENGTH && CharOperation.equals(TAG_INHERITDOC, tagName, 0, length)) {", "+\t\t\t\t\t// inhibits inherited flag when tags have been already stored", "+\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "+\t\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "+\t\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "+\t\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "+\t\t\t\t\tif (this.astPtr==-1) {", "+\t\t\t\t\t\tthis.inheritedPositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "+\t\t\t\t\t}", "+\t\t\t\t\tvalid = true;", "+\t\t\t\t\tthis.tagValue = TAG_INHERITDOC_VALUE;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'l':", "+\t\t\t\tif (length == TAG_LINK_LENGTH && CharOperation.equals(TAG_LINK, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_LINK_VALUE;", "+\t\t\t\t\tif (this.inlineTagStarted || (this.kind & COMPLETION_PARSER) != 0) {", "+\t\t\t\t\t\tvalid= parseReference();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t// Cannot have @link outside inline comment", "+\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (length == TAG_LINKPLAIN_LENGTH && CharOperation.equals(TAG_LINKPLAIN, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_LINKPLAIN_VALUE;", "+\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (length == TAG_LITERAL_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_LITERAL, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_LITERAL_VALUE;", "+\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'p':", "+\t\t\t\tif (length == TAG_PARAM_LENGTH && CharOperation.equals(TAG_PARAM, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_PARAM_VALUE;", "+\t\t\t\t\tvalid = parseParam();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'r':", "+\t\t\t\tif (length == TAG_RETURN_LENGTH && CharOperation.equals(TAG_RETURN, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_RETURN_VALUE;", "+\t\t\t\t\tvalid = parseReturn();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 's':", "+\t\t\t\tif (length == TAG_SEE_LENGTH && CharOperation.equals(TAG_SEE, tagName, 0, length)) {", "+\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t// Cannot have @see inside inline comment", "+\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.tagValue = TAG_SEE_VALUE;", "+\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t}", "+\t\t\t\t} else if (length == TAG_SERIAL_LENGTH && CharOperation.equals(TAG_SERIAL, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_SERIAL_VALUE;", "+\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t} else if (length == TAG_SERIAL_DATA_LENGTH && CharOperation.equals(TAG_SERIAL_DATA, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_SERIAL_DATA_VALUE;", "+\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t} else if (length == TAG_SERIAL_FIELD_LENGTH && CharOperation.equals(TAG_SERIAL_FIELD, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_SERIAL_FIELD_VALUE;", "+\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t} else if (length == TAG_SINCE_LENGTH && CharOperation.equals(TAG_SINCE, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_SINCE_VALUE;", "+\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 't':", "+\t\t\t\tif (length == TAG_THROWS_LENGTH && CharOperation.equals(TAG_THROWS, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_THROWS_VALUE;", "+\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'v':", "+\t\t\t\tif (length == TAG_VALUE_LENGTH && CharOperation.equals(TAG_VALUE, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_VALUE_VALUE;", "+\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.validValuePositions == -1) {", "+\t\t\t\t\t\t\tif (this.invalidValuePositions != -1) {", "+\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocUnexpectedTag((int) (this.invalidValuePositions>>>32), (int) this.invalidValuePositions);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (valid) {", "+\t\t\t\t\t\t\t\tthis.validValuePositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "+\t\t\t\t\t\t\t\tthis.invalidValuePositions = -1;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.invalidValuePositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (length == TAG_VERSION_LENGTH && CharOperation.equals(TAG_VERSION, tagName, 0, length)) {", "+\t\t\t\t\tthis.tagValue = TAG_VERSION_VALUE;", "+\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t} else {", "+\t\t\t\t\tcreateTag();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tcreateTag();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "714d2ecbb3b22a553da275b83b3cae67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e6029c8b1adfe1296ee554ed42f00e5a663cecbf", "commitAfterChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t\t\t\tsimpleType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[firstTypeIndex]) != null) {", "-\t\t\t\t\t\t\tannotateType(simpleType, annotations);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\t\trecordNodes(simpleType, typeReference);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, simpleType, positions, typeAnnotations, firstTypeIndex, 0, firstTypeIndex);", "-\t\t\t\tint firstTypeIndex = lenth - 1;", "+\t\t\t\tint firstTypeIndex = lenth;", "-\t\t\t\tif (firstTypeIndex == 0) {", "-\t\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "-\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[0]));", "-\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\tint start = (int) (positions[0] >>> 32);", "-\t\t\t\t\tint end = (int) positions[0];", "-\t\t\t\t\tsimpleName.setSourceRange(start, end);", "-\t\t\t\t\tsimpleName.index = 1;", "-\t\t\t\t\tname = simpleName;", "-\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tType currentType = null;", "+\t\t\t\tif (firstTypeIndex == lenth) {//Just a QualifiedName", "+\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, lenth - 1, typeReference);", "+\t\t\t\t\tcurrentType = createSimpleType(name, typeReference, positions, 0, lenth - 1);", "-\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, firstTypeIndex, typeReference);", "-\t\t\t\t}", "-\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "-\t\t\t\tsimpleType.setName(name);", "-\t\t\t\tint start = (int)(positions[0] >>> 32);", "-\t\t\t\tint end = (int)positions[firstTypeIndex];", "-\t\t\t\tsimpleType.setSourceRange(start, end - start + 1);", "-\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[firstTypeIndex]) != null) {", "-\t\t\t\t\tannotateType(simpleType, annotations);", "-\t\t\t\t}", "-\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\trecordNodes(simpleType, typeReference);", "-\t\t\t\t}", "-\t\t\t\tType currentType = simpleType;", "-\t\t\t\t", "-\t\t\t\tfor (int i = firstTypeIndex + 1; i < lenth; ++i) {", "-\t\t\t\t\tSimpleName simpleName = new SimpleName(this.ast);", "-\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[i]));", "-\t\t\t\t\tsimpleName.index = i + 1;", "-\t\t\t\t\tstart = (int) (positions[i] >>> 32);", "-\t\t\t\t\tend = (int) positions[i];", "-\t\t\t\t\tsimpleName.setSourceRange(start, end - start +1);", "-\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\tQualifiedType qualifiedType = new QualifiedType(this.ast);", "-\t\t\t\t\tqualifiedType.setQualifier(currentType);", "-\t\t\t\t\tqualifiedType.setName(simpleName);", "-\t\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[i]) != null) {", "-\t\t\t\t\t\tannotateType(qualifiedType, annotations);", "+\t\t\t\t\tif (firstTypeIndex <= 1) {", "+\t\t\t\t\t\tname = createSimpleName(typeReference, positions, tokens, 0 );", "+\t\t\t\t\t\tfirstTypeIndex = 1;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, firstTypeIndex - 1, typeReference);", "+\t\t\t\t\t}\t\t\t\t\t\t", "+", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding = typeReference.resolvedType;", "+\t\t\t\t\tboolean createPackageQualifiedType = false;", "+\t\t\t\t\tif (typeBinding instanceof ReferenceBinding) {", "+\t\t\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding)typeBinding;\t\t\t", "+\t\t\t\t\t\tPackageBinding packageBinding = referenceBinding.getPackage();", "+\t\t\t\t\t\tif (packageBinding != null && Arrays.equals(name.toString().toCharArray(), packageBinding.readableName())) {", "+\t\t\t\t\t\t\tcreatePackageQualifiedType = true;", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-\t\t\t\t\t\trecordNodes(qualifiedType, typeReference);", "+\t\t\t\t\t", "+\t\t\t\t\tif (createPackageQualifiedType && this.ast.apiLevel >= AST.JLS8) {", "+\t\t\t\t\t\tPackageQualifiedType packageQualifiedType = new PackageQualifiedType(this.ast);", "+\t\t\t\t\t\tpackageQualifiedType.setQualifier(name);", "+\t\t\t\t\t\tpackageQualifiedType.setName(createSimpleName(typeReference, positions, tokens, firstTypeIndex));", "+\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, packageQualifiedType, positions, typeAnnotations, firstTypeIndex, 0, firstTypeIndex);", "+\t\t\t\t\t\tcurrentType = packageQualifiedType;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSimpleType simpleType = this.ast.newSimpleType(name);\t", "+\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, simpleType, positions, typeAnnotations, 0, 0, name.index > 0 ? name.index - 1 : 0);", "+\t\t\t\t\t\tcurrentType = createQualifiedType(typeReference, positions,  typeAnnotations, tokens, firstTypeIndex, simpleType);", "+\t\t\t\t\t\tif (createPackageQualifiedType) ", "+\t\t\t\t\t\t\tcurrentType.setFlags(currentType.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\tstart = currentType.getStartPosition();", "-\t\t\t\t\tend = simpleName.getStartPosition() + simpleName.getLength() - 1;", "-\t\t\t\t\tqualifiedType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\tcurrentType = qualifiedType;", "-\t\t\t\t\tqualifiedType.index  = 1;", "+\t\t\t\t\tfor (int i = firstTypeIndex + 1; i < lenth; ++i) {", "+\t\t\t\t\t\tcurrentType = createQualifiedType(typeReference, positions,  typeAnnotations, tokens, i, currentType);", "+\t\t\t\t\t}\t\t\t\t\t"]}], "num": 37092}
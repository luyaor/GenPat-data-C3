{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6c419e20c473d4816cfce0f93eb1f3b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "585849844e6ffa710fe4728765f631e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "commitAfterChange": "8c76b4014ea5428c07ebba6a1cc324074d6e35bd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "signatureAfterChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "diff": ["+ \t\t\t\tTypeBinding typeBinding = null;", "+ \t\t\t\tif (this.scanner.isAtParametersStart()) {", "+\t\t\t\t\tif (this.scanner.isAtTypeParameterStart())\t \t\t\t\t\t", "+\t \t\t\t\t\t// generic type binding", "+\t \t\t\t\t\ttypeBinding = getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "+\t \t\t\t\telse if (this.scanner.isAtTypeStart())", "+ \t\t\t\t\t\t// parameterized type binding", "+\t \t\t\t\t\ttypeBinding = getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver); ", "+ \t\t\t\t} else if (binding.typeVariables().length > 0)", "+ \t\t\t\t\t// raw type binding", "+ \t\t\t\t\ttypeBinding = resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "+ \t\t\t\telse", "+\t\t\t\t\t// non-generic type binding", "+\t\t\t\t\ttypeBinding = binding;", "-\t\t \t\t\t\t\treturn getFieldBinding(((SourceTypeBinding) binding).fields);", "+\t\t \t\t\t\t\treturn getFieldBinding(((ReferenceBinding) typeBinding).fields());", "-\t\t \t\t\t\t\tMethodBinding methodBinding = getMethodBinding(((SourceTypeBinding) binding).methods, resolver);", "+\t\t \t\t\t\t\tMethodBinding methodBinding = getMethodBinding(((ReferenceBinding) typeBinding).methods(), resolver);", "+\t\t \t\t\t\t\tif (this.scanner.isAtParametersStart())", "+\t\t \t\t\t\t\t\t// parameterized generic method binding", "+\t\t \t\t\t\t\t\tmethodBinding = getParameterizedGenericMethodBinding(methodBinding, resolver);", "-\t \t\t\t\tTypeBinding typeBinding = null;", "-\t \t\t\t\tif (this.scanner.isAtParametersStart()) {", "-\t\t\t\t\t\tif (this.scanner.isAtTypeParameterStart())\t \t\t\t\t\t", "-\t\t \t\t\t\t\t// generic type binding", "-\t\t \t\t\t\t\ttypeBinding = getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "-\t\t \t\t\t\telse if (this.scanner.isAtTypeStart())", "-\t \t\t\t\t\t\t// parameterized type binding", "-\t\t \t\t\t\t\ttypeBinding = getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver); ", "-\t \t\t\t\t} else if (binding.typeVariables().length > 0)", "-\t \t\t\t\t\t// raw type binding", "-\t \t\t\t\t\ttypeBinding = resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "-\t \t\t\t\telse", "- \t\t\t\t\t\t// non-generic type binding", "- \t\t\t\t\t\ttypeBinding = binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9223f59a4b070935398a1b4614cb0de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 19, "signatureBeforeChange": " public BinaryTypeBinding cacheMissingBinaryType(char[][] compoundName, CompilationUnitDeclaration unit)", "signatureAfterChange": " public MissingTypeBinding createMissingType(PackageBinding packageBinding, char[][] compoundName)", "diff": ["-public BinaryTypeBinding cacheMissingBinaryType(char[][] compoundName, CompilationUnitDeclaration unit) {", "-\t// report the missing class file first", "-\tproblemReporter.isClassPathCorrect(", "-\t\tcompoundName, ", "-\t\tunit == null ? this.unitBeingCompleted : unit, ", "-\t\tthis.missingClassFileLocation);", "-", "-\tPackageBinding packageBinding = computePackageFrom(compoundName);", "-\t// create a proxy for the missing BinaryType", "-\tMissingBinaryTypeBinding type = new MissingBinaryTypeBinding(packageBinding, compoundName, this);", "-\tif (type.id != TypeIds.T_JavaLangObject) {", "-\t\t// make Object be its superclass - it could in turn be missing as well", "-\t\tReferenceBinding objectType = getType(TypeConstants.JAVA_LANG_OBJECT);", "-\t\tif (objectType == null)", "-\t\t\tobjectType = cacheMissingBinaryType(TypeConstants.JAVA_LANG_OBJECT, unit);\t// create a proxy for the missing Object type\t\t", "-\t\ttype.setMissingSuperclass(objectType);", "-\t}", "-\tpackageBinding.addType(type);", "-\treturn type;\t", "-}", "+*/", "+public MissingTypeBinding createMissingType(PackageBinding packageBinding, char[][] compoundName) {", "+\t// create a proxy for the missing BinaryType", "+\tif (packageBinding == null) {", "+\t\tpackageBinding = computePackageFrom(compoundName, true /* missing */);", "+\t\tif (packageBinding == TheNotFoundPackage) packageBinding = this.defaultPackage;", "+\t}", "+\tMissingTypeBinding missingType = new MissingTypeBinding(packageBinding, compoundName, this);", "+\tif (missingType.id != TypeIds.T_JavaLangObject) {", "+\t\t// make Object be its superclass - it could in turn be missing as well", "+\t\tReferenceBinding objectType = getType(TypeConstants.JAVA_LANG_OBJECT);", "+\t\tif (objectType == null) {", "+\t\t\tobjectType = createMissingType(null, TypeConstants.JAVA_LANG_OBJECT);\t// create a proxy for the missing Object type\t\t", "+\t\t}", "+\t\tmissingType.setMissingSuperclass(objectType);", "+\t}", "+\tpackageBinding.addType(missingType);", "+\treturn missingType;\t", "+}"]}], "num": 49568}
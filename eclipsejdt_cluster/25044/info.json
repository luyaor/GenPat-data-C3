{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25642d7b9f8dc8904ee2f4022f4e85c6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c764a2bbd28948ace90b67d02b3aa00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tIType type)", "signatureAfterChange": "\r \tpublic IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tIType type)", "diff": ["-\t\t\tString selector = new String(method.selector);\r", "-\t\t\tIMethod[] methods;\r", "-\t\t\ttry {\r", "-\t\t\t\tmethods = type.getMethods();\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\treturn null;\r", "-\t\t\t}\r", "-\t\t\tfor (int i = 0; i < methods.length; i++) {\r", "-\t\t\t\tIMethod methodHandle = methods[i];\r", "-\t\t\t\tif (methodHandle.getElementName().equals(selector) && length == methodHandle.getNumberOfParameters()) {\r", "+\t\t\t// don't cache the methods of the binary type\r", "+\t\t\tClassFileReader reader = this.classFileReader(type);\r", "+\t\t\tif (reader == null) return null;\r", "+\t\t\tIBinaryMethod[] methods = reader.getMethods();\r", "+\r", "+\t\t\tfor (int i = 0, methodsLength = methods.length; i < methodsLength; i++) {\r", "+\t\t\t\tIBinaryMethod binaryMethod = methods[i];\r", "+\t\t\t\tchar[] selector = binaryMethod.getSelector();\r", "+\t\t\t\tif (CharOperation.equals(selector, method.selector)) {\r", "+\t\t\t\t\tString[] parameterTypes = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));\r", "+\t\t\t\t\tif (length != parameterTypes.length) continue;\r", "-\t\t\t\t\tString[] parameterTypes = methodHandle.getParameterTypes();\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName.replace('/', '.');\r", "-\t\t\t\t\t\tIJavaProject project = type.getJavaProject();\r", "-\t\t\t\t\t\t// check if the method's project is the same as the type's project\r", "-\t\t\t\t\t\t// they could be different in the case of a jar shared by several projects\r", "-\t\t\t\t\t\t// (the handles are equals and thus the java model cache contains only one of them)\r", "-\t\t\t\t\t\t// see bug 7945 Search results not selected in external jar  \r", "-\t\t\t\t\t\tif (!project.equals(methodHandle.getJavaProject())) {\r", "-\t\t\t\t\t\t\treturn type.getMethod(selector, parameterTypes);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\treturn methodHandle;\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn type.getMethod(new String(selector), parameterTypes);\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec33184a4638052deed9f58cd34d667a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private IType findSuperClass(IGenericType type, ReferenceBinding typeBinding)", "signatureAfterChange": " private IType findSuperClass(IGenericType type, ReferenceBinding typeBinding)", "diff": ["-\t\tif (superBinding.id == TypeIds.T_JavaLangObject && typeBinding.isHierarchyInconsistent()) {", "-\t\t\tchar[] superclassName;", "-\t\t\tchar separator;", "-\t\t\tif (type instanceof IBinaryType) {", "-\t\t\t\tsuperclassName = ((IBinaryType)type).getSuperclassName();", "-\t\t\t\tseparator = '/';", "-\t\t\t} else if (type instanceof ISourceType) {", "-\t\t\t\tsuperclassName = ((ISourceType)type).getSuperclassName();", "-\t\t\t\tseparator = '.';", "-\t\t\t} else if (type instanceof HierarchyType) {", "-\t\t\t\tsuperclassName = ((HierarchyType)type).superclassName;", "-\t\t\t\tseparator = '.';", "-\t\t\t} else {", "+\t\tif (typeBinding.isHierarchyInconsistent()) {", "+\t\t\tif (superBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\tthis.hasMissingSuperClass = true;", "+\t\t\t\tthis.builder.hierarchy.missingTypes.add(new String(superBinding.sourceName)); // note: this could be Map$Entry", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (superclassName != null) { // check whether subclass of Object due to broken hierarchy (as opposed to explicitly extending it)", "-\t\t\t\tint lastSeparator = CharOperation.lastIndexOf(separator, superclassName);", "-\t\t\t\tchar[] simpleName = lastSeparator == -1 ? superclassName : CharOperation.subarray(superclassName, lastSeparator+1, superclassName.length);", "-\t\t\t\tif (!CharOperation.equals(simpleName, TypeConstants.OBJECT)) {", "-\t\t\t\t\tthis.hasMissingSuperClass = true;", "-\t\t\t\t\tthis.builder.hierarchy.missingTypes.add(new String(simpleName));", "+\t\t\t} else if ((superBinding.id == TypeIds.T_JavaLangObject)) {", "+\t\t\t\tchar[] superclassName;", "+\t\t\t\tchar separator;", "+\t\t\t\tif (type instanceof IBinaryType) {", "+\t\t\t\t\tsuperclassName = ((IBinaryType)type).getSuperclassName();", "+\t\t\t\t\tseparator = '/';", "+\t\t\t\t} else if (type instanceof ISourceType) {", "+\t\t\t\t\tsuperclassName = ((ISourceType)type).getSuperclassName();", "+\t\t\t\t\tseparator = '.';", "+\t\t\t\t} else if (type instanceof HierarchyType) {", "+\t\t\t\t\tsuperclassName = ((HierarchyType)type).superclassName;", "+\t\t\t\t\tseparator = '.';", "+\t\t\t\t} else {", "+\t\t\t\t", "+\t\t\t\tif (superclassName != null) { // check whether subclass of Object due to broken hierarchy (as opposed to explicitly extending it)", "+\t\t\t\t\tint lastSeparator = CharOperation.lastIndexOf(separator, superclassName);", "+\t\t\t\t\tchar[] simpleName = lastSeparator == -1 ? superclassName : CharOperation.subarray(superclassName, lastSeparator+1, superclassName.length);", "+\t\t\t\t\tif (!CharOperation.equals(simpleName, TypeConstants.OBJECT)) {", "+\t\t\t\t\t\tthis.hasMissingSuperClass = true;", "+\t\t\t\t\t\tthis.builder.hierarchy.missingTypes.add(new String(simpleName));", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 25044}
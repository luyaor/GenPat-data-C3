{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a0bd4e864a7858be9119a476beca7f9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00a5ddfe36250ee0d569189916955bfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 299, "methodNumberAfterChange": 303, "signatureBeforeChange": " public void needToEmulateMethodAccess( \tMethodBinding method, \tASTNode location)", "signatureAfterChange": " public void needToEmulateMethodAccess( \tMethodBinding method, \tASTNode location)", "diff": ["-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)", "+\t\t\t\ttypesAsString(method, false)", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)", "+\t\t\t\ttypesAsString(method, true)", "-\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)", "+\t\t\ttypesAsString(method, false)", "-\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)", "+\t\t\ttypesAsString(method, true)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "370de50c0b8cc59db0ad82c7699feeb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "4aa9bc6aa2cb666fb0721f9b95f7c7e969829a0c", "commitAfterChange": "39745a85705361f7e5b8ca890f80a07d85799adc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r void recordReference(char[][] qualifiedEnclosingName, char[] simpleName)", "signatureAfterChange": "\r void recordReference(char[][] qualifiedEnclosingName, char[] simpleName)", "diff": ["-\tif (qualifiedReferences == null) return; // we're not recording dependencies\r", "-\r", "-\tif (!qualifiedReferences.contains(qualifiedEnclosingName)) {\r", "-\t\tqualifiedReferences.add(qualifiedEnclosingName);\r", "-\t\trecordReference(qualifiedEnclosingName);\r", "-\t}\r", "-\tif (!simpleNameReferences.contains(simpleName))\r", "-\t\tsimpleNameReferences.add(simpleName);\r", "+\trecordReference(qualifiedEnclosingName);\r", "+\trecordSimpleReference(simpleName);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44ccd2c917ef7961138d3eaedcd01fb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java", "commitBeforeChange": "cbfd7db0bb53f26158d0852adc3e2f21478a9415", "commitAfterChange": "86cd4406415b3c44c6ae3f955ab9070cd474074b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\t \tpublic static final Constant computeConstantOperationPLUS(Constant left, int leftId, int operator, Constant right, int rightId)", "signatureAfterChange": " \t\t \tpublic static final Constant computeConstantOperationPLUS(Constant left, int leftId, int operator, Constant right, int rightId)", "diff": ["-\t\t\t\t\tcase T_null:\treturn Constant.fromValue(left.stringValue() + right.stringValue()); ", "+\t\t\t\t\tcase T_null:\treturn NotAConstant; //(26138) return Constant.fromValue(left.stringValue() + right.stringValue()); ", "-\t\t\t\t\tcase T_null:\treturn Constant.fromValue(left.stringValue() + right.stringValue()); ", "+\t\t\t\t\tcase T_null:\treturn NotAConstant; //(26138) return Constant.fromValue(left.stringValue() + right.stringValue()); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "787e3be659fc7832aa1794d0207a8eac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 438, "methodNumberAfterChange": 449, "signatureBeforeChange": " public void wildcardInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method, TypeBinding[] arguments)", "signatureAfterChange": " public void wildcardInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method, TypeBinding[] arguments)", "diff": ["-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false),", "+\t\t\t\ttypesAsString(method, false),", "-\t\t\t\ttypesAsString(false, arguments, false),", "+\t\t\t\ttypesAsString(arguments, false),", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true),", "+\t\t\t\ttypesAsString(method, true),", "-\t\t\t\ttypesAsString(false, arguments, true),", "+\t\t\t\ttypesAsString(arguments, true),", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false),", "+\t\t\t\ttypesAsString(method, false),", "-\t\t\t\ttypesAsString(false, arguments, false),", "+\t\t\t\ttypesAsString(arguments, false),", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true),", "+\t\t\t\ttypesAsString(method, true),", "-\t\t\t\ttypesAsString(false, arguments, true),", "+\t\t\t\ttypesAsString(arguments, true),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e167a71e55a6c4009ffc5433d1cd748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 84, "signatureBeforeChange": " public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl, boolean equalParameters)", "signatureAfterChange": " public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl, boolean equalParameters)", "diff": ["-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)},", "+\t\t\t\ttypesAsString(method, false)},", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)},", "+\t\t\t\ttypesAsString(method, true)},", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false),", "-\t\t\t\ttypesAsString(method.isVarargs(), erasures, false) } ,", "+\t\t\t\ttypesAsString(method, false),", "+\t\t\t\ttypesAsString(method, erasures, false) } ,", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true),", "-\t\t\t\ttypesAsString(method.isVarargs(), erasures, true) },", "+\t\t\t\ttypesAsString(method, true),", "+\t\t\t\ttypesAsString(method, erasures, true) },"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b53f7da11fdb52c4edca31b23731e321", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void addVariable(LocalVariableBinding localBinding)", "signatureAfterChange": " public void addVariable(LocalVariableBinding localBinding)", "diff": ["-public void addVariable(LocalVariableBinding localBinding) {", "-    currentFrame.putLocal(localBinding.resolvedPosition, new VerificationTypeInfo(localBinding.type));", "-    storeStackMapFrame();", "-    super.addVariable(localBinding);", "+public void addVariable(LocalVariableBinding localBinding) {", "+\tif (localBinding.initializationPCs == null) {", "+\t\trecord(localBinding);", "+\t}", "+\tlocalBinding.recordInitializationStartPC(position);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b73764708c41e0fa0389e6d34fc601a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "ea8e63f616ba93be45fa6f7194a531b08059ef99", "commitAfterChange": "b137d0dc3d778fdf17bf399f75162f5540280907", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void performDefaults()", "signatureAfterChange": " \tpublic void performDefaults()", "diff": ["-\t\tfFactoryPathList.removeAllElements();", "-\t\tfor (FactoryPathEntry fpe : defaults) {", "-\t\t\tfFactoryPathList.addElement(fpe);", "-\t\t\tfFactoryPathList.setChecked(fpe, fpe._attr.isEnabled());", "-\t\t}", "+\t\tsetListContents(defaults);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb101e1f51ed2dc413cce8df0148c1e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "027a5942c1f8a8df8288ac0e347e39e4a0c4c335", "commitAfterChange": "16d018b1beaec2325e8b119cf0432c848cb2dd74", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\t\trecordSuppressWarnings(typeDeclaration.compilationResult(), typeDeclaration.declarationSourceStart, typeDeclaration.declarationSourceEnd, scope.compilerOptions().suppressWarnings);", "+\t\t\t\t\t\t\trecordSuppressWarnings(scope, typeDeclaration.declarationSourceStart, typeDeclaration.declarationSourceEnd, scope.compilerOptions().suppressWarnings);", "-\t\t\t\t\t\t\trecordSuppressWarnings(methodDeclaration.compilationResult(), methodDeclaration.declarationSourceStart, methodDeclaration.declarationSourceEnd, scope.compilerOptions().suppressWarnings);", "+\t\t\t\t\t\t\trecordSuppressWarnings(scope, methodDeclaration.declarationSourceStart, methodDeclaration.declarationSourceEnd, scope.compilerOptions().suppressWarnings);", "-\t\t\t\t\t\t\trecordSuppressWarnings(sourceType.scope.referenceContext.compilationResult(), fieldDeclaration.declarationSourceStart, fieldDeclaration.declarationSourceEnd, scope.compilerOptions().suppressWarnings);", "+\t\t\t\t\t\t\trecordSuppressWarnings(scope, fieldDeclaration.declarationSourceStart, fieldDeclaration.declarationSourceEnd, scope.compilerOptions().suppressWarnings);", "-\t\t\t\t\t\t\trecordSuppressWarnings(scope.referenceContext().compilationResult(), localDeclaration.declarationSourceStart, localDeclaration.declarationSourceEnd, scope.compilerOptions().suppressWarnings);", "+\t\t\t\t\t\t\trecordSuppressWarnings(scope, localDeclaration.declarationSourceStart, localDeclaration.declarationSourceEnd, scope.compilerOptions().suppressWarnings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bda2af4584a4a4b3565ff0755140b042", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchParticipant.java", "commitBeforeChange": "e7d0e101e34b7b6ee4b85e7209dafee08091c658", "commitAfterChange": "834d43c8a6ac5f159a487c1c2a9a5b14b35b4864", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static void addIndexEntry(char[] category, char[] key, SearchDocument document, String indexPath)", "signatureAfterChange": " \tpublic static void addIndexEntry(char[] category, char[] key, SearchDocument document)", "diff": ["-\t// A service provided for participants so that they can delegate between themselves.", "-\tpublic static void addIndexEntry(char[] category, char[] key, SearchDocument document, String indexPath) {", "-\t\tJavaModelManager.getJavaModelManager().getIndexManager().addIndexEntry(category, key, document, indexPath);", "+\t// A service provided for participants. Its called from indexDocument(SearchDocument document, IPath indexPath)", "+\tpublic static void addIndexEntry(char[] category, char[] key, SearchDocument document) {", "+\t\tif (document.index != null)", "+\t\t\tdocument.index.addIndexEntry(category, key, document);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0ce753470f6be76ef99ab7e4e45d842", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "ea8e63f616ba93be45fa6f7194a531b08059ef99", "commitAfterChange": "b137d0dc3d778fdf17bf399f75162f5540280907", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \t@Override \tprotected void initContents()", "signatureAfterChange": " \t@Override \tprotected void initContents()", "diff": ["+\t */", "-\t\tfFactoryPathList.removeAllElements();", "-\t\tfor (FactoryPathEntry originalFpe : fOriginalPath) {", "-\t\t\t// clone, because we may later modify it and we want to compare with the original.", "-\t\t\tFactoryPathEntry fpe = new FactoryPathEntry(originalFpe._fc, new Attributes(originalFpe._attr));", "-\t\t\tfFactoryPathList.addElement(fpe);", "-\t\t\tfFactoryPathList.setChecked(fpe, fpe._attr.isEnabled());", "-\t\t}", "+\t\tsetListContents(fOriginalPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed2fba98ea04339f03aa37703c12d63e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "d57dbd547ab44a22cc430f18490a1ae370e64432", "commitAfterChange": "6e68e9cf1522a12f0e985131be99c9578a7def47", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "\t \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t", "-\t\tif (this.binding.isVarargs() || (isConstructorReference() && this.receiverType.syntheticOuterLocalVariables() != null && currentScope.methodScope().isStatic)) {", "+\t\tif (shouldGenerateImplicitLambda(currentScope)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f24741731506af8797f40ca3f76b59b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void bytecodeExceeds64KLimit(AbstractMethodDeclaration location)", "signatureAfterChange": " public void bytecodeExceeds64KLimit(AbstractMethodDeclaration location)", "diff": ["-\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, false)},", "-\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, true)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method, false)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method, true)},", "-\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, false)},", "-\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, true)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method, false)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method, true)},"]}], "num": 54098}
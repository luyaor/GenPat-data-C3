{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b44438b0de2d19f56f8d0a40639df28", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c3555bf7d56b5ce0bb521b6c4e808e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "be89ab2e0ec1e398e3b0603a492d22c9815a6eef", "commitAfterChange": "0460b2dc122bab8976f113fd5dfefdda9aaa1649", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r private void locateMatchesInClassFile() throws CoreException, JavaModelException", "signatureAfterChange": "\r private void locateMatchesInClassFile() throws CoreException, JavaModelException", "diff": ["-\tBinaryType binaryType = (BinaryType)classFile.getType();\r", "-\tIBinaryType info;\r", "-\tif (classFile.isOpen()) {\r", "-\t\t// reuse the info from the java model cache\r", "-\t\tinfo = (IBinaryType)binaryType.getRawInfo();\r", "-\t} else {\r", "-\t\t// create a temporary info\r", "-\t\ttry {\r", "-\t\t\tIJavaElement pkg = classFile.getParent();\r", "-\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)pkg.getParent();\r", "-\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t// class file in a jar\r", "-\t\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');\r", "-\t\t\t\tString classFilePath = \r", "-\t\t\t\t\t(pkgPath.length() > 0) ?\r", "-\t\t\t\t\t\tpkgPath + \"/\" + classFile.getElementName() : //$NON-NLS-1$\r", "-\t\t\t\t\t\tclassFile.getElementName();\r", "-\t\t\t\tZipFile zipFile = null;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tzipFile = ((JarPackageFragmentRoot)root).getJar();\r", "-\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(\r", "-\t\t\t\t\t\tzipFile,\r", "-\t\t\t\t\t\tclassFilePath);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\tif (zipFile != null) {\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tzipFile.close();\r", "-\t\t\t\t\t\t} catch (IOException e) {\r", "-\t\t\t\t\t\t\t// ignore \r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\t// class file in a directory\r", "-\t\t\t\tString osPath = this.resource.getFullPath().toOSString();\r", "-\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(osPath);\r", "-\t\t\t}\r", "-\t\t} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {\r", "-\t\t\t//e.printStackTrace();\r", "-\t\t\treturn;\r", "-\t\t} catch (java.io.IOException e) {\r", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);\r", "-\t\t}\r", "-\t}\r", "+\tIBinaryType info = this.locator.getBinaryInfo(classFile, this.resource);\r", "+\tBinaryType binaryType = (BinaryType)classFile.getType();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c93c3c9e6b80c9f8226b71a100e526", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "5ec4215ec4f52f55dcb6e314c5f755ceba34fff6", "commitAfterChange": "5a4580d346b40161405692269366aba5f28266bb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "signatureAfterChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "diff": ["-\tIWorkspace workspace = focusType.getJavaProject().getProject().getWorkspace();\r", "-\tHandleFactory factory = new HandleFactory(workspace);\r", "+\tHandleFactory factory = new HandleFactory(ResourcesPlugin.getWorkspace());\r", "-\t\t\tif (handle.isOpen()) {\r", "-\t\t\t\t// reuse the info from the java model cache\r", "-\t\t\t\tif (handle instanceof CompilationUnit) {\r", "-\t\t\t\t\tthis.addInfoFromOpenCU((CompilationUnit)handle, infos);\r", "-\t\t\t\t} else if (handle instanceof ClassFile) {\r", "-\t\t\t\t\tthis.addInfoFromOpenClassFile((ClassFile)handle, infos);\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\tHierarchyBinaryType binaryType = (HierarchyBinaryType) binariesFromIndexMatches.get(resourcePath);\r", "-\t\t\t\tif (binaryType != null){\r", "-\t\t\t\t\tthis.addInfoFromBinaryIndexMatch(handle, binaryType, infos);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\t// create a temporary info\r", "-\t\t\t\t\tIJavaElement pkg = handle.getParent();\r", "-\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)pkg.getParent();\r", "-\t\t\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t\t\t// class file in a jar\r", "-\t\t\t\t\t\tthis.createInfoFromClassFileInJar(handle, infos);\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t// file in a directory\r", "-\t\t\t\t\t\tIPath path = new Path(resourcePath);\r", "-\t\t\t\t\t\tIFile file = workspace.getRoot().getFile(path);\r", "-\t\t\t\t\t\tIPath location = file.getLocation();\r", "-\t\t\t\t\t\tif (location != null){\r", "-\t\t\t\t\t\t\tString osPath = location.toOSString();\r", "-\t\t\t\t\t\t\tif (handle instanceof CompilationUnit) {\r", "-\t\t\t\t\t\t\t\t// compilation unit in a directory\r", "-\t\t\t\t\t\t\t\tthis.createCompilationUnitFromPath(handle, osPath, units);\r", "-\t\t\t\t\t\t\t} else if (handle instanceof ClassFile) {\r", "-\t\t\t\t\t\t\t\t// class file in a directory\r", "-\t\t\t\t\t\t\t\tthis.createInfoFromClassFile(handle, osPath, infos);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t\t\r", "+\t\t\tthis.addInfoFromElement(handle, infos, units, resourcePath);\r", "+\t\t\t\r"]}], "num": 22328}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9fa4f2aa09bf7c6aeab95da43fffc53", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20067d5530c2208928670f934a5c28e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas()", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas()", "diff": ["+\t\t\t\t\t\t\tfinal char[][] inclusionPatterns = ((ClasspathEntry)oldEntry).fullInclusionPatternChars();", "-\t\t\t\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, path, exclusionPatterns);", "+\t\t\t\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, path, inclusionPatterns, exclusionPatterns);", "+\t\t\t\t\t\t\tfinal char[][] inclusionPatterns = ((ClasspathEntry)entry).fullInclusionPatternChars();", "-\t\t\t\t\t\t\t\t\tindexManager.indexSourceFolder(project, path, exclusionPatterns);", "+\t\t\t\t\t\t\t\t\tindexManager.indexSourceFolder(project, path, inclusionPatterns, exclusionPatterns);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a940d03b69da3665fefdea55c87159ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5bd6b9d7331a9e7fe82d427994d62e0af1821389", "commitAfterChange": "a49b0379fae683770f815e7e32d76b4ebea892ec", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\tfindVariableNames(this.completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "+\t\t\t\tfindVariableNames(this.completionToken, method.returnType, excludeNames, null, FIELD, method.modifiers);", "-\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames, FIELD, field.modifiers);", "+\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames, null, FIELD, field.modifiers);", "-\t\t\t\tchar[][] excludeNames = new char[locals.length][];", "+\t\t\t\tchar[][] discouragedNames = new char[locals.length][];", "-\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;", "+\t\t\t\t\t\tdiscouragedNames[localCount++] = locals[i].name;", "-\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);", "+\t\t\t\tSystem.arraycopy(discouragedNames, 0, discouragedNames = new char[localCount][], 0, localCount);", "-\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "+\t\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, discouragedNames);", "+\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, LOCAL, variable.modifiers);", "-\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "+\t\t\t\t\tchar[][] forbiddenNames = findVariableFromUnresolvedReference(variable, (BlockScope)scope, discouragedNames);", "+\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, discouragedNames, forbiddenNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);"]}], "num": 8338}
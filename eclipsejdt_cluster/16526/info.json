{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1cdd155a294767192230aae1640956a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b826ef11295b204118b176221659049", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrame.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void addStackItem(TypeBinding binding)", "signatureAfterChange": " public void addStackItem(TypeBinding binding)", "diff": ["-\tthis.addStackItem(new VerificationTypeInfo(binding));", "+\tif (this.stackItems == null) {", "+\t\tthis.stackItems = new VerificationTypeInfo[1];", "+\t\tthis.stackItems[0] = new VerificationTypeInfo(binding);", "+\t\tthis.numberOfStackItems = 1;", "+\t} else {", "+\t\tfinal int length = this.stackItems.length;", "+\t\tif (this.numberOfStackItems == length) {", "+\t\t\tSystem.arraycopy(this.stackItems, 0, this.stackItems = new VerificationTypeInfo[length + 1], 0, length);", "+\t\t}", "+\t\tthis.stackItems[this.numberOfStackItems++] = new VerificationTypeInfo(binding);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aa03aa1961d443856043102a477eef9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "bb2764b7c9684437daed0c78212438ce2fa74511", "commitAfterChange": "d4d6b0243291019997a7d2e0c012e405a0f88778", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tprivate void generateAnnotation(Annotation annotation, int currentOffset)", "signatureAfterChange": "  \tprivate void generateAnnotation(Annotation annotation, int currentOffset)", "diff": ["+\t\t\tint memberValuePairOffset = this.contentsOffset;", "-\t\t\t\tfor (int i = 0; i < memberValuePairsLength; i++) {", "+\t\t\t\tloop: for (int i = 0; i < memberValuePairsLength; i++) {", "-\t\t\t\t\t\t\tgenerateElementValue(memberValuePair.value, methodBinding.returnType, startingContentsOffset);", "+\t\t\t\t\t\t\tgenerateElementValue(memberValuePair.value, methodBinding.returnType, memberValuePairOffset);", "+\t\t\t\t\t\t\tif (this.contentsOffset == memberValuePairOffset) {", "+\t\t\t\t\t\t\t\t// ignore all annotation values", "+\t\t\t\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "+\t\t\t\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "+\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t}", "+\t\t\t\tint memberValuePairOffset = this.contentsOffset;", "-\t\t\t\t\tgenerateElementValue(singleMemberAnnotation.memberValue, methodBinding.returnType, startingContentsOffset);", "+\t\t\t\t\tgenerateElementValue(singleMemberAnnotation.memberValue, methodBinding.returnType, memberValuePairOffset);", "+\t\t\t\t\tif (this.contentsOffset == memberValuePairOffset) {", "+\t\t\t\t\t\t// ignore annotation value", "+\t\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "+\t\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b51ec2d62418d313c14095e269aa40f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "04969acd296957373e2c11d1fa6749ece6b3b165", "commitAfterChange": "a6b612a10e662a9a3068db57f25ae43c85426c25", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected boolean pushParamName()", "signatureAfterChange": " \tprotected boolean pushParamName()", "diff": ["+\t\t\t\t\tif (this.invParamsPtr == -1l) {", "+\t\t\t\t\t\tthis.invParamsStack = new JavadocSingleNameReference[10];", "+\t\t\t\t\t}", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.invParamsStack[++this.invParamsPtr] = nameRef;", "+\t\t\t\t\t} catch (IndexOutOfBoundsException e) {", "+\t\t\t\t\t\tint oldStackLength = this.invParamsStack.length;", "+\t\t\t\t\t\tJavadocSingleNameReference[] oldStack = this.invParamsStack;", "+\t\t\t\t\t\tthis.invParamsStack = new JavadocSingleNameReference[oldStackLength + AstStackIncrement];", "+\t\t\t\t\t\tSystem.arraycopy(oldStack, 0, this.invParamsStack, 0, oldStackLength);", "+\t\t\t\t\t\tthis.invParamsStack[this.invParamsPtr] = nameRef;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5ccbee68b4e4bd83a6d3fe1b4cdbc15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ExceptionLabel.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic void placeStart()", "signatureAfterChange": "  public void placeStart()", "diff": ["+public void placeStart() {", "+\tint startPosition = codeStream.position;", "+\tif (this.count > 0 && this.ranges[this.count-1] == startPosition) { // start == previous end ?", "+\t\t// reopen current handler", "+\t\tthis.count--;", "+\t\treturn;", "+\t// only need to grow on even additions (i.e. placeStart only)", "+\tint length;", "+\tif (this.count == (length = this.ranges.length)) {", "+\t\tSystem.arraycopy(this.ranges, 0, this.ranges = new int[length*2], 0, length);", "+\tthis.ranges[this.count++] = codeStream.position;", "+}", "-\t", "-\tpublic void placeStart() {", "-", "-\t\tthis.start = codeStream.position;", "-\t}"]}], "num": 16526}
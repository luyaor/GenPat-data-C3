{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fef84a9532fbabcc542e1f6a9653b555", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30cf15564adfff785f0be76a15b4018f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "a25072f2f70a7d1a2734766b336bcde1a84f9c27", "commitAfterChange": "449564ddb56ce0df027b471cad53b0e520c06234", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod, boolean isStatic)", "diff": ["-\tpublic ParameterizedMethodBinding(ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod) {", "+\tpublic ParameterizedMethodBinding(ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod, boolean isStatic) {", "-\t\t\t\tparameterizedDeclaringClass.substitute(originalMethod.returnType),", "-\t\t\t\tScope.substitute(parameterizedDeclaringClass, originalMethod.parameters),", "-\t\t\t\tScope.substitute(parameterizedDeclaringClass, originalMethod.thrownExceptions),", "+\t\t\t\tisStatic // no substitution if original was static", "+\t\t\t\t\t\t? originalMethod.returnType", "+\t\t\t\t\t\t: parameterizedDeclaringClass.substitute(originalMethod.returnType),", "+\t\t\t\tisStatic // no substitution if original was static", "+\t\t\t\t\t? originalMethod.parameters", "+\t\t\t\t\t: Scope.substitute(parameterizedDeclaringClass, originalMethod.parameters),", "+\t\t\t\tisStatic // no substitution if original was static", "+\t\t\t\t\t? originalMethod.thrownExceptions", "+\t\t\t\t\t: Scope.substitute(parameterizedDeclaringClass, originalMethod.thrownExceptions),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0f5b9054e4c7e6141ff71c96ccbcb8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "1666c32b249d36aa9547f4f66f511c5bb00d3d63", "commitAfterChange": "4e6bb96b0e120539a45cc4860f508bf12e097d37", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment)", "signatureAfterChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment, boolean inferredWithUncheckConversion, boolean hasReturnProblem)", "diff": ["-\tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment) {", "+\tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment, boolean inferredWithUncheckConversion, boolean hasReturnProblem) {", "-\t    this.returnType = Scope.substitute(this, originalMethod.returnType);", "-\t    this.thrownExceptions = Scope.substitute(this, originalMethod.thrownExceptions);", "+\t    if (inferredWithUncheckConversion) { // JSL 18.5.2: \"If unchecked conversion was necessary...\"", "+\t    \tthis.returnType = getErasure18_5_2(originalMethod.returnType, environment, hasReturnProblem); // propagate simulation of Bug JDK_8026527", "+\t    \tthis.thrownExceptions = new ReferenceBinding[originalMethod.thrownExceptions.length];", "+\t    \tfor (int i = 0; i < originalMethod.thrownExceptions.length; i++) {", "+\t    \t\tthis.thrownExceptions[i] = (ReferenceBinding) getErasure18_5_2(originalMethod.thrownExceptions[i], environment, false); // no excuse for exceptions", "+\t\t\t}", "+\t    } else {", "+\t    \tthis.returnType = Scope.substitute(this, originalMethod.returnType);", "+\t    \tthis.thrownExceptions = Scope.substitute(this, originalMethod.thrownExceptions);", "+\t    }"]}], "num": 38494}
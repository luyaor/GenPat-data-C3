{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4659fb4035649f908093728da9a4891b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78046aa2b7f1b56b07345f6f081c2e6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "e6784ffdd1edbc52c40d5ecd797bb0ea62fd1ec2", "commitAfterChange": "07f0630efa2ba0b3ee43440c49e246f85c531281", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": "  \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=248897", "+\t\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\tpublic boolean visit(SingleNameReference reference, BlockScope scop) {", "+\t\t\t\t\tif (reference.binding instanceof LocalVariableBinding) {", "+\t\t\t\t\t\t((LocalVariableBinding) reference.binding).useFlag = LocalVariableBinding.USED;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tthis.value.traverse(visitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2a44631cd31a32cce98600231cfff96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c35f48a470f9475e0b73c6c14c2a26ca2378ab58", "commitAfterChange": "3c7abdea60e3dea7a9b2b822e92d260aea9179a7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\t\t\t\tboolean valueReturnSeen = false;", "-\t\t\t\t\tboolean voidReturnSeen = false;", "+\t\t\t\t\tprivate boolean valueReturnSeen = false;", "+\t\t\t\t\tprivate boolean voidReturnSeen = false;", "+\t\t\t\t\tprivate boolean throwSeen = false;", "+\t\t\t\t\tpublic boolean visit(ThrowStatement throwStatement, BlockScope dontCare) {", "+\t\t\t\t\t\tthis.throwSeen  = true;", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "-\t\t\t\t\t\tif (!this.voidReturnSeen && !this.valueReturnSeen) {  // () -> { throw new Exception(); } is value compatible.", "+\t\t\t\t\t\tif (!this.voidReturnSeen && !this.valueReturnSeen && this.throwSeen) {  // () -> { throw new Exception(); } is value compatible.", "-\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = ultimateStatement instanceof ThrowStatement; // for now, we will settle for a simplistic analysis.", "+\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = ultimateStatement instanceof ThrowStatement;", "+\t\t\t\t\t\t\tLambdaExpression.this.shapeAnalysisComplete = LambdaExpression.this.valueCompatible;"]}], "num": 61301}
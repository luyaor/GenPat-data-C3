{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f52ae4d99d8ccdf4a18de2cb76689e0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73d1a2e4421f0775bdf4282e4ee41ec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": " private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\twhile (token != TerminalTokens.TokenNameEOF){", "-\t\tswitch(mode){", "-", "+\twhile (token != TerminalTokens.TokenNameEOF) {", "+\t\tswitch(mode) {", "-\t\t\t\t\t\tif (declaringType == null){", "+\t\t\t\t\t\tif (declaringType == null) {", "-\t\t\t\t\t\tif (!(TerminalTokens.TokenNameWHITESPACE == lastToken ", "-\t\t\t\t\t\t\t|| TerminalTokens.TokenNameDOT == lastToken)){", "+\t\t\t\t\t\tif (!(TerminalTokens.TokenNameWHITESPACE == lastToken || TerminalTokens.TokenNameDOT == lastToken))", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (fieldName == null) {", "+\t\t\t\t\t\tif (fieldName == null)", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\telse", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (type == null){", "+\t\t\t\t\t\tif (type == null)", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\telse", "-\t\t\t\t\t\t}", "-\tif (declaringType != null){", "+\tif (declaringType != null) {", "-\t\tif (lastDotPosition >= 0){", "+\t\tif (lastDotPosition >= 0) {", "-\t\t\tif (declaringTypeQualification.length == 1 && declaringTypeQualification[0] == '*') declaringTypeQualification = null;", "+\t\t\tif (declaringTypeQualification.length == 1 && declaringTypeQualification[0] == '*')", "+\t\t\t\tdeclaringTypeQualification = null;", "-\t\tif (declaringTypeSimpleName.length == 1 && declaringTypeSimpleName[0] == '*') declaringTypeSimpleName = null;", "+\t\tif (declaringTypeSimpleName.length == 1 && declaringTypeSimpleName[0] == '*')", "+\t\t\tdeclaringTypeSimpleName = null;", "-\tif (type != null){", "+\tif (type != null) {", "-\t\tif (lastDotPosition >= 0){", "+\t\tif (lastDotPosition >= 0) {", "-\t\tif (typeSimpleName.length == 1 && typeSimpleName[0] == '*') typeSimpleName = null;", "+\t\tif (typeSimpleName.length == 1 && typeSimpleName[0] == '*')", "+\t\t\ttypeSimpleName = null;", "-\tSearchPattern searchPattern = null;", "-\tswitch (limitTo){", "+\tswitch (limitTo) {", "-\t\t\tsearchPattern = ", "-\t\t\t\tnew FieldDeclarationPattern(", "+\t\t\treturn new FieldPattern(", "+\t\t\t\ttrue,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tfieldNameChars,", "+\t\t\t\tmatchMode,", "+\t\t\t\tisCaseSensitive,", "+\t\t\t\tdeclaringTypeQualification,", "+\t\t\t\tdeclaringTypeSimpleName,", "+\t\t\t\ttypeQualification,", "+\t\t\t\ttypeSimpleName);", "+\t\tcase IJavaSearchConstants.REFERENCES :", "+\t\t\treturn new FieldPattern(", "+\t\t\t\tfalse,", "+\t\t\t\ttrue, // read access", "+\t\t\t\ttrue, // write access", "-\t\t\tbreak;", "-\t\tcase IJavaSearchConstants.REFERENCES :", "-\t\t\tsearchPattern = ", "-\t\t\t\tnew FieldReferencePattern(", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\ttrue, // read access", "-\t\t\t\t\ttrue); // write access", "-\t\t\tbreak;", "-\t\t\tsearchPattern = ", "-\t\t\t\tnew FieldReferencePattern(", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\ttrue, // read access only", "-\t\t\t\t\tfalse);", "-\t\t\tbreak;", "+\t\t\treturn new FieldPattern(", "+\t\t\t\tfalse,", "+\t\t\t\ttrue, // read access only", "+\t\t\t\tfalse,", "+\t\t\t\tfieldNameChars, ", "+\t\t\t\tmatchMode, ", "+\t\t\t\tisCaseSensitive, ", "+\t\t\t\tdeclaringTypeQualification, ", "+\t\t\t\tdeclaringTypeSimpleName, ", "+\t\t\t\ttypeQualification, ", "+\t\t\t\ttypeSimpleName);", "-\t\t\tsearchPattern = ", "-\t\t\t\tnew FieldReferencePattern(", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue); // write access only", "-\t\t\tbreak;", "+\t\t\treturn new FieldPattern(", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\ttrue, // write access only", "+\t\t\t\tfieldNameChars, ", "+\t\t\t\tmatchMode, ", "+\t\t\t\tisCaseSensitive, ", "+\t\t\t\tdeclaringTypeQualification, ", "+\t\t\t\tdeclaringTypeSimpleName, ", "+\t\t\t\ttypeQualification, ", "+\t\t\t\ttypeSimpleName);", "-\t\t\tsearchPattern = new OrPattern(", "-\t\t\t\tnew FieldDeclarationPattern(", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName),", "-\t\t\t\tnew FieldReferencePattern(", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\ttrue, // read access", "-\t\t\t\t\ttrue)); // write access", "-\t\t\tbreak;", "+\t\t\treturn new FieldPattern(", "+\t\t\t\ttrue,", "+\t\t\t\ttrue, // read access", "+\t\t\t\ttrue, // write access", "+\t\t\t\tfieldNameChars, ", "+\t\t\t\tmatchMode, ", "+\t\t\t\tisCaseSensitive, ", "+\t\t\t\tdeclaringTypeQualification, ", "+\t\t\t\tdeclaringTypeSimpleName, ", "+\t\t\t\ttypeQualification, ", "+\t\t\t\ttypeSimpleName);", "-\treturn searchPattern;", "-", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d94613b7e30c2ebbf391b0a32f3fd922", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private static SearchPattern createMethodPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": " private static SearchPattern createMethodPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\twhile (token != TerminalTokens.TokenNameEOF){", "-\t\tswitch(mode){", "-", "+\twhile (token != TerminalTokens.TokenNameEOF) {", "+\t\tswitch(mode) {", "-\t\t\t\t\t\tif (declaringType == null){", "+\t\t\t\t\t\tif (declaringType == null) {", "-\t\t\t\t\t\tif (!(TerminalTokens.TokenNameWHITESPACE == lastToken ", "-\t\t\t\t\t\t\t|| TerminalTokens.TokenNameDOT == lastToken)){", "+\t\t\t\t\t\tif (!(TerminalTokens.TokenNameWHITESPACE == lastToken || TerminalTokens.TokenNameDOT == lastToken))", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (selector == null) {", "+\t\t\t\t\t\tif (selector == null)", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\telse", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (parameterTypes.length == parameterCount){", "+\t\t\t\t\t\tif (parameterTypes.length == parameterCount)", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (parameterTypes.length == parameterCount){", "+\t\t\t\t\t\t\tif (parameterTypes.length == parameterCount)", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (parameterType == null){", "+\t\t\t\t\t\tif (parameterType == null)", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\telse", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (returnType == null){", "+\t\t\t\t\t\tif (returnType == null)", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\telse", "-\t\t\t\t\t\t}", "-\tif (selectorChars.length == 1 && selectorChars[0] == '*') selectorChars = null;", "+\tif (selectorChars.length == 1 && selectorChars[0] == '*')", "+\t\tselectorChars = null;", "-\tif (declaringType != null){", "+\tif (declaringType != null) {", "-\t\tif (lastDotPosition >= 0){", "+\t\tif (lastDotPosition >= 0) {", "-\t\t\tif (declaringTypeQualification.length == 1 && declaringTypeQualification[0] == '*') declaringTypeQualification = null;", "+\t\t\tif (declaringTypeQualification.length == 1 && declaringTypeQualification[0] == '*')", "+\t\t\t\tdeclaringTypeQualification = null;", "-\t\tif (declaringTypeSimpleName.length == 1 && declaringTypeSimpleName[0] == '*') declaringTypeSimpleName = null;", "+\t\tif (declaringTypeSimpleName.length == 1 && declaringTypeSimpleName[0] == '*')", "+\t\t\tdeclaringTypeSimpleName = null;", "-\tif (parameterCount >= 0){", "+\tif (parameterCount >= 0) {", "-\t\tfor (int i = 0; i < parameterCount; i++){", "+\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\tif (lastDotPosition >= 0){", "+\t\t\tif (lastDotPosition >= 0) {", "-\t\t\tif (parameterTypeSimpleNames[i].length == 1 && parameterTypeSimpleNames[i][0] == '*') parameterTypeSimpleNames[i] = null;", "+\t\t\tif (parameterTypeSimpleNames[i].length == 1 && parameterTypeSimpleNames[i][0] == '*')", "+\t\t\t\tparameterTypeSimpleNames[i] = null;", "-\tif (returnType != null){", "+\tif (returnType != null) {", "-\t\tif (lastDotPosition >= 0){", "+\t\tif (lastDotPosition >= 0) {", "-\t\tif (returnTypeSimpleName.length == 1 && returnTypeSimpleName[0] == '*') returnTypeSimpleName = null;", "+\t\tif (returnTypeSimpleName.length == 1 && returnTypeSimpleName[0] == '*')", "+\t\t\treturnTypeSimpleName = null;", "-\tSearchPattern searchPattern = null;", "-\tswitch (limitTo){", "+\tswitch (limitTo) {", "-\t\t\tsearchPattern = ", "-\t\t\t\tnew MethodDeclarationPattern(", "-\t\t\t\t\tselectorChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\treturnTypeQualification, ", "-\t\t\t\t\treturnTypeSimpleName, ", "-\t\t\t\t\tparameterTypeQualifications, ", "-\t\t\t\t\tparameterTypeSimpleNames);", "-\t\t\tbreak;", "+\t\t\treturn new MethodPattern(", "+\t\t\t\ttrue,", "+\t\t\t\tfalse,", "+\t\t\t\tselectorChars, ", "+\t\t\t\tmatchMode, ", "+\t\t\t\tisCaseSensitive, ", "+\t\t\t\tdeclaringTypeQualification, ", "+\t\t\t\tdeclaringTypeSimpleName, ", "+\t\t\t\treturnTypeQualification, ", "+\t\t\t\treturnTypeSimpleName, ", "+\t\t\t\tparameterTypeQualifications, ", "+\t\t\t\tparameterTypeSimpleNames,", "+\t\t\t\tnull);", "-\t\t\tsearchPattern = ", "-\t\t\t\tnew MethodReferencePattern(", "-\t\t\t\t\tselectorChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\treturnTypeQualification, ", "-\t\t\t\t\treturnTypeSimpleName, ", "-\t\t\t\t\tparameterTypeQualifications, ", "-\t\t\t\t\tparameterTypeSimpleNames,", "-\t\t\t\t\tnull);", "-\t\t\tbreak;", "+\t\t\treturn new MethodPattern(", "+\t\t\t\tfalse,", "+\t\t\t\ttrue,", "+\t\t\t\tselectorChars, ", "+\t\t\t\tmatchMode, ", "+\t\t\t\tisCaseSensitive, ", "+\t\t\t\tdeclaringTypeQualification, ", "+\t\t\t\tdeclaringTypeSimpleName, ", "+\t\t\t\treturnTypeQualification, ", "+\t\t\t\treturnTypeSimpleName, ", "+\t\t\t\tparameterTypeQualifications, ", "+\t\t\t\tparameterTypeSimpleNames,", "+\t\t\t\tnull);", "-\t\t\tsearchPattern = new OrPattern(", "-\t\t\t\tnew MethodDeclarationPattern(", "-\t\t\t\t\tselectorChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\treturnTypeQualification, ", "-\t\t\t\t\treturnTypeSimpleName, ", "-\t\t\t\t\tparameterTypeQualifications, ", "-\t\t\t\t\tparameterTypeSimpleNames),", "-\t\t\t\tnew MethodReferencePattern(", "-\t\t\t\t\tselectorChars, ", "-\t\t\t\t\tmatchMode, ", "-\t\t\t\t\tisCaseSensitive, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\treturnTypeQualification, ", "-\t\t\t\t\treturnTypeSimpleName, ", "-\t\t\t\t\tparameterTypeQualifications, ", "-\t\t\t\t\tparameterTypeSimpleNames,", "-\t\t\t\t\tnull));", "-\t\t\tbreak;", "+\t\t\treturn new MethodPattern(", "+\t\t\t\ttrue,", "+\t\t\t\ttrue,", "+\t\t\t\tselectorChars, ", "+\t\t\t\tmatchMode, ", "+\t\t\t\tisCaseSensitive, ", "+\t\t\t\tdeclaringTypeQualification, ", "+\t\t\t\tdeclaringTypeSimpleName, ", "+\t\t\t\treturnTypeQualification, ", "+\t\t\t\treturnTypeSimpleName, ", "+\t\t\t\tparameterTypeQualifications, ", "+\t\t\t\tparameterTypeSimpleNames,", "+\t\t\t\tnull);", "-\treturn searchPattern;", "-", "+\treturn null;"]}], "num": 62621}
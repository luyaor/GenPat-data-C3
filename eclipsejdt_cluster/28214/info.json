{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5de67be3b2a0e09eaaa9b0423efc35be", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2bbafc070403c44ca2e40b4fddf564b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void test014()", "signatureAfterChange": " \tpublic void test014()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tint i = 6;\\n\" +", "-\t\t\t\t\"\t\tif ((i == 6) \\n\" +", "-\t\t\t\t\"\t\t   == !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println(i);\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 6, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 4, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 5, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 5, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 16, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 6, lineNumberTable[3][1]);", "-\t\t\tassertEquals(\"wrong pc[4]\", 28, lineNumberTable[4][0]);", "-\t\t\tassertEquals(\"wrong line[4]\", 7, lineNumberTable[4][1]);", "-\t\t\tassertEquals(\"wrong pc[5]\", 35, lineNumberTable[5][0]);", "-\t\t\tassertEquals(\"wrong line[5]\", 9, lineNumberTable[5][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tint i = 6;\\n\" +", "+\t\t\t\"\t\tif ((i == 6) \\n\" +", "+\t\t\t\"\t\t   == !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println(i);\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 2, Locals: 3 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  bipush 6\\n\" + ", "+\t\t\t\"       4  istore_2\\n\" + ", "+\t\t\t\"       5  iload_2\\n\" + ", "+\t\t\t\"       6  bipush 6\\n\" + ", "+\t\t\t\"       8  if_icmpne 15\\n\" + ", "+\t\t\t\"      11  iconst_1\\n\" + ", "+\t\t\t\"      12  goto 16\\n\" + ", "+\t\t\t\"      15  iconst_0\\n\" + ", "+\t\t\t\"      16  iload_1\\n\" + ", "+\t\t\t\"      17  ifeq 24\\n\" + ", "+\t\t\t\"      20  iconst_0\\n\" + ", "+\t\t\t\"      21  goto 25\\n\" + ", "+\t\t\t\"      24  iconst_1\\n\" + ", "+\t\t\t\"      25  if_icmpne 35\\n\" + ", "+\t\t\t\"      28  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"      31  iload_2\\n\" + ", "+\t\t\t\"      32  invokevirtual #27 <Method java.io.PrintStream#println(int arg) void>\\n\" + ", "+\t\t\t\"      35  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 4]\\n\" + ", "+\t\t\t\"      [pc: 5, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 16, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 28, line: 7]\\n\" + ", "+\t\t\t\"      [pc: 35, line: 9]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 36] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 36] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"      [pc: 5, pc: 36] local: i index: 2 type: int\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbb79a192a5eaa9ae722ff6b5d157c34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tpublic void test048()", "signatureAfterChange": "  \tpublic void test048()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\tstatic int foo(boolean bool) {\\n\" +", "-\t\t\t\t\"\t  int j;\\n\" +", "-\t\t\t\t\"\t  try {\\n\" +", "-\t\t\t\t\"\t    if (bool) return 1;\\n\" +", "-\t\t\t\t\"\t    j = 2;\\n\" +", "-\t\t\t\t\"\t  } finally {\\n\" +", "-\t\t\t\t\"\t    j = 3;\\n\" +", "-\t\t\t\t\"\t  }\\n\" +", "-\t\t\t\t\"\t  return j;\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tfoo(false);\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methods = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 3, methods.length);", "-\t\t\tIMethodInfo methodInfo = methods[1];", "-\t\t\tassertEquals(\"wrong name\", \"foo\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertEquals(\"Wrong size\", 3, codeAttribute.getExceptionTableLength());", "-\t\t\tIExceptionTableEntry[] entries = codeAttribute.getExceptionTable();", "-\t\t\t// any exception handler", "-\t\t\tassertEquals(\"Wrong index\", 0, entries[0].getCatchTypeIndex());", "-\t\t\tassertEquals(\"Wrong index\", 0, entries[1].getCatchTypeIndex());", "-\t\t\tassertEquals(\"Wrong index\", 0, entries[2].getCatchTypeIndex());", "-\t\t\t", "-\t\t\tassertEquals(\"Wrong startpc\", 0, entries[0].getStartPC());", "-\t\t\tassertEquals(\"Wrong endpc\", 7, entries[0].getEndPC());", "-", "-\t\t\tassertEquals(\"Wrong startpc\", 9, entries[1].getStartPC());", "-\t\t\tassertEquals(\"Wrong endpc\", 14, entries[1].getEndPC());", "-", "-\t\t\tassertEquals(\"Wrong startpc\", 25, entries[2].getStartPC());", "-\t\t\tassertEquals(\"Wrong endpc\", 28, entries[2].getEndPC());", "-\t\t\t", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tif (lineNumberAttribute != null) {", "-\t\t\t\tint[][] lineEntries = lineNumberAttribute.getLineNumberTable();", "-\t\t\t\tassertNotNull(\"No entries\", lineEntries);", "-\t\t\t\tassertEquals(\"wrong size\", 7, lineEntries.length);", "-\t\t\t\tlineEntries[0][0] = 0;", "-\t\t\t\tlineEntries[0][1] = 6;", "-\t\t\t\tlineEntries[1][0] = 9;", "-\t\t\t\tlineEntries[1][1] = 7;", "-\t\t\t\tlineEntries[2][0] = 14;", "-\t\t\t\tlineEntries[2][1] = 8;", "-\t\t\t\tlineEntries[3][0] = 21;", "-\t\t\t\tlineEntries[3][1] = 9;", "-\t\t\t\tlineEntries[4][0] = 23;", "-\t\t\t\tlineEntries[4][1] = 10;", "-\t\t\t\tlineEntries[5][0] = 25;", "-\t\t\t\tlineEntries[5][1] = 8;", "-\t\t\t\tlineEntries[6][0] = 28;", "-\t\t\t\tlineEntries[6][1] = 11;", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\tstatic int foo(boolean bool) {\\n\" +", "+\t\t\t\"\t  int j;\\n\" +", "+\t\t\t\"\t  try {\\n\" +", "+\t\t\t\"\t    if (bool) return 1;\\n\" +", "+\t\t\t\"\t    j = 2;\\n\" +", "+\t\t\t\"\t  } finally {\\n\" +", "+\t\t\t\"\t    j = 3;\\n\" +", "+\t\t\t\"\t  }\\n\" +", "+\t\t\t\"\t  return j;\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tfoo(false);\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 (Z)I */\\n\" + ", "+\t\t\t\"  static int foo(boolean bool);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 4 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iload_0\\n\" + ", "+\t\t\t\"       1  ifeq 9\\n\" + ", "+\t\t\t\"       4  jsr 20\\n\" + ", "+\t\t\t\"       7  iconst_1\\n\" + ", "+\t\t\t\"       8  ireturn\\n\" + ", "+\t\t\t\"       9  iconst_2\\n\" + ", "+\t\t\t\"      10  istore_1\\n\" + ", "+\t\t\t\"      11  goto 25\\n\" + ", "+\t\t\t\"      14  astore_3\\n\" + ", "+\t\t\t\"      15  jsr 20\\n\" + ", "+\t\t\t\"      18  aload_3\\n\" + ", "+\t\t\t\"      19  athrow\\n\" + ", "+\t\t\t\"      20  astore_2\\n\" + ", "+\t\t\t\"      21  iconst_3\\n\" + ", "+\t\t\t\"      22  istore_1\\n\" + ", "+\t\t\t\"      23  ret 2\\n\" + ", "+\t\t\t\"      25  jsr 20\\n\" + ", "+\t\t\t\"      28  iload_1\\n\" + ", "+\t\t\t\"      29  ireturn\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Exception Table:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 7] -> 14 when : any\\n\" + ", "+\t\t\t\"      [pc: 9, pc: 14] -> 14 when : any\\n\" + ", "+\t\t\t\"      [pc: 25, pc: 28] -> 14 when : any\\n\" + ", "+\t\t\t\"      \\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 9, line: 7]\\n\" + ", "+\t\t\t\"      [pc: 14, line: 8]\\n\" + ", "+\t\t\t\"      [pc: 21, line: 9]\\n\" + ", "+\t\t\t\"      [pc: 23, line: 10]\\n\" + ", "+\t\t\t\"      [pc: 25, line: 8]\\n\" + ", "+\t\t\t\"      [pc: 28, line: 11]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 30] local: bool index: 0 type: boolean\\n\" + ", "+\t\t\t\"      [pc: 11, pc: 14] local: j index: 1 type: int\\n\" + ", "+\t\t\t\"      [pc: 23, pc: 30] local: j index: 1 type: int\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #21 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  iconst_0\\n\" + ", "+\t\t\t\"      1  invokestatic #23 <Method A#foo(boolean arg) int>\\n\" + ", "+\t\t\t\"      4  pop\\n\" + ", "+\t\t\t\"      5  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 15]\\n\" + ", "+\t\t\t\"      [pc: 5, line: 16]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 6] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}], "num": 28214}
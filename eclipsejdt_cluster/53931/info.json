{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34aaaeb814699f2e066666fccc928de0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ae4a048e9bffe96968359f13e2b0957", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "169996ac8cc8ac61982c0e7d00f722cad6796570", "commitAfterChange": "dc6ca6b3fb7984153c92a0fe7dc6707c05469a49", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void runTest(DefaultCodeFormatter codeFormatter, String sourceIn, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "signatureAfterChange": " \t \tprivate void runTest(String input, String output, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "diff": ["-\tprivate void runTest(DefaultCodeFormatter codeFormatter, String sourceIn, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator) {", "-\t\ttry {", "-\t\t\tassertNotNull(sourceIn);", "-\t\t\tICompilationUnit outputUnit = getCompilationUnit(\"Formatter\" , \"\", packageName, getOut(compilationUnitName)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tassertNotNull(outputUnit);", "-\t\t\tString result;", "-\t\t\tif (length == -1) {", "-\t\t\t\tresult = runFormatter(codeFormatter, sourceIn, kind, indentationLevel, offset, sourceIn.length(), lineSeparator);", "-\t\t\t} else {", "-\t\t\t\tresult = runFormatter(codeFormatter, sourceIn, kind, indentationLevel, offset, length, lineSeparator);", "-\t\t\t}", "-\t\t\tassertLineEquals(result, sourceIn, outputUnit.getSource(), checkNull);", "-\t\t} catch (JavaModelException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(false);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bea21a0685d3b9916a13d989f228609c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "d785f90166aa4c50a893672b2f8b10875313fedd", "commitAfterChange": "b8b352fc846455808f45330cfd0c7d70c44859bf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode)", "signatureAfterChange": " \tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) throws Exception", "diff": ["-\tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) {", "+\tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) throws Exception {", "-\t\tString result = null;", "-\t\ttry {", "-\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(classFile);", "-\t\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "-\t\t\tresult = disassembler.disassemble(classFileBytes, \"\\n\", mode);", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"Should not happen : \", false);", "-\t\t} catch (ClassFormatException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"Should not happen : \", false);", "-\t\t}", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(classFile);", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", mode);", "-\t\t", "-\t\ttry {", "-\t\t\tFileInputStream stream = new FileInputStream(classFile);", "-\t\t\tClassFileReader.read(stream, className + \".class\", true);", "-\t\t\tstream.close();", "-\t\t} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"ClassFormatException\", false);", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"IOException\", false);", "-\t\t}", "+\t\tFileInputStream stream = new FileInputStream(classFile);", "+\t\tClassFileReader.read(stream, className + \".class\", true);", "+\t\tstream.close();"]}], "num": 53931}
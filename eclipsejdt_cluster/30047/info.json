{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9e33544ed5dfb153985a12ce9a7be34", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11fbe562d55124ae771dbbc87949d722", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "signatureAfterChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "diff": ["-\t\t\tif (polyExpressionSeen && polyExpressionsHaveErrors(scope, this.binding, this.arguments, argumentTypes))", "-\t\t\t\treturn null;", "+\t\t\tif (polyExpressionSeen)", "+\t\t\t\tresolvePolyExpressionArguments(scope, this.binding, this.arguments, argumentTypes);", "+", "-\t\tif (polyExpressionSeen && polyExpressionsHaveErrors(scope, inheritedBinding, this.arguments, argumentTypes))", "-\t\t\treturn null;", "+\t\tif (polyExpressionSeen)", "+\t\t\tresolvePolyExpressionArguments(scope, inheritedBinding, this.arguments, argumentTypes);", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb72d7e880d80f2be3df1f4820b50fbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (polyExpressionSeen && polyExpressionsHaveErrors(scope, this.binding, this.arguments, argumentTypes))", "-\t\treturn null;", "+\tif (polyExpressionSeen) ", "+\t\tresolvePolyExpressionArguments(scope, this.binding, this.arguments, argumentTypes);"]}], "num": 30047}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40e627ff106b4535a371866b4c33ff05", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93ec02cda06068c95afe30bb684824d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TypeBinding capture(Scope scope, int position)", "signatureAfterChange": " \tpublic ParameterizedTypeBinding capture(Scope scope, int position)", "diff": ["-\tpublic TypeBinding capture(Scope scope, int position) {", "+\tpublic ParameterizedTypeBinding capture(Scope scope, int position) {", "+\t\tCompilationUnitScope compilationUnitScope = scope.compilationUnitScope();", "+\t\tASTNode cud = compilationUnitScope.referenceContext;", "+\t\tlong sourceLevel = this.environment.globalOptions.sourceLevel;", "+\t\t// A couple of NTAT tests fail with interned captures. The new messages look better and correct. Stephan to validate. ", "+\t\tfinal boolean needUniqueCapture = sourceLevel >= ClassFileConstants.JDK1_8 && !this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled;", "+\t\t", "-\t\t\t\telse", "-\t\t\t\t\tcapturedArguments[i] = new CaptureBinding(wildcard, contextType, position, scope.compilationUnitScope().nextCaptureID());", "+\t\t\t\telse if (needUniqueCapture)", "+\t\t\t\t\tcapturedArguments[i] = this.environment.createCapturedWildcard(wildcard, contextType, position, cud, compilationUnitScope.nextCaptureID());", "+\t\t\t\telse ", "+\t\t\t\t\tcapturedArguments[i] = new CaptureBinding(wildcard, contextType, position, compilationUnitScope.nextCaptureID());\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdcccaf3604cf7294c7c73dd341cd40d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 42, "signatureBeforeChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["+", "+\t\t\t\t// apply null default:", "+\t\t\t\tLookupEnvironment environment = this.scope.environment();", "+\t\t\t\tTypeBinding defaultNullnessAnnotationBinding = null;", "+\t\t\t\tif (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\t\t\tinitializeNullDefault();", "+\t\t\t\t\tdefaultNullnessAnnotationBinding = findDefaultNullness(this.scope, environment);", "+\t\t\t\t\tif (defaultNullnessAnnotationBinding != null && defaultNullnessAnnotationBinding.id == TypeIds.T_ConfiguredAnnotationNonNullByDefault) {", "+\t\t\t\t\t\tfield.fillInDefaultNonNullness(defaultNullnessAnnotationBinding, fieldDecl, initializationScope);", "+\t\t\t\t\t}", "+\t\t\t\t\t// validate null annotation:", "+\t\t\t\t\tthis.scope.validateNullAnnotation(field.tagBits, fieldDecl.type, fieldDecl.annotations);", "+\t\t\t\t}"]}], "num": 63493}
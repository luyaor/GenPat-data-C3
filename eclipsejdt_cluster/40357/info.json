{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d830a29b3501e2cd9293eff13152ef65", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ca51f5af1bcc4878d386510b96e87e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "ce7bef49e9ed96b08f61ac987775cd5b5704ee11", "commitAfterChange": "07a11e1e272139637f646eb5763c54327cd4bc46", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " private int[] readStreamDocumentArray(FileInputStream stream, int arraySize) throws IOException", "signatureAfterChange": " private int[] readStreamDocumentArray(FileInputStream stream, int arraySize) throws IOException", "diff": ["-\tint idx = this.bufferIndex;", "-\tint bufferSize = BUFFER_READ_SIZE;", "+", "+\tint i = 0;", "-\t\t\tthis.bufferIndex += arraySize;", "-\t\t\tif (this.bufferIndex < bufferSize) {", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tindexes[i] = streamBuffer[idx++] & 0xFF;", "+\t\t\twhile (i < arraySize) {", "+\t\t\t\t// how many bytes without refilling the buffer?", "+\t\t\t\tint bytesInBuffer = i + this.bufferEnd - this.bufferIndex;", "+\t\t\t\tif (bytesInBuffer > arraySize)", "+\t\t\t\t\tbytesInBuffer = arraySize;", "+\t\t\t\twhile (i < bytesInBuffer) {", "+\t\t\t\t\tindexes[i++] = this.streamBuffer[this.bufferIndex++] & 0xFF;", "-\t\t\t} else {", "-\t\t\t\t// set size to read on file", "-\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "-\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "-\t\t\t\t// fill indexes array", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tindexes[i] = streamBuffer[idx++] & 0xFF;", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tif (i < arraySize && stream != null)", "+\t\t\t\t\treadStreamBuffer(stream);", "-\t\t\tthis.bufferIndex += arraySize << 1;", "-\t\t\tif (this.bufferIndex < bufferSize) {", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<8;", "-\t\t\t\t\tindexes[i] = val + (streamBuffer[idx++] & 0xFF);", "+\t\t\twhile (i < arraySize) {", "+\t\t\t\t// how many shorts without refilling the buffer?", "+\t\t\t\tint shortsInBuffer = i + ((this.bufferEnd - this.bufferIndex) / 2);", "+\t\t\t\tif (shortsInBuffer > arraySize)", "+\t\t\t\t\tshortsInBuffer = arraySize;", "+\t\t\t\twhile (i < shortsInBuffer) {", "+\t\t\t\t\tint val = (this.streamBuffer[this.bufferIndex++] & 0xFF) << 8;", "+\t\t\t\t\tindexes[i++] = val + (this.streamBuffer[this.bufferIndex++] & 0xFF);", "-\t\t\t} else {", "-\t\t\t\t// set size to read on file", "-\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "-\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "-\t\t\t\t// fill indexes array", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<8;", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t\tindexes[i] = val + (streamBuffer[idx++] & 0xFF);", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tif (i < arraySize && stream != null)", "+\t\t\t\t\treadStreamBuffer(stream);", "-\t\t\tthis.bufferIndex += arraySize << 2;", "-\t\t\tif (this.bufferIndex < bufferSize) {", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<24;", "-\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<16;", "-\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<8;", "-\t\t\t\t\tindexes[i] += val + (streamBuffer[idx++]&0xFF);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// set size to read on file", "-\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "-\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "-\t\t\t\t// fill indexes array", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<24;", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<16;", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<8;", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t\tindexes[i] += val + (streamBuffer[idx++]&0xFF);", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\twhile (i < arraySize) {", "+\t\t\t\tindexes[i++] = readStreamInt(stream);", "-\tthis.bufferIndex = idx; // rsync buffer index"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b49866bd030dfbf1f74af873a242fe9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 24, "signatureBeforeChange": " private int[] readDocumentArray(DataInputStream stream, int arraySize) throws IOException", "signatureAfterChange": " private int[] readStreamDocumentArray(FileInputStream stream, int arraySize) throws IOException", "diff": ["-private int[] readDocumentArray(DataInputStream stream, int arraySize) throws IOException {", "-\tint[] result = new int[arraySize];", "-\tswitch (this.documentReferenceSize) {", "-\t\tcase 1 :", "-\t\t\tfor (int i = 0; i < arraySize; i++)", "-\t\t\t\tresult[i] = stream.readUnsignedByte();", "-\t\t\tbreak;", "-\t\tcase 2 :", "-\t\t\tfor (int i = 0; i < arraySize; i++)", "-\t\t\t\tresult[i] = stream.readUnsignedShort();", "-\t\t\tbreak;", "-\t\tdefault :", "-\t\t\tfor (int i = 0; i < arraySize; i++)", "-\t\t\t\tresult[i] = stream.readInt();", "-\t\t\tbreak;", "-\t}", "-\treturn result;", "-}", "+}", "+private int[] readStreamDocumentArray(FileInputStream stream, int arraySize) throws IOException {", "+\tint[] indexes = new int[arraySize];", "+\tif (arraySize == 0) return indexes;", "+\tint idx = this.bufferIndex;", "+\tint bufferSize = BUFFER_READ_SIZE;", "+\tswitch (this.documentReferenceSize) {", "+\t\tcase 1 :", "+\t\t\tthis.bufferIndex += arraySize;", "+\t\t\tif (this.bufferIndex < bufferSize) {", "+\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "+\t\t\t\t\tindexes[i] = streamBuffer[idx++] & 0xFF;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint i = 0;", "+\t\t\t\twhile (idx < bufferSize) {", "+\t\t\t\t\tindexes[i++] = streamBuffer[idx++] & 0xFF;", "+\t\t\t\t}", "+\t\t\t\tthis.bufferIndex -= bufferSize;", "+\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "+\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "+\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, bufferSize);", "+\t\t\t\tidx = 0;", "+\t\t\t\twhile (idx < this.bufferIndex) {", "+\t\t\t\t\tindexes[i++] = streamBuffer[idx++] & 0xFF;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 2 :", "+\t\t\tthis.bufferIndex += arraySize << 1;", "+\t\t\tif (this.bufferIndex < bufferSize) {", "+\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "+\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<8;", "+\t\t\t\t\tindexes[i] = val + (streamBuffer[idx++] & 0xFF);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "+\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "+\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "+\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<8;", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tindexes[i] = val + (streamBuffer[idx++] & 0xFF);", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.bufferIndex -= bufferSize;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\tthis.bufferIndex += arraySize << 2;", "+\t\t\tif (this.bufferIndex < bufferSize) {", "+\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "+\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<24;", "+\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<16;", "+\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<8;", "+\t\t\t\t\tindexes[i] += val + (streamBuffer[idx++]&0xFF);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "+\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "+\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "+\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<24;", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<16;", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<8;", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tindexes[i] += val + (streamBuffer[idx++]&0xFF);", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.bufferIndex -= bufferSize;", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\treturn indexes;", "+}"]}], "num": 40357}
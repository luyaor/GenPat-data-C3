{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c841143b92b98ea2bcbd706bc493767", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28c64b06401df544d051af4ed71b1169", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "68b8e1e49dc6d6ec7ca3b40f2299a45b8f4b3ea4", "commitAfterChange": "9d0a10f56589d65d04aaea495d852ef502b02233", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t} else if (this.binding instanceof ParameterizedMethodBinding && this.actualReceiverType instanceof ReferenceBinding) {", "-\t\t\tParameterizedMethodBinding paramMethodBinding = (ParameterizedMethodBinding) this.binding;", "-\t\t\tif (paramMethodBinding.hasSubstitutedParameters()) {", "-\t\t\t\tint length = argumentTypes.length;", "-\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\tif (paramMethodBinding.parameters[i] != argumentTypes[i] &&", "-\t\t\t\t\t\t\tparamMethodBinding.parameters[i].erasure() != argumentTypes[i].erasure()) {", "-\t\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "-\t\t\t\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t} else {", "+\t\t\tint length = argumentTypes.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tif (this.binding.parameters[i].erasure() != argumentTypes[i].erasure()) {", "+\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "+\t\t\t\t\tbreak;", "-\t\t} else if (scope.parameterCompatibilityLevel(this.binding, argumentTypes) == Scope.AUTOBOX_COMPATIBLE) {", "-\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "-\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9db87f639b982a2da1a57d51f7ce7e3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected static void createPrintStream(String className, PrintStream[] logStreams, int count, String prefix)", "signatureAfterChange": " \tprotected static void createPrintStream(String className, PrintStream[] logStreams, int count, String prefix)", "diff": ["-\t\t\t\t\tPrintStream logStream = null;", "-\t\t\t\t\t// Open stream", "-\t\t\t\t\tif (LOG_TYPES[i].equals(\"count\")) {", "-\t\t\t\t\t\tlogStream = logStreams[0] = new PrintStream(new FileOutputStream(logFile, true));", "-\t\t\t\t\t} else if (LOG_TYPES[i].equals(\"sum\")) {", "-\t\t\t\t\t\tlogStream = logStreams[1] = new PrintStream(new FileOutputStream(logFile, true));", "-\t\t\t\t\t} else if (LOG_TYPES[i].equals(\"average\")) {", "-\t\t\t\t\t\tlogStream = logStreams[2] = new PrintStream(new FileOutputStream(logFile, true));", "-\t\t\t\t\t} else if (LOG_TYPES[i].equals(\"stddev\")) {", "-\t\t\t\t\t\tlogStream = logStreams[3] = new PrintStream(new FileOutputStream(logFile, true));", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!fileExist && logStream != null) {", "-\t\t\t\t\t\tlogStream.print(\"Date  \\tTime  \\t\");", "+\t\t\t\t\tlogStreams[i] = new PrintStream(new FileOutputStream(logFile, true));", "+\t\t\t\t\tif (!fileExist && logStreams[i] != null) {", "+\t\t\t\t\t\tlogStreams[i].print(\"Date  \\tTime  \\t\");", "-\t\t\t\t\t\t\tString testName = ((String) TESTS_NAME_LIST.get(j)).substring(8+(prefix==null?0:prefix.length())); // 8=\"testPerf\".length()", "-\t\t\t\t\t\t\tlogStream.print(testName+'\\t');", "+\t\t\t\t\t\t\tString testName = ((String) TESTS_NAME_LIST.get(j)).substring(4+(prefix==null?0:prefix.length())); // 4=\"test\".length()", "+\t\t\t\t\t\t\tlogStreams[i].print(testName+'\\t');", "-\t\t\t\t\t\tlogStream.println(\"Comment\");", "+\t\t\t\t\t\tlogStreams[i].println(\"Comment\");", "-\t\t\t\t\tlogStream.print(DateFormat.getDateInstance(3).format(date)+'\\t');", "-\t\t\t\t\tlogStream.print(DateFormat.getTimeInstance(3).format(date)+'\\t');", "+\t\t\t\t\tlogStreams[i].print(DateFormat.getDateInstance(3).format(date)+'\\t');", "+\t\t\t\t\tlogStreams[i].print(DateFormat.getTimeInstance(3).format(date)+'\\t');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba65369781325e222c7f7bc67c37f1e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "01e38ca56c46a7423b9b7fff661e362555ab1e50", "commitAfterChange": "80afe0245e61b0a1bc378b68d1e49e7223b1baa6", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable())) {", "-\t\t\t\t\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "-\t\t\t\t\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\t\t\t\t\t\tcandidates = new MethodBinding[] {compatibleMethod, interfaceMethod};", "-\t\t\t\t\t\t\t\t\treturn mostSpecificMethodBinding(candidates, 2, argumentTypes, invocationSite, receiverType);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable()))", "+\t\t\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, compatibleMethod);", "-\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable())) {", "-\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "-\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\t\tcandidates = new MethodBinding[] {candidates[0], interfaceMethod};", "-\t\t\t\t\treturn mostSpecificMethodBinding(candidates, 2, argumentTypes, invocationSite, receiverType);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable()))", "+\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "-\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "-\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\t\tcandidates = new MethodBinding[] {mostSpecificMethod, interfaceMethod};", "-\t\t\t\t\treturn mostSpecificMethodBinding(candidates, 2, argumentTypes, invocationSite, receiverType);", "-\t\t\t\t}", "+\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, mostSpecificMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb6a95c79e93367e76ec8adf2483c107", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "fb551e71f8331e7335b6496578d819b690109f3c", "commitAfterChange": "02112ae5d67523cea52b946942bd13130a946a0e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public void resolve(IGenericType suppliedType)", "signatureAfterChange": "  public void resolve(IGenericType suppliedType)", "diff": ["+\t\t\tthis.superTypesOnly = true;", "-\t\t\t// must start with the top level type", "-\t\t\tISourceType topLevelType = (ISourceType) suppliedType;", "-\t\t\twhile (topLevelType.getEnclosingType() != null)", "-\t\t\t\ttopLevelType = topLevelType.getEnclosingType();", "-\t\t\tCompilationResult result = new CompilationResult(topLevelType.getFileName(), 1, 1, this.options.maxProblemsPerUnit);", "-\t\t\tCompilationUnitDeclaration unit =", "-\t\t\t\tSourceTypeConverter.buildCompilationUnit(", "-\t\t\t\t\tnew ISourceType[]{topLevelType}, ", "-\t\t\t\t\t// no need for field and methods", "-\t\t\t\t\tSourceTypeConverter.MEMBER_TYPE, // need member types", "-\t\t\t\t\t// no need for field initialization", "-\t\t\t\t\tthis.lookupEnvironment.problemReporter, ", "-\t\t\t\t\tresult);", "-", "-\t\t\tif (unit != null) {", "-\t\t\t\tthis.lookupEnvironment.buildTypeBindings(unit);", "-", "-\t\t\t\torg.eclipse.jdt.core.ICompilationUnit cu = ((SourceTypeElementInfo)topLevelType).getHandle().getCompilationUnit();", "-\t\t\t\trememberAllTypes(unit, cu, false);", "-", "-\t\t\t\tthis.lookupEnvironment.completeTypeBindings(unit, false);", "-", "-\t\t\t\treportHierarchy(this.requestor.getType(), unit, null);", "-\t\t\t}", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit cu = ((SourceTypeElementInfo)suppliedType).getHandle().getCompilationUnit();", "+\t\t\tHashSet localTypes = new HashSet();", "+\t\t\tlocalTypes.add(cu.getPath().toString());", "+\t\t\tthis.superTypesOnly = true;", "+\t\t\tresolve(new Openable[] {(Openable)cu}, localTypes, null);"]}], "num": 39865}
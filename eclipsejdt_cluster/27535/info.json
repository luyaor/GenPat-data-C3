{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3d93000b584d93de15a7b797b421e13", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a380ebdd514e3c27308043fedf52fb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java", "commitBeforeChange": "99250bacae54994417cccb9e6d497671bd34c73a", "commitAfterChange": "b8ad11284f7ddb513e50b9a3cefa6da0b770e764", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "signatureAfterChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "diff": ["-\t\tStringBuilder sb = new StringBuilder();", "-\t\tfinal String space = \" \"; //$NON-NLS-1$", "-\t\tsb.append(\"APT says:\"); //$NON-NLS-1$", "-\t\tif (kind != null) {", "-\t\t\tsb.append(space);", "-\t\t\tsb.append(kind);", "-\t\t}", "-\t\tif (msg != null) {", "-\t\t\tsb.append(space);", "-\t\t\tsb.append(msg);", "-\t\t}", "-\t\tif (e != null) {", "-\t\t\tsb.append(\" on element \"); //$NON-NLS-1$", "-\t\t\tsb.append(e);", "-\t\t}", "-\t\tif (a != null) {", "-\t\t\tsb.append(\" at annotation \"); //$NON-NLS-1$", "-\t\t\tsb.append(a);", "-\t\t}", "-\t\tif (v != null) {", "-\t\t\tsb.append(\" on value \"); //$NON-NLS-1$", "-\t\t\tsb.append(v);", "-\t\t}", "-\t\tSystem.err.println(sb.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9137a26966041728224fe1de36cf73ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "65e1f9794af1b0b3028b4c4ccf6c8c82d9c2fa61", "commitAfterChange": "a443bde4ac794ade15630c52c634e854501ba28b", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["-\t\tboolean openedString = false;", "-\t\t\t\tString msg = iie.getMessage();", "-\t\t\t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || newLine) && !firstWord;", "-\t\t\t\tif (msg == Scanner.INVALID_CHARACTER_CONSTANT) {", "-\t\t\t\t\tif (insertSpace) {", "-\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\t}", "-\t\t\t\t\ttokensBuffer.append('\\'');", "-\t\t\t\t} else if (msg == Scanner.INVALID_CHAR_IN_STRING) {", "-\t\t\t\t\tif (openedString) {", "-\t\t\t\t\t\topenedString = false;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (insertSpace) {", "-\t\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\topenedString = true;", "-\t\t\t\t\t}", "-\t\t\t\t\ttokensBuffer.append('\"');", "-\t\t\t\t} else {", "-\t\t\t\t\t// skip failure", "-\t\t\t\t}", "-\t\t\t\t// Need to retrieve correct position", "-\t\t\t\tthis.scanner.resetTo(this.scanner.startPosition, currentTokenEndPosition-1);", "-\t\t\t\tthis.scanner.getNextChar();", "-\t\t\t\tpreviousToken = 2000;", "+\t    \t\ttoken = consumeInvalidToken(currentTokenEndPosition-1);", "-\t\t\t\tcontinue;"]}], "num": 27535}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b93d0eb8064fafe3190bc76fa710cc8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b490106b428f4ece2b2bd71af9ce950", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "af330be1052a8d3b1a31b10596d367fb42f89f79", "commitAfterChange": "b3a6b4ddf9d5bd5365b7e897739a001bb2ff860b", "methodNumberBeforeChange": 196, "methodNumberAfterChange": 196, "signatureBeforeChange": " \tpublic void test062()", "signatureAfterChange": " \tpublic void test062()", "diff": ["-\t\t\t\"1. ERROR in Errors.java (at line 6)\\n\" + ", "+\t\t\t\"1. ERROR in Errors.java (at line 5)\\n\" + ", "+\t\t\t\"\tex.five(\\\"eclipse\\\");\\n\" + ", "+\t\t\t\"\t   ^^^^\\n\" + ", "+\t\t\t\"The method five(String) is ambiguous for the type Ex<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in Errors.java (at line 6)\\n\" + ", "-\t\t\t\"2. WARNING in Errors.java (at line 7)\\n\" + ", "+\t\t\t\"3. WARNING in Errors.java (at line 7)\\n\" + ", "-\t\t\t\"3. WARNING in Errors.java (at line 9)\\n\" + ", "+\t\t\t\"4. ERROR in Errors.java (at line 9)\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method five(Object) belongs to the raw type Ex. References to generic type Ex<C> should be parameterized\\n\" + ", "+\t\t\t\"\t    ^^^^\\n\" + ", "+\t\t\t\"The method five(Object) is ambiguous for the type Ex\\n\" + ", "-\t\t\t\"4. ERROR in Errors.java (at line 10)\\n\" + ", "+\t\t\t\"5. ERROR in Errors.java (at line 10)\\n\" + ", "-\t\t\t\"5. ERROR in Errors.java (at line 21)\\n\" + ", "+\t\t\t\"6. ERROR in Errors.java (at line 20)\\n\" + ", "+\t\t\t\"\t@Override void five(C cEx) {}\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method five(C) of type Ex<C> has the same erasure as five(TC) of type Top<TC> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in Errors.java (at line 20)\\n\" + ", "+\t\t\t\"\t@Override void five(C cEx) {}\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\tmustOverrideMessage(\"five(C)\", \"Ex<C>\") + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in Errors.java (at line 21)\\n\" + ", "-\t\t\t\"6. ERROR in Errors.java (at line 21)\\n\" + ", "+\t\t\t\"9. ERROR in Errors.java (at line 21)\\n\" + ", "-\t\t\t// we disagree about the ambiguous errors on lines 5, 9 & 20, see the message sends to proof()", "-\t\t\t// 9: warning: [unchecked] unchecked call to <TM>five(TC) as a member of the raw type Top", "+\t\t\t// **** 9: warning: [unchecked] unchecked call to <TM>five(TC) as a member of the raw type Top", "-\t\t\t// 10: warning: [unchecked] unchecked call to six(TC) as a member of the raw type Top", "+\t\t\t// **** 10: warning: [unchecked] unchecked call to six(TC) as a member of the raw type Top"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff7f8cc1bcbe7c6b07a457148df32d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "dfb3637702f1e682e6ee6d2d1c5b6ed54a2efc28", "commitAfterChange": "40fae5391d4f13359de5727f38342f6b018e40a2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void test001()", "signatureAfterChange": "  \tpublic void test001()", "diff": ["-\t\t\t\"3. ERROR in ALL.java (at line 8)\\n\" + ", "+\t\t\t\"3. ERROR in ALL.java (at line 7)\\n\" + ", "+\t\t\t\"\tclass L<T> implements I { public void foo(T t) {} }\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type L<T> has the same erasure as foo(U) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in ALL.java (at line 8)\\n\" + ", "-\t\t\t\"4. WARNING in ALL.java (at line 10)\\n\" + ", "+\t\t\t\"5. ERROR in ALL.java (at line 10)\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\" + ", "+\t\t\t\"\t                                   ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type W<T> has the same erasure as foo(U) of type X but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in ALL.java (at line 10)\\n\" + ", "+\t\t\t */", "+\t\t);", "+\t\t// and just to show that name clash errors are NOT generated when another error is detected", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"ALL.java\",", "+\t\t\t\t\"class A {}\\n\" +", "+\t\t\t\t\"class B {}\\n\" +", "+\t\t\t\t\"class X<U> { public void foo(U u) {} }\\n\" +", "+", "+\t\t\t\t\"class W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in ALL.java (at line 4)\\r\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\r\\n\" + ", "+\t\t\t\"\t                                   ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type W<T> has the same erasure as foo(U) of type X but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in ALL.java (at line 4)\\r\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\r\\n\" + ", "+\t\t\t\"\t                                              ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method foo(Object) belongs to the raw type X. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t/*", "+\t\t\t ALL.java:4: warning: [unchecked] unchecked call to foo(U) as a member of the raw type X", "+\t\t\t ALL.java:4: name clash: foo(T) in W<T> and foo(U) in X have the same erasure, yet neither overrides the other"]}], "num": 54492}
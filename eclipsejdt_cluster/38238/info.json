{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ec6d3777ff1bef859f33336f0e680de", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04418621cd55016a72b31d8c8f4a35cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "0e160bd57ca4572e4cc317f77eef59eff0c912a6", "commitAfterChange": "1b0238cbdda2702f17c4f0b30e4c8493818f8888", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic MethodBinding tiebreakMethod()", "signatureAfterChange": " \tpublic MethodBinding tiebreakMethod()", "diff": ["-\t\t\tthis.tiebreakMethod = this.isRaw ? this : new ParameterizedGenericMethodBinding(this.originalMethod, (RawTypeBinding)null, this.environment);", "+//\t\t\tif (this.isRaw) {", "+//\t\t\t\tthis.tiebreakMethod = this;", "+//\t\t\t} else {", "+//\t\t\t\tthis.tiebreakMethod = new ParameterizedGenericMethodBinding(this.originalMethod, (RawTypeBinding)null, this.environment);", "+\t\t\t\tTypeVariableBinding[] originalVariables = originalMethod.typeVariables;", "+\t\t\t\tint length = originalVariables.length;", "+\t\t\t\tTypeBinding[] rawArguments = new TypeBinding[length];", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\trawArguments[i] =  environment.convertToRawType(originalVariables[i].erasure());", "+\t\t\t\tthis.tiebreakMethod = new ParameterizedGenericMethodBinding(this.originalMethod, rawArguments, this.environment);", "+//\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "542386553c3e21dd8eb0816aaeb866f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "9dcd71cdce634956fd569b61b90ee2930f7dbd24", "commitAfterChange": "4bc132d24d4e8dfc7f8ce3f9ed5b0691926dd1b7", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public String[][] resolveType(String typeName) throws JavaModelException", "signatureAfterChange": "   public String[][] resolveType(String typeName) throws JavaModelException", "diff": ["-\tengine.selectType(info, typeName.toCharArray(), false);", "+ \tIType[] topLevelTypes = this.getCompilationUnit().getTypes();", "+ \tint length = topLevelTypes.length;", "+ \tISourceType[] topLevelInfos = new ISourceType[length];", "+ \tfor (int i = 0; i < length; i++) {", "+\t\ttopLevelInfos[i] = (ISourceType)((SourceType)topLevelTypes[i]).getElementInfo();", "+\t}", "+\t\t", "+\tengine.selectType(info, typeName.toCharArray(), topLevelInfos, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a253d2db4b099c88c86666ae2ffde07d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/MethodNameMatchRequestorWrapper.java", "commitBeforeChange": "297840d814bc6fb8f78f68a36eb74676aea7b3b0", "commitAfterChange": "65a147b80f31dc3e10f9d46f87c3805f7af615cd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void acceptMethod(char[] methodName, int parameterCount, char[] declaringQualifier, \t\t\tchar[] simpleTypeName, int typeModifiers, char[] packageName, char[] signature, char[][] parameterTypes, \t\t\tchar[][] parameterNames, char[] returnType, int modifiers, String path, \t\t\tAccessRestriction access, int methodIndex)", "signatureAfterChange": "  \t@Override \tpublic void acceptMethod(char[] methodName, int parameterCount, char[] declaringQualifier, \t\t\tchar[] simpleTypeName, int typeModifiers, char[] packageName, char[] signature, char[][] parameterTypes, \t\t\tchar[][] parameterNames, char[] returnType, int modifiers, String path, \t\t\tAccessRestriction access, int methodIndex)", "diff": ["-\t\tIMethod method = type.getMethod(new String(methodName), CharOperation.toStrings(parameterTypes));", "+\t\tString[] paramTypeSigs = CharOperation.NO_STRINGS;", "+\t\tif (parameterTypes.length > 0) {", "+\t\t\tint l = parameterTypes.length;", "+\t\t\tparamTypeSigs = new String[l];", "+\t\t\tfor (int i = 0; i < l; ++i) {", "+\t\t\t\tparamTypeSigs[i] = Signature.createTypeSignature(parameterTypes[i], false);", "+\t\t\t}", "+\t\t}", "+\t\tIMethod method = type.getMethod(new String(methodName), paramTypeSigs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c25841813738d16774f5e1df6a5bfb98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "fa2250802984cea8cb5424fd54457f3c16db0f4e", "commitAfterChange": "9dccafa0339bc7819f07b3f80a49e2da470c0aab", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding tiebreakMethod()", "signatureAfterChange": " \tpublic MethodBinding tiebreakMethod()", "diff": ["-\t */", "-//\t\t\tif (this.isRaw) {", "-//\t\t\t\tthis.tiebreakMethod = this;", "-//\t\t\t} else {", "-//\t\t\t\tthis.tiebreakMethod = new ParameterizedGenericMethodBinding(this.originalMethod, (RawTypeBinding)null, this.environment);", "+\t\t\tif (this.isStatic()) {", "+\t\t\t\tTypeVariableBinding[] originalVariables = originalMethod.typeVariables;", "+\t\t\t\tint length = originalVariables.length;", "+\t\t\t\tTypeBinding[] newArguments = new TypeBinding[length];", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tnewArguments[i] =  originalVariables[i].upperBound(); // do not rawify", "+\t\t\t\tthis.tiebreakMethod = this.environment.createParameterizedGenericMethod(this.originalMethod, newArguments);", "+\t\t\t} else {", "-//\t\t\t}", "+\t\t\t}"]}], "num": 38238}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "375b758e52a3210e46f33285b66690cc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "826bd0591eced3e5b30214bbb4602db3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "502ac8abc8910137c8c48c0b99f02c92a8a1a0bb", "commitAfterChange": "88902aca029742fa432be78ddccc5cc15b507f75", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "signatureAfterChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "diff": ["+\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\tSystem.out.println(\"JAVA MODEL - Canonicalizing \" + externalPath.toString());\r", "+\t\t}\r", "+\r", "+\t\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (member of workspace)\");\r", "+\t\t\t}\r", "+\t\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (IOException)\");\r", "+\t\t\t}\r", "+\t\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (canonical path is empty)\");\r", "+\t\t\t}\r", "+\t\t\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (canonical path is \" + canonicalPath.toString() + \")\");\r", "+\t\t\t\t}\r", "-\t\t\treturn result.setDevice(null);\r", "-\t\t} else {\r", "-\t\t\treturn result;\r", "+\t\t\tresult = result.setDevice(null);\r", "+\t\t} \r", "+\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is \" + result.toString());\r", "+\t\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87637dff170c4be0ca2518593f2abd69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/IncrementalImageBuilder.java", "commitBeforeChange": "ceb521e070d662becc4ec3ee749b1a95a26cea96", "commitAfterChange": "76e64f6d50988c18aa31100f2ef1486d1924fea9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r protected void findSourceFiles(IResourceDelta sourceDelta, int sourceFolderSegmentCount) throws CoreException", "signatureAfterChange": "\r \r protected void findSourceFiles(IResourceDelta sourceDelta, int sourceFolderSegmentCount) throws CoreException", "diff": ["-\t\t\t\t\t\ttypeNames.add(typePath.setDevice(null).toString());\r", "-\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "-\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of added source file \" + typePath); //$NON-NLS-1$\r", "-\t\t\t\t\t\taddDependentsOf(typePath, true);\r", "+\t\t\t\t\t\tString typeName = typePath.setDevice(null).toString();\r", "+\t\t\t\t\t\ttypeNames.add(typeName);\r", "+\t\t\t\t\t\tif (!newState.isDuplicateLocation(typeName, sourceLocation)) {\r", "+\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of added source file \" + typePath); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\taddDependentsOf(typePath, true);\r", "+\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t} else if (definedTypeNames.length == 0) { // failed to successfully define a type\r", "-\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "-\t\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of removed empty source file \" + typePath); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\taddDependentsOf(typePath, true);\r", "-\t\t\t\t\t\t} else { // defined multiple types\r", "+\t\t\t\t\t\t} else if (definedTypeNames.length > 0) { // ignore it if it failed to successfully define a type\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd4f28bbad97da75f14adb13ff4da7de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/IncrementalImageBuilder.java", "commitBeforeChange": "9972a270d052b806463661287625f0d281667e4e", "commitAfterChange": "79c96bc51135904745e51a2c90ed269611b0cb4a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r protected void findSourceFiles(IResourceDelta sourceDelta, int sourceFolderSegmentCount) throws CoreException", "signatureAfterChange": "\r \r protected void findSourceFiles(IResourceDelta sourceDelta, int sourceFolderSegmentCount) throws CoreException", "diff": ["+\t\t\t\tString sourceLocation = location.toString();\r", "-\t\t\t\t\t\tlocations.add(location.toString());\r", "+\t\t\t\t\t\tlocations.add(sourceLocation);\r", "-\t\t\t\t\t\tchar[][] definedTypeNames = newState.getDefinedTypeNamesFor(location.toString());\r", "-\t\t\t\t\t\tif (definedTypeNames == null || definedTypeNames.length == 0) {\r", "+\t\t\t\t\t\tchar[][] definedTypeNames = newState.getDefinedTypeNamesFor(sourceLocation);\r", "+\t\t\t\t\t\tif (definedTypeNames == null) { // defined a single type matching typePath\r", "-\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t} else if (definedTypeNames.length == 0) { // failed to successfully define a type\r", "+\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of removed empty source file \" + typePath); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\taddDependentsOf(typePath, true);\r", "+\t\t\t\t\t\t} else { // defined multiple types\r", "-\t\t\t\t\t\tlocations.add(sourceDelta.getResource().getLocation().toString());\r", "+\t\t\t\t\t\tlocations.add(sourceLocation);\r", "+\t\t\t\t\t\tchar[][] previousTypeNames = newState.getDefinedTypeNamesFor(sourceLocation);\r", "+\t\t\t\t\t\tif (previousTypeNames != null && previousTypeNames.length == 0) {\r", "+\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of changed empty source file \" + typePath); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\taddDependentsOf(typePath, true);\r", "+\t\t\t\t\t\t}\r"]}], "num": 27497}
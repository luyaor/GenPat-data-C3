{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a228e2522e6fbea6c0f22d6cbda1af9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28b55f79db79a1edfc15d21056274520", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tpublic void test109636_4()", "signatureAfterChange": "  \tpublic void test109636_4()", "diff": ["-\t\t\t\t\" * setLeadingComment(\\\"/&#42; traditional comment &#42;/\\\"); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"missing comment delimiters\\\"); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"/&#42; unterminated traditional comment \\\"); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"/&#42; broken\\\\n traditional comment &#42;/\\\"); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment\\\\n\\\"); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment without line terminator\\\"); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"// broken\\\\n end-of-line comment\\\\n\\\"); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;missing comment delimiters&quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* unterminated traditional comment &quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* broken\\\\n traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment\\\\n&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment without line terminator&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// broken\\\\n end-of-line comment\\\\n&quot;); // wrong\" + DELIMITER +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2981e205e0670baefd30458f03b50617", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 524, "methodNumberAfterChange": 524, "signatureBeforeChange": " \tpublic void test0506()", "signatureAfterChange": " \tpublic void test0506()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" +", "-\t\t\t\"\t                 ^^^^\\n\" +", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" +", "-\t\t\t\"\t                                 ^^^^^^^^^^\\n\" +", "-\t\t\t\"Comparator is a raw type. References to generic type Comparator<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" +", "-\t\t\t\"\t                                                        ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tfoo(list, comparator);\\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation foo(List, Comparator) of the generic method foo(List<T>, Comparator<? super T>) of type X<E>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tfoo(list, comparator);\\n\" +", "-\t\t\t\"\t    ^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tfoo(list, comparator);\\n\" +", "-\t\t\t\"\t          ^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tbar(list, comparator);\\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation bar(List, Comparator) of the generic method bar(List<T>, Comparator<? super T>) of type X<E>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"8. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tbar(list, comparator);\\n\" +", "-\t\t\t\"\t    ^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"9. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tbar(list, comparator);\\n\" +", "-\t\t\t\"\t          ^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"10. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tx.foo(list, comparator);\\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The method foo(List, Comparator) belongs to the raw type X. References to generic type X<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"11. WARNING in X.java (at line 11)\\n\" +", "-\t\t\t\"\tx.bar(list, comparator);\\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The static method bar(List, Comparator) from the type X should be accessed in a static way\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"12. WARNING in X.java (at line 11)\\n\" +", "-\t\t\t\"\tx.bar(list, comparator);\\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation bar(List, Comparator) of the generic method bar(List<T>, Comparator<? super T>) of type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"13. WARNING in X.java (at line 11)\\n\" +", "-\t\t\t\"\tx.bar(list, comparator);\\n\" +", "-\t\t\t\"\t      ^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"14. WARNING in X.java (at line 11)\\n\" +", "-\t\t\t\"\tx.bar(list, comparator);\\n\" +", "-\t\t\t\"\t            ^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"15. ERROR in X.java (at line 18)\\n\" +", "-\t\t\t\"\tZork z;\\n\" +", "-\t\t\t\"\t^^^^\\n\" +", "-\t\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" + ", "+\t\t\t\"\t                 ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Comparator is a raw type. References to generic type Comparator<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" + ", "+\t\t\t\"\t                                                        ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tfoo(list, comparator);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation foo(List, Comparator) of the generic method foo(List<T>, Comparator<? super T>) of type X<E>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tfoo(list, comparator);\\n\" + ", "+\t\t\t\"\t    ^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tfoo(list, comparator);\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tbar(list, comparator);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation bar(List, Comparator) of the generic method bar(List<T>, Comparator<? super T>) of type X<E>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tbar(list, comparator);\\n\" + ", "+\t\t\t\"\t    ^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tbar(list, comparator);\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tx.foo(list, comparator);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method foo(List, Comparator) belongs to the raw type X. References to generic type X<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tx.bar(list, comparator);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The static method bar(List<Object>, Comparator<? super Object>) from the type X should be accessed in a static way\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tx.bar(list, comparator);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation bar(List, Comparator) of the generic method bar(List<T>, Comparator<? super T>) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tx.bar(list, comparator);\\n\" + ", "+\t\t\t\"\t      ^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tx.bar(list, comparator);\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"15. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cf4e7fdad9a4836d145c91f58a2620b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void test08() throws JavaModelException", "signatureAfterChange": "  \tpublic void test08() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"field {key=LTest;.field} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"String {key=Ljava/lang/String;} [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"String {key=Ljava/lang/String;} [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36089b04278179936e6043f5e4c1c381", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Allocation() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Allocation() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\ttype.def.Types field = new \ufffd|type.def.Types|\ufffd(), local, other = new type.def.Types();@158] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.other [\ttype.def.Types field = new type.def.Types(), local, other = new \ufffd|type.def.Types|\ufffd();@195] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new \ufffd|TestTypes|\ufffd();@297] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new \ufffd|type.def.Types|\ufffd();@356] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\tObject obj = new \ufffd|type.def.Types|\ufffd();@591] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.str = new \ufffd|String|\ufffd();@1032] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.object = new \ufffd|Object|\ufffd();@1063] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\ttype.def.Types field = new !|type.def.Types|!(), local, other = new type.def.Types();@158] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.other [\ttype.def.Types field = new type.def.Types(), local, other = new !|type.def.Types|!();@195] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new !|TestTypes|!();@297] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new !|type.def.Types|!();@356] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\tObject obj = new !|type.def.Types|!();@591] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.str = new !|String|!();@1032] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.object = new !|Object|!();@1063] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "484a66283250dbfe496ad07122f815d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test014()", "signatureAfterChange": " \tpublic void test014()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    16  iload_1\\n\" + ", "+\t\t\t\"    16  iload_1 [b]\\n\" + ", "-\t\t\t\"    28  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    31  iload_2\\n\" + ", "-\t\t\t\"    32  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    28  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    31  iload_2 [i]\\n\" + ", "+\t\t\t\"    32  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48d459958e1245e2c8c0b89fe9a213df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test038()", "signatureAfterChange": " \tpublic void test038()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    16  iload_1\\n\" + ", "+\t\t\t\"    16  iload_1 [b]\\n\" + ", "-\t\t\t\"    29  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    32  iload_2\\n\" + ", "-\t\t\t\"    33  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    29  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    32  iload_2 [i]\\n\" + ", "+\t\t\t\"    33  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f962719fffc24a57225bbf0b4471d84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tpublic void test109636_4()", "signatureAfterChange": "  \tpublic void test109636_4()", "diff": ["-\t\t\t\t\" * setLeadingComment(&quot;/* traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;missing comment delimiters&quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;/* unterminated traditional comment &quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;/* broken\\\\n traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment\\\\n&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment without line terminator&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// broken\\\\n end-of-line comment\\\\n&quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; traditional comment &#42;/\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"missing comment delimiters\\\"); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; unterminated traditional comment \\\"); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; broken\\\\n traditional comment &#42;/\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment\\\\n\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment without line terminator\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// broken\\\\n end-of-line comment\\\\n\\\"); // wrong\" + DELIMITER +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "740ae60a7b76a95c8e14c152077b86f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "\r public void test0073() throws IOException", "signatureAfterChange": "\r public void test0073() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@J\"));\r", "-\tassertEquals(\"Wrong location\", \"{2}\", locations.get(\"@A\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0,2}\", locations.get(\"@H\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0,1}\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY]\", locations.get(\"@J\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY]\", locations.get(\"@A\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1)]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@G\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79505a67a32bc49a1ed7cb6b15760e22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "448d62b2ff66cd7ed3c1bda65bd5259a6d0971b0", "commitAfterChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "methodNumberBeforeChange": 574, "methodNumberAfterChange": 575, "signatureBeforeChange": " public void testBug247564h_2()", "signatureAfterChange": " public void testBug247564h_2()", "diff": ["-// to make sure that id's of local variables in inner classes don't conflict with those of fields.", "+// to make sure that id's of local variables in inner classes dotn conflict with those of fields.", "-\t\t\t\"\t    void goo(Object var) {\\n\" +", "-\t\t\t\"    \t   if (var == null && field4.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \t   if (var == null && field5.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \t   if (field3 == null && field3.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \t   if (field3 == null && field1.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"       }\\n\" +", "+\t\t\t\"\t void goo(Object var) {\\n\" +", "+\t\t\t\"    \tif (var == null && field4.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \tif (var == null && field5.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \tif (field3 == null && field3.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \tif (field3 == null && field1.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    Object field22;\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"  Object field22;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b461eef4b993d7cf879008a1ad77a78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 432, "methodNumberAfterChange": 433, "signatureBeforeChange": " \tpublic void test429()", "signatureAfterChange": " \tpublic void test429()", "diff": ["-\t\t\t\"Bound conflict: Comparable<X5> is inherited with conflicting arguments\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X5> and Comparable<Y>\\n\" + ", "-\t\t\t\"1. ERROR in X6.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tclass X6 <T extends Y & Comparable<X6>> {}\\r\\n\" + ", "+\t\t\t\"1. ERROR in X6.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass X6 <T extends Y & Comparable<X6>> {}\\n\" + ", "-\t\t\t\"Bound conflict: Comparable<X6> is inherited with conflicting arguments\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X6> and Comparable<Z>\\n\" + ", "-\t\t\t\"1. ERROR in X7.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tclass X7 <T extends Comparable<Z> & Comparable<X7>> {}\\r\\n\" + ", "+\t\t\t\"1. ERROR in X7.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass X7 <T extends Comparable<Z> & Comparable<X7>> {}\\n\" + ", "-\t\t\t\"Bound conflict: Comparable<X7> is inherited with conflicting arguments\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X7> and Comparable<Z>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e7b5b72b2a3f01bfabf97cb7c5a1791", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testTypeRef_Annotation() throws CoreException", "signatureAfterChange": " public void testTypeRef_Annotation() throws CoreException", "diff": ["-\t\t\"src/type/def/Types.java type.def.Types [@\ufffd|Bug|\ufffd@19] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest1 [@\ufffd|Bug|\ufffd@128] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ETest [@\ufffd|Bug|\ufffd@195] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ATest [@\ufffd|Bug|\ufffd@221] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [@\ufffd|Bug|\ufffd(num=155013)@64] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t@\ufffd|Bug|\ufffd(comment=\\\"field\\\")@121] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t@\ufffd|Bug|\ufffd(comment=\\\"method\\\", num=155013)@158] EXACT_MATCH\"", "+\t\t\"src/type/def/Types.java type.def.Types [@!|Bug|!@19] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest1 [@!|Bug|!@128] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ETest [@!|Bug|!@195] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ATest [@!|Bug|!@221] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [@!|Bug|!(num=155013)@64] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t@!|Bug|!(comment=\\\"field\\\")@121] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t@!|Bug|!(comment=\\\"method\\\", num=155013)@158] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84921bc3f160eb7fc609462d85c48c56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d6c2a90130be430285c5f6a000090d250c310afd", "commitAfterChange": "51e1f00f8d474f0b209b47afa85e44328a517f92", "methodNumberBeforeChange": 575, "methodNumberAfterChange": 574, "signatureBeforeChange": " public void testBug247564h_2()", "signatureAfterChange": " public void testBug247564h_2()", "diff": ["-// to make sure that id's of local variables in inner classes dotn conflict with those of fields.", "+// to make sure that id's of local variables in inner classes don't conflict with those of fields.", "-\t\t\t\"\t void goo(Object var) {\\n\" +", "-\t\t\t\"    \tif (var == null && field4.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \tif (var == null && field5.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \tif (field3 == null && field3.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \tif (field3 == null && field1.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"\t    void goo(Object var) {\\n\" +", "+\t\t\t\"    \t   if (var == null && field4.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \t   if (var == null && field5.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \t   if (field3 == null && field3.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \t   if (field3 == null && field1.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"       }\\n\" +", "-\t\t\t\"    }\\n\" +", "-\t\t\t\"  Object field22;\\n\" +", "+\t\t\t\"    Object field22;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48449d8d08ca588212d8654e004aa68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void test0061()", "signatureAfterChange": " \tpublic void test0061()", "diff": ["-\t\t\t\t\"1. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t  ^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"int\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t       ^^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"short\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t              ^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"long\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t                    ^^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"float\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"5. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t                           ^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"double\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"6. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t                                   ^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"boolean\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"7. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t                                            ^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"char\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t  ^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t       ^^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t              ^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t                    ^^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t                           ^^^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t                                   ^^^^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t                                            ^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete ReferenceType\\n\" +", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0e15ea454141fbe4a237158e5fbd4f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"    -cp -classpath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" +", "+        \"    -cp -classpath <directories and ZIP archives separated by \" + File.pathSeparator + \">\\n\" +", "-        \"    -bootclasspath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" +", "+        \"    -bootclasspath <directories and ZIP archives separated by \" + File.pathSeparator + \">\\n\" +", "-        \"    -sourcepath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" +", "+        \"    -sourcepath <directories and ZIP archives separated by \" + File.pathSeparator + \">\\n\" +", "-        \"                       general ''-d'' option is specified. zip/jar files cannot\\n\" +", "+        \"                       general ''-d'' option is specified. ZIP archives cannot\\n\" +", "-        \"                       specify location for extension zip/jar files\\n\" +", "+        \"                       specify location for extension ZIP archives\\n\" +", "-        \"                       specify location for endorsed zip/jar files\\n\" +", "+        \"                       specify location for endorsed ZIP archives\\n\" +", "-        \"    -processorpath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "+        \"    -processorpath <directories and ZIP archives separated by \" + File.pathSeparator + \">\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5b8a414f39dc8990fbbe11d8706eb0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test009()", "signatureAfterChange": " \tpublic void test009()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    11  iload_1\\n\" + ", "+\t\t\t\"    11  iload_1 [b]\\n\" + ", "-\t\t\t\"    15  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    18  iload_2\\n\" + ", "-\t\t\t\"    19  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    18  iload_2 [i]\\n\" + ", "+\t\t\t\"    19  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd978312c97b8707475dfd13afd12f9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 332, "methodNumberAfterChange": 333, "signatureBeforeChange": " public void testBug330313_wksp2_01 ()", "signatureAfterChange": " public void testBug330313_wksp2_01 ()", "diff": ["-\t\t\"\t// comment\\n\" + ", "-\t\t\"\t{ \\\"STR1\\\",\\n\" + ", "-\t\t\"\t\t\tnew String[] { \\\"STR\\\", // comment\\n\" + ", "-\t\t\"\t\t\t\t\t\\\"STR\\\", // comment\\n\" + ", "-\t\t\"\t\t\t\t\t\\\"STR\\\" } // comment\\n\" + ", "-\t\t\"\t}\\n\" + ", "+\t\t\"\t\t\t{ \\\"STR1\\\",\\n\" + ", "+\t\t\"\t\t\t\t\t// comment\\n\" + ", "+\t\t\"\t\t\t\t\tnew String[] { \\\"STR\\\", // comment\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\\\"STR\\\", // comment\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\\\"STR\\\" } // comment\\n\" + ", "+\t\t\"\t\t\t}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e75a46f7e78be6041b32b1d21b181b65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "\r public void test0078() throws IOException", "signatureAfterChange": "\r public void test0078() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0,2}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0}\", locations.get(\"@D\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0,1}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0}\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0)]\", locations.get(\"@D\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1)]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]\", locations.get(\"@H\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e78510b7ffa6cb6f5babdff276b3bead", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void test043()", "signatureAfterChange": " \tpublic void test043()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    16  iload_1\\n\" + ", "+\t\t\t\"    16  iload_1 [b]\\n\" + ", "-\t\t\t\"    29  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    32  iload_2\\n\" + ", "-\t\t\t\"    33  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    29  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    32  iload_2 [i]\\n\" + ", "+\t\t\t\"    33  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}], "num": 23917}
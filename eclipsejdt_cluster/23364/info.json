{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff9dd0ce7fef419c231d3a34bfda9ada", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33aad36481081fec58d04d8eb245f110", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e6d5c8658dcb2261d05af5cdc17c2490045274a2", "commitAfterChange": "860ea62c67f5396f6f9d3dd7b840bac85b92d32f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "-\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations))", "-\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "-\t\t\t} else {", "-\t\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "-\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations)) {", "-\t\t\t\t\t\tmethod.returnType = method.returnType.unannotated();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "-\t\t\t\t\t\tmethod.returnType = this.scope.environment().createAnnotatedType(method.returnType, nullTagBits);", "+\t\t\tif (nullTagBits != 0) {", "+\t\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "+\t\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations))", "+\t\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations)) {", "+\t\t\t\t\t\t\tmethod.returnType = method.returnType.unannotated();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "+\t\t\t\t\t\t\tmethod.returnType = this.scope.environment().createAnnotatedType(method.returnType, nullTagBits);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "-\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af8710f273e3968afd0d735aa063f54e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "diff": ["-\t\ttype.superInterfaces = new TypeReference[interfaceCount];", "-\t\tfor (int i = 0; i < interfaceCount; i++) {", "-\t\t\ttype.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end);", "-\t\t\ttype.superInterfaces[i].bits |= ASTNode.IsSuperType;", "+\t\tif (interfaceCount > 0) {", "+\t\t\ttype.superInterfaces = new TypeReference[interfaceCount];", "+\t\t\tfor (int i = 0; i < interfaceCount; i++) {", "+\t\t\t\ttype.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end);", "+\t\t\t\ttype.superInterfaces[i].bits |= ASTNode.IsSuperType;", "+\t\t\t}"]}], "num": 23364}
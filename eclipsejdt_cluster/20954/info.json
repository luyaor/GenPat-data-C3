{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de1818f7d35a251ae78068ba844da12e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a088d76eac25c71f2020b82ccde540cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "2d5ae4b83bba86ee43b5ce553dd35016785653f3", "commitAfterChange": "01e38e841985bd6d0c15a21fa45778848a00037e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprotected void faultInReceiverType(TypeBinding type)", "signatureAfterChange": "  \tprotected void faultInReceiverType(TypeBinding type)", "diff": ["-\t\t\tfaultInReceiverType(binaryType.enclosingType());", "-\t\t\tfaultInReceiverType(binaryType.superclass());", "+\t\t\tReferenceBinding enclosingType = binaryType.enclosingType();", "+\t\t\tif (enclosingType != null)", "+\t\t\t\tfaultInReceiverType(enclosingType);", "+\t\t\tReferenceBinding superclass = binaryType.superclass();", "+\t\t\tif (superclass != null)", "+\t\t\t\tfaultInReceiverType(superclass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de0c61a9c774c50380b211d16ab22768", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "8bcfa6844adee5e13c9b3da57f9a1e015de3ef98", "commitAfterChange": "610108f4e624d64f54e0d88631148888da90ec97", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-\t\tif (this.arguments == null) return;", "+\t\t// collect through enclosing type", "+\t\tReferenceBinding formalEnclosingType = formalEquivalent.enclosingType();", "+\t\tif (formalEnclosingType != null) {", "+\t\t\tformalEnclosingType.collectSubstitutes(scope, actualEquivalent.enclosingType(), substitutes, constraint);", "+\t\t}", "+\t\t// collect through type arguments", "+\t\tif (this.arguments == null) return;"]}], "num": 20954}
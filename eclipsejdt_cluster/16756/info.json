{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28669e63acf57d729b0b00fce94a626b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "276fb1fd793b1e5305179bd743345470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void find(char[] startWith, AbstractMethodDeclaration methodDeclaration, int from, UnresolvedReferenceNameRequestor nameRequestor)", "signatureAfterChange": " \t \tpublic void find( \t\t\tchar[] startWith, \t\t\tAbstractMethodDeclaration methodDeclaration, \t\t\tint from, \t\t\tchar[][] discouragedNames, \t\t\tUnresolvedReferenceNameRequestor nameRequestor)", "diff": ["-\tpublic void find(char[] startWith, AbstractMethodDeclaration methodDeclaration, int from, UnresolvedReferenceNameRequestor nameRequestor) {", "-\t\tMethodDeclaration fakeMethod = this.findAfter(startWith, methodDeclaration.scope, from, methodDeclaration.bodyEnd, MAX_LINE_COUNT, false, nameRequestor);", "+\tpublic void find(", "+\t\t\tchar[] startWith,", "+\t\t\tAbstractMethodDeclaration methodDeclaration,", "+\t\t\tint from,", "+\t\t\tchar[][] discouragedNames,", "+\t\t\tUnresolvedReferenceNameRequestor nameRequestor) {", "+\t\tMethodDeclaration fakeMethod = ", "+\t\t\tthis.findAfter(startWith, methodDeclaration.scope, from, methodDeclaration.bodyEnd, MAX_LINE_COUNT, false, discouragedNames, nameRequestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78408e09463ec612b03515ea92beab47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void findAfter(char[] startWith, Scope scope, ClassScope classScope, int from, int to, UnresolvedReferenceNameRequestor nameRequestor)", "signatureAfterChange": " \t \tpublic void findAfter( \t\t\tchar[] startWith, \t\t\tScope scope, \t\t\tClassScope classScope, \t\t\tint from, \t\t\tint to, \t\t\tchar[][] discouragedNames, \t\t\tUnresolvedReferenceNameRequestor nameRequestor)", "diff": ["-\tpublic void findAfter(char[] startWith, Scope scope, ClassScope classScope, int from, int to, UnresolvedReferenceNameRequestor nameRequestor) {", "-\t\tMethodDeclaration fakeMethod = this.findAfter(startWith, scope, from, to, MAX_LINE_COUNT / 2, true, nameRequestor);", "+\tpublic void findAfter(", "+\t\t\tchar[] startWith,", "+\t\t\tScope scope,", "+\t\t\tClassScope classScope,", "+\t\t\tint from,", "+\t\t\tint to,", "+\t\t\tchar[][] discouragedNames,", "+\t\t\tUnresolvedReferenceNameRequestor nameRequestor) {", "+\t\tMethodDeclaration fakeMethod =", "+\t\t\tthis.findAfter(startWith, scope, from, to, MAX_LINE_COUNT / 2, true, discouragedNames, nameRequestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d83187744c1d1c77e7a468d239849ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic void find(char[] startWith, Initializer initializer, ClassScope scope, int from, UnresolvedReferenceNameRequestor nameRequestor)", "signatureAfterChange": " \t \tpublic void find( \t\t\tchar[] startWith, \t\t\tInitializer initializer, \t\t\tClassScope scope, \t\t\tint from, \t\t\tchar[][] discouragedNames, \t\t\tUnresolvedReferenceNameRequestor nameRequestor)", "diff": ["-\tpublic void find(char[] startWith, Initializer initializer, ClassScope scope, int from, UnresolvedReferenceNameRequestor nameRequestor) {", "-\t\tMethodDeclaration fakeMethod = this.findAfter(startWith, scope, from, initializer.bodyEnd, MAX_LINE_COUNT, false, nameRequestor);", "+\tpublic void find(", "+\t\t\tchar[] startWith,", "+\t\t\tInitializer initializer,", "+\t\t\tClassScope scope,", "+\t\t\tint from,", "+\t\t\tchar[][] discouragedNames,", "+\t\t\tUnresolvedReferenceNameRequestor nameRequestor) {", "+\t\tMethodDeclaration fakeMethod = ", "+\t\t\tthis.findAfter(startWith, scope, from, initializer.bodyEnd, MAX_LINE_COUNT, false, discouragedNames, nameRequestor);"]}], "num": 16756}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a48d843392683c0dc43b842a5f18bf6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "467abb069d55323285f1e93320096538", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "6d4dee66f18491d80f490f87faf063aca0dd04ee", "commitAfterChange": "20d87d7260da51837a3bc4f2cefbc874868e947f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tString s = \"\"; //$NON-NLS-1$", "+\tStringBuffer buffer = new StringBuffer();", "-\tif (isDeprecated()) s += \"deprecated \"; //$NON-NLS-1$", "-\tif (isPublic()) s += \"public \"; //$NON-NLS-1$", "-\tif (isProtected()) s += \"protected \"; //$NON-NLS-1$", "-\tif (isPrivate()) s += \"private \"; //$NON-NLS-1$", "-\tif (isAbstract() && isClass()) s += \"abstract \"; //$NON-NLS-1$", "-\tif (isStatic() && isNestedType()) s += \"static \"; //$NON-NLS-1$", "-\tif (isFinal()) s += \"final \"; //$NON-NLS-1$", "+\tif (isDeprecated()) buffer.append(\"deprecated \"); //$NON-NLS-1$", "+\tif (isPublic()) buffer.append(\"public \"); //$NON-NLS-1$", "+\tif (isProtected()) buffer.append(\"protected \"); //$NON-NLS-1$", "+\tif (isPrivate()) buffer.append(\"private \"); //$NON-NLS-1$", "+\tif (isAbstract() && isClass()) buffer.append(\"abstract \"); //$NON-NLS-1$", "+\tif (isStatic() && isNestedType()) buffer.append(\"static \"); //$NON-NLS-1$", "+\tif (isFinal()) buffer.append(\"final \"); //$NON-NLS-1$", "-\ts += isInterface() ? \"interface \" : \"class \"; //$NON-NLS-1$ //$NON-NLS-2$", "-\ts += (compoundName != null) ? CharOperation.toString(compoundName) : \"UNNAMED TYPE\"; //$NON-NLS-1$", "+\tif (isEnum()) buffer.append(\"enum \"); //$NON-NLS-1$", "+\telse if (isAnnotationType()) buffer.append(\"@interface \"); //$NON-NLS-1$", "+\telse if (isClass()) buffer.append(\"class \"); //$NON-NLS-1$", "+\telse buffer.append(\"interface \"); //$NON-NLS-1$\t", "+\tbuffer.append((compoundName != null) ? CharOperation.toString(compoundName) : \"UNNAMED TYPE\"); //$NON-NLS-1$", "-\ts += \"\\n\\textends \"; //$NON-NLS-1$", "-\ts += (superclass != null) ? superclass.debugName() : \"NULL TYPE\"; //$NON-NLS-1$", "+\tbuffer.append(\"\\n\\textends \"); //$NON-NLS-1$", "+\tbuffer.append((superclass != null) ? superclass.debugName() : \"NULL TYPE\"); //$NON-NLS-1$", "-\t\t\ts += \"\\n\\timplements : \"; //$NON-NLS-1$", "+\t\t\tbuffer.append(\"\\n\\timplements : \"); //$NON-NLS-1$", "-\t\t\t\t\ts += \", \"; //$NON-NLS-1$", "-\t\t\t\ts += (superInterfaces[i] != null) ? superInterfaces[i].debugName() : \"NULL TYPE\"; //$NON-NLS-1$", "+\t\t\t\t\tbuffer.append(\", \"); //$NON-NLS-1$", "+\t\t\t\tbuffer.append((superInterfaces[i] != null) ? superInterfaces[i].debugName() : \"NULL TYPE\"); //$NON-NLS-1$", "-\t\ts += \"NULL SUPERINTERFACES\"; //$NON-NLS-1$", "+\t\tbuffer.append(\"NULL SUPERINTERFACES\"); //$NON-NLS-1$", "-\t\ts += \"\\n\\tenclosing type : \"; //$NON-NLS-1$", "-\t\ts += enclosingType.debugName();", "+\t\tbuffer.append(\"\\n\\tenclosing type : \"); //$NON-NLS-1$", "+\t\tbuffer.append(enclosingType.debugName());", "-\t\t\ts += \"\\n/*   fields   */\"; //$NON-NLS-1$", "+\t\t\tbuffer.append(\"\\n/*   fields   */\"); //$NON-NLS-1$", "-\t\t\t\ts += (fields[i] != null) ? \"\\n\" + fields[i].toString() : \"\\nNULL FIELD\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tbuffer.append((fields[i] != null) ? \"\\n\" + fields[i].toString() : \"\\nNULL FIELD\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\ts += \"NULL FIELDS\"; //$NON-NLS-1$", "+\t\tbuffer.append(\"NULL FIELDS\"); //$NON-NLS-1$", "-\t\t\ts += \"\\n/*   methods   */\"; //$NON-NLS-1$", "+\t\t\tbuffer.append(\"\\n/*   methods   */\"); //$NON-NLS-1$", "-\t\t\t\ts += (methods[i] != null) ? \"\\n\" + methods[i].toString() : \"\\nNULL METHOD\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tbuffer.append((methods[i] != null) ? \"\\n\" + methods[i].toString() : \"\\nNULL METHOD\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\ts += \"NULL METHODS\"; //$NON-NLS-1$", "+\t\tbuffer.append(\"NULL METHODS\"); //$NON-NLS-1$", "-\t\t\ts += \"\\n/*   members   */\"; //$NON-NLS-1$", "+\t\t\tbuffer.append(\"\\n/*   members   */\"); //$NON-NLS-1$", "-\t\t\t\ts += (memberTypes[i] != null) ? \"\\n\" + memberTypes[i].toString() : \"\\nNULL TYPE\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tbuffer.append((memberTypes[i] != null) ? \"\\n\" + memberTypes[i].toString() : \"\\nNULL TYPE\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\ts += \"NULL MEMBER TYPES\"; //$NON-NLS-1$", "+\t\tbuffer.append(\"NULL MEMBER TYPES\"); //$NON-NLS-1$", "-\ts += \"\\n\\n\\n\"; //$NON-NLS-1$", "-\treturn s;", "+\tbuffer.append(\"\\n\\n\\n\"); //$NON-NLS-1$", "+\treturn buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b304c5b0ab7451445cb36e84c848b66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 36, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tString s = \"(id=\"+(id == NoId ? \"NoId\" : (\"\"+id) ) +\")\\n\"; //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-4$ //$NON-NLS-1$", "+    StringBuffer buffer = new StringBuffer(30);", "+    buffer.append(\"(id=\"); //$NON-NLS-1$", "+    if (id == NoId) ", "+        buffer.append(\"NoId\"); //$NON-NLS-1$", "+    else ", "+        buffer.append(id);", "+    buffer.append(\")\\n\"); //$NON-NLS-1$", "+\tif (isDeprecated()) buffer.append(\"deprecated \"); //$NON-NLS-1$", "+\tif (isPublic()) buffer.append(\"public \"); //$NON-NLS-1$", "+\tif (isProtected()) buffer.append(\"protected \"); //$NON-NLS-1$", "+\tif (isPrivate()) buffer.append(\"private \"); //$NON-NLS-1$", "+\tif (isAbstract() && isClass()) buffer.append(\"abstract \"); //$NON-NLS-1$", "+\tif (isStatic() && isNestedType()) buffer.append(\"static \"); //$NON-NLS-1$", "+\tif (isFinal()) buffer.append(\"final \"); //$NON-NLS-1$", "-\tif (isDeprecated()) s += \"deprecated \"; //$NON-NLS-1$", "-\tif (isPublic()) s += \"public \"; //$NON-NLS-1$", "-\tif (isProtected()) s += \"protected \"; //$NON-NLS-1$", "-\tif (isPrivate()) s += \"private \"; //$NON-NLS-1$", "-\tif (isAbstract() && isClass()) s += \"abstract \"; //$NON-NLS-1$", "-\tif (isStatic() && isNestedType()) s += \"static \"; //$NON-NLS-1$", "-\tif (isFinal()) s += \"final \"; //$NON-NLS-1$", "+\tbuffer.append(isInterface() ? \"interface \" : \"class \"); //$NON-NLS-1$ //$NON-NLS-2$", "+\tbuffer.append((compoundName != null) ? CharOperation.toString(compoundName) : \"UNNAMED TYPE\"); //$NON-NLS-1$", "-\ts += isInterface() ? \"interface \" : \"class \"; //$NON-NLS-1$ //$NON-NLS-2$", "-\ts += (compoundName != null) ? CharOperation.toString(compoundName) : \"UNNAMED TYPE\"; //$NON-NLS-1$", "-", "-\ts += \"\\n\\textends \"; //$NON-NLS-1$", "-\ts += (superclass != null) ? superclass.debugName() : \"NULL TYPE\"; //$NON-NLS-1$", "+\tif (this.typeVariables != null && this.typeVariables != NoTypeVariables) {", "+\t\tbuffer.append(\"\\n\\t<\"); //$NON-NLS-1$", "+\t\tfor (int i = 0, length = this.typeVariables.length; i < length; i++) {", "+\t\t\tif (i  > 0)", "+\t\t\t\tbuffer.append(\", \"); //$NON-NLS-1$", "+\t\t\tbuffer.append((this.typeVariables[i] != null) ? this.typeVariables[i].toString() : \"NULL TYPE VARIABLE\"); //$NON-NLS-1$", "+\t\t}", "+\t\tbuffer.append(\">\"); //$NON-NLS-1$", "+\t} else {", "+\t\tbuffer.append(\"<NULL TYPE VARIABLES>\"); //$NON-NLS-1$", "+\t}", "+\tbuffer.append(\"\\n\\textends \"); //$NON-NLS-1$", "+\tbuffer.append((superclass != null) ? superclass.debugName() : \"NULL TYPE\"); //$NON-NLS-1$", "-\t\t\ts += \"\\n\\timplements : \"; //$NON-NLS-1$", "+\t\t\tbuffer.append(\"\\n\\timplements : \"); //$NON-NLS-1$", "-\t\t\t\t\ts += \", \"; //$NON-NLS-1$", "-\t\t\t\ts += (superInterfaces[i] != null) ? superInterfaces[i].debugName() : \"NULL TYPE\"; //$NON-NLS-1$", "+\t\t\t\t\tbuffer.append(\", \"); //$NON-NLS-1$", "+\t\t\t\tbuffer.append((superInterfaces[i] != null) ? superInterfaces[i].debugName() : \"NULL TYPE\"); //$NON-NLS-1$", "-\t\ts += \"NULL SUPERINTERFACES\"; //$NON-NLS-1$", "+\t\tbuffer.append(\"NULL SUPERINTERFACES\"); //$NON-NLS-1$", "-\t\ts += \"\\n\\tenclosing type : \"; //$NON-NLS-1$", "-\t\ts += enclosingType().debugName();", "+\t\tbuffer.append(\"\\n\\tenclosing type : \"); //$NON-NLS-1$", "+\t\tbuffer.append(enclosingType().debugName());", "-\t\t\ts += \"\\n/*   fields   */\"; //$NON-NLS-1$", "+\t\t\tbuffer.append(\"\\n/*   fields   */\"); //$NON-NLS-1$", "-\t\t\t\ts += (fields[i] != null) ? \"\\n\" + fields[i].toString() : \"\\nNULL FIELD\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t    buffer.append('\\n').append((fields[i] != null) ? fields[i].toString() : \"NULL FIELD\"); //$NON-NLS-1$ ", "-\t\ts += \"NULL FIELDS\"; //$NON-NLS-1$", "+\t\tbuffer.append(\"NULL FIELDS\"); //$NON-NLS-1$", "-\t\t\ts += \"\\n/*   methods   */\"; //$NON-NLS-1$", "+\t\t\tbuffer.append(\"\\n/*   methods   */\"); //$NON-NLS-1$", "-\t\t\t\ts += (methods[i] != null) ? \"\\n\" + methods[i].toString() : \"\\nNULL METHOD\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tbuffer.append('\\n').append((methods[i] != null) ? methods[i].toString() : \"NULL METHOD\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\ts += \"NULL METHODS\"; //$NON-NLS-1$", "+\t\tbuffer.append(\"NULL METHODS\"); //$NON-NLS-1$", "-\t\t\ts += \"\\n/*   members   */\"; //$NON-NLS-1$", "+\t\t\tbuffer.append(\"\\n/*   members   */\"); //$NON-NLS-1$", "-\t\t\t\ts += (memberTypes[i] != null) ? \"\\n\" + memberTypes[i].toString() : \"\\nNULL TYPE\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tbuffer.append('\\n').append((memberTypes[i] != null) ? memberTypes[i].toString() : \"NULL TYPE\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\ts += \"NULL MEMBER TYPES\"; //$NON-NLS-1$", "+\t\tbuffer.append(\"NULL MEMBER TYPES\"); //$NON-NLS-1$", "-\ts += \"\\n\\n\\n\"; //$NON-NLS-1$", "-\treturn s;", "+\tbuffer.append(\"\\n\\n\"); //$NON-NLS-1$", "+\treturn buffer.toString();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fba7e66e7118f4c51944fd9ad18148ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "commitAfterChange": "f0c87cd93521c02e8dcc20da91d9eeb9be1b3608", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public ConfigurableOption[] getConfigurableOptions(Locale locale)", "signatureAfterChange": "\r public void setOption(ConfigurableOption setting)", "diff": ["- */\r", "-public ConfigurableOption[] getConfigurableOptions(Locale locale) {\r", "-\tString componentName = CodeFormatter.class.getName();\r", "-\treturn new ConfigurableOption[] {\r", "-\t\tnew ConfigurableOption(componentName, \"newline.openingBrace\"/*nonNLS*/,  locale, newLineBeforeOpeningBraceMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"newline.controlStatement\"/*nonNLS*/,  locale, newlineInControlStatementMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"newline.clearAll\"/*nonNLS*/,  locale, clearAllBlankLinesMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"newline.elseIf\"/*nonNLS*/,  locale, compactElseIfMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"newline.emptyBlock\"/*nonNLS*/,  locale, newLineInEmptyBlockMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"line.split\"/*nonNLS*/,  locale, maxLineLength),\r", "-\t\tnew ConfigurableOption(componentName, \"style.compactAssignment\"/*nonNLS*/,  locale, compactAssignmentMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"tabulation.char\"/*nonNLS*/,  locale, indentWithTab ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"tabulation.size\"/*nonNLS*/,  locale, tabSize)\t\r", "-\t};\r", "-}\r", "+\tString componentName = CodeFormatter.class.getName();\r", "+\t\r", "+\tString optionID = setting.getID();\r", "+\t//String value = setting.getValue();\r", "+\t\r", "+\tif(optionID.equals(componentName+\".newlineOpeningBrace\"/*nonNLS*/)){\r", "+\t\tsetNewLineBeforeOpeningBraceMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".newlineControlStatement\"/*nonNLS*/)){\r", "+\t\tsetNewlineInControlStatementMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".newlineClearAll\"/*nonNLS*/)){\r", "+\t\tsetClearAllBlankLinesMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".newlineElseIf\"/*nonNLS*/)){\r", "+\t\tsetCompactElseIfMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".newlineEmptyBlock\"/*nonNLS*/)){\r", "+\t\tsetNewLineInEmptyBlockMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".lineSplit\"/*nonNLS*/)){\r", "+\t\tsetMaxLineLength(Integer.parseInt(setting.getValue()));\r", "+\t}else if(optionID.equals(componentName+\".styleCompactAssignment\"/*nonNLS*/)){\r", "+\t\tsetCompactAssignmentMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".tabulationChar\"/*nonNLS*/)){\r", "+\t\tsetIndentationUsesTab(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".tabulationSize\"/*nonNLS*/)){\r", "+\t\tsetTabSize(Integer.parseInt(setting.getValue()));\r"]}], "num": 22429}
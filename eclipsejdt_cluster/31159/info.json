{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d08a0e28442fb5fd25a95e1789ccd7d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49f7bf90ad253f0091762272acb7d211", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "957977037bae1c5fe509d6f5b83d064a1bf50d04", "commitAfterChange": "78430308e7d45c151f6732314055fefd33935867", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 15, "signatureBeforeChange": " protected IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type)", "signatureAfterChange": " protected IJavaElement createHandle(FieldDeclaration fieldDeclaration, TypeDeclaration typeDeclaration, IJavaElement parent)", "diff": ["+protected IJavaElement createHandle(FieldDeclaration fieldDeclaration, TypeDeclaration typeDeclaration, IJavaElement parent) {", "+\tif (!(parent instanceof IType)) return parent;", "+", "+\tif (fieldDeclaration.isField())", "+\t\treturn ((IType) parent).getField(new String(fieldDeclaration.name));", "+", "+\t// find occurence count of the given initializer in its type declaration", "+\tint occurrenceCount = 0;", "+\tFieldDeclaration[] fields = typeDeclaration.fields;", "+\tfor (int i = 0, length = fields.length; i < length; i++) {", "+\t\tif (!fields[i].isField()) {", "+\t\t\toccurrenceCount++;", "+\t\t\tif (fields[i].equals(fieldDeclaration)) break;", "+\t\t}", "+\t}", "+\treturn ((IType) parent).getInitializer(occurrenceCount);", "- */", "-protected IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type) {", "-\tif (type == null) return null;", "-", "-\t// find occurence count of the given initializer in its type declaration", "-\tint occurrenceCount = 0;", "-\tFieldDeclaration[] fields = typeDecl.fields;", "-\tfor (int i = 0, length = fields.length; i < length; i++) {", "-\t\tFieldDeclaration field = fields[i];", "-\t\tif (!field.isField()) {", "-\t\t\toccurrenceCount++;", "-\t\t\tif (field.equals(initializer)) break;", "-\t\t}", "-\t}", "-\treturn type.getInitializer(occurrenceCount);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d693ebb0f34355ed8571c327bc427725", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "5cb7a8282e40bea7ee7271bbdb7d8b845c76f5b3", "commitAfterChange": "2aa78105ee4089b7ff1a9a2c35425f71b0b156d5", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \tpublic void reportReference(\r \t\tAstNode reference,\r \t\tTypeDeclaration typeDeclaration,\r \t\tFieldDeclaration fieldDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportReference(\r \t\tAstNode reference,\r \t\tTypeDeclaration typeDeclaration,\r \t\tFieldDeclaration fieldDeclaration,\r \t\tIJavaElement parent,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["-\t\tchar[][] definingTypeNames,\r", "+\t\tIJavaElement parent,\r", "+\t\tIJavaElement enclosingElement;\r", "-\t\t\t// create defining field handle\r", "-\t\t\tIField field = this.createFieldHandle(fieldDeclaration, definingTypeNames);\r", "-\t\t\tif (field == null) return;\r", "+\t\t\tif (parent instanceof IType) {\r", "+\t\t\t\t// create defining field handle\r", "+\t\t\t\tenclosingElement = this.createFieldHandle(fieldDeclaration, (IType)parent);\r", "+\t\t\t\tif (enclosingElement == null) return;\r", "+\t\t\t} else {\r", "+\t\t\t\tenclosingElement = parent;\r", "+\t\t\t}\r", "-\t\t\t\tthis.pattern.matchReportReference(reference, field, accuracy, this);\r", "+\t\t\t\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);\r", "-\t\t\t\t\t\tfield,\r", "+\t\t\t\t\t\tenclosingElement,\r", "-\t\t\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, field, accuracy);\r", "+\t\t\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, enclosingElement, accuracy);\r", "-\t\t\t// create defining initializer\r", "-\t\t\tIInitializer initializer =\r", "-\t\t\t\tthis.createInitializerHandle(\r", "-\t\t\t\t\ttypeDeclaration,\r", "-\t\t\t\t\tfieldDeclaration,\r", "-\t\t\t\t\tdefiningTypeNames);\r", "-\t\t\tif (initializer == null) return;\r", "+\t\t\tif (parent instanceof IType) {\r", "+\t\t\t\t// create defining initializer\r", "+\t\t\t\tenclosingElement =\r", "+\t\t\t\t\tthis.createInitializerHandle(\r", "+\t\t\t\t\t\ttypeDeclaration,\r", "+\t\t\t\t\t\tfieldDeclaration,\r", "+\t\t\t\t\t\t(IType)parent);\r", "+\t\t\t\tif (enclosingElement == null) return;\r", "+\t\t\t} else {\r", "+\t\t\t\tenclosingElement = parent;\r", "+\t\t\t}\r", "-\t\t\t\t\tinitializer,\r", "+\t\t\t\t\tenclosingElement,\r", "-\t\t\t\t\t\tinitializer,\r", "+\t\t\t\t\t\tenclosingElement,\r", "-\t\t\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, initializer, accuracy);\r", "+\t\t\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, enclosingElement, accuracy);\r"]}], "num": 31159}
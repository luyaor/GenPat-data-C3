{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3348be6ea459b2e23f787ad13c24596d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a4901957000a85b88c9db50d865ca7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "97aa1dc82c96c4ef3bebbae850e5af4a78f8dcd4", "commitAfterChange": "92a7b5c8a7f265fdf9af699a7f44797a77112099", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprotected CompilationUnitProblemFinder( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean parseLiteralExpressionsAsConstants )", "signatureAfterChange": " \tprotected CompilationUnitProblemFinder( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean creatingAST)", "diff": ["-\t\tboolean parseLiteralExpressionsAsConstants ) {", "+\t\tboolean creatingAST) {", "-\t\tsuper(environment, policy, settings, requestor, problemFactory, parseLiteralExpressionsAsConstants );", "+\t\tsuper(environment,", "+\t\t\tpolicy,", "+\t\t\tsettings,", "+\t\t\trequestor,", "+\t\t\tproblemFactory,", "+\t\t\tcreatingAST/*parse literal expressions as constants if creating ast*/,", "+\t\t\tcreatingAST/*store annotations in the bindings if creating ast*/", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a5ecb6c4f128ebb0d05b3f2bed0a3a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "97aa1dc82c96c4ef3bebbae850e5af4a78f8dcd4", "commitAfterChange": "92a7b5c8a7f265fdf9af699a7f44797a77112099", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilationUnitResolver( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic CompilationUnitResolver( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tIProgressMonitor monitor)", "diff": ["-\t\tsuper(environment, policy, settings, requestor, problemFactory, false);", "-\t\tthis.lookupEnvironment.storeAnnotations = true; // store annotations in the bindings", "+\t\tsuper(environment, policy, settings, requestor, problemFactory, false, true/*store annotations in the bindings*/);"]}], "num": 1702}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49a52c3dd051a22287cbf0a103b724c6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a6073e931691e5195dba42e08e04e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "24ecdaaa88a3d3df53c6657b56b1c35a02f254d7", "commitAfterChange": "b77d2ea3108de5650fdc8f1f0c9f51bf7203159f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInSourcePackage( \t\t\tString name,  \t\t\tIPackageFragment pkg,  \t\t\tint firstDot,  \t\t\tboolean partialMatch,  \t\t\tString topLevelTypeName,  \t\t\tint acceptFlags, \t\t\tIJavaElementRequestor requestor)", "diff": ["-\tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor) {", "+\tprotected void seekTypesInSourcePackage(", "+\t\t\tString name, ", "+\t\t\tIPackageFragment pkg, ", "+\t\t\tint firstDot, ", "+\t\t\tboolean partialMatch, ", "+\t\t\tString topLevelTypeName, ", "+\t\t\tint acceptFlags,", "+\t\t\tIJavaElementRequestor requestor) {", "-\t\t\t\tint firstDot = name.indexOf('.');", "-\t\t\t\tString topLevelTypeName = firstDot == -1 ? name : name.substring(0, firstDot);", "-\t\t\t\t", "-\t\t\t\t// look in unitsToLookInside first", "-\t\t\t\tHashMap typeMap = (HashMap) (this.unitsToLookInside == null ? null : this.unitsToLookInside.get(pkg));", "-\t\t\t\tif (typeMap != null) {", "-\t\t\t\t\tObject object = typeMap.get(topLevelTypeName);", "-\t\t\t\t\tif (object instanceof IType) {", "-\t\t\t\t\t\tIType type = getMemberType((IType) object, name, firstDot);", "-\t\t\t\t\t\tif (acceptType(type, acceptFlags, true/*a source type*/)) {", "-\t\t\t\t\t\t\trequestor.acceptType(type);", "-\t\t\t\t\t\t\treturn; // don't continue with compilation unit", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if (object instanceof IType[]) {", "-\t\t\t\t\t\tIType[] topLevelTypes = (IType[]) object;", "-\t\t\t\t\t\tfor (int i = 0, length = topLevelTypes.length; i < length; i++) {", "-\t\t\t\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t\tIType type = getMemberType(topLevelTypes[i], name, firstDot);", "-\t\t\t\t\t\t\tif (acceptType(type, acceptFlags, true/*a source type*/)) {", "-\t\t\t\t\t\t\t\trequestor.acceptType(type);", "-\t\t\t\t\t\t\t\treturn; // return the first one", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// look in compilation units", "-\t\t\t\tString prefix = name.toLowerCase();", "-\t\t\t\tint firstDot = prefix.indexOf('.');", "-\t\t\t\t", "-\t\t\t\t// look in unitsToLookInside first", "-\t\t\t\tHashMap typeMap = (HashMap) (this.unitsToLookInside == null ? null : this.unitsToLookInside.get(pkg));", "-\t\t\t\tif (typeMap != null) {", "-\t\t\t\t\tIterator iterator = typeMap.values().iterator();", "-\t\t\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\tObject object = iterator.next();", "-\t\t\t\t\t\tif (object instanceof IType) {", "-\t\t\t\t\t\t\tseekTypesInTopLevelType(prefix, firstDot, (IType) object, requestor, acceptFlags);", "-\t\t\t\t\t\t} else if (object instanceof IType[]) {", "-\t\t\t\t\t\t\tIType[] topLevelTypes = (IType[]) object;", "-\t\t\t\t\t\t\tfor (int i = 0, length = topLevelTypes.length; i < length; i++)", "-\t\t\t\t\t\t\t\tseekTypesInTopLevelType(prefix, firstDot, topLevelTypes[i], requestor, acceptFlags);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// look in compilation units", "-\t\t\t\t\tString cuPrefix = firstDot == -1 ? prefix : prefix.substring(0, firstDot);", "+\t\t\t\t\tString cuPrefix = firstDot == -1 ? name : name.substring(0, firstDot);", "-\t\t\t\t\t\t\t\tseekTypesInTopLevelType(prefix, firstDot, types[j], requestor, acceptFlags);", "+\t\t\t\t\t\t\t\tseekTypesInTopLevelType(name, firstDot, types[j], requestor, acceptFlags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf24ca14ccfb5069435ea7eddb5b8d26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected int selectionEnd(ICompilationUnit cu, String commentText) throws JavaModelException", "signatureAfterChange": " \tprivate int[] selectionInfo(ICompilationUnit cu, String selection, int occurences) throws JavaModelException", "diff": ["+\t */", "+\tprivate int[] selectionInfo(ICompilationUnit cu, String selection, int occurences) throws JavaModelException {", "+\t\tString source = cu.getSource();", "+\t\tint index = occurences < 0 ? source.lastIndexOf(selection) : source.indexOf(selection);", "+\t\tint max = Math.abs(occurences)-1;", "+\t\tfor (int n=0; index >= 0 && n<max; n++) {", "+\t\t\tindex = occurences < 0 ? source.lastIndexOf(selection, index) : source.indexOf(selection, index+selection.length());", "+\t\t}", "+\t\tStringBuffer msg = new StringBuffer(\"Selection '\");", "+\t\tmsg.append(selection);", "+\t\tif (index >= 0) {", "+\t\t\tif (selection.startsWith(\"/**\")) { // comment is before", "+\t\t\t\tint start = source.indexOf(\"*/\", index);", "+\t\t\t\tif (start >=0) {", "+\t\t\t\t\treturn new int[] { start+2, selection.length()-(start+2-index) };", "+\t\t\t\t} else {", "+\t\t\t\t\tmsg.append(\"' starts with an unterminated comment\");", "+\t\t\t} else if (selection.endsWith(\"*/\")) { // comment is after", "+\t\t\t\tint end = source.lastIndexOf(\"/**\", index+selection.length());", "+\t\t\t\tif (end >=0) {", "+\t\t\t\t\treturn new int[] { index, index-end };", "+\t\t\t\t} else {", "+\t\t\t\t\tmsg.append(\"' ends with an unstartted comment\");", "+\t\t\t\t}", "+\t\t\t} else { // no comment => use whole selection", "+\t\t\t\treturn new int[] { index, selection.length() };", "+\t\t} else {", "+\t\t\tmsg.append(\"' was not found in \");", "+\t\tmsg.append(source);", "-\tprotected int selectionEnd(ICompilationUnit cu, String commentText) throws JavaModelException {", "-", "-\t\t// Get dom compilation unit", "-\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "-\t\tparser.setSource(cu);", "-\t\tparser.setResolveBindings(false);", "-", "-\t\t// Look for selection", "-\t\tfinal CompilationUnit unit = (CompilationUnit) parser.createAST(null);", "-\t\tList comments = unit.getCommentList();", "-\t\tJavadoc selectionComment = null;", "-\t\tfor (int i=0, size=comments.size(); i<size && selectionComment==null; i++) {", "-\t\t\tComment comment = (Comment) comments.get(i);", "-\t\t\tif (comment.isDocComment()) {", "-\t\t\t\tJavadoc javadoc = (Javadoc) comment;", "-\t\t\t\tif (javadoc.tags().size() == 1) {", "-\t\t\t\t\tTagElement tagElement = (TagElement) javadoc.tags().get(0);", "-\t\t\t\t\tif (tagElement.fragments().size() == 1) {", "-\t\t\t\t\t\tASTNode node = (ASTNode) tagElement.fragments().get(0);", "-\t\t\t\t\t\tif (node.getNodeType() == ASTNode.TEXT_ELEMENT) {", "-\t\t\t\t\t\t\tTextElement text = (TextElement) node;", "-\t\t\t\t\t\t\tif (commentText.equals(text.getText())) {", "-\t\t\t\t\t\t\t\tselectionComment = javadoc;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (selectionComment == null) {", "-\t\t\tStringBuffer msg = new StringBuffer(\"No javadoc comment /** \");", "-\t\t\tmsg.append(commentText);", "-\t\t\tmsg.append(\" */ was found in \");", "-\t\t\tmsg.append(cu.getElementName());", "-\t\t\tmsg.append(\":\\n\");", "-\t\t\tmsg.append(cu.getBuffer().getCharacters());", "-\t\t\tassertTrue(msg.toString(), false);", "-\t\t\treturn -1;", "-\t\t}", "-\t\treturn selectionComment.getStartPosition()+selectionComment.getLength();"]}], "num": 51181}
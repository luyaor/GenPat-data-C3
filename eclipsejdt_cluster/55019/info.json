{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cf7b8baec45e3210fd957df9dc407a1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2757d62560331b37036542ef22f5ca17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "667082d03e8bfe408693d885daad756a164263a3", "commitAfterChange": "8c67d56825136ce0d7026162576ad6997e930bdc", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tprivate void annotateType(Type type, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotations)", "signatureAfterChange": " \tprivate void annotateType(Type type, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotations)", "diff": ["-\t\t\tannotateType(arrayType, typeAnnotations);", "+\t\t\tif (typeAnnotations != null) {", "+\t\t\t\tannotateType(arrayType, typeAnnotations);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fa21593671711cf60f097edb4595aec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " private long findLastTypeArgumentInfo(TypeReference typeRef)", "signatureAfterChange": " private long findLastTypeArgumentInfo(TypeReference typeRef)", "diff": ["-\t\t\tfor (int i=lastTypeArguments.length-1; i>=0 && last==null; i++) {", "-\t\t\t\tlast = lastTypeArguments[i];", "+\t\t\tif (lastTypeArguments != null) {", "+\t\t\t\tfor (int i=lastTypeArguments.length-1; i>=0 && last==null; i++) {", "+\t\t\t\t\tlast = lastTypeArguments[i];", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b059075915984fae62a8484c2d11f8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 158, "methodNumberAfterChange": 158, "signatureBeforeChange": " \tpublic void secondaryTypesRemoving(IFile file, boolean cleanIndexCache)", "signatureAfterChange": " \tpublic void secondaryTypesRemoving(IFile file, boolean cleanIndexCache)", "diff": ["-\t\t\t\t\tfor (int i=0; i<filesCount; i++) {", "-\t\t\t\t\t\tindexingCache.remove(removed[i]);", "+\t\t\t\t\tif (removed != null) {", "+\t\t\t\t\t\tfor (int i=0; i<filesCount; i++) {", "+\t\t\t\t\t\t\tindexingCache.remove(removed[i]);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432bceded7d76c706d99b9c5712f467e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "3973964fa15a8c49d459282ce0d949753f7e2224", "commitAfterChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate static void trace( String s, ProcessorEnvImpl processorEnv )", "signatureAfterChange": " \t \tprivate static void trace( String s, ProcessorEnvImpl processorEnv )", "diff": ["-\t\t\ts = \"[ phase = \" + processorEnv.getPhase() + \", file = \" + getFileNamesForPrinting(processorEnv) +\" ]  \" + s; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\tif (processorEnv != null) {", "+\t\t\t\ts = \"[ phase = \" + processorEnv.getPhase() + \", file = \" + getFileNamesForPrinting(processorEnv) +\" ]  \" + s; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49891dc411c5c2a677f8e904695ee2b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "bc7116f109e564326b3e78f91d4a1f3d88927f34", "commitAfterChange": "64c77eef18b6427d5368be0eafa7e87c9e216dc9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \r \r private boolean hasBinaryDelta()", "signatureAfterChange": " \r \r private boolean hasBinaryDelta()", "diff": ["-\t\tfor (int i = 0, l = classFoldersAndJars.length; i < l; i++) {\r", "-\t\t\tIResource binaryResource = classFoldersAndJars[i]; // either a .class file folder or a zip/jar file\r", "-\t\t\tif (binaryResource != null) {\r", "-\t\t\t\tIResourceDelta binaryDelta = delta.findMember(binaryResource.getProjectRelativePath());\r", "-\t\t\t\tif (binaryDelta != null) return true;\r", "+\t\tif (classFoldersAndJars != null){\r", "+\t\t\tfor (int i = 0, l = classFoldersAndJars.length; i < l; i++) {\r", "+\t\t\t\tIResource binaryResource = classFoldersAndJars[i]; // either a .class file folder or a zip/jar file\r", "+\t\t\t\tif (binaryResource != null) {\r", "+\t\t\t\t\tIResourceDelta binaryDelta = delta.findMember(binaryResource.getProjectRelativePath());\r", "+\t\t\t\t\tif (binaryDelta != null) return true;\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a225662b793ccb25fef2e5b24d44d45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "42c41aa4b22cf23b608272c59dfd7ac53eae5c74", "commitAfterChange": "40e03c0f2cb6d68da836ee023d4bc741c1ef6388", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \t\r \tprotected boolean mustQualifyType(\r \t\tchar[] packageName,\r \t\tchar[] typeName)", "signatureAfterChange": "\r \t\r \tprotected boolean mustQualifyType(\r \t\tchar[] packageName,\r \t\tchar[] typeName)", "diff": ["-\r", "-\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "-\r", "-\t\t\tif (imports[i].onDemand) {\r", "-\t\t\t\tif (CharOperation.equals(imports[i].compoundName, compoundPackageName)) {\r", "-\t\t\t\t\tfor (int j = 0; j < imports.length; j++) {\r", "-\t\t\t\t\t\tif(i != j){\r", "-\t\t\t\t\t\t\tif(imports[j].onDemand) {\r", "-\t\t\t\t\t\t\t\tif(nameEnvironment.findType(typeName, imports[j].compoundName) != null){\r", "-\t\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\tif(CharOperation.equals(CharOperation.lastSegment(imports[j].readableName(), '.'), typeName)) {\r", "-\t\t\t\t\t\t\t\t\treturn true;\t\r", "+\t\tif (imports != null){\r", "+\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "+\t\t\t\tif (imports[i].onDemand) {\r", "+\t\t\t\t\tif (CharOperation.equals(imports[i].compoundName, compoundPackageName)) {\r", "+\t\t\t\t\t\tfor (int j = 0; j < imports.length; j++) {\r", "+\t\t\t\t\t\t\tif(i != j){\r", "+\t\t\t\t\t\t\t\tif(imports[j].onDemand) {\r", "+\t\t\t\t\t\t\t\t\tif(nameEnvironment.findType(typeName, imports[j].compoundName) != null){\r", "+\t\t\t\t\t\t\t\t\t\treturn true;\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tif(CharOperation.equals(CharOperation.lastSegment(imports[j].readableName(), '.'), typeName)) {\r", "+\t\t\t\t\t\t\t\t\t\treturn true;\t\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn false; // how do you match p1.p2.A.* ?\r", "-\t\t\t\t\treturn false; // how do you match p1.p2.A.* ?\r", "-\t\t\t\t}\r", "-\r", "-\t\t\t} else\r", "-\r", "-\t\t\t\tif (CharOperation.equals(imports[i].readableName(), readableTypeName)) {\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t\t}\r", "+\t\r", "+\t\t\t\t} else\r", "+\t\r", "+\t\t\t\t\tif (CharOperation.equals(imports[i].readableName(), readableTypeName)) {\r", "+\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t}\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fbd2cee9c69b81b620118d664f2cf4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " IMethod createBinaryMethodHandle(IType type, char[] methodSelector, char[][] argumentTypeNames, MatchLocator locator)", "signatureAfterChange": " IMethod createBinaryMethodHandle(IType type, char[] methodSelector, char[][] argumentTypeNames, MatchLocator locator)", "diff": ["-\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "-\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "-\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), argumentTypeNames[j]))", "-\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "+\t\t\t\t\tif (argumentTypeNames != null) {", "+\t\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "+\t\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "+\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), argumentTypeNames[j]))", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51235d62b5ebe6520e752452ca6145a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "c9c27c9ebff380d212b738c2eaa48c5625675e13", "commitAfterChange": "03dbaeb0be7fb0d4838167b51429df8c5c6e94a9", "methodNumberBeforeChange": 342, "methodNumberAfterChange": 342, "signatureBeforeChange": " protected CompilationUnitDeclaration endParse(int act)", "signatureAfterChange": " protected CompilationUnitDeclaration endParse(int act)", "diff": ["-\t\trecoveredElement.topElement().updateParseTree();", "+\t\t", "+\t\tif (recoveredElement != null) {", "+\t\t\trecoveredElement.topElement().updateParseTree();", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bcd2d1ca7807a9bd9a7a9f14b7168b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/NameEnvironment.java", "commitBeforeChange": "4c0128f8b7916766f71600c5a09deeca3606acf9", "commitAfterChange": "72576798a2c9c0c359b6a1891fb1b926dbb96230", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "signatureAfterChange": "\r \r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "diff": ["-\tfor (int i = 0, length = initialTypeNames.length; i < length; i++)\r", "-\t\tif (fullName.equals(initialTypeNames[i]))\r", "-\t\t\treturn null; // looking for a file which we know was provided at the beginning of the compilation\r", "-\r", "+\tif (initialTypeNames != null){\r", "+\t\tfor (int i = 0, length = initialTypeNames.length; i < length; i++)\r", "+\t\t\tif (fullName.equals(initialTypeNames[i]))\r", "+\t\t\t\treturn null; // looking for a file which we know was provided at the beginning of the compilation\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a789f6de1eb629fc469786fd064dfe5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1f3011a16a596c6b45d3fa0d438e471eb169f860", "commitAfterChange": "0456a0d7c2e14290878e38bf42667ae054123754", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": "\r protected void consumeToken(int type)", "signatureAfterChange": "\r protected void consumeToken(int type)", "diff": ["-\t\tfor (int i = 0, max = literals.length; i < max; i++) {\r", "-\t\t\tproblemReporter().nonExternalizedStringLiteral(literals[i]);\r", "+\t\t// could not reproduce, but this is the only NPE\r", "+\t\t// added preventive null check see PR 9035\r", "+\t\tif (literals != null) {\r", "+\t\t\tfor (int i = 0, max = literals.length; i < max; i++) {\r", "+\t\t\t\tproblemReporter().nonExternalizedStringLiteral(literals[i]);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76f3b058fb3242ce96679ef1625bc524", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "48aa990cddf66187fee96ecef74653a821fe4039", "commitAfterChange": "2acd248eb60573a009a5b58c86beac17419631cd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void setUp() throws Exception", "signatureAfterChange": " \tprotected void setUp() throws Exception", "diff": ["-\t\tthis.formatterOptions = JAVA_PROJECT.getOptions(true);", "+\t\tif (JAVA_PROJECT != null) {", "+\t\t\tthis.formatterOptions = JAVA_PROJECT.getOptions(true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a352e4d4bfb79f7938963db26976d67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "bed888bd269b2eda198b4adcd6f3a8b582afad18", "commitAfterChange": "6ec071ff72d783fa798d4c7ea86b2a2f7803e01d", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "signatureAfterChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "diff": ["-\t\t\tfor (int j = 0, count = itsInterfaces.length; j < count; j++) {", "-\t\t\t\tTypeBinding itsInterface = itsInterfaces[j];", "-\t\t\t\tTypeBinding superType = dim == 0 ? itsInterface : (TypeBinding)environment().createArrayType(itsInterface, dim); // recreate array if needed", "-\t\t\t\tif (!typesToVisit.contains(superType)) {", "-\t\t\t\t\ttypesToVisit.add(superType);", "-\t\t\t\t\tmax++;", "-\t\t\t\t\tTypeBinding superTypeErasure = (itsInterface.isTypeVariable() || itsInterface.isWildcard() /*&& !itsInterface.isCapture()*/) ? superType : superType.erasure();", "-\t\t\t\t\tif (superTypeErasure != superType) {", "-\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "-\t\t\t\t\t\tsomeInvocations.add(superType);", "-\t\t\t\t\t\tallInvocations.put(superTypeErasure, someInvocations);", "-\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\tif (itsInterfaces != null) { // can be null during code assist operations that use LookupEnvironment.completeTypeBindings(parsedUnit, buildFieldsAndMethods)", "+\t\t\t\tfor (int j = 0, count = itsInterfaces.length; j < count; j++) {", "+\t\t\t\t\tTypeBinding itsInterface = itsInterfaces[j];", "+\t\t\t\t\tTypeBinding superType = dim == 0 ? itsInterface : (TypeBinding)environment().createArrayType(itsInterface, dim); // recreate array if needed", "+\t\t\t\t\tif (!typesToVisit.contains(superType)) {", "+\t\t\t\t\t\ttypesToVisit.add(superType);", "+\t\t\t\t\t\tmax++;", "+\t\t\t\t\t\tTypeBinding superTypeErasure = (itsInterface.isTypeVariable() || itsInterface.isWildcard() /*&& !itsInterface.isCapture()*/) ? superType : superType.erasure();", "+\t\t\t\t\t\tif (superTypeErasure != superType) {", "+\t\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "+\t\t\t\t\t\t\tsomeInvocations.add(superType);", "+\t\t\t\t\t\t\tallInvocations.put(superTypeErasure, someInvocations);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f7c56cc65e0b1a980025175e19ff3e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "8c8cd78ee7d91af397b355193b993289ef7f4454", "commitAfterChange": "dab69163a24dbd341ec146b21a1806a7799bbbc6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public static void createJar(String[] javaPathsAndContents, String[] extraPathsAndContents, String jarPath, String[] classpath, String compliance, Map options) throws IOException", "signatureAfterChange": " public static void createJar(String[] javaPathsAndContents, String[] extraPathsAndContents, String jarPath, String[] classpath, String compliance, Map options) throws IOException", "diff": ["-\tcompileOptions.putAll(options);", "+\tif (options != null) {", "+\t\tcompileOptions.putAll(options);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8507f027f6642f6b99baacad2a5b1de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ff3d786f8b733e34cd64f8ef3efff230a2dbff42", "commitAfterChange": "d8e17e252326ade78baaea3eb05d18d16eaf07ae", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void checkSourceAttachmentChange(IResourceDelta delta, IResource res)", "signatureAfterChange": "  \tprivate void checkSourceAttachmentChange(IResourceDelta delta, IResource res)", "diff": ["-\t\t\t\t\troot.close();", "+\t\t\t\t\tif (root != null) {", "+\t\t\t\t\t\troot.close();", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93911576c6fe1f1d9ce7c8832a92bfff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementBuilder.java", "commitBeforeChange": "f7875034147ccd8d0394fde55ae89a4e6ecb2e45", "commitAfterChange": "a2ea87d1c5ef301691eaddfeca2630d042a49293", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\tSortMethodDeclaration(int sourceStart, int modifiers, char[] name, char[][] parametersNames, char[][] parametersTypes, char[][] thrownExceptions, char[] returnType)", "signatureAfterChange": " \t\tSortMethodDeclaration(int sourceStart, int modifiers, char[] name, char[][] parametersNames, char[][] parametersTypes, char[][] thrownExceptions, char[] returnType)", "diff": ["-\t\t\tthis.returnType = new String(returnType);", "+\t\t\tif (returnType != null) {", "+\t\t\t\tthis.returnType = new String(returnType);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d25e69ba4ea9aa7ba2b7b05c538c7e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Initializer.java", "commitBeforeChange": "d48c3936eb7643859e6c2cea0aecbe0fd30a502d", "commitAfterChange": "45a50f132d1a94817dc9fe333d375cdfb8483391", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic Initializer(Block block, int modifiers)", "signatureAfterChange": "  \tpublic Initializer(Block block, int modifiers)", "diff": ["-", "-\t\tdeclarationSourceStart = sourceStart = block.sourceStart;", "+\t\t", "+\t\tif (block != null) {", "+\t\t\tdeclarationSourceStart = sourceStart = block.sourceStart;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2d742b04b4978ac1025bbdd2b822b72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "f96cd0ecae0cba5d7e7fa39b67cc4c6c7e6eaa8e", "commitAfterChange": "67a18e4f65a6a995842d9a3b7571c2508b82d670", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\t\t\t\ttypeVars = enclosingMethod.typeVariables;", "+\t\t\t\tif (enclosingMethod != null) {", "+\t\t\t\t\ttypeVars = enclosingMethod.typeVariables;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b3252d26eeefc02306d44aa7d8cfda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "b89ef89b8b82c7a5d2e21ed9e4c3180d1054cb0a", "commitAfterChange": "f7411d0a028a62aa23533cbe212a3c9b2f96d62a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void shutdown()", "signatureAfterChange": " public void shutdown()", "diff": ["-\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {", "-\t\t\tString fileName = indexesFiles[i].getAbsolutePath();", "-\t\t\tif (!knownPaths.containsKey(fileName) && fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "-\t\t\t\tif (VERBOSE)", "-\t\t\t\t\tJobManager.verbose(\"Deleting index file \" + indexesFiles[i]); //$NON-NLS-1$", "-\t\t\t\tindexesFiles[i].delete();", "+\t\tif (indexesFiles != null) {", "+\t\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {", "+\t\t\t\tString fileName = indexesFiles[i].getAbsolutePath();", "+\t\t\t\tif (!knownPaths.containsKey(fileName) && fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\tJobManager.verbose(\"Deleting index file \" + indexesFiles[i]); //$NON-NLS-1$", "+\t\t\t\t\tindexesFiles[i].delete();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf6463308b3ba44300a7941affd292f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public JavaSearchNameEnvironment(IJavaProject javaProject, org.eclipse.jdt.core.ICompilationUnit[] copies)", "signatureAfterChange": " \t public JavaSearchNameEnvironment(IJavaProject javaProject, org.eclipse.jdt.core.ICompilationUnit[] copies)", "diff": ["-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = copies[i];", "-\t\t\tIPackageDeclaration[] pkgs = workingCopy.getPackageDeclarations();", "-\t\t\tString pkg = pkgs.length > 0 ? pkgs[0].getElementName() : \"\"; //$NON-NLS-1$", "-\t\t\tString cuName = workingCopy.getElementName();", "-\t\t\tString mainTypeName = Util.getNameWithoutJavaLikeExtension(cuName);", "-\t\t\tString qualifiedMainTypeName = pkg.length() == 0 ? mainTypeName : pkg.replace('.', '/') + '/' + mainTypeName;", "-\t\t\tthis.workingCopies.put(qualifiedMainTypeName, workingCopy);", "+\t\tif (copies != null) {", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = copies[i];", "+\t\t\t\tIPackageDeclaration[] pkgs = workingCopy.getPackageDeclarations();", "+\t\t\t\tString pkg = pkgs.length > 0 ? pkgs[0].getElementName() : \"\"; //$NON-NLS-1$", "+\t\t\t\tString cuName = workingCopy.getElementName();", "+\t\t\t\tString mainTypeName = Util.getNameWithoutJavaLikeExtension(cuName);", "+\t\t\t\tString qualifiedMainTypeName = pkg.length() == 0 ? mainTypeName : pkg.replace('.', '/') + '/' + mainTypeName;", "+\t\t\t\tthis.workingCopies.put(qualifiedMainTypeName, workingCopy);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8e19559423fe61677ed739d6fdc0f17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "28746d11ccbd26f27de3e6f37e37aa3059c91ec1", "commitAfterChange": "cbaf16ad0859cb1637417b40466837eb3e833f00", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r protected Buffer(IFile file, IOpenable owner, boolean readOnly)", "signatureAfterChange": "\r protected Buffer(IFile file, IOpenable owner, boolean readOnly)", "diff": ["-\tsetReadOnly(readOnly);\r", "+\tif (file == null) {\r", "+\t\tsetReadOnly(readOnly);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de232227d5a70fb9e810c5b20a5a371e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "75626c86f330665d1108699a16e66c07439f9416", "commitAfterChange": "bef3e5a79fe47869598af3178c0ba26481433802", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "signatureAfterChange": " \t \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "diff": ["-\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "-\t\t\t\t\t\tConstant cst = inits[j].constant;", "-\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "-\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\t\tif (irritant != 0) {", "-\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "-\t\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(inits[j]);", "+\t\t\t\t\tif (inits != null) {", "+\t\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "+\t\t\t\t\t\t\tConstant cst = inits[j].constant;", "+\t\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "+\t\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "+\t\t\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(inits[j]);", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8501cb6775eb4d2412769a691696b7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "8ae6a032b744da62a95176b1af816f0bc6d501e7", "commitAfterChange": "e5d1651827919c7582ba9351a3db777b316a27e0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": " void runTest( \t\tboolean shouldCompileOK,  \t\tString[] sourceFiles, \t\tStandardJavaFileManager standardJavaFileManager, \t\tList<String> options, \t\tString[] compileFileNames, \t\tString expectedOutOutputString, \t\tString expectedErrOutputString,  \t\tboolean shouldFlushOutputDirectory, \t\tString[] classFileNames)", "signatureAfterChange": " void runTest( \t\tboolean shouldCompileOK,  \t\tString[] sourceFiles, \t\tStandardJavaFileManager standardJavaFileManager, \t\tList<String> options, \t\tString[] compileFileNames, \t\tString expectedOutOutputString, \t\tString expectedErrOutputString,  \t\tboolean shouldFlushOutputDirectory, \t\tString[] classFileNames)", "diff": ["-\tcheckClassFiles(classFileNames);", "+\t// TODO maxime introduce stderr comparison based upon specific diagnostic listener", "+\tif (classFileNames != null) {", "+\t\tcheckClassFiles(classFileNames);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea81873c0a5acef0198fb78a063ce0de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "795236662f4c72deb433448a946f4a36cebbebd0", "commitAfterChange": "b74a7b82d9221b86893a88ea5453e92534ffe51b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String[] classpath, String jarPath) throws IOException", "signatureAfterChange": "  public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String[] classpath, String jarPath) throws IOException", "diff": ["-\tfor (int i = 0, l = extraPathsAndContents == null ? 0 : extraPathsAndContents.length; i < l; /* inc in loop */) {", "-\t\tFile  outputFile = new File(classesPath, extraPathsAndContents[i++]);", "-\t\toutputFile.getParentFile().mkdirs();", "-\t\tUtil.writeToFile(extraPathsAndContents[i++], outputFile.getAbsolutePath());", "+\tif (extraPathsAndContents != null) {", "+\t\tfor (int i = 0, l = extraPathsAndContents == null ? 0 : extraPathsAndContents.length; i < l; /* inc in loop */) {", "+\t\t\tFile  outputFile = new File(classesPath, extraPathsAndContents[i++]);", "+\t\t\toutputFile.getParentFile().mkdirs();", "+\t\t\tUtil.writeToFile(extraPathsAndContents[i++], outputFile.getAbsolutePath());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3fb65ac4cfe45eb629fd7058056d05f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "015c66459c41ce714c2afab061dda99760bcb04e", "commitAfterChange": "cc1df04d2a7670c32d491fa2cc726f1c92c0a8b6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static void setFactoryPath(IJavaProject jproj, IFactoryPath path)\t \t\t\tthrows CoreException", "signatureAfterChange": " \tpublic static void setFactoryPath(IJavaProject jproj, IFactoryPath path)\t \t\t\tthrows CoreException", "diff": ["-\t\t// The factory path isn't saved to the Eclipse preference store,", "-\t\t// so we can't rely on the ChangeListener mechanism.", "-\t\tAnnotationProcessorFactoryLoader.getLoader().resetAll();", "+\t\t// Project-specific factory path files are resources, so changes", "+\t\t// get picked up by the resource listener.  Workspace changes aren't.", "+\t\tif (jproj == null) {", "+\t\t\tAnnotationProcessorFactoryLoader.getLoader().resetAll();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe25843d763d23c3d37546af5c29fa82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/NewASTRewrite.java", "commitBeforeChange": "f5b5b884f036b9e618a06dde165cd3edcb93e386", "commitAfterChange": "c01c58991465c08e9a09aa1864f2ccc8c3d7c124", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\t \t\t\t \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-\t\t\t", "+\t */", "-\t\tbuf.append(fEventStore.toString());", "+\t\t// be extra careful of uninitialized or mangled instances", "+\t\tif (fEventStore != null) {", "+\t\t\tbuf.append(fEventStore.toString());", "+\t\t}"]}], "num": 55019}
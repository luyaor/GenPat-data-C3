{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b77b3c6350b704f8938fd8fd94796049", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ff085fa620b8715c5d98abade1e74fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic TypeBinding convertToRawType(TypeBinding type)", "signatureAfterChange": "  \tpublic TypeBinding convertToRawType(TypeBinding type)", "diff": ["+\t\t\tcase Binding.BASE_TYPE :", "+\t\t\tcase Binding.RAW_TYPE:", "-\t\tif (originalType instanceof ReferenceBinding) {", "-\t\t\tboolean needToConvert = originalType.isGenericType() ", "-\t\t\t\t\t|| (originalType.erasure().isGenericType() ", "-\t\t\t\t\t\t\t&& originalType.isParameterizedType() ", "-\t\t\t\t\t\t\t&& ((ParameterizedTypeBinding)originalType).arguments == null);", "-\t\t\t", "-\t\t\tReferenceBinding convertedType = (ReferenceBinding) originalType;", "-\t\t\tReferenceBinding originalEnclosing = originalType.enclosingType();", "-\t\t\tReferenceBinding convertedEnclosing = originalEnclosing;", "-\t\t\tif (originalEnclosing != null && (needToConvert || convertedType.isStatic() && originalEnclosing.isGenericType())) {", "-\t\t\t\tconvertedEnclosing = (ReferenceBinding) convertToRawType(originalEnclosing);", "+\t\tboolean needToConvert;", "+\t\tswitch (originalType.kind()) {", "+\t\t\tcase Binding.BASE_TYPE :", "+\t\t\t\treturn type;", "+\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tneedToConvert = true;", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tParameterizedTypeBinding paramType = (ParameterizedTypeBinding) originalType;", "+\t\t\t\tneedToConvert = paramType.type.isGenericType(); // only recursive call to enclosing type can find parameterizedType with arguments", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tneedToConvert = false;", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tReferenceBinding originalEnclosing = originalType.enclosingType();", "+\t\tTypeBinding convertedType;", "+\t\tif (originalEnclosing == null) {", "+\t\t\tconvertedType = needToConvert ? environment().createRawType((ReferenceBinding)originalType.erasure(), null) : originalType;", "+\t\t} else {", "+\t\t\tReferenceBinding convertedEnclosing;", "+\t\t\tswitch (originalEnclosing.kind()) {", "+\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\tif (needToConvert || ((ReferenceBinding)originalType).isStatic()) {", "+\t\t\t\t\t\tconvertedEnclosing = (ReferenceBinding) convertToRawType(originalEnclosing);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tconvertedEnclosing = originalEnclosing;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tconvertedEnclosing = originalEnclosing;", "+\t\t\t\t\tbreak;", "-\t\t\t\tconvertedType = environment().createRawType(convertedType, convertedEnclosing);", "+\t\t\t\tconvertedType = environment().createRawType((ReferenceBinding) originalType.erasure(), convertedEnclosing);", "-\t\t\t\tconvertedType = createParameterizedType(convertedType, null, convertedEnclosing);", "+\t\t\t\tconvertedType = createParameterizedType((ReferenceBinding) originalType.erasure(), null, convertedEnclosing);", "+\t\t\t} else {", "+\t\t\t\tconvertedType = originalType;", "-\t\t\tif (originalType != convertedType) {", "-\t\t\t\treturn dimension > 0 ? (TypeBinding)createArrayType(convertedType, dimension) : convertedType;", "-\t\t\t}", "+\t\t}", "+\t\tif (originalType != convertedType) {", "+\t\t\treturn dimension > 0 ? (TypeBinding)createArrayType(convertedType, dimension) : convertedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf28f5f1113db88054c0d71d2c9f3e8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d81f79f00816b88315f5cebda6e215147f9e97f8", "commitAfterChange": "a97d6cfe4321b5c45bce6a9e682825ee765b8f5b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedEnclosing);", "+\t\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\treturn originalParameterizedType.environment.createRawType(originalParameterizedType.genericType(), substitutedEnclosing);", "+\t\t\t\t\t\treturn originalParameterizedType.environment.createRawType(originalParameterizedType.genericType(), substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedArguments, substitutedEnclosing);", "+\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedArguments, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\treturn originalArrayType.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions());", "+\t\t\t\t\treturn originalArrayType.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions(), originalType.getTypeAnnotations());", "-\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, substitutedOtherBounds, wildcard.boundKind);", "+\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, substitutedOtherBounds, wildcard.boundKind, wildcard.getTypeAnnotations());", "-\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "+\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\t? substitution.environment().createRawType(originalReferenceType, substitutedEnclosing)", "-\t\t\t\t\t\t:  substitution.environment().createParameterizedType(originalReferenceType, null, substitutedEnclosing);", "+\t\t\t\t\t\t? substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations())", "+\t\t\t\t\t\t:  substitution.environment().createParameterizedType(originalReferenceType, null, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "+\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "+\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing);", "+\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing, originalType.getTypeAnnotations());"]}], "num": 31650}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c654f31443ff211f4637e280c1af8db4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02bc9114b7ec05193d100f208395c3a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "994909f27ab64cbff8a4b8b71b6f8d78e265bc42", "commitAfterChange": "fd0bab5fda3357e5a56e4647b1a6d36779abe285", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "signatureAfterChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "diff": ["- */\r", "-public boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress) {\r", "-\tif (VERBOSE) System.out.println(\"-> performing concurrent job : START - \" + searchJob); //$NON-NLS-1$\r", "-\tboolean status = FAILED;\r", "-\tif (awaitingJobsCount() > 0){\r", "-\t\tswitch(waitingPolicy){\r", "-\t\t\t\r", "-\t\t\tcase ForceImmediate :\r", "-\t\t\t\tif (VERBOSE) System.out.println(\"-> performing concurrent job : NOT READY - ForceImmediate - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\tboolean wasEnabled = isEnabled();\r", "-\t\t\t\t\tdisable(); // pause indexing\r", "-\t\t\t\t\tstatus = searchJob.execute();\r", "-\t\t\t\tif (VERBOSE) System.out.println(\"-> performing concurrent job : END - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\tif (wasEnabled) enable();\r", "-\t\t\t\treturn status;\r", "-\t\t\tcase CancelIfNotReady :\r", "-\t\t\t\tif (VERBOSE) System.out.println(\"-> performing concurrent job : NOT READY - CancelIfNotReady - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\tprogress.setCanceled(true);\r", "-\t\t\t\tbreak; \r", "-\t\t\tcase WaitUntilReady :\r", "+\t */\r", "+\tpublic boolean performConcurrentJob(\r", "+\t\tIJob searchJob,\r", "+\t\tint waitingPolicy,\r", "+\t\tIProgressMonitor progress) {\r", "+\r", "+\t\tif (VERBOSE)\r", "+\t\t\tSystem.out.println(\"-> performing concurrent job : START - \" + searchJob); //$NON-NLS-1$\r", "+\t\tboolean status = IJob.FAILED;\r", "+\t\tif (awaitingJobsCount() > 0) {\r", "+\t\t\tswitch (waitingPolicy) {\r", "+\r", "+\t\t\t\tcase IJob.ForceImmediate :\r", "+\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\tSystem.out.println(\r", "+\t\t\t\t\t\t\t\"-> performing concurrent job : NOT READY - ForceImmediate - \" + searchJob);//$NON-NLS-1$\r", "+\t\t\t\t\tboolean wasEnabled = isEnabled();\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tdisable(); // pause indexing\r", "+\t\t\t\t\t\tstatus = searchJob.execute();\r", "+\t\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\t\tSystem.out.println(\"-> performing concurrent job : END - \" + searchJob); //$NON-NLS-1$\r", "+\t\t\t\t\t} finally {\r", "+\t\t\t\t\t\tif (wasEnabled)\r", "+\t\t\t\t\t\t\tenable();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\treturn status;\r", "+\t\t\t\tcase IJob.CancelIfNotReady :\r", "+\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\tSystem.out.println(\r", "+\t\t\t\t\t\t\t\"-> performing concurrent job : NOT READY - CancelIfNotReady - \" + searchJob); //$NON-NLS-1$\r", "+\t\t\t\t\tprogress.setCanceled(true);\r", "+\t\t\t\t\tbreak;\r", "+\r", "+\t\t\t\tcase IJob.WaitUntilReady :\r", "-\t\t\t\t\t\tif (progress != null && progress.isCanceled()) throw new OperationCanceledException();\r", "-\t\t\t\t\t\tcurrentJob = currentJob(); // currentJob can be null when jobs have been added to the queue but job manager is not enabled\r", "-\t\t\t\t\t\tif (currentJob != null && currentJob != previousJob){\r", "-\t\t\t\t\t\t\tif (VERBOSE) System.out.println(\"-> performing concurrent job : NOT READY - WaitUntilReady - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\tif (progress != null){\r", "-\t\t\t\t\t\t\t\tprogress.subTask(Util.bind(\"manager.filesToIndex\", Integer.toString(awaitingWork))); //$NON-NLS-1$\r", "+\t\t\t\t\t\tif (progress != null && progress.isCanceled())\r", "+\t\t\t\t\t\t\tthrow new OperationCanceledException();\r", "+\t\t\t\t\t\tcurrentJob = currentJob();\r", "+\t\t\t\t\t\t// currentJob can be null when jobs have been added to the queue but job manager is not enabled\r", "+\t\t\t\t\t\tif (currentJob != null && currentJob != previousJob) {\r", "+\t\t\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\t\t\tSystem.out.println(\r", "+\t\t\t\t\t\t\t\t\t\"-> performing concurrent job : NOT READY - WaitUntilReady - \" + searchJob);//$NON-NLS-1$\r", "+\t\t\t\t\t\t\tif (progress != null) {\r", "+\t\t\t\t\t\t\t\tprogress.subTask(\r", "+\t\t\t\t\t\t\t\t\tUtil.bind(\"manager.filesToIndex\", Integer.toString(awaitingWork))); //$NON-NLS-1$\r", "-\t\t\t\t\t\t} catch(InterruptedException e){\r", "+\t\t\t\t\t\t} catch (InterruptedException e) {\r", "+\t\t\t}\r", "+\t\tstatus = searchJob.execute();\r", "+\t\tif (VERBOSE)\r", "+\t\t\tSystem.out.println(\"-> performing concurrent job : END - \" + searchJob); //$NON-NLS-1$\r", "+\t\treturn status;\r", "-\tstatus = searchJob.execute();\r", "-\tif (VERBOSE) System.out.println(\"-> performing concurrent job : END - \" + searchJob); //$NON-NLS-1$\r", "-\treturn status;\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08566f54ff9de337199016c5bacb2cea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 103, "signatureBeforeChange": " private void generateFieldAccess(byte opcode, int returnTypeSize, char[] declaringClass, char[] name, char[] signature)", "signatureAfterChange": " private void generateFieldAccess(byte opcode, int returnTypeSize, char[] declaringClass, char[] name, char[] signature)", "diff": ["+}", "+private void generateFieldAccess(byte opcode, int returnTypeSize, char[] declaringClass, char[] name, char[] signature) {", "+\tcountLabels = 0;", "+\tswitch(opcode) {", "+\t\tcase Opcodes.OPC_getfield :", "+\t\t\tif (returnTypeSize == 2) {", "+\t\t\t\tstackDepth++;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Opcodes.OPC_getstatic :", "+\t\t\tif (returnTypeSize == 2) {", "+\t\t\t\tstackDepth += 2;", "+\t\t\t} else {", "+\t\t\t\tstackDepth++;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Opcodes.OPC_putfield :", "+\t\t\tif (returnTypeSize == 2) {", "+\t\t\t\tstackDepth -= 3;", "+\t\t\t} else {", "+\t\t\t\tstackDepth -= 2;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Opcodes.OPC_putstatic :", "+\t\t\tif (returnTypeSize == 2) {", "+\t\t\t\tstackDepth -= 2;", "+\t\t\t} else {", "+\t\t\t\tstackDepth--;", "+\t\t\t}", "+\t}", "+\tif (stackDepth > stackMax) {", "+\t\tstackMax = stackDepth;", "+\t}", "+\tif (classFileOffset + 2 >= bCodeStream.length) {", "+\t\tresizeByteArray();", "+\t}", "+\tposition++;", "+\tbCodeStream[classFileOffset++] = opcode;", "+\twriteUnsignedShort(constantPool.literalIndexForField(declaringClass, name, signature));", "+}", "-private void generateFieldAccess(byte opcode, int returnTypeSize, char[] declaringClass, char[] name, char[] signature) {", "-\tcountLabels = 0;", "-\tswitch(opcode) {", "-\t\tcase OPC_getfield :", "-\t\t\tif (returnTypeSize == 2) {", "-\t\t\t\tstackDepth++;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase OPC_getstatic :", "-\t\t\tif (returnTypeSize == 2) {", "-\t\t\t\tstackDepth += 2;", "-\t\t\t} else {", "-\t\t\t\tstackDepth++;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase OPC_putfield :", "-\t\t\tif (returnTypeSize == 2) {", "-\t\t\t\tstackDepth -= 3;", "-\t\t\t} else {", "-\t\t\t\tstackDepth -= 2;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase OPC_putstatic :", "-\t\t\tif (returnTypeSize == 2) {", "-\t\t\t\tstackDepth -= 2;", "-\t\t\t} else {", "-\t\t\t\tstackDepth--;", "-\t\t\t}", "-\t}", "-\tif (stackDepth > stackMax) {", "-\t\tstackMax = stackDepth;", "-\t}", "-\tif (classFileOffset + 2 >= bCodeStream.length) {", "-\t\tresizeByteArray();", "-\t}", "-\tposition++;", "-\tbCodeStream[classFileOffset++] = opcode;", "-\twriteUnsignedShort(constantPool.literalIndexForField(declaringClass, name, signature));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd716ce1ce3c627ea8f44db6ea0c6f55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 210, "signatureBeforeChange": " public void javadocInvalidField(int sourceStart, int sourceEnd, Binding fieldBinding, TypeBinding searchedType, int modifiers)", "signatureAfterChange": " public void javadocInvalidField(int sourceStart, int sourceEnd, Binding fieldBinding, TypeBinding searchedType, int modifiers)", "diff": ["-\t\tcase NotFound :", "+\t\tcase ProblemReasons.NotFound :", "-\t\tcase NotVisible :", "+\t\tcase ProblemReasons.NotVisible :", "-\t\tcase Ambiguous :", "+\t\tcase ProblemReasons.Ambiguous :", "-\t\tcase NoError : // 0", "+\t\tcase ProblemReasons.NoError : // 0"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f149449c03f205829adad0cc5c693aa6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "signatureAfterChange": " public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "diff": ["-\t\t\tcase T_JavaLangObject :", "-\t\t\tcase T_JavaIoSerializable :", "-\t\t\tcase T_JavaLangCloneable :", "+\t\t\tcase TypeIds.T_JavaLangObject :", "+\t\t\tcase TypeIds.T_JavaIoSerializable :", "+\t\t\tcase TypeIds.T_JavaLangCloneable :", "-\t\tif (otherDim < this.dimensions & otherType.leafComponentType().id == T_JavaLangObject) {", "+\t\tif (otherDim < this.dimensions & otherType.leafComponentType().id == TypeIds.T_JavaLangObject) {"]}], "num": 32895}
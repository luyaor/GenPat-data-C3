{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a8261f15a3379d5f61d8223ca3ae775", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57566d1a88414219a5821e9b6387b45a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateSubRoutineInvocation( \t\t\tBlockScope currentScope, \t\t\tCodeStream codeStream)", "signatureAfterChange": " \tpublic void generateSubRoutineInvocation( \t\t\tBlockScope currentScope, \t\t\tCodeStream codeStream)", "diff": ["-\t\tif (this.isSubRoutineEscaping) {", "+\t\tif (isSubRoutineEscaping()) {", "-\t\t\t\tthis.exitAnyExceptionHandler();\t\t\t\t", "+\t\t\t\tthis.exitAnyExceptionHandler();", "+\t\t\t\t// inside try block, ensure to deactivate all catch block exception handlers while inlining finally block", "+\t\t\t\tfor (int i = 0, length = this.enclosingExceptionLabels == null ? 0 : this.enclosingExceptionLabels.length; i < length; i++) {", "+\t\t\t\t\tthis.enclosingExceptionLabels[i].placeEnd();", "+\t\t\t\t}", "+\t\t\t\t// inside try block, ensure to reactivate all catch block exception handlers after inlining finally block", "+\t\t\t\tfor (int i = 0, length = this.enclosingExceptionLabels == null ? 0 : this.enclosingExceptionLabels.length; i < length; i++) {", "+\t\t\t\t\tthis.enclosingExceptionLabels[i].placeStart();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0be744c2dd11c2d3441ce9410247d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["+\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\tthis.bound.collectSubstitutes(otherWildcard.otherBounds[i], substitutes);", "+\t        \t}", "+            // check other bounds (lub scenario)", "+        \tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "+        \t\tthis.otherBounds[i].collectSubstitutes(otherType, substitutes);", "+        \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bca48f23ab678168d0372ed199c32b88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "dfd8d4647bad1465cda928961972e854fc071249", "commitAfterChange": "31c3266cfb06f3143b63cd3aca05524ef5cd1755", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r public void reset()", "signatureAfterChange": "\r public void reset()", "diff": ["+\tIWorkspace workspace = ResourcesPlugin.getWorkspace();\r", "+\tif (workspace != null){\r", "+\t\t// force to resolve classpaths for projects to check, so as to avoid running CP variable initializers in the background thread\r", "+\t\tthis.projectsToCheck = workspace.getRoot().getProjects();\r", "+\t\tfor (int i = 0, max = this.projectsToCheck == null ? 0 : this.projectsToCheck.length; i < max; i++){\r", "+\t\t\tIJavaProject project = JavaCore.create(this.projectsToCheck[i]);\r", "+\t\t\ttry {\r", "+\t\t\t\t// force to resolve CP variables before calling indexer - 19303 (indirectly through consistency check)\r", "+\t\t\t\tproject.getResolvedClasspath(true);\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t}\r", "+\t\t} \r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9f9f776241c4a773de568113292546b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "1aef615a23a262f5caabd6f48d0a4c046ef230b8", "commitAfterChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["+\t\t\tfor (int i = 0, length = superClass.annotations == null ? 0 : superClass.annotations.length; i < length; i++) {", "+\t\t\t\treportMatching(superClass.annotations[i], enclosingElement, null, type.binding, nodeSet, matchedClassContainer, enclosesElement);\t", "+\t\t\t}", "+\t\t\t\tTypeReference typeReference  = type.superInterfaces[i];", "+\t\t\t\tif (typeReference != null &&  typeReference.annotations != null) {", "+\t\t\t\t\tfor (int j = 0, length = typeReference.annotations.length; j < length; j++) {", "+\t\t\t\t\t\treportMatching(typeReference.annotations[j], enclosingElement, null, type.binding, nodeSet, matchedClassContainer, enclosesElement);\t", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t"]}], "num": 14497}
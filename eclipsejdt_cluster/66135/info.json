{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "584b6d670d8595b4eae5e315ab29e9e3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "749114131e554dd779e6cb3f8f4936ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void complainIfUnusedExceptionHandlers( \t\tAstNode[] exceptionHandlers, \t\tBlockScope scope, \t\tTryStatement tryStatement)", "signatureAfterChange": " \t \tpublic void complainIfUnusedExceptionHandlers( \t\tBlockScope scope, \t\tTryStatement tryStatement)", "diff": ["+\t", "-\t\tAstNode[] exceptionHandlers,", "-\t\t\t\tscope.problemReporter().unreachableExceptionHandler(", "+\t\t\t\tscope.problemReporter().unreachableCatchBlock(", "-\t\t\t\t\texceptionHandlers[index]);", "+\t\t\t\t\ttryStatement.catchArguments[index].type);", "-\t\t\t\t\tscope.problemReporter().maskedExceptionHandler(", "+\t\t\t\t\tscope.problemReporter().hiddenCatchBlock(", "-\t\t\t\t\t\texceptionHandlers[index]);", "+\t\t\t\t\t\ttryStatement.catchArguments[index].type);", "-\t\t// will optimized out unnecessary catch block during code gen", "-\t\ttryStatement.preserveExceptionHandler = isNeeded;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eab94ae30505cf5fbca471df48c3990a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().ambiguousArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);", "-\t\t\t\t\t\tscope.problemReporter().ambiguousArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);", "-\t\t\t\t\t\tscope.problemReporter().ambiguousArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f21d6e6f95b351b7d79d57f52607499b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "commitAfterChange": "09b5bcfabb25c2c9040a9d902d7f8e5151952519", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().varargsArgumentNeedCast(method, lastArgType, invocationSite);", "-\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().varargsArgumentNeedCast(method, lastArgType, invocationSite);", "-\t\t\t\t\t\tscope.problemReporter().castArgumentToVarargsMethod(method, invocationSite);", "+\t\t\t\t\t\tscope.problemReporter().varargsArgumentNeedCast(method, lastArgType, invocationSite);"]}], "num": 66135}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f891a788ac7d2d99997661bd22f9825a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "497fc2dae169472f64c3a314f5342491", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "e6029c8b1adfe1296ee554ed42f00e5a663cecbf", "commitAfterChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test0002() throws JavaModelException", "signatureAfterChange": " \tpublic void test0002() throws JavaModelException", "diff": ["-\t\tSimpleType simpleType = (SimpleType) castExpression.getType();", "-\t\tassertNotNull(simpleType);", "-\t\tassertEquals(\"java.lang.@Marker String\", simpleType.toString());", "-\t\tList annotations = simpleType.annotations();", "+\t\tPackageQualifiedType packageQualifiedType = (PackageQualifiedType) castExpression.getType();", "+\t\tassertNotNull(packageQualifiedType);", "+\t\tassertEquals(\"java.lang.@Marker String\", packageQualifiedType.toString());", "+\t\tList annotations = packageQualifiedType.annotations();", "-\t\tsimpleType = (SimpleType) type;", "+\t\tSimpleType simpleType = (SimpleType) type;", "-\t\tassertTrue(type.isSimpleType());", "-\t\tsimpleType = (SimpleType) type;", "-\t\tassertNotNull(simpleType);", "-\t\tassertEquals(\"Outer.@Marker2 Inner\", simpleType.toString());", "-\t\tannotations = simpleType.annotations();", "+\t\tassertTrue(type.isQualifiedType());", "+\t\tQualifiedType qualifiedType = (QualifiedType) type;", "+\t\tassertNotNull(qualifiedType);", "+\t\tassertEquals(\"Outer.@Marker2 Inner\", qualifiedType.toString());", "+\t\tannotations = qualifiedType.annotations();", "-\t\tassertTrue(type.isSimpleType());", "-\t\tsimpleType = (SimpleType) type;", "-\t\tassertNotNull(simpleType);", "-\t\tassertEquals(\"Outer.Inner.@Marker1 Deeper\", simpleType.toString());", "-\t\tannotations = simpleType.annotations();", "+\t\tassertTrue(type.isQualifiedType());", "+\t\tqualifiedType = (QualifiedType) type;", "+\t\tassertNotNull(qualifiedType);", "+\t\tassertEquals(\"Outer.Inner.@Marker1 Deeper\", qualifiedType.toString());", "+\t\tannotations = qualifiedType.annotations();", "-\t\tQualifiedType qualifiedType = (QualifiedType) type;", "+\t\tqualifiedType = (QualifiedType) type;", "-\t\tassertTrue(qualifierType.isSimpleType());", "-\t\tsimpleType = (SimpleType) qualifierType;", "-\t\tassertEquals(\"Outer.@Marker1 Inner\", simpleType.toString());", "-\t\tannotations = simpleType.annotations();", "+\t\tassertTrue(qualifierType.isQualifiedType());", "+\t\tqualifiedType = (QualifiedType) qualifierType;", "+\t\tassertEquals(\"Outer.@Marker1 Inner\", qualifiedType.toString());", "+\t\tannotations = qualifiedType.annotations();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85ab02f4aab3e29065aad2b6072a1d01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "e1051acac48de2e59e4c3d2d0f46898b4067bf9a", "commitAfterChange": "25dbd9e17c7b6920dccf1b458296dbbe00f382de", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void test0002() throws JavaModelException", "signatureAfterChange": " \tpublic void test0002() throws JavaModelException", "diff": ["-\t\tPackageQualifiedType packageQualifiedType = (PackageQualifiedType) castExpression.getType();", "-\t\tassertNotNull(packageQualifiedType);", "-\t\tassertEquals(\"java.lang.@Marker String\", packageQualifiedType.toString());", "-\t\tList annotations = packageQualifiedType.annotations();", "+\t\tNameQualifiedType nameQualifiedType = (NameQualifiedType) castExpression.getType();", "+\t\tassertNotNull(nameQualifiedType);", "+\t\tassertEquals(\"java.lang.@Marker String\", nameQualifiedType.toString());", "+\t\tList annotations = nameQualifiedType.annotations();", "-\t\tassertTrue(type.isQualifiedType());", "-\t\tQualifiedType qualifiedType = (QualifiedType) type;", "-\t\tassertNotNull(qualifiedType);", "-\t\tassertEquals(\"Outer.@Marker2 Inner\", qualifiedType.toString());", "-\t\tannotations = qualifiedType.annotations();", "+\t\tassertTrue(type.isNameQualifiedType());", "+\t\tnameQualifiedType = (NameQualifiedType) type;", "+\t\tassertNotNull(nameQualifiedType);", "+\t\tassertEquals(\"Outer.@Marker2 Inner\", nameQualifiedType.toString());", "+\t\tannotations = nameQualifiedType.annotations();", "-\t\tassertTrue(type.isQualifiedType());", "-\t\tqualifiedType = (QualifiedType) type;", "-\t\tassertNotNull(qualifiedType);", "-\t\tassertEquals(\"Outer.Inner.@Marker1 Deeper\", qualifiedType.toString());", "-\t\tannotations = qualifiedType.annotations();", "+\t\tassertTrue(type.isNameQualifiedType());", "+\t\tnameQualifiedType = (NameQualifiedType) type;", "+\t\tassertNotNull(nameQualifiedType);", "+\t\tassertEquals(\"Outer.Inner.@Marker1 Deeper\", nameQualifiedType.toString());", "+\t\tannotations = nameQualifiedType.annotations();", "-\t\tqualifiedType = (QualifiedType) type;", "+\t\tQualifiedType qualifiedType = (QualifiedType) type;", "-\t\tassertTrue(qualifierType.isQualifiedType());", "-\t\tqualifiedType = (QualifiedType) qualifierType;", "-\t\tassertEquals(\"Outer.@Marker1 Inner\", qualifiedType.toString());", "-\t\tannotations = qualifiedType.annotations();", "+\t\tassertTrue(qualifierType.isNameQualifiedType());", "+\t\tnameQualifiedType = (NameQualifiedType) qualifierType;", "+\t\tassertEquals(\"Outer.@Marker1 Inner\", nameQualifiedType.toString());", "+\t\tannotations = nameQualifiedType.annotations();"]}], "num": 16092}
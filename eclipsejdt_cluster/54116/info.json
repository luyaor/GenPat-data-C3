{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efc5b8135bfdf058a2a12b9b666c3290", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e3b8a04dafd59af7887cf8eed8cc3e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "192a17dd8a77dcf00962471b7104c1c1f453d9f4", "commitAfterChange": "07d5081d9da703108b09f4fbf591bb9cf4b8ffad", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": " public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\t\tlastDot = typeSignature.lastIndexOf('.');", "-\t\t\t\ttypeSimpleName = (lastDot != -1 ? typeSignature.substring(lastDot + 1) : typeSignature).toCharArray();", "-\t\t\t\ttypeQualification = ", "-\t\t\t\t\tlastDot != -1 ? ", "+\t\t\t\tif ((lastDot = typeSignature.lastIndexOf('.')) == -1) {", "+\t\t\t\t\ttypeSimpleName = typeSignature.toCharArray();", "+\t\t\t\t\ttypeQualification = null;", "+\t\t\t\t} else {", "+\t\t\t\t\ttypeSimpleName = typeSignature.substring(lastDot + 1).toCharArray();", "+\t\t\t\t\ttypeQualification = field.isBinary()", "+\t\t\t\t\t\t? typeSignature.substring(0, lastDot).toCharArray()", "-\t\t\t\t\t\tCharOperation.concat(ONE_STAR, typeSignature.substring(0, lastDot).toCharArray()) : ", "-\t\t\t\t\t\tnull;", "+\t\t\t\t\t\t: CharOperation.concat(ONE_STAR, typeSignature.substring(0, lastDot).toCharArray());", "+\t\t\t\t}", "-\t\t\t\tlastDot = returnType.lastIndexOf('.');", "-\t\t\t\treturnSimpleName = (lastDot != -1 ? returnType.substring(lastDot + 1) : returnType).toCharArray();", "-\t\t\t\treturnQualification = ", "-\t\t\t\t\tlastDot != -1 ? ", "+\t\t\t\tif ((lastDot = returnType.lastIndexOf('.')) == -1) {", "+\t\t\t\t\treturnSimpleName = returnType.toCharArray();", "+\t\t\t\t\treturnQualification = null;", "+\t\t\t\t} else {", "+\t\t\t\t\treturnSimpleName = returnType.substring(lastDot + 1).toCharArray();", "+\t\t\t\t\treturnQualification = method.isBinary()", "+\t\t\t\t\t\t? returnType.substring(0, lastDot).toCharArray()", "-\t\t\t\t\t\tCharOperation.concat(ONE_STAR, returnType.substring(0, lastDot).toCharArray()) : ", "-\t\t\t\t\t\tnull;", "+\t\t\t\t\t\t: CharOperation.concat(ONE_STAR, returnType.substring(0, lastDot).toCharArray());", "+\t\t\t\t}", "-\t\t\t\tlastDot = signature.lastIndexOf('.');", "-\t\t\t\tparameterSimpleNames[i] = (lastDot != -1 ? signature.substring(lastDot + 1) : signature).toCharArray();", "-\t\t\t\tparameterQualifications[i] = ", "-\t\t\t\t\tlastDot != -1 ? ", "+\t\t\t\tif ((lastDot = signature.lastIndexOf('.')) == -1) {", "+\t\t\t\t\tparameterSimpleNames[i] = signature.toCharArray();", "+\t\t\t\t\tparameterQualifications[i] = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tparameterSimpleNames[i] = signature.substring(lastDot + 1).toCharArray();", "+\t\t\t\t\tparameterQualifications[i] = method.isBinary()", "+\t\t\t\t\t\t? signature.substring(0, lastDot).toCharArray()", "-\t\t\t\t\t\tCharOperation.concat(ONE_STAR, signature.substring(0, lastDot).toCharArray()) : ", "-\t\t\t\t\t\tnull;", "+\t\t\t\t\t\t: CharOperation.concat(ONE_STAR, signature.substring(0, lastDot).toCharArray());", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b371f0c943a79824b0e7c8686fc0e525", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "e05eed8d28ae76461822d5820ab4d1079041229c", "commitAfterChange": "eed1a08cebbf98096012b816207df007b92ad038", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static int getPossibleComplianceLevels()", "signatureAfterChange": " \tpublic static int getPossibleComplianceLevels()", "diff": ["+\t\t\t\t} else if (COMPLIANCE_1_7.equals(compliance)) {", "+\t\t\t\t\tpossibleComplianceLevels = F_1_7;", "-\t\t\t\t\tSystem.out.println(\"Use one of \" + COMPLIANCE_1_3 + \", \" + COMPLIANCE_1_4 + \", \" + COMPLIANCE_1_5);", "+\t\t\t\t\tSystem.out.print(\"Use one of \");", "+\t\t\t\t\tSystem.out.print(COMPLIANCE_1_3 + \", \");", "+\t\t\t\t\tSystem.out.print(COMPLIANCE_1_4 + \", \");", "+\t\t\t\t\tSystem.out.print(COMPLIANCE_1_5 + \", \");", "+\t\t\t\t\tSystem.out.print(COMPLIANCE_1_6 + \", \");", "+\t\t\t\t\tSystem.out.println(COMPLIANCE_1_7);", "-\t\t\t\tboolean canRun1_4 = !\"1.0\".equals(specVersion) && !\"1.1\".equals(specVersion) && !\"1.2\".equals(specVersion) && !\"1.3\".equals(specVersion);", "+\t\t\t\tboolean canRun1_4 = !\"1.0\".equals(specVersion)", "+\t\t\t\t\t&& !CompilerOptions.VERSION_1_1.equals(specVersion)", "+\t\t\t\t\t&& !CompilerOptions.VERSION_1_2.equals(specVersion)", "+\t\t\t\t\t&& !CompilerOptions.VERSION_1_3.equals(specVersion);", "-\t\t\t\tboolean canRun1_5 = canRun1_4 && !\"1.4\".equals(specVersion);", "+\t\t\t\tboolean canRun1_5 = canRun1_4 && !CompilerOptions.VERSION_1_4.equals(specVersion);", "-\t\t\t\tboolean canRun1_6 = \"1.6\".equals(specVersion);", "+\t\t\t\tboolean canRun1_6 = canRun1_5 && !CompilerOptions.VERSION_1_5.equals(specVersion);", "+\t\t\t\t}", "+\t\t\t\tboolean canRun1_7 = canRun1_6 && !CompilerOptions.VERSION_1_6.equals(specVersion);", "+\t\t\t\tif (canRun1_7) {", "+\t\t\t\t\tpossibleComplianceLevels |= F_1_7;"]}], "num": 54116}
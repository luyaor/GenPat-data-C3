{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "417e0360c75c7f0805915123118dbbf8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a1c05e526da8578af1111c1801ff131", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "0ae630552c90fd2cd11872eb375a1964a0c6a4c3", "commitAfterChange": "64ee3f57d71ba4f4e5fa8224c04a06b8409e61e3", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic int generateMethodInfoAttributes(MethodBinding methodBinding)", "signatureAfterChange": " \tpublic int generateMethodInfoAttributes(MethodBinding methodBinding)", "diff": ["+\t\t\t} else {", "+\t\t\t\tLambdaExpression lambda = methodBinding.sourceLambda();", "+\t\t\t\tif (lambda != null) {", "+\t\t\t\t\tif ((methodBinding.tagBits & TagBits.HasParameterAnnotations) != 0) {", "+\t\t\t\t\t\tArgument[] arguments = lambda.arguments;", "+\t\t\t\t\t\tif (arguments != null) {", "+\t\t\t\t\t\t\tint parameterCount = methodBinding.parameters.length;", "+\t\t\t\t\t\t\tint argumentCount = arguments.length;", "+\t\t\t\t\t\t\tif (parameterCount > argumentCount) { // synthetics prefixed ", "+\t\t\t\t\t\t\t\tint redShift = parameterCount - argumentCount;", "+\t\t\t\t\t\t\t\tSystem.arraycopy(arguments, 0, arguments = new Argument[parameterCount], redShift, argumentCount);", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < redShift; i++)", "+\t\t\t\t\t\t\t\t\targuments[i] = new Argument(CharOperation.NO_CHAR, 0, null, 0);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tattributesNumber += generateRuntimeAnnotationsForParameters(arguments);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be64eb995001698f34bb82261a29729", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "b3f55df3c0ef9c0b0b05657a3bc24ac74a8339f3", "commitAfterChange": "27981506f2756dff04c50e8b59d9c147159c1382", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["+\t\t\t\tif (messageSend.arguments != null) {", "+\t\t\t\t\tfor (int a=0,al=messageSend.arguments.length; a<al; a++) {", "+\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) messageSend.arguments[a];", "+\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (constructor.arguments != null) {", "+\t\t\t\t\tfor (int a=0,al=constructor.arguments.length; a<al; a++) {", "+\t\t\t\t\t\tthis.patternLocator.match(constructor.arguments[a], this.nodeSet);", "+\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) constructor.arguments[a];", "+\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 15993}
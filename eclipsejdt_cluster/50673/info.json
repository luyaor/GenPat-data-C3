{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "261cd70655ca18398b7121e935eebef5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "844b4a33b912ff76d67249250f8649c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "eae9b6d133d1e0c7d2c9c5eea34b3530b0d87bc7", "commitAfterChange": "f3b2714ce76600cbff47416c089b334d95e8398e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo addInitializationsFrom(FlowInfo inits)", "signatureAfterChange": "  public FlowInfo addInitializationsFrom(FlowInfo inits)", "diff": ["+\treturn addInfoFrom(inits, true);", "+}", "-\t// union of definitely assigned variables,", "-\tthis.definiteInits |= otherInits.definiteInits;", "-\t// union of potentially set ones", "-\tthis.potentialInits |= otherInits.potentialInits;", "-\t\t// manage definite assignment info", "-\t\tfor (i = 0; i < mergeLimit; i++) {", "-\t\t\tthis.extra[0][i] |= otherInits.extra[0][i];", "-\t\t\tthis.extra[1][i] |= otherInits.extra[1][i];", "-\t\t}", "-\t\tfor (; i < copyLimit; i++) {", "-\t\t\tthis.extra[0][i] = otherInits.extra[0][i];", "-\t\t\tthis.extra[1][i] = otherInits.extra[1][i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0694c254a12aecababccbc11c85a0c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "5bb2bc7f924033ac90ef06377adaf6e8028c136c", "commitAfterChange": "ef1e5cb9e8f1ed367497f33911cb9848dee28aa7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected void setSourceComment(char[] source)", "signatureAfterChange": " \tprotected void setSourceComment(char[] source) throws ArrayIndexOutOfBoundsException", "diff": ["-\tprotected void setSourceComment(char[] source) {", "+\tprotected void setSourceComment(char[] source) throws ArrayIndexOutOfBoundsException {", "-\t\tfor (int i=0; i<length; i++) {", "+\t\tfor (int i=0; i<length;) {", "-\t\t\tcurrentChar = source[i];", "-\t\t\tint charLength = 1;", "-\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "-\t\t\t\t//-------------unicode traitement ------------", "-\t\t\t\tint c1, c2, c3, c4;", "-\t\t\t\tcharLength++;", "-\t\t\t\twhile (source[i+charLength] == 'u') charLength++;", "-\t\t\t\tif (((c1 = Character.getNumericValue(source[i+charLength++])) > 15", "-\t\t\t\t\t|| c1 < 0)", "-\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i+charLength++])) > 15 || c2 < 0)", "-\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i+charLength++])) > 15 || c3 < 0)", "-\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i+charLength])) > 15 || c4 < 0)) {", "-\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "-\t\t\t\t}", "-\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\t\ti+=charLength;", "-\t\t\t}", "+\t\t\tcurrentChar = getNextChar(source, i);", "+\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "-\t\t\t\t\t\t\tif (charLength == 1) {", "-\t\t\t\t\t\t\t\tbuffer.append(currentChar);", "-\t\t\t\t\t\t\t} else  {", "-\t\t\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\t\telse buffer.append(this.chars);", "-\t\t\t\t\t\t\t\tcurrentChar = source[i];", "-\t\t\t\t\t\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "-\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "-\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\tint c1, c2, c3, c4;", "-\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\twhile (source[i] == 'u') i++;", "-\t\t\t\t\t\t\t\t\tif (((c1 = Character.getNumericValue(source[i++])) > 15", "-\t\t\t\t\t\t\t\t\t\t|| c1 < 0)", "-\t\t\t\t\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i++])) > 15 || c2 < 0)", "-\t\t\t\t\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i++])) > 15 || c3 < 0)", "-\t\t\t\t\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i++])) > 15 || c4 < 0)) {", "-\t\t\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcurrentChar = getNextChar(source, i);", "+\t\t\t\t\t\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "-\t\t\t\t\t\t\t\t\tcurrentChar = source[i];", "-\t\t\t\t\t\t\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "-\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "-\t\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\t\tint c1, c2, c3, c4;", "-\t\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\t\twhile (source[i] == 'u') i++;", "-\t\t\t\t\t\t\t\t\t\tif (((c1 = Character.getNumericValue(source[i++])) > 15", "-\t\t\t\t\t\t\t\t\t\t\t|| c1 < 0)", "-\t\t\t\t\t\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i++])) > 15 || c2 < 0)", "-\t\t\t\t\t\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i++])) > 15 || c3 < 0)", "-\t\t\t\t\t\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i++])) > 15 || c4 < 0)) {", "-\t\t\t\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcurrentChar = getNextChar(source, i);", "+\t\t\t\t\t\t\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "-\t\t\t\t\t\t\t\tcurrentChar = source[i];", "-\t\t\t\t\t\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "-\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "-\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\tint c1, c2, c3, c4;", "-\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\twhile (source[i] == 'u') i++;", "-\t\t\t\t\t\t\t\t\tif (((c1 = Character.getNumericValue(source[i++])) > 15", "-\t\t\t\t\t\t\t\t\t\t|| c1 < 0)", "-\t\t\t\t\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i++])) > 15 || c2 < 0)", "-\t\t\t\t\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i++])) > 15 || c3 < 0)", "-\t\t\t\t\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i++])) > 15 || c4 < 0)) {", "-\t\t\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcurrentChar = getNextChar(source, i);", "+\t\t\t\t\t\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "-\t\t\t\t\t\t\t\t\tcurrentChar = source[i];", "-\t\t\t\t\t\t\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "-\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "-\t\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\t\tint c1, c2, c3, c4;", "-\t\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\t\twhile (source[i] == 'u') i++;", "-\t\t\t\t\t\t\t\t\t\tif (((c1 = Character.getNumericValue(source[i++])) > 15", "-\t\t\t\t\t\t\t\t\t\t\t|| c1 < 0)", "-\t\t\t\t\t\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i++])) > 15 || c2 < 0)", "-\t\t\t\t\t\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i++])) > 15 || c3 < 0)", "-\t\t\t\t\t\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i++])) > 15 || c4 < 0)) {", "-\t\t\t\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcurrentChar = getNextChar(source, i);", "+\t\t\t\t\t\t\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "-\t\t\t\t\t\t\t\t\t\tint currentPos=i;", "-\t\t\t\t\t\t\t\t\t\tcurrentChar = source[i];", "-\t\t\t\t\t\t\t\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "-\t\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "-\t\t\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\t\t\tint c1, c2, c3, c4;", "-\t\t\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\t\t\twhile (source[i] == 'u') i++;", "-\t\t\t\t\t\t\t\t\t\t\tif (((c1 = Character.getNumericValue(source[i++])) > 15", "-\t\t\t\t\t\t\t\t\t\t\t\t|| c1 < 0)", "-\t\t\t\t\t\t\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i++])) > 15 || c2 < 0)", "-\t\t\t\t\t\t\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i++])) > 15 || c3 < 0)", "-\t\t\t\t\t\t\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i++])) > 15 || c4 < 0)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (source[i+1] != '\"') {", "-\t\t\t\t\t\t\t\t\t\t\ti=currentPos;", "+\t\t\t\t\t\t\t\t\t\tcurrentChar = getNextChar(source, i);", "+\t\t\t\t\t\t\t\t\t\tif (currentChar == '\"') {", "+\t\t\t\t\t\t\t\t\t\t\ti += (this.chars==null) ? 1 : this.chars.length();", "+\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (charLength == 1) {", "-\t\t\t\t\t\t\t\tbuffer.append(currentChar);", "-\t\t\t\t\t\t\t} else  {", "-\t\t\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\t\telse buffer.append(this.chars);", "-\t\t\t\t\t\t\tif (charLength == 1) {", "-\t\t\t\t\t\t\t\tbuffer.append(currentChar);", "-\t\t\t\t\t\t\t} else  {", "-\t\t\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\t\telse buffer.append(this.chars);", "-\t\t\t\t\tif (charLength == 1) {", "-\t\t\t\t\t\tbuffer.append(currentChar);", "-\t\t\t\t\t} else  {", "-\t\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "-\t\t\t\t\t}", "+\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "+\t\t\t\t\telse buffer.append(this.chars);", "-\t\t\t\t\tif (charLength == 1) {", "-\t\t\t\t\t\tbuffer.append(currentChar);", "-\t\t\t\t\t} else  {", "-\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "-\t\t\t\t\t}", "+\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "+\t\t\t\t\telse buffer.append(this.chars);", "-\t\t\t\t\t\tif (charLength == 1) {", "-\t\t\t\t\t\t\tbuffer.append(currentChar);", "-\t\t\t\t\t\t} else  {", "-\t\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\telse buffer.append(this.chars);", "-\t\t\t\t\tif (charLength == 1) {", "-\t\t\t\t\t\tbuffer.append(currentChar);", "-\t\t\t\t\t} else  {", "-\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "-\t\t\t\t\t}", "+\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "+\t\t\t\t\telse buffer.append(this.chars);"]}], "num": 50673}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5393bd0f6d3dbc4ea2962b4b7702fa07", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56ec40c7adde4d35403e9056c648dbe1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "45b137a4bdfd0a4d28126aeb67f27b127e7f1dfd", "commitAfterChange": "15b0c36cf52521c62289eac551e0070a05f02d1e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void format(FieldDeclaration fieldDeclaration, ASTVisitor visitor, MethodScope scope, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "signatureAfterChange": "  \tprivate void format(FieldDeclaration fieldDeclaration, ASTVisitor visitor, MethodScope scope, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "diff": ["-\t\t\tinitialization.traverse(this, scope);", "+\t\t\tAlignment assignmentAlignment = this.scribe.createAlignment(\"fieldDeclarationAssignmentAlignment\", this.preferences.alignment_for_assignment, Alignment.R_OUTERMOST, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$", "+\t\t\tthis.scribe.enterAlignment(assignmentAlignment);", "+\t\t\tboolean ok = false;", "+\t\t\tdo {", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.scribe.alignFragment(assignmentAlignment, 0);", "+\t\t\t\t\tinitialization.traverse(this, scope);", "+\t\t\t\t\tok = true;", "+\t\t\t\t} catch(AlignmentException e){", "+\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t}", "+\t\t\t} while (!ok);\t\t", "+\t\t\tthis.scribe.exitAlignment(assignmentAlignment, true);\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "613963f2af7e448ce561d35aedce36af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "45b137a4bdfd0a4d28126aeb67f27b127e7f1dfd", "commitAfterChange": "15b0c36cf52521c62289eac551e0070a05f02d1e", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "      \tprivate void formatLocalDeclaration(LocalDeclaration localDeclaration, BlockScope scope, boolean insertSpaceBeforeComma, boolean insertSpaceAfterComma)", "signatureAfterChange": "      \tprivate void formatLocalDeclaration(LocalDeclaration localDeclaration, BlockScope scope, boolean insertSpaceBeforeComma, boolean insertSpaceAfterComma)", "diff": ["-\t\t\tinitialization.traverse(this, scope);", "+\t\t\tAlignment assignmentAlignment = this.scribe.createAlignment(\"localDeclarationAssignmentAlignment\", this.preferences.alignment_for_assignment, Alignment.R_OUTERMOST, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$", "+\t\t\tthis.scribe.enterAlignment(assignmentAlignment);", "+\t\t\tboolean ok = false;", "+\t\t\tdo {", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.scribe.alignFragment(assignmentAlignment, 0);", "+\t\t\t\t\tinitialization.traverse(this, scope);", "+\t\t\t\t\tok = true;", "+\t\t\t\t} catch(AlignmentException e){", "+\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t}", "+\t\t\t} while (!ok);\t\t", "+\t\t\tthis.scribe.exitAlignment(assignmentAlignment, true);\t\t\t"]}], "num": 38224}
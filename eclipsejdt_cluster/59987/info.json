{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f13581697ccff73421d4c435a26a6d4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3847fd974efd3de0ca56c312160e342d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "432a9d5974b55509eb3dfbf8ecd190ef7ce8af61", "commitAfterChange": "6babe48369a471c3e35e8fc01b1af25fdd70c8bf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tprivate void addInnerClasses(ReferenceBinding refBinding)", "signatureAfterChange": "  \tpublic void recordInnerClasses(TypeBinding binding)", "diff": ["-\t */", "-\tprivate void addInnerClasses(ReferenceBinding refBinding) {", "-\t\t// check first if that reference binding is there", "-\t\tfor (int i = 0; i < numberOfInnerClasses; i++) {", "-\t\t\tif (innerClassesBindings[i] == refBinding)", "-\t\t\t\treturn;", "-\t\t}", "-\t\tint length = innerClassesBindings.length;", "-\t\tif (numberOfInnerClasses == length) {", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tinnerClassesBindings,", "-\t\t\t\t0,", "-\t\t\t\tinnerClassesBindings = new ReferenceBinding[length * 2],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "-\t\t}", "-\t\tinnerClassesBindings[numberOfInnerClasses++] = refBinding;", "-\t}", "+\tpublic void recordInnerClasses(TypeBinding binding) {", "+\t\tif (this.innerClassesBindings == null) {", "+\t\t\tthis.innerClassesBindings = new HashSet(INNER_CLASSES_SIZE);", "+\t\tReferenceBinding innerClass = (ReferenceBinding) binding;", "+\t\tthis.innerClassesBindings.add(innerClass.erasure());", "+\t\tReferenceBinding enclosingType = innerClass.enclosingType();", "+\t\twhile (enclosingType != null", "+\t\t\t\t&& enclosingType.isNestedType()) {", "+\t\t\tthis.innerClassesBindings.add(enclosingType.erasure());", "+\t\t\tenclosingType = enclosingType.enclosingType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac5dacbb605746d70de20d9c7e1892bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "02030da0528a8fcbd0cf47635fdec2fbb50668ef", "commitAfterChange": "8ceb000c7fbb649bb64dc31d912e59b394f3fb60", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": " \tpublic boolean visit(EnumDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumDeclaration node)", "diff": ["+", "+\t\tpos= getPosAfterLeftBrace(pos);", "-\t\tStringBuffer leadString= new StringBuffer();", "+\t\tString leadString= \"\"; //$NON-NLS-1$", "+", "-\t", "-\t\t\tpos= getPosAfterLeftBrace(pos);", "-\t\t\t\tint lead= 1;", "-\t\t\t\tint startIndent= getIndent(node.getStartPosition()) + 1;", "-\t\t\t\tfor (int i= 0; i < lead; i++) {", "-\t\t\t\t\tleadString.append(getLineDelimiter());", "-\t\t\t\t}", "-\t\t\t\tleadString.append(createIndentString(startIndent));", "+\t\t\t\tleadString= this.formatter.FIRST_ENUM_CONST.getPrefix(getIndent(node.getStartPosition()), getLineDelimiter());", "-\t\tpos= rewriteNodeList(node, EnumDeclaration.ENUM_CONSTANTS_PROPERTY, pos, leadString.toString(), \", \"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tpos= rewriteNodeList(node, EnumDeclaration.ENUM_CONSTANTS_PROPERTY, pos, leadString, \", \"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tboolean hasConstants= !((List) getNewValue(node, EnumDeclaration.ENUM_CONSTANTS_PROPERTY)).isEmpty();", "+\t\t\t", "+\t\t\t\tif (hasConstants) {", "+\t\t\t\t\tindent= getIndent(pos);", "+\t\t\t\t} else {", "+\t\t\t\t\tindent= getIndent(node.getStartPosition()) + 1;", "+\t\t\t\t}", "+\t\t\t\t\tif (!hasConstants) {", "+\t\t\t\t\t\tString str= this.formatter.FIRST_ENUM_CONST.getPrefix(indent - 1, getLineDelimiter());", "+\t\t\t\t\t\tdoTextInsert(pos, str, getEditGroup(children[0])); //$NON-NLS-1$", "+\t\t\t\t\t}", "-\t\t\t\tindent= getIndent(pos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2f62fec92d7b94094d435b8de42ab75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementInfo.java", "commitBeforeChange": "21cbb8771cc00d8e13a556404fdfae59ecdb14f8", "commitAfterChange": "0899c90ae8de27e397eab6637d91f616ff022416", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected IJavaElement[] removeAndShrinkArray(IJavaElement[] array, IJavaElement deletion)", "signatureAfterChange": " \tpublic void removeChild(IJavaElement child)", "diff": ["-\t */", "-\tprotected IJavaElement[] removeAndShrinkArray(IJavaElement[] array, IJavaElement deletion) {", "-\t\tIJavaElement[] old = array;", "-\t\tarray = new IJavaElement[old.length - 1];", "-\t\tint j = 0;", "-\t\tfor (int i = 0; i < old.length; i++) {", "-\t\t\tif (!old[i].equals(deletion)) {", "-\t\t\t\tarray[j] = old[i];", "-\t\t\t} else {", "-\t\t\t\tSystem.arraycopy(old, i + 1, array, j, old.length - (i + 1));", "-\t\t\t\treturn array;", "-\t\t\t}", "-\t\t\tj++;", "-\t\t}", "-\t\treturn array;", "-\t}", "+\t\tfor (int i = 0, length = this.children.length; i < length; i++) {", "+\t\t\tIJavaElement element = this.children[i];", "+\t\t\tif (element.equals(child)) {", "+\t\t\t\tif (length == 1) {", "+\t\t\t\t\tthis.children = JavaElement.NO_ELEMENTS;", "+\t\t\t\t} else {", "+\t\t\t\t\tIJavaElement[] newChildren = new IJavaElement[length-1];", "+\t\t\t\t\tSystem.arraycopy(this.children, 0, newChildren , 0, i);", "+\t\t\t\t\tif (i < length-1)", "+\t\t\t\t\t\tSystem.arraycopy(this.children, i+1, newChildren, i, length-1-i);", "+\t\t\t\t\tthis.children = newChildren;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}"]}], "num": 59987}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bac2c1fede28b9d0c364aec86e5ed708", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e5589e8ea170cf9618685a348b70bb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private void locateMatchesInClassFile() throws CoreException, JavaModelException", "signatureAfterChange": "\r private void locateMatchesInClassFile() throws CoreException, JavaModelException", "diff": ["-\t\t\t\t\tif (level != SearchPattern.IMPOSSIBLE_MATCH) {\r", "-\t\t\t\t\t\tIMethod methodHandle = \r", "-\t\t\t\t\t\t\tbinaryType.getMethod(\r", "-\t\t\t\t\t\t\t\tnew String(method.isConstructor() ? binding.compoundName[binding.compoundName.length-1] : method.selector),\r", "-\t\t\t\t\t\t\t\tSignature.getParameterTypes(new String(method.signature()).replace('/', '.'))\r", "-\t\t\t\t\t\t\t);\r", "-\t\t\t\t\t\tthis.locator.reportBinaryMatch(\r", "-\t\t\t\t\t\t\tmethodHandle, \r", "-\t\t\t\t\t\t\tinfo, \r", "-\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH ? \r", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH : \r", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);\r", "+\t\t\t\t\tswitch (level) {\r", "+\t\t\t\t\t\tcase SearchPattern.IMPOSSIBLE_MATCH:\r", "+\t\t\t\t\t\tcase SearchPattern.INACCURATE_MATCH:\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\t\tIMethod methodHandle = \r", "+\t\t\t\t\t\t\t\tbinaryType.getMethod(\r", "+\t\t\t\t\t\t\t\t\tnew String(method.isConstructor() ? binding.compoundName[binding.compoundName.length-1] : method.selector),\r", "+\t\t\t\t\t\t\t\t\tSignature.getParameterTypes(new String(method.signature()).replace('/', '.'))\r", "+\t\t\t\t\t\t\t\t);\r", "+\t\t\t\t\t\t\tthis.locator.reportBinaryMatch(\r", "+\t\t\t\t\t\t\t\tmethodHandle, \r", "+\t\t\t\t\t\t\t\tinfo, \r", "+\t\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH ? \r", "+\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH : \r", "+\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);\r", "-\t\t\t\t\tif (level != SearchPattern.IMPOSSIBLE_MATCH) {\r", "-\t\t\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.name));\r", "-\t\t\t\t\t\tthis.locator.reportBinaryMatch(\r", "-\t\t\t\t\t\t\tfieldHandle, \r", "-\t\t\t\t\t\t\tinfo, \r", "-\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH ? \r", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH : \r", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);\r", "+\t\t\t\t\tswitch (level) {\r", "+\t\t\t\t\t\tcase SearchPattern.IMPOSSIBLE_MATCH:\r", "+\t\t\t\t\t\tcase SearchPattern.INACCURATE_MATCH:\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.name));\r", "+\t\t\t\t\t\t\tthis.locator.reportBinaryMatch(\r", "+\t\t\t\t\t\t\t\tfieldHandle, \r", "+\t\t\t\t\t\t\t\tinfo, \r", "+\t\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH ? \r", "+\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH : \r", "+\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9c7cbb295d35e604412075b8b0c9561", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClassFileMatchLocator.java", "commitBeforeChange": "8b61d97704a2b67ed3d29404b8692bdbf30b8b5d", "commitAfterChange": "7fa6d6b6f60d0d2345e743063241c3eb3452b00f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void locateMatches(MatchLocator locator, ClassFile classFile, IBinaryType info) throws CoreException", "signatureAfterChange": " public void locateMatches(MatchLocator locator, ClassFile classFile, IBinaryType info) throws CoreException", "diff": ["-\tif (matchBinary(pattern, info, null))", "-\t\tlocator.reportBinaryMemberDeclaration(null, binaryType, info, SearchMatch.A_ACCURATE);", "+\tif (matchBinary(pattern, info, null)) {", "+\t\tbinaryType = new ResolvedBinaryType((JavaElement) binaryType.getParent(), binaryType.getElementName(), binaryType.getKey());", "+\t\tlocator.reportBinaryMemberDeclaration(null, binaryType, null, info, SearchMatch.A_ACCURATE);", "+\t}", "-\t\t\t\t\t\tlocator.reportBinaryMemberDeclaration(null, methodHandle, info, SearchMatch.A_ACCURATE);", "+\t\t\t\t\t\tlocator.reportBinaryMemberDeclaration(null, methodHandle, method, info, SearchMatch.A_ACCURATE);", "-\t\t\t\t\t\tlocator.reportBinaryMemberDeclaration(null, fieldHandle, info, SearchMatch.A_ACCURATE);", "+\t\t\t\t\t\tlocator.reportBinaryMemberDeclaration(null, fieldHandle, field, info, SearchMatch.A_ACCURATE);", "-\t\t\t\tIMethod methodHandle = binaryType.getMethod(", "-\t\t\t\t\tnew String(name),", "-\t\t\t\t\tCharOperation.toStrings(Signature.getParameterTypes(convertClassFileFormat(method.getMethodDescriptor()))));", "-\t\t\t\tlocator.reportBinaryMemberDeclaration(null, methodHandle, info, accuracy);", "+\t\t\t\tString selector = new String(name);", "+\t\t\t\tString[] parameterTypes = CharOperation.toStrings(Signature.getParameterTypes(convertClassFileFormat(method.getMethodDescriptor())));", "+\t\t\t\tIMethod methodHandle = binaryType.getMethod(selector, parameterTypes);", "+\t\t\t\tmethodHandle = new ResolvedBinaryMethod(binaryType, selector, parameterTypes, methodHandle.getKey());", "+\t\t\t\tlocator.reportBinaryMemberDeclaration(null, methodHandle, null, info, accuracy);", "-\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.getName()));", "-\t\t\t\tlocator.reportBinaryMemberDeclaration(null, fieldHandle, info, accuracy);", "+\t\t\t\tString fieldName = new String(field.getName());", "+\t\t\t\tIField fieldHandle = binaryType.getField(fieldName);", "+\t\t\t\tfieldHandle = new ResolvedBinaryField(binaryType, fieldName, fieldHandle.getKey());", "+\t\t\t\tlocator.reportBinaryMemberDeclaration(null, fieldHandle, null, info, accuracy);"]}], "num": 38791}
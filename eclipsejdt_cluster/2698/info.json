{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc1c81201a912b1eadc82f2f79272a08", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "166ec953cabbc4b0a34d939cbeb5055e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/BinaryParameterDeclarationImpl.java", "commitBeforeChange": "80b216af2abfbc335ce04bf55fc463ba47e45873", "commitAfterChange": "8eb843ef75292ca86ade9a64a79ec382d0e5f4fa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public BinaryParameterDeclarationImpl(ExecutableDeclarationImpl executable,  \t\t\t\t\t\t\t\t\t\t  ITypeBinding typeBinding,                                           int index,                                           BaseProcessorEnv env)", "signatureAfterChange": "     public BinaryParameterDeclarationImpl(ExecutableDeclarationImpl executable,  \t\t\t\t\t\t\t\t\t\t  ITypeBinding typeBinding,                                           int index,                                           BaseProcessorEnv env)", "diff": ["-        super(executable, typeBinding, index, env);      ", "+        super(typeBinding, env);", "+        assert( typeBinding != null ) : \"missing type binding\"; //$NON-NLS-1$", "+        assert( index > 0 ) : \"invalid index \" + index; //$NON-NLS-1$", "+        assert executable != null : \"missing executable\"; //$NON-NLS-1$", "+        _type = typeBinding;", "+        _paramIndex = index;", "+        _executable = executable;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d7bf2b53cd4fb7491e075247770793d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "2c32af86d5291527e6097722d37dc1f2a659e509", "commitAfterChange": "14580239de962357c565e8340e9c6d9ae064b934", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private int adaptEdit(OptimizedReplaceEdit[] sortedEdits, int start, int regionStart, int regionEnd)", "signatureAfterChange": "     private int adaptEdit(OptimizedReplaceEdit[] sortedEdits, int start, int regionStart, int regionEnd)", "diff": ["-\t\t\t\t\t\t\t\t\tif (replacementStart >= length) {", "+\t\t\t\t\t\t\t\t\tif (replacementStart > length || (replacementStart == length && spacesOutsideLength > 0)) {", "+\t\t\t\t\t\t\t\t\t} else if (spacesOutsideLength == 0 && replacementStart == length) {", "+\t\t\t\t\t\t\t\t\t\tedit.replacement = \"\"; //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80ace58da90da5897764e43fbc24b28a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "5d7b0ed4ccf6dc91337d9ac62f14ae585f547855", "commitAfterChange": "e706e02e84b0ab73a5fa0bab5675fe627a8c0157", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "diff": ["+\t\t\tif (alternateLeftTypeId > 15 || alternateRightTypeId > 15) { // must convert String + Object || Object + String", "+\t\t\t\tif (alternateLeftTypeId == T_String) {", "+\t\t\t\t\talternateRightTypeId = T_Object;", "+\t\t\t\t} else if (alternateRightTypeId == T_String) {", "+\t\t\t\t\talternateLeftTypeId = T_Object;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn; // invalid operator", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 2698}
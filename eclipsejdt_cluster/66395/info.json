{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "435b39ebac98f367e6ca2d55d31855b9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4de3596967917bb61640298343efc235", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ba388ee53170dee91fb2402f317f8b352855c459", "commitAfterChange": "d043ef6776b1e3fad1bb618496ee2a48a9410e4b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope dontCare)", "signatureAfterChange": "  \tpublic void returnsExpression(Expression expression, TypeBinding resultType)", "diff": ["-\t\t\t\t\tprivate boolean throwSeen = false;", "-\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope dontCare) {", "-\t\t\t\t\t\tif (returnStatement.expression != null) {", "-\t\t\t\t\t\t\tLambdaExpression.this.returnExpressionsTally++;", "-\t\t\t\t\t\t\tthis.valueReturnSeen = true;", "-\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = false;", "-\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = !this.voidReturnSeen;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.voidReturnSeen = true;", "-\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = false;", "-\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = !this.valueReturnSeen;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn false; // should not analyze any nested lambda returns.", "-\t\t\t\t\t}", "+", "+\tpublic void returnsExpression(Expression expression, TypeBinding resultType) {", "+\t\tif (this.expressionContext != INVOCATION_CONTEXT)", "+\t\t\treturn;", "+\t\tif (expression != null) {", "+\t\t\tthis.original.returnsValue = true;", "+\t\t\tthis.original.voidCompatible = false;", "+\t\t\tthis.original.valueCompatible = !this.original.returnsVoid;", "+\t\t\tif (resultType != null) {", "+\t\t\t\tExpression [] results = (Expression[]) this.original.resultExpressions.get(this.expectedType);", "+\t\t\t\tint resultsLength = results.length;", "+\t\t\t\tSystem.arraycopy(results, 0, results = new Expression[resultsLength + 1], 0, resultsLength);", "+\t\t\t\tresults[resultsLength] = expression;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.original.returnsVoid = true;", "+\t\t\tthis.original.valueCompatible = false;", "+\t\t\tthis.original.voidCompatible = !this.original.returnsValue;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf467409b6e852eeb7f074a763c33feb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "6cd0099c2021e34815eaba987a586ae52dacf569", "commitAfterChange": "d6dc74869d8c303dbb7a6d8b327d8b104cd5865b", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tpublic void returnsExpression(Expression expression, TypeBinding resultType)", "signatureAfterChange": "  \tpublic void returnsExpression(Expression expression, TypeBinding resultType)", "diff": ["-\t\tif (this.original == this) // not in overload resolution context.", "+\t\tif (this.original == this) // Not in overload resolution context. result expressions not relevant.", "-\t\t\tthis.original.valueCompatible = resultType != null && resultType.id == TypeIds.T_void ? false : true;", "-\t\t\tthis.original.resultExpressions = new Expression[1];", "-\t\t\tthis.original.resultExpressions[0] = expression;", "-\t\t\treturn; // void compatibility determined via statementExpression()", "+\t\t\tthis.valueCompatible = resultType != null && resultType.id == TypeIds.T_void ? false : true;", "+\t\t\tthis.voidCompatible = this.assistNode ? true : ((Expression) this.body).statementExpression(); // while code is still being written and completed, we can't ask if it is a statement", "+\t\t\tthis.resultExpressions = new Expression[] { expression };", "+\t\t\treturn;", "-\t\t\tthis.original.returnsValue = true;", "-\t\t\tthis.original.voidCompatible = false;", "-\t\t\tthis.original.valueCompatible = !this.original.returnsVoid;", "+\t\t\tthis.returnsValue = true;", "+\t\t\tthis.voidCompatible = false;", "+\t\t\tthis.valueCompatible = !this.returnsVoid;", "-\t\t\t\tExpression [] returnExpressions = this.original.resultExpressions;", "+\t\t\t\tExpression [] returnExpressions = this.resultExpressions;", "-\t\t\t\tthis.original.resultExpressions = returnExpressions;", "+\t\t\t\tthis.resultExpressions = returnExpressions;", "-\t\t\tthis.original.returnsVoid = true;", "-\t\t\tthis.original.valueCompatible = false;", "-\t\t\tthis.original.voidCompatible = !this.original.returnsValue;", "+\t\t\tthis.returnsVoid = true;", "+\t\t\tthis.valueCompatible = false;", "+\t\t\tthis.voidCompatible = !this.returnsValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e22e1e7f2da707876695ae8e288d2538", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "de85d73a10e0280a45c9d9fcbbd2b35068e06127", "commitAfterChange": "df9615ffbbc7235a218c4e9aa88ba85075714875", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\tthis.parentScope = blockScope;", "+\t\tif (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {", "+\t\t\tif (this.body instanceof Block) {", "+\t\t\t\t// Gather shape information for potential applicability analysis.", "+\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\t\tboolean valueReturnSeen = false;", "+\t\t\t\t\tboolean voidReturnSeen = false;", "+\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope dontCare) {", "+\t\t\t\t\t\tif (returnStatement.expression != null) {", "+\t\t\t\t\t\t\tthis.valueReturnSeen = true;", "+\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = false;", "+\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = !this.voidReturnSeen;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.voidReturnSeen = true;", "+\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = false;", "+\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = !this.valueReturnSeen;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t};", "+\t\t\t\tthis.traverse(visitor, blockScope);", "+\t\t\t} else {", "+\t\t\t\tExpression expression = (Expression) this.body;", "+\t\t\t\tthis.voidCompatible = expression.statementExpression();", "+\t\t\t\tthis.valueCompatible = true;", "+\t\t\t}\t", "+\t\t\tif (devNullCompilationResult == null)", "+\t\t\t\tdevNullCompilationResult = new CompilationResult(this.compilationResult.getCompilationUnit(), 0, 0, blockScope.compilerOptions().maxProblemsPerUnit);", "+\t\t\treturn new PolyTypeBinding(this);", "+\t\t}"]}], "num": 66395}
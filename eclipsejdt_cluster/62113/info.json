{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd57ca53ceb9178f0daa79c33370ed58", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d03e923ef1efac9049959624ebc891d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "f517623c8ff717f8d173940d5d22fbb012050f04", "commitAfterChange": "b18268c0ce6fbb737cee1ca1291ee19aeeac1ba2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "diff": ["-\t\t\tTypeDeclaration typeDecl = getParserStackLastTypeDeclaration();", "-\t\t\tchar[] name = null;", "-\t\t\tif (typeDecl == null) {", "-\t\t\t\tname = this.sourceParser.compilationUnit.compilationResult.compilationUnit.getMainTypeName();", "-\t\t\t} else {", "-\t\t\t\tname = typeDecl.name;", "+\t\t\tchar[] name = this.sourceParser.compilationUnit.compilationResult.compilationUnit.getMainTypeName();", "+\t\t\tif (name == null) {", "+\t\t\t\tthrow new InvalidInputException();", "-\t\t\tif (name != null) {", "-\t\t\t\ttypeRef = new JavadocSingleTypeReference(name, 0, 0, 0);", "-\t\t\t}", "+\t\t\ttypeRef = new JavadocSingleTypeReference(name, 0, 0, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "defd646d169b44928e641cdb80ee92ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "939dd159977cdcca1beae88ff479c614c659015a", "commitAfterChange": "3e4eb0f670f073216375c7703d5a88023b74a5d5", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, int dim)", "signatureAfterChange": "\r \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, int dim)", "diff": ["-\t\t\t\t\t\tif(token != null && token.length != 0)\r", "-\t\t\t\t\t\t\treturn;\r", "-\t\t\t\t\t\tname = computeBaseNames(sourceName[0], excludeNames);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tname = computeBaseNames('b', excludeNames);\r", "+\t\t\t\t\t\tname = computeBaseNames(sourceName[0], excludeNames);\r"]}], "num": 62113}
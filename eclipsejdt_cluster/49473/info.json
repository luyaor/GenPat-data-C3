{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c5868e4151603c8b3a4ce75865fa107", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5efb119a084ad07fc7b650efb9d71c0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "ce7bef49e9ed96b08f61ac987775cd5b5704ee11", "commitAfterChange": "07a11e1e272139637f646eb5763c54327cd4bc46", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " private int readStreamInt(FileInputStream stream) throws IOException", "signatureAfterChange": " private int readStreamInt(FileInputStream stream) throws IOException", "diff": ["-\tint idx = this.bufferIndex;", "-\tthis.bufferIndex += 4;", "-\tint bufferSize = BUFFER_READ_SIZE;", "-\tif (this.bufferIndex >= bufferSize) {", "-\t\tthis.bufferIndex -= bufferSize;", "-\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "-\t\tif (readSize > bufferSize) readSize = bufferSize;", "-\t\tint val = (streamBuffer[idx++]&0xFF)<<24;", "-\t\tif (idx == bufferSize) {", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\tidx = 0;", "-\t\t}", "-\t\tval += (streamBuffer[idx++]&0xFF)<<16;", "-\t\tif (idx == bufferSize) {", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\tidx = 0;", "-\t\t}", "-\t\tval += (streamBuffer[idx++]&0xFF)<<8;", "-\t\tif (idx == bufferSize) {", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\tidx = 0;", "-\t\t}", "-\t\tval += (streamBuffer[idx++]&0xFF);", "-\t\tif (idx == bufferSize) {", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\tidx = 0;", "-\t\t}", "-\t\treturn val;", "+\tif (this.bufferIndex + 4 >= this.bufferEnd) {", "+\t\treadStreamBuffer(stream);", "-\tint val = (streamBuffer[idx]&0xFF)<<24;", "-\tval += (streamBuffer[idx+1]&0xFF)<<16;", "-\tval += (streamBuffer[idx+2]&0xFF)<<8;", "-\treturn val + (streamBuffer[idx+3]&0xFF);", "+\tint val = (streamBuffer[this.bufferIndex++] & 0xFF) << 24;", "+\tval += (streamBuffer[this.bufferIndex++] & 0xFF) << 16;", "+\tval += (streamBuffer[this.bufferIndex++] & 0xFF) << 8;", "+\treturn val + (streamBuffer[this.bufferIndex++] & 0xFF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3c339236149b168f30a7930e7ae327a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "09eb4e140e56d67f0ba07a1283f7afed03f5d473", "commitAfterChange": "193042cfcc3e974ade1d4da172a703fabd891361", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": " private void writeStreamChars(FileOutputStream stream, char[] array) throws IOException", "signatureAfterChange": " private void writeStreamChars(FileOutputStream stream, char[] array, int start, int end) throws IOException", "diff": ["-\tint length= array.length;", "-\tif (this.bufferIndex == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\tthis.bufferIndex = 0;", "-\t}", "-\tif (this.bufferIndex == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\tthis.bufferIndex = 0;", "-\t}", "-\tint idx = this.bufferIndex;", "-\tfor (int i=0; i<length; i++) {", "-\t\tint ch = array[i];", "-\t\tif ((ch & 0x007F) == ch) {", "-\t\t\tthis.streamBuffer[idx++] = (byte) ch;", "-\t\telse if ((ch & 0x07FF) == ch) {", "+}", "+private void writeStreamChars(FileOutputStream stream, char[] array, int start, int end) throws IOException {", "+\t// start can NOT be == end", "+\t// must have checked that there is enough room for end - start * 3 bytes in the buffer", "+", "+\tint oldIndex = this.bufferIndex;", "+\twhile (start < end) {", "+\t\tint ch = array[start++];", "+\t\tif ((ch & 0x007F) == ch) {", "+\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) ch;", "+\t\t} else if ((ch & 0x07FF) == ch) {", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\tidx = 0;", "-\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t}", "+\t\t\tthis.streamBuffer[this.bufferIndex++] = b;", "-\t\t\tthis.streamBuffer[idx++] = b;", "+\t\t\tthis.streamBuffer[this.bufferIndex++] = b;", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\tidx = 0;", "-\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t}", "+\t\t\tthis.streamBuffer[this.bufferIndex++] = b;", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\tidx = 0;", "-\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t}", "+\t\t\tthis.streamBuffer[this.bufferIndex++] = b;", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t}", "-\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\tidx = 0;", "-\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\tthis.streamBuffer[this.bufferIndex++] = b;", "-\tthis.streamEnd += idx - this.bufferIndex + 2;", "-\tthis.bufferIndex = idx;", "+\tthis.streamEnd += this.bufferIndex - oldIndex;"]}], "num": 49473}
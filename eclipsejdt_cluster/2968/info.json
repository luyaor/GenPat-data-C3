{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d6577704da647e5136f43c614432fa8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16ce01c0b4154df84b6f2c7bae5da968", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "6ee69a27bb90b4501869adce2a7020b0fadb9402", "commitAfterChange": "886d0f0c1c856616883aceae38186164d207f2a8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprivate boolean parseHref() throws InvalidInputException", "diff": ["-\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\tconsumeToken();", "-\t\t\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\twhile (this.index <= this.lineEnd && readToken() != TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "+\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "+\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\t\t\t\t// Signal syntax error", "+\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@') {", "+\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "-\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE && this.sourceParser != null)", "-\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\t\t\t\t\tconsumeToken();", "-\t\tif (this.tagValue != TAG_VALUE_VALUE && this.sourceParser != null)", "-\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a66a6b43fc866dec4a8f185667d7334", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected boolean parseReference() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference() throws InvalidInputException", "diff": ["-\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidValueReference(start, getTokenEndPosition(), this.sourceParser.modifiers);", "+\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidValueReference(start, getTokenEndPosition(), this.sourceParser.modifiers);", "-\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "+\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "-\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidValueReference(start, getIndexPosition(), this.sourceParser.modifiers);", "+\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidValueReference(start, getIndexPosition(), this.sourceParser.modifiers);", "-\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "+\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "-\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidValueReference(start, getIndexPosition(), this.sourceParser.modifiers);", "+\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidValueReference(start, getIndexPosition(), this.sourceParser.modifiers);", "-\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\tif (this.reportProblems) {", "-\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidReference(typeRefStartPosition, this.lineEnd);", "+\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidReference(typeRefStartPosition, this.lineEnd);", "-\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocMissingHashCharacter(typeRefStartPosition, this.lineEnd, String.valueOf(this.source, typeRefStartPosition, this.lineEnd-typeRefStartPosition+1));", "+\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocMissingHashCharacter(typeRefStartPosition, this.lineEnd, String.valueOf(this.source, typeRefStartPosition, this.lineEnd-typeRefStartPosition+1));", "-\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocMalformedSeeReference(typeRefStartPosition, end);", "+\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocMalformedSeeReference(typeRefStartPosition, end);", "-\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidReference(currentPosition, getTokenEndPosition());", "+\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidReference(currentPosition, getTokenEndPosition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73525f26d6d34bae19a0acb02f94eb51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "6ee69a27bb90b4501869adce2a7020b0fadb9402", "commitAfterChange": "886d0f0c1c856616883aceae38186164d207f2a8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected boolean parseReference() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference() throws InvalidInputException", "diff": ["+\t\t\t\t\t\t\t// String reference are not allowed for @value tag", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "-\t\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "-\t\t\t\t\t\t\tif (typeRef != null) {", "-\t\t\t\t\t\t\t\tstart = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\tpreviousPosition = start;", "-\t\t\t\t\t\t\t\ttypeRef = null;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// verify end line (expecting empty or end comment)", "-\t\t\t\t\t\t\tif (verifyEndLine(previousPosition)) {", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "+\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "+\t\t\t\t\t\tif (typeRef != null) {", "+\t\t\t\t\t\t\tstart = this.tagSourceEnd+1;", "+\t\t\t\t\t\t\tpreviousPosition = start;", "+\t\t\t\t\t\t\ttypeRef = null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// verify end line", "+\t\t\t\t\t\tif (verifyEndLine(previousPosition)) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "-\t\t\t\t\t\t\t// verify end line (expecting empty or end comment)", "-\t\t\t\t\t\t\tif (verifyEndLine(previousPosition)) {", "-\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\tif (this.tagValue == TAG_VALUE_VALUE) {", "+\t\t\t\t\t\t\t\t// String reference are not allowed for @value tag", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidValueReference(start, getIndexPosition());", "+\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE && this.sourceParser != null) {", "-//\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidReference(start, this.lineEnd);", "-\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// verify end line", "+\t\t\t\t\t\t\tif (verifyEndLine(previousPosition)) return true;", "+\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "-\t\t\t\t\t\tif (this.tagValue == TAG_VALUE_VALUE && this.sourceParser != null) {", "-\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidValueReference(start, getIndexPosition());", "+\t\t\t\t\t\telse if (this.tagValue == TAG_VALUE_VALUE) {", "+\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidValueReference(start, getIndexPosition());"]}], "num": 2968}
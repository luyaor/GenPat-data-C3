{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8bb0ee015aae78a1c16a2e8bfaff268", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4978ea80e9d1b0284f5b05992fd06296", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "57d40c75b9b8c61099e8f565aa04e357409c253c", "commitAfterChange": "68f7052f2c232c6067b3be8957b834321d7a58b1", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprivate void firePostChangeDelta( \t\tIJavaElementDelta deltaToNotify, \t\tIElementChangedListener[] listeners, \t\tint[] listenerMask, \t\tint listenerCount)", "signatureAfterChange": "  \tprivate void firePostChangeDelta( \t\tIJavaElementDelta deltaToNotify, \t\tIElementChangedListener[] listeners, \t\tint[] listenerMask, \t\tint listenerCount)", "diff": ["+\t\t\t// mark the operation stack has not modifying resources since resource deltas are being fired", "+\t\t\tJavaModelOperation.setAttribute(JavaModelOperation.HAS_MODIFIED_RESOURCE_ATTR, null);", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52e75b50a8263ce2692b8d29e88b7836", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \t\r \tprivate ICompilationUnit getWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName,\r \t\t\tString contents, WorkingCopyOwner workingCopyOwner,\r \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor)\r \t\tthrows CoreException, JavaModelException", "signatureAfterChange": " \t \tprivate ICompilationUnit getWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows CoreException, JavaModelException", "diff": ["-\t\r", "-\tprivate ICompilationUnit getWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName,\r", "-\t\t\tString contents, WorkingCopyOwner workingCopyOwner,\r", "-\t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor)\r", "-\t\tthrows CoreException, JavaModelException\r", "-\t{\r", "-\t\t//\r", "-\t\t//  check cache to see if we already have a working copy\r", "-\t\t//\r", "-\t\tICompilationUnit workingCopy = (ICompilationUnit) _typeName2WorkingCopy.get( typeName );\r", "-\t\tif ( workingCopy != null )\r", "-\t\t{\r", "-\t\t\tupdateMaps( typeName, parentCompilationUnit, workingCopy );\r", "-\t\t\treturn workingCopy;\r", "-\t\t}\r", "-\t\t\r", "-\t\tIProject project = parentCompilationUnit.getResource().getProject();\r", "-\t\tJavaProject jp = (JavaProject) parentCompilationUnit.getJavaProject();\r", "-\r", "-\t\t//\r", "-\t\t// create folder for generated source files\r", "-\t\t//\r", "-\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );\r", "-\t\tif (!folder.exists())\r", "-\t\t\tfolder.create(true, true, null);\r", "-\t\t\r", "-\t\t//\r", "-\t\t// make sure __generated_src dir is on the cp if not already\r", "-\t\t//\r", "-\t\tupdateProjectClasspath( jp, folder, progressMonitor );\r", "-\r", "-\t\t// \r", "-\t\t//  figure out package part of type & file name\r", "-\t\t//\r", "-\t\tString pkgName;\r", "-\t\tString fname;\r", "-\t\tint idx = typeName.lastIndexOf( '.' );\r", "-\t\tif ( idx > 0 )\r", "-\t\t{\r", "-\t\t    pkgName = typeName.substring( 0, idx );\r", "-\t\t    fname = \r", "-\t\t\t\ttypeName.substring(idx + 1, typeName.length()) + \".java\";\r", "-\t\t}\r", "-\t\telse\r", "-\t\t{\r", "-\t\t\tpkgName = \"\";\r", "-\t\t\tfname = typeName + \".java\";\r", "-\t\t}\r", "-\r", "-\t\t//\r", "-\t\t//  create compilation unit\r", "-\t\t//\r", "-\t\tIPackageFragmentRoot root = jp.getPackageFragmentRoot(folder);\r", "-\t\tIPackageFragment pkgFragment = \r", "-\t\t\troot.createPackageFragment( pkgName, true, null );\r", "-\t\t\r", "-\t\tICompilationUnit cu = pkgFragment.getCompilationUnit( fname );\r", "-\t\tif ( cu == null || ! cu.getResource().exists() )\r", "-\t\t{\r", "-\t\t    cu = pkgFragment.createCompilationUnit(\r", "-\t\t\t    fname, contents, true, progressMonitor );\r", "-\t\t}\r", "-\t\telse\r", "-\t\t{\r", "-\t\t\tmakeReadOnly( cu, false );\r", "-\t\t}\r", "-\r", "-\t\t//\r", "-\t\t//  TODO:  can we call getWorkingCopy here?\r", "-\t\t//\r", "-\t\tcu.becomeWorkingCopy(problemRequestor, progressMonitor);\r", "-\t\tworkingCopy = cu;\r", "-\t\t\r", "-\t\t//\r", "-\t\t// update maps\r", "-\t\t//\r", "-\t\tupdateMaps( typeName, parentCompilationUnit, workingCopy );\r", "-\t\t\r", "-\t\t// we save this here since the resource has to exist on disk\r", "-\t\tworkingCopy.commitWorkingCopy( true, progressMonitor );\r", "-\t\t\r", "-\t\t//\r", "-\t\t// make the file derived so that it is not checked into source control.\r", "-\t\t//\r", "-\t\tmakeDerived( workingCopy );\r", "-\t\t\r", "-\t\t//\r", "-\t\t// make working copy read-only\r", "-\t\t//\r", "-\t\tmakeReadOnly( workingCopy, true );\r", "-\r", "-\r", "-\t\treturn workingCopy;\r", "-\t\t\r", "-\t}\r", "+\t", "+\tprivate ICompilationUnit getWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName,", "+\t\t\tString contents, WorkingCopyOwner workingCopyOwner,", "+\t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor)", "+\t\tthrows CoreException, JavaModelException", "+\t{", "+\t\t//", "+\t\t//  check cache to see if we already have a working copy", "+\t\t//", "+\t\tICompilationUnit workingCopy = (ICompilationUnit) _typeName2WorkingCopy.get( typeName );", "+\t\tif ( workingCopy != null )", "+\t\t{", "+\t\t\tupdateMaps( typeName, parentCompilationUnit, workingCopy );", "+\t\t\treturn workingCopy;", "+\t\t}", "+\t\t", "+\t\tIProject project = parentCompilationUnit.getResource().getProject();", "+\t\tJavaProject jp = (JavaProject) parentCompilationUnit.getJavaProject();", "+", "+\t\t//", "+\t\t// create folder for generated source files", "+\t\t//", "+\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "+\t\tproject.refreshLocal(IResource.DEPTH_INFINITE, null);", "+\t\tif (!folder.exists())", "+\t\t\tfolder.create(true, true, null);", "+\t\t", "+\t\t//", "+\t\t// make sure __generated_src dir is on the cp if not already", "+\t\t//", "+\t\tupdateProjectClasspath( jp, folder, progressMonitor );", "+", "+\t\t// ", "+\t\t//  figure out package part of type & file name", "+\t\t//", "+\t\tString pkgName;", "+\t\tString fname;", "+\t\tint idx = typeName.lastIndexOf( '.' );", "+\t\tif ( idx > 0 )", "+\t\t{", "+\t\t    pkgName = typeName.substring( 0, idx );", "+\t\t    fname = ", "+\t\t\t\ttypeName.substring(idx + 1, typeName.length()) + \".java\";", "+\t\t}", "+\t\telse", "+\t\t{", "+\t\t\tpkgName = \"\";", "+\t\t\tfname = typeName + \".java\";", "+\t\t}", "+", "+\t\t//", "+\t\t//  create compilation unit", "+\t\t//", "+\t\tIPackageFragmentRoot root = jp.getPackageFragmentRoot(folder);", "+\t\tIPackageFragment pkgFragment = ", "+\t\t\troot.createPackageFragment( pkgName, true, null );", "+\t\t", "+\t\tICompilationUnit cu = pkgFragment.getCompilationUnit( fname );", "+\t\tif ( cu == null || ! cu.getResource().exists() )", "+\t\t{", "+\t\t    cu = pkgFragment.createCompilationUnit(", "+\t\t\t    fname, contents, true, progressMonitor );", "+\t\t}", "+\t\telse", "+\t\t{", "+\t\t\tmakeReadOnly( cu, false );", "+\t\t}", "+", "+\t\t//", "+\t\t//  TODO:  can we call getWorkingCopy here?", "+\t\t//", "+\t\tcu.becomeWorkingCopy(problemRequestor, progressMonitor);", "+\t\tworkingCopy = cu;", "+\t\t", "+\t\t//", "+\t\t// update maps", "+\t\t//", "+\t\tupdateMaps( typeName, parentCompilationUnit, workingCopy );", "+\t\t", "+\t\t// we save this here since the resource has to exist on disk", "+\t\tworkingCopy.commitWorkingCopy( true, progressMonitor );", "+\t\t", "+\t\t//", "+\t\t// make the file derived so that it is not checked into source control.", "+\t\t//", "+\t\tmakeDerived( workingCopy );", "+\t\t", "+\t\t//", "+\t\t// make working copy read-only", "+\t\t//", "+\t\tmakeReadOnly( workingCopy, true );", "+", "+", "+\t\treturn workingCopy;", "+\t\t", "+\t}"]}], "num": 53740}
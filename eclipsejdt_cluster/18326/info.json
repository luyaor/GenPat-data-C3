{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a871d8f29e36b0c765b29867bb45a478", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bf17d1ba21daaedd0cb4d7c17a4e466", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "4ccb1aecc41fbe7a3a6c99e67b5a284a32eff23b", "commitAfterChange": "b25ae5a7f576e7bd1b9d0730e14ef7742dcae3eb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "signatureAfterChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "diff": ["-\t\t\tBoundSet result = (BoundSet) this.solutionsPerTargetType.get(targetType);", "+\t\t\tSolution solution = (Solution) this.solutionsPerTargetType.get(targetType);", "+\t\t\tBoundSet result = solution != null ? solution.bounds : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1a7cc06934a668e0c4b09023bdb0287", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "commitAfterChange": "416292d2f4be39d514e933551cdaebb7c7ebd8a7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "signatureAfterChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "diff": ["-\t\tMethodBinding potentiallyApplicable = reference.findCompileTimeMethodTargeting(t, inferenceContext.scope);", "+\t\treference = reference.resolveExpressionExpecting(t, inferenceContext.scope);", "+\t\tMethodBinding potentiallyApplicable = reference != null ? reference.binding : null;"]}], "num": 18326}
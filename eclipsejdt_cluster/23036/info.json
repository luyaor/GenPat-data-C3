{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70c2b496c82114525d35069cb1e99809", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "392331a16c03838332e80bc91be755ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["-\t\t\tMethodScope initializationScope = field.isStatic()", "-\t\t\t\t? this.scope.referenceContext.staticInitializerScope", "-\t\t\t\t: this.scope.referenceContext.initializerScope;", "-\t\t\tFieldBinding previousField = initializationScope.initializedField;", "-\t\t\ttry {", "-\t\t\t\tinitializationScope.initializedField = field;", "-\t\t\t\tFieldDeclaration fieldDecl = fieldDecls[f];", "-\t\t\t\tTypeBinding fieldType =", "-\t\t\t\t\tfieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT", "-\t\t\t\t\t\t? initializationScope.environment().convertToRawType(this, false /*do not force conversion of enclosing types*/) // enum constant is implicitly of declaring enum type", "-\t\t\t\t\t\t: fieldDecl.type.resolveType(initializationScope, true /* check bounds*/);", "-\t\t\t\tfield.type = fieldType;", "-\t\t\t\tfield.modifiers &= ~ExtraCompilerModifiers.AccUnresolved;", "-\t\t\t\tif (fieldType == null) {", "-\t\t\t\t\tfieldDecl.binding = null;", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tif (fieldType == TypeBinding.VOID) {", "-\t\t\t\t\tthis.scope.problemReporter().variableTypeCannotBeVoid(fieldDecl);", "-\t\t\t\t\tfieldDecl.binding = null;", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tif (fieldType.isArrayType() && ((ArrayBinding) fieldType).leafComponentType == TypeBinding.VOID) {", "-\t\t\t\t\tthis.scope.problemReporter().variableTypeCannotBeVoidArray(fieldDecl);", "-\t\t\t\t\tfieldDecl.binding = null;", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tif ((fieldType.tagBits & TagBits.HasMissingType) != 0) {", "-\t\t\t\t\tfield.tagBits |= TagBits.HasMissingType;", "-\t\t\t\t}", "-\t\t\t\tTypeBinding leafType = fieldType.leafComponentType();", "-\t\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {", "-\t\t\t\t\tfield.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t    initializationScope.initializedField = previousField;", "+\t\tMethodScope initializationScope = field.isStatic()", "+\t\t\t? this.scope.referenceContext.staticInitializerScope", "+\t\t\t: this.scope.referenceContext.initializerScope;", "+\t\tFieldBinding previousField = initializationScope.initializedField;", "+\t\ttry {", "+\t\t\tinitializationScope.initializedField = field;", "+\t\t\tFieldDeclaration fieldDecl = fieldDecls[f];", "+\t\t\tTypeBinding fieldType =", "+\t\t\t\tfieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT", "+\t\t\t\t\t? initializationScope.environment().convertToRawType(this, false /*do not force conversion of enclosing types*/) // enum constant is implicitly of declaring enum type", "+\t\t\t\t\t: fieldDecl.type.resolveType(initializationScope, true /* check bounds*/);", "+\t\t\tfield.type = fieldType;", "+\t\t\tfield.modifiers &= ~ExtraCompilerModifiers.AccUnresolved;", "+\t\t\tif (fieldType == null) {", "+\t\t\t\tfieldDecl.binding = null;", "+\t\t\t\treturn null;", "+\t\t\tif (fieldType == TypeBinding.VOID) {", "+\t\t\t\tthis.scope.problemReporter().variableTypeCannotBeVoid(fieldDecl);", "+\t\t\t\tfieldDecl.binding = null;", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tif (fieldType.isArrayType() && ((ArrayBinding) fieldType).leafComponentType == TypeBinding.VOID) {", "+\t\t\t\tthis.scope.problemReporter().variableTypeCannotBeVoidArray(fieldDecl);", "+\t\t\t\tfieldDecl.binding = null;", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tif ((fieldType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tfield.tagBits |= TagBits.HasMissingType;", "+\t\t\t}", "+\t\t\tTypeBinding leafType = fieldType.leafComponentType();", "+\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {", "+\t\t\t\tfield.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "+\t\t\t}", "+", "+\t\t\t// apply null default:", "+\t\t\tLookupEnvironment environment = this.scope.environment();", "+\t\t\tif (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t// enum constants neither have a type declaration nor can they be null", "+\t\t\t\t\tfield.tagBits |= TagBits.AnnotationNonNull;", "+\t\t\t\t} else {", "+\t\t\t\t\tinitializeNullDefault();", "+\t\t\t\t\tif (hasNonNullDefault()) {", "+\t\t\t\t\t\tfield.fillInDefaultNonNullness(fieldDecl, initializationScope);", "+\t\t\t\t\t}", "+\t\t\t\t\t// validate null annotation:", "+\t\t\t\t\tthis.scope.validateNullAnnotation(field.tagBits, fieldDecl.type, fieldDecl.annotations);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} finally {", "+\t\t    initializationScope.initializedField = previousField;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdcccaf3604cf7294c7c73dd341cd40d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 42, "signatureBeforeChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["+", "+\t\t\t\t// apply null default:", "+\t\t\t\tLookupEnvironment environment = this.scope.environment();", "+\t\t\t\tTypeBinding defaultNullnessAnnotationBinding = null;", "+\t\t\t\tif (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\t\t\tinitializeNullDefault();", "+\t\t\t\t\tdefaultNullnessAnnotationBinding = findDefaultNullness(this.scope, environment);", "+\t\t\t\t\tif (defaultNullnessAnnotationBinding != null && defaultNullnessAnnotationBinding.id == TypeIds.T_ConfiguredAnnotationNonNullByDefault) {", "+\t\t\t\t\t\tfield.fillInDefaultNonNullness(defaultNullnessAnnotationBinding, fieldDecl, initializationScope);", "+\t\t\t\t\t}", "+\t\t\t\t\t// validate null annotation:", "+\t\t\t\t\tthis.scope.validateNullAnnotation(field.tagBits, fieldDecl.type, fieldDecl.annotations);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd794edf1f434013819429f9815e799f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "b14a6c4d09a9bece1bab75937908ff44df19fa09", "commitAfterChange": "a846071c58f9098177eef02be0134294158f9c4f", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["-\t\t\tMethodScope initializationScope = field.isStatic()", "-\t\t\t\t? this.scope.referenceContext.staticInitializerScope", "-\t\t\t\t: this.scope.referenceContext.initializerScope;", "-\t\t\tFieldBinding previousField = initializationScope.initializedField;", "-\t\t\ttry {", "-\t\t\t\tinitializationScope.initializedField = field;", "-\t\t\t\tFieldDeclaration fieldDecl = fieldDecls[f];", "-\t\t\t\tTypeBinding fieldType =", "-\t\t\t\t\tfieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT", "-\t\t\t\t\t\t? initializationScope.environment().convertToRawType(this, false /*do not force conversion of enclosing types*/) // enum constant is implicitly of declaring enum type", "-\t\t\t\t\t\t: fieldDecl.type.resolveType(initializationScope, true /* check bounds*/);", "-\t\t\t\tfield.type = fieldType;", "-\t\t\t\tfield.modifiers &= ~ExtraCompilerModifiers.AccUnresolved;", "-\t\t\t\tif (fieldType == null) {", "-\t\t\t\t\tfieldDecl.binding = null;", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tif (fieldType == TypeBinding.VOID) {", "-\t\t\t\t\tthis.scope.problemReporter().variableTypeCannotBeVoid(fieldDecl);", "-\t\t\t\t\tfieldDecl.binding = null;", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tif (fieldType.isArrayType() && ((ArrayBinding) fieldType).leafComponentType == TypeBinding.VOID) {", "-\t\t\t\t\tthis.scope.problemReporter().variableTypeCannotBeVoidArray(fieldDecl);", "-\t\t\t\t\tfieldDecl.binding = null;", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tif ((fieldType.tagBits & TagBits.HasMissingType) != 0) {", "-\t\t\t\t\tfield.tagBits |= TagBits.HasMissingType;", "-\t\t\t\t}", "-\t\t\t\tTypeBinding leafType = fieldType.leafComponentType();", "-\t\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {", "-\t\t\t\t\tfield.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t    initializationScope.initializedField = previousField;", "+\t\tMethodScope initializationScope = field.isStatic()", "+\t\t\t? this.scope.referenceContext.staticInitializerScope", "+\t\t\t: this.scope.referenceContext.initializerScope;", "+\t\tFieldBinding previousField = initializationScope.initializedField;", "+\t\ttry {", "+\t\t\tinitializationScope.initializedField = field;", "+\t\t\tFieldDeclaration fieldDecl = fieldDecls[f];", "+\t\t\tTypeBinding fieldType =", "+\t\t\t\tfieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT", "+\t\t\t\t\t? initializationScope.environment().convertToRawType(this, false /*do not force conversion of enclosing types*/) // enum constant is implicitly of declaring enum type", "+\t\t\t\t\t: fieldDecl.type.resolveType(initializationScope, true /* check bounds*/);", "+\t\t\tfield.type = fieldType;", "+\t\t\tfield.modifiers &= ~ExtraCompilerModifiers.AccUnresolved;", "+\t\t\tif (fieldType == null) {", "+\t\t\t\tfieldDecl.binding = null;", "+\t\t\t\treturn null;", "+\t\t\tif (fieldType == TypeBinding.VOID) {", "+\t\t\t\tthis.scope.problemReporter().variableTypeCannotBeVoid(fieldDecl);", "+\t\t\t\tfieldDecl.binding = null;", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tif (fieldType.isArrayType() && ((ArrayBinding) fieldType).leafComponentType == TypeBinding.VOID) {", "+\t\t\t\tthis.scope.problemReporter().variableTypeCannotBeVoidArray(fieldDecl);", "+\t\t\t\tfieldDecl.binding = null;", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tif ((fieldType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tfield.tagBits |= TagBits.HasMissingType;", "+\t\t\t}", "+\t\t\tTypeBinding leafType = fieldType.leafComponentType();", "+\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {", "+\t\t\t\tfield.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "+\t\t\t}", "+", "+\t\t\t// apply null default:", "+\t\t\tLookupEnvironment environment = this.scope.environment();", "+\t\t\tif (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t// enum constants neither have a type declaration nor can they be null", "+\t\t\t\t\tfield.tagBits |= TagBits.AnnotationNonNull;", "+\t\t\t\t} else {", "+\t\t\t\t\tinitializeNullDefault();", "+\t\t\t\t\tif (hasNonNullDefault()) {", "+\t\t\t\t\t\tfield.fillInDefaultNonNullness(fieldDecl, initializationScope);", "+\t\t\t\t\t}", "+\t\t\t\t\t// validate null annotation:", "+\t\t\t\t\tthis.scope.validateNullAnnotation(field.tagBits, fieldDecl.type, fieldDecl.annotations);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} finally {", "+\t\t    initializationScope.initializedField = previousField;", "+\t\t}"]}], "num": 23036}
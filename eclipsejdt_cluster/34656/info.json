{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a752ca535cd15c3c4657db7621d48eb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03e5848f4aea5375a4c09fa8ba9c941b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "625da6d5291673f01e323396ceb1f6773e9845a5", "commitAfterChange": "9286ce5f956aa28fecddfe609c2ffd5cc46ab296", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic int lineNumber(int position)", "signatureAfterChange": " \tpublic int lineNumber(int position)", "diff": ["-\t\tif (this.lineEndTable == null) return 1;", "+\t\tint lineNumber = getLineNumber(position);", "+\t\treturn lineNumber < 1 ? 1 : lineNumber;", "+\t}", "-\t\t\treturn 1;", "-\t\t\t// position illegal or before the first line delimiter", "-\t\t\t\treturn 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "086d4774fbbabaddebe102c7973c6d05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "333e183ebe56f659f1083c452edbf2ef4089fa56", "commitAfterChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint matchRule)", "signatureAfterChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint matchRule)", "diff": ["-\t", "-\t// See if we must resolve specifically for generics", "-\tif (parameterSimpleNames != null && parameterSimpleNames.length > 0) {", "-\t\tint psLength = parameterSimpleNames.length;", "-\t\ttry {", "-\t\t\t// Currently, we need to resolve for generic if one of method type argument", "-\t\t\t// equals to one of declaring type type parameter", "-\t\t\tITypeParameter[] typeParameters = this.declaringType.getTypeParameters();", "-\t\t\tif (typeParameters != null && typeParameters.length > 0) {", "-\t\t\t\tint tpLength = typeParameters.length;", "-\t\t\t\tfor (int i=0; i<psLength && !this.mustResolveGeneric; i++) {", "-\t\t\t\t\tfor (int j=0; j<tpLength && !this.mustResolveGeneric; j++) {", "-\t\t\t\t\t\tif (CharOperation.equals(parameterSimpleNames[i], typeParameters[j].getElementName().toCharArray())) {", "-\t\t\t\t\t\t\tthis.mustResolveGeneric = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f03d1c14b61d69b85460858af82816", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/CommentFormatterUtil.java", "commitBeforeChange": "9fdf60099af5bd70d810793e82261fbcf589311b", "commitAfterChange": "862ae8342a82a200aa8036b2b41fe50ea56f4086", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static String format(int kind, String source, int offset, int length, Map preferences)", "signatureAfterChange": " \tpublic static String format(int kind, String source, int offset, int length, Map preferences)", "diff": ["+\t\tAssert.isNotNull(source);", "+\t\tIDocument document= new Document(source);", "+\t\t", "+\t\ttry {", "+\t\t\tint indentOffset= document.getLineOffset(document.getLineOfOffset(offset));", "+\t\t\tint indentationLevel= inferIndentationLevel(document.get(indentOffset, offset - indentOffset), getTabSize(preferences));", "+\t\t\treturn format(kind, source, offset, length, indentationLevel, preferences);", "+\t\t} catch (BadLocationException x) {", "+\t\t\tthrow new RuntimeException(x);", "+\t\t}", "+\t}", "-\t\ttry {", "-\t\t\tint indentOffset= document.getLineOffset(document.getLineOfOffset(offset));", "-\t\t\tint indentationLevel= inferIndentationLevel(document.get(indentOffset, offset - indentOffset), getTabSize(preferences));", "-\t\t\tedit= ToolFactory.createCodeFormatter(preferences).format(kind, source, offset, length, indentationLevel, TextUtilities.getDefaultLineDelimiter(document));", "-\t\t} catch (BadLocationException x) {", "-\t\t\tthrow new RuntimeException(x);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "281b78f0b5d068d42573483ac0f228cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void buildSupertypes()", "signatureAfterChange": " \tprotected void buildSupertypes()", "diff": ["-\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();", "-\t\tif (nameLookup != null) {", "-\t\t\torg.eclipse.jdt.core.ICompilationUnit[] workingCopies = this.hierarchy.workingCopies;", "-\t\t\torg.eclipse.jdt.core.ICompilationUnit[] unitsToLookInside;", "-\t\t\tif (unitToLookInside != null) {", "-\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "-\t\t\t\tif (wcLength == 0) {", "-\t\t\t\t\tunitsToLookInside = new org.eclipse.jdt.core.ICompilationUnit[] {unitToLookInside};", "-\t\t\t\t} else {", "-\t\t\t\t\tunitsToLookInside = new org.eclipse.jdt.core.ICompilationUnit[wcLength+1];", "-\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "-\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tunitsToLookInside = workingCopies;", "-\t\t\t}", "-\t\t\ttry {", "-\t\t\t\tnameLookup.setUnitsToLookInside(unitsToLookInside); // NB: this uses a PerThreadObject, so it is thread safe", "-\t\t\t\t// resolve", "-\t\t\t\tthis.hierarchyResolver.resolve(type);", "-\t\t\t} finally {", "-\t\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// resolve", "-\t\t\tthis.hierarchyResolver.resolve(type);", "-\t\t}", "+\t\tthis.hierarchyResolver.resolve(type);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c72534ab9254a9d726e35dae9ec009e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "81760d211469bf12100fd76e7231799f80190c5f", "commitAfterChange": "d3721d56cc1a3428241d332af8c31ddc07515e58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean encloses(String resourcePath)", "signatureAfterChange": " \tpublic boolean encloses(String resourcePath)", "diff": ["+\t\treturn encloses(resourcePath, null);", "+\t}", "-\t\t\t\t\t\tinitialize();", "-\t\t\t\trefresh();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "633a75834cbadb1633f6864b2ed5f15c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "c2615599dfd5ddc3fcc221204bcbd52b635e421d", "commitAfterChange": "02e31599516a86814794e26703d248f5e905f2c1", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": " private synchronized void updateIndexState(String indexLocation, Integer indexState)", "signatureAfterChange": " private synchronized void updateIndexState(String indexLocation, Integer indexState)", "diff": ["+}", "+\twriteSavedIndexNamesFile();", "+", "+\tif (VERBOSE) {", "+\t\tString state = \"?\"; //$NON-NLS-1$", "+\t\tif (indexState == SAVED_STATE) state = \"SAVED\"; //$NON-NLS-1$", "+\t\telse if (indexState == UPDATING_STATE) state = \"UPDATING\"; //$NON-NLS-1$", "+\t\telse if (indexState == UNKNOWN_STATE) state = \"UNKNOWN\"; //$NON-NLS-1$", "+\t\telse if (indexState == REBUILDING_STATE) state = \"REBUILDING\"; //$NON-NLS-1$", "+\t\tUtil.verbose(\"-> index state updated to: \" + state + \" for: \"+indexLocation); //$NON-NLS-1$ //$NON-NLS-2$", "+\t}", "+}", "-\t}", "-\tif (VERBOSE) {", "-\t\tString state = \"?\"; //$NON-NLS-1$", "-\t\tif (indexState == SAVED_STATE) state = \"SAVED\"; //$NON-NLS-1$", "-\t\telse if (indexState == UPDATING_STATE) state = \"UPDATING\"; //$NON-NLS-1$", "-\t\telse if (indexState == UNKNOWN_STATE) state = \"UNKNOWN\"; //$NON-NLS-1$", "-\t\telse if (indexState == REBUILDING_STATE) state = \"REBUILDING\"; //$NON-NLS-1$", "-\t\tUtil.verbose(\"-> index state updated to: \" + state + \" for: \"+indexLocation); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84f096ac88fe1ed10a274e2738f94549", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "d25d8e2aefb1fe7881a3b669cacd403afc528b1a", "commitAfterChange": "c768bb705d25a055607160ce11d239f196ca5653", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  protected void addAffectedSourceFiles()", "signatureAfterChange": "  protected void addAffectedSourceFiles()", "diff": ["-\t\t\tif (file.exists()) {", "-\t\t\t\tClasspathMultiDirectory md = sourceLocations[0];", "-\t\t\t\tif (sourceLocations.length > 1) {", "-\t\t\t\t\tIPath sourceFileFullPath = file.getFullPath();", "-\t\t\t\t\tfor (int j = 0, m = sourceLocations.length; j < m; j++) {", "-\t\t\t\t\t\tif (sourceLocations[j].sourceFolder.getFullPath().isPrefixOf(sourceFileFullPath)) {", "-\t\t\t\t\t\t\tmd = sourceLocations[j];", "-\t\t\t\t\t\t\tif (md.exclusionPatterns == null && md.inclusionPatterns == null)", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tif (!Util.isExcluded(file, md.inclusionPatterns, md.exclusionPatterns))", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tSourceFile sourceFile = new SourceFile(file, md);", "-\t\t\t\tif (sourceFiles.contains(sourceFile)) continue next;", "-\t\t\t\tif (compiledAllAtOnce && previousSourceFiles != null && previousSourceFiles.contains(sourceFile))", "-\t\t\t\t\tcontinue next; // can skip previously compiled files since already saw hierarchy related problems", "+\t\t\tSourceFile sourceFile = findSourceFile(file);", "+\t\t\tif (sourceFile == null) continue next;", "+\t\t\tif (sourceFiles.contains(sourceFile)) continue next;", "+\t\t\tif (compiledAllAtOnce && previousSourceFiles != null && previousSourceFiles.contains(sourceFile))", "+\t\t\t\tcontinue next; // can skip previously compiled files since already saw hierarchy related problems", "-\t\t\t\tif (JavaBuilder.DEBUG)", "-\t\t\t\t\tSystem.out.println(\"  adding affected source file \" + typeLocator); //$NON-NLS-1$", "-\t\t\t\tsourceFiles.add(sourceFile);", "-\t\t\t}", "+\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\tSystem.out.println(\"  adding affected source file \" + typeLocator); //$NON-NLS-1$", "+\t\t\tsourceFiles.add(sourceFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93f503ec7b1cfe0e8d744b6332e9ba9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " public IPackageFragment getPackageFragment(String packageName)", "signatureAfterChange": " public IPackageFragment getPackageFragment(String packageName)", "diff": ["-\tif (packageName.indexOf(' ') != -1) { // tolerate package names with spaces (e.g. 'x . y') (http://bugs.eclipse.org/bugs/show_bug.cgi?id=21957)", "-\t\tchar[][] compoundName = Util.toCompoundChars(packageName);", "-\t\tStringBuffer buffer = new StringBuffer(packageName.length());", "-\t\tfor (int i = 0, length = compoundName.length; i < length; i++) {", "-\t\t\tbuffer.append(CharOperation.trim(compoundName[i]));", "-\t\t\tif (i != length-1) {", "-\t\t\t\tbuffer.append('.');", "-\t\t\t}", "-\t\t}", "-\t\tpackageName = buffer.toString();", "-\t}", "-\treturn new PackageFragment(this, packageName);", "+\t// tolerate package names with spaces (e.g. 'x . y') (http://bugs.eclipse.org/bugs/show_bug.cgi?id=21957)", "+\tString[] pkgName = Util.getTrimmedSimpleNames(packageName); ", "+\treturn getPackageFragment(pkgName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94fab1c170a61a3514dc0b646beb6ef4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "f95e58c822d23fa71cf6c6e2ac3adce80f07a42f", "commitAfterChange": "1c5093c74409d802b34134e981077f69adbcd0bf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate JavaElement getJavaElement(LocalVariableBinding binding)", "signatureAfterChange": " \t \tprivate JavaElement getJavaElement(LocalVariableBinding binding)", "diff": ["-\t\t\tIType type = (IType)this.getJavaElementOfCompilationUnit(typeDeclaration, typeDeclaration.binding);", "-\t\t\tif (type != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tIInitializer[] initializers = type.getInitializers();", "-\t\t\t\t\tif (initializers != null) {", "-\t\t\t\t\t\tdone : for (int i = 0; i < initializers.length; i++) {", "-\t\t\t\t\t\t\tIInitializer initializer = initializers[i];", "-\t\t\t\t\t\t\tISourceRange sourceRange = initializer.getSourceRange();", "-\t\t\t\t\t\t\tif (sourceRange != null) {", "-\t\t\t\t\t\t\t\tint initializerStart = sourceRange.getOffset();", "-\t\t\t\t\t\t\t\tint initializerEnd = initializerStart + sourceRange.getLength();", "-\t\t\t\t\t\t\t\tif (initializerStart <= local.sourceStart &&", "-\t\t\t\t\t\t\t\t\t\tlocal.sourceEnd <= initializerEnd) {", "-\t\t\t\t\t\t\t\t\tparent = (JavaElement)initializer;", "-\t\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tJavaElement type = this.getJavaElementOfCompilationUnit(typeDeclaration, typeDeclaration.binding);", "+\t\t\tparent = Util.getUnresolvedJavaElement(local.sourceStart, local.sourceEnd, type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97865edfb8798cd6f87f0fab2a3cefa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r private void buildTypeBindings(final char[] source)", "signatureAfterChange": "\r private void buildTypeBindings(final char[] source)", "diff": ["-\tchar[] qualifiedName;\r", "+\tchar[] qualifiedName = this.getQualifiedName();\r", "+\tif (qualifiedName == null) return;\r", "+\r", "+\t// create match set\t\r", "+\tthis.matchSet = new MatchSet(this.locator);\r", "+\t\r", "+\ttry {\r", "+\t\tthis.locator.parser.matchSet = this.matchSet;\r", "+\r", "+\t\tthis.parsedUnit = (CompilationUnitDeclaration)this.locator.parsedUnits.get(qualifiedName);\r", "+\t\tif (this.parsedUnit == null) {\r", "+\t\t\t// diet parse\r", "+\t\t\tthis.parsedUnit = this.locator.dietParse(source);\r", "+\t\t\t\r", "+\t\t\t// initial type binding creation\r", "+\t\t\tthis.locator.lookupEnvironment.buildTypeBindings(this.parsedUnit);\r", "+\t\t} else {\r", "+\t\t\t// free memory\r", "+\t\t\tthis.locator.parsedUnits.put(qualifiedName, null);\r", "+\t\t}\r", "+\t} finally {\r", "+\t\tthis.locator.parser.matchSet = null;\r", "+\t}\r", "+}\r", "-\t\tqualifiedName = cu.getType(new String(mainTypeName)).getFullyQualifiedName().toCharArray();\r", "-\t\t\tqualifiedName = classFile.getType().getFullyQualifiedName().toCharArray();\r", "-\t\t\treturn; // nothing we can do here\r", "-\t}\r", "-\r", "-\t// create match set\t\r", "-\tthis.matchSet = new MatchSet(this.locator);\r", "-\tthis.locator.parser.matchSet = this.matchSet;\r", "-\r", "-\tthis.parsedUnit = (CompilationUnitDeclaration)this.locator.parsedUnits.get(qualifiedName);\r", "-\tif (this.parsedUnit == null) {\r", "-\t\t// diet parse\r", "-\t\tthis.parsedUnit = this.locator.dietParse(source);\r", "-\t\t\r", "-\t\t// initial type binding creation\r", "-\t\tthis.locator.lookupEnvironment.buildTypeBindings(this.parsedUnit);\r", "-\t} else {\r", "-\t\t// free memory\r", "-\t\tthis.locator.parsedUnits.put(qualifiedName, null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a329aebb22185b87148b0e98138f6401", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tpublic void printNextToken(int[] expectedTokenTypes)", "signatureAfterChange": "  \tpublic void printNextToken(int[] expectedTokenTypes)", "diff": ["-\tpublic void printNextToken(int[] expectedTokenTypes){", "+\tpublic void printNextToken(int[] expectedTokenTypes) {", "+\t\tprintNextToken(expectedTokenTypes, false);", "+\t}", "-\t\t\tthis.print(currentTokenSource, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6b87a582036cb5df24965fc5ce775c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "645b7bfaa2fa6e51ee8178c0b98a65d610d989c2", "commitAfterChange": "6cb5df5deb874bcd03782569c94840e1aa61cfba", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public TypeDeclarationPattern(\r \tchar[] qualification,\r \tchar[][] enclosingTypeNames,\r \tchar[] simpleName,\r \tchar classOrInterface,\r \tint matchMode, \r \tboolean isCaseSensitive)", "signatureAfterChange": "\r \t\r public TypeDeclarationPattern(int matchMode, boolean isCaseSensitive)", "diff": ["-\tprivate char decodedClassOrInterface;\r", "+\t\r", "+public TypeDeclarationPattern(int matchMode, boolean isCaseSensitive) {\r", "+\tsuper(matchMode, isCaseSensitive);\r", "+}\r", "-\tchar[] qualification,\r", "-\tthis.qualification = isCaseSensitive ? qualification : CharOperation.toLowerCase(qualification);\r", "-\tthis.needsResolve = qualification != null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4d882f68f08f4c12d9a71414449bd5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "980e2ed65938249223128b7fd8d8778c9eb3b8a3", "commitAfterChange": "929a0b3bf0dc89629d94cc4afbe6066815008f9f", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 211, "signatureBeforeChange": "  private boolean isKeyword(char[] tokenSource)", "signatureAfterChange": "  private boolean isKeyword(int token)", "diff": ["-private boolean isKeyword(char[] tokenSource) {", "-\t/*", "-\t * This code is heavily grammar dependant", "-\t */", "-", "-\tif (tokenSource == null) {", "-\t\treturn false;", "-\t}", "-\ttry {", "-\t\tScanner scanner = new Scanner();", "-\t\tscanner.setSource(tokenSource);", "-\t\tint token = scanner.getNextToken();", "-\t\tchar[] currentKeyword;", "-\t\ttry {", "-\t\t\tcurrentKeyword = scanner.getCurrentIdentifierSource();", "-\t\t} catch (ArrayIndexOutOfBoundsException e) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tint nextToken= scanner.getNextToken();", "-\t\tif (nextToken == TerminalTokens.TokenNameEOF", "-\t\t\t&& scanner.startPosition == scanner.source.length) { // to handle case where we had an ArrayIndexOutOfBoundsException ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     // while reading the last token", "-\t\t\tswitch(token) {", "-\t\t\t\tcase Scanner.TokenNameERROR:", "-\t\t\t\t\tif (CharOperation.equals(\"goto\".toCharArray(), currentKeyword) ||CharOperation.equals(\"const\".toCharArray(), currentKeyword)) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\tcase Scanner.TokenNameabstract:", "-\t\t\t\tcase Scanner.TokenNameassert:", "-\t\t\t\tcase Scanner.TokenNamebyte:", "-\t\t\t\tcase Scanner.TokenNamebreak:", "-\t\t\t\tcase Scanner.TokenNameboolean:", "-\t\t\t\tcase Scanner.TokenNamecase:", "-\t\t\t\tcase Scanner.TokenNamechar:", "-\t\t\t\tcase Scanner.TokenNamecatch:", "-\t\t\t\tcase Scanner.TokenNameclass:", "-\t\t\t\tcase Scanner.TokenNamecontinue:", "-\t\t\t\tcase Scanner.TokenNamedo:", "-\t\t\t\tcase Scanner.TokenNamedouble:", "-\t\t\t\tcase Scanner.TokenNamedefault:", "-\t\t\t\tcase Scanner.TokenNameelse:", "-\t\t\t\tcase Scanner.TokenNameextends:", "-\t\t\t\tcase Scanner.TokenNamefor:", "-\t\t\t\tcase Scanner.TokenNamefinal:", "-\t\t\t\tcase Scanner.TokenNamefloat:", "-\t\t\t\tcase Scanner.TokenNamefalse:", "-\t\t\t\tcase Scanner.TokenNamefinally:", "-\t\t\t\tcase Scanner.TokenNameif:", "-\t\t\t\tcase Scanner.TokenNameint:", "-\t\t\t\tcase Scanner.TokenNameimport:", "-\t\t\t\tcase Scanner.TokenNameinterface:", "-\t\t\t\tcase Scanner.TokenNameimplements:", "-\t\t\t\tcase Scanner.TokenNameinstanceof:", "-\t\t\t\tcase Scanner.TokenNamelong:", "-\t\t\t\tcase Scanner.TokenNamenew:", "-\t\t\t\tcase Scanner.TokenNamenull:", "-\t\t\t\tcase Scanner.TokenNamenative:", "-\t\t\t\tcase Scanner.TokenNamepublic:", "-\t\t\t\tcase Scanner.TokenNamepackage:", "-\t\t\t\tcase Scanner.TokenNameprivate:", "-\t\t\t\tcase Scanner.TokenNameprotected:", "-\t\t\t\tcase Scanner.TokenNamereturn:", "-\t\t\t\tcase Scanner.TokenNameshort:", "-\t\t\t\tcase Scanner.TokenNamesuper:", "-\t\t\t\tcase Scanner.TokenNamestatic:", "-\t\t\t\tcase Scanner.TokenNameswitch:", "-\t\t\t\tcase Scanner.TokenNamestrictfp:", "-\t\t\t\tcase Scanner.TokenNamesynchronized:", "-\t\t\t\tcase Scanner.TokenNametry:", "-\t\t\t\tcase Scanner.TokenNamethis:", "-\t\t\t\tcase Scanner.TokenNametrue:", "-\t\t\t\tcase Scanner.TokenNamethrow:", "-\t\t\t\tcase Scanner.TokenNamethrows:", "-\t\t\t\tcase Scanner.TokenNametransient:", "-\t\t\t\tcase Scanner.TokenNamevoid:", "-\t\t\t\tcase Scanner.TokenNamevolatile:", "-\t\t\t\tcase Scanner.TokenNamewhile:", "-\t\t\t\t\treturn true;", "-\t\t\t\tdefault: ", "-\t\t\t\t\treturn false;", "-\t\t\t}", "-\t\t} else {", "-\t\t\treturn false;", "+private boolean isKeyword(int token) {", "+\t\tswitch(token) {", "+\t\t\tcase Scanner.TokenNameabstract:", "+\t\t\tcase Scanner.TokenNameassert:", "+\t\t\tcase Scanner.TokenNamebyte:", "+\t\t\tcase Scanner.TokenNamebreak:", "+\t\t\tcase Scanner.TokenNameboolean:", "+\t\t\tcase Scanner.TokenNamecase:", "+\t\t\tcase Scanner.TokenNamechar:", "+\t\t\tcase Scanner.TokenNamecatch:", "+\t\t\tcase Scanner.TokenNameclass:", "+\t\t\tcase Scanner.TokenNamecontinue:", "+\t\t\tcase Scanner.TokenNamedo:", "+\t\t\tcase Scanner.TokenNamedouble:", "+\t\t\tcase Scanner.TokenNamedefault:", "+\t\t\tcase Scanner.TokenNameelse:", "+\t\t\tcase Scanner.TokenNameextends:", "+\t\t\tcase Scanner.TokenNamefor:", "+\t\t\tcase Scanner.TokenNamefinal:", "+\t\t\tcase Scanner.TokenNamefloat:", "+\t\t\tcase Scanner.TokenNamefalse:", "+\t\t\tcase Scanner.TokenNamefinally:", "+\t\t\tcase Scanner.TokenNameif:", "+\t\t\tcase Scanner.TokenNameint:", "+\t\t\tcase Scanner.TokenNameimport:", "+\t\t\tcase Scanner.TokenNameinterface:", "+\t\t\tcase Scanner.TokenNameimplements:", "+\t\t\tcase Scanner.TokenNameinstanceof:", "+\t\t\tcase Scanner.TokenNamelong:", "+\t\t\tcase Scanner.TokenNamenew:", "+\t\t\tcase Scanner.TokenNamenull:", "+\t\t\tcase Scanner.TokenNamenative:", "+\t\t\tcase Scanner.TokenNamepublic:", "+\t\t\tcase Scanner.TokenNamepackage:", "+\t\t\tcase Scanner.TokenNameprivate:", "+\t\t\tcase Scanner.TokenNameprotected:", "+\t\t\tcase Scanner.TokenNamereturn:", "+\t\t\tcase Scanner.TokenNameshort:", "+\t\t\tcase Scanner.TokenNamesuper:", "+\t\t\tcase Scanner.TokenNamestatic:", "+\t\t\tcase Scanner.TokenNameswitch:", "+\t\t\tcase Scanner.TokenNamestrictfp:", "+\t\t\tcase Scanner.TokenNamesynchronized:", "+\t\t\tcase Scanner.TokenNametry:", "+\t\t\tcase Scanner.TokenNamethis:", "+\t\t\tcase Scanner.TokenNametrue:", "+\t\t\tcase Scanner.TokenNamethrow:", "+\t\t\tcase Scanner.TokenNamethrows:", "+\t\t\tcase Scanner.TokenNametransient:", "+\t\t\tcase Scanner.TokenNamevoid:", "+\t\t\tcase Scanner.TokenNamevolatile:", "+\t\t\tcase Scanner.TokenNamewhile:", "+\t\t\t\treturn true;", "+\t\t\tdefault: ", "+\t\t\t\treturn false;", "-\tcatch (InvalidInputException e) {", "-\t\treturn false;", "-\t}", "-\t", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be012b7839a484cc9a68077077a2eff2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMethod.java", "commitBeforeChange": "c6d4125101bf5167c8111f17bf85f3fddd64ca03", "commitAfterChange": "42809a61ef9e5b72c9cffca62cbb33391fa05b96", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected void toStringName(StringBuffer buffer)", "signatureAfterChange": " protected void toStringName(StringBuffer buffer)", "diff": ["+\ttoStringName(buffer, 0);", "+}", "-\tString[] parameters = this.getParameterTypes();", "-\t\t\tbuffer.append(Signature.toString(parameters[i]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be8d587c7e61df3ba986438583c22b96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "499d13445e468af0eb0f6625a9a769990fa7cf93", "commitAfterChange": "428bb779d9722a43cd209f916fbe8807c533a61b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate boolean useSpaceBetweenGroups()", "signatureAfterChange": " \tprivate boolean useSpaceBetweenGroups()", "diff": ["-\t\ttry {", "-\t\t\tString sample= \"import a.A;\\n\\n import b.B;\\nclass C {}\"; //$NON-NLS-1$", "-\t\t\tTextEdit res= ToolFactory.createCodeFormatter(this.compilationUnit.getJavaProject().getOptions(true)).format(CodeFormatter.K_COMPILATION_UNIT, sample, 0, sample.length(), 0, String.valueOf('\\n'));", "-\t\t\tDocument doc= new Document(sample);", "-\t\t\tres.apply(doc);", "-\t\t\tint idx1= doc.search(0, \"import\", true, true, false); //$NON-NLS-1$", "-\t\t\tint line1= doc.getLineOfOffset(idx1);", "-\t\t\tint idx2= doc.search(idx1 + 1, \"import\", true, true, false); //$NON-NLS-1$", "-\t\t\tint line2= doc.getLineOfOffset(idx2);", "-\t\t\treturn line2 - line1 > 1; ", "-\t\t} catch (BadLocationException e) {", "-\t\t\t// should not happen ", "-\t\t}", "-\t\treturn true;", "+\t\tString option= this.compilationUnit.getJavaProject().getOption(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE, true);", "+\t\treturn Integer.valueOf(option).intValue() > 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e474d0799e6953793f72a90ce843728c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void updatePackageFragmentRoots()", "signatureAfterChange": " \tpublic void updatePackageFragmentRoots()", "diff": ["-", "-\t\t\t\t\tIClasspathEntry[] classpath = getResolvedClasspath(true);", "-\t\t\t\t\tNameLookup lookup = info.getNameLookup();", "-\t\t\t\t\tif (lookup != null){", "-\t\t\t\t\t\tIPackageFragmentRoot[] oldRoots = lookup.fPackageFragmentRoots;", "-\t\t\t\t\t\tIPackageFragmentRoot[] newRoots = computePackageFragmentRoots(classpath, true);", "-\t\t\t\t\t\tcheckIdentical: { // compare all pkg fragment root lists", "-\t\t\t\t\t\t\tif (oldRoots.length == newRoots.length){", "-\t\t\t\t\t\t\t\tfor (int i = 0, length = oldRoots.length; i < length; i++){", "-\t\t\t\t\t\t\t\t\tif (!oldRoots[i].equals(newRoots[i])){", "-\t\t\t\t\t\t\t\t\t\tbreak checkIdentical;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn; // no need to update", "-\t\t\t\t\t\t\t}\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tinfo.setNameLookup(null); // discard name lookup (hold onto roots)", "-\t\t\t\t\t}\t\t\t\t", "-\t\t\t\t\tinfo.setNonJavaResources(null);", "-\t\t\t\t\tinfo.setChildren(", "-\t\t\t\t\t\tcomputePackageFragmentRoots(classpath, false));\t\t", "-", "+\t\t\t\t\tcomputeChildren(info);"]}], "num": 34656}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c4c230daee0fdab6a7584b04dfb05a2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7834b4b6b79707d88ceda361cecd2983", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "1727ed1bd5d68569c37d68694536316d8f88a02f", "commitAfterChange": "87f39738b739a5eb0c391c4085ba8bcbd11bb72d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static final boolean camelCaseMatch(String pattern, int patternStart, int patternEnd, String name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(String pattern, int patternStart, int patternEnd, String name, int nameStart, int nameEnd)", "diff": ["-\t\t\tswitch (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar]) {", "-\t\t\t\tcase ScannerHelper.C_UPPER_LETTER :", "-\t\t\t\t\t// still uppercase", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\t// end of camelCase part of pattern", "-\t\t\t\t\tbreak nextPatternChar;", "+\t\t\tif (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar] != ScannerHelper.C_UPPER_LETTER) {", "+\t\t\t\t// end of camelCase part of pattern", "+\t\t\t\tbreak nextPatternChar;", "+\t\t\t// still uppercase", "-\t\t\t\t\tswitch (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar]) {", "-\t\t\t\t\t\tcase ScannerHelper.C_LOWER_LETTER :", "-\t\t\t\t\t\tcase ScannerHelper.C_IDENT_PART :", "-\t\t\t\t\t\tcase ScannerHelper.C_DIGIT :", "-\t\t\t\t\t\t\t// lowercase/digit char is ignored", "-\t\t\t\t\t\t\tiName++;", "-\t\t\t\t\t\t\tcontinue nextNameChar;", "+\t\t\t\t\tif ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar] & (ScannerHelper.C_LOWER_LETTER|ScannerHelper.C_IDENT_PART|ScannerHelper.C_DIGIT)) != 0) {", "+\t\t\t\t\t\t// lowercase/digit char is ignored", "+\t\t\t\t\t\tiName++;", "+\t\t\t\t\t\tcontinue nextNameChar;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeafaa4e9259a8308aaf0ed11a1eab85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "da518c52dcbfe044bb9f162f86d0c3f3de2bc467", "commitAfterChange": "1bc1a66dee8786645fc203b9ded688e657fbf446", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic static char[] getSignature(Binding binding)", "signatureAfterChange": " \t \tpublic static char[] getSignature(Binding binding)", "diff": ["-\t\tswitch(binding.bindingType()) {", "-\t\t\tcase Binding.TYPE:", "-\t\t\t\tTypeBinding typeBinding = (TypeBinding)binding;", "-\t\t\t\tif(typeBinding.isLocalType()) {", "-\t\t\t\t\tLocalTypeBinding localTypeBinding = (LocalTypeBinding)typeBinding;", "-\t\t\t\t\tif(localTypeBinding.isAnonymousType()) {", "-\t\t\t\t\t\ttypeBinding = localTypeBinding.superclass();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tlocalTypeBinding.setConstantPoolName(typeBinding.sourceName());", "-\t\t\t\t\t}", "+\t\tif ((binding.bindingType() & Binding.TYPE) != 0) {", "+\t\t\tTypeBinding typeBinding = (TypeBinding)binding;", "+\t\t\tif(typeBinding.isLocalType()) {", "+\t\t\t\tLocalTypeBinding localTypeBinding = (LocalTypeBinding)typeBinding;", "+\t\t\t\tif(localTypeBinding.isAnonymousType()) {", "+\t\t\t\t\ttypeBinding = localTypeBinding.superclass();", "+\t\t\t\t} else {", "+\t\t\t\t\tlocalTypeBinding.setConstantPoolName(typeBinding.sourceName());", "-\t\t\t\tresult = typeBinding.genericTypeSignature();", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.METHOD:", "-\t\t\t\tMethodBinding methodBinding = (MethodBinding)binding;", "-\t\t\t\tint oldMod = methodBinding.modifiers;", "-\t\t\t\t//TODO remove the next line when method from binary type will be able to generate generic siganute", "-\t\t\t\tmethodBinding.modifiers |= CompilerModifiers.AccGenericSignature;", "-\t\t\t\tresult = methodBinding.genericSignature(); ", "-\t\t\t\tif(result == null) {", "-\t\t\t\t\tresult = methodBinding.signature();", "-\t\t\t\t}", "-\t\t\t\tmethodBinding.modifiers = oldMod;", "-\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tresult = typeBinding.genericTypeSignature();", "+\t\t} else if ((binding.bindingType() & Binding.METHOD) != 0) {", "+\t\t\tMethodBinding methodBinding = (MethodBinding)binding;", "+\t\t\tint oldMod = methodBinding.modifiers;", "+\t\t\t//TODO remove the next line when method from binary type will be able to generate generic siganute", "+\t\t\tmethodBinding.modifiers |= CompilerModifiers.AccGenericSignature;", "+\t\t\tresult = methodBinding.genericSignature(); ", "+\t\t\tif(result == null) {", "+\t\t\t\tresult = methodBinding.signature();", "+\t\t\t}", "+\t\t\tmethodBinding.modifiers = oldMod;"]}], "num": 26107}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc8c3fc192e51fdea8120aae5a240fa3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a57e8d3a4cd9f2776927fe53d8703215", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\t    if (argumentType.isWildcard()) {", "-\t        WildcardBinding wildcard = (WildcardBinding) argumentType;", "-\t        switch (wildcard.boundKind) {", "-\t        \tcase Wildcard.SUPER :", "-//\t\t            if (boundCheck(substitution, wildcard.bound) != TypeConstants.OK) return TypeConstants.MISMATCH;", "-//\t\t            break;", "-\t\t            return boundCheck(substitution, wildcard.bound); // only check the lower bound", "+\t\tif (argumentType.isWildcard()) {", "+\t\t\tWildcardBinding wildcard = (WildcardBinding) argumentType;", "+\t\t\tswitch(wildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\tReferenceBinding superclassBound = (ReferenceBinding)Scope.substitute(substitution, this.superclass());", "+\t\t\t\t\tTypeBinding wildcardBound = wildcard.bound;", "+\t\t\t\t\tboolean isArrayBound = wildcardBound.isArrayType();", "+\t\t\t\t\tif (!wildcardBound.isInterface()) {", "+\t\t\t\t\t\tif (isArrayBound) {", "+\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(superclassBound))", "+\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)wildcardBound).findSuperTypeErasingTo((ReferenceBinding)superclassBound.erasure());", "+\t\t\t\t\t\t\tif (match != null) {", "+\t\t\t\t\t\t\t\tif (!match.isIntersectingWith(superclassBound)) {", "+\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tReferenceBinding[] superInterfaceBounds = Scope.substitute(substitution, this.superInterfaces());", "+\t\t\t\t\tint length = superInterfaceBounds.length;", "+\t\t\t\t\tboolean mustImplement = isArrayBound || ((ReferenceBinding)wildcardBound).isFinal();", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tTypeBinding superInterfaceBound = superInterfaceBounds[i];", "+\t\t\t\t\t\tif (isArrayBound) {", "+\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(superInterfaceBound))", "+\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)wildcardBound).findSuperTypeErasingTo((ReferenceBinding)superInterfaceBound.erasure());", "+\t\t\t\t\t\t\tif (match != null) {", "+\t\t\t\t\t\t\t\tif (!match.isIntersectingWith(superInterfaceBound)) {", "+\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (mustImplement) {", "+\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH; // cannot be extended further to satisfy missing bounds", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\t", "+\t\t\t\tcase Wildcard.SUPER :", "+\t\t\t\t\treturn boundCheck(substitution, wildcard.bound);", "+\t\t\t\t\t", "-\t\t\t\t\tif (this == wildcard.typeVariable()) ", "-\t\t\t\t\t\treturn TypeConstants.OK;", "-\t\t\t\t\tbreak;\t        \t\t", "-\t        }", "-\t    }", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\treturn TypeConstants.OK;", "+\t\t}", "-\t\t\t}", "+\t\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c718c4b47868655862a3b1a20491953c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-", "-\t\tif (argumentType == TypeBinding.NULL || argumentType == this)", "+\t\tif (argumentType == TypeBinding.NULL || argumentType == this) {", "+\t\t}", "-\t\t\t\t\tReferenceBinding superclassBound = hasSubstitution ? (ReferenceBinding)Scope.substitute(substitution, this.superclass) : this.superclass;", "-\t\t\t\t\t\tif (superclassBound.id != TypeIds.T_JavaLangObject) {", "+\t\t\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superclass) : this.superclass;", "+\t\t\t\t\t\tif (substitutedSuperType.id != TypeIds.T_JavaLangObject) {", "-\t\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(superclassBound))", "+\t\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(superclassBound);", "+\t\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(substitutedSuperType);", "-\t\t\t\t\t\t\t\t\tif (superclassBound.isProvablyDistinct(match)) {", "+\t\t\t\t\t\t\t\t\tif (substitutedSuperType.isProvablyDistinct(match)) {", "-\t\t\t\t\t\t\t\t\tmatch =  superclassBound.findSuperTypeOriginatingFrom(wildcardBound);", "+\t\t\t\t\t\t\t\t\tmatch =  substitutedSuperType.findSuperTypeOriginatingFrom(wildcardBound);", "-\t\t\t\t\t\t\t\t\t\tif (!wildcardBound.isTypeVariable() && !superclassBound.isTypeVariable()) {", "+\t\t\t\t\t\t\t\t\t\tif (!wildcardBound.isTypeVariable() && !substitutedSuperType.isTypeVariable()) {", "-\t\t\t\t\tReferenceBinding[] superInterfaceBounds = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces) : this.superInterfaces;", "-\t\t\t\t\tint length = superInterfaceBounds.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tTypeBinding superInterfaceBound = superInterfaceBounds[i];", "+\t\t\t\t\tfor (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "+\t\t\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces[i]) : this.superInterfaces[i];", "-\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(superInterfaceBound))", "+\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(superInterfaceBound);", "+\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(substitutedSuperType);", "-\t\t\t\t\t\t\t\tif (superInterfaceBound.isProvablyDistinct(match)) {", "+\t\t\t\t\t\t\t\tif (substitutedSuperType.isProvablyDistinct(match)) {"]}], "num": 37630}
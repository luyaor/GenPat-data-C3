{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8147c1f924b03b93271301344ab0cfd4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c0bd43c94b022ad60bb772cd09782cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "83202a3eb8c5a069490467f042bef2dbf139e317", "commitAfterChange": "3eb54501d04c06d548e0703970c7c1e0fb48a24c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\targuments[i] = new Argument(CharOperation.append(implicitArgName, Integer.toString(i).toCharArray()), 0, null, 0, true);", "+\t\t\targuments[i] = new Argument(CharOperation.append(ImplicitArgName, Integer.toString(i).toCharArray()), 0, null, 0, true);", "-\t\t\tchar[] name = CharOperation.append(implicitArgName, Integer.toString((i + parameterShift)).toCharArray());", "+\t\t\tchar[] name = CharOperation.append(ImplicitArgName, Integer.toString((i + parameterShift)).toCharArray());", "-\t\t\tmessage.receiver = this.receiverPrecedesParameters ? new SingleNameReference(new char[]{' ', 'a', 'r', 'g', '0'}, 0) : receiver;", "+\t\t\tmessage.receiver = this.receiverPrecedesParameters ? ", "+\t\t\t\t\tnew SingleNameReference(CharOperation.append(ImplicitArgName, Integer.toString(0).toCharArray()), 0) : receiver;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be12a6d3c1a33cfc36c102e924340b5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c1e14993cd26cb8463a16c9bf4e3c3cd94453425", "commitAfterChange": "1e3dfe1b9cf4ad1efe64071cceead18151239ca4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\targuments[i] = new Argument((\"arg\" + i).toCharArray(), 0, null, 0, true); //$NON-NLS-1$", "+\t\t\targuments[i] = new Argument(CharOperation.append(implicitArgName, Integer.toString(i).toCharArray()), 0, null, 0, true);", "-\t\t\tString name = \"arg\" + (i + parameterShift); //$NON-NLS-1$", "-\t\t\targv[i] = new SingleNameReference(name.toCharArray(), 0);", "+\t\t\tchar[] name = CharOperation.append(implicitArgName, Integer.toString((i + parameterShift)).toCharArray());", "+\t\t\targv[i] = new SingleNameReference(name, 0);", "-\t\t\tmessage.receiver = this.receiverPrecedesParameters ? new SingleNameReference(\"arg0\".toCharArray(), 0) : receiver; //$NON-NLS-1$", "+\t\t\tmessage.receiver = this.receiverPrecedesParameters ? new SingleNameReference(new char[]{' ', 'a', 'r', 'g', '0'}, 0) : receiver;"]}], "num": 36740}
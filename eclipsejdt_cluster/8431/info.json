{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4bedecca64bef6ca929166b73006e8d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "176f36aa6670fc4cb4fb7aae401cd016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void test0092() throws JavaModelException", "signatureAfterChange": " \tpublic void test0092() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"import java.util.*;\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"  public enum Rank { DEUCE, THREE, FOUR, FIVE, SIX,\\n\" +", "-\t\t\t\t\"    SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE }\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"  //public enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES }\\n\" +", "-\t\t\t\t\"  public enum Suit{\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"  private X(int rank, int suit) {  \\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  \\n\" +", "-\t\t\t\t\"  private static final List<X> protoDeck = new ArrayList<X>();\\n\" +", "-\t\t\t\t\"  \\n\" +", "-\t\t\t\t\"  public static ArrayList<X> newDeck() {\\n\" +", "-\t\t\t\t\"      return new ArrayList<X>(protoDeck); // Return copy of prototype deck\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy,", "-\t\t\t\tfalse);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public enum Rank { DEUCE, THREE, FOUR, FIVE, SIX,\\n\" +", "+\t\t\t\"    SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE }\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"  //public enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES }\\n\" +", "+\t\t\t\"  public enum Suit{\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"  private X(int rank, int suit) {  \\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  \\n\" +", "+\t\t\t\"  private static final List<X> protoDeck = new ArrayList<X>();\\n\" +", "+\t\t\t\"  \\n\" +", "+\t\t\t\"  public static ArrayList<X> newDeck() {\\n\" +", "+\t\t\t\"      return new ArrayList<X>(protoDeck); // Return copy of prototype deck\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy,", "+\t\t\tfalse);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b295af85f9197b856c4333f4c88da1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tpublic void test0091() throws JavaModelException", "signatureAfterChange": " \tpublic void test0091() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"@interface X {\\n\" +", "-\t\t\t\t\"\tint id() default 0;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tnode = getASTNode(compilationUnit, 0);", "-\t\t\tassertEquals(\"Not an annotation type declaration\", ASTNode.ANNOTATION_TYPE_DECLARATION, node.getNodeType());", "-\t\t\tAnnotationTypeDeclaration annotationTypeDeclaration = (AnnotationTypeDeclaration) node;", "-\t\t\tITypeBinding binding = annotationTypeDeclaration.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tassertTrue(\"Not an annotation\", binding.isAnnotation());", "-\t\t\tassertEquals(\"Wrong name\", \"X\", binding.getName());", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "-\t\t\tassertEquals(\"Not an annotation type member declaration\", ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION, node.getNodeType());", "-\t\t\tAnnotationTypeMemberDeclaration memberDeclaration = (AnnotationTypeMemberDeclaration) node;", "-\t\t\tIMethodBinding methodBinding = memberDeclaration.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", methodBinding);", "-\t\t\tassertEquals(\"Wrong name\", \"id\", methodBinding.getName());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"@interface X {\\n\" +", "+\t\t\t\"\tint id() default 0;\\n\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tnode = getASTNode(compilationUnit, 0);", "+\t\tassertEquals(\"Not an annotation type declaration\", ASTNode.ANNOTATION_TYPE_DECLARATION, node.getNodeType());", "+\t\tAnnotationTypeDeclaration annotationTypeDeclaration = (AnnotationTypeDeclaration) node;", "+\t\tITypeBinding binding = annotationTypeDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tassertTrue(\"Not an annotation\", binding.isAnnotation());", "+\t\tassertEquals(\"Wrong name\", \"X\", binding.getName());", "+\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\tassertEquals(\"Not an annotation type member declaration\", ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION, node.getNodeType());", "+\t\tAnnotationTypeMemberDeclaration memberDeclaration = (AnnotationTypeMemberDeclaration) node;", "+\t\tIMethodBinding methodBinding = memberDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No binding\", methodBinding);", "+\t\tassertEquals(\"Wrong name\", \"id\", methodBinding.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b16f14370c56a743ae0c3e42ec48bbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 97, "signatureBeforeChange": " \tpublic void test0090() throws JavaModelException", "signatureAfterChange": " \tpublic void test0090() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode result = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\tpublic void foo() {}\\n\" +", "-\t\t\t\t\"\tpublic void bar(X x, int f) {\\n\" +", "-\t\t\t\t\"\t\tx.foo();\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, result.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) result;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tcompilationUnit.accept(new ASTVisitor() {", "-\t\t\t\t/* (non-Javadoc)", "-\t\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.SingleVariableDeclaration)", "-\t\t\t\t */", "-\t\t\t\tpublic boolean visit(SingleVariableDeclaration node) {", "-\t\t\t\t\tIVariableBinding binding = node.resolveBinding();", "-\t\t\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "-\t\t\t\t\tassertNotNull(\"No java element\", javaElement);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\t/* (non-Javadoc)", "-\t\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.VariableDeclarationFragment)", "-\t\t\t\t */", "-\t\t\t\tpublic boolean visit(VariableDeclarationFragment node) {", "-\t\t\t\t\tIVariableBinding binding = node.resolveBinding();", "-\t\t\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "-\t\t\t\t\tassertNotNull(\"No java element\", javaElement);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\t/* (non-Javadoc)", "-\t\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.FieldAccess)", "-\t\t\t\t */", "-\t\t\t\tpublic boolean visit(FieldAccess node) {", "-\t\t\t\t\tIVariableBinding binding = node.resolveFieldBinding();", "-\t\t\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "-\t\t\t\t\tassertNotNull(\"No java element\", javaElement);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\t/* (non-Javadoc)", "-\t\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(org.eclipse.jdt.core.dom.SuperFieldAccess)", "-\t\t\t\t */", "-\t\t\t\tpublic boolean visit(SuperFieldAccess node) {", "-\t\t\t\t\tIVariableBinding binding = node.resolveFieldBinding();", "-\t\t\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "-\t\t\t\t\tassertNotNull(\"No java element\", javaElement);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t});", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode result = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\tpublic void foo() {}\\n\" +", "+\t\t\t\"\tpublic void bar(X x, int f) {\\n\" +", "+\t\t\t\"\t\tx.foo();\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, result.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) result;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tcompilationUnit.accept(new ASTVisitor() {", "+\t\t\t/* (non-Javadoc)", "+\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.SingleVariableDeclaration)", "+\t\t\t */", "+\t\t\tpublic boolean visit(SingleVariableDeclaration node) {", "+\t\t\t\tIVariableBinding binding = node.resolveBinding();", "+\t\t\t\tassertNotNull(\"No binding\", binding);", "+\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "+\t\t\t\tassertNotNull(\"No java element\", javaElement);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\t/* (non-Javadoc)", "+\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.VariableDeclarationFragment)", "+\t\t\t */", "+\t\t\tpublic boolean visit(VariableDeclarationFragment node) {", "+\t\t\t\tIVariableBinding binding = node.resolveBinding();", "+\t\t\t\tassertNotNull(\"No binding\", binding);", "+\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "+\t\t\t\tassertNotNull(\"No java element\", javaElement);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\t/* (non-Javadoc)", "+\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.FieldAccess)", "+\t\t\t */", "+\t\t\tpublic boolean visit(FieldAccess node) {", "+\t\t\t\tIVariableBinding binding = node.resolveFieldBinding();", "+\t\t\t\tassertNotNull(\"No binding\", binding);", "+\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "+\t\t\t\tassertNotNull(\"No java element\", javaElement);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\t/* (non-Javadoc)", "+\t\t\t * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(org.eclipse.jdt.core.dom.SuperFieldAccess)", "+\t\t\t */", "+\t\t\tpublic boolean visit(SuperFieldAccess node) {", "+\t\t\t\tIVariableBinding binding = node.resolveFieldBinding();", "+\t\t\t\tassertNotNull(\"No binding\", binding);", "+\t\t\t\tIJavaElement javaElement = binding.getJavaElement();", "+\t\t\t\tassertNotNull(\"No java element\", javaElement);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bba42c1688c3d104c176ad8c94259be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tpublic void test0089() throws JavaModelException", "signatureAfterChange": " \tpublic void test0089() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\t\"  void foo() {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  void bar(X<?> x) {\\n\" +", "-\t\t\t\t\"    /*start*/x.foo()/*end*/;\\n\"+", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIBinding binding = ((MethodInvocation) node).resolveMethodBinding();", "-\t\t\tassertBindingKeyEquals(", "-\t\t\t\t\"Lp/X<*>;.foo()V\",", "-\t\t\t\tbinding.getKey());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\"  void foo() {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  void bar(X<?> x) {\\n\" +", "+\t\t\t\"    /*start*/x.foo()/*end*/;\\n\"+", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tIBinding binding = ((MethodInvocation) node).resolveMethodBinding();", "+\t\tassertBindingKeyEquals(", "+\t\t\t\"Lp/X<*>;.foo()V\",", "+\t\t\tbinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40e0a976df3420d1e86997ed1c7721d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 118, "signatureBeforeChange": " \tpublic void test0107() throws JavaModelException", "signatureAfterChange": " \tpublic void test0107() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"@interface A {\\n\" +", "-\t\t\t\t\"    String value() default \\\"\\\";\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"@interface Main {\\n\" +", "-\t\t\t\t\"   A child() default @A(\\\"Void\\\");\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"@Main(child=@A(\\\"\\\")) @A class X {}\\n\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 2);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tcheckSourceRange(node, \"@Main(child=@A(\\\"\\\")) @A class X {}\", contents.toCharArray());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"@interface A {\\n\" +", "+\t\t\t\"    String value() default \\\"\\\";\\n\" +", "+\t\t\t\"}\\n\" +", "+\t\t\t\"@interface Main {\\n\" +", "+\t\t\t\"   A child() default @A(\\\"Void\\\");\\n\" +", "+\t\t\t\"}\\n\" +", "+\t\t\t\"@Main(child=@A(\\\"\\\")) @A class X {}\\n\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 2);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tcheckSourceRange(node, \"@Main(child=@A(\\\"\\\")) @A class X {}\", contents.toCharArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "411185ec302f261fb14337cd8ea3fcf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void test0061() throws JavaModelException", "signatureAfterChange": " \tpublic void test0061() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"/*start*/public class X<T> {\\n\" +", "-\t\t\t\t\"}/*end*/\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIBinding binding = ((TypeDeclaration) node).resolveBinding();", "-\t\t\tassertBindingKeyEquals(", "-\t\t\t\t\"Lp/X<TT;>;\",", "-\t\t\t\tbinding.getKey());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"/*start*/public class X<T> {\\n\" +", "+\t\t\t\"}/*end*/\",", "+\t\t\tthis.workingCopy);", "+\t\tIBinding binding = ((TypeDeclaration) node).resolveBinding();", "+\t\tassertBindingKeyEquals(", "+\t\t\t\"Lp/X<TT;>;\",", "+\t\t\tbinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7a05f81e1d8c6466366a85827932be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic void test0086() throws JavaModelException", "signatureAfterChange": " \tpublic void test0086() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t\\n\" + ", "-\t\t\t\t\"public Object foo() {\\n\" +", "-\t\t\t\t\"\t\treturn /*start*/X.class/*end*/;\\n\" +", "-\t\t\t\t\"\t}\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"class A {}\\n\" + ", "-\t\t\t\t\"class B extends A {}\\n\",", "-\t\t\t\tworkingCopy);", "-\t\t\tTypeLiteral typeLiteral = (TypeLiteral) node;", "-\t\t\tITypeBinding typeBinding = typeLiteral.resolveTypeBinding();", "-\t\t\tassertEquals(\"Wrong name\", \"java.lang.Class<p.X>\", typeBinding.getQualifiedName());", "-\t\t\tassertEquals(\"Wrong name\", \"Class<X>\", typeBinding.getName());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\t\\n\" + ", "+\t\t\t\"public Object foo() {\\n\" +", "+\t\t\t\"\t\treturn /*start*/X.class/*end*/;\\n\" +", "+\t\t\t\"\t}\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class A {}\\n\" + ", "+\t\t\t\"class B extends A {}\\n\",", "+\t\t\tthis.workingCopy);", "+\t\tTypeLiteral typeLiteral = (TypeLiteral) node;", "+\t\tITypeBinding typeBinding = typeLiteral.resolveTypeBinding();", "+\t\tassertEquals(\"Wrong name\", \"java.lang.Class<p.X>\", typeBinding.getQualifiedName());", "+\t\tassertEquals(\"Wrong name\", \"Class<X>\", typeBinding.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c13ec5aef78a7d66a361ced7470da9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 105, "signatureBeforeChange": " \t  \tpublic void test0094() throws JavaModelException", "signatureAfterChange": " \t  \tpublic void test0094() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" +", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"@Retention(RetentionPolicy.SOURCE)\\n\" +", "-\t\t\t\t\"@Target(ElementType.METHOD)\\n\" +", "-\t\t\t\t\"@interface ThrowAwayMethod {\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\t/**\\n\" +", "-\t\t\t\t\"\t * Comment for <code>test</code>\\n\" +", "-\t\t\t\t\"\t */\\n\" +", "-\t\t\t\t\"\tprotected final Test test;\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\t/**\\n\" +", "-\t\t\t\t\"\t * @param test\\n\" +", "-\t\t\t\t\"\t */\\n\" +", "-\t\t\t\t\"\tThrowAwayMethod(Test test) {\\n\" +", "-\t\t\t\t\"\t\tthis.test= test;\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/ThrowAwayMethod.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy,", "-\t\t\t\tfalse);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"import java.lang.annotation.Target;\\n\" +", "+\t\t\t\"import java.lang.annotation.Retention;\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"@Retention(RetentionPolicy.SOURCE)\\n\" +", "+\t\t\t\"@Target(ElementType.METHOD)\\n\" +", "+\t\t\t\"@interface ThrowAwayMethod {\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\t/**\\n\" +", "+\t\t\t\"\t * Comment for <code>test</code>\\n\" +", "+\t\t\t\"\t */\\n\" +", "+\t\t\t\"\tprotected final Test test;\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\t/**\\n\" +", "+\t\t\t\"\t * @param test\\n\" +", "+\t\t\t\"\t */\\n\" +", "+\t\t\t\"\tThrowAwayMethod(Test test) {\\n\" +", "+\t\t\t\"\t\tthis.test= test;\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/ThrowAwayMethod.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy,", "+\t\t\tfalse);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc4359e857770cd3a8565f7a0664e35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void test0066() throws JavaModelException", "signatureAfterChange": " \tpublic void test0066() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\t\"  /*start*/X/*end*/ field;\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIBinding binding = ((Type) node).resolveBinding();", "-\t\t\tassertBindingKeyEquals(", "-\t\t\t\t\"Lp/X;\",", "-\t\t\t\tbinding.getKey());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\"  /*start*/X/*end*/ field;\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tIBinding binding = ((Type) node).resolveBinding();", "+\t\tassertBindingKeyEquals(", "+\t\t\t\"Lp/X;\",", "+\t\t\tbinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82cd07c21e86c73fce38ea9c0acd74ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void test0096() throws JavaModelException", "signatureAfterChange": " \tpublic void test0096() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"public @interface An1 {\\n\" +", "-\t\t\t\t\"\tString value();\\n\" +", "-\t\t\t\t\"\tString item() default \\\"Hello\\\";\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"@An1(value=\\\"X\\\") class A {\\n\" +", "-\t\t\t\t\"\t\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/An1.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tnode = getASTNode(compilationUnit, 1);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\tassertEquals(\"Wrong name\", \"A\", typeDeclaration.getName().getIdentifier());", "-\t\t\tList modifiers = typeDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "-\t\t\tIExtendedModifier modifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Not an annotation\", modifier instanceof Annotation);", "-\t\t\tcheckSourceRange((Annotation) modifier, \"@An1(value=\\\"X\\\")\", contents.toCharArray());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"public @interface An1 {\\n\" +", "+\t\t\t\"\tString value();\\n\" +", "+\t\t\t\"\tString item() default \\\"Hello\\\";\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"}\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"@An1(value=\\\"X\\\") class A {\\n\" +", "+\t\t\t\"\t\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/An1.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tnode = getASTNode(compilationUnit, 1);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\tassertEquals(\"Wrong name\", \"A\", typeDeclaration.getName().getIdentifier());", "+\t\tList modifiers = typeDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "+\t\tIExtendedModifier modifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Not an annotation\", modifier instanceof Annotation);", "+\t\tcheckSourceRange((Annotation) modifier, \"@An1(value=\\\"X\\\")\", contents.toCharArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "909213e43433260e1522b17ce5df3569", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void test0095() throws JavaModelException", "signatureAfterChange": " \tpublic void test0095() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"   /*start*/<T> void foo(NonExisting arg) {\\n\" + ", "-\t\t\t\t\"   }/*end*/\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy,", "-\t\t\t\tfalse);", "-\t\t\tIBinding binding = ((MethodDeclaration) node).resolveBinding();", "-\t\t\tassertEquals(", "-\t\t\t\tnull,", "-\t\t\t\tbinding);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"   /*start*/<T> void foo(NonExisting arg) {\\n\" + ", "+\t\t\t\"   }/*end*/\\n\" + ", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy,", "+\t\t\tfalse);", "+\t\tIBinding binding = ((MethodDeclaration) node).resolveBinding();", "+\t\tassertEquals(", "+\t\t\tnull,", "+\t\t\tbinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9143f767167eafcb2c29b56a2b228c1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void test0079() throws JavaModelException", "signatureAfterChange": " \tpublic void test0079() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t\\n\" + ", "-\t\t\t\t\"\t/*start*/<T extends A> T foo(T t) {\\n\" + ", "-\t\t\t\t\"\t\treturn t;\\n\" + ", "-\t\t\t\t\"\t}/*end*/\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\tnew X().bar();\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tvoid bar() {\\n\" + ", "-\t\t\t\t\"\t\tB b = foo(new B());\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"class A {}\\n\" + ", "-\t\t\t\t\"class B extends A {}\\n\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIMethodBinding methodBinding = ((MethodDeclaration) node).resolveBinding();", "-\t\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "-\t\t\tassertFalse(\"Is a parameterized method\", methodBinding.isParameterizedMethod());", "-\t\t\tassertTrue(\"Not a generic method\", methodBinding.isGenericMethod());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\t\\n\" + ", "+\t\t\t\"\t/*start*/<T extends A> T foo(T t) {\\n\" + ", "+\t\t\t\"\t\treturn t;\\n\" + ", "+\t\t\t\"\t}/*end*/\\n\" + ", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\"\t\tnew X().bar();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\"\t\tB b = foo(new B());\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class A {}\\n\" + ", "+\t\t\t\"class B extends A {}\\n\",", "+\t\t\tthis.workingCopy);", "+\t\tIMethodBinding methodBinding = ((MethodDeclaration) node).resolveBinding();", "+\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "+\t\tassertFalse(\"Is a parameterized method\", methodBinding.isParameterizedMethod());", "+\t\tassertTrue(\"Not a generic method\", methodBinding.isGenericMethod());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "991cbefbc53cb9cc539e959e5e5e5b1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void test0060() throws JavaModelException", "signatureAfterChange": " \tpublic void test0060() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"/*start*/public class X {\\n\" +", "-\t\t\t\t\"  <T> void foo(T t) {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  <T extends X> void foo(T t) {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  <T extends Class> void foo(T t) {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  <T extends Exception & Runnable> void foo(T t) {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}/*end*/\",", "-\t\t\t\tworkingCopy);", "-\t\t\tMethodDeclaration[] methods = ((TypeDeclaration) node).getMethods();", "-\t\t\tint length = methods.length;", "-\t\t\tString[] keys = new String[length];", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tkeys[i] = methods[i].resolveBinding().getKey();", "-\t\t\tassertBindingKeysEqual(", "-\t\t\t\t\"Lp/X;.foo<T:Ljava/lang/Object;>(TT;)V\\n\" + ", "-\t\t\t\t\"Lp/X;.foo<T:Lp/X;>(TT;)V\\n\" + ", "-\t\t\t\t\"Lp/X;.foo<T:Ljava/lang/Class;>(TT;)V\\n\" + ", "-\t\t\t\t\"Lp/X;.foo<T:Ljava/lang/Exception;:Ljava/lang/Runnable;>(TT;)V\",", "-\t\t\t\tkeys);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"/*start*/public class X {\\n\" +", "+\t\t\t\"  <T> void foo(T t) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  <T extends X> void foo(T t) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  <T extends Class> void foo(T t) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  <T extends Exception & Runnable> void foo(T t) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}/*end*/\",", "+\t\t\tthis.workingCopy);", "+\t\tMethodDeclaration[] methods = ((TypeDeclaration) node).getMethods();", "+\t\tint length = methods.length;", "+\t\tString[] keys = new String[length];", "+\t\tfor (int i = 0; i < length; i++)", "+\t\t\tkeys[i] = methods[i].resolveBinding().getKey();", "+\t\tassertBindingKeysEqual(", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Object;>(TT;)V\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Lp/X;>(TT;)V\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Class;>(TT;)V\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Exception;:Ljava/lang/Runnable;>(TT;)V\",", "+\t\t\tkeys);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3c8e5693daf87411024bcdb0b0f6691", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void test0062() throws JavaModelException", "signatureAfterChange": " \tpublic void test0062() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\t\"  /*start*/X<Class>/*end*/ f;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIBinding binding = ((Type) node).resolveBinding();", "-\t\t\tassertBindingKeyEquals(", "-\t\t\t\t\"Lp/X<Ljava/lang/Class;>;\",", "-\t\t\t\tbinding.getKey());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\"  /*start*/X<Class>/*end*/ f;\\n\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tIBinding binding = ((Type) node).resolveBinding();", "+\t\tassertBindingKeyEquals(", "+\t\t\t\"Lp/X<Ljava/lang/Class;>;\",", "+\t\t\tbinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abd29885d75a8059dcc5e9c82744386d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void test0093() throws JavaModelException", "signatureAfterChange": " \tpublic void test0093() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"public class Test {\\n\" +", "-\t\t\t\t\"    public <U> Test(U u) {\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"    void bar() {\\n\" +", "-\t\t\t\t\"        new <String> Test(null) {};\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/Test.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tnode = getASTNode(compilationUnit, 0, 1, 0);", "-\t\t\tassertEquals(\"Not an expression statement\", ASTNode.EXPRESSION_STATEMENT, node.getNodeType());", "-\t\t\tExpressionStatement statement = (ExpressionStatement) node;", "-\t\t\tExpression expression = statement.getExpression();", "-\t\t\tcheckSourceRange(expression, \"new <String> Test(null) {}\", contents.toCharArray());", "-\t\t\tITypeBinding typeBinding = expression.resolveTypeBinding();", "-\t\t\tIJavaElement element = typeBinding.getJavaElement();", "-\t\t\tassertNotNull(\"No java element\", element);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"public class Test {\\n\" +", "+\t\t\t\"    public <U> Test(U u) {\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"    void bar() {\\n\" +", "+\t\t\t\"        new <String> Test(null) {};\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/Test.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tnode = getASTNode(compilationUnit, 0, 1, 0);", "+\t\tassertEquals(\"Not an expression statement\", ASTNode.EXPRESSION_STATEMENT, node.getNodeType());", "+\t\tExpressionStatement statement = (ExpressionStatement) node;", "+\t\tExpression expression = statement.getExpression();", "+\t\tcheckSourceRange(expression, \"new <String> Test(null) {}\", contents.toCharArray());", "+\t\tITypeBinding typeBinding = expression.resolveTypeBinding();", "+\t\tIJavaElement element = typeBinding.getJavaElement();", "+\t\tassertNotNull(\"No java element\", element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c04fb3f07453698df6bcaba97a936782", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 120, "signatureBeforeChange": " \tpublic void test0109() throws JavaModelException", "signatureAfterChange": " \tpublic void test0109() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"@Annot(value=\\\"Hello\\\", count=-1)\\n\" +", "-\t\t\t\t\"@interface Annot {\\n\" +", "-\t\t\t\t\"    String value();\\n\" +", "-\t\t\t\t\"    int count();\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/Annot.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0);", "-\t\t\tAnnotationTypeDeclaration annotationTypeDeclaration = (AnnotationTypeDeclaration) node;", "-\t\t\tITypeBinding typeBinding = annotationTypeDeclaration.resolveBinding();", "-\t\t\tassertNotNull(\"No type binding\", typeBinding);", "-\t\t\tIMethodBinding[] methods = typeBinding.getDeclaredMethods();", "-\t\t\tassertEquals(\"Wrong size\", 2, methods.length);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"@Annot(value=\\\"Hello\\\", count=-1)\\n\" +", "+\t\t\t\"@interface Annot {\\n\" +", "+\t\t\t\"    String value();\\n\" +", "+\t\t\t\"    int count();\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/Annot.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0);", "+\t\tAnnotationTypeDeclaration annotationTypeDeclaration = (AnnotationTypeDeclaration) node;", "+\t\tITypeBinding typeBinding = annotationTypeDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No type binding\", typeBinding);", "+\t\tIMethodBinding[] methods = typeBinding.getDeclaredMethods();", "+\t\tassertEquals(\"Wrong size\", 2, methods.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c21c89591b5fb0ed877311e11d737485", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic void test0080() throws JavaModelException", "signatureAfterChange": " \tpublic void test0080() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t\\n\" + ", "-\t\t\t\t\"\t<T extends A> T foo(T t) {\\n\" + ", "-\t\t\t\t\"\t\treturn t;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\tnew X().bar();\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tvoid bar() {\\n\" + ", "-\t\t\t\t\"\t\tB b = /*start*/foo(new B())/*end*/;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"class A {}\\n\" + ", "-\t\t\t\t\"class B extends A {}\\n\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIMethodBinding methodBinding = ((MethodInvocation) node).resolveMethodBinding();", "-\t\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "-\t\t\tassertTrue(\"Not a parameterized method\", methodBinding.isParameterizedMethod());", "-\t\t\tassertFalse(\"Is a generic method\", methodBinding.isGenericMethod());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\t\\n\" + ", "+\t\t\t\"\t<T extends A> T foo(T t) {\\n\" + ", "+\t\t\t\"\t\treturn t;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\"\t\tnew X().bar();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\"\t\tB b = /*start*/foo(new B())/*end*/;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class A {}\\n\" + ", "+\t\t\t\"class B extends A {}\\n\",", "+\t\t\tthis.workingCopy);", "+\t\tIMethodBinding methodBinding = ((MethodInvocation) node).resolveMethodBinding();", "+\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "+\t\tassertTrue(\"Not a parameterized method\", methodBinding.isParameterizedMethod());", "+\t\tassertFalse(\"Is a generic method\", methodBinding.isGenericMethod());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c43d92827e0689902da05a4a39bbc6af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 113, "signatureBeforeChange": " \tpublic void test0102() throws JavaModelException", "signatureAfterChange": " \tpublic void test0102() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"import java.util.HashMap;\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"    Object o= new HashMap<?, ?>[0];\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "-\t\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "-\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "-\t\t\tList fragments = fieldDeclaration.fragments();", "-\t\t\tassertEquals(\"wrong size\", 1, fragments.size());", "-\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\tcheckSourceRange(fragment, \"o= new HashMap<?, ?>[0]\", contents.toCharArray());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"import java.util.HashMap;\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"    Object o= new HashMap<?, ?>[0];\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "+\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\tList fragments = fieldDeclaration.fragments();", "+\t\tassertEquals(\"wrong size\", 1, fragments.size());", "+\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\tcheckSourceRange(fragment, \"o= new HashMap<?, ?>[0]\", contents.toCharArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc2490adf837977627a384c3c26dfb11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 119, "signatureBeforeChange": " \tpublic void _test0108() throws JavaModelException", "signatureAfterChange": " \tpublic void _test0108() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"class X<E> {\\n\" +", "-\t\t\t\t\"    enum Numbers {\\n\" +", "-\t\t\t\t\"        ONE {\\n\" +", "-\t\t\t\t\"            Numbers getSquare() {\\n\" +", "-\t\t\t\t\"                return ONE;\\n\" +", "-\t\t\t\t\"            }\\n\" +", "-\t\t\t\t\"        };\\n\" +", "-\t\t\t\t\"        abstract Numbers getSquare();\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\\n\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "-\t\t\tEnumDeclaration enumDeclaration = (EnumDeclaration) node;", "-\t\t\tSimpleName simpleName = enumDeclaration.getName();", "-\t\t\tITypeBinding typeBinding = simpleName.resolveTypeBinding();", "-\t\t\t", "-\t\t\tList enumConstants = enumDeclaration.enumConstants();", "-\t\t\tassertEquals(\"Wrong size\", 1, enumConstants.size());", "-\t\t\tEnumConstantDeclaration constantDeclaration = (EnumConstantDeclaration) enumConstants.get(0);", "-\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = constantDeclaration.getAnonymousClassDeclaration();", "-\t\t\tassertNotNull(\"No anonymous\", anonymousClassDeclaration);", "-\t\t\tList bodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "-\t\t\tassertEquals(\"Wrong size\", 1, bodyDeclarations.size());", "-\t\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) bodyDeclarations.get(0);", "-\t\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, bodyDeclaration.getNodeType());", "-\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) bodyDeclaration;", "-\t\t\tType type = methodDeclaration.getReturnType2();", "-\t\t\tassertEquals(\"Not a simple type\", ASTNode.SIMPLE_TYPE, type.getNodeType());", "-\t\t\tSimpleType simpleType = (SimpleType) type;", "-\t\t\tName name = simpleType.getName();", "-\t\t\tassertEquals(\"Not a simple name\", ASTNode.SIMPLE_NAME, name.getNodeType());", "-\t\t\tsimpleName = (SimpleName) name;", "-\t\t\tITypeBinding typeBinding2 = simpleName.resolveTypeBinding();", "-\t\t\t", "-\t\t\tassertTrue(\"Not identical\", typeBinding == typeBinding2);", "-\t\t\tassertTrue(\"Not equals\", typeBinding.isEqualTo(typeBinding2));", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"class X<E> {\\n\" +", "+\t\t\t\"    enum Numbers {\\n\" +", "+\t\t\t\"        ONE {\\n\" +", "+\t\t\t\"            Numbers getSquare() {\\n\" +", "+\t\t\t\"                return ONE;\\n\" +", "+\t\t\t\"            }\\n\" +", "+\t\t\t\"        };\\n\" +", "+\t\t\t\"        abstract Numbers getSquare();\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"}\\n\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\tEnumDeclaration enumDeclaration = (EnumDeclaration) node;", "+\t\tSimpleName simpleName = enumDeclaration.getName();", "+\t\tITypeBinding typeBinding = simpleName.resolveTypeBinding();", "+\t\t", "+\t\tList enumConstants = enumDeclaration.enumConstants();", "+\t\tassertEquals(\"Wrong size\", 1, enumConstants.size());", "+\t\tEnumConstantDeclaration constantDeclaration = (EnumConstantDeclaration) enumConstants.get(0);", "+\t\tAnonymousClassDeclaration anonymousClassDeclaration = constantDeclaration.getAnonymousClassDeclaration();", "+\t\tassertNotNull(\"No anonymous\", anonymousClassDeclaration);", "+\t\tList bodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "+\t\tassertEquals(\"Wrong size\", 1, bodyDeclarations.size());", "+\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) bodyDeclarations.get(0);", "+\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, bodyDeclaration.getNodeType());", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) bodyDeclaration;", "+\t\tType type = methodDeclaration.getReturnType2();", "+\t\tassertEquals(\"Not a simple type\", ASTNode.SIMPLE_TYPE, type.getNodeType());", "+\t\tSimpleType simpleType = (SimpleType) type;", "+\t\tName name = simpleType.getName();", "+\t\tassertEquals(\"Not a simple name\", ASTNode.SIMPLE_NAME, name.getNodeType());", "+\t\tsimpleName = (SimpleName) name;", "+\t\tITypeBinding typeBinding2 = simpleName.resolveTypeBinding();", "+\t\t", "+\t\tassertTrue(\"Not identical\", typeBinding == typeBinding2);", "+\t\tassertTrue(\"Not equals\", typeBinding.isEqualTo(typeBinding2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6e69bb3e089e465f59f2bcd64bcfc85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 112, "signatureBeforeChange": " \tpublic void test0101() throws JavaModelException", "signatureAfterChange": " \tpublic void test0101() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"public class X{\\n\" +", "-\t\t\t\t\"\tpublic void foo() {\\n\" +", "-\t\t\t\t\"\t\tassert (true): (\\\"hello\\\");\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0, 0);", "-\t\t\tassertEquals(\"Not an assert statement\", ASTNode.ASSERT_STATEMENT, node.getNodeType());", "-\t\t\tAssertStatement assertStatement = (AssertStatement) node;", "-\t\t\tfinal char[] source = contents.toCharArray();", "-\t\t\tcheckSourceRange(assertStatement.getExpression(), \"(true)\", source);", "-\t\t\tcheckSourceRange(assertStatement.getMessage(), \"(\\\"hello\\\")\", source);", "-\t\t\tcheckSourceRange(assertStatement, \"assert (true): (\\\"hello\\\");\", source);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"public class X{\\n\" +", "+\t\t\t\"\tpublic void foo() {\\n\" +", "+\t\t\t\"\t\tassert (true): (\\\"hello\\\");\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0, 0, 0);", "+\t\tassertEquals(\"Not an assert statement\", ASTNode.ASSERT_STATEMENT, node.getNodeType());", "+\t\tAssertStatement assertStatement = (AssertStatement) node;", "+\t\tfinal char[] source = contents.toCharArray();", "+\t\tcheckSourceRange(assertStatement.getExpression(), \"(true)\", source);", "+\t\tcheckSourceRange(assertStatement.getMessage(), \"(\\\"hello\\\")\", source);", "+\t\tcheckSourceRange(assertStatement, \"assert (true): (\\\"hello\\\");\", source);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81e14e2a7a8dd375b65ea8c3cb37926", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 109, "signatureBeforeChange": " \tpublic void test0098() throws JavaModelException", "signatureAfterChange": " \tpublic void test0098() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"class X {\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\tList modifiers = typeDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 0, modifiers.size());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"class X {\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\tList modifiers = typeDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 0, modifiers.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea9c684c9fb792d1518e51223fff9c54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 94, "signatureBeforeChange": " \tpublic void test0087() throws JavaModelException", "signatureAfterChange": " \tpublic void test0087() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tbuildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X<T1> {\\n\" +", "-\t\t\t\t\"\tpublic <M1> X() {\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"\tclass Y<T2> {\\n\" +", "-\t\t\t\t\"\t\tpublic <M2> Y() {\\n\" +", "-\t\t\t\t\"\t\t}\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"\tvoid foo() {\\n\" +", "-\t\t\t\t\"\t\tnew <Object>X<Object>().new <Object>Y<Object>();\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\",", "-\t\t\t\tworkingCopy);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tbuildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X<T1> {\\n\" +", "+\t\t\t\"\tpublic <M1> X() {\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tclass Y<T2> {\\n\" +", "+\t\t\t\"\t\tpublic <M2> Y() {\\n\" +", "+\t\t\t\"\t\t}\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tvoid foo() {\\n\" +", "+\t\t\t\"\t\tnew <Object>X<Object>().new <Object>Y<Object>();\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t\tthis.workingCopy);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1ac96a844fedb39556b16b98ad48ff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": " \tpublic void test0078() throws JavaModelException", "signatureAfterChange": " \tpublic void test0078() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\t\"  String foo(int i) { return /*start*/Integer.toString(i)/*end*/;}\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIMethodBinding methodBinding = ((MethodInvocation) node).resolveMethodBinding();", "-\t\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "-\t\t\tassertFalse(\"Is a parameterized method\", methodBinding.isParameterizedMethod());", "-\t\t\tassertFalse(\"Is a generic method\", methodBinding.isGenericMethod());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\"  String foo(int i) { return /*start*/Integer.toString(i)/*end*/;}\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tIMethodBinding methodBinding = ((MethodInvocation) node).resolveMethodBinding();", "+\t\tassertFalse(\"Is a raw method\", methodBinding.isRawMethod());", "+\t\tassertFalse(\"Is a parameterized method\", methodBinding.isParameterizedMethod());", "+\t\tassertFalse(\"Is a generic method\", methodBinding.isGenericMethod());"]}], "num": 8431}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89c6b3fb7ee7145cfe10cd5e4ad823f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62ba6c5d5c6b93f3ac543ecc4665c82f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprotected MethodDeclaration createNewMethod(AST ast, String name, boolean isAbstract)", "signatureAfterChange": " \t \tprotected MethodDeclaration createNewMethod(AST ast, String name, boolean isAbstract)", "diff": ["-\t\tdecl.setReturnType(ast.newPrimitiveType(PrimitiveType.VOID));", "-\t\tdecl.setModifiers(isAbstract ? (Modifier.ABSTRACT | Modifier.PRIVATE) : Modifier.PRIVATE);", "+\t\tif (ast.apiLevel() == AST.JLS2) {", "+\t\t\tdecl.setModifiers(isAbstract ? (Modifier.ABSTRACT | Modifier.PRIVATE) : Modifier.PRIVATE);", "+\t\t\tdecl.setReturnType(ast.newPrimitiveType(PrimitiveType.VOID));", "+\t\t} else {", "+\t\t\tdecl.modifiers().add(ast.newModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD));", "+\t\t\tif (isAbstract) {", "+\t\t\t\tdecl.modifiers().add(ast.newModifier(Modifier.ModifierKeyword.ABSTRACT_KEYWORD));", "+\t\t\t}", "+\t\t\tdecl.setReturnType2(ast.newPrimitiveType(PrimitiveType.VOID));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b76217cd3af6e24965a29a3ea85bfe95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java", "commitBeforeChange": "ba69d22a0556f7a9cfe93e083652f61a196c0285", "commitAfterChange": "27aef0560bb19b81e8fa90224ee21a025635acc0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void printMessage(Kind kind, CharSequence msg, Element e, AnnotationMirror a, \t\t\tAnnotationValue v)", "signatureAfterChange": " \tpublic void printMessage(Kind kind, CharSequence msg, Element e, AnnotationMirror a, \t\t\tAnnotationValue v)", "diff": ["-\t\tCategorizedProblem problem = BatchMessagerImpl.createProblem(kind, msg, e);", "-\t\tApt6Plugin.log(new Status(IStatus.INFO, Apt6Plugin.PLUGIN_ID, Apt6Plugin.STATUS_EXCEPTION, problem.toString(), null));", "+\t\tAptProblem problem = BatchMessagerImpl.createProblem(kind, msg, e);", "+\t\tif (kind == Kind.NOTE) {", "+\t\t\tApt6Plugin.log(new Status(IStatus.INFO, Apt6Plugin.PLUGIN_ID, Apt6Plugin.STATUS_EXCEPTION, problem.getMessage(), null));", "+\t\t}", "+\t\telse if (null != problem._referenceContext) {", "+\t\t\tCompilationResult result = problem._referenceContext.compilationResult();", "+\t\t\tresult.record(problem, problem._referenceContext);", "+\t\t}", "+\t\telse {", "+\t\t\t// Unknown reference context; e.g., reported against an element not being compiled.", "+\t\t\t// TODO: report against project??  log??", "+\t\t\tApt6Plugin.log(new Status(IStatus.INFO, Apt6Plugin.PLUGIN_ID, Apt6Plugin.STATUS_EXCEPTION, problem.getMessage(), null));", "+\t\t}"]}], "num": 43145}
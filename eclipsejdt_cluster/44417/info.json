{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19639bdc5dbf7e20109758e2dad750d0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57a500c8cfa676cc8e8e65f997bcea34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "673b7eda95cd26449992e862f0c63f2c612903a0", "commitAfterChange": "b04602938404af4f8569a399fb36a5018768a262", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \r \tReferenceBinding getType(char[][] compoundName)", "signatureAfterChange": "\r \r public ReferenceBinding getType(char[][] compoundName)", "diff": ["+public ReferenceBinding getType(char[][] compoundName) {\r", "+\tReferenceBinding referenceBinding;\r", "+\r", "+\tif (compoundName.length == 1) {\r", "+\t\tif (defaultPackage == null)\r", "+\t\t\treturn null;\r", "+\r", "+\t\tif ((referenceBinding = defaultPackage.getType0(compoundName[0])) == null) {\r", "+\t\t\tPackageBinding packageBinding = getPackage0(compoundName[0]);\r", "+\t\t\tif (packageBinding != null && packageBinding != theNotFoundPackage)\r", "+\t\t\t\treturn null; // collides with a known package... should not call this method in such a case\r", "+\t\t\treferenceBinding = askForType(defaultPackage, compoundName[0]);\r", "+\t} else {\r", "+\t\tfor (int i = 1, packageLength = compoundName.length - 1; i < packageLength; i++) {\r", "+\t\t\tif ((packageBinding = packageBinding.getPackage0(compoundName[i])) == null)\r", "+\t\t\t\tbreak;\r", "+\t\tif (packageBinding == null)\r", "+\t\t\treferenceBinding = askForType(compoundName);\r", "+\t\telse if ((referenceBinding = packageBinding.getType0(compoundName[compoundName.length - 1])) == null)\r", "+\t\t\treferenceBinding = askForType(packageBinding, compoundName[compoundName.length - 1]);\r", "+\t}\r", "+\tif (referenceBinding == null || referenceBinding == theNotFoundType)\r", "+\tif (referenceBinding instanceof UnresolvedReferenceBinding)\r", "+\t\treferenceBinding = ((UnresolvedReferenceBinding) referenceBinding).resolve(this);\r", "+\r", "+\t// compoundName refers to a nested type incorrectly (i.e. package1.A$B)\r", "+\tif (referenceBinding.isNestedType())\r", "+\t\treturn new ProblemReferenceBinding(compoundName, InternalNameProvided);\r", "+\telse\r", "+\t\treturn referenceBinding;\r", "+}\r", "-\tReferenceBinding getType(char[][] compoundName) {\r", "-\t\tReferenceBinding referenceBinding;\r", "-\r", "-\t\tif (compoundName.length == 1) {\r", "-\t\t\tif (defaultPackage == null)\r", "-\t\t\t\treturn null;\r", "-\r", "-\t\t\tif ((referenceBinding = defaultPackage.getType0(compoundName[0])) == null) {\r", "-\t\t\t\tPackageBinding packageBinding = getPackage0(compoundName[0]);\r", "-\t\t\t\tif (packageBinding != null && packageBinding != theNotFoundPackage)\r", "-\t\t\t\t\treturn null;\r", "-\t\t\t\t// collides with a known package... should not call this method in such a case\r", "-\t\t\t\treferenceBinding = askForType(defaultPackage, compoundName[0]);\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tPackageBinding packageBinding = getPackage0(compoundName[0]);\r", "-\t\t\tif (packageBinding == null || packageBinding == theNotFoundPackage)\r", "-\t\t\t\treturn null;\r", "-\r", "-\t\t\tfor (int i = 1, packageLength = compoundName.length - 1;\r", "-\t\t\t\ti < packageLength;\r", "-\t\t\t\ti++) {\r", "-\t\t\t\tif ((packageBinding = packageBinding.getPackage0(compoundName[i])) == null)\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tif (packageBinding == theNotFoundPackage)\r", "-\t\t\t\t\treturn null;\r", "-\t\t\t}\r", "-\r", "-\t\t\tif (packageBinding == null)\r", "-\t\t\t\treferenceBinding = askForType(compoundName);\r", "-\t\t\telse\r", "-\t\t\t\tif ((referenceBinding =\r", "-\t\t\t\t\tpackageBinding.getType0(compoundName[compoundName.length - 1]))\r", "-\t\t\t\t\t== null)\r", "-\t\t\t\t\treferenceBinding =\r", "-\t\t\t\t\t\taskForType(packageBinding, compoundName[compoundName.length - 1]);\r", "-\r", "-\t\tif (referenceBinding == null || referenceBinding == theNotFoundType)\r", "-\t\t\treturn null;\r", "-\t\tif (referenceBinding instanceof UnresolvedReferenceBinding)\r", "-\t\t\treferenceBinding =\r", "-\t\t\t\t((UnresolvedReferenceBinding) referenceBinding).resolve(this);\r", "-\r", "-\t\t// compoundName refers to a nested type incorrectly (i.e. package1.A$B)\r", "-\t\tif (referenceBinding.isNestedType())\r", "-\t\t\treturn new ProblemReferenceBinding(compoundName, InternalNameProvided);\r", "-\t\telse\r", "-\t\t\treturn referenceBinding;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed75c8db25a2bd07d53a3cebfb5585e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "c96ea754cbc1843e6373572c9a41527df8e971a2", "commitAfterChange": "b026aefdcbffec474ae6cafef5ea7136332c257c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private Binding findSingleStaticImport(char[][] compoundName)", "signatureAfterChange": " private Binding findSingleStaticImport(char[][] compoundName)", "diff": ["-\trecordQualifiedReference(compoundName);", "+\tBinding binding = findImport(compoundName, compoundName.length - 1);", "+\tif (!binding.isValidBinding()) return binding;", "-\tBinding binding = environment.getTopLevelPackage(compoundName[0]);", "-\tint i = 1;", "-\tint length = compoundName.length;", "-\tfoundNothingOrType: if (binding != null) {", "-\t\tPackageBinding packageBinding = (PackageBinding) binding;", "-\t\twhile (i < length) {", "-\t\t\tbinding = packageBinding.getTypeOrPackage(compoundName[i++]);", "-\t\t\tif (binding == null || !binding.isValidBinding()) {", "-\t\t\t\tbinding = null;", "-\t\t\t\tbreak foundNothingOrType;", "-\t\t\t}", "-\t\t\tif (!(binding instanceof PackageBinding))", "-\t\t\t\tbreak foundNothingOrType;", "-", "-\t\t\tpackageBinding = (PackageBinding) binding;", "-\t\t}", "-\t\treturn packageBinding; // cannot be a package, error is caught in sender", "+\tchar[] name = compoundName[compoundName.length - 1];", "+\tif (binding instanceof PackageBinding) {", "+\t\tBinding temp = ((PackageBinding) binding).getTypeOrPackage(name);", "+\t\tif (temp != null && temp instanceof ReferenceBinding) // must resolve to a member type or field, not a top level type", "+\t\t\treturn new ProblemReferenceBinding(compoundName, InvalidTypeForStaticImport);", "+\t\treturn binding; // cannot be a package, error is caught in sender", "-\tReferenceBinding type;", "-\tif (binding == null) {", "-\t\tif (environment.defaultPackage == null || environment.options.complianceLevel >= ClassFileConstants.JDK1_4)", "-\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), NotFound);", "-\t\ttype = findType(compoundName[0], environment.defaultPackage, environment.defaultPackage);", "-\t\tif (type == null || !type.isValidBinding())", "-\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), NotFound);", "-\t\ti = 1; // reset to look for member types inside the default package type", "-\t} else {", "-\t\ttype = (ReferenceBinding) binding;", "-\t}", "-\tif (i == length) // must resolve to a member type or field, not a top level type", "-\t\treturn new ProblemReferenceBinding(compoundName, InvalidTypeForStaticImport);", "+\t// look to see if its a static field first", "+\tReferenceBinding type = (ReferenceBinding) binding;", "+\tFieldBinding field = findField(type, name, null, true);", "+\tif (field != null && field.isStatic() && field.canBeSeenBy(fPackage))", "+\t\treturn field;", "-\twhile (i < length) {", "-\t\tif (!type.canBeSeenBy(fPackage))", "-\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), type, NotVisible);\t\t", "-\t\t// does look for inherited member types unlike non static imports, member types have precedence over static fields", "-\t\tchar[] name = compoundName[i++];", "-\t\tReferenceBinding memberType = findMemberType(name, type);", "-\t\tif (memberType == null || !memberType.isStatic()) {", "-\t\t\tif (i != length) // fields can only be found in the last spot", "-\t\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), NotFound);", "-", "-\t\t\t// need to look for a static field", "-\t\t\tFieldBinding field = findField(type, name, null, true);", "-\t\t\tif (field == null || !field.isStatic() || !field.canBeSeenBy(fPackage))", "-\t\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), NotFound);", "-\t\t\treturn field;", "-\t\t}", "-\t\ttype = memberType;", "-\t}", "+\ttype = findMemberType(name, type);", "+\tif (type == null || !type.isStatic())", "+\t\treturn new ProblemReferenceBinding(compoundName, type, NotFound);"]}], "num": 44417}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58673a388f6560ee565c0b5b10f982f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f082cdb046cd47239967313604fb3d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMethod.java", "commitBeforeChange": "f08e2fcfb74b9a513988b6c92b3d0f1c94eb6ecf", "commitAfterChange": "c35e0ba6a6bce7272fb4c8d0b339e50b59e7d2a3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void toStringInfo(int tab, StringBuffer buffer, Object info)", "signatureAfterChange": " protected void toStringInfo(int tab, StringBuffer buffer, Object info)", "diff": ["+\t\t\ttoStringParameters(buffer);", "+\t\t\ttoStringParameters(buffer);", "-\t\t\tbuffer.append('(');", "-\t\t\tString[] parameterTypes = this.getParameterTypes();", "-\t\t\tint length;", "-\t\t\tif (parameterTypes != null && (length = parameterTypes.length) > 0) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tbuffer.append(Signature.toString(parameterTypes[i]));", "-\t\t\t\t\tif (i < length - 1) {", "-\t\t\t\t\t\tbuffer.append(\", \"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tbuffer.append(')');", "+\t\t\ttoStringParameters(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56248052e78e8ccf338eb5c5f9056a05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testPerfParserOneFile() throws InvalidInputException, IOException", "signatureAfterChange": " \tpublic void testParser() throws InvalidInputException, IOException", "diff": ["-\tpublic void testPerfParserOneFile() throws InvalidInputException, IOException {", "-\t\t// Do no longer print result in performance fingerprint", "-\t\ttagAsSummary(\"Compile>Parse>Src:parser>Options:Default\", Dimension.CPU_TIME, true); // put in fingerprint", "-", "-\t\t// Get workspace path", "-\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "-\t\tfinal String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID)", "-\t\t\t.getLocation()", "-\t\t\t.toFile()", "-\t\t\t.getCanonicalPath();", "-\t\t", "-\t\t// Run test", "-\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "-\t\t\tparseFile(targetWorkspacePath+\"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java\", ITERATIONS_COUNT*6);", "-\t\t}", "-", "-\t\t// dump measure", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-\t}", "+\tpublic void testParser() throws InvalidInputException, IOException {", "+\t\ttagAsSummary(\"Compile>Parse>Parser>Default\", true); // put in fingerprint", "+\t\tparseParserFile(0); // Parser kind"]}], "num": 36191}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6453f519d849c09c38495f00330b9b76", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf407fde5d236ed359e0d5cf44959785", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "bef60d1fb53f507f903d66ac6e04e719aa5b50f4", "commitAfterChange": "3b418eaef41604a68c97dae4dd32fddcb839b515", "methodNumberBeforeChange": 1209, "methodNumberAfterChange": 1209, "signatureBeforeChange": " public void _test1181()", "signatureAfterChange": " public void test1181()", "diff": ["-public void _test1181() {", "+public void test1181() {", "-\t\t\"should not see errors like: R cannot be resolved to a type\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic static <S, T extends Comparable<S>, R extends S & T> R max(T arg1, S arg2) {\\n\" + ", "+\t\t\"\t                                                         ^\\n\" + ", "+\t\t\"Cannot specify any additional bound T when first bound is a type parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic static <S, T extends Comparable<S>, R extends S & T> R max(T arg1, S arg2) {\\n\" + ", "+\t\t\"\t                                                              ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\treturn (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to R\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tpublic static <T extends Comparable<S>, S, R extends S & Comparable<S>> R max(T arg1, S arg2) {\\n\" + ", "+\t\t\"\t                                                         ^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot specify any additional bound Comparable<S> when first bound is a type parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tpublic static <T extends Comparable<S>, S, R extends S & Comparable<S>> R max(T arg1, S arg2) {\\n\" + ", "+\t\t\"\t                                                                          ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\treturn (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to R\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\treturn (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to R\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c48be7a587e547c3ff9cd8529d1eb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "ee8ad1e40e9b16f34ac6204dee3c91af5b27ff77", "commitAfterChange": "a6e44391963b63fa0c27651827313192cc7a80a0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test006()", "signatureAfterChange": " public void test006()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\t\"Outer cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t             ^^^\\n\" + ", "+\t\t\t\"One cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t                  ^^^\\n\" + ", "+\t\t\t\"Two cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t                             ^^^^^\\n\" + ", "+\t\t\t\"Three cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t                                    ^^^^\\n\" + ", "+\t\t\t\"Four cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t                                                 ^^^^\\n\" + ", "+\t\t\t\"Five cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t                                                       ^^^\\n\" + ", "+\t\t\t\"Six cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 6)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df144f512f0561cbac1703fe237290e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e2422311047b85902980920dda1eeedf124d520c", "commitAfterChange": "c107fdebcaaafcbea0a28f68e9b229afba9f7c4f", "methodNumberBeforeChange": 1375, "methodNumberAfterChange": 1375, "signatureBeforeChange": " public void test1344() throws Exception", "signatureAfterChange": " public void test1344() throws Exception", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\t\"\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tpublic class X<T> extends Adapter {\\n\" + ", "+\t\t\t\"\t                          ^^^^^^^\\n\" + ", "+\t\t\t\"Adapter is a raw type. References to generic type Adapter<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" + ", "+\t\t\t\"\t                    ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method makeSetter() of type X<T> has the same erasure as makeSetter() of type Adapter but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t                   ^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}], "num": 56520}
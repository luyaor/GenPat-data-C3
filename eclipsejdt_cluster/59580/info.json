{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c13f522d06c013bbf35de2f9dc61778b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f75d81c4c4e18114eec853c3b7d412c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "848c4ddf1895eb24711ea8c54b1168746cb07972", "commitAfterChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 37, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t// Annotation implicit IDs for deprecatedField(...)", "-\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedField:", "-\t\t// Annotation implicit IDs for deprecatedMethod(...)", "-\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedConstructor:", "-\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedMethod:", "-\t\t// Annotation implicit IDs for deprecatedType(...)", "-\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedType:", "-\t\t// Annotation implicit IDs for invalidField(...)", "-\t\tcase IProblem.Annotation | IProblem.UndefinedField:", "-\t\tcase IProblem.Annotation | IProblem.NotVisibleField:", "-\t\tcase IProblem.Annotation | IProblem.AmbiguousField:", "-\t\t// Annotation implicit IDs for invalidMethod(...)", "-\t\tcase IProblem.Annotation | IProblem.UndefinedMethod:", "-\t\tcase IProblem.Annotation | IProblem.NotVisibleMethod:", "-\t\tcase IProblem.Annotation | IProblem.ParameterMismatch:", "-\t\t// Annotation implicit IDs for invalidType(...)", "-\t\tcase IProblem.Annotation | IProblem.UndefinedType:", "-\t\tcase IProblem.Annotation | IProblem.NotVisibleType:", "-\t\t// Annotation implicit IDs for errorNoMethodFor(...)", "-\t\tcase IProblem.Annotation | IProblem.NoMessageSendOnArrayType:", "-\t\tcase IProblem.Annotation | IProblem.NoMessageSendOnBaseType:", "-\t\t// Annotation explicit IDs", "-\t\tcase IProblem.AnnotationUnexpectedTag:", "-\t\tcase IProblem.AnnotationMissingParamTag:", "-\t\tcase IProblem.AnnotationMissingParamName:", "-\t\tcase IProblem.AnnotationDuplicateParamName:", "-\t\tcase IProblem.AnnotationInvalidParamName:", "-\t\tcase IProblem.AnnotationMissingReturnTag:", "-\t\tcase IProblem.AnnotationDuplicateReturnTag:", "-\t\tcase IProblem.AnnotationMissingThrowsTag:", "-\t\tcase IProblem.AnnotationMissingThrowsClassName:", "-\t\tcase IProblem.AnnotationInvalidThrowsClass:", "-\t\tcase IProblem.AnnotationDuplicateThrowsClassName:", "-\t\tcase IProblem.AnnotationInvalidThrowsClassName:", "-\t\tcase IProblem.AnnotationMissingSeeReference:", "-\t\tcase IProblem.AnnotationInvalidSeeReference:", "-\t\tcase IProblem.AnnotationInvalidSeeHref:", "-\t\tcase IProblem.AnnotationInvalidSeeArgs:", "-\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+\t\t// Javadoc implicit IDs for deprecatedField(...)", "+\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedField:", "+\t\t// Javadoc implicit IDs for deprecatedMethod(...)", "+\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedConstructor:", "+\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedMethod:", "+\t\t// Javadoc implicit IDs for deprecatedType(...)", "+\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedType:", "+\t\t// Javadoc implicit IDs for invalidField(...)", "+\t\tcase IProblem.Javadoc | IProblem.UndefinedField:", "+\t\tcase IProblem.Javadoc | IProblem.NotVisibleField:", "+\t\tcase IProblem.Javadoc | IProblem.AmbiguousField:", "+\t\t// Javadoc implicit IDs for invalidConstructor(...)", "+\t\tcase IProblem.Javadoc | IProblem.UndefinedConstructor:", "+\t\tcase IProblem.Javadoc | IProblem.NotVisibleConstructor:", "+\t\t// Javadoc implicit IDs for invalidMethod(...)", "+\t\tcase IProblem.Javadoc | IProblem.UndefinedMethod:", "+\t\tcase IProblem.Javadoc | IProblem.NotVisibleMethod:", "+\t\tcase IProblem.Javadoc | IProblem.ParameterMismatch:", "+\t\t// Javadoc implicit IDs for invalidType(...)", "+\t\tcase IProblem.Javadoc | IProblem.UndefinedType:", "+\t\tcase IProblem.Javadoc | IProblem.NotVisibleType:", "+\t\t// Javadoc implicit IDs for errorNoMethodFor(...)", "+\t\tcase IProblem.Javadoc | IProblem.NoMessageSendOnArrayType:", "+\t\tcase IProblem.Javadoc | IProblem.NoMessageSendOnBaseType:", "+\t\t// Javadoc explicit IDs", "+\t\tcase IProblem.JavadocUnexpectedTag:", "+\t\tcase IProblem.JavadocMissingParamTag:", "+\t\tcase IProblem.JavadocMissingParamName:", "+\t\tcase IProblem.JavadocDuplicateParamName:", "+\t\tcase IProblem.JavadocInvalidParamName:", "+\t\tcase IProblem.JavadocMissingReturnTag:", "+\t\tcase IProblem.JavadocDuplicateReturnTag:", "+\t\tcase IProblem.JavadocMissingThrowsTag:", "+\t\tcase IProblem.JavadocMissingThrowsClassName:", "+\t\tcase IProblem.JavadocInvalidThrowsClass:", "+\t\tcase IProblem.JavadocDuplicateThrowsClassName:", "+\t\tcase IProblem.JavadocInvalidThrowsClassName:", "+\t\tcase IProblem.JavadocMissingSeeReference:", "+\t\tcase IProblem.JavadocInvalidSeeReference:", "+\t\tcase IProblem.JavadocInvalidSeeHref:", "+\t\tcase IProblem.JavadocInvalidSeeArgs:", "+\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "-\t\tcase IProblem.AnnotationMissing:", "-\t\t\tif (!this.options.reportMissingAnnotation) return Ignore;", "-\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+\t\tcase IProblem.JavadocMissing:", "+\t\t\tif (!this.options.reportMissingJavadoc) return Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "742cb0dbbe52e82f792f1f375aeda30c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected int getPosition()", "signatureAfterChange": " public int[] getFramePositions()", "diff": ["-}", "-protected int getPosition() {", "-    // need to record a new stack frame at this position", "-    int pos = super.getPosition();", "-    this.framePositions.add(new Integer(this.position));", "-    storeStackMapFrame();", "-    return pos;", "-}", "+}", "+public int[] getFramePositions() {", "+\tSet set = this.framePositions.keySet();", "+\tint size = set.size();", "+\tint[] positions = new int[size];", "+\tint n = 0;", "+\tfor (Iterator iterator = set.iterator(); iterator.hasNext(); ) {", "+\t\tpositions[n++] = ((Integer) iterator.next()).intValue();", "+\t}", "+\tArrays.sort(positions);", "+//  System.out.print('[');", "+//  for (int n = 0; n < size; n++) {", "+//  \tif (n != 0) System.out.print(',');", "+//  \tSystem.out.print(positions[n]);", "+//  }", "+//  System.out.println(']');", "+\treturn positions;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d2bb54dca54a2144e28e6a37b0bf3c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8cec64edfc4c068818ffd71a8dbc7e8b83389a67", "commitAfterChange": "a988dc73f53d4add2180387d81f149877a8b4c63", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "signatureAfterChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "diff": ["-\t\tTypeBinding[] superTypes;", "+\t\tTypeBinding[] erasedSuperTypes;", "-\t\t\tsuperTypes = new TypeBinding[] { // inject well-known array supertypes", "+\t\t\terasedSuperTypes = new TypeBinding[] { // inject well-known array supertypes", "-\t\t\ttypesToVisit.add(firstErasure);", "+\t\t\ttypesToVisit.add(firstType);", "-\t\t\t\t\t\ttypesToVisit.add(itsInterfaceErasure);", "+\t\t\t\t\t\ttypesToVisit.add(itsInterface);", "-\t\t\t\t\t\ttypesToVisit.add(itsSuperclassErasure);", "+\t\t\t\t\t\ttypesToVisit.add(itsSuperclass);", "-\t\t\tsuperTypes = new TypeBinding[superLength];", "-\t\t\ttypesToVisit.toArray(superTypes);", "+\t\t\terasedSuperTypes = new TypeBinding[superLength];", "+\t\t\tint rank = 0;", "+\t\t\tfor (Iterator iter = typesToVisit.iterator(); iter.hasNext();) {", "+\t\t\t\terasedSuperTypes[rank++] = ((TypeBinding)iter.next()).erasure();", "+\t\t\t}", "-\t\t\t\t\tTypeBinding superType = superTypes[j];", "-\t\t\t\t\tif (superType == null || superType == otherType) continue nextSuperType;", "-\t\t\t\t\tswitch (superType.id) {", "+\t\t\t\t\tTypeBinding erasedSuperType = erasedSuperTypes[j];", "+\t\t\t\t\tif (erasedSuperType == null || erasedSuperType == otherType) continue nextSuperType;", "+\t\t\t\t\tswitch (erasedSuperType.id) {", "-\t\t\t\t\tsuperTypes[j] = null;", "+\t\t\t\t\terasedSuperTypes[j] = null;", "-\t\t\t\tTypeBinding superType = superTypes[j];", "-\t\t\t\tif (superType == null) continue nextSuperType;", "+\t\t\t\tTypeBinding erasedSuperType = erasedSuperTypes[j];", "+\t\t\t\tif (erasedSuperType == null) continue nextSuperType;", "-\t\t\t\tif (superType == otherType || superType.id == T_JavaLangObject && otherType.isInterface()) {", "-\t\t\t\t\tmatch = superType;", "+\t\t\t\tif (erasedSuperType == otherType || erasedSuperType.id == T_JavaLangObject && otherType.isInterface()) {", "+\t\t\t\t\tmatch = erasedSuperType;", "-\t\t\t\t\tif (superType.isArrayType()) {", "+\t\t\t\t\tif (erasedSuperType.isArrayType()) {", "-\t\t\t\t\t\tmatch = otherRefType.findSuperTypeWithSameErasure(superType);", "+\t\t\t\t\t\tmatch = otherRefType.findSuperTypeWithSameErasure(erasedSuperType);", "-\t\t\t\t\t\tsuperTypes[j] = null;", "+\t\t\t\t\t\terasedSuperTypes[j] = null;", "-\t\t\t\tSet someInvocations = (Set) allInvocations.get(superType);", "+\t\t\t\tSet someInvocations = (Set) allInvocations.get(erasedSuperType);", "-\t\t\t\tallInvocations.put(superType, someInvocations);", "+\t\t\t\tallInvocations.put(erasedSuperType, someInvocations);", "-\t\t\t\tReferenceBinding superType = (ReferenceBinding)superTypes[i];", "-\t\t\t\tif (superType == null) continue nextType;", "+\t\t\t\tReferenceBinding erasedSuperType = (ReferenceBinding)erasedSuperTypes[i];", "+\t\t\t\tif (erasedSuperType == null) continue nextType;", "-\t\t\t\t\tReferenceBinding otherType = (ReferenceBinding)superTypes[j];", "+\t\t\t\t\tReferenceBinding otherType = (ReferenceBinding)erasedSuperTypes[j];", "-\t\t\t\t\tif (otherType.id == T_JavaLangObject && superType.isInterface()) continue nextOtherType;", "-\t\t\t\t\tif (superType.findSuperTypeWithSameErasure(otherType) != null) {", "-\t\t\t\t\t\tsuperTypes[j] = null; // discard non minimal supertype", "+\t\t\t\t\tif (otherType.id == T_JavaLangObject && erasedSuperType.isInterface()) continue nextOtherType;", "+\t\t\t\t\tif (erasedSuperType.findSuperTypeWithSameErasure(otherType) != null) {", "+\t\t\t\t\t\terasedSuperTypes[j] = null; // discard non minimal supertype", "-\t\treturn superTypes;", "+\t\treturn erasedSuperTypes;"]}], "num": 59580}
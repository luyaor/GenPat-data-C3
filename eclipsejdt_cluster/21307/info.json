{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df6ffca14f700dbec7a8d75576888066", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0a4216f7ae493b26f0f570e5a8f382e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "58aaea35ae4c64a4ecebe06d6b1ab1679e04698a", "commitAfterChange": "d5df66f62f879926d0ab37840f8644f7133a2a54", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public IClasspathEntry createSourceEntry(String referingProjectName, String src, String patterns)", "signatureAfterChange": " public IClasspathEntry createSourceEntry(String referingProjectName, String src, String patterns)", "diff": ["-\t\tif (rule.charAt(0) == '+') {", "-\t\t\tkind = IAccessRule.K_ACCESSIBLE;", "-\t\t} else {", "-\t\t\tkind = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\tnonAccessibleRules++;", "+\t\tswitch (rule.charAt(0)) {", "+\t\t\tcase '+':", "+\t\t\t\tkind = IAccessRule.K_ACCESSIBLE;", "+\t\t\t\tbreak;", "+\t\t\tcase '~':", "+\t\t\t\tkind = IAccessRule.K_DISCOURAGED;", "+\t\t\t\tbreak;", "+\t\t\tcase '-':", "+\t\t\tdefault:\t\t// TODO (maxime) consider forbidding unspecified rule start; this one tolerates", "+\t\t\t\t\t\t\t// \t\tshortcuts that only specify a path matching pattern", "+\t\t\t\tkind = IAccessRule.K_NON_ACCESSIBLE;", "+\t\t\t\tbreak;", "+\t\tnonAccessibleRules++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e720478c6f3c61eec03cf8f78ff54bca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected IType lookupBinaryHandle(IBinaryType typeInfo)", "signatureAfterChange": " \tprotected IType lookupBinaryHandle(IBinaryType typeInfo)", "diff": ["-\t\tif (typeInfo.isClass()) {", "-\t\t\tflag = NameLookup.ACCEPT_CLASSES;", "-\t\t} else {", "-\t\t\tflag = NameLookup.ACCEPT_INTERFACES;", "-\t\t}", "+\t\tswitch (typeInfo.getKind()) {", "+\t\t\tcase IGenericType.CLASS :", "+\t\t\t\tflag = NameLookup.ACCEPT_CLASSES;", "+\t\t\t\tbreak;", "+\t\t\tcase IGenericType.INTERFACE :", "+\t\t\t\tflag = NameLookup.ACCEPT_INTERFACES;", "+\t\t\t\tbreak;", "+\t\t\tcase IGenericType.ENUM :", "+\t\t\t\tflag = NameLookup.ACCEPT_ENUMS;", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\t//case IGenericType.ANNOTATION :", "+\t\t\t\tflag = NameLookup.ACCEPT_ANNOTATIONS;", "+\t\t\t\tbreak;", "+\t\t}\t\t\t"]}], "num": 21307}
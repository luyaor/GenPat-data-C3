{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a4d36b2ac704888931ec402fca6815c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57a88095353d2a8781ec557e570b6b75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "c90773ded969a955dbf869e7d3cd599898423a64", "commitAfterChange": "85d19e94c6786b901347844edd06d2143d6f8b15", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t    if (!trueType.isPrimitiveOrBoxedPrimitiveType() || !falseType.isPrimitiveOrBoxedPrimitiveType()) { // reference conditional ==> poly expression.", "-\t\t\t    \tif (!originalValueIfTrueType.isCompatibleWith(this.expectedType, scope))", "-\t\t\t    \t\tscope.problemReporter().typeMismatchError(originalValueIfTrueType, this.expectedType, this.valueIfTrue, null);", "-\t\t\t    \tif (!originalValueIfFalseType.isCompatibleWith(this.expectedType, scope))", "-\t\t\t    \t\tscope.problemReporter().typeMismatchError(originalValueIfFalseType, this.expectedType, this.valueIfFalse, null);", "-\t\t\t    \t// 15.25.3: The type of a poly reference conditional expression is the same as its target type.", "-\t\t\t    \treturn this.resolvedType = this.expectedType;", "-\t\t\t    }", "-\t\t\t", "+\t\t\t    if (!trueType.isPrimitiveOrBoxedPrimitiveType() || !falseType.isPrimitiveOrBoxedPrimitiveType()) // reference conditional ==> poly expression.", "+\t\t\t    \tthis.isPolyExpression = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a995df1fac822ece7c35365f063e20b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["-\t\t// check missing blank final field initializations (plus @NonNull)", "+\t\t// check missing blank final field initializations", "-\t\t\t\tFieldBinding field = fields[i];", "-\t\t\t\tif (!field.isStatic()) {", "-\t\t\t\t\tif (field.isFinal()", "-\t\t\t\t\t\t\t&& (!flowInfo.isDefinitelyAssigned(field))) {", "-\t\t\t\t\t\tthis.scope.problemReporter().uninitializedBlankFinalField(", "-\t\t\t\t\t\t\t\tfield,", "-\t\t\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0) ? (ASTNode) this.scope.referenceType() : this);", "-\t\t\t\t\t} else if (field.isNonNull()) {", "-\t\t\t\t\t\tif (!flowInfo.isDefinitelyAssigned(field)) {", "-\t\t\t\t\t\t\tthis.scope.problemReporter().uninitializedNonNullField(", "-\t\t\t\t\t\t\t\t\tfield,", "-\t\t\t\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0) ? (ASTNode) this.scope.referenceType() : this);\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\tFieldBinding field;", "+\t\t\t\tif ((!(field = fields[i]).isStatic())", "+\t\t\t\t\t&& field.isFinal()", "+\t\t\t\t\t&& (!flowInfo.isDefinitelyAssigned(fields[i]))) {", "+\t\t\t\t\tthis.scope.problemReporter().uninitializedBlankFinalField(", "+\t\t\t\t\t\tfield,", "+\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0) ? (ASTNode) this.scope.referenceType() : this);"]}], "num": 12564}
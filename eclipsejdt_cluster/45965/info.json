{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59e5762cb53d9118592c17b7d2c715b3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a339e58401f5a487430b72e83e14419f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "5e6ce1a02c1fd92d8737923476f9b03120d60dfc", "commitAfterChange": "27b04348f6378e421a1a2788716e3b7fc8643774", "methodNumberBeforeChange": 285, "methodNumberAfterChange": 285, "signatureBeforeChange": "\r final public void tableswitch(CaseLabel defaultLabel, int low, int high, int[] keys, int[] sortedIndexes, CaseLabel[] casesLabel)", "signatureAfterChange": "\r final public void tableswitch(CaseLabel defaultLabel, int low, int high, int[] keys, int[] sortedIndexes, CaseLabel[] casesLabel)", "diff": ["-\tint j = low;\r", "+\tint i = low, j = low;\r", "-\tfor (int i = low; i <= high; i++) {\r", "+\twhile (true) {\r", "+\t\t\tif (i == high) break; // if high is maxint, then avoids wrapping to minint.\r", "+\t\ti++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdec08493d84352e60afe56af4c619ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " protected IType lookupType(ReferenceBinding typeBinding)", "signatureAfterChange": " protected IType lookupType(ReferenceBinding typeBinding)", "diff": ["-\tfor (int i = 0, length = pkgs == null ? 0 : pkgs.length; i < length; i++) {", "-\t\tIType type = this.nameLookup.findType(typeName, pkgs[i],  false,  acceptFlag, true/*consider secondary types*/);", "-\t\tif (type != null) return type;", "+\tif (pkgs != null) {", "+\t\tfor (int i = 0, length = pkgs.length; i < length; i++) {", "+\t\t\tIType type = this.nameLookup.findType(typeName, pkgs[i],  false,  acceptFlag, true/*consider secondary types*/);", "+\t\t\tif (type != null) return type;", "+\t\t}"]}], "num": 45965}
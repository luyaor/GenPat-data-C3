{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5110dbbc2696847d6ac4d30a8cbcc5d8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88a47c3e3f4905aa276bffcfbff8d17c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "952d2bf40c8b5ee9d9f2f1971b355dede96e54bb", "commitAfterChange": "f9e0bb0958857b1dd0ff6b35b5ab438cbe588554", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public static boolean delete(IResource resource)", "signatureAfterChange": " public static IStatus delete(IResource resource)", "diff": ["-public static boolean delete(IResource resource) {", "-    try {", "-        resource.delete(true, null);", "-        if (isResourceDeleted(resource)) {", "-            return true;", "-        }", "-    }", "-    catch (CoreException e) {", "-        //\tskip", "-    }", "-    return waitUntilResourceDeleted(resource);", "+public static IStatus delete(IResource resource) {", "+\tIStatus status = null;", "+\ttry {", "+\t\tresource.delete(true, null);", "+\t\tif (isResourceDeleted(resource)) {", "+\t\t\treturn Status.OK_STATUS;", "+\t\t}", "+\t} catch (CoreException e) {", "+\t\tstatus = e.getStatus();", "+\t}", "+\tboolean deleted = waitUntilResourceDeleted(resource);", "+\tif (deleted) {", "+\t\treturn Status.OK_STATUS;", "+\t}", "+\tif (status != null) {", "+\t\treturn status;", "+\t}", "+\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, \"Cannot delete resource \"+resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a0b55b1dccd239cd96e554e05daf4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TestPessimisticProvider.java", "commitBeforeChange": "6e0c03610cbc826f510f4808a438e90bdc9be9b7", "commitAfterChange": "011e8e3a52083052e5657e005c0f9c924e859fa5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void setReadOnly(IResource resource, boolean readOnly) throws CoreException", "signatureAfterChange": " \t\t \t\t\tvoid setReadOnly(IResource resource, boolean readOnly) throws CoreException", "diff": ["+\t\t", "+\t\t\tvoid setReadOnly(IResource resource, boolean readOnly) throws CoreException {", "+\t\t\t\tif (Util.isReadOnlySupported()) {", "+\t\t\t\t\tResourceAttributes resourceAttributes = resource.getResourceAttributes();", "+\t\t\t\t\tif (resourceAttributes != null) {", "+\t\t\t\t\t\tresourceAttributes.setReadOnly(readOnly);", "+\t\t\t\t\t\tresource.setResourceAttributes(resourceAttributes);", "+\t\t\t\t\t}\t\t", "+\t\t\t\t}", "+\t\t\t}", "-", "-\tpublic void setReadOnly(IResource resource, boolean readOnly) throws CoreException {", "-\t\tif (Util.isReadOnlySupported()) {", "-\t\t\tResourceAttributes resourceAttributes = resource.getResourceAttributes();", "-\t\t\tif (resourceAttributes != null) {", "-\t\t\t\tresourceAttributes.setReadOnly(readOnly);", "-\t\t\t\tresource.setResourceAttributes(resourceAttributes);", "-\t\t\t}\t\t", "-\t\t}", "-\t}"]}], "num": 24519}
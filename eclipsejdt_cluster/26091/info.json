{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b46a1a9ca09e6047d497f6295381656", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "255cfd8e9798bbfa4e3e34c5f8b1d58a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java", "commitBeforeChange": "6942ba89260ced8761513584f97535ed598c868d", "commitAfterChange": "2254b84309b2e5733188a240f2a612a1b002f2ba", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Override \tpublic List<? extends TypeParameterElement> getTypeParameters()", "signatureAfterChange": "  \t@Override \tpublic List<? extends TypeParameterElement> getTypeParameters()", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\tMethodBinding binding = (MethodBinding)_binding;", "+\t\tTypeVariableBinding[] variables = binding.typeVariables();", "+\t\tif (variables.length == 0) {", "+\t\t\treturn Collections.emptyList();", "+\t\t}", "+\t\tList<TypeParameterElement> params = new ArrayList<TypeParameterElement>(variables.length); ", "+\t\tfor (TypeVariableBinding variable : variables) {", "+\t\t\tparams.add(Factory.newTypeParameterElement(variable, this));", "+\t\t}", "+\t\treturn Collections.unmodifiableList(params);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c12e812ce6239ee859aadc7130c1eb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java", "commitBeforeChange": "6942ba89260ced8761513584f97535ed598c868d", "commitAfterChange": "2254b84309b2e5733188a240f2a612a1b002f2ba", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \t@Override \tpublic List<? extends TypeParameterElement> getTypeParameters()", "signatureAfterChange": " \t \t@Override \tpublic List<? extends TypeParameterElement> getTypeParameters()", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\tReferenceBinding binding = (ReferenceBinding)_binding;", "+\t\tTypeVariableBinding[] variables = binding.typeVariables();", "+\t\tif (variables.length == 0) {", "+\t\t\treturn Collections.emptyList();", "+\t\t}", "+\t\tList<TypeParameterElement> params = new ArrayList<TypeParameterElement>(variables.length); ", "+\t\tfor (TypeVariableBinding variable : variables) {", "+\t\t\tparams.add(Factory.newTypeParameterElement(variable, this));", "+\t\t}", "+\t\treturn Collections.unmodifiableList(params);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c44dbd5be04c5edfe439bd800d66c4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java", "commitBeforeChange": "1a085f6923332d813470a8d5ddda1ced463837b2", "commitAfterChange": "ed6404d1b00fb0c4d7b0edc065f94f5cf30ee47f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "signatureAfterChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "diff": ["-\t\t//TODO: what should this method do for generic types, as opposed to parameterized types?", "-\t\t//E.g., class <T1> Foo {}, get the class as a type, what are its type arguments?", "-\t\tif (!binding.isParameterizedType()) {", "-\t\t\treturn Collections.emptyList();", "+\t\tif (binding.isParameterizedType()) {", "+\t\t\tParameterizedTypeBinding ptb = (ParameterizedTypeBinding)_binding;", "+\t\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(ptb.arguments.length);", "+\t\t\tfor (TypeBinding arg : ptb.arguments) {", "+\t\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(args);", "-\t\tParameterizedTypeBinding ptb = (ParameterizedTypeBinding)_binding;", "-\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(ptb.arguments.length);", "-\t\tfor (TypeBinding arg : ptb.arguments) {", "-\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\tif (binding.isGenericType()) {", "+\t\t\tTypeVariableBinding[] typeVariables = binding.typeVariables();", "+\t\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(typeVariables.length);", "+\t\t\tfor (TypeBinding arg : typeVariables) {", "+\t\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(args);", "-\t\treturn Collections.unmodifiableList(args);", "+\t\treturn Collections.emptyList();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cebfd8fb7568255938517eacca9a3d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java", "commitBeforeChange": "e9c60c881f616cec2b0aa059fea6029ace6786f2", "commitAfterChange": "7c5bfe960ac34f9bf490d269fc7b421c65f6f08b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "signatureAfterChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\t//TODO: what should this method do for generic types, as opposed to parameterized types?", "+\t\t//E.g., class <T1> Foo {}, get the class as a type, what are its type arguments?", "+\t\tReferenceBinding binding = (ReferenceBinding)_binding;", "+\t\tif (!binding.isParameterizedType()) {", "+\t\t\treturn Collections.emptyList();", "+\t\t}", "+\t\tParameterizedTypeBinding ptb = (ParameterizedTypeBinding)_binding;", "+\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(ptb.arguments.length);", "+\t\tfor (TypeBinding arg : ptb.arguments) {", "+\t\t\targs.add(Factory.newTypeMirror(arg));", "+\t\t}", "+\t\treturn Collections.unmodifiableList(args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1da9ff8441c45699316320c080bf2b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java", "commitBeforeChange": "82fb6745d0f2bc2c9b5e4740da70b2e364d6955a", "commitAfterChange": "c295624cf25dea9fdc929a62413bd288dbeb35d7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic AnnotationValueImpl(Object value)", "signatureAfterChange": " \tpublic AnnotationValueImpl(Object value)", "diff": ["-\t\t_value = value;", "+\t\tint kind[] = new int[1];", "+\t\tif (value instanceof Object[]) {", "+\t\t\tObject[] values = (Object[])value;", "+\t\t\tList<AnnotationValue> convertedValues = new ArrayList<AnnotationValue>(values.length);", "+\t\t\tfor (Object oneValue : values) {", "+\t\t\t\tconvertedValues.add(new AnnotationValueImpl(oneValue));", "+\t\t\t}", "+\t\t\t_value = Collections.unmodifiableList(convertedValues);", "+\t\t\t_kind = T_ArrayType;", "+\t\t}", "+\t\telse {", "+\t\t\t_value = convertToJavaType(value, kind);", "+\t\t\t_kind = kind[0];", "+\t\t}", "+\t}"]}], "num": 26091}
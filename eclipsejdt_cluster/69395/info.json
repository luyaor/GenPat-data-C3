{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f2f8d386a371e5f271e74cd1e214aba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c690fd297ec94eb918c51ba902c03866", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "5dcefdb7b6dc4ca118d352248744f6f6f0cfd53e", "commitAfterChange": "6568a2476b22c2b9915b48b3eb9ea4ea62f741d4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void createFields(IBinaryField[] iFields, long sourceLevel)", "signatureAfterChange": " \tprivate void createFields(IBinaryField[] iFields, long sourceLevel)", "diff": ["-private void createFields(IBinaryField[] iFields, long sourceLevel) {", "-\tthis.fields = NoFields;", "-\tif (iFields != null) {", "-\t\tint size = iFields.length;", "-\t\tif (size > 0) {", "-\t\t\tthis.fields = new FieldBinding[size];", "-\t\t\tboolean use15specifics = sourceLevel >= ClassFileConstants.JDK1_5;", "-\t\t\tfor (int i = 0; i < size; i++) {", "-\t\t\t\tIBinaryField binaryField = iFields[i];", "-\t\t\t\tchar[] fieldSignature = use15specifics ? binaryField.getGenericSignature() : null;", "-\t\t\t\tTypeBinding type = fieldSignature == null", "-\t\t\t\t\t? environment.getTypeFromSignature(binaryField.getTypeName(), 0, -1, false, this)", "-\t\t\t\t\t: environment.getTypeFromTypeSignature(new SignatureWrapper(fieldSignature), NoTypeVariables, this);", "-\t\t\t\tFieldBinding field =", "-\t\t\t\t\tnew FieldBinding(", "-\t\t\t\t\t\tbinaryField.getName(),", "-\t\t\t\t\t\ttype,", "-\t\t\t\t\t\tbinaryField.getModifiers() | AccUnresolved,", "-\t\t\t\t\t\tthis,", "-\t\t\t\t\t\tbinaryField.getConstant());", "-\t\t\t\tfield.id = i; // ordinal", "-\t\t\t\tif (use15specifics) {", "-\t\t\t\t\tfield.tagBits |= binaryField.getTagBits();", "+\tprivate void createFields(IBinaryField[] iFields, long sourceLevel) {", "+\t\tthis.fields = NoFields;", "+\t\tif (iFields != null) {", "+\t\t\tint size = iFields.length;", "+\t\t\tif (size > 0) {", "+\t\t\t\tthis.fields = new FieldBinding[size];", "+\t\t\t\tboolean use15specifics = sourceLevel >= ClassFileConstants.JDK1_5;", "+\t\t\t\tboolean isViewedAsDeprecated = isViewedAsDeprecated();", "+\t\t\t\tfor (int i = 0; i < size; i++) {", "+\t\t\t\t\tIBinaryField binaryField = iFields[i];", "+\t\t\t\t\tchar[] fieldSignature = use15specifics ? binaryField.getGenericSignature() : null;", "+\t\t\t\t\tTypeBinding type = fieldSignature == null ", "+\t\t\t\t\t\t\t? environment.getTypeFromSignature(binaryField.getTypeName(), 0, -1, false, this) ", "+\t\t\t\t\t\t\t: environment.getTypeFromTypeSignature(new SignatureWrapper(fieldSignature), NoTypeVariables, this);", "+\t\t\t\t\tFieldBinding field = ", "+\t\t\t\t\t\tnew FieldBinding(", "+\t\t\t\t\t\t\t\tbinaryField.getName(), ", "+\t\t\t\t\t\t\t\ttype, ", "+\t\t\t\t\t\t\t\tbinaryField.getModifiers() | AccUnresolved, ", "+\t\t\t\t\t\t\t\tthis, ", "+\t\t\t\t\t\t\t\tbinaryField.getConstant());", "+\t\t\t\t\tfield.id = i; // ordinal", "+\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\tfield.tagBits |= binaryField.getTagBits();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (isViewedAsDeprecated && !field.isDeprecated()) {", "+\t\t\t\t\t\tfield.modifiers |= AccDeprecatedImplicitly;", "+\t\t\t\t\t}\t\t", "+\t\t\t\t\tthis.fields[i] = field;", "-\t\t\t\tthis.fields[i] = field;", "-", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca2987f4d6c05e54596c8abbd9266694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "ee3e92a740c438d4455b4c3423c42bacaa4600fe", "commitAfterChange": "3231a58d8d59c7680bc76122197a724fee6ecc59", "methodNumberBeforeChange": 204, "methodNumberAfterChange": 204, "signatureBeforeChange": " protected void consumeMethodHeaderNameWithTypeParameters(boolean isAnnotationMethod)", "signatureAfterChange": " protected void consumeMethodHeaderNameWithTypeParameters(boolean isAnnotationMethod)", "diff": ["-\t\tif (this.currentElement instanceof RecoveredType ", "+\t\tboolean isType;", "+\t\tif ((isType = this.currentElement instanceof RecoveredType) ", "+\t\t\tif(isType) {", "+\t\t\t\t((RecoveredType) this.currentElement).pendingTypeParameters = null;", "+\t\t\t}"]}], "num": 69395}
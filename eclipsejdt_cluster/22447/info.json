{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3200493778bc6d0cbd393ebdb58158b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96461b971c08f70bcbaa30b827caf29e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "commitAfterChange": "d752b26e3a6a22a0d2aea83eca1f4ca2bd2e36dd", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 195, "signatureBeforeChange": " \tpublic void test062()", "signatureAfterChange": " \tpublic void test062()", "diff": ["-\t\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "-\t\t?\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Errors.java (at line 6)\\n\" + ", "-\t\t\t\"\tex.six(\\\"eclipse\\\");\\n\" + ", "-\t\t\t\"\t   ^^^\\n\" + ", "-\t\t\t\"The method six(String) is ambiguous for the type Ex<String>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in Errors.java (at line 7)\\n\" + ", "-\t\t\t\"\tEx ex2 = ex;\\n\" + ", "-\t\t\t\"\t^^\\n\" + ", "-\t\t\t\"Ex is a raw type. References to generic type Ex<C> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in Errors.java (at line 9)\\n\" + ", "-\t\t\t\"\tex2.five(\\\"eclipse\\\");\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method five(Object) belongs to the raw type Ex. References to generic type Ex<C> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in Errors.java (at line 10)\\n\" + ", "-\t\t\t\"\tex2.six(\\\"eclipse\\\");\\n\" + ", "-\t\t\t\"\t    ^^^\\n\" + ", "-\t\t\t\"The method six(Object) is ambiguous for the type Ex\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. ERROR in Errors.java (at line 21)\\n\" + ", "-\t\t\t\"\t@Override <M> void six(C cEx) {}\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method six(C) of type Ex<C> has the same erasure as six(TC) of type Top<TC> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. ERROR in Errors.java (at line 21)\\n\" + ", "-\t\t\t\"\t@Override <M> void six(C cEx) {}\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method six(C) of type Ex<C> must override a superclass method\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t:\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Errors.java (at line 6)\\n\" + ", "-\t\t\t\"\tex.six(\\\"eclipse\\\");\\n\" + ", "-\t\t\t\"\t   ^^^\\n\" + ", "-\t\t\t\"The method six(String) is ambiguous for the type Ex<String>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in Errors.java (at line 7)\\n\" + ", "-\t\t\t\"\tEx ex2 = ex;\\n\" + ", "-\t\t\t\"\t^^\\n\" + ", "-\t\t\t\"Ex is a raw type. References to generic type Ex<C> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in Errors.java (at line 9)\\n\" + ", "-\t\t\t\"\tex2.five(\\\"eclipse\\\");\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method five(Object) belongs to the raw type Ex. References to generic type Ex<C> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in Errors.java (at line 10)\\n\" + ", "-\t\t\t\"\tex2.six(\\\"eclipse\\\");\\n\" + ", "-\t\t\t\"\t    ^^^\\n\" + ", "-\t\t\t\"The method six(Object) is ambiguous for the type Ex\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. ERROR in Errors.java (at line 21)\\n\" + ", "-\t\t\t\"\t@Override <M> void six(C cEx) {}\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method six(C) of type Ex<C> has the same erasure as six(TC) of type Top<TC> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. ERROR in Errors.java (at line 21)\\n\" + ", "-\t\t\t\"\t@Override <M> void six(C cEx) {}\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method six(C) of type Ex<C> must override or implement a supertype method\\n\" + ", "-\t\t\t\"----------\\n\";\t\t", "-\t\t\t\tthis.runNegativeTest(", "+\t\tthis.runNegativeTest(", "-\t\t\texpectedOutput", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in Errors.java (at line 6)\\n\" + ", "+\t\t\t\"\tex.six(\\\"eclipse\\\");\\n\" + ", "+\t\t\t\"\t   ^^^\\n\" + ", "+\t\t\t\"The method six(String) is ambiguous for the type Ex<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Errors.java (at line 7)\\n\" + ", "+\t\t\t\"\tEx ex2 = ex;\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Ex is a raw type. References to generic type Ex<C> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in Errors.java (at line 9)\\n\" + ", "+\t\t\t\"\tex2.five(\\\"eclipse\\\");\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method five(Object) belongs to the raw type Ex. References to generic type Ex<C> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in Errors.java (at line 10)\\n\" + ", "+\t\t\t\"\tex2.six(\\\"eclipse\\\");\\n\" + ", "+\t\t\t\"\t    ^^^\\n\" + ", "+\t\t\t\"The method six(Object) is ambiguous for the type Ex\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in Errors.java (at line 21)\\n\" + ", "+\t\t\t\"\t@Override <M> void six(C cEx) {}\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method six(C) of type Ex<C> has the same erasure as six(TC) of type Top<TC> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in Errors.java (at line 21)\\n\" + ", "+\t\t\t\"\t@Override <M> void six(C cEx) {}\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "+\t\t\tmustOverrideMessage(\"six(C)\", \"Ex<C>\") + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c1cd011fa5e74cdf665b7bc7a15c8a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f4cb909d55448a19964594cbb4a048da9d7e78f7", "commitAfterChange": "7eefd3222a58f2f7173197af5b088fa010a9e348", "methodNumberBeforeChange": 329, "methodNumberAfterChange": 329, "signatureBeforeChange": " public void test179()", "signatureAfterChange": " public void test179()", "diff": ["-\tif (this.complianceLevel <= ClassFileConstants.JDK1_5) {", "-\t\tthis.runNegativeTest(", "-\t\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"interface Adaptable {\\n\" + ", "-\t\t\t\t\t\"\tpublic Object getAdapter(Class clazz);\t\\n\" + ", "-\t\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\t\"\\n\" + ", "-\t\t\t\t\t\"public class X implements Adaptable {\\n\" + ", "-\t\t\t\t\t\"\t@Override\\n\" + ", "-\t\t\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "-\t\t\t\t\t\"\t\treturn null;\\n\" + ", "-\t\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\t\"}\\n\"", "-\t\t\t\t},", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\t\t\"\tpublic Object getAdapter(Class clazz);\t\\n\" + ", "-\t\t\t\t\"\t                         ^^^^^\\n\" + ", "-\t\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\t\"\tpublic class X implements Adaptable {\\n\" + ", "-\t\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\t\"The type X must implement the inherited abstract method Adaptable.getAdapter(Class)\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "-\t\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Name clash: The method getAdapter(Class<?>) of type X has the same erasure as getAdapter(Class) of type Adaptable but does not override it\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "-\t\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The method getAdapter(Class<?>) of type X must override a superclass method\\n\" + ", "-\t\t\t\t\"----------\\n\");", "-\t\treturn;", "-\t}", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"interface Adaptable {\\n\" + ", "-\t\t\t\t\"\tpublic Object getAdapter(Class clazz);\t\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public class X implements Adaptable {\\n\" + ", "-\t\t\t\t\"\t@Override\\n\" + ", "-\t\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "-\t\t\t\t\"\t\treturn null;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"interface Adaptable {\\n\" + ", "-\t\t\t\"\t                         ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tpublic class X implements Adaptable {\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"The type X must implement the inherited abstract method Adaptable.getAdapter(Class)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X implements Adaptable {\\n\" + ", "+\t\t\t\"\t@Override\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method getAdapter(Class<?>) of type X has the same erasure as getAdapter(Class) of type Adaptable but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method getAdapter(Class<?>) of type X must override or implement a supertype method\\n\" + ", "-\t\t\t\"----------\\n\");", "+\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic Object getAdapter(Class clazz);\t\\n\" + ", "+\t\t\"\t                         ^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tpublic class X implements Adaptable {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"The type X must implement the inherited abstract method Adaptable.getAdapter(Class)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method getAdapter(Class<?>) of type X has the same erasure as getAdapter(Class) of type Adaptable but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\tmustOverrideMessage(\"getAdapter(Class<?>)\", \"X\") + ", "+\t\t\"----------\\n\"", "+\t);"]}], "num": 22447}
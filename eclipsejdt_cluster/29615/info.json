{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7073671240a2b54d955cedfe85e68884", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6619272e2f7f6f58e4ad135513d31dfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tif (this.codegenBinding.canBeSeenBy(receiverType, this, currentScope)) {", "-\t\treceiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "+\tif (this.codegenBinding.canBeSeenBy(this.receiverType, this, currentScope)) {", "+\t\tthis.receiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "-\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\treceiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "+\t\tthis.receiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "-\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7680c0f15341c675a1b6d271e8d90c2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tif (constant != NotAConstant) {", "+\tif (this.constant != NotAConstant) {", "-\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\tthis.receiver.generateCode(currentScope, codeStream, !isStatic);", "-\t\t\t\t\tif (this.codegenBinding.canBeSeenBy(receiverType, this, currentScope)) {", "+\t\t\t\t\tif (this.codegenBinding.canBeSeenBy(this.receiverType, this, currentScope)) {", "-\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\tcodeStream.generateConstant(this.codegenBinding.constant, implicitConversion);", "+\t\t\t\tcodeStream.generateConstant(this.codegenBinding.constant, this.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80eb819edfa9813e865b73541e054b12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif ((expression != null) && (expression.constant == NotAConstant)) {", "-\t\t\texpression.generateCode(currentScope, codeStream, needValue()); // no value needed if non-returning subroutine", "+\t\tif ((this.expression != null) && (this.expression.constant == NotAConstant)) {", "+\t\t\tthis.expression.generateCode(currentScope, codeStream, needValue()); // no value needed if non-returning subroutine", "-\t\tif ((expression != null) && (expression.constant != NotAConstant)) {", "-\t\t\tcodeStream.generateConstant(expression.constant, expression.implicitConversion);", "+\t\tif ((this.expression != null) && (this.expression.constant != NotAConstant)) {", "+\t\t\tcodeStream.generateConstant(this.expression.constant, this.expression.implicitConversion);"]}], "num": 29615}
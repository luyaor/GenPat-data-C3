{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de05dea0a675c61c1bda505578d1b15c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "450678ac911f8b507f8085b51965e91a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "  ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized)", "signatureAfterChange": "  ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized)", "diff": ["-\t\tproblemReporter.isClassPathCorrect(compoundName, null);", "-\t\treturn null; // will not get here since the above error aborts the compilation", "+\t\t// create a proxy for the missing BinaryType", "+\t\tbinding = cacheMissingBinaryType(compoundName, this.unitBeingCompleted);", "-        binding = (ReferenceBinding)convertUnresolvedBinaryToRawType(binding);", "+        binding = (ReferenceBinding) convertUnresolvedBinaryToRawType(binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52fc2b3b17ba08bdf8e902c504d15a6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic OrPattern(SearchPattern leftPattern, SearchPattern rightPattern)", "signatureAfterChange": "  \tpublic OrPattern(SearchPattern leftPattern, SearchPattern rightPattern)", "diff": ["-\t\tfor (int i = 0, length = this.patterns.length; i < length && !isErasureMatch; i++) {", "-\t\t\tif (((JavaSearchPattern) this.patterns[i]).isErasureMatch) isErasureMatch = true;", "+\t\tmatchCompatibility = 0;", "+\t\tfor (int i = 0, length = this.patterns.length; i < length; i++) {", "+\t\t\tmatchCompatibility |= ((JavaSearchPattern) this.patterns[i]).matchCompatibility;"]}], "num": 48430}
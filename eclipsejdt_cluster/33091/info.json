{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82d319a8471172f06015460aa84aecb1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1818f7727f2c4aeff3d5cb6989072b50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 451, "methodNumberAfterChange": 451, "signatureBeforeChange": " \tpublic void test447()", "signatureAfterChange": " \tpublic void test447()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX.Inner d2 = new X.Inner();\\n\" + ", "+\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: X.Inner is a raw type. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX.Inner d2 = new X.Inner();\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: X.Inner is a raw type. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 13)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b61a9b4301df9d982ac8eaae7c9621fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "9f0162708ef3ad281e157ce3ba268bca0e9b1dde", "commitAfterChange": "a291a37a897de20cd8c895370c415618ede4cf7f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void test004()", "signatureAfterChange": "  \tpublic void test004()", "diff": ["-\t\t\t\"1. ERROR in p\\\\X.java (at line 3)\\n\" + ", "-\t\t\t\"\timport static p2.Z.Zint;\\n\" + ", "+\t\t\t\"1. WARNING in p\\\\X.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\timport static p2.Y.*;\\r\\n\" + ", "+\t\t\t\"\t              ^^^^\\n\" + ", "+\t\t\t\"The import p2.Y is never used\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in p\\\\X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\timport static p2.Z.Zint;\\r\\n\" + ", "-\t\t\t\"2. ERROR in p\\\\X.java (at line 4)\\n\" + ", "-\t\t\t\"\timport static p2.Z.ZMember;\\n\" + ", "+\t\t\t\"3. ERROR in p\\\\X.java (at line 4)\\r\\n\" + ", "+\t\t\t\"\timport static p2.Z.ZMember;\\r\\n\" + ", "-\t\t\t\"3. ERROR in p\\\\X.java (at line 6)\\n\" + ", "-\t\t\t\"\tint x = y(1);\\n\" + ", "+\t\t\t\"4. ERROR in p\\\\X.java (at line 6)\\r\\n\" + ", "+\t\t\t\"\tint x = y(1);\\r\\n\" + ", "-\t\t\t\"4. ERROR in p\\\\X.java (at line 7)\\n\" + ", "-\t\t\t\"\tint y = Yint;\\n\" + ", "+\t\t\t\"5. ERROR in p\\\\X.java (at line 7)\\r\\n\" + ", "+\t\t\t\"\tint y = Yint;\\r\\n\" + ", "-\t\t\t\"5. ERROR in p\\\\X.java (at line 8)\\n\" + ", "-\t\t\t\"\tint z = Zint;\\n\" + ", "+\t\t\t\"6. ERROR in p\\\\X.java (at line 8)\\r\\n\" + ", "+\t\t\t\"\tint z = Zint;\\r\\n\" + ", "-\t\t\t\"6. ERROR in p\\\\X.java (at line 10)\\n\" + ", "-\t\t\t\"\tvoid m2(ZMember m) {}\\n\" + ", "+\t\t\t\"7. ERROR in p\\\\X.java (at line 9)\\r\\n\" + ", "+\t\t\t\"\tvoid m1(YMember m) {}\\r\\n\" + ", "+\t\t\t\"\t        ^^^^^^^\\n\" + ", "+\t\t\t\"YMember cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in p\\\\X.java (at line 10)\\r\\n\" + ", "+\t\t\t\"\tvoid m2(ZMember m) {}\\r\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf111a82704e5d73ebc36f811842c2c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodHandleTest.java", "commitBeforeChange": "51213023943da7653dfbcc6859baaa171fa1aac9", "commitAfterChange": "dc6be4d1880713315c6901a8e8e763dd417a08df", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test008()", "signatureAfterChange": " \tpublic void test011()", "diff": ["-\t}", "-\tpublic void test008() {", "-\t\tMap options = getCompilerOptions();", "-\t\toptions.put(JavaCore.COMPILER_PB_DEPRECATION, JavaCore.ERROR);", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.lang.invoke.MethodHandle;\\n\" + ", "-\t\t\t\t\"import java.lang.invoke.MethodHandles;\\n\" + ", "-\t\t\t\t\"import java.lang.invoke.MethodType;\\n\" + ", "-\t\t\t\t\"import java.lang.invoke.WrongMethodTypeException;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\tpublic static <T> T foo(T param){\\n\" + ", "-\t\t\t\t\"\t\treturn null;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\ttry {\\n\" + ", "-\t\t\t\t\"\t\t\tMethodHandle handle = MethodHandles.lookup().findStatic(X.class, \\\"foo\\\", MethodType.methodType(Object.class, Object.class));\\n\" + ", "-\t\t\t\t\"\t\t\ttry {\\n\" + ", "-\t\t\t\t\"\t\t\t\tObject o = handle.invokeGeneric(new Object());\\n\" + ", "-\t\t\t\t\"\t\t\t} catch (Throwable e) {\\n\" + ", "-\t\t\t\t\"\t\t\t\te.printStackTrace();\\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "-\t\t\t\t\"\t\t} catch (Throwable e) {\\n\" + ", "-\t\t\t\t\"\t\t\te.printStackTrace();\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tObject o = handle.invokeGeneric(new Object());\\n\" + ", "-\t\t\t\"\t                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method invokeGeneric(Object...) from the type MethodHandle is deprecated\\n\" + ", "-\t\t\t\"----------\\n\",", "-\t\t\tnull,", "-\t\t\ttrue,", "-\t\t\toptions);", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=466748", "+\tpublic void test011() {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.lang.invoke.MethodHandle;\\n\" + ", "+\t\t\t\t\"import java.lang.invoke.MethodHandles;\\n\" + ", "+\t\t\t\t\"import java.lang.reflect.Method;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tpublic static void test1(Integer i){\\n\" + ", "+\t\t\t\t\"\t\tSystem.out.println(\\\"test1:\\\" + i);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tpublic static void test2(int i){\\n\" + ", "+\t\t\t\t\"\t\tSystem.out.println(\\\"test2:\\\" + i);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) throws Throwable{\\n\" + ", "+\t\t\t\t\"\t\tMethod m1 = X.class.getMethod(\\\"test1\\\", Integer.class);\\n\" + ", "+\t\t\t\t\"\t\tMethod m2 = X.class.getMethod(\\\"test2\\\", int.class);\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"\t\tMethodHandle test1Handle = MethodHandles.lookup().unreflect(m1);\\n\" + ", "+\t\t\t\t\"\t\tMethodHandle test2Handle = MethodHandles.lookup().unreflect(m2);\\n\" + ", "+\t\t\t\t\"\t\t\\n\" + ", "+\t\t\t\t\"\t\tInteger arg_Integer = 1;\\n\" + ", "+\t\t\t\t\"\t\tint arg_int = 1;\\n\" + ", "+\t\t\t\t\"\t\t\\n\" + ", "+\t\t\t\t\"\t\t// results in a java.lang.VerifyError - but should work without error\\n\" + ", "+\t\t\t\t\"\t\ttest1Handle.invokeExact(Integer.class.cast(arg_int));\\n\" + ", "+\t\t\t\t\"\t\t\\n\" + ", "+\t\t\t\t\"\t\t// The following line also results in a java.lang.VerifyError, but should actually throw a ClassCastException\\n\" + ", "+\t\t\t\t\"\t\ttry {\\n\" + ", "+\t\t\t\t\"\t\t\ttest2Handle.invokeExact(int.class.cast(arg_Integer)); \\n\" + ", "+\t\t\t\t\"\t\t} catch(ClassCastException e) {\\n\" + ", "+\t\t\t\t\"\t\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"test1:1\\n\" + ", "+\t\t\t\"SUCCESS\");", "+\t}"]}], "num": 33091}
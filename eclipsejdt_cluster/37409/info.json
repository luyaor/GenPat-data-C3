{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfd9087c59c975402e0334e305a1062a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6529b5e207f78b091d510e56247b2ae7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "05bd6362ebc3db4accc519070d9c8a9ecd2a788b", "commitAfterChange": "905cf94d64f942e28e58015355605b9b9383c577", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t", "+\t\tboolean use15specifics = scope.environment().options.sourceLevel >= JDK1_5;", "+\t\t\t} else if (use15specifics) { // unboxing - only exact match is allowed", "+\t\t\t\tif (scope.computeBoxingType(expressionType) == castType) {", "+\t\t\t\t\t// TODO (philippe) could tagAsUnnecessaryCast(scope, castType);  ", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t} else if (use15specifics && expressionType.isBaseType()) { // boxing - only exact match is allowed", "+\t\t\tif (scope.computeBoxingType(castType) == expressionType) {", "+\t\t\t\t// TODO (philippe) could tagAsUnnecessaryCast(scope, castType);  ", "+\t\t\t\treturn true;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3dce94bad88075e1378bfa67104774e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "c58f46702a3cd6fb013870c57db58066e2c73fbe", "commitAfterChange": "5dcad0acfcfbe8755abd38f2836e8e0329153a35", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t} else if (use15specifics) { // unboxing - only exact match is allowed", "-\t\t\t\tif (env.computeBoxingType(expressionType) == castType) {", "-\t\t\t\t\t// TODO (philippe) could tagAsUnnecessaryCast(scope, castType);  ", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t} else if (use15specifics && expressionType.isBaseType()) { // boxing - only exact match is allowed", "-\t\t\tif (env.computeBoxingType(castType) == expressionType) {", "-\t\t\t\t// TODO (philippe) could tagAsUnnecessaryCast(scope, castType);  ", "+\t\t\t} else if (use15specifics ", "+\t\t\t\t\t\t\t\t&& env.computeBoxingType(expressionType).isCompatibleWith(castType)) { // unboxing - only widening match is allowed", "+\t\t\t\ttagAsUnnecessaryCast(scope, castType);  ", "+\t\t\treturn false;", "+\t\t} else if (use15specifics ", "+\t\t\t\t\t\t\t&& expressionType.isBaseType() ", "+\t\t\t\t\t\t\t&& env.computeBoxingType(castType) == expressionType) { // boxing - only exact match is allowed", "+\t\t\ttagAsUnnecessaryCast(scope, castType);  ", "+\t\t\treturn true;"]}], "num": 37409}
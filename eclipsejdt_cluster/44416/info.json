{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfb5c2fa971ce73f5ee4cdd0229f35f8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d56d5f112ff903fc50f7cc4788e1d77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall)", "diff": ["-\t\t\tthis.requestor", "-\t\t\t\t.acceptField(", "-\t\t\t\t\tfield.declaringClass.qualifiedPackageName(),", "-\t\t\t\t\tfield.declaringClass.qualifiedSourceName(),", "-\t\t\t\t\tfield.name,", "-\t\t\t\t\tfield.type.qualifiedPackageName(),", "-\t\t\t\t\tfield.type.qualifiedSourceName(),", "-\t\t\t\t\tcompletion,", "-\t\t\t// may include some qualification to resolve ambiguities", "-\t\t\tfield.modifiers, this.startPosition - this.offset, this.endPosition - this.offset,", "-\t\t\trelevance);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\tproposal.setName(field.name);", "+\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c90504b29a5ee97b3c5590caec50eb7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a29a64421d33da260a7d362b9f95ba50806929de", "commitAfterChange": "128ece82f5c9df1393b097e56edcf89a686dc03c", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 174, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["+\t\tboolean completionOnReferenceExpressionName = invocationSite instanceof ReferenceExpression;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tTypeBinding type = method.original().parameters[i];", "-\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();", "-\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();", "-\t\t\t}", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tTypeBinding type = method.original().parameters[i];", "+\t\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();", "+\t\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();", "+\t\t\t\t}", "-\t\t\t\t\tif (this.source != null", "+\t\t\t\t\tif (completionOnReferenceExpressionName)", "+\t\t\t\t\t\tcompletion = method.selector;", "+\t\t\t\t\telse if (this.source != null", "-\t\t\t\t\telse", "+\t\t\t\t\telse ", "-\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(completionOnReferenceExpressionName ? CompletionProposal.METHOD_NAME_REFERENCE : CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tif (completionOnReferenceExpressionName)", "+\t\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset - methodLength, this.endPosition - this.offset);", "+\t\t\t\t\telse ", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);"]}], "num": 44416}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e22ca1ab5a520d55dfff6f477939d592", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b9645642adc3a9227350abd455b17f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 387, "methodNumberAfterChange": 387, "signatureBeforeChange": "\t \tpublic void _test385()", "signatureAfterChange": "  \tpublic void test385()", "diff": ["- */\t", "-\tpublic void _test385() { // 77496", "+\tpublic void test385() { // 77496", "-\t\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tpublic List<String> getList() { return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic List<String> getList() { return null; }\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tclass C extends B implements IDoubles {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The return type is incompatible with IDoubles.getList(), B.getList()\\n\" + ", "+\t\t\t/*", "+\t\t\tX.java:3: A is not abstract and does not override abstract method getList() in IDoubles", "+\t\t\tclass A implements IDoubles {", "+\t\t\t^", "+\t\t\tX.java:4: getList() in A cannot implement getList() in IDoubles; attempting to use incompatible return type", "+\t\t\tfound   : java.util.List<java.lang.String>", "+\t\t\trequired: java.util.List<java.lang.Double>", "+\t\t\t\tpublic List<String> getList() { return null; }", "+\t\t\t                            ^", "+\t\t\tX.java:9: C is not abstract and does not override abstract method getList() in IDoubles", "+\t\t\tclass C extends B implements IDoubles {", "+\t\t\t */\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efb795704597ae1e3bac654dddb6e159", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void test003() throws JavaModelException", "signatureAfterChange": " public void test003() throws JavaModelException", "diff": ["-\t\t\t\"\t\t\treturn (xyz, pqr) -> first.\\n\" +", "+\t\t\t\"\t\t\treturn (xyz, pqr) -> first.c\\n\" +", "-\tString completeBehind = \"first.\";", "+\tString completeBehind = \"first.c\";", "+\t\t\t\"CASE_INSENSITIVE_ORDER[FIELD_REF]{CASE_INSENSITIVE_ORDER, Ljava.lang.String;, Ljava.util.Comparator<Ljava.lang.String;>;, CASE_INSENSITIVE_ORDER, null, 14}\\n\" +", "+\t\t\t\"copyValueOf[METHOD_REF]{copyValueOf(), Ljava.lang.String;, ([C)Ljava.lang.String;, copyValueOf, (arg0), 24}\\n\" +", "+\t\t\t\"copyValueOf[METHOD_REF]{copyValueOf(), Ljava.lang.String;, ([CII)Ljava.lang.String;, copyValueOf, (arg0, arg1, arg2), 24}\\n\" +", "+\t\t\t\"charAt[METHOD_REF]{charAt(), Ljava.lang.String;, (I)C, charAt, (arg0), 35}\\n\" +", "+\t\t\t\"chars[METHOD_REF]{chars(), Ljava.lang.CharSequence;, ()Ljava.util.stream.IntStream;, chars, null, 35}\\n\" +", "-\t\t\t\"equals[METHOD_REF]{equals(), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), 35}\\n\" +", "-\t\t\t\"finalize[METHOD_REF]{finalize(), Ljava.lang.Object;, ()V, finalize, null, 35}\\n\" +", "-\t\t\t\"getClass[METHOD_REF]{getClass(), Ljava.lang.Object;, ()Ljava.lang.Class<+Ljava.lang.Object;>;, getClass, null, 35}\\n\" +", "-\t\t\t\"hashCode[METHOD_REF]{hashCode(), Ljava.lang.Object;, ()I, hashCode, null, 35}\\n\" +", "-\t\t\t\"length[METHOD_REF]{length(), Ljava.lang.String;, ()I, length, null, 35}\\n\" +", "-\t\t\t\"notify[METHOD_REF]{notify(), Ljava.lang.Object;, ()V, notify, null, 35}\\n\" +", "-\t\t\t\"notifyAll[METHOD_REF]{notifyAll(), Ljava.lang.Object;, ()V, notifyAll, null, 35}\\n\" +", "-\t\t\t\"toString[METHOD_REF]{toString(), Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, 35}\\n\" +", "-\t\t\t\"wait[METHOD_REF]{wait(), Ljava.lang.Object;, ()V, wait, null, 35}\\n\" +", "-\t\t\t\"wait[METHOD_REF]{wait(), Ljava.lang.Object;, (J)V, wait, (millis), 35}\\n\" +", "-\t\t\t\"wait[METHOD_REF]{wait(), Ljava.lang.Object;, (JI)V, wait, (millis, nanos), 35}\",", "+\t\t\t\"codePointAt[METHOD_REF]{codePointAt(), Ljava.lang.String;, (I)I, codePointAt, (arg0), 35}\\n\" +", "+\t\t\t\"codePointBefore[METHOD_REF]{codePointBefore(), Ljava.lang.String;, (I)I, codePointBefore, (arg0), 35}\\n\" +", "+\t\t\t\"codePointCount[METHOD_REF]{codePointCount(), Ljava.lang.String;, (II)I, codePointCount, (arg0, arg1), 35}\\n\" +", "+\t\t\t\"codePoints[METHOD_REF]{codePoints(), Ljava.lang.CharSequence;, ()Ljava.util.stream.IntStream;, codePoints, null, 35}\\n\" +", "+\t\t\t\"compareTo[METHOD_REF]{compareTo(), Ljava.lang.String;, (Ljava.lang.String;)I, compareTo, (arg0), 35}\\n\" +", "+\t\t\t\"compareToIgnoreCase[METHOD_REF]{compareToIgnoreCase(), Ljava.lang.String;, (Ljava.lang.String;)I, compareToIgnoreCase, (arg0), 35}\\n\" +", "+\t\t\t\"concat[METHOD_REF]{concat(), Ljava.lang.String;, (Ljava.lang.String;)Ljava.lang.String;, concat, (arg0), 35}\\n\" +", "+\t\t\t\"contains[METHOD_REF]{contains(), Ljava.lang.String;, (Ljava.lang.CharSequence;)Z, contains, (arg0), 35}\\n\" +", "+\t\t\t\"contentEquals[METHOD_REF]{contentEquals(), Ljava.lang.String;, (Ljava.lang.CharSequence;)Z, contentEquals, (arg0), 35}\\n\" +", "+\t\t\t\"contentEquals[METHOD_REF]{contentEquals(), Ljava.lang.String;, (Ljava.lang.StringBuffer;)Z, contentEquals, (arg0), 35}\","]}], "num": 32440}
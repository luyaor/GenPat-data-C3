{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d49d5ef03c76f2d6892ed57e870038c4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "125f0dcee45755726e36857346805ccc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "8a45189b56dd53f49b522651eb6b3bd9d4419390", "commitAfterChange": "9c0200613f6d3b1541431a53e81611b5e71da85a", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void generateSyntheticBodyForConstructorAccess(SyntheticMethodBinding accessBinding)", "signatureAfterChange": " public void generateSyntheticBodyForConstructorAccess(SyntheticMethodBinding accessBinding)", "diff": ["-\tif (constructorBinding.declaringClass.isNestedType()) {", "-\t\tNestedTypeBinding nestedType = (NestedTypeBinding) constructorBinding.declaringClass;", "+\t// special name&ordinal argument generation for enum constructors", "+\tTypeBinding declaringClass = constructorBinding.declaringClass;", "+\tif (declaringClass.erasure().id == T_JavaLangEnum || declaringClass.isEnum()) {", "+\t\tthis.aload_1(); // pass along name param as name arg", "+\t\tthis.iload_2(); // pass along ordinal param as ordinal arg", "+\t}\t", "+\tif (declaringClass.isNestedType()) {", "+\t\tNestedTypeBinding nestedType = (NestedTypeBinding) declaringClass;", "-\tif (constructorBinding.declaringClass.isNestedType()) {", "-\t\tNestedTypeBinding nestedType = (NestedTypeBinding) constructorBinding.declaringClass;", "+\tif (declaringClass.isNestedType()) {", "+\t\tNestedTypeBinding nestedType = (NestedTypeBinding) declaringClass;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49a9f75febe8b9924c7d0c2f985794fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "5a0b16973c5f2b4b1beccfae3f83602332ac3f5d", "commitAfterChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "methodNumberBeforeChange": 382, "methodNumberAfterChange": 382, "signatureBeforeChange": " public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit, boolean recordLineSeparator)", "signatureAfterChange": " public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit, boolean recordLineSeparator)", "diff": ["-\t\tif (this.astStack[this.astPtr + 1] instanceof ExplicitConstructorCall)", "-\t\t\t//avoid a isSomeThing that would only be used here BUT what is faster between two alternatives ?", "-\t\t\t{", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.astStack,", "-\t\t\t\tthis.astPtr + 2,", "-\t\t\t\tcd.statements = new Statement[length - 1],", "-\t\t\t\t0,", "-\t\t\t\tlength - 1);", "-\t\t\tcd.constructorCall = (ExplicitConstructorCall) this.astStack[this.astPtr + 1];", "-\t\t} else { //need to add explicitly the super();", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.astStack,", "-\t\t\t\tthis.astPtr + 1,", "-\t\t\t\tcd.statements = new Statement[length],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "-\t\t\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\tif ((cd.bits & ASTNode.HasLocalType) != 0 || !this.options.ignoreMethodBodies) {", "+\t\t\tif (this.astStack[this.astPtr + 1] instanceof ExplicitConstructorCall)", "+\t\t\t\t//avoid a isSomeThing that would only be used here BUT what is faster between two alternatives ?", "+\t\t\t\t{", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack,", "+\t\t\t\t\tthis.astPtr + 2,", "+\t\t\t\t\tcd.statements = new Statement[length - 1],", "+\t\t\t\t\t0,", "+\t\t\t\t\tlength - 1);", "+\t\t\t\tcd.constructorCall = (ExplicitConstructorCall) this.astStack[this.astPtr + 1];", "+\t\t\t} else { //need to add explicitly the super();", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack,", "+\t\t\t\t\tthis.astPtr + 1,", "+\t\t\t\t\tcd.statements = new Statement[length],", "+\t\t\t\t\t0,", "+\t\t\t\t\tlength);", "+\t\t\t\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\t\t}", "-\t\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\tif (!this.options.ignoreMethodBodies) {", "+\t\t\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\t}", "-\tif (cd.constructorCall.sourceEnd == 0) {", "-\t\tcd.constructorCall.sourceEnd = cd.sourceEnd;", "-\t\tcd.constructorCall.sourceStart = cd.sourceStart;", "+\tExplicitConstructorCall explicitConstructorCall = cd.constructorCall;", "+\tif (explicitConstructorCall != null && explicitConstructorCall.sourceEnd == 0) {", "+\t\texplicitConstructorCall.sourceEnd = cd.sourceEnd;", "+\t\texplicitConstructorCall.sourceStart = cd.sourceStart;"]}], "num": 63390}
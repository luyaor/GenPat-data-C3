{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1d8dc87204e001911a02f92f58aa5ef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1349294d11442b5940908d27db6511c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "e3beff3ddcf0f1da8ef71b6358fa3af7711e703f", "commitAfterChange": "6b8881c9416240b1f58c929f9746f01644e60deb", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " protected void reportMatching(TypeParameter[] typeParameters, IJavaElement enclosingElement, IJavaElement parent, Binding binding, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeParameter[] typeParameters, IJavaElement enclosingElement, IJavaElement parent, Binding binding, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(wildcardBound);", "-\t\t\t\t\t\t\t\tif (level != null) {", "-\t\t\t\t\t\t\t\t\tIJavaElement localElement = createHandle(typeParameter, enclosingElement);", "-\t\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(wildcardBound, enclosingElement, localElement, null, binding, level.intValue(), this);", "-\t\t\t\t\t\t\t\t}", "+\t                            if (wildcardBound != null) {", "+\t\t\t\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(wildcardBound);", "+\t\t\t\t\t\t\t\t\tif (level != null) {", "+\t\t\t\t\t\t\t\t\t\tIJavaElement localElement = createHandle(typeParameter, enclosingElement);", "+\t\t\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(wildcardBound, enclosingElement, localElement, null, binding, level.intValue(), this);", "+\t\t\t\t\t\t\t\t\t}", "+\t                            }", "-\t\t\t\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(wildcardBound);", "-\t\t\t\t\t\t\t\t\tif (level != null) {", "-\t\t\t\t\t\t\t\t\t\tIJavaElement localElement = createHandle(typeParameter, enclosingElement);", "-\t\t\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(wildcardBound, enclosingElement, localElement, null, binding, level.intValue(), this);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t                            if (wildcardBound != null) {", "+\t\t\t\t\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(wildcardBound);", "+\t\t\t\t\t\t\t\t\t\tif (level != null) {", "+\t\t\t\t\t\t\t\t\t\t\tIJavaElement localElement = createHandle(typeParameter, enclosingElement);", "+\t\t\t\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(wildcardBound, enclosingElement, localElement, null, binding, level.intValue(), this);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t                            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1666e689e80c78a742c55523a63523b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "30ec825eb31162680cfe9de305168a6c878fa9bb", "commitAfterChange": "80d1a1c8c9608e72c63b677a4e2d1f5e89ff648c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r private char[] normalizeCRs(char[] text)", "signatureAfterChange": "\r private char[] normalizeCRs(char[] text)", "diff": ["-\t\t\t\tline = new char[lineLength];\r", "-\t\t\t\tSystem.arraycopy(text, lineStart, line, 0, lineLength);\r", "-\t\t\t\tbuffer.append(line);\r", "-\t\t\t\tbuffer.append(lineSeparator);\r", "-\t\t\t\tif (nextChar == '\\n') {\r", "-\t\t\t\t\tnextChar = ' ';\r", "-\t\t\t\t\ti++;\r", "+\t\t\t\tif (lineLength >= 0) {\r", "+\t\t\t\t\tline = new char[lineLength];\r", "+\t\t\t\t\tSystem.arraycopy(text, lineStart, line, 0, lineLength);\r", "+\t\t\t\t\tbuffer.append(line);\r", "+\t\t\t\t\tbuffer.append(lineSeparator);\r", "+\t\t\t\t\tif (nextChar == '\\n') {\r", "+\t\t\t\t\t\tnextChar = ' ';\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tlineStart = i+2;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// when line separator are mixed in the same file\r", "+\t\t\t\t\t// we need to prevent NegativeArraySizeException\r", "+\t\t\t\t\tlineStart = i+1;\r", "-\t\t\t\tlineStart = i+1;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19756d0f83c5294ffa61ba05bd521d58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a29a64421d33da260a7d362b9f95ba50806929de", "commitAfterChange": "128ece82f5c9df1393b097e56edcf89a686dc03c", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "signatureAfterChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "diff": ["+\t\t} else if (astNode instanceof CompletionOnReferenceExpressionName) {", "+\t\t\tcompletionOnReferenceExpressionName(astNode, qualifiedBinding, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d0040729a9f7706d7153c7b9c1fe5c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "2314f2b038c548685d179883c3a134764eda5d7c", "commitAfterChange": "ca571b042ce9fb42ec7529ae2bbfff42124817bf", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public AbstractMethodDeclaration sourceMethod()", "signatureAfterChange": " public AbstractMethodDeclaration sourceMethod()", "diff": ["+\tif (isSynthetic()) {", "+\t\treturn null;", "+\t}", "-\tfor (int i = methods.length; --i >= 0;)", "-\t\tif (this == methods[i].binding)", "-\t\t\treturn methods[i];", "+\tif (methods != null) {", "+\t\tfor (int i = methods.length; --i >= 0;)", "+\t\t\tif (this == methods[i].binding)", "+\t\t\t\treturn methods[i];", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d7970efc389d8fe3c71f6cd57134639", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "bbfd6abe2f4d57b10264c574b936bd7028ec5f17", "commitAfterChange": "fdc1a95914ad55bbfb8c709b84d743d5d21781f2", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "diff": ["-\t\t\t\t\t} else {", "+\t\t\t\t\t} else if (astNode instanceof AllocationExpression) {", "-\t\t\t\t\treturn this.getTypeBinding(literal.literalType(null));", "+\t\t\t\t\tif (literal != null) {", "+\t\t\t\t\t\treturn this.getTypeBinding(literal.literalType(null));", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20df0f0216a3dc47195c0a2e885e8d64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "57cba198120c4662ab850cc932bbebd6162d83ba", "commitAfterChange": "279aeb5315dd3e931b1b250acdd0f59424091807", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["+\t\tif (enclosingElement != null) { // skip if unable to find method", "+\t\t\t// compute source positions of the selector ", "+\t\t\tScanner scanner = parser.scanner;", "+\t\t\tint nameSourceStart = method.sourceStart;", "+\t\t\tscanner.setSource(this.currentPossibleMatch.getContents());", "+\t\t\tscanner.resetTo(nameSourceStart, method.sourceEnd);", "+\t\t\ttry {", "+\t\t\t\tscanner.getNextToken();", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t\tint nameSourceEnd = scanner.currentPosition - 1;", "-\t\t// compute source positions of the selector ", "-\t\tScanner scanner = parser.scanner;", "-\t\tint nameSourceStart = method.sourceStart;", "-\t\tscanner.setSource(this.currentPossibleMatch.getContents());", "-\t\tscanner.resetTo(nameSourceStart, method.sourceEnd);", "-\t\ttry {", "-\t\t\tscanner.getNextToken();", "-\t\t} catch (InvalidInputException e) {", "-\t\t\t// ignore", "+\t\t\treport(nameSourceStart, nameSourceEnd, enclosingElement, accuracy);", "-\t\tint nameSourceEnd = scanner.currentPosition - 1;", "-", "-\t\treport(nameSourceStart, nameSourceEnd, enclosingElement, accuracy);", "-\t\t\tif ((this.matchContainer & PatternLocator.METHOD_CONTAINER) == 0) {", "-\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "-\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "-\t\t\t} else {", "+\t\t\tif ((this.matchContainer & PatternLocator.METHOD_CONTAINER) != 0) {", "-\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\tAstNode node = nodes[i];", "-\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "+\t\t\t\tif (enclosingElement != null) { // skip if unable to find method", "+\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\tAstNode node = nodes[i];", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn;", "+\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "+\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c5ccba0386f4e895f1817152ee60d41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "9456595afc670e8654daae0a909865ea194d6315", "commitAfterChange": "5d18de268cbd515fc918349a3ab2520e4b59a2c9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas()", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas()", "diff": ["+\t\t\t\t\t\t} else if (oldRestriction == null) {", "+\t\t\t\t\t\t\tneedToUpdateDependents |= newRestriction != null; // access restriction was added", "-\t\t\t\t\t\t\tneedToUpdateDependents |= !oldRestriction.equals(newRestriction); // access restriction has changed", "+\t\t\t\t\t\t\tneedToUpdateDependents |= !oldRestriction.equals(newRestriction); // access restriction has changed or has been removed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32e2175c75478a8639ac4cf42a2b9c7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "e097b656649fad65adc5a0de7345699c53b02550", "commitAfterChange": "c1ed57c65f800091b6298f2d9d0ae2cf5ce4a4d3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\tlong position = ((long) start << 32) + end;", "-\t\tmethod.arguments = new Argument[argumentCount];", "-\t\tfor (int i = 0; i < argumentCount; i++) {", "-\t\t\tchar[] typeName = Signature.toCharArray(argumentTypeSignatures[i].toCharArray());", "-\t\t\tTypeReference typeReference = createTypeReference(typeName, start, end);", "-\t\t\tif (isVarargs && i == argumentCount-1) {", "-\t\t\t\ttypeReference.bits |= ASTNode.IsVarArgs;", "+\t\tif (argumentCount > 0) {", "+\t\t\tlong position = ((long) start << 32) + end;", "+\t\t\tmethod.arguments = new Argument[argumentCount];", "+\t\t\tfor (int i = 0; i < argumentCount; i++) {", "+\t\t\t\tchar[] typeName = Signature.toCharArray(argumentTypeSignatures[i].toCharArray());", "+\t\t\t\tTypeReference typeReference = createTypeReference(typeName, start, end);", "+\t\t\t\tif (isVarargs && i == argumentCount-1) {", "+\t\t\t\t\ttypeReference.bits |= ASTNode.IsVarArgs;", "+\t\t\t\t}", "+\t\t\t\tmethod.arguments[i] =", "+\t\t\t\t\tnew Argument(", "+\t\t\t\t\t\targumentNames[i],", "+\t\t\t\t\t\tposition,", "+\t\t\t\t\t\ttypeReference,", "+\t\t\t\t\t\tAccDefault);", "+\t\t\t\t// do not care whether was final or not", "-\t\t\tmethod.arguments[i] =", "-\t\t\t\tnew Argument(", "-\t\t\t\t\targumentNames[i],", "-\t\t\t\t\tposition,", "-\t\t\t\t\ttypeReference,", "-\t\t\t\t\tAccDefault);", "-\t\t\t// do not care whether was final or not", "-\t\tmethod.thrownExceptions = new TypeReference[exceptionCount];", "-\t\tfor (int i = 0; i < exceptionCount; i++) {", "-\t\t\tmethod.thrownExceptions[i] =", "-\t\t\t\tcreateTypeReference(exceptionTypeNames[i], start, end);", "+\t\tif (exceptionCount > 0) {", "+\t\t\tmethod.thrownExceptions = new TypeReference[exceptionCount];", "+\t\t\tfor (int i = 0; i < exceptionCount; i++) {", "+\t\t\t\tmethod.thrownExceptions[i] =", "+\t\t\t\t\tcreateTypeReference(exceptionTypeNames[i], start, end);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3595b36a8ae8a05fc69768977b84e730", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "b2ee2f0e0ad1c5d61d4417df1a17fc01d93cc41f", "commitAfterChange": "f276b1aed4d951175bd2d8ffa389a5d714685e87", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void run()", "signatureAfterChange": " \tpublic void run()", "diff": ["-\t\t\t\t\tIJob job = currentJob();", "-\t\t\t\t\tif (job != null) {", "-\t\t\t\t\t\tidlingStart = -1;", "-\t\t\t\t\t\tif (VERBOSE) {", "-\t\t\t\t\t\t\tJobManager.verbose(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tJobManager.verbose(\"STARTING background job - \" + job); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\texecuting = true;", "-\t\t\t\t\t\t\t/*boolean status = */job.execute(null);", "-\t\t\t\t\t\t\t//if (status == FAILED) request(job);", "-\t\t\t\t\t\t} finally {", "-\t\t\t\t\t\t\texecuting = false;", "-\t\t\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\t\t\tJobManager.verbose(\"FINISHED background job - \" + job); //$NON-NLS-1$", "-\t\t\t\t\t\t\tmoveToNextJob();", "-\t\t\t\t\t\t\tif (this.awaitingClients == 0)", "-\t\t\t\t\t\t\t\tThread.sleep(50);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (idlingStart < 0)", "-\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();", "-\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);", "+\t\t\t\t\tIJob job;", "+\t\t\t\t\tsynchronized (this) {", "+\t\t\t\t\t\t// handle shutdown case when notifyAll came before the wait but after the while loop was entered", "+\t\t\t\t\t\tif (this.processingThread == null) continue;", "-\t\t\t\t\t\tsynchronized (this) {", "-\t\t\t\t\t\t\t// handle shutdown case when notifyAll was sent between the while loop condition and here", "-\t\t\t\t\t\t\tif (this.processingThread == null) continue;", "+\t\t\t\t\t\t// must check for new job inside this loop to avoid timing hole", "+\t\t\t\t\t\tif ((job = currentJob()) == null) {", "+\t\t\t\t\t\t\tif (idlingStart < 0)", "+\t\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();", "+\t\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tidlingStart = -1;", "-\t\t\t\t\t\tThread.sleep(500); // delay before processing the new job, allow some time for the active thread to finish", "-\t\t\t\t} catch (InterruptedException ignored) {} // background indexing was interrupted", "+\t\t\t\t\tif (job == null) {", "+\t\t\t\t\t\t// just woke up, delay before processing any new jobs, allow some time for the active thread to finish", "+\t\t\t\t\t\tThread.sleep(500);", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (VERBOSE) {", "+\t\t\t\t\t\tJobManager.verbose(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$", "+\t\t\t\t\t\tJobManager.verbose(\"STARTING background job - \" + job); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\texecuting = true;", "+\t\t\t\t\t\t/*boolean status = */job.execute(null);", "+\t\t\t\t\t\t//if (status == FAILED) request(job);", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\texecuting = false;", "+\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\tJobManager.verbose(\"FINISHED background job - \" + job); //$NON-NLS-1$", "+\t\t\t\t\t\tmoveToNextJob();", "+\t\t\t\t\t\tif (this.awaitingClients == 0)", "+\t\t\t\t\t\t\tThread.sleep(50);", "+\t\t\t\t\t}", "+\t\t\t\t} catch (InterruptedException e) { // background indexing was interrupted", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b36f5463b47bb4c10d21ce28c7f70b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedTypeHierarchy.java", "commitBeforeChange": "f04e3f1ae3453f83dbe0aa3f6ea76c9c43c152ce", "commitAfterChange": "2986d1025440224180ba74139f19e8e7a596763f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r protected void removeType(IType type)", "signatureAfterChange": "\r protected void removeType(IType type)", "diff": ["-\t\ttypes.remove(type);\r", "+\t\tif (types != null) types.remove(type);\r", "-\t\t\ttypes.remove(type);\r", "+\t\t\tif (types != null) types.remove(type);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3feda64f8fd9fbf1cc4f8cbe47de3bfc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "3b5e3bffb50578beec025e97315d017361527518", "commitAfterChange": "5c86bd5e83cfca7ff5f98996f0b172644cacbee7", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r public static char[] toCharArray(char[] methodSignature, char[] methodName, char[][] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "signatureAfterChange": "\r public static char[] toCharArray(char[] methodSignature, char[] methodName, char[][] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "diff": ["-\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and remove space that is going to be added for \", \" after return type \r", "-\t\t\t\t\t\t// and add space for \") \"\r", "-\t\t\t\t\t\tresultLength -= 2;\r", "+\t\t\t\t\t\tif (paramCount > 0) {\r", "+\t\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and remove space that is going to be added for \", \" after return type \r", "+\t\t\t\t\t\t\t// and add space for \") \"\r", "+\t\t\t\t\t\t\tresultLength -= 2;\r", "+\t\t\t\t\t\t} //else\r", "+\t\t\t\t\t\t\t// remove space that is going to be added for \", \" after return type \r", "+\t\t\t\t\t\t\t// and add space for \") \"\r", "+\t\t\t\t\t\t\t// -> noop\r", "-\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and add space for \")\"\r", "-\t\t\t\t\t\tresultLength--;\r", "+\t\t\t\t\t\tif (paramCount > 0) {\r", "+\t\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and add space for \")\"\r", "+\t\t\t\t\t\t\tresultLength--;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// add space for \")\"\r", "+\t\t\t\t\t\t\tresultLength++;\r", "+\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d24d94b120228fd538e756fbcc9e062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 159, "signatureBeforeChange": " \tprivate void secondaryTypesRemoving(Hashtable secondaryTypesMap, IFile file)", "signatureAfterChange": " \tprivate void secondaryTypesRemoving(Hashtable secondaryTypesMap, IFile file)", "diff": ["-\t\t\t\tfor (int i=0; i<removedNamesCount; i++) {", "-\t\t\t\t\ttypes.remove(removedNames[i]);", "+\t\t\t\tif (removedNames != null) {", "+\t\t\t\t\tfor (int i=0; i<removedNamesCount; i++) {", "+\t\t\t\t\t\ttypes.remove(removedNames[i]);", "+\t\t\t\t\t}", "-\t\tfor (int i=0; i<removedPackagesCount; i++) {", "-\t\t\tsecondaryTypesMap.remove(removedPackages[i]);", "+\t\tif (removedPackages != null) {", "+\t\t\tfor (int i=0; i<removedPackagesCount; i++) {", "+\t\t\t\tsecondaryTypesMap.remove(removedPackages[i]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59c440a1ab8684e7e6980a0c52bddb98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "fb0020e27808c429f3f311a11ef0ea9ea04441aa", "commitAfterChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus, boolean strict)", "signatureAfterChange": "  \tprivate static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus, boolean strict)", "diff": ["+\t\t\tif (requiredBits == TagBits.AnnotationNullMASK)", "+\t\t\t\treturn 0; // OK since LHS accepts either"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6235ffbf4fb6a45f28d3a3bd97aaca20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "2f27f883fe902497bae8dbd88f957d09f0216709", "commitAfterChange": "2e45e13022b2a9411380e4e0b6133d9f38ca8be4", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic static char[][] toCharArrays(String[] a)", "signatureAfterChange": " \tpublic static char[][] toCharArrays(String[] a)", "diff": ["+\t\tif (len == 0) return CharOperation.NO_CHAR_CHAR;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bef9e18045be7882a9d48885eca23cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "753d6a0ebf6c471f5abc3f7b84f5e9fd7d55bf9e", "commitAfterChange": "0f2486f3f34027c8ea6eadc698cc2470fccb1ae9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "signatureAfterChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "diff": ["-\t\t\tPrintWriter sourceFileWriter;", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tString fileName = OUTPUT_DIR + File.separator + testFiles[i];", "-\t\t\t\tFile file = new File(fileName), innerOutputDirectory = file", "-\t\t\t\t\t\t.getParentFile();", "-\t\t\t\tif (!innerOutputDirectory.isDirectory()) {", "-\t\t\t\t\tinnerOutputDirectory.mkdirs();", "+\t\t\tif (testFiles != null) {", "+\t\t\t\tPrintWriter sourceFileWriter;", "+\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\tString fileName = OUTPUT_DIR + File.separator + testFiles[i];", "+\t\t\t\t\tFile file = new File(fileName), innerOutputDirectory = file", "+\t\t\t\t\t\t\t.getParentFile();", "+\t\t\t\t\tif (!innerOutputDirectory.isDirectory()) {", "+\t\t\t\t\t\tinnerOutputDirectory.mkdirs();", "+\t\t\t\t\t}", "+\t\t\t\t\tsourceFileWriter = new PrintWriter(new FileOutputStream(file));", "+\t\t\t\t\tsourceFileWriter.write(testFiles[i + 1]);", "+\t\t\t\t\tsourceFileWriter.close();", "-\t\t\t\tsourceFileWriter = new PrintWriter(new FileOutputStream(file));", "-\t\t\t\tsourceFileWriter.write(testFiles[i + 1]);", "-\t\t\t\tsourceFileWriter.close();", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\");", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\");", "+\t\t\tif (testFiles != null) {", "+\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\tSystem.out.print(testFiles[i]);", "+\t\t\t\t\tSystem.out.println(\" [\");", "+\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "+\t\t\t\t\tSystem.out.println(\"]\");", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "728e4a5f5fe2726fce023f5218138b7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "c19da768095dac214ba6cd17a7f1810f5dbcd929", "commitAfterChange": "dbf206d4e9e06fe03458856c4018b487ffcc2b68", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic static final boolean pathMatch( \t\tchar[] pattern, \t\tchar[] filepath, \t\tboolean isCaseSensitive, \t\tchar pathSeparator)", "signatureAfterChange": " \tpublic static final boolean pathMatch( \t\tchar[] pattern, \t\tchar[] filepath, \t\tboolean isCaseSensitive, \t\tchar pathSeparator)", "diff": ["+\t\t\tif (pSegmentStart >= pLength) return fSegmentStart >= fLength; // true if filepath is done too."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72ffd754ddf5e282c65fa695ef489faa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "ce95cbd0fd6ce62e0a880cf427ad9d5c5121d1ae", "commitAfterChange": "95993961e278d83dc23d7d0203a47aaea09dd722", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public ICompilationUnit[] getCompilationUnits(WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " public ICompilationUnit[] getCompilationUnits(WorkingCopyOwner owner) throws JavaModelException", "diff": ["+\tif (workingCopies == null) return JavaModelManager.NoWorkingCopy;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e38cc932e448630ff2148964cbf97a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f62fc9bd4adc94855b1129f538fa2510e9047295", "commitAfterChange": "73314cbf57aaa554bada2bddfa5532b422404c5a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tprotected void compile(String[] argv)", "signatureAfterChange": "\r \tpublic boolean compile(String[] argv)", "diff": ["-\tprotected void compile(String[] argv) {\r", "+\tpublic boolean compile(String[] argv) {\r", "+\t\tif (globalErrorsCount == 0){\r", "+\t\t\treturn true;\r", "+\t\t} else {\r", "+\t\t\treturn false;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9042cd4eb2a809ec57f6123c3092c9a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public PackageBinding(char[][] compoundName, PackageBinding parent, LookupEnvironment environment)", "signatureAfterChange": " public PackageBinding(char[][] compoundName, PackageBinding parent, LookupEnvironment environment)", "diff": ["+\tif (compoundName != CharOperation.NO_CHAR_CHAR)", "+\t\tcheckIfNullAnnotationPackage();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a26189a222fc6b37e2b9b67473da94ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "174f2ddd75b694de7c4cd88a2a1ce4a138cff590", "commitAfterChange": "0299434b5f934ab2ecd49e025f1cff659fb25967", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "signatureAfterChange": "\r \tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "diff": ["+\t\t\t\t\tif (container == JavaModelManager.ContainerInitializationInProgress) return null; // break cycle\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a69fd6d73f58e859776c74cba0ca03b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "6d26e89371291b0e31c04fda43f7d9e8d5d62845", "commitAfterChange": "f4fa1b5b78e764cbc99a897dc3a1af35ead150e3", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "signatureAfterChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "diff": ["+\t\t} else if (astNode instanceof CompletionOnReferenceExpressionName) {", "+\t\t\tcompletionOnReferenceExpressionName(astNode, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b349442ea480d3df5349757c4af1fa53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "fc8ba03f9916b4ab5a789fe72fe040f0a158e1e5", "commitAfterChange": "6dec51f3a3503c4d8924810ab83aa422e394cac6", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\treportMatching(typeParameters, enclosingElement, parent, method.binding, nodeSet);", "+\t\tif (enclosingElement != null) {", "+\t\t\treportMatching(typeParameters, enclosingElement, parent, method.binding, nodeSet);", "+\t\t}", "-\t\treportMatching(method.annotations, enclosingElement, null, method.binding, nodeSet, true, true);", "+\t\tif (enclosingElement != null) {", "+\t\t\treportMatching(method.annotations, enclosingElement, null, method.binding, nodeSet, true, true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b741d1bf1eae2aa6516bf05e4f6cc203", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "e72851f7c02ccfbc91816922dcb863357cca4426", "commitAfterChange": "d79de0229c608563894d10437737b39e54570982", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static int checkAssignment(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t   VariableBinding var, FlowInfo flowInfo, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " \tpublic static int checkAssignment(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t   VariableBinding var, FlowInfo flowInfo, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["+\t\tif (providedType == null) return FlowInfo.UNKNOWN; // assume we already reported an error"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7cbfb6ee0bce4535a87303a8369f2fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "e8c9a8ad63c042540bdf2089eae8eda8857cd19d", "commitAfterChange": "44ff943ce2a18d1de59c739946fda0722d1ad727", "methodNumberBeforeChange": 381, "methodNumberAfterChange": 381, "signatureBeforeChange": " public boolean hasLeadingTagComment(char[] commentPrefixTag, int rangeEnd)", "signatureAfterChange": " public boolean hasLeadingTagComment(char[] commentPrefixTag, int rangeEnd)", "diff": ["-\t\t\tif (charPos >= rangeEnd) return false; // comment is too small to host tag", "-\t\t\tif (source[charPos] != commentPrefixTag[iTag]) return false;", "+\t\t\tif (charPos >= rangeEnd // comment is too small to host tag", "+\t\t\t\t\t|| source[charPos] != commentPrefixTag[iTag]) {", "+\t\t\t\tif (iTag == 0) {", "+\t\t\t\t\treturn false; // didn't even match leading '$' -> not a tag comment", "+\t\t\t\t} else {", "+\t\t\t\t\tcontinue previousComment; // accept as tag comment -> skip it and keep searching backwards", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b84e14700098de6f38377ac965a1e213", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public char[][] getPackageName()", "signatureAfterChange": " public char[][] getPackageName()", "diff": ["+\tif (packageFragment == null) return CharOperation.NO_CHAR_CHAR;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd0db9bc2fb765d9181aba36503204aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b5a77485d9f402d8e9320bc140c7dcd6fc18b9c8", "commitAfterChange": "168f2cd311cda9055baec08babe652e5b9c3fb27", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t    \t        this.patternLocator.matchReportReference(nodes[i], enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), method.binding, level.intValue(), this);", "+\t\t\t\t\t\t\tif (level != null) { // ensure that the reference has not been already reported while visiting", "+\t\t\t\t    \t        this.patternLocator.matchReportReference(nodes[i], enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), method.binding, level.intValue(), this);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, null, method.binding, level.intValue(), this);", "+\t\t\t\t\t\t\tif (level != null) { // ensure that the reference has not been already reported while visiting", "+\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, null, method.binding, level.intValue(), this);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9f6692547d0aed62c6a14486ec92d98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "02d9adf4bf42c3560bb2981a7f17f487294d13a2", "commitAfterChange": "52ebc27bf9158df2a67f83ecba784386abd2092e", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "+\t\t\tif (javaHome != null) {", "+\t\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "+\t\t\t}", "-\t\t\tendorsedDirClasspaths.add(javaHome.getAbsolutePath() + \"/lib/endorsed\"); //$NON-NLS-1$", "+\t\t\tif (javaHome != null) {", "+\t\t\t\tendorsedDirClasspaths.add(javaHome.getAbsolutePath() + \"/lib/endorsed\"); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4cdc20ad7e58dbaddc10c25953e5e6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "8477130b01f048bfc1fd1f484a88902aeefb2f38", "commitAfterChange": "ecd385ce2c6acd660d8fd4527c963683ed4e3124", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tboolean addConstraintsFromTypeParameters(TypeBinding subCandidate, ParameterizedTypeBinding ca, List<ConstraintFormula> constraints)", "signatureAfterChange": "  \tboolean addConstraintsFromTypeParameters(TypeBinding subCandidate, ParameterizedTypeBinding ca, List<ConstraintFormula> constraints)", "diff": ["+\t\tif (!(cb instanceof ParameterizedTypeBinding)) {", "+\t\t\t// if C is parameterized with its own type variables, there're no more constraints to be created here, otherwise let's fail", "+\t\t\treturn isInsignificantParameterized(ca);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ec3fdf3452d824cc255546dcb7227b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "5af30c3917bf512b1381c83cf2b214b4e93e8c9e", "commitAfterChange": "40810d6d8748f2beada6fc3922fddf79c52aa3fb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r protected void matchCheck(AstNode node, MatchSet set)", "signatureAfterChange": "\r protected void matchCheck(AstNode node, MatchSet set)", "diff": ["+\t} else if (node instanceof FieldDeclaration) {\r", "+\t\tsuper.matchCheck(node, set);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbda4caedbf78ee05aad4217d2f7b600", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "signatureAfterChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "diff": ["-\t\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "-\t\t\t\t\t\t\tchar[] typeName;", "-\t\t\t\t\t\t\tif (j == 0 && firstIsSynthetic) {", "-\t\t\t\t\t\t\t\ttypeName = type.getDeclaringType().getFullyQualifiedName().toCharArray();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tTypeReference typeRef = arguments[firstIsSynthetic ? j - 1 : j].type;", "-\t\t\t\t\t\t\t\ttypeName = CharOperation.concatWith(typeRef.getTypeName(), '.');", "-\t\t\t\t\t\t\t\tfor (int k = 0, dim = typeRef.dimensions(); k < dim; k++)", "-\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\t\t\t\tif (arguments != null) {", "+\t\t\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "+\t\t\t\t\t\t\t\tchar[] typeName;", "+\t\t\t\t\t\t\t\tif (j == 0 && firstIsSynthetic) {", "+\t\t\t\t\t\t\t\t\ttypeName = type.getDeclaringType().getFullyQualifiedName().toCharArray();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tTypeReference typeRef = arguments[firstIsSynthetic ? j - 1 : j].type;", "+\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concatWith(typeRef.getTypeName(), '.');", "+\t\t\t\t\t\t\t\t\tfor (int k = 0, dim = typeRef.dimensions(); k < dim; k++)", "+\t\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "+\t\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), typeName))", "+\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "-\t\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "-\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), typeName))", "-\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "-\tfor (int i = 0; i < argCount; i++) {", "-\t\tTypeReference typeRef = arguments[i].type;", "-\t\tchar[] typeName = CharOperation.concatWith(typeRef.getParameterizedTypeName(), '.');", "-//\t\tfor (int j = 0, dim = typeRef.dimensions(); j < dim; j++)", "-//\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "-\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);", "+\tif (arguments != null) {", "+\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\tTypeReference typeRef = arguments[i].type;", "+\t\t\tchar[] typeName = CharOperation.concatWith(typeRef.getParameterizedTypeName(), '.');", "+//\t\t\tfor (int j = 0, dim = typeRef.dimensions(); j < dim; j++)", "+//\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6aab23c2a6ed9a492c689436906672", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0b27b465378d2c4de912ede755b716ec1bc3271b", "commitAfterChange": "e8b8473542c4e4cb01bff6dc692097c4a3eca5c6", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic synchronized boolean containsWorkingCopyMapEntriesForParent( IFile f )", "signatureAfterChange": " \tpublic synchronized boolean containsWorkingCopyMapEntriesForParent( IFile f )", "diff": ["-\t\tfor( Set<IFile> s : parentSets )", "+\t\tif ( parentSets != null )", "-\t\t\tif ( s.contains( f ) )", "-\t\t\t\treturn true;", "+\t\t\tfor( Set<IFile> s : parentSets )", "+\t\t\t{", "+\t\t\t\tif ( s.contains( f ) )", "+\t\t\t\t\treturn true;", "+\t\t\t}", "-\t\tfor ( IFile gf : generatedFiles )", "+\t\tif ( generatedFiles != null )", "-\t\t\tICompilationUnit cu = _generatedFile2WorkingCopy.get( gf );", "-\t\t\tif ( cu != null )", "+\t\t\tfor ( IFile gf : generatedFiles )", "-\t\t\t\tSet<IFile> parents = _generatedWorkingCopy2OpenParentFiles.get( cu );", "-\t\t\t\tif ( parents.contains( cu ) || parents.size() == 0 )", "-\t\t\t\t\treturn true;", "+\t\t\t\tICompilationUnit cu = _generatedFile2WorkingCopy.get( gf );", "+\t\t\t\tif ( cu != null )", "+\t\t\t\t{", "+\t\t\t\t\tSet<IFile> parents = _generatedWorkingCopy2OpenParentFiles.get( cu );", "+\t\t\t\t\tif ( parents.contains( cu ) || parents.size() == 0 )", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0c1fe68d526b7c78076ba6f2e5203bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "44aa8100cf1acafb668d09083fbe900feba372d4", "commitAfterChange": "502ac8abc8910137c8c48c0b99f02c92a8a1a0bb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "signatureAfterChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "diff": ["-\t\tif (externalPath.isAbsolute()) {\r", "+\t\tint canonicalLength = canonicalPath.segmentCount();\r", "+\t\tif (canonicalLength == 0) {\r", "+\t\t\t// the java.io.File canonicalization failed\r", "+\t\t\treturn externalPath;\r", "+\t\t} else if (externalPath.isAbsolute()) {\r", "-\t\t\tint canonicalLength = canonicalPath.segmentCount();\r", "-\t\t\tif (canonicalLength > externalLength) {\r", "+\t\t\tif (canonicalLength >= externalLength) {\r", "-\t\t\t\tresult = canonicalPath;\r", "+\t\t\t\treturn externalPath;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e508ebb141eccf4087dff5fb63bad779", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "174f2ddd75b694de7c4cd88a2a1ce4a138cff590", "commitAfterChange": "0299434b5f934ab2ecd49e025f1cff659fb25967", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \tpublic static IPath getClasspathVariable(String variableName)", "signatureAfterChange": "\r \tpublic static IPath getClasspathVariable(String variableName)", "diff": ["+\t\t\t\tif (variablePath == JavaModelManager.VariableInitializationInProgress) return null; // break cycle\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed0ab1e71564f13d9eb713fae400d97f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "8b43d224642ee7d1b616bb187976b917b924c6e2", "commitAfterChange": "8728875c2badeba6a33c75154be535794f7d1a9c", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tprivate char[][] findEnclosingTypeNames(Scope scope)", "signatureAfterChange": " \t \tprivate char[][] findEnclosingTypeNames(Scope scope)", "diff": ["-\t\t\t\t\tfor (int i = 0; i < classTypeParameters.length; i++) {", "-\t\t\t\t\t\tTypeParameter typeParameter = classTypeParameters[i];", "-\t\t\t\t\t\tif(excludedNameCount == excludedNames.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(excludedNames, 0, excludedNames = new char[excludedNameCount * 2][], 0, excludedNameCount);", "+\t\t\t\t\tif(classTypeParameters != null) {", "+\t\t\t\t\t\tfor (int i = 0; i < classTypeParameters.length; i++) {", "+\t\t\t\t\t\t\tTypeParameter typeParameter = classTypeParameters[i];", "+\t\t\t\t\t\t\tif(excludedNameCount == excludedNames.length) {", "+\t\t\t\t\t\t\t\tSystem.arraycopy(excludedNames, 0, excludedNames = new char[excludedNameCount * 2][], 0, excludedNameCount);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\texcludedNames[excludedNameCount++] = typeParameter.name;", "-\t\t\t\t\t\texcludedNames[excludedNameCount++] = typeParameter.name;", "-\t\t\t\t\t\tfor (int i = 0; i < methodTypeParameters.length; i++) {", "-\t\t\t\t\t\t\tTypeParameter typeParameter = methodTypeParameters[i];", "-\t\t\t\t\t\t\tif(excludedNameCount == excludedNames.length) {", "-\t\t\t\t\t\t\t\tSystem.arraycopy(excludedNames, 0, excludedNames = new char[excludedNameCount * 2][], 0, excludedNameCount);", "+\t\t\t\t\t\tif(methodTypeParameters != null) {", "+\t\t\t\t\t\t\tfor (int i = 0; i < methodTypeParameters.length; i++) {", "+\t\t\t\t\t\t\t\tTypeParameter typeParameter = methodTypeParameters[i];", "+\t\t\t\t\t\t\t\tif(excludedNameCount == excludedNames.length) {", "+\t\t\t\t\t\t\t\t\tSystem.arraycopy(excludedNames, 0, excludedNames = new char[excludedNameCount * 2][], 0, excludedNameCount);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\texcludedNames[excludedNameCount++] = typeParameter.name;", "-\t\t\t\t\t\t\texcludedNames[excludedNameCount++] = typeParameter.name;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f257539694499d90cb5046bf386d2a8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "397b4e3ed0763b9154b9457179f3bf00dfce6fda", "commitAfterChange": "c1b5f5f632401df85770168089dd8ad2cf8c4272", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r private char[] normalizeCRs(char[] text)", "signatureAfterChange": "\r private char[] normalizeCRs(char[] text)", "diff": ["-\t\t\t\tline = new char[lineLength];\r", "-\t\t\t\tSystem.arraycopy(text, lineStart, line, 0, lineLength);\r", "-\t\t\t\tbuffer.append(line);\r", "-\t\t\t\tbuffer.append(lineSeparator);\r", "-\t\t\t\tif (nextChar == '\\n') {\r", "-\t\t\t\t\tnextChar = ' ';\r", "+\t\t\t\tif (lineLength >= 0) {\r", "+\t\t\t\t\tline = new char[lineLength];\r", "+\t\t\t\t\tSystem.arraycopy(text, lineStart, line, 0, lineLength);\r", "+\t\t\t\t\tbuffer.append(line);\r", "+\t\t\t\t\tbuffer.append(lineSeparator);\r", "+\t\t\t\t\tif (nextChar == '\\n') {\r", "+\t\t\t\t\t\tnextChar = ' ';\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tlineStart = i+2;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// when line separator are mixed in the same file\r", "+\t\t\t\t\t// we need to prevent NegativeArraySizeException\r", "+\t\t\t\t\tlineStart = i+1;\r", "-\t\t\t\tlineStart = i+2;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbb59bda514a327aa8a422230662a845", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateElementInCUOperation.java", "commitBeforeChange": "677db12ffe2b33d9711034d339aec7b56ab85d41", "commitAfterChange": "617fadfcdd9d3f85493c65c27088f408a3cd9c9d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r protected void executeOperation() throws JavaModelException", "signatureAfterChange": "\r protected void executeOperation() throws JavaModelException", "diff": ["-\tbeginTask(getMainTaskName(), getMainAmountOfWork());\r", "-\tJavaElementDelta delta = newJavaElementDelta();\r", "-\tICompilationUnit unit = getCompilationUnit();\r", "-\tgenerateNewCompilationUnitDOM(unit);\r", "-\tif (fCreationOccurred) {\r", "-\t\t//a change has really occurred\r", "-\t\tIBuffer buffer = unit.getBuffer();\r", "-\t\tchar[] bufferContents = buffer.getCharacters();\r", "-\t\tchar[] elementContents = org.eclipse.jdt.internal.core.Util.normalizeCRs(fCreatedElement.getCharacters(), bufferContents);\r", "-\t\tswitch (fReplacementLength) {\r", "-\t\t\tcase -1 : \r", "-\t\t\t\t// element is append at the end\r", "-\t\t\t\tbuffer.append(elementContents);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 0 :\r", "-\t\t\t\t// element is inserted\r", "-\t\t\t\tbuffer.replace(fInsertionPosition, 0, elementContents);\r", "-\t\t\t\tbreak;\r", "-\t\t\tdefault :\r", "-\t\t\t\t// element is replacing the previous one\r", "-\t\t\t\tbuffer.replace(fInsertionPosition, fReplacementLength, elementContents);\r", "+\ttry {\r", "+\t\tbeginTask(getMainTaskName(), getMainAmountOfWork());\r", "+\t\tJavaElementDelta delta = newJavaElementDelta();\r", "+\t\tICompilationUnit unit = getCompilationUnit();\r", "+\t\tgenerateNewCompilationUnitDOM(unit);\r", "+\t\tif (fCreationOccurred) {\r", "+\t\t\t//a change has really occurred\r", "+\t\t\tIBuffer buffer = unit.getBuffer();\r", "+\t\t\tif (buffer  == null) return;\r", "+\t\t\tchar[] bufferContents = buffer.getCharacters();\r", "+\t\t\tif (bufferContents == null) return;\r", "+\t\t\tchar[] elementContents = org.eclipse.jdt.internal.core.Util.normalizeCRs(fCreatedElement.getCharacters(), bufferContents);\r", "+\t\t\tswitch (fReplacementLength) {\r", "+\t\t\t\tcase -1 : \r", "+\t\t\t\t\t// element is append at the end\r", "+\t\t\t\t\tbuffer.append(elementContents);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase 0 :\r", "+\t\t\t\t\t// element is inserted\r", "+\t\t\t\t\tbuffer.replace(fInsertionPosition, 0, elementContents);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tdefault :\r", "+\t\t\t\t\t// element is replacing the previous one\r", "+\t\t\t\t\tbuffer.replace(fInsertionPosition, fReplacementLength, elementContents);\r", "+\t\t\t}\r", "+\t\t\tunit.save(null, false);\r", "+\t\t\tboolean isWorkingCopy = unit.isWorkingCopy();\r", "+\t\t\tthis.hasModifiedResource = !isWorkingCopy;\r", "+\t\t\tworked(1);\r", "+\t\t\tfResultElements = generateResultHandles();\r", "+\t\t\tif (!isWorkingCopy) { // if unit is working copy, then save will have already fired the delta\r", "+\t\t\t\tif (unit.getParent().exists()) {\r", "+\t\t\t\t\tfor (int i = 0; i < fResultElements.length; i++) {\r", "+\t\t\t\t\t\tdelta.added(fResultElements[i]);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\taddDelta(delta);\r", "+\t\t\t\t} // else unit is created outside classpath\r", "+\t\t\t\t  // non-java resource delta will be notified by delta processor\r", "+\t\t\t}\r", "-\t\tunit.save(null, false);\r", "-\t\tboolean isWorkingCopy = unit.isWorkingCopy();\r", "-\t\tthis.hasModifiedResource = !isWorkingCopy;\r", "-\t\tworked(1);\r", "-\t\tfResultElements = generateResultHandles();\r", "-\t\tif (!isWorkingCopy) { // if unit is working copy, then save will have already fired the delta\r", "-\t\t\tif (unit.getParent().exists()) {\r", "-\t\t\t\tfor (int i = 0; i < fResultElements.length; i++) {\r", "-\t\t\t\t\tdelta.added(fResultElements[i]);\r", "-\t\t\t\t}\r", "-\t\t\t\taddDelta(delta);\r", "-\t\t\t} // else unit is created outside classpath\r", "-\t\t\t  // non-java resource delta will be notified by delta processor\r", "-\t\t}\r", "+\t} finally {\r", "+\t\tdone();\r", "-\tdone();\r"]}], "num": 30959}
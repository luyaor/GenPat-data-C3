{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71d3d6dfaf2a171e0916f8dbc275930a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a0f4a8c90d70ae4f51fb4a64edede06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "fa5828480ebc13512cc4c6649155f597883abe5f", "commitAfterChange": "dbadb98550952623b726dd998146fbf52c65b243", "methodNumberBeforeChange": 355, "methodNumberAfterChange": 355, "signatureBeforeChange": " public void scannerError(Parser parser, String errorTokenName)", "signatureAfterChange": " public void scannerError(Parser parser, String errorTokenName)", "diff": ["-\telse if (errorTokenName.equals(Scanner.ILLEGAL_HEXA_LITERAL))", "-\t\tflag = IProblem.IllegalHexaLiteral;", "-\telse if (errorTokenName.equals(Scanner.INVALID_UNICODE_ESCAPE)) {", "+\telse if (errorTokenName.equals(Scanner.INVALID_UNICODE_ESCAPE)){", "-\telse if (errorTokenName.equals(Scanner.INVALID_BINARY))", "-\t\tflag = IProblem.InvalidBinary;", "-\telse if (errorTokenName.equals(Scanner.ILLEGAL_BINARY_LITERAL))", "-\t\tflag = IProblem.IllegalBinaryLiteral;", "-\telse if (errorTokenName.equals(Scanner.INVALID_UNDERSCORE))", "-\t\tflag = IProblem.IllegalUnderscorePosition;", "-\telse if (errorTokenName.equals(Scanner.INVALID_USAGE_OF_UNDERSCORE))", "-\t\tflag = IProblem.IllegalUsageOfUnderscore;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12499c61056683a67ff4d8f03af2f70a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "commitAfterChange": "0768a01c46bf55c1ad1aefdbfa14c12019b43872", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void assertRequestedBindingFound(String[] pathAndSources, final String expectedKey) throws JavaModelException", "signatureAfterChange": " \tprivate void assertRequestedBindingFound(String[] pathAndSources, final String expectedKey) throws JavaModelException", "diff": ["-\t\tBindingResolver resolver = requestBinding(pathAndSources, expectedKey);", "+\t\tassertRequestedBindingsFound(pathAndSources, new String[] {expectedKey});", "+\t}", "-\t\tif (!expectedKey.equals(resolver.bindingKey))", "-\t\t\tSystem.out.println(Util.displayString(resolver.bindingKey, 3));", "-\t\tassertEquals(\"Unexpected binding for marked node\", expectedKey, resolver.bindingKey);", "-\t\tif (!expectedKey.equals(resolver.foundKey)) {", "-\t\t\tSystem.out.println(Util.displayString(resolver.foundKey, 3));", "-\t\t}", "-\t\tassertEquals(\"Unexpected binding found by acceptBinding\", expectedKey, resolver.foundKey);"]}], "num": 46431}
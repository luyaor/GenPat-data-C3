{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fa80e934e373ecf6706c45083e62c94", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a3d476a8ca1923689072ba1e012d7dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public int matchLevel(Binding binding)", "signatureAfterChange": " public int matchLevel(Binding binding)", "diff": ["-\tswitch (this.leftPattern.matchLevel(binding)) {", "-\t\tcase IMPOSSIBLE_MATCH:", "-\t\t\treturn this.rightPattern.matchLevel(binding);", "-\t\tcase POSSIBLE_MATCH:", "-\t\t\treturn POSSIBLE_MATCH;", "-\t\tcase INACCURATE_MATCH:", "-\t\t\tint rightLevel = this.rightPattern.matchLevel(binding);", "-\t\t\tif (rightLevel != IMPOSSIBLE_MATCH) {", "-\t\t\t\treturn rightLevel;", "-\t\t\t} else {", "-\t\t\t\treturn INACCURATE_MATCH;", "-\t\t\t}", "-\t\tcase ACCURATE_MATCH:", "-\t\t\treturn ACCURATE_MATCH;", "-\t\tdefault:", "-\t\t\treturn IMPOSSIBLE_MATCH;", "+\tthis.bestMatch = null;", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patterns.length; i < length; i++) {", "+\t\tint newLevel = this.patterns[i].matchLevel(binding);", "+\t\tif (newLevel > level) {", "+\t\t\tthis.bestMatch = this.patterns[i]; // cache the best match", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel; // want to answer the stronger match", "+\t\t}", "+\treturn level;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd71ed910e5e8ae3ee509f7f887057b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": " public int matchLevel(AstNode node, boolean resolve)", "diff": ["-\tswitch (this.leftPattern.matchLevel(node, resolve)) {", "-\t\tcase IMPOSSIBLE_MATCH:", "-\t\t\treturn this.rightPattern.matchLevel(node, resolve);", "-\t\tcase POSSIBLE_MATCH:", "-\t\t\treturn POSSIBLE_MATCH;", "-\t\tcase INACCURATE_MATCH:", "-\t\t\tint rightLevel = this.rightPattern.matchLevel(node, resolve);", "-\t\t\tif (rightLevel != IMPOSSIBLE_MATCH) {", "-\t\t\t\treturn rightLevel;", "-\t\t\t} else {", "-\t\t\t\treturn INACCURATE_MATCH;", "-\t\t\t}", "-\t\tcase ACCURATE_MATCH:", "-\t\t\treturn ACCURATE_MATCH;", "-\t\tdefault:", "-\t\t\treturn IMPOSSIBLE_MATCH;", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patterns.length; i < length; i++) {", "+\t\tint newLevel = this.patterns[i].matchLevel(node, resolve);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel; // want to answer the stronger match", "+\t\t}", "+\treturn level;"]}], "num": 50725}
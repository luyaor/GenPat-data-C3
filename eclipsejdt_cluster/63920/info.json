{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9b660ec13aefb59d089c874d926e683", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39021bfbe705c332900bee6d68fc0d6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic static boolean resolvePolyExpressionArguments(BlockScope scope, MethodBinding methodBinding, Expression [] arguments, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static boolean resolvePolyExpressionArguments(Invocation invocation, BlockScope scope, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["-\tpublic static boolean resolvePolyExpressionArguments(BlockScope scope, MethodBinding methodBinding, Expression [] arguments, TypeBinding[] argumentTypes) {", "-\t\tboolean polyExpressionsHaveErrors = false;", "+\t */", "+\tpublic static boolean resolvePolyExpressionArguments(Invocation invocation, BlockScope scope, MethodBinding methodBinding, TypeBinding[] argumentTypes) {", "+\t\tint problemReason = 0;", "+\t\t\tproblemReason = methodBinding.problemId();", "+\t\tboolean hasUpdatedInner = false;", "+\t\t\tExpression [] arguments = invocation.arguments();", "-\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\t\tExpression argument = arguments[i];", "-\t\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : variableArity ? parameters[parametersLength - 1] : null;", "-\t\t\t\t\targument.setExpressionContext(parameterType != null ? ExpressionContext.INVOCATION_CONTEXT: ExpressionContext.ASSIGNMENT_CONTEXT); // force the errors to surface.", "-\t\t\t\t\tif (variableArity && i >= parametersLength - 1)", "-\t\t\t\t\t\targument.tagAsEllipsisArgument();", "-\t\t\t\t\targument.setExpectedType(parameterType);", "-\t\t\t\t\tTypeBinding argumentType = argument.resolveType(scope);", "-\t\t\t\t\tif (argumentType == null || !argumentType.isValidBinding())", "-\t\t\t\t\t\tpolyExpressionsHaveErrors = true;", "-\t\t\t\t\tif (argument instanceof LambdaExpression && ((LambdaExpression) argument).hasErrors())", "-\t\t\t\t\t\tpolyExpressionsHaveErrors = true;", "+\t\t\t\tExpression argument = arguments[i];", "+\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : variableArity ? parameters[parametersLength - 1] : null;", "+\t\t\t\tTypeBinding updatedArgumentType = null;", "+", "+\t\t\t\tif (variableArity && i >= parametersLength - 1)", "+\t\t\t\t\targument.tagAsEllipsisArgument();", "+\t\t\t\tupdatedArgumentType = updateExpression(scope, argument, argumentTypes[i], parameterType, invocation.hasInferenceFinished());", "+\t\t\t\tif (updatedArgumentType == POLY_ERROR) //$IDENTITY-COMPARISON$", "+\t\t\t\t\tcontinue; // don't update if inner poly has errors", "+\t\t\t\tif (problemReason != ProblemReasons.Ambiguous \t// preserve this error", "+\t\t\t\t\t\t&& updatedArgumentType != null\t\t\t\t\t// do we have a relevant update? ...", "+\t\t\t\t\t\t&& !(updatedArgumentType instanceof PolyTypeBinding)", "+\t\t\t\t\t\t&& TypeBinding.notEquals(updatedArgumentType, argumentTypes[i]))", "+\t\t\t\t{", "+\t\t\t\t\t// update the argumentTypes array (supposed to be owned by the calling method)", "+\t\t\t\t\t// in order to give better information into a second round of method lookup:", "+\t\t\t\t\targumentTypes[i] = updatedArgumentType;", "+\t\t\t\t\thasUpdatedInner = true;", "-\t\treturn polyExpressionsHaveErrors;", "+\t\treturn hasUpdatedInner;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54f805dec643eb2cd94b8e2d0dcc4fd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif ((this.binding = scope.getConstructor(allocationType, argumentTypes, this)).isValidBinding()) {", "-\t\t\t\tif (polyExpressionSeen) {", "-\t\t\t\t\tboolean variableArity = this.binding.isVarargs();", "-\t\t\t\t\tfinal TypeBinding[] parameters = this.binding.parameters;", "-\t\t\t\t\tfinal int parametersLength = parameters.length;", "-\t\t\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "-\t\t\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];", "-\t\t\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "-\t\t\t\t\t\t\tif (variableArity && i >= parametersLength - 1)", "-\t\t\t\t\t\t\t\targument.tagAsEllipsisArgument();", "-\t\t\t\t\t\t\targument.setExpectedType(parameterType);", "-\t\t\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\tthis.binding = scope.getConstructor(allocationType, argumentTypes, this);", "+\t\t\tif (polyExpressionSeen && polyExpressionsHaveErrors(scope, this.binding, this.arguments, argumentTypes))", "+\t\t\t\treturn null;", "+\t\t\tif (this.binding.isValidBinding()) {\t", "+\t\tif (polyExpressionSeen && polyExpressionsHaveErrors(scope, inheritedBinding, this.arguments, argumentTypes))", "+\t\t\treturn null;", "-\t\t}", "-\t\tif (polyExpressionSeen) {", "-\t\t\tboolean variableArity = inheritedBinding.isVarargs();", "-\t\t\tfinal TypeBinding[] parameters = inheritedBinding.parameters;", "-\t\t\tfinal int parametersLength = parameters.length;", "-\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "-\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];", "-\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "-\t\t\t\t\tif (variableArity && i >= parametersLength - 1)", "-\t\t\t\t\t\targument.tagAsEllipsisArgument();", "-\t\t\t\t\targument.setExpectedType(parameterType);", "-\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "-\t\t\t\t}", "-\t\t\t}"]}], "num": 63920}
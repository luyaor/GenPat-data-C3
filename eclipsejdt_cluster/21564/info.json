{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1128fdc3359c6e65677d02760ba745e1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27501303ebab0683b9ca637b443ca48b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tboolean valueRequired)", "signatureAfterChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tboolean valueRequired)", "diff": ["+\t\t\t\t\tTypeBinding lastReceiverType = getGenericCast(i);", "+\t\t\t\t\tif (lastReceiverType == null) {", "+\t\t\t\t\t\tif (i == 0) {", "+\t\t\t\t\t\t\t lastReceiverType = ((VariableBinding)binding).type;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tlastReceiverType = otherBindings[i-1].type;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\ti == 0 \t? ((VariableBinding)binding).type : otherBindings[i-1].type,", "+\t\t\t\t\t\tlastReceiverType,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626e5e7aced1721ee4eba85799174315", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "7e1b661f635897c28beea613ca1b58777d8c7c7a", "commitAfterChange": "ea0c13f57ba1bc8fcf24d57a6ed1fca3a4943554", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "signatureAfterChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "diff": ["-\t\tif (type.isUnresolvedType() && CharOperation.indexOf('$', type.sourceName()) > 0) {", "+\t\tif (type.isUnresolvedType()) {", "-\t\t\tboolean mayTolerateMissingType = this.environment.mayTolerateMissingType;", "-\t\t\tthis.environment.mayTolerateMissingType = true;", "-\t\t\ttry {", "-\t\t\t\ttype = BinaryTypeBinding.resolveType(type, this.environment, true); // to ensure unique id assignment (when enclosing type is parameterized, inner type is also) ", "-\t\t\t} finally {", "-\t\t\t\tthis.environment.mayTolerateMissingType = mayTolerateMissingType;", "+\t\t\tReferenceBinding resolvedType = urb.resolvedType;", "+\t\t\tif (resolvedType != null) {", "+\t\t\t\ttype = resolvedType;", "+\t\t\t} else if (CharOperation.indexOf('$', type.sourceName()) > 0) {", "+\t\t\t\tboolean mayTolerateMissingType = this.environment.mayTolerateMissingType;", "+\t\t\t\tthis.environment.mayTolerateMissingType = true;", "+\t\t\t\ttry {", "+\t\t\t\t\ttype = BinaryTypeBinding.resolveType(type, this.environment, true); // to ensure unique id assignment (when enclosing type is parameterized, inner type is also) ", "+\t\t\t\t} finally {", "+\t\t\t\t\tthis.environment.mayTolerateMissingType = mayTolerateMissingType;", "+\t\t\t\t}"]}], "num": 21564}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a3187e34e0c3bfb44384f2c197e2a95", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bbdab2705103b09ed205e46e64ac8e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "d6a5f7150c955097cc2dfb47cecf0f5f97dfc713", "commitAfterChange": "e94011fcc318ef65fa86c3461da146f3ce7811d6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t} else if (this.constant != Constant.NotAConstant) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=276740", "+\t\t\t\tint operator = (this.bits & OperatorMASK) >> OperatorSHIFT;", "+\t\t\t\tif ((operator == EQUAL_EQUAL && this.constant == BooleanConstant.fromValue(true))", "+\t\t\t\t\t\t|| (operator == NOT_EQUAL && this.constant == BooleanConstant.fromValue(false)))", "+\t\t\t\t\tscope.problemReporter().comparingIdenticalExpressions(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc5e75296e736b8b0b3b77f0706aade7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeParameter.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolve(ClassScope scope)", "signatureAfterChange": " \t \tpublic void resolve(ClassScope scope)", "diff": ["-\t    // TODO (philippe) add warning for detecting variable name collisions", "+\t    // detect variable/type name collisions", "+\t\tif (this.binding != null) {", "+\t\t\tScope outerScope = scope.parent;", "+\t\t\tBinding existingType = outerScope.getBinding(this.name, Binding.TYPE, this, false);", "+\t\t\tif (existingType != null && this.binding != existingType && existingType.isValidBinding()) {", "+\t\t\t\tscope.problemReporter().typeHiding(this, existingType);", "+\t\t\t}", "+\t\t}"]}], "num": 39310}
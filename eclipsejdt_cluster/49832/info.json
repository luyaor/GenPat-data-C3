{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70de6ad0752d62317015e0af1aab6aca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c883d354664d8ffca08be316883efd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 508, "methodNumberAfterChange": 508, "signatureBeforeChange": " \tpublic void test504()", "signatureAfterChange": " \tpublic void test504()", "diff": ["-\t\t\t\"    1  invokespecial java.lang.Object() [9]\\n\" + ", "+\t\t\t\"    1  invokespecial java.lang.Object() [8]\\n\" + ", "-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\\n\" + ", "-\t\t\t\"     3  new X [2]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "+\t\t\t\"     3  new X [1]\\n\" + ", "-\t\t\t\"    10  invokevirtual X.e() : XA  [30]\\n\" + ", "+\t\t\t\"    10  invokevirtual X.e() : XA [29]\\n\" + ", "-\t\t\t\"    14  getstatic XAB.CONST : XB [36]\\n\" + ", "-\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\\n\" + ", "-\t\t\t\"    20  new X [2]\\n\" + ", "+\t\t\t\"    14  getstatic XAB.CONST : XB [31]\\n\" + ", "+\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + ", "+\t\t\t\"    20  new X [1]\\n\" + ", "-\t\t\t\"    27  invokevirtual X.foo() : void  [45]\\n\" + ", "+\t\t\t\"    27  invokevirtual X.foo() : void [43]\\n\" + ", "-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "-\t\t\t\"     4  invokevirtual X.e() : XA  [30]\\n\" + ", "+\t\t\t\"     4  invokevirtual X.e() : XA [29]\\n\" + ", "-\t\t\t\"     8  getstatic XB.CONST : XB [50]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\\n\" + ", "+\t\t\t\"     8  getstatic XB.CONST : XB [48]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28ca7bc6fb4326507997009685e8508d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument05() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34a40c0d9a8352a5be8d8d046d6d7fe4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAB03() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAB03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_qmk [Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_obj [g1.t.m.def.Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_qmk [g1.t.m.def.Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_thr [g1.t.m.def.Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_run [g1.t.m.def.Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [g1.t.m.def.Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [g1.t.m.def.Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [g1.t.m.def.Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39b6ca10d1b427ab386dfe70533620d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e65ec7b53d9125cf3e2dd682f747ba0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tpublic void test050e()", "signatureAfterChange": " \tpublic void test050e()", "diff": ["-\t\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method c(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method c(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method c(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method c(A<Number>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5881944ff43b82dd6c97d70b5f2726e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAB04() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAB04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_qmk [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_obj [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_exc [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_qmk [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_thr [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_run [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bcb4a5e248728281b943dfe2ffc17d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember<? super RuntimeException>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember<? super RuntimeException>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71573daddd76d10600345fb19fcea9b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void test034()", "signatureAfterChange": " public void test034()", "diff": ["-\t\t\"     0  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"     0  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"     4  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"     4  invokespecial java.util.ArrayList() [18]\\n\" + ", "-\t\t\"     8  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"     8  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"    12  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"    12  invokespecial java.util.ArrayList() [18]\\n\" + ", "-\t\t\"    16  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"    16  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"    20  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"    20  invokespecial java.util.ArrayList() [18]\\n\" + ", "-\t\t\"    28  getstatic java/lang/System.out Ljava/io/PrintStream; [24]\\n\" + ", "+\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [24]\\n\" + ", "-\t\t\"    33  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [32]\\n\" + ", "+\t\t\"    33  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [32]\\n\" + ", "-\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 37] local: list index: 1 type: Ljava/util/List;\\n\" + ", "-\t\t\"        [pc: 24, pc: 37] local: alist index: 2 type: Ljava/util/ArrayList;\\n\" + ", "-\t\t\"        [pc: 26, pc: 37] local: list2 index: 3 type: Ljava/util/List;\\n\";", "+\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 37] local: list index: 1 type: java.util.List\\n\" + ", "+\t\t\"        [pc: 24, pc: 37] local: alist index: 2 type: java.util.ArrayList\\n\" + ", "+\t\t\"        [pc: 26, pc: 37] local: list2 index: 3 type: java.util.List\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75c86d8cd058d9f04674eaa7e0c9a444", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAB02() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAB02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm [Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_obj [Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_exc [Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_qmk [Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm [g1.t.m.def.Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_obj [g1.t.m.def.Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_qmk [g1.t.m.def.Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_thr [g1.t.m.def.Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_run [g1.t.m.def.Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [g1.t.m.def.Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [g1.t.m.def.Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [g1.t.m.def.Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d6c365e2717ce5194690680d3c3ccb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": " \tpublic void test054a()", "signatureAfterChange": " \tpublic void test054a()", "diff": ["-\t\t\t\t\"Method aaa(X) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aaa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aaa(T) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aaa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(X) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(T) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aaa(X) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aaa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aaa(T) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aaa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(X) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(T) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(T) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a86f5acc07b999fcf2f190b6a982ac51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": " \tpublic void test054a()", "signatureAfterChange": " \tpublic void test054a()", "diff": ["-\t\t\t\t\"Method aaa(X) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aaa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aaa(T) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aaa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(X) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(T) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aaa(X) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aaa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aaa(T) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aaa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(X) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(T) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(T) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb23ddb5332a264f6e4cef81d1593629", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAA02() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAA02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm [Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_obj [Generic<Object>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_exc [Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_qmk [Generic<?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_thr [Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_run [Generic<? super RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm [g1.t.s.def.Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_obj [g1.t.s.def.Generic<Object>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_exc [g1.t.s.def.Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_qmk [g1.t.s.def.Generic<?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_thr [g1.t.s.def.Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_run [g1.t.s.def.Generic<? super RuntimeException>.Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [g1.t.s.def.Generic<Object>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [g1.t.s.def.Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [g1.t.s.def.Generic<?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c056fe5fed2b19834bde6b49c500a45a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": " \tpublic void test050e()", "signatureAfterChange": " \tpublic void test050e()", "diff": ["-\t\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method c(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method c(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method c(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method c(A<Number>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c15379b6ea044db6dcfd4f6af45b3a9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAA03() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAA03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_obj [Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_exc [Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_qmk [Generic<?>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_thr [Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_run [Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_obj [g1.t.s.def.Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_exc [g1.t.s.def.Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_qmk [g1.t.s.def.Generic<?>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_thr [g1.t.s.def.Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_run [g1.t.s.def.Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [g1.t.s.def.Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [g1.t.s.def.Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [g1.t.s.def.Generic<?>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c312439f67fd55dec02caac6fb586c12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "41321e271ce9d99e44edf867f5f75e8abc4a221f", "commitAfterChange": "61133b8c5e6da454f7cea747a5c83744e4b067c9", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void testBug416174()", "signatureAfterChange": " \tpublic void testBug416174()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tclass Z extends X {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The method foo1(List<@NonNull X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"\t@Override void foo1(List<@NonNull X> xy) {}\\n\" + ", "+\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"Illegal redefinition of parameter xy, inherited method from X declares this parameter as \\'List<X>\\' (mismatching null constraints)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tclass Z extends X {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The method foo2(List<X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"\t@Override void foo2(List<X> lx) {}\\n\" + ", "+\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"Illegal redefinition of parameter lx, inherited method from X declares this parameter as \\'List<@NonNull X>\\' (mismatching null constraints)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tclass Z extends X {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The method foo3(List<X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"\t@Override void foo3(List<X> lx) {}\\n\" + ", "+\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"Illegal redefinition of parameter lx, inherited method from X declares this parameter as \\'List<@Nullable X>\\' (mismatching null constraints)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c34279ce2ff53c6e325bad386ce35c1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb26d8e79217b07ed6c67d81a6cc89b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAA04() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAA04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_qmk [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_obj [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_exc [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_qmk [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_thr [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_run [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d44c0ad508034f20f47bce94733a0d0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 507, "methodNumberAfterChange": 507, "signatureBeforeChange": " \tpublic void test503()", "signatureAfterChange": " \tpublic void test503()", "diff": ["-\t\t\t\"    1  invokespecial java.lang.Object() [13]\\n\" + ", "+\t\t\t\"    1  invokespecial java.lang.Object() [12]\\n\" + ", "-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\\n\" + ", "-\t\t\t\"     3  new X [2]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "+\t\t\t\"     3  new X [1]\\n\" + ", "-\t\t\t\"    10  getfield X.e : XA [30]\\n\" + ", "+\t\t\t\"    10  getfield X.e : XA [29]\\n\" + ", "-\t\t\t\"    14  getstatic XAB.CONST : XB [36]\\n\" + ", "-\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\\n\" + ", "-\t\t\t\"    20  new X [2]\\n\" + ", "+\t\t\t\"    14  getstatic XAB.CONST : XB [31]\\n\" + ", "+\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + ", "+\t\t\t\"    20  new X [1]\\n\" + ", "-\t\t\t\"    27  invokevirtual X.foo() : void  [45]\\n\" + ", "+\t\t\t\"    27  invokevirtual X.foo() : void [43]\\n\" + ", "-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "-\t\t\t\"     4  getfield X.e : XA [30]\\n\" + ", "+\t\t\t\"     4  getfield X.e : XA [29]\\n\" + ", "-\t\t\t\"     8  getstatic XB.CONST : XB [50]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\\n\" + ", "+\t\t\t\"     8  getstatic XB.CONST : XB [48]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc7fa0f13e8be4f38fa3c7abdca23ce6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": " \tpublic void test079()", "signatureAfterChange": " \tpublic void test079()", "diff": ["-\t\t\t\"1. WARNING in A.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tclass B extends A { void x(A<String> s) {} }\\r\\n\" +", "+\t\t\t\"1. WARNING in A.java (at line 2)\\n\" +", "+\t\t\t\"\tclass B extends A { void x(A<String> s) {} }\\n\" +", "-\t\t\t\"2. ERROR in A.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tclass B extends A { void x(A<String> s) {} }\\r\\n\" +", "+\t\t\t\"2. ERROR in A.java (at line 2)\\n\" +", "+\t\t\t\"\tclass B extends A { void x(A<String> s) {} }\\n\" +", "-\t\t\t\"3. WARNING in A.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tclass C extends A { @Override void x(A s) {} }\\r\\n\" +", "+\t\t\t\"3. WARNING in A.java (at line 3)\\n\" +", "+\t\t\t\"\tclass C extends A { @Override void x(A s) {} }\\n\" +", "-\t\t\t\"4. WARNING in A.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tclass C extends A { @Override void x(A s) {} }\\r\\n\" +", "+\t\t\t\"4. WARNING in A.java (at line 3)\\n\" +", "+\t\t\t\"\tclass C extends A { @Override void x(A s) {} }\\n\" +", "-\t\t\t\"5. WARNING in A.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tclass D extends A { void x(A<Object> s) {} }\\r\\n\" +", "+\t\t\t\"5. WARNING in A.java (at line 4)\\n\" +", "+\t\t\t\"\tclass D extends A { void x(A<Object> s) {} }\\n\" +", "-\t\t\t\"6. ERROR in A.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tclass D extends A { void x(A<Object> s) {} }\\r\\n\" +", "+\t\t\t\"6. ERROR in A.java (at line 4)\\n\" +", "+\t\t\t\"\tclass D extends A { void x(A<Object> s) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc103dc30be8d510e45c797a16863706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "41321e271ce9d99e44edf867f5f75e8abc4a221f", "commitAfterChange": "61133b8c5e6da454f7cea747a5c83744e4b067c9", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug416174b()", "signatureAfterChange": " \tpublic void testBug416174b()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\"\tabstract class Z extends X {\\n\" + ", "-\t\t\t\"\t               ^\\n\" + ", "-\t\t\t\"The method List<@NonNull X> foo1() from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tList<@NonNull X> foo1() {\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with \\'List<X>\\' returned from X.foo1() (mismatching null constraints)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\"\tabstract class Z extends X {\\n\" + ", "-\t\t\t\"\t               ^\\n\" + ", "-\t\t\t\"The method List<@NonNull X> foo2() from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 24)\\n\" + ", "+\t\t\t\"\tList<@NonNull X> foo2() {\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with \\'List<@Nullable X>\\' returned from X.foo2() (mismatching null constraints)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\"\tabstract class Z extends X {\\n\" + ", "-\t\t\t\"\t               ^\\n\" + ", "-\t\t\t\"The method @NonNull List<X> foo3() from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 28)\\n\" + ", "+\t\t\t\"\t@NonNull List<X> foo3() {\\n\" + ", "+\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with \\'@NonNull List<@NonNull X>\\' returned from X.foo3() (mismatching null constraints)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe338f48f9428556dfe8286eff0a8da3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\t\t\"    0  aload_0\\n\" + ", "-\t\t\t\"    1  invokespecial #9 <Method java/lang/Object.<init>()V>\\n\" + ", "+\t\t\t\"    0  aload_0 [this]\\n\" + ", "+\t\t\t\"    1  invokespecial java/lang/Object.<init>()V [9]\\n\" + ", "-\t\t\t\"     1  newarray #11 long\\n\" + ", "-\t\t\t\"     3  astore_1\\n\" + ", "-\t\t\t\"     4  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     7  aload_1\\n\" + ", "-\t\t\t\"     8  invokevirtual #27 <Method [J.clone()Ljava/lang/Object;>\\n\" + ", "-\t\t\t\"    11  invokevirtual #33 <Method java/io/PrintStream.println(Ljava/lang/Object;)V>\\n\" + ", "-\t\t\t\"    14  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    17  aload_1\\n\" + ", "-\t\t\t\"    18  invokevirtual #27 <Method [J.clone()Ljava/lang/Object;>\\n\" + ", "-\t\t\t\"    21  invokevirtual #33 <Method java/io/PrintStream.println(Ljava/lang/Object;)V>\\n\" + ", "+\t\t\t\"     1  newarray long [11]\\n\" + ", "+\t\t\t\"     3  astore_1 [tab]\\n\" + ", "+\t\t\t\"     4  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  aload_1 [tab]\\n\" + ", "+\t\t\t\"     8  invokevirtual [J.clone()Ljava/lang/Object; [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(Ljava/lang/Object;)V [33]\\n\" + ", "+\t\t\t\"    14  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    17  aload_1 [tab]\\n\" + ", "+\t\t\t\"    18  invokevirtual [J.clone()Ljava/lang/Object; [27]\\n\" + ", "+\t\t\t\"    21  invokevirtual java/io/PrintStream.println(Ljava/lang/Object;)V [33]\\n\" + "]}], "num": 49832}
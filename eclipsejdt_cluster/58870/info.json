{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad8bcdce7337e76c13041e872c231ee9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3692421c607435c808bf10f285d54ea1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "8d727318bdb50989688c39adc1cb443529cd92ed", "commitAfterChange": "0b996c62d78a14d0f0ee5313e3a85270bb3aeb0f", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue, String defaultEncoding) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "diff": ["-\tprotected String getURLContents(String docUrlValue, String defaultEncoding) throws JavaModelException {", "+\tprotected String getURLContents(String docUrlValue) throws JavaModelException {", "+\t\tJarURLConnection connection2 = null;", "-\t\t\tString encoding = defaultEncoding;", "+\t\t\tURL docUrl = new URL(docUrlValue);", "+\t\t\tURLConnection connection = docUrl.openConnection();", "+\t\t\tif (connection instanceof JarURLConnection) {", "+\t\t\t\tconnection2 = (JarURLConnection) connection;", "+\t\t\t}", "+\t\t\tstream = new BufferedInputStream(connection.getInputStream());", "+\t\t\tString encoding = connection.getContentEncoding();", "+\t\t\tbyte[] contents = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsByteArray(stream, connection.getContentLength());", "+\t\t\tif (encoding == null) {", "+\t\t\t\tint index = getIndexOf(contents, CONTENT_TYPE, 0);", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tindex = getIndexOf(contents, CONTENT, index);", "+\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\tint offset = index + CONTENT.length;", "+\t\t\t\t\t\tint index2 = getIndexOf(contents, CLOSING_DOUBLE_QUOTE, offset);", "+\t\t\t\t\t\tif (index2 != -1) {", "+\t\t\t\t\t\t\tfinal int charsetIndex = getIndexOf(contents, CHARSET, offset);", "+\t\t\t\t\t\t\tif (charsetIndex != -1) {", "+\t\t\t\t\t\t\t\tint start = charsetIndex + CHARSET.length;", "+\t\t\t\t\t\t\t\tencoding = new String(contents, start, index2 - start, \"UTF-8\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t// long time = System.currentTimeMillis();", "-\t\t\tURL docUrl = new URL(docUrlValue);", "-\t\t\tURLConnection connection = docUrl.openConnection();", "-\t\t\t// System.out.println(\"Time spent \" + (System.currentTimeMillis() - time) + \"ms for opening connection for \" + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t// time = System.currentTimeMillis();", "-\t\t\tif (\"jar\".equals(docUrl.getProtocol())) { //$NON-NLS-1$", "-\t\t\t\t// if jar protocol is using a cache, some file descriptors are left behind and the resource cannot be deleted", "-\t\t\t\tconnection.setUseCaches(false);", "-\t\t\t}", "-\t\t\tstream = new BufferedInputStream(connection.getInputStream());", "-\t\t\t// System.out.println(\"Time spent \" + (System.currentTimeMillis() - time) + \"ms for getting stream for \" + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t// time = System.currentTimeMillis();", "-\t\t\tchar[] contents = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(stream, -1, encoding);", "-\t\t\t// System.out.println(\"Time spent \" + (System.currentTimeMillis() - time) + \"ms for reading stream for \" + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t// System.out.println(\"Size = \" + (contents.length / 1024) + \"kb\");//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\treturn String.valueOf(contents);", "-\t\t\t}", "+\t\t\t\tif (encoding != null) {", "+\t\t\t\t\treturn new String(contents, encoding);", "+\t\t\t\t} else {", "+\t\t\t\t\t// platform encoding is used", "+\t\t\t\t\treturn new String(contents);", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "-\t\t\t\t\t// ignore", "+\t\t\t\t\te.printStackTrace();", "+\t\t\tif (connection2 != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tconnection2.getJarFile().close();", "+\t\t\t\t} catch(IOException e) {", "+\t\t\t\t\te.printStackTrace();", "+\t\t\t\t}", "+ \t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a8380043b292e9fc652b9ea0cbc6119", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "0243628c08ab4b4900a7554ddbc8a451c6a47550", "commitAfterChange": "047584befb8673c45fb37a5eec1f22e3adb791d0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey, boolean isConstructor)", "signatureAfterChange": " private void acceptBinaryMethod( \t\tIType type, \t\tIMethod method, \t\tchar[] uniqueKey, \t\tboolean isConstructor)", "diff": ["- */", "-protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey, boolean isConstructor) {", "-\tIMethod method= type.getMethod(new String(selector), parameterSignatures);", "-\tif (method.exists()) {", "-\t\ttry {", "-\t\t\tif(!isConstructor || ((JavaElement)method).getSourceMapper() == null) {", "-\t\t\t\tif (uniqueKey != null)", "-\t\t\t\t\tmethod = new ResolvedBinaryMethod(", "+private void acceptBinaryMethod(", "+\t\tIType type,", "+\t\tIMethod method,", "+\t\tchar[] uniqueKey,", "+\t\tboolean isConstructor) {", "+\ttry {", "+\t\tif(!isConstructor || ((JavaElement)method).getSourceMapper() == null) {", "+\t\t\tif (uniqueKey != null) {", "+\t\t\t\tResolvedBinaryMethod resolvedMethod = new ResolvedBinaryMethod(", "+\t\t\t\t\t\t(JavaElement)method.getParent(),", "+\t\t\t\t\t\tmethod.getElementName(),", "+\t\t\t\t\t\tmethod.getParameterTypes(),", "+\t\t\t\t\t\tnew String(uniqueKey));", "+\t\t\t\tresolvedMethod.occurrenceCount = method.getOccurrenceCount();", "+\t\t\t\tmethod = resolvedMethod;", "+\t\t\t}", "+\t\t\t\t", "+\t\t\taddElement(method);", "+\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "+\t\t\t\tSystem.out.print(method.toString());", "+\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t} else {", "+\t\t\tISourceRange range = method.getSourceRange();", "+\t\t\tif (range.getOffset() != -1 && range.getLength() != 0 ) {", "+\t\t\t\tif (uniqueKey != null) {", "+\t\t\t\t\tResolvedBinaryMethod resolvedMethod = new ResolvedBinaryMethod(", "+\t\t\t\t\tresolvedMethod.occurrenceCount = method.getOccurrenceCount();", "+\t\t\t\t\tmethod = resolvedMethod;", "+\t\t\t\t}", "-\t\t\t\tISourceRange range = method.getSourceRange();", "-\t\t\t\tif (range.getOffset() != -1 && range.getLength() != 0 ) {", "-\t\t\t\t\tif (uniqueKey != null)", "-\t\t\t\t\t\tmethod = new ResolvedBinaryMethod(", "-\t\t\t\t\t\t\t\t(JavaElement)method.getParent(),", "-\t\t\t\t\t\t\t\tmethod.getElementName(),", "-\t\t\t\t\t\t\t\tmethod.getParameterTypes(),", "-\t\t\t\t\t\t\t\tnew String(uniqueKey));", "-\t\t\t\t\taddElement(method);", "-\t\t\t\t\tif(SelectionEngine.DEBUG){", "-\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.print(method.toString());", "-\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// no range was actually found, but a method was originally given -> default constructor", "-\t\t\t\t\taddElement(type);", "-\t\t\t\t\tif(SelectionEngine.DEBUG){", "-\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept type(\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.print(type.toString());", "-\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "+\t\t\t\t// no range was actually found, but a method was originally given -> default constructor", "+\t\t\t\taddElement(type);", "+\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\tSystem.out.print(\"SELECTION - accept type(\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(type.toString());", "+\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// an exception occurs, return nothing", "+\t} catch (JavaModelException e) {", "+\t\t// an exception occurs, return nothing", "+\t}", "+}"]}], "num": 58870}
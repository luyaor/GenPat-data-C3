{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a15a1b7c4cc898a47d3f0d0d314b9b3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6008f8e6b576eb7598452da96cb14178", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "3585d9ff750517d96f094a12a4fb99e502636c59", "commitAfterChange": "59449ee231c1cab95a8f7ec24b57c991cddf580d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\tmethod.selector = methodInfo.getSelector();", "+\t\tmethod.selector = methodHandle.getElementName().toCharArray();", "-\t\tchar[][] argumentTypeNames = methodInfo.getArgumentTypeNames();", "+\t\tString[] argumentTypeSignatures = methodHandle.getParameterTypes();", "-\t\tint argumentCount = argumentTypeNames == null ? 0 : argumentTypeNames.length;", "+\t\tint argumentCount = argumentTypeSignatures == null ? 0 : argumentTypeSignatures.length;", "-\t\t\tTypeReference typeReference = createTypeReference(argumentTypeNames[i], start, end);", "+\t\t\tchar[] typeName = Signature.toCharArray(argumentTypeSignatures[i].toCharArray());", "+\t\t\tTypeReference typeReference = createTypeReference(typeName, start, end);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83ae89ef5ab51c1db3aca6e367edb353", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "0df57fb5e3c8ba23a5c9637624ca9064d6362105", "commitAfterChange": "ec347031cf50724e26089d866fc7a0e2b977eae3", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tpublic void secondaryTypeAdding(String path, char[] key)", "signatureAfterChange": " \tpublic void secondaryTypeAdding(String path, char[] typeName, char[] packageName)", "diff": ["-\tpublic void secondaryTypeAdding(String path, char[] key) {", "+\tpublic void secondaryTypeAdding(String path, char[] typeName, char[] packageName) {", "-\t\t\tbuffer.append(new String(key));", "+\t\t\tbuffer.append(new String(packageName));", "+\t\t\tbuffer.append('.');", "+\t\t\tbuffer.append(new String(typeName));", "-\t\t\t\t\t\tchar[][] names = CharOperation.splitOn('/', key);", "-\t\t\t\t\t\tString typeName = new String(names[0]);", "-\t\t\t\t\t\tString packName = new String(names[1]);", "-\t\t\t\t\t\tHashMap packageTypes = (HashMap) allTypes.get(packName);", "+\t\t\t\t\t\tString typeString = new String(typeName);", "+\t\t\t\t\t\tString packageString = new String(packageName);", "+\t\t\t\t\t\tHashMap packageTypes = (HashMap) allTypes.get(packageString);", "-\t\t\t\t\t\t\tallTypes.put(packName, packageTypes);", "+\t\t\t\t\t\t\tallTypes.put(packageString, packageTypes);", "-\t\t\t\t\t\tpackageTypes.put(typeName, unit.getType(typeName));", "+\t\t\t\t\t\tpackageTypes.put(typeString, unit.getType(typeString));"]}], "num": 37695}
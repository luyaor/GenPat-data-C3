{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6883ee7ba315e933e7ffd761aea71058", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8c212651046ceace57e0bcfb04b5346", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "289dce143850c03aff8ce780ffcfc4ff9946c93b", "commitAfterChange": "627ddb655d5f70180ea3a2ef27ecd181e1d5ac35", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tReferenceBinding resolve()", "signatureAfterChange": "  \tReferenceBinding resolve()", "diff": ["-\t\t\t}\t\t\t", "-\t\t\t// check argument type compatibility", "-\t\t\tfor (int i = 0; i < argLength; i++) {", "-\t\t\t    TypeBinding resolvedArgument = this.arguments[i];", "-\t\t\t\tif (refTypeVariables[i].boundCheck(this, resolvedArgument) != TypeConstants.OK) {", "-\t\t\t\t\tthis.environment.problemReporter.typeMismatchError(resolvedArgument, refTypeVariables[i], resolvedType, null);", "-\t\t\t    }", "+\t\t\t// check argument type compatibility... REMOVED for now since incremental build will propagate change & detect in source", "+//\t\t\tfor (int i = 0; i < argLength; i++) {", "+//\t\t\t    TypeBinding resolvedArgument = this.arguments[i];", "+//\t\t\t\tif (refTypeVariables[i].boundCheck(this, resolvedArgument) != TypeConstants.OK) {", "+//\t\t\t\t\tthis.environment.problemReporter.typeMismatchError(resolvedArgument, refTypeVariables[i], resolvedType, null);", "+//\t\t\t    }", "+//\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f75ac34d57aebc8a2a288e8e767a9f75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "8aaf5c369166203de49007a43e00fba427622d08", "commitAfterChange": "287376f0e3221ecbf877415fefd7d987e0a53878", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \t\tpublic int logProblems(CategorizedProblem[] problems, char[] unitSource, Main currentMain)", "signatureAfterChange": "  \t\tpublic int logProblems(CategorizedProblem[] problems, char[] unitSource, Main currentMain)", "diff": ["-\t\t\t\tif ((this.tagBits & Logger.XML) != 0) {", "-\t\t\t\t\tint errors = 0;", "-\t\t\t\t\tint warnings = 0;", "-\t\t\t\t\tint tasks = 0;", "-\t\t\t\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\t\t\tCategorizedProblem problem = problems[i];", "-\t\t\t\t\t\tif (problem != null) {", "-\t\t\t\t\t\t\tcurrentMain.globalProblemsCount++;", "-\t\t\t\t\t\t\tthis.logProblem(problem, localProblemCount, currentMain.globalProblemsCount, unitSource);", "-\t\t\t\t\t\t\tlocalProblemCount++;", "-\t\t\t\t\t\t\tif (problem.isError()) {", "-\t\t\t\t\t\t\t\tlocalErrorCount++;", "-\t\t\t\t\t\t\t\terrors++;", "-\t\t\t\t\t\t\t\tcurrentMain.globalErrorsCount++;", "-\t\t\t\t\t\t\t} else if (problem.getID() == IProblem.Task) {", "-\t\t\t\t\t\t\t\tcurrentMain.globalTasksCount++;", "-\t\t\t\t\t\t\t\ttasks++;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcurrentMain.globalWarningsCount++;", "-\t\t\t\t\t\t\t\twarnings++;", "-\t\t\t\t\t\t\t}", "+\t\t\t\tint errors = 0;", "+\t\t\t\tint warnings = 0;", "+\t\t\t\tint tasks = 0;", "+\t\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\t\tCategorizedProblem problem = problems[i];", "+\t\t\t\t\tif (problem != null) {", "+\t\t\t\t\t\tcurrentMain.globalProblemsCount++;", "+\t\t\t\t\t\tthis.logProblem(problem, localProblemCount, currentMain.globalProblemsCount, unitSource);", "+\t\t\t\t\t\tlocalProblemCount++;", "+\t\t\t\t\t\tif (problem.isError()) {", "+\t\t\t\t\t\t\tlocalErrorCount++;", "+\t\t\t\t\t\t\terrors++;", "+\t\t\t\t\t\t\tcurrentMain.globalErrorsCount++;", "+\t\t\t\t\t\t} else if (problem.getID() == IProblem.Task) {", "+\t\t\t\t\t\t\tcurrentMain.globalTasksCount++;", "+\t\t\t\t\t\t\ttasks++;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcurrentMain.globalWarningsCount++;", "+\t\t\t\t\t\t\twarnings++;", "+\t\t\t\t}", "+\t\t\t\tif ((this.tagBits & Logger.XML) != 0) {", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\t\t\tif (problems[i] != null) {", "-\t\t\t\t\t\t\tcurrentMain.globalProblemsCount++;", "-\t\t\t\t\t\t\tthis.logProblem(problems[i], localProblemCount, currentMain.globalProblemsCount, unitSource);", "-\t\t\t\t\t\t\tlocalProblemCount++;", "-\t\t\t\t\t\t\tif (problems[i].isError()) {", "-\t\t\t\t\t\t\t\tlocalErrorCount++;", "-\t\t\t\t\t\t\t\tcurrentMain.globalErrorsCount++;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcurrentMain.globalWarningsCount++;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}"]}], "num": 22346}
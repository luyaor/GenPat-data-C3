{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af2f51c9a5f716b295e7b2b14e6df4a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67898602be9b61b064444644bf6bc0f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "99f0734d8a1b71a7d7c72970a0e6d86dd16a74bf", "commitAfterChange": "0660a80b4f83507ec084149491c197acba246b67", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 271, "signatureBeforeChange": " private int localSourceEnd(LocalVariableBinding binding, ASTNode node)", "signatureAfterChange": " private int nodeSourceEnd(Binding field, ASTNode node)", "diff": ["-private int localSourceEnd(LocalVariableBinding binding, ASTNode node) {", "-\tif (node instanceof QualifiedNameReference) {", "-\t\tQualifiedNameReference ref = (QualifiedNameReference) node;", "-\t\tif (ref.binding == binding) {", "-\t\t\treturn (int) (ref.sourcePositions[ref.indexOfFirstFieldBinding-1]);", "-\t\t}", "-\t}", "-\treturn node.sourceEnd;", "-}", "+private int nodeSourceEnd(Binding field, ASTNode node) {", "+\treturn nodeSourceEnd(field, node, 0);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db517a1279e36c54755a555e47dc20ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "3ed934203361f92bc6723885a6bcbaf0d8220354", "commitAfterChange": "d91e1f720567f8c9f4c6f41313738e9df1d21a2c", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tpublic int generateTypeAnnotationsOnCodeAttribute()", "signatureAfterChange": " \t \tpublic int generateTypeAnnotationsOnCodeAttribute()", "diff": ["-\t\tint tableIndex = 0;", "-\t\t\tif (exceptionLabel instanceof MultiCatchExceptionLabel) {", "-\t\t\t\tMultiCatchExceptionLabel multiCatchExceptionLabel = (MultiCatchExceptionLabel)exceptionLabel;", "-\t\t\t\ttableIndex += multiCatchExceptionLabel.getAllAnnotationContexts(tableIndex, allTypeAnnotationContexts);", "-\t\t\t} else {", "-\t\t\t\tif (exceptionLabel.exceptionTypeReference != null) { // ignore those which cannot be annotated", "-\t\t\t\t\texceptionLabel.exceptionTypeReference.getAllAnnotationContexts(AnnotationTargetTypeConstants.EXCEPTION_PARAMETER, tableIndex, allTypeAnnotationContexts);", "-\t\t\t\t}", "-\t\t\t\ttableIndex++;", "+\t\t\tif (exceptionLabel.exceptionTypeReference != null && (exceptionLabel.exceptionTypeReference.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\texceptionLabel.exceptionTypeReference.getAllAnnotationContexts(AnnotationTargetTypeConstants.EXCEPTION_PARAMETER, i, allTypeAnnotationContexts);"]}], "num": 2601}
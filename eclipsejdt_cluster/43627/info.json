{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66816a05955fc97187e2a56e81c83b0b", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015cda9ab9c54a882931719768e56a46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private boolean matches(ExplicitConstructorCall call, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(ExplicitConstructorCall call, boolean resolve)", "diff": ["- */\r", "-private boolean matches(ExplicitConstructorCall call, boolean resolve) {\r", "-\t// TBD: constructor name is super simple type name\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = call.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// argument types\r", "-\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (argumentCount > -1) {\r", "-\t\tint parameterCount = call.arguments == null ? 0 : call.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(ExplicitConstructorCall call, boolean resolve) {\r", "+\t// TBD: constructor name is super simple type name\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(call.binding);\r", "+\t} else {\r", "+\t\t// argument types\r", "+\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (argumentCount > -1) {\r", "+\t\t\tint parameterCount = call.arguments == null ? 0 : call.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c45a7f78bbe4b4f3369e3c0e9e26a2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private boolean matches(ExplicitConstructorCall call, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(ExplicitConstructorCall call, boolean resolve)", "diff": ["- */\r", "-private boolean matches(ExplicitConstructorCall call, boolean resolve) {\r", "-\t// TBD: constructor name is super simple type name\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = call.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// argument types\r", "-\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (argumentCount > -1) {\r", "-\t\tint parameterCount = call.arguments == null ? 0 : call.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(ExplicitConstructorCall call, boolean resolve) {\r", "+\t// TBD: constructor name is super simple type name\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(call.binding);\r", "+\t} else {\r", "+\t\t// argument types\r", "+\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (argumentCount > -1) {\r", "+\t\t\tint parameterCount = call.arguments == null ? 0 : call.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e537e44d4016b6011f5d15a4edcf213", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private boolean matches(ExplicitConstructorCall call, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(ExplicitConstructorCall call, boolean resolve)", "diff": ["- */\r", "-private boolean matches(ExplicitConstructorCall call, boolean resolve) {\r", "-\t// TBD: constructor name is super simple type name\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = call.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// argument types\r", "-\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (argumentCount > -1) {\r", "-\t\tint parameterCount = call.arguments == null ? 0 : call.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(ExplicitConstructorCall call, boolean resolve) {\r", "+\t// TBD: constructor name is super simple type name\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(call.binding);\r", "+\t} else {\r", "+\t\t// argument types\r", "+\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (argumentCount > -1) {\r", "+\t\t\tint parameterCount = call.arguments == null ? 0 : call.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b9d7a35ba81784d6fec3525f915598", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "60e138d2828b37f2615e0cced57acea3adb47644", "commitAfterChange": "3c340a30d5ee47c28968789969de0fd1189f5b30", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private boolean matches(ExplicitConstructorCall call, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(ExplicitConstructorCall call, boolean resolve)", "diff": ["- */\r", "-private boolean matches(ExplicitConstructorCall call, boolean resolve) {\r", "-\t// TBD: constructor name is super simple type name\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = call.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// argument types\r", "-\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (argumentCount > -1) {\r", "-\t\tint parameterCount = call.arguments == null ? 0 : call.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(ExplicitConstructorCall call, boolean resolve) {\r", "+\t// TBD: constructor name is super simple type name\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(call.binding);\r", "+\t} else {\r", "+\t\t// argument types\r", "+\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (argumentCount > -1) {\r", "+\t\t\tint parameterCount = call.arguments == null ? 0 : call.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0ff7139009cad67a89b0a99182561bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private boolean matches(ExplicitConstructorCall call, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(ExplicitConstructorCall call, boolean resolve)", "diff": ["- */\r", "-private boolean matches(ExplicitConstructorCall call, boolean resolve) {\r", "-\t// TBD: constructor name is super simple type name\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = call.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// argument types\r", "-\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (argumentCount > -1) {\r", "-\t\tint parameterCount = call.arguments == null ? 0 : call.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(ExplicitConstructorCall call, boolean resolve) {\r", "+\t// TBD: constructor name is super simple type name\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(call.binding);\r", "+\t} else {\r", "+\t\t// argument types\r", "+\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (argumentCount > -1) {\r", "+\t\t\tint parameterCount = call.arguments == null ? 0 : call.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}], "num": 43627}
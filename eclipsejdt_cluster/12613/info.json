{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f95ad56c08581e143f0722a74ef39d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d545c51009701dd5a4806b47a3b2e56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "3abe49316927196163f27885f6058dcb1fd3bf05", "commitAfterChange": "06b59b12971aeee874ed794919d205a2657ca5c3", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tprotected void assertStringsEqual(String message, String[] expectedStrings, String[] actualStrings)", "signatureAfterChange": " \tprotected void assertStringsEqual(String message, String[] expectedStrings, String[] actualStrings)", "diff": ["-\t\tString expected = toString(expectedStrings, false/*don't add extra new lines*/);", "-\t\tString actual = toString(actualStrings, false/*don't add extra new lines*/);", "+\t\tString expected = org.eclipse.jdt.core.tests.util.Util.toString(expectedStrings, false/*don't add extra new lines*/);", "+\t\tString actual = org.eclipse.jdt.core.tests.util.Util.toString(actualStrings, false/*don't add extra new lines*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb9f52328705ea67112733e79c2aad5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "4e0764ea101fbf846e6a07a87eac2236fd29f236", "commitAfterChange": "0f1f2b20ab9c02179f9ab0cd2826219f39372374", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public int match(ReferenceExpression node, MatchingNodeSet nodeSet)", "signatureAfterChange": "  public int match(ReferenceExpression node, MatchingNodeSet nodeSet)", "diff": ["+\tif (node.selector != null &&  Arrays.equals(node.selector, org.eclipse.jdt.internal.compiler.codegen.ConstantPool.Init))", "+\t\treturn IMPOSSIBLE_MATCH; // :: new"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e729ea27ddd07fcdf50b907327bc6895", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "ab7733a54402b64bb328ef9a7aa36d933deb8ac7", "commitAfterChange": "7ed8fb3f335f5407b01a590a0c668733ebc19aa6", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " protected void locateMatches(JavaProject javaProject, PossibleMatch[] possibleMatches, int start, int length) throws CoreException", "signatureAfterChange": " protected void locateMatches(JavaProject javaProject, PossibleMatch[] possibleMatches, int start, int length) throws CoreException", "diff": ["-\t\t\t\tSystem.out.println(Util.bind(\"compilation.done\", //$NON-NLS-1$", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\tString.valueOf(this.numberOfMatches),", "-\t\t\t\t\t\tnew String(possibleMatch.parsedUnit.getFileName())}));", "+\t\t\t\tSystem.out.println(", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.util.Util.bind(", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.util.Util.bind(\"compilation.done\"), //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tString.valueOf(i + 1),", "+\t\t\t\t\t\t\tString.valueOf(this.numberOfMatches),", "+\t\t\t\t\t\t\tnew String(possibleMatch.parsedUnit.getFileName())", "+\t\t\t\t\t\t}));"]}], "num": 12613}
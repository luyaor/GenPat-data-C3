{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e7a746a80c49922843b1f245e5d7703", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2332d32456571bd8aa558703a14edb84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "babe82af3726a6979eb5da4c747f51906154b2bc", "commitAfterChange": "fab4ac0c2a45db58d02407ad5972d843c8dba1e6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": "  public void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["+", "+public void traverse(ASTVisitor visitor, BlockScope scope) {", "+\tif (visitor.visit(this, scope)) {", "+\t\tif (this.action != null) {", "+\t\t\tthis.action.traverse(visitor, scope);", "+\t\tthis.condition.traverse(visitor, scope);", "-", "-\tpublic void traverse(ASTVisitor visitor, BlockScope scope) {", "-", "-\t\tif (visitor.visit(this, scope)) {", "-\t\t\tif (action != null) {", "-\t\t\t\taction.traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tcondition.traverse(visitor, scope);", "-\t\t}", "-\t\tvisitor.endVisit(this, scope);", "-\t}", "+\tvisitor.endVisit(this, scope);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ddfeb28d2c985d3efebe45b74943f30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CharArrayCache.java", "commitBeforeChange": "e0325c6422f39f597d14dd4c27ecf43875108a27", "commitAfterChange": "f389464fbe74a4e5c3adfde8847a7200db37d80c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public char[] returnKeyFor(int value)", "signatureAfterChange": " public char[] returnKeyFor(int value)", "diff": ["-\tfor (int i = keyTable.length; i-- > 0;) {", "-\t\tif (valueTable[i] == value) {", "-\t\t\treturn keyTable[i];", "+\tfor (int i = this.keyTable.length; i-- > 0;) {", "+\t\tif (this.valueTable[i] == value) {", "+\t\t\treturn this.keyTable[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "611da156e77d4acae9231205e488477a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic boolean isNative()", "signatureAfterChange": "  \tpublic boolean isNative()", "diff": ["-\t\tif (binding != null)", "-\t\t\treturn binding.isNative();", "-\t\treturn (modifiers & AccNative) != 0;", "+\t\tif (this.binding != null)", "+\t\t\treturn this.binding.isNative();", "+\t\treturn (this.modifiers & AccNative) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "665e4eafa97b91eda7ac64729d12c2e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "5763e268070d12108a9f30b967b2e77e2bd3601f", "commitAfterChange": "cd0ceda2b7c471c4f37fb9996e9bfc019e8f11f8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public int getModifiers()", "signatureAfterChange": "\r public int getModifiers()", "diff": ["-\tif (innerInfo != null) {\r", "-\t\treturn innerInfo.getModifiers();\r", "+\tif (this.innerInfo != null) {\r", "+\t\treturn this.innerInfo.getModifiers();\r", "-\treturn accessFlags;\r", "+\treturn this.accessFlags;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aec4d8db51264cfbcca1650f58d70bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public void updateInnerEmulationDependents()", "signatureAfterChange": " public void updateInnerEmulationDependents()", "diff": ["-", "-\tif (dependents != null) {", "-\t\tfor (int i = 0; i < dependents.length; i++) {", "-\t\t\tInnerEmulationDependency dependency = dependents[i];", "+\tif (this.dependents != null) {", "+\t\tfor (int i = 0; i < this.dependents.length; i++) {", "+\t\t\tInnerEmulationDependency dependency = this.dependents[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78948d9e1da63fa58990dcceb18157fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "1d27ab4a3d73ff8313e5972d7d4f96a23b370614", "commitAfterChange": "b25ed407ef1d09375524d9c9e824c1c1084b119b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\tvoid releaseCursor(Cursor cursor)", "signatureAfterChange": " \t\tvoid releaseCursor(Cursor cursor)", "diff": ["-\t\t\tcursors.remove(cursor);", "-\t\t\tif (cursors.isEmpty()) {", "+\t\t\tthis.cursors.remove(cursor);", "+\t\t\tif (this.cursors.isEmpty()) {", "-\t\t\t\tcursors = null;", "+\t\t\t\tthis.cursors = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79a97798858203b5f7a18a1daa1d22f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "babe82af3726a6979eb5da4c747f51906154b2bc", "commitAfterChange": "fab4ac0c2a45db58d02407ad5972d843c8dba1e6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic StringBuffer printStatement(int indent, StringBuffer output)", "signatureAfterChange": "  public StringBuffer printStatement(int indent, StringBuffer output)", "diff": ["-\tpublic StringBuffer printStatement(int indent, StringBuffer output) {", "-\t\tprintIndent(indent, output).append(\"do\"); //$NON-NLS-1$", "-\t\tif (action == null)", "-\t\t\toutput.append(\" ;\\n\"); //$NON-NLS-1$", "-\t\telse {", "-\t\t\toutput.append('\\n');", "-\t\t\taction.printStatement(indent + 1, output).append('\\n');", "+", "+public StringBuffer printStatement(int indent, StringBuffer output) {", "+\tprintIndent(indent, output).append(\"do\"); //$NON-NLS-1$", "+\tif (this.action == null)", "+\t\toutput.append(\" ;\\n\"); //$NON-NLS-1$", "+\telse {", "+\t\toutput.append('\\n');", "+\t\tthis.action.printStatement(indent + 1, output).append('\\n');", "+\t}", "+\toutput.append(\"while (\"); //$NON-NLS-1$", "+\treturn this.condition.printExpression(0, output).append(\");\"); //$NON-NLS-1$", "+}", "-\t\toutput.append(\"while (\"); //$NON-NLS-1$", "-\t\treturn condition.printExpression(0, output).append(\");\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f5e5c851a80d87e29ce769087b7c5b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/HashtableOfObjectToInt.java", "commitBeforeChange": "f66ad7c89d5efefebf4bda51f9089ef887e9d108", "commitAfterChange": "97459ae998e10691456e7e2a3002f99ff1d092bb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void rehash()", "signatureAfterChange": "  \tprivate void rehash()", "diff": ["-\t\tfor (int i = keyTable.length; --i >= 0;)", "-\t\t\tif ((currentKey = keyTable[i]) != null)", "-\t\t\t\tnewHashtable.put(currentKey, valueTable[i]);", "+\t\tfor (int i = this.keyTable.length; --i >= 0;)", "+\t\t\tif ((currentKey = this.keyTable[i]) != null)", "+\t\t\t\tnewHashtable.put(currentKey, this.valueTable[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a147ecb9790daa6abe767b6364bb5c21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic boolean isStatic()", "signatureAfterChange": "  \tpublic boolean isStatic()", "diff": ["-\t\tif (binding != null)", "-\t\t\treturn binding.isStatic();", "-\t\treturn (modifiers & AccStatic) != 0;", "+\t\tif (this.binding != null)", "+\t\t\treturn this.binding.isStatic();", "+\t\treturn (this.modifiers & AccStatic) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1707f161e71de8ab39566fd428ac96c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic boolean isStatic()", "signatureAfterChange": "  \tpublic boolean isStatic()", "diff": ["-\t\tif (binding != null)", "-\t\t\treturn binding.isStatic();", "-\t\treturn (modifiers & AccStatic) != 0;", "+\t\tif (this.binding != null)", "+\t\t\treturn this.binding.isStatic();", "+\t\treturn (this.modifiers & AccStatic) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c62f1e31820cb8a6ab4fc44e2b22a95e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocFieldReference.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "signatureAfterChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["-\t\tif (receiver != null) {", "-\t\t\treceiver.printExpression(0, output);", "+\t\tif (this.receiver != null) {", "+\t\t\tthis.receiver.printExpression(0, output);", "-\t\toutput.append('#').append(token);", "+\t\toutput.append('#').append(this.token);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9620c5614814ebb01cffceaf37f845", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic boolean isAbstract()", "signatureAfterChange": "  \tpublic boolean isAbstract()", "diff": ["-\t\tif (binding != null)", "-\t\t\treturn binding.isAbstract();", "-\t\treturn (modifiers & AccAbstract) != 0;", "+\t\tif (this.binding != null)", "+\t\t\treturn this.binding.isAbstract();", "+\t\treturn (this.modifiers & AccAbstract) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e63c9d581066a9dd8f2b0088c0b1fa15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate int computePriority(CategorizedProblem problem)", "signatureAfterChange": "  private int computePriority(CategorizedProblem problem)", "diff": ["-\tprivate int computePriority(CategorizedProblem problem){", "+", "+private int computePriority(CategorizedProblem problem){", "+\tfinal int P_STATIC = 10000;", "+\tfinal int P_OUTSIDE_METHOD = 40000;", "+\tfinal int P_FIRST_ERROR = 20000;", "+\tfinal int P_ERROR = 100000;", "-\t\tfinal int P_STATIC = 10000;", "-\t\tfinal int P_OUTSIDE_METHOD = 40000;", "-\t\tfinal int P_FIRST_ERROR = 20000;", "-\t\tfinal int P_ERROR = 100000;", "-\t\t", "-\t\tint priority = 10000 - problem.getSourceLineNumber(); // early problems first", "-\t\tif (priority < 0) priority = 0;", "-\t\tif (problem.isError()){", "-\t\t\tpriority += P_ERROR;", "-\t\t}", "-\t\tReferenceContext context = problemsMap == null ? null : (ReferenceContext) problemsMap.get(problem);", "-\t\tif (context != null){", "-\t\t\tif (context instanceof AbstractMethodDeclaration){", "-\t\t\t\tAbstractMethodDeclaration method = (AbstractMethodDeclaration) context;", "-\t\t\t\tif (method.isStatic()) {", "-\t\t\t\t\tpriority += P_STATIC;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tpriority += P_OUTSIDE_METHOD;", "+\tint priority = 10000 - problem.getSourceLineNumber(); // early problems first", "+\tif (priority < 0) priority = 0;", "+\tif (problem.isError()){", "+\t\tpriority += P_ERROR;", "+\t}", "+\tReferenceContext context = this.problemsMap == null ? null : (ReferenceContext) this.problemsMap.get(problem);", "+\tif (context != null){", "+\t\tif (context instanceof AbstractMethodDeclaration){", "+\t\t\tAbstractMethodDeclaration method = (AbstractMethodDeclaration) context;", "+\t\t\tif (method.isStatic()) {", "+\t\t\t\tpriority += P_STATIC;", "-\t\t\tif (firstErrors.contains(problem)){ // if context is null, firstErrors is null too", "-\t\t\t  priority += P_FIRST_ERROR;", "-\t\t    }", "-\t\treturn priority;", "+\t\tif (this.firstErrors.contains(problem)){ // if context is null, firstErrors is null too", "+\t\t  priority += P_FIRST_ERROR;", "+\t    }", "+\t} else {", "+\t\tpriority += P_OUTSIDE_METHOD;", "+\treturn priority;", "+}"]}], "num": 6324}
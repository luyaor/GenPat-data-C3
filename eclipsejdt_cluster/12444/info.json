{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc9c88159a59f531c1b18b2ad7a3a1c0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a287c90babde4c6f72ebcc5e651c10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f875f4161e47c5087f589529b7e7ee5cf66c1b26", "commitAfterChange": "3e03e3984540d3907fa7739b419f89dad9725944", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tprivate void formatArrayQualifiedTypeReference(ArrayQualifiedTypeReference arrayQualifiedTypeReference)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tBlockScope scope)", "diff": ["-\tprivate void formatArrayQualifiedTypeReference(ArrayQualifiedTypeReference arrayQualifiedTypeReference) {", "-\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageOpeningParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t}", "-\t\tformatQualifiedTypeReference(arrayQualifiedTypeReference);", "-\t\tformatLeadingDimensions(arrayQualifiedTypeReference, true);", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageClosingParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t}", "-\t}", "+\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference,", "+\t\tBlockScope scope) {", "+\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\t\tif (numberOfParens > 0) {", "+\t\t\t\tmanageOpeningParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "+\t\t\t}", "+\t\t\tthis.scribe.printArrayQualifiedReference(arrayQualifiedTypeReference.tokens.length, arrayQualifiedTypeReference.sourceEnd);", "+\t\t\tint dimensions = getDimensions();", "+\t\t\tif (dimensions != 0) {", "+\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (numberOfParens > 0) {", "+\t\t\t\tmanageClosingParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d654df1d43754988ed7ae1082779797c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "848c414ceb7f8dfa6bf1cb908b31047bf78910eb", "commitAfterChange": "827bc8f09eb6be33972723284a202745477c7656", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t\t} else if (isArrayConstructorReference()) {", "+\t\t\t// We don't care for annotations, source positions etc. They are immaterial, just drop.", "+\t\t\tArrayAllocationExpression arrayAllocationExpression = new ArrayAllocationExpression();", "+\t\t\tarrayAllocationExpression.dimensions = new Expression[] { argv[0] };", "+\t\t\tif (this.lhs instanceof ArrayTypeReference) {", "+\t\t\t\tArrayTypeReference arrayTypeReference = (ArrayTypeReference) this.lhs;", "+\t\t\t\tarrayAllocationExpression.type = arrayTypeReference.dimensions == 1 ? new SingleTypeReference(arrayTypeReference.token, 0L) : ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ArrayTypeReference(arrayTypeReference.token, arrayTypeReference.dimensions - 1, 0L);", "+\t\t\t} else {", "+\t\t\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference = (ArrayQualifiedTypeReference) this.lhs;", "+\t\t\t\tarrayAllocationExpression.type = arrayQualifiedTypeReference.dimensions == 1 ? new QualifiedTypeReference(arrayQualifiedTypeReference.tokens, arrayQualifiedTypeReference.sourcePositions)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: new ArrayQualifiedTypeReference(arrayQualifiedTypeReference.tokens, arrayQualifiedTypeReference.dimensions - 1, ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tarrayQualifiedTypeReference.sourcePositions);", "+\t\t\t}", "+\t\t\timplicitLambda.setBody(arrayAllocationExpression);"]}], "num": 12444}
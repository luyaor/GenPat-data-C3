{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b9f4c06e148ca882c1facfe325017f4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cfe570bd9f1d813306b66f1875e6bea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "2bf89c240ddd3251e4b1d84f5113b5b23a25a1c7", "commitAfterChange": "d9ef1de09cb72d13b8a3503336aa24f1ef9b23e2", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic synchronized ZipFile getZipFile(IPath path) throws CoreException", "signatureAfterChange": " \tpublic synchronized ZipFile getZipFile(IPath path) throws CoreException", "diff": ["-\t\t\tif (file == null || file.getType() != IResource.FILE) {", "+\t\t\tif (file == null) { // external file", "-\t\t\t} else {", "-\t\t\t\tIPath location = file.getLocation();", "-\t\t\t\tif (location == null) {", "-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\"), null)); //$NON-NLS-1$", "+\t\t\t} else { // internal resource (not an IFile or not existing)", "+\t\t\t\tIPath location;", "+\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\"), null)); //$NON-NLS-1$", "+\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\"), null)); //$NON-NLS-1$", "+\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2de61bbb763ed38c2c2350dd78ab279c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "4a42ce44b4dbdac7dfa261ef1a39fce0de95d7be", "commitAfterChange": "51fbd8e4f6294604d20aa6227743a8c8abfdc166", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "signatureAfterChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "diff": ["-\tint index = sourceFolders.length;\r", "-\tthis.hasSeparateOutputFolder = index > 0; // skip it if it doesn't have any source folders\r", "-\twhile (this.hasSeparateOutputFolder && --index >= 0)\r", "-\t\tthis.hasSeparateOutputFolder = !outputPath.equals(sourceFolders[index].getFullPath());\r", "+\tint index = sourceFolders.length;\r", "+\tif (index == 0) {\r", "+\t\t// handle case of the last source folder is removed... so no source folders exist but the output folder must still be scrubbed\r", "+\t\tthis.hasSeparateOutputFolder = !outputPath.equals(javaBuilder.currentProject.getFullPath());\r", "+\t} else {\r", "+\t\tthis.hasSeparateOutputFolder = true;\r", "+\t\twhile (this.hasSeparateOutputFolder && --index >= 0)\r", "+\t\t\tthis.hasSeparateOutputFolder = !outputPath.equals(sourceFolders[index].getFullPath());\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cf8592ccd0a8043ad6cccf1f07d5604", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java", "commitBeforeChange": "b584041c55393f6044beb5ed98f7b741088ab318", "commitAfterChange": "b171a3cb32409185b8e78b9cb506987b409517f9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void fillInDefaultNonNullness(FieldDeclaration sourceField, Scope scope)", "signatureAfterChange": "  public void fillInDefaultNonNullness(FieldDeclaration sourceField, Scope scope)", "diff": ["-\tif (   this.type != null", "-\t\t&& !this.type.isBaseType()", "+\tif (this.type == null)", "+\t\treturn;", "+\tif (environment.usesNullTypeAnnotations() && !this.type.acceptsNonNullDefault())", "+\t\treturn;", "+\tif (   !this.type.isBaseType()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87f3aed02802b42c07d02d0934a07ee3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchMatch.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-\t\tif ((this.matchRule & SearchPattern.R_EQUIVALENT_MATCH) != 0) {", "-\t\t\tbuffer.append(\"EQUIVALENT\"); //$NON-NLS-1$", "-\t\t\tif ((this.matchRule & SearchPattern.R_ERASURE_MATCH) != 0)", "-\t\t\t\tbuffer.append(\"+ERASURE\"); //$NON-NLS-1$", "-\t\t} else if ((this.matchRule & SearchPattern.R_ERASURE_MATCH) != 0) {", "-\t\t\tbuffer.append(\"ERASURE\"); //$NON-NLS-1$", "-\t\t} else {", "+\t\tif ((this.rule & SearchPattern.R_FULL_MATCH) != 0) {", "+\t\t} else if ((this.rule & SearchPattern.R_EQUIVALENT_MATCH) != 0) {", "+\t\t\tbuffer.append(\"EQUIVALENT\"); //$NON-NLS-1$", "+\t\t} else if ((this.rule & SearchPattern.R_ERASURE_MATCH) != 0) {", "+\t\t\tbuffer.append(\"ERASURE\"); //$NON-NLS-1$", "+\t\tbuffer.append(\"\\n  raw=\"); //$NON-NLS-1$", "+\t\tbuffer.append(this.raw);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3063d4f73d4d3b457de299e46061a21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "0a204bec13c166245ab38aefac187fb60ca5634f", "commitAfterChange": "60cbdce444f3fcf3297f6f80ad9fdcf610a9a0c4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, TypeBinding expectedType, Map collectedSubstitutes, TypeBinding[] substitutes)", "signatureAfterChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, TypeBinding expectedType, Map collectedSubstitutes, TypeBinding[] substitutes)", "diff": ["-\t\t\t\t\tif (argAlreadyInferred)", "+\t\t\t\t\tif (argAlreadyInferred) {", "+\t\t\t\t\t}", "-\t\t\t\t\tif (argAlreadyInferred)", "+\t\t\t\t\tif (argAlreadyInferred) {", "+\t\t\t\t\t}", "-\t\t}\t\t", "+\t\t}", "+\t\t// may still need an extra substitution at the end (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=121369)", "+\t\t// to properly substitute a remaining unresolved variable which also appear in a formal bound", "+\t\tthis.typeArguments = Scope.substitute(this, this.typeArguments);"]}], "num": 17434}
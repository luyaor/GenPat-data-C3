{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24222cd3c95ededeb6917ca878549076", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9db02959f0f2034e763895721d2ea592", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeDeclarationImpl.java", "commitBeforeChange": "3b5ea00b50d63fc78cd3c242ec3222102b9b9066", "commitAfterChange": "6badce2dccc8e615c2a9287f7b93153c364e5923", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public Collection<FieldDeclaration> getFields()", "signatureAfterChange": "      public Collection<FieldDeclaration> getFields()", "diff": ["-        \tif( field.isSynthetic() ) continue;", "+        \t// note that the name HAS_INCONSISTENT_TYPE_HIERACHY is not a legal java identifier", "+        \t// so there is no chance that we are filtering out actual declared fields.", "+        \tif( field.isSynthetic() || HAS_INCONSISTENT_TYPE_HIERACHY.equals(field.getName())) ", "+        \t\tcontinue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc8afb81d13275f8b490cd0d5dc71b93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "c7530b44102791083c7f5487f5dd4ce7cebdfce6", "commitAfterChange": "f3583cbdecac6b2a3a121f21a86edfd4a2e9d534", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static TypeDeclarationImpl createReferenceType(ITypeBinding binding, BaseProcessorEnv env)", "signatureAfterChange": "     public static TypeDeclarationImpl createReferenceType(ITypeBinding binding, BaseProcessorEnv env)", "diff": ["-        if(binding == null || binding.isNullType()) return null;        ", "+        if(binding == null || binding.isNullType()) return null;", "+        // \"Recovered\" bindings are bindings to unresolved types.  The type itself may be considered", "+        // to exist (as an ErrorType) but there is no declaration.", "+        if (binding.isRecovered()) return null;", "+        "]}], "num": 10679}
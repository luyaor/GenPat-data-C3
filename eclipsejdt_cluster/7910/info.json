{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e9c23e689018980cd9f354852db5e08", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30773a3bd588ac6f2a5cb7b48d7ff100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "8d7196c62e122781f984b6fec99acaaaff2c9b12", "commitAfterChange": "c40d37b31933df685287603b7876ab2876472c95", "methodNumberBeforeChange": 220, "methodNumberAfterChange": 220, "signatureBeforeChange": " public void testBug233187a()", "signatureAfterChange": " public void testBug233187a()", "diff": ["-\t\t\"X.java\",", "-\t\t\"package test.bug;\\n\" + ", "+\t\t\"test/a/X.java\",", "+\t\t\"package test.a;\\n\" + ", "-\t\t\"             * {@link X.Y#foo(test.bug.X.Y.Z[])} OK for javadoc tool\\n\" + ", "-\t\t\"             * {@link X.Y#foo(test.bug.X.Y.Z)} KO for javadoc tool\\n\" + ", "-\t\t\"             * {@link X.Y#foo(no_test.bug.X.Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"             * {@link X.Y#foo(test.a.X.Y.Z[])} OK for javadoc tool\\n\" + ", "+\t\t\"             * {@link X.Y#foo(test.a.X.Y.Z)} KO for javadoc tool\\n\" + ", "+\t\t\"             * {@link X.Y#foo(no_test.a.X.Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t\"             * {@link test.bug.X.Y#foo(Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"             * {@link test.a.X.Y#foo(Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t// warning - Tag @link: can't find foo(test.bug.X.Y.Z) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(no_test.bug.X.Y.Z[]) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(Y.Z[]) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(Y.Z[]) in test.bug.X.Y", "+\t\t// warning - Tag @link: can't find foo(test.a.X.Y.Z) in test.a.X.Y", "+\t\t// warning - Tag @link: can't find foo(no_test.a.X.Y.Z[]) in test.a.X.Y", "+\t\t// warning - Tag @link: can't find foo(Y.Z[]) in test.a.X.Y", "+\t\t// warning - Tag @link: can't find foo(Y.Z[]) in test.a.X.Y", "-\t\t\"1. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"\t* {@link X.Y#foo(test.bug.X.Y.Z)} KO for javadoc tool\\n\" + ", "+\t\t\"1. ERROR in test\\\\a\\\\X.java (at line 10)\\n\" + ", "+\t\t\"\t* {@link X.Y#foo(test.a.X.Y.Z)} KO for javadoc tool\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\t* {@link X.Y#foo(no_test.bug.X.Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t\"\t                 ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"2. ERROR in test\\\\a\\\\X.java (at line 11)\\n\" + ", "+\t\t\"\t* {@link X.Y#foo(no_test.a.X.Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"\t                 ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"3. ERROR in test\\\\a\\\\X.java (at line 12)\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"\t* {@link test.bug.X.Y#foo(Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t\"\t                          ^^^\\n\" + ", "+\t\t\"4. ERROR in test\\\\a\\\\X.java (at line 13)\\n\" + ", "+\t\t\"\t* {@link test.a.X.Y#foo(Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"\t                        ^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "367f47054b0d1281ceabe35b8257c798", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 506, "methodNumberAfterChange": 506, "signatureBeforeChange": " \tpublic void test502()", "signatureAfterChange": " \tpublic void test502()", "diff": ["-\t\t\t\"     0  new X [2]\\n\" + ", "+\t\t\t\"     0  new X [1]\\n\" + ", "-\t\t\t\"     4  new BX [27]\\n\" + ", "+\t\t\t\"     4  new BX [26]\\n\" + ", "-\t\t\t\"    11  invokespecial X(AX) [30]\\n\" + ", "+\t\t\t\"    11  invokespecial X(AX) [29]\\n\" + ", "-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "-\t\t\t\"    19  invokevirtual X.self() : X  [40]\\n\" + ", "-\t\t\t\"    22  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    25  checkcast BX [27]\\n\" + ", "-\t\t\t\"    28  getfield BX.ax : java.lang.Object [44]\\n\" + ", "-\t\t\t\"    31  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [50]\\n\" + ", "-\t\t\t\"    34  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "+\t\t\t\"    19  invokevirtual X.self() : X [37]\\n\" + ", "+\t\t\t\"    22  getfield X.t : AX [16]\\n\" + ", "+\t\t\t\"    25  checkcast BX [26]\\n\" + ", "+\t\t\t\"    28  getfield BX.ax : java.lang.Object [41]\\n\" + ", "+\t\t\t\"    31  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [45]\\n\" + ", "+\t\t\t\"    34  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "-\t\t\t\"    38  invokevirtual X.self() : X  [40]\\n\" + ", "-\t\t\t\"    41  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    44  checkcast BX [27]\\n\" + ", "-\t\t\t\"    47  getfield BX.bx : java.lang.Object [53]\\n\" + ", "-\t\t\t\"    50  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [50]\\n\" + ", "+\t\t\t\"    38  invokevirtual X.self() : X [37]\\n\" + ", "+\t\t\t\"    41  getfield X.t : AX [16]\\n\" + ", "+\t\t\t\"    44  checkcast BX [26]\\n\" + ", "+\t\t\t\"    47  getfield BX.bx : java.lang.Object [51]\\n\" + ", "+\t\t\t\"    50  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [45]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44d763afc5fa719371f9a8fdcf23ba69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testStringAnyStrings06() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings06() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4df2ca0b818db886116771bc74a44ca5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 571, "methodNumberAfterChange": 571, "signatureBeforeChange": " public void testBug210567() throws CoreException", "signatureAfterChange": " public void testBug210567() throws CoreException", "diff": ["-\t\t\"src/generics/Generic.java [import \ufffd|java.io.Serializable|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java [import \ufffd|type.def.Types|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.field [\t\ufffd|Generic|\ufffd<? extends Types, ?, ?> field;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.comp [\t\ufffd|Comparable|\ufffd<String> comp;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.clazz [\t\ufffd|Class|\ufffd<? extends Exception> clazz;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;] EXACT_MATCH\"", "+\t\t\"src/generics/Generic.java [import !|java.io.Serializable|!;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java [import !|type.def.Types|!;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends !|Types|!, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends !|Types|! & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & !|Comparable|!<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<!|Types|!> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & !|Serializable|!, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends !|A|!<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super !|Types|!>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.field [\t!|Generic|!<? extends Types, ?, ?> field;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.field [\tGeneric<? extends !|Types|!, ?, ?> field;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.comp [\t!|Comparable|!<String> comp;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.comp [\tComparable<!|String|!> comp;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.clazz [\t!|Class|!<? extends Exception> clazz;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.clazz [\tClass<? extends !|Exception|!> clazz;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "779ef2ae58621bc9e68b4253e97c3d2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test020()", "signatureAfterChange": " public void test020()", "diff": ["-\t\t\"     4  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     9  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"    13  astore [local_4]\\n\" + ", "+\t\t\"    13  astore 4\\n\" + ", "-\t\t\"    16  istore_2 [local_2]\\n\" + ", "-\t\t\"    17  aload [local_4]\\n\" + ", "+\t\t\"    16  istore_2\\n\" + ", "+\t\t\"    17  aload 4\\n\" + ", "-\t\t\"    20  istore_3 [local_3]\\n\" + ", "+\t\t\"    20  istore_3\\n\" + ", "-\t\t\"    24  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    29  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "-\t\t\"    32  iinc 2 1 [local_2]\\n\" + ", "-\t\t\"    35  iload_2 [local_2]\\n\" + ", "-\t\t\"    36  iload_3 [local_3]\\n\" + ", "+\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"    32  iinc 2 1\\n\" + ", "+\t\t\"    35  iload_2\\n\" + ", "+\t\t\"    36  iload_3\\n\" + ", "-\t\t\"    40  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    45  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [36]\\n\" + ", "+\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [36]\\n\" + ", "-\t\t\"        [pc: 0, pc: 49] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 4, pc: 49] local: tab index: 1 type: [I\\n\";", "+\t\t\"        [pc: 0, pc: 49] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 4, pc: 49] local: tab index: 1 type: int[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e7ff6f916aabef5c0bddf3c58ab8cb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 566, "methodNumberAfterChange": 566, "signatureBeforeChange": " public void testBug210567() throws CoreException", "signatureAfterChange": " public void testBug210567() throws CoreException", "diff": ["-\t\t\"src/generics/Generic.java [import \ufffd|java.io.Serializable|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java [import \ufffd|type.def.Types|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.field [\t\ufffd|Generic|\ufffd<? extends Types, ?, ?> field;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.comp [\t\ufffd|Comparable|\ufffd<String> comp;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.clazz [\t\ufffd|Class|\ufffd<? extends Exception> clazz;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;] EXACT_MATCH\"", "+\t\t\"src/generics/Generic.java [import \ufffd|java.io.Serializable|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java [import \ufffd|type.def.Types|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.field [\t\ufffd|Generic|\ufffd<? extends Types, ?, ?> field;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.comp [\t\ufffd|Comparable|\ufffd<String> comp;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.clazz [\t\ufffd|Class|\ufffd<? extends Exception> clazz;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c21399f357a7c052f5fd5da90ba6192", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "27a11ce8ecc325901777098d9d0eafdb0be3dc5b", "commitAfterChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "methodNumberBeforeChange": 566, "methodNumberAfterChange": 566, "signatureBeforeChange": " public void testBug210567() throws CoreException", "signatureAfterChange": " public void testBug210567() throws CoreException", "diff": ["-\t\t\"src/generics/Generic.java [import \ufffd|java.io.Serializable|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java [import \ufffd|type.def.Types|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.field [\t\ufffd|Generic|\ufffd<? extends Types, ?, ?> field;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.comp [\t\ufffd|Comparable|\ufffd<String> comp;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.clazz [\t\ufffd|Class|\ufffd<? extends Exception> clazz;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;] EXACT_MATCH\"", "+\t\t\"src/generics/Generic.java [import \ufffd|java.io.Serializable|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java [import \ufffd|type.def.Types|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.field [\t\ufffd|Generic|\ufffd<? extends Types, ?, ?> field;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.comp [\t\ufffd|Comparable|\ufffd<String> comp;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.clazz [\t\ufffd|Class|\ufffd<? extends Exception> clazz;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a092208212606deaf4eb6cbb52ac3b9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 504, "methodNumberAfterChange": 504, "signatureBeforeChange": " \tpublic void test502()", "signatureAfterChange": " \tpublic void test502()", "diff": ["-\t\t\t\"     8  invokespecial BX.<init>()V [28]\\n\" + ", "-\t\t\t\"    11  invokespecial X.<init>(LAX;)V [30]\\n\" + ", "+\t\t\t\"     8  invokespecial BX() [28]\\n\" + ", "+\t\t\t\"    11  invokespecial X(AX) [30]\\n\" + ", "-\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [36]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "-\t\t\t\"    19  invokevirtual X.self()LX; [40]\\n\" + ", "-\t\t\t\"    22  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    19  invokevirtual X.self() : X  [40]\\n\" + ", "+\t\t\t\"    22  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    28  getfield BX.ax Ljava/lang/Object; [44]\\n\" + ", "-\t\t\t\"    31  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [50]\\n\" + ", "-\t\t\t\"    34  getstatic java/lang/System.out Ljava/io/PrintStream; [36]\\n\" + ", "+\t\t\t\"    28  getfield BX.ax : java.lang.Object [44]\\n\" + ", "+\t\t\t\"    31  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [50]\\n\" + ", "+\t\t\t\"    34  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "-\t\t\t\"    38  invokevirtual X.self()LX; [40]\\n\" + ", "-\t\t\t\"    41  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    38  invokevirtual X.self() : X  [40]\\n\" + ", "+\t\t\t\"    41  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    47  getfield BX.bx Ljava/lang/Object; [53]\\n\" + ", "-\t\t\t\"    50  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [50]\\n\" + ", "+\t\t\t\"    47  getfield BX.bx : java.lang.Object [53]\\n\" + ", "+\t\t\t\"    50  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [50]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 54] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 15, pc: 54] local: x index: 1 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 54] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 15, pc: 54] local: x index: 1 type: X\\n\" + ", "-\t\t\t\"        [pc: 15, pc: 54] local: x index: 1 type: LX<+LBX;>;\\n\";", "+\t\t\t\"        [pc: 15, pc: 54] local: x index: 1 type: X<? extends BX>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c183214621a1fce5ce609c3715c007ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "commitAfterChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "methodNumberBeforeChange": 566, "methodNumberAfterChange": 566, "signatureBeforeChange": " public void testBug210567() throws CoreException", "signatureAfterChange": " public void testBug210567() throws CoreException", "diff": ["-\t\t\"src/generics/Generic.java [import \ufffd|java.io.Serializable|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java [import \ufffd|type.def.Types|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.field [\t\ufffd|Generic|\ufffd<? extends Types, ?, ?> field;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.comp [\t\ufffd|Comparable|\ufffd<String> comp;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.clazz [\t\ufffd|Class|\ufffd<? extends Exception> clazz;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;] EXACT_MATCH\"", "+\t\t\"src/generics/Generic.java [import \ufffd|java.io.Serializable|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java [import \ufffd|type.def.Types|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.field [\t\ufffd|Generic|\ufffd<? extends Types, ?, ?> field;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.comp [\t\ufffd|Comparable|\ufffd<String> comp;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.clazz [\t\ufffd|Class|\ufffd<? extends Exception> clazz;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db06a151cc858ac64d8ec5bd9b883595", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 566, "methodNumberAfterChange": 566, "signatureBeforeChange": " public void testBug210567() throws CoreException", "signatureAfterChange": " public void testBug210567() throws CoreException", "diff": ["-\t\t\"src/generics/Generic.java [import \ufffd|java.io.Serializable|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java [import \ufffd|type.def.Types|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.field [\t\ufffd|Generic|\ufffd<? extends Types, ?, ?> field;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.comp [\t\ufffd|Comparable|\ufffd<String> comp;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.clazz [\t\ufffd|Class|\ufffd<? extends Exception> clazz;] EXACT_MATCH\\n\" +", "-\t\t\"src/generics/Generic.java generics.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;] EXACT_MATCH\"", "+\t\t\"src/generics/Generic.java [import \ufffd|java.io.Serializable|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java [import \ufffd|type.def.Types|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.field [\t\ufffd|Generic|\ufffd<? extends Types, ?, ?> field;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.comp [\t\ufffd|Comparable|\ufffd<String> comp;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.clazz [\t\ufffd|Class|\ufffd<? extends Exception> clazz;] EXACT_MATCH\\n\" +", "+\t\t\"src/generics/Generic.java generics.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;] EXACT_MATCH\""]}], "num": 7910}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d352893ed6e9317400ca9e4e49532ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "823bc704c56b590fe6dc294796c6cf18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 40, "signatureBeforeChange": " protected void makeWorkingCopiesConsistent(IJavaElementDelta[] deltas)", "signatureAfterChange": " \tprotected int lastActionWithID(String id)", "diff": ["- */", "-protected void makeWorkingCopiesConsistent(IJavaElementDelta[] deltas) {", "-\tfor (int i= 0; i < deltas.length; i++) {", "-\t\twalkDeltaMakingWorkingCopiesConsistent(deltas[i]);", "-\t}", "-}", "+\t * Returns -1 if not found.\r\t */", "+\tprotected int lastActionWithID(String id) {", "+\t\tint existing = -1;", "+\t\tfor (int i = this.actionsPtr; i >= 0; i--) {", "+\t\t\tif (this.actions[i].getID().equals(id)) {", "+\t\t\t\texisting = i;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\treturn existing;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c50f25f9584b7a600faf183fb40f8472", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BufferManager.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public static byte[] getResourceContentsAsBytes(IFile file) throws JavaModelException", "signatureAfterChange": "\r public static byte[] getResourceContentsAsBytes(IFile file) throws JavaModelException", "diff": ["-\tbyte[] grow;\r", "-\t\tint available = stream.available();\r", "-\t\tint pos = 0;\r", "-\t\twhile (available > 0) {\r", "-\t\t\tgrow = new byte[contents.length + available];\r", "-\t\t\tSystem.arraycopy(contents, 0, grow, 0, contents.length);\r", "-\t\t\tcontents = grow;\r", "-\t\t\tstream.read(contents, pos, available);\r", "-\t\t\tavailable = stream.available();\r", "+\t\tint contentsLength = 0;\r", "+\t\tint bytesRead = -1;\r", "+\t\tdo {\r", "+\t\t\tint available= stream.available();\r", "+\t\t\t\r", "+\t\t\t// resize contents if needed\r", "+\t\t\tif (contentsLength + available > contents.length) {\r", "+\t\t\t\tSystem.arraycopy(contents, 0, contents = new byte[contentsLength + available], 0, contentsLength);\r", "+\t\t\t}\r", "+\r", "+\t\t\t// read as many bytes as possible\r", "+\t\t\tbytesRead = stream.read(contents, contentsLength, available);\r", "+\t\t\t\r", "+\t\t\tif (bytesRead > 0) {\r", "+\t\t\t\t// remember length of contents\r", "+\t\t\t\tcontentsLength += bytesRead;\r", "+\t\t\t}\r", "+\t\t} while (bytesRead > 0);\r", "+\t\t\r", "+\t\t// resize contents if necessary\r", "+\t\tif (contentsLength < contents.length) {\r", "+\t\t\tSystem.arraycopy(contents, 0, contents = new byte[contentsLength], 0, contentsLength);\r"]}], "num": 62756}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a24954f4ce22277d9f7f07aa06ca8d4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5abf00faa80691d1580efcece8b45c72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r \tpublic FlowInfo analyseAssignment(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo,\r \t\tAssignment assignment,\r \t\tboolean isCompound)", "signatureAfterChange": "\r \tpublic FlowInfo analyseAssignment(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo,\r \t\tAssignment assignment,\r \t\tboolean isCompound)", "diff": ["-\r", "-\r", "-\t\t\t\t\tmanageSyntheticReadAccessIfNecessary(currentScope, lastFieldBinding, i);\r", "+\t\t\t\t\tTypeBinding lastReceiverType;\r", "+\t\t\t\t\tswitch(i){\r", "+\t\t\t\t\t\tcase 0 :\r", "+\t\t\t\t\t\t\tlastReceiverType = this.actualReceiverType;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase 1 :\r", "+\t\t\t\t\t\t\tlastReceiverType = ((VariableBinding)binding).type;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tdefault :\r", "+\t\t\t\t\t\t\tlastReceiverType = otherBindings[i-1].type;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tmanageSyntheticReadAccessIfNecessary(\r", "+\t\t\t\t\t\tcurrentScope, \r", "+\t\t\t\t\t\tlastFieldBinding, \r", "+\t\t\t\t\t\tlastReceiverType,\r", "+\t\t\t\t\t\ti);\r", "+\t\t\tTypeBinding lastReceiverType;\r", "+\t\t\tif (lastFieldBinding == binding){\r", "+\t\t\t\tlastReceiverType = this.actualReceiverType;\r", "+\t\t\t} else if (otherBindingsCount == 1){\r", "+\t\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;\r", "+\t\t\t} else {\r", "+\t\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;\r", "+\t\t\t}\r", "-\t\t\t\tbinding == lastFieldBinding ? 0 : otherBindings.length);\r", "+\t\t\t\tlastReceiverType,\r", "+\t\t\t\tlastFieldBinding == binding\r", "+\t\t\t\t\t? 0 \r", "+\t\t\t\t\t: otherBindingsCount);\r", "-\t\tmanageSyntheticWriteAccessIfNecessary(currentScope, lastFieldBinding);\r", "+\t\tTypeBinding lastReceiverType;\r", "+\t\tif (lastFieldBinding == binding){\r", "+\t\t\tlastReceiverType = this.actualReceiverType;\r", "+\t\t} else if (otherBindingsCount == 1){\r", "+\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;\r", "+\t\t} else {\r", "+\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;\r", "+\t\t}\r", "+\t\tmanageSyntheticWriteAccessIfNecessary(currentScope, lastFieldBinding, lastReceiverType);\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8106d45be984c1d3018b0249512ee90f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocImplicitTypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding internalResolveType(Scope scope)", "diff": ["-\tprivate TypeBinding internalResolveType(Scope scope) {", "+\tprotected TypeBinding internalResolveType(Scope scope) {", "-\t\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "-\t\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "-", "-\t\tthis.resolvedType = scope.enclosingReceiverType();", "-\t\tif (this.resolvedType == null)", "+\t\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "+\t\t\tif (this.resolvedType.isValidBinding()) {", "+\t\t\t\treturn this.resolvedType;", "+\t\t\t} else {", "+\t\t\t\tswitch (this.resolvedType.problemId()) {", "+\t\t\t\t\tcase ProblemReasons.NotFound :", "+\t\t\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\t\t\t\tTypeBinding type = this.resolvedType.closestMatch();", "+\t\t\t\t\t\treturn type;\t\t\t", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t}\t\t\t", "+\t\t\t}", "+\t\t}", "+\t\tboolean hasError;", "+\t\tTypeBinding type = this.resolvedType = getTypeBinding(scope);", "+\t\tif (type == null) {", "-\t\tif (!this.resolvedType.isValidBinding()) {", "+\t\t} else if ((hasError = !type.isValidBinding())== true) {", "+\t\t\tswitch (type.problemId()) {", "+\t\t\t\tcase ProblemReasons.NotFound :", "+\t\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\t\t\ttype = type.closestMatch();", "+\t\t\t\t\tif (type == null) return null;", "+\t\t\t\t\tbreak;\t\t\t\t\t", "+\t\t\t\tdefault :", "+\t\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\tif (type.isArrayType() && ((ArrayBinding) type).leafComponentType == TypeBinding.VOID) {", "+\t\t\tscope.problemReporter().cannotAllocateVoidArray(this);", "-\t\tif (isTypeUseDeprecated(this.resolvedType, scope))", "-\t\t\treportDeprecatedType(this.resolvedType, scope);", "-\t\t", "+\t\tif (isTypeUseDeprecated(type, scope)) {", "+\t\t\treportDeprecatedType(type, scope);", "+\t\t}", "-\t\tif (this.resolvedType.isGenericType() || this.resolvedType.isParameterizedType()) {", "-\t\t\treturn this.resolvedType = scope.environment().convertToRawType(this.resolvedType, true /*force the conversion of enclosing types*/);", "+\t\tif (type.isGenericType() || type.isParameterizedType()) {", "+\t\t\ttype = scope.environment().convertToRawType(type, true /*force the conversion of enclosing types*/);", "-\t\treturn this.resolvedType;", "+\t\t", "+\t\tif (hasError) {", "+\t\t\t// do not store the computed type, keep the problem type instead", "+\t\t\treturn type;", "+\t\t}", "+\t\treturn this.resolvedType = type;"]}], "num": 20505}
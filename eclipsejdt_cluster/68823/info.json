{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba46cce29bed988a049e9863a2833192", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4387b06d37e103aad46958534dd7aee5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "b1d084f45599e11d80665b306c9b3f617ba97f32", "commitAfterChange": "1780102e8a06260eba129007a669ddcafe6f2f5f", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic TypeBinding[] getNonWildcardParameterization()", "signatureAfterChange": " \tpublic TypeBinding[] getNonWildcardParameterization(Scope scope)", "diff": ["-\tpublic TypeBinding[] getNonWildcardParameterization() {", "+\tpublic TypeBinding[] getNonWildcardParameterization(Scope scope) {", "-\t\t\t\t\t\tReferenceBinding[] allBounds = new ReferenceBinding[len];", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tint idx = 0;", "-\t\t\t\t\t\t\t// Ui", "-\t\t\t\t\t\t\tallBounds[idx++] = (ReferenceBinding) wildcard.bound;", "-\t\t\t\t\t\t\tif (otherUBounds != null)", "-\t\t\t\t\t\t\t\tfor (int j = 0; j < otherUBounds.length; j++)", "-\t\t\t\t\t\t\t\t\tallBounds[idx++] = (ReferenceBinding) otherUBounds[j];", "-\t\t\t\t\t\t\t// Bi", "-\t\t\t\t\t\t\tif (typeParameters[i].firstBound != null)", "-\t\t\t\t\t\t\t\tallBounds[idx++] = (ReferenceBinding) typeParameters[i].firstBound;", "-\t\t\t\t\t\t\tfor (int j = 0; j < otherBBounds.length; j++)", "-\t\t\t\t\t\t\t\tallBounds[idx++] = (ReferenceBinding) otherBBounds[j];", "-\t\t\t\t\t\t} catch (ClassCastException cce) {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tReferenceBinding[] glb = Scope.greaterLowerBound(allBounds);", "+\t\t\t\t\t\tTypeBinding[] allBounds = new TypeBinding[len]; // TypeBinding so that in this round we accept ArrayBinding, too.", "+\t\t\t\t\t\tint idx = 0;", "+\t\t\t\t\t\t// Ui", "+\t\t\t\t\t\tallBounds[idx++] = wildcard.bound;", "+\t\t\t\t\t\tif (otherUBounds != null)", "+\t\t\t\t\t\t\tfor (int j = 0; j < otherUBounds.length; j++)", "+\t\t\t\t\t\t\t\tallBounds[idx++] = otherUBounds[j];", "+\t\t\t\t\t\t// Bi", "+\t\t\t\t\t\tif (typeParameters[i].firstBound != null)", "+\t\t\t\t\t\t\tallBounds[idx++] = typeParameters[i].firstBound;", "+\t\t\t\t\t\tfor (int j = 0; j < otherBBounds.length; j++)", "+\t\t\t\t\t\t\tallBounds[idx++] = otherBBounds[j];", "+\t\t\t\t\t\tTypeBinding[] glb = Scope.greaterLowerBound(allBounds, null, this.environment);", "-\t\t\t\t\t\t\ttypes[i] = new IntersectionCastTypeBinding(glb, this.environment);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tReferenceBinding[] refs = new ReferenceBinding[glb.length];", "+\t\t\t\t\t\t\t\tSystem.arraycopy(glb, 0, refs, 0, glb.length); // TODO: if an array type plus more types get here, we get ArrayStoreException!", "+\t\t\t\t\t\t\t\ttypes[i] = new IntersectionCastTypeBinding(refs, this.environment);", "+\t\t\t\t\t\t\t} catch (ArrayStoreException ase) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().genericInferenceError(\"Cannot compute glb of \"+Arrays.toString(glb), null); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3f7a4bab3760430d64fec579b14f25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void traverse( \t\tASTVisitor visitor, \t\tCompilationUnitScope unitScope)", "signatureAfterChange": " \tpublic void traverse( \t\tASTVisitor visitor, \t\tCompilationUnitScope unitScope)", "diff": ["-\t\t\t\tif (superclass != null)", "-\t\t\t\t\tsuperclass.traverse(visitor, scope);", "-\t\t\t\tif (superInterfaces != null) {", "-\t\t\t\t\tint superInterfaceLength = superInterfaces.length;", "-\t\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++)", "-\t\t\t\t\t\tsuperInterfaces[i].traverse(visitor, scope);", "+\t\t\t\tif (this.annotations != null) {", "+\t\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t\tif (memberTypes != null) {", "-\t\t\t\t\tint memberTypesLength = memberTypes.length;", "-\t\t\t\t\tfor (int i = 0; i < memberTypesLength; i++)", "-\t\t\t\t\t\tmemberTypes[i].traverse(visitor, scope);", "+\t\t\t\tif (this.superclass != null)", "+\t\t\t\t\tthis.superclass.traverse(visitor, scope);", "+\t\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, scope);", "-\t\t\t\tif (fields != null) {", "-\t\t\t\t\tint fieldsLength = fields.length;", "-\t\t\t\t\tfor (int i = 0; i < fieldsLength; i++) {", "+\t\t\t\tif (this.typeParameters != null) {", "+\t\t\t\t\tint length = this.typeParameters.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tif (this.memberTypes != null) {", "+\t\t\t\t\tint length = this.memberTypes.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.memberTypes[i].traverse(visitor, scope);", "+\t\t\t\t}", "+\t\t\t\tif (this.enums != null) {", "+\t\t\t\t\tint length = this.enums.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.enums[i].traverse(visitor, scope);", "+\t\t\t\t}", "+\t\t\t\tif (this.fields != null) {", "+\t\t\t\t\tint length = this.fields.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tif ((field = fields[i]).isStatic()) {", "+\t\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "-\t\t\t\tif (methods != null) {", "-\t\t\t\t\tint methodsLength = methods.length;", "-\t\t\t\t\tfor (int i = 0; i < methodsLength; i++)", "-\t\t\t\t\t\tmethods[i].traverse(visitor, scope);", "+\t\t\t\tif (this.methods != null) {", "+\t\t\t\t\tint length = this.methods.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.methods[i].traverse(visitor, scope);"]}], "num": 68823}
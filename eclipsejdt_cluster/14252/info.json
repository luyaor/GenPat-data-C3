{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f54a2da8412a89a9fd2f26a46493db58", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "097e257ed61b23089b1b5aa8c7b8d172", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2548efb91bb743c25fd3bab3833473b467f314a0", "commitAfterChange": "f4a6a4aada4b614e2acc0db0bdcfb1edac95da6d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] simpleTypeName, \t\tchar[][] enclosingTypeNames, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] simpleTypeName, \t\tchar[][] enclosingTypeNames, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "diff": ["-\t */", "-\tpublic void acceptType(", "-\t\tchar[] packageName,", "-\t\tchar[] simpleTypeName,", "-\t\tchar[][] enclosingTypeNames,", "-\t\tint modifiers,", "-\t\tAccessRestriction accessRestriction) {", "-", "-\t\tif (this.options.checkDeprecation && (modifiers & ClassFileConstants.AccDeprecated) != 0) return;", "-", "-\t\tif (this.options.checkVisibility) {", "-\t\t\tif((modifiers & ClassFileConstants.AccPublic) == 0) {", "-\t\t\t\tif((modifiers & ClassFileConstants.AccPrivate) != 0) return;", "-", "-\t\t\t\tchar[] currentPackage = CharOperation.concatWith(this.unitScope.fPackage.compoundName, '.');", "-\t\t\t\tif(!CharOperation.equals(packageName, currentPackage)) return;", "-\t\t\t}", "-\t\t}", "-", "-\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "-\t\tif(accessRestriction != null) {", "-\t\t\tswitch (accessRestriction.getProblemId()) {", "-\t\t\t\tcase IProblem.ForbiddenReference:", "-\t\t\t\t\tif (this.options.checkForbiddenReference) {", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IProblem.DiscouragedReference:", "-\t\t\t\t\tif (this.options.checkDiscouragedReference) {", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-", "-\t\tif(this.acceptedTypes == null) {", "-\t\t\tthis.acceptedTypes = new ObjectVector();", "-\t\t}", "-\t\tthis.acceptedTypes.add(new AcceptedType(packageName, simpleTypeName, enclosingTypeNames, modifiers, accessibility));", "-\t}", "+\t */", "+\tpublic void acceptType(", "+\t\tchar[] packageName,", "+\t\tchar[] simpleTypeName,", "+\t\tchar[][] enclosingTypeNames,", "+\t\tint modifiers,", "+\t\tAccessRestriction accessRestriction) {", "+\t\t", "+\t\t// does not check cancellation for every types to avoid performance loss", "+\t\tif ((this.foundTypesCount % CHECK_CANCEL_FREQUENCY_IN_FIND_TYPES) == 0) checkCancel();", "+\t\tthis.foundTypesCount++;", "+\t\t", "+\t\tif (this.options.checkDeprecation && (modifiers & ClassFileConstants.AccDeprecated) != 0) return;", "+", "+\t\tif (this.options.checkVisibility) {", "+\t\t\tif((modifiers & ClassFileConstants.AccPublic) == 0) {", "+\t\t\t\tif((modifiers & ClassFileConstants.AccPrivate) != 0) return;", "+", "+\t\t\t\tchar[] currentPackage = CharOperation.concatWith(this.unitScope.fPackage.compoundName, '.');", "+\t\t\t\tif(!CharOperation.equals(packageName, currentPackage)) return;", "+\t\t\t}", "+\t\t}", "+", "+\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "+\t\tif(accessRestriction != null) {", "+\t\t\tswitch (accessRestriction.getProblemId()) {", "+\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\t\tif (this.options.checkForbiddenReference) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\tif (this.options.checkDiscouragedReference) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+", "+\t\tif(this.acceptedTypes == null) {", "+\t\t\tthis.acceptedTypes = new ObjectVector();", "+\t\t}", "+\t\tthis.acceptedTypes.add(new AcceptedType(packageName, simpleTypeName, enclosingTypeNames, modifiers, accessibility));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c82b44e728c90d576ca1a803047914e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java", "commitBeforeChange": "b9b3b8c1fedf5d6daa213336839897b001a3416e", "commitAfterChange": "bdd2ddc06125eff9d34246fb7941b569e87e3115", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "signatureAfterChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "diff": ["-\ttry {", "-\t\tIType type = null;", "-\t\tif (this.handleFactory != null) {", "-\t\t\tOpenable openable = this.handleFactory.createOpenable(path, this.scope);", "-\t\t\tif (openable == null) return;", "-\t\t\tswitch (openable.getElementType()) {", "-\t\t\t\tcase IJavaElement.COMPILATION_UNIT:", "-\t\t\t\t\tICompilationUnit cu = (ICompilationUnit) openable;", "-\t\t\t\t\tif (enclosingTypeNames != null && enclosingTypeNames.length > 0) {", "-\t\t\t\t\t\ttype = cu.getType(new String(enclosingTypeNames[0]));", "-\t\t\t\t\t\tfor (int j=1, l=enclosingTypeNames.length; j<l; j++) {", "-\t\t\t\t\t\t\ttype = type.getType(new String(enclosingTypeNames[j]));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttype = type.getType(new String(simpleTypeName));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\ttype = cu.getType(new String(simpleTypeName));", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t\ttype = ((IClassFile)openable).getType();", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tint separatorIndex= path.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR);", "-\t\t\ttype = separatorIndex == -1", "-\t\t\t\t? createTypeFromPath(path, new String(simpleTypeName), enclosingTypeNames)", "-\t\t\t\t: createTypeFromJar(path, separatorIndex);", "-\t\t}", "+\tIType type = getType(modifiers, packageName, simpleTypeName, enclosingTypeNames, path, access);", "+\t// Accept match if the type has been found", "+\tif (type != null) {", "+\t\t// hierarchy scopes require one more check:", "+\t\tif (!(this.scope instanceof HierarchyScope) || ((HierarchyScope)this.scope).enclosesFineGrained(type)) {", "-\t\t// Accept match if the type has been found", "-\t\tif (type != null) {", "-\t\t\t// hierarchy scopes require one more check:", "-\t\t\tif (!(this.scope instanceof HierarchyScope) || ((HierarchyScope)this.scope).enclosesFineGrained(type)) {", "+\t\t\t// Create the match", "+\t\t\tfinal JavaSearchTypeNameMatch match = new JavaSearchTypeNameMatch(type, modifiers);", "-\t\t\t\t// Create the match", "-\t\t\t\tfinal JavaSearchTypeNameMatch match = new JavaSearchTypeNameMatch(type, modifiers);", "-", "-\t\t\t\t// Update match accessibility", "-\t\t\t\tif(access != null) {", "-\t\t\t\t\tswitch (access.getProblemId()) {", "-\t\t\t\t\t\tcase IProblem.ForbiddenReference:", "-\t\t\t\t\t\t\tmatch.setAccessibility(IAccessRule.K_NON_ACCESSIBLE);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IProblem.DiscouragedReference:", "-\t\t\t\t\t\t\tmatch.setAccessibility(IAccessRule.K_DISCOURAGED);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t// Update match accessibility", "+\t\t\tif(access != null) {", "+\t\t\t\tswitch (access.getProblemId()) {", "+\t\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\t\t\tmatch.setAccessibility(IAccessRule.K_NON_ACCESSIBLE);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\t\tmatch.setAccessibility(IAccessRule.K_DISCOURAGED);", "+\t\t\t\t\t\tbreak;", "-", "-\t\t\t\t// Accept match", "-\t\t\t\tthis.requestor.acceptTypeNameMatch(match);", "+\t\t\t// Accept match", "+\t\t\tthis.requestor.acceptTypeNameMatch(match);", "-\t} catch (JavaModelException e) {", "-\t\t// skip", "-}"]}], "num": 14252}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ff360f09e88dc331578ca07aa531c8f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09882ab9160a61f5e7eb77075307927d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\t \tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration) {", "+\tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration) {", "+\t\tif (methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationTypeMemberDeclaration) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AnnotationTypeMemberDeclaration) methodDeclaration);", "+\t\t}", "-\t\tmethodDecl.setModifiers(methodDeclaration.modifiers & org.eclipse.jdt.internal.compiler.lookup.CompilerModifiers.AccJustFlag);", "+\t\tif ((methodDeclaration.modifiers & CompilerModifiers.AccJustFlag) != 0) {", "+\t\t\tsetModifiers(methodDecl, methodDeclaration);", "+\t\t}", "-\t\t\t// set the return type to VOID", "-\t\t\tPrimitiveType returnType = this.ast.newPrimitiveType(PrimitiveType.VOID);", "-\t\t\treturnType.setSourceRange(methodDeclaration.sourceStart, 0);", "-\t\t\tmethodDecl.setReturnType(returnType);", "-\t\t} else {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t// set the return type to VOID", "+\t\t\t\t\tPrimitiveType returnType = this.ast.newPrimitiveType(PrimitiveType.VOID);", "+\t\t\t\t\treturnType.setSourceRange(methodDeclaration.sourceStart, 0);", "+\t\t\t\t\tmethodDecl.setReturnType(returnType);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tmethodDecl.setReturnType2(null);", "+\t\t\t}", "+\t\t} else if (methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) {", "-\t\tint closingPosition = retrieveRightBraceOrSemiColonPosition(methodDecl, methodDeclaration);", "+\t\tint closingPosition = retrieveRightBraceOrSemiColonPosition(methodDeclaration.bodyEnd, methodDeclaration.declarationSourceEnd);", "-\t\t\tmethodDecl.setSourceRange(startPosition, closingPosition - startPosition);", "+\t\t\tmethodDecl.setSourceRange(startPosition, closingPosition - startPosition + 1);", "+", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();", "+\t\tif (typeParameters != null) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tfor (int i = 0, max = typeParameters.length; i < max; i++) {", "+\t\t\t\t\t\tmethodDecl.typeParameters().add(convert(typeParameters[i]));", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-//\t\tsetJavaDocComment(methodDecl);", "-//\t\tmethodDecl.setJavadoc(convert(methodDeclaration.javadoc));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f076036b032a51882c7d184905a3983", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "a127c18eb2e0be7f3c68a60246b08a9a69e7be5d", "commitAfterChange": "771a62c1c5090742b5612a8958d0207ca0f557cc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration) {", "+\tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration) {", "+\t\t\tif (isInterface) {", "+\t\t\t\t// interface cannot have a constructor", "+\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}", "+\t\t\t\t// no return type for a method that is not a constructor", "+\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\t\tbreak;", "-\t\tint declarationSourceEnd = methodDeclaration.bodyEnd;", "-\t\tmethodDecl.setSourceRange(declarationSourceStart, declarationSourceEnd - declarationSourceStart + 1);", "-\t\tint closingPosition = retrieveRightBraceOrSemiColonPosition(methodDeclaration.bodyEnd + 1, methodDeclaration.declarationSourceEnd);", "+\t\tint bodyEnd = methodDeclaration.bodyEnd;", "+\t\tmethodDecl.setSourceRange(declarationSourceStart, bodyEnd - declarationSourceStart + 1);", "+\t\tint declarationSourceEnd = methodDeclaration.declarationSourceEnd;", "+\t\tint rightBraceOrSemiColonPositionStart = bodyEnd == declarationSourceEnd ? bodyEnd : bodyEnd + 1;", "+\t\tint closingPosition = retrieveRightBraceOrSemiColonPosition(rightBraceOrSemiColonPositionStart, declarationSourceEnd);", "-\t\t\tend = retrieveRightBrace(methodDeclaration.bodyEnd, methodDeclaration.declarationSourceEnd);", "+\t\t\tend = retrieveRightBrace(methodDeclaration.bodyEnd, declarationSourceEnd);", "-\t\t\tif (block != null && (Modifier.isAbstract(methodDecl.getModifiers()) || Modifier.isNative(methodDecl.getModifiers()))) {", "+\t\t\tif (block != null", "+\t\t\t\t\t&& (Modifier.isAbstract(methodDecl.getModifiers())", "+\t\t\t\t\t\t\t|| Modifier.isNative(methodDecl.getModifiers())", "+\t\t\t\t\t\t\t|| isInterface)) {", "-\t\t\t\tstart = retrieveStartBlockPosition(methodHeaderEnd, declarationSourceEnd);", "+\t\t\t\tstart = retrieveStartBlockPosition(methodHeaderEnd, bodyEnd);"]}], "num": 5104}
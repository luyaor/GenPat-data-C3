{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05416769a01c33f4ccfe7ea12cc66b9d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29fdf3d43e98fe741f0df535ad6e3a61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/FactoryLoaderTests.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testExternalJarLoader() throws Exception", "signatureAfterChange": " \t \tpublic void testExternalJarLoader() throws Exception", "diff": ["-\t\t// add _extJar to the factory list and rebuild.", "-\t\tFactoryContainer jarContainer = FactoryPath.newExtJarFactoryContainer(_extJar);", "-\t\tMap<FactoryContainer, Boolean> containers = new LinkedHashMap<FactoryContainer, Boolean>(1);", "-\t\tcontainers.put(jarContainer, true);", "-\t\tFactoryPath.addContainers(jproj, containers);", "+\t\tIFactoryPath ifp = AptConfig.getFactoryPath(jproj);", "+\t\t", "+\t\t// add _extJar to the factory list and rebuild.", "+\t\tifp.addExternalJar(_extJar);", "+\t\tAptConfig.setFactoryPath(jproj, ifp);", "-\t\t// remove _extJar from the factory list.", "-\t\tFactoryPath.removeContainer(jproj, jarContainer);", "+\t\t// restore to the original", "+\t\tifp.removeExternalJar(_extJar);", "+\t\tAptConfig.setFactoryPath(jproj, ifp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f44ff9a4c415652781d956d2b65a6ceb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/FactoryLoaderTests.java", "commitBeforeChange": "7177897be6073a1c35ee9a465aa5f0559da1bff1", "commitAfterChange": "3ef396e7cc3e0323aa7fad284fecd31681852465", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testExternalJarLoader() throws Exception", "signatureAfterChange": " \t \tpublic void testExternalJarLoader() throws Exception", "diff": ["-\t\t// add _extJar to the factory list and rebuild.", "+\t\t// add _extJar to the factory list as an external jar, and rebuild.", "-\t\t// This file will be locked until GC takes care of unloading", "-\t\t// the annotation processor classes.", "-\t\t_extJar.deleteOnExit();", "+\t\t// add _extJar to the factory list as a class-path-relative jar, and rebuild.", "+\t\tifp.addVarJar(_extVarJar);", "+\t\tAptConfig.setFactoryPath(jproj, ifp);", "+\t\t", "+\t\t// rebuild and verify that the processor was loaded", "+\t\tLoaderTestAnnotationProcessor.clearLoaded();", "+\t\tfullBuild( project.getFullPath() );", "+\t\texpectingNoProblems();", "+\t\tassertTrue(LoaderTestAnnotationProcessor.isLoaded());", "+\t\t", "+\t\t// restore to the original", "+\t\tifp.removeVarJar(_extVarJar);", "+\t\tAptConfig.setFactoryPath(jproj, ifp);", "+\t\t", "+\t\t// rebuild and verify that the processor was not loaded.", "+\t\tLoaderTestAnnotationProcessor.clearLoaded();", "+\t\tfullBuild( project.getFullPath() );", "+\t\texpectingNoProblems();", "+\t\tassertFalse(LoaderTestAnnotationProcessor.isLoaded());", "+\t}"]}], "num": 60688}
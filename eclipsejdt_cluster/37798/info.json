{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9269f9916509f9edbafc28dac15be31e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6278ca217fecd72bc4f9fd966f1f2527", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 47, "signatureBeforeChange": " public static String toString( \t\tString methodSignature, \t\tString methodName, \t\tString[] parameterNames, \t\tboolean fullyQualifyTypeNames, \t\tboolean includeReturnType, \t\tboolean includeFormalTypeParameters, \t\tboolean includeThrownExceptions)", "signatureAfterChange": " public static String toString(String methodSignature, String methodName, String[] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "diff": ["- */", "-public static String toString(", "-\t\tString methodSignature,", "-\t\tString methodName,", "-\t\tString[] parameterNames,", "-\t\tboolean fullyQualifyTypeNames,", "-\t\tboolean includeReturnType,", "-\t\tboolean includeFormalTypeParameters,", "-\t\tboolean includeThrownExceptions) {", "-\treturn new String(toCharArray(", "-\t\t\tmethodSignature.toCharArray(),", "-\t\t\tmethodName == null ? null : methodName.toCharArray(),", "-\t\t\tparams,", "-\t\t\tfullyQualifyTypeNames,", "-\t\t\tincludeReturnType,", "-\t\t\tincludeFormalTypeParameters,", "-\t\t\tincludeThrownExceptions));", "+\treturn new String(toCharArray(methodSignature.toCharArray(), methodName == null ? null : methodName.toCharArray(), params, fullyQualifyTypeNames, includeReturnType));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92a2ba29cc032138f4bc4d413d8aa2e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "c8403236a1da36770c42adade61fff44b4064b9a", "commitAfterChange": "dc8046a1f26c48f37690a73dc98185cd18d7251b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate CompilationUnitDeclaration convert( \t\tISourceType[] sourceTypes, \t\tboolean needFieldsAndMethods, \t\tboolean needMemberTypes, \t\tCompilationResult compilationResult)", "signatureAfterChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult)", "diff": ["-\tprivate CompilationUnitDeclaration convert(", "-\t\tISourceType[] sourceTypes,", "-\t\tboolean needFieldsAndMethods,", "-\t\tboolean needMemberTypes,", "-\t\tCompilationResult compilationResult) {", "+\tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) {", "-\t\t\t\tconvert(sourceTypes[i], needFieldsAndMethods, needMemberTypes, compilationResult);", "+\t\t\t\tconvert(sourceTypes[i], compilationResult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4a4d9cd9cafcee7821be35537e30cb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EmptyStatement.java", "commitBeforeChange": "3f131825dfbebcd2d9846517fd8419ae56311784", "commitAfterChange": "ede87229fe271e061ecd80820c468f7956351f61", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int complainIfUnreachable(FlowInfo flowInfo, FlowContext flowContext, BlockScope scope, int complaintLevel, boolean endOfBlock)", "signatureAfterChange": " \tpublic int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int complaintLevel)", "diff": ["-\tpublic int complainIfUnreachable(FlowInfo flowInfo, FlowContext flowContext, BlockScope scope, int complaintLevel, boolean endOfBlock) {", "+\tpublic int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int complaintLevel) {", "-\t\treturn super.complainIfUnreachable(flowInfo, flowContext, scope, complaintLevel, endOfBlock);", "+\t\treturn super.complainIfUnreachable(flowInfo, scope, complaintLevel);"]}], "num": 37798}
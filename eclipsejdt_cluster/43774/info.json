{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ec3437d8593854884c914a860451300", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c92717e44f61a9edd6816ea8d8bdae0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r \tpublic ZipFile getZipFile(IPath path) throws CoreException", "signatureAfterChange": "\r \tpublic ZipFile getZipFile(IPath path) throws CoreException", "diff": ["-\r\r", "+\r", "+\t\tZipFile zipFile;\r", "+\t\tif (this.zipFiles != null && (zipFile = (ZipFile)this.zipFiles.get(path)) != null) {\r", "+\t\t\treturn zipFile;\r", "+\t\t}\r\r", "-\t\t\treturn new ZipFile(fileSystemPath);\r", "+\t\t\tzipFile = new ZipFile(fileSystemPath);\r", "+\t\t\tif (this.zipFiles != null) {\r", "+\t\t\t\tthis.zipFiles.put(path, zipFile);\r", "+\t\t\t}\r", "+\t\t\treturn zipFile;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53bf8f575480a74d96790d76c222bda9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "77f63ea750ed0364fe2343040edb02da4f79c989", "commitAfterChange": "c7494793aa1ed6a2f75240b5a076591b5a3e9bf6", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "  private boolean isWorthBuilding() throws CoreException", "diff": ["+\t", "-\tfor (int i = 0, length = markers.length; i < length; i++) {", "-\t\tIMarker marker = markers[i];", "-\t\tif (((Integer)marker.getAttribute(IMarker.SEVERITY)).intValue() == IMarker.SEVERITY_ERROR) {", "-\t\t\tbuildPathHasError = true;", "-\t\t\tbreak;", "+\tIClasspathEntry[] classpath = null;", "+\tif (this.javaProject != null && (classpath = this.javaProject.getRawClasspath()) == JavaProject.INVALID_CLASSPATH) {", "+\t\t// the .classpath file could not be read", "+\t\tbuildPathHasError = true;", "+\t} else {", "+\t\tfor (int i = 0, length = markers.length; i < length; i++) {", "+\t\t\tIMarker marker = markers[i];", "+\t\t\tif (((Integer)marker.getAttribute(IMarker.SEVERITY)).intValue() == IMarker.SEVERITY_ERROR) {", "+\t\t\t\tbuildPathHasError = true;", "+\t\t\t\tbreak;", "+\t\t\t}", "-\t\tnew BatchImageBuilder(this).scrubOutputFolder();", "+\t\t// only if the .classpath file could be read", "+\t\tif (classpath != JavaProject.INVALID_CLASSPATH) {", "+\t\t\tnew BatchImageBuilder(this).scrubOutputFolder();", "+\t\t}", "-\t\t\tnew BatchImageBuilder(this).scrubOutputFolder();", "+\t\t\t// only if the .classpath file could be read", "+\t\t\tif (prereqProject.getRawClasspath() != JavaProject.INVALID_CLASSPATH) {", "+\t\t\t\tnew BatchImageBuilder(this).scrubOutputFolder();", "+\t\t\t}"]}], "num": 43774}
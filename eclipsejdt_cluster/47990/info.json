{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7596b73a7b61d362d230905682cbee2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5321978a3950a42a96cc9afe93fe590b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "56f3bbb73aa99ee6555dd2c0907e97e8dc1e94d7", "commitAfterChange": "c0dbae49a063a155ff0c3258193fbafd8195ac70", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \r public final Binding getBinding(char[][] compoundName, InvocationSite invocationSite)", "signatureAfterChange": "\r \r public final Binding getBinding(char[][] compoundName, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\treturn new ProblemFieldBinding(CharOperation.subarray(compoundName, 0, currentIndex), binding.problemId());\r", "+\t\t\t\t\treturn new ProblemFieldBinding(((FieldBinding) binding).declaringClass, CharOperation.subarray(compoundName, 0, currentIndex), binding.problemId());\r", "-\t\t\t\t\treturn new ProblemFieldBinding(CharOperation.subarray(compoundName, 0, currentIndex), NonStaticReferenceInStaticContext);\r", "+\t\t\t\t\treturn new ProblemFieldBinding(((FieldBinding) binding).declaringClass, CharOperation.subarray(compoundName, 0, currentIndex), NonStaticReferenceInStaticContext);\r", "-\t\t\treturn new ProblemFieldBinding(CharOperation.subarray(compoundName, 0, currentIndex+1), NotFound);\r", "+\t\t\treturn new ProblemFieldBinding(null, CharOperation.subarray(compoundName, 0, currentIndex+1), NotFound);\r", "-\t\t\treturn new ProblemFieldBinding(CharOperation.subarray(compoundName, 0, currentIndex), NotFound);\r", "+\t\t\treturn new ProblemFieldBinding(null, CharOperation.subarray(compoundName, 0, currentIndex), NotFound);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dd67cbf37de4f190339807cf43af2af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "fe80e0e35769c28ef9eab3d756180ade13a59126", "commitAfterChange": "8bbab36b30f52fd2cf2185f7c9fd80a985623079", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r public Binding getBinding(char[][] compoundName, int mask, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": "\r \r public Binding getBinding(char[][] compoundName, int mask, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, currentIndex), binding, NotFound);\r", "+\t\t\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, currentIndex), NotFound);\r", "-\t\t\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, currentIndex), binding, binding.problemId());\r", "+\t\t\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, currentIndex), binding.problemId());\r", "-\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, currentIndex), binding, NotFound);\r", "+\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, currentIndex), NotFound);\r", "-\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, currentIndex), binding, binding.problemId());\r", "+\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, currentIndex), binding.problemId());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4645e8225d5dad3c055f0fc4a50672f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "c96ea754cbc1843e6373572c9a41527df8e971a2", "commitAfterChange": "b026aefdcbffec474ae6cafef5ea7136332c257c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private Binding findOnDemandImport(char[][] compoundName, boolean isStaticImport)", "signatureAfterChange": " private Binding findImport(char[][] compoundName, int length)", "diff": ["-private Binding findOnDemandImport(char[][] compoundName, boolean isStaticImport) {", "+private Binding findImport(char[][] compoundName, int length) {", "-\tint length = compoundName.length;", "-\t\tif (isStaticImport) {", "-\t\t\t// does look for inherited member types unlike non static imports", "-\t\t\ttype = findMemberType(name, type);", "-\t\t\tif (type == null || !type.isStatic())", "-\t\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), NotFound);", "-\t\t} else {", "-\t\t\t// does not look for inherited member types on purpose, only immediate members", "-\t\t\ttype = type.getMemberType(name);", "-\t\t\tif (type == null)", "-\t\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), NotFound);", "-\t\t}", "+\t\t// does not look for inherited member types on purpose, only immediate members", "+\t\ttype = type.getMemberType(name);", "+\t\tif (type == null)", "+\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), NotFound);"]}], "num": 47990}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4172a9afbbc647916c1356a21a6dd1e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d4c6c7c30e3ef3549ca28953554d63d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "1d9c797e2d535a723d97129a4995a501f060e8fc", "commitAfterChange": "45457c087850a9bcb1e2d528c971be662d0a4e96", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void checkNullSpecInheritance(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": "  void checkNullSpecInheritance(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["+\t// precondition: caller has checked whether annotation-based null analysis is enabled.", "-\t\tfor (int i = 0; i < inheritedMethod.parameterNonNullness.length; i++) {", "+\t\tint length = inheritedMethod.parameterNonNullness.length;", "+\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tthis.type.scope.problemReporter().parameterLackingNonNullAnnotation(", "+\t\t\t\t\t\tthis.type.scope.problemReporter().parameterLackingNullAnnotation("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6953a2cd4f7ec545f61cd4b59dadb076", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "1d9c797e2d535a723d97129a4995a501f060e8fc", "commitAfterChange": "45457c087850a9bcb1e2d528c971be662d0a4e96", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tvoid validateAnnotations()", "signatureAfterChange": "  \tvoid validateNullAnnotations()", "diff": ["-\tvoid validateAnnotations() {", "+\tvoid validateNullAnnotations() {", "-\t\t\tfor (int i=0; i<this.binding.parameters.length; i++) {", "+\t\t\tint length = this.binding.parameters.length;", "+\t\t\tfor (int i=0; i<length; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8267b47c674c060896c1ef4f954907c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f97912416c5f4661289c43d63ee763608220be3f", "commitAfterChange": "e5efe07482ca39d7bb013c10359ef31d2cc33138", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed)", "diff": ["+\t\tint fieldLength = fieldName.length;", "-\t\t\tif (fieldName != null) {", "-\t\t\t\tif (fieldName.length > field.name.length) continue next;", "-\t\t\t\tif (!CharOperation.prefixEquals(fieldName, field.name, false /* ignore case */))\tcontinue next;", "-\t\t\t}", "+\t\t\tif (fieldLength > field.name.length) continue next;", "+", "+\t\t\tif (!CharOperation.prefixEquals(fieldName, field.name, false /* ignore case */))\tcontinue next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8337b641442bc4c2c49b35e151ae2f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1d9c797e2d535a723d97129a4995a501f060e8fc", "commitAfterChange": "45457c087850a9bcb1e2d528c971be662d0a4e96", "methodNumberBeforeChange": 472, "methodNumberAfterChange": 472, "signatureBeforeChange": "  private int findAnnotationSourceStart(Annotation[] annotations, int startFallback, int typeId)", "signatureAfterChange": "  private int findAnnotationSourceStart(Annotation[] annotations, int startFallback, int typeId)", "diff": ["-\t\tfor (int j=0; j<annotations.length; j++) {", "+\t\tint length = annotations.length;", "+\t\tfor (int j=0; j<length; j++) {"]}], "num": 66929}
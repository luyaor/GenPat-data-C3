{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfda490ab9aeb15ba96c3fe96f274657", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7cf6771475edb84d672b7f94be6aed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceASTTests.java", "commitBeforeChange": "749a96000e39f49e8cae1739b5deff8f66a30b2a", "commitAfterChange": "b4920bb3c80d3baab76f9964fee889a064ed565c", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \tprivate void runAstCreation(IJavaProject javaProject) throws JavaModelException", "signatureAfterChange": " \tprivate void runAstCreation(IJavaProject javaProject) throws JavaModelException", "diff": ["+\t\t\t} else if (\"enabled\".equals(value)) {", "+\t\t\t\t// System.out.println(\"\t- disabling \" + key);", "+\t\t\t\toptions.put(key, \"disabled\");", "-\t\toptions.put(JavaCore.COMPILER_TASK_TAGS, \"\"); //$NON-NLS-1$\t\t", "+\t\toptions.put(JavaCore.COMPILER_TASK_TAGS, \"\");", "+\t\tif (PRINT) {", "+\t\t\tSystem.out.println(\"\t- options: \"+options);", "+\t\t\tSystem.out.println(\"\t- \"+compilationUnits.length+\" units will be parsed in \"+javaProject.getElementName()+\" project\");", "+\t\t}", "+", "-\t\tif (PRINT) System.out.println(\"\t- \"+compilationUnits.length+\" units will be parsed in \"+javaProject.getElementName()+\" project\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cf6e9a556039bfd6370ac08c174f535", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "adb31abd7b76aacf34a5241ce11f6a5ccfcea015", "commitAfterChange": "d9a97d862b475eea227de958d835b86e43eefc95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected void runGc()", "signatureAfterChange": " \tprotected void runGc()", "diff": ["-\t\tlong delta, free;", "-\t\tdo {", "+\t\tlong delta=0, free=0;", "+\t\tfor (int i=0; i<MAX_GC; i++) {", "-\t\t} while (iterations<MAX_GC && delta>DELTA_GC);", "-\t\tif (iterations == MAX_GC && delta > (DELTA_GC*10)) {", "+\t\t}", "+\t\tif (iterations == MAX_GC && delta > DELTA_GC) {", "-\t\t\tSystem.err.println(this.scenarioShortName+\": still get \"+delta+\" unfreeable memory (free=\"+free+\",total=\"+Runtime.getRuntime().totalMemory()+\") after \"+MAX_GC+\" gc...\");", "+\t\t\tSystem.out.println(\"WARNING: \"+this.scenarioShortName+\" still get \"+delta+\" unfreeable memory (free=\"+free+\",total=\"+Runtime.getRuntime().totalMemory()+\") after \"+MAX_GC+\" gc...\");"]}], "num": 36769}
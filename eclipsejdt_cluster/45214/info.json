{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb5cf00a0fd7e6168b3115bc52a94ff5", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "020bc0d26454c85ff4a1b8499f0fb732", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public static char[] getInputStreamAsCharArray(InputStream stream) throws IOException", "signatureAfterChange": "\r public static char[] getInputStreamAsCharArray(InputStream stream, int length) throws IOException", "diff": ["-public static char[] getInputStreamAsCharArray(InputStream stream) throws IOException {\r", "+public static char[] getInputStreamAsCharArray(InputStream stream, int length) throws IOException {\r", "-\tchar[] contents = new char[0];\r", "-\ttry {\r", "+\tchar[] contents;\r", "+\tif (length == -1) {\r", "+\t\tcontents = new char[0];\r", "-\t\t\t\r", "+\t\t\r", "-\t\t\r", "+\t\r", "+\t} else {\r", "+\t\tcontents = new char[length];\r", "+\t\tint len = 0;\r", "+\t\tint readSize = 0;\r", "+\t\twhile ((readSize != -1) && (len != length)) {\r", "+\t\t\t// See PR 1FMS89U\r", "+\t\t\t// We record first the read size. In this case len is the actual read size.\r", "+\t\t\tlen += readSize;\r", "+\t\t\treadSize = reader.read(contents, len, length - len);\r", "+\t\t}\r", "+\t\t// See PR 1FMS89U\r", "+\t\t// Now we need to resize in case the default encoding used more than one byte for each\r", "+\t\t// character\r", "+\t\tif (len != length)\r", "+\t\t\tSystem.arraycopy(contents, 0, (contents = new char[len]), 0, len);\t\t\r", "+\t}\r", "+\r", "+\treturn contents;\r", "+}\r", "-\t\ttry {\r", "-\t\t\treader.close();\r", "-\t\t} catch (IOException e) {\r", "-\treturn contents;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af0b3c542db0cae6699e7ea0aaa6810a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public static byte[] getInputStreamAsByteArray(InputStream stream) throws IOException", "signatureAfterChange": "\r public static byte[] getInputStreamAsByteArray(InputStream stream, int length) throws IOException", "diff": ["-public static byte[] getInputStreamAsByteArray(InputStream stream) throws IOException {\r", "-\tbyte[] contents = new byte[0];\r", "-\ttry {\r", "+public static byte[] getInputStreamAsByteArray(InputStream stream, int length) throws IOException {\r", "+\tbyte[] contents;\r", "+\tif (length == -1) {\r", "+\t\tcontents = new byte[0];\r", "-\t\t\t\r", "+\t\t\r", "-\t\t\r", "+\t\r", "-\t} finally {\r", "-\t\ttry {\r", "-\t\t\tstream.close();\r", "-\t\t} catch (IOException e) {\r", "+\t} else {\r", "+\t\tcontents = new byte[length];\r", "+\t\tint len = 0;\r", "+\t\tint readSize = 0;\r", "+\t\twhile ((readSize != -1) && (len != length)) {\r", "+\t\t\t// See PR 1FMS89U\r", "+\t\t\t// We record first the read size. In this case len is the actual read size.\r", "+\t\t\tlen += readSize;\r", "+\t\t\treadSize = stream.read(contents, len, length - len);\r", "+\r"]}], "num": 45214}
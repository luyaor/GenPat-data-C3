{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41be79b21dcbf76daf46363b3a5e2ab7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5fe475e43beecd3c878de77e552b76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited, boolean treatAsSynthetic)", "signatureAfterChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited, boolean treatAsSynthetic)", "diff": ["+\tint severity = ProblemSeverities.Error;", "+\tif (this.environment.globalOptions.complianceLevel == ClassFileConstants.JDK1_6) {", "+\t\t// for 1.6 return types also need to be checked", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=317719", "+\t\tif (current.returnType.erasure() != original.returnType.erasure())", "+\t\t\tseverity = ProblemSeverities.Warning;", "+\t}", "-\tproblemReporter(current).methodNameClash(current, inherited.declaringClass.isRawType() ? inherited : original);", "+\tproblemReporter(current).methodNameClash(current, inherited.declaringClass.isRawType() ? inherited : original, severity);", "+\tif (severity == ProblemSeverities.Warning) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fba4196627b751ac22514b917a334244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "233a8fb3a62732c6de2da69a78c862fcd1ab2d89", "commitAfterChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static Test buildUniqueComplianceTestSuite(Class evaluationTestClass, long uniqueCompliance)", "signatureAfterChange": " \tpublic static Test buildUniqueComplianceTestSuite(Class evaluationTestClass, long uniqueCompliance)", "diff": ["-\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+highestLevel+\"!\");", "+\t\t\tString complianceString;", "+\t\t\tif (highestLevel == ClassFileConstants.JDK1_7)", "+\t\t\t\tcomplianceString = \"1.7\";", "+\t\t\telse if (highestLevel == ClassFileConstants.JDK1_6)", "+\t\t\t\tcomplianceString = \"1.6\";", "+\t\t\telse if (highestLevel == ClassFileConstants.JDK1_5)", "+\t\t\t\tcomplianceString = \"1.5\";", "+\t\t\telse if (highestLevel == ClassFileConstants.JDK1_4)", "+\t\t\t\tcomplianceString = \"1.4\";", "+\t\t\telse if (highestLevel == ClassFileConstants.JDK1_3)", "+\t\t\t\tcomplianceString = \"1.3\";", "+\t\t\telse", "+\t\t\t\tcomplianceString = \"unknown\";", "+\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+complianceString+\"!\");"]}], "num": 3339}
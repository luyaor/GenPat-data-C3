{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7320e6c42565fa839e27bdf795eed977", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70649d403ab491db8123045c4414434b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "c614621106519ff8481a1054577c7b362708dd68", "commitAfterChange": "283007dac99c2184e8a3866c05be98ceb42f71c9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["+\t\t\t\t}", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_CONDITIONAL_OPERATOR :", "+\t\t\t\tif(info == QUESTION) {", "+\t\t\t\t\tif(expressionPtr > 0) {", "+\t\t\t\t\t\texpressionPtr--;", "+\t\t\t\t\t\texpressionLengthPtr--;", "+\t\t\t\t\t\texpressionStack[expressionPtr] = expressionStack[expressionPtr+1];", "+\t\t\t\t\t\tpopElement(K_CONDITIONAL_OPERATOR);", "+\t\t\t\t\t\tbuildMoreCompletionContext(expression);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif(expressionPtr > 1) {", "+\t\t\t\t\t\texpressionPtr = expressionPtr - 2;", "+\t\t\t\t\t\texpressionLengthPtr = expressionLengthPtr - 2;", "+\t\t\t\t\t\texpressionStack[expressionPtr] = expressionStack[expressionPtr+2];", "+\t\t\t\t\t\tpopElement(K_CONDITIONAL_OPERATOR);", "+\t\t\t\t\t\tbuildMoreCompletionContext(expression);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c21926282cf3265895bcad1252d2769e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " protected void consumeArrayAccess(boolean unspecifiedReference)", "signatureAfterChange": " protected void consumeArrayAccess(boolean unspecifiedReference)", "diff": ["-\t\t\texpressionStack[expressionPtr] = ", "+\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\texpressionStack[expressionPtr]);", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr]);", "-\t\texpressionPtr--;", "-\t\texpressionLengthPtr--;", "+\t\tthis.expressionPtr--;", "+\t\tthis.expressionLengthPtr--;", "-\t\t\texpressionStack[expressionPtr] = ", "+\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\texpressionStack[expressionPtr],", "-\t\t\t\t\texpressionStack[expressionPtr + 1]);", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr],", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1]);", "-\texp.sourceEnd = endPosition;", "+\texp.sourceEnd = this.endPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c801b0b438279a576f62c7ce250573e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/InfixExpressionWrappingBuilder.java", "commitBeforeChange": "a744e65ca211ca7be2dd3830d1bd4009b273df27", "commitAfterChange": "c95e24ef2e4bfa2139fbca3e3b2078e40695cacf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate boolean isSplittable(Expression expression)", "signatureAfterChange": " \tprivate boolean isSplittable(Expression expression)", "diff": ["-\t\tif (expression instanceof InfixExpression) {", "-\t\t\tInfixExpression infixExpression = (InfixExpression) expression;", "-\t\t\treturn infixExpression.getLeftOperand() instanceof InfixExpression", "-\t\t\t\t\t||  infixExpression.getRightOperand() instanceof InfixExpression;", "-\t\t}", "-\t\treturn false;", "+//\t\tif (expression instanceof InfixExpression) {", "+//\t\t\tInfixExpression infixExpression = (InfixExpression) expression;", "+//\t\t\treturn infixExpression.getLeftOperand() instanceof InfixExpression", "+//\t\t\t\t\t||  infixExpression.getRightOperand() instanceof InfixExpression;", "+//\t\t}", "+//\t\treturn false;", "+\t\treturn true;"]}], "num": 47042}
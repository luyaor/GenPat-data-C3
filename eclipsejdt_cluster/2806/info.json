{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82ee59b6fd503c0a22deb4c3ea951652", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "543c3993ddb20dd62890256526c8113f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic boolean match(MethodDeclaration node, Object other)", "signatureAfterChange": " \tpublic boolean match(MethodDeclaration node, Object other)", "diff": ["-\t\tif (level == AST.JLS2_INTERNAL) {", "-\t\t\tif (node.getModifiers() != o.getModifiers()) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (!safeSubtreeMatch(node.internalGetReturnType(), o.internalGetReturnType())) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\tif (level >= AST.JLS3_INTERNAL) {", "-\t\t\tif (!safeSubtreeListMatch(node.modifiers(), o.modifiers())) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (!safeSubtreeMatch(node.getReturnType2(), o.getReturnType2())) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\t// n.b. compare type parameters even for constructors", "-\t\t\tif (!safeSubtreeListMatch(node.typeParameters(), o.typeParameters())) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\tif (level >= AST.JLS8) {", "-\t\t\tif (!safeSubtreeMatch(node.getReceiverType(), o.getReceiverType())) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (!safeSubtreeMatch(node.getReceiverQualifier(), o.getReceiverQualifier())) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\treturn ((node.isConstructor() == o.isConstructor())", "+\t\treturn node.isConstructor() == o.isConstructor()", "+\t\t\t\t&& (level >= AST.JLS3_INTERNAL", "+\t\t\t\t\t\t? safeSubtreeListMatch(node.modifiers(), o.modifiers())", "+\t\t\t\t\t\t\t\t&& safeSubtreeListMatch(node.typeParameters(), o.typeParameters())", "+\t\t\t\t\t\t\t\t// n.b. compare return type even for constructors", "+\t\t\t\t\t\t\t\t&& safeSubtreeMatch(node.getReturnType2(), o.getReturnType2())", "+\t\t\t\t\t\t: node.getModifiers() == o.getModifiers()", "+\t\t\t\t\t\t\t\t// n.b. compare return type even for constructors", "+\t\t\t\t\t\t\t\t&& safeSubtreeMatch(node.internalGetReturnType(), o.internalGetReturnType()))", "-\t\t\t\t// n.b. compare return type even for constructors", "+\t\t\t\t&& (level >= AST.JLS8", "+\t\t\t\t\t\t? safeSubtreeMatch(node.getReceiverType(), o.getReceiverType())", "+\t\t\t\t\t\t\t\t&& safeSubtreeMatch(node.getReceiverQualifier(), o.getReceiverQualifier())", "+\t\t\t\t\t\t: true)", "-\t\t\t\t&& ((node.getAST().apiLevel < AST.JLS8) ?", "-\t\t\t\t\t\t\t(node.getExtraDimensions() == o.getExtraDimensions()", "-\t\t\t\t\t\t\t\t&& safeSubtreeListMatch(node.thrownExceptions(), o.thrownExceptions())) :", "-\t\t\t\t\t\t\t(safeSubtreeListMatch(node.extraDimensionInfos(), o.extraDimensionInfos())", "-\t\t\t\t\t\t\t\t&& safeSubtreeListMatch(node.thrownExceptionTypes(), o.thrownExceptionTypes())))", "-\t\t\t\t&& safeSubtreeMatch(node.getBody(), o.getBody()));", "+\t\t\t\t&& (level >= AST.JLS8", "+\t\t\t\t\t\t? safeSubtreeListMatch(node.extraDimensions(), o.extraDimensions())", "+\t\t\t\t\t\t\t\t&& safeSubtreeListMatch(node.thrownExceptionTypes(), o.thrownExceptionTypes())", "+\t\t\t\t\t\t: node.getExtraDimensions() == o.getExtraDimensions()", "+\t\t\t\t\t\t\t\t&& safeSubtreeListMatch(node.internalThrownExceptions(), o.internalThrownExceptions()))", "+\t\t\t\t&& safeSubtreeMatch(node.getBody(), o.getBody());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acf3408915127e607ec2c173cec2d097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic boolean match(SingleVariableDeclaration node, Object other)", "signatureAfterChange": " \tpublic boolean match(SingleVariableDeclaration node, Object other)", "diff": ["-\t\tif (level == AST.JLS2_INTERNAL) {", "-\t\t\tif (node.getModifiers() != o.getModifiers()) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\tif (level >= AST.JLS3_INTERNAL) {", "-\t\t\tif (!safeSubtreeListMatch(node.modifiers(), o.modifiers())) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (node.isVarargs() != o.isVarargs()) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\treturn", "-\t\t    safeSubtreeMatch(node.getType(), o.getType())", "+\t\treturn (level >= AST.JLS3_INTERNAL", "+\t\t\t\t\t\t? safeSubtreeListMatch(node.modifiers(), o.modifiers())", "+\t\t\t\t\t\t: node.getModifiers() == o.getModifiers())", "+\t\t\t\t&& safeSubtreeMatch(node.getType(), o.getType())", "+\t\t\t\t&& (level >= AST.JLS8 && node.isVarargs()", "+\t\t\t\t\t\t? safeSubtreeListMatch(node.varargsAnnotations(), o.varargsAnnotations())", "+\t\t\t\t\t\t: true)", "+\t\t\t\t&& (level >= AST.JLS3_INTERNAL", "+\t\t\t\t\t\t? node.isVarargs() == o.isVarargs()", "+\t\t\t\t\t\t: true)", "-\t \t\t\t&& ((node.getAST().apiLevel < AST.JLS8) ?", "-\t \t\t\t\t\tnode.getExtraDimensions() == o.getExtraDimensions() :", "-\t \t\t\t\t\t\tsafeSubtreeListMatch(node.extraDimensionInfos(), o.extraDimensionInfos()))", "-\t\t\t\t&& safeSubtreeMatch(node.getInitializer(), o.getInitializer())", "-\t\t\t\t&& (level >= AST.JLS8 && node.isVarargs()) ? safeSubtreeListMatch(node.varargsAnnotations(), o.varargsAnnotations()) : true;\t\t", "+\t\t\t\t&& ((level >= AST.JLS8)", "+\t\t\t\t\t\t? safeSubtreeListMatch(node.extraDimensions(), o.extraDimensions())", "+\t\t\t\t\t\t: node.getExtraDimensions() == o.getExtraDimensions())", "+\t\t\t\t&& safeSubtreeMatch(node.getInitializer(), o.getInitializer());"]}], "num": 2806}
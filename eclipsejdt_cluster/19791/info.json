{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f381fa93860a5643f78ed596939a2e51", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdb274b0fc5bf805bbc733bd7d0a560b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "d577fece07c4fdbce33b7bc16d2d2a9b7bf263e2", "commitAfterChange": "c4bece6f11e325ba67c44c784cdcd204e747008d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t// copy vectors into arrays", "-\tint openablesLength = potentialSubtypes.size();", "-\tOpenable[] openables = new Openable[openablesLength];", "-\tpotentialSubtypes.toArray(openables);", "-", "+\tint openablesLength = potentialSubtypes.size();", "+\t\t// copy vectors into arrays", "+\t\tOpenable[] openables = new Openable[openablesLength];", "+\t\tpotentialSubtypes.toArray(openables);", "+", "+\t\t// sort in the order of roots and in reverse alphabetical order for .class file", "+\t\t// since requesting top level types in the process of caching an enclosing type is", "+\t\t// not supported by the lookup environment", "+\t\tIPackageFragmentRoot[] roots = project.getPackageFragmentRoots();", "+\t\tint rootsLength = roots.length;", "+\t\tfinal HashtableOfObjectToInt indexes = new HashtableOfObjectToInt(openablesLength);", "+\t\tfor (int i = 0; i < openablesLength; i++) {", "+\t\t\tIJavaElement root = openables[i].getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\tint index;", "+\t\t\tfor (index = 0; index < rootsLength; index++) {", "+\t\t\t\tif (roots[index].equals(root))", "+\t\t\t\t\tbreak;", "+\t\t\t}\t\t", "+\t\t\tindexes.put(openables[i], index);", "+\t\t}", "+\t\tUtil.sort(openables, new Util.Comparer() {", "+\t\t\tpublic int compare(Object a, Object b) {", "+\t\t\t\tint aIndex = indexes.get(a);", "+\t\t\t\tint bIndex = indexes.get(b);", "+\t\t\t\tif (aIndex != bIndex)", "+\t\t\t\t\treturn aIndex - bIndex;", "+\t\t\t\treturn ((Openable) b).getElementName().compareTo(((Openable) a).getElementName());", "+\t\t\t}", "+\t\t});", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8ae1833b6e2efd10e00642c46eb4ec9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " private AstNode[] matchingNodes(int start, int end)", "signatureAfterChange": " private AstNode[] matchingNodes(int start, int end)", "diff": ["- */", "-private AstNode[] matchingNodes(int start, int end) {", "-\treturn this.nodesInRange(start, end, this.matchingNodes);", "+private AstNode[] matchingNodes(int start, int end) {", "+\tArrayList nodes = null;", "+\tObject[] keyTable = this.matchingNodes.keyTable;", "+\tfor (int i = 0, l = keyTable.length; i < l; i++) {", "+\t\tAstNode node = (AstNode) keyTable[i];", "+\t\tif (node != null && start <= node.sourceStart && node.sourceEnd <= end) {", "+\t\t\tif (nodes == null) nodes = new ArrayList();", "+\tif (nodes == null) return null;", "+", "+\t\t\treturn ((AstNode) o1).sourceStart - ((AstNode) o2).sourceStart;"]}], "num": 19791}
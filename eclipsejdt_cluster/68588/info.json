{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3967a627a25d9eda35c3c921ed2b722b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a7a095e7e42f60ca8952906841d5ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a53e0f6f60b988e927d553381431ae6a40286252", "commitAfterChange": "2d9b05bb71b127652760933dafce873a5ec0cb28", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\tMethodBinding first = methods[0];", "-\tint index = length;", "-\twhile (--index > 0 && areReturnTypesEqual(first, methods[index])){/*empty*/}", "-\tif (index > 0) {  // All inherited methods do NOT have the same vmSignature", "-\t\tif (this.type.isInterface())", "-\t\t\tfor (int i = length; --i >= 0;)", "-\t\t\t\tif (methods[i].declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\t\t\treturn; // do not complain since the super interface already got blamed", "-\t\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "+\tif (!checkInheritedReturnTypes(methods, length))", "-\t}", "-\tindex = 0;", "+\tint index = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd5a629653cbb8f59998906b092838bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "d3244b9b1f07dec23fc8a11bdb05cd710c7b96c6", "commitAfterChange": "ed58872582a38f521f8bc7cc18b9c76c2c6fa7a1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate ImportReference createImportReference( \t\tchar[] importName, \t\tint start, \t\tint end)", "signatureAfterChange": " \tprivate ImportReference createImportReference( \t\tchar[] importName, \t\tint start, \t\tint end,  \t\tboolean onDemand, \t\tint modifiers)", "diff": ["-\t\tint end) {", "-", "-\t\t/* count identifiers */", "-\t\tint max = importName.length;", "-\t\tint identCount = 0;", "-\t\tfor (int i = 0; i < max; i++) {", "-\t\t\tif (importName[i] == '.')", "-\t\t\t\tidentCount++;", "-\t\t}", "-\t\t/* import on demand? */", "-\t\tboolean onDemand = importName[max - 1] == '*';", "-\t\tif (!onDemand)", "-\t\t\tidentCount++; // one more ident than dots", "-", "-\t\tlong[] positions = new long[identCount];", "+\t\tint end, ", "+\t\tboolean onDemand,", "+\t\tint modifiers) {", "+\t", "+\t\tchar[][] qImportName = CharOperation.splitOn('.', importName);", "+\t\tlong[] positions = new long[qImportName.length];", "-\t\tfor (int i = 0; i < identCount; i++) {", "-\t\t\tpositions[i] = position;", "+\t\tfor (int i = 0; i < qImportName.length; i++) {", "+\t\t\tpositions[i] = position; // dummy positions", "-\t\t\tCharOperation.splitOn('.', importName, 0, max - (onDemand ? 2 : 0)),", "+\t\t\tqImportName,", "-\t\t\tonDemand);", "+\t\t\tonDemand,", "+\t\t\tmodifiers);"]}], "num": 68588}
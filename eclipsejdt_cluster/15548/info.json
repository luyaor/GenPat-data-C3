{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd32184a150fb3fc7f03ddf70f596fc6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28a621ab44df537331e572e0524be07e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "signatureAfterChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "diff": ["-\t\t// Generate two attribute: constantValueAttribute and SyntheticAttribute", "+\t\tif (targetJDK < ClassFileConstants.JDK1_5) {", "+\t\t    // pre 1.5, synthetic was an attribute, not a modifier", "+\t\t    accessFlags &= ~AccSynthetic;", "+\t\t}\t\t", "+\t\t// Generate the constantValueAttribute", "+\t\t\tif (contentsOffset + 8 >= contents.length) {", "+\t\t\t\tresizeContents(8);", "+\t\t\t}", "-\t\tif (fieldBinding.isSynthetic()) {", "+\t\tif (this.targetJDK < ClassFileConstants.JDK1_5 && fieldBinding.isSynthetic()) {", "+\t\t\tif (contentsOffset + 6 >= contents.length) {", "+\t\t\t\tresizeContents(6);", "+\t\t\t}", "+\t\t\tif (contentsOffset + 6 >= contents.length) {", "+\t\t\t\tresizeContents(6);", "+\t\t\t}", "+\t\t// add signature attribute", "+\t\tchar[] genericSignature = fieldBinding.genericSignature();", "+\t\tif (genericSignature != null) {", "+\t\t\t// check that there is enough space to write all the bytes for the field info corresponding", "+\t\t\t// to the @fieldBinding", "+\t\t\tif (contentsOffset + 8 >= contents.length) {", "+\t\t\t\tresizeContents(8);", "+\t\t\t}", "+\t\t\tint signatureAttributeNameIndex =", "+\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.SignatureName);", "+\t\t\tcontents[contentsOffset++] = (byte) (signatureAttributeNameIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) signatureAttributeNameIndex;", "+\t\t\t// the length of a signature attribute is equals to 2", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 2;", "+\t\t\tint signatureIndex =", "+\t\t\t\tconstantPool.literalIndex(genericSignature);", "+\t\t\tcontents[contentsOffset++] = (byte) (signatureIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) signatureIndex;", "+\t\t\tattributeNumber++;", "+\t\t}\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd8e87c453c68aaa11923014ced1265", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "589528097d9e55f2c9b149940adf643197d6126d", "commitAfterChange": "f940793ad6a8d5d0b9d6787ffa3657f56433791f", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tprivate int generateBootstrapMethods(List functionalExpressionList)", "signatureAfterChange": "  \tprivate int generateBootstrapMethods(List functionalExpressionList)", "diff": ["-\t\t\t", "+\t\t\tMethodBinding [] bridges = functional.getRequiredBridges();", "-\t\t\t\t   \t((LambdaExpression)functional).isSerializable)) {", "+\t\t\t\t   \t((LambdaExpression)functional).isSerializable) ||", "+\t\t\t\t   \tbridges != null) {", "+\t\t\t\t}", "+\t\t\t\tif (bridges != null) {", "+\t\t\t\t\t// 2 for bridge count then 2 per bridge method type.", "+\t\t\t\t\textraSpace += (2 + 2 * bridges.length);", "-\t\t\t\tthis.contents[localContentsOffset++] = (byte) (4+(markerInterfaces==null?0:1+markerInterfaces.length));", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (4 + (markerInterfaces==null?0:1+markerInterfaces.length) + ", "+\t\t\t\t\t\t                                                   (bridges == null ? 0 : 1 + bridges.length));", "-\t\t\t\t// Does this block have to deal with FLAG_BRIDGE? When is it needed?", "+\t\t\t\t}", "+\t\t\t\tif (bridges != null) {", "+\t\t\t\t\tbitflags |= ClassFileConstants.FLAG_BRIDGES;", "+\t\t\t\tif (bridges != null) {", "+\t\t\t\t\tint bridgeCountIndex =  this.constantPool.literalIndex(bridges.length);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (bridgeCountIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (bridgeCountIndex);", "+\t\t\t\t\tfor (int m = 0, maxm = bridges.length; m < maxm; m++) {", "+\t\t\t\t\t\tchar [] bridgeSignature = bridges[m].signature();", "+\t\t\t\t\t\tint bridgeMethodTypeIndex = this.constantPool.literalIndexForMethodType(bridgeSignature);", "+\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (bridgeMethodTypeIndex >> 8);", "+\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) bridgeMethodTypeIndex;", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t}"]}], "num": 15548}
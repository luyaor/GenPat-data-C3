{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e16f0e6baed2698a743834329db9566f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "376e03d0b891d4c8ea4545045432e5cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "d35754bf597e1e3c63426404dbcb66843b76444c", "commitAfterChange": "889cbee9e452a2b606e084167406ae9a949acd46", "methodNumberBeforeChange": 193, "methodNumberAfterChange": 194, "signatureBeforeChange": " public void invokeinterface(MethodBinding methodBinding)", "signatureAfterChange": "  public void invokeIterableIterator(TypeBinding iterableReceiverType)", "diff": ["-public void invokeinterface(MethodBinding methodBinding) {", "-\tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokeinterface: \" + methodBinding); //$NON-NLS-1$", "-\tthis.countLabels = 0;", "-\t// initialized to 1 to take into account this  immediately", "-\tint argCount = 1;", "-\tint id;", "-\tif (this.classFileOffset + 4 >= this.bCodeStream.length) {", "-\t\tresizeByteArray();", "-\t}", "-\tthis.position += 3;", "-\tthis.bCodeStream[this.classFileOffset++] = Opcodes.OPC_invokeinterface;", "-\twriteUnsignedShort(", "-\t\tthis.constantPool.literalIndexForMethod(", "-\t\t\tmethodBinding.constantPoolDeclaringClass(),", "-\t\t\tmethodBinding.selector,", "-\t\t\tmethodBinding.signature(this.classFile),", "-\t\t\ttrue));", "-\tfor (int i = methodBinding.parameters.length - 1; i >= 0; i--)", "-\t\tif (((id = methodBinding.parameters[i].id) == TypeIds.T_double) || (id == TypeIds.T_long))", "-\t\t\targCount += 2;", "-\t\telse", "-\t\t\targCount += 1;", "-\tthis.bCodeStream[this.classFileOffset++] = (byte) argCount;", "-\t// Generate a  0 into the byte array. Like the array is already fill with 0, we just need to increment", "-\t// the number of bytes.", "-\tthis.bCodeStream[this.classFileOffset++] = 0;", "-\tif (((id = methodBinding.returnType.id) == TypeIds.T_double) || (id == TypeIds.T_long)) {", "-\t\tthis.stackDepth += (2 - argCount);", "-\t} else {", "-\t\tif (id == TypeIds.T_void) {", "-\t\t\tthis.stackDepth -= argCount;", "-\t\t} else {", "-\t\t\tthis.stackDepth += (1 - argCount);", "-\t\t}", "-\t}", "-\tif (this.stackDepth > this.stackMax) {", "-\t\tthis.stackMax = this.stackDepth;", "-\t}", "+", "+public void invokeIterableIterator(TypeBinding iterableReceiverType) {", "+\t// invokevirtual/interface: <iterableReceiverType>.iterator()", "+    if (iterableReceiverType.isNestedType()) {", "+        this.classFile.recordInnerClasses(iterableReceiverType);", "+    }\t", "+\tinvoke(", "+\t\t\titerableReceiverType.isInterface() ? Opcodes.OPC_invokeinterface : Opcodes.OPC_invokevirtual,", "+\t\t\t1, // receiverAndArgsSize", "+\t\t\t1, // returnTypeSize", "+\t\t\titerableReceiverType.constantPoolName(), ", "+\t\t\tConstantPool.ITERATOR_NAME, ", "+\t\t\tConstantPool.ITERATOR_SIGNATURE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7323548621e2768d08a1ffa023611cd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "e8ae7ffc3de1911b69637cebec8d2d7f29a7dfa5", "commitAfterChange": "2118453a33ea6b9573a716041df3762f01e3c85f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void consumeMethodHeaderName()", "signatureAfterChange": " protected void consumeMethodHeaderName()", "diff": ["-\t// MethodHeaderName ::= Modifiersopt Type 'Identifier' '('", "-\tSourceMethodDeclaration md = new SourceMethodDeclaration(this.compilationUnit.compilationResult);", "-", "-\t//name", "-\tmd.selector = this.identifierStack[identifierPtr];", "-\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr--];", "-\tthis.identifierLengthPtr--;", "-\t//type", "-\tmd.returnType = getTypeReference(this.intStack[this.intPtr--]);", "-\t//modifiers", "-\tmd.declarationSourceStart = this.intStack[this.intPtr--];", "-\tmd.modifiers = this.intStack[this.intPtr--];", "-\t// consume annotations", "-\tint length;", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.expressionStack, ", "-\t\t\t(this.expressionPtr -= length) + 1, ", "-\t\t\tmd.annotations = new Annotation[length], ", "-\t\t\t0, ", "-\t\t\tlength); ", "-\t}", "-\t// javadoc", "-\tmd.javadoc = this.javadoc;", "-\tthis.javadoc = null;", "-", "-\t//highlight starts at selector start", "-\tmd.sourceStart = (int) (selectorSourcePositions >>> 32);", "-\tmd.selectorSourceEnd = (int) selectorSourcePositions;", "-\tpushOnAstStack(md);", "-\tmd.sourceEnd = this.lParenPos;", "-\tmd.bodyStart = this.lParenPos+1;", "-\tthis.listLength = 0; // initialize listLength before reading parameters/throws", "-\t", "-\t// recovery", "-\tif (this.currentElement != null){", "-\t\tif (this.currentElement instanceof RecoveredType ", "-\t\t\t//|| md.modifiers != 0", "-\t\t\t|| (this.scanner.getLineNumber(md.returnType.sourceStart)", "-\t\t\t\t\t== this.scanner.getLineNumber(md.sourceStart))){", "-\t\t\tthis.lastCheckPoint = md.bodyStart;", "-\t\t\tthis.currentElement = currentElement.add(md, 0);", "-\t\t\tthis.lastIgnoredToken = -1;\t\t\t", "-\t\t} else {", "-\t\t\tthis.lastCheckPoint = md.sourceStart;", "-\t\t\tthis.restartRecovery = true;", "-\t\t}", "-\t}\t\t", "+\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr];", "+\tint selectorSourceEnd = (int) selectorSourcePositions;", "+\tint currentAstPtr = this.astPtr;", "+\tsuper.consumeMethodHeaderName();", "+\tif (this.astPtr > currentAstPtr) // if ast node was pushed on the ast stack", "+\t\tthis.sourceEnds.put(this.astStack[this.astPtr], selectorSourceEnd);"]}], "num": 59025}
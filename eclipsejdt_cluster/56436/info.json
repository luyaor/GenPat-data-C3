{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66730c01c65c18322c12116a3c4701e0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a74e744d6098a7ca96c409413c6a36ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ExtendedAnnotation.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ExtendedAnnotation( \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint offset) throws ClassFormatException", "signatureAfterChange": " \tpublic ExtendedAnnotation( \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint offset) throws ClassFormatException", "diff": ["-\t\tint index = u2At(classFileBytes, 0, offset);", "+\t\t// Read target_type", "+\t\tint index = u1At(classFileBytes,0,offset);", "+\t\tthis.targetType = index;", "+\t\tthis.readOffset = 1;", "+\t\t", "+\t\treadTargetInfo(index, classFileBytes, constantPool, offset);", "+", "+\t\t// Read type_path", "+\t\tindex = u1At(classFileBytes, this.readOffset, offset);", "+\t\tthis.readOffset++;", "+\t\tint typePathEntryCount = index;", "+\t\tif (typePathEntryCount == 0) {", "+\t\t\tthis.typePath = NO_TYPEPATH;", "+\t\t} else {", "+\t\t\tthis.typePath = new int[typePathEntryCount][];", "+\t\t\tfor (int i = 0; i < typePathEntryCount; i++) {", "+\t\t\t\tint[] typePathEntry = (this.typePath[i] = new int[2]);", "+\t\t\t\ttypePathEntry[0] = u1At(classFileBytes, this.readOffset++, offset);", "+\t\t\t\ttypePathEntry[1] = u1At(classFileBytes, this.readOffset++, offset);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// Read annotation", "+\t\tindex = u2At(classFileBytes, this.readOffset, offset);", "+\t\tthis.readOffset+=2;", "-\t\tfinal int length = u2At(classFileBytes, 2, offset);", "+\t\tfinal int length = u2At(classFileBytes, this.readOffset, offset);", "-\t\tthis.readOffset = 4;", "+\t\tthis.readOffset+=2;", "-\t\tindex = u1At(classFileBytes, this.readOffset, offset);", "-\t\tthis.readOffset++;", "-\t\tthis.targetType = index;", "-\t\tswitch(index) {", "-\t\t\tcase IExtendedAnnotationConstants.WILDCARD_BOUND :", "-\t\t\t\tthis.wildcardLocationType = u1At(classFileBytes, this.readOffset, offset);", "-\t\t\t\tthis.readOffset++;", "-\t\t\t\tinternalDecoding(this.wildcardLocationType, classFileBytes, constantPool, offset);", "-\t\t\t\t// copy the location back into the wildcard location", "-\t\t\t\tint size = this.locations.length;", "-\t\t\t\tSystem.arraycopy(this.locations, 0, (this.wildcardLocations = new int[size]), 0, size);", "-\t\t\t\tthis.locations = null;", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.WILDCARD_BOUND_GENERIC_OR_ARRAY :", "-\t\t\t\tthis.wildcardLocationType = u1At(classFileBytes, this.readOffset, offset);", "-\t\t\t\tthis.readOffset++;", "-\t\t\t\tinternalDecoding(this.wildcardLocationType, classFileBytes, constantPool, offset);", "-\t\t\t\tsize = this.locations.length;", "-\t\t\t\tSystem.arraycopy(this.locations, 0, (this.wildcardLocations = new int[size]), 0, size);", "-\t\t\t\tint locationLength = u2At(classFileBytes, this.readOffset, offset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, offset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\tinternalDecoding(index, classFileBytes, constantPool, offset);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ed93731f59662aa8313a38d2f5f53c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "afcefcc52a6e235f9ed640317727929d84135cf0", "commitAfterChange": "5ce294a787e58643d5e8115fe2ddfea119e53aa2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tClassScope classScope)", "signatureAfterChange": "  public void traverse(ASTVisitor visitor,\tClassScope classScope)", "diff": ["-", "-\tpublic void traverse(", "-\t\tASTVisitor visitor,", "-\t\tClassScope classScope) {", "-", "-\t\t", "-\t\tif (visitor.visit(this, classScope)) {", "-\t\t\tif (this.annotations != null) {", "-\t\t\t\tint annotationsLength = this.annotations.length;", "-\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "-\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tif (this.typeParameters != null) {", "-\t\t\t\tint typeParametersLength = this.typeParameters.length;", "-\t\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "-\t\t\t}\t\t\t", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint argumentLength = arguments.length;", "-\t\t\t\tfor (int i = 0; i < argumentLength; i++)", "-\t\t\t\t\targuments[i].traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tif (thrownExceptions != null) {", "-\t\t\t\tint thrownExceptionsLength = thrownExceptions.length;", "-\t\t\t\tfor (int i = 0; i < thrownExceptionsLength; i++)", "-\t\t\t\t\tthrownExceptions[i].traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tif (constructorCall != null)", "-\t\t\t\tconstructorCall.traverse(visitor, scope);", "-\t\t\tif (statements != null) {", "-\t\t\t\tint statementsLength = statements.length;", "-\t\t\t\tfor (int i = 0; i < statementsLength; i++)", "-\t\t\t\t\tstatements[i].traverse(visitor, scope);", "-\t\tvisitor.endVisit(this, classScope);", "+", "+public void traverse(ASTVisitor visitor,\tClassScope classScope) {", "+\tif (visitor.visit(this, classScope)) {", "+\t\tif (this.annotations != null) {", "+\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\tthis.annotations[i].traverse(visitor, this.scope);", "+\t\t}", "+\t\tif (this.typeParameters != null) {", "+\t\t\tint typeParametersLength = this.typeParameters.length;", "+\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\tthis.typeParameters[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t}\t\t\t", "+\t\tif (this.arguments != null) {", "+\t\t\tint argumentLength = this.arguments.length;", "+\t\t\tfor (int i = 0; i < argumentLength; i++)", "+\t\t\t\tthis.arguments[i].traverse(visitor, this.scope);", "+\t\t}", "+\t\tif (this.thrownExceptions != null) {", "+\t\t\tint thrownExceptionsLength = this.thrownExceptions.length;", "+\t\t\tfor (int i = 0; i < thrownExceptionsLength; i++)", "+\t\t\t\tthis.thrownExceptions[i].traverse(visitor, this.scope);", "+\t\t}", "+\t\tif (this.constructorCall != null)", "+\t\t\tthis.constructorCall.traverse(visitor, this.scope);", "+\t\tif (this.statements != null) {", "+\t\t\tint statementsLength = this.statements.length;", "+\t\t\tfor (int i = 0; i < statementsLength; i++)", "+\t\t\t\tthis.statements[i].traverse(visitor, this.scope);", "+\t\t}", "+\t}", "+\tvisitor.endVisit(this, classScope);", "+}"]}], "num": 56436}
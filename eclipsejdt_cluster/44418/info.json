{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "160550c9bebb3ecbaab2a88d3d55a0e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "789fe77072d7a1149ae4198487c2fabb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "24c9e84b2ec4fea87b1bf2f444e5d541a0e3f479", "commitAfterChange": "0685919bfb078b0c67b52f91b0cdb3192d89246d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\t\t\tif (scope.isJavaLangObject(castType)) {", "+\t\t\t\tif (castType.id == T_Object) {", "-\t\t\t\tif (scope.isJavaLangCloneable(castType) || scope.isJavaIoSerializable(castType)) {", "+\t\t\t\tif (castType.id == T_JavaLangCloneable || castType.id == T_JavaIoSerializable) {", "-\t\t\t\tif (scope.isJavaLangObject(expressionType)) { // potential runtime error", "+\t\t\t\tif (expressionType.id == T_Object) { // potential runtime error", "-\t\t\t\tif (((ReferenceBinding) expressionType).isFinal()) {", "-\t\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "-\t\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t} else { // a subclass may implement the interface ==> no check at compile time", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "+\t\t\t\t\treturn false;", "+\t\t\t\tif (!((ReferenceBinding) expressionType).isFinal()) {", "+\t\t\t\t\t// a subclass may implement the interface ==> no check at compile time", "-\t\t\t\t\treturn true;", "+\t\t\t\t\treturn true;\t\t\t\t    ", "+\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "-\t\t\tif (scope.isJavaLangCloneable(expressionType)", "-\t\t\t\t\t|| scope.isJavaIoSerializable(expressionType)) {// potential runtime error", "+\t\t\tif (expressionType.id == T_JavaLangCloneable", "+\t\t\t\t\t|| expressionType.id == T_JavaIoSerializable) {// potential runtime error", "-\t\t\tif (scope.isJavaLangObject(castType)) { // no runtime error", "+\t\t\tif (castType.id == T_Object) { // no runtime error", "-\t\t\tif (castType == expressionType) { ", "-\t\t\t\treturn false; // identity conversion", "+\t\t\tif (expressionType.isCompatibleWith(castType)) {", "+\t\t\t\treturn false; ", "-\t\t\tif (Scope.compareTypes(castType, expressionType) == NotRelated) {", "+\t\t\tif (!castType.isCompatibleWith(expressionType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd2a0e6f1ddeee87004eb61b9aaec75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "409f0d1ccf0133d5fcf6863869c728111e50135d", "commitAfterChange": "84e2da9db5b8e3d6a6df97b0f7ad6795dd65a9ad", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tprotected boolean isOnClasspath(IJavaElement element)", "signatureAfterChange": "\r \t\r private boolean isOnClasspath(IClasspathEntry[] classpath, IResource res)", "diff": ["-\t */\r", "-\tprotected boolean isOnClasspath(IJavaElement element) {\r", "-\r", "-\t\tif (element.getElementType() == IJavaElement.PACKAGE_FRAGMENT_ROOT) {\r", "-\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) element;\r", "-\t\t\tJavaProject jp = (JavaProject) element.getJavaProject();\r", "-\t\t\ttry {\r", "-\t\t\t\treturn jp.getClasspathEntryFor(root.getPath()) != null;\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\treturn true;\r", "-\t\t}\r", "-\r", "-\t}\r", "+\t\r", "+private boolean isOnClasspath(IClasspathEntry[] classpath, IResource res) {\r", "+\tIPath path = res.getFullPath();\r", "+\tif (classpath == null) {\r", "+\t\treturn true;\r", "+\t} else if (classpath == UNKNOWN_CLASSPATH) {\r", "+\t\treturn false;\r", "+\t} else {\r", "+\t\tfor (int i = 0, length = classpath.length; i < length; i++) {\r", "+\t\t\tif (classpath[i].getPath().isPrefixOf(path)) {\r", "+\t\t\t\treturn true;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn false;\r", "+\t}\r", "+}\r"]}], "num": 44418}
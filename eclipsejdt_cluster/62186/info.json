{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77d4cf042f1c50bb6e8ea827c388b65a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c86b479f20194c58a798badfa3c2bbbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "da0372488a7d84e7cb9c4ca0733fb42f30faa604", "commitAfterChange": "f4bb90e126352ba58699dc135199884ab2b69a00", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\t \t \tpublic FlowInfo checkNullStatus(BlockScope scope, FlowInfo flowInfo, int nullStatus)", "signatureAfterChange": "\t \t \tpublic FlowInfo checkNullStatus(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, int nullStatus)", "diff": ["-\tpublic FlowInfo checkNullStatus(BlockScope scope, FlowInfo flowInfo, int nullStatus) {", "+\tpublic FlowInfo checkNullStatus(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, int nullStatus) {", "-\t\t\t\t\t\tscope.problemReporter().localVariableCannotBeNull(local, this);", "+\t\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, this, FlowInfo.NON_NULL, flowInfo);", "-\t\t\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, this);", "+\t\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, this, FlowInfo.NULL, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0fdb217858fd2dc9e70506d0c0ff3ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "da0372488a7d84e7cb9c4ca0733fb42f30faa604", "commitAfterChange": "f4bb90e126352ba58699dc135199884ab2b69a00", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference)", "signatureAfterChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference)", "diff": ["-\tprivate void checkVariableComparison(BlockScope scope, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference) {", "+\tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference) {", "-\t\t\t\t\tscope.problemReporter().localVariableCannotBeNull(local, reference);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, FlowInfo.NON_NULL, flowInfo);", "-\t\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, reference);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, FlowInfo.NULL, flowInfo);", "-\t\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, reference);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, FlowInfo.NULL, flowInfo);"]}], "num": 62186}
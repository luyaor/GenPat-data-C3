{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a5345ca926a8519ba745d35e421a1c3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "817e4b7c7307d871763ec7656c943766", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "65a63579ebc9b37573db7995b64988407cf25ede", "commitAfterChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test006() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test006() throws JavaModelException, CoreException, UnsupportedEncodingException", "diff": ["-\t// TODO (frederic) put back assertions when failure on linux platform will be fixed", "-\tpublic void test006() throws JavaModelException, CoreException {", "+\tpublic void test006() throws JavaModelException, CoreException, UnsupportedEncodingException {", "-\t\tSystem.out.println(\"Encoding tests006:\");", "-\t\tSystem.out.println(\"  - file encoding: \"+this.utf8File.getCharset());", "-\t\tSystem.out.println(\"  - project encoding: \"+this.encodingProject.getDefaultCharset());", "-\t\tSystem.out.println(\"  - workspace encoding: \"+getWorkspaceRoot().getDefaultCharset());", "-\t\tif (encodedContents.equals(source)) {", "-\t\t\tSystem.out.println(\"  => SUCCESS: sources are identical\");", "-\t\t} else {", "-//\t\t\tSystem.out.println(\"  => FAIL: Encoded UTF-8 source should have been decoded the same way!\");", "-\t\t}", "-//\t\tassertTrue(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents.equals(source));", "+\t\tassertEquals(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents, source);", "-\t\tbyte[] sourceBytes = source.getBytes();", "+\t\tbyte[] sourceBytes = source.getBytes(systemEncoding);", "-\t\tif (encodedBytes.length == sourceBytes.length) {", "-\t\t\tSystem.out.println(\"  => SUCCESS: bytes arrays have same size\");", "-\t\t} else {", "-//\t\t\tSystem.out.println(\"  => FAIL: Wrong size of encoded string\");", "-\t\t}", "-//\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "-\t\tfor (int i = 0, max = sourceBytes.length; i < max; i++) {", "-\t\t\tif (sourceBytes[i] != encodedBytes[i]) {", "-//\t\t\t\tSystem.out.println(\"  => FAIL: Wrong size of encoded character at \" + i);", "-\t\t\t\tbreak;", "+\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "+\t\t// Do not compare arrays contents if system encoding is ASCII (meaningful bytes are destroyed during convertion...)", "+\t\tif (!\"ASCII\".equals(systemEncoding)) {", "+\t\t\tfor (int i = 0, max = sourceBytes.length; i < max; i++) {", "+\t\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, sourceBytes[i] == encodedBytes[i]);", "-//\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, sourceBytes[i] == encodedBytes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad3a44a22fa13fdd293086020c82fb3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "83c47ad58d0e74e38827d2d1f073a35312f6f8d5", "commitAfterChange": "1d0bf2fd1ae02cf0a5ebd8dc2dd268afda57373a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void _test006() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test006() throws JavaModelException, CoreException", "diff": ["-\tpublic void _test006() throws JavaModelException, CoreException {", "+\t// TODO (frederic) put back assertions when failure on linux platform will be fixed", "+\tpublic void test006() throws JavaModelException, CoreException {", "-\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File, null));", "-\t\tassertEquals(\"Project encoding should be the same than workspace encoding!\", this.encodingProject.getDefaultCharset(), getWorkspaceRoot().getDefaultCharset());", "-\t\tassertTrue(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents.equals(source));", "-", "+\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File));", "+\t\tSystem.out.println(\"Encoding tests006:\");", "+\t\tSystem.out.println(\"  - file encoding: \"+this.utf8File.getCharset());", "+\t\tSystem.out.println(\"  - project encoding: \"+this.encodingProject.getDefaultCharset());", "+\t\tSystem.out.println(\"  - workspace encoding: \"+getWorkspaceRoot().getDefaultCharset());", "+\t\tif (encodedContents.equals(source)) {", "+\t\t\tSystem.out.println(\"  => SUCCESS: sources are identical\");", "+\t\t} else {", "+\t\t\tSystem.out.println(\"  => FAIL: Encoded UTF-8 source should have been decoded the same way!\");", "+\t\t}", "+//\t\tassertTrue(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents.equals(source));", "+\t\t\t", "-\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "+\t\tif (encodedBytes.length == sourceBytes.length) {", "+\t\t\tSystem.out.println(\"  => SUCCESS: bytes arrays have same size\");", "+\t\t} else {", "+\t\t\tSystem.out.println(\"  => FAIL: Wrong size of encoded string\");", "+\t\t}", "+//\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "-\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, sourceBytes[i] == encodedBytes[i]);", "+\t\t\tif (sourceBytes[i] != encodedBytes[i]) {", "+\t\t\t\tSystem.out.println(\"  => FAIL: Wrong size of encoded character at \" + i);", "+\t\t\t\tbreak;", "+\t\t\t}", "+//\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, sourceBytes[i] == encodedBytes[i]);"]}], "num": 34870}
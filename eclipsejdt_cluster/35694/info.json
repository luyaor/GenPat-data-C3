{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09efaa50e518b157826c3b4b94272dd3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "679e39fe68578b32414699eaab35c5e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource) throws JavaModelException", "signatureAfterChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource) throws JavaModelException", "diff": ["-", "-\t\tboolean validInfo = false;", "-\t\ttry {", "-\t\t\tif (getProject().isOpen()) {", "-\t\t\t\t// put the info now, because computing the roots requires it", "-\t\t\t\tJavaModelManager.getJavaModelManager().putInfo(this, info);", "-", "-\t\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\t\t\tIWorkspaceRoot wRoot = workspace.getRoot();", "-\t\t\t\t// request marker refresh on project opening (so as to diagnose unbound variables on startup)", "-\t\t\t\tIClasspathEntry[] resolvedClasspath = getResolvedClasspath(true/*ignore unresolved variable*/, false /*37274:!workspace.isTreeLocked()*/  /*refresh CP markers*/);", "-", "-\t\t\t\t// compute the pkg fragment roots (resolved CP should already be cached from marker refresh)", "-\t\t\t\tupdatePackageFragmentRoots();\t\t\t\t", "-\t\t\t\t// remember the timestamps of external libraries the first time they are looked up", "-\t\t\t\tfor (int i = 0, length = resolvedClasspath.length; i < length; i++) {", "-\t\t\t\t\tIClasspathEntry entry = resolvedClasspath[i];", "-\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "-\t\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\t\tObject target = JavaModel.getTarget(wRoot, path, true);", "-\t\t\t\t\t\tif (target instanceof java.io.File) {", "-\t\t\t\t\t\t\tMap externalTimeStamps = JavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps;", "-\t\t\t\t\t\t\tif (externalTimeStamps.get(path) == null) {", "-\t\t\t\t\t\t\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File)target);", "-\t\t\t\t\t\t\t\texternalTimeStamps.put(path, new Long(timestamp));\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t}", "+\t\tif (getProject().isOpen()) {", "+\t\t\t// put the info now, because computing the roots requires it", "+\t\t\t//JavaModelManager.getJavaModelManager().putInfo(this, info);", "+\t", "+\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\t\tIWorkspaceRoot wRoot = workspace.getRoot();", "+\t\t\tIClasspathEntry[] resolvedClasspath = getResolvedClasspath(true/*ignore unresolved variable*/, false  /*don't refresh CP markers (see bug 37274)*/);", "+\t", "+\t\t\t// compute the pkg fragment roots (resolved CP should already be cached from marker refresh)", "+\t\t\tcomputeChildren((JavaProjectElementInfo)info);\t\t\t\t", "+\t", "+\t\t\t// remember the timestamps of external libraries the first time they are looked up", "+\t\t\tfor (int i = 0, length = resolvedClasspath.length; i < length; i++) {", "+\t\t\t\tIClasspathEntry entry = resolvedClasspath[i];", "+\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tObject target = JavaModel.getTarget(wRoot, path, true);", "+\t\t\t\t\tif (target instanceof java.io.File) {", "+\t\t\t\t\t\tMap externalTimeStamps = JavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps;", "+\t\t\t\t\t\tif (externalTimeStamps.get(path) == null) {", "+\t\t\t\t\t\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File)target);", "+\t\t\t\t\t\t\texternalTimeStamps.put(path, new Long(timestamp));\t\t\t\t\t\t\t", "-\t\t\t\t}\t\t\t", "-", "-\t\t\t\t// only valid if reaches here\t\t\t\t", "-\t\t\t\tvalidInfo = true;", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tif (!validInfo)", "-\t\t\t\tJavaModelManager.getJavaModelManager().removeInfo(this);", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t", "-\t\treturn validInfo;", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "958c347408d1ec252e97f05c1bc71ef0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Problem.java", "commitBeforeChange": "e2827e126b55e7ef1923fa3efec0a2ea0aba2477", "commitAfterChange": "be46dfeefe4fe81bea0a7a5024565ad818910235", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic Problem(String location, String message, IPath resourcePath, int start, int end, int categoryId)", "signatureAfterChange": " \t \tpublic Problem(String location, String message, IPath resourcePath, int start, int end, int categoryId)", "diff": ["-\t\tif (false && (start > 0 || end > 0) && categoryId <= 0) {", "-\t\t\tSystem.out.print(\"is categoryId properly set ? new Problem(\\\"\" + location + \"\\\", \\\"\" + message + \"\\\", \\\"\" + resourcePath + \"\\\"\");", "-\t\t\tSystem.out.print(\", \" + start + \", \" + end +  \", \" + categoryId);", "-\t\t\tSystem.out.println(\")\");", "-\t\t}", "+//\t\tif ((start > 0 || end > 0) && categoryId <= 0) {", "+//\t\t\tSystem.out.print(\"is categoryId properly set ? new Problem(\\\"\" + location + \"\\\", \\\"\" + message + \"\\\", \\\"\" + resourcePath + \"\\\"\");", "+//\t\t\tSystem.out.print(\", \" + start + \", \" + end +  \", \" + categoryId);", "+//\t\t\tSystem.out.println(\")\");", "+//\t\t}"]}], "num": 35694}
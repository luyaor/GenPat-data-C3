{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12b458e9b8323f4c0c7b36966b93e666", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ca6a38faf6feb3b4ff35dd0f72f3568", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedEntry) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] resolveClasspath(IClasspathEntry[] rawClasspath) throws JavaModelException", "diff": ["-\t */", "-\tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedEntry)", "-\t\tthrows JavaModelException {", "-", "-\t\treturn ", "-\t\t\tgetResolvedClasspath(", "-\t\t\t\tignoreUnresolvedEntry, ", "-\t\t\t\tfalse, // don't generateMarkerOnError", "-\t\t\t\ttrue // returnResolutionInProgress", "-\t\t\t);", "-\t}", "+\t */", "+\tpublic IClasspathEntry[] resolveClasspath(IClasspathEntry[] rawClasspath) throws JavaModelException {", "+\t\tArrayList resolvedEntries = new ArrayList();", "+\t\tfor (int i = 0, length = rawClasspath.length; i < length; i++) {", "+\t\t\tIClasspathEntry rawEntry = rawClasspath[i];", "+\t\t\tswitch (rawEntry.getEntryKind()){", "+\t\t\t\tcase IClasspathEntry.CPE_VARIABLE:", "+\t\t\t\t\tIClasspathEntry resolvedEntry = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);", "+\t\t\t\t\t} catch (AssertionFailedException e) {", "+\t\t\t\t\t\t// Catch the assertion failure", "+\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=55992", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (resolvedEntry != null)", "+\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IClasspathEntry.CPE_CONTAINER:", "+\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), this);", "+\t\t\t\t\tif (container == null)", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();", "+\t\t\t\t\tif (containerEntries == null) ", "+\t\t\t\t\t\tbreak;", "+", "+\t\t\t\t\t// container was bound", "+\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){", "+\t\t\t\t\t\tClasspathEntry cEntry = (ClasspathEntry) containerEntries[j];", "+\t\t\t\t\t\t// if container is exported or restricted, then its nested entries must in turn be exported  (21749) and/or propagate restrictions", "+\t\t\t\t\t\tcEntry = cEntry.combineWith((ClasspathEntry) rawEntry);", "+\t\t\t\t\t\tresolvedEntries.add(cEntry);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tresolvedEntries.add(rawEntry);", "+\t\t\t}", "+\t\t}", "+\t\tIClasspathEntry[] result = new IClasspathEntry[resolvedEntries.size()];", "+\t\tresolvedEntries.toArray(result);", "+\t\treturn result;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0554975ea53c1b592176c7763a9ee64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "signatureAfterChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "diff": ["-\t\t\tStringBuffer sourceFileName = new StringBuffer(elementName.substring(0, elementName.lastIndexOf('.')));", "-\t\t\tsourceFileName.append(SuffixConstants.SUFFIX_java);", "+\t\t\tString sourceFileWithoutExtension = elementName.substring(0, elementName.lastIndexOf('.'));", "-\t\t\t\tPackageFragment packageFragment = (PackageFragment) getParent();", "-\t\t\t\tZipEntry zipEntry = jar.getEntry(Util.concatWith(packageFragment.names, sourceFileName.toString(), '/'));", "-\t\t\t\tif (zipEntry != null) {", "-\t\t\t\t\t// found a source file", "-\t\t\t\t\tthis.checkAutomaticSourceMapping = true;", "-\t\t\t\t\troot.attachSource(root.getPath(), null, null);", "-\t\t\t\t\tSourceMapper sourceMapper = getSourceMapper();", "-\t\t\t\t\tif (sourceMapper != null) {", "-\t\t\t\t\t\treturn mapSource(sourceMapper);", "+\t\t\t\tString[] pkgName = ((PackageFragment) getParent()).names;", "+\t\t\t\tfor (int i = 0, length = Util.JAVA_LIKE_EXTENSIONS.length; i < length; i++) {", "+\t\t\t\t\tStringBuffer entryName = new StringBuffer();", "+\t\t\t\t\tfor (int j = 0, pkgNameLength = pkgName.length; j < pkgNameLength; j++) {", "+\t\t\t\t\t\tentryName.append(pkgName[j]);", "+\t\t\t\t\t\tentryName.append('/');", "+\t\t\t\t\t}", "+\t\t\t\t\tentryName.append(sourceFileWithoutExtension);", "+\t\t\t\t\tentryName.append(Util.JAVA_LIKE_EXTENSIONS[i]);", "+\t\t\t\t\tZipEntry zipEntry = jar.getEntry(entryName.toString());", "+\t\t\t\t\tif (zipEntry != null) {", "+\t\t\t\t\t\t// found a source file", "+\t\t\t\t\t\tthis.checkAutomaticSourceMapping = true;", "+\t\t\t\t\t\troot.attachSource(root.getPath(), null, null);", "+\t\t\t\t\t\tSourceMapper sourceMapper = getSourceMapper();", "+\t\t\t\t\t\tif (sourceMapper != null) {", "+\t\t\t\t\t\t\treturn mapSource(sourceMapper);", "+\t\t\t\t\t\t}", "-\t\t\t\tIPath sourceFilePath = getPath().removeFileExtension().addFileExtension(EXTENSION_java);", "-\t\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\t\t\tif (workspace == null) {", "-\t\t\t\t\tthis.checkAutomaticSourceMapping = true; // we don't want to check again", "-\t\t\t\t\treturn null; // workaround for http://bugs.eclipse.org/bugs/show_bug.cgi?id=34069", "+\t\t\t\t", "+\t\t\t\tIFolder pkgFolder = (IFolder) getParent().getResource();", "+\t\t\t\tIResource[] files = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tfiles = pkgFolder.members();", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\tif (JavaModel.getTarget(", "-\t\t\t\t\t\tworkspace.getRoot(),", "-\t\t\t\t\t\tsourceFilePath.makeRelative(), // ensure path is relative (see http://dev.eclipse.org/bugs/show_bug.cgi?id=22517)", "-\t\t\t\t\t\ttrue) != null) {", "+\t\t\t\tIResource sourceFile = null;", "+\t\t\t\tString classFileName = getElementName();", "+\t\t\t\tString simpleName = classFileName.substring(0, classFileName.lastIndexOf('.'));", "+\t\t\t\tfor (int i = 0, length = files.length; i < length; i++) {", "+\t\t\t\t\tIResource resource = files[i];", "+\t\t\t\t\tif (resource.getType() == IResource.FILE ", "+\t\t\t\t\t\t\t&& Util.equalsIgnoreJavaLikeExtension(resource.getName(), simpleName)) {", "+\t\t\t\t\t\tsourceFile = resource;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (sourceFile != null) {"]}], "num": 54076}
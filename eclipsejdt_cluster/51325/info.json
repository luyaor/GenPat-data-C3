{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c4d55f91ef4d79d5bd16182aff2e10b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c03089c317110effc8e0affb95cfc2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "  \tprivate void initializeDefaultLocals(StackMapFrame frame, \t\t\tMethodBinding methodBinding, \t\t\tint maxLocals, \t\t\tint codeLength)", "signatureAfterChange": "  \tprivate void initializeDefaultLocals(StackMapFrame frame, \t\t\tMethodBinding methodBinding, \t\t\tint maxLocals, \t\t\tint codeLength)", "diff": ["-\t\t\tif (isConstructor) {", "-\t\t\t\tLocalVariableBinding localVariableBinding = new LocalVariableBinding(\"this\".toCharArray(), methodBinding.declaringClass, 0, false); //$NON-NLS-1$", "+\t\t\tif (isConstructor || !methodBinding.isStatic()) {", "+\t\t\t\tLocalVariableBinding localVariableBinding = new LocalVariableBinding(ConstantPool.This, methodBinding.declaringClass, 0, false);", "-\t\t\t\t\t\tVerificationTypeInfo.ITEM_UNINITIALIZED_THIS,", "-\t\t\t\t\t\tmethodBinding.declaringClass));", "-\t\t\t\tresolvedPosition++;", "-\t\t\t} else if (!methodBinding.isStatic()) {", "-\t\t\t\tLocalVariableBinding localVariableBinding = new LocalVariableBinding(\"this\".toCharArray(), methodBinding.declaringClass, 0, false); //$NON-NLS-1$", "-\t\t\t\tlocalVariableBinding.resolvedPosition = 0;", "-\t\t\t\tthis.codeStream.record(localVariableBinding);", "-\t\t\t\tlocalVariableBinding.recordInitializationStartPC(0);", "-\t\t\t\tlocalVariableBinding.recordInitializationEndPC(codeLength);", "-\t\t\t\tframe.putLocal(resolvedPosition, new VerificationTypeInfo(", "-\t\t\t\t\t\tVerificationTypeInfo.ITEM_OBJECT,", "+\t\t\t\t\t\tisConstructor ? VerificationTypeInfo.ITEM_UNINITIALIZED_THIS : VerificationTypeInfo.ITEM_OBJECT,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bed7d8e9b06dfcefe6dea608e30ca750", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tbinding = scope.getField(this.receiverType, token, this);\r", "+\tthis.codegenBinding = this.binding = scope.getField(this.receiverType, token, this);\r", "-\t// if the binding declaring class is not visible, need special action\r", "-\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "-\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "-\tif (binding.declaringClass != this.receiverType\r", "-\t\t&& !this.receiverType.isArrayType()\r", "-\t\t&& binding.declaringClass != null // array.length\r", "-\t\t&& binding.constant == NotAConstant\r", "-\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "-\t\t\t\t&& binding.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r", "-\t\t\t|| !binding.declaringClass.canBeSeenBy(scope))){\r", "-\t\t\tbinding = new FieldBinding(binding, (ReferenceBinding) this.receiverType);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f93fbff64160702de427edcf985f2c4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tbinding = scope.getField(receiverType, token, this);\r", "+\tthis.codegenBinding = this.binding = scope.getField(receiverType, token, this);\r", "-\t\t\tbinding = localScope.getFieldForCodeSnippet(delegateThis.type, token, this);\r", "+\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(delegateThis.type, token, this);\r", "-\t\t\tbinding = firstAttempt;\r", "+\t\t\tthis.codegenBinding = this.binding = firstAttempt;\r", "-\t// if the binding declaring class is not visible, need special action\r", "-\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "-\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\t\r", "-\tif (binding.declaringClass != this.receiverType\r", "-\t\t&& binding.declaringClass != null // array.length\r", "-\t\t&& binding.constant == NotAConstant\r", "-\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "-\t\t\t\t&& binding.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r", "-\t\t\t|| !binding.declaringClass.canBeSeenBy(scope))){\r", "-\t\t\tbinding = new FieldBinding(binding, (ReferenceBinding) this.receiverType);\r", "-\t}\r"]}], "num": 51325}
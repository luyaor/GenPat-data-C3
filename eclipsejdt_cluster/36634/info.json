{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad845ac4b6fe31d9bcfced61d2a48bab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4a985422be0b500768b70f633e7b57e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "2193765f6a14f1428523dab68858768ca623c9d3", "commitAfterChange": "5450463d69e66bedc3d0797b782f5dab3b9072d6", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 154, "signatureBeforeChange": " \t \tprivate Set loadNonChainingJarsCache()", "signatureAfterChange": " \t \tprivate Set loadClasspathListCache(String cacheName)", "diff": ["-\tprivate Set loadNonChainingJarsCache() {", "-\t\tSet nonChainingJarsCache = new HashSet();", "-\t\tFile nonChainingJarsFile = getNonChainingJarsFile();", "+\tprivate Set loadClasspathListCache(String cacheName) {", "+\t\tSet pathCache = new HashSet();", "+\t\tFile cacheFile = getClasspathListFile(cacheName);", "-\t\t\tin = new DataInputStream(new BufferedInputStream(new FileInputStream(nonChainingJarsFile)));", "+\t\t\tin = new DataInputStream(new BufferedInputStream(new FileInputStream(cacheFile)));", "-\t\t\t\tnonChainingJarsCache.add(Path.fromPortableString(path));", "+\t\t\t\tpathCache.add(Path.fromPortableString(path));", "-\t\t\tif (nonChainingJarsFile.exists())", "+\t\t\tif (cacheFile.exists())", "-\t\treturn Collections.synchronizedSet(nonChainingJarsCache);", "+\t\treturn Collections.synchronizedSet(pathCache);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c57ba1e1c55113ced33541a06980ca2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "a4669bf7c1bea8a08bf4a9d017bbfc729f9d6fb3", "commitAfterChange": "8530f36dbde13058837d240762ab3a756916ff70", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate void runTest(String source, String expectedResult, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length)", "signatureAfterChange": " \t \t \tprivate void runTest(String input, String output, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "diff": ["+\tprivate void runTest(String input, String output, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator) {", "+\t\tString result;", "+\t\tif (length == -1) {", "+\t\t\tresult = runFormatter(codeFormatter, input, kind, indentationLevel, offset, input.length(), lineSeparator);", "+\t\t} else {", "+\t\t\tresult = runFormatter(codeFormatter, input, kind, indentationLevel, offset, length, lineSeparator);", "+\t\t}", "+\t\tassertLineEquals(result, input, output, checkNull);", "+\t}", "-\tprivate void runTest(String source, String expectedResult, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length) {", "-\t\tString result;", "-\t\tif (length == -1) {", "-\t\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, source.length(), null);", "-\t\t} else {", "-\t\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, length, null);", "-\t\t}", "-\t\tassertLineEquals(result, source, expectedResult, checkNull);", "-\t}"]}], "num": 36634}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43b6c7525e343bed078339ec3dae1589", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0165e2a1022b3b97df4dfe21dc448570", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "diff": ["-\tif (this.binding.canBeSeenBy(this.receiverType, this, currentScope)) {", "+\tif (this.codegenBinding.canBeSeenBy(this.receiverType, this, currentScope)) {", "-\t\tboolean isStatic = this.binding.isStatic();", "+\t\tboolean isStatic = this.codegenBinding.isStatic();", "-\t\t\tcodeStream.invokestatic(this.binding);", "+\t\t\tcodeStream.invokestatic(this.codegenBinding);", "-\t\t\t\tcodeStream.invokespecial(this.binding);", "+\t\t\t\tcodeStream.invokespecial(this.codegenBinding);", "-\t\t\t\tif (this.binding.declaringClass.isInterface()) {", "-\t\t\t\t\tcodeStream.invokeinterface(this.binding);", "+\t\t\t\tif (this.codegenBinding.declaringClass.isInterface()) {", "+\t\t\t\t\tcodeStream.invokeinterface(this.codegenBinding);", "-\t\t\t\t\tcodeStream.invokevirtual(this.binding);", "+\t\t\t\t\tcodeStream.invokevirtual(this.codegenBinding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForMethod(currentScope, this.binding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForMethod(currentScope, this.codegenBinding);", "-\t\tboolean isStatic = this.binding.isStatic();", "+\t\tboolean isStatic = this.codegenBinding.isStatic();", "-\t\t\tcodeStream.newArray(currentScope, new ArrayBinding(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT), 1));", "+\t\t\tcodeStream.newArray(currentScope, currentScope.createArrayType(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT, 3), 1));", "-\t\t\t\tTypeBinding parameterBinding = this.binding.parameters[i];", "+\t\t\t\tTypeBinding parameterBinding = this.codegenBinding.parameters[i];", "-\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.binding.parameters[i]);", "+\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.codegenBinding.parameters[i]);", "-\t\t\tcodeStream.newArray(currentScope, new ArrayBinding(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT), 1));\t\t\t", "+\t\t\tcodeStream.newArray(currentScope, currentScope.createArrayType(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT, 3), 1));\t\t\t", "-\t\tif (this.binding.returnType.isBaseType()) {", "-\t\t\tint typeID = this.binding.returnType.id;", "+\t\tif (this.codegenBinding.returnType.isBaseType()) {", "+\t\t\tint typeID = this.codegenBinding.returnType.id;", "-\t\t\tcodeStream.checkcast(this.binding.returnType);", "+\t\t\tcodeStream.checkcast(this.codegenBinding.returnType);", "-\t\tswitch (this.binding.returnType.id) {", "+\t\tswitch (this.codegenBinding.returnType.id) {", "+\t// TODO (philippe) need to revise codegen to include genericCast"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09b7048b0797c22eb1310b6f54f483e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope,  \tCodeStream codeStream,  \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope,  \tCodeStream codeStream,  \tboolean valueRequired)", "diff": ["-\tReferenceBinding allocatedType = this.binding.declaringClass;", "+\tReferenceBinding allocatedType = this.codegenBinding.declaringClass;", "-\tif (this.binding.canBeSeenBy(allocatedType, this, currentScope)) {", "+\tif (this.codegenBinding.canBeSeenBy(allocatedType, this, currentScope)) {", "-\t\tcodeStream.invokespecial(this.binding);", "+\t\tcodeStream.invokespecial(this.codegenBinding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForConstructor(currentScope, this.binding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForConstructor(currentScope, this.codegenBinding);", "-\t\t\tcodeStream.newArray(currentScope, new ArrayBinding(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT), 1));", "+\t\t\tcodeStream.newArray(currentScope, currentScope.createArrayType(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT, 3), 1));", "-\t\t\t\tTypeBinding parameterBinding = this.binding.parameters[i];", "+\t\t\t\tTypeBinding parameterBinding = this.codegenBinding.parameters[i];", "-\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.binding.parameters[i]);", "+\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.codegenBinding.parameters[i]);", "-\t\t\tcodeStream.newArray(currentScope, new ArrayBinding(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT), 1));\t\t\t", "+\t\t\tcodeStream.newArray(currentScope, currentScope.createArrayType(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT, 3), 1));\t\t\t"]}], "num": 13826}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba3b6d7896d68ee5b84376e880c5128b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "369bc77f63cf5eac8ffdec5db4deaf66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "07f2a3d76611d11852367ea136a6272990449122", "commitAfterChange": "b51487a3e769c1faf54930e906289a243b81936a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public void reconcile(boolean forceProblemDetection, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  public void reconcile(boolean forceProblemDetection, IProgressMonitor monitor) throws JavaModelException", "diff": ["-", "-\tif (this.useCount == 0) throw newNotPresentException(); //was destroyed", "-\t", "-\tif (monitor != null){", "-\t\tif (monitor.isCanceled()) return;", "-\t\tmonitor.beginTask(Util.bind(\"element.reconciling\"), 10); //$NON-NLS-1$", "-\t}", "-", "-\tboolean wasConsistent = isConsistent();", "-\tJavaElementDeltaBuilder deltaBuilder = null;", "-", "-\ttry {", "-\t\t// create the delta builder (this remembers the current content of the cu)", "-\t\tif (!wasConsistent){", "-\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(this);", "-\t\t\t", "-\t\t\t// update the element infos with the content of the working copy", "-\t\t\tthis.makeConsistent(monitor);", "-\t\t\tdeltaBuilder.buildDeltas();", "-\t", "-\t\t}", "-", "-\t\tif (monitor != null) monitor.worked(2);", "-\t\t", "-\t\t// force problem detection? - if structure was consistent", "-\t\tif (forceProblemDetection && wasConsistent){", "-\t\t\tif (monitor != null && monitor.isCanceled()) return;", "-\t", "-\t\t\tIProblemRequestor problemRequestor = this.getProblemRequestor();", "-\t\t\tif (problemRequestor != null && problemRequestor.isActive()){", "-\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\tCompilationUnitProblemFinder.process(this, problemRequestor, monitor);", "-\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t// fire the deltas", "-\t\tif (deltaBuilder != null){", "-\t\t\tif ((deltaBuilder.delta != null) && (deltaBuilder.delta.getAffectedChildren().length > 0)) {", "-\t\t\t\tJavaModelManager.getJavaModelManager().", "-\t\t\t\t\tfire(deltaBuilder.delta, ElementChangedEvent.POST_RECONCILE);", "-\t\t\t}", "-\t\t}", "-\t} finally {", "-\t\tif (monitor != null) monitor.done();", "-\t}", "+\tReconcileWorkingCopyOperation op = new ReconcileWorkingCopyOperation(this, forceProblemDetection);", "+\trunOperation(op, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5fdc7a6775efcdfeedfbe579cf93d80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\tif (progressMonitor != null){", "-\t\t\tif (progressMonitor.isCanceled()) return;", "-\t\t\tprogressMonitor.beginTask(Util.bind(\"element.reconciling\"), 10); //$NON-NLS-1$", "+\t\tif (this.progressMonitor != null){", "+\t\t\tif (this.progressMonitor.isCanceled()) return;", "+\t\t\tthis.progressMonitor.beginTask(Util.bind(\"element.reconciling\"), 2); //$NON-NLS-1$", "-\t\tJavaElementDeltaBuilder deltaBuilder = null;", "-\t", "-\t\t\t// create the delta builder (this remembers the current content of the cu)", "-\t\t\tif (!wasConsistent){", "-\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "+\t\t\tif (!wasConsistent) {", "+\t\t\t\t// create the delta builder (this remembers the current content of the cu)", "+\t\t\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "-\t\t\t\tworkingCopy.makeConsistent(progressMonitor);", "+\t\t\t\tthis.ast = workingCopy.makeConsistent(this.createAST, this.progressMonitor);", "-\t\t", "-\t\t\t}", "-\t", "-\t\t\tif (progressMonitor != null) progressMonitor.worked(2);", "+", "+\t\t\t\tif (progressMonitor != null) progressMonitor.worked(2);", "-\t\t\t// force problem detection? - if structure was consistent", "-\t\t\tif (forceProblemDetection && wasConsistent){", "-\t\t\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return;", "-\t\t", "-\t\t\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "-\t\t\t\tif (problemRequestor != null && problemRequestor.isActive()){", "-\t\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\t\tCompilationUnitProblemFinder.process(workingCopy, this.workingCopyOwner, problemRequestor, progressMonitor);", "-\t\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// register the deltas", "-\t\t\tif (deltaBuilder != null){", "+\t\t\t\t// register the deltas", "+\t\t\t} else {", "+\t\t\t\t// force problem detection? - if structure was consistent", "+\t\t\t\tif (forceProblemDetection) {", "+\t\t\t\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "+\t\t\t\t\tif (problemRequestor != null && problemRequestor.isActive()){", "+\t\t\t\t\t\tproblemRequestor.beginReporting();", "+\t\t\t\t\t\tCompilationUnitDeclaration unit = CompilationUnitProblemFinder.process(workingCopy, this.workingCopyOwner, problemRequestor, this.progressMonitor);", "+\t\t\t\t\t\tproblemRequestor.endReporting();", "+\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "+\t\t\t\t\t\tif (this.createAST && unit != null) {", "+\t\t\t\t\t\t\tchar[] contents = workingCopy.getContents();", "+\t\t\t\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "+\t\t\t\t\t\t\tthis.ast = AST.convertCompilationUnit(unit, contents, options, this.progressMonitor);", "+\t\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 10975}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6e280898585ce0797dabef9be0ffd67", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbb38e322c721bc7c253c6e8bfbfe1e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "c9050a3a9594b7d361850fa9a3880d65c49e6aec", "commitAfterChange": "861f1162953e56602b4d7507e52e1f13733854c4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void generateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": "\r public void generateCode(ClassScope classScope, ClassFile classFile)", "diff": ["+\t// for each method we start the code generate with wideMode equals to false\r", "+\t// in the code Stream.\r", "+\tclassFile.codeStream.wideMode = false;\r", "-\t\tclassFile.generateMethodInfoHeader(binding);\r", "-\t\tint methodAttributeOffset = classFile.contentsOffset;\r", "-\t\tint attributeNumber = classFile.generateMethodInfoAttribute(binding);\r", "-\t\tif ((!binding.isNative()) && (!binding.isAbstract())) {\r", "-\t\t\tint codeAttributeOffset = classFile.contentsOffset;\r", "-\t\t\tclassFile.generateCodeAttributeHeader();\r", "-\t\t\tCodeStream codeStream = classFile.codeStream;\r", "-\t\t\tcodeStream.reset(this, classFile);\r", "-\t\t\t// initialize local positions\r", "-\t\t\tscope.computeLocalVariablePositions(binding.isStatic() ? 0 : 1, codeStream);\r", "-\r", "-\t\t\t// arguments initialization for local variable debug attributes\r", "-\t\t\tif (arguments != null) {\r", "-\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {\r", "-\t\t\t\t\tLocalVariableBinding argBinding;\r", "-\t\t\t\t\tcodeStream.addVisibleLocalVariable(argBinding = arguments[i].binding);\r", "-\t\t\t\t\targBinding.recordInitializationStartPC(0);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (statements != null) {\r", "-\t\t\t\tfor (int i = 0, max = statements.length; i < max; i++)\r", "-\t\t\t\t\tstatements[i].generateCode(scope, codeStream);\r", "-\t\t\t}\r", "-\t\t\tif (needFreeReturn) {\r", "-\t\t\t\tcodeStream.return_();\r", "-\t\t\t}\r", "-\t\t\t// local variable attributes\r", "-\t\t\tcodeStream.exitUserScope(scope);\r", "-\t\t\tcodeStream.recordPositionsFrom(0, this);\r", "-\t\t\tclassFile.completeCodeAttribute(codeAttributeOffset);\r", "-\t\t\tattributeNumber++;\r", "-\t\t}\r", "-\t\tclassFile.completeMethodInfo(methodAttributeOffset, attributeNumber);\r", "-\r", "-\t\t// if a problem got reported during code gen, then trigger problem method creation\r", "-\t\tif (ignoreFurtherInvestigation){\r", "-\t\t\tthrow new AbortMethod(scope.referenceCompilationUnit().compilationResult);\r", "-\t\t}\r", "+\t\tthis.internalGenerateCode(classScope, classFile);\r", "-\t\tint problemsLength;\r", "-\t\tIProblem[] problems = scope.referenceCompilationUnit().compilationResult.getProblems();\r", "-\t\tIProblem[] problemsCopy = new IProblem[problemsLength = problems.length];\r", "-\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);\r", "-\t\tclassFile.addProblemMethod(this, binding, problemsCopy, problemResetPC);\r", "+\t\tif (e.compilationResult == null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tif (statements != null) {\r", "+\t\t\t\t\tfor (int i = 0, max = statements.length; i < max; i++)\r", "+\t\t\t\t\t\tstatements[i].resetStateForCodeGeneration();\r", "+\t\t\t\t}\r", "+\t\t\t\tclassFile.contentsOffset = problemResetPC;\r", "+\t\t\t\tclassFile.methodCount--;\r", "+\t\t\t\tclassFile.codeStream.wideMode = true;\r", "+\t\t\t\tproblemResetPC = classFile.contentsOffset;\r", "+\t\t\t\tthis.internalGenerateCode(classScope, classFile);\r", "+\t\t\t} catch(AbortMethod e2) {\r", "+\t\t\t\tint problemsLength;\r", "+\t\t\t\tIProblem[] problems = scope.referenceCompilationUnit().compilationResult.getProblems();\r", "+\t\t\t\tIProblem[] problemsCopy = new IProblem[problemsLength = problems.length];\r", "+\t\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);\r", "+\t\t\t\tclassFile.addProblemMethod(this, binding, problemsCopy, problemResetPC);\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tint problemsLength;\r", "+\t\t\tIProblem[] problems = scope.referenceCompilationUnit().compilationResult.getProblems();\r", "+\t\t\tIProblem[] problemsCopy = new IProblem[problemsLength = problems.length];\r", "+\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);\r", "+\t\t\tclassFile.addProblemMethod(this, binding, problemsCopy, problemResetPC);\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf02a0baeba591e106374e01a22d83f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "409f0d1ccf0133d5fcf6863869c728111e50135d", "commitAfterChange": "84e2da9db5b8e3d6a6df97b0f7ad6795dd65a9ad", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic boolean execute()", "signatureAfterChange": "\r \tpublic boolean execute()", "diff": ["-\t\t\tfinal String OK = \"OK\"; //$NON-NLS-1$\r", "-\t\t\tfinal String DELETED = \"DELETED\"; //$NON-NLS-1$\r", "-\t\t\tfinal long indexLastModified = index.getIndexFile().lastModified();\r", "+\t\t\tthis.indexLastModified = index.getIndexFile().lastModified();\r", "-\t\t\tfinal Hashtable indexedFileNames = new Hashtable(100);\r", "+\t\t\tthis.indexedFileNames = new Hashtable(100);\r", "-\t\t\t\tindexedFileNames.put(fileName, DELETED);\r", "+\t\t\t\tthis.indexedFileNames.put(fileName, DELETED);\r", "-\t\t\tproject.accept(new IResourceVisitor() {\r", "-\t\t\t\tpublic boolean visit(IResource resource) {\r", "-\t\t\t\t\tif (resource.getType() == IResource.FILE) {\r", "-\t\t\t\t\t\tString extension = resource.getFileExtension();\r", "-\t\t\t\t\t\tif ((extension != null) && extension.equalsIgnoreCase(\"java\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\t\tIPath path = resource.getLocation();\r", "-\t\t\t\t\t\t\tif (path != null) {\r", "-\t\t\t\t\t\t\t\tFile resourceFile = path.toFile();\r", "-\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();\r", "-\t\t\t\t\t\t\t\tif (indexedFileNames.get(name) == null) {\r", "-\t\t\t\t\t\t\t\t\tindexedFileNames.put(name, resource);\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tindexedFileNames.put(\r", "-\t\t\t\t\t\t\t\t\t\tname,\r", "-\t\t\t\t\t\t\t\t\t\tresourceFile.lastModified() > indexLastModified\r", "-\t\t\t\t\t\t\t\t\t\t\t? (Object) resource\r", "-\t\t\t\t\t\t\t\t\t\t\t: (Object) OK);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\treturn false;\r", "+\t\t\tJavaCore javaCore = JavaCore.getJavaCore();\r", "+\t\t\tIJavaProject javaProject = javaCore.create(this.project);\r", "+\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "+\t\t\tIWorkspaceRoot root = this.project.getWorkspace().getRoot();\r", "+\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\t\t\t\t// Index only the project's source folders.\r", "+\t\t\t\t// Indexing of libraries is done in a separate job\r", "+\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_SOURCE)) {\r", "+\t\t\t\t\tIPath entryPath = entry.getPath();\r", "+\t\t\t\t\tIResource sourceFolder = root.findMember(entryPath);\r", "+\t\t\t\t\tif (sourceFolder != null) {\r", "+\t\t\t\t\t\tsourceFolder.accept(this);\r", "-\t\t\t\t\treturn true;\r", "-\t\t\t});\r", "+\t\t\t}\r", "+\t\t\t\r"]}], "num": 24480}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9eeca7bcf5fda7978bb0d4c230608f3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1068dbc6f2bb51ce2f75109557a7ef14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "f3c9675cf51bb72e29fbc9d7f34e4971169f02fd", "commitAfterChange": "16b5be2e00222a3a00629ad2d72eba0fbb1b2400", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["+        \"    -nonNullByDefault  for annotation based null analysis assume nonnull\\n\" + ", "+        \"                       as the global default\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1082d687714f249173d1ff21149cc813", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"    -missingNullDefault  report missing default nullness annotation\\n\" + ", "+        \"    -missingNullDefault  report missing default nullness annotation\\n\" +", "+        \"    -annotationpath <path>\\n\" + ", "+        \"                       Path to a base directory or zip file holding external\\n\" + ", "+        \"                       annotations to support annotation-based null analysis\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11ead7f42d1a82a854830b7491701427", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 630, "methodNumberAfterChange": 630, "signatureBeforeChange": " \tpublic void test626()", "signatureAfterChange": " \tpublic void test626()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tprivate static class B<A> {\\n\" + ", "-\t\t\t\"\t                       ^\\n\" + ", "-\t\t\t\"The type parameter A is hiding the type X.A\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 21)\\n\" + ", "-\t\t\t\"\tSystem.out.println(b instanceof C);\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Incompatible conditional operand types X.B<X.A> and X.C\\n\" + ", "-\t\t\t\"----------\\n\");", "+    \t\t\"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+    \t\t\"\tprivate static class B<A> {\\n\" + ", "+    \t\t\"\t                       ^\\n\" + ", "+    \t\t\"The type parameter A is hiding the type X.A\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+    \t\t\"\tprivate static class AA extends A {\\n\" + ", "+    \t\t\"\t                     ^^\\n\" + ", "+    \t\t\"Access to enclosing constructor X.A() is emulated by a synthetic accessor method. Increasing its visibility will improve your performance\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. WARNING in X.java (at line 15)\\n\" + ", "+    \t\t\"\tprivate static class C extends B<AA> {\\n\" + ", "+    \t\t\"\t                     ^\\n\" + ", "+    \t\t\"Access to enclosing constructor X.B<A>() is emulated by a synthetic accessor method. Increasing its visibility will improve your performance\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. ERROR in X.java (at line 21)\\n\" + ", "+    \t\t\"\tSystem.out.println(b instanceof C);\\n\" + ", "+    \t\t\"\t                   ^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Incompatible conditional operand types X.B<X.A> and X.C\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16ed3cba43e2b73d410a5ed78b49cb80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "f88c1fe220ded26227925e3745e5515c08409c5d", "commitAfterChange": "8f896a654035e16596d9bc3a2404427ff7b3145b", "methodNumberBeforeChange": 266, "methodNumberAfterChange": 266, "signatureBeforeChange": " public void test0265() throws JavaModelException", "signatureAfterChange": " public void test0265() throws JavaModelException", "diff": ["-\t\t\t\"bar[FIELD_REF]{bar, Lenumbug.EnumBug$Foo;, Lenumbug.EnumBug$Foo;, bar, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_EXPECTED_TYPE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"baz[FIELD_REF]{baz, Lenumbug.EnumBug$Foo;, Lenumbug.EnumBug$Foo;, baz, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_EXPECTED_TYPE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"foo[FIELD_REF]{foo, Lenumbug.EnumBug$Foo;, Lenumbug.EnumBug$Foo;, foo, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_EXPECTED_TYPE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"bar[FIELD_REF]{bar, Lenumbug.EnumBug$Foo;, Lenumbug.EnumBug$Foo;, bar, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_ENUM + R_ENUM_CONSTANT + R_NON_RESTRICTED + R_RESOLVED) + \"}\\n\" +", "+\t\t\t\"baz[FIELD_REF]{baz, Lenumbug.EnumBug$Foo;, Lenumbug.EnumBug$Foo;, baz, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_ENUM + R_ENUM_CONSTANT + R_NON_RESTRICTED + R_RESOLVED) + \"}\\n\" +", "+\t\t\t\"foo[FIELD_REF]{foo, Lenumbug.EnumBug$Foo;, Lenumbug.EnumBug$Foo;, foo, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_ENUM + R_ENUM_CONSTANT + R_NON_RESTRICTED + R_RESOLVED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21cef39396d60e748e8277bb96ca116d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 379, "methodNumberAfterChange": 379, "signatureBeforeChange": " public void test1054_options_mix()", "signatureAfterChange": " public void test1054_options_mix()", "diff": ["-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" +", "-\t\t\"\tif (o != null) {\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "+\t\t\"\tif (o != null) {\\n\" +", "-\t\t\"2. WARNING in X.java (at line 8)\\r\\n\" +", "-\t\t\"\to.toString();\\r\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o != null) {\\n\" + ", "+\t\t\"       o = null;\\n\" + ", "+\t\t\"    }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\" +", "+\t\t\"3. WARNING in X.java (at line 8)\\n\" +", "+\t\t\"\to.toString();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31cbab8f8c4c989f28059237d25337b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6dbb2ec74b77026a9a8c00b4381c92a21f100370", "commitAfterChange": "2d88125c63a44736bd6507d03cfcacc7c43a6f63", "methodNumberBeforeChange": 522, "methodNumberAfterChange": 522, "signatureBeforeChange": " \tpublic void test0505()", "signatureAfterChange": " \tpublic void test0505()", "diff": ["-\t\t\t\"    14  getstatic XB.CONST : XB [42]\\n\" + ", "-\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [48]\\n\" + ", "-\t\t\t\"    20  return\\n\" + ", "+\t\t\t\"    14  aload_0 [this]\\n\" + ", "+\t\t\t\"    15  getfield X.e : XA [42]\\n\" + ", "+\t\t\t\"    18  checkcast XB [44]\\n\" + ", "+\t\t\t\"    21  pop\\n\" + ", "+\t\t\t\"    22  getstatic XB.CONST : XB [46]\\n\" + ", "+\t\t\t\"    25  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [50]\\n\" + ", "+\t\t\t\"    28  return\\n\" + ", "-\t\t\t\"        [pc: 20, line: 19]\\n\" + ", "+\t\t\t\"        [pc: 28, line: 19]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 21] local: this index: 0 type: X\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 29] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 21] local: this index: 0 type: X<E>\\n\";", "+\t\t\t\"        [pc: 0, pc: 29] local: this index: 0 type: X<E>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a65255872517151887cf37324638d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f00bbaa23fed1154a64cf4ed92a1441708756023", "commitAfterChange": "8d1d658761d5e634e1f9986cdb54c46ecd8cbc2e", "methodNumberBeforeChange": 284, "methodNumberAfterChange": 284, "signatureBeforeChange": " public void test135()", "signatureAfterChange": " public void test135()", "diff": ["-\t\t\"1. WARNING in X.java (at line 10)\\n\" +", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "+\t\t\"\tpublic A foo(Number n) { return null; }\\n\" +", "+\t\t\"\t       ^\\n\" +", "+\t\t\"Type safety: The return type A for foo(Number) from the type X2 needs unchecked conversion to conform to T from the type I\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 10)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40a077b81a03ebbd94cf61f7c6a5c4e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void test064()", "signatureAfterChange": " \tpublic void test064()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\"\tvoid bar(T t) {\\n\" + ", "-\t\t\"\t           ^\\n\" + ", "-\t\t\"The parameter t is hiding a field from type X<T>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"\tx.t.foo();\\n\" + ", "-\t\t\"\t    ^^^\\n\" + ", "-\t\t\"The method foo() is undefined for the type Exception\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tvoid bar(T t) {\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"The parameter t is hiding a field from type X<T>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tX x = new X();\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tX x = new X();\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tx.t.foo();\\n\" + ", "+\t\t\t\"\t    ^^^\\n\" + ", "+\t\t\t\"The method foo() is undefined for the type Exception\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41a5c6a133b1545827d404732c1b7d3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java", "commitBeforeChange": "678bd63c535ed58308236db21b34dad57015766d", "commitAfterChange": "aea2687c86127b817448747104c627048ecdcecb", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "\r \tpublic void testBinaryAnnotationType() throws CoreException, IOException", "signatureAfterChange": "\r \tpublic void testBinaryAnnotationType() throws CoreException, IOException", "diff": ["+\t\t\t\t\"@Deprecated\\n\" +\t\t\r", "-\t\t\tASTNode node = buildAST(contents, this.workingCopy);\r", "+\t\t\tASTNode node = buildAST(contents, this.workingCopy, false);\r", "-\t\t\tassertProblemsSize(compilationUnit, 0);\r", "+\t\t\tassertProblemsSize(compilationUnit, 1, \"The type T is deprecated\");\r", "-\t\t\tassertTrue(\"Should be 1\", annotations.length == 1);\r", "+\t\t\tassertTrue(\"Should be 2\", annotations.length == 2);\r", "+\t\t\tassertEquals(\"Annotation mismatch\", \"@Deprecated()\", annotations[1].toString());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50fc9ec76c39d42410e3ecbee7aadd64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "b70c37ecf76f05e7ae76a32ba47dec687904996c", "commitAfterChange": "991f76a3733441af275e22b3c172d2ee3c84bb0e", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void testBug70892conform1()", "signatureAfterChange": " \tpublic void testBug70892a()", "diff": ["-\tpublic void testBug70892conform1() {", "-\t\trunConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"/**\\n\" + ", "-\t\t\t\t\t\" * {@value}\\n\" + ", "-\t\t\t\t\t\" * {@value }\\n\" + ", "-\t\t\t\t\t\" * {@value #field}\\n\" + ", "-\t\t\t\t\t\" */\\n\" + ", "-\t\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\t\"\tstatic int field;\\n\" + ", "-\t\t\t\t\t\"}\\n\"", "-\t\t\t}", "-\t\t);", "-\t}", "+\tpublic void testBug70892a() {", "+\t\t\t\t\"\t/**\\n\" + ", "+\t\t\t\t\"\t * {@value}\\n\" + ", "+\t\t\t\t\"\t */\\n\" + ", "+\t\t\t\t\"\tstatic int field1;\\n\" + ", "+\t\t\t\t\"\t/**\\n\" + ", "+\t\t\t\t\"\t * {@value }\\n\" + ", "+\t\t\t\t\"\t */\\n\" + ", "+\t\t\t\t\"\tstatic int field2;\\n\" + ", "+\t\t\t\t\"\t/**\\n\" + ", "+\t\t\t\t\"\t * {@value #field}\\n\" + ", "+\t\t\t\t\"\t */\\n\" + ", "+\t\t\t\t\"\tstatic int field;\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "689f9e155d29896d7170f3c8ac7bef10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 711, "methodNumberAfterChange": 711, "signatureBeforeChange": " public void test706a()", "signatureAfterChange": " public void test706a()", "diff": ["-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tAA<Object> res1 = bb.test();\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tAA<Object> res1 = bb.test();\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\"\tAA res3 = bb.test();\\r\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tAA res3 = bb.test();\\n\" + ", "+\t\t\"\t^^\\n\" + ", "+\t\t\"Type safety: AA is a raw type. References to generic type AA<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tAA res3 = bb.test();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73140f3d761ec3cb2c245a78c6078904", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "c53fb291a849342748306e59b6959038f8ec1321", "commitAfterChange": "d5a32e245b27c645dcf70347396d7253765682d3", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void test031()", "signatureAfterChange": " public void test031()", "diff": ["+\t\t\t\"               default: // nop\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79cde970e51fddfa296170c9356e4801", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 806, "methodNumberAfterChange": 806, "signatureBeforeChange": " public void test800()", "signatureAfterChange": " public void test800()", "diff": ["-\t\t\"1. WARNING in X.java (at line 8)\\r\\n\" + ", "-\t\t\"\tfinal String message = constructor.getAnnotation(AnnClass).message();\\r\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tfor (Constructor constructor  : constrs) {\\n\" + ", "+\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Constructor is a raw type. References to generic type Constructor<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tfinal String message = constructor.getAnnotation(AnnClass).message();\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 8)\\r\\n\" + ", "-\t\t\"\tfinal String message = constructor.getAnnotation(AnnClass).message();\\r\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tfinal String message = constructor.getAnnotation(AnnClass).message();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e8002f5e54bbb6663914643f4d3cbd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 818, "methodNumberAfterChange": 818, "signatureBeforeChange": " public void test812()", "signatureAfterChange": " public void test812()", "diff": ["-\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tthis.inner = new X.Inner();\\n\" + ", "+\t\t\"\t                 ^^^^^^^\\n\" + ", "+\t\t\"Type safety: X.Inner is a raw type. References to generic type X<T>.Inner should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tthis.inners = new X.Inner[10];\\n\" + ", "+\t\t\"\t                  ^^^^^^^\\n\" + ", "+\t\t\"Type safety: X.Inner is a raw type. References to generic type X<T>.Inner should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d12bf4739a4912fc2905e642895568a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "a635e0ddaa17829d90f6d6f2096ec371117367d6", "commitAfterChange": "8b9431052e3d61392fc8179c11535d264307c499", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": "\r \tpublic void _test427955()", "signatureAfterChange": "\r \tpublic void test427955()", "diff": ["-\tpublic void _test427955() {\r", "+\tpublic void test427955() {\r", "+\t\t\t\t\"public class X {}\\n\" +\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f2ac16947097b55d9db940d89bd3b4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "0bc1dc4ace320749d81ad8fc342000dd64021e2c", "commitAfterChange": "38d1cd076e6181bfa6558db1b5b13eb2b3e5e8ce", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void test045()", "signatureAfterChange": " \tpublic void test045()", "diff": ["-\t\t\t\t\"1. WARNING in X.java (at line 10)\\r\\n\" + ", "-\t\t\t\t\"\tarray((Serializable[]) new Serializable[] {3, 4}); //warns about unnecessary cast\\r\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tarray((Serializable[]) new Serializable[] {3, 4}); //warns about unnecessary cast\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 14)\\r\\n\" + ", "-\t\t\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\t\"\tarray((Serializable[]) new Object[] {1, 2}); // CCE at run time\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Unnecessary cast from Object[] to Serializable[]\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tZork z;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a567535fba8b44a8aff6c9b92e1b1609", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "512e24350be89a973ac46772951b761f5a117805", "commitAfterChange": "816de185a96b30eea453af76fece472dcd48e2ec", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003()", "diff": ["-\t\t\t\t\"        [pc: 54, line: 11]\\n\" + ", "+\t\t\t\t\"        [pc: 51, line: 13]\\n\" + ", "+\t\t\t\t\"        [pc: 54, line: 12]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9cee7bcb0c34557edbed747c671ecc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testBug286601c()", "signatureAfterChange": " public void testBug286601c()", "diff": ["-\tString source = ", "-\t\t\"public class Test\\n\" + ", "+\tString source =", "+\t\t\"public class Test\\n\" +", "+\t\t\"{\\n\" +", "+\t\t\"    public void aMethod()\\n\" +", "+\t\t\"    {\\n\" +", "+\t\t\"        Object anObject = new Object()\\n\" +", "+\t\t\"        {\\n\" +", "+\t\t\"            boolean aVariable;\\n\" +", "+\t\t\"            void foo()\\n\" +", "+\t\t\"            {\\n\" +", "+\t\t\"            }\\n\" +", "+\t\t\"        };\\n\" +", "+\t\t\"    }\\n\" +", "+\t\t\"}\\n\";", "+\tformatSource(source,", "+\t\t\"public class Test {\\n\" +", "+\t\t\"\tpublic void aMethod() {\\n\" +", "+\t\t\"\t\tObject anObject = new Object()\\n\" +", "+\t\t\"\t\t{\\n\" +", "+\t\t\"\t\t\tboolean aVariable;\\n\" +", "+\t\t\"\\n\" +", "+\t\t\"\t\t\tvoid foo()\\n\" +", "+\t\t\"\t\t\t{\\n\" +", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t};\\n\" +", "+\t\t\"\t}\\n\" +", "+\t\t\"}\\n\"", "+\t);", "+}", "-\t\t\"    public void aMethod()\\n\" + ", "-\t\t\"    {\\n\" + ", "-\t\t\"        Object anObject = new Object()\\n\" + ", "-\t\t\"        {\\n\" + ", "-\t\t\"            boolean aVariable;\\n\" + ", "-\t\t\"        };\\n\" + ", "-\t\t\"public class Test {\\n\" + ", "-\t\t\"\tpublic void aMethod() {\\n\" + ", "-\t\t\"\t\tObject anObject = new Object()\\n\" + ", "-\t\t\"\t\t\tboolean aVariable;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c33af923317f5d01e1481d64e9b2a8c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void test028()", "signatureAfterChange": " \tpublic void test028()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tmethod.invoke(this, new Class[0]);\\n\" + ", "+\t\t\t\"\t                        ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tmethod.invoke(this, (Object[])new Class[0]);\\n\" + ", "+\t\t\t\"\t                                  ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 12)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc16c352e5e3b08d58ac919b1415894", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "6d276ea2f2a087df8413734766ba1742b82876d0", "commitAfterChange": "4dfe9f04d4f1fc7a9e70c8aba9edf4b323d079b9", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  public void test67()", "signatureAfterChange": "  public void test67()", "diff": ["+\t\t\"  {\\n\" + ", "+\t\t\"  }\\n\" + ", "+\t\t\"  }\\n\" + ", "+\t\t\"  {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6831f17a93bd0a8c13cf27e7f309b93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "f88c1fe220ded26227925e3745e5515c08409c5d", "commitAfterChange": "8f896a654035e16596d9bc3a2404427ff7b3145b", "methodNumberBeforeChange": 218, "methodNumberAfterChange": 218, "signatureBeforeChange": " public void test0208() throws JavaModelException", "signatureAfterChange": " public void test0208() throws JavaModelException", "diff": ["-\t            \"BLACK[FIELD_REF]{BLACK, Lp.Colors;, Lp.Colors;, BLACK, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_ENUM + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"WHITE[FIELD_REF]{WHITE, Lp.Colors;, Lp.Colors;, WHITE, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_ENUM + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+\t            \"BLACK[FIELD_REF]{BLACK, Lp.Colors;, Lp.Colors;, BLACK, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_ENUM + R_ENUM_CONSTANT + R_UNQUALIFIED + R_NON_RESTRICTED + R_RESOLVED) + \"}\\n\" +", "+\t\t\t\t\"WHITE[FIELD_REF]{WHITE, Lp.Colors;, Lp.Colors;, WHITE, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_ENUM + R_ENUM_CONSTANT + R_UNQUALIFIED + R_NON_RESTRICTED + R_RESOLVED) + \"}\","]}], "num": 25193}
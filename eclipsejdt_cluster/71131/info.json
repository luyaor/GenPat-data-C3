{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e882be5d76dde48811c0a61871fb342", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35dc88b385695bdc552ceaec7fc7a7fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "96e4072a76c3a91579211c50af335fca366c6865", "commitAfterChange": "0820a82c6894474b441ab0cfbd23169998d12164", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit(char[] source)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit(char[] source)", "diff": ["-\t\tif (source == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tCompilationUnitDeclaration compilationUnitDeclaration = ", "-\t\t\tCompilationUnitResolver.parse(source, JavaCore.getOptions()); // no better custom options", "-", "-\t\tASTConverter converter = new ASTConverter(JavaCore.getOptions(), false);", "-\t\tAST ast = new AST();", "-\t\tast.setBindingResolver(new BindingResolver());", "-\t\tconverter.setAST(ast);", "-\t\t\t\t", "-\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "-\t\t", "-\t\t// line end table should be extracted from scanner", "-\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\treturn cu;", "+\t\treturn parseCompilationUnit(source, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7e5f2b4f7025448a841716b7f10cc67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "4cf5441fe359583a3d77a31fc213bc74e94cf25e", "commitAfterChange": "40893837639c1eb9109e9994f8211db5f484441a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\t\tICompilationUnit unit,\r \t\t\tboolean resolveBindings)", "signatureAfterChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\t\tICompilationUnit unit,\r \t\t\tboolean resolveBindings)", "diff": ["-\t\t\t\tif (compilationUnitDeclaration != null && source != null) {\r", "-\t\t\t\t\tASTConverter converter = new ASTConverter(true);\r", "-\t\t\t\t\tAST ast = new AST();\r", "-\t\t\t\t\tast.setBindingResolver(new DefaultBindingResolver(compilationUnitDeclaration.scope));\r", "-\t\t\t\t\tconverter.setAST(ast);\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);\r", "-\t\t\t\t\t// line end table should be extracted from scanner\r", "-\t\t\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);\r", "-\t\t\t\t\r", "-\t\t\t\t\t// line end table should be extracted from scanner\r", "-\t\t\t\t\t//cu.setLineEndTable(parser.scanner.lineEnds);\r", "-\t\t\t\t\treturn cu;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn null;\r", "-\t\t\t\t}\r", "+\t\t\t\treturn convert(compilationUnitDeclaration, source);\r"]}], "num": 71131}
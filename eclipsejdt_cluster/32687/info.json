{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9495493be0724ee9633c46a89c17c1c", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1599f641505fa58553100bf108cb54d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "commitAfterChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["-\t\tint severity = findNullTypeAnnotationMismatch(var.type, providedType, nullStatus);", "-\t\tif (severity == 2) {", "-\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, var.type, severity);", "+\t\tNullAnnotationStatus annotationStatus = findNullTypeAnnotationMismatch(var.type, providedType, nullStatus);", "+\t\tif (annotationStatus.isDefiniteMismatch()) {", "+\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, var.type, annotationStatus);", "-\t\t} else if (severity == 1) {", "+\t\t} else if (annotationStatus.isUnchecked()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee908b49ebd2a0183cb0660454838a33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "commitAfterChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "signatureAfterChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "diff": ["-\t\tint severity = findNullTypeAnnotationMismatch(methodBinding.returnType, this.expression.resolvedType, nullStatus);", "-\t\tif (severity == 2) {", "-\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, severity);", "-\t\t\treturn;", "-\t\t} else if (severity == 1) {", "+\t\tNullAnnotationStatus annotationStatus = findNullTypeAnnotationMismatch(methodBinding.returnType, this.expression.resolvedType, nullStatus);", "+\t\tif (annotationStatus.isDefiniteMismatch()) {", "+\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, annotationStatus);", "+\t\t} else if (annotationStatus.isUnchecked()) {", "-\t\t\treturn;", "-\t}", "-\tif (nullStatus != FlowInfo.NON_NULL) {", "+\t} else if (nullStatus != FlowInfo.NON_NULL) {"]}], "num": 32687}
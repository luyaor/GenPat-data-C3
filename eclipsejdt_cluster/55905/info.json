{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1faeef15e5aa823b0ecc7df0638c13c4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5f2970464988522c01a039d6c0a5e92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "0ee55cb7b425ca172c29c8787fd167e56fe35621", "commitAfterChange": "faae0b7874a9fb0272afb48b6b96fc0b72a16025", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": " protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "diff": ["-\tif (buffer.getCharacters() == null){", "-\t\tICompilationUnit original= (ICompilationUnit)this.getOriginalElement();", "-\t\tIBuffer originalBuffer = null;", "-\t\ttry {", "-\t\t\toriginalBuffer = original.getBuffer();", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// original element does not exist: create an empty working copy", "-\t\t\tif (!e.getJavaModelStatus().isDoesNotExist()) {", "-\t\t\t\tthrow e;", "-\t\t\t}", "-\t\t}", "-\t\tif (originalBuffer != null) {", "-\t\t\tchar[] originalContents = originalBuffer.getCharacters();", "-\t\t\tif (originalContents != null) {", "-\t\t\t\tbuffer.setContents((char[])originalContents.clone());", "-\t\t\t}", "+\tif (buffer.getCharacters() == null) {", "+\t\tICompilationUnit original = (ICompilationUnit)this.getOriginalElement();", "+\t\tif (original.isOpen()) {", "+\t\t\tbuffer.setContents(original.getSource());", "-\t\t\t// initialize buffer", "-\t\t\tbuffer.setContents(CharOperation.NO_CHAR);", "+\t\t\tIFile file = (IFile)original.getResource();", "+\t\t\tif (file == null || !file.exists()) {", "+\t\t\t\t// initialize buffer with empty contents", "+\t\t\t\tbuffer.setContents(CharOperation.NO_CHAR);", "+\t\t\t} else {", "+\t\t\t\tbuffer.setContents(Util.getResourceContentsAsCharArray(file));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce54458e7e4ba3417dcf844ab3543f0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "369ffd3db09511488e039ba2575df2eeea055320", "commitAfterChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private void readBinaryChildren()", "signatureAfterChange": "\r private void readBinaryChildren()", "diff": ["-\tVector children = new Vector();\r", "-\tHashtable newElements = new Hashtable();\r", "+\tArrayList children = new ArrayList();\r", "+\tHashMap newElements = new HashMap();\r", "-\tfor (Enumeration e = newElements.keys(); e.hasMoreElements();) {\r", "-\t\tIJavaElement key = (IJavaElement) e.nextElement();\r", "-\t\tObject value = newElements.get(key);\r", "-\t\tmanager.putInfo(key, value);\r", "+\t\r", "+\tfor (Iterator iter = newElements.entrySet().iterator(); iter.hasNext();) {\r", "+\t\tMap.Entry entry = (Map.Entry) iter.next();\r", "+\t\tmanager.putInfo(\r", "+\t\t\t(IJavaElement) entry.getKey(), \r", "+\t\t\tentry.getValue());\r", "-\tchildren.copyInto(fBinaryChildren);\r", "+\tchildren.toArray(fBinaryChildren);\r"]}], "num": 55905}
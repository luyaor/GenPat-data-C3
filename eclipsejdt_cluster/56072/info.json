{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe795670988c5449f3d2f18705b50b11", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "729b759d4370bee9263bc6a1b19ab5c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tprotected void setUp() throws Exception", "signatureAfterChange": " \tprotected void setUp() throws Exception", "diff": ["+}", "+\t\t\t// WORK make all needed inits once and for all", "+\t\t\t\t\tJAVAC_OUTPUT_DIR = new File(JAVAC_OUTPUT_DIR_NAME);", "+\t\t\t\t\t// WORK simplify jdk.root out", "-\t\t\t\t\tcmdLineHeader.append(JAVAC_OUTPUT_DIR.indexOf(\" \") != -1 ? \"\\\"\" + JAVAC_OUTPUT_DIR + \"\\\"\" : JAVAC_OUTPUT_DIR);", "+\t\t\t\t\tcmdLineHeader.append(JAVAC_OUTPUT_DIR_NAME.indexOf(\" \") != -1 ? \"\\\"\" + JAVAC_OUTPUT_DIR_NAME + \"\\\"\" : JAVAC_OUTPUT_DIR_NAME);", "+\t\t\t\t\t// WORK new javac system does not do that... reconsider", "+\t\t\t\t\t// WORK if we keep a full log, it should not mix javac versions...", "-\t\t\t\t\t\tjavacCompilers.add(new JavacCompiler(jdkRootDirPath.toString(), version));\t", "+\t\t\t\t\t\tjavacCompilers.add(new JavacCompiler(jdkRootDirPath.toString()));\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe218bb18c0190bb0ad665a376a65d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e944f831810e143e8894d05428eb208a2cd78cce", "commitAfterChange": "45b2548f21c6553964603037785b1fef0bb3e0d3", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 52, "signatureBeforeChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["+\t\tint editStart = this.scanner.currentPosition;", "+\t\tint editEnd = -1;", "-\t\t\t\t\t\tpreviousToken = -2;", "+\t\t\t\t\t\tpreviousToken = SKIP_FIRST_WHITESPACE_TOKEN;", "+\t\t\t\t\t\teditEnd = this.scanner.startPosition - 1;", "-\t\t\t    \t\tbuffer.append(BLOCK_FOOTER);", "-\t\t\t\t    \tthis.column += BLOCK_FOOTER_LENGTH + 1;", "+\t\t\t\t\t\tthis.column += BLOCK_FOOTER_LENGTH + 1;", "-\t\t\tStringBuffer replacement = new StringBuffer(BLOCK_HEADER);", "+\t\t\tStringBuffer replacement = new StringBuffer();", "-\t\t\taddReplaceEdit(currentTokenStartPosition, currentTokenEndPosition-1, replacement.toString());", "+\t\t\taddReplaceEdit(editStart, editEnd, replacement.toString());"]}], "num": 56072}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ee391a66a204598f829675b546bfdae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56b1f1a1851423a45ae3382395fada38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "f8eb13111e85058d6a3b96c5e3a0a3762548a3d5", "commitAfterChange": "3a282cd8b7c83e96465ddc9983742da9604c6a89", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void removeBinaryChildren() throws JavaModelException", "signatureAfterChange": " void removeBinaryChildren() throws JavaModelException", "diff": ["+\tif (this.typeParameters != null) {", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tfor (int i = 0; i <this.typeParameters.length; i++) {", "+\t\t\tTypeParameter typeParameter = (TypeParameter) this.typeParameters[i];", "+\t\t\tmanager.removeInfoAndChildren(typeParameter);", "+\t\t}", "+\t\tthis.typeParameters = TypeParameter.NO_TYPE_PARAMETERS;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98cc0049f06442153c246987a861f0b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "ec64763fa4e57b4943311ee555e5ddce81854cf2", "commitAfterChange": "b0ee678b65f48d1cfab35972dd53d6bd85389446", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope)", "signatureAfterChange": " \tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope)", "diff": ["+\t\tif (this.exactMethodBinding != null) {", "+\t\t\tMethodBinding functionType = targetType.getSingleAbstractMethod(scope, true);", "+\t\t\tif (functionType == null)", "+\t\t\t\treturn null;", "+\t\t\tint n = functionType.parameters.length;", "+\t\t\tint k = this.exactMethodBinding.parameters.length;", "+\t\t\treturn (n == k || n == k + 1) ? this.exactMethodBinding : null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c03ff6b2d127e8efb8f6550eecb993e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void addInfoFromOpenSourceType(SourceType type, ArrayList infos) throws JavaModelException", "signatureAfterChange": " protected void addInfoFromOpenSourceType(SourceType type, ArrayList infos) throws JavaModelException", "diff": ["-\tIType[] members = type.getTypes();", "+\tIJavaElement[] members = type.getChildren();", "-\t\tthis.addInfoFromOpenSourceType((SourceType)members[i], infos);", "+\t\tIJavaElement member = members[i];", "+\t\tif (member instanceof SourceType) {", "+\t\t\taddInfoFromOpenSourceType((SourceType)member, infos);", "+\t\t} else {", "+\t\t\t// field, initializer or method", "+\t\t\tIJavaElement[] memberMembers = ((IParent)member).getChildren();", "+\t\t\tfor (int j = 0; j < memberMembers.length; j++) {", "+\t\t\t\tIJavaElement memberMember = memberMembers[j];", "+\t\t\t\taddInfoFromOpenSourceType((SourceType)memberMember, infos);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cec72b2d8a0c4b18185a5d22d2029c09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ElementValuePair.java", "commitBeforeChange": "8aae944f1fec216ec7aa5c56aa9511065ae60c18", "commitAfterChange": "d767f31ad272e19eba4786e29173a3473ca8fe5d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public Object getValue()", "signatureAfterChange": " public Object getValue()", "diff": ["+\telse if (this.value instanceof Object[]) {", "+\t\tObject[] valueArray = (Object[]) this.value;", "+\t\tfor(int i = 0; i < valueArray.length; i++) {", "+\t\t\tObject object = valueArray[i];", "+\t\t\tif (object instanceof UnresolvedEnumConstant)", "+\t\t\t\tvalueArray[i] = ((UnresolvedEnumConstant) object).getResolved();", "+\t\t}", "+\t}"]}], "num": 58910}
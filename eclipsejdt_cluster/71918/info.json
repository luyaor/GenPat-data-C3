{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19a4654518950f21f34e6f8d8e177516", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba4f82a6108ec46487542e985d9c7f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java", "commitBeforeChange": "eb0413d7c3f6c8377e410e116826fcfccbec3365", "commitAfterChange": "7cf8a68136e90cda676cf99c112914a22eaf96cd", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test427628a()", "signatureAfterChange": " public void test427628a()", "diff": ["-\t\t\t\"The method test(((i != null) ? i.getJ() : null)) is undefined for the type X\\n\" + ", "+\t\t\t\"The method test(X.I) in the type X is not applicable for the arguments (((i != null) ? i.getJ() : null))\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\ttest(i!=null?i.getJ():null);\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X.J to X.I\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f044e89381f96af7f61a420cf09d081", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "commitAfterChange": "39a2af446e48bb6f168906e833c304457e17e4cf", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 228, "signatureBeforeChange": " public void testEnum01() throws CoreException", "signatureAfterChange": " \tpublic void testEnum01() throws CoreException", "diff": ["- */", "-public void testEnum01() throws CoreException {", "-\tIType type = getCompilationUnit(\"JavaSearch15\", \"src\", \"e1\", \"T.java\").getType(\"T\");", "-\tsearch(type, REFERENCES, getJavaSearchScope15(), this.resultCollector);", "-\tassertSearchResults(", "-\t\t\"src/e1/X.java [e1.T]\\n\" + ", "-\t\t\"src/e1/X.java void e1.X.main(String[]) [T]\\n\" + ", "-\t\t\"src/e1/X.java void e1.X.main(String[]) [T]\\n\" + ", "-\t\t\"src/e1/X.java Location e1.X.location(T) [T]\",", "-\t\tthis.resultCollector);", "-}", "+\t */", "+\tpublic void testEnum01() throws CoreException {", "+\t\tIType type = getCompilationUnit(\"JavaSearch15\", \"src\", \"e1\", \"Team.java\").getType(\"Team\");", "+\t\tsearch(type, REFERENCES, getJavaSearchScope15(), this.resultCollector);", "+\t\tassertSearchResults(", "+\t\t\t\"src/a1/Author.java [e1.Team]\\n\" + ", "+\t\t\t\"src/a1/Author.java [e1.Team]\\n\" + ", "+\t\t\t\"src/a1/Author.java Team[] a1.Author.name() [Team]\\n\" + ", "+\t\t\t\"src/a1/Test.java [e1.Team]\\n\" + ", "+\t\t\t\"src/e1/Test.java void e1.Test.main(String[]) [Team]\\n\" + ", "+\t\t\t\"src/e1/Test.java void e1.Test.main(String[]) [Team]\\n\" + ", "+\t\t\t\"src/e1/Test.java Location e1.Test.location(Team) [Team]\",", "+\t\t\tthis.resultCollector);", "+\t}"]}], "num": 71918}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c283bfadd6535c8aa765e51fce47985e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "189f9c3662c688eeace35eaae9319930", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "dc74bbda99d44eb7c9bf5e21853e09a003a72218", "commitAfterChange": "3c289b9a951cfd3e36c9387c73b3893fba2c0158", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic ParameterizedMethodBinding()", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ReferenceBinding declaringClass, MethodBinding originalMethod, char[][] alternateParamaterNames, final LookupEnvironment environment)", "diff": ["+\t */", "+\tpublic ParameterizedMethodBinding(final ReferenceBinding declaringClass, MethodBinding originalMethod, char[][] alternateParamaterNames, final LookupEnvironment environment) {", "+", "+\t\tsuper(", "+\t\t\t\toriginalMethod.modifiers,", "+\t\t\t\toriginalMethod.selector,", "+\t\t\t\t originalMethod.returnType,", "+\t\t\t\toriginalMethod.parameters,", "+\t\t\t\toriginalMethod.thrownExceptions,", "+\t\t\t\tdeclaringClass);", "+\t\tthis.originalMethod = originalMethod;", "+\t\tthis.tagBits = originalMethod.tagBits;", "+\t\t", "+\t\tfinal TypeVariableBinding[] originalVariables = originalMethod.typeVariables;", "+\t\tSubstitution substitution = null;", "+\t\tfinal int length = originalVariables.length;", "+\t\tif (length == 0) {", "+\t\t\tthis.typeVariables = Binding.NO_TYPE_VARIABLES;", "+\t\t} else {", "+\t\t\t// at least fix up the declaringElement binding + bound substitution if non static", "+\t\t\tfinal TypeVariableBinding[] substitutedVariables = new TypeVariableBinding[length];", "+\t\t\tfor (int i = 0; i < length; i++) { // copy original type variable to relocate", "+\t\t\t\tTypeVariableBinding originalVariable = originalVariables[i];", "+\t\t\t\tsubstitutedVariables[i] = new TypeVariableBinding(", "+\t\t\t\t\t\talternateParamaterNames == null ?", "+\t\t\t\t\t\t\t\toriginalVariable.sourceName :", "+\t\t\t\t\t\t\t\talternateParamaterNames[i],", "+\t\t\t\t\t\t\tthis,", "+\t\t\t\t\t\t\toriginalVariable.rank);", "+\t\t\t}", "+\t\t\tthis.typeVariables = substitutedVariables;", "+\t\t\t", "+\t\t\t// need to substitute old var refs with new ones (double substitution: declaringClass + new type variables)", "+\t\t\tsubstitution = new Substitution() {", "+\t\t\t\tpublic LookupEnvironment environment() { ", "+\t\t\t\t\treturn environment; ", "+\t\t\t\t}", "+\t\t\t\tpublic boolean isRawSubstitution() {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable) {", "+\t\t\t        // check this variable can be substituted given copied variables", "+\t\t\t        if (typeVariable.rank < length && originalVariables[typeVariable.rank] == typeVariable) {", "+\t\t\t\t\t\treturn substitutedVariables[typeVariable.rank];", "+\t\t\t        }", "+\t\t\t        return typeVariable;", "+\t\t\t\t}", "+\t\t\t};", "+\t\t", "+\t\t\t// initialize new variable bounds", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeVariableBinding originalVariable = originalVariables[i];", "+\t\t\t\tTypeVariableBinding substitutedVariable = substitutedVariables[i];", "+\t\t\t\tTypeBinding substitutedSuperclass = Scope.substitute(substitution, originalVariable.superclass);", "+\t\t\t\tReferenceBinding[] substitutedInterfaces = Scope.substitute(substitution, originalVariable.superInterfaces);", "+\t\t\t\tif (originalVariable.firstBound != null) {", "+\t\t\t\t\tsubstitutedVariable.firstBound = originalVariable.firstBound == originalVariable.superclass", "+\t\t\t\t\t\t? substitutedSuperclass // could be array type or interface", "+\t\t\t\t\t\t: substitutedInterfaces[0];", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tswitch (substitutedSuperclass.kind()) {", "+\t\t\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\t\t\tsubstitutedVariable.superclass = environment.getResolvedType(JAVA_LANG_OBJECT, null);", "+\t\t\t\t\t\tsubstitutedVariable.superInterfaces = substitutedInterfaces;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif (substitutedSuperclass.isInterface()) {", "+\t\t\t\t\t\t\tsubstitutedVariable.superclass = environment.getResolvedType(JAVA_LANG_OBJECT, null);", "+\t\t\t\t\t\t\tint interfaceCount = substitutedInterfaces.length;", "+\t\t\t\t\t\t\tSystem.arraycopy(substitutedInterfaces, 0, substitutedInterfaces = new ReferenceBinding[interfaceCount+1], 1, interfaceCount);", "+\t\t\t\t\t\t\tsubstitutedInterfaces[0] = (ReferenceBinding) substitutedSuperclass;", "+\t\t\t\t\t\t\tsubstitutedVariable.superInterfaces = substitutedInterfaces;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tsubstitutedVariable.superclass = (ReferenceBinding) substitutedSuperclass; // typeVar was extending other typeVar which got substituted with interface", "+\t\t\t\t\t\t\tsubstitutedVariable.superInterfaces = substitutedInterfaces;", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (substitution != null) {", "+\t\t\tthis.returnType = Scope.substitute(substitution, this.returnType);", "+\t\t\tthis.parameters = Scope.substitute(substitution, this.parameters);", "+\t\t\tthis.thrownExceptions = Scope.substitute(substitution, this.thrownExceptions);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5215d907c562213e8cef51729fe38352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod, boolean isStatic)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "diff": ["-\tpublic ParameterizedMethodBinding(ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod, boolean isStatic) {", "+\tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod) {", "-\t\t\t\tisStatic // no substitution if original was static", "-\t\t\t\t\t\t? originalMethod.returnType", "-\t\t\t\t\t\t: parameterizedDeclaringClass.substitute(originalMethod.returnType),", "-\t\t\t\tisStatic // no substitution if original was static", "-\t\t\t\t\t? originalMethod.parameters", "-\t\t\t\t\t: Scope.substitute(parameterizedDeclaringClass, originalMethod.parameters),", "-\t\t\t\tisStatic // no substitution if original was static", "-\t\t\t\t\t? originalMethod.thrownExceptions", "-\t\t\t\t\t: Scope.substitute(parameterizedDeclaringClass, originalMethod.thrownExceptions),", "+\t\t\t\t originalMethod.returnType,", "+\t\t\t\toriginalMethod.parameters,", "+\t\t\t\toriginalMethod.thrownExceptions,", "-\t\tthis.typeVariables = originalMethod.typeVariables;", "+", "+\t\tfinal TypeVariableBinding[] originalVariables = originalMethod.typeVariables;", "+\t\tSubstitution substitution = null;", "+\t\tfinal int length = originalVariables.length;", "+\t\tfinal boolean isStatic = originalMethod.isStatic();", "+\t\tif (length == 0) {", "+\t\t\tthis.typeVariables = NoTypeVariables;", "+\t\t\tif (!isStatic) substitution = parameterizedDeclaringClass;", "+\t\t} else {", "+\t\t\t// at least fix up the declaringElement binding + bound substitution if non static", "+\t\t\tfinal TypeVariableBinding[] substitutedVariables = new TypeVariableBinding[length];", "+\t\t\tfor (int i = 0; i < length; i++) { // copy original type variable to relocate", "+\t\t\t\tTypeVariableBinding originalVariable = originalVariables[i];", "+\t\t\t\tsubstitutedVariables[i] = new TypeVariableBinding(originalVariable.sourceName, this, originalVariable.rank);", "+\t\t\t}", "+\t\t\tthis.typeVariables = substitutedVariables;", "+\t\t\t", "+\t\t\t// need to substitute old var refs with new ones (double substitution: declaringClass + new type variables)", "+\t\t\tsubstitution = new Substitution() {", "+\t\t\t\tpublic LookupEnvironment environment() { ", "+\t\t\t\t\treturn parameterizedDeclaringClass.environment; ", "+\t\t\t\t}", "+\t\t\t\tpublic boolean isRawSubstitution() {", "+\t\t\t\t\treturn !isStatic && parameterizedDeclaringClass.isRawSubstitution();", "+\t\t\t\t}", "+\t\t\t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable) {", "+\t\t\t        // check this variable can be substituted given copied variables", "+\t\t\t        if (typeVariable.rank < length && originalVariables[typeVariable.rank] == typeVariable) {", "+\t\t\t\t\t\treturn substitutedVariables[typeVariable.rank];", "+\t\t\t        }", "+\t\t\t        if (!isStatic)", "+\t\t\t\t\t\treturn parameterizedDeclaringClass.substitute(typeVariable);", "+\t\t\t        return typeVariable;", "+\t\t\t\t}", "+\t\t\t};", "+\t\t", "+\t\t\t// initialize new variable bounds", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeVariableBinding originalVariable = originalVariables[i];", "+\t\t\t\tTypeVariableBinding substitutedVariable = substitutedVariables[i];", "+\t\t\t\tsubstitutedVariable.superclass = (ReferenceBinding) Scope.substitute(substitution, originalVariable.superclass);", "+\t\t\t\tsubstitutedVariable.superInterfaces = Scope.substitute(substitution, originalVariable.superInterfaces);", "+\t\t\t\tif (originalVariable.firstBound != null) {", "+\t\t\t\t\tsubstitutedVariable.firstBound = originalVariable.firstBound == originalVariable.superclass", "+\t\t\t\t\t\t? substitutedVariable.superclass", "+\t\t\t\t\t\t: substitutedVariable.superInterfaces[0];", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (substitution != null) {", "+\t\t\tthis.returnType = Scope.substitute(substitution, this.returnType);", "+\t\t\tthis.parameters = Scope.substitute(substitution, this.parameters);", "+\t\t\tthis.thrownExceptions = Scope.substitute(substitution, this.thrownExceptions);", "+\t\t}"]}], "num": 44202}
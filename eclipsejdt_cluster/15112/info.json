{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50ebc7331f1ef6ca441545bb8c53b035", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0760ba81e6f9e508e5ebee72585268a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "9ef16bbd886b16521464fbe002994d5fbaed976f", "commitAfterChange": "b27f301e84866741a3cab27f0e35cc886c5fd2e8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj)", "signatureAfterChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj)", "diff": ["+\t\tMap<FactoryContainer, Boolean> containers = null;", "-\t\t\tMap<FactoryContainer, Boolean> projectContainers = null;", "-\t\t\tif (_projectsWithFactoryPathLoaded.contains(jproj)) {", "-\t\t\t\tprojectContainers = _containerMaps.get(jproj);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\t// Load project-level containers", "-\t\t\t\ttry {", "-\t\t\t\t\tprojectContainers = FactoryPathUtil.readFactoryPathFile(jproj);", "-\t\t\t\t}", "-\t\t\t\tcatch (CoreException ce) {", "-\t\t\t\t\tce.printStackTrace();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException ioe) {", "-\t\t\t\t\tioe.printStackTrace();", "-\t\t\t\t}", "-\t\t\t\t_projectsWithFactoryPathLoaded.add(jproj);", "-\t\t\t\t_containerMaps.put(jproj, projectContainers);", "-\t\t\t}", "-\t\t\tif (projectContainers != null) {", "-\t\t\t\treturn projectContainers;", "-\t\t\t}", "-\t\t}", "-\t\t// Workspace", "-\t\tif (!_workspaceFactoryPathLoaded) {", "-\t\t\t// Load the workspace", "-\t\t\t\t_workspaceFactories = FactoryPathUtil.readFactoryPathFile(null);", "-\t\t\t\tif (_workspaceFactories == null) {", "-\t\t\t\t\t// TODO: Need to get the default set of factories -- plugins only", "-\t\t\t\t}", "+\t\t\t\tcontainers = FactoryPathUtil.readFactoryPathFile(jproj);", "-\t\treturn new LinkedHashMap(_workspaceFactories);", "+\t\t// Workspace if no project data was found", "+\t\tif (containers == null) {", "+\t\t\ttry {", "+\t\t\t\tcontainers = FactoryPathUtil.readFactoryPathFile(null);", "+\t\t\t}", "+\t\t\tcatch (CoreException ce) {", "+\t\t\t\tce.printStackTrace();", "+\t\t\t}", "+\t\t\tcatch (IOException ioe) {", "+\t\t\t\tioe.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\t// if no project and no workspace data was found, we'll get the defaults", "+\t\tif (containers == null) {", "+\t\t\tcontainers = new LinkedHashMap<FactoryContainer, Boolean>();", "+\t\t}", "+\t\thandlePluginContainers(containers);", "+\t\treturn new LinkedHashMap(containers);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41adcd106b0fde7ca8ff116b2be9dccb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t  \tpublic boolean search(Index index, IProgressMonitor progressMonitor)", "signatureAfterChange": "\t public boolean search(Index index, IProgressMonitor progressMonitor)", "diff": ["-", "-\tpublic boolean search(Index index, IProgressMonitor progressMonitor) {", "-", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled())", "-\t\t\tthrow new OperationCanceledException();", "-", "-//\t\t\tSystem.out.println(\"SANITY CHECK: search job using obsolete index: [\"+index+ \"] instead of: [\"+inMemIndex+\"]\");", "-\t\tif (index == null)", "-\t\t\treturn COMPLETE;", "-\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "-\t\tReadWriteMonitor monitor = indexManager.getMonitorFor(index);", "-\t\tif (monitor == null)", "-\t\t\treturn COMPLETE; // index got deleted since acquired", "-\t\ttry {", "-\t\t\tmonitor.enterRead(); // ask permission to read", "-", "-\t\t\t/* if index has changed, commit these before querying */", "-\t\t\tif (index.hasChanged()) {", "-\t\t\t\ttry {", "-\t\t\t\t\tmonitor.exitRead(); // free read lock", "-\t\t\t\t\tmonitor.enterWrite(); // ask permission to write", "-\t\t\t\t\tindexManager.saveIndex(index);", "-\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\treturn FAILED;", "-\t\t\t\t} finally {", "-\t\t\t\t\tmonitor.exitWriteEnterRead(); // finished writing and reacquire read permission", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tlong start = System.currentTimeMillis();", "-\t\t\tpattern.findIndexMatches(", "-\t\t\t\tindex,", "-\t\t\t\trequestor,", "-\t\t\t\tthis.participant,", "-\t\t\t\tthis.scope,", "-\t\t\t\tprogressMonitor);", "-\t\t\texecutionTime += System.currentTimeMillis() - start;", "-\t\t\treturn COMPLETE;", "-\t\t} catch (IOException e) {", "-\t\t\treturn FAILED;", "-\t\t} finally {", "-\t\t\tmonitor.exitRead(); // finished reading", "-\t\t}", "+}\t", "+public boolean search(Index index, IProgressMonitor progressMonitor) {", "+\tif (index == null) return COMPLETE;", "+\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "+", "+\tReadWriteMonitor monitor = index.monitor;", "+\tif (monitor == null) return COMPLETE; // index got deleted since acquired", "+\ttry {", "+\t\tmonitor.enterRead(); // ask permission to read", "+\t\tlong start = System.currentTimeMillis();", "+\t\tpattern.findIndexMatches(index, requestor, this.participant, this.scope, progressMonitor);", "+\t\texecutionTime += System.currentTimeMillis() - start;", "+\t\treturn COMPLETE;", "+\t} catch (IOException e) {", "+\t\tif (e instanceof java.io.EOFException)", "+\t\t\te.printStackTrace();", "+\t\treturn FAILED;", "+\t} finally {", "+\t\tmonitor.exitRead(); // finished reading"]}], "num": 15112}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7945522323cdd3fec1625ec5cf9e4905", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92fb559939635bc6511afd0788ab412a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "6ed647258ea452f7859c4e20c7c66ac26b1e46f2", "commitAfterChange": "dfcfcaedc8372b070ca684decc611420969812d4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private void fixSupertypeBindings()", "signatureAfterChange": " private void fixSupertypeBindings()", "diff": ["+ */", "+\t\tif ((typeBinding.tagBits & TagBits.HierarchyHasProblems) == 0)", "+\t\t\tcontinue;", "-\t\t", "+\t\t\tif (typeBinding instanceof LocalTypeBinding) {", "+\t\t\t\tLocalTypeBinding localTypeBinding = (LocalTypeBinding) typeBinding;", "+\t\t\t\tQualifiedAllocationExpression allocationExpression = localTypeBinding.scope.referenceContext.allocation;", "+\t\t\t\tTypeReference type;", "+\t\t\t\tif (allocationExpression != null && (type = allocationExpression.type) != null && type.resolvedType != null) {", "+\t\t\t\t\tlocalTypeBinding.superclass = (ReferenceBinding) type.resolvedType;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cede50f666953005e564ec18af881193", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "530677eaedb480550fa104a8b4977fa836eba025", "commitAfterChange": "2c63e7a0f1896e949119ff36744d33a6da53b86f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public Object getDefaultValue()", "signatureAfterChange": " public Object getDefaultValue()", "diff": ["+\tif ((originalMethod.tagBits & TagBits.DefaultValueResolved) == 0) {", "+\t\t//The method has not been yet type checked.", "+\t\t//It also means that the method is not coming from a class that", "+\t\t//has already been compiled. It can only be from a class within", "+\t\t//compilation units to process. Thus the method is NOT from a BinaryTypeBinbing", "+\t\tif (originalMethod.declaringClass instanceof SourceTypeBinding) {", "+\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) originalMethod.declaringClass;", "+\t\t\tif (sourceType.scope != null) {", "+\t\t\t\tTypeDeclaration typeDecl = sourceType.scope.referenceContext;", "+\t\t\t\tAbstractMethodDeclaration methodDeclaration = originalMethod.sourceMethod();", "+\t\t\t\tif (methodDeclaration != null) methodDeclaration.resolve(typeDecl.scope);", "+\t\t\t}", "+\t\t}", "+\t\toriginalMethod.tagBits |= TagBits.DefaultValueResolved;", "+\t}"]}], "num": 2609}
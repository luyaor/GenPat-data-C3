{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b41b7d1ccd44fee3cf98a0eed6691e6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a6502931e4f0c5ca7c9a8c8f6eda1bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "79ba8909e6fb493bccdc7e946328fba0e05dda44", "commitAfterChange": "96034fe817e13ad8ad9a79f805301309c3ac46ca", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \tpublic void createParser(JavaProject project) throws JavaModelException", "signatureAfterChange": "\r \tpublic void createParser(JavaProject project) throws JavaModelException", "diff": ["+\t\t// cleaup and recreate file name environment\r", "-\t\tIProblemFactory problemFactory = new DefaultProblemFactory();\r", "-\r", "+\t\t// create lookup environment\r", "-\t\t\t\tproblemFactory);\r", "+\t\t\t\tnew DefaultProblemFactory());\r", "+\t\t\t\r", "+\t\t// create parser\r", "+\t\t\r", "+\t\t// reset parsed units (they could hold onto obsolete bindings: see bug 16052)\r", "+\t\tMatchingOpenable[] openables = this.matchingOpenables.getMatchingOpenables(project.getPackageFragmentRoots());\r", "+\t\tfor (int i = 0, length = openables.length; i < length; i++) {", "+\t\t\tMatchingOpenable matchingOpenable = openables[i];", "+\t\t\tmatchingOpenable.reset();", "+\t\t}\r", "+\t\t\r", "+\t\t// remember project's name lookup\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53db208b668ac3047e3b0c6421e859b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c2ffe8ad8d598fb546a580542eaede433f8f8195", "commitAfterChange": "997cc1d41c2226e34baef319ef2ec522841d939f", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "\r \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, HashSet visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "signatureAfterChange": "\r \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "diff": ["-\tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, HashSet visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot){\r", "+\tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot){\r", "-\t\tif (!visited.add(this)) {\r", "-\t\t\tcycleParticipants.addAll(visited);\r", "+\t\tint index = visited.indexOf(this);\r", "+\t\tif (index >= 0){\r", "+\t\t\t// only consider direct participants inside the cycle\r", "+\t\t\tfor (int i = index, size = visited.size(); i < size; i++){\r", "+\t\t\t\tcycleParticipants.add(visited.get(i)); \r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tvisited.add(this);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ea52ed6365cbc5ef11fd84eb80ead8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "458dca4c2b9da6278d150eba84339274fccc6057", "commitAfterChange": "01d995488d5e309c6b243da146c63894a6df881d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public TypeDeclaration getTypeDeclaration(String name)", "signatureAfterChange": "     public TypeDeclaration getTypeDeclaration(String name)", "diff": ["-    \t//First check cache", "-    \tTypeDeclaration result = _typeCache.get(name);", "-    \tif (result != null) return result;", "-", "+    \t//First check cache", "+    \tTypeDeclaration result = _typeCache.get(name);", "+    \tif (result != null) return result;", "+", "-\t\tif( _astRoot != null )", "-\t\t\ttypeBinding = _astRoot.getAST().resolveWellKnownType(name);", "-\t\tString typeKey = BindingKey.createTypeBindingKey(name);", "-\t\tif(typeBinding == null){", "-\t\t\t// then look into the current compilation units\t\t\t", "-\t\t\tASTNode node = null;", "-\t\t\tif( _astRoot != null )", "-\t\t\t\tnode = _astRoot.findDeclaringNode(typeKey);", "-\t\t\t\t\t\t", "-\t\t\tif( node != null ){", "-\t\t\t\tfinal int nodeType = node.getNodeType();", "-\t\t\t\tif( nodeType == ASTNode.TYPE_DECLARATION ||", "-\t\t\t\t\tnodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||", "-\t\t\t\t\tnodeType == ASTNode.ENUM_DECLARATION )", "-\t\t\t\ttypeBinding = ((AbstractTypeDeclaration)node).resolveBinding();", "+\t\tCompilationUnit[] asts = getAsts();", "+\t\t", "+\t\tif( asts != null && asts.length > 0) {", "+\t\t\ttypeBinding = asts[0].getAST().resolveWellKnownType(name);", "+", "+\t\t\tif(typeBinding == null){", "+\t\t\t\t// then look into the current compilation units\t\t\t", "+\t\t\t\tASTNode node = null;", "+\t\t\t\tString typeKey = BindingKey.createTypeBindingKey(name);", "+\t\t\t\tfor (int i=0, len=asts.length;i<len;i++) {", "+\t\t\t\t\tnode = asts[i].findDeclaringNode(typeKey);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\tif( node != null ){", "+\t\t\t\t\t\tfinal int nodeType = node.getNodeType();", "+\t\t\t\t\t\tif( nodeType == ASTNode.TYPE_DECLARATION ||", "+\t\t\t\t\t\t\tnodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||", "+\t\t\t\t\t\t\tnodeType == ASTNode.ENUM_DECLARATION )", "+\t\t\t\t\t\ttypeBinding = ((AbstractTypeDeclaration)node).resolveBinding();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 51710}
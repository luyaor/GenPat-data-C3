{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c102e84515e3518dac7db32388689df0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a168331d6b50af3ba19537d965bdb02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "60e138d2828b37f2615e0cced57acea3adb47644", "commitAfterChange": "3c340a30d5ee47c28968789969de0fd1189f5b30", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int matchLevel(AstNode node)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-public int matchLevel(AstNode node) {\r", "-\tif (node instanceof NameReference) {\r", "-\t\tif (this.matches((NameReference)node, false)) {\r", "-\t\t\treturn POSSIBLE_MATCH; // always need to resolve name reference\r", "-\t\t} else {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t} else if (node instanceof ImportReference) {\r", "-\t\tif (this.matches((ImportReference)node, false)) {\r", "-\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t} else {\r", "-\t\treturn super.matchLevel(node);\r", "-\t}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (node instanceof TypeReference) {\r", "+\t\treturn this.matchLevel((TypeReference)node, resolve);\r", "+\t} else if (node instanceof NameReference) {\r", "+\t\treturn this.matchLevel((NameReference)node, resolve);\r", "+\t} else if (node instanceof ImportReference) {\r", "+\t\treturn this.matchLevel((ImportReference)node, resolve);\r", "+\t}\r", "+\treturn IMPOSSIBLE_MATCH;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c24b0647f4bcd78e4fd32f82dceadfa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int matchLevel(AstNode node)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-public int matchLevel(AstNode node) {\r", "-\tif (node instanceof NameReference) {\r", "-\t\tif (this.matches((NameReference)node, false)) {\r", "-\t\t\treturn POSSIBLE_MATCH; // always need to resolve name reference\r", "-\t\t} else {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t} else if (node instanceof ImportReference) {\r", "-\t\tif (this.matches((ImportReference)node, false)) {\r", "-\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t} else {\r", "-\t\treturn super.matchLevel(node);\r", "-\t}\r", "-}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (node instanceof TypeReference) {\r", "+\t\treturn this.matchLevel((TypeReference)node, resolve);\r", "+\t} else if (node instanceof NameReference) {\r", "+\t\treturn this.matchLevel((NameReference)node, resolve);\r", "+\t} else if (node instanceof ImportReference) {\r", "+\t\treturn this.matchLevel((ImportReference)node, resolve);\r", "+\t}\r", "+\treturn IMPOSSIBLE_MATCH;\r", "+}\r"]}], "num": 67019}
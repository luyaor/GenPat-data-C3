{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0de066e4412ea67b8d8dbb564825ac60", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cd5520115103cf219095349f75576a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "5c930a2be2f56a634252cd32fd5425aacd603534", "commitAfterChange": "eb4f7811e5216181c33caa5f1f098b6e53cc8ce4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tLookupEnvironment env = scope.environment();", "-\t\tboolean use15specifics = env.options.sourceLevel >= JDK1_5;", "+\t\tboolean use15specifics = scope.compilerOptions().sourceLevel >= JDK1_5;", "-\t\t\t\texpressionTypeID = env.computeBoxingType(expressionType).id;", "+\t\t\t\texpressionTypeID = scope.environment().computeBoxingType(expressionType).id;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17532853c50e5dff9c2c6ca9df4b57a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "5c930a2be2f56a634252cd32fd5425aacd603534", "commitAfterChange": "eb4f7811e5216181c33caa5f1f098b6e53cc8ce4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\tLookupEnvironment env = scope.environment();", "-\t\tboolean use15specifics = env.options.sourceLevel >= JDK1_5;", "+\t\tboolean use15specifics = scope.compilerOptions().sourceLevel >= JDK1_5;", "-\t\t\t\t\t\t\t\t&& env.computeBoxingType(expressionType).isCompatibleWith(castType)) { // unboxing - only widening match is allowed", "+\t\t\t\t\t\t\t\t&& scope.environment().computeBoxingType(expressionType).isCompatibleWith(castType)) { // unboxing - only widening match is allowed", "-\t\t\t\t\t\t\t&& env.computeBoxingType(expressionType).isCompatibleWith(castType)) { // boxing - only widening match is allowed", "+\t\t\t\t\t\t\t&& scope.environment().computeBoxingType(expressionType).isCompatibleWith(castType)) { // boxing - only widening match is allowed"]}], "num": 19225}
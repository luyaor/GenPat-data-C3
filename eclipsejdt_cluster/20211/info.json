{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "933685a07d4b3cd9a9dd9ecdd1749e01", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60bc4875507c1fd91a695299f79aba81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "6f52e55dfcdb3767d3e0659e7f3cf8875e7f6b50", "commitAfterChange": "41a140d5041f3071881a473fd0061cff7116544d", "methodNumberBeforeChange": 329, "methodNumberAfterChange": 329, "signatureBeforeChange": " public void test179()", "signatureAfterChange": " public void test179()", "diff": ["+\tif (this.complianceLevel <= ClassFileConstants.JDK1_5) {", "+\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"interface Adaptable {\\n\" + ", "+\t\t\t\t\t\"\tpublic Object getAdapter(Class clazz);\t\\n\" + ", "+\t\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"public class X implements Adaptable {\\n\" + ", "+\t\t\t\t\t\"\t@Override\\n\" + ", "+\t\t\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "+\t\t\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tpublic Object getAdapter(Class clazz);\t\\n\" + ", "+\t\t\t\t\"\t                         ^^^^^\\n\" + ", "+\t\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tpublic class X implements Adaptable {\\n\" + ", "+\t\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\t\"The type X must implement the inherited abstract method Adaptable.getAdapter(Class)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "+\t\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method getAdapter(Class<?>) of type X has the same erasure as getAdapter(Class) of type Adaptable but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "+\t\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"The method getAdapter(Class<?>) of type X must override a superclass method\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74c931fd4533e3a6cf9af5ed611d4471", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 768, "methodNumberAfterChange": 768, "signatureBeforeChange": " public void test0748()", "signatureAfterChange": " public void test0748()", "diff": ["-\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"\tstatic interface Factory<T> {\\n\" +", "-\t\t\t\"\t\tpublic <U extends T> U create(Class<U> cl);\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"\t\\n\" +", "-\t\t\t\"\tstatic class BytesFactory implements Factory<byte[]> {\\n\" +", "-\t\t\t\"\t\tpublic byte[] create(Class<byte[]> cl) {\\n\" +", "-\t\t\t\"\t\t\treturn null;\\n\" +", "-\t\t\t\"\t\t}\\n\" +", "-\t\t\t\"\t}\\n\" +", "+\t\t\t\"interface Factory<T> {\\n\" +", "+\t\t\t\"\t<U extends T> U create(Class<U> cl);\\n\" +", "+\t\t\t\"}\\n\" +", "+\t\t\t\"abstract class X implements Factory<byte[]> {\\n\" +", "+\t\t\t\"\tpublic byte[] create(Class<byte[]> cl) { return null; }\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" +", "-\t\t\"\tstatic class BytesFactory implements Factory<byte[]> {\\r\\n\" +", "-\t\t\"\t             ^^^^^^^^^^^^\\n\" +", "-\t\t\"The type X.BytesFactory must implement the inherited abstract method X.Factory<byte[]>.create(Class<U>)\\n\" +", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tpublic byte[] create(Class<byte[]> cl) { return null; }\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method create(Class<byte[]>) of type X has the same erasure as create(Class<U>) of type Factory<T> but does not override it\\n\" + ", "+\t\t\"----------\\n\"", "+\t);", "+// javac 7 reports the name clash when X subclasses another class or is a concrete type"]}], "num": 20211}
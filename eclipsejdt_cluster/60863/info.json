{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ff75b684e29ed373b8368d7fdbb4a97", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f266d8d229353045e205b258a1110d53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tprivate boolean isOnClasspath(IPath path)", "signatureAfterChange": " \tpublic boolean isOnClasspath(IResource resource)", "diff": ["-\tprivate boolean isOnClasspath(IPath path) {", "+\t */", "+\tpublic boolean isOnClasspath(IResource resource) {", "+\t\tIPath exactPath = resource.getFullPath();", "+\t\tIPath path = exactPath;", "+\t\t", "+\t\t// ensure that folders are only excluded if all of their children are excluded", "+\t\tboolean isFolderPath = resource.getType() == IResource.FOLDER;", "+\t\t", "-\t\t\tif (entry.getPath().isPrefixOf(path) ", "-\t\t\t\t\t&& !Util.isExcluded(path, ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "+\t\t\tIPath entryPath = entry.getPath();", "+\t\t\tif (entryPath.equals(exactPath)) { // package fragment roots must match exactly entry pathes (no exclusion there)", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tif (entryPath.isPrefixOf(path) ", "+\t\t\t\t\t&& !Util.isExcluded(path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), isFolderPath)) {", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f292987912809756f91e17b50fa4cd5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tpublic boolean isOnClasspath(IJavaElement element)", "signatureAfterChange": " \tpublic boolean isOnClasspath(IJavaElement element)", "diff": ["+\t\tIClasspathEntry[] classpath;", "+\t\ttry {", "+\t\t\tclasspath = this.getResolvedClasspath(true/*ignore unresolved variable*/);", "+\t\t} catch(JavaModelException e){", "+\t\t\treturn false; // not a Java project", "+\t\t}", "+\t\tboolean isFolderPath = false;", "-\t\t\t\tif (!((IPackageFragmentRoot)element).isArchive()) {", "-\t\t\t\t\t// ensure that folders are only excluded if all of their children are excluded", "-\t\t\t\t\tpath = path.append(\"*\"); //$NON-NLS-1$", "+\t\t\t\t// package fragment roots must match exactly entry pathes (no exclusion there)", "+\t\t\t\tfor (int i = 0; i < classpath.length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = classpath[i];", "+\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\tif (entryPath.equals(path)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\t\treturn false;", "+\t\t\t\t", "-\t\t\t\t\tpath = path.append(\"*\"); //$NON-NLS-1$", "+\t\t\t\t\tisFolderPath = true;", "-\t\treturn this.isOnClasspath(path);", "+\t\tfor (int i = 0; i < classpath.length; i++) {", "+\t\t\tIClasspathEntry entry = classpath[i];", "+\t\t\tIPath entryPath = entry.getPath();", "+\t\t\tif (entryPath.isPrefixOf(path) ", "+\t\t\t\t\t&& !Util.isExcluded(path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), isFolderPath)) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t}", "+\t\treturn false;"]}], "num": 60863}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2657286a0140b19b5f452a8e4c97f1cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a6502931e4f0c5ca7c9a8c8f6eda1bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "79ba8909e6fb493bccdc7e946328fba0e05dda44", "commitAfterChange": "96034fe817e13ad8ad9a79f805301309c3ac46ca", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \tpublic void createParser(JavaProject project) throws JavaModelException", "signatureAfterChange": "\r \tpublic void createParser(JavaProject project) throws JavaModelException", "diff": ["+\t\t// cleaup and recreate file name environment\r", "-\t\tIProblemFactory problemFactory = new DefaultProblemFactory();\r", "-\r", "+\t\t// create lookup environment\r", "-\t\t\t\tproblemFactory);\r", "+\t\t\t\tnew DefaultProblemFactory());\r", "+\t\t\t\r", "+\t\t// create parser\r", "+\t\t\r", "+\t\t// reset parsed units (they could hold onto obsolete bindings: see bug 16052)\r", "+\t\tMatchingOpenable[] openables = this.matchingOpenables.getMatchingOpenables(project.getPackageFragmentRoots());\r", "+\t\tfor (int i = 0, length = openables.length; i < length; i++) {", "+\t\t\tMatchingOpenable matchingOpenable = openables[i];", "+\t\t\tmatchingOpenable.reset();", "+\t\t}\r", "+\t\t\r", "+\t\t// remember project's name lookup\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53db208b668ac3047e3b0c6421e859b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c2ffe8ad8d598fb546a580542eaede433f8f8195", "commitAfterChange": "997cc1d41c2226e34baef319ef2ec522841d939f", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "\r \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, HashSet visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "signatureAfterChange": "\r \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "diff": ["-\tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, HashSet visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot){\r", "+\tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot){\r", "-\t\tif (!visited.add(this)) {\r", "-\t\t\tcycleParticipants.addAll(visited);\r", "+\t\tint index = visited.indexOf(this);\r", "+\t\tif (index >= 0){\r", "+\t\t\t// only consider direct participants inside the cycle\r", "+\t\t\tfor (int i = index, size = visited.size(); i < size; i++){\r", "+\t\t\t\tcycleParticipants.add(visited.get(i)); \r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tvisited.add(this);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7c654e74ee8a0303eb853b24c82f382", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "e0224da700606ee4894293f10b71bd4b6b9d30f5", "commitAfterChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding capture(Scope scope, int position)", "signatureAfterChange": " \tpublic TypeBinding capture(Scope scope, int position)", "diff": ["+\t\tif ((this.tagBits & TagBits.HasDirectWildcard) == 0) ", "+\t\t\treturn this;", "+\t\t", "-\t\tif ((this.tagBits & TagBits.HasDirectWildcard) != 0) {", "-\t\t\tint length = originalArguments.length;", "-\t\t\tcapturedArguments = new TypeBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tTypeBinding argument = originalArguments[i];", "-\t\t\t\tif (argument.kind() == Binding.WILDCARD_TYPE) {", "-\t\t\t\t\tcapturedArguments[i] = ", "-\t\t\t\t\t\tnew CaptureBinding(", "-\t\t\t\t\t\t\t\t(WildcardBinding) argument, ", "-\t\t\t\t\t\t\t\tscope.enclosingSourceType().outermostEnclosingType(),", "-\t\t\t\t\t\t\t\tposition);", "-\t\t\t\t} else {", "-\t\t\t\t\tcapturedArguments[i] = argument;", "-\t\t\t\t}", "+\t\tint length = originalArguments.length;", "+\t\tcapturedArguments = new TypeBinding[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tTypeBinding argument = originalArguments[i];", "+\t\t\tif (argument.kind() == Binding.WILDCARD_TYPE) {", "+\t\t\t\tcapturedArguments[i] = ", "+\t\t\t\t\tnew CaptureBinding(", "+\t\t\t\t\t\t\t(WildcardBinding) argument, ", "+\t\t\t\t\t\t\tscope.enclosingSourceType().outermostEnclosingType(),", "+\t\t\t\t\t\t\tposition);", "+\t\t\t} else {", "+\t\t\t\tcapturedArguments[i] = argument;", "-\t\t\treturn this.environment.createParameterizedType(this.type, capturedArguments, enclosingType());", "+\t\t\tParameterizedTypeBinding capturedParameterizedType = this.environment.createParameterizedType(this.type, capturedArguments, enclosingType());", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeBinding argument = capturedArguments[i];", "+\t\t\t\tif (argument.isCapture()) {", "+\t\t\t\t\t((CaptureBinding)argument).initializeBounds(capturedParameterizedType);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn capturedParameterizedType;"]}], "num": 59417}
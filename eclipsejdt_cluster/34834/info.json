{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0b696f9916336b97a21ba13f855318c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e70bd787b1c08196cb869867d0d1587", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "37d67ed9fa27dc85b6112e216c3af6d687e12530", "commitAfterChange": "8924c9453af0fcfcdde960b7165abadc76ad272e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\t\tdecodeModifiersForField(buffer, fieldInfo.getAccessFlags());", "-\t\tif (fieldInfo.isSynthetic()) {", "-\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Messages.disassembler_space); ", "+\t\tif (checkMode(mode, WORKING_COPY)) {", "+\t\t\tdecodeModifiersForFieldForWorkingCopy(buffer, fieldInfo.getAccessFlags());", "+\t\t\tif (signatureAttribute != null) {", "+\t\t\t\tbuffer.append(returnClassName(getSignatureForField(signatureAttribute.getSignature()), '.', mode));", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(returnClassName(getSignatureForField(fieldDescriptor), '.', mode));", "+\t\t\t}", "+\t\t} else {", "+\t\t\tdecodeModifiersForField(buffer, fieldInfo.getAccessFlags());", "+\t\t\tif (fieldInfo.isSynthetic()) {", "+\t\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "+\t\t\t\tbuffer.append(Messages.disassembler_space);", "+\t\t\t}", "+\t\t\tbuffer.append(returnClassName(getSignatureForField(fieldDescriptor), '.', mode));", "-\t\tbuffer.append(getSignatureForField(fieldDescriptor));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27aad733b888b56bb43e86663b3a766f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelCache.java", "commitBeforeChange": "32cd4b8a1a4b85cb46b90189d8b46b118d43fe67", "commitAfterChange": "aba731a12d5754d3722992eeb2ed082be09b8902", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public String toStringFillingRation(String prefix)", "signatureAfterChange": " public String toStringFillingRation(String prefix)", "diff": ["-\tbuffer.append(\"Root cache: \"); //$NON-NLS-1$", "+\tbuffer.append(\"Root cache[\"); //$NON-NLS-1$", "+\tbuffer.append(this.rootCache.getSpaceLimit());", "+\tbuffer.append(\"]: \"); //$NON-NLS-1$", "-\tbuffer.append(\"Package cache: \"); //$NON-NLS-1$", "+\tbuffer.append(\"Package cache[\"); //$NON-NLS-1$", "+\tbuffer.append(this.pkgCache.getSpaceLimit());", "+\tbuffer.append(\"]: \"); //$NON-NLS-1$", "-\tbuffer.append(\"Openable cache: \"); //$NON-NLS-1$", "+\tbuffer.append(\"Openable cache[\"); //$NON-NLS-1$", "+\tbuffer.append(this.openableCache.getSpaceLimit());", "+\tbuffer.append(\"]: \"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69ece7bac7cf2ea117e86d04b28d1bdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "cc0ef1d5e003ee3b62672de56257b8d688621bfb", "commitAfterChange": "f550bd975516f38afc7e75acccf964ac012b15c3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tprotected StringBuffer printProposal(CompletionProposal proposal, int tab, StringBuffer buffer)", "signatureAfterChange": " \t \tprotected StringBuffer printProposal(CompletionProposal proposal, int tab, StringBuffer buffer)", "diff": ["+\t\t", "-\t\t\tbuffer.append(\", [\");", "+\t\t\tbuffer.append(\", \");", "+\t\t\tif(this.showTokenPositions) buffer.append(\"replace\");", "+\t\t\tbuffer.append(\"[\");", "+\t\tif(this.showTokenPositions) {", "+\t\t\tbuffer.append(\", token[\");", "+\t\t\tbuffer.append(proposal.getTokenStart());", "+\t\t\tbuffer.append(\", \");", "+\t\t\tbuffer.append(proposal.getTokenEnd());", "+\t\t\tbuffer.append(\"]\");", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfcf0bca17c98f33fd9875ff77ac14ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "e0259efe596fb3e88871acf616821dc2f984a25a", "commitAfterChange": "6ccbe6e7a1eb8a287ad2e183536fbec86fa90b93", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\tbuffer.append(_returnType.getKey());", "+\t\t\tif (_returnType.isTypeVariable()) {", "+\t\t\t\tbuffer.append(_returnType.getQualifiedName());", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(_returnType.getKey());", "+\t\t\t}", "-\t\t\tITypeBinding parameter = parameters[i];", "+\t\t\tfinal ITypeBinding parameter = parameters[i];", "-\t\t\t\tbuffer.append(parameter.getKey());", "+\t\t\t\tif (parameter.isTypeVariable()) {", "+\t\t\t\t\tbuffer.append(parameter.getQualifiedName());", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append(parameter.getKey());", "+\t\t\t\t}", "-\t\t\tif (thrownExceptions[i] != null) {", "-\t\t\t\tbuffer.append(thrownExceptions[i].getKey());", "+\t\t\tfinal ITypeBinding thrownException = thrownExceptions[i];", "+\t\t\tif (thrownException != null) {", "+\t\t\t\tif (thrownException.isTypeVariable()) {", "+\t\t\t\t\tbuffer.append(thrownException.getQualifiedName());\t\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append(thrownException.getKey());", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6c4d8df97108a1fbfb61bd157f39de2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "03ee5c38fd4d601946d660a37b84397301d2b02e", "commitAfterChange": "25380b7a0e1892900b0928d3d75c0bd4972b9e4b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": "\r protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "diff": ["+\r", "+\tIBuffer buffer;\r", "+\t\r", "+\t// request buffer factory\r", "+\tif (this.bufferFactory != null) {\r", "+\t\tbuffer = this.bufferFactory.createBuffer(this);\r", "+\t\tif (buffer != null){\r", "+\t\t\tCompilationUnit original = (CompilationUnit) getOriginalElement();\r", "+\t\t\tbuffer.setContents(original.getContents());\r", "+\t\t\tbuffer.addBufferChangedListener(this);\r", "+\t\t\treturn buffer;\r", "+\t\t}\r", "+\t} \r", "+\t// create default buffer\r", "-\tIBuffer buf= getBufferManager().openBuffer((char[])original.getBuffer().getCharacters().clone(), pm, this, isReadOnly());\r", "-\tbuf.addBufferChangedListener(this);\r", "-\treturn buf;\t\r", "+\tbuffer = getBufferManager().openBuffer((char[])original.getBuffer().getCharacters().clone(), pm, this, isReadOnly());\r", "+\tbuffer.addBufferChangedListener(this);\r", "+\treturn buffer;\t\r"]}], "num": 34834}
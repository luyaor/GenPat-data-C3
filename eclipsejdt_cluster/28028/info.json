{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0641b781eab7be9b3024a16a046192c6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16f01d182f6c86e2e066610ff9dd11cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void test030() throws Exception", "signatureAfterChange": " \t \tpublic void test063_codeblocks_new_instanceof() throws Exception", "diff": ["-\t// qualified allocation expression with type arguments", "-\tpublic void test030() throws Exception {", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(CLASS)\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"D.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface D {\\n\" + ", "-\t\t\t\t\"\tchar value() default '-';\\n\" + ", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.util.Map;\\n\" +", "-\t\t\t\t\"import java.util.HashMap;\\n\" +", "-\t\t\t\t\"@SuppressWarnings({\\\"unchecked\\\",\\\"rawtypes\\\"})\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\tObject newMap(Object o) {\\n\" + ", "-\t\t\t\t\"\t\tMap<@A Object, ? super @C Map<@B String, @D Comparable>> map;\\n\" + ", "-\t\t\t\t\"\t\tif (o == null) {\\n\" + ", "-\t\t\t\t\"\t\t\tmap = null;\\n\" + ", "-\t\t\t\t\"\t\t\tSystem.out.println(map);\\n\" + ", "-\t\t\t\t\"\t\t} else {\\n\" + ", "-\t\t\t\t\"\t\t\tSystem.out.println(\\\"No map yet\\\");\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t\tmap = new HashMap();\\n\" + ", "-\t\t\t\t\"\t\treturn map;\\n\" + ", "-\t\t\t\t\"\t} \\n\" + ", "-\t\t\t\t\"}\",", "-\t\t},", "-\t\t\"\");", "-\t\tString expectedOutput =", "-\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #46 @A(\\n\" + ", "-\t\t\t\"        target type = 0x9 LOCAL_VARIABLE_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        local variable entries:\\n\" + ", "-\t\t\t\"          [pc: 6, pc: 16] index: 2\\n\" + ", "-\t\t\t\"          [pc: 32, pc: 34] index: 2\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #47 @C(\\n\" + ", "-\t\t\t\"        target type = 0x1c WILDCARD_BOUND\\n\" + ", "-\t\t\t\"        wildcard location type = 0x9 LOCAL_VARIABLE_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"          local variable entries:\\n\" + ", "-\t\t\t\"                [pc: 6, pc: 16] index: 2\\n\" + ", "-\t\t\t\"                [pc: 32, pc: 34] index: 2\\n\" + ", "-\t\t\t\"              wildcard locations = {1}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #48 @D(\\n\" + ", "-\t\t\t\"        target type = 0x1d WILDCARD_BOUND_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        wildcard location type = 0x9 LOCAL_VARIABLE_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"          local variable entries:\\n\" + ", "-\t\t\t\"                [pc: 6, pc: 16] index: 2\\n\" + ", "-\t\t\t\"                [pc: 32, pc: 34] index: 2\\n\" + ", "-\t\t\t\"              wildcard locations = {1}\\n\" + ", "-\t\t\t\"        locations = {1}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #44 @B(\\n\" + ", "-\t\t\t\"        target type = 0x1d WILDCARD_BOUND_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        wildcard location type = 0x9 LOCAL_VARIABLE_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"          local variable entries:\\n\" + ", "-\t\t\t\"                [pc: 6, pc: 16] index: 2\\n\" + ", "-\t\t\t\"                [pc: 32, pc: 34] index: 2\\n\" + ", "-\t\t\t\"              wildcard locations = {1}\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "-\t\t\t\"      )\\n\";", "-\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "-\t}", "+\t", "+\tpublic void test063_codeblocks_new_instanceof() throws Exception {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"A.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface A {\\n\" + ", "+\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"B.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(CLASS)\\n\" + ", "+\t\t\t\t\"@interface B {\\n\" + ", "+\t\t\t\t\"\tint value() default -1;\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"C.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface C {\\n\" + ", "+\t\t\t\t\"\tchar value() default '-';\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"I.java\",", "+\t\t\t\t\"interface I {}\\n\",", "+\t\t\t\t\"J.java\",", "+\t\t\t\t\"interface J {}\\n\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tpublic boolean foo(Object o) {\\n\" + ", "+\t\t\t\t\"\t\tboolean b = (o instanceof @C('_') Object[]);\\n\" + ", "+\t\t\t\t\"\t\tObject o1 = new @B(3) @A(\\\"new Object\\\") Object[] {};\\n\" + ", "+\t\t\t\t\"\t\treturn b;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t},", "+\t\t\"\");", "+\t\tString expectedOutput =", "+\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"      #24 @B(\\n\" + ", "+\t\t\t\"        #25 value=(int) 3 (constant type)\\n\" + ", "+\t\t\t\"        target type = 0x44 NEW\\n\" + ", "+\t\t\t\"        offset = 6\\n\" + ", "+\t\t\t\"        location = [ARRAY]\\n\" + ", "+\t\t\t\"      )\\n\" + ", "+\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"      #28 @C(\\n\" + ", "+\t\t\t\"        #25 value=\\'_\\' (constant type)\\n\" + ", "+\t\t\t\"        target type = 0x43 INSTANCEOF\\n\" + ", "+\t\t\t\"        offset = 1\\n\" + ", "+\t\t\t\"        location = [ARRAY]\\n\" + ", "+\t\t\t\"      )\\n\" + ", "+\t\t\t\"      #30 @A(\\n\" + ", "+\t\t\t\"        #25 value=\\\"new Object\\\" (constant type)\\n\" + ", "+\t\t\t\"        target type = 0x44 NEW\\n\" + ", "+\t\t\t\"        offset = 6\\n\" + ", "+\t\t\t\"        location = [ARRAY]\\n\" + ", "+\t\t\t\"      )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f36a045942767ba5cc098edae11ee66a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void test088()", "signatureAfterChange": " public void test088()", "diff": ["-\t\t\"3. WARNING in p\\\\X.java (at line 25)\\n\" +", "-\t\t\"\tprivate void a() { System.out.println(\\\"A\\\");} \\n\" +", "-\t\t\"\t             ^^^\\n\" +", "-\t\t\"The method a() from the type X is never used locally\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in p\\\\X.java (at line 31)\\n\" +", "-\t\t\"\tClass c = b.getClass();\\n\" +", "-\t\t\"\t^^^^^\\n\" +", "-\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in p\\\\X.java (at line 32)\\n\" +", "-\t\t\"\tClass _getClasses [] = X.class.getClasses(); \\n\" +", "-\t\t\"\t^^^^^\\n\" +", "-\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in p\\\\X.java (at line 36)\\n\" +", "-\t\t\"\tConstructor _getConstructors[] = c.getConstructors(); \\n\" +", "-\t\t\"\t^^^^^^^^^^^\\n\" +", "-\t\t\"Constructor is a raw type. References to generic type Constructor<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. WARNING in p\\\\X.java (at line 39)\\n\" +", "+\t\t\"3. WARNING in p\\\\X.java (at line 39)\\n\" +", "-\t\t\t\"3. WARNING in p\\\\X.java (at line 25)\\n\" +", "-\t\t\t\"\tprivate void a() { System.out.println(\\\"A\\\");} \\n\" +", "-\t\t\t\"\t             ^^^\\n\" +", "-\t\t\t\"The method a() from the type X is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in p\\\\X.java (at line 31)\\n\" +", "-\t\t\t\"\tClass c = b.getClass();\\n\" +", "-\t\t\t\"\t^^^^^\\n\" +", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. WARNING in p\\\\X.java (at line 32)\\n\" +", "-\t\t\t\"\tClass _getClasses [] = X.class.getClasses(); \\n\" +", "-\t\t\t\"\t^^^^^\\n\" +", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. WARNING in p\\\\X.java (at line 36)\\n\" +", "-\t\t\t\"\tConstructor _getConstructors[] = c.getConstructors(); \\n\" +", "-\t\t\t\"\t^^^^^^^^^^^\\n\" +", "-\t\t\t\"Constructor is a raw type. References to generic type Constructor<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in p\\\\X.java (at line 39)\\n\" +", "+\t\t\t\"3. WARNING in p\\\\X.java (at line 39)\\n\" +", "-\t\t\t\"8. WARNING in p\\\\X.java (at line 39)\\n\" +", "+\t\t\t\"4. WARNING in p\\\\X.java (at line 39)\\n\" +"]}], "num": 28028}
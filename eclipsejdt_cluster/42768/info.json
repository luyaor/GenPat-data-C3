{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a64eddb14faa2d4c5eae6d14ae66fa8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31429c3384366af44c7869b022fa92a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "6ec2bf68626c3baaf2de76ad471eae21612974d2", "commitAfterChange": "5f8cfe2efe8d090091876dd299bd5bd9c4957228", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void reset()", "signatureAfterChange": " public void reset()", "diff": ["-\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\tfinal IWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tthis.projectsToCheck = workspace.getRoot().getProjects();", "-\t\tfor (int i = 0, max = this.projectsToCheck == null ? 0 : this.projectsToCheck.length; i < max; i++){", "-\t\t\tIJavaProject project = JavaCore.create(this.projectsToCheck[i]);", "-\t\t\ttry {", "-\t\t\t\t// force to resolve CP variables before calling indexer - 19303 (indirectly through consistency check)", "-\t\t\t\tproject.getResolvedClasspath(true);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t}", "-\t\t} ", "+\t\ttry {", "+\t\t\tJavaCore.run(", "+\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\t\tIndexManager.this.projectsToCheck = workspace.getRoot().getProjects();", "+\t\t\t\t\t\tfor (int i = 0, max = IndexManager.this.projectsToCheck == null ? 0 : IndexManager.this.projectsToCheck.length; i < max; i++){", "+\t\t\t\t\t\t\tIJavaProject project = JavaCore.create(IndexManager.this.projectsToCheck[i]);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t// force to resolve CP variables before calling indexer - 19303 (indirectly through consistency check)", "+\t\t\t\t\t\t\t\tproject.getResolvedClasspath(true);", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t}", "+\t\t\t\t},", "+\t\t\t\tnull);", "+\t\t} catch (CoreException e) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95d0bbb7bd832131a2c8e95aa976ae53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void reset()", "signatureAfterChange": " public void reset()", "diff": ["-public void reset(){", "-", "-\tfinal IWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\tif (workspace != null){", "-\t\t// force to resolve classpaths for projects to check, so as to avoid running CP variable initializers in the background thread", "-\t\ttry {", "-\t\t\tJavaCore.run(", "-\t\t\t\tnew IWorkspaceRunnable() {", "-\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\t\tIndexManager.this.projectsToCheck = workspace.getRoot().getProjects();", "-\t\t\t\t\t\tfor (int i = 0, max = IndexManager.this.projectsToCheck == null ? 0 : IndexManager.this.projectsToCheck.length; i < max; i++){", "-\t\t\t\t\t\t\tIJavaProject project = JavaCore.create(IndexManager.this.projectsToCheck[i]);", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t// force to resolve CP variables before calling indexer - 19303 (indirectly through consistency check)", "-\t\t\t\t\t\t\t\tproject.getResolvedClasspath(true);", "-\t\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} ", "-\t\t\t\t\t}", "-\t\t\t\t},", "-\t\t\t\tnull);", "-\t\t} catch (CoreException e) {", "-\t\t}", "-\t}", "+public void reset() {", "-\tif (indexes != null){", "-\t\tindexes = new HashMap(5);", "-\t\tmonitors = new HashMap(5);", "+\tif (this.indexes != null) {", "+\t\tthis.indexes = new HashMap(5);", "+\t\tthis.monitors = new HashMap(5);", "+\t\tthis.indexStates = null;", "-\tjavaPluginLocation = null;", "+\tthis.indexNames = new SimpleLookupTable();", "+\tthis.javaPluginLocation = null;", "+}"]}], "num": 42768}
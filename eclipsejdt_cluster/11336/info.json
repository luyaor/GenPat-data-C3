{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94fa8ac47bde127c796d1803306aa5ff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32dfe4bd4ed68dbf4ee62bce8c5d9781", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "eb727711bfbefbe06ad25a796b42d61ffab45eca", "commitAfterChange": "c4ce580cb0d1d41b788a7611bd30d4cf0eba4f86", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\tboolean warnRawArgs = false, unsafeWildcardInvocation = false;", "+\t\tboolean unsafeWildcardInvocation = false;", "-\t\t\t    warnRawArgs = true;", "+\t\t\t    scope.problemReporter().unsafeRawConversion(arguments[i], argumentType, parameterType);", "-\t\t    scope.problemReporter().unsafeWildcardInvocation((ASTNode)invocationSite, receiverType, method, argumentTypes);", "+\t\t    scope.problemReporter().wildcardInvocation((ASTNode)invocationSite, receiverType, method, argumentTypes);", "-\t\t} else if (warnRawArgs) {", "-\t\t    scope.problemReporter().unsafeInvocationWithRawArguments((ASTNode)invocationSite, receiverType, method, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddcb8fbe64223bf201aac74826e25ad0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "eb727711bfbefbe06ad25a796b42d61ffab45eca", "commitAfterChange": "c4ce580cb0d1d41b788a7611bd30d4cf0eba4f86", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tboolean warnRawArgs = false;", "-\t\t\t    warnRawArgs = true;", "+\t\t\t\tscope.problemReporter().unsafeRawConversion(arguments[i], argumentType, parameterType);", "-\t} else if (warnRawArgs) {", "-\t    scope.problemReporter().unsafeInvocationWithRawArguments(this, allocatedType, this.binding, argumentTypes);"]}], "num": 11336}
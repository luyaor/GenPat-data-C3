{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68c6220cb975c08dd1849c6a304631a7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14c48212de7800fa18125359e4f68f90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "2c4584c2d5b726b4cdc708e96ad6b04e53986107", "commitAfterChange": "107f362cb3526a7bf91d7e9a22a75cf0b6b560f8", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 258, "signatureBeforeChange": " public void unsafeWildcardInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method, TypeBinding[] arguments)", "signatureAfterChange": " public void unsafeWildcardInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method, TypeBinding[] arguments)", "diff": ["+\tTypeBinding offendingArgument = null;", "+\tTypeBinding offendingParameter = null;", "+\tfor (int i = 0, length = method.parameters.length; i < length; i++) {", "+\t\tTypeBinding parameter = method.parameters[i];", "+\t\tif (parameter.isWildcard() && (((WildcardBinding) parameter).kind != Wildcard.SUPER)) {", "+\t\t\toffendingParameter = parameter;", "+\t\t\toffendingArgument = arguments[i];", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\t", "+\t\t\t\tnew String(offendingArgument.readableName()),", "+\t\t\t\tnew String(offendingParameter.readableName()),", "+\t\t\t\tnew String(offendingArgument.shortReadableName()),", "+\t\t\t\tnew String(offendingParameter.shortReadableName()),", "+\t\t\t\tnew String(offendingArgument.readableName()),", "+\t\t\t\tnew String(offendingParameter.readableName()),", "+\t\t\t\tnew String(offendingArgument.shortReadableName()),", "+\t\t\t\tnew String(offendingParameter.shortReadableName()),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbe489187ce8c62bbb71abd48264dfe1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 232, "signatureBeforeChange": " public void typeMismatchErrorActualTypeExpectedType(Expression expression, TypeBinding constantType, TypeBinding expectedType)", "signatureAfterChange": " public void typeMismatchError(TypeBinding typeArgument, TypeVariableBinding typeParameter, ReferenceBinding genericType, ASTNode location)", "diff": ["+public void typeMismatchError(TypeBinding typeArgument, TypeVariableBinding typeParameter, ReferenceBinding genericType, ASTNode location) {", "+    if (location == null) { // binary case", "+\t\tthis.handle(", "+\t\t\tIProblem.TypeArgumentMismatch,", "+\t\t\tnew String[] { new String(typeArgument.readableName()), new String(genericType.readableName()), new String(typeParameter.sourceName), parameterBoundAsString(typeParameter, false) },", "+\t\t\tnew String[] { new String(typeArgument.shortReadableName()), new String(genericType.shortReadableName()), new String(typeParameter.sourceName), parameterBoundAsString(typeParameter, true) },", "+\t\t\tAbortCompilation | Error,", "+\t\t\t0,", "+\t\t\t1);", "+        return;", "+    }", "+\t\tIProblem.TypeArgumentMismatch,", "+\t\tnew String[] { new String(typeArgument.readableName()), new String(genericType.readableName()), new String(typeParameter.sourceName), parameterBoundAsString(typeParameter, false) },", "+\t\tnew String[] { new String(typeArgument.shortReadableName()), new String(genericType.shortReadableName()), new String(typeParameter.sourceName), parameterBoundAsString(typeParameter, true) },", "-public void typeMismatchErrorActualTypeExpectedType(Expression expression, TypeBinding constantType, TypeBinding expectedType) {", "-\tString constantTypeName = new String(constantType.readableName());", "-\tString expectedTypeName = new String(expectedType.readableName());", "-\tString constantTypeShortName = new String(constantType.shortReadableName());", "-\tString expectedTypeShortName = new String(expectedType.shortReadableName());", "-\tif (constantTypeShortName.equals(expectedTypeShortName)){", "-\t\tconstantTypeShortName = constantTypeName;", "-\t\texpectedTypeShortName = expectedTypeName;", "-\t}", "-\t\tnew String[] {constantTypeName, expectedTypeName},", "-\t\tnew String[] {constantTypeShortName, expectedTypeShortName},", "-\t\texpression.sourceStart,", "-\t\texpression.sourceEnd);"]}], "num": 3235}
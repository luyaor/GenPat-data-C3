{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70e7053caa195eb2dd677c67a40a4946", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d8844e5d9b560836b5088955ce77bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "074f76ed30b280be335de3f9fa68939f9241cbe0", "commitAfterChange": "451a4290b08482db72c12f90b576f09a8da8fda2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, final ISearchRequestor storage)", "signatureAfterChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage)", "diff": ["-\tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, final ISearchRequestor storage) {", "+\tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage) {", "-\t\t\t\t\t\tNameLookup.ACCEPT_ALL);", "+\t\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));", "-\t\t\t\t\tsimpleName,", "+\t\t\t\t\tsimpleName.length == 0 ? null : simpleName, //TODO(david) remove once bug 156340 will be fixed", "-\t\t\t\t\tIJavaSearchConstants.TYPE,", "+\t\t\t\t\tsearchFor,", "-\t\t\t\t\tNameLookup.ACCEPT_ALL);", "+\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));", "-\t\t\t\tNameLookup.ACCEPT_ALL);", "+\t\t\t\tconvertSearchFilterToModelFilter(searchFor));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "256556c871ab40f8b1a6c361e71580b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void bytecodeExceeds64KLimit(AbstractMethodDeclaration location)", "signatureAfterChange": " public void bytecodeExceeds64KLimit(AbstractMethodDeclaration location)", "diff": ["+\tMethodBinding method = location.binding;", "-\t\t\tnew String[] {new String(location.selector), parametersAsString(location.binding.parameters, false)},", "-\t\t\tnew String[] {new String(location.selector), parametersAsString(location.binding.parameters, true)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, false)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, true)},", "-\t\t\tnew String[] {new String(location.selector), parametersAsString(location.binding.parameters, false)},", "-\t\t\tnew String[] {new String(location.selector), parametersAsString(location.binding.parameters, true)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, false)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, true)},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2597dc771849d7e2527db1952c68fb27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "c9dd851a757195fe684b1a5b7f8f16cc8d3ff375", "commitAfterChange": "b79c29d7f1a4a20398432bd28f19825acd39464f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tvoid findMatches(SearchPattern pattern, SearchParticipant[] participants, IJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tvoid findMatches(SearchPattern pattern, SearchParticipant[] participants, IJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\t/* initialize progress monitor */", "-\t\t\tif (monitor != null)", "-\t\t\t\tmonitor.beginTask(Messages.engine_searching, 100); ", "+\t\t\t/* initialize progress monitor */", "+\t\t\tint length = participants.length;", "+\t\t\tif (monitor != null)", "+\t\t\t\tmonitor.beginTask(Messages.engine_searching, 100 * length); ", "-\t\t\tfor (int i = 0, l = participants.length; i < l; i++) {", "+\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tSubProgressMonitor subMonitor= monitor==null ? null : new SubProgressMonitor(monitor, 1000);", "-\t\t\t\tif (subMonitor != null) subMonitor.beginTask(\"\", 1000); //$NON-NLS-1$", "-\t\t\t\t\tif (subMonitor != null) subMonitor.subTask(Messages.bind(Messages.engine_searching_indexing, new String[] {participant.getDescription()})); ", "+\t\t\t\t\tif (monitor != null) monitor.subTask(Messages.bind(Messages.engine_searching_indexing, new String[] {participant.getDescription()})); ", "-\t\t\t\t\t\tsubMonitor);", "+\t\t\t\t\t\tmonitor==null ? null : new SubProgressMonitor(monitor, 50));", "-\t\t\t\t\tif (subMonitor != null) subMonitor.subTask(Messages.bind(Messages.engine_searching_matching, new String[] {participant.getDescription()})); ", "+\t\t\t\t\tif (monitor != null) monitor.subTask(Messages.bind(Messages.engine_searching_matching, new String[] {participant.getDescription()})); ", "-\t\t\t\t\t\tparticipant.locateMatches(matches, pattern, scope, requestor, subMonitor);", "+\t\t\t\t\t\tparticipant.locateMatches(matches, pattern, scope, requestor, monitor==null ? null : new SubProgressMonitor(monitor, 50));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e6800cb62661a915259983bbb3211b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "b5bed3972356e8be51cd606b69a9491540b97af1", "commitAfterChange": "e1454516411e21c76afb7797ea67208e4fc9c49d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\tif (checkMode(mode, SYSTEM | DETAILED)) {", "-\t\tif (mode == DETAILED) {", "+\t\tif (checkMode(mode, DETAILED)) {", "-\t\tif (mode == SYSTEM) {", "+\t\tif (checkMode(mode, SYSTEM)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "295076bd7cacbfb5a1914afa49526a6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "38deed784ce291d43d3c53414da1ee3c4ed08415", "commitAfterChange": "644852dd87f43f0af4108905e62d50729f9b044b", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public void fieldHiding(FieldDeclaration fieldDecl, Binding hiddenVariable)", "signatureAfterChange": " public void fieldHiding(FieldDeclaration fieldDecl, Binding hiddenVariable)", "diff": ["-\t\t\tfieldDecl.sourceStart,", "-\t\t\tfieldDecl.sourceEnd);", "+\t\t\tlocalSourceStart((LocalVariableBinding) hiddenVariable, fieldDecl),", "+\t\t\tlocalSourceEnd((LocalVariableBinding) hiddenVariable, fieldDecl));", "-\t\t\tfieldDecl.sourceStart,", "-\t\t\tfieldDecl.sourceEnd);", "+\t\t\tfieldSourceStart(hiddenField, fieldDecl),", "+\t\t\tfieldSourceEnd(hiddenField, fieldDecl));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7322bc398938ca7b52f1078e17c6fad3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java", "commitBeforeChange": "eb6e95d2e72868c1b8f5265e2dbaeedc501822a8", "commitAfterChange": "69622d139cf7be8059928288f19c2f5b2d55bdc5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-\t\tstandardTests.add(Compliance_1_3.class);", "-\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_3, RegressionTestSetup.class, standardTests));", "+\t    ArrayList tests_1_3 = (ArrayList)standardTests.clone();", "+\t\ttests_1_3.add(Compliance_1_3.class);", "+\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_3, RegressionTestSetup.class, tests_1_3));", "-\t\tstandardTests.remove(Compliance_1_3.class);", "-\t\tstandardTests.add(AssertionTest.class);", "-\t\tstandardTests.add(Compliance_1_4.class);\t", "-\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_4, RegressionTestSetup.class, standardTests));", "+\t    ArrayList tests_1_4 = (ArrayList)standardTests.clone();", "+\t\ttests_1_4.add(AssertionTest.class);", "+\t\ttests_1_4.add(Compliance_1_4.class);", "+\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_4, RegressionTestSetup.class, tests_1_4));", "-\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_5, RegressionTestSetup.class, standardTests));", "+\t    ArrayList tests_1_5 = (ArrayList)standardTests.clone();", "+\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_5, RegressionTestSetup.class, tests_1_5));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ce5d3cbc875621b270e6439277d3c39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "38deed784ce291d43d3c53414da1ee3c4ed08415", "commitAfterChange": "644852dd87f43f0af4108905e62d50729f9b044b", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 155, "signatureBeforeChange": " public void importProblem(ImportReference importRef, Binding expectedImport)", "signatureAfterChange": " public void importProblem(ImportReference importRef, Binding expectedImport)", "diff": ["-\t\t\t\t\timportRef.sourceStart,", "-\t\t\t\t\timportRef.sourceEnd);\t\t\t", "+\t\t\t\t\tfieldSourceStart(field, importRef),", "+\t\t\t\t\tfieldSourceEnd(field, importRef));\t\t\t", "-\t\t\timportRef.sourceStart,", "-\t\t\timportRef.sourceEnd);", "+\t\t\tfieldSourceStart(field, importRef),", "+\t\t\tfieldSourceEnd(field, importRef));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae3fb912b85c785665b659b55028fe70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 347, "methodNumberAfterChange": 347, "signatureBeforeChange": " public void unqualifiedFieldAccess(NameReference reference, FieldBinding field)", "signatureAfterChange": " public void unqualifiedFieldAccess(NameReference reference, FieldBinding field)", "diff": ["-\tint end = reference.sourceEnd;", "-\tif (reference instanceof QualifiedNameReference) {", "-\t\tQualifiedNameReference qref = (QualifiedNameReference) reference;", "-\t\tend = (int) qref.sourcePositions[0];", "-\t}", "-\t\treference.sourceStart,", "-\t\tend);", "+\t\tfieldSourceStart(field, reference),", "+\t\tfieldSourceEnd(field, reference)); ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fef4dc362fe0c2f28b81ee898a4a063b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "38deed784ce291d43d3c53414da1ee3c4ed08415", "commitAfterChange": "644852dd87f43f0af4108905e62d50729f9b044b", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 178, "signatureBeforeChange": " public void invalidField(FieldReference fieldRef, TypeBinding searchedType)", "signatureAfterChange": " public void invalidField(FieldReference fieldRef, TypeBinding searchedType)", "diff": ["-\tfinal int sourceStart= (int) (fieldRef.nameSourcePosition >> 32);", "-\t\t\t\tsourceStart,", "-\t\t\t\tfieldRef.sourceEnd);\t\t\t", "+\t\t\t\tfieldSourceStart(field, fieldRef),", "+\t\t\t\tfieldSourceEnd(field, fieldRef));\t\t\t", "-\t\tsourceStart,", "-\t\tfieldRef.sourceEnd);", "+\t\tfieldSourceStart(field, fieldRef),", "+\t\tfieldSourceEnd(field, fieldRef));"]}], "num": 25}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af82dd004a5ab8a67f19d8b658669e38", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf8d724e17255ba2f4dd575be112986a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "0da142f932a749b1eb7c01820e9c4debc70253e7", "commitAfterChange": "bf91a84b0cb02b404e07fc3b23674db13215318f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void testFullBuildDefault() throws CoreException, IOException", "signatureAfterChange": " \tpublic void testFullBuildDefault() throws CoreException, IOException", "diff": ["-\t\ttagAsGlobalSummary(\"Compile>Build>Full>Wksp>Default warnings\", true); // put in global fingerprint", "+\t\ttagAsSummary(\"Build entire workspace\", true); // put in fingerprint"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cacfd120ce51153a50f1941c82e9768e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\r", "-\tpublic static SearchPattern createPattern(IJavaElement element, int limitTo) {\r", "-\t\tSearchPattern searchPattern = null;\r", "-\t\tint lastDot;\r", "-\t\tswitch (element.getElementType()) {\r", "-\t\t\tcase IJavaElement.FIELD :\r", "-\t\t\t\tIField field = (IField) element;\r", "-\t\t\t\tString fullDeclaringName =\r", "-\t\t\t\t\tfield.getDeclaringType().getFullyQualifiedName().replace('$', '.');\r", "-\t\t\t\t;\r", "-\t\t\t\tlastDot = fullDeclaringName.lastIndexOf('.');\r", "-\t\t\t\tchar[] declaringSimpleName =\r", "-\t\t\t\t\t(lastDot != -1 ? fullDeclaringName.substring(lastDot + 1) : fullDeclaringName)\r", "-\t\t\t\t\t\t.toCharArray();\r", "-\t\t\t\tchar[] declaringQualification =\r", "-\t\t\t\t\tlastDot != -1 ? fullDeclaringName.substring(0, lastDot).toCharArray() : null;\r", "-\t\t\t\tchar[] name = field.getElementName().toCharArray();\r", "-\t\t\t\tchar[] typeSimpleName;\r", "-\t\t\t\tchar[] typeQualification;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tString typeSignature =\r", "-\t\t\t\t\t\tSignature.toString(field.getTypeSignature()).replace('$', '.');\r", "-\t\t\t\t\tlastDot = typeSignature.lastIndexOf('.');\r", "-\t\t\t\t\ttypeSimpleName =\r", "-\t\t\t\t\t\t(lastDot != -1 ? typeSignature.substring(lastDot + 1) : typeSignature)\r", "-\t\t\t\t\t\t\t.toCharArray();\r", "-\t\t\t\t\ttypeQualification =\r", "-\t\t\t\t\t\tlastDot != -1 ? typeSignature.substring(0, lastDot).toCharArray() : null;\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\treturn null;\r", "-\t\t\t\t}\r", "-\t\t\t\tswitch (limitTo) {\r", "-\t\t\t\t\tcase IJavaSearchConstants.DECLARATIONS :\r", "-\t\t\t\t\t\tsearchPattern =\r", "-\t\t\t\t\t\t\tnew FieldDeclarationPattern(\r", "-\t\t\t\t\t\t\t\tname,\r", "-\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\ttypeQualification,\r", "-\t\t\t\t\t\t\t\ttypeSimpleName);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IJavaSearchConstants.REFERENCES :\r", "-\t\t\t\t\t\tsearchPattern =\r", "-\t\t\t\t\t\t\tnew FieldReferencePattern(\r", "-\t\t\t\t\t\t\t\tname,\r", "-\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\ttypeQualification,\r", "-\t\t\t\t\t\t\t\ttypeSimpleName);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IJavaSearchConstants.ALL_OCCURRENCES :\r", "-\t\t\t\t\t\tsearchPattern =\r", "-\t\t\t\t\t\t\tnew OrPattern(\r", "-\t\t\t\t\t\t\t\tnew FieldDeclarationPattern(\r", "-\t\t\t\t\t\t\t\t\tname,\r", "-\t\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\t\ttypeQualification,\r", "-\t\t\t\t\t\t\t\t\ttypeSimpleName),\r", "-\t\t\t\t\t\t\t\tnew FieldReferencePattern(\r", "-\t\t\t\t\t\t\t\t\tname,\r", "-\t\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\t\ttypeQualification,\r", "-\t\t\t\t\t\t\t\t\ttypeSimpleName));\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IJavaElement.IMPORT_DECLARATION :\r", "-\t\t\t\tString elementName = element.getElementName();\r", "-\t\t\t\tIImportDeclaration importDecl = (IImportDeclaration) element;\r", "-\t\t\t\tif (importDecl.isOnDemand()) {\r", "-\t\t\t\t\tlastDot = elementName.lastIndexOf('.');\r", "-\t\t\t\t\tif (lastDot == -1)\r", "-\t\t\t\t\t\treturn null; // invalid import declaration\r", "-\t\t\t\t\tsearchPattern =\r", "-\t\t\t\t\t\tcreatePackagePattern(\r", "-\t\t\t\t\t\t\telementName.substring(0, lastDot),\r", "-\t\t\t\t\t\t\tlimitTo,\r", "-\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\tCASE_SENSITIVE);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tsearchPattern = createTypePattern(elementName, limitTo);\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IJavaElement.METHOD :\r", "-\t\t\t\tIMethod method = (IMethod) element;\r", "-\t\t\t\tboolean isConstructor;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tisConstructor = method.isConstructor();\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\treturn null;\r", "-\t\t\t\t}\r", "-\t\t\t\tfullDeclaringName =\r", "-\t\t\t\t\tmethod.getDeclaringType().getFullyQualifiedName().replace('$', '.');\r", "-\t\t\t\tlastDot = fullDeclaringName.lastIndexOf('.');\r", "-\t\t\t\tdeclaringSimpleName =\r", "-\t\t\t\t\t(lastDot != -1 ? fullDeclaringName.substring(lastDot + 1) : fullDeclaringName)\r", "-\t\t\t\t\t\t.toCharArray();\r", "-\t\t\t\tdeclaringQualification =\r", "-\t\t\t\t\tlastDot != -1 ? fullDeclaringName.substring(0, lastDot).toCharArray() : null;\r", "-\t\t\t\tchar[] selector = method.getElementName().toCharArray();\r", "-\t\t\t\tchar[] returnSimpleName;\r", "-\t\t\t\tchar[] returnQualification;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tString returnType =\r", "-\t\t\t\t\t\tSignature.toString(method.getReturnType()).replace('$', '.');\r", "-\t\t\t\t\tlastDot = returnType.lastIndexOf('.');\r", "-\t\t\t\t\treturnSimpleName =\r", "-\t\t\t\t\t\t(lastDot != -1 ? returnType.substring(lastDot + 1) : returnType).toCharArray();\r", "-\t\t\t\t\treturnQualification =\r", "-\t\t\t\t\t\tlastDot != -1 ? returnType.substring(0, lastDot).toCharArray() : null;\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\treturn null;\r", "-\t\t\t\t}\r", "-\t\t\t\tString[] parameterTypes = method.getParameterTypes();\r", "-\t\t\t\tint paramCount = parameterTypes.length;\r", "-\t\t\t\tchar[][] parameterSimpleNames = new char[paramCount][];\r", "-\t\t\t\tchar[][] parameterQualifications = new char[paramCount][];\r", "-\t\t\t\tfor (int i = 0; i < paramCount; i++) {\r", "-\t\t\t\t\tString signature = Signature.toString(parameterTypes[i]).replace('$', '.');\r", "-\t\t\t\t\tlastDot = signature.lastIndexOf('.');\r", "-\t\t\t\t\tparameterSimpleNames[i] =\r", "-\t\t\t\t\t\t(lastDot != -1 ? signature.substring(lastDot + 1) : signature).toCharArray();\r", "-\t\t\t\t\tparameterQualifications[i] =\r", "-\t\t\t\t\t\tlastDot != -1 ? signature.substring(0, lastDot).toCharArray() : null;\r", "-\t\t\t\t}\r", "-\t\t\t\tswitch (limitTo) {\r", "-\t\t\t\t\tcase IJavaSearchConstants.DECLARATIONS :\r", "-\t\t\t\t\t\tif (isConstructor) {\r", "-\t\t\t\t\t\t\tsearchPattern =\r", "-\t\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(\r", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\t\tparameterQualifications,\r", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tsearchPattern =\r", "-\t\t\t\t\t\t\t\tnew MethodDeclarationPattern(\r", "-\t\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\t\treturnQualification,\r", "-\t\t\t\t\t\t\t\t\treturnSimpleName,\r", "-\t\t\t\t\t\t\t\t\tparameterQualifications,\r", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IJavaSearchConstants.REFERENCES :\r", "-\t\t\t\t\t\tif (isConstructor) {\r", "-\t\t\t\t\t\t\tsearchPattern =\r", "-\t\t\t\t\t\t\t\tnew ConstructorReferencePattern(\r", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\t\tparameterQualifications,\r", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tsearchPattern =\r", "-\t\t\t\t\t\t\t\tnew MethodReferencePattern(\r", "-\t\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\t\treturnQualification,\r", "-\t\t\t\t\t\t\t\t\treturnSimpleName,\r", "-\t\t\t\t\t\t\t\t\tparameterQualifications,\r", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IJavaSearchConstants.ALL_OCCURRENCES :\r", "-\t\t\t\t\t\tif (isConstructor) {\r", "-\t\t\t\t\t\t\tsearchPattern =\r", "-\t\t\t\t\t\t\t\tnew OrPattern(\r", "-\t\t\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(\r", "-\t\t\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\t\t\tparameterQualifications,\r", "-\t\t\t\t\t\t\t\t\t\tparameterSimpleNames),\r", "-\t\t\t\t\t\t\t\t\tnew ConstructorReferencePattern(\r", "-\t\t\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\t\t\tparameterQualifications,\r", "-\t\t\t\t\t\t\t\t\t\tparameterSimpleNames));\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tsearchPattern =\r", "-\t\t\t\t\t\t\t\tnew OrPattern(\r", "-\t\t\t\t\t\t\t\t\tnew MethodDeclarationPattern(\r", "-\t\t\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\t\t\treturnQualification,\r", "-\t\t\t\t\t\t\t\t\t\treturnSimpleName,\r", "-\t\t\t\t\t\t\t\t\t\tparameterQualifications,\r", "-\t\t\t\t\t\t\t\t\t\tparameterSimpleNames),\r", "-\t\t\t\t\t\t\t\t\tnew MethodReferencePattern(\r", "-\t\t\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\t\t\t\t\tCASE_SENSITIVE,\r", "-\t\t\t\t\t\t\t\t\t\tdeclaringQualification,\r", "-\t\t\t\t\t\t\t\t\t\tdeclaringSimpleName,\r", "-\t\t\t\t\t\t\t\t\t\treturnQualification,\r", "-\t\t\t\t\t\t\t\t\t\treturnSimpleName,\r", "-\t\t\t\t\t\t\t\t\t\tparameterQualifications,\r", "-\t\t\t\t\t\t\t\t\t\tparameterSimpleNames));\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IJavaElement.TYPE :\r", "-\t\t\t\tIType type = (IType) element;\r", "-\t\t\t\tsearchPattern = createTypePattern(type.getFullyQualifiedName(), limitTo);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IJavaElement.PACKAGE_DECLARATION :\r", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT :\r", "-\t\t\t\tsearchPattern =\r", "-\t\t\t\t\tcreatePackagePattern(\r", "-\t\t\t\t\t\telement.getElementName(),\r", "-\t\t\t\t\t\tlimitTo,\r", "-\t\t\t\t\t\tEXACT_MATCH,\r", "-\t\t\t\t\t\tCASE_SENSITIVE);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t\treturn searchPattern;\r", "-\t}\r", "+}\r", "+public static SearchPattern createPattern(IJavaElement element, int limitTo) {\r", "+\tSearchPattern searchPattern = null;\r", "+\tint lastDot;\r", "+\tswitch (element.getElementType()) {\r", "+\t\tcase IJavaElement.FIELD :\r", "+\t\t\tIField field = (IField) element; \r", "+\t\t\tString fullDeclaringName = field.getDeclaringType().getFullyQualifiedName().replace('$', '.');;\r", "+\t\t\tlastDot = fullDeclaringName.lastIndexOf('.');\r", "+\t\t\tchar[] declaringSimpleName = (lastDot != -1 ? fullDeclaringName.substring(lastDot + 1) : fullDeclaringName).toCharArray();\r", "+\t\t\tchar[] declaringQualification = lastDot != -1 ? fullDeclaringName.substring(0, lastDot).toCharArray() : NO_CHAR;\r", "+\t\t\tchar[] name = field.getElementName().toCharArray();\r", "+\t\t\tchar[] typeSimpleName;\r", "+\t\t\tchar[] typeQualification;\r", "+\t\t\ttry {\r", "+\t\t\t\tString typeSignature = Signature.toString(field.getTypeSignature()).replace('$', '.');\r", "+\t\t\t\tlastDot = typeSignature.lastIndexOf('.');\r", "+\t\t\t\ttypeSimpleName = (lastDot != -1 ? typeSignature.substring(lastDot + 1) : typeSignature).toCharArray();\r", "+\t\t\t\ttypeQualification = lastDot != -1 ? typeSignature.substring(0, lastDot).toCharArray() : null;\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r", "+\t\t\tswitch (limitTo) {\r", "+\t\t\t\tcase IJavaSearchConstants.DECLARATIONS :\r", "+\t\t\t\t\tsearchPattern = new FieldDeclarationPattern(name, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, typeQualification, typeSimpleName);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaSearchConstants.REFERENCES :\r", "+\t\t\t\t\tsearchPattern = new FieldReferencePattern(name, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, typeQualification, typeSimpleName);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaSearchConstants.ALL_OCCURRENCES :\r", "+\t\t\t\t\tsearchPattern = new OrPattern(\r", "+\t\t\t\t\t\tnew FieldDeclarationPattern(name, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, typeQualification, typeSimpleName), \r", "+\t\t\t\t\t\tnew FieldReferencePattern(name, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, typeQualification, typeSimpleName));\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaElement.IMPORT_DECLARATION :\r", "+\t\t\tString elementName = element.getElementName();\r", "+\t\t\tIImportDeclaration importDecl = (IImportDeclaration)element;\r", "+\t\t\tif (importDecl.isOnDemand()) {\r", "+\t\t\t\tlastDot = elementName.lastIndexOf('.');\r", "+\t\t\t\tif (lastDot == -1) return null; // invalid import declaration\r", "+\t\t\t\tsearchPattern = createPackagePattern(elementName.substring(0, lastDot), limitTo, EXACT_MATCH, CASE_SENSITIVE);\r", "+\t\t\t} else {\r", "+\t\t\t\tsearchPattern = createTypePattern(elementName, limitTo);\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaElement.METHOD :\r", "+\t\t\tIMethod method = (IMethod) element;\r", "+\t\t\tboolean isConstructor;\r", "+\t\t\ttry {\r", "+\t\t\t\tisConstructor = method.isConstructor();\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r", "+\t\t\tfullDeclaringName = method.getDeclaringType().getFullyQualifiedName().replace('$', '.');\r", "+\t\t\tlastDot = fullDeclaringName.lastIndexOf('.');\r", "+\t\t\tdeclaringSimpleName = (lastDot != -1 ? fullDeclaringName.substring(lastDot + 1) : fullDeclaringName).toCharArray();\r", "+\t\t\tdeclaringQualification = lastDot != -1 ? fullDeclaringName.substring(0, lastDot).toCharArray() : NO_CHAR;\r", "+\t\t\tchar[] selector = method.getElementName().toCharArray();\r", "+\t\t\tchar[] returnSimpleName;\r", "+\t\t\tchar[] returnQualification;\r", "+\t\t\ttry {\r", "+\t\t\t\tString returnType = Signature.toString(method.getReturnType()).replace('$', '.');\r", "+\t\t\t\tlastDot = returnType.lastIndexOf('.');\r", "+\t\t\t\treturnSimpleName = (lastDot != -1 ? returnType.substring(lastDot + 1) : returnType).toCharArray();\r", "+\t\t\t\treturnQualification = lastDot != -1 ? returnType.substring(0, lastDot).toCharArray() : null;\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r", "+\t\t\tString[] parameterTypes = method.getParameterTypes();\r", "+\t\t\tint paramCount = parameterTypes.length;\r", "+\t\t\tchar[][] parameterSimpleNames = new char[paramCount][];\r", "+\t\t\tchar[][] parameterQualifications = new char[paramCount][];\r", "+\t\t\tfor (int i = 0; i < paramCount; i++) {\r", "+\t\t\t\tString signature = Signature.toString(parameterTypes[i]).replace('$', '.');\r", "+\t\t\t\tlastDot = signature.lastIndexOf('.');\r", "+\t\t\t\tparameterSimpleNames[i] = (lastDot != -1 ? signature.substring(lastDot + 1) : signature).toCharArray();\r", "+\t\t\t\tparameterQualifications[i] = lastDot != -1 ? signature.substring(0, lastDot).toCharArray() : null;\r", "+\t\t\t}\r", "+\t\t\tswitch (limitTo) {\r", "+\t\t\t\tcase IJavaSearchConstants.DECLARATIONS :\r", "+\t\t\t\t\tif (isConstructor) {\r", "+\t\t\t\t\t\tsearchPattern = new ConstructorDeclarationPattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tsearchPattern = new MethodDeclarationPattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaSearchConstants.REFERENCES :\r", "+\t\t\t\t\tif (isConstructor) {\r", "+\t\t\t\t\t\tsearchPattern = new ConstructorReferencePattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tsearchPattern = new MethodReferencePattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaSearchConstants.ALL_OCCURRENCES :\r", "+\t\t\t\t\tif (isConstructor) {\r", "+\t\t\t\t\t\tsearchPattern = new OrPattern(\r", "+\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames), \r", "+\t\t\t\t\t\t\tnew ConstructorReferencePattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames));\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tsearchPattern = new OrPattern(\r", "+\t\t\t\t\t\t\tnew MethodDeclarationPattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames), \r", "+\t\t\t\t\t\t\tnew MethodReferencePattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames));\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaElement.TYPE :\r", "+\t\t\tIType type = (IType) element;\r", "+\t\t\tsearchPattern = createTypePattern(type.getFullyQualifiedName(), limitTo);\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaElement.PACKAGE_DECLARATION :\r", "+\t\tcase IJavaElement.PACKAGE_FRAGMENT :\r", "+\t\t\tsearchPattern = createPackagePattern(element.getElementName(), limitTo, EXACT_MATCH, CASE_SENSITIVE);\r", "+\t\t\tbreak;\r", "+\t}\r", "+\treturn searchPattern;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db4f102eed1cfa2b3e2ca7fa042403b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedName.java", "commitBeforeChange": "494e78bb8364c209fa511754b111c2b185e9ee25", "commitAfterChange": "1d477fac76d8effa14a0f4b1355dac460e1b68fe", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tint memSize()", "signatureAfterChange": " \tint memSize()", "diff": ["-\t\treturn BASE_NODE_SIZE + 3 * 4;", "+\t\treturn BASE_NAME_NODE_SIZE + 2 * 4;"]}], "num": 5510}
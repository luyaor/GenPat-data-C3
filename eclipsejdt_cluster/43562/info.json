{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7869b807c23bf14ee9baf70b41019ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "859d220bd50f47518ed8599416d09ab8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 156, "signatureBeforeChange": "  \tprivate void setTypeForVariableDeclarationStatement(VariableDeclarationStatement variableDeclarationStatement, Type type, int extraDimension)", "signatureAfterChange": "  \tprotected void setTypeForVariableDeclarationStatement(VariableDeclarationStatement variableDeclarationStatement, Type type, int extraDimension)", "diff": ["-", "-\tprivate void setTypeForVariableDeclarationStatement(VariableDeclarationStatement variableDeclarationStatement, Type type, int extraDimension) {", "-\t\tif (extraDimension != 0) {", "-\t\t\tif (type.isArrayType()) {", "-\t\t\t\tArrayType arrayType = (ArrayType) type;", "-\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "-\t\t\t\tif (remainingDimensions == 0)  {", "-\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "-\t\t\t\t\tType elementType = arrayType.getElementType();", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\telementType.setParent(null, null);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "-\t\t\t\t\tvariableDeclarationStatement.setType(elementType);", "-\t\t\t\t} else {", "-\t\t\t\t\tint start = type.getStartPosition();", "-\t\t\t\t\tint length = type.getLength();", "-\t\t\t\t\tArrayType subarrayType = arrayType;", "-\t\t\t\t\tint index = extraDimension;", "-\t\t\t\t\twhile (index > 0) {", "-\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "-\t\t\t\t\t\tindex--;", "-\t\t\t\t\t}", "-\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "-\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\tsubarrayType.setParent(null, null);", "-\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "-\t\t\t\t\tvariableDeclarationStatement.setType(subarrayType);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tvariableDeclarationStatement.setType(type);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tvariableDeclarationStatement.setType(type);", "-\t\t}", "-\t}", "+", "+\tprotected void setTypeForVariableDeclarationStatement(VariableDeclarationStatement variableDeclarationStatement, Type type, int extraDimension) {", "+\t\tif (extraDimension != 0) {", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "+\t\t\t\tif (remainingDimensions == 0)  {", "+\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "+\t\t\t\t\tType elementType = arrayType.getElementType();", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\telementType.setParent(null, null);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "+\t\t\t\t\tvariableDeclarationStatement.setType(elementType);", "+\t\t\t\t} else {", "+\t\t\t\t\tint start = type.getStartPosition();", "+\t\t\t\t\tint length = type.getLength();", "+\t\t\t\t\tArrayType subarrayType = arrayType;", "+\t\t\t\t\tint index = extraDimension;", "+\t\t\t\t\twhile (index > 0) {", "+\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "+\t\t\t\t\t\tindex--;", "+\t\t\t\t\t}", "+\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "+\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\tsubarrayType.setParent(null, null);", "+\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "+\t\t\t\t\tvariableDeclarationStatement.setType(subarrayType);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tvariableDeclarationStatement.setType(type);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tvariableDeclarationStatement.setType(type);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6892965c72131374bf15f4c93d8e181", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tprivate void removeTrailingCommentFromExpressionEndingWithAParen(ASTNode node)", "signatureAfterChange": " \tprotected void removeTrailingCommentFromExpressionEndingWithAParen(ASTNode node)", "diff": ["-\t */", "-\tprivate void removeTrailingCommentFromExpressionEndingWithAParen(ASTNode node) {", "-\t\tint start = node.getStartPosition();", "-\t\tthis.scanner.resetTo(start, start + node.getLength());", "-\t\tint token;", "-\t\tint parenCounter = 0;", "-\t\ttry {", "-\t\t\twhile((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)  {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "-\t\t\t\t\t\tparenCounter++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "-\t\t\t\t\t\tparenCounter--;", "-\t\t\t\t\t\tif (parenCounter == 0) {", "-\t\t\t\t\t\t\tint end = this.scanner.currentPosition - 1;", "-\t\t\t\t\t\t\tnode.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}", "+\t */", "+\tprotected void removeTrailingCommentFromExpressionEndingWithAParen(ASTNode node) {", "+\t\tint start = node.getStartPosition();", "+\t\tthis.scanner.resetTo(start, start + node.getLength());", "+\t\tint token;", "+\t\tint parenCounter = 0;", "+\t\ttry {", "+\t\t\twhile((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)  {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "+\t\t\t\t\t\tparenCounter++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "+\t\t\t\t\t\tparenCounter--;", "+\t\t\t\t\t\tif (parenCounter == 0) {", "+\t\t\t\t\t\t\tint end = this.scanner.currentPosition - 1;", "+\t\t\t\t\t\t\tnode.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc76313ef54094e62271896f26cd4b21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 109, "signatureBeforeChange": " \t \tprivate void recordName(Name name, org.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode)", "signatureAfterChange": "  \tprotected void recordName(Name name, org.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode)", "diff": ["+\tprotected void recordName(Name name, org.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode) {", "+\t\tif (compilerNode != null) {", "+\t\t\trecordNodes(name, compilerNode);", "+\t\t\tif (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode;", "+\t\t\t\tif (name.isQualifiedName()) {", "+\t\t\t\t\tint count = 0;", "+\t\t\t\t\tSimpleName simpleName = null;", "+\t\t\t\t\twhile (name.isQualifiedName()) {", "+\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "+\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "+\t\t\t\t\t\tsimpleName.index = count++;", "+\t\t\t\t\t\tname = ((QualifiedName) name).getQualifier();", "+\t\t\t\t\t\tname.index = count;", "+\t\t\t\t\t\trecordNodes(name, typeRef);", "-\tprivate void recordName(Name name, org.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode) {", "-\t\tif (compilerNode != null) {", "-\t\t\trecordNodes(name, compilerNode);", "-\t\t\tif (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode;", "-\t\t\t\tif (name.isQualifiedName()) {", "-\t\t\t\t\tint count = 0;", "-\t\t\t\t\tSimpleName simpleName = null;", "-\t\t\t\t\twhile (name.isQualifiedName()) {", "-\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "-\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "-\t\t\t\t\t\tsimpleName.index = count++;", "-\t\t\t\t\t\tname = ((QualifiedName) name).getQualifier();", "-\t\t\t\t\t\tname.index = count;", "-\t\t\t\t\t\trecordNodes(name, typeRef);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t}"]}], "num": 43562}
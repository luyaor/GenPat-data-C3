{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0173979cc202e1ec530f57d7523a9e2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14723490f16655accfd9b03e885cdc9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "241d64f631bbf77014d4fbfc8f74f781b65e5c36", "commitAfterChange": "42e53b3c82f631cac5341438af4d88461f281652", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tprotected CompilationUnit verifyComments(String fileName, char[] source, Map options)", "signatureAfterChange": "  \tprotected CompilationUnit verifyComments(String fileName, char[] source, Map options)", "diff": ["-\t\t// Get comments infos from test file", "-\t\tsetSourceComment(source);", "-\t\t", "+", "+\t\t// Verify comments either in unicode or not", "+\t\telse if (unix) {", "+\t\t\ttestedSource = getUnixSource(source);", "+\t\t}", "+\t\t", "+\t\t// Get comments infos from test file", "+\t\tsetSourceComment(testedSource);", "+", "+\t\t// Create DOM AST nodes hierarchy\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e420c9b088b3fcc4e9d89251bd96c13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "d6d09dea522392b75a09fab15337bbc09b94d77c", "commitAfterChange": "92a1bed0a525f065b3afa8ca4370b68c7dfc54cc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeDeclaration convert( \t\tISourceType sourceType, \t\tboolean needFieldsAndMethods, \t\tboolean needMemberTypes, \t\tCompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert( \t\tISourceType sourceType, \t\tboolean needFieldsAndMethods, \t\tboolean needMemberTypes, \t\tCompilationResult compilationResult)", "diff": ["-\t\t\tint neededCount = 1;", "-\t\t\tfor (int i = 0; i < sourceMethodCount; i++) {", "-\t\t\t\tif (sourceMethods[i].isConstructor()) {", "-\t\t\t\t\tneededCount = 0;", "-\t\t\t\t\t// Does not need the extra constructor since one constructor already exists.", "-\t\t\t\t\tbreak;", "+\t\t\tint neededCount = 0;", "+\t\t\tif (!type.isInterface()) {", "+\t\t\t\tneededCount = 1;", "+\t\t\t\tfor (int i = 0; i < sourceMethodCount; i++) {", "+\t\t\t\t\tif (sourceMethods[i].isConstructor()) {", "+\t\t\t\t\t\tneededCount = 0;", "+\t\t\t\t\t\t// Does not need the extra constructor since one constructor already exists.", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d02468bcb8e98cb096ff4b20b507097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "8cb3365a924e5869d5c8a5715a80d4cd8189b243", "commitAfterChange": "4ec04ec7ec987de2e86c2ac8cdacbf6a8acd72a4", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate static FakedTrackingVariable analyseCloseableExpression(FlowInfo flowInfo, FlowContext flowContext, LocalVariableBinding local,  \t\t\t\t\t\t\t\t\tASTNode location, Expression expression, FakedTrackingVariable previousTracker)", "signatureAfterChange": " \tprivate static FakedTrackingVariable analyseCloseableExpression(FlowInfo flowInfo, FlowContext flowContext, LocalVariableBinding local,  \t\t\t\t\t\t\t\t\tASTNode location, Expression expression, FakedTrackingVariable previousTracker)", "diff": ["+\t\tboolean isResourceProducer = false;", "+\t\tif (expression.resolvedType instanceof ReferenceBinding) {", "+\t\t\tReferenceBinding resourceType = (ReferenceBinding) expression.resolvedType;", "+\t\t\tif (resourceType.hasTypeBit(TypeIds.BitResourceFreeCloseable)) {", "+\t\t\t\tif (isBlacklistedMethod(expression))", "+\t\t\t\t\tisResourceProducer = true;", "+\t\t\t\telse", "+\t\t\t\t\treturn null; // (a) resource-free closeable: -> null", "+\t\t\t}", "+\t\t}", "+", "-\t\t\ttracker.globalClosingState |= SHARED_WITH_OUTSIDE;", "+\t\t\tif (!isResourceProducer)", "+\t\t\t\ttracker.globalClosingState |= SHARED_WITH_OUTSIDE;", "-\t\tif (expression.resolvedType instanceof ReferenceBinding) {", "-\t\t\tReferenceBinding resourceType = (ReferenceBinding) expression.resolvedType;", "-\t\t\tif (resourceType.hasTypeBit(TypeIds.BitResourceFreeCloseable)) {", "-\t\t\t\t// (a) resource-free closeable: -> null", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc27d4bf9679572005d70ee13b27faa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "324a534b3baa7412f36ded559b05fd1012caae2a", "commitAfterChange": "6189612c7867cb146b37cc778fa8ccb247e44019", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate boolean collectElements()", "signatureAfterChange": " \tprivate boolean collectElements()", "diff": ["+\t\t\treturn false;", "+\t\t}", "+\t\tif (_elementIA.getNestingKind() != NestingKind.TOP_LEVEL) {", "+\t\t\treportError(\"NestingKind of element IA is not TOP_LEVEL\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f89fd17b623823a8d1467533e87da4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "c103de7652c81626d78eadd07a0763ab5a5a3287", "commitAfterChange": "de65819236a978eabe6f11a104e36a24db789ea9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["-\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\tif (mode == DETAILED) {", "+\t\tboolean decoded = false;", "+\t\t\t\t\t\tdecoded = true;", "-\t\t} else {", "+\t\t}", "+\t\tif (!decoded) {", "-\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, 0);", "-\t\t\t}", "-\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, 0);", "-\t\t\t}", "-\t\t\tif (length != 0) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tIClassFileAttribute attribute = attributes[i];", "-\t\t\t\t\tif (attribute != innerClassesAttribute", "-\t\t\t\t\t\t&& attribute != sourceAttribute", "-\t\t\t\t\t\t&& attribute != signatureAttribute", "-\t\t\t\t\t\t&& attribute != enclosingMethodAttribute", "-\t\t\t\t\t\t&& attribute != runtimeInvisibleAnnotationsAttribute", "-\t\t\t\t\t\t&& attribute != runtimeVisibleAnnotationsAttribute", "-\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "-\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {", "-\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, 0);", "+\t\t\tif (mode == SYSTEM) {", "+\t\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "+\t\t\t\t\tdisassemble((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, 0);", "+\t\t\t\t}", "+\t\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "+\t\t\t\t\tdisassemble((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, 0);", "+\t\t\t\t}", "+\t\t\t\tif (length != 0) {", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tIClassFileAttribute attribute = attributes[i];", "+\t\t\t\t\t\tif (attribute != innerClassesAttribute", "+\t\t\t\t\t\t\t&& attribute != sourceAttribute", "+\t\t\t\t\t\t\t&& attribute != signatureAttribute", "+\t\t\t\t\t\t\t&& attribute != enclosingMethodAttribute", "+\t\t\t\t\t\t\t&& attribute != runtimeInvisibleAnnotationsAttribute", "+\t\t\t\t\t\t\t&& attribute != runtimeVisibleAnnotationsAttribute", "+\t\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "+\t\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {", "+\t\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, 0);", "+\t\t\t\t\t\t}", "-\t\t\t}\t\t", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4635302af8d66208e80776690563975c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\t\t\tif (expressionType.isBaseType()) {", "+\t\t\t\t\tif (!expressionType.isValidBinding()) {", "+\t\t\t\t\t\texpressionType = null; // fault-tolerance: ignore type mismatch from constants from hereon", "+\t\t\t\t\t\tbreak checkType;", "+\t\t\t\t\t} else if (expressionType.isBaseType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a3d1d734ee4f3af6ecbab5a9de7d808", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9c6dae4d5407c167984e6ec84bc3e6250ddb6db9", "commitAfterChange": "bbf0b49c8f498bed7713f00ad060db01c62aa51c", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " public void recoveryTokenCheck()", "signatureAfterChange": " public void recoveryTokenCheck()", "diff": ["-\t\t\tRecoveredElement newElement = ", "-\t\t\t\tcurrentElement.updateOnOpeningBrace(scanner.currentPosition - 1);", "+\t\t\tRecoveredElement newElement = null;", "+\t\t\tif(!ignoreNextOpeningBrace) {", "+\t\t\t\tnewElement = currentElement.updateOnOpeningBrace(scanner.currentPosition - 1);", "+\t\t\t}", "+\tignoreNextOpeningBrace = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "567ea0cb4c855268988cc083372f43da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, even in a 1.4 project, we", "-\t\t   must internalize type variables and observe any parameterization of super class", "-\t\t   and/or super interfaces in order to be able to detect overriding in the presence", "-\t\t   of generics.", "-\t\t */", "-\t\tchar[] typeSignature = binaryType.getGenericSignature(); // use generic signature even in 1.4", "-\t\tthis.tagBits |= binaryType.getTagBits();", "-\t\t", "+\t\tchar[] typeSignature = null;", "+\t\tif (sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\ttypeSignature = binaryType.getGenericSignature();", "+\t\t\tthis.tagBits |= binaryType.getTagBits();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c91737d0ab2ed8c0acee945ca513466", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "8ccc356ea70c89dd0a418b24439637ae7cd87c8c", "commitAfterChange": "c048fce959a3a4ebd7c0630c7412f50074f43462", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "signatureAfterChange": " \tpublic FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "diff": ["+\t\tboolean isReachable = flowInfo.isReachable();", "-\t\t\t\t\tif (flowInfo.isReachable()) {", "+\t\t\t\t\tif (isReachable) {", "-\t\t\t\t\t\tif (isCompound || !localBinding.isBlankFinal()){", "+\t\t\t\t\t\t// tolerate assignment to final local in unreachable code (45674)", "+\t\t\t\t\t\tif ((isReachable && isCompound) || !localBinding.isBlankFinal()){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fc4de4f35ec9ac4d1313699b6192ae6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "13339b25c29cc4b9ea6b7ce4a71651aba59c8369", "commitAfterChange": "07dd8ecd589d6b51658c610216662216898a885f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\t", "-\t\t\tif (isPrimary || (root.isOnClasspath() && resource.isAccessible() && Util.isValidCompilationUnitName(workingCopy.getElementName()))) {", "+\t\t\tboolean isIncluded = !Util.isExcluded(workingCopy);", "+\t\t\tif (isPrimary || (root.isOnClasspath() && isIncluded && resource.isAccessible() && Util.isValidCompilationUnitName(workingCopy.getElementName()))) {", "-\t\t\t\tif (!Util.isExcluded(workingCopy) && (!isPrimary || !workingCopy.isConsistent())) {", "+\t\t\t\tif (isIncluded && (!isPrimary || !workingCopy.isConsistent())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60896dc6b1b233240b163a897f9e7cc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "7f51e750d684686314cf957cd0a463e4558546e5", "commitAfterChange": "f65225afa9896daa624936de0f87dc55afc93a95", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " protected void consumeInsideCastExpression()", "signatureAfterChange": " protected void consumeInsideCastExpression()", "diff": ["-\tif(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_PARAMETERIZED_CAST) {", "+\tboolean isParameterized =(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_PARAMETERIZED_CAST);", "+\tif(isParameterized) {", "+\tif(isParameterized) {", "+\t\tintPtr--;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63810375adf8caf946bb654f2129de64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "57bd7f827fb4e26e2f4fcfb421451c18e4a1d09f", "commitAfterChange": "6eea20ade3a92e767b892a10ecaadeddc013ba12", "methodNumberBeforeChange": 526, "methodNumberAfterChange": 526, "signatureBeforeChange": " public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType)", "signatureAfterChange": " public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType)", "diff": ["-\tif (requiredType.isTypeVariable() && !requiredType.hasNullTypeAnnotations())", "+\tboolean below18 = this.options.sourceLevel < ClassFileConstants.JDK1_8;", "+\tif (!below18 && requiredType.isTypeVariable() && !requiredType.hasNullTypeAnnotations())", "-\tif (this.options.sourceLevel < ClassFileConstants.JDK1_8) {", "+\tif (below18) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b70c79408aa5f34ef97c1ce972ab7ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "94834929c4a0c0b77e8b90f18eeb6517873b69ab", "commitAfterChange": "8622e99cc18e0c0ae6c600de97be8d909f3d7ad6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static Test buildUniqueComplianceTestSuite(Class evaluationTestClass, long uniqueCompliance)", "signatureAfterChange": " \tpublic static Test buildUniqueComplianceTestSuite(Class evaluationTestClass, long uniqueCompliance)", "diff": ["-\t\t\tif (highestLevel == ClassFileConstants.JDK1_7)", "+\t\t\tif (highestLevel == ClassFileConstants.JDK1_8)", "+\t\t\t\tcomplianceString = \"1.8\";", "+\t\t\telse if (highestLevel == ClassFileConstants.JDK1_7)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "710bf076ecba30c38297c6d7b9845888", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": "  void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "diff": ["-\tif (this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "-\t\t// FIXME(stephan): the following code could be used as a stop-gap measure to hook type annotation tagBits into our existing analysis:", "-//\t\tmethodBinding.tagBits |= (methodBinding.returnType.tagBits & TagBits.AnnotationNullMASK);", "-//\t\tTypeBinding[] parameters = methodBinding.parameters;", "-//\t\tint numVisibleParams = parameters.length;", "-//\t\tfor (int j = 0; j < numVisibleParams; j++) {", "-//\t\t\tif ((parameters[j].tagBits & TagBits.AnnotationNonNull) != 0) {", "-//\t\t\t\tif (methodBinding.parameterNonNullness == null)", "-//\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "-//\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;", "-//\t\t\t\tbreak;", "-//\t\t\t} else if ((parameters[j].tagBits & TagBits.AnnotationNullable) != 0) {", "-//\t\t\t\tif (methodBinding.parameterNonNullness == null)", "-//\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "-//\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.FALSE;", "-//\t\t\t\tbreak;", "-//\t\t\t}", "-//\t\t}", "-\t\t// END", "-\t\treturn; // not using method.tagBits and parameterNonNullness when we have type annotations.", "-\t}", "+\tboolean useTypeAnnotations = this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8;", "+\t// in 1.8 we only need @NonNullByDefault, see below and exit further down.", "-\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nonNullAnnotationName)) {", "-\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "-\t\t\t\texplicitNullness = true;", "-\t\t\t}", "-\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nullableAnnotationName)) {", "-\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullable;", "-\t\t\t\texplicitNullness = true;", "+\t\t\tif (!useTypeAnnotations) {", "+\t\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "+\t\t\t\t\texplicitNullness = true;", "+\t\t\t\t}", "+\t\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullable;", "+\t\t\t\t\texplicitNullness = true;", "+\t\t\t\t}", "+\tif (useTypeAnnotations)", "+\t\treturn;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee9eb7c9f6d63759d74ac22585d20c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Converter/junit/runner/BaseTestRunner.java", "commitBeforeChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "commitAfterChange": "4b4449dde49cdcaed9ae00d1ac057ecfeb8d8c23", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic Test getTest(String suiteClassName)", "signatureAfterChange": " \tpublic Test getTest(String suiteClassName)", "diff": ["-\t\t\tif (clazz == null) ", "+\t\t\tif (clazz == null)", "-\t\t\tclearStatus();\t\t\t", "+\t\t\tclearStatus();", "+\t\t}", "+\t\tif (! Modifier.isStatic(suiteMethod.getModifiers())) {", "+\t\t\trunFailed(\"Suite() method must be static\");", "+\t\t\treturn null;", "-\t\t} ", "+\t\t}", "-\t\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96da55988d142f72478ed9e0357f25c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Messages.java", "commitBeforeChange": "3d7c90f7bdc11f391154962d0a30325e04ebe8d2", "commitAfterChange": "5132eb776dbfeab8b4b51cfe2722820e0b8061d3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static void load(final String bundleName, final ClassLoader loader, final Field[] fields)", "signatureAfterChange": " \tpublic static void load(final String bundleName, final ClassLoader loader, final Field[] fields)", "diff": ["-\t\t\tfinal InputStream input = loader.getResourceAsStream(variants[i]);", "+\t\t\tInputStream input = null;", "+\t\t\tif (loader == null) {", "+\t\t\t\tinput = ClassLoader.getSystemResourceAsStream(variants[i]);", "+\t\t\t} else {", "+\t\t\t\tinput = loader.getResourceAsStream(variants[i]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b4fc3e5770e18bd34bed8e69d2e538d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "105e13630a8bb467bc36445e7061e963f615f79b", "commitAfterChange": "c76d746cb37ee26e445adfa9082cf0532abc2efb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["+\t\tboolean createAST = info instanceof ASTHolderCUInfo;", "-\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, perWorkingCopyInfo, false/*don't cleanup cu*/, pm);", "+\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, perWorkingCopyInfo, !createAST/*reset env if not creating AST*/, pm);", "-\t\tif (info instanceof ASTHolderCUInfo) {", "+\t\tif (createAST) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c509cfd8e9da80baeeae592129352cb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "0b99e59f5b8c33dba4fea6bb15ed5a9967aeb172", "commitAfterChange": "f963317eb29ffe4dba07b023619d08ff06cca487", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": "  void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\t\tif (bestAbstractMethod == null) {", "-\t\t\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "-\t\t} else if (mustImplementAbstractMethod(bestAbstractMethod.declaringClass)) {", "+\t\tboolean noMatch = bestAbstractMethod == null;", "+\t\tif (noMatch)", "+\t\t\tbestAbstractMethod = methods[0];", "+\t\tif (mustImplementAbstractMethod(bestAbstractMethod.declaringClass)) {", "+\t\t} else if (noMatch) {", "+\t\t\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca17ea85dced088dfdb8e0be80482572", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "1f46f03f7f5f04f6bc966056a230ee9598644f53", "commitAfterChange": "2e03e339691d753c1881e1aa64060e3db202f70f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["+\t\t\t\tboolean isNestedRoot = rootInfo != null && childRootInfo != null;", "-\t\t\t\t\t\t&& childRootInfo == null) { // do not treat as non-java rsc in rootInfo if nested root (childRootInfo)", "+\t\t\t\t\t\t&& !isNestedRoot) { // do not treat as non-java rsc if nested root"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caf7ce17ddb48b4940d99045896c3377", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "72307c3d05ef8cb972678da8dedb15b48d768f00", "commitAfterChange": "81e701cc3c5e885d4cb570396acbfc9c5a280795", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void generateMethodInfoHeader(MethodBinding methodBinding)", "signatureAfterChange": " \tpublic void generateMethodInfoHeader(MethodBinding methodBinding)", "diff": ["+\t\tif (targetJDK < ClassFileConstants.JDK1_5) {", "+\t\t    // pre 1.5, synthetic was an attribute, not a modifier", "+\t\t    accessFlags &= ~AccSynthetic;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb031c2e6bdfcef76ca5ad48ac7d8cf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ec8697c65ab295bcea2d232a64ce4cee1ee12142", "commitAfterChange": "380f51fb07b01d50fdf783879a49310c31bf8dde", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \t \tpublic boolean isCompatibleWith(TypeBinding targetType, final Scope skope)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding targetType, final Scope skope)", "diff": ["+\t\t// catch up on one check deferred via skipKosherCheck=true (only if pertinent for applicability)", "+\t\tif (!kosherDescriptor(this.enclosingScope, sam, false))", "+\t\t\treturn false;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4699e1f97ca7ac01faa42564f7c7335", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "faccf65c339a14005fa4d1de375a538b2b72d868", "commitAfterChange": "df3cea4fdd0029cef4a2ae74c3fb4d2e089b02e7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean checkNegative1() throws Exception", "signatureAfterChange": " \tpublic boolean checkNegative1() throws Exception", "diff": ["+\t\t// Self-test of XML framework.  Here for now to debug https://bugs.eclipse.org/bugs/show_bug.cgi?id=224424. ", "+\t\tif (!XMLComparer.test()) {", "+\t\t\treportError(\"XML language model comparison framework failed self-test\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7308ebe3c9c55358c095654ac676a66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "364abd1fe47d562f576cb6b54a083094e0671f23", "commitAfterChange": "1b555425db41a9eb4fba300521a43b3ff494a42f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void collectOverriddenMethods(MethodBinding original, char[] selector, int suggestedParameterLength, \t\t\tReferenceBinding superType, Set ifcsSeen, List result)", "signatureAfterChange": " \tprivate void collectOverriddenMethods(MethodBinding original, char[] selector, int suggestedParameterLength, \t\t\tReferenceBinding superType, Set ifcsSeen, List result)", "diff": ["+\t\tboolean added = false;", "-\t\t\t\treturn; // at most one method is overridden from any supertype", "+\t\t\t\tadded = true; // when overriding one or more methods from superType don't traverse to transitive superTypes", "-\t\tfindAllOverriddenMethods(original, selector, suggestedParameterLength, superType, ifcsSeen, result);", "+\t\tif (!added)", "+\t\t\tfindAllOverriddenMethods(original, selector, suggestedParameterLength, superType, ifcsSeen, result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f21c7af88651f535e0cbc75a9a671878", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveResourcesTests.java", "commitBeforeChange": "fda975d98b069f678ae89a663957463bb7bd4088", "commitAfterChange": "2e99c72cc03690dcb30e61cdafeb829a4f1ada2f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public IJavaElement copyPositive(IJavaElement element, IJavaElement container, IJavaElement sibling, String rename, boolean force) throws JavaModelException", "signatureAfterChange": " public IJavaElement copyPositive(IJavaElement element, IJavaElement container, IJavaElement sibling, String rename, boolean force) throws JavaModelException", "diff": ["-\t\tIJavaElementDelta[] deltas = destDelta.getAddedChildren();", "+\t\tIJavaElementDelta[] deltas = null;", "+\t\tif (force) {", "+\t\t\tdeltas = destDelta.getChangedChildren();", "+\t\t}", "+\t\telse {", "+\t\t\tdeltas = destDelta.getAddedChildren();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f735cbeec736ae4a1ea6675bb1d85e4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "261b9dd9862eef77d5355cff08ffe0512fa0194d", "commitAfterChange": "4040bbe9df697f6a39a9c42241655f924e1d83bb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "diff": ["+\t\t\tboolean isValidParent = true;\r", "-\t\t\t\t\t\tif (currentProject != null) { \r", "+\t\t\t\t\t\tif (currentProject != null) {\r", "+\t\t\t\t\t\t\tif (!isValidParent) continue; \r", "-\t\t\t\t\t\t\t\tif (parent == null) continue;\r", "+\t\t\t\t\t\t\t\tif (parent == null) {\r", "+\t\t\t\t\t\t\t\t\tisValidParent = false;\r", "+\t\t\t\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\treturn currentProject != null || oneChildOnClasspath;\r", "+\t\t\treturn isValidParent && (currentProject != null || oneChildOnClasspath);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa7c20b8b0e8e89f4c6cc93769d7ed91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "364f4a6fecddde86cbff58b22f5a3999ee18f64c", "commitAfterChange": "8ef7b3f4f291e2b4ee9eab1dea17e0ab09b34707", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\tboolean didSpecifyWarnings = false;", "-\t\t\t\tdisableWarnings();", "+\t\t\t\tif (!didSpecifyWarnings) {", "+\t\t\t\t\t// clear default warning level", "+\t\t\t\t\t// but allow multiple warning option on the command line", "+\t\t\t\t\tdisableWarnings();", "+\t\t\t\t}", "+\t\t\t\tdidSpecifyWarnings = true;"]}], "num": 51895}
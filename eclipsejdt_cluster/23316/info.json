{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81fc678d81d3f9b430e7ea950502d887", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bccb01d4295b55e97f1737c08acec86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaIndexTests.java", "commitBeforeChange": "8e69d36fa08db2d61d2c40fecd2494cfd19819f5", "commitAfterChange": "3c9fcd486312b0a7ab40ed5ba3b6e46d9bce5dc9", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void _testChangeClasspathForInternalJar() throws CoreException, IOException", "signatureAfterChange": " \tpublic void testChangeClasspathForInternalJar() throws CoreException, IOException", "diff": ["-\tpublic void _testChangeClasspathForInternalJar() throws CoreException, IOException {", "+\tpublic void testChangeClasspathForInternalJar() throws CoreException, IOException {", "+\t\tString fullJarPath = getWorkspacePath() + jarFilePath;", "-\t\t\t\t\t\"}\"}, jarFilePath);", "-\t\t\tJavaIndexer.generateIndexForJar(jarFilePath, indexFilePath);", "+\t\t\t\t\t\"}\"}, fullJarPath);", "+\t\t\tJavaIndexer.generateIndexForJar(fullJarPath, indexFilePath);", "-\t\t\t\t\t\"}\"}, jarFilePath);", "+\t\t\t\t\t\"}\"}, fullJarPath);", "+\t\t\tp.getProject().refreshLocal(1, null);", "-\t\t\tassertSearchResults(\"\\\\P\\\\Test.jar pkg.NewTest\");", "+\t\t\tassertSearchResults(\"Test.jar pkg.NewTest [No source]\");", "-\t\t\tassertSearchResults(\"\\\\P\\\\Test.jar pkg.NewTest\");", "-\t\t\t", "-\t\t\t", "+\t\t\tassertSearchResults(\"Test.jar pkg.NewTest [No source]\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b6aed7cea24e556682105f9408567dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/OptionTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test07() throws CoreException", "signatureAfterChange": " \tpublic void test07() throws CoreException", "diff": ["- */", "-public void test07() throws CoreException {", "-\ttry {", "-\t\tJavaProject projectA = (JavaProject)", "-\t\t\tthis.createJavaProject(", "-\t\t\t\t\"A\", ", "-\t\t\t\tnew String[] {}, // source folders", "-\t\t\t\tnew String[] {}, // lib folders", "-\t\t\t\tnew String[] {}, // projects", "-\t\t\t\t\"\");", "-\t\tPreferences preferences = projectA.getPreferences();", "-\t\tpreferences.addPropertyChangeListener(new TestPropertyListener());", "-\t\tHashtable options = new Hashtable();", "-\t\toptions.put(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE, JavaCore.ENABLED);", "-\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, \"10.0\");", "-\t\tprojectA.setOptions(options);", "-", "-\t\t// check project A custom options\t\t", "-\t\tassertEquals(\"projA:unexpected custom value for deprecation option\", JavaCore.ENABLED, projectA.getOptions(false).get(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE));", "-\t\tassertEquals(\"projA:unexpected custom value for compliance option\", \"10.0\", projectA.getOptions(false).get(JavaCore.COMPILER_COMPLIANCE));", "-\t\tassertEquals(\"projA:unexpected inherited value1 for hidden-catch option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK));", "-\t\tassertTrue(\"projA:preferences should not be reset\", preferences == projectA.getPreferences());", "-\t\tassertTrue(\"projA:preferences property listener has been lost\", eventCount == 2);", "-\t\t// change custom options to have one less", "-\t\toptions.clear();", "-\t\toptions.put(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE, JavaCore.ENABLED);", "-\t\tprojectA.setOptions(options);", "-\t\tassertEquals(\"projA:unexpected custom value for deprecation option\", JavaCore.ENABLED, projectA.getOptions(false).get(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE));", "-\t\tassertEquals(\"projA:unexpected custom value for compliance option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_COMPLIANCE));", "-\t\tassertEquals(\"projA:unexpected inherited value1 for hidden-catch option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK));", "-\t\tassertTrue(\"projA:preferences should not be reset\", preferences == projectA.getPreferences());", "-\t\tassertTrue(\"projA:preferences property listener has been lost\", eventCount == 3);", "-\t} finally {", "-\t\tthis.deleteProject(\"A\");", "-}", "+\t */", "+\tpublic void test07() throws CoreException {", "+\t\ttry {", "+\t\t\tthis.eventCount = 0;", "+\t\t\tJavaProject projectA = (JavaProject)", "+\t\t\t\tthis.createJavaProject(", "+\t\t\t\t\t\"A\", ", "+\t\t\t\t\tnew String[] {}, // source folders", "+\t\t\t\t\tnew String[] {}, // lib folders", "+\t\t\t\t\tnew String[] {}, // projects", "+\t\t\t\t\t\"\");", "+\t//\t\tPreferences preferences = projectA.getPreferences();", "+\t//\t\tpreferences.addPropertyChangeListener(new TestPropertyListener());", "+\t\t\tIEclipsePreferences eclipsePreferences = projectA.getEclipsePreferences();", "+\t\t\tTestPropertyListener listener = new TestPropertyListener();", "+\t\t\teclipsePreferences.addPreferenceChangeListener(listener);", "+\t\t", "+\t\t\tHashtable options = new Hashtable();", "+\t\t\toptions.put(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE, JavaCore.ENABLED);", "+\t\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, \"10.0\");", "+\t\t\tprojectA.setOptions(options);", "+\t", "+\t\t\t// check project A custom options\t\t", "+\t\t\tassertEquals(\"projA:unexpected custom value for deprecation option\", JavaCore.ENABLED, projectA.getOptions(false).get(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE));", "+\t\t\tassertEquals(\"projA:unexpected custom value for compliance option\", \"10.0\", projectA.getOptions(false).get(JavaCore.COMPILER_COMPLIANCE));", "+\t\t\tassertEquals(\"projA:unexpected inherited value1 for hidden-catch option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK));", "+\t//\t\tassertTrue(\"projA:preferences should not be reset\", preferences == projectA.getPreferences());", "+\t\t\tassertTrue(\"projA:preferences should not be reset\", eclipsePreferences == projectA.getEclipsePreferences());", "+\t\t\tassertTrue(\"projA:preferences property listener has been lost\", eventCount == 2);", "+\t\t", "+\t\t\t// change custom options to have one less", "+\t\t\toptions.clear();", "+\t\t\toptions.put(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE, JavaCore.ENABLED);", "+\t\t\tprojectA.setOptions(options);", "+\t\t\tassertEquals(\"projA:unexpected custom value for deprecation option\", JavaCore.ENABLED, projectA.getOptions(false).get(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE));", "+\t\t\tassertEquals(\"projA:unexpected custom value for compliance option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_COMPLIANCE));", "+\t\t\tassertEquals(\"projA:unexpected inherited value1 for hidden-catch option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK));", "+\t//\t\tassertTrue(\"projA:preferences should not be reset\", preferences == projectA.getPreferences());", "+\t\t\tassertTrue(\"projA:preferences should not be reset\", eclipsePreferences == projectA.getEclipsePreferences());", "+\t\t\tassertTrue(\"projA:preferences property listener has been lost\", eventCount == 3);", "+\t\t} finally {", "+\t\t\tthis.deleteProject(\"A\");", "+\t\t}", "+\t}"]}], "num": 23316}
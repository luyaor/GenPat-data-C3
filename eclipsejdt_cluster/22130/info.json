{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ade056e11ff546689c844c08d26fefe5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a1625f3ee1fbed61c1a20a8b6728fdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "e8cc2a8f8e9efcff6e76a3ee15d5b53d1a958057", "commitAfterChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void enterField(FieldInfo fieldInfo)", "signatureAfterChange": " public void enterField(FieldInfo fieldInfo)", "diff": ["-\t\tSourceTypeElementInfo parentInfo = (SourceTypeElementInfo) this.infoStack.peek();", "-\t\tJavaElement parentHandle= (JavaElement) this.handleStack.peek();", "-\t\tSourceField handle = null;", "-\t\t", "-\t\tif (parentHandle.getElementType() == IJavaElement.TYPE) {", "-\t\t\thandle = new SourceField(parentHandle, new String(fieldInfo.name));", "-\t\t}", "-\t\telse {", "-\t\t\tAssert.isTrue(false); // Should not happen", "-\t\t}", "-\t\tresolveDuplicates(handle);", "-\t\t", "-\t\tSourceFieldElementInfo info = new SourceFieldElementInfo();", "-\t\tinfo.fieldName = fieldInfo.name;", "-\t\tinfo.setNameSourceStart(fieldInfo.nameSourceStart);", "-\t\tinfo.setNameSourceEnd(fieldInfo.nameSourceEnd);", "-\t\tinfo.setSourceRangeStart(fieldInfo.declarationStart);", "-\t\tinfo.setFlags(fieldInfo.modifiers);", "-\t\tinfo.setTypeName(fieldInfo.type);", "+\tSourceTypeElementInfo parentInfo = (SourceTypeElementInfo) this.infoStack.peek();", "+\tJavaElement parentHandle= (JavaElement) this.handleStack.peek();", "+\tSourceField handle = null;", "+\t", "+\tif (parentHandle.getElementType() == IJavaElement.TYPE) {", "+\t\thandle = new SourceField(parentHandle, new String(fieldInfo.name));", "+\t}", "+\telse {", "+\t\tAssert.isTrue(false); // Should not happen", "+\t}", "+\tresolveDuplicates(handle);", "+\t", "+\tSourceFieldElementInfo info = new SourceFieldElementInfo();", "+\tinfo.fieldName = fieldInfo.name;", "+\tinfo.setNameSourceStart(fieldInfo.nameSourceStart);", "+\tinfo.setNameSourceEnd(fieldInfo.nameSourceEnd);", "+\tinfo.setSourceRangeStart(fieldInfo.declarationStart);", "+\tinfo.setFlags(fieldInfo.modifiers);", "+\tinfo.setTypeName(fieldInfo.type);", "+\t", "+\tthis.unitInfo.addAnnotationPositions(handle, fieldInfo.annotationPositions);", "-\t\tparentInfo.addChild(handle);", "-\t\tthis.newElements.put(handle, info);", "+\tparentInfo.addChild(handle);", "+\tthis.newElements.put(handle, info);", "-\t\tthis.infoStack.push(info);", "-\t\tthis.handleStack.push(handle);", "+\tthis.infoStack.push(info);", "+\tthis.handleStack.push(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619f7f655a1964ed448a268747a54c81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "58a1f01578c97e0cf25ddfdfbb541889635de059", "commitAfterChange": "794c42d32802fcaf82912c5ba05c9463361c0423", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r public void acceptInitializer(\r \tint modifiers, \r \tint declarationSourceStart, \r \tint declarationSourceEnd)", "signatureAfterChange": "\r public void enterInitializer(\r \tint declarationSourceStart,\r \tint modifiers)", "diff": ["- */\r", "-public void acceptInitializer(\r", "-\tint modifiers, \r", "-\tint declarationSourceStart, \r", "-\tint declarationSourceEnd) {\r", "-\t\tJavaElementInfo parentInfo = (JavaElementInfo) fInfoStack.peek();\r", "-\t\tJavaElement parentHandle= (JavaElement)fHandleStack.peek();\r", "-\t\tIInitializer handle = null;\r", "-\t\t\r", "-\t\tif (parentHandle.getElementType() == IJavaElement.TYPE) {\r", "-\t\t\thandle = ((IType) parentHandle).getInitializer(1);\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tAssert.isTrue(false); // Should not happen\r", "-\t\t}\r", "-\t\tresolveDuplicates(handle);\r", "-\t\t\r", "-\t\tInitializerElementInfo info = new InitializerElementInfo();\r", "-\t\tinfo.setSourceRangeStart(declarationSourceStart);\r", "-\t\tinfo.setSourceRangeEnd(declarationSourceEnd);\r", "-\t\tinfo.setFlags(modifiers);\r", "-\r", "-\t\tparentInfo.addChild(handle);\r", "-\t\tfNewElements.put(handle, info);\r", "-}\r", "+public void enterInitializer(\r", "+\tint declarationSourceStart,\r", "+\tint modifiers) {\r", "+\t\tJavaElementInfo parentInfo = (JavaElementInfo) fInfoStack.peek();\r", "+\t\tJavaElement parentHandle= (JavaElement)fHandleStack.peek();\r", "+\t\tIInitializer handle = null;\r", "+\t\t\r", "+\t\tif (parentHandle.getElementType() == IJavaElement.TYPE) {\r", "+\t\t\thandle = ((IType) parentHandle).getInitializer(1);\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\tAssert.isTrue(false); // Should not happen\r", "+\t\t}\r", "+\t\tresolveDuplicates(handle);\r", "+\t\t\r", "+\t\tInitializerElementInfo info = new InitializerElementInfo();\r", "+\t\tinfo.setSourceRangeStart(declarationSourceStart);\r", "+\t\tinfo.setFlags(modifiers);\r", "+\r", "+\t\tparentInfo.addChild(handle);\r", "+\t\tfNewElements.put(handle, info);\r", "+\r", "+\t\tfInfoStack.push(info);\r", "+\t\tfHandleStack.push(handle);\r", "+}\r"]}], "num": 22130}
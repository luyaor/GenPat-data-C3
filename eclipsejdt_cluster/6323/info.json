{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25a8536f9296f2bdee530b989a50e2e1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49ecfa39581fa27014a4cddc0f079f4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "6c5ed1b4ed06e066835a3bf2ea35d093c31d8a42", "commitAfterChange": "8bc47c693f418d320513158fd7b4c7024ff227d6", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "\r \tprotected void flushClasspathProblemMarkers()", "signatureAfterChange": "\r \tprotected void flushClasspathProblemMarkers(boolean flushCycleMarkers)", "diff": ["-\tprotected void flushClasspathProblemMarkers() {\r", "-\r", "+\tprotected void flushClasspathProblemMarkers(boolean flushCycleMarkers) {\r", "-\t\t\t\tproject.deleteMarkers(\r", "-\t\t\t\t\tIJavaModelMarker.BUILDPATH_PROBLEM_MARKER,\r", "-\t\t\t\t\tfalse,\r", "-\t\t\t\t\tIResource.DEPTH_ONE);\r", "+\t\t\t\tIMarker[] markers = project.findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE);\r", "+\t\t\t\tfor (int i = 0, length = markers.length; i < length; i++) {\r", "+\t\t\t\t\tIMarker marker = markers[i];\r", "+\t\t\t\t\tString cycleAttr = (String)marker.getAttribute(IJavaModelMarker.CYCLE_DETECTED);\r", "+\t\t\t\t\tif (flushCycleMarkers == (cycleAttr != null && cycleAttr.equals(\"true\"))){ //$NON-NLS-1$\r", "+\t\t\t\t\t\tmarker.delete();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c4c4bbb76fabd23484366d4a27586dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "bffd05273174fba670489cd637d40ac2a4d0913b", "commitAfterChange": "5cda6ee5d9726ecd4c3800dc98f96b9913f2498c", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "\r public String toString()", "signatureAfterChange": "\r public String toString()", "diff": ["-\tbuffer.append(fType == null ? \"<NONE>\" : fType.getFullyQualifiedName()); //$NON-NLS-1$\r", "+\tbuffer.append(this.type == null ? \"<NONE>\" : this.type.getFullyQualifiedName()); //$NON-NLS-1$\r", "-\t\tif (fType != null) {\r", "+\t\tif (this.type != null) {\r", "-\t\t\ttoString(buffer, fType, 1, true);\r", "+\t\t\ttoString(buffer, this.type, 1, true);\r", "-\t\t\ttoString(buffer, fType, 1, false);\r", "+\t\t\ttoString(buffer, this.type, 1, false);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (this.rootClasses.size > 1) {\r", "+\t\t\tbuffer.append(\"Root classes:\\n\");\r", "+\t\t\tIType[] roots = this.getRootClasses();\r", "+\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {\r", "+\t\t\t\tIType type = roots[i];\r", "+\t\t\t\ttoString(buffer, type, 1, false);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83c6bbc2e4896d42bdc9e2bc2058a622", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "924cc126306c5e17d04c27b98ac7b3a97f8a8d3f", "commitAfterChange": "0b27b465378d2c4de912ede755b716ec1bc3271b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic static IJavaElement create(IFolder folder, IJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement create(IFolder folder, IJavaProject project)", "diff": ["+\t\tIJavaElement element;", "+\t\t\telement = determineIfOnClasspath(folder, project);", "+\t\t\tif (element == null) {", "+\t\t\t\t// walk all projects and find one that have the given folder on its classpath", "+\t\t\t\tIJavaProject[] projects;", "+\t\t\t\ttry {", "+\t\t\t\t\tprojects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\t\tproject = projects[i];", "+\t\t\t\t\telement = determineIfOnClasspath(folder, project);", "+\t\t\t\t\tif (element != null)", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\telement = determineIfOnClasspath(folder, project);", "-\t\tIJavaElement element = determineIfOnClasspath(folder, project);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "907de3d27b975996d1e79ecb4028943b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "30b862416cba759ca39b029e0f535018291e11dc", "commitAfterChange": "0683b69bed51b5f780daf70368b7d12542687724", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 241, "signatureBeforeChange": "  \tpublic void contentTypeChanged(ContentTypeChangeEvent event)", "signatureAfterChange": "  \tpublic void contentTypeChanged(ContentTypeChangeEvent event)", "diff": ["+\t\t// Walk through projects to reset their secondary types cache", "+\t\tIJavaProject[] projects;", "+\t\ttry {", "+\t\t\tprojects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\t} catch (JavaModelException e) {", "+\t\t\treturn;", "+\t\t}", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\tIJavaProject project = projects[i];", "+\t\t\tfinal PerProjectInfo projectInfo = getPerProjectInfo(project.getProject(), false /* don't create info */);", "+\t\t\tif (projectInfo != null) {", "+\t\t\t\tprojectInfo.secondaryTypes = null;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2626808f49308236c99b3887c76ac8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "4c711b6bc83a679afd304ecb399af26ac71aded9", "commitAfterChange": "de2e2c2a1d691034a4b8e673f95537850b10ba73", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t\t \t\tprivate Object[][] getRegisteredParticipants()", "signatureAfterChange": " \t\t \t\tprivate synchronized Object[][] getRegisteredParticipants()", "diff": ["-\t\tprivate Object[][] getRegisteredParticipants() {", "+\t\t", "+\t\tprivate synchronized Object[][] getRegisteredParticipants() {", "+\t\t\t", "+\t\t\tthis.managedMarkerTypes = new HashSet();", "+\t\t\tthis.managedMarkerTypes.add(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER); // Java model problem markers are always managed", "+\t\t\t", "+\t\t\t\t\t// add managed marker types", "+\t\t\t\t\tIConfigurationElement[] managedMarkers = configElement.getChildren(\"managedMarker\"); //$NON-NLS-1$", "+\t\t\t\t\tfor (int k = 0, length = managedMarkers.length; k < length; k++) {", "+\t\t\t\t\t\tIConfigurationElement element = managedMarkers[k];", "+\t\t\t\t\t\tString markerType = element.getAttribute(\"markerType\"); //$NON-NLS-1$", "+\t\t\t\t\t\tif (markerType != null)", "+\t\t\t\t\t\t\tthis.managedMarkerTypes.add(markerType);", "+\t\t\t\t\t}"]}], "num": 6323}
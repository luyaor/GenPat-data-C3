{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7c468e8264b390e9379aef3a9338b77", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6918f92cac60ccad2fbb339025a49f73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException", "signatureAfterChange": " \tpublic void testBatchCompilerNoWarning() throws IOException", "diff": ["-\tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException {", "-\t\t// Do no longer print results in performance fingerprint", "-\t\ttagAsSummary(\"Compile>Build>Batch>Src:compiler>Options:DocCommentSupport,None\", Dimension.CPU_TIME, true); // put in fingerprint", "-\t\tFile logsFile = buildUsingBatchCompiler(\"-enableJavadoc -nowarn\");", "-", "-\t\t// Should not get any error", "-\t\tassertTrue(\"No log file\", logsFile.exists());", "-\t\tif (logsFile.length() != 0) {", "-\t\t\tchar[] errors = Util.getFileCharContent(logsFile, null);", "-\t\t\tint length = Math.min(errors.length, 1000);", "-\t\t\tassertTrue(\"Should have NO warning!\\nAlthoug, got following ones:\\n\"+(new String(errors, 0, length)), false);", "+\t */", "+\tpublic void testBatchCompilerNoWarning() throws IOException {", "+\t\ttagAsSummary(\"Compile>Batch>Compiler>No warning\", true); // put in fingerprint", "+\t\tbuildUsingBatchCompiler(\"-nowarn\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "941e9c024cd1b21f02e477a6c09d2401", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void testBatchCompilerAllWarnings() throws IOException", "signatureAfterChange": " \tpublic void _testBatchCompilerAllWarnings() throws IOException, CoreException", "diff": ["-\t */", "-\tpublic void testBatchCompilerAllWarnings() throws IOException {", "-\t\ttagAsSummary(\"Compile>Batch>Compiler>All warnings\", false); // do NOT put in fingerprint", "-", "-\t\tString allOptions = \"-warn:\" +", "-\t\t\t\"allDeprecation,\" +", "-\t\t\t\"allJavadoc,\" +", "-\t\t\t\"assertIdentifier,\" +", "-\t\t\t\"charConcat,\" +", "-\t\t\t\"conditionAssign,\" +", "-\t\t\t\"constructorName,\" +", "-\t\t\t\"deprecation,\" +", "-\t\t\t\"emptyBlock,\" +", "-\t\t\t\"fieldHiding,\" +", "-\t\t\t\"finally,\" +", "-\t\t\t\"indirectStatic,\" +", "-\t\t\t\"intfNonInherited,\" +", "-\t\t\t\"localHiding,\" +", "-\t\t\t\"maskedCatchBlock,\" +", "-\t\t\t\"nls,\" +", "-\t\t\t\"noEffectAssign,\" +", "-\t\t\t\"pkgDefaultMethod,\" +", "-\t\t\t\"semicolon,\" +", "-\t\t\t\"unqualifiedField,\" +", "-\t\t\t\"unusedArgument,\" +", "-\t\t\t\"unusedImport,\" +", "-\t\t\t\"unusedLocal,\" +", "-\t\t\t\"unusedPrivate,\" +", "-\t\t\t\"unusedThrown,\" +", "-\t\t\t\"unnecessaryElse,\" +", "-\t\t\t\"uselessTypeCheck,\" +", "-\t\t\t\"specialParamHiding,\" +", "-\t\t\t\"staticReceiver,\" +", "-\t\t\t\"syntheticAccess,\" +", "-\t\t\t\"tasks(TODO|FIX|XXX)\";", "-\t\tbuildUsingBatchCompiler(allOptions);", "-\t}", "+\t */", "+\tpublic void _testBatchCompilerAllWarnings() throws IOException, CoreException {", "+\t\ttagAsSummary(\"Compile>Batch>Compiler>All warnings\", false); // do NOT put in fingerprint", "+\t\tcompile(JavaCore.PLUGIN_ID, ALL_OPTIONS, true/*log errors*/);", "+\t}"]}], "num": 51222}
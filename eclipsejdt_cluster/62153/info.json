{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "777b96cf38f6671aa89a912a889302fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06555b1a83c1e9ca8b1c55fee4d1382f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "3f9a272754f4dbcde614fed0b8e02a6b49fdf380", "commitAfterChange": "07ee10ab5650bcb39d86bc9b77c1572a63409b02", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " protected void locateMatches(JavaProject javaProject, PossibleMatch[] possibleMatches, int start, int length) throws CoreException", "signatureAfterChange": " protected void locateMatches(JavaProject javaProject, PossibleMatch[] possibleMatches, int start, int length) throws CoreException", "diff": ["-\tboolean bindingsWereCreated = true;", "+\tboolean mustResolve = ((InternalSearchPattern)this.pattern).mustResolve;", "+\tboolean bindingsWereCreated = mustResolve;", "-\t\tfor (int i = start, maxUnits = start + length; i < maxUnits; i++)", "-\t\t\tbuildBindings(possibleMatches[i]);", "-\t\tlookupEnvironment.completeTypeBindings();", "+\t\tfor (int i = start, maxUnits = start + length; i < maxUnits; i++) {", "+\t\t\tPossibleMatch possibleMatch = possibleMatches[i];", "+\t\t\ttry {", "+\t\t\t\tparseAndBuildBindings(possibleMatch, mustResolve);", "+\t\t\t\tif (!mustResolve)", "+\t\t\t\t\tprocess(possibleMatch, bindingsWereCreated);", "+\t\t\t} finally {", "+\t\t\t\tif (!mustResolve)", "+\t\t\t\t\tpossibleMatch.cleanUp();", "+\t\t\t}", "+\t\t}", "+\t\tif (mustResolve)", "+\t\t\tlookupEnvironment.completeTypeBindings();", "+\tif (!mustResolve) {", "+\t\treturn;", "+\t}", "+\t", "-\t\t\tpossibleMatch.parsedUnit.cleanUp();", "-\t\t\tpossibleMatch.parsedUnit = null;", "+\t\t\tpossibleMatch.cleanUp();", "-\t\tif (this.progressMonitor != null)", "-\t\t\tthis.progressMonitor.worked(5);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a33406b527f9daa7f5b06e2d19567ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "4d4e17b21e8cd2e718905d1f6af33dcc6796501f", "commitAfterChange": "a6a5866450241565c9a2db7e59a81c5e9f3105c8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["-\t", "-\tprivate void setUpFullSourceWorkspace() throws IOException, CoreException {", "-\t\tString fullSourceZipPath = getPluginDirectoryPath() + File.separator + \"full-source-R3_0.zip\";", "+\t */", "+\tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException {", "-\t\tfinal String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "+\t\tif (workspaceRoot.getProjects().length == 0) {", "+\t\t\tString fullSourceZipPath = getPluginDirectoryPath() + File.separator + \"full-source-R3_0.zip\";", "+\t\t\tfinal String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "+", "+\t\t\tif (DEBUG) System.out.print(\"Unzipping \"+fullSourceZipPath+\"...\");", "+\t\t\tUtil.unzip(fullSourceZipPath, targetWorkspacePath);", "-\t\tUtil.unzip(fullSourceZipPath, targetWorkspacePath);", "-\t\t", "+\t\t\tworkspace.run(new IWorkspaceRunnable() {", "+\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "+\t\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "+\t\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "+\t\t\t\t\t\tString projectName = projectNames[i];", "+\t\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "+\t\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "+\t\t\t\t\t\tproject.create(monitor);", "+\t\t\t\t\t\tproject.open(monitor);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}, null);", "+\t\t\tif (DEBUG) System.out.println(\"done!\");", "+\t\t}", "-\t\tworkspace.run(new IWorkspaceRunnable() {", "-\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "-\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "-\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "-\t\t\t\t\tString projectName = projectNames[i];", "-\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "-\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "-\t\t\t\t\tproject.create(monitor);", "-\t\t\t\t\tproject.open(monitor);", "+\t\t// workaround bug 73253 Project references not set on project open ", "+\t\tif (DEBUG) System.out.print(\"Set projects classpaths...\");", "+\t\tALL_PROJECTS = JavaCore.create(workspaceRoot).getJavaProjects();", "+\t\tint length = ALL_PROJECTS.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "+\t\t}", "+\t\tif (DEBUG) System.out.println(\"done!\");", "+\t}", "-\t\t}, null);", "-\t\t", "-\t\t// workaround bug 73253 Project references not set on project open ", "-\t\tIJavaProject[] projects = JavaCore.create(workspaceRoot).getJavaProjects();", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\tprojects[i].setRawClasspath(projects[i].getRawClasspath(), null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8ced3eb9e081fcc57b5e6b47ba74fe2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "b8409b2c5761cb2e6dbcdfc3bef92e6e755d2aa7", "commitAfterChange": "e968b992e38be58d07a46d70f656322d8b2edb33", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic void performDefaults()", "signatureAfterChange": " \tpublic void performDefaults()", "diff": ["+\t */", "-\t\ttry {", "-\t\t\tAptConfig.setContainers(fJProj, null);", "+\t\tMap<FactoryContainer, Boolean> defaults = AptConfig.getDefaultFactoryPath(fJProj);", "+\t\tfFactoryPathList.removeAllElements();", "+\t\tfor (Map.Entry<FactoryContainer, Boolean> e : defaults.entrySet()) {", "+\t\t\tFactoryContainer fc = (FactoryContainer)e.getKey();", "+\t\t\tfFactoryPathList.addElement(fc);", "+\t\t\tfFactoryPathList.setChecked(fc, ((Boolean)e.getValue()).booleanValue());", "-\t\tcatch (IOException e) {", "-\t\t\t// TODO: what?", "-\t\t\te.printStackTrace();", "-\t\t}", "-\t\tcatch (CoreException e) {", "-\t\t\t// TODO: what?", "-\t\t\te.printStackTrace();", "-\t\t}", "-\t\tinitListContents();", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1635fab95873543be40a0aa40236480", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0106f28c24dc45effaea6c15d2fd93b3b22539d8", "commitAfterChange": "b7cb1f5ede11fb6e27dd568ceeb96e4eba267c2f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["-\t\t\tif( !isGeneratedSourceFolderConfigured() ){", "-\t\t\t\tthrow new IllegalStateException(\"Generated source folder not configured type generated for \" + typeName + \" failed\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "+\t\t\tfinal boolean sourcepathUpdated = ensureGeneratedSourceFolder(progressMonitor);", "+\t\t\t", "+\t\t\t\t", "+\t\t\t\tSystem.out.println(\"*** start of classpath ***\");", "+\t\t\t\tIClasspathEntry[] cp = _javaProject.getRawClasspath();", "+\t\t\t\tfor (IClasspathEntry c : cp) {", "+\t\t\t\t\tSystem.out.println(c);", "+\t\t\t\t}", "+\t\t\t\tSystem.out.println(\"*** end of classpath ***\");", "+\t\t\t\t", "-\t\t\treturn new FileGenerationResult(file, contentsDiffer);", "+\t\t\treturn new FileGenerationResult(file, contentsDiffer, sourcepathUpdated);", "-\t\t\tAptPlugin.log(e, \"failed to generate type \" + typeName); //$NON-NLS-1$\t\t\t", "+\t\t\tAptPlugin.log(e, \"(2)failed to generate type \" + typeName); //$NON-NLS-1$", "+\t\t\te.printStackTrace();"]}], "num": 62153}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "284e73ac68cb2677cc7a3be99f1133ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87d842d77c4e5e1c622d3ea470364c66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "6e3484e93dc48a09ac8c425df0144a313c14ab99", "commitAfterChange": "4258235f7bd226d0dfb8701ffe19643b12592deb", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tSourceTypeBinding typeInvocation)", "signatureAfterChange": "  \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tSourceTypeBinding typeInvocation, \t\tboolean staticOnly, \t\tObjectVector typesFound)", "diff": ["-\t\tSourceTypeBinding typeInvocation) {", "+\t\tSourceTypeBinding typeInvocation,", "+\t\tboolean staticOnly,", "+\t\tObjectVector typesFound) {", "-\t\tObjectVector typesFound = new ObjectVector();", "-\t\t\t\ttypeInvocation);", "+\t\t\t\ttypeInvocation,", "+\t\t\t\tstaticOnly);", "-\t\t\t\ttypeInvocation);", "+\t\t\t\ttypeInvocation,", "+\t\t\t\tstaticOnly);", "-\t\t\t\t\t\t\ttypeInvocation);", "+\t\t\t\t\t\t\ttypeInvocation,", "+\t\t\t\t\t\t\tstaticOnly);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c9c8107f330e3d7c02ebfc7de21813a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java", "commitBeforeChange": "3a24c8e93f77a32dae59173b29a4fa366ce01a3a", "commitAfterChange": "5d36ded47d2c78d72658a7417caa4c325d7b6276", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public FieldDeclaration updatedFieldDeclaration()", "signatureAfterChange": " public FieldDeclaration updatedFieldDeclaration(int depth, Set knownTypes)", "diff": ["-public FieldDeclaration updatedFieldDeclaration(){", "+public FieldDeclaration updatedFieldDeclaration(int depth, Set knownTypes){", "-\t\t\t\t\tTypeDeclaration anonymousType = recoveredType.updatedTypeDeclaration();", "-\t\t\t\t\tthis.fieldDeclaration.initialization = anonymousType.allocation;", "-\t\t\t\t\tif(this.fieldDeclaration.declarationSourceEnd == 0) {", "-\t\t\t\t\t\tint end = anonymousType.declarationSourceEnd;", "-\t\t\t\t\t\tthis.fieldDeclaration.declarationSourceEnd = end;", "-\t\t\t\t\t\tthis.fieldDeclaration.declarationEnd = end;", "+\t\t\t\t\tTypeDeclaration anonymousType = recoveredType.updatedTypeDeclaration(depth + 1, knownTypes);", "+\t\t\t\t\tif (anonymousType != null) {", "+\t\t\t\t\t\tthis.fieldDeclaration.initialization = anonymousType.allocation;", "+\t\t\t\t\t\tif(this.fieldDeclaration.declarationSourceEnd == 0) {", "+\t\t\t\t\t\t\tint end = anonymousType.declarationSourceEnd;", "+\t\t\t\t\t\t\tthis.fieldDeclaration.declarationSourceEnd = end;", "+\t\t\t\t\t\t\tthis.fieldDeclaration.declarationEnd = end;", "+\t\t\t\t\t\t}", "-\t\t\t\trecoveredType.updatedTypeDeclaration();", "+\t\t\t\t// if the enum is recovered then enum constants must be recovered too.", "+\t\t\t\t// depth is considered as the same as the depth of the enum", "+\t\t\t\trecoveredType.updatedTypeDeclaration(depth, knownTypes);"]}], "num": 49472}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3c1a14a6d2b8429d2a66eb1322cee66", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57aa008437899f3eb4506ce6de729442", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "2b899d5709db9c6865f7da76d74928892a056b7b", "commitAfterChange": "1cce623392dc2abad468b342ade5233f38d20f6c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void analyseCode( \t\tClassScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic void analyseCode( \t\tClassScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\t\tint recursionBalance = 0; // check constructor recursions\t\t\t", "-\t\t\t\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration) method;", "-\t\t\t\t\t\tconstructor.analyseCode(scope, initializerContext, fieldInfo.copy());", "-\t\t\t\t\t\t// compute the recursive invocation balance:", "-\t\t\t\t\t\t//   how many thisReferences vs. superReferences to constructors", "-\t\t\t\t\t\tint refCount;", "-\t\t\t\t\t\tif ((refCount = constructor.referenceCount) > 0) {", "-\t\t\t\t\t\t\tif ((constructor.constructorCall == null)", "-\t\t\t\t\t\t\t\t|| constructor.constructorCall.isSuperAccess()", "-\t\t\t\t\t\t\t\t|| !constructor.constructorCall.binding.isValidBinding()) {", "-\t\t\t\t\t\t\t\trecursionBalance -= refCount;", "-\t\t\t\t\t\t\t\tconstructor.referenceCount = -1; // for error reporting propagation\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\trecursionBalance += refCount;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t((ConstructorDeclaration)method).analyseCode(scope, initializerContext, fieldInfo.copy());", "-\t\t\t\t}", "-\t\t\t\tif (recursionBalance > 0) {", "-\t\t\t\t\t// there is one or more cycle(s) amongst constructor invocations", "-\t\t\t\t\tscope.problemReporter().recursiveConstructorInvocation(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b27b2237bd5bb926a022df4d39559f5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "2b899d5709db9c6865f7da76d74928892a056b7b", "commitAfterChange": "1cce623392dc2abad468b342ade5233f38d20f6c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void analyseCode(CompilationUnitScope unitScope)", "signatureAfterChange": " \tpublic void analyseCode(CompilationUnitScope unitScope)", "diff": ["-\t\t\t\tint recursionBalance = 0; // check constructor recursions\t\t\t", "-\t\t\t\t\t\t\t((Clinit) method).analyseCode(scope, staticInitializerContext, staticFieldInfo);", "+\t\t\t\t\t\t\t((Clinit)method).analyseCode(scope, staticInitializerContext, staticFieldInfo);", "-\t\t\t\t\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration) method;", "-\t\t\t\t\t\t\tconstructor.analyseCode(scope, initializerContext, nonStaticFieldInfo.copy());", "-\t\t\t\t\t\t\t// compute the recursive invocation balance:", "-\t\t\t\t\t\t\t//   how many thisReferences vs. superReferences to constructors", "-\t\t\t\t\t\t\tint refCount;", "-\t\t\t\t\t\t\tif ((refCount = constructor.referenceCount) > 0) {", "-\t\t\t\t\t\t\t\tif ((constructor.constructorCall == null)", "-\t\t\t\t\t\t\t\t\t|| constructor.constructorCall.isSuperAccess()", "-\t\t\t\t\t\t\t\t\t|| !constructor.constructorCall.binding.isValidBinding()) {", "-\t\t\t\t\t\t\t\t\trecursionBalance -= refCount;", "-\t\t\t\t\t\t\t\t\tconstructor.referenceCount = -1; // for error reporting propagation", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\trecursionBalance += refCount;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t((ConstructorDeclaration)method).analyseCode(scope, initializerContext, nonStaticFieldInfo.copy());", "-\t\t\t\t}", "-\t\t\t\tif (recursionBalance > 0) {", "-\t\t\t\t\t// there is one or more cycle(s) amongst constructor invocations", "-\t\t\t\t\tscope.problemReporter().recursiveConstructorInvocation(this);"]}], "num": 34022}
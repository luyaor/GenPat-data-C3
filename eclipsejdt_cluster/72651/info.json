{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08837d8b4b7e528cfccedff9abfa30fa", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b9c5f132c5c2bcf32921b5c943be391", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b371452cfc86edadd09f0bc9f3e25611ca4d4268", "commitAfterChange": "108cd17345619c887ab9a0af6e6482c84a0cbd69", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\t \t \tpublic MethodBinding findMethod0(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": "\t \t \tpublic MethodBinding findMethod0(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, compatibleMethod);", "+\t\t\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, new MethodBinding [] {compatibleMethod});", "+\t\t", "-\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "+\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, new MethodBinding [] { candidates[0] });", "-", "-\t\tMethodBinding mostSpecificMethod = mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite, receiverType);", "-\t\tif (searchForDefaultAbstractMethod) { // search interfaces for a better match", "-\t\t\tif (mostSpecificMethod.isValidBinding())", "-\t\t\t\t// see if there is a better match in the interfaces - see AutoBoxingTest 99, LookupTest#81", "-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, mostSpecificMethod);", "-\t\t\t// see if there is a match in the interfaces - see LookupTest#84", "-\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding() /* else return the same error as before */)", "-\t\t\t\treturn interfaceMethod;", "-\t\t}", "-\t\treturn mostSpecificMethod;", "+\t\tif (visiblesCount != candidates.length)", "+\t\t\tSystem.arraycopy(candidates, 0, candidates = new MethodBinding[visiblesCount], 0, visiblesCount);", "+\t\treturn searchForDefaultAbstractMethod ? findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates)", "+\t\t\t\t\t\t\t\t\t\t\t  : mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite, receiverType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba65369781325e222c7f7bc67c37f1e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "01e38ca56c46a7423b9b7fff661e362555ab1e50", "commitAfterChange": "80afe0245e61b0a1bc378b68d1e49e7223b1baa6", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable())) {", "-\t\t\t\t\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "-\t\t\t\t\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\t\t\t\t\t\tcandidates = new MethodBinding[] {compatibleMethod, interfaceMethod};", "-\t\t\t\t\t\t\t\t\treturn mostSpecificMethodBinding(candidates, 2, argumentTypes, invocationSite, receiverType);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable()))", "+\t\t\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, compatibleMethod);", "-\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable())) {", "-\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "-\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\t\tcandidates = new MethodBinding[] {candidates[0], interfaceMethod};", "-\t\t\t\t\treturn mostSpecificMethodBinding(candidates, 2, argumentTypes, invocationSite, receiverType);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable()))", "+\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "-\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "-\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\t\tcandidates = new MethodBinding[] {mostSpecificMethod, interfaceMethod};", "-\t\t\t\t\treturn mostSpecificMethodBinding(candidates, 2, argumentTypes, invocationSite, receiverType);", "-\t\t\t\t}", "+\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, mostSpecificMethod);"]}], "num": 72651}
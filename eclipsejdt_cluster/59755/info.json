{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "658ffed7c3dd7f7b03550f187b38c6b2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19ac0a68da85c145d4f1b0e1ee3eac37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "7a8728f6d81c28d6bb26a6aa19e5258c1824c75b", "commitAfterChange": "58d1213fc33b8c0012fb5fd98a7e0347bfcceca1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "signatureAfterChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "diff": ["+\t\t\t// $VALUES := new <EnumType>[<enumCount>]", "+\t\t\tcodeStream.generateInlinedValue(enumCount);", "+\t\t\tcodeStream.anewarray(declaringType.binding);", "-\t\t\t\t\t// $VALUES := new <EnumType>[<enumCount>]", "-\t\t\t\t\tcodeStream.generateInlinedValue(enumCount);", "-\t\t\t\t\tcodeStream.anewarray(declaringType.binding);", "-\t\t\t\t\tcodeStream.putstatic(declaringType.enumValuesSyntheticfield);", "+\t\t\tcodeStream.putstatic(declaringType.enumValuesSyntheticfield);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d193f17b9c8258d824923201a20b2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "commitAfterChange": "ea2bbf7bacf87faa676c47fde1479a0938fb73cd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite)", "diff": ["-\t\t\tif (leafType instanceof ReferenceBinding)", "-\t\t\tif (!((ReferenceBinding)leafType).canBeSeenBy(this)) {", "-\t\t\t\treturn new ProblemFieldBinding((ReferenceBinding)leafType, fieldName, ReceiverTypeNotVisible);", "+\t\t\tif (leafType instanceof ReferenceBinding) {", "+\t\t\t\tif (!((ReferenceBinding) leafType).canBeSeenBy(this))", "+\t\t\t\t\treturn new ProblemFieldBinding((ReferenceBinding)leafType, fieldName, ReceiverTypeNotVisible);", "-\t", "+", "-\t", "+", "-\t", "+", "-\t", "+", "-\t", "+", "-\t", "+", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25625c26cb620f57107b35a67a451bba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void testDeleteField() throws CoreException", "signatureAfterChange": " public void testDeleteField() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"  int field;\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIField field = cu.getType(\"X\").getField(\"field\");", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  int field;\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIField field = cu.getType(\"X\").getField(\"field\");", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "275e3e31dd228ef8b7a738e97dc17feb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testDeleteAllImports() throws CoreException", "signatureAfterChange": " public void testDeleteAllImports() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"import java.util.*;\\n\" +", "-\t\t\"import q.Y;\\n\" +", "-\t\t\"public class X {\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIImportDeclaration[] children= cu.getImports();", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\"import q.Y;\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIImportDeclaration[] children= cu.getImports();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bfb56117f35cbcc93c8bc9bf68dee02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testDeleteConstructor() throws CoreException", "signatureAfterChange": " public void testDeleteConstructor() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"  public X(String s) {\\n\" +", "-\t\t\"  }\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIMethod constructor = cu.getType(\"X\").getMethod(\"X\", new String[] {\"QString;\"});", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public X(String s) {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIMethod constructor = cu.getType(\"X\").getMethod(\"X\", new String[] {\"QString;\"});", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32cb6fa7686aea08591540554cbf093c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b4f87915b858b8e38e418046984ece5dc8db6148", "commitAfterChange": "4b0e968ea18c9b6d539f97894bc6451b0df31a4f", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tif (rootInfo != null) { // if inside a package fragment root", "-\t\t\t\t\t\t\t\tif (!isValidParent) continue; ", "-\t\t\t\t\t\t\t\tif (parent == null) {", "-\t\t\t\t\t\t\t\t\t// find the parent of the non-java resource to attach to", "-\t\t\t\t\t\t\t\t\tif (this.currentElement == null ", "-\t\t\t\t\t\t\t\t\t\t\t|| !this.currentElement.getJavaProject().equals(rootInfo.project)) {", "-\t\t\t\t\t\t\t\t\t\t// force the currentProject to be used", "-\t\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT", "-\t\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT ", "-\t\t\t\t\t\t\t\t\t\t\t&& res instanceof IProject)) { ", "-\t\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)", "-\t\t\t\t\t\t\t\t\t\tparent = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, rootInfo);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (parent == null) {", "-\t\t\t\t\t\t\t\t\t\tisValidParent = false;", "-\t\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (rootInfo != null) { // if inside a package fragment root", "+\t\t\t\t\t\t\tif (!isValidParent) continue; ", "+\t\t\t\t\t\t\tif (parent == null) {", "+\t\t\t\t\t\t\t\t// find the parent of the non-java resource to attach to", "+\t\t\t\t\t\t\t\tif (this.currentElement == null ", "+\t\t\t\t\t\t\t\t\t\t|| !this.currentElement.getJavaProject().equals(rootInfo.project)) {", "+\t\t\t\t\t\t\t\t\t// force the currentProject to be used", "+\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t// add child as non java resource", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// the non-java resource (or its parent folder) will be attached to the java project", "-\t\t\t\t\t\t\t\tif (orphanChildren == null) orphanChildren = new IResourceDelta[length];", "-\t\t\t\t\t\t\t\torphanChildren[i] = child;", "+\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT", "+\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT ", "+\t\t\t\t\t\t\t\t\t\t&& res instanceof IProject)) { ", "+\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)", "+\t\t\t\t\t\t\t\t\tparent = (Openable)rootInfo.project;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, rootInfo);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (parent == null) {", "+\t\t\t\t\t\t\t\t\tisValidParent = false;", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// add child as non java resource", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t// ignore", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// the non-java resource (or its parent folder) will be attached to the java project", "+\t\t\t\t\t\t\tif (orphanChildren == null) orphanChildren = new IResourceDelta[length];", "+\t\t\t\t\t\t\torphanChildren[i] = child;", "+\t\t\t\t\t\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3911e2b4bcd7847174b123d32e36b82d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testDeleteSyntaxErrorInMethod3() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorInMethod3() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"  public void foo( \\n\" +", "-\t\t\"  }\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public void foo( \\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b0d823905eb825b0ab5d1237e4e0221", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testDeleteSyntaxErrorInMethod2() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorInMethod2() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"  public void foo() \\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public void foo() \\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6624738b756959d9cd86715f844c135d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "1a523523632cd1a64bce4e193fddecc091f0a09b", "commitAfterChange": "2da53a14245271c999bfef856e9b2ece46065198", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  private void checkMethods()", "signatureAfterChange": " private void checkMethods()", "diff": ["-", "-\t\t\t\t} else {", "-\t\t\t\t\tif (mustImplementAbstractMethods && index == 0 && matchingInherited[0].isAbstract())", "-\t\t\t\t\t\tif (mustImplementAbstractMethod(matchingInherited[0])) {", "-\t\t\t\t\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "-\t\t\t\t\t\t\tif (typeDeclaration != null) {", "-\t\t\t\t\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(matchingInherited[0]);", "-\t\t\t\t\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t} else if (mustImplementAbstractMethods && index == 0 && matchingInherited[0].isAbstract()) {", "+\t\t\t\t\tif (mustImplementAbstractMethod(matchingInherited[0])) {", "+\t\t\t\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "+\t\t\t\t\t\tif (typeDeclaration != null) {", "+\t\t\t\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(matchingInherited[0]);", "+\t\t\t\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953fb307f62a007dfac145b2632d033f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testDeleteMethod() throws CoreException", "signatureAfterChange": " public void testDeleteMethod() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"  public void foo() {\\n\" +", "-\t\t\"  }\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public void foo() {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96998fc03ef90c8d41b3f2d53e54b6c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testDeleteSyntaxErrorField() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorField() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"  int field\\n\" + // missing semi-colon", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIField field = cu.getType(\"X\").getField(\"field\");", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  int field\\n\" + // missing semi-colon", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIField field = cu.getType(\"X\").getField(\"field\");", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af017652ab0d82afcfa52df653918a35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testDeleteSyntaxErrorType() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorType() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"  method() {\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIType type = cu.getType(\"X\");", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  method() {\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIType type = cu.getType(\"X\");", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af1a943f83064ddcfd76790f7c0e3973", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "67be753fec1b8f88653e28d3d4d4837dd29cdece", "commitAfterChange": "c76b87d837ed14384819cb84439501329f23edce", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \t\r \tpublic Expression convert(ThisReference reference)", "signatureAfterChange": "\r \t\r \tpublic Expression convert(ThisReference reference)", "diff": ["-\t\tif (reference instanceof QualifiedThisReference) {\r", "-\t\t\treturn convert((QualifiedThisReference) reference);\r", "-\t\t}\r", "-\t\tif (reference instanceof QualifiedSuperReference) {\r", "-\t\t\treturn convert((QualifiedSuperReference) reference);\r", "-\t\t}\r", "-\t\t} else {\r", "+\t\t} else if (reference instanceof QualifiedSuperReference) {\r", "+\t\t\treturn convert((QualifiedSuperReference) reference);\r", "+\t\t} else if (reference instanceof QualifiedThisReference) {\r", "+\t\t\treturn convert((QualifiedThisReference) reference);\r", "+\t\t}  else {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af1f2a5a3b7704b869de185a99754088", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testDeleteType1() throws CoreException", "signatureAfterChange": " public void testDeleteType1() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIType type = cu.getType(\"X\");", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIType type = cu.getType(\"X\");", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc87d38dd36f7b02f733a8aebdc48596", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "commitAfterChange": "8ddb90194cdf45633ca959a6158f4f155e521349", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " protected void reportAccurateParameterizedTypeReference(SearchMatch match, TypeReference typeRef, int index, TypeReference[] typeArguments) throws CoreException", "signatureAfterChange": " protected void reportAccurateParameterizedTypeReference(SearchMatch match, TypeReference typeRef, int index, TypeReference[] typeArguments) throws CoreException", "diff": ["-\t\t// Initialize scanner", "-\t\tScanner scanner = this.parser.scanner;", "-\t\tchar[] source = this.currentPossibleMatch.getContents();", "-\t\tscanner.setSource(source);", "+\t\t\t// Initialize scanner", "+\t\t\tScanner scanner = this.parser.scanner;", "+\t\t\tchar[] source = this.currentPossibleMatch.getContents();", "+\t\t\tscanner.setSource(source);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d03433d9de8ae62e6eefac118e99dbfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4152a87f3580e53749fa348690b4abc9a373bea9", "commitAfterChange": "517b8ee23b27e5d235651538485ef446b1c4d0e3", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": " protected void consumeMethodInvocationName()", "signatureAfterChange": " protected void consumeMethodInvocationName()", "diff": ["-\t\tint length = this.typeAnnotationLengthStack[this.typeAnnotationLengthPtr--];", "-\t\tAnnotation [] typeAnnotations;", "-\t\tif (length != 0) {", "-\t\t\tSystem.arraycopy(", "-\t\t\t\t\tthis.typeAnnotationStack,", "-\t\t\t\t\t(this.typeAnnotationPtr -= length) + 1,", "-\t\t\t\t\ttypeAnnotations = new Annotation[length],", "-\t\t\t\t\t0,", "-\t\t\t\t\tlength);", "-\t\t\tproblemReporter().misplacedTypeAnnotations(typeAnnotations[0], typeAnnotations[typeAnnotations.length - 1]);", "-\t\t}", "+\tint length = this.typeAnnotationLengthStack[this.typeAnnotationLengthPtr--];", "+\tAnnotation [] typeAnnotations;", "+\tif (length != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\t\tthis.typeAnnotationStack,", "+\t\t\t\t(this.typeAnnotationPtr -= length) + 1,", "+\t\t\t\ttypeAnnotations = new Annotation[length],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\tproblemReporter().misplacedTypeAnnotations(typeAnnotations[0], typeAnnotations[typeAnnotations.length - 1]);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b5c28abbf73fc890e283c95377eec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testDeleteEmptyPackageFragment() throws CoreException", "signatureAfterChange": " public void testDeleteEmptyPackageFragment() throws CoreException", "diff": ["-\tcreateFolder(\"P/p1/p2\");", "-\tIPackageFragment pkg = getPackage(\"P/p1\");", "-\tIFolder folder = getFolder(\"P/p1\");", "+\t\tcreateFolder(\"P/p1/p2\");", "+\t\tIPackageFragment pkg = getPackage(\"P/p1\");", "+\t\tIFolder folder = getFolder(\"P/p1\");", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebadfddb15fba127f862fd919dcbc5c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void testDeleteSyntaxErrorInMethod1() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorInMethod1() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"  public void foo() {\\n\" +", "-\t\t\"    String s = ;\\n\" +", "-\t\t\"    System.out.println(s);\\n\" +", "-\t\t\"  }\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public void foo() {\\n\" +", "+\t\t\t\"    String s = ;\\n\" +", "+\t\t\t\"    System.out.println(s);\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc45cdfd6ff7496662da64d668379a58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void testDeleteImportDeclaration() throws CoreException", "signatureAfterChange": " public void testDeleteImportDeclaration() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"import java.util.*;\\n\" +", "-\t\t\"import q.Y;\\n\" +", "-\t\t\"public class X {\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIImportDeclaration imp= cu.getImport(\"q.Y\");", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\"import q.Y;\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIImportDeclaration imp= cu.getImport(\"q.Y\");", "+"]}], "num": 59755}
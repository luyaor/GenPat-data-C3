{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a48994f4ef77aacb5f869961cfdc8fb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8489ccb52276543cfd831322deb3d833", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "signatureAfterChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "diff": ["+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\t// try to retrieve imports from the source\r", "+\t\t\tSourceMapper sourceMapper = ((ClassFile) declaringType.getClassFile()).getSourceMapper();\r", "+\t\t\tif (sourceMapper != null) {\r", "+\t\t\t\tchar[][] imports = sourceMapper.getImports((BinaryType) declaringType);\r", "+\t\t\t\tif (imports != null) {\r", "+\t\t\t\t\tthis.context.setImports(imports);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5bca3d9a5ed48cbccff89f1908f3c67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "37b80d5b6322474683b56f9759227ede3c0e16b7", "commitAfterChange": "8fe276c9a253deb1dc49b8bec89bbeb9117f7d7f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "signatureAfterChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "diff": ["+\t\t} else {\r", "+\t\t\t// try to retrieve imports from the source\r", "+\t\t\tSourceMapper sourceMapper = ((ClassFile) declaringType.getClassFile()).getSourceMapper();\r", "+\t\t\tif (sourceMapper != null) {\r", "+\t\t\t\tdeclaringType.getSource(); // do the mapping and initialize the imports\r", "+\t\t\t\tchar[][] imports = sourceMapper.getImports();\r", "+\t\t\t\tif (imports != null) {\r", "+\t\t\t\t\tthis.context.setImports(sourceMapper.getImports());\r", "+\t\t\t\t}\r", "+\t\t\t}\r"]}], "num": 35064}
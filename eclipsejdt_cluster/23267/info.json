{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d674dd89b7b0e39f08d593b81d01ccc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b0df5a97061e618c3804901e8df2091", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "dfc12356d0e56187f27726140c3e4ba7be8134b7", "commitAfterChange": "7958800325e781c29b79a69900d300a76f68d447", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void initializeBounds(ParameterizedTypeBinding capturedParameterizedType)", "signatureAfterChange": " \tpublic void initializeBounds(ParameterizedTypeBinding capturedParameterizedType)", "diff": ["-\t\t\t\t\t\tsubstitutedVariableInterfaces[0] =  (ReferenceBinding) wildcard.bound;", "+\t\t\t\t\t\tsubstitutedVariableInterfaces[0] =  (ReferenceBinding) substitutedWildcardBound;", "-\t\t\t\t\tthis.superclass = wildcard.bound.isArrayType() ? substitutedVariableSuperclass : (ReferenceBinding)wildcard.bound;", "+\t\t\t\t\tthis.superclass = wildcard.bound.isArrayType() ? substitutedVariableSuperclass : (ReferenceBinding)substitutedWildcardBound;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd0f3bd43d22476bbcd2cea1beb9a816", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "35e70cc8286d226408a60255fde5d4f8a4a2587e", "commitAfterChange": "16dc279389affb939d2e82688b164459d3ba1ba5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void initializeBounds(ParameterizedTypeBinding capturedParameterizedType)", "signatureAfterChange": " \tpublic void initializeBounds(ParameterizedTypeBinding capturedParameterizedType)", "diff": ["-\t\t\t\tsubstitutedWildcardBound = Scope.substitute(capturedParameterizedType, wildcard.bound);", "+\t\t\t\t// prevent cyclic capture: given X<T>, capture(X<? super T> could yield a circular type", "+\t\t\t\tsubstitutedWildcardBound = wildcard.bound.isTypeVariable() ? wildcard.bound : Scope.substitute(capturedParameterizedType, wildcard.bound);"]}], "num": 23267}
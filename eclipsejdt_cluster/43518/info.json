{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48817a01b3e226f7327c1e9a29a371bc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24cfdc18193acb6bfca0b9996b139438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "signatureAfterChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "diff": ["-\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMELCASE_MATCH) != 0;", "-\tif (isCamelCase &&  pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {", "-\t\treturn true;", "+\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMEL_CASE_MATCH) != 0;", "+\tif (isCamelCase) {", "+\t\tif (pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word, (matchRule & SearchPattern.R_PREFIX_MATCH) != 0)) {", "+\t\t\treturn true;", "+\t\t}", "+\t\tif ((matchRule & SearchPattern.R_CASE_SENSITIVE) != 0) return false;", "-\tmatchRule &= ~SearchPattern.R_CAMELCASE_MATCH;", "+\tmatchRule &= ~SearchPattern.R_CAMEL_CASE_MATCH;", "-\t\t\tif (!isCamelCase) {", "-\t\t\t\treturn patternLength == wordLength && CharOperation.equals(pattern, word, false);", "-\t\t\t}", "-\t\t\t// fall through prefix match if camel case failed", "+\t\t\treturn patternLength == wordLength && CharOperation.equals(pattern, word, false);", "-\t\t\tif (!isCamelCase) {", "-\t\t\t\treturn pattern[0] == word[0] && patternLength == wordLength && CharOperation.equals(pattern, word);", "-\t\t\t}", "-\t\t\t// fall through prefix match if camel case failed", "+\t\t\treturn pattern[0] == word[0] && patternLength == wordLength && CharOperation.equals(pattern, word);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca46effc453db1fc555140ca84f549f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "be3b8398abdd134469cb25f74becb573498bac14", "commitAfterChange": "5c654dd7dd9bc98526f6c419699195d84517b84b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "signatureAfterChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "diff": ["-\tif (pattern.length == 0) return matchRule != SearchPattern.R_EXACT_MATCH;", "-\tif (word.length == 0) return (matchRule & SearchPattern.R_PATTERN_MATCH) != 0 && pattern.length == 1 && pattern[0] == '*';", "+\tint patternLength = pattern.length;", "+\tint wordLength = word.length;", "+\tif (patternLength == 0) return matchRule != SearchPattern.R_EXACT_MATCH;", "+\tif (wordLength == 0) return (matchRule & SearchPattern.R_PATTERN_MATCH) != 0 && patternLength == 1 && pattern[0] == '*';", "-\tif (isCamelCase && pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {", "+\tif (isCamelCase &&  pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {", "-\t\t\tif (isCamelCase) return false;", "-\t\t\treturn CharOperation.equals(pattern, word, false);", "+\t\t\tif (!isCamelCase) {", "+\t\t\t\treturn patternLength == wordLength && CharOperation.equals(pattern, word, false);", "+\t\t\t}", "+\t\t\t// fall through prefix match if camel case failed", "-\t\t\treturn CharOperation.prefixEquals(pattern, word, false);", "+\t\t\treturn patternLength <= wordLength && CharOperation.prefixEquals(pattern, word, false);", "-\t\t\tif (isCamelCase) return false;", "-\t\t\treturn pattern[0] == word[0] && CharOperation.equals(pattern, word);", "+\t\t\tif (!isCamelCase) {", "+\t\t\t\treturn pattern[0] == word[0] && patternLength == wordLength && CharOperation.equals(pattern, word);", "+\t\t\t}", "+\t\t\t// fall through prefix match if camel case failed", "-\t\t\treturn pattern[0] == word[0] && CharOperation.prefixEquals(pattern, word);", "+\t\t\treturn pattern[0] == word[0] && patternLength <= wordLength && CharOperation.prefixEquals(pattern, word);"]}], "num": 43518}
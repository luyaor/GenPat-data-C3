{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1344e7d40796ebf294fa5d5910ec81fc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a45537ba6c4d134d0e976c5448b307", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic int getModifiers()", "signatureAfterChange": " \tpublic int getModifiers()", "diff": ["+\t\t} else if (isAnnotation()) {", "+\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "+\t\t\tfinal int accessFlags = referenceBinding.getAccessFlags() & VALID_MODIFIERS;", "+\t\t\t// clear the AccAbstract, AccAnnotation and the AccInterface bits", "+\t\t\treturn accessFlags & ~(IConstants.AccAbstract | IConstants.AccInterface | IConstants.AccAnnotation);\t\t\t", "-\t\t} else if (isAnnotation()) {", "-\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "-\t\t\tfinal int accessFlags = referenceBinding.getAccessFlags() & VALID_MODIFIERS;", "-\t\t\t// clear the AccAbstract, AccAnnotation and the AccInterface bits", "-\t\t\treturn accessFlags & ~(IConstants.AccAbstract | IConstants.AccInterface | IConstants.AccAnnotation);\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40e1fffb7ffd7806300e8a6cd8a9b3a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "8a13e69e3b12126618841f95523da258e6a2ee16", "commitAfterChange": "6063db5213e327d90ee8e193ce709b39fb701fb5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "signatureAfterChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "diff": ["-\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "-\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "-\t\t\t} else {\r", "-\t\t\t\tint qualifiedNameLength = qualifiedNameReference.tokens.length;\r", "-\t\t\t\tint indexInQualifiedName = qualifiedNameLength - index; // one-based\r", "-\t\t\t\tint indexOfFirstFieldBinding = qualifiedNameReference.indexOfFirstFieldBinding; // one-based\r", "-\t\t\t\tint otherBindingLength = qualifiedNameLength - indexOfFirstFieldBinding;\r", "-\t\t\t\tif (indexInQualifiedName < indexOfFirstFieldBinding) {\r", "-\t\t\t\t\t// a extra lookup is required\r", "-\t\t\t\t\tBlockScope internalScope = retrieveEnclosingScope(parent);\r", "-\t\t\t\t\tBinding binding = null;\r", "-\t\t\t\t\tif (internalScope == null) {\r", "-\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (binding != null && binding.isValidBinding()) {\r", "-\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {\r", "-\t\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t// it is a type\r", "-\t\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\treturn null;\r", "+\t\t\tint qualifiedNameLength = qualifiedNameReference.tokens.length;\r", "+\t\t\tint indexInQualifiedName = qualifiedNameLength - index; // one-based\r", "+\t\t\tint indexOfFirstFieldBinding = qualifiedNameReference.indexOfFirstFieldBinding; // one-based\r", "+\t\t\tint otherBindingLength = qualifiedNameLength - indexOfFirstFieldBinding;\r", "+\t\t\tif (indexInQualifiedName < indexOfFirstFieldBinding) {\r", "+\t\t\t\t// a extra lookup is required\r", "+\t\t\t\tBlockScope internalScope = retrieveEnclosingScope(parent);\r", "+\t\t\t\tBinding binding = null;\r", "+\t\t\t\tif (internalScope == null) {\r", "+\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "-\t\t\t\t\tif (indexInQualifiedName == indexOfFirstFieldBinding) {\r", "+\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t}\r", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {\r", "+\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {\r", "+\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// it is a type\r", "+\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\treturn null;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (indexInQualifiedName == indexOfFirstFieldBinding) {\r", "+\t\t\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "+\t\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t/* This is the case for a name which is part of a qualified name that\r", "+\t\t\t\t\t * cannot be resolved. See PR 13063.\r", "+\t\t\t\t\t */\r", "+\t\t\t\t\tif (qualifiedNameReference.otherBindings == null) {\r", "+\t\t\t\t\t\treturn null;\r", "-\t\t\t\t\t\t/* This is the case for a name which is part of a qualified name that\r", "-\t\t\t\t\t\t * cannot be resolved. See PR 13063.\r", "-\t\t\t\t\t\t */\r", "-\t\t\t\t\t\tif (qualifiedNameReference.otherBindings == null) {\r", "-\t\t\t\t\t\t\treturn null;\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);\t\t\t\t\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50930938f6692c5c589ab3477f2108cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "982919179fe30a93d64a2d590bdb7ee6c337517e", "commitAfterChange": "2e116c3e018660ef5b20120d1f6bee149cdcd47d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\t\t\t\tkind = IGenericType.CLASS_DECL;", "-\t\t\t\t\t\t\t} else if (type.isInterface()) {", "-\t\t\t\t\t\t\t\tkind = IGenericType.INTERFACE_DECL;", "-\t\t\t\t\t\t\t} else if (type.isEnum()) {", "+\t\t\t\t\t\t\tif (type.isEnum()) {", "-\t\t\t\t\t\t\t} else /*if (type.isAnnotation())*/ {", "+\t\t\t\t\t\t\t} else if (type.isAnnotation()) {", "+\t\t\t\t\t\t\t}\telse if (type.isClass()) {", "+\t\t\t\t\t\t\t\tkind = IGenericType.CLASS_DECL;", "+\t\t\t\t\t\t\t} else /*if (type.isInterface())*/ {", "+\t\t\t\t\t\t\t\tkind = IGenericType.INTERFACE_DECL;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59fbf423eeb403443b38dfbe6bf0525a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " protected void toStringInfo(int tab, StringBuffer buffer, Object info, boolean showResolvedInfo)", "signatureAfterChange": " protected void toStringInfo(int tab, StringBuffer buffer, Object info, boolean showResolvedInfo)", "diff": ["-\tif (getJavaProject().getElementName().equals(path.segment(0))) {", "+\tif (isExternal()) {", "+\t\tbuffer.append(path.toOSString());", "+\t} else if (getJavaProject().getElementName().equals(path.segment(0))) {", "-\t    if (isExternal()) {", "-\t\t\tbuffer.append(path.toOSString());", "-\t    } else {", "-\t\t\tbuffer.append(path);", "-\t    }", "+\t\tbuffer.append(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "605436d7023e7e5c48541b4ece7af106", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "f42f6fde314bb3e2673238bee1f0dd8f360682c3", "commitAfterChange": "293f4c4c0cf7730a48afb98a4849499fa661b978", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t\t \t\tint nextToken()", "signatureAfterChange": " \t\t \t\tint nextToken()", "diff": ["-\t\t\t\t\t\tif (this.index == previousTokenEnd) {", "-\t\t\t\t\t\t\tthis.start = this.index+1;", "-\t\t\t\t\t\t\tpreviousTokenEnd = this.start;", "-\t\t\t\t\t\t} else if (this.start > 0) {", "+\t\t\t\t\t\tif (this.start > 0) {", "-\t\t\t\t\t\t\t\t\tthis.token = TYPE;", "-\t\t\t\t\t\t\t\t\treturn this.token;", "+\t\t\t\t\t\t\t\t\tif (this.index == previousTokenEnd) {", "+\t\t\t\t\t\t\t\t\t\tthis.start = this.index+1;", "+\t\t\t\t\t\t\t\t\t\tpreviousTokenEnd = this.start;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tthis.token = TYPE;", "+\t\t\t\t\t\t\t\t\t\treturn this.token;", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f06a31563713078695542de583ba0af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "f974621a419c66d8827ce49e878f1ca626c0f5c2", "commitAfterChange": "9954abd4d176567719d3b52f38fdec66f578f045", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void generateCode(\r \t\tBlockScope currentScope,\r \t\tCodeStream codeStream,\r \t\tboolean valueRequired)", "signatureAfterChange": "\r \tpublic void generateCode(\r \t\tBlockScope currentScope,\r \t\tCodeStream codeStream,\r \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\t\tif (falseLabel.hasForwardReferences()) {\r", "-\t\t\t\t\t\t\tif (valueRequired) {\r", "-\t\t\t\t\t\t\t\tcodeStream.iconst_0();\r", "+\t\t\t\t\t\tif (valueRequired) {\r", "+\t\t\t\t\t\t\tcodeStream.iconst_0();\r", "+\t\t\t\t\t\t\tif (falseLabel.hasForwardReferences()) {\r", "-\t\t\t\t\t\t\t\tif (valueRequired)\r", "-\t\t\t\t\t\t\t\t\tcodeStream.iconst_1();\r", "+\t\t\t\t\t\t\t\tcodeStream.iconst_1();\r", "-\t\t\t\t\t\t\t} else { // 6596: if (!(a && b)){} - must still place falseLabel\r", "-\t\t\t\t\t\t\t\tfalseLabel.place();\r", "-\t\t\t\t\t\t\t}\t\t\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t} else { // 6596: if (!(a && b)){} - must still place falseLabel\r", "+\t\t\t\t\t\t\tfalseLabel.place();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f52861d27e65873a16f466db01fd67c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "a899cd29a75883646450816539797817299ec777", "commitAfterChange": "bdf79fcc26d1f82ae3c59775bd7a3df51c38f892", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedType)", "diff": ["-\t\tif (scope.isBoxingCompatibleWith(expressionType, expectedType)) {", "-\t\t\tthis.computeConversion(scope, expectedType, expressionType);", "-\t\t} else if (!expressionType.isCompatibleWith(expectedType)) {", "-\t\t\tscope.problemReporter().typeMismatchError(expressionType, expectedType, this);", "-\t\t\treturn null;", "+\t\tif (!expressionType.isCompatibleWith(expectedType)) {", "+\t\t\tif (scope.isBoxingCompatibleWith(expressionType, expectedType)) {", "+\t\t\t\tthis.computeConversion(scope, expectedType, expressionType);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().typeMismatchError(expressionType, expectedType, this);", "+\t\t\t\treturn null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd8c0f32fa30c55842f7fcbc0997d2b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b25ed407ef1d09375524d9c9e824c1c1084b119b", "commitAfterChange": "0bd9f6472768db6e5f0062ffcfd17bd3adede039", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes)", "signatureAfterChange": " \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes)", "diff": ["-\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "-\t\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer = (org.eclipse.jdt.internal.compiler.ast.Initializer) node;", "-\t\t\t\t\tInitializer initializer = this.ast.newInitializer();", "-\t\t\t\t\tinitializer.setBody(convert(oldInitializer.block));", "-\t\t\t\t\tinitializer.setModifiers(oldInitializer.modifiers);", "-\t\t\t\t\tinitializer.setSourceRange(oldInitializer.declarationSourceStart, oldInitializer.sourceEnd - oldInitializer.declarationSourceStart + 1);", "-\t\t\t\t\tsetJavaDocComment(initializer);", "-\t\t\t\t\ttypeDecl.bodyDeclarations().add(initializer);", "+\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer = (org.eclipse.jdt.internal.compiler.ast.Initializer) node;", "+\t\t\t\tInitializer initializer = this.ast.newInitializer();", "+\t\t\t\tinitializer.setBody(convert(oldInitializer.block));", "+\t\t\t\tinitializer.setModifiers(oldInitializer.modifiers);", "+\t\t\t\tinitializer.setSourceRange(oldInitializer.declarationSourceStart, oldInitializer.sourceEnd - oldInitializer.declarationSourceStart + 1);", "+\t\t\t\tsetJavaDocComment(initializer);", "+\t\t\t\ttypeDecl.bodyDeclarations().add(initializer);", "+\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\t\tif (i > 0", "+\t\t\t\t\t&& (nodes[i - 1] instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "+\t\t\t\t\t&& ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)nodes[i - 1]).declarationSourceStart == fieldDeclaration.declarationSourceStart) {", "+\t\t\t\t\t// we have a multiple field declaration", "+\t\t\t\t\t// We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment", "+\t\t\t\t\tFieldDeclaration currentFieldDeclaration = (FieldDeclaration) typeDecl.bodyDeclarations().get(typeDecl.bodyDeclarations().size() - 1);", "+\t\t\t\t\tcurrentFieldDeclaration.fragments().add(convertToVariableDeclarationFragment(fieldDeclaration));", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "-\t\t\t\t\tif (i > 0", "-\t\t\t\t\t\t&& (nodes[i - 1] instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "-\t\t\t\t\t\t&& ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)nodes[i - 1]).declarationSourceStart == fieldDeclaration.declarationSourceStart) {", "-\t\t\t\t\t\t// we have a multiple field declaration", "-\t\t\t\t\t\t// We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment", "-\t\t\t\t\t\tFieldDeclaration currentFieldDeclaration = (FieldDeclaration) typeDecl.bodyDeclarations().get(typeDecl.bodyDeclarations().size() - 1);", "-\t\t\t\t\t\tcurrentFieldDeclaration.fragments().add(convertToVariableDeclarationFragment(fieldDeclaration));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// we can create a new FieldDeclaration", "-\t\t\t\t\t\ttypeDecl.bodyDeclarations().add(convertToFieldDeclaration(fieldDeclaration));", "-\t\t\t\t\t}", "+\t\t\t\t\t// we can create a new FieldDeclaration", "+\t\t\t\t\ttypeDecl.bodyDeclarations().add(convertToFieldDeclaration(fieldDeclaration));"]}], "num": 24715}
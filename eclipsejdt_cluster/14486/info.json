{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20b7eae51d4838f6b0e3c474e685f2e1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4d270efed74724a7b09f8a8665eacb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "8376377bee92e0d16cfa404c8d1e948dcf5be147", "commitAfterChange": "0a6cb9139841c5f6143bc94201bfcbd6024601de", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprivate OutputInfo outputInfo(RootInfo rootInfo, IResource res)", "signatureAfterChange": " \tprivate OutputsInfo outputsInfo(RootInfo rootInfo, IResource res)", "diff": ["-\tprivate OutputInfo outputInfo(RootInfo rootInfo, IResource res) {", "+\tprivate OutputsInfo outputsInfo(RootInfo rootInfo, IResource res) {", "-\t\t\t\tIPath output = proj.getOutputLocation();", "+\t\t\t\tIPath projectOutput = proj.getOutputLocation();", "-\t\t\t\tif (proj.getProject().getFullPath().equals(output)){ // case of proj==bin==src", "-\t\t\t\t\ttraverseMode = SOURCE;", "+\t\t\t\tif (proj.getProject().getFullPath().equals(projectOutput)){ // case of proj==bin==src", "+\t\t\t\t\treturn new OutputsInfo(new IPath[] {projectOutput}, new int[] {SOURCE}, 1);", "-\t\t\t\t\t// check case of src==bin", "+\t\t\t\t\tIPath[] outputs = new IPath[classpath.length+1];", "+\t\t\t\t\tint[] traverseModes = new int[classpath.length+1];", "+\t\t\t\t\tint outputCount = 1;", "+\t\t\t\t\toutputs[0] = projectOutput;", "+\t\t\t\t\ttraverseModes[0] = traverseMode;", "-\t\t\t\t\t\tif (entry.getPath().equals(output)) {", "-\t\t\t\t\t\t\ttraverseMode = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "+\t\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\t\tIPath output = entry.getOutputLocation();", "+\t\t\t\t\t\tif (output != null) {", "+\t\t\t\t\t\t\toutputs[outputCount] = output;", "+\t\t\t\t\t\t\t// check case of src==bin", "+\t\t\t\t\t\t\tif (entryPath.equals(output)) {", "+\t\t\t\t\t\t\t\ttraverseModes[outputCount++] = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\ttraverseModes[outputCount++] = IGNORE;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// check case of src==bin", "+\t\t\t\t\t\tif (entryPath.equals(projectOutput)) {", "+\t\t\t\t\t\t\ttraverseModes[0] = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "+\t\t\t\t\treturn new OutputsInfo(outputs, traverseModes, outputCount);", "-\t\t\t\treturn new OutputInfo(output, traverseMode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0b0fc1a9a49eb8c63dca65f1283a055", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "cdf9b8e4c56a386ff2dde986be8b72d07aa1cb88", "commitAfterChange": "8e48752294c0bdafc35bf5d5bf2db780924b6282", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "\t \tprivate OutputsInfo outputsInfo(RootInfo rootInfo, IResource res)", "signatureAfterChange": "\t \t \tprivate OutputsInfo outputsInfo(RootInfo rootInfo, IResource res)", "diff": ["+\t", "-\t\t\t\t} else {", "-\t\t\t\t\tIClasspathEntry[] classpath = proj.getResolvedClasspath(true);", "-\t\t\t\t\tIPath[] outputs = new IPath[classpath.length+1];", "-\t\t\t\t\tint[] traverseModes = new int[classpath.length+1];", "-\t\t\t\t\tint outputCount = 1;", "-\t\t\t\t\toutputs[0] = projectOutput;", "-\t\t\t\t\ttraverseModes[0] = traverseMode;", "-\t\t\t\t\tfor (int i = 0, length = classpath.length; i < length; i++) {", "-\t\t\t\t\t\tIClasspathEntry entry = classpath[i];", "-\t\t\t\t\t\tIPath entryPath = entry.getPath();", "-\t\t\t\t\t\tIPath output = entry.getOutputLocation();", "-\t\t\t\t\t\tif (output != null) {", "-\t\t\t\t\t\t\toutputs[outputCount] = output;", "-\t\t\t\t\t\t\t// check case of src==bin", "-\t\t\t\t\t\t\tif (entryPath.equals(output)) {", "-\t\t\t\t\t\t\t\ttraverseModes[outputCount++] = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\ttraverseModes[outputCount++] = IGNORE;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "+\t\t\t\t} ", "+\t\t\t\tIClasspathEntry[] classpath = proj.getResolvedClasspath(true);", "+\t\t\t\tIPath[] outputs = new IPath[classpath.length+1];", "+\t\t\t\tint[] traverseModes = new int[classpath.length+1];", "+\t\t\t\tint outputCount = 1;", "+\t\t\t\toutputs[0] = projectOutput;", "+\t\t\t\ttraverseModes[0] = traverseMode;", "+\t\t\t\tfor (int i = 0, length = classpath.length; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = classpath[i];", "+\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\tIPath output = entry.getOutputLocation();", "+\t\t\t\t\tif (output != null) {", "+\t\t\t\t\t\toutputs[outputCount] = output;", "-\t\t\t\t\t\tif (entryPath.equals(projectOutput)) {", "-\t\t\t\t\t\t\ttraverseModes[0] = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "+\t\t\t\t\t\tif (entryPath.equals(output)) {", "+\t\t\t\t\t\t\ttraverseModes[outputCount++] = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\ttraverseModes[outputCount++] = IGNORE;", "-\t\t\t\t\treturn new OutputsInfo(outputs, traverseModes, outputCount);", "+\t\t\t\t\t", "+\t\t\t\t\t// check case of src==bin", "+\t\t\t\t\tif (entryPath.equals(projectOutput)) {", "+\t\t\t\t\t\ttraverseModes[0] = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "+\t\t\t\t\t}", "+\t\t\t\treturn new OutputsInfo(outputs, traverseModes, outputCount);"]}], "num": 14486}
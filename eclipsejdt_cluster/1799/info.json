{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f50ce418d52956e7efb7cd23e390c8fd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "204523c6df9fc1b4836181c79a67792b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "dd2a270d4bfbb4f228adb22be7333923f86c77e9", "commitAfterChange": "ba1917d8323b975c43d151520213a593a77dc7c0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": " \tpublic Object getElementInfo() throws JavaModelException", "diff": ["-\tpublic JavaElementInfo getElementInfo() throws JavaModelException {", "+\tpublic Object getElementInfo() throws JavaModelException {", "+", "+\t\t// workaround to ensure parent project resolved classpath is available to avoid triggering initializers", "+\t\t// while the JavaModelManager lock is acquired (can cause deadlocks in clients)", "+\t\tIJavaProject project = getJavaProject();", "+\t\tif (project != null && !project.isOpen()) {", "+\t\t\t// TODO: need to revisit, since deadlock could still occur if perProjectInfo is removed concurrent before entering the lock", "+\t\t\tproject.getResolvedClasspath(true); // trigger all possible container/variable initialization outside the model lock", "+\t\t}", "+", "-\t\t\treturn (JavaElementInfo)info;", "+\t\t\treturn info;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db48dc51655553c88f102ff203e0e96b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic Object getElementInfo() throws JavaModelException", "signatureAfterChange": " \tpublic Object getElementInfo() throws JavaModelException", "diff": ["+\t\treturn getElementInfo(null);", "+\t}", "-\t\t// workaround to ensure parent project resolved classpath is available to avoid triggering initializers", "-\t\t// while the JavaModelManager lock is acquired (can cause deadlocks in clients)", "-\t\tIJavaProject project = getJavaProject();", "-\t\tif (project != null && !project.isOpen()) {", "-\t\t\t// TODO: (jerome) need to revisit, since deadlock could still occur if perProjectInfo is removed concurrent before entering the lock", "-\t\t\ttry {", "-\t\t\t\tproject.getResolvedClasspath(true); // trigger all possible container/variable initialization outside the model lock", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// project is not accessible or is not a java project", "-\t\t\t}", "-\t\t}", "-", "-\t\t// element info creation is done inside a lock on the JavaModelManager", "-\t\tJavaModelManager manager;", "-\t\tsynchronized(manager = JavaModelManager.getJavaModelManager()){", "-\t\t\tObject info = manager.getInfo(this);", "-\t\t\t\topenHierarchy();", "-\t\t\t\tinfo= manager.getInfo(this);", "-\t\t\t\tif (info == null) {", "-\t\t\t\t\tthrow newNotPresentException();", "-\t\t\treturn info;"]}], "num": 1799}
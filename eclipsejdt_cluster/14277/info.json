{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "242cb21a4e957eb1cdb5c4955749809e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78906513e6e4b52af261ed187f1d4457", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "afeec6e98298a3fee7e4fc33bbdcecb405bc1466", "commitAfterChange": "0c9fb87884972e83c7f78543403ac376b274d8ea", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate boolean examineDMethods()", "signatureAfterChange": " \tprivate boolean examineDMethods()", "diff": ["-\t\tExecutableElement methodDvoid = null;", "+\t\t_methodDvoid = null;", "-\t\t\t\tmethodDvoid = method;", "+\t\t\t\t_methodDvoid = method;", "-\t\tif (null == methodDvoid) {", "+\t\tif (null == _methodDvoid) {", "-\t\tTypeMirror returnType = methodDvoid.getReturnType();", "+\t\tTypeMirror returnType = _methodDvoid.getReturnType();", "-\t\t//TODO: check parameter types", "+\t\tList<? extends VariableElement> params = _methodDvoid.getParameters();", "+\t\tif (null == params || params.isEmpty()) {", "+\t\t\treportError(\"D.methodDvoid() reports no parameters\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tVariableElement param1 = params.iterator().next();", "+\t\tTypeMirror param1Type = param1.asType();", "+\t\tif (null == param1Type || param1Type.getKind() != TypeKind.DECLARED) {", "+\t\t\treportError(\"First parameter of D.methodDvoid() is not a declared type\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t// TODO: further investigation of that parameter type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad355fb070c332853f4b01692c9afb2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "635d51c73a886e470d16e7ebb8d1b4a9177433d4", "commitAfterChange": "cf0af9789637850aa518ab1064a8b714c5c05a24", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate boolean examineAMethodsAndFields()", "signatureAfterChange": " \tprivate boolean examineAMethodsAndFields()", "diff": ["-\t\t/* TODO: this doesn't work, because VariableElement.getSimpleName returns type name rather than param name!", "-\t\t\tif (\"int1\".equals(param.getSimpleName().toString())) {", "-\t\t\t\tint1 = param;", "-\t\t\t}", "+\t\t\tint1 = param;", "-\t\tif (null == int1) {", "-\t\t\treportError(\"A.methodIAString() does not report a parameter named int1\");", "+\t\tTypeMirror int1Type = int1.asType();", "+\t\tif (null == int1Type || int1Type.getKind() != TypeKind.INT) {", "+\t\t\treportError(\"The first parameter of A.methodIAString() is not of int type\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t/* TODO: this doesn't work, because our implementation of VariableElement.getSimpleName returns type name rather than param name!", "+\t\tif !(\"int1\".equals(int1.getSimpleName().toString())) {", "+\t\t\treportError(\"The first parameter of A.methodIAString() is not named int1\");"]}], "num": 14277}
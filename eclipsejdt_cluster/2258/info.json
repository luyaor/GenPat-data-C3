{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffcae425fa9c50b3402e6bf58cad2590", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4b71eaf2c0091a01b15f91f74d94cdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate static void addFileWithMissingTypeError( \t\t\tfinal IFile file,  \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \t \tprivate void runAPTInFileBasedMode(final ProcessorEnvImpl processorEnv, \t\t\t\t\t\t\t\t\t   final Map<IFile, Set<IFile>> lastGeneratedFiles)", "diff": ["-\t", "-\tprivate static void addFileWithMissingTypeError(", "-\t\t\tfinal IFile file, ", "-\t\t\tfinal List<IFile> filesWithMissingType,", "-\t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType,", "-\t\t\tfinal ProcessorEnvImpl processorEnv)", "-\t{", "-\t\tif( processorEnv.getPhase() != Phase.BUILD )", "-\t\t\treturn;", "-\t\tfinal CompilationUnit domUnit = processorEnv.getAstCompilationUnit(file);", "-\t\tassert domUnit != null : \"cannot locate compilation unit for \" + file.getName(); //$NON-NLS-1$", "-\t\tfinal IProblem[] problems = domUnit.getProblems();", "-\t\tif(problems == null)", "-\t\t\treturn;", "-\t\tfor( IProblem problem : problems ){", "-\t\t\tif( problem.getID() == IProblem.UndefinedType ){\t\t\t\t\t\t", "-\t\t\t\tfilesWithMissingType.add(file);", "-\t\t\t\tfinal ICompilationUnit unit = processorEnv.getICompilationUnitForFile(file);", "-\t\t\t\tassert unit != null : \"cannot locate ICompilationUnit for file \" + file.getName(); //$NON-NLS-1$", "-\t\t\t\tunitsForFilesWithMissingType.add(unit);", "-\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\tAptPlugin.trace(unit.getElementName() + \" has missing type \" + problem.getMessage() ); //$NON-NLS-1$", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}\t", "-\t}", "+\tprivate void runAPTInFileBasedMode(final ProcessorEnvImpl processorEnv,", "+\t\t\t\t\t\t\t\t\t   final Map<IFile, Set<IFile>> lastGeneratedFiles)", "+\t\tfinal ICompilationParticipantResult[] cpResults = processorEnv.getFilesWithAnnotation();", "+\t\tfinal GeneratedFileManager gfm = _aptProject.getGeneratedFileManager();", "+\t\tfor (ICompilationParticipantResult curResult : cpResults ) {\t\t\t", "+\t\t\tprocessorEnv.beginFileProcessing(curResult);", "+\t\t\tdispatchToFileBasedProcessor(processorEnv);", "+\t\t\tfinal IFile curFile = curResult.getFile();", "+\t\t\treportResult(", "+\t\t\t\t\tcurResult,", "+\t\t\t\t\tlastGeneratedFiles.get(curFile),", "+\t\t\t\t\tprocessorEnv.getAllGeneratedFiles(),", "+\t\t\t\t\tprocessorEnv.getModifiedGeneratedFiles(),", "+\t\t\t\t\tprocessorEnv.getProblems(),", "+\t\t\t\t\tprocessorEnv.getTypeDependencies(),", "+\t\t\t\t\tgfm,", "+\t\t\t\t\tprocessorEnv);", "+\t\t\tprocessorEnv.completedFileProcessing();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c33cd9b1fb441b18473ffb4c8488e886", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 111, "signatureBeforeChange": " \t \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems, Map unknownElements)", "signatureAfterChange": " \tprivate IClasspathEntry[] readFileEntries(Map unkwownElements)", "diff": ["-\t", "-\tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems, Map unknownElements) {", "-", "-\t\ttry {", "-\t\t\tString xmlClasspath = getSharedProperty(CLASSPATH_FILENAME);", "-\t\t\tif (xmlClasspath == null) {", "-\t\t\t\tif (createMarker && this.project.isAccessible()) {", "-\t\t\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, this.getElementName()))); ", "-\t\t\t\t}", "-\t\t\t\treturn null;", "-\t\t\treturn decodeClasspath(xmlClasspath, createMarker, logProblems, unknownElements);", "-\t\t} catch(CoreException e) {", "-\t\t\t// file does not exist (or not accessible)", "-\t\t\tif (createMarker && this.project.isAccessible()) {", "-\t\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, this.getElementName()))); ", "-\t\t\tif (logProblems) {", "-\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t+\"/.classpath, will revert to default classpath\"); //$NON-NLS-1$", "-\t\treturn null;", "+\t */", "+\tprivate IClasspathEntry[] readFileEntries(Map unkwownElements) {", "+\t\ttry {", "+\t\t\treturn readFileEntriesWithException(unkwownElements);", "+\t\t} catch (CoreException e) {", "+\t\t\tUtil.log(e, \"Exception while reading \" + getPath().append(JavaProject.CLASSPATH_FILENAME)); //$NON-NLS-1$", "+\t\t\treturn JavaProject.INVALID_CLASSPATH;", "+\t\t} catch (IOException e) {", "+\t\t\tUtil.log(e, \"Exception while reading \" + getPath().append(JavaProject.CLASSPATH_FILENAME)); //$NON-NLS-1$", "+\t\t\treturn JavaProject.INVALID_CLASSPATH;", "+\t\t} catch (AssertionFailedException e) {", "+\t\t\tUtil.log(e, \"Exception while reading \" + getPath().append(JavaProject.CLASSPATH_FILENAME)); //$NON-NLS-1$", "+\t\t\treturn JavaProject.INVALID_CLASSPATH;", "+\t\t}"]}], "num": 2258}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "350d532db188d427218e2287adb79a9c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14fc898502a55f7495df800891116aff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a0ae0d671d55223c651ec20787427be728e57c82", "commitAfterChange": "9fdf60099af5bd70d810793e82261fbcf589311b", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t\tpublic void printTag(String name, HashMap params, boolean insertNewLine, boolean closeTag)", "signatureAfterChange": " \t\t \t\tprivate void printTag(String name, HashMap params, boolean insertNewLine, boolean closeTag)", "diff": ["+\t\t", "+\t\tprivate void printTag(String name, HashMap params, boolean insertNewLine, boolean closeTag) {", "+\t\t\t((GenericXMLWriter) this.log).printTag(name, parameters, true, insertNewLine, closeTag);", "+\t\t\tthis.parameters.clear();", "+\t\t}", "-\t\tpublic void printTag(String name, HashMap params, boolean insertNewLine, boolean closeTag) {", "-\t\t\tfor (int i= this.tab; i > 0; i--) this.log.print('\\t');", "-\t\t\tStringBuffer buffer= new StringBuffer();", "-\t\t\tbuffer.append(\"<\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(name);", "-\t\t\tif (params != null) {", "-\t\t\t\tint length = parameters.size();", "-\t\t\t\tString[] keys = new String[length];", "-\t\t\t\tparameters.keySet().toArray(keys);", "-\t\t\t\tArrays.sort(keys);", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tbuffer.append(\" \"); //$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(keys[i]);", "-\t\t\t\t\tbuffer.append(\"=\\\"\"); //$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(getEscaped(String.valueOf(params.get(keys[i]))));", "-\t\t\t\t\tbuffer.append(\"\\\"\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (closeTag) {", "-\t\t\t\tbuffer.append(\"/>\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(\">\"); //$NON-NLS-1$", "-\t\t\t\tthis.tab++;", "-\t\t\t}", "-\t\t\tif (insertNewLine) {", "-\t\t\t\tthis.log.println(String.valueOf(buffer));", "-\t\t\t} else {", "-\t\t\t\tthis.log.print(String.valueOf(buffer));", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a87fd6fa628118936a062dce7e2cde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "9384d44d51fc135ab261a46a0c5c6cf06b8a4075", "commitAfterChange": "641e4134a5f663294c87ac80c963d690a90319bc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "signatureAfterChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "diff": ["-\tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems){", "+\tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems) {", "+\t\tif (DEBUG)", "+\t\t\tprintProblemsFor(root);", "-\t\tStringBuffer expectation = new StringBuffer(20);", "-\t\tfor (int k = 0; k < expectedProblems.length; k++){", "-\t\t\texpectation.append(\"\\tnew Problem(\\\"\"); //$NON-NLS-1$", "-\t\t\texpectation.append(expectedProblems[k].getLocation());", "-\t\t\texpectation.append(\"\\\", \\\"\"); //$NON-NLS-1$", "-\t\t\texpectation.append(expectedProblems[k].getMessage());", "-\t\t\texpectation.append(\"\\\", new Path(\\\"\"); //$NON-NLS-1$", "-\t\t\texpectation.append(expectedProblems[k].getResourcePath());", "-\t\t\texpectation.append(\"\\\"))\\n\");\t\t\t\t //$NON-NLS-1$", "-\t\t}", "-\t\tString expectationString = expectation.toString();", "-\t\t", "-\t\tStringBuffer actual = new StringBuffer(20);", "-\t\tfor (int k = 0; k < rootProblems.length; k++){", "-\t\t\tactual.append(\"\\tnew Problem(\\\"\"); //$NON-NLS-1$", "-\t\t\tactual.append(rootProblems[k].getLocation());", "-\t\t\tactual.append(\"\\\", \\\"\"); //$NON-NLS-1$", "-\t\t\tactual.append(rootProblems[k].getMessage());", "-\t\t\tactual.append(\"\\\", new Path(\\\"\"); //$NON-NLS-1$", "-\t\t\tactual.append(rootProblems[k].getResourcePath());", "-\t\t\tactual.append(\"\\\"))\\n\");\t\t\t\t //$NON-NLS-1$", "-\t\t}", "-\t\tString actualString = actual.toString();", "-\t\t", "-\t\tif (!actualString.equals(expectationString)) {", "-\t\t\tSystem.out.println(actualString);", "-\t\t}\t\t", "-\t\tassertEquals(\"unexpected problems\", expectationString, actualString); //$NON-NLS-1$", "+\t\tfor (int i = 0; i < expectedProblems.length; i++)", "+\t\t\tassertEquals(\"unexpected problem\", expectedProblems[i].toString(), rootProblems[i].toString()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e797f15923efba2e894fd5b45c4a046a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/SourceModifier.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic ReplaceEdit[] getModifications(String source)", "signatureAfterChange": " \t \tpublic ReplaceEdit[] getModifications(String source)", "diff": ["-\t\tint destIndentLevel= Strings.computeIndent(fDestinationIndent, fTabWidth);", "-\t\tif (destIndentLevel == fSourceIndentLevel) {", "+\t\tint destIndentLevel= Indents.computeIndent(this.destinationIndent, this.tabWidth);", "+\t\tif (destIndentLevel == this.sourceIndentLevel) {", "-\t\ttry {", "-\t\t\tILineTracker tracker= new DefaultLineTracker();", "-\t\t\ttracker.set(source);", "-\t\t\tint nLines= tracker.getNumberOfLines();", "-\t\t\tif (nLines == 1)", "-\t\t\t\treturn (ReplaceEdit[])result.toArray(new ReplaceEdit[result.size()]);", "-\t\t\tfor (int i= 1; i < nLines; i++) {", "-\t\t\t\tIRegion region= tracker.getLineInformation(i);", "-\t\t\t\tint offset= region.getOffset();", "-\t\t\t\tString line= source.substring(offset, offset + region.getLength());", "-\t\t\t\tint length= Strings.computeIndentLength(line, fSourceIndentLevel, fTabWidth);", "-\t\t\t\tif (length >= 0) {", "-\t\t\t\t\tresult.add(new ReplaceEdit(offset, length, fDestinationIndent));", "-\t\t\t\t} else {", "-\t\t\t\t\tlength= Strings.computeIndent(line, fTabWidth);", "-\t\t\t\t\tresult.add(new ReplaceEdit(offset, length, \"\")); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (BadLocationException cannotHappen) {", "-\t\t\t// can not happen", "-\t\t}", "-\t\treturn (ReplaceEdit[])result.toArray(new ReplaceEdit[result.size()]);", "+\t\treturn Indents.getChangeIndentEdits(source, this.sourceIndentLevel, this.tabWidth, this.destinationIndent);"]}], "num": 49556}
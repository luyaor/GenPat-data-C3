{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ece68fdbf5a60cf646dadee5eb093940", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25efce6af1ab8dad2ce2540280ce51d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "commitAfterChange": "c611850252ecccb24f660547467e0d555dd4fb70", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tprivate org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getTypeAnnotations(int dimensions, ArrayBinding arrayBinding)", "signatureAfterChange": "  \tprivate org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getTypeAnnotations(int dimensions, ArrayBinding arrayBinding, boolean isVarargs)", "diff": ["-\tprivate org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getTypeAnnotations(int dimensions, ArrayBinding arrayBinding) {", "+\tprivate org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getTypeAnnotations(int dimensions, ArrayBinding arrayBinding, boolean isVarargs) {", "-\t\t// Skip past extended dimensions encoded ahead of base dimensions.", "-\t\tint extendedDimensions = arrayBinding.dimensions - dimensions;", "+\t\t// Skip past extended dimensions encoded ahead of base dimensions. Dimension for variable argument array comes after the base dimensions.", "+\t\tint extendedDimensions = arrayBinding.dimensions - dimensions - (isVarargs ? 1 : 0);", "-\t\t\treturn oldies;", "+\t\t\treturn oldies; // if isVarargs, we will return extra trailing annotations, but that should be harmless.", "-\t\treturn newbies;", "+\t\treturn newbies; // if isVarargs, we will return extra trailing annotations, but that should be harmless."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb9c537bbce4456a02a24e6c218546ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tprivate org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getTypeAnnotations(int dimensions, ArrayBinding binding)", "signatureAfterChange": "  \tprivate org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getTypeAnnotations(int dimensions, ArrayBinding arrayBinding)", "diff": ["-\tprivate org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getTypeAnnotations(int dimensions, ArrayBinding binding) {", "-\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding [] oldies = binding.getTypeAnnotations();", "+\tprivate org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getTypeAnnotations(int dimensions, ArrayBinding arrayBinding) {", "+\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding [] oldies = arrayBinding.getTypeAnnotations();", "+\t\t// Skip past extended dimensions encoded ahead of base dimensions.", "+\t\tint extendedDimensions = arrayBinding.dimensions - dimensions;", "+\t\tif (extendedDimensions <= 0)", "+\t\t\treturn oldies;", "-\t\t\t\tdimensions--;", "-\t\t\t\tif (dimensions == 0) {", "-\t\t\t\t\tSystem.arraycopy(oldies, 0, newbies = ", "-\t\t\t\t\t\t\tnew org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[i+1], 0, i+1);", "+\t\t\t\textendedDimensions--;", "+\t\t\t\tif (extendedDimensions == 0) {", "+\t\t\t\t\tint cells = oldies.length - ++i;", "+\t\t\t\t\tSystem.arraycopy(oldies, i, newbies = new org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[cells], 0, cells);"]}], "num": 56402}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "793e29eac5685ea718051f628cffb8f5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ebc827d8455bc48283a3641260e75be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t     public void close()", "signatureAfterChange": " \t     public void close()", "diff": ["-\t        FileGenerationResult result = gfm.generateFileDuringBuild( ", "-\t\t\t\t\t_env.getFile(),  _typeName, contents, null /* progress monitor */ );", "+\t        Phase phase = _env.getPhase();", "+\t\t\t", "+\t        FileGenerationResult result = null;", "+\t        if ( phase == Phase.RECONCILE )", "+\t        {", "+\t        \tReconcileEnv reconcileEnv = (ReconcileEnv)_env;", "+\t        \tICompilationUnit parentCompilationUnit = reconcileEnv.getCompilationUnit();", "+\t            result  = gfm.generateFileDuringReconcile( ", "+\t                parentCompilationUnit, _typeName, contents );", "+\t            // Need to call ReconcileContext.resetAst() for this to be effective;", "+\t            // that will happen in ReconcileEnv.close().", "+\t        }", "+\t        else if ( phase == Phase.BUILD)\t{", "+\t\t        result = gfm.generateFileDuringBuild( ", "+\t\t\t\t\t\t_env.getFile(),  _typeName, contents, null /* progress monitor */ );", "+\t        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67a8947133f6b9a41ae48d6c84f3bbcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t     public void close()", "signatureAfterChange": " \t     public void close()", "diff": ["-    {", "-    \t", "+    {\t", "-\t        Phase phase = _env.getPhase();", "-\t\t", "-\t        FileGenerationResult result = null;", "-\t        if ( phase == Phase.RECONCILE )", "-\t        {", "-\t        \tICompilationUnit parentCompilationUnit = _env.getCompilationUnit();", "-\t            result  = gfm.generateFileDuringReconcile( ", "-\t                parentCompilationUnit, _typeName, contents, parentCompilationUnit.getOwner(), null, null );", "-\t        }", "-\t        else if ( phase == Phase.BUILD)\t", "-\t        {", "-\t\t\t\tresult = gfm.generateFileDuringBuild( ", "-\t\t\t\t\t\t_env.getFile(),  _typeName, contents, _env, null /* progress monitor */ );", "-\t        }", "-\t        else", "-\t        {", "-\t            throw new IllegalStateException( \"Unexpected phase value: \" + phase ); //$NON-NLS-1$", "-\t        }", "+\t        FileGenerationResult result = gfm.generateFileDuringBuild( ", "+\t\t\t\t\t_env.getFile(),  _typeName, contents, _env, null /* progress monitor */ );;"]}], "num": 29645}
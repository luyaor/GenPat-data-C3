{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f30d636494c6f178009864cb8c376d48", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13073238c21fd613aba5fa88e55b0d37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "166f6dd5be5c675bb046225e1f8d62e9663ca203", "commitAfterChange": "fc72b05508236833f00a1e3c5476a46002d61f47", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["+\t\t// temporararily connect ourselves to the ASTResolver - must disconnect when done", "-\t\t\t// No reset is performed there anymore since,", "-\t\t\t// within the CodeAssist (or related tools),", "-\t\t\t// the compiler may be called *after* a call", "-\t\t\t// to this resolve(...) method. And such a call", "-\t\t\t// needs to have a compiler with a non-empty", "-\t\t\t// environment.", "-\t\t\t// this.reset();", "+\t\t\t// disconnect ourselves from ast requestor", "+            astRequestor.compilationUnitResolver = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17947c11503264166814aca4d4a7c7c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AptBuilderTests.java", "commitBeforeChange": "5540f6360e90e32ddf4acee0793dedac97444f45", "commitAfterChange": "88aa1b709c25b8b1bf6b428540d305dd5a1a00d3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tpublic void testConfigMarker() throws Exception", "signatureAfterChange": " \tpublic void testConfigMarker() throws Exception", "diff": ["+\t// is not easy to simulate. So, this test doesn't really do anything", "-\t\t// make sure we post the marker about the incorrect classpath", "-\t\texpectingMarkers(new String[]{\"Generated source folder '\" + ", "-\t\t\t\tAptPreferenceConstants.DEFAULT_GENERATED_SOURCE_FOLDER_NAME + ", "-\t\t\t\t\"' is missing from classpath\"} );", "+\t\t// classpath should be updated with an entry for the source folder", "+\t\t// make sure we do not post the marker about the incorrect classpath", "+\t\texpectingNoMarkers();"]}], "num": 55889}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22f4dd84f3c7c95f3727c2f7aae3bc0e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a18bd5f581f54c590e794aabb739976", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "581bd48b0a44c3b24fd6cb58cd4506687e6bec7c", "commitAfterChange": "14eeb335b7a4f4b5dc293b65ac56b4b7f62e99e5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["+\t\t\t// only check inherited methods that are different & come from separate inheritance paths", "-", "-\t\t\tMethodBinding compareMethod = inheritedMethod instanceof ParameterizedGenericMethodBinding", "-\t\t\t\t? ((ParameterizedGenericMethodBinding) inheritedMethod).originalMethod", "-\t\t\t\t: inheritedMethod;", "-\t\t\tMethodBinding substitute = computeSubstituteMethod(otherInheritedMethod, compareMethod);", "-\t\t\tif (substitute == null || doesSubstituteMethodOverride(compareMethod, substitute))", "-\t\t\t\tcontinue;", "+\t\t\tif (inheritedMethod.areParametersEqual(otherInheritedMethod)) continue;", "+\t\t\t// skip it if otherInheritedMethod is defined by a subtype of inheritedMethod's declaringClass", "+\t\t\tif (otherInheritedMethod.declaringClass.erasure() != inheritedMethod.declaringClass.erasure())", "+\t\t\t\tif (otherInheritedMethod.declaringClass.findSuperTypeWithSameErasure(inheritedMethod.declaringClass) != null)", "+\t\t\t\t\tcontinue;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87d1effd294e23e90d285351cf9ce3ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/DebugEvaluationSetup.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void setUp()", "signatureAfterChange": "  \tprotected void setUp()", "diff": ["-}", "-protected void setUp() {", "-\t// Launch VM in evaluation mode", "-\tint debugPort = Util.getFreePort();", "-\tint evalPort = Util.getFreePort();", "-\tLocalVMLauncher launcher;", "-\ttry {", "-\t\tlauncher = LocalVMLauncher.getLauncher();", "-\t\tlauncher.setVMArguments(new String[] {\"-verify\"});", "-\t\tlauncher.setVMPath(this.jrePath);", "-\t\tlauncher.setEvalPort(evalPort);", "-\t\tlauncher.setEvalTargetPath(this.evalDirectory);", "-\t\tlauncher.setDebugPort(debugPort);", "-\t\tthis.launchedVM = launcher.launch();", "-\t} catch (TargetException e) {", "-\t\tthrow new Error(e.getMessage());", "-\t// Thread that read the stout of the VM so that the VM doesn't block", "-\ttry {", "-\t\tstartReader(\"VM's stdout reader\", this.launchedVM.getInputStream(), System.out);", "-\t} catch (TargetException e) {", "-\t}", "-", "-\t// Thread that read the sterr of the VM so that the VM doesn't block", "-\ttry {", "-\t\tstartReader(\"VM's sterr reader\", this.launchedVM.getErrorStream(), System.err);", "-\t} catch (TargetException e) {", "-\t}", "-", "-\t// Start JDI connection (try 10 times)", "-\tVirtualMachine vm = null;", "-\tfor (int i = 0; i < 10; i++) {", "-\t\ttry {", "-\t\t\tVirtualMachineManager manager = org.eclipse.jdi.Bootstrap.virtualMachineManager();", "-\t\t\tList connectors = manager.attachingConnectors();", "-\t\t\tif (connectors.size() == 0)", "-\t\t\t\tbreak;", "-\t\t\tAttachingConnector connector = (AttachingConnector)connectors.get(0);", "-\t\t\tMap args = connector.defaultArguments();", "-\t\t\t((Connector.Argument)args.get(\"port\")).setValue(String.valueOf(debugPort));", "-\t\t\t((Connector.Argument)args.get(\"hostname\")).setValue(launcher.getTargetAddress());", "-\t\t\tvm = connector.attach(args);", "-\t\t\t", "-\t\t\t// workaround pb with some VMs", "-\t\t\tvm.resume();", "-\t\t\t", "-\t\t\tbreak;", "-\t\t} catch (IllegalConnectorArgumentsException e) {", "-\t\t} catch (IOException e) {", "-\t\t\tSystem.out.println(\"Got exception: \" + e.getMessage());", "+\tprotected void setUp() {", "+\t\tif (this.context == null) {", "+\t\t\t// Launch VM in evaluation mode", "+\t\t\tint debugPort = Util.getFreePort();", "+\t\t\tint evalPort = Util.getFreePort();", "+\t\t\tLocalVMLauncher launcher;", "-\t\t\t\tSystem.out.println(\"Could not contact the VM at \" + launcher.getTargetAddress() + \":\" + debugPort + \". Retrying...\");", "-\t\t\t\tThread.sleep(100);", "-\t\t\t} catch (InterruptedException e2) {", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (vm == null) {", "-\t\tif (this.launchedVM != null) {", "-\t\t\t// If the VM is not running, output error stream", "-\t\t\ttry {", "-\t\t\t\tif (!this.launchedVM.isRunning()) {", "-\t\t\t\t\tInputStream in = this.launchedVM.getErrorStream();", "-\t\t\t\t\tint read;", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\tread= in.read();", "-\t\t\t\t\t\tif (read != -1)", "-\t\t\t\t\t\t\tSystem.out.print((char) read);", "-\t\t\t\t\t} while (read != -1);", "-\t\t\t\t}", "+\t\t\t\tlauncher = LocalVMLauncher.getLauncher();", "+\t\t\t\tlauncher.setVMArguments(new String[]{\"-verify\"});", "+\t\t\t\tlauncher.setVMPath(JRE_PATH);", "+\t\t\t\tlauncher.setEvalPort(evalPort);", "+\t\t\t\tlauncher.setEvalTargetPath(EVAL_DIRECTORY);", "+\t\t\t\tlauncher.setDebugPort(debugPort);", "+\t\t\t\tthis.launchedVM = launcher.launch();", "-\t\t\t} catch (IOException e) {", "+\t\t\t\tthrow new Error(e.getMessage());", "-\t\t\t// Shut it down", "+\t\t\t// Thread that read the stout of the VM so that the VM doesn't block", "-\t\t\t\tif (this.target != null) {", "-\t\t\t\t\tthis.target.disconnect(); // Close the socket first so that the OS resource has a chance to be freed. ", "-\t\t\t\t}", "-\t\t\t\tint retry = 0;", "-\t\t\t\twhile (launchedVM.isRunning() && (++retry < 20)) {", "+\t\t\t\tstartReader(\"VM's stdout reader\", this.launchedVM.getInputStream(), System.out);", "+\t\t\t} catch (TargetException e) {", "+\t\t\t}", "+", "+\t\t\t// Thread that read the sterr of the VM so that the VM doesn't block", "+\t\t\ttry {", "+\t\t\t\tstartReader(\"VM's sterr reader\", this.launchedVM.getErrorStream(), System.err);", "+\t\t\t} catch (TargetException e) {", "+\t\t\t}", "+", "+\t\t\t// Start JDI connection (try 10 times)", "+\t\t\tfor (int i = 0; i < 10; i++) {", "+\t\t\t\ttry {", "+\t\t\t\t\tVirtualMachineManager manager = org.eclipse.jdi.Bootstrap.virtualMachineManager();", "+\t\t\t\t\tList connectors = manager.attachingConnectors();", "+\t\t\t\t\tif (connectors.size() == 0)", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tAttachingConnector connector = (AttachingConnector)connectors.get(0);", "+\t\t\t\t\tMap args = connector.defaultArguments();", "+\t\t\t\t\t((Connector.Argument)args.get(\"port\")).setValue(String.valueOf(debugPort));", "+\t\t\t\t\t((Connector.Argument)args.get(\"hostname\")).setValue(launcher.getTargetAddress());", "+\t\t\t\t\tthis.vm = connector.attach(args);", "+", "+\t\t\t\t\t// workaround pb with some VMs", "+\t\t\t\t\tthis.vm.resume();", "+", "+\t\t\t\t\tbreak;", "+\t\t\t\t} catch (IllegalConnectorArgumentsException e) {", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\tSystem.out.println(\"Got exception: \" + e.getMessage());", "-\t\t\t\t\t\tThread.sleep(retry * 100);", "-\t\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t\tSystem.out.println(\"Could not contact the VM at \" + launcher.getTargetAddress() + \":\" + debugPort + \". Retrying...\");", "+\t\t\t\t\t\tThread.sleep(100);", "+\t\t\t\t\t} catch (InterruptedException e2) {", "-\t\t\t\tif (launchedVM.isRunning()) {", "-\t\t\t\t\tlaunchedVM.shutDown();", "-\t\t\t\t}", "-\t\t\t} catch (TargetException e) {", "+\t\t\tif (this.vm == null) {", "+\t\t\t\tif (this.launchedVM != null) {", "+\t\t\t\t\t// If the VM is not running, output error stream", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (!this.launchedVM.isRunning()) {", "+\t\t\t\t\t\t\tInputStream in = this.launchedVM.getErrorStream();", "+\t\t\t\t\t\t\tint read;", "+\t\t\t\t\t\t\tdo {", "+\t\t\t\t\t\t\t\tread = in.read();", "+\t\t\t\t\t\t\t\tif (read != -1)", "+\t\t\t\t\t\t\t\t\tSystem.out.print((char)read);", "+\t\t\t\t\t\t\t} while (read != -1);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (TargetException e) {", "+\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t}", "+", "+\t\t\t\t\t// Shut it down", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (this.target != null) {", "+\t\t\t\t\t\t\tthis.target.disconnect(); // Close the socket first so that the OS resource has a chance to be freed.", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint retry = 0;", "+\t\t\t\t\t\twhile (this.launchedVM.isRunning() && (++retry < 20)) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tThread.sleep(retry * 100);", "+\t\t\t\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.launchedVM.isRunning()) {", "+\t\t\t\t\t\t\tthis.launchedVM.shutDown();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (TargetException e) {", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthrow new Error(\"Could not contact the VM\");", "+\t\t\t}", "+", "+\t\t\t// Create context", "+\t\t\tthis.context = new EvaluationContext();", "+", "+\t\t\t// Create target", "+\t\t\tthis.target = new TargetInterface();", "+\t\t\tthis.target.connect(\"localhost\", evalPort, 10000);", "+", "+\t\t\t// Create name environment", "+\t\t\tthis.env = new FileSystem(Util.getJavaClassLibs(), new String[0], null);", "-\t\tthrow new Error(\"Could not contact the VM\");", "+\t\tsuper.setUp();", "-", "-\t// Create context", "-\tthis.context = new EvaluationContext();", "-", "-\t// Create target", "-\tthis.target = new TargetInterface();", "-\tthis.target.connect(\"localhost\", evalPort, 10000);", "-", "-\t// Create name environment", "-\tINameEnvironment env = new FileSystem(Util.getJavaClassLibs(), new String[0], null);", "-", "-\t// Init wrapped suite", "-\tinitTest(fTest, this.context, this.target, this.launchedVM, env);", "-\tinitTest(fTest, vm);", "-}"]}], "num": 8285}
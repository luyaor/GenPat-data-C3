{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0fe2f49fb3d0c0462f3927b374ceaec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40c30cdf5cf555ad1d424cfe2da15465", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "8b61d97704a2b67ed3d29404b8692bdbf30b8b5d", "commitAfterChange": "7fa6d6b6f60d0d2345e743063241c3eb3452b00f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public SearchMatch newDeclarationMatch(ASTNode reference, IJavaElement element, int accuracy, int length, MatchLocator locator)", "signatureAfterChange": " public SearchMatch newDeclarationMatch(ASTNode reference, IJavaElement element, Binding binding, int accuracy, int length, MatchLocator locator)", "diff": ["-public SearchMatch newDeclarationMatch(ASTNode reference, IJavaElement element, int accuracy, int length, MatchLocator locator) {", "+public SearchMatch newDeclarationMatch(ASTNode reference, IJavaElement element, Binding binding, int accuracy, int length, MatchLocator locator) {", "-\t\t\t\t\tmatch = locator.newMethodReferenceMatch(element, accuracy, offset, length, method.isConstructor(), synthetic, method);", "+\t\t\t\t\tmatch = locator.newMethodReferenceMatch(element, binding, accuracy, offset, length, method.isConstructor(), synthetic, method);", "-\t\t\tmatch = locator.newMethodReferenceMatch(element, accuracy, offset, length, constructor.isConstructor(), synthetic, constructor);", "+\t\t\tmatch = locator.newMethodReferenceMatch(element, binding, accuracy, offset, length, constructor.isConstructor(), synthetic, constructor);", "-    return locator.newDeclarationMatch(element, accuracy, reference.sourceStart, length);", "+    return locator.newDeclarationMatch(element, binding, accuracy, reference.sourceStart, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9db0c61739d354224eea1a639c18ec7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "e7089f5e0d97e74b7f75a25fca154e1ec701e9a1", "commitAfterChange": "2df458f51b70c24746e3ff959e17875a1e4746d6", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void startup() throws CoreException", "signatureAfterChange": " \tpublic void start(BundleContext context) throws Exception", "diff": ["-\tpublic void startup() throws CoreException {", "+\tpublic void start(BundleContext context) throws Exception {", "+\t\tsuper.start(context);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b3c4b1ebfb29edf4c4e38c6f51f958", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryTypeConverter.java", "commitBeforeChange": "991fd6e4b6634483ff414608784017adef86e93b", "commitAfterChange": "88f4789ab87b5741bd84f761926c87f3851c7700", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException", "diff": ["-\tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult) throws JavaModelException {", "+\tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult, HashSetOfCharArrayArray typeNames) throws JavaModelException {", "-\t\t\tdecl.returnType = createTypeReference(Signature.toString(method.getReturnType()).toCharArray());", "+\t\t\tdecl.returnType = createTypeReference(Signature.toString(method.getReturnType()).toCharArray(), typeNames);", "-\t\t\tTypeReference typeReference = createTypeReference(Signature.toString(argumentTypeName).toCharArray());", "+\t\t\tTypeReference typeReference = createTypeReference(Signature.toString(argumentTypeName).toCharArray(), typeNames);", "-\t\t\t\t\tcreateTypeReference(Signature.toString(exceptionTypeNames[i]).toCharArray());", "+\t\t\t\t\tcreateTypeReference(Signature.toString(exceptionTypeNames[i]).toCharArray(), typeNames);"]}], "num": 37252}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b16ffa8657cfb4d9ba989c1e69e8c5b7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7119d838eb5b081f7fd6676aa29bdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f40614490d4262be4e6b1da2d796674adcae4653", "commitAfterChange": "2c45e11a23da631b4ad990ef31056ea845ca3f46", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] elementsScope, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] elementsScope, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t\tboolean hasExternalWorkingCopyProject = false;", "+\t\t\t\tIJavaElement element = elementsScope[i];", "+\t\t\t\tif (element.getElementType() == IJavaElement.JAVA_MODEL) {", "+\t\t\t\t\t// ensure external working copies' projects' caches are reset", "+\t\t\t\t\tHashSet projects = JavaModelManager.getJavaModelManager().getExternalWorkingCopyProjects();", "+\t\t\t\t\tif (projects != null) {", "+\t\t\t\t\t\thasExternalWorkingCopyProject = true;", "+\t\t\t\t\t\tIterator iterator = projects.iterator();", "+\t\t\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\t\t\tJavaProject project = (JavaProject) iterator.next();", "+\t\t\t\t\t\t\tproject.resetCaches();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (hasExternalWorkingCopyProject) {", "+\t\t\t\t// flush jar type cache", "+\t\t\t\tJavaModelManager.getJavaModelManager().resetJarTypeCache();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c1e1dcc82ff2cc80449cd8419a0d21e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic boolean visit(TryStatement node)", "signatureAfterChange": " \tpublic boolean visit(TryStatement node)", "diff": ["+\t\tList resources = node.resources();", "+\t\tif (node.getAST().apiLevel() >= AST.JLS4) {", "+\t\t\tif (!node.resources().isEmpty()) {", "+\t\t\t\tthis.buffer.append('(');", "+\t\t\t\tfor (Iterator it = resources.iterator(); it.hasNext(); ) {", "+\t\t\t\t\tVariableDeclarationExpression variable = (VariableDeclarationExpression) it.next();", "+\t\t\t\t\tvariable.accept(this);", "+\t\t\t\t\tif (it.hasNext()) {", "+\t\t\t\t\t\tthis.buffer.append(';');", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.buffer.append(')');", "+\t\t\t}", "+\t\t}"]}], "num": 7393}
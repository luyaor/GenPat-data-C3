{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4007d8d8a11bdfc423a6380f2f2bed3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "358b2fe3c799f6fd1ab26eeb9109350c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblemFactory.java", "commitBeforeChange": "749aa1c27be4903ff44650cbac7fb5e2a22e8990", "commitAfterChange": "500f73122f66aacb24affb61ea382198072d398b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public final String getLocalizedMessage(int id, int elaborationId, String[] problemArguments)", "signatureAfterChange": " public final String getLocalizedMessage(int id, int elaborationId, String[] problemArguments)", "diff": ["-\tString message = (String) this.messageTemplates.get(keyFromID(id & IProblem.IgnoreCategoriesMask));", "-\tif (message == null) {", "+\tString rawMessage = (String) this.messageTemplates.get(keyFromID(id & IProblem.IgnoreCategoriesMask));", "+\tif (rawMessage == null) {", "+\tchar[] message = rawMessage.toCharArray();", "-\t\t// make the substitution. String.replaceAll(String,String) cannot be used since it is", "-\t\t// defined only in 1.4", "-\t\tmessage = new String(CharOperation.replace(", "-\t\t\t\tmessage.toCharArray(),", "-\t\t\t\tFIRST_ARGUMENT,", "-\t\t\t\telaboration.toCharArray()));", "+\t\tmessage = CharOperation.replace(message, FIRST_ARGUMENT, elaboration.toCharArray());", "-\tchar[] messageWithNoDoubleQuotes =", "-\t\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "+\tmessage = CharOperation.replace(message, DOUBLE_QUOTES, SINGLE_QUOTE);", "-\tif (problemArguments == null) return new String(messageWithNoDoubleQuotes);", "+\tif (problemArguments == null) {", "+\t\treturn new String(message);", "+\t}", "-\tint length = messageWithNoDoubleQuotes.length;", "+\tint length = message.length;", "-\t\tif ((end = CharOperation.indexOf('{', messageWithNoDoubleQuotes, start)) > -1) {", "+\t\tif ((end = CharOperation.indexOf('{', message, start)) > -1) {", "-\t\t\toutput.append(messageWithNoDoubleQuotes, start, end - start);", "-\t\t\tif ((start = CharOperation.indexOf('}', messageWithNoDoubleQuotes, end + 1)) > -1) {", "-\t\t\t\tint index = -1;", "-\t\t\t\tString argId = new String(messageWithNoDoubleQuotes, end + 1, start - end - 1);", "+\t\t\toutput.append(message, start, end - start);", "+\t\t\tif ((start = CharOperation.indexOf('}', message, end + 1)) > -1) {", "-\t\t\t\t\tindex = Integer.parseInt(argId);", "-\t\t\t\t\toutput.append(problemArguments[index]);", "+\t\t\t\t\toutput.append(problemArguments[CharOperation.parseInt(message, end + 1, start - end - 1)]);", "-\t\t\t\t\toutput.append(messageWithNoDoubleQuotes, end + 1, start - end);", "+\t\t\t\t\toutput.append(message, end + 1, start - end);", "-\t\t\t\t\t\t+ message", "+\t\t\t\t\t\t+ new String(message)", "-\t\t\t\toutput.append(messageWithNoDoubleQuotes, end, length);", "+\t\t\t\toutput.append(message, end, length);", "-\t\t\tif (output == null) return new String(messageWithNoDoubleQuotes);", "-\t\t\toutput.append(messageWithNoDoubleQuotes, start, length - start);", "+\t\t\tif (output == null) {", "+\t\t\t\treturn new String(message);", "+\t\t\t}", "+\t\t\toutput.append(message, start, length - start);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd30004efac81989e74f6bf6e8689b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "commitAfterChange": "04abb6d1e9cce4ccf64496ee5f7d45399d283bd2", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " \tpublic boolean visit(ParameterizedType node)", "signatureAfterChange": " \tpublic boolean visit(PackageQualifiedType node)", "diff": ["+\t */", "+\tpublic boolean visit(PackageQualifiedType node) {", "+\t\tif (!hasChildrenChanges(node)) {", "+\t\t\treturn doVisitUnchangedChildren(node);", "+\t\t}", "+\t\trewriteRequiredNode(node, PackageQualifiedType.QUALIFIER_PROPERTY);", "+\t\tif (node.getAST().apiLevel() >= AST.JLS8) {", "+\t\t\trewriteTypeAnnotations(node, PackageQualifiedType.ANNOTATIONS_PROPERTY, node.getStartPosition());", "+\t\t}", "+\t\trewriteRequiredNode(node, PackageQualifiedType.NAME_PROPERTY);", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b25554efe9accc0cb1ef98fbb79236e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "8b2f544bc2c01b972e8c0734076c17a325ac4120", "commitAfterChange": "cedc325f2a935c759cba1f1e5e6c7415bee87a4f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " MethodBinding createMethod(AbstractMethodDeclaration method)", "signatureAfterChange": " MethodBinding createMethod(AbstractMethodDeclaration method)", "diff": ["-\t\t\tif (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {", "-\t\t\t\tproblemReporter().illegalThis(argument, method, sourceLevel);", "-\t\t\t}", "-\t\t\tif (argument.annotations != null) {", "-\t\t\t\tmethod.receiverAnnotations = argument.annotations;", "-\t\t\t\tmethod.bits |= ASTNode.HasTypeAnnotations;", "-\t\t\t}", "+\t\t\tproblemReporter().illegalThisDeclaration(argument);", "-\t\t\t\tif (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {", "-\t\t\t\t\tproblemReporter().illegalThis(argument, method, sourceLevel);", "-\t\t\t\t}", "-\t\t\t\tif (argument.annotations != null) {", "-\t\t\t\t\tmethod.receiverAnnotations = argument.annotations;", "-\t\t\t\t\tmethod.bits |= ASTNode.HasTypeAnnotations;", "-\t\t\t\t}", "-\t\t\t}\t", "+\t\t\t\tproblemReporter().illegalThisDeclaration(argument);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (method.receiver != null) {", "+\t\tif (sourceLevel <= ClassFileConstants.JDK1_7) {", "+\t\t\tproblemReporter().illegalSourceLevelForThis(method.receiver);", "+\t\t}", "+\t\tif (method.receiver.annotations != null) {", "+\t\t\tmethod.receiverAnnotations = method.receiver.annotations;", "+\t\t\tmethod.bits |= ASTNode.HasTypeAnnotations;"]}], "num": 37998}
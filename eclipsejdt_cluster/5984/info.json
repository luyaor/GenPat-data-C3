{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8520a20a077fcdf3371688480fc801e4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85f7dfcb3b843bb04b7181883bbc1845", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c55e27c5f4006c1661c0244de499b795ab7c7b74", "commitAfterChange": "60ae573720ab8958f2d1c67e0742d44a98afc95c", "methodNumberBeforeChange": 613, "methodNumberAfterChange": 613, "signatureBeforeChange": " public void testBug286379c() throws CoreException", "signatureAfterChange": " public void testBug286379c() throws CoreException", "diff": ["+\tclass TestResourceChangeListener implements IResourceChangeListener {", "+\t\tboolean valid = false;", "+\t\tpublic void resourceChanged(IResourceChangeEvent event) {", "+\t\t\tSystem.out.println(\"ResourceChangeEvent event:\");", "+\t\t\tSystem.out.println(\"\t- event type: \"+event.getType());", "+\t\t\tSystem.out.println(\"\t- resource: \"+event.getResource());", "+\t\t\tthis.valid = true;", "+\t\t}", "+\t}", "+", "+\tTestResourceChangeListener changeListener = new TestResourceChangeListener();", "-\t\t// Create resource and wait for the refresh as we do not want the", "-\t\t// indexing to be triggered by the resource change event after the", "-\t\t// Java Source content type will be added", "-\t\tIJavaProject proj = createJavaProject(\"P\");", "-\t\tIPath projPath = proj.getPath();", "+\t\t// Create resource", "+\t\tcreateJavaProject(\"P\");", "-\t\trefresh(proj);", "-\t\t// Wait to be sure that indexes are ready as we want to see whether", "-\t\t// they'll be updated or not while adding a Java Source content type", "+\t\t// Wait to be sure that indexes are ready after the resource creation", "-\t\t", "+", "+\t\t// Add the resource listener", "+\t\tgetWorkspace().addResourceChangeListener(changeListener, IResourceChangeEvent.POST_CHANGE);", "+", "+\t\t// Change the file extension", "+\t\t", "+\t\t// Wait for all the resource event before continuing", "+\t\t// Note that if we are not waiting for this event occurring then the search may", "+\t\t// fail as we don't get any specific event from the platform to refresh the indexes.", "+\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=118619", "+\t\tint counter = 0;", "+\t\twhile (!changeListener.valid) {", "+\t\t\ttry {", "+\t\t\t\tThread.sleep(100);", "+\t\t\t}", "+\t\t\tcatch (InterruptedException ie) {", "+\t\t\t\t// skip", "+\t\t\t}", "+\t\t\tassertTrue(\"We should have got a resource event within a 10s delay!\", counter++ < 100);", "+\t\t}", "+", "+\t\t// Search for the new type with new extension", "-\t\t// Actually it would be great if we could get the file in the search result, ", "-\t\t// but currently this doesn't happen as we don't get the appropriate delta", "-\t\t// events from the platform. We should change the test if this is fixed.", "-\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=118619", "-\t\tassertSearchResults(\"No search results expected\", \"\", collector, false /*do not fail if not equals (debug bug 293697)*/);", "+\t\tassertSearchResults(\"Unexpected search results!\",", "+\t\t\t\"Xtorem (not open) [in Xtorem.torem [in p [in <project root> [in P]]]]\",", "+\t\t\tcollector);", "-\t\t// Restarting should make the search to succeed. ", "+\t\t// Delete the file specification", "+\t\tjavaContentType.removeFileSpec(\"torem\", IContentType.FILE_EXTENSION_SPEC);", "+\t\t", "+\t\t// Restarting should update the index file to remove the references of any .torem files", "+\t\twaitUntilIndexesReady();", "+", "+\t\t// Search for the new type with new extension", "-\t\tString expected = \"Xtorem (not open) [in Xtorem.torem [in p [in <project root> [in P]]]]\";", "-\t\tassertSearchResults(expected, collector);", "-\t\tjavaContentType.removeFileSpec(\"torem\", IContentType.FILE_EXTENSION_SPEC);", "-\t\t", "-\t\t// Get the time stamp of the index file", "-\t\tIndexManager manager = JavaModelManager.getIndexManager();", "-\t\tIndex index = manager.getIndex(projPath, true, false);", "-\t\tFile indexFile = index.getIndexFile();", "-\t\tlong lastModified = indexFile.lastModified();", "-\t\t", "-\t\t// Restarting should update the index file to remove the references of any .torem files", "-\t\tsimulateExit();\t\t", "-\t\ttry {", "-\t\t\tThread.sleep(1500); // wait more than one second to be sure that modified time will be different", "-\t\t}", "-\t\tcatch (InterruptedException ie) {", "-\t\t\t// skip", "-\t\t}", "-\t\tsimulateRestart();\t\t", "-\t\t", "-\t\twaitUntilIndexesReady();", "-\t\tIndex newIndex = manager.getIndex(projPath , true, false);", "-\t\tassertTrue(\"Index file should be changed!!!\", newIndex.getIndexFile().lastModified() - lastModified != 0);", "-\t\t", "+\t\tassertSearchResults(\"No search results expected\", \"\", collector);", "+\t\tgetWorkspace().removeResourceChangeListener(changeListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa4cea0d9808d437d290d008b31b6d6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "e5afcb0ec821099a058acc796f2348c4c58a2e3e", "commitAfterChange": "1a36ae2092977e6a13134bbe916d1e02aefe6f2e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic boolean checkNegative5()", "signatureAfterChange": "  \t \tpublic boolean checkNegative5() throws Exception", "diff": ["-\t */", "-\tpublic boolean checkNegative5() {", "-\t\tclass TestElement {", "-\t\t\tString name;", "-\t\t\tTypeElement element;", "-\t\t\tTestElement(String name) {", "-\t\t\t\tthis.name = name;", "-\t\t\t\tthis.element = null;", "-\t\t\t}", "+\tpublic boolean checkNegative5() throws Exception {", "+\t\tList<TypeElement> rootElements = new ArrayList<TypeElement>();", "+\t\tTypeElement element = _elementUtils.getTypeElement(\"targets.negative.pa.Negative5\");", "+\t\tif (null == element) {", "+\t\t\treportError(\"Element Negative5 was not found\");", "+\t\t\treturn false;", "-\t\t", "-\t\tTestElement elements[] = new TestElement[] {", "-\t\t\tnew TestElement(\"targets.negative.pa.Negative5.C1\"),", "-\t\t\tnew TestElement(\"targets.negative.pa.Negative5.C2\"),", "-\t\t\tnew TestElement(\"targets.negative.pa.Negative5.I1\"),", "-\t\t\tnew TestElement(\"targets.negative.pa.Negative5.I2\"),", "-\t\t\tnew TestElement(\"targets.negative.pa.INegative5.C101\"),", "-\t\t\tnew TestElement(\"targets.negative.pa.INegative5.C102\"),", "-\t\t\tnew TestElement(\"targets.negative.pa.INegative5.I101\"),", "-\t\t\tnew TestElement(\"targets.negative.pa.INegative5.I102\")", "-\t\t};", "-\t\tfor (TestElement testElement : elements) {", "-\t\t\ttestElement.element = _elementUtils.getTypeElement(testElement.name);", "-\t\t\tif (null == testElement.element) {", "-\t\t\t\treportError(\"Element \" + testElement.name + \" was not found\");", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\t", "-\t\t\t// TODO: there are substantial differences between javac and Eclipse in how", "-\t\t\t// missing types are recovered (e.g., as error types or as declared types),", "-\t\t\t// and the toString() implementations are also different.  The JSR269 spec", "-\t\t\t// does not require these to match.  Do we want to enforce matching anyway?", "-\t\t\tTypeMirror superClass = testElement.element.getSuperclass();", "-\t\t\tif (_reportFailingCases && superClass == null) {", "-\t\t\t\treportError(\"Element \" + testElement.name + \" has null superclass\");", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tList<? extends TypeMirror> superInterfaces = testElement.element.getInterfaces();", "-\t\t\tif (_reportFailingCases && !_ignoreJavacBugs && (superInterfaces == null || superInterfaces.isEmpty())) {", "-\t\t\t\treportError(\"Element \" + testElement.name + \" has empty list of superinterfaces\");", "-\t\t\t\treturn false;", "-\t\t\t}", "+\t\trootElements.add(element);", "+\t\telement = _elementUtils.getTypeElement(\"targets.negative.pa.INegative5\");", "+\t\tif (null == element) {", "+\t\t\treportError(\"Element INegative5 was not found\");", "+\t\t\treturn false;", "+\t\trootElements.add(element);", "-\t\treturn true;", "+\t\treturn checkModel(rootElements, NEGATIVE_5_MODEL, \"Negative5\");"]}], "num": 5984}
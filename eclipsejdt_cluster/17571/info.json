{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f01419274e9f0c1bd7db7ef3bef7ca2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57b4ca4bac90fcc85be9acb5f370951e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "2102b467360a15c8cee175a15e0e8b3a9bf530a3", "commitAfterChange": "2f99bede247620c1c16748fe7b02dd925afcf7a5", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["+\tint id;", "+\tif (currentMethod.declaringClass.isInterface() ", "+\t\t\t&& inheritedMethod.isProtected()){ // interface inheriting Object protected method", "+\t\tid = IProblem.IncompatibleReturnTypeForNonInheritedInterfaceMethod;", "+\t} else {", "+\t\tid = IProblem.IncompatibleReturnType;", "+\t}", "-\t\t// Return type is incompatible with %1", "-\t\t// 9.4.2 - The return type from the method is incompatible with the declaration.", "-\t\tIProblem.IncompatibleReturnType,", "+\t\tid,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910b05213249738bf8904bdc518acbc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "dbf206d4e9e06fe03458856c4018b487ffcc2b68", "commitAfterChange": "640acef52e5546e028d01779949b08d883ff8475", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void incompatibleExceptionInThrowsClause(SourceTypeBinding type, MethodBinding currentMethod, MethodBinding inheritedMethod, ReferenceBinding exceptionType)", "signatureAfterChange": " public void incompatibleExceptionInThrowsClause(SourceTypeBinding type, MethodBinding currentMethod, MethodBinding inheritedMethod, ReferenceBinding exceptionType)", "diff": ["-\tif (type == currentMethod.declaringClass)", "+\tif (type == currentMethod.declaringClass) {", "+\t\tint id;", "+\t\tif (currentMethod.declaringClass.isInterface() ", "+\t\t\t\t&& !inheritedMethod.isPublic()){ // interface inheriting Object protected method", "+\t\t\tid = IProblem.IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod;", "+\t\t} else {", "+\t\t\tid = IProblem.IncompatibleExceptionInThrowsClause;", "+\t\t}", "-\t\t\tIProblem.IncompatibleExceptionInThrowsClause,", "+\t\t\tid,", "-\telse\t", "+\t} else\t"]}], "num": 17571}
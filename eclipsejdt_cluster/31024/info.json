{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a203875019a3371d663f1d52c5033c7b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f6cdcbff5e457ab5c0ef4e060417845", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatJavadocBlock.java", "commitBeforeChange": "917603919e9d38772fd63709feb3bbda7696f523", "commitAfterChange": "fca5fd453024a315e76f840acd34b846e15423bf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void addBlock(FormatJavadocBlock block, int htmlLevel)", "signatureAfterChange": "  void addBlock(FormatJavadocBlock block, int htmlLevel)", "diff": ["-//\t\tFormatJavadocText lastText = getLastText(block, htmlLevel);", "-\t\t\tFormatJavadocText lastText = textHierarchy[htmlLevel-1];", "+\t\t\tFormatJavadocText lastText = textHierarchy[htmlLevel];", "-\t\t\t\tfor (int i=0; i<MAX_TAG_HIERARCHY && textHierarchy[i] != null; i++) {", "+\t\t\t\tfor (int i=htmlLevel-1; i>=0; i--) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "711dd92b14122f19aba0a9e6dbc1a86c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "73e6c55b6cebcb032c8128286708483f86167b64", "commitAfterChange": "5326f4925981afee39790c88bc133bd18e542033", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int annotationStart, int annotationEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int annotationStart, int annotationEnd)", "diff": ["-\t\t\tif (this.checkAnnotation && this.scanner.source != null) {", "+\t\t\tif (this.checkAnnotation) {", "-\t\t\t\t\t\t\tif (this.annotation == null) {", "+\t\t\t\t\t\t\tif (!this.checkAnnotation) {", "-\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.lineEnd);", "-\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tint tk = readTokenAndConsume();", "-\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\tswitch (tk) {", "-\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "-\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "-\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "-\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\t\t\tparseParam();", "-\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\t\t\tparseThrows();", "-\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "-\t\t\t\t\t\t\t\t\tparseSee();", "+\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.lineEnd);", "+\t\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tint tk = readTokenAndConsume();", "+\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\t\t\tswitch (tk) {", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "+\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "+\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\t\t\t\t\tparseParam();", "+\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\t\t\t\tparseThrows();", "+\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\t\t\t\t\tparseSee();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "+\t\t\t\t\t\t\t\t\t\tparseReturn();", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "+\t\t\t\t\t\t\t\t\t\tparseThrows();", "+\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\t\t\t\t\t\tparseReturn();", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\t\t\t\t\t\tparseThrows();", "-\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcontinue nextLine;", "+\t\t\t\t\t\t\tcontinue nextLine;"]}], "num": 31024}
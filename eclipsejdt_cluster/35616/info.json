{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c82e19a086755249238312077c1a461d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e23cd41bcb004e65c728e3abdb97249", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "7548eaaea6e1259875e63eaf19dcd9a6bb7fd118", "commitAfterChange": "3d5aa7d7eabaf3445aad76f168f1c9da2ba34591", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private int indexOf(String path)", "signatureAfterChange": " private int indexOf(String path, String containerPath)", "diff": ["-private int indexOf(String path) {", "-\tfor (int i = 0; i < this.pathsCount; i++) {", "-\t\tif (this.pathWithSubFolders[i]) {", "-\t\t\tif (path.startsWith(this.paths[i])) {", "-\t\t\t\treturn i;", "+private int indexOf(String path, String containerPath) {", "+\tif (containerPath != null) {", "+\t\t// if container path is known, use the hash to get faster comparison", "+\t\tint index = (containerPath.hashCode()& 0x7FFFFFFF) % this.paths.length;", "+\t\tString currentContainerPath;", "+\t\twhile ((currentContainerPath = this.containerPaths[index]) != null) {", "+\t\t\tif (currentContainerPath.equals(containerPath)) {", "+\t\t\t\tString scopePath = this.paths[index];", "+\t\t\t\tif (encloses(scopePath, path, index))", "+\t\t\t\t\treturn index;", "-\t\t} else {", "-\t\t\t// if not looking at subfolders, this scope encloses the given path ", "-\t\t\t// if this path is a direct child of the scope's ressource", "-\t\t\t// or if this path is the scope's resource (see bug 13919 Declaration for package not found if scope is not project)", "-\t\t\tString scopePath = this.paths[i];", "-\t\t\tif (path.startsWith(scopePath) ", "-\t\t\t\t&& ((scopePath.length() == path.lastIndexOf('/'))", "-\t\t\t\t\t|| (scopePath.length() == path.length()))) {", "-\t\t\t\treturn i;", "-\t\t\t}", "+\t\t\tindex = (index + 1) % this.paths.length;", "+\t\treturn -1;", "+\t}", "+\t", "+\t// fallback to sequentially look at all known paths", "+\tfor (int i = 0, length = this.paths.length; i < length; i++) {", "+\t\tString scopePath = this.paths[i];", "+\t\tif (scopePath == null) continue;", "+\t\tif (encloses(scopePath, path, i))", "+\t\t\treturn i;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e80ff4be7a7d15b7e79cd4aebcc6d5c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "e67c77fc5e097eac99c8909bb016eff7011eb0ce", "commitAfterChange": "5d677f26e6a9dfca4bbd2cd8a965c43c4f46ed94", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private boolean encloses(String scopePath, String path, int index)", "signatureAfterChange": " private boolean encloses(String enclosingPath, String path, int index)", "diff": ["-private boolean encloses(String scopePath, String path, int index) {", "-\tif (this.pathWithSubFolders[index]) {", "-\t\t// TODO (frederic) apply similar change also if not looking at subfolders", "-\t\tint pathLength = path.length();", "-\t\tint scopeLength = scopePath.length();", "-\t\tif (pathLength < scopeLength) {", "-\t\t\treturn false;", "-\t\tif (scopeLength == 0) {", "-\t\t\treturn true;", "-\t\t}", "-\t\tif (pathLength == scopeLength) {", "-\t\t\treturn path.equals(scopePath);", "-\t\t}", "-\t\tif (path.startsWith(scopePath)) {", "-\t\t\tif (scopePath.charAt(scopeLength-1) == '/') scopeLength--;", "-\t\t\treturn path.charAt(scopeLength) == '/';", "-\t\t}", "+ */", "+private boolean encloses(String enclosingPath, String path, int index) {", "+\t// normalize given path as it can come from outside", "+\tpath = normalize(path);", "+\t", "+\tint pathLength = path.length();", "+\tint enclosingLength = enclosingPath.length();", "+\tif (pathLength < enclosingLength) {", "+\t\treturn false;", "+\t}", "+\tif (enclosingLength == 0) {", "+\t\treturn true;", "+\t}", "+\tif (pathLength == enclosingLength) {", "+\t\treturn path.equals(enclosingPath);", "+\t}", "+\tif (!this.isPkgPath[index]) {", "+\t\treturn path.startsWith(enclosingPath)", "+\t\t\t&& path.charAt(enclosingLength) == '/';", "-\t\t// if not looking at subfolders, this scope encloses the given path ", "-\t\t// if this path is a direct child of the scope's ressource", "-\t\t// or if this path is the scope's resource (see bug 13919 Declaration for package not found if scope is not project)", "-\t\tif (path.startsWith(scopePath) ", "-\t\t\t&& ((scopePath.length() == path.lastIndexOf('/'))", "-\t\t\t\t|| (scopePath.length() == path.length()))) {", "+\t\t// if looking at a package, this scope encloses the given path ", "+\t\t// if the given path is a direct child of the folder", "+\t\t// or if the given path path is the folder path (see bug 13919 Declaration for package not found if scope is not project)", "+\t\tif (path.startsWith(enclosingPath) ", "+\t\t\t&& ((enclosingPath.length() == path.lastIndexOf('/'))", "+\t\t\t\t|| (enclosingPath.length() == path.length()))) {"]}], "num": 35616}
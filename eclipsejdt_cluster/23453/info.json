{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67676f2ceaa7afa02654503eba83ea00", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b753746de12654f17405eb93356938d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "6aa15157c4a89778b30fbac85a8e1c76029da034", "commitAfterChange": "d40b3c41bcebac07f42f1f11c9b679087cfd1515", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " protected void checkNullConstraints(Scope scope, TypeBinding[] variables, int rank)", "signatureAfterChange": " protected void checkNullConstraints(Scope scope, TypeBinding[] variables, int rank)", "diff": ["+\tif (this.resolvedType.leafComponentType().isBaseType() && hasNullTypeAnnotation())", "+\t\tscope.problemReporter().illegalAnnotationForBaseType(this, this.annotations[0], this.resolvedType.tagBits & TagBits.AnnotationNullMASK);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2962af4ad86a5e8e0a2ff2898754a534", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/LineBreaksPreparator.java", "commitBeforeChange": "f4e74d70f4887f5aa91dac7da4ca9525dd9faf46", "commitAfterChange": "67e2d890d140f0b0ae567bdbbeeb1263627c1c3f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(EnumDeclaration node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(EnumDeclaration node)", "diff": ["-\t\tfor (int i = 0; i < enumConstants.size() - 1; i++) {", "+\t\tfor (int i = 0; i < enumConstants.size(); i++) {", "-\t\t\tif (declaration.getAnonymousClassDeclaration() != null)", "+\t\t\tif (declaration.getJavadoc() != null)", "+\t\t\t\tthis.tm.firstTokenIn(declaration, TokenNameCOMMENT_JAVADOC).breakBefore();", "+\t\t\tif (declaration.getAnonymousClassDeclaration() != null && i < enumConstants.size() - 1)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dc0b74ec8f9c19d878d916f463bd5c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tif (this.superTypeBinding.erasure().id == T_JavaLangEnum) {", "+\t\t\tscope.problemReporter().cannotExtendEnum(this.anonymousType.binding, this.type, this.superTypeBinding);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5793125f8c2627f4da2da482ba901634", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "signatureAfterChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "diff": ["-\t\t\tif (xmlClasspath == null) return null;", "+\t\t\tif (xmlClasspath == null) {", "+\t\t\t\tif (createMarker && this.getProject().isAccessible()) {", "+\t\t\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "+\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", this.getElementName()))); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\treturn null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c8516dbf45848f2b31aac3a128095ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "133cc95d2c9a207d26745353de164861603fb753", "commitAfterChange": "7a78fb676bbe308e1a83016a002ccaabe9c6d716", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  protected void parseTags(boolean hasLineComment)", "signatureAfterChange": "  protected void parseTags(boolean hasLineComment)", "diff": ["-\t\t\t\t\t\tline.set(i, null);", "-\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end, NLSTag.USED);", "-\t\t\t\t\t\tif (!this.unnecessaryNLSTags.add(tag)) {", "-\t\t\t\t\t\t\tthis.unnecessaryNLSTags.remove(tag);", "-\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(tag);", "+\t\t\t\t\t\tif (line.get(i) == null) {", "+\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tline.set(i, null);", "+\t\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end, NLSTag.USED);", "+\t\t\t\t\t\t\tif (!this.unnecessaryNLSTags.add(tag)) {", "+\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.remove(tag);", "+\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(tag);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b48aee596a9f6022d0b254f3ac7b5fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "9c1e2e3de87cdd04985b57918d50a3f3fc191472", "commitAfterChange": "de85d73a10e0280a45c9d9fcbbd2b35068e06127", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\t} // TODO (stephan): else? (can that happen?)", "+", "+\t\tif (!argumentsTypeElided && blockScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\tAbstractMethodDeclaration.createArgumentBindings(this.arguments, this.binding, this.scope);", "+\t\t\tvalidateNullAnnotations();", "+\t\t\t// no application of null-ness default, hence also no warning regarding redundant null annotation", "+\t\t\tmergeParameterNullAnnotations(blockScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc3e5d9e5f3c7a39b78e4dc61ef8929e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "a7e5a0377318e8990de8386bc8acc55a12a0ce18", "commitAfterChange": "a1910a47d306dad5de948446c853650577052be0", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " public synchronized void removeIndexPath(IPath path)", "signatureAfterChange": " public synchronized void removeIndexPath(IPath path)", "diff": ["+\t\tif (this.participantsContainers != null && this.participantsContainers.get(path.toOSString()) != null) {", "+\t\t\tthis.participantsContainers.removeKey(path.toOSString());\t", "+\t\t\twriteParticipantsIndexNamesFile();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4ea250b8df319b44fdf88595d46ad57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "af330be1052a8d3b1a31b10596d367fb42f89f79", "commitAfterChange": "b3a6b4ddf9d5bd5365b7e897739a001bb2ff860b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["+\t\t\t\t\t\tif (concreteMatch != null && concreteMatch.declaringClass.findSuperTypeWithSameErasure(compatibleMethod.declaringClass) != null)", "+\t\t\t\t\t\t\tif (environment().methodVerifier().doesMethodOverride(concreteMatch, compatibleMethod))", "+\t\t\t\t\t\t\t\tcontinue; // can skip this method since concreteMatch overrides it"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d88ba8d5a1d0b69493504a52a700f208", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "4434d475460f18964b445e0bfcf8b7616e1cbfeb", "commitAfterChange": "2dff73769579b6ebd6a0d5ba6efcaa4bf4c2b6ae", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-", "+\t\t\t// prevent (explicit) super constructor invocation from within enum", "+\t\t\tif (this.accessMode == Super && receiverType.erasure().id == T_JavaLangEnum) {", "+\t\t\t\tscope.problemReporter().cannotInvokeSuperConstructorInEnum(this, methodScope.referenceMethod().binding);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c0904bf1d2e7d4beb4e9a79743348d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "c0dbae49a063a155ff0c3258193fbafd8195ac70", "commitAfterChange": "9c5181b70b0537e98990774a49715d3dbcd13c0f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (receiverType == null)\r", "+\tif (receiverType == null) {\r", "+\t\tscope.problemReporter().codeSnippetMissingMethod(new String(scope.referenceType().name), new String(selector), parametersAsString(argumentTypes), this.sourceStart, this.sourceEnd);\r", "+\t}\r"]}], "num": 23453}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e88a1c60014cddee4aa2f9840e239fa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53508afda4fb5bd9dea6963ae0ac1132", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "e4cb11ce5006b834ab688f1f8723b617c88080a9", "commitAfterChange": "11f1358e49c275ae76b9b676e7f3fef7eb5220cb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\t \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "\t \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\t\t\tNestedTypeBinding nestedType = null;", "-\t\t\t\t\tif (this.receiverType instanceof ParameterizedTypeBinding) {", "-\t\t\t\t\t\tnestedType = (NestedTypeBinding)((ParameterizedTypeBinding) this.receiverType).genericType();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tnestedType = (NestedTypeBinding) this.receiverType;", "-\t\t\t\t\t}", "+\t\t\t\t\tReferenceBinding nestedType = (ReferenceBinding) this.receiverType;", "-\t\t\t\t\t\tcurrentScope.problemReporter().noSuchEnclosingInstance(nestedType.enclosingType, this, false);", "+\t\t\t\t\t\tcurrentScope.problemReporter().noSuchEnclosingInstance(nestedType.enclosingType(), this, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "739b36c0783131666562672d02db7a5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprotected boolean checkAccess( \t\tMethodScope methodScope, \t\tTypeBinding targetType)", "signatureAfterChange": "  \tprotected boolean checkAccess( \t\tMethodScope methodScope, \t\tTypeBinding targetType)", "diff": ["-", "+//TODO: access check will occur during path emulation...", "-\t\tif (methodScope.isConstructorCall) {", "-\t\t\tmethodScope.problemReporter().fieldsOrThisBeforeConstructorInvocation(this);", "+\t\tif (methodScope.isConstructorCall) { ", "+\t\t\tif (targetType == methodScope.enclosingSourceType()) {", "+\t\t\t\tmethodScope.problemReporter().fieldsOrThisBeforeConstructorInvocation(this);", "+\t\t\t}", "-\t\t\tmethodScope.problemReporter().incorrectEnclosingInstanceReference(", "-\t\t\t\tthis,", "-\t\t\t\ttargetType);", "+\t\t\tmethodScope.problemReporter().noSuchEnclosingInstance(targetType, this, false);"]}], "num": 4213}
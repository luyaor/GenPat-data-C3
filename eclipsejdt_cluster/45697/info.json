{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f89f599801d4702f4b5fe7a0e8d9063", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33776245427e48ecf7880632520376e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "acd6e01a074dc7e8d965fb1069619024b8495ae0", "commitAfterChange": "21e62100e74b3df49c1103d1bbce0c63e8dc45e6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\tif (itsInterfaces != NoSuperInterfaces && itsInterfaces != null) // cannot be null, but protect against bug 49809", "+\tif (itsInterfaces != NoSuperInterfaces)", "-\t\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces && itsInterfaces != null) {", "+\t\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {", "-\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces && itsInterfaces != null) {", "+\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3991e001d41b499dda7ca9225959cfaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "557b942f819d62ffe9419db1ce92c3e011ea65a9", "commitAfterChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\t// see specifications p.68", "+\t\t// see specifications 5.5", "-\t\t", "+", "+\t\t// identity conversion cannot be performed upfront, due to side-effects", "+\t\t// like constant propagation", "+\t\t\t\t", "-\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)", "-\t\tif (expressionType == NullBinding) ", "+\t\tif (expressionType == NullBinding) {", "+\t\t\t//\tif (castType.isArrayType()){ // 26903 - need checkcast when casting null to array type", "+\t\t\t//\t\tneedRuntimeCheckcast = true;", "+\t\t\t//\t}", "-", "+\t\t}", "+\t\t\tif (castType == expressionType) return; // identity conversion", "+", "-\t\t\t} else if (", "-\t\t\t\tcastType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "-\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)){ // no runtime error", "+\t\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)){ // no runtime error", "-\t\t\t\tif (Scope.areTypesCompatible(castType, expressionType)) {", "+\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)) ", "+\t\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "-\t\t\t\tif (!Scope.areTypesCompatible(castType, expressionType)) {", "+\t\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "-\t\t\tif (castType != expressionType", "-\t\t\t\t\t&& (Scope.compareTypes(castType, expressionType) == NotRelated)) {", "+\t\t\tif (castType == expressionType) return; // identity conversion", "+\t\t\tif (Scope.compareTypes(castType, expressionType) == NotRelated) {", "-\t\t\treturn;"]}], "num": 45697}
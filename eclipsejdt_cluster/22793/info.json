{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad9429405989280a668c27c80910bf80", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28c25f1081a4678d433bc8dda87643de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "a27853720807c9f08312ac89a14e56c7a4db493a", "commitAfterChange": "a725c7050ef02b8e240004926fb73e6f29767ffe", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  protected Compiler newCompiler()", "signatureAfterChange": "  protected Compiler newCompiler()", "diff": ["-\tif (projectOptions.get(JavaCore.COMPILER_PB_INVALID_JAVADOC).equals(JavaCore.IGNORE) &&", "-\t\tprojectOptions.get(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS).equals(JavaCore.IGNORE) &&", "-\t\tprojectOptions.get(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS).equals(JavaCore.IGNORE))", "-\t{", "-\t\tprojectOptions.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.DISABLED);", "+\tString option = (String) projectOptions.get(JavaCore.COMPILER_PB_INVALID_JAVADOC);", "+\tif (option == null || option.equals(JavaCore.IGNORE)) { // TODO (frederic) see why option is null sometimes while running model tests!?", "+\t\toption = (String) projectOptions.get(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS);", "+\t\tif (option == null || option.equals(JavaCore.IGNORE)) {", "+\t\t\toption = (String) projectOptions.get(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS);", "+\t\t\tif (option == null || option.equals(JavaCore.IGNORE))", "+\t\t\t\tprojectOptions.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.DISABLED);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caeb18b43a3cac481148d899046cd154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "3b50c86701dfe34f072b1b78f29f811d96dd75c2", "commitAfterChange": "ff17444fcc31fe021d6a45c4b051acce1b3894e3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  protected Compiler newCompiler()", "signatureAfterChange": "  protected Compiler newCompiler()", "diff": ["+\t// disable entire javadoc support if not interested in diagnostics", "+\tMap projectOptions = javaBuilder.javaProject.getOptions(true);", "+\tif (projectOptions.get(JavaCore.COMPILER_PB_INVALID_JAVADOC).equals(JavaCore.IGNORE) &&", "+\t\tprojectOptions.get(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS).equals(JavaCore.IGNORE) &&", "+\t\tprojectOptions.get(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS).equals(JavaCore.IGNORE))", "+\t{", "+\t\tprojectOptions.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.DISABLED);", "+\t}", "+\t", "-\t\tjavaBuilder.javaProject.getOptions(true),", "+\t\tprojectOptions,", "-\t// enable the compiler reference info support", "-\tnewCompiler.options.produceReferenceInfo = true;", "+\tCompilerOptions options = newCompiler.options;", "+\t// enable the compiler reference info support", "+\toptions.produceReferenceInfo = true;", "+\t"]}], "num": 22793}
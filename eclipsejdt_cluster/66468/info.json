{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a74197f447b672fd8a8d54c7f3f8d08", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc66d40aaa1b5b4603dfb09212ab8568", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " protected IClasspathEntry[] createClasspath(String[] sourceFoldersAndExclusionPatterns)", "signatureAfterChange": " protected IClasspathEntry[] createClasspath(String[] sourceFoldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns)", "diff": ["-protected IClasspathEntry[] createClasspath(String[] sourceFoldersAndExclusionPatterns) {", "-\tint length = sourceFoldersAndExclusionPatterns.length;", "-\tIClasspathEntry[] classpath = new IClasspathEntry[length/2];", "-\tfor (int i = 0; i < length; i+=2) {", "-\t\tString src = sourceFoldersAndExclusionPatterns[i];", "-\t\tString patterns = sourceFoldersAndExclusionPatterns[i+1];", "-\t\tStringTokenizer tokenizer = new StringTokenizer(patterns, \"|\");", "-\t\tint patternsCount =  tokenizer.countTokens();", "-\t\tIPath[] patternPaths = new IPath[patternsCount];", "-\t\tfor (int j = 0; j < patternsCount; j++) {", "-\t\t\tpatternPaths[j] = new Path(tokenizer.nextToken());", "+protected IClasspathEntry[] createClasspath(String[] sourceFoldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns) {", "+\tint length = sourceFoldersAndPatterns.length;", "+\tint increment = 1;", "+\tif (hasInclusionPatterns) increment++;", "+\tif (hasExclusionPatterns) increment++;", "+\tIClasspathEntry[] classpath = new IClasspathEntry[length/increment];", "+\tfor (int i = 0; i < length; i+=increment) {", "+\t\tString src = sourceFoldersAndPatterns[i];", "+\t\tIPath[] inclusionPatternPaths = new IPath[0];", "+\t\tif (hasInclusionPatterns) {", "+\t\t\tString patterns = sourceFoldersAndPatterns[i+1];", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(patterns, \"|\");", "+\t\t\tint patternsCount =  tokenizer.countTokens();", "+\t\t\tinclusionPatternPaths = new IPath[patternsCount];", "+\t\t\tfor (int j = 0; j < patternsCount; j++) {", "+\t\t\t\tinclusionPatternPaths[j] = new Path(tokenizer.nextToken());", "+\t\t\t}", "-\t\tclasspath[i/2] = JavaCore.newSourceEntry(new Path(src), patternPaths); ", "+\t\tIPath[] exclusionPatternPaths = new IPath[0];", "+\t\tif (hasExclusionPatterns) {", "+\t\t\tString patterns = sourceFoldersAndPatterns[i+increment-1];", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(patterns, \"|\");", "+\t\t\tint patternsCount =  tokenizer.countTokens();", "+\t\t\texclusionPatternPaths = new IPath[patternsCount];", "+\t\t\tfor (int j = 0; j < patternsCount; j++) {", "+\t\t\t\texclusionPatternPaths[j] = new Path(tokenizer.nextToken());", "+\t\t\t}", "+\t\t}", "+\t\tclasspath[i/increment] = JavaCore.newSourceEntry(new Path(src), inclusionPatternPaths, exclusionPatternPaths, null); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0eebadc5de2eb7e75588db66d6ca8cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "5f2456aa4b2b769de40fe8c031c43b1afaff3ffc", "commitAfterChange": "7234934f3efed703cbf030a33d03d36a447aeef6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected IJavaElement getHandleFromMementoForBinaryMembers(String memento, IPackageFragmentRoot root, int rootEnd, int end) throws JavaModelException", "signatureAfterChange": " public IJavaElement getHandleFromMemento(String token, StringTokenizer memento, WorkingCopyOwner owner)", "diff": ["-protected IJavaElement getHandleFromMementoForBinaryMembers(String memento, IPackageFragmentRoot root, int rootEnd, int end) throws JavaModelException {", "-", "-\t//deal with class file and binary members", "-\tIPackageFragment frag = null;", "-\tif (rootEnd == end - 1) {", "-\t\t//default package", "-\t\tfrag= root.getPackageFragment(IPackageFragment.DEFAULT_PACKAGE_NAME);", "-\t} else {", "-\t\tfrag= root.getPackageFragment(memento.substring(rootEnd + 1, end));", "+public IJavaElement getHandleFromMemento(String token, StringTokenizer memento, WorkingCopyOwner owner) {", "+\tswitch (token.charAt(0)) {", "+\t\tcase JEM_COUNT:", "+\t\t\treturn getHandleUpdatingCountFromMemento(memento, owner);", "+\t\tcase JEM_JAVAPROJECT:", "+\t\t\tString projectName = memento.nextToken();", "+\t\t\tJavaElement project = (JavaElement)getJavaProject(projectName);", "+\t\t\treturn project.getHandleFromMemento(memento, owner);", "-\tint oldEnd = end;", "-\tend = memento.indexOf(JavaElement.JEM_TYPE, oldEnd);", "-\tif (end == -1) {", "-\t\t//we ended with a class file ", "-\t\treturn frag.getClassFile(memento.substring(oldEnd + 1));", "-\t}", "-\tIClassFile cf = frag.getClassFile(memento.substring(oldEnd + 1, end));", "-\toldEnd = end;", "-\tend = memento.indexOf(JavaElement.JEM_TYPE, oldEnd);", "-\toldEnd = end;", "-\tend = memento.indexOf(JavaElement.JEM_FIELD, end);", "-\tif (end != -1) {", "-\t\t//binary field", "-\t\tIType type = cf.getType();", "-\t\treturn type.getField(memento.substring(end + 1));", "-\t}", "-\tend = memento.indexOf(JavaElement.JEM_METHOD, oldEnd);", "-\tif (end != -1) {", "-\t\t//binary method", "-\t\toldEnd = end;", "-\t\tIType type = cf.getType();", "-\t\tString methodName;", "-\t\tend = memento.lastIndexOf(JavaElement.JEM_METHOD);", "-\t\tString[] parameterTypes = null;", "-\t\tif (end == oldEnd) {", "-\t\t\tmethodName = memento.substring(end + 1);", "-\t\t\t//no parameter types", "-\t\t\tparameterTypes = new String[] {};", "-\t\t} else {", "-\t\t\tString parameters = memento.substring(oldEnd + 1);", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(parameters, new String(new char[] {JavaElement.JEM_METHOD}));", "-\t\t\tparameterTypes = new String[tokenizer.countTokens() - 1];", "-\t\t\tmethodName= tokenizer.nextToken();", "-\t\t\tint i = 0;", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tparameterTypes[i] = tokenizer.nextToken();", "-\t\t\t\ti++;", "-\t\t\t}", "-\t\t}", "-\t\treturn type.getMethod(methodName, parameterTypes);", "-\t}", "-", "-\t//binary type", "-\treturn cf.getType();", "-}", "+\treturn null;"]}], "num": 66468}
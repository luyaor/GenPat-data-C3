{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc49f7700a64da0db5f8bfecd379f3bc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b32f340f87543d3bdb13139d650d17d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "599efd6b939e7ff91594afd42beb33c22058dc64", "commitAfterChange": "99e5fba4ffda5dc66ee6b0a6664d2454e7652e64", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private IType[] findSuperInterfaces(IGenericType type, ReferenceBinding typeBinding)", "signatureAfterChange": " private IType[] findSuperInterfaces(IGenericType type, ReferenceBinding typeBinding)", "diff": ["-\tReferenceBinding[] interfaceBindings = typeBinding.superInterfaces();", "-\t", "-\t// check if bindings were removed while resolving (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=136095)", "-\tClassScope scope;", "-\tif (typeBinding instanceof SourceTypeBinding && (scope = ((SourceTypeBinding) typeBinding).scope) != null) {", "-\t\tTypeDeclaration typeDeclaration = scope.referenceContext;", "-\t\tTypeReference[] superInterfaces = typeDeclaration == null ? null : typeDeclaration.superInterfaces;", "-\t\tint length;", "-\t\tif (superInterfaces != null && (length = superInterfaces.length) > (interfaceBindings == null ? 0 : interfaceBindings.length)) { // check for interfaceBindings being null (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=139689)", "-\t\t\t", "-\t\t\tinterfaceBindings = new ReferenceBinding[length];", "-\t\t\tint index = 0;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tReferenceBinding superInterface = (ReferenceBinding) superInterfaces[i].resolvedType;", "-\t\t\t\tif (superInterface instanceof ProblemReferenceBinding)", "-\t\t\t\t\tsuperInterface = ((ProblemReferenceBinding) superInterface).closestMatch;", "-\t\t\t\tif (superInterface != null)", "-\t\t\t\t\tinterfaceBindings[index++] = superInterface;", "-\t\t\t}", "-\t\t\tif (index < length)", "-\t\t\t\tSystem.arraycopy(interfaceBindings, 0, interfaceBindings = new ReferenceBinding[index], 0 , index);", "-\t\t\t((SourceTypeBinding) typeBinding).superInterfaces = interfaceBindings;", "-\t\t}", "-\t}", "-\t", "+\tReferenceBinding[] interfaceBindings = typeBinding.superInterfaces();\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdea082d96a3937d626a598a4a4fd0a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void connect( \t\tIGenericType suppliedType, \t\tIGenericType superclass, \t\tIGenericType[] superinterfaces)", "signatureAfterChange": " \tpublic void connect( \t\tIGenericType type, \t\tIType typeHandle, \t\tIType superclassHandle, \t\tIType[] superinterfaceHandles)", "diff": ["-\t\tIGenericType suppliedType,", "-\t\tIGenericType superclass,", "-\t\tIGenericType[] superinterfaces) {", "+\t\tIGenericType type,", "+\t\tIType typeHandle,", "+\t\tIType superclassHandle,", "+\t\tIType[] superinterfaceHandles) {", "-\t\t// convert all infos to handles", "-\t\tIType typeHandle = getHandle(suppliedType);", "-\t\tIType superHandle = null;", "-\t\tif (superclass != null) {", "-\t\t\tif (superclass instanceof HierarchyResolver.MissingType) {", "-\t\t\t\tthis.hierarchy.missingTypes.add(((HierarchyResolver.MissingType)superclass).simpleName);", "-\t\t\t} else {", "-\t\t\t\tsuperHandle = getHandle(superclass);", "-\t\t\t}", "-\t\t}", "-\t\tIType[] interfaceHandles = null;", "-\t\tif (superinterfaces != null && superinterfaces.length > 0) {", "-\t\t\tint length = superinterfaces.length;", "-\t\t\tIType[] resolvedInterfaceHandles = new IType[length];", "-\t\t\tint index = 0;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tIGenericType superInterface = superinterfaces[i];", "-\t\t\t\tif (superInterface != null) {", "-\t\t\t\t\tif (superInterface instanceof HierarchyResolver.MissingType) {", "-\t\t\t\t\t\tthis.hierarchy.missingTypes.add(((HierarchyResolver.MissingType)superInterface).simpleName);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tresolvedInterfaceHandles[index] = getHandle(superInterface);", "-\t\t\t\t\t\tif (resolvedInterfaceHandles[index] != null) {", "-\t\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// resize", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tresolvedInterfaceHandles,", "-\t\t\t\t0,", "-\t\t\t\tinterfaceHandles = new IType[index],", "-\t\t\t\t0,", "-\t\t\t\tindex);", "-\t\t}", "-\t\t\t\t\t+ (superHandle == null", "+\t\t\t\t\t+ (superclassHandle == null", "-\t\t\t\t\t\t: ((JavaElement) superHandle).toStringWithAncestors()));", "+\t\t\t\t\t\t: ((JavaElement) superclassHandle).toStringWithAncestors()));", "-\t\t\tif (interfaceHandles == null || interfaceHandles.length == 0) {", "+\t\t\tif (superinterfaceHandles == null || superinterfaceHandles.length == 0) {", "-\t\t\t\tfor (int i = 0, length = interfaceHandles.length; i < length; i++) {", "+\t\t\t\tfor (int i = 0, length = superinterfaceHandles.length; i < length; i++) {", "+\t\t\t\t\tif (superinterfaceHandles[i] == null) continue;", "-\t\t\t\t\t\t\"    \" + ((JavaElement) interfaceHandles[i]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\t\t\"    \" + ((JavaElement) superinterfaceHandles[i]).toStringWithAncestors()); //$NON-NLS-1$", "-\t\tswitch (suppliedType.getKind()) {", "+\t\tswitch (type.getKind()) {", "-\t\t\t\tif (superHandle == null) {", "+\t\t\t\tif (superclassHandle == null) {", "-\t\t\t\t\tthis.hierarchy.cacheSuperclass(typeHandle, superHandle);", "+\t\t\t\t\tthis.hierarchy.cacheSuperclass(typeHandle, superclassHandle);", "-\t\tif (interfaceHandles == null) {", "-\t\t\tinterfaceHandles = TypeHierarchy.NO_TYPE;", "+\t\tif (superinterfaceHandles == null) {", "+\t\t\tsuperinterfaceHandles = TypeHierarchy.NO_TYPE;", "-\t\tthis.hierarchy.cacheSuperInterfaces(typeHandle, interfaceHandles);", "+\t\tthis.hierarchy.cacheSuperInterfaces(typeHandle, superinterfaceHandles);", "-\t\tthis.hierarchy.cacheFlags(typeHandle, suppliedType.getModifiers());", "+\t\tthis.hierarchy.cacheFlags(typeHandle, type.getModifiers());"]}], "num": 56592}
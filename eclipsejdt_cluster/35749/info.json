{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06f6dfd36689efcc1a0911db277d58a3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "786e64139f0c3dee055ba86968d72c28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "7eeebb70e2ff491ab9bcb9989009c102bc6dce17", "commitAfterChange": "922a8f2234ba62b5ea80c3fa8e1983d8481a3bfb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry entry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tboolean insideOriginalProject, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots) throws JavaModelException", "signatureAfterChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry entry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tboolean insideOriginalProject, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots) throws JavaModelException", "diff": ["-\t\t\t\tJavaProject requiredProject = (JavaProject)getJavaModel().getJavaProject(entryPath.segment(0));", "-\t\t\t\tIProject requiredProjectRsc = requiredProject.getProject();", "-\t\t\t\tif (requiredProjectRsc.exists() && requiredProjectRsc.isOpen()){ // special builder binary output", "-\t\t\t\t\trootIDs.add(rootID);", "-\t\t\t\t\trequiredProject.computePackageFragmentRoots(", "-\t\t\t\t\t\trequiredProject.getResolvedClasspath(true), ", "-\t\t\t\t\t\taccumulatedRoots, ", "-\t\t\t\t\t\trootIDs, ", "-\t\t\t\t\t\tfalse, ", "-\t\t\t\t\t\tcheckExistency, ", "-\t\t\t\t\t\tretrieveExportedRoots);", "-\t\t\t\t}", "+\t\t\t\tIResource member = workspaceRoot.findMember(entryPath);", "+\t\t\t\tif (member != null && member.getType() == IResource.PROJECT){// double check if bound to project (23977)", "+\t\t\t\t\tIProject requiredProjectRsc = (IProject) member;", "+\t\t\t\t\tif (requiredProjectRsc.exists() && requiredProjectRsc.isOpen()){ // special builder binary output", "+\t\t\t\t\t\trootIDs.add(rootID);", "+\t\t\t\t\t\tJavaProject requiredProject = (JavaProject)JavaCore.create(requiredProjectRsc);", "+\t\t\t\t\t\trequiredProject.computePackageFragmentRoots(", "+\t\t\t\t\t\t\trequiredProject.getResolvedClasspath(true), ", "+\t\t\t\t\t\t\taccumulatedRoots, ", "+\t\t\t\t\t\t\trootIDs, ", "+\t\t\t\t\t\t\tfalse, ", "+\t\t\t\t\t\t\tcheckExistency, ", "+\t\t\t\t\t\t\tretrieveExportedRoots);", "+\t\t\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b02a8643ddbbe83bf54106a43a5a45c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "9951b7a54ba18cc36a88513505c20a6b6559265f", "commitAfterChange": "37e893fac6e74361f92234e78fe4ff338a9de8c2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tpublic void computePackageFragmentRoots(\r \t\tIClasspathEntry entry,\r \t\tObjectVector accumulatedRoots, \r \t\tObjectSet visitedProjects, \r \t\tboolean insideOriginalProject,\r \t\tboolean checkExistency,\r \t\tboolean computeBuilderRoots)", "signatureAfterChange": "\r \tpublic void computePackageFragmentRoots(\r \t\tIClasspathEntry entry,\r \t\tObjectVector accumulatedRoots, \r \t\tObjectSet rootIDs, \r \t\tboolean insideOriginalProject,\r \t\tboolean checkExistency,\r \t\tboolean computeBuilderRoots)", "diff": ["-\t\tObjectSet visitedProjects, \r", "+\t\tObjectSet rootIDs, \r", "-\t\tIWorkspaceRoot workspaceRoot = getWorkspace().getRoot();\r", "+\t\tString rootID = ((ClasspathEntry)entry).rootID();\r", "+\t\tif (rootIDs.contains(rootID)) return;\r", "+\r", "-\r", "-\t\t// existency check\r", "-\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);\r", "-\t\tif (target == null) return;\r", "+\t\tIWorkspaceRoot workspaceRoot = getWorkspace().getRoot();\r", "-\t\t\t\t\r", "+\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);\r", "+\t\t\t\t\tif (target == null) return;\r", "+\r", "+\t\t\t\t\t\trootIDs.add(rootID);\r", "+\r", "+\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);\r", "+\t\t\t\tif (target == null) return;\r", "+\r", "+\t\t\t\t\t\t\trootIDs.add(rootID);\r", "-\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\trootIDs.add(rootID);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\trootIDs.add(rootID);\r", "-\r", "-\t\t\t\tif (requiredProject.getProject().isOpen()){ // special builder binary output\r", "+\t\t\t\tIProject requiredProjectRsc = requiredProject.getProject();\r", "+\t\t\t\tif (requiredProjectRsc.exists() && requiredProjectRsc.isOpen()){ // special builder binary output\r", "-\t\t\t\t\trequiredProject.computePackageFragmentRoots(accumulatedRoots, visitedProjects, false, checkExistency, computeBuilderRoots);\r", "+\t\t\t\t\trootIDs.add(rootID);\r", "+\t\t\t\t\trequiredProject.computePackageFragmentRoots(accumulatedRoots, rootIDs, false, checkExistency, computeBuilderRoots);\r"]}], "num": 35749}
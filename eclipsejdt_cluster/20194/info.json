{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5d4050a49a75d472761ad43672fea88", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fd5cecf506f682e4f7ea47d5117224c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 617, "methodNumberAfterChange": 617, "signatureBeforeChange": " \tpublic void test613()", "signatureAfterChange": " \tpublic void test613()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Map.java (at line 8)\\n\" + ", "-\t\t\t\"\tvoid a(Entry<String> e) { } // Entry<String> is illegal (eclipse accepts)\\n\" + ", "-\t\t\t\"\t       ^^^^^\\n\" + ", "-\t\t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in Map.java (at line 9)\\n\" + ", "-\t\t\t\"\tvoid c(Map.Entry<String> e) { } // illegal (correctly flagged)\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^\\n\" + ", "-\t\t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. ERROR in Map.java (at line 8)\\n\" + ", "+    \t\t\"\tvoid a(Entry<String> e) { } // Entry<String> is illegal (eclipse accepts)\\n\" + ", "+    \t\t\"\t       ^^^^^\\n\" + ", "+    \t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. ERROR in Map.java (at line 9)\\n\" + ", "+    \t\t\"\tvoid c(Map.Entry<String> e) { } // illegal (correctly flagged)\\n\" + ", "+    \t\t\"\t       ^^^^^^^^^\\n\" + ", "+    \t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. WARNING in Map.java (at line 10)\\n\" + ", "+    \t\t\"\tvoid b(Entry e) { } // OK\\n\" + ", "+    \t\t\"\t       ^^^^^\\n\" + ", "+    \t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<M>.Entry<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b6ac39c1d9c4098416ab99c120d5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\t\"\t* @param <T> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\t\"\t* @param <V> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\t\"\t* @param <U> Type parameter 1\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" +", "-\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @param <T> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @param <V> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t* @param <U> Type parameter 1\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Exceptions cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c9e496f35cc334536f7650ccec7128", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 426, "methodNumberAfterChange": 426, "signatureBeforeChange": " \tpublic void test422()", "signatureAfterChange": " \tpublic void test422()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\treturn new X();\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9cc0d7e6fd4f7994f233545af3aa485", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 315, "methodNumberAfterChange": 315, "signatureBeforeChange": " \tpublic void test311()", "signatureAfterChange": " \tpublic void test311()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tthis.foo((List)null);\\n\" + ", "+\t\t\t\"\t          ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80e59e3e4a35298705163f1acabb790", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 577, "methodNumberAfterChange": 577, "signatureBeforeChange": " \tpublic void test573()", "signatureAfterChange": " \tpublic void test573()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tdoWithEnumClass((Class<Enum>) cl);\\n\" + ", "+\t\t\t\"\t                       ^^^^\\n\" + ", "+\t\t\t\"Type safety: Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" + "]}], "num": 20194}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8eb682c61a59a775530ff4946a3abf2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f7812e7bd8411ecb837eda3661f6f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "6486279fd39d7600a3c581a75f5a979b2834ec56", "commitAfterChange": "ec093de0c723a8394ab4c83656f6e94579a11225", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " private static void initVersion()", "signatureAfterChange": " private static void initVersion(StringBuffer buffer)", "diff": ["-private static void initVersion() {", "+private static void initVersion(StringBuffer buffer) {", "-\tString version = null;", "-\tString patch = null;", "-\tboolean closed = false;", "+\tJDT_CORE_HEAD = true;", "-\t\t\t\tboolean first = version == null;", "-\t\t\t\tversion = line.substring(line.indexOf('\"')+1, line.lastIndexOf('\"'));", "+\t\t\t\tboolean first = JDT_CORE_VERSION == null;", "+\t\t\t\tJDT_CORE_VERSION = line.substring(line.indexOf('\"')+1, line.lastIndexOf('\"'));", "-\t\t\t\tclosed = line.indexOf(\"%date%\") < 0;", "-\t\t\t\tECLIPSE_VERSION = \"v\"+line.substring(12, 13)+line.substring(14, 15);", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(line);", "+\t\t\t\ttokenizer.nextToken(); // 'Eclipse'", "+\t\t\t\ttokenizer.nextToken(); // 'SDK'", "+\t\t\t\tString milestone = tokenizer.nextToken();", "+\t\t\t\tECLIPSE_VERSION = \"v\"+milestone.charAt(0)+milestone.charAt(2);", "+\t\t\t\tECLIPSE_MILESTONE = milestone.substring(3);", "+\t\t\t\ttokenizer.nextToken(); // '-'", "+\t\t\t\tJDT_CORE_HEAD = tokenizer.nextToken().equals(\"%date%\");", "-\t\t\t\t\tpatch = line;", "+\t\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(line);", "+\t\t\t\t\ttokenizer.nextToken(); // 'Patch'", "+\t\t\t\t\tString version = tokenizer.nextToken();", "+\t\t\t\t\tif (version.length() == 3 && version.charAt(0) == 'v') {", "+\t\t\t\t\t\tPATCH_VERSION = version;", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\tPATCH_BUG = tokenizer.nextToken();", "+\t\t\t\t\t}", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tInteger.parseInt(PATCH_BUG);", "+\t\t\t\t\t}", "+\t\t\t\t\tcatch (NumberFormatException nfe) {", "+\t\t\t\t\t\tSystem.err.println(\"Invalid patch bug number noticed in JDT/Core buildnotes:\"+PATCH_BUG);", "+\t\t\t\t\t}", "-\t\t\t\tif (closed) break;", "+\t\t\t\tif (!JDT_CORE_HEAD) break;", "-\tSystem.out.print(\"Version   : \");", "-\tif (patch != null) {", "-\t\tSystem.out.print(patch);", "-\t\tSystem.out.print(\" applied on \");", "+", "+\t// Log version info", "+\tbuffer.append(\"Version   : \");", "+\tif (PATCH_BUG != null) {", "+\t\tbuffer.append(PATCH_BUG);", "+\t\tbuffer.append(' ');", "+\t\tbuffer.append(PATCH_VERSION);", "+\t\tbuffer.append(\" applied on \");", "-\tif (!closed) {", "-\t\tSystem.out.print(\"HEAD on top of \");", "+\tif (JDT_CORE_HEAD) {", "+\t\tbuffer.append(\"HEAD on top of \");", "-\tSystem.out.println(version);", "+\tbuffer.append(JDT_CORE_VERSION);", "+\tbuffer.append(LINE_SEPARATOR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb9b20e0b1dfc03ac282bc72ef1bdfa4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\t\tboolean hasTokens = false;", "+\t\t\tboolean textOnNewLine = needIndentation;", "+\t    \t\tint tokensBufferLength = tokensBuffer.length();", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "-\t\t\t\t\t\thasTokens = true;", "+\t\t\t\t\t\tif (tokensBufferLength > 0) {", "+\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\t\tthis.column += tokensBufferLength;", "+\t\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttextOnNewLine = false;", "-\t    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+\t    \t\tint lastColumn = this.column + tokensBufferLength + tokenLength;", "-\t    \t\t\t\tthis.lastNumberOfNewLines++; // in case we leave just after", "+\t    \t\t\t\tthis.lastNumberOfNewLines++; // the javadoc will become multi lines", "-\t\t\t\tif (lastColumn > maxColumn) {", "+\t\t\t\tif (lastColumn > maxColumn && token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || tokensBuffer.charAt(tokensBufferLength-1) != '@')) {", "-\t\t\t\t\tboolean alreadyHasNewLine = !hasTokens && tokensBuffer.length() > 0 && firstText && !isHtmlTag && this.lastNumberOfNewLines > 0;", "-\t\t\t\t\tif (!alreadyHasNewLine) {", "-\t\t\t\t\t\tif (lastColumn == this.column) {", "+\t\t\t\t\tif (!isHtmlTag && (firstColumn+tokensBufferLength+tokenLength) >= maxColumn) {", "+\t\t\t\t\t\t// there won't be enough room even if we break the line before the buffered tokens", "+\t\t\t\t\t\t// So add the buffered tokens now", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tthis.column += tokensBufferLength;", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\ttokensBufferLength = 0;", "+\t\t\t\t\t\ttextOnNewLine = false;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!textOnNewLine) {", "+\t\t\t\t\t\tif (headerLine && lastColumn == this.column) {", "-\t\t\t    \tif (tokensBuffer.length() > 0) {", "+\t\t\t    \tif (tokensBufferLength > 0) {", "+\t\t\t\t\t\ttokensBufferLength = 0;", "-\t\t\t\t\thasTokens = true;", "+\t\t\t\t\ttextOnNewLine = false;"]}], "num": 54441}
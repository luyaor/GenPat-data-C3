{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d28164540045fcf0f958ee6c97b3743", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b8f738f989018b8dedb7e7ecda5e611", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "bb670e5ec8185e24981d836127d58e53e56c1ba8", "commitAfterChange": "83a5df02089ecb5f7e6df978c59083c15170780c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic InstanceOfExpression(Expression expression, TypeReference type)", "signatureAfterChange": "  public InstanceOfExpression(Expression expression, TypeReference type)", "diff": ["-\tpublic InstanceOfExpression(Expression expression, TypeReference type) {", "+public InstanceOfExpression(Expression expression, TypeReference type) {", "+\tthis.expression = expression;", "+\tthis.type = type;", "+\tthis.bits |= INSTANCEOF << OperatorSHIFT;", "+\tthis.sourceStart = expression.sourceStart;", "+\tthis.sourceEnd = type.sourceEnd;", "+}", "-\t\tthis.expression = expression;", "-\t\tthis.type = type;", "-\t\ttype.bits |= IgnoreRawTypeCheck; // no need to worry about raw type usage", "-\t\tthis.bits |= INSTANCEOF << OperatorSHIFT;", "-\t\tthis.sourceStart = expression.sourceStart;", "-\t\tthis.sourceEnd = type.sourceEnd;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9d7a5280c83d0f772b0c268af9ae056", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic BinaryExpression(Expression left, Expression right, int operator)", "signatureAfterChange": "  public BinaryExpression(Expression left, Expression right, int operator)", "diff": ["-\tpublic BinaryExpression(Expression left, Expression right, int operator) {", "+public BinaryExpression(Expression left, Expression right, int operator) {", "+\tthis.left = left;", "+\tthis.right = right;", "+\tthis.bits |= operator << ASTNode.OperatorSHIFT; // encode operator", "+\tthis.sourceStart = left.sourceStart;", "+\tthis.sourceEnd = right.sourceEnd;", "+}", "-\t\tthis.left = left;", "-\t\tthis.right = right;", "-\t\tthis.bits |= operator << OperatorSHIFT; // encode operator", "-\t\tthis.sourceStart = left.sourceStart;", "-\t\tthis.sourceEnd = right.sourceEnd;", "-\t}"]}], "num": 28671}
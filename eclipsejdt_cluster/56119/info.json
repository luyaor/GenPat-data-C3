{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e29c81757f3d15d6e8473a59c1ed8463", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "257f8786856c94f6fdf6428ad3836086", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "c7494793aa1ed6a2f75240b5a076591b5a3e9bf6", "commitAfterChange": "54e21838d5d72a577ad5b83bd2ddcc9c60b93259", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "signatureAfterChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "diff": ["-\t\t\t\t\tIClasspathEntry[] fileEntries = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tString fileClasspathString = project.loadClasspath();", "-\t\t\t\t\t\tif (fileClasspathString != null) {", "-\t\t\t\t\t\t\tfileEntries = project.readPaths(fileClasspathString);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (Assert.AssertionFailedException e) { // failed creating CP entries from file", "-\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\t\tUtil.bind(\"classpath.illegalEntryInClasspathFile\", project.getElementName(), e.getMessage()), //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\t\tIClasspathEntry[] fileEntries = project.readClasspathFile(true/*create markers*/, false/*don't log problems*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4033b594e0b42bd1cba2421e3a751332", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c7494793aa1ed6a2f75240b5a076591b5a3e9bf6", "commitAfterChange": "54e21838d5d72a577ad5b83bd2ddcc9c60b93259", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource)\tthrows JavaModelException", "signatureAfterChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource)\tthrows JavaModelException", "diff": ["+\t\t\t\tIClasspathEntry[] classpath = this.readClasspathFile(false/*don't create markers*/, true/*log problems*/);", "-\t\t\t\tIClasspathEntry[] classpath = null;", "-", "-\t\t\t\t// read from file", "-\t\t\t\ttry {", "-\t\t\t\t\tString sharedClasspath = loadClasspath();", "-\t\t\t\t\tif (sharedClasspath != null) {", "-\t\t\t\t\t\tclasspath = readPaths(sharedClasspath);", "-\t\t\t\t\t}", "-\t\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t\tif (JavaModelManager.VERBOSE && this.getProject().isAccessible()){", "-\t\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+\"/.classpath, will revert to default classpath\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} catch(IOException e){", "-\t\t\t\t\tif (JavaModelManager.VERBOSE && this.getProject().isAccessible()){", "-\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t+\"/.classpath, will revert to default classpath\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} catch (Assert.AssertionFailedException e) { // failed creating CP entries from file", "-\t\t\t\t\tif (JavaModelManager.VERBOSE && this.getProject().isAccessible()){", "-\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t+\"/.classpath, will be marked as invalid\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tclasspath = INVALID_CLASSPATH;", "-\t\t\t\t}"]}], "num": 56119}
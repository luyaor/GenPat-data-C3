{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "620c926df9df8eb05f92ea436165b582", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1da0338b703d734a6e93e579b7bfb80f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate void updatePackageStatement(IDOMCompilationUnit domCU, String[] pkgName)", "signatureAfterChange": " \tprivate void updatePackageStatement(CompilationUnit astCU, String[] pkgName, IDocument document) throws JavaModelException", "diff": ["-    // TODO - JDOM - remove once model ported off of JDOM", "-\tprivate void updatePackageStatement(IDOMCompilationUnit domCU, String[] pkgName) {", "+\tprivate void updatePackageStatement(CompilationUnit astCU, String[] pkgName, IDocument document) throws JavaModelException {", "-\t\tboolean seenPackageNode = false;", "-\t\tEnumeration nodes = domCU.getChildren();", "-\t\twhile (nodes.hasMoreElements()) {", "-\t\t\tIDOMNode node = (IDOMNode) nodes.nextElement();", "-\t\t\tif (node.getNodeType() == IDOMNode.PACKAGE) {", "-\t\t\t\tif (! defaultPackage) {", "-\t\t\t\t\tnode.setName(Util.concatWith(pkgName, '.'));", "-\t\t\t\t} else {", "-\t\t\t\t\tnode.remove();", "-\t\t\t\t}", "-\t\t\t\tseenPackageNode = true;", "-\t\t\t\tbreak;", "-\t\t\t}", "+\t\tAST ast = astCU.getAST();", "+\t\tASTRewrite rewriter = ASTRewrite.create(ast);", "+\t\tif (defaultPackage) {", "+\t\t\t// remove existing package statement", "+\t\t\tif (astCU.getPackage() != null)", "+\t\t\t\trewriter.set(astCU, CompilationUnit.PACKAGE_PROPERTY, null, null);", "+\t\t} else {", "+\t\t\t// add new package statement or replace existing", "+\t\t\torg.eclipse.jdt.core.dom.PackageDeclaration pkg = ast.newPackageDeclaration();", "+\t\t\tName name = ast.newName(pkgName);", "+\t\t\tpkg.setName(name);", "+\t\t\trewriter.set(astCU, CompilationUnit.PACKAGE_PROPERTY, pkg, null);", "-\t\tif (!seenPackageNode && !defaultPackage) {", "-\t\t\t//the cu was in a default package...no package declaration", "-\t\t\t//create the new package declaration as the first child of the cu", "-\t\t\tIDOMPackage pkg = fFactory.createPackage(\"package \" + Util.concatWith(pkgName, '.') + \";\" + org.eclipse.jdt.internal.compiler.util.Util.LINE_SEPARATOR); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tIDOMNode firstChild = domCU.getFirstChild();", "-\t\t\tif (firstChild != null) {", "-\t\t\t\tfirstChild.insertSibling(pkg);", "-\t\t\t} // else the cu was empty: leave it empty", "-\t\t}", "+ \t\tTextEdit edits = rewriter.rewriteAST(document, null);", "+ \t\ttry {", "+\t \t\tedits.apply(document);", "+ \t\t} catch (BadLocationException e) {", "+ \t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.INVALID_CONTENTS);", "+ \t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c87194100544f10079072edb42da5da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 13, "signatureBeforeChange": " public TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope)", "signatureAfterChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "diff": ["+", "+public boolean isCompatibleWith(TypeBinding targetType, final Scope scope) {", "+\tif (this.argumentsHaveErrors || this.binding == null || !this.binding.isValidBinding() || targetType == null || scope == null)", "+\t\treturn false;", "+\tTypeBinding allocationType = this.resolvedType;", "+\tif (isPolyExpression()) {", "+\t\tTypeBinding originalExpectedType = this.typeExpected;", "+\t\ttry {", "+\t\t\tthis.typeExpected = targetType;", "+\t\t\tReferenceBinding genericType = ((ParameterizedTypeBinding) this.resolvedType).genericType();", "+\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(genericType, genericType.typeVariables(), genericType.enclosingType());", "+\t\t\tTypeBinding [] inferredTypes = inferElidedTypes(parameterizedType, this.resolvedType.enclosingType(), this.argumentTypes, scope);", "+\t\t\tif (inferredTypes == null)", "+\t\t\t\treturn false;", "+\t\t\tallocationType = scope.environment().createParameterizedType(genericType, inferredTypes, ((ParameterizedTypeBinding) this.resolvedType).enclosingType());", "+\t\t} finally {", "+\t\t\tthis.typeExpected = originalExpectedType;", "+\t\t}", "+\t}", "+\treturn allocationType != null && allocationType.isCompatibleWith(targetType, scope);", "+}", "-}", "-public TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope) {", "-\tthis.typeExpected = targetType;", "-\tboolean needsUpdate = this.binding == null || \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// not yet resolved", "-\t\t\t(this.resolvedType != null && targetType != null && !this.resolvedType.isCompatibleWith(targetType));\t// previous attempt was wrong", "-\tif (needsUpdate && this.suspendedResolutionState != null && !this.suspendedResolutionState.hasReportedError) {", "-\t\t// Attempt to resolve half resolved diamond", "-\t\tresolvePart2(this.suspendedResolutionState);", "-\t}", "-\t// confer MessageSend.checkAgainstFinalTargetType(,,):", "-\tif (this.binding instanceof ParameterizedGenericMethodBinding) {", "-\t\tInferenceContext18 ctx = getInferenceContext((ParameterizedMethodBinding) this.binding);", "-\t\tif (ctx != null && ctx.stepCompleted < InferenceContext18.TYPE_INFERRED) {", "-\t\t\tthis.typeExpected = targetType;", "-\t\t\tMethodBinding updatedBinding = ctx.inferInvocationType(this, (ParameterizedGenericMethodBinding) this.binding);", "-\t\t\tif (updateBindings(updatedBinding, targetType)) {", "-\t\t\t\tASTNode.resolvePolyExpressionArguments(this, updatedBinding, scope);", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (this.suspendedResolutionState != null) {", "-\t\treturn resolvePart3(this.suspendedResolutionState);", "-\t}", "-\treturn this.resolvedType;"]}], "num": 22522}
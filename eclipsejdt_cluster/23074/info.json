{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f99c005a0bdbde705840b8da189c94af", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aa7728c0428476d13e51cdf805d2414", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompilationUnitTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testGetTypes() throws JavaModelException", "signatureAfterChange": " public void testGetTypes() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Incorrect superclassType for the \" + i + \" type\", superclassType[i], types[i].getSuperclassType());", "+\t\tassertEquals(\"Incorrect superclassType for the \" + i + \" type\", superclassType[i], types[i].getSuperclassTypeSignature());", "-\t\tassertEquals(\"Incorrect superInterfaceTypes for the \" + i + \" type\", superInterfaceTypes[i].length, types[i].getSuperInterfaceTypes().length);", "-\t\tassertEquals(\"Incorrect formalTypeParameters for the \" + i + \" type\", formalTypeParameters[i].length, types[i].getTypeParameters().length);", "+\t\tassertEquals(\"Incorrect superInterfaceTypes for the \" + i + \" type\", superInterfaceTypes[i].length, types[i].getSuperInterfaceTypeSignatures().length);", "+\t\tassertEquals(\"Incorrect formalTypeParameters for the \" + i + \" type\", formalTypeParameters[i].length, types[i].getTypeParameterSignatures().length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c635395fff7e6c9a996f13ad5de884c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testGetElementType()", "signatureAfterChange": " public void testGetElementType()", "diff": ["-\tassertTrue(\"Signature#getElementType is not correct1\", Signature.getElementType(\"[[[[QString;\").equals(\"QString;\"));", "-\tassertTrue(\"Signature#getElementType is not correct2\", Signature.getElementType(\"QString;\").equals(\"QString;\"));", "-\tassertTrue(\"Signature#getElementType is not correct2\", Signature.getElementType(\"[[I\").equals(\"I\"));", "+\tassertEquals(\"Signature#getElementType is not correct1\", \"QString;\",", "+\t\t\tSignature.getElementType(\"[[[[QString;\"));", "+\tassertEquals(\"Signature#getElementType is not correct2\", \"QString;\",", "+\t\t\tSignature.getElementType(\"QString;\"));", "+\tassertEquals(\"Signature#getElementType is not correct2\", \"I\",", "+\t\t\tSignature.getElementType(\"[[I\"));", "-\tassertTrue(", "-\t\t\"Signature#getElementType not correct\", ", "-\t\tSignature.getElementType(\"[[[[Qlist<Qstring;>;\").equals(\"Qlist<Qstring;>;\"));", "+\tassertEquals(", "+\t\t\"Signature#getElementType not correct\", \"Qlist<Qstring;>;\",", "+\t\tSignature.getElementType(\"[[[[Qlist<Qstring;>;\"));"]}], "num": 23074}
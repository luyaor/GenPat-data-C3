{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71fd5dcebeb168a87b7e8fc45441c862", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d817d5e3ab51e86c0ed60073390869a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " \tpublic void test043e()", "signatureAfterChange": " \tpublic void test043e()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in p\\\\X.java (at line 5)\\n\" +", "-\t\t\t\"\tpublic X() { foo(data.l); }\\n\" +", "-\t\t\t\"\t             ^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation foo(List...) of the generic method foo(List<T>...) of type Y\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in p\\\\X.java (at line 5)\\n\" +", "-\t\t\t\"\tpublic X() { foo(data.l); }\\n\" +", "-\t\t\t\"\t                 ^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in p\\\\Y.java (at line 4)\\n\" +", "-\t\t\t\"\tList l = null;\\n\" +", "-\t\t\t\"\t^^^^\\n\" +", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in p\\\\X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic X() { foo(data.l); }\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety : A generic array of List<Object> is created for a varargs parameter\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in p\\\\X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic X() { foo(data.l); }\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>...) of type Y\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in p\\\\X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic X() { foo(data.l); }\\n\" + ", "+\t\t\t\"\t                 ^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in p\\\\Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tList l = null;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dff98f13ba4e8eb9ba391501ed327455", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 138, "signatureBeforeChange": " \tpublic void test043d()", "signatureAfterChange": " \tpublic void test043d()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in p\\\\X.java (at line 6)\\n\" +", "-\t\t\t\"\tpublic X() { foo(data.l); }\\n\" +", "-\t\t\t\"\t             ^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation foo(List...) of the generic method foo(List<T>...) of type Z\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in p\\\\X.java (at line 6)\\n\" +", "-\t\t\t\"\tpublic X() { foo(data.l); }\\n\" +", "-\t\t\t\"\t                 ^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in p\\\\Y.java (at line 4)\\n\" +", "-\t\t\t\"\tList l = null;\\n\" +", "-\t\t\t\"\t^^^^\\n\" +", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in p\\\\X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic X() { foo(data.l); }\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety : A generic array of List<Object> is created for a varargs parameter\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in p\\\\X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic X() { foo(data.l); }\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation foo(List) of the generic method foo(List<T>...) of type Z\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in p\\\\X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic X() { foo(data.l); }\\n\" + ", "+\t\t\t\"\t                 ^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in p\\\\Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tList l = null;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}], "num": 47241}
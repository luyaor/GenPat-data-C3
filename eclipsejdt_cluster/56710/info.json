{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ce9c1eaa6b6a4b47ea0c45f6e9c5d58", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d8997103a62d3889380f7e7afceb25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void analyseArguments(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, MethodBinding methodBinding, Expression[] arguments)", "signatureAfterChange": " protected void analyseArguments(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, MethodBinding methodBinding, Expression[] arguments)", "diff": ["+\t\tTypeBinding varArgsType = null;", "+\t\tboolean passThrough = false;", "-\t\t\tboolean passThrough = false;", "-\t\t\t\t\tTypeBinding varArgsType = methodBinding.parameters[varArgPos];", "+\t\t\t\t\tvarArgsType = methodBinding.parameters[varArgPos];", "-\t\t\t\tExpression argument = arguments[i];", "-\t\t\t\t// prefer check based on type annotations:", "-\t\t\t\tint severity = findNullTypeAnnotationMismatch(expectedType, argument.resolvedType);", "-\t\t\t\tif (severity > 0) {", "-\t\t\t\t\t// immediate reporting:", "-\t\t\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(argument, argument.resolvedType, expectedType, severity==1, currentScope.environment());", "-\t\t\t\t\t// next check flow-based null status against null JDK15-style annotations:", "-\t\t\t\t} else if (hasJDK15NullAnnotations && methodBinding.parameterNonNullness[i] == Boolean.TRUE) {", "-\t\t\t\t\tint nullStatus = argument.nullStatus(flowInfo, flowContext); // slight loss of precision: should also use the null info from the receiver.", "-\t\t\t\t\tif (nullStatus != FlowInfo.NON_NULL) // if required non-null is not provided", "-\t\t\t\t\t\tflowContext.recordNullityMismatch(currentScope, argument, argument.resolvedType, expectedType, nullStatus);", "+\t\t\t\tanalyseOneArgument18(currentScope, flowContext, flowInfo, expectedType, arguments[i]);", "+\t\t\t}", "+\t\t\tif (!passThrough && varArgsType instanceof ArrayBinding) {", "+\t\t\t\tTypeBinding expectedType = ((ArrayBinding) varArgsType).elementsType();", "+\t\t\t\tfor (int i = numParamsToCheck; i < arguments.length; i++) {", "+\t\t\t\t\tanalyseOneArgument18(currentScope, flowContext, flowInfo, expectedType, arguments[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ddda5c2231d2656d375dbb0c8961eed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic MethodBinding[] getMethods(char[] selector)", "signatureAfterChange": " \tpublic MethodBinding[] getMethods(char[] selector)", "diff": ["-\t\tjava.util.ArrayList matchingMethods = null;", "-\t\t\tint selectorLength = selector.length;", "-\t\t\tfor (int i = 0, length = this.methods.length; i < length; i++) {", "-\t\t\t\tMethodBinding method = this.methods[i];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\tif (matchingMethods == null)", "-\t\t\t\t\t\tmatchingMethods = new java.util.ArrayList(2);", "-\t\t\t\t\tmatchingMethods.add(method);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (matchingMethods != null) {", "-\t\t\t\tMethodBinding[] result = new MethodBinding[matchingMethods.size()];", "-\t\t\t\tmatchingMethods.toArray(result);", "+\t\t\tlong range;", "+\t\t\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\t\t\tint start = (int) range;", "+\t\t\t\tint length = (int) (range >> 32) - start + 1;", "+\t\t\t\t// cannot optimize since some clients rely on clone array", "+\t\t\t\t// if (start == 0 && length == this.methods.length) ", "+\t\t\t\t//\treturn this.methods; // current set is already interesting subset", "+\t\t\t\tMethodBinding[] result;", "+\t\t\t\tSystem.arraycopy(this.methods, start, result = new MethodBinding[length], 0, length);", "-\t\tif ((tagBits & TagBits.AreMethodsComplete) != 0)", "+\t\tif ((tagBits & TagBits.AreMethodsComplete) != 0) {", "-", "+\t\t}", "-\t\t    \tMethodBinding[] temp = new MethodBinding[length + this.methods.length];", "+\t\t    \tint total = length + this.methods.length;", "+\t\t    \tMethodBinding[] temp = new MethodBinding[total];", "+\t\t    \tif (total > 1) {", "+\t\t    \t\tReferenceBinding.sortMethods(temp, 0, total-1); // resort to ensure order is good", "+\t\t    \t}"]}], "num": 56710}
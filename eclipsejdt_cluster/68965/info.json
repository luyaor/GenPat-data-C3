{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a316cfefda6095fd46f44c4b5ae39f97", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23b3d6420a8925be6dc64a7324893899", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected boolean matchIndexEntry()", "signatureAfterChange": " public boolean isMatchingIndexRecord()", "diff": ["- */", "-protected boolean matchIndexEntry() {", "+}", "+public boolean isMatchingIndexRecord() {", "+\tTypeDeclarationPattern record = getTypeDeclarationRecord();", "-\t\t\tif (this.classOrInterface != this.decodedClassOrInterface) return false;", "+\t\t\tif (this.classOrInterface != record.classOrInterface) return false;", "-\tif (this.pkg != null && !CharOperation.equals(this.pkg, this.decodedPackage, this.isCaseSensitive))", "+\tif (this.pkg != null && !CharOperation.equals(this.pkg, record.pkg, isCaseSensitive()))", "-\t\t\tif (this.decodedEnclosingTypeNames != CharOperation.NO_CHAR_CHAR) return false;", "+\t\t\tif (record.enclosingTypeNames != CharOperation.NO_CHAR_CHAR) return false;", "-\t\t\tif (!CharOperation.equals(this.enclosingTypeNames, this.decodedEnclosingTypeNames, this.isCaseSensitive))", "-\t\t\t\tif (!CharOperation.equals(this.decodedEnclosingTypeNames, ONE_ZERO_CHAR)) // if not a local or anonymous type", "+\t\t\tif (!CharOperation.equals(this.enclosingTypeNames, record.enclosingTypeNames, isCaseSensitive()))", "+\t\t\t\tif (!CharOperation.equals(record.enclosingTypeNames, ONE_ZERO_CHAR)) // if not a local or anonymous type", "-\tif (this.simpleName != null) {", "-\t\tswitch(this.matchMode) {", "-\t\t\tcase EXACT_MATCH :", "-\t\t\t\treturn CharOperation.equals(this.simpleName, this.decodedSimpleName, this.isCaseSensitive);", "-\t\t\tcase PREFIX_MATCH :", "-\t\t\t\treturn CharOperation.prefixEquals(this.simpleName, this.decodedSimpleName, this.isCaseSensitive);", "-\t\t\tcase PATTERN_MATCH :", "-\t\t\t\treturn CharOperation.match(this.simpleName, this.decodedSimpleName, this.isCaseSensitive);", "-\t\t}", "-\t}", "-\treturn true;", "+\treturn matchesName(this.simpleName, record.simpleName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64028909be4c56b95f298ef6c03c3056", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void updateProjectReferences(JavaProject project, IClasspathEntry[] oldResolvedPath, IClasspathEntry[] newResolvedPath, IClasspathEntry[] newRawPath, boolean canChangeResources) throws JavaModelException", "signatureAfterChange": " \t \tpublic synchronized void addProjectReferenceChange(JavaProject project, IClasspathEntry[] oldResolvedClasspath)", "diff": ["-\tpublic void updateProjectReferences(JavaProject project, IClasspathEntry[] oldResolvedPath, IClasspathEntry[] newResolvedPath, IClasspathEntry[] newRawPath, boolean canChangeResources) throws JavaModelException {", "-\t\tProjectUpdateInfo info;", "-\t\tsynchronized (this) {", "-\t\t\tinfo = (ProjectUpdateInfo) (canChangeResources ? this.projectUpdates.remove(project) /*remove possibly awaiting one*/ : this.projectUpdates.get(project));", "-\t\t\tif (info == null) {", "-\t\t\t\tinfo = new ProjectUpdateInfo();", "-\t\t\t\tinfo.project = project;", "-\t\t\t\tinfo.oldResolvedPath = oldResolvedPath;", "-\t\t\t\tif (!canChangeResources) {", "-\t\t\t\t\tthis.projectUpdates.put(project, info);", "-\t\t\t\t}", "-\t\t    } // else refresh new classpath information", "-\t\t    info.newResolvedPath = newResolvedPath;", "-\t\t    info.newRawPath = newRawPath;", "-\t\t}", "-", "-\t    if (canChangeResources) {", "-\t        info.updateProjectReferencesIfNecessary();", "-\t    } // else project references will be updated on next PRE_BUILD notification", "+\t", "+\tpublic synchronized void addProjectReferenceChange(JavaProject project, IClasspathEntry[] oldResolvedClasspath) {", "+\t\tProjectReferenceChange change = (ProjectReferenceChange) this.projectReferenceChanges.get(project);", "+\t\tif (change == null) {", "+\t\t\tchange = new ProjectReferenceChange(project, oldResolvedClasspath);", "+\t\t\tthis.projectReferenceChanges.put(project, change);", "+\t    }"]}], "num": 68965}
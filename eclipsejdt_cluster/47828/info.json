{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7cb4730d6edc24044d1153d113ef36c7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "397610c6f592d040537a083af312218e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "afbd59588c9ca5e9f9fa1e0c9c6d428db18067ff", "commitAfterChange": "5d6b68778bc5cc6ff8d2d7502de9a5e78a68b5d0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods)", "diff": ["+\tint[] toSkip = null;", "-\t\t\tIBinaryMethod method;", "-\t\t\tchar[] methodName = (method = iMethods[i]).getSelector();", "-\t\t\tif ((methodName[0] == '<' && methodName.length == 8)", "-\t\t\t\t\t|| (method.getModifiers() & AccSynthetic) != 0) { // Can only match <clinit> or synthetics", "-\t\t\t\ttotal--;", "+\t\t\tIBinaryMethod method = iMethods[i];", "+\t\t\tchar[] methodName;", "+\t\t\tif ((method.getModifiers() & AccSynthetic) != 0 ||", "+\t\t\t\t((methodName = method.getSelector()).length == 8 && methodName[0] == '<')) {", "+\t\t\t\t\tif (toSkip == null)", "+\t\t\t\t\t\ttoSkip = new int[iMethods.length];", "+\t\t\t\t\ttoSkip[i] = -1;", "+\t\t\t\t\ttotal--;", "-\tfor (int i = 0, length = iMethods.length; i < length; i++){", "-\t\t\tIBinaryMethod method;", "-\t\t\tchar[] methodName = (method = iMethods[i]).getSelector();", "-\t\t\tif (!((methodName[0] == '<' && methodName.length == 8)", "-\t\t\t\t\t|| (method.getModifiers() & AccSynthetic) != 0)) { // Can only match <clinit> or synthetics", "+\tif (toSkip == null) {", "+\t\tfor (int i = 0, length = iMethods.length; i < length; i++)", "+\t\t\tthis.methods[next++] = createMethod(iMethods[i]);", "+\t} else {", "+\t\tfor (int i = 0, length = iMethods.length; i < length; i++)", "+\t\t\tif (toSkip[i] == 0)", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d9ba5c19f7291796e8862f5cc00ad4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "4bdd855d0f802eda5492db24df9cfcadb9d4328e", "commitAfterChange": "f4651b2dd08a519f2dfe53cd582459f24cec135f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods)", "diff": ["-\tint clinitIndex = -1;", "-\t\t\tchar[] methodName = iMethods[i].getSelector();", "-\t\t\tif (methodName[0] == '<' && methodName.length == 8) { // Can only match <clinit>", "+\t\t\tIBinaryMethod method;", "+\t\t\tchar[] methodName = (method = iMethods[i]).getSelector();", "+\t\t\tif ((methodName[0] == '<' && methodName.length == 8)", "+\t\t\t\t\t|| (method.getModifiers() & AccSynthetic) != 0) { // Can only match <clinit> or synthetics", "-\t\t\t\tclinitIndex = i;", "-\t\t\t\tbreak;", "-\tfor (int i = 0, length = iMethods.length; i < length; i++)", "-\t\tif (i != clinitIndex)", "-\t\t\tthis.methods[next++] = createMethod(iMethods[i]);", "+\tfor (int i = 0, length = iMethods.length; i < length; i++){", "+\t\t\tIBinaryMethod method;", "+\t\t\tchar[] methodName = (method = iMethods[i]).getSelector();", "+\t\t\tif (!((methodName[0] == '<' && methodName.length == 8)", "+\t\t\t\t\t|| (method.getModifiers() & AccSynthetic) != 0)) { // Can only match <clinit> or synthetics", "+\t\t\t\tthis.methods[next++] = createMethod(iMethods[i]);", "+\t\t\t}", "+\t}"]}], "num": 47828}
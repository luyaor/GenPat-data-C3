{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf69b55c62f87944c883a229c94ef33c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ac5ed4afdcc6902b4da1c54cae2729d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected boolean parseParam() throws InvalidInputException", "signatureAfterChange": " protected boolean parseParam() throws InvalidInputException", "diff": ["-\t\tif (ch != ' ' && !ScannerHelper.isWhitespace(ch)) {", "-\t\t\t// no space after the tag, just create a normal tag", "-\t\t\treturn false;", "+\t\t// Try to push an identifier in the stack, otherwise restart from the end tag position", "+\t\tif (ch == ' ' || ScannerHelper.isWhitespace(ch)) {", "+\t\t\tint token = this.scanner.getNextToken();", "+\t\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\tch = peekChar();", "+\t\t\t\tif (ch == ' ' || ScannerHelper.isWhitespace(ch)) {", "+\t\t\t\t\tpushIdentifier(true, false);", "+\t\t\t\t\tpushParamName(false);", "+\t\t\t\t\tthis.index = this.scanner.currentPosition;", "+\t\t\t\t\tvalid = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.scanner.resetTo(this.tagSourceEnd+1, this.javadocEnd);", "-\t\tthis.scanner.getNextToken(); // consume first token", "-\t\tpushIdentifier(true, false); // force the identifier even if invalid", "-\t\tpushParamName(false);", "-\t\tthis.index = this.scanner.currentPosition;", "-\t\tvalid = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7929c0c3916fde5801cab72f7db290df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "aa840c8bcdfb26adabb4ef3914d3bd09d15784c4", "commitAfterChange": "c1f9cc390c170609267b76bee97dfba81631d517", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["-\tif (this.binding != null && !this.binding.isUsed() && (this.binding.isPrivate() || (this.binding.declaringClass.tagBits & (TagBits.IsAnonymousType|TagBits.IsLocalType)) == TagBits.IsLocalType)) {", "-\t\tif (!classScope.referenceCompilationUnit().compilationResult.hasSyntaxError) {", "-\t\t\tthis.scope.problemReporter().unusedPrivateConstructor(this);", "+\tcheckUnused: {", "+\t\tMethodBinding constructorBinding;", "+\t\tif ((constructorBinding = this.binding) == null) break checkUnused;", "+\t\tif (this.isDefaultConstructor) break checkUnused;", "+\t\tif (constructorBinding.isUsed()) break checkUnused;", "+\t\tif (constructorBinding.isPrivate()) {", "+\t\t\tif ((this.binding.declaringClass.tagBits & TagBits.HasNonPrivateConstructor) == 0)", "+\t\t\t\tbreak checkUnused; // tolerate as known pattern to block instantiation", "+\t\t} else if ((this.binding.declaringClass.tagBits & (TagBits.IsAnonymousType|TagBits.IsLocalType)) != TagBits.IsLocalType) {", "+\t\t\tbreak checkUnused;", "+\t\t// complain unused", "+\t\tthis.scope.problemReporter().unusedPrivateConstructor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a77cecc29e08675df7a1447190820469", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "signatureAfterChange": "  \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "diff": ["-\t\t\tif (type.isAnnotatable()) {", "-\t\t\t\tAnnotatableType annotatableType = (AnnotatableType) type;", "-\t\t\t\tif (this.ast.apiLevel() >= AST.JLS8 && !annotatableType.annotations().isEmpty()) {", "-\t\t\t\t\tIterator annotations = annotatableType.annotations().iterator();", "-\t\t\t\t\twhile (annotations.hasNext()) {", "-\t\t\t\t\t\tAnnotation annotation = (Annotation) annotations.next();", "+\t\t\tif (this.ast.apiLevel() >= AST.JLS8) {", "+\t\t\t\tList annotations  = null;", "+\t\t\t\tif (type.isAnnotatable()) {", "+\t\t\t\t\tannotations = ((AnnotatableType) type).annotations();", "+\t\t\t\t} else if (type.isArrayType()) {", "+\t\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\t\tannotations = arrayType.dimensions().isEmpty() ? null : ((arrayType.getDimensionAt(0)).annotations());", "+\t\t\t\t}", "+\t\t\t\tif (annotations != null) {", "+\t\t\t\t\tIterator iter = annotations.iterator();", "+\t\t\t\t\twhile (iter.hasNext()) {", "+\t\t\t\t\t\tAnnotation annotation = (Annotation) iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d968dca6c1d3d3a1ba5f507eb016ce23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     \tReferenceBinding resolve(LookupEnvironment environment)", "signatureAfterChange": "     \tReferenceBinding resolve(LookupEnvironment environment)", "diff": ["-\t", "+", "+\t\tTypeBinding oldSuperclass = this.superclass, oldFirstInterface = null;", "-\t\tif (this.firstBound != null)", "-\t\t\tthis.firstBound = BinaryTypeBinding.resolveUnresolvedType(this.firstBound, environment, true);", "-\t\tfor (int i = interfaces.length; --i >= 0;)", "-\t\t\tinterfaces[i] = BinaryTypeBinding.resolveUnresolvedType(interfaces[i], environment, true);", "+\t\tint length;", "+\t\tif ((length = interfaces.length) != 0) {", "+\t\t\toldFirstInterface = interfaces[0];", "+\t\t\tfor (int i = length; --i >= 0;) {", "+\t\t\t\tinterfaces[i] = BinaryTypeBinding.resolveUnresolvedType(interfaces[i], environment, true);", "+\t\t\t}", "+\t\t}", "-\t\tif (this.firstBound != null)", "-\t\t\tthis.firstBound = BinaryTypeBinding.resolveType(this.firstBound, environment, true);", "+", "+\t\t// refresh the firstBound in case it changed", "+\t\tif (this.firstBound != null) {", "+\t\t\tif (this.firstBound == oldSuperclass) {", "+\t\t\t\tthis.firstBound = this.superclass;", "+\t\t\t} else if (this.firstBound == oldFirstInterface) {", "+\t\t\t\tthis.firstBound = interfaces[0];", "+\t\t\t}", "+\t\t}"]}], "num": 47366}
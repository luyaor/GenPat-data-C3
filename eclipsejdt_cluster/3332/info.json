{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d9e9ee353045f99ac4d262be0fe1387", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a18649e91c8f8d8ffe568bd5c68413c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "b1909bb0c4bbb70fecea5345c2e954fa4204b1dd", "commitAfterChange": "1ef42230a28632657bfac5df1d197b6d35dcc83d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "diff": ["-\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint) {", "-\t\t\tformalEnclosingType.collectSubstitutes(scope, actualEquivalent.enclosingType(), substitutes, constraint);", "+\t\t\tformalEnclosingType.collectSubstitutes(scope, actualEquivalent.enclosingType(), inferenceContext, constraint);", "-        \t\tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end", "+        \t\tif (!inferenceContext.checkRawSubstitution()) {", "+\t           \t\tinferenceContext.status = InferenceContext.FAILED; // marker for impossible inference", "+        \t\t}", "-        \t\tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end", "-        \t\tif (constraint == TypeConstants.CONSTRAINT_EQUAL) {", "-        \t\t\tsubstitutes.put(TypeBinding.VOID, Binding.NO_TYPES); // marker for impossible inference", "+        \t\tif (!inferenceContext.checkRawSubstitution()) {", "+\t           \t\tinferenceContext.status = InferenceContext.FAILED; // marker for impossible inference", "+        inferenceContext.depth++;", "-                formalArgument.collectSubstitutes(scope, actualArgument, substitutes, constraint);", "+                formalArgument.collectSubstitutes(scope, actualArgument, inferenceContext, constraint);", "-\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "-            formalArgument.collectSubstitutes(scope, actualArgument, substitutes, TypeConstants.CONSTRAINT_EQUAL);", "+            formalArgument.collectSubstitutes(scope, actualArgument, inferenceContext, TypeConstants.CONSTRAINT_EQUAL);", "+        inferenceContext.depth--;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edde794bfc34b704dc46ea02bb1a1bf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "b1909bb0c4bbb70fecea5345c2e954fa4204b1dd", "commitAfterChange": "1ef42230a28632657bfac5df1d197b6d35dcc83d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "diff": ["-\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint) {", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, substitutes, TypeConstants.CONSTRAINT_SUPER);\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, inferenceContext, TypeConstants.CONSTRAINT_SUPER);\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_SUPER);"]}], "num": 3332}
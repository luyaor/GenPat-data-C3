{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "316b8ac7fa9340d5a8bc89c2ce096925", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eaea71f27f9a5fc7294007629ff2e52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2e8c81b48304c9e33747060a2a7fcd8295c64afe", "commitAfterChange": "50125dca81221f803e384aaa4267a637e226f1c2", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic QualifiedName getClasspathPropertyName()", "signatureAfterChange": " \tprivate void savePreferences(Preferences preferences)", "diff": ["-\t */", "-\tpublic QualifiedName getClasspathPropertyName() {", "-\t\treturn new QualifiedName(JavaCore.PLUGIN_ID, \"classpath\"); //$NON-NLS-1$", "-\t}", "+\t */", "+\tprivate void savePreferences(Preferences preferences) {", "+", "+\t\tif (preferences == null || !preferences.needsSaving()) {", "+\t\t\t// nothing to save", "+\t\t\treturn;", "+\t\t}", "+\t", "+\t\t// preferences need to be saved", "+\t\t// the preferences file is located in the plug-in's state area", "+\t\t// at a well-known name (.jprefs)", "+//\t\tFile prefFile = getProject().getLocation().append(PREF_FILENAME).toFile();", "+\t\tFile prefFile = getProject().getPluginWorkingLocation(JavaCore.getPlugin().getDescriptor()).append(PREF_FILENAME).toFile();", "+\t\tif (preferences.propertyNames().length == 0) {", "+\t\t\t// there are no preference settings", "+\t\t\t// rather than write an empty file, just delete any existing file", "+\t\t\tif (prefFile.exists()) {", "+\t\t\t\tprefFile.delete(); // don't worry if delete unsuccessful", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\t// write file, overwriting an existing one", "+\t\tOutputStream out = null;", "+\t\ttry {", "+\t\t\t// do it as carefully as we know how so that we don't lose/mangle", "+\t\t\t// the setting in times of stress", "+\t\t\tout = new BufferedOutputStream(new FileOutputStream(prefFile));", "+\t\t\tpreferences.store(out, null);", "+\t\t} catch (IOException e) { // problems saving preference store - quietly ignore", "+\t\t} finally {", "+\t\t\tif (out != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tout.close();", "+\t\t\t\t} catch (IOException e) { // ignore problems with close", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3556bb6f15d501327d1ba481e0ce65a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tprivate void savePreferences(Preferences preferences)", "signatureAfterChange": " \t private void updatePreferences(IEclipsePreferences preferences)", "diff": ["+\t */", "+\t private void updatePreferences(IEclipsePreferences preferences) {", "+\t \t", "+\t \tPreferences oldPreferences = loadPreferences();", "+\t \tIPreferencesService service = Platform.getPreferencesService();", "+\t \tif (oldPreferences != null) {", "+\t \t\tString[] propertyNames = oldPreferences.propertyNames();", "+\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "+\t\t\t\tString propertyName = propertyNames[i];", "+\t\t\t    String propertyValue = oldPreferences.getString(propertyName);", "+\t\t\t\tString defaultValue = service.get(propertyName, null, JavaCore.preferencesLookup);", "+\t\t\t    if (!\"\".equals(propertyValue) && (defaultValue == null || !propertyValue.equals(defaultValue))) { //$NON-NLS-1$", "+\t\t\t\t    preferences.put(propertyName, propertyValue);", "+\t\t\t    }", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\t// save immediately old preferences", "+\t\t\t\tpreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\t// fails silently", "+\t\t\t}", "+\t\t}", "+\t }", "-\t */", "-\tprivate void savePreferences(Preferences preferences) {", "-\t\t", "-\t\tif (!JavaProject.hasJavaNature(this.project)) return; // ignore", "-\t\t", "-\t\tif (preferences == null || (!preferences.needsSaving() && preferences.propertyNames().length != 0)) {", "-\t\t\t// nothing to save", "-\t\t\treturn;", "-\t\t}", "-\t", "-\t\t// preferences need to be saved", "-\t\t// the preferences file is located in the plug-in's state area", "-\t\t// at a well-known name (.jprefs)", "-//\t\tFile prefFile = this.project.getLocation().append(PREF_FILENAME).toFile();", "-\t\tFile prefFile = getPluginWorkingLocation().append(PREF_FILENAME).toFile();", "-\t\tif (preferences.propertyNames().length == 0) {", "-\t\t\t// there are no preference settings", "-\t\t\t// rather than write an empty file, just delete any existing file", "-\t\t\tif (prefFile.exists()) {", "-\t\t\t\tprefFile.delete(); // don't worry if delete unsuccessful", "-\t\t\t}", "-\t\t\treturn;", "-\t\t}", "-\t\t", "-\t\t// write file, overwriting an existing one", "-\t\tOutputStream out = null;", "-\t\ttry {", "-\t\t\t// do it as carefully as we know how so that we don't lose/mangle", "-\t\t\t// the setting in times of stress", "-\t\t\tout = new BufferedOutputStream(new FileOutputStream(prefFile));", "-\t\t\tpreferences.store(out, null);", "-\t\t} catch (IOException e) { // problems saving preference store - quietly ignore", "-\t\t} finally {", "-\t\t\tif (out != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tout.close();", "-\t\t\t\t} catch (IOException e) { // ignore problems with close", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b93f5a39e540e30892f3eaf567476c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "dcfa707027d344f681ceb515fa351656d2618718", "commitAfterChange": "a344762273469c5e6647ddd81937bb273e006031", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \t public Preferences loadPreferences()", "signatureAfterChange": " \t public Preferences loadPreferences()", "diff": ["-\t\tFile prefFile = getProject().getPluginWorkingLocation(JavaCore.getPlugin().getDescriptor()).append(PREF_FILENAME).toFile();", "-\t\tif (prefFile.exists()) { // load preferences from file", "-\t\t\tInputStream in = null;", "-\t\t\ttry {", "-\t\t\t\tin = new BufferedInputStream(new FileInputStream(prefFile));", "-\t\t\t\tpreferences.load(in);", "-\t\t\t\treturn preferences;", "-\t\t\t} catch (IOException e) { // problems loading preference store - quietly ignore", "-\t\t\t} finally {", "-\t\t\t\tif (in != null) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tin.close();", "-\t\t\t\t\t} catch (IOException e) { // ignore problems with close", "+\t\tIPath projectMetaLocation = getProject().getPluginWorkingLocation(JavaCore.getPlugin().getDescriptor());", "+\t\tif (projectMetaLocation != null) {", "+\t\t\tFile prefFile = projectMetaLocation.append(PREF_FILENAME).toFile();", "+\t\t\tif (prefFile.exists()) { // load preferences from file", "+\t\t\t\tInputStream in = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tin = new BufferedInputStream(new FileInputStream(prefFile));", "+\t\t\t\t\tpreferences.load(in);", "+\t\t\t\t\treturn preferences;", "+\t\t\t\t} catch (IOException e) { // problems loading preference store - quietly ignore", "+\t\t\t\t} finally {", "+\t\t\t\t\tif (in != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tin.close();", "+\t\t\t\t\t\t} catch (IOException e) { // ignore problems with close", "+\t\t\t\t\t\t}"]}], "num": 9675}
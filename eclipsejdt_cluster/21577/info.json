{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87bca98ed1144e486730ab04f4b2c6d5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3520df3f486f648c808a7ef7c0a7a2b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "a4bad5de1a22d351f6e9a6dfbd81bf7215072d8a", "commitAfterChange": "2fd46991534261d67a44cb07d9d1d4b07b2e0cfb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tFlowInfo initsOnCondition = flowInfo;", "+", "+\t\tif ((this.condition.implicitConversion & TypeIds.UNBOXING) != 0) {", "+\t\t\tinitsOnCondition = flowInfo.unconditionalInits().", "+\t\t\t\t\t\t\t\t\taddInitializationsFrom(", "+\t\t\t\t\t\t\t\t\t\tactionInfo.mergedWith(loopingContext.initsOnContinue));", "+\t\t}", "+\t}", "+\tif ((this.condition.implicitConversion & TypeIds.UNBOXING) != 0) {", "+\t\tthis.condition.checkNPE(currentScope, flowContext, initsOnCondition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa354b303e574431ccf706203fb412f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "c5e448ecc90e8d75bf431155e497df695586ca94", "commitAfterChange": "d137239e9d64b43b4573cdfef965a2c47040a54e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\tLocalVariableBinding elementVarBinding = this.elementVariable.binding;", "-\t\tcondInfo.markAsDefinitelyAssigned(this.elementVariable.binding);", "+\t\tcondInfo.markAsDefinitelyAssigned(elementVarBinding);", "-\t\tactionInfo.markAsDefinitelyUnknown(this.elementVariable.binding);", "+\t\tactionInfo.markAsDefinitelyUnknown(elementVarBinding);", "+\t\tif (currentScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\t// this currently produces an unavoidable warning against all @NonNull element vars:", "+\t\t\tint nullStatus = this.elementVariable.checkAssignmentAgainstNullAnnotation(currentScope, flowContext, ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementVarBinding, FlowInfo.UNKNOWN, this.collection);", "+\t\t\t// TODO (stephan): \tonce we have JSR 308 fetch nullStatus from the collection element type", "+\t\t\t//              \tand feed the result into the above check (instead of FlowInfo.UNKNOWN)", "+\t\t\tif ((elementVarBinding.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\tactionInfo.markNullStatus(elementVarBinding, nullStatus);", "+\t\t\t}", "+\t\t}", "-\t\t\t\t\t\t|| this.elementVariable.binding.resolvedPosition != -1) {", "+\t\t\t\t\t\t|| elementVarBinding.resolvedPosition != -1) {"]}], "num": 21577}
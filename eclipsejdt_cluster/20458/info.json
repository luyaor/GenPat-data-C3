{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8d339864516be3bb833f4421e5ca60f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a84fa0ee418fb5fd9a157d08f883ce3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java", "commitBeforeChange": "f6d7e4c8ebdaaf8a904962804a027a09edc0c0d3", "commitAfterChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t@Override     public ICompilerRequestor getBatchRequestor()", "signatureAfterChange": "  \t@Override \tpublic IProblemFactory getProblemFactory()", "diff": ["-    public ICompilerRequestor getBatchRequestor() {", "-        return new EclipseCompilerRequestor(this, this.diagnosticListener, (DefaultProblemFactory) getProblemFactory());", "+\tpublic IProblemFactory getProblemFactory() {", "+\t\treturn new DefaultProblemFactory() {", "+\t\t\t@Override", "+\t\t\tpublic CategorizedProblem createProblem(", "+\t\t\t\t\tfinal char[] originatingFileName,", "+\t\t\t\t\tfinal int problemId,", "+\t\t\t\t\tfinal String[] problemArguments,", "+\t\t\t\t\tfinal String[] messageArguments,", "+\t\t\t\t\tfinal int severity,", "+\t\t\t\t\tfinal int startPosition,", "+\t\t\t\t\tfinal int endPosition,", "+\t\t\t\t\tfinal int lineNumber,", "+\t\t\t\t\tfinal int columnNumber) {", "+", "+\t\t\t\tDiagnosticListener<? super JavaFileObject> diagListener = EclipseCompilerImpl.this.diagnosticListener;", "+\t\t\t\tif (diagListener != null) {", "+\t\t\t\t\tdiagListener.report(new Diagnostic<JavaFileObject>() {", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic String getCode() {", "+\t\t\t\t\t\t\treturn Integer.toString(problemId);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic long getColumnNumber() {", "+\t\t\t\t\t\t\treturn columnNumber;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic long getEndPosition() {", "+\t\t\t\t\t\t\treturn endPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic Kind getKind() {", "+\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Error) != 0) {", "+\t\t\t\t\t\t\t\treturn Diagnostic.Kind.ERROR;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Optional) != 0) {", "+\t\t\t\t\t\t\t\treturn Diagnostic.Kind.WARNING;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Warning) != 0) {", "+\t\t\t\t\t\t\t\treturn Diagnostic.Kind.MANDATORY_WARNING;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn Diagnostic.Kind.OTHER;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic long getLineNumber() {", "+\t\t\t\t\t\t\treturn lineNumber;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic String getMessage(Locale locale) {", "+\t\t\t\t\t\t\tif (locale != null) {", "+\t\t\t\t\t\t\t\tsetLocale(locale);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn getLocalizedMessage(problemId, problemArguments);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic long getPosition() {", "+\t\t\t\t\t\t\treturn startPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic JavaFileObject getSource() {", "+\t\t\t\t\t\t\tFile f = new File(new String(originatingFileName));", "+\t\t\t\t\t\t\tif (f.exists()) {", "+\t\t\t\t\t\t\t\treturn new EclipseFileObject(null, f.toURI(), JavaFileObject.Kind.SOURCE, null);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic long getStartPosition() {", "+\t\t\t\t\t\t\treturn startPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});", "+\t\t\t\t}", "+\t\t\t\treturn super.createProblem(originatingFileName, problemId, problemArguments, messageArguments, severity, startPosition, endPosition, lineNumber, columnNumber);", "+\t\t\t}", "+\t\t\t@Override", "+\t\t\tpublic CategorizedProblem createProblem(", "+\t\t\t\t\tfinal char[] originatingFileName,", "+\t\t\t\t\tfinal int problemId,", "+\t\t\t\t\tfinal String[] problemArguments,", "+\t\t\t\t\tfinal int elaborationID,", "+\t\t\t\t\tfinal String[] messageArguments,", "+\t\t\t\t\tfinal int severity,", "+\t\t\t\t\tfinal int startPosition,", "+\t\t\t\t\tfinal int endPosition,", "+\t\t\t\t\tfinal int lineNumber,", "+\t\t\t\t\tfinal int columnNumber) {", "+", "+\t\t\t\tDiagnosticListener<? super JavaFileObject> diagListener = EclipseCompilerImpl.this.diagnosticListener;", "+\t\t\t\tif (diagListener != null) {", "+\t\t\t\t\tdiagListener.report(new Diagnostic<JavaFileObject>() {", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic String getCode() {", "+\t\t\t\t\t\t\treturn Integer.toString(problemId);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic long getColumnNumber() {", "+\t\t\t\t\t\t\treturn columnNumber;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic long getEndPosition() {", "+\t\t\t\t\t\t\treturn endPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic Kind getKind() {", "+\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Error) != 0) {", "+\t\t\t\t\t\t\t\treturn Diagnostic.Kind.ERROR;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Optional) != 0) {", "+\t\t\t\t\t\t\t\treturn Diagnostic.Kind.WARNING;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Warning) != 0) {", "+\t\t\t\t\t\t\t\treturn Diagnostic.Kind.MANDATORY_WARNING;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn Diagnostic.Kind.OTHER;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic long getLineNumber() {", "+\t\t\t\t\t\t\treturn lineNumber;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic String getMessage(Locale locale) {", "+\t\t\t\t\t\t\tif (locale != null) {", "+\t\t\t\t\t\t\t\tsetLocale(locale);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn getLocalizedMessage(problemId, problemArguments);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic long getPosition() {", "+\t\t\t\t\t\t\treturn startPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic JavaFileObject getSource() {", "+\t\t\t\t\t\t\tFile f = new File(new String(originatingFileName));", "+\t\t\t\t\t\t\tif (f.exists()) {", "+\t\t\t\t\t\t\t\treturn new EclipseFileObject(null, f.toURI(), JavaFileObject.Kind.SOURCE, null);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t@Override", "+\t\t\t\t\t\tpublic long getStartPosition() {", "+\t\t\t\t\t\t\treturn startPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});", "+\t\t\t\t}", "+\t\t\t\treturn super.createProblem(originatingFileName, problemId, problemArguments, elaborationID, messageArguments, severity, startPosition, endPosition, lineNumber, columnNumber);", "+\t\t\t}", "+\t\t};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f16cf581593244b4bbca52697298b02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java", "commitBeforeChange": "da5d5f5dcaeaf009feb139b87f69fd7bf09595b3", "commitAfterChange": "65f5152e309a08bb91b2b35f96e93b2fa93bae4f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t@Override \tpublic IProblemFactory getProblemFactory()", "signatureAfterChange": "  \t@Override     public ICompilerRequestor getBatchRequestor()", "diff": ["-\tpublic IProblemFactory getProblemFactory() {", "-\t\treturn new DefaultProblemFactory() {", "-\t\t\t@Override", "-\t\t\tpublic CategorizedProblem createProblem(", "-\t\t\t\t\tfinal char[] originatingFileName,", "-\t\t\t\t\tfinal int problemId,", "-\t\t\t\t\tfinal String[] problemArguments,", "-\t\t\t\t\tfinal String[] messageArguments,", "-\t\t\t\t\tfinal int severity,", "-\t\t\t\t\tfinal int startPosition,", "-\t\t\t\t\tfinal int endPosition,", "-\t\t\t\t\tfinal int lineNumber,", "-\t\t\t\t\tfinal int columnNumber) {", "-", "-\t\t\t\tDiagnosticListener<? super JavaFileObject> diagListener = EclipseCompilerImpl.this.diagnosticListener;", "-\t\t\t\tif (diagListener != null) {", "-\t\t\t\t\tdiagListener.report(new Diagnostic<JavaFileObject>() {", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic String getCode() {", "-\t\t\t\t\t\t\treturn Integer.toString(problemId);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic long getColumnNumber() {", "-\t\t\t\t\t\t\treturn columnNumber;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic long getEndPosition() {", "-\t\t\t\t\t\t\treturn endPosition;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic Kind getKind() {", "-\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Error) != 0) {", "-\t\t\t\t\t\t\t\treturn Diagnostic.Kind.ERROR;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Optional) != 0) {", "-\t\t\t\t\t\t\t\treturn Diagnostic.Kind.WARNING;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Warning) != 0) {", "-\t\t\t\t\t\t\t\treturn Diagnostic.Kind.MANDATORY_WARNING;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn Diagnostic.Kind.OTHER;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic long getLineNumber() {", "-\t\t\t\t\t\t\treturn lineNumber;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic String getMessage(Locale locale) {", "-\t\t\t\t\t\t\tif (locale != null) {", "-\t\t\t\t\t\t\t\tsetLocale(locale);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn getLocalizedMessage(problemId, problemArguments);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic long getPosition() {", "-\t\t\t\t\t\t\treturn startPosition;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic JavaFileObject getSource() {", "-\t\t\t\t\t\t\tFile f = new File(new String(originatingFileName));", "-\t\t\t\t\t\t\tif (f.exists()) {", "-\t\t\t\t\t\t\t\treturn new EclipseFileObject(null, f.toURI(), JavaFileObject.Kind.SOURCE, null);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic long getStartPosition() {", "-\t\t\t\t\t\t\treturn startPosition;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t});", "-\t\t\t\t}", "-\t\t\t\treturn super.createProblem(originatingFileName, problemId, problemArguments, messageArguments, severity, startPosition, endPosition, lineNumber, columnNumber);", "-\t\t\t}", "-\t\t\t@Override", "-\t\t\tpublic CategorizedProblem createProblem(", "-\t\t\t\t\tfinal char[] originatingFileName,", "-\t\t\t\t\tfinal int problemId,", "-\t\t\t\t\tfinal String[] problemArguments,", "-\t\t\t\t\tfinal int elaborationID,", "-\t\t\t\t\tfinal String[] messageArguments,", "-\t\t\t\t\tfinal int severity,", "-\t\t\t\t\tfinal int startPosition,", "-\t\t\t\t\tfinal int endPosition,", "-\t\t\t\t\tfinal int lineNumber,", "-\t\t\t\t\tfinal int columnNumber) {", "-", "-\t\t\t\tDiagnosticListener<? super JavaFileObject> diagListener = EclipseCompilerImpl.this.diagnosticListener;", "-\t\t\t\tif (diagListener != null) {", "-\t\t\t\t\tdiagListener.report(new Diagnostic<JavaFileObject>() {", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic String getCode() {", "-\t\t\t\t\t\t\treturn Integer.toString(problemId);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic long getColumnNumber() {", "-\t\t\t\t\t\t\treturn columnNumber;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic long getEndPosition() {", "-\t\t\t\t\t\t\treturn endPosition;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic Kind getKind() {", "-\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Error) != 0) {", "-\t\t\t\t\t\t\t\treturn Diagnostic.Kind.ERROR;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Optional) != 0) {", "-\t\t\t\t\t\t\t\treturn Diagnostic.Kind.WARNING;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((severity & ProblemSeverities.Warning) != 0) {", "-\t\t\t\t\t\t\t\treturn Diagnostic.Kind.MANDATORY_WARNING;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn Diagnostic.Kind.OTHER;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic long getLineNumber() {", "-\t\t\t\t\t\t\treturn lineNumber;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic String getMessage(Locale locale) {", "-\t\t\t\t\t\t\tif (locale != null) {", "-\t\t\t\t\t\t\t\tsetLocale(locale);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn getLocalizedMessage(problemId, problemArguments);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic long getPosition() {", "-\t\t\t\t\t\t\treturn startPosition;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic JavaFileObject getSource() {", "-\t\t\t\t\t\t\tFile f = new File(new String(originatingFileName));", "-\t\t\t\t\t\t\tif (f.exists()) {", "-\t\t\t\t\t\t\t\treturn new EclipseFileObject(null, f.toURI(), JavaFileObject.Kind.SOURCE, null);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t@Override", "-\t\t\t\t\t\tpublic long getStartPosition() {", "-\t\t\t\t\t\t\treturn startPosition;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t});", "-\t\t\t\t}", "-\t\t\t\treturn super.createProblem(originatingFileName, problemId, problemArguments, elaborationID, messageArguments, severity, startPosition, endPosition, lineNumber, columnNumber);", "-\t\t\t}", "-\t\t};", "+    public ICompilerRequestor getBatchRequestor() {", "+        return new EclipseCompilerRequestor(this, this.diagnosticListener, (DefaultProblemFactory) getProblemFactory());"]}], "num": 20458}
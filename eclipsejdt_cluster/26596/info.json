{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2b37563259a82e9260f00ec6879ef5c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cea6687447fbec732b20e8b8d151966", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c31c921d319cbf1346e5bfb26cf42ff15297484d", "commitAfterChange": "2becf6dcab514ae8708935b2b42eed94f2bad821", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\t\t\tif (methodDecl == null) {", "-\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost & may still be null if method is special", "-\t\t\t\t\tif (methodDecl != null && methodDecl.binding != null) { // ensure its a valid user defined method", "-\t\t\t\t\t\tif (isEnumSpecialMethod) {", "-\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateEnumSpecialMethod(this, methodDecl);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, methodDecl, method.areParametersEqual(method2));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "-\t\t\t\t\t\tif (resolvedMethods == this.methods) {", "-\t\t\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tresolvedMethods[i] = null;", "-\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\tif (resolvedMethods == this.methods)", "-\t\t\t\t\t}", "-\t\t\t\tif (methodDecl != null) {", "+\t\t\t\tif (methodDecl != null)", "-\t\t\t\t}", "-\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\tif (resolvedMethods == this.methods)", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99bd3adb0ab18bd3d85be2c55f757667", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\tif (field.binding != null && this.scope.compilerOptions().includeFieldsInNullAnalysis", "-\t\t\t\t\t\t&& ((field.binding.modifiers & ClassFileConstants.AccFinal) != 0)) {", "-\t\t\t\t\t// we won't reset null Info for constant fields", "-\t\t\t\t\tstaticFieldInfo.updateConstantFieldsMask(field.binding);", "-\t\t\t\t}", "-\t\tUnconditionalFlowInfo staticFieldUnconditionalInfo = staticFieldInfo.unconditionalInits();", "-\t\tFlowInfo constructorInfo;", "-\t\tif (this.scope.compilerOptions().includeFieldsInNullAnalysis) {", "-\t\t\tflowInfo.addNullInfoFrom(staticFieldUnconditionalInfo.discardNonFieldInitializations());", "-\t\t\tflowInfo.addConstantFieldsMask(staticFieldUnconditionalInfo);\t// prevent resetting null info for constant fields inside methods", "-\t\t\tflowInfo.resetNullInfoForFields();\t// only preserve null info for constant fields", "-\t\t\tconstructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(flowInfo);", "-\t\t\tconstructorInfo.addConstantFieldsMask(staticFieldUnconditionalInfo); // prevent resetting null info for constant fields inside c'tor too", "-\t\t} else {", "-\t\t\tconstructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "-\t\t}", "-\t\t", "+\t\tFlowInfo constructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "-\t\t\t\t\t\tstaticFieldUnconditionalInfo.addInitializationsFrom(outerInfo));", "+\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));"]}], "num": 26596}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "594a044e42b3e8868896c0a362ef0036", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00582376047108f8154a1cee8aba1ca8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "30d3376aba31f8f9ef1e5500c7a86c4b7fc25032", "commitAfterChange": "f6a20c30e007a8356ebe3368f563d0b2f3eb9676", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static ParameterizedMethodBinding instantiateGetClass(TypeBinding receiverType, MethodBinding originalMethod, Scope scope)", "signatureAfterChange": " \tpublic static ParameterizedMethodBinding instantiateGetClass(TypeBinding receiverType, MethodBinding originalMethod, Scope scope)", "diff": ["-\t\tParameterizedMethodBinding method = new ParameterizedMethodBinding();", "+\t\tParameterizedMethodBinding method;", "+\t\tif (getClassMethodBindingCache != null) {", "+\t\t\tWeakReference w = (WeakReference) getClassMethodBindingCache.get(receiverType);", "+\t\t\tif (w != null) {", "+\t\t\t\tmethod = (ParameterizedMethodBinding) w.get();", "+\t\t\t\tif (method != null) {", "+\t\t\t\t\treturn method;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tmethod = new ParameterizedMethodBinding();", "+\t\tif (getClassMethodBindingCache == null) {", "+\t\t\tgetClassMethodBindingCache = new WeakHashMap();", "+\t\t}", "+\t\tgetClassMethodBindingCache.put(receiverType, new WeakReference(method));  // method refers back to key"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e2306fa39b957719522e66c79e8409c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "bc3a64dfc18ca9208d47ca0c4c780501f11956e7", "commitAfterChange": "06fc8e7b57a6268383b5a97ff433bb4fd67804ef", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r void write(DataOutputStream out) throws IOException", "signatureAfterChange": "\r \r void write(DataOutputStream out) throws IOException", "diff": ["+\t\t\t\tlength--;\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"structuralBuildNumbers table is inconsistent\"); //$NON-NLS-1$\r", "-\tkeyTable = references.keyTable;\r", "-\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "-\t\tif (keyTable[i] != null) {\r", "-\t\t\tString key = (String) keyTable[i];\r", "-\t\t\tout.writeUTF(key);\r", "-\t\t\tinternedLocations.add(key);\r", "+\tif (length > 0) {\r", "+\t\tkeyTable = references.keyTable;\r", "+\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\t\tif (keyTable[i] != null) {\r", "+\t\t\t\tlength--;\r", "+\t\t\t\tString key = (String) keyTable[i];\r", "+\t\t\t\tout.writeUTF(key);\r", "+\t\t\t\tinternedLocations.add(key);\r", "+\t\t\t}\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"references table is inconsistent\"); //$NON-NLS-1$\r", "+\t\t\t\tlength--;\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"typeLocations table is inconsistent\"); //$NON-NLS-1$\r", "-\tkeyTable = references.keyTable;\r", "-\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "-\t\tif (keyTable[i] != null) {\r", "-\t\t\tout.writeInt(internedLocations.indexOf((String) keyTable[i]));\r", "-\t\t\tReferenceCollection collection = (ReferenceCollection) valueTable[i];\r", "-\t\t\tif (collection instanceof AdditionalTypeCollection) {\r", "-\t\t\t\tout.writeByte(1);\r", "-\t\t\t\tAdditionalTypeCollection atc = (AdditionalTypeCollection) collection;\r", "-\t\t\t\twriteNames(atc.definedTypeNames, out);\r", "-\t\t\t} else {\r", "-\t\t\t\tout.writeByte(2);\r", "+\tif (length > 0) {\r", "+\t\tkeyTable = references.keyTable;\r", "+\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\t\tif (keyTable[i] != null) {\r", "+\t\t\t\tlength--;\r", "+\t\t\t\tout.writeInt(internedLocations.indexOf((String) keyTable[i]));\r", "+\t\t\t\tReferenceCollection collection = (ReferenceCollection) valueTable[i];\r", "+\t\t\t\tif (collection instanceof AdditionalTypeCollection) {\r", "+\t\t\t\t\tout.writeByte(1);\r", "+\t\t\t\t\tAdditionalTypeCollection atc = (AdditionalTypeCollection) collection;\r", "+\t\t\t\t\twriteNames(atc.definedTypeNames, out);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tout.writeByte(2);\r", "+\t\t\t\t}\r", "+\t\t\t\tchar[][][] qNames = collection.qualifiedNameReferences;\r", "+\t\t\t\tint qLength = qNames.length;\r", "+\t\t\t\tout.writeInt(qLength);\r", "+\t\t\t\tfor (int j = 0; j < qLength; j++)\r", "+\t\t\t\t\tout.writeInt(internedQualifiedNames.indexOf(qNames[j]));\r", "+\t\t\t\tchar[][] sNames = collection.simpleNameReferences;\r", "+\t\t\t\tint sLength = sNames.length;\r", "+\t\t\t\tout.writeInt(sLength);\r", "+\t\t\t\tfor (int j = 0; j < sLength; j++)\r", "+\t\t\t\t\tout.writeInt(internedSimpleNames.indexOf(sNames[j]));\r", "-\t\t\tchar[][][] qNames = collection.qualifiedNameReferences;\r", "-\t\t\tint qLength = qNames.length;\r", "-\t\t\tout.writeInt(qLength);\r", "-\t\t\tfor (int j = 0; j < qLength; j++)\r", "-\t\t\t\tout.writeInt(internedQualifiedNames.indexOf(qNames[j]));\r", "-\t\t\tchar[][] sNames = collection.simpleNameReferences;\r", "-\t\t\tint sLength = sNames.length;\r", "-\t\t\tout.writeInt(sLength);\r", "-\t\t\tfor (int j = 0; j < sLength; j++)\r", "-\t\t\t\tout.writeInt(internedSimpleNames.indexOf(sNames[j]));\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"references table is inconsistent\"); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e36aab6c68d6d3e28a11e03b01baa58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "commitAfterChange": "309aed033cc4257b36692ed1549ee0025e0800df", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic synchronized void init(ProcessingEnvironment processingEnv)", "signatureAfterChange": " \t@Override \tpublic synchronized void init(ProcessingEnvironment processingEnv)", "diff": ["+\t\t", "+\t\t// parse options", "+\t\t_oneTest = -1;", "+\t\tMap<String, String> options = processingEnv.getOptions();", "+\t\t_processorEnabled = options.containsKey(CLASSNAME);", "+\t\tString oneTestOption = options.get(CLASSNAME);", "+\t\tif (oneTestOption == null || oneTestOption.length() == 0) {", "+\t\t\t_oneTest = 0;", "+\t\t}", "+\t\telse {", "+\t\t\ttry {", "+\t\t\t\t_oneTest = Integer.parseInt(oneTestOption);", "+\t\t\t} catch (Exception e) {", "+\t\t\t\t// report it in process(), where we have better error reporting capability", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2211006c7b61a2f8f961ab21b31780a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "8d889a3eb8b924cc60e70fa9d37c9ce9262cf8ad", "commitAfterChange": "ab08e2b1c40ffe64d8b5189480657f3b9f8c23fa", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tprotected void setUp() throws Exception", "signatureAfterChange": "  \tprotected void setUp() throws Exception", "diff": ["+\t\t\t\t\tjavacCompilers = new ArrayList();", "+\t\t\t\t\tString jdkRoots = System.getProperty(\"jdk.roots\");", "+\t\t\t\t\tif (jdkRoots == null) {", "+\t\t\t\t\t\tjavacCompilers.add(new JavacCompiler(jdkRootDirPath.toString(), version));\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(jdkRoots, File.pathSeparator);", "+\t\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\t\tjavacCompilers.add(new JavacCompiler(tokenizer.nextToken()));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "241750fbb056055580986544c6b4d0bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "0f841a0360389f0f91aef636ca6531276c4a074d", "commitAfterChange": "4e57894c46e6fdc6da393db7e5519e070814fd68", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tsynchronized ITypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.TypeBinding referenceBinding)", "signatureAfterChange": " \tsynchronized ITypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.TypeBinding referenceBinding)", "diff": ["-\t\t\t\t\t\tTypeBinding binding = (TypeBinding) this.bindingTables.compilerBindingsToASTBindings.get(binding2);", "+\t\t\t\t\t\tITypeBinding binding = (ITypeBinding) this.bindingTables.compilerBindingsToASTBindings.get(binding2);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ProblemReasons.NotFound :", "+\t\t\t\t\tif (this.isRecoveredBinding) {", "+\t\t\t\t\t\tITypeBinding binding = (ITypeBinding) this.bindingTables.compilerBindingsToASTBindings.get(referenceBinding);", "+\t\t\t\t\t\tif (binding != null) {", "+\t\t\t\t\t\t\treturn binding;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbinding = new RecoveredTypeBinding(this, referenceBinding);", "+\t\t\t\t\t\tthis.bindingTables.compilerBindingsToASTBindings.put(referenceBinding, binding);", "+\t\t\t\t\t\treturn binding;", "+\t\t\t\t\t}", "-\t\t\tTypeBinding binding = (TypeBinding) this.bindingTables.compilerBindingsToASTBindings.get(referenceBinding);", "+\t\t\tITypeBinding binding = (ITypeBinding) this.bindingTables.compilerBindingsToASTBindings.get(referenceBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b56bc8629bb675ffa2e2ddbe486f229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "6654820265cfe7764e384e0eaabd31ce71d5edd3", "commitAfterChange": "4eaab794bf6dc1418675f45525d0cd74715d55ef", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t\t\t\t\tIRegion rangeBefore = currDecl.getPrecedingCommentRange();", "+\t\t\t\t\t\tif (rangeBefore != null && currPos > rangeBefore.getOffset()) {", "+\t\t\t\t\t\t\t// moved ahead of the leading comments, bring the currPos back", "+\t\t\t\t\t\t\tcurrPos = rangeBefore.getOffset();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\t\tstringsToInsert.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (rangeBefore != null && currPos > rangeBefore.getOffset()) {", "+\t\t\t\t\t\t\t\t// moved ahead of the leading comments, bring the currPos back", "+\t\t\t\t\t\t\t\tcurrPos = rangeBefore.getOffset();", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3362b82da927b42ba46380278324b70c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "7223aa6fb77908646269eb05501baa3222dddf99", "commitAfterChange": "eb64d43974fe687abe08ce33304975ce80a4e7eb", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void deleteResource(IResource resource) throws CoreException", "signatureAfterChange": " \tpublic void deleteResource(IResource resource) throws CoreException", "diff": ["+\t\t\treturn;", "-\t\t\tSystem.out.println(e.getMessage());", "+\t\t\tSystem.out.println(e.getMessage() + \" [\" + resource.getFullPath() + \"]\");", "-\t\t\tSystem.out.println(iae.getMessage());", "+\t\t\tSystem.out.println(iae.getMessage() + \" [\" + resource.getFullPath() + \"]\");", "-\t\tint retryCount = 60; // wait 1 minute at most", "-\t\twhile (resource.isAccessible() && --retryCount >= 0) {", "+\t\tint retryCount = 0; // wait 1 minute at most", "+\t\twhile (resource.isAccessible() && ++retryCount <= 60) {", "+\t\t\tSystem.out.println(\"Running GC and waiting 1s...\");", "+\t\t\t\tSystem.gc();", "-\t\t\t\tSystem.out.println(\"Retry \"+retryCount+\": \"+ e.getMessage());", "+\t\t\t\tSystem.out.println(\"Retry \"+retryCount+\": \"+ e.getMessage() + \" [\" + resource.getFullPath() + \"]\");", "-\t\t\t\tSystem.out.println(\"Retry \"+retryCount+\": \"+ iae.getMessage());", "+\t\t\t\tSystem.out.println(\"Retry \"+retryCount+\": \"+ iae.getMessage() + \" [\" + resource.getFullPath() + \"]\");", "-\t\tif (!resource.isAccessible()) return;", "-\t\tSystem.err.println(\"Failed to delete \" + resource.getFullPath());", "+\t\tif (!resource.isAccessible()) {", "+\t\t\tSystem.out.println(\"Succeed to delete resource [\" + resource.getFullPath() + \"]\");", "+\t\t\treturn;", "+\t\t}", "+\t\tSystem.err.println(\"Failed to delete resource [\" + resource.getFullPath() + \"]\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "349ff1187a2677c97fb6d42a029491ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "2c7a59198ef0accc78a3ea8fb276fbfe877a83c2", "commitAfterChange": "a55be3089b1474701c6009071b6792ce21fce5bc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public SyntheticMethodBinding addSyntheticMethod(LambdaExpression lambda)", "signatureAfterChange": " public SyntheticMethodBinding addSyntheticMethod(LambdaExpression lambda)", "diff": ["+\t", "+\t// Create a $deserializeLambda$ method if necessary, one is shared amongst all lambdas", "+\tif (lambda.isSerializable) {", "+\t\tSyntheticMethodBinding[] deserializeLambdaMethods = (SyntheticMethodBinding[]) this.synthetics[SourceTypeBinding.METHOD_EMUL].get(TypeConstants.DESERIALIZE_LAMBDA);", "+\t\tif (deserializeLambdaMethods == null) {", "+\t\t\tSyntheticMethodBinding deserializeLambdaMethod = new SyntheticMethodBinding(this);", "+\t\t\tthis.synthetics[SourceTypeBinding.METHOD_EMUL].put(TypeConstants.DESERIALIZE_LAMBDA,deserializeLambdaMethods = new SyntheticMethodBinding[1]);", "+\t\t\tdeserializeLambdaMethods[0] = deserializeLambdaMethod;", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "375cd5d106795928eddb4468b6c17567", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "394f9dd17363cb38ab41ca621f834f2ad413fdce", "commitAfterChange": "2b23d6b4deb8c097d394f2fa06fcc5a5e664d549", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory, \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "signatureAfterChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory, \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "diff": ["+\t\t\t\tString execErrorString = this.verifier.getExecutionError();", "+\t\t\t\tif (execErrorString != null && execErrorString.length() > 0) {", "+\t\t\t\t\tSystem.out.println(\"[ERR]:\"+execErrorString); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tString execOutputString = this.verifier.getExecutionOutput();", "+\t\t\t\tif (execOutputString != null && execOutputString.length() > 0) {", "+\t\t\t\t\tSystem.out.println(\"[OUT]:\"+execOutputString); //$NON-NLS-1$", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fdd2649a7f6f0a1f9c5ac1b596cc65b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "396d47b23135e9fb3aaeb3d8f844ebea73195461", "commitAfterChange": "05a0f872d8ef1609f1817f5edabf70e0b1737e8d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \t\tpublic void logVersion()", "signatureAfterChange": " \t\tpublic void logVersion(final boolean printToOut)", "diff": ["-\t\tpublic void logVersion() {", "-\t\t\tthis.printlnOut(Main.bind(\"misc.version\", //$NON-NLS-1$", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tMain.bind(\"compiler.name\"), //$NON-NLS-1$", "-\t\t\t\t\tMain.bind(\"compiler.version\"), //$NON-NLS-1$", "-\t\t\t\t\tMain.bind(\"compiler.copyright\") //$NON-NLS-1$", "+\t\tpublic void logVersion(final boolean printToOut) {", "+\t\t\tif (this.log != null && !this.isXml) {", "+\t\t\t\tfinal String version = Main.bind(\"misc.version\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tMain.bind(\"compiler.name\"), //$NON-NLS-1$", "+\t\t\t\t\t\tMain.bind(\"compiler.version\"), //$NON-NLS-1$", "+\t\t\t\t\t\tMain.bind(\"compiler.copyright\") //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t);", "+\t\t\t\tthis.log.println(\"# \" + version); //$NON-NLS-1$", "+\t\t\t\tif (printToOut) {", "+\t\t\t\t\tthis.out.println(version);", "-\t\t\t));", "+\t\t\t} else if (printToOut) {", "+\t\t\t\tfinal String version = Main.bind(\"misc.version\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tMain.bind(\"compiler.name\"), //$NON-NLS-1$", "+\t\t\t\t\t\tMain.bind(\"compiler.version\"), //$NON-NLS-1$", "+\t\t\t\t\t\tMain.bind(\"compiler.copyright\") //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t);", "+\t\t\t\tthis.out.println(version);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52bd08a6fd372a4666a2b04264f3dd97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "54503993aac98c2e38062e5e25d7566a8b5f1389", "commitAfterChange": "7358239d6b862255b4b51fc6ef9f249d713405ea", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "signatureAfterChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "diff": ["-\tthis.hasSeparateOutputFolder = !outputFolder.getFullPath().equals(javaBuilder.currentProject.getFullPath());\r", "+\t// only perform resource copying if no source folders coincidates with the output location\r", "+\t// corresponds to: project == src == bin, or several source folders are contributing resources,\r", "+\t// but one is the output location too (and would get populated with other source folder resources).\r", "+\tthis.hasSeparateOutputFolder = true;\r", "+\tfor (int i = 0; i < this.sourceFolders.length; i++) {\r", "+\t\tIContainer sourceFolder = this.sourceFolders[i];\r", "+\t\tif (sourceFolder.getFullPath().equals(this.outputFolder)){\r", "+\t\t\tthis.hasSeparateOutputFolder = false;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54339ef753168597bf3a7bab4b68a7b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic static void setClasspathContainer(IPath containerPath, final IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(IPath containerPath, final IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t", "+\t\t//TODO: need support for avoiding reentering calls (through getResolvedClasspath", "+", "-\t", "+\t\t\t", "-\t\t\tMap perProjectContainers = (Map)JavaModelManager.Containers.get(affectedProject);", "-\t\t\tif (perProjectContainers == null){", "-\t\t\t\tperProjectContainers = new HashMap();", "-\t\t\t\tJavaModelManager.Containers.put(affectedProject, perProjectContainers);", "-\t\t\t} else {", "-\t\t\t\tIClasspathContainer oldContainer = (IClasspathContainer) perProjectContainers.get(containerPath);", "-\t\t\t\tif (oldContainer != null && oldContainer.equals(respectiveContainers[i])){", "-\t\t\t\t\taffectedProjects[i] = null; // filter out this project - container did not change", "-\t\t\t\t\tcontinue;", "+\t\t\tIClasspathContainer oldContainer = JavaModelManager.containerGet(affectedProject, containerPath);", "+\t\t\tif (oldContainer == JavaModelManager.ContainerInitializationInProgress) {", "+\t\t\t\tMap previousContainerValues = (Map)JavaModelManager.PreviousSessionContainers.get(affectedProject);", "+\t\t\t\tif (previousContainerValues != null){", "+\t\t\t\t\tIClasspathContainer previousContainer = (IClasspathContainer)previousContainerValues.get(containerPath);", "+\t\t\t\t\tif (previousContainer != null) {", "+\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\t\t\tSystem.out.println(\"CPContainer INIT - reentering access to project container: [\"+affectedProject.getElementName()+\"] \" + containerPath + \" during its initialization, will see previous value: \"+ previousContainer); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tJavaModelManager.containerPut(affectedProject, containerPath, previousContainer); ", "+\t\t\t\t\t}", "+\t\t\t\t\toldContainer = previousContainer;", "+\t\t\tif (oldContainer != null && oldContainer.equals(respectiveContainers[i])){// TODO: could improve to only compare entries", "+\t\t\t\taffectedProjects[i] = null; // filter out this project - container did not change", "+\t\t\t\tcontinue;", "+\t\t\t}", "-\t\t\t\tremaining++;", "+\t\t\t\tremaining++; ", "-\t\t\tperProjectContainers.put(containerPath, newContainer);", "+\t\t\tJavaModelManager.containerPut(affectedProject, containerPath, newContainer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56b1f1a1851423a45ae3382395fada38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "f8eb13111e85058d6a3b96c5e3a0a3762548a3d5", "commitAfterChange": "3a282cd8b7c83e96465ddc9983742da9604c6a89", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void removeBinaryChildren() throws JavaModelException", "signatureAfterChange": " void removeBinaryChildren() throws JavaModelException", "diff": ["+\tif (this.typeParameters != null) {", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tfor (int i = 0; i <this.typeParameters.length; i++) {", "+\t\t\tTypeParameter typeParameter = (TypeParameter) this.typeParameters[i];", "+\t\t\tmanager.removeInfoAndChildren(typeParameter);", "+\t\t}", "+\t\tthis.typeParameters = TypeParameter.NO_TYPE_PARAMETERS;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64ccab64f33c863a3d29450f3eb159d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "5a8e0ebcbe7a48bae1be079e6a906d2255f8238d", "commitAfterChange": "f746ae56082e88bc2dddd35d7563e5b9b706f5c1", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " private void readHeaderInfo(FileInputStream stream) throws IOException", "signatureAfterChange": " private void readHeaderInfo(FileInputStream stream) throws IOException", "diff": ["-", "+\tlong fileLength = this.indexFile.length();", "+\tif (this.numberOfChunks > fileLength ) {", "+\t\t// not an accurate check, but good enough https://bugs.eclipse.org/bugs/show_bug.cgi?id=350612", "+\t\tif (DEBUG)", "+\t\t\tSystem.out.println(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "+\t\tthrow new IOException(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "+\t}", "+\tif (size > fileLength) {", "+\t\t//  not an accurate check, but good enough  https://bugs.eclipse.org/bugs/show_bug.cgi?id=350612", "+\t\tif (DEBUG)", "+\t\t\tSystem.out.println(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "+\t\tthrow new IOException(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69e6394ed2411bde3bc6027f90f1bd1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "14af252394acbb0bfcfcbfb1dcd81d43fd8bedb4", "commitAfterChange": "a5e72f7eb3d8ebc1e13245d6ce4d9ee4d6c6d3db", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["+\t\t\tString projectName = ALL_PROJECTS[i].getElementName();", "+\t\t\tif (JavaCore.PLUGIN_ID.equals(projectName)) {", "+\t\t\t\tJDT_CORE_PROJECT = ALL_PROJECTS[i];", "+\t\t\t} else if (BIG_PROJECT_NAME.equals(projectName)) {", "+\t\t\t\tBIG_PROJECT = (JavaProject) ALL_PROJECTS[i];", "+\t\t\t}", "+\t\t\t// Make Big project dependent from jdt.core one", "+//\t\t\tIClasspathEntry[] bigProjectEntries = BIG_PROJECT.getRawClasspath();", "+//\t\t\tint bpeLength = bigProjectEntries.length;", "+//\t\t\tSystem.arraycopy(bigProjectEntries, 0, bigProjectEntries = new IClasspathEntry[bpeLength+1], 0, bpeLength);", "+//\t\t\tbigProjectEntries[bpeLength] = JavaCore.newProjectEntry(JDT_CORE_PROJECT.getPath());", "+\t\tIJavaElement element = JDT_CORE_PROJECT.findType(\"org.eclipse.jdt.internal.compiler.parser.Parser\");", "+\t\tassertTrue(\"Parser should exist in org.eclipse.jdt.core project!\", element != null && element.exists());", "+\t\tPARSER_WORKING_COPY = (ICompilationUnit) element.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e7dcc89f6ff381445d5b2941a48859b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void requestIndexing()", "signatureAfterChange": " \tpublic void requestIndexing()", "diff": ["-\t\t\tif (index == -1) {", "+\t\t\tif (index == -1 || newResolvedClasspath[i].getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\tURL newurl = ((ClasspathEntry)newResolvedClasspath[i]).getLibraryIndexLocation();", "-\t\t\t\t\t\t\t\tpathHasChanged = false;", "+\t\t\t\t\t\t\t\tURL oldurl = ((ClasspathEntry)oldEntry).getLibraryIndexLocation();", "+\t\t\t\t\t\t\t\tif (oldurl == null && newurl == null) {", "+\t\t\t\t\t\t\t\t\tpathHasChanged = false;", "+\t\t\t\t\t\t\t\t} else if (oldurl != null && newurl != null) {", "+\t\t\t\t\t\t\t\t\tpathHasChanged = !(newurl.equals(oldurl));", "+\t\t\t\t\t\t\t\t} else if (oldurl != null) {", "+\t\t\t\t\t\t\t\t\tindexManager.removeIndex(newPath);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, this.project.getProject());", "+\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, this.project.getProject(), newurl);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81c8d7228dcbcb826a7bbea03d1b48d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "34f79b507663962f5a8b34c6546e7cf80423bb0b", "commitAfterChange": "0b3c372cd8063a26d1eaf5c9a3c9657a40eb4a99", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic static IPath getResolvedVariablePath(IPath variablePath)", "signatureAfterChange": " \tpublic static IPath getResolvedVariablePath(IPath variablePath)", "diff": ["-\t\treturn JavaModelManager.getJavaModelManager().getResolvedVariablePath(variablePath, false/*don't use previous session value*/);", "+", "+\t\tif (variablePath == null)", "+\t\t\treturn null;", "+\t\tint count = variablePath.segmentCount();", "+\t\tif (count == 0)", "+\t\t\treturn null;", "+", "+\t\t// lookup variable", "+\t\tString variableName = variablePath.segment(0);", "+\t\tIPath resolvedPath = JavaCore.getClasspathVariable(variableName);", "+\t\tif (resolvedPath == null)", "+\t\t\treturn null;", "+", "+\t\t// append path suffix", "+\t\tif (count > 1) {", "+\t\t\tresolvedPath = resolvedPath.append(variablePath.removeFirstSegments(1));", "+\t\t}", "+\t\treturn resolvedPath;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82f0370225a6e4d0c90a1b6b09624670", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a83998eafb5710017d069118e5017f85165dc68d", "commitAfterChange": "507dcedd3a1fdac6fc22c9b1a4a0ec9c8798fdc1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["+\t */", "-\t\t// search for compiler ast nodes with same position", "-\t\tfor (int i=0; i<this.thrownExceptions.length; i++) {", "-\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "-\t\t\tif (typeRef.sourceStart==start) {", "-\t\t\t\treturn typeRef;", "+\t\t// parameters array", "+\t\tif (this.parameters != null) {", "+\t\t\tfor (int i=0; i<this.parameters.length; i++) {", "+\t\t\t\tJavadocSingleNameReference param = this.parameters[i];", "+\t\t\t\tif (param.sourceStart==start) {", "+\t\t\t\t\treturn param;", "+\t\t\t\t}", "-\t\tfor (int i=0; i<this.references.length; i++) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = this.references[i];", "-\t\t\tif (expression.sourceStart==start) {", "-\t\t\t\treturn expression;", "+\t\t// thrown exception array", "+\t\tif (this.thrownExceptions != null) {", "+\t\t\tfor (int i=0; i<this.thrownExceptions.length; i++) {", "+\t\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "+\t\t\t\tif (typeRef.sourceStart==start) {", "+\t\t\t\t\treturn typeRef;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// references array", "+\t\tif (this.references != null) {", "+\t\t\tfor (int i=0; i<this.references.length; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = this.references[i];", "+\t\t\t\tif (expression.sourceStart==start) {", "+\t\t\t\t\treturn expression;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89e4110776bc1fa452015c98a5878db8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "1af62c8ac8c29f055bb8404d4de6ad60e868f8c4", "commitAfterChange": "1c68a970a8cbd8bfa2174955d5c78e149d7e6268", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate CompilationParticipantResult postReconcileNotify( PostReconcileCompilationEvent prce )", "signatureAfterChange": " \t \tprivate CompilationParticipantResult postReconcileNotify( PostReconcileCompilationEvent prce )", "diff": ["+\t\tIProblem[] problems = null;", "+\t\t", "-\t\t\tAPTDispatch.runAPTDuringReconcile( _factories, cu, javaProject );", "+\t\t\tAPTResult result = APTDispatch.runAPTDuringReconcile( _factories, cu, javaProject );", "+\t\t\tMap<IFile, List<IProblem>> allproblems = result.getProblems();\t\t\t", "+\t\t\t", "+\t\t\tfinal List<IProblem> problemList = allproblems.get((IFile)cu.getResource());", "+\t\t\tif( problemList != null && !problemList.isEmpty())", "+\t\t\t\tproblems = problemList.toArray(new IProblem[problemList.size()]);\t", "-\t\treturn new PostReconcileCompilationResult();", "+\t\treturn new PostReconcileCompilationResult(problems);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c4c8c25c829ccba670edfa41e5da77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "41f0e0054ad6ecc1ea34b869c24b09b45fb10ff6", "commitAfterChange": "57f71dbcbb6986e1c76d51b49e788951c6fe709e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void destroy()", "signatureAfterChange": "\r public void destroy()", "diff": ["+\tif (--this.managedCount > 0) return;\r", "+\t\tIJavaElement originalElement = this.getOriginalElement();\r", "-\t\t\t((CompilationUnit)this.getOriginalElement()).close();\r", "+\t\t\t((CompilationUnit)originalElement).close();\r", "+\t\t\r", "+\t\t// remove working copy from the cache\r", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();\r", "+\t\tif (manager.managedWorkingCopies.remove(originalElement) != null) {\r", "+\t\t\t// report removed java delta\r", "+\t\t\tJavaElementDelta delta = new JavaElementDelta(this.getJavaModel());\r", "+\t\t\tdelta.removed(this);\r", "+\t\t\tmanager.registerJavaModelDelta(delta);\r", "+\t\t\tmanager.fire();\r", "+\t\t}\r", "+\t\t\r", "-\tisDestroyed= true;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9334eca0e9b7362db8573365552a413a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "1b29c438baca9ace74d4826dbf7911a32b0a390b", "commitAfterChange": "bd40ad366e9f2b58f9afda35f3f0fb3054fec1a6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "diff": ["+\t\tif (VERBOSE) {", "+\t\t\tSystem.out.println(Thread.currentThread() + \" BUILDING NameLoopkup\");  //$NON-NLS-1$", "+\t\t\tSystem.out.println(Thread.currentThread() + \" -> pkg roots size: \" + packageFragmentRoots.length);  //$NON-NLS-1$", "+\t\t\tSystem.out.println(Thread.currentThread() + \" -> pkgs size: \" + packageFragments.size());  //$NON-NLS-1$", "+\t\t\tSystem.out.println(Thread.currentThread() + \" -> working copy size: \" + workingCopies.length);  //$NON-NLS-1$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93a3975bd7280e98f3c55901b0963e24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "1b6125b922b604588bed2b5782d039674eb294dc", "commitAfterChange": "66d9e86b4ff0c6095949f938b3e13495d2816b6d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate)", "signatureAfterChange": " \tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate)", "diff": ["-\t\tremoveFolder(srcFolder);", "+\t\t// delete the generated source folder as well as", "+\t\t// all of its derived ancestors that are containers only to the ", "+\t\t// generated source folder", "+\t\tif( srcFolder != null ){", "+\t\t\tIFolder folderToDelete = srcFolder;\t\t", "+\t\t\tfor( IContainer c = srcFolder.getParent(); ", "+\t\t\t \t c != null && (c instanceof IFolder); ", "+\t\t\t \t c = c.getParent() ){", "+\t\t\t\t", "+\t\t\t\ttry{", "+\t\t\t\t\t// members can't be empty, there has to be at least 1.", "+\t\t\t\t\t// will only delete the parent if it contains only the ", "+\t\t\t\t\t// folder that we want to delete.", "+\t\t\t\t\tif( c.isDerived() && c.members().length == 1 ){", "+\t\t\t\t\t\tfolderToDelete = (IFolder)c;", "+\t\t\t\t\t}", "+\t\t\t\t\telse", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}catch(CoreException e){", "+\t\t\t\t\tAptPlugin.log(e, \"failure while accessing member of \" + c.getName() ); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tremoveFolder(folderToDelete);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95f810c8c7ef1b1fc3783f6b5b622d26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \t \tprivate void findFieldsAndMethodsFromMissingReturnType( \t\tchar[] token, \t\tTypeBinding[] arguments, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate void findFieldsAndMethodsFromMissingReturnType( \t\tchar[] token, \t\tTypeBinding[] arguments, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\t\t\t\tif (methodDeclaration.binding == null) {", "+\t\t\t\t\t\t\t\tMethodBinding methodBinding = method.binding;", "+\t\t\t\t\t\t\t\tif (methodBinding == null || methodBinding.returnType == null  || (methodBinding.returnType.tagBits & TagBits.HasMissingType) != 0) {", "-\t\t\t\t\t\t\t\t\t\tTypeBinding[] parametersBindings = new TypeBinding[parametersLength];", "-\t\t\t\t\t\t\t\t\t\tfor (int j = 0; j < parametersLength; j++) {", "-\t\t\t\t\t\t\t\t\t\t\tparametersBindings[j] = parameters[j].type.resolvedType;", "+\t\t\t\t\t\t\t\t\t\tTypeBinding[] parametersBindings;", "+\t\t\t\t\t\t\t\t\t\tif (methodBinding == null) { // since no binding, extra types from type references", "+\t\t\t\t\t\t\t\t\t\t\tparametersBindings = new TypeBinding[parametersLength];", "+\t\t\t\t\t\t\t\t\t\t\tfor (int j = 0; j < parametersLength; j++) {", "+\t\t\t\t\t\t\t\t\t\t\t\tTypeBinding parameterType = parameters[j].type.resolvedType;", "+\t\t\t\t\t\t\t\t\t\t\t\tif (!parameterType.isValidBinding() && parameterType.closestMatch() != null) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tparameterType = parameterType.closestMatch();", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\tparametersBindings[j] = parameterType;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tparametersBindings = methodBinding.parameters;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98cc0049f06442153c246987a861f0b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "ec64763fa4e57b4943311ee555e5ddce81854cf2", "commitAfterChange": "b0ee678b65f48d1cfab35972dd53d6bd85389446", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope)", "signatureAfterChange": " \tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope)", "diff": ["+\t\tif (this.exactMethodBinding != null) {", "+\t\t\tMethodBinding functionType = targetType.getSingleAbstractMethod(scope, true);", "+\t\t\tif (functionType == null)", "+\t\t\t\treturn null;", "+\t\t\tint n = functionType.parameters.length;", "+\t\t\tint k = this.exactMethodBinding.parameters.length;", "+\t\t\treturn (n == k || n == k + 1) ? this.exactMethodBinding : null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "991021d5703df6581452daf4a4570715", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tprivate static void updateVariableValues( \t\tString[] variableNames, \t\tIPath[] variablePaths, \t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tprivate static void updateVariableValues( \t\tString[] variableNames, \t\tIPath[] variablePaths, \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tIPath oldPath = (IPath)JavaModelManager.variableGet(variableNames[i]);", "-\t\t\tif (oldPath == JavaModelManager.VariableInitializationInProgress) oldPath = null;", "+\t\t\tString variableName = variableNames[i];", "+\t\t\tIPath oldPath = (IPath)JavaModelManager.variableGet(variableName); // if reentering will provide previous session value ", "+\t\t\tif (oldPath == JavaModelManager.VariableInitializationInProgress){", "+\t\t\t\tIPath previousPath = (IPath)JavaModelManager.PreviousSessionVariables.get(variableName);", "+\t\t\t\tif (previousPath != null){", "+\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\t\tSystem.out.println(\"CPVariable INIT - reentering access to variable: \" + variableName+ \" during its initialization, will see previous value: \"+ previousPath); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t}", "+\t\t\t\t\tJavaModelManager.variablePut(variableName, previousPath); // replace value so reentering calls are seeing old value", "+\t\t\t\t}", "+\t\t\t\toldPath = previousPath;", "+\t\t\t}", "-\t\t\t\t\t\t\t\taffectedProjects.put(project, ((JavaProject)project).getResolvedClasspath(true));", "+\t\t\t\t\t\t\t\taffectedProjects.put(project, project.getResolvedClasspath(true));", "-\t\t\t\t\t\t\t\taffectedProjects.put(project, ((JavaProject)project).getResolvedClasspath(true));", "+\t\t\t\t\t\t\t\taffectedProjects.put(project, project.getResolvedClasspath(true));", "-\t\t\tIPath path = variablePaths[i];", "-\t\t\tJavaModelManager.variablePut(variableNames[i], path);", "+\t\t\tJavaModelManager.variablePut(variableNames[i], variablePaths[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a94efa4f4b3106d6371a67aa419d4ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/MementoTokenizer.java", "commitBeforeChange": "2d127f9c4f7d2f6e84664bc558e4d5a8224f5ac8", "commitAfterChange": "ba102afaa27b3b6b63ee0fd01eab5a8d45f4d8a9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic String nextToken()", "signatureAfterChange": "  \tpublic String nextToken()", "diff": ["+\t\t\t\t// Also covers JavaElement#JEM_DELIMITER_ESCAPE, in which case, ", "+\t\t\t\t// we seek ahead by one char and check if it's an escaped delimiter", "+\t\t\t\t// and if that's true, we return that as the token. ", "+\t\t\t\t// Else, we decide that JEM_JAVAPROJECT is the current token.", "+\t\t\t\tif (this.index < this.length) {", "+\t\t\t\t\tchar nextChar = this.memento[this.index++];", "+\t\t\t\t\tswitch(nextChar) {", "+\t\t\t\t\t\tcase JavaElement.JEM_LAMBDA_EXPRESSION:", "+\t\t\t\t\t\t\treturn LAMBDA_EXPRESSION;", "+\t\t\t\t\t\tcase JavaElement.JEM_LAMBDA_METHOD:", "+\t\t\t\t\t\t\treturn LAMBDA_METHOD;", "+\t\t\t\t\t\tcase JavaElement.JEM_STRING:", "+\t\t\t\t\t\t\treturn STRING;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tthis.index--;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tcase JavaElement.JEM_LAMBDA_EXPRESSION:", "-\t\t\t\treturn LAMBDA_EXPRESSION;", "-\t\t\tcase JavaElement.JEM_LAMBDA_METHOD:", "-\t\t\t\treturn LAMBDA_METHOD;", "-\t\t\tcase JavaElement.JEM_STRING:", "-\t\t\t\treturn STRING;", "-\t\t\t\tcase JavaElement.JEM_LAMBDA_EXPRESSION:", "-\t\t\t\tcase JavaElement.JEM_LAMBDA_METHOD:\t", "-\t\t\t\tcase JavaElement.JEM_STRING:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afb4c83d1c3143a82ba366b75f8d22f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "0f3488dac4b5e77709c2ba33d94446481058e6f7", "commitAfterChange": "99350dc001d49db8dc24214c00ce73e1cd4de055", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t// Variables initialized only for the purpose of the for loop can be removed for further flow info", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=359495", "+\t\tif (this.initializations != null) {", "+\t\t\tfor (int i = 0; i < this.initializations.length; i++) {", "+\t\t\t\tStatement init = this.initializations[i];", "+\t\t\t\tif (init instanceof LocalDeclaration) {", "+\t\t\t\t\tLocalVariableBinding binding = ((LocalDeclaration) init).binding;", "+\t\t\t\t\tmergedInfo.resetAssignmentInfo(binding);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1fb31d99076001d93e83fdcd91a484d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "04969acd296957373e2c11d1fa6749ece6b3b165", "commitAfterChange": "a6b612a10e662a9a3068db57f25ae43c85426c25", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["+\t\t// unexpected parameters array", "+\t\tif (this.invalidParameters != null) {", "+\t\t\tfor (int i=0; i<this.invalidParameters.length; i++) {", "+\t\t\t\tJavadocSingleNameReference param = this.invalidParameters[i];", "+\t\t\t\tif (param.sourceStart==start) {", "+\t\t\t\t\treturn param;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4613b31be327652f26758efbf860db4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "9a282e201d7bcf805a911be644106295038b1f1b", "commitAfterChange": "e6d78cda375a26ce6fdb882d62ed50fe3c6a25b5", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public String getAttachedJavadoc(IProgressMonitor monitor, String defaultEncoding) throws JavaModelException", "signatureAfterChange": " public String getAttachedJavadoc(IProgressMonitor monitor, String defaultEncoding) throws JavaModelException", "diff": ["+\tPerProjectInfo projectInfo = JavaModelManager.getJavaModelManager().getPerProjectInfoCheckExistence(this.getJavaProject().getProject());", "+\tif (projectInfo.javadocCache != null) {", "+\t\tfinal String cachedJavadoc = (String) projectInfo.javadocCache.get(this);", "+\t\tif (cachedJavadoc != null) {", "+\t\t\treturn cachedJavadoc;", "+\t\t}", "+\t} else {", "+\t\tprojectInfo.javadocCache = new HashMap();", "+\t}", "+\tprojectInfo.javadocCache.put(this, contents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b571316d564bae48249b0e9206ba15ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "390e166678e0fa49ec55a0c44a3dd31625f6e21a", "commitAfterChange": "9ea60639cd404b75c69d97f9c48097cabdf417fc", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tsynchronized IBinding resolveName(Name name)", "signatureAfterChange": " \tsynchronized IBinding resolveName(Name name)", "diff": ["-\t\t\t\ttry {", "-\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), true, importReference.isStatic());", "-\t\t\t\t} catch (RuntimeException e) {", "-\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "+\t\t\t\tif (importReferenceLength == indexInImportReference) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), importReference.onDemand, importReference.isStatic());", "+\t\t\t\t\t} catch (RuntimeException e) {", "+\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), true, importReference.isStatic());", "+\t\t\t\t\t} catch (RuntimeException e) {", "+\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "+\t\t\t\t\t}", "+\t\t\t\t\t} else if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.FieldBinding) {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.FieldBinding)binding);\t\t\t\t\t\t", "+\t\t\t\t\t} else if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.MethodBinding) {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getMethodBinding((org.eclipse.jdt.internal.compiler.lookup.MethodBinding)binding);\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b62df86acedd99ed8e639eb58f642ee3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "1af26d01cfd72849d8c290dd25ccb7fc62852780", "commitAfterChange": "72895982cdfd43c6e856c9e0af3d1d64cc3e0181", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " public IPath getSourceAttachmentPath() throws JavaModelException", "signatureAfterChange": " public IPath getSourceAttachmentPath() throws JavaModelException", "diff": ["-\treturn null;", "+\tif (getKind() != K_BINARY) return null;", "+\t", "+\tString serverPathString= getSourceAttachmentProperty();", "+\tif (serverPathString == null) {", "+\t\treturn null;", "+\t}", "+\tint index= serverPathString.lastIndexOf(ATTACHMENT_PROPERTY_DELIMITER);", "+\tif (index < 0) return null;", "+\tString serverSourcePathString= serverPathString.substring(0, index);", "+\treturn new Path(serverSourcePathString);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babe80c86f56f1bcba0d53b408abbd64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "+public FlowInfo analyseCode(", "-", "-\t\tflowInfo = expression", "-\t\t\t.analyseCode(currentScope, flowContext, flowInfo)", "-\t\t\t.unconditionalInits();", "-\t\texpression.checkNullStatus(currentScope, flowContext, flowInfo, FlowInfo.NON_NULL);", "-\t\treturn flowInfo;", "+\tLocalVariableBinding local = this.expression.localVariableBinding();", "+\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\tflowContext.recordUsingNullReference(currentScope, local, ", "+\t\t\tthis.expression, FlowContext.CAN_ONLY_NULL, flowInfo);", "+\t\tflowInfo = expression.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t\tFlowInfo initsWhenFalse = flowInfo.copy();", "+\t\tflowInfo.markAsComparedEqualToNonNull(local);", "+\t\treturn FlowInfo.conditional(flowInfo, initsWhenFalse);", "+\treturn expression.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd73425ac9ce4dd25dd44938018ff049", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic static IPath getClasspathVariable(final String variableName)", "signatureAfterChange": " \tpublic static IPath getClasspathVariable(final String variableName)", "diff": ["-", "+\t", "+", "-\t\tfinal ClasspathVariableInitializer initializer = getClasspathVariableInitializer(variableName);", "+\t\tfinal ClasspathVariableInitializer initializer = JavaCore.getClasspathVariableInitializer(variableName);", "-\t\t\tJavaModelManager.variablePut(variableName, JavaModelManager.VariableInitializationInProgress); // avoid initialization cycles", "-\t\t\t// wrap initializer call with Safe runnable in case initializer would be causing some grief", "-\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\tUtil.log(exception, \"Exception occurred in classpath variable initializer: \"+initializer); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tpublic void run() throws Exception {", "-\t\t\t\t\tinitializer.initialize(variableName);", "-\t\t\t\t}", "-\t\t\t});", "-\t\t\tvariablePath = (IPath) JavaModelManager.variableGet(variableName); // retry", "-\t\t\tif (variablePath == JavaModelManager.VariableInitializationInProgress) {", "-\t\t\t\t// variable was not initialized by initializer, remove it", "-\t\t\t\tJavaModelManager.variablePut(variableName, null);", "-\t\t\t\treturn null; // break cycle", "-\t\t\t}", "-\t\t\t\tSystem.out.println(\"CPVariable INIT - after initialization: \" + variableName + \" --> \" + variablePath); //$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"CPVariable INIT - triggering initialization of: \" + variableName+ \" using initializer: \"+ initializer); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Exception(\"FAKE exception for dumping current CPVariable (\"+variableName+ \")INIT invocation stack trace\").printStackTrace(); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t}", "+\t\t\tJavaModelManager.variablePut(variableName, JavaModelManager.VariableInitializationInProgress); // avoid initialization cycles", "+\t\t\tboolean ok = false;", "+\t\t\ttry {", "+\t\t\t\t// wrap initializer call with Safe runnable in case initializer would be causing some grief", "+\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in classpath variable initializer: \"+initializer+\" while initializing variable: \"+variableName); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\tinitializer.initialize(variableName);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\tvariablePath = (IPath) JavaModelManager.variableGet(variableName); // initializer should have performed side-effect", "+\t\t\t\tif (variablePath == JavaModelManager.VariableInitializationInProgress) return null; // break cycle (initializer did not init or reentering call)", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\tSystem.out.println(\"CPVariable INIT - after initialization: \" + variableName + \" --> \" + variablePath); //$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tok = true;", "+\t\t\t} finally {", "+\t\t\t\tif (!ok) JavaModelManager.variablePut(variableName, null); // flush cache", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\tSystem.out.println(\"CPVariable INIT - no initializer found for: \" + variableName); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c03ff6b2d127e8efb8f6550eecb993e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void addInfoFromOpenSourceType(SourceType type, ArrayList infos) throws JavaModelException", "signatureAfterChange": " protected void addInfoFromOpenSourceType(SourceType type, ArrayList infos) throws JavaModelException", "diff": ["-\tIType[] members = type.getTypes();", "+\tIJavaElement[] members = type.getChildren();", "-\t\tthis.addInfoFromOpenSourceType((SourceType)members[i], infos);", "+\t\tIJavaElement member = members[i];", "+\t\tif (member instanceof SourceType) {", "+\t\t\taddInfoFromOpenSourceType((SourceType)member, infos);", "+\t\t} else {", "+\t\t\t// field, initializer or method", "+\t\t\tIJavaElement[] memberMembers = ((IParent)member).getChildren();", "+\t\t\tfor (int j = 0; j < memberMembers.length; j++) {", "+\t\t\t\tIJavaElement memberMember = memberMembers[j];", "+\t\t\t\taddInfoFromOpenSourceType((SourceType)memberMember, infos);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c655622cf788d0f7e03d345b4b6ed58d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "e33ceacdb6e9b17f29de3a23e3df28f1c6bec162", "commitAfterChange": "81fe472327b51c234112233c89df88e95ab01675", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["+\t\tIPath potentialNestedOutput = null;", "+\t\tint sourceEntryCount = 0;", "+\t\t\t\t\tsourceEntryCount++;", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInOutput\", customOutput.toString(), outputLocations[index].toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\tif (index == 0) {", "+\t\t\t\t\t\t\t\t// custom output is nested in project's output: need to check if all source entries have a custom", "+\t\t\t\t\t\t\t\t// output before complaining", "+\t\t\t\t\t\t\t\tif (potentialNestedOutput == null) potentialNestedOutput = customOutput;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInOutput\", customOutput.toString(), outputLocations[index].toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t// allow custom output nesting in project's output if all source entries have a custom output", "+\t\tif (potentialNestedOutput != null && sourceEntryCount > outputCount-1) {", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInOutput\", potentialNestedOutput.toString(), outputLocations[0].toString())); //$NON-NLS-1$", "+\t\t}", "-\t\t\t\tif (!allowNestingInOutputLocations[index]){", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInOutput\", entryPath.toString(), outputLocations[index].toString())); //$NON-NLS-1$", "+\t\t\t\tif (!allowNestingInOutputLocations[index]) {", "+\t\t\t\t\t// allow nesting in project's output if all source entries have a custom output", "+\t\t\t\t\tif (index != 0 || sourceEntryCount > outputCount - 1) {", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInOutput\", entryPath.toString(), outputLocations[index].toString())); //$NON-NLS-1$", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdafe632a59d28686fb633cd3bd9f284", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceCompletionTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected void tearDown() throws Exception", "signatureAfterChange": " \tprotected void tearDown() throws Exception", "diff": ["+        ", "+\t\t// Print statistics", "+        if (TESTS_COUNT == 0) {", "+\t\t\tSystem.out.println(\"-------------------------------------\");", "+\t\t\tSystem.out.println(\"Completion performance test statistics:\");", "+\t\t\tNumberFormat intFormat = NumberFormat.getIntegerInstance();", "+\t\t\tSystem.out.println(\"  - \"+intFormat.format(ITERATION_COUNT*MEASURES_COUNT)+\" completions have been performed\");", "+\t\t\tSystem.out.println(\"  - \"+intFormat.format(this.proposalCount)+\" proposals have been done\");", "+\t\t\tSystem.out.println(\"-------------------------------------\\n\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cec72b2d8a0c4b18185a5d22d2029c09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ElementValuePair.java", "commitBeforeChange": "8aae944f1fec216ec7aa5c56aa9511065ae60c18", "commitAfterChange": "d767f31ad272e19eba4786e29173a3473ca8fe5d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public Object getValue()", "signatureAfterChange": " public Object getValue()", "diff": ["+\telse if (this.value instanceof Object[]) {", "+\t\tObject[] valueArray = (Object[]) this.value;", "+\t\tfor(int i = 0; i < valueArray.length; i++) {", "+\t\t\tObject object = valueArray[i];", "+\t\t\tif (object instanceof UnresolvedEnumConstant)", "+\t\t\t\tvalueArray[i] = ((UnresolvedEnumConstant) object).getResolved();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d09e2d060bffea1af71ea886f0535f6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "1af26d01cfd72849d8c290dd25ccb7fc62852780", "commitAfterChange": "72895982cdfd43c6e856c9e0af3d1d64cc3e0181", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 26, "signatureBeforeChange": " public IPath getSourceAttachmentRootPath() throws JavaModelException", "signatureAfterChange": " public IPath getSourceAttachmentRootPath() throws JavaModelException", "diff": ["-\treturn null;", "+\tif (getKind() != K_BINARY) return null;", "+\t", "+\tString serverPathString= getSourceAttachmentProperty();", "+\tif (serverPathString == null) {", "+\t\treturn null;", "+\t}", "+\tint index= serverPathString.lastIndexOf(ATTACHMENT_PROPERTY_DELIMITER);", "+\tString serverRootPathString= IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH;", "+\tif (index != serverPathString.length() - 1) {", "+\t\tserverRootPathString= serverPathString.substring(index + 1);", "+\t}", "+\treturn new Path(serverRootPathString);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7dc83a491944f94f1a455a28164c0d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "21b06b1f77b7fda7b2358e6e2d335e77a6ac8125", "commitAfterChange": "b397fbf1ef2684ee73e7617091ec4c7be38fc011", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["+\t\tif( _skipTypeGeneration ) return null;", "+\t\telse if( _generatedPackageFragmentRoot == null ){\t\t\t", "+\t\t\tString message = Messages.bind(", "+\t\t\t\t\tMessages.GeneratedFileManager_missing_classpath_entry, ", "+\t\t\t\t\tnew String[] {_snapshotFolderName});", "+\t\t\tIMarker marker = _aptProject.getJavaProject().getProject().createMarker(AptPlugin.APT_CONFIG_PROBLEM_MARKER);", "+\t\t\tmarker.setAttributes(", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tIMarker.MESSAGE, ", "+\t\t\t\t\t\tIMarker.SEVERITY", "+\t\t\t\t\t},", "+\t\t\t\t\tnew Object[] {", "+\t\t\t\t\t\tmessage,", "+\t\t\t\t\t\tIMarker.SEVERITY_ERROR", "+\t\t\t\t\t}", "+\t\t\t\t);", "+\t\t\t// disable any future type generation", "+\t\t\t_skipTypeGeneration = true;", "+\t\t\treturn null;", "+\t\t}", "+\t\t", "-\t\t\t\tthrow new IllegalStateException(\"failed to locate package '\" + pkgName + \"'\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tfinal Exception e = new IllegalStateException(\"failed to locate package '\" + pkgName + \"'\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\te.printStackTrace();", "+\t\t\t\tthrow e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d965fa5c70e3a65cbb47a8e9a1593361", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "c0f9341badc01719d6b4f4d3ab99e20a8dc0821a", "commitAfterChange": "e50fba8828c054207eb4f1a56a83880c9a1ebbc8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, long ordering)", "signatureAfterChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, long ordering)", "diff": ["+\t} else if (ordering == BYTECODE_DECLARATION_ORDER) {", "+\t\ttry {", "+\t\t\tList bytecodeOrderedTestNames = OrderedTestSuite.getBytecodeOrderedTestNames(evaluationTestClass);", "+\t\t\tbytecodeOrderedTestNames.retainAll(names);", "+\t\t\tif (bytecodeOrderedTestNames.size() != names.size()) {", "+\t\t\t\tSystem.err.println(\"not all test names found in bytecode: \" + evaluationTestClass.getName());", "+\t\t\t}", "+\t\t\tnames = bytecodeOrderedTestNames;", "+\t\t} catch (IOException e) {", "+\t\t\tSystem.err.println(\"suite failed to detect test order: \" + evaluationTestClass.getName());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deda1e466be6256ece9fce75cb7571a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "3749ab08b3bcc9564a3496ebb9f23e5b7abd23aa", "commitAfterChange": "4a23c9efea3c3cfbb8a860d4cd8de9b8a033b86a", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  \t\tpublic void setLog(String logFileName) throws InvalidInputException", "signatureAfterChange": "  \t\tpublic void setLog(String logFileName) throws InvalidInputException", "diff": ["+\t\t\tfinal Date date = new Date();", "+\t\t\tfinal SimpleDateFormat dateFormat = new SimpleDateFormat(\"d MMM yyyy HH:mm:ss\", Locale.getDefault());//$NON-NLS-1$", "+\t\t\t\t\t\t// insert time stamp as comment", "+\t\t\t\t\t\tthis.log.println(\"<!-- \" + dateFormat.format(date) + \" -->\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.log.println(\"# \" + dateFormat.format(date));//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.log.println(\"# \" + dateFormat.format(date));//$NON-NLS-1$//$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39730faae0f98a8a02875786c34fea4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate int classpathContains(IClasspathEntry[] list, IClasspathEntry entry)", "signatureAfterChange": " \tprivate int classpathContains(IClasspathEntry[] list, IClasspathEntry entry)", "diff": ["+\t\t\t\t\tif (JavaCore.ENABLED.equals(this.project.getOption(JavaCore.COMPILER_ANNOTATION_NULL_ANALYSIS, true))) {", "+\t\t\t\t\t\t// if null annotations are enabled, also check for changes in external annotation attachment", "+\t\t\t\t\t\tString annotationPath = ClasspathEntry.getRawExternalAnnotationPath(entry);", "+\t\t\t\t\t\tString otherAnnotationPath = ClasspathEntry.getRawExternalAnnotationPath(other);", "+\t\t\t\t\t\tif (annotationPath != null && otherAnnotationPath != null) {", "+\t\t\t\t\t\t\tif (!annotationPath.equals(otherAnnotationPath))", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t} else if (annotationPath != otherAnnotationPath) {", "+\t\t\t\t\t\t\tcontinue; // null and not-null", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea3d91e300f9eebde5317f8279e9cdd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "ea07bf5f313abc361de8bf9f86f0f213eade86cf", "commitAfterChange": "26bbc0f1d79a90c550f0bbb95cc6eeae2aa4e3bf", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\tif (affectedProjects.length == 1) {", "+\t\t\tIClasspathContainer container = respectiveContainers[0];", "+\t\t\tif (container != null) {", "+\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\tIJavaProject project = affectedProjects[0];", "+\t\t\t\tIClasspathContainer existingCointainer = manager.containerGet(project, containerPath);", "+\t\t\t\tif (existingCointainer == JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS) {", "+\t\t\t\t\tmanager.containerBeingInitializedPut(project, containerPath, container);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eccfff6b353bd5cda014e7384502e302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedResourceChangeListener.java", "commitBeforeChange": "458dca4c2b9da6278d150eba84339274fccc6057", "commitAfterChange": "01d995488d5e309c6b243da146c63894a6df881d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": " \t \tpublic void resourceChanged(IResourceChangeEvent event)", "diff": ["-\t\tif ( event.getType() == IResourceChangeEvent.PRE_BUILD )", "-\t\t{", "-\t\t\ttry", "-\t\t\t{ ", "-\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\tAptPlugin.trace(\"---- generated resource change listener got a pre-build event\"); //$NON-NLS-1$", "-\t\t\t\tfinal PreBuildVisitor visitor = new PreBuildVisitor();", "-\t\t\t\tevent.getDelta().accept( visitor );", "-\t\t\t\taddGeneratedSrcFolderTo(visitor.getProjectsThatNeedGenSrcFolder());", "-\t\t\t}", "-\t\t\tcatch ( CoreException ce )", "-\t\t\t{", "-\t\t\t\tAptPlugin.log(ce, \"Error during resource change for \" + event); //$NON-NLS-1$", "-\t\t\t\t// TODO:  handle exception here.", "-\t\t\t}", "-\t\t}", "-\t\telse if ( event.getType() == IResourceChangeEvent.PRE_CLOSE )", "+\t\tif ( event.getType() == IResourceChangeEvent.PRE_CLOSE )", "+\t\telse if ( event.getType() == IResourceChangeEvent.PRE_BUILD )", "+\t\t{", "+\t\t\ttry", "+\t\t\t{ ", "+\t\t\t\tif( AptPlugin.DEBUG )", "+\t\t\t\t\tAptPlugin.trace(\"---- generated resource change listener got a pre-build event\"); //$NON-NLS-1$", "+\t\t\t\t", "+\t\t\t\tfinal PreBuildVisitor pbv = new PreBuildVisitor();", "+\t\t\t\t", "+\t\t\t\t// First we need to handle previously deleted resources (from the post-change event),", "+\t\t\t\t// because we could not perform file i/o during that event", "+\t\t\t\tfor (IResource resource : deletedResources) {", "+\t\t\t\t\tpbv.handleDeletion(resource);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tevent.getDelta().accept( pbv );", "+\t\t\t\taddGeneratedSrcFolderTo(pbv.getProjectsThatNeedGenSrcFolder());", "+\t\t\t\t", "+\t\t\t\t// Now clear the set of deleted resources,", "+\t\t\t\t// as we don't want to re-handle them", "+\t\t\t\tdeletedResources.clear();", "+\t\t\t}", "+\t\t\tcatch ( CoreException ce )", "+\t\t\t{", "+\t\t\t\tAptPlugin.log(ce, \"Error during pre-build resource change\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\telse if (event.getType() == IResourceChangeEvent.POST_CHANGE) {", "+\t\t\tPostChangeVisitor pcv = new PostChangeVisitor();", "+\t\t\ttry {", "+\t\t\t\tevent.getDelta().accept(pcv);", "+\t\t\t}", "+\t\t\tcatch (CoreException ce) {", "+\t\t\t\tAptPlugin.log(ce, \"Error during post-change resource event\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edf95577445459e70bce620d457826c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "d3d6e8a120fcc21d2141655c16c3f72a3fe7aa82", "commitAfterChange": "a914eaa80cfee2f1a5138d665998598bc293ae8e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["+\t\t\tif (infCtx == null && variableArity && parameters.length == arguments.length) { // re-check", "+\t\t\t\tTypeBinding lastParam = parameters[parameters.length-1];", "+\t\t\t\tExpression lastArg = arguments[arguments.length-1];", "+\t\t\t\tif (lastArg.isCompatibleWith(lastParam, null)) {", "+\t\t\t\t\tvariableArity = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t\t\t\t\t\tif (!improvedBinding.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\tinnerContext.reportInvalidInvocation(innerInvocation, improvedBinding);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// TODO need to report invalidMethod if !improvedBinding.isValidBinding() ?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7b3fb2c67d9fd598fb33d5c8fe472e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["+}", "+public static Test suite() {", "+\tTestSuite suite = new TestSuite(AnnotationTest.class.getName());", "+\tfor (int i=0; i<allTestClasses.size(); i++) {", "+\t\taddTest(suite, (Class) allTestClasses.get(i));", "+\t}", "+\treturn new RegressionTestSetup(suite, COMPLIANCE_1_4);", "+}", "-public static Test suite() {", "-\tif (false) {", "-\t   \tTestSuite ts;", "-\t\t//some of the tests depend on the order of this suite.", "-\t\tts = new TestSuite();", "-\t\tts.addTest(new AnnotationTest(\"test221\"));", "-\t\treturn new RegressionTestSetup(ts, COMPLIANCE_1_4);", "-\treturn setupSuite(testClass());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f81b9fc2b4d58f6423135d26033058b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "4ce841d6606c2c0b7f24c9925dd47ac216c52a6e", "commitAfterChange": "dd4ead302ceb5b95b74beecab83c5b580915aa31", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void exitMethod(int declarationEnd, int defaultValueStart, int defaultValueEnd)", "signatureAfterChange": " public void exitMethod(int declarationEnd, Expression defaultValue)", "diff": ["-public void exitMethod(int declarationEnd, int defaultValueStart, int defaultValueEnd) {", "+public void exitMethod(int declarationEnd, Expression defaultValue) {", "-\tif (info.isAnnotationMethod()) {", "+\tif (info.isAnnotationMethod() && defaultValue != null) {", "-\t\tannotationMethodInfo.defaultValueStart = defaultValueStart;", "-\t\tannotationMethodInfo.defaultValueEnd = defaultValueEnd;", "+\t\tannotationMethodInfo.defaultValueStart = defaultValue.sourceStart;", "+\t\tannotationMethodInfo.defaultValueEnd = defaultValue.sourceEnd;", "+\t\tJavaElement element = (JavaElement) this.handleStack.peek();", "+\t\torg.eclipse.jdt.internal.core.MemberValuePair defaultMemberValuePair = new org.eclipse.jdt.internal.core.MemberValuePair(element.getElementName());", "+\t\tdefaultMemberValuePair.value = getMemberValue(defaultMemberValuePair, defaultValue);", "+\t\tannotationMethodInfo.defaultValue = defaultMemberValuePair;"]}], "num": 11611}
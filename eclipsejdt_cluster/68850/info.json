{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b406511956355f5cd014d83dfe698030", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4387b06d37e103aad46958534dd7aee5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "b1d084f45599e11d80665b306c9b3f617ba97f32", "commitAfterChange": "1780102e8a06260eba129007a669ddcafe6f2f5f", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic TypeBinding[] getNonWildcardParameterization()", "signatureAfterChange": " \tpublic TypeBinding[] getNonWildcardParameterization(Scope scope)", "diff": ["-\tpublic TypeBinding[] getNonWildcardParameterization() {", "+\tpublic TypeBinding[] getNonWildcardParameterization(Scope scope) {", "-\t\t\t\t\t\tReferenceBinding[] allBounds = new ReferenceBinding[len];", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tint idx = 0;", "-\t\t\t\t\t\t\t// Ui", "-\t\t\t\t\t\t\tallBounds[idx++] = (ReferenceBinding) wildcard.bound;", "-\t\t\t\t\t\t\tif (otherUBounds != null)", "-\t\t\t\t\t\t\t\tfor (int j = 0; j < otherUBounds.length; j++)", "-\t\t\t\t\t\t\t\t\tallBounds[idx++] = (ReferenceBinding) otherUBounds[j];", "-\t\t\t\t\t\t\t// Bi", "-\t\t\t\t\t\t\tif (typeParameters[i].firstBound != null)", "-\t\t\t\t\t\t\t\tallBounds[idx++] = (ReferenceBinding) typeParameters[i].firstBound;", "-\t\t\t\t\t\t\tfor (int j = 0; j < otherBBounds.length; j++)", "-\t\t\t\t\t\t\t\tallBounds[idx++] = (ReferenceBinding) otherBBounds[j];", "-\t\t\t\t\t\t} catch (ClassCastException cce) {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tReferenceBinding[] glb = Scope.greaterLowerBound(allBounds);", "+\t\t\t\t\t\tTypeBinding[] allBounds = new TypeBinding[len]; // TypeBinding so that in this round we accept ArrayBinding, too.", "+\t\t\t\t\t\tint idx = 0;", "+\t\t\t\t\t\t// Ui", "+\t\t\t\t\t\tallBounds[idx++] = wildcard.bound;", "+\t\t\t\t\t\tif (otherUBounds != null)", "+\t\t\t\t\t\t\tfor (int j = 0; j < otherUBounds.length; j++)", "+\t\t\t\t\t\t\t\tallBounds[idx++] = otherUBounds[j];", "+\t\t\t\t\t\t// Bi", "+\t\t\t\t\t\tif (typeParameters[i].firstBound != null)", "+\t\t\t\t\t\t\tallBounds[idx++] = typeParameters[i].firstBound;", "+\t\t\t\t\t\tfor (int j = 0; j < otherBBounds.length; j++)", "+\t\t\t\t\t\t\tallBounds[idx++] = otherBBounds[j];", "+\t\t\t\t\t\tTypeBinding[] glb = Scope.greaterLowerBound(allBounds, null, this.environment);", "-\t\t\t\t\t\t\ttypes[i] = new IntersectionCastTypeBinding(glb, this.environment);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tReferenceBinding[] refs = new ReferenceBinding[glb.length];", "+\t\t\t\t\t\t\t\tSystem.arraycopy(glb, 0, refs, 0, glb.length); // TODO: if an array type plus more types get here, we get ArrayStoreException!", "+\t\t\t\t\t\t\t\ttypes[i] = new IntersectionCastTypeBinding(refs, this.environment);", "+\t\t\t\t\t\t\t} catch (ArrayStoreException ase) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().genericInferenceError(\"Cannot compute glb of \"+Arrays.toString(glb), null); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80c1de26a100841850c8e19e28578882", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 160, "signatureBeforeChange": " \tpublic void testTypeDeclaration()", "signatureAfterChange": " \tpublic void testTypeDeclaration()", "diff": ["-\t\tx1.setSuperclass(N2);", "-\t\tx1.superInterfaces().add(N3);", "-\t\tx1.superInterfaces().add(ast.newSimpleName(\"J\")); //$NON-NLS-1$", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tx1.setSuperclass(N2);", "+\t\t\tx1.superInterfaces().add(N3);", "+\t\t\tx1.superInterfaces().add(N4);", "+\t\t} else {", "+\t\t\tx1.modifiers().add(MOD1);", "+\t\t\tx1.modifiers().add(MOD2);", "+\t\t\tx1.typeParameters().add(TP1);", "+\t\t\tx1.typeParameters().add(TP2);", "+\t\t\tx1.setSuperclassType(PT1);", "+\t\t\tx1.superInterfaceTypes().add(T1);", "+\t\t\tx1.superInterfaceTypes().add(T2);", "+\t\t}"]}], "num": 68850}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4b3e1db5afe7d5558a939f7829ca7ef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c71588da4d23db8b2b1ab2d455431c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "31d915ea88712a08a053d81dbaa3f51ee5d00b1e", "commitAfterChange": "6a649f40f31b6ce7e5ab331634b9ef2be77ed006", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(\r \t\tIResourceDelta delta, \r \t\tint elementType, \r \t\tIJavaProject currentProject,\r \t\tIPath currentOutput,\r \t\tboolean currentProjIsOutput)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject) {\r", "-\r", "+\tprotected boolean traverseDelta(\r", "+\t\tIResourceDelta delta, \r", "+\t\tint elementType, \r", "+\t\tIJavaProject currentProject,\r", "+\t\tIPath currentOutput,\r", "+\t\tboolean currentProjIsOutput) {\r", "+\t\t\t\r", "+\t\t}\r", "+\t\t\r", "+\t\t// get the project's output location\r", "+\t\tif (currentOutput == null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tIJavaProject proj =\r", "+\t\t\t\t\tcurrentProject == null ?\r", "+\t\t\t\t\t\t(IJavaProject)this.createElement(res.getProject(), IJavaElement.JAVA_PROJECT, null) :\r", "+\t\t\t\t\t\tcurrentProject;\r", "+\t\t\t\tif (proj != null) {\r", "+\t\t\t\t\tcurrentOutput = proj.getOutputLocation();\r", "+\t\t\t\t\tcurrentProjIsOutput = proj.getProject().getFullPath().equals(currentOutput);\r", "+\t\t\t\t}\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t}\r", "+\t\t\t\t// filter out changes in output location\r", "+\t\t\t\tif (currentProjIsOutput) {\r", "+\t\t\t\t\t// case of proj=src\r", "+\t\t\t\t\tif (childType == IJavaElement.CLASS_FILE) {\r", "+\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\t// case of .class file under project and no source folder\r", "+\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT \r", "+\t\t\t\t\t\t&& childRes instanceof IFile \r", "+\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {\r", "+\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else if (currentOutput != null && currentOutput.isPrefixOf(childPath)) {\r", "+\t\t\t\t\tcontinue;\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "-\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject)) {\r", "+\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, currentProjIsOutput)) {\r", "-\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot);\r", "+\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot, null, false);\r", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0a7a922100bf3937968018d19c3f640", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d95cddc2779658eead76d04d49201937dc19989e", "commitAfterChange": "16d13599c672f7d6ba6274375893bf3e03d51bfe", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": " public final static void buildFilesFromLPG(String dataFilename)\tthrows java.io.IOException", "signatureAfterChange": " public final static void buildFilesFromLPG(String dataFilename, String dataFilename2)\tthrows java.io.IOException", "diff": ["-public final static void buildFilesFromLPG(String dataFilename)\tthrows java.io.IOException {", "+public final static void buildFilesFromLPG(String dataFilename, String dataFilename2)\tthrows java.io.IOException {", "-\tbuildFileOfIntFor(prefix + (++i) + \".rsc\", \"lhs\", tokens); //$NON-NLS-2$ //$NON-NLS-1$", "+\t", "+\tString lhs_fileName = prefix + (++i) + \".rsc\"; //$NON-NLS-1$", "+\tbuildFileOfIntFor(lhs_fileName, \"lhs\", tokens); //$NON-NLS-1$", "-\tbuildFileOfIntFor(prefix + (++i) + \".rsc\", \"non_terminal_index\", tokens); //$NON-NLS-2$ //$NON-NLS-1$", "+\tString non_terminal_index_fileName = prefix + (++i) + \".rsc\"; //$NON-NLS-1$", "+\tbuildFileOfIntFor(non_terminal_index_fileName, \"non_terminal_index\", tokens); //$NON-NLS-1$", "-\tbuildFileForName(prefix + (++i) + \".rsc\", new String(contents));//$NON-NLS-1$", "+\tString name_fileName = prefix + (++i) + \".rsc\";//$NON-NLS-1$", "+\tbuildFileForName(name_fileName, new String(contents));", "+\t", "+\tcontents = new char[] {};", "+\ttry {", "+\t\tcontents = Util.getFileCharContent(new File(dataFilename2), null);", "+\t} catch (IOException ex) {", "+\t\tSystem.out.println(Util.bind(\"parser.incorrectPath\")); //$NON-NLS-1$", "+\t\treturn;", "+\t}", "+\tst = new java.util.StringTokenizer(new String(contents), \"\\t\\n\\r=\");  //$NON-NLS-1$", "+\ttokens = new String[st.countTokens()];", "+\ti = 0;", "+\twhile (st.hasMoreTokens()) {", "+\t\ttokens[i++] = st.nextToken();", "+\t}", "+\tbuildFileForReadableName(READABLE_NAMES_FILE+\".properties\", lhs_fileName, non_terminal_index_fileName, name_fileName, tokens);//$NON-NLS-1$"]}], "num": 9797}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6bd18c3c331ef4489890268f0799219", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5618f3f754cc9f16c2817d3720567ab1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "b90ae111ff29246e99448511171a44d6aca74c50", "commitAfterChange": "c746ac6ae60dd73c0e681419d361cf16b338a627", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "signatureAfterChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "diff": ["-\t\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));", "+\t\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : SubMonitor.convert(progress, concurrentJobWork));", "-\t\t\t\t\t\t\t\tsubProgress = new SubProgressMonitor(progress, concurrentJobWork * 8 / 10);", "+\t\t\t\t\t\t\t\tsubProgress = SubMonitor.convert(progress, concurrentJobWork * 8 / 10);", "-\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));", "+\t\t\tstatus = searchJob.execute(progress == null ? null : SubMonitor.convert(progress, concurrentJobWork));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5fd2ece08d2745f6a97fcbfdc5ce6ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "c746ac6ae60dd73c0e681419d361cf16b338a627", "commitAfterChange": "638b00bc8e52106dab44ca0f7aa7dd0d9f96d9dc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "signatureAfterChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "diff": ["-\t\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : SubMonitor.convert(progress, concurrentJobWork));", "+\t\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));", "-\t\t\t\t\t\t\t\tsubProgress = SubMonitor.convert(progress, concurrentJobWork * 8 / 10);", "+\t\t\t\t\t\t\t\tsubProgress = new SubProgressMonitor(progress, concurrentJobWork * 8 / 10);", "-\t\t\tstatus = searchJob.execute(progress == null ? null : SubMonitor.convert(progress, concurrentJobWork));", "+\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));"]}], "num": 33713}
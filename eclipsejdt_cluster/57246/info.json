{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96cce0b473620f6b9ae5897fa2eae28e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19cff3d7b3a13ea099928f1e77759444", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchSet.java", "commitBeforeChange": "15070dfb720141f260eff9f86b3742c51648d5f0", "commitAfterChange": "f850238096d0e6e37fbf42c72e3eea2d357ec53f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent) throws CoreException", "signatureAfterChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, boolean typeInHierarchy) throws CoreException", "diff": ["-private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent) throws CoreException {", "+private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, boolean typeInHierarchy) throws CoreException {", "-\tAstNode[] nodes = this.matchingNodes(method.declarationSourceStart, method.declarationSourceEnd);", "-\tfor (int i = 0; i < nodes.length; i++) {", "-\t\tAstNode node = nodes[i];", "-\t\tInteger level = (Integer)this.matchingNodes.get(node);", "-\t\tif ((this.matchContainer & SearchPattern.METHOD) != 0) {", "-\t\t\tthis.locator.reportReference(", "-\t\t\t\tnode, ", "-\t\t\t\tmethod, ", "-\t\t\t\tparent, ", "-\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\tthis.matchingNodes.remove(node);", "+\tif (typeInHierarchy) {", "+\t\tAstNode[] nodes = this.matchingNodes(method.declarationSourceStart, method.declarationSourceEnd);", "+\t\tfor (int i = 0; i < nodes.length; i++) {", "+\t\t\tAstNode node = nodes[i];", "+\t\t\tInteger level = (Integer)this.matchingNodes.get(node);", "+\t\t\tif ((this.matchContainer & SearchPattern.METHOD) != 0) {", "+\t\t\t\tthis.locator.reportReference(", "+\t\t\t\t\tnode, ", "+\t\t\t\t\tmethod, ", "+\t\t\t\t\tparent, ", "+\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "+\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "+\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "+\t\t\t\tthis.matchingNodes.remove(node);", "+\t\t\t}", "-\t}", "-\tif (this.potentialMatchingNodes(method.declarationSourceStart, method.declarationSourceEnd).length == 0) {", "-\t\t// no need to resolve the statements in the method", "-\t\tmethod.statements = null;", "+\t\tif (this.potentialMatchingNodes(method.declarationSourceStart, method.declarationSourceEnd).length == 0) {", "+\t\t\t// no need to resolve the statements in the method", "+\t\t\tmethod.statements = null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5857180dd7d7b3e2d42fef51c11e99d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, boolean typeInHierarchy) throws CoreException", "signatureAfterChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, boolean typeInHierarchy) throws CoreException", "diff": ["-\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor();", "-\t\tlocalDeclarationVisitor.enclosingElement = ", "-\t\t\t(parent instanceof IType) ?", "-\t\t\t\tthis.locator.createMethodHandle(method, (IType)parent) :", "-\t\t\t\tparent;", "+\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(", "+\t\t\t(parent instanceof IType)", "+\t\t\t\t? this.locator.createMethodHandle(method, (IType) parent)", "+\t\t\t\t: parent);", "-\t", "+", "-\t\tAstNode[] nodes = this.matchingNodes(method.declarationSourceStart, method.declarationSourceEnd);", "-\t\tfor (int i = 0; i < nodes.length; i++) {", "-\t\t\tAstNode node = nodes[i];", "-\t\t\tInteger level = (Integer)this.matchingNodes.get(node);", "-\t\t\tif ((this.matchContainer & SearchPattern.METHOD) != 0) {", "-\t\t\t\tthis.locator.reportReference(", "-\t\t\t\t\tnode, ", "-\t\t\t\t\tmethod, ", "-\t\t\t\t\tparent, ", "-\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t\tthis.matchingNodes.remove(node);", "+\t\tAstNode[] nodes = matchingNodes(method.declarationSourceStart, method.declarationSourceEnd);", "+\t\tif (nodes != null) {", "+\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\tAstNode node = nodes[i];", "+\t\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(node);", "+\t\t\t\tif ((this.matchContainer & SearchPattern.METHOD) != 0)", "+\t\t\t\t\tthis.locator.reportReference(node, method, parent, level.intValue());", "-\tif (this.potentialMatchingNodes(method.declarationSourceStart, method.declarationSourceEnd).length == 0) {", "-\t\t// no need to resolve the statements in the method", "-\t\tmethod.statements = null;", "-\t}"]}], "num": 57246}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c67b1ba20a2590788f7ae3137578d645", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91a38d9b67a9e54f77b156908b74c18e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "2a762b85f858691a63d4547af177cc649d7b1329", "commitAfterChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "signatureAfterChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "diff": ["-\t\tboolean hasChangedContentForDependents = false;\r", "-\r", "+\t\tboolean needToUpdateDependents = false;\r", "+\t\t\r", "-\t\tboolean oldResolvedPathLongest =\r", "-\t\t\toldResolvedPath.length >= newResolvedPath.length;\r", "+\t\tint oldLength = oldResolvedPath.length;\r", "+\t\tint newLength = newResolvedPath.length;\r", "+\t\tboolean oldResolvedPathLongest = oldLength >= newLength;\r", "-\t\t\t// do not notify remote project changes\r", "-\t\t\tif (oldResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT) continue; \r", "-\t\t\t\r", "+\t\t\t\t// do not notify remote project changes\r", "+\t\t\t\tif (oldResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT){\r", "+\t\t\t\t\tneedToUpdateDependents = true;\r", "+\t\t\t\t\tcontinue; \r", "+\t\t\t\t}\r", "+\r", "-\t\t\t\thasChangedContentForDependents |= \r", "-\t\t\t\t\t(changeKind == IClasspathEntry.CPE_SOURCE) || oldResolvedPath[i].isExported();\r", "+\t\t\t\tneedToUpdateDependents |= (changeKind == IClasspathEntry.CPE_SOURCE) || oldResolvedPath[i].isExported();\r", "-\t\t\t\thasChangedContentForDependents |= (oldResolvedPath[i].isExported() != newResolvedPath[index].isExported());\r", "+\t\t\t\t// do not notify remote project changes\r", "+\t\t\t\tif (oldResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT){\r", "+\t\t\t\t\tcontinue; \r", "+\t\t\t\t}\t\t\t\t\r", "+\t\t\t\tneedToUpdateDependents |= (oldResolvedPath[i].isExported() != newResolvedPath[index].isExported());\r", "-\t\t\t\t\t\thasChangedContentForDependents |= (changeKind == IClasspathEntry.CPE_SOURCE);\r", "+\t\t\t\t\t\tneedToUpdateDependents |= (changeKind == IClasspathEntry.CPE_SOURCE);\r", "-\t\t\t// do not notify remote project changes\r", "-\t\t\tif (newResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT) continue; \r", "-\r", "+\t\t\t\t// do not notify remote project changes\r", "+\t\t\t\tif (newResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT){\r", "+\t\t\t\t\tneedToUpdateDependents = true;\r", "+\t\t\t\t\tcontinue; \r", "+\t\t\t\t}\r", "-\t\t\t\thasChangedContentForDependents |= \r", "-\t\t\t\t\t(changeKind == IClasspathEntry.CPE_SOURCE) || newResolvedPath[i].isExported();\r", "+\t\t\t\tneedToUpdateDependents |= (changeKind == IClasspathEntry.CPE_SOURCE) || newResolvedPath[i].isExported();\r", "-\t\tif (hasDelta) {\r", "+\t\t\r", "+\t\t// need to write out the classpath file ?\r", "+\t\tboolean needSave = oldLength != newLength;\r", "+\t\tif (!needSave){\r", "+\t\t\tfor (int i = 0; i < newLength; i++){ // need to check for entry#equals\r", "+\t\t\t\tif (!oldResolvedPath[i].equals(newResolvedPath[i])){\r", "+\t\t\t\t\tneedSave = true;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (needSave){\r", "-\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t} catch(JavaModelException e) {\r", "+\t\t}\r", "+\t\t\r", "+\t\tif (hasDelta) {\r", "-\r", "-\t\t\tif (hasChangedContentForDependents){\r", "-\t\t\t\tupdateAffectedProjects(project.getProject().getFullPath());\r", "-\t\t\t}\r", "+\t\t}\r", "+\t\tif (needToUpdateDependents){\r", "+\t\t\tupdateAffectedProjects(project.getProject().getFullPath());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1ec85afdc6361815e989d123ece6e56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tvoid setSourceComment(char[] source)", "signatureAfterChange": " \tvoid setSourceComment(char[] source)", "diff": ["-\t\tfor (int i=0; i<source.length; i++) {", "+\t\tint length = source.length;", "+\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tif (source[i] == '/') {", "-\t\t\t\t\tswitch (source[++i]) {", "-\t\t\t\t\t\tcase '/':", "-\t\t\t\t\t\t\tcomment = 1; // line comment", "-\t\t\t\t\t\t\tbuffer = new StringBuffer(\"//\");", "-\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '*':", "-\t\t\t\t\t\t\tif (source[++i] == '*') {", "-\t\t\t\t\t\t\t\tif (source[++i] == '/') { // empty block comment", "-\t\t\t\t\t\t\t\t\tthis.comments.add(\"/**/\");", "-\t\t\t\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "-\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\tswitch (source[i]) {", "+\t\t\t\t\tcase '/':", "+\t\t\t\t\t\tswitch (source[++i]) {", "+\t\t\t\t\t\t\tcase '/':", "+\t\t\t\t\t\t\t\tcomment = 1; // line comment", "+\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"//\");", "+\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '*':", "+\t\t\t\t\t\t\t\tif (source[++i] == '*') {", "+\t\t\t\t\t\t\t\t\tif (source[++i] == '/') { // empty block comment", "+\t\t\t\t\t\t\t\t\t\tthis.comments.add(\"/**/\");", "+\t\t\t\t\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "+\t\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/**\");", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "-\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/**\");", "+\t\t\t\t\t\t\t\t\tcomment = 2; // block comment", "+\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/*\");", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '\\'':", "+\t\t\t\t\t\twhile (i<length) {", "+\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\tif (i==length) break;", "+\t\t\t\t\t\t\tif (source[i] == '\\\\') {", "+\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\tcomment = 2; // block comment", "-\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/*\");", "+\t\t\t\t\t\t\t\tif (source[i] == '\\'') {", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '\"':", "+\t\t\t\t\t\twhile (i<length) {", "+\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\tif (i==length) break;", "+\t\t\t\t\t\t\tif (source[i] == '\\\\') {", "+\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (source[i] == '\"') {", "+\t\t\t\t\t\t\t\t\tif ((i+1)==length) break;", "+\t\t\t\t\t\t\t\t\tif (source[i+1] == '\"') {", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tbuffer.append(source[i]);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(source[i]);"]}], "num": 21706}
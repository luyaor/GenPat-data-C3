{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4505a5d8036189cb67f3e437c82ccba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c73db0df29c7e0ef66aa9a268ffbd36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "4f899ed65a6db0134a5169430983a39f00dbaf4c", "commitAfterChange": "302ba575da16bb6fb5610129dd618d637661239d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["-\tscope.problemReporter().typeMismatchError(expressionType, methodType, this.expression, null);", "+\tif ((methodType.tagBits & TagBits.HasMissingType) == 0) {", "+\t\t// no need to complain if return type was missing (avoid secondary error : 220967)", "+\t\tscope.problemReporter().typeMismatchError(expressionType, methodType, this.expression, null);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ea385a3127a09ebd3fc738df593b931", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\t\t\tif ((castType.tagBits & TagBits.HasMissingType) == 0) { // no complaint if secondary error", "+\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3049a0cb2d189625aca9d8ecf815913", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "bdd2caf7038fc61f1afd6b5818fa3cecae49a2c7", "commitAfterChange": "901110738b530761a9230c7cdee9da8743b87763", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["-\t\tif (leftStatus == FlowInfo.NON_NULL && rightStatus == FlowInfo.NULL) {", "-\t\t\tleftNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.left, checkEquality);", "-\t\t} else if (leftStatus == FlowInfo.NULL && rightStatus == FlowInfo.NON_NULL) {", "-\t\t\trightNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.right, checkEquality);", "+\t\tif ((flowContext.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING_MASK) == 0) {", "+\t\t\tif (leftStatus == FlowInfo.NON_NULL && rightStatus == FlowInfo.NULL) {", "+\t\t\t\tleftNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.left, checkEquality);", "+\t\t\t} else if (leftStatus == FlowInfo.NULL && rightStatus == FlowInfo.NON_NULL) {", "+\t\t\t\trightNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.right, checkEquality);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bccab391dd0024777ce766fa0fdbc348", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "8ad7ea4a3e807d9d57eeeda9a3a7bd6598dfbdb1", "commitAfterChange": "b7a41e13e2a80300225883c3cc5ff3990406ce0a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tReferenceBinding resolve()", "signatureAfterChange": "  \tReferenceBinding resolve()", "diff": ["-\t\t\t\tthis.environment.problemReporter.nonGenericTypeCannotBeParameterized(0, null, resolvedType, this.arguments);", "-\t\t\t\treturn this; // cannot reach here as AbortCompilation is thrown", "+\t\t\t\tif ((resolvedType.tagBits & TagBits.HasMissingType) == 0) {", "+\t\t\t\t\tthis.environment.problemReporter.nonGenericTypeCannotBeParameterized(0, null, resolvedType, this.arguments);", "+\t\t\t\t}", "+\t\t\t\treturn this;"]}], "num": 63688}
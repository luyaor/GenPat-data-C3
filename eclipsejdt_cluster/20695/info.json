{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5f61ac26c85f148baef0167b37bf2bd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d86141af533eac7cc16043bd3a1c129", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "270b2d0dc66fd2f8c8012264ce82bca4953b85cb", "commitAfterChange": "e254cb1235fced696c16505589db91831c0df710", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["+\t\tif (lambda != null && lambda.argumentsTypeElided() && this.expression instanceof CastExpression) {", "+\t\t\tthis.expression.bits |= ASTNode.DisableUnnecessaryCastCheck;", "+\t\t}", "-\t\tif (this.expression instanceof CastExpression", "-\t\t\t\t&& (this.expression.bits & (ASTNode.UnnecessaryCast|ASTNode.DisableUnnecessaryCastCheck)) == 0) {", "-\t\t\tCastExpression.checkNeedForAssignedCast(scope, methodType, (CastExpression) this.expression);", "+\t\tif (this.expression instanceof CastExpression) {", "+\t\t\tif ((this.expression.bits & (ASTNode.UnnecessaryCast|ASTNode.DisableUnnecessaryCastCheck)) == 0) {", "+\t\t\t\tCastExpression.checkNeedForAssignedCast(scope, methodType, (CastExpression) this.expression);", "+\t\t\t} else if (lambda != null && lambda.argumentsTypeElided() && (this.expression.bits & ASTNode.UnnecessaryCast) != 0) {", "+\t\t\t\tif (TypeBinding.equalsEquals(((CastExpression)this.expression).expression.resolvedType, methodType)) {", "+\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)this.expression);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b057a6b5123f53254f3272a172c23d0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "ba388ee53170dee91fb2402f317f8b352855c459", "commitAfterChange": "d043ef6776b1e3fad1bb618496ee2a48a9410e4b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["+\tLambdaExpression lambda = methodScope.referenceContext instanceof LambdaExpression ? (LambdaExpression) methodScope.referenceContext : null;", "-\t\t(methodScope.referenceContext instanceof LambdaExpression) ? ((LambdaExpression) methodScope.referenceContext).expectedResultType() :", "+\t\tlambda != null ? lambda.expectedResultType() :", "-\t\t// the expression should be null", "-\t\tif (this.expression == null)", "+\t\t// the expression should be null, exceptions exist for lambda expressions.", "+\t\tif (this.expression == null) {", "+\t\t\tif (lambda != null)", "+\t\t\t\tlambda.returnsExpression(null, TypeBinding.VOID);", "+\t\t}", "+\t\tif (lambda != null && !this.implicitReturn)", "+\t\t\tlambda.returnsExpression(this.expression, expressionType);", "+\t\tif (lambda != null)", "+\t\t\tlambda.returnsExpression(null,  methodType);", "-\tif ((expressionType = this.expression.resolveType(scope)) == null) return;", "+\t", "+\texpressionType = this.expression.resolveType(scope);", "+\tif (lambda != null)", "+\t\tlambda.returnsExpression(this.expression, expressionType);", "+\t", "+\tif (expressionType == null) return;"]}], "num": 20695}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "203e6563a27fb4ca6f07b4d22f539584", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "060b2e618398f30b2993e1e91f9315f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3f92e8a5a07dd9ede4257e502806d13fe53cd5fa", "commitAfterChange": "ef611461f875a680b17b8fa198a6386473d15159", "methodNumberBeforeChange": 624, "methodNumberAfterChange": 624, "signatureBeforeChange": " public void testCamelCaseLocalVariable1() throws JavaModelException", "signatureAfterChange": " public void testCamelCaseLocalVariable1() throws JavaModelException", "diff": ["-\tthis.workingCopies = new ICompilationUnit[1];", "-\tthis.workingCopies[0] = getWorkingCopy(", "-\t\t\"/Completion/src/camelcase/Test.java\",", "-\t\t\"package camelcase;\"+", "-\t\t\"public class Test {\\n\"+", "-\t\t\"  void foo() {\\n\"+", "-\t\t\"    int oneTwoThree;\\n\"+", "-\t\t\"    int oTTLocal;\\n\"+", "-\t\t\"    oTT\\n\"+", "-\t\t\"  }\\n\"+", "-\t\t\"}\");", "-", "-\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "-\tString str = this.workingCopies[0].getSource();", "-\tString completeBehind = \"oTT\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "-", "-\tassertResults(", "-\t\t\t\"oneTwoThree[LOCAL_VARIABLE_REF]{oneTwoThree, null, I, oneTwoThree, null, \" + (R_DEFAULT + R_INTERESTING + R_CAMEL_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"oTTLocal[LOCAL_VARIABLE_REF]{oTTLocal, null, I, oTTLocal, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "-\t\t\trequestor.getResults());", "+\tthis.oldOptions = JavaCore.getOptions();", "+\ttry {", "+\t\tHashtable options = new Hashtable(oldOptions);", "+\t\toptions.put(JavaCore.CODEASSIST_CAMEL_CASE_MATCH, JavaCore.ENABLED);", "+\t\tJavaCore.setOptions(options);", "+\t\t", "+\t\tthis.workingCopies = new ICompilationUnit[1];", "+\t\tthis.workingCopies[0] = getWorkingCopy(", "+\t\t\t\"/Completion/src/camelcase/Test.java\",", "+\t\t\t\"package camelcase;\"+", "+\t\t\t\"public class Test {\\n\"+", "+\t\t\t\"  void foo() {\\n\"+", "+\t\t\t\"    int oneTwoThree;\\n\"+", "+\t\t\t\"    int oTTLocal;\\n\"+", "+\t\t\t\"    oTT\\n\"+", "+\t\t\t\"  }\\n\"+", "+\t\t\t\"}\");", "+\t", "+\t\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t\tString str = this.workingCopies[0].getSource();", "+\t\tString completeBehind = \"oTT\";", "+\t\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"oneTwoThree[LOCAL_VARIABLE_REF]{oneTwoThree, null, I, oneTwoThree, null, \" + (R_DEFAULT + R_INTERESTING + R_CAMEL_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"oTTLocal[LOCAL_VARIABLE_REF]{oTTLocal, null, I, oTTLocal, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tJavaCore.setOptions(oldOptions);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7022a60c6d7159495c3bbec140cbd82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3f92e8a5a07dd9ede4257e502806d13fe53cd5fa", "commitAfterChange": "ef611461f875a680b17b8fa198a6386473d15159", "methodNumberBeforeChange": 623, "methodNumberAfterChange": 623, "signatureBeforeChange": " public void testCamelCaseField1() throws JavaModelException", "signatureAfterChange": " public void testCamelCaseField1() throws JavaModelException", "diff": ["-\tthis.workingCopies = new ICompilationUnit[1];", "-\tthis.workingCopies[0] = getWorkingCopy(", "-\t\t\"/Completion/src/camelcase/Test.java\",", "-\t\t\"package camelcase;\"+", "-\t\t\"public class Test {\\n\"+", "-\t\t\"  int oneTwoThree;\\n\"+", "-\t\t\"  int oTTField;\\n\"+", "-\t\t\"  void foo() {\\n\"+", "-\t\t\"    oTT\\n\"+", "-\t\t\"  }\\n\"+", "-\t\t\"}\");", "-", "-\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "-\tString str = this.workingCopies[0].getSource();", "-\tString completeBehind = \"oTT\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "-", "-\tassertResults(", "-\t\t\t\"oneTwoThree[FIELD_REF]{oneTwoThree, Lcamelcase.Test;, I, oneTwoThree, null, \" + (R_DEFAULT + R_INTERESTING + R_CAMEL_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"oTTField[FIELD_REF]{oTTField, Lcamelcase.Test;, I, oTTField, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "-\t\t\trequestor.getResults());", "+\tthis.oldOptions = JavaCore.getOptions();", "+\ttry {", "+\t\tHashtable options = new Hashtable(oldOptions);", "+\t\toptions.put(JavaCore.CODEASSIST_CAMEL_CASE_MATCH, JavaCore.ENABLED);", "+\t\tJavaCore.setOptions(options);", "+\t\t", "+\t\tthis.workingCopies = new ICompilationUnit[1];", "+\t\tthis.workingCopies[0] = getWorkingCopy(", "+\t\t\t\"/Completion/src/camelcase/Test.java\",", "+\t\t\t\"package camelcase;\"+", "+\t\t\t\"public class Test {\\n\"+", "+\t\t\t\"  int oneTwoThree;\\n\"+", "+\t\t\t\"  int oTTField;\\n\"+", "+\t\t\t\"  void foo() {\\n\"+", "+\t\t\t\"    oTT\\n\"+", "+\t\t\t\"  }\\n\"+", "+\t\t\t\"}\");", "+\t", "+\t\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t\tString str = this.workingCopies[0].getSource();", "+\t\tString completeBehind = \"oTT\";", "+\t\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"oneTwoThree[FIELD_REF]{oneTwoThree, Lcamelcase.Test;, I, oneTwoThree, null, \" + (R_DEFAULT + R_INTERESTING + R_CAMEL_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"oTTField[FIELD_REF]{oTTField, Lcamelcase.Test;, I, oTTField, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tJavaCore.setOptions(oldOptions);", "+\t}"]}], "num": 60452}
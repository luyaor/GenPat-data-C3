{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5758c35d8b521d2d9f6bb2cbfe9336ac", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53345e38fff3810bfe466f35293d844f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "9edf0a990e69fc752ead21c476a00fb874aa8f40", "commitAfterChange": "a5351a8c92738db988d5e1c19e4b7b0af64944e3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "signatureAfterChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "diff": ["-\t\tif (this.currentElement != null) {\r", "-\t\t\tswitch (elementType) {\r", "-\t\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "-\t\t\t\t\telement = project;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "-\t\t\t\t\telement = project.getPackageFragmentRoot(resource);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "-\t\t\t\t\t// find the element that encloses the resource\r", "-\t\t\t\t\tthis.popUntilPrefixOf(path);\r", "-\t\t\t\t\tif (this.currentElement == null) break;\r", "-\t\t\t\t\t\r", "+\t\tswitch (elementType) {\r", "+\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\t\tif (this.currentElement != null) return this.currentElement;\r", "+\t\t\t\tIProject proj = (IProject)resource;\r", "+\t\t\t\tboolean isOpened = proj.isOpen();\r", "+\t\t\t\tif (isOpened && this.hasJavaNature(proj)) {\r", "+\t\t\t\t\telement = project == null ? JavaCore.create(proj) : project;\r", "+\t\t\t\t} else if (!isOpened) {\r", "+\t\t\t\t\tif (project == null) {\r", "+\t\t\t\t\t\tproject = JavaCore.create(proj);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (project.isOpen()) {\r", "+\t\t\t\t\t\telement = project; // java project is being closed or removed\r", "+\t\t\t\t\t} \r", "+\t\t\t\t} // else not a java-project\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\t\telement = project.getPackageFragmentRoot(resource);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\t// find the element that encloses the resource\r", "+\t\t\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\t\t\r", "+\t\t\t\tif (this.currentElement == null) {\r", "+\t\t\t\t\telement = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t} else {\r", "-\t\t\t\t\tif (root != null && !JavaModelManager.conflictsWithOutputLocation(path, (JavaProject)project)) {\r", "+\t\t\t\t\tif (root == null) {\r", "+\t\t\t\t\t\telement = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t\t} else if (!JavaModelManager.conflictsWithOutputLocation(path, (JavaProject)project)) {\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "-\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "-\t\t\t\t\t// find the element that encloses the resource\r", "-\t\t\t\t\tthis.popUntilPrefixOf(path);\r", "-\t\t\t\t\tif (this.currentElement == null) break;\r", "-\t\t\t\t\t\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "+\t\t\tcase IJavaElement.CLASS_FILE:\r", "+\t\t\t\t// find the element that encloses the resource\r", "+\t\t\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\t\t\r", "+\t\t\t\tif (this.currentElement == null) {\r", "+\t\t\t\t\telement = element = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t} else {\r", "-\t\t\t\t\t\t\troot = (IPackageFragmentRoot)this.currentElement;\r", "+\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)this.currentElement;\r", "-\t\t\t\t\tif (pkgFragment != null) {\r", "+\t\t\t\t\tif (pkgFragment == null) {\r", "+\t\t\t\t\t\telement = JavaModelManager.getJavaModelManager().create(resource, project);\r", "+\t\t\t\t\t} else {\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "-\t\t\telement = JavaModelManager.create(resource, project);\r", "+\t\t\treturn null;\r", "+\t\t} else {\r", "+\t\t\tthis.currentElement = (Openable)element;\r", "+\t\t\treturn this.currentElement;\r", "-\t\tthis.currentElement = (Openable)element;\r", "-\t\treturn this.currentElement;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "592e5cd91cb5016f2cded2103bcb6a34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (use15specifics) {", "-\t\t\tif (valueIfTrueType != valueIfFalseType) {", "-\t\t\t\tTypeBinding unboxedIfTrueType = valueIfTrueType.isBaseType() ? valueIfTrueType : env.computeBoxingType(valueIfTrueType);", "-\t\t\t\tTypeBinding unboxedIfFalseType = valueIfFalseType.isBaseType() ? valueIfFalseType : env.computeBoxingType(valueIfFalseType);", "-\t\t\t\tif (unboxedIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "-\t\t\t\t\tvalueIfTrueType = unboxedIfTrueType;", "-\t\t\t\t\tvalueIfFalseType = unboxedIfFalseType;", "-\t\t\t\t} else if (valueIfTrueType.isBaseType()) {", "-\t\t\t\t\tif ((valueIfTrueType == NullBinding) == valueIfFalseType.isBaseType()) {  // bool ? null : 12 --> Integer", "-\t\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType);", "+\t\tif (use15specifics && valueIfTrueType != valueIfFalseType) {", "+\t\t\tif (valueIfTrueType.isBaseType()) {", "+\t\t\t\tif (valueIfFalseType.isBaseType()) {", "+\t\t\t\t\t// bool ? baseType : baseType", "+\t\t\t\t\tif (valueIfTrueType == NullBinding) {  // bool ? null : 12 --> Integer", "+\t\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType); // boxing", "+\t\t\t\t\t} else if (valueIfFalseType == NullBinding) {  // bool ? 12 : null --> Integer", "+\t\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType); // boxing", "-\t\t\t\t} else if (valueIfFalseType.isBaseType()) {", "-\t\t\t\t\tif ((valueIfFalseType == NullBinding) == valueIfTrueType.isBaseType()) {  // bool ? 12 : null --> Integer", "-\t\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\t\t} else {", "+\t\t\t\t\t// bool ? baseType : nonBaseType", "+\t\t\t\t\tTypeBinding unboxedIfFalseType = valueIfFalseType.isBaseType() ? valueIfFalseType : env.computeBoxingType(valueIfFalseType);", "+\t\t\t\t\tif (valueIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "+\t\t\t\t\t\tvalueIfFalseType = unboxedIfFalseType; // unboxing", "+\t\t\t\t\t} else if (valueIfTrueType != NullBinding) {  // bool ? 12 : new Integer(12) --> int", "+\t\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType); // unboxing", "-\t\t\t}", "+\t\t\t} else if (valueIfFalseType.isBaseType()) {", "+\t\t\t\t\t// bool ? nonBaseType : baseType", "+\t\t\t\t\tTypeBinding unboxedIfTrueType = valueIfTrueType.isBaseType() ? valueIfTrueType : env.computeBoxingType(valueIfTrueType);", "+\t\t\t\t\tif (unboxedIfTrueType.isNumericType() && valueIfFalseType.isNumericType()) {", "+\t\t\t\t\t\tvalueIfTrueType = unboxedIfTrueType; // unboxing", "+\t\t\t\t\t} else if (valueIfFalseType != NullBinding) {  // bool ? new Integer(12) : 12 --> int", "+\t\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType); // unboxing", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\t\t// bool ? nonBaseType : nonBaseType", "+\t\t\t\t\tTypeBinding unboxedIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\t\t\tTypeBinding unboxedIfFalseType = env.computeBoxingType(valueIfFalseType);", "+\t\t\t\t\tif (unboxedIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "+\t\t\t\t\t\tvalueIfTrueType = unboxedIfTrueType;", "+\t\t\t\t\t\tvalueIfFalseType = unboxedIfFalseType;", "+\t\t\t\t\t}", "+\t\t\t} ", "-\t\tif ((valueIfTrueType.isBaseType() && valueIfTrueType != NullBinding)", "-\t\t\t\t|| (valueIfFalseType.isBaseType() && valueIfFalseType != NullBinding)) {", "-\t\t\tscope.problemReporter().conditionalArgumentsIncompatibleTypes(", "-\t\t\t\tthis,", "-\t\t\t\tvalueIfTrueType,", "-\t\t\t\tvalueIfFalseType);", "-\t\t\treturn null;", "+\t\tif (valueIfTrueType.isBaseType() && valueIfTrueType != NullBinding) {", "+\t\t\tif (use15specifics) {", "+\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().conditionalArgumentsIncompatibleTypes(this, valueIfTrueType, valueIfFalseType);", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t} else if (valueIfFalseType.isBaseType() && valueIfFalseType != NullBinding) {", "+\t\t\tif (use15specifics) {", "+\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().conditionalArgumentsIncompatibleTypes(this, valueIfTrueType, valueIfFalseType);", "+\t\t\t\treturn null;", "+\t\t\t}", "-\t\t\t\tvalueIfTrue.computeConversion(scope, commonType, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, commonType, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, commonType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, commonType, originalValueIfFalseType);"]}], "num": 35914}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aad40b63fdb857f9a1e307d49b849328", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03439e528731f974ad4b23540cbb12c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "97881e1f65dad02c5fcba69e18ae3332573c3839", "commitAfterChange": "5ae43aadc33d93b5c6af6a0612729105eee79d4f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options, IProgressMonitor monitor)", "diff": ["+\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\t\t\tConstructorDeclaration constructorDeclaration = CodeSnippetParsingUtil.parseStatements(source, offset, length, options);", "+\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options);", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = CodeSnippetParsingUtil.parseExpression(source, offset, length, options);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options);", "-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = CodeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options);", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dceb4b9ac33222b7f47164bf5e401524", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "0af096b2d34684a162b7a195205699b7a15a3c32", "commitAfterChange": "55eb63b50ad4a934502bfb435a017ff21ebaf8d8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "diff": ["+\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\t\t\tConstructorDeclaration constructorDeclaration = CodeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "+\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, block);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, block, codeSnippetParsingUtil);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = CodeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, expression2);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, expression2, codeSnippetParsingUtil);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = CodeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, typeDeclaration);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, typeDeclaration, codeSnippetParsingUtil);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);"]}], "num": 33722}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "078e9f17db3e28a1c032e38b3e81dfe7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "815f517d3783b808770762e3b4b973c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "53380a5830867128cd28d10f3919067730bbfb82", "commitAfterChange": "c0f393752b7d4523a5fc372912c7b4e192e52da7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["+\t\tint length = 0;", "-\t\t\tfor (int i=0; i<this.paramReferences.length; i++) {", "+\t\t\tlength = this.paramReferences.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\tfor (int i=0; i<this.invalidParameters.length; i++) {", "+\t\t\tlength = this.invalidParameters.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tif (param.sourceStart==start) {", "+\t\t\t\t\treturn param;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// type parameters array", "+\t\tif (this.paramTypeParameters != null) {", "+\t\t\tlength = this.paramTypeParameters.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "-\t\t\tfor (int i=0; i<this.exceptionReferences.length; i++) {", "+\t\t\tlength = this.exceptionReferences.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\tfor (int i=0; i<this.seeReferences.length; i++) {", "+\t\t\tlength = this.seeReferences.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\tfor (int j=0; j<allocationExpr.arguments.length; j++) {", "+\t\t\t\t\t\t\tfor (int j=0, l=allocationExpr.arguments.length; j<l; j++) {", "-\t\t\t\t\t\t\tfor (int j=0; j<messageSend.arguments.length; j++) {", "+\t\t\t\t\t\t\tfor (int j=0, l=messageSend.arguments.length; j<l; j++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b12f46abf66e36e0fdc67083e6621827", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "671178f1f1111f921cebcc377164efed75b9cfcb", "commitAfterChange": "635d7e113ce40e25df072667fd17a7c3dd9b4152", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["+\t\t\t\t} else if (expression instanceof JavadocAllocationExpression) {", "+\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) this.references[i];", "+\t\t\t\t\t// if binding is valid then look at arguments", "+\t\t\t\t\tif (allocationExpr.binding != null && allocationExpr.binding.isValidBinding()) {", "+\t\t\t\t\t\tif (allocationExpr.arguments != null) {", "+\t\t\t\t\t\t\tfor (int j=0; j<allocationExpr.arguments.length; j++) {", "+\t\t\t\t\t\t\t\tif (allocationExpr.arguments[j].sourceStart == start) {", "+\t\t\t\t\t\t\t\t\treturn allocationExpr.arguments[j];", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (expression instanceof JavadocMessageSend) {", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.references[i];", "+\t\t\t\t\t// if binding is valid then look at arguments", "+\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding()) {", "+\t\t\t\t\t\tif (messageSend.arguments != null) {", "+\t\t\t\t\t\t\tfor (int j=0; j<messageSend.arguments.length; j++) {", "+\t\t\t\t\t\t\t\tif (messageSend.arguments[j].sourceStart == start) {", "+\t\t\t\t\t\t\t\t\treturn messageSend.arguments[j];", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 43456}
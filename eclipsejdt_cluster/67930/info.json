{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63a7f7bb4d5f892be39f9bec2ab077e4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d80099f4d88cffba13017441f5bf585", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BranchStatement.java", "commitBeforeChange": "bb035342af3e77c43a12431c380fb2a6fe6ec67e", "commitAfterChange": "d9aabee2fc6180b2ed4f4131332dc5a46cc37a0d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tAstNode sub;", "-\t\t\tif ((sub = subroutines[i]) instanceof SynchronizedStatement){", "-\t\t\t\tcodeStream.load(((SynchronizedStatement)sub).synchroVariable);", "-\t\t\t\tcodeStream.monitorexit(); ", "-\t\t\t} else {", "-\t\t\t\tTryStatement trySub = (TryStatement) sub;", "-\t\t\t\tif (trySub.subRoutineCannotReturn)\t{", "-\t\t\t\t\tcodeStream.goto_(trySub.subRoutineStartLabel);", "+\t\t\tSubRoutineStatement sub = subroutines[i];", "+\t\t\tsub.generateSubRoutineInvocation(currentScope, codeStream);", "+\t\t\tif (sub.isSubRoutineEscaping()) {", "+\t\t\t\t\tSubRoutineStatement.reenterExceptionHandlers(subroutines, i, codeStream);", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.jsr(trySub.subRoutineStartLabel);", "-\t\t\t\t}", "+\t\t\tsub.exitAnyExceptionHandler();", "+\tSubRoutineStatement.reenterExceptionHandlers(subroutines, -1, codeStream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "945dbabcdf57f6c9943876cd3b24999c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "bb035342af3e77c43a12431c380fb2a6fe6ec67e", "commitAfterChange": "d9aabee2fc6180b2ed4f4131332dc5a46cc37a0d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tAstNode sub;", "-\t\t\tif ((sub = subroutines[i]) instanceof SynchronizedStatement) {", "-\t\t\t\tcodeStream.load(((SynchronizedStatement) sub).synchroVariable);", "-\t\t\t\tcodeStream.monitorexit();", "-\t\t\t} else {", "-\t\t\t\tTryStatement trySub = (TryStatement) sub;", "-\t\t\t\tif (trySub.subRoutineCannotReturn) {", "-\t\t\t\t\tcodeStream.goto_(trySub.subRoutineStartLabel);", "+\t\t\tSubRoutineStatement sub = subroutines[i];", "+\t\t\tsub.generateSubRoutineInvocation(currentScope, codeStream);", "+\t\t\tif (sub.isSubRoutineEscaping()) {", "+\t\t\t\t\tSubRoutineStatement.reenterExceptionHandlers(subroutines, i, codeStream);", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.jsr(trySub.subRoutineStartLabel);", "-\t\t\t\t}", "+\t\t\tsub.exitAnyExceptionHandler();", "-\t", "+\tSubRoutineStatement.reenterExceptionHandlers(subroutines, -1, codeStream);"]}], "num": 67930}
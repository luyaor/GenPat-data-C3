{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4de9daf6fd924c4a74ae3ce84931282f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94a44f346ad0959c59f6f49da8dd4e07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "90ab26b26139b04c1b21341903f9bda9323cd1a1", "commitAfterChange": "63bda44d804d11c0afa7e8111644ceeb5480e759", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\tint varArgDimension = varArgType.dimensions();", "-\t\t\t\t\tint lastArgDimensions = lastArgument.dimensions();", "-\t\t\t\t\tif (varArgDimension == lastArgDimensions || varArgDimension - 1 == lastArgDimensions) {", "-\t\t\t\t\t\tvarArgType = varArgType.leafComponentType();", "-\t\t\t\t\t\tlastArgument = lastArgument.leafComponentType();", "-\t\t\t\t\t\tif (varArgType != lastArgument && !lastArgument.isCompatibleWith(varArgType))", "+\t\t\t\t\tif (varArgType != lastArgument && !lastArgument.isCompatibleWith(varArgType)) {", "+\t\t\t\t\t\t// expect X[], called with X", "+\t\t\t\t\t\tvarArgType = ((ArrayBinding) varArgType).elementsType();", "+\t\t\t\t\t\tif (!lastArgument.isCompatibleWith(varArgType))", "-\t\t\t\t\t} else { // dimensions are not compatible", "-\t\t\t\t\t\tbreak argumentCompatibility;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f0228263707dbd8a09f1cf1b192189", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "44a65692ed8ea84bd05a0826234a3cf62365dd1a", "commitAfterChange": "fda975d98b069f678ae89a663957463bb7bd4088", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void analyseArguments(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, MethodBinding methodBinding, Expression[] arguments)", "signatureAfterChange": " protected void analyseArguments(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, MethodBinding methodBinding, Expression[] arguments)", "diff": ["-\t\tfor (int i = 0; i < arguments.length; i++) {", "+", "+\t\t// check if varargs need special treatment:", "+\t\tint numParamsToCheck = methodBinding.parameters.length;", "+\t\tboolean passThrough = false;", "+\t\tif (methodBinding.isVarargs()) {", "+\t\t\tint varArgPos = numParamsToCheck-1;", "+\t\t\t// this if-block essentially copied from generateArguments(..):", "+\t\t\tif (numParamsToCheck == arguments.length) {", "+\t\t\t\tTypeBinding varArgsType = methodBinding.parameters[varArgPos];", "+\t\t\t\tTypeBinding lastType = arguments[varArgPos].resolvedType;", "+\t\t\t\tif (lastType == TypeBinding.NULL", "+\t\t\t\t\t\t|| (varArgsType.dimensions() == lastType.dimensions()", "+\t\t\t\t\t\t&& lastType.isCompatibleWith(varArgsType)))", "+\t\t\t\t\tpassThrough = true; // pass directly as-is", "+\t\t\t}", "+\t\t\tif (!passThrough)", "+\t\t\t\tnumParamsToCheck--; // with non-passthrough varargs last param is fed from individual args -> don't check", "+\t\t}", "+", "+\t\tfor (int i = 0; i < numParamsToCheck; i++) {"]}], "num": 70699}
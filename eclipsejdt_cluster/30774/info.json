{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "307773b4f6c2b7313907d8a791640b56", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ca1aca05f647fdcc52cdad9a7ce5cf8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationProcessorManager.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic void configure(org.eclipse.jdt.internal.compiler.Compiler compiler, String[] commandLineArguments)", "signatureAfterChange": " \t \tpublic void configure(Main batchCompiler, String[] commandLineArguments)", "diff": ["-\tpublic void configure(org.eclipse.jdt.internal.compiler.Compiler compiler, String[] commandLineArguments) {", "-\t\t// do nothing", "+\tpublic void configure(Main batchCompiler, String[] commandLineArguments) {", "+\t\tif (batchCompiler instanceof EclipseCompiler) {", "+\t\t\tthis.fileManager = ((EclipseCompiler) batchCompiler).fileManager;", "+\t\t} else {", "+\t\t\tString encoding = (String) batchCompiler.options.get(CompilerOptions.OPTION_Encoding);", "+\t\t\tCharset charset = encoding != null ? Charset.forName(encoding) : null;", "+\t\t\tJavaFileManager manager = new EclipseFileManager(batchCompiler, batchCompiler.compilerLocale, charset);", "+\t\t\tArrayList<String> options = new ArrayList<String>();", "+\t\t\tfor (String argument : commandLineArguments) {", "+\t\t\t\toptions.add(argument);", "+\t\t\t}", "+    \t\tfor (Iterator<String> iterator = options.iterator(); iterator.hasNext(); ) {", "+    \t\t\tmanager.handleOption(iterator.next(), iterator);", "+    \t\t}", "+\t\t\tthis.fileManager = manager;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9331c88aba3d33b66b19e4bbd5193be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "d5ff27f4ac6567ec3845ab2a4c87d426d2f2009e", "commitAfterChange": "2a1e455dd4c823fdae35f395f819afea5a811300", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope,\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope,\tInvocationSite invocationSite)", "diff": ["+\t\t\t} else if (compilerOptions.sourceLevel == ClassFileConstants.JDK1_7) {", "+\t\t\t\t// bug 425203 - consider additional constraints to conform to buggy javac behavior", "+\t\t\t\tif (methodSubstitute.returnType != TypeBinding.VOID) {", "+\t\t\t\t\tTypeBinding expectedType = invocationSite.invocationTargetType();", "+\t\t\t\t\t// In case of a method like <T> List<T> foo(T arg), solution based on return type", "+\t\t\t\t\t// should not be preferred vs solution based on parameter types, so do not attempt", "+\t\t\t\t\t// to use return type based inference in this case", "+ \t\t\t\t\tif (expectedType != null && !originalMethod.returnType.mentionsAny(originalMethod.parameters, -1)) {", "+\t\t\t\t\t\tTypeBinding uncaptured = methodSubstitute.returnType.uncapture(scope);", "+\t\t\t\t\t\tif (!methodSubstitute.returnType.isCompatibleWith(expectedType) &&", "+\t\t\t\t\t\t\t\texpectedType.isCompatibleWith(uncaptured)) { ", "+\t\t\t\t\t\t\tInferenceContext oldContext = inferenceContext;", "+\t\t\t\t\t\t\tinferenceContext = new InferenceContext(originalMethod);", "+\t\t\t\t\t\t\t// Include additional constraint pertaining to the expected type", "+\t\t\t\t\t\t\toriginalMethod.returnType.collectSubstitutes(scope, expectedType, inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\tParameterizedGenericMethodBinding substitute = inferFromArgumentTypes(scope, originalMethod, arguments, parameters, inferenceContext);", "+\t\t\t\t\t\t\tif (substitute != null && substitute.returnType.isCompatibleWith(expectedType)) {", "+\t\t\t\t\t\t\t\t// Do not use the new solution if it results in incompatibilities in parameter types", "+\t\t\t\t\t\t\t\tif ((scope.parameterCompatibilityLevel(substitute, arguments, false)) > Scope.NOT_COMPATIBLE) {", "+\t\t\t\t\t\t\t\t\tmethodSubstitute = substitute;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tinferenceContext = oldContext;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tinferenceContext = oldContext;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t}"]}], "num": 30774}
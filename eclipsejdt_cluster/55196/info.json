{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30a7bd6c4c8f153346cb16abe23537fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "574c7d6cba29643c93b8c6d86b3449b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public MethodBinding getMethodBinding(MethodPattern methodPattern)", "signatureAfterChange": " public MethodBinding getMethodBinding(MethodPattern methodPattern)", "diff": ["-\t\t\t\tif (paramLength == paramTypeslength) {", "+\t\t\t\tif (methodParameters != null && paramLength == paramTypeslength) {", "-\t\t\t\t\t\t\tfor (int v=0; v<typeVarLength; v++) {", "-\t\t\t\t\t\t\t\tif (!CharOperation.equals(refTypeVariables[v].sourceName, parameterTypes[p])) {", "-\t\t\t\t\t\t\t\t\tfound = false;", "-\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tif (refTypeVariables != null) {", "+\t\t\t\t\t\t\t\tfor (int v=0; v<typeVarLength; v++) {", "+\t\t\t\t\t\t\t\t\tif (!CharOperation.equals(refTypeVariables[v].sourceName, parameterTypes[p])) {", "+\t\t\t\t\t\t\t\t\t\tfound = false;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\t\tif (!found && methodTypeVariables != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85876be787b0f89cffd07cfe5febea5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "42a5591e6405d9d5a9661e1fdb211c39440692e6", "commitAfterChange": "90b5d0d22a673acac5fa922f69ac563d54cf8a91", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\tint[] overriddenInheritedMethods = length > 1 ? findOverriddenInheritedMethods(methods, length) : null;", "-\tif (overriddenInheritedMethods != null) {", "-\t\t// detected some overridden methods that can be ignored when checking return types", "-\t\t// but cannot ignore an overridden inherited method completely when it comes to checking for bridge methods", "-\t\tint index = 0;", "-\t\tMethodBinding[] closestMethods = new MethodBinding[length];", "-\t\tfor (int i = 0; i < length; i++)", "-\t\t\tif (overriddenInheritedMethods[i] == 0)", "-\t\t\t\tclosestMethods[index++] = methods[i];", "-\t\tif (!checkInheritedReturnTypes(closestMethods, index))", "+\tif (length > 1) {", "+\t\tint[] overriddenInheritedMethods = findOverriddenInheritedMethods(methods, length);", "+\t\tif (overriddenInheritedMethods != null) {", "+\t\t\t// detected some overridden methods that can be ignored when checking return types", "+\t\t\t// but cannot ignore an overridden inherited method completely when it comes to checking for bridge methods", "+\t\t\tint index = 0;", "+\t\t\tMethodBinding[] closestMethods = new MethodBinding[length];", "+\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\tif (overriddenInheritedMethods[i] == 0)", "+\t\t\t\t\tclosestMethods[index++] = methods[i];", "+\t\t\tif (index > 1 && !checkInheritedReturnTypes(closestMethods, index))", "+\t\t\t\treturn;", "+\t\t} else if (!checkInheritedReturnTypes(methods, length)) {", "-\t} else if (!checkInheritedReturnTypes(methods, length)) {", "-\t\treturn;", "+\t\t}", "-\tMethodBinding[] abstractMethods = new MethodBinding[length - 1];", "-\tint index = 0;", "-\tfor (int i = length; --i >= 0;)", "-\t\tif (methods[i] != concreteMethod)", "-\t\t\tabstractMethods[index++] = methods[i];", "-\tcheckConcreteInheritedMethod(concreteMethod, abstractMethods);", "+\tif (length > 1) {", "+\t\tMethodBinding[] abstractMethods = new MethodBinding[length - 1];", "+\t\tint index = 0;", "+\t\tfor (int i = length; --i >= 0;)", "+\t\t\tif (methods[i] != concreteMethod)", "+\t\t\t\tabstractMethods[index++] = methods[i];", "+\t\tcheckConcreteInheritedMethod(concreteMethod, abstractMethods);", "+\t}"]}], "num": 55196}
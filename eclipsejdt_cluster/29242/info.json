{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7151bc15788e627e2c06a27491a335a2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e80ff4be7a7d15b7e79cd4aebcc6d5c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "e67c77fc5e097eac99c8909bb016eff7011eb0ce", "commitAfterChange": "5d677f26e6a9dfca4bbd2cd8a965c43c4f46ed94", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private boolean encloses(String scopePath, String path, int index)", "signatureAfterChange": " private boolean encloses(String enclosingPath, String path, int index)", "diff": ["-private boolean encloses(String scopePath, String path, int index) {", "-\tif (this.pathWithSubFolders[index]) {", "-\t\t// TODO (frederic) apply similar change also if not looking at subfolders", "-\t\tint pathLength = path.length();", "-\t\tint scopeLength = scopePath.length();", "-\t\tif (pathLength < scopeLength) {", "-\t\t\treturn false;", "-\t\tif (scopeLength == 0) {", "-\t\t\treturn true;", "-\t\t}", "-\t\tif (pathLength == scopeLength) {", "-\t\t\treturn path.equals(scopePath);", "-\t\t}", "-\t\tif (path.startsWith(scopePath)) {", "-\t\t\tif (scopePath.charAt(scopeLength-1) == '/') scopeLength--;", "-\t\t\treturn path.charAt(scopeLength) == '/';", "-\t\t}", "+ */", "+private boolean encloses(String enclosingPath, String path, int index) {", "+\t// normalize given path as it can come from outside", "+\tpath = normalize(path);", "+\t", "+\tint pathLength = path.length();", "+\tint enclosingLength = enclosingPath.length();", "+\tif (pathLength < enclosingLength) {", "+\t\treturn false;", "+\t}", "+\tif (enclosingLength == 0) {", "+\t\treturn true;", "+\t}", "+\tif (pathLength == enclosingLength) {", "+\t\treturn path.equals(enclosingPath);", "+\t}", "+\tif (!this.isPkgPath[index]) {", "+\t\treturn path.startsWith(enclosingPath)", "+\t\t\t&& path.charAt(enclosingLength) == '/';", "-\t\t// if not looking at subfolders, this scope encloses the given path ", "-\t\t// if this path is a direct child of the scope's ressource", "-\t\t// or if this path is the scope's resource (see bug 13919 Declaration for package not found if scope is not project)", "-\t\tif (path.startsWith(scopePath) ", "-\t\t\t&& ((scopePath.length() == path.lastIndexOf('/'))", "-\t\t\t\t|| (scopePath.length() == path.length()))) {", "+\t\t// if looking at a package, this scope encloses the given path ", "+\t\t// if the given path is a direct child of the folder", "+\t\t// or if the given path path is the folder path (see bug 13919 Declaration for package not found if scope is not project)", "+\t\tif (path.startsWith(enclosingPath) ", "+\t\t\t&& ((enclosingPath.length() == path.lastIndexOf('/'))", "+\t\t\t\t|| (enclosingPath.length() == path.length()))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2cf886af8d34df7e70a8d172d215548", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": " boolean detectNameClash(MethodBinding one, MethodBinding substituteTwo, boolean checkParameters)", "signatureAfterChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited)", "diff": ["-boolean detectNameClash(MethodBinding one, MethodBinding substituteTwo, boolean checkParameters) {", "-\tif (doTypeVariablesClash(one, substituteTwo) || (checkParameters && doParametersClash(one, substituteTwo))) {", "-\t\tif (this.type == one.declaringClass)", "-\t\t\tproblemReporter(one).methodNameClash(one, substituteTwo);", "-\t\telse", "-\t\t\tproblemReporter().inheritedMethodsHaveNameClash(this.type, one, substituteTwo);", "+boolean detectNameClash(MethodBinding current, MethodBinding inherited) {", "+\tMethodBinding original = inherited.original(); // can be the same as inherited", "+\tif (!current.areParameterErasuresEqual(original)) return false;", "+\tif (doTypeVariablesClash(current, inherited) || doParametersClash(current, original)) {", "+\t\tproblemReporter(current).methodNameClash(current, original);", "+\t\treturn true;", "+\t}", "+\treturn false;", "+}"]}], "num": 29242}
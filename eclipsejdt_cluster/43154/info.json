{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60d8208ac70858053981bac6f7236899", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d3da83191a8101a5c3df79ec36b4693", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "2b8d0ac8be572d49eb7c83b89c8816f15915abc9", "commitAfterChange": "f7f7a56a04d63c15c3ecf4e9ea892b7456b63660", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "diff": ["+\t\t\t\tcase IBinding.METHOD :", "+\t\t\t\t\treturn ((IMethodBinding) binding).getReturnType();", "+\t\t} else if (expression instanceof MarkerAnnotation) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.MarkerAnnotation markerAnnotation = (org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation) this.newAstToOldAst.get(expression);", "+\t\t\treturn this.getTypeBinding(markerAnnotation.resolvedType);", "+\t\t} else if (expression instanceof NormalAnnotation) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.NormalAnnotation normalAnnotation = (org.eclipse.jdt.internal.compiler.ast.NormalAnnotation) this.newAstToOldAst.get(expression);", "+\t\t\treturn this.getTypeBinding(normalAnnotation.resolvedType);", "+\t\t} else if (expression instanceof SingleMemberAnnotation) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation singleMemberAnnotation = (org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation) this.newAstToOldAst.get(expression);", "+\t\t\treturn this.getTypeBinding(singleMemberAnnotation.resolvedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4309a0cdf6455f73b6754422215729dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "bb035342af3e77c43a12431c380fb2a6fe6ec67e", "commitAfterChange": "d9aabee2fc6180b2ed4f4131332dc5a46cc37a0d", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "signatureAfterChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "diff": ["-\t\tif (statement instanceof Break) {", "-\t\t\treturn convert((Break) statement);", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.BreakStatement) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.BreakStatement) statement);", "-\t\tif (statement instanceof Continue) {", "-\t\t\treturn convert((Continue) statement);", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.ContinueStatement) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ContinueStatement) statement);", "-\t\tif (statement instanceof Case) {", "-\t\t\treturn convert((Case) statement);", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.CaseStatement) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CaseStatement) statement);", "-\t\tif (statement instanceof DefaultCase) {", "-\t\t\treturn convert((DefaultCase) statement);", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.DefaultCaseStatement) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.DefaultCaseStatement) statement);"]}], "num": 43154}
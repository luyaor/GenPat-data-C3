{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c81755dfb2dbcbc3e099699f4c427a9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c230dc57d2cad54e30f6e7dd46e20952", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "d25d8e2aefb1fe7881a3b669cacd403afc528b1a", "commitAfterChange": "c768bb705d25a055607160ce11d239f196ca5653", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "  private int initializeBuilder(int kind) throws CoreException", "signatureAfterChange": "  private int initializeBuilder(int kind, boolean forBuild) throws CoreException", "diff": ["-private int initializeBuilder(int kind) throws CoreException {", "+private int initializeBuilder(int kind, boolean forBuild) throws CoreException {", "+\t// some calls just need the nameEnvironment initialized so skip the rest", "-\t// cache the known participants for this project", "-\tthis.participants = JavaModelManager.getJavaModelManager().compilationParticipants.getCompilationParticipants(this.javaProject);", "-\tif (this.participants != null)", "-\t\tfor (int i = 0, l = this.participants.length; i < l; i++)", "-\t\t\tif (this.participants[i].buildStarting(this.javaProject) == CompilationParticipant.NEEDS_FULL_BUILD)", "-\t\t\t\tkind = FULL_BUILD;", "-", "-\t// Flush the existing external files cache if this is the beginning of a build cycle", "-\tString projectName = currentProject.getName();", "-\tif (builtProjects == null || builtProjects.contains(projectName)) {", "-\t\tJavaModel.flushExternalFileCache();", "-\t\tbuiltProjects = new ArrayList();", "+\tif (forBuild) {", "+\t\t// cache the known participants for this project", "+\t\tthis.participants = JavaModelManager.getJavaModelManager().compilationParticipants.getCompilationParticipants(this.javaProject);", "+\t\tif (this.participants != null)", "+\t\t\tfor (int i = 0, l = this.participants.length; i < l; i++)", "+\t\t\t\tif (this.participants[i].buildStarting(this.javaProject) == CompilationParticipant.NEEDS_FULL_BUILD)", "+\t\t\t\t\tkind = FULL_BUILD;", "+\t", "+\t\t// Flush the existing external files cache if this is the beginning of a build cycle", "+\t\tString projectName = currentProject.getName();", "+\t\tif (builtProjects == null || builtProjects.contains(projectName)) {", "+\t\t\tJavaModel.flushExternalFileCache();", "+\t\t\tbuiltProjects = new ArrayList();", "+\t\t}", "+\t\tbuiltProjects.add(projectName);", "-\tbuiltProjects.add(projectName);", "-\tString filterSequence = javaProject.getOption(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, true);", "-\tchar[][] filters = filterSequence != null && filterSequence.length() > 0", "-\t\t? CharOperation.splitAndTrimOn(',', filterSequence.toCharArray())", "-\t\t: null;", "-\tif (filters == null) {", "-\t\tthis.extraResourceFileFilters = null;", "-\t\tthis.extraResourceFolderFilters = null;", "-\t} else {", "-\t\tint fileCount = 0, folderCount = 0;", "-\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "-\t\t\tchar[] f = filters[i];", "-\t\t\tif (f.length == 0) continue;", "-\t\t\tif (f[f.length - 1] == '/') folderCount++; else fileCount++;", "-\t\t}", "-\t\tthis.extraResourceFileFilters = new char[fileCount][];", "-\t\tthis.extraResourceFolderFilters = new String[folderCount];", "-\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "-\t\t\tchar[] f = filters[i];", "-\t\t\tif (f.length == 0) continue;", "-\t\t\tif (f[f.length - 1] == '/')", "-\t\t\t\textraResourceFolderFilters[--folderCount] = new String(f, 0, f.length - 1);", "-\t\t\telse", "-\t\t\t\textraResourceFileFilters[--fileCount] = f;", "+\tif (forBuild) {", "+\t\tString filterSequence = javaProject.getOption(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, true);", "+\t\tchar[][] filters = filterSequence != null && filterSequence.length() > 0", "+\t\t\t? CharOperation.splitAndTrimOn(',', filterSequence.toCharArray())", "+\t\t\t: null;", "+\t\tif (filters == null) {", "+\t\t\tthis.extraResourceFileFilters = null;", "+\t\t\tthis.extraResourceFolderFilters = null;", "+\t\t} else {", "+\t\t\tint fileCount = 0, folderCount = 0;", "+\t\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "+\t\t\t\tchar[] f = filters[i];", "+\t\t\t\tif (f.length == 0) continue;", "+\t\t\t\tif (f[f.length - 1] == '/') folderCount++; else fileCount++;", "+\t\t\t}", "+\t\t\tthis.extraResourceFileFilters = new char[fileCount][];", "+\t\t\tthis.extraResourceFolderFilters = new String[folderCount];", "+\t\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "+\t\t\t\tchar[] f = filters[i];", "+\t\t\t\tif (f.length == 0) continue;", "+\t\t\t\tif (f[f.length - 1] == '/')", "+\t\t\t\t\textraResourceFolderFilters[--folderCount] = new String(f, 0, f.length - 1);", "+\t\t\t\telse", "+\t\t\t\t\textraResourceFileFilters[--fileCount] = f;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c69a2526ff20beb5041c8b660447d4a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "signatureAfterChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "diff": ["-\t", "-\t// filter out element not in hierarchy scope", "-\tboolean typeInHierarchy = type.binding == null || this.locator.typeInHierarchy(type.binding);", "-\t", "-\t\tenclosingElement = this.locator.createTypeHandle((IType)parent, type.name);", "+\t\tenclosingElement = this.locator.createTypeHandle((IType) parent, type.name);", "-\tInteger level;", "-\t", "-\t// fields", "-\tFieldDeclaration[] fields = type.fields;", "-\tif (fields != null) {", "-\t\tfor (int i = 0; i < fields.length; i++) {", "-\t\t\tFieldDeclaration field = fields[i];", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(field)) != null", "-\t\t\t\t&& typeInHierarchy", "-\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\tthis.locator.reportFieldDeclaration(", "-\t\t\t\t\t\tfield, ", "-\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "-\t\t\tthis.reportMatching(field, enclosingElement, type, typeInHierarchy);", "-\t\t}", "-\t}", "-", "-\t// methods", "-\tAbstractMethodDeclaration[] methods = type.methods;", "-\tif (methods != null) {", "-\t\tfor (int i = 0; i < methods.length; i++) {", "-\t\t\tAbstractMethodDeclaration method = methods[i];", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(method)) != null", "-\t\t\t\t&& typeInHierarchy", "-\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\tthis.locator.reportMethodDeclaration(", "-\t\t\t\t\t\tmethod, ", "-\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "-\t\t\tthis.reportMatching(method, enclosingElement, typeInHierarchy);", "-\t\t}", "-\t}", "-", "-\t// member types", "-\tMemberTypeDeclaration[] memberTypes = type.memberTypes;", "-\tif (memberTypes != null) {", "-\t\tfor (int i = 0; i < memberTypes.length; i++) {", "-\t\t\tMemberTypeDeclaration memberType = memberTypes[i];", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(memberType)) != null", "-\t\t\t\t&& typeInHierarchy", "-\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\tthis.locator.reportTypeDeclaration(", "-\t\t\t\t\t\tmemberType, ", "-\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "-\t\t\tthis.reportMatching(memberType, enclosingElement);", "-\t\t}", "-\t}", "-\t\tTypeReference superType = ((AnonymousLocalTypeDeclaration)type).allocation.type;", "-\t\tif (superType != null && (level = (Integer)this.matchingNodes.remove(superType)) != null) {", "-\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\tthis.locator.reportSuperTypeReference(", "-\t\t\t\t\tsuperType, ", "-\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "+\t\tTypeReference superType = ((AnonymousLocalTypeDeclaration) type).allocation.type;", "+\t\tif (superType != null) {", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(superType);", "+\t\t\tif (level != null && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportSuperTypeReference(superType, enclosingElement, level.intValue());", "-\t\tif (superClass != null && (level = (Integer)this.matchingNodes.remove(superClass)) != null) {", "-\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\tthis.locator.reportSuperTypeReference(", "-\t\t\t\t\tsuperClass, ", "-\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "+\t\tif (superClass != null) {", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(superClass);", "+\t\t\tif (level != null && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportSuperTypeReference(superClass, enclosingElement, level.intValue());", "-\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\tfor (int i = 0, l = superInterfaces.length; i < l; i++) {", "-\t\t\t\tif ((level = (Integer)this.matchingNodes.get(superInterface)) != null) {", "-\t\t\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\t\tthis.locator.reportSuperTypeReference(", "-\t\t\t\t\t\t\tsuperInterface, ", "-\t\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(superInterface);", "+\t\t\t\tif (level != null && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\t\tthis.locator.reportSuperTypeReference(superInterface, enclosingElement, level.intValue());", "+\t\t}", "+\t}", "+", "+\t// filter out element not in hierarchy scope", "+\tboolean typeInHierarchy = type.binding == null || this.locator.typeInHierarchy(type.binding);", "+", "+\tFieldDeclaration[] fields = type.fields;", "+\tif (fields != null) {", "+\t\tif (this.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tfor (int i = 0, l = fields.length; i < l; i++) {", "+\t\t\tFieldDeclaration field = fields[i];", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(field);", "+\t\t\tif (level != null && typeInHierarchy && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportFieldDeclaration(field, enclosingElement, level.intValue());", "+\t\t\treportMatching(field, enclosingElement, type, typeInHierarchy);", "+\t\t}", "+\t}", "+", "+\tAbstractMethodDeclaration[] methods = type.methods;", "+\tif (methods != null) {", "+\t\tif (this.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tfor (int i = 0, l = methods.length; i < l; i++) {", "+\t\t\tAbstractMethodDeclaration method = methods[i];", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(method);", "+\t\t\tif (level != null && typeInHierarchy && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportMethodDeclaration(method, enclosingElement, level.intValue());", "+\t\t\treportMatching(method, enclosingElement, typeInHierarchy);", "+\t\t}", "+\t}", "+", "+\tMemberTypeDeclaration[] memberTypes = type.memberTypes;", "+\tif (memberTypes != null) {", "+\t\tfor (int i = 0, l = memberTypes.length; i < l; i++) {", "+\t\t\tif (this.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\t\tMemberTypeDeclaration memberType = memberTypes[i];", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(memberType);", "+\t\t\tif (level != null && typeInHierarchy && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportTypeDeclaration(memberType, enclosingElement, level.intValue());", "+\t\t\treportMatching(memberType, enclosingElement);"]}], "num": 71331}
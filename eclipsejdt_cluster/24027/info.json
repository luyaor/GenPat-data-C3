{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "484ee98ea12e00a52c3804576c5e0cc1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05e98ac77e208cef8c76a6e234302e61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "750bdd7b4af2056bfa5a30d4d6b65bbb0afdb706", "commitAfterChange": "f42f6fde314bb3e2673238bee1f0dd8f360682c3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\t \t \tpublic static void parse(ICompilationUnit[] compilationUnits, ASTRequestor astRequestor, int apiLevel, Map options, IProgressMonitor monitor)", "signatureAfterChange": "\t \t \tpublic static void parse(ICompilationUnit[] compilationUnits, ASTRequestor astRequestor, int apiLevel, Map options, IProgressMonitor monitor)", "diff": ["-\t\tCompilerOptions compilerOptions = new CompilerOptions(options);", "-\t\tParser parser = new CommentRecorderParser(", "-\t\t\tnew ProblemReporter(", "-\t\t\t\t\tDefaultErrorHandlingPolicies.proceedWithAllProblems(), ", "-\t\t\t\t\tcompilerOptions, ", "-\t\t\t\t\tnew DefaultProblemFactory()),", "-\t\t\tfalse);", "-\t\tfor (int i = 0, length = compilationUnits.length; i < length; i++) {", "-\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) compilationUnits[i];", "-\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, compilerOptions.maxProblemsPerUnit);", "-\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = parser.dietParse(sourceUnit, compilationResult);", "-\t\t\t", "-\t\t\tif (compilationUnitDeclaration.ignoreMethodBodies) {", "-\t\t\t\tcompilationUnitDeclaration.ignoreFurtherInvestigation = true;", "-\t\t\t\t// if initial diet parse did not work, no need to dig into method bodies.", "-\t\t\t\tcontinue; ", "+\t\tSubProgressMonitor subProgressMonitor = monitor == null ? null : new SubProgressMonitor(monitor, 100); // 100% of the work is done in this method", "+\t\ttry {", "+\t\t\tCompilerOptions compilerOptions = new CompilerOptions(options);", "+\t\t\tParser parser = new CommentRecorderParser(", "+\t\t\t\tnew ProblemReporter(", "+\t\t\t\t\t\tDefaultErrorHandlingPolicies.proceedWithAllProblems(), ", "+\t\t\t\t\t\tcompilerOptions, ", "+\t\t\t\t\t\tnew DefaultProblemFactory()),", "+\t\t\t\tfalse);", "+\t\t\tint length = compilationUnits.length;", "+\t\t\tif (subProgressMonitor != null) subProgressMonitor.beginTask(\"\", length); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) compilationUnits[i];", "+\t\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, compilerOptions.maxProblemsPerUnit);", "+\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = parser.dietParse(sourceUnit, compilationResult);", "+\t\t\t\t", "+\t\t\t\tif (compilationUnitDeclaration.ignoreMethodBodies) {", "+\t\t\t\t\tcompilationUnitDeclaration.ignoreFurtherInvestigation = true;", "+\t\t\t\t\t// if initial diet parse did not work, no need to dig into method bodies.", "+\t\t\t\t\tcontinue; ", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t//fill the methods bodies in order for the code to be generated", "+\t\t\t\t//real parse of the method....", "+\t\t\t\tparser.scanner.setSource(compilationResult);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\t\t\tif (types != null) {", "+\t\t\t\t\tfor (int j = types.length; --j >= 0;)", "+\t\t\t\t\t\ttypes[j].parseMethod(parser, compilationUnitDeclaration);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// convert AST", "+\t\t\t\tCompilationUnit node = convert(compilationUnitDeclaration, sourceUnit.getContents(), apiLevel, options, false/*don't resolve binding*/, null/*no owner needed*/, null/*no binding table needed*/, monitor);", "+\t\t\t\tnode.setJavaElement(compilationUnits[i]);", "+\t\t\t\t", "+\t\t\t\t// accept AST", "+\t\t\t\tastRequestor.acceptAST(compilationUnits[i], node);", "+\t\t\t\t", "+\t\t\t\tif (subProgressMonitor != null) subProgressMonitor.worked(1);", "-\t\t\t", "-\t\t\t//fill the methods bodies in order for the code to be generated", "-\t\t\t//real parse of the method....", "-\t\t\tparser.scanner.setSource(compilationResult);", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "-\t\t\tif (types != null) {", "-\t\t\t\tfor (int j = types.length; --j >= 0;)", "-\t\t\t\t\ttypes[j].parseMethod(parser, compilationUnitDeclaration);", "-\t\t\t}", "-\t\t\t", "-\t\t\t// convert AST", "-\t\t\tCompilationUnit node = convert(compilationUnitDeclaration, sourceUnit.getContents(), apiLevel, options, false/*don't resolve binding*/, null/*no owner needed*/, null/*no binding table needed*/, monitor);", "-\t\t\tnode.setJavaElement(compilationUnits[i]);", "-\t\t\t", "-\t\t\t", "-\t\t\t// accept AST", "-\t\t\tastRequestor.acceptAST(compilationUnits[i], node);", "+\t\t} finally {", "+\t\t\tif (subProgressMonitor != null) subProgressMonitor.done();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f65e4ef84c856e16fb97a2ee38448b7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "\t \t \tpublic static void parse(ASTRequestor astRequestor, int apiLevel, Map options, IProgressMonitor monitor)", "signatureAfterChange": "\t \t \tpublic static void parse(ICompilationUnit[] compilationUnits, ASTRequestor astRequestor, int apiLevel, Map options, IProgressMonitor monitor)", "diff": ["-\tpublic static void parse(ASTRequestor astRequestor, int apiLevel, Map options, IProgressMonitor monitor) {", "-\t\tICompilationUnit[] workingCopies = astRequestor.getSources();", "+\tpublic static void parse(ICompilationUnit[] compilationUnits, ASTRequestor astRequestor, int apiLevel, Map options, IProgressMonitor monitor) {", "-\t\twhile (workingCopies != null) {", "-\t\t\tfor (int i = 0, length = workingCopies.length; i < length; i++) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) workingCopies[i];", "-\t\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, compilerOptions.maxProblemsPerUnit);", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = parser.dietParse(sourceUnit, compilationResult);", "-\t\t\t\t", "-\t\t\t\tif (compilationUnitDeclaration.ignoreMethodBodies) {", "-\t\t\t\t\tcompilationUnitDeclaration.ignoreFurtherInvestigation = true;", "-\t\t\t\t\t// if initial diet parse did not work, no need to dig into method bodies.", "-\t\t\t\t\tcontinue; ", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t//fill the methods bodies in order for the code to be generated", "-\t\t\t\t//real parse of the method....", "-\t\t\t\tparser.scanner.setSource(compilationResult);", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "-\t\t\t\tif (types != null) {", "-\t\t\t\t\tfor (int j = types.length; --j >= 0;)", "-\t\t\t\t\t\ttypes[j].parseMethod(parser, compilationUnitDeclaration);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// convert AST", "-\t\t\t\tASTNode node = convert(compilationUnitDeclaration, sourceUnit.getContents(), apiLevel, options, false/*don't resolve binding*/, null/*no owner needed*/, null/*no binding table needed*/, monitor);", "-\t\t\t\t", "-\t\t\t\t", "-\t\t\t\t// accept AST", "-\t\t\t\tastRequestor.acceptAST(node);", "+\t\tfor (int i = 0, length = compilationUnits.length; i < length; i++) {", "+\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) compilationUnits[i];", "+\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, compilerOptions.maxProblemsPerUnit);", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = parser.dietParse(sourceUnit, compilationResult);", "+\t\t\t", "+\t\t\tif (compilationUnitDeclaration.ignoreMethodBodies) {", "+\t\t\t\tcompilationUnitDeclaration.ignoreFurtherInvestigation = true;", "+\t\t\t\t// if initial diet parse did not work, no need to dig into method bodies.", "+\t\t\t\tcontinue; ", "-\t\t\tworkingCopies = astRequestor.getSources();", "+\t\t\t//fill the methods bodies in order for the code to be generated", "+\t\t\t//real parse of the method....", "+\t\t\tparser.scanner.setSource(compilationResult);", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\t\tif (types != null) {", "+\t\t\t\tfor (int j = types.length; --j >= 0;)", "+\t\t\t\t\ttypes[j].parseMethod(parser, compilationUnitDeclaration);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// convert AST", "+\t\t\tASTNode node = convert(compilationUnitDeclaration, sourceUnit.getContents(), apiLevel, options, false/*don't resolve binding*/, null/*no owner needed*/, null/*no binding table needed*/, monitor);", "+\t\t\t", "+\t\t\t", "+\t\t\t// accept AST", "+\t\t\tastRequestor.acceptAST((CompilationUnit) node, compilationUnits[i]);"]}], "num": 24027}
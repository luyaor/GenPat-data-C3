{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2ce9514eec68a7ec901b36a18309e6f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277f7dbb5d8f7367e7a3b3192a74bd15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void generateStringConcatenationAppend(BlockScope blockScope, Expression oper1, Expression oper2)", "signatureAfterChange": " public void generateStringConcatenationAppend(BlockScope blockScope, Expression oper1, Expression oper2)", "diff": ["-\t\tthis.invokeStringValueOf(T_JavaLangObject);", "+\t\tthis.invokeStringValueOf(TypeIds.T_JavaLangObject);", "-\t\toper1.generateOptimizedStringConcatenationCreation(blockScope, this, oper1.implicitConversion & COMPILE_TYPE_MASK);", "+\t\toper1.generateOptimizedStringConcatenationCreation(blockScope, this, oper1.implicitConversion & TypeIds.COMPILE_TYPE_MASK);", "-\toper2.generateOptimizedStringConcatenation(blockScope, this, oper2.implicitConversion & COMPILE_TYPE_MASK);", "+\toper2.generateOptimizedStringConcatenation(blockScope, this, oper2.implicitConversion & TypeIds.COMPILE_TYPE_MASK);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62eec40da571346d49cd0d8b299a931c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "05bd6362ebc3db4accc519070d9c8a9ecd2a788b", "commitAfterChange": "905cf94d64f942e28e58015355605b9b9383c577", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void generateStringConcatenationAppend(BlockScope blockScope, Expression oper1, Expression oper2)", "signatureAfterChange": " public void generateStringConcatenationAppend(BlockScope blockScope, Expression oper1, Expression oper2)", "diff": ["-\t\toper1.generateOptimizedStringConcatenationCreation(blockScope, this, oper1.implicitConversion & 0xF);", "+\t\toper1.generateOptimizedStringConcatenationCreation(blockScope, this, oper1.implicitConversion & COMPILE_TYPE_MASK);", "-\toper2.generateOptimizedStringConcatenation(blockScope, this, oper2.implicitConversion & 0xF);", "+\toper2.generateOptimizedStringConcatenation(blockScope, this, oper2.implicitConversion & COMPILE_TYPE_MASK);"]}], "num": 3375}
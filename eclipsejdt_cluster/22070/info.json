{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98d46b6476bb043fd5fcd17c027664c9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cbb4be5cf998c1131d22b4844d8a7ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "+public FlowInfo analyseCode(", "-\t\t\t", "-\t\tif (((bits & OperatorMASK) >> OperatorSHIFT) == NOT) {", "-\t\t\treturn this.expression", "-\t\t\t\t.analyseCode(currentScope, flowContext, flowInfo)", "-\t\t\t\t.asNegatedCondition();", "-\t\t} else {", "-\t\t\treturn this.expression.analyseCode(currentScope, flowContext, flowInfo);", "-\t\t}", "+\tthis.expression.checkNPE(currentScope, flowContext, flowInfo, true);\t", "+\tif (((bits & OperatorMASK) >> OperatorSHIFT) == NOT) {", "+\t\treturn this.expression.", "+\t\t\tanalyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tasNegatedCondition();", "+\t} else {", "+\t\treturn this.expression.", "+\t\t\tanalyseCode(currentScope, flowContext, flowInfo);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f64da572f6309a6c7284e5f5e6214d12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean compoundAssignment)", "signatureAfterChange": "  public FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean compoundAssignment)", "diff": ["-\tpublic FlowInfo analyseAssignment(", "+public FlowInfo analyseAssignment(", "-", "-\t\tif (assignment.expression == null) {", "-\t\t\treturn analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "-\t\t}", "-\t\treturn assignment", "-\t\t\t.expression", "-\t\t\t.analyseCode(", "-\t\t\t\tcurrentScope,", "-\t\t\t\tflowContext,", "-\t\t\t\tanalyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "-\t\t\t.unconditionalInits();", "+\t// TODO (maxime) optimization: unconditionalInits is applied to all existing calls", "+\tif (assignment.expression == null) {", "+\t\treturn analyseCode(currentScope, flowContext, flowInfo);", "+\treturn assignment", "+\t\t.expression", "+\t\t.analyseCode(", "+\t\t\tcurrentScope,", "+\t\t\tflowContext,", "+\t\t\tanalyseCode(currentScope, flowContext, flowInfo).unconditionalInits());", "+}"]}], "num": 22070}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a365cc3d5dcfcb1eac7c77b325eec7f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "105093674ba37c9bc5c3566677a83770", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "8aa2f16fc4c306369aa796a7a45d222acfe1fa95", "commitAfterChange": "189f7ceb3f6249774ccdb459fb188cbd17dc60ea", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  \t\tpublic boolean writeAndCacheClasspath(final JavaProject javaProject, final IClasspathEntry[] newRawClasspath, final IPath newOutputLocation) throws JavaModelException", "signatureAfterChange": "  \t\tpublic boolean writeAndCacheClasspath(JavaProject javaProject, final IClasspathEntry[] newRawClasspath, final IPath newOutputLocation) throws JavaModelException", "diff": ["-\t\tpublic boolean writeAndCacheClasspath(final JavaProject javaProject, final IClasspathEntry[] newRawClasspath, final IPath newOutputLocation) throws JavaModelException {", "-\t\t\tfinal boolean[] result = new boolean[1];", "+\t\tpublic boolean writeAndCacheClasspath(JavaProject javaProject, final IClasspathEntry[] newRawClasspath, final IPath newOutputLocation) throws JavaModelException {", "-\t\t\t\t// use a workspace runnable so that the notification of .classpath file change is done outside the synchronized block (to avoid deadlocks)", "-\t\t\t\tIWorkspace workspace = \tResourcesPlugin.getWorkspace();", "-\t\t\t\tworkspace.run(new IWorkspaceRunnable() {", "-\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\t\t// ensure that the writing of the .classpath file and the caching in memory are synchronized (see also readAnCacheClasspath which is synchronized)", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tPerProjectInfo.this.writtingRawClasspath = true;", "-\t\t\t\t\t\t\tsynchronized (PerProjectInfo.this) {", "-\t\t\t\t\t\t\t\tif (!javaProject.writeFileEntries(newRawClasspath, newOutputLocation)) {", "-\t\t\t\t\t\t\t\t\tresult[0] = false;", "-\t\t\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// store new raw classpath, new output and new status, and null out resolved info", "-\t\t\t\t\t\t\t\tsetRawClasspath(newRawClasspath, newOutputLocation, JavaModelStatus.VERIFIED_OK);", "-\t\t\t\t\t\t\t\tresult[0] = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} finally {", "-\t\t\t\t\t\t\tPerProjectInfo.this.writtingRawClasspath = false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t},", "-\t\t\t\tworkspace.getRuleFactory().modifyRule(this.project), // use project modification rule as this is needed to create the .classpath file if it doesn't exist yet", "-\t\t\t\tIWorkspace.AVOID_UPDATE,", "-\t\t\t\tnull);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t    // rethrow exception (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=245576 )", "-\t\t\t\tthrow e;", "-\t\t\t} catch (CoreException e) {", "-\t\t\t    // rethrow exception (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=245576 )", "-\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\tthis.writtingRawClasspath = true;", "+\t\t\t\t// write .classpath", "+\t\t\t\tif (!javaProject.writeFileEntries(newRawClasspath, newOutputLocation)) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\t// store new raw classpath, new output and new status, and null out resolved info", "+\t\t\t\tsetRawClasspath(newRawClasspath, newOutputLocation, JavaModelStatus.VERIFIED_OK);", "+\t\t\t} finally {", "+\t\t\t\tthis.writtingRawClasspath = false;", "-\t\t\treturn result[0];", "+\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a90825b2a6c66946b575c2a174a95867", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "c609c337bf309009b4e02e584ece29cf9833f54e", "commitAfterChange": "b4f87915b858b8e38e418046984ece5dc8db6148", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, JavaProject project)", "signatureAfterChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, JavaProject project)", "diff": ["-\t\tboolean reloadClasspath = true;", "-\t\tif (delta != null) {", "-\t\t\treloadClasspath = false; // narrow down need to reload based on delta", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.REMOVED : // recreate one based on in-memory classpath", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tJavaModelManager.PerProjectInfo info = project.getPerProjectInfo();", "-\t\t\t\t\t\tif (info.rawClasspath != null) { // if there is an in-memory classpath", "-\t\t\t\t\t\t\tproject.saveClasspath(info.rawClasspath, info.outputLocation);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\tUtil.log(e, \"Could not save classpath for \"+ project.getPath()); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\tswitch (delta.getKind()) {", "+\t\t\tcase IResourceDelta.REMOVED : // recreate one based on in-memory classpath", "+\t\t\t\ttry {", "+\t\t\t\t\tJavaModelManager.PerProjectInfo info = project.getPerProjectInfo();", "+\t\t\t\t\tif (info.rawClasspath != null) { // if there is an in-memory classpath", "+\t\t\t\t\t\tproject.saveClasspath(info.rawClasspath, info.outputLocation);", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\tif (project.getProject().isAccessible()) {", "+\t\t\t\t\t\tUtil.log(e, \"Could not save classpath for \"+ project.getPath()); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IResourceDelta.CHANGED :", "+\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0  // only consider content change", "+\t\t\t\t\t\t&& (delta.getFlags() & IResourceDelta.MOVED_FROM) == 0) {// and also move and overide scenario (see http://dev.eclipse.org/bugs/show_bug.cgi?id=21420)", "-\t\t\t\tcase IResourceDelta.CHANGED :", "-\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0  // only consider content change", "-\t\t\t\t\t\t\t&& (delta.getFlags() & IResourceDelta.MOVED_FROM) == 0) // and also move and overide scenario (see http://dev.eclipse.org/bugs/show_bug.cgi?id=21420)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\treloadClasspath = true;", "-\t\t\t}", "-\t\t}", "-\t\tif (reloadClasspath) {", "-\t\t\ttry {", "-\t\t\t\tproject.forceClasspathReload(null);", "-\t\t\t} catch (RuntimeException e) {", "-\t\t\t} catch (JavaModelException e) {\t", "-\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// fall through", "+\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\ttry {", "+\t\t\t\t\tproject.forceClasspathReload(null);", "+\t\t\t\t} catch (RuntimeException e) { \t\t// ignore", "+\t\t\t\t} catch (JavaModelException e) {\t// ignore", "+\t\t\t\t}"]}], "num": 35902}
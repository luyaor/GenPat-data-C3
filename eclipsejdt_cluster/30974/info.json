{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a787c2a201dfbfdca7627f2fbe1ab27a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acfd55ef715270e17e5b330b920ce048", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c9df47e6bc4127d80d1e16ea8353f464e792fda3", "commitAfterChange": "514d8e9afb885d3be64fa67a03a4dd281867840f", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic MethodBinding findMethodInSuperInterfaces( \t\tReferenceBinding currentType, \t\tchar[] selector, \t\tObjectVector found, \t\tMethodBinding matchingMethod)", "signatureAfterChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found)", "diff": ["-\tpublic MethodBinding findMethodInSuperInterfaces(", "-\t\tReferenceBinding currentType,", "-\t\tchar[] selector,", "-\t\tObjectVector found,", "-\t\tMethodBinding matchingMethod) {", "-", "+\tprotected void findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found) {", "-\t\t\t\t\t\tint currentLength = currentMethods.length;", "-\t\t\t\t\t\tif (currentLength == 1 && matchingMethod == null && found.size == 0) {", "-\t\t\t\t\t\t\tmatchingMethod = currentMethods[0];", "-\t\t\t\t\t\t} else if (currentLength > 0) {", "-\t\t\t\t\t\t\tif (matchingMethod != null) {", "-\t\t\t\t\t\t\t\tfound.add(matchingMethod);", "-\t\t\t\t\t\t\t\tmatchingMethod = null;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (currentMethods.length > 0)", "-\t\t\t\t\t\t}", "-\t\treturn matchingMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ae893fff18ba1b5d7153cb93e88cd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a8950107d551a634f6049d19ba689deca063bfb6", "commitAfterChange": "e34fea35f775affe686777806e78d4b4b98ae8ab", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding receiverType, char[] selector, ObjectVector found, InvocationSite invocationSite)", "signatureAfterChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding receiverType, char[] selector, ObjectVector found, List<TypeBinding> visitedTypes, InvocationSite invocationSite)", "diff": ["-\tprotected void findMethodInSuperInterfaces(ReferenceBinding receiverType, char[] selector, ObjectVector found, InvocationSite invocationSite) {", "+\tprotected void findMethodInSuperInterfaces(ReferenceBinding receiverType, char[] selector, ObjectVector found, List<TypeBinding> visitedTypes, InvocationSite invocationSite) {", "-\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\tinterfaces: for (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tif (visitedTypes != null) {", "+\t\t\t\t\tTypeBinding uncaptured = currentType.uncapture(this);", "+\t\t\t\t\tfor (TypeBinding visited : visitedTypes) {", "+\t\t\t\t\t\tif (uncaptured.isEquivalentTo(visited))", "+\t\t\t\t\t\t\tcontinue interfaces;", "+\t\t\t\t\t}", "+\t\t\t\t\tvisitedTypes.add(uncaptured);", "+\t\t\t\t}"]}], "num": 30974}
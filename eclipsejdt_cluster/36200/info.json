{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "421320be516e6477251cea0f7a5d69e2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d80bf985d482553b15aaac6a1c01844", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "85d82ef92c86e257cfcb71c0ec95b6b64432a5cb", "commitAfterChange": "db5b57ec76798735e1deba7d6189161973304788", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+        if (scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {", "+        \tint len = this.descriptor.parameters.length;", "+    \t\tfor (int i = 0; i < len; i++) {", "+    \t\t\tBoolean declared = this.descriptor.parameterNonNullness == null ? null : this.descriptor.parameterNonNullness[i];", "+    \t\t\tBoolean implemented = this.binding.parameterNonNullness == null ? null : this.binding.parameterNonNullness[i];", "+    \t\t\tif (declared == Boolean.FALSE) { // promise to accept null", "+    \t\t\t\tif (implemented != Boolean.FALSE) {", "+    \t\t\t\t\tchar[][] requiredAnnot = implemented == null ? null : scope.environment().getNonNullAnnotationName();", "+    \t\t\t\t\tscope.problemReporter().parameterLackingNullableAnnotation(this, this.descriptor, i, ", "+    \t\t\t\t\t\t\tscope.environment().getNullableAnnotationName(),", "+    \t\t\t\t\t\t\trequiredAnnot, this.binding.parameters[i]);", "+    \t\t\t\t}", "+    \t\t\t} else if (declared == null) {", "+    \t\t\t\tif (implemented == Boolean.TRUE) {", "+    \t\t\t\t\tscope.problemReporter().parameterRequiresNonnull(this, this.descriptor, i,", "+    \t\t\t\t\t\t\tscope.environment().getNonNullAnnotationName(), this.binding.parameters[i]);", "+    \t\t\t\t}", "+    \t\t\t}", "+    \t\t}", "+        \tif ((this.descriptor.tagBits & TagBits.AnnotationNonNull) != 0) {", "+        \t\tif ((this.binding.tagBits & TagBits.AnnotationNonNull) == 0) {", "+        \t\t\tchar[][] providedAnnotationName = ((this.binding.tagBits & TagBits.AnnotationNullable) != 0) ?", "+        \t\t\t\t\tscope.environment().getNullableAnnotationName() : null;", "+        \t\t\tscope.problemReporter().illegalReturnRedefinition(this, this.descriptor,", "+        \t\t\t\t\tscope.environment().getNonNullAnnotationName(),", "+        \t\t\t\t\tprovidedAnnotationName, this.binding.returnType);", "+        \t\t}", "+        \t}", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c8e1a5b0cc73ba5b3d2ad11d4417479", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-    \t\t\tBoolean declared = this.descriptor.parameterNonNullness == null ? null : this.descriptor.parameterNonNullness[i];", "-    \t\t\tBoolean implemented = this.binding.parameterNonNullness == null ? null : this.binding.parameterNonNullness[i];", "-    \t\t\tif (declared == Boolean.FALSE) { // promise to accept null", "-    \t\t\t\tif (implemented != Boolean.FALSE) {", "-    \t\t\t\t\tchar[][] requiredAnnot = implemented == null ? null : scope.environment().getNonNullAnnotationName();", "+    \t\t\tlong declared = this.descriptor.parameters[i].tagBits & TagBits.AnnotationNullMASK;", "+    \t\t\tlong implemented = this.binding.parameters[i].tagBits & TagBits.AnnotationNullMASK;", "+    \t\t\tif (declared == TagBits.AnnotationNullable) { // promise to accept null", "+    \t\t\t\tif (implemented != TagBits.AnnotationNullable) {", "+    \t\t\t\t\tchar[][] requiredAnnot = implemented == 0L ? null : scope.environment().getNonNullAnnotationName();", "-    \t\t\t} else if (declared == null) {", "-    \t\t\t\tif (implemented == Boolean.TRUE) {", "+    \t\t\t} else if (declared == 0L) {", "+    \t\t\t\tif (implemented == TagBits.AnnotationNonNull) {", "-        \tif ((this.descriptor.tagBits & TagBits.AnnotationNonNull) != 0) {", "-        \t\tif ((this.binding.tagBits & TagBits.AnnotationNonNull) == 0) {", "-        \t\t\tchar[][] providedAnnotationName = ((this.binding.tagBits & TagBits.AnnotationNullable) != 0) ?", "+        \tif ((this.descriptor.returnType.tagBits & TagBits.AnnotationNonNull) != 0) {", "+        \t\tif ((this.binding.returnType.tagBits & TagBits.AnnotationNonNull) == 0) {", "+        \t\t\tchar[][] providedAnnotationName = ((this.binding.returnType.tagBits & TagBits.AnnotationNullable) != 0) ?"]}], "num": 36200}
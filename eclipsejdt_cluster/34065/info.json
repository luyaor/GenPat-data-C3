{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b39fe6e5bc2e41105f75cb2e7d5fe88", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b3f12035713781b5bb5b93c47209fd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "commitAfterChange": "3649f3f6d703fd53c9c12b41cdc037f657d98134", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tIClasspathEntry[] classpathEntries,\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tIClasspathEntry[] classpathEntries,\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "diff": ["-\t\t\t\t\tIClasspathEntry[] containerEntries = JavaCore.getResolvedClasspathContainer(rawEntry.getPath(), this);\r", "-\t\t\t\t\tif (containerEntries == null){\r", "+\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), this);\r", "+\t\t\t\t\tif (container == null){\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t// container was bound, container entries could be variables\r", "-\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "-\t\t\t\t\t\t\tIClasspathEntry containerRawEntry = containerEntries[j];\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\tif (generateMarkerOnError) {\r", "-\t\t\t\t\t\t\t\tIJavaModelStatus status =\r", "-\t\t\t\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, containerRawEntry, false);\r", "-\t\t\t\t\t\t\t\tif (!status.isOK())\r", "-\t\t\t\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "-\t\t\t\t\t\t\t\t\t\tstatus.getMessage(), \r", "-\t\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "-\t\t\t\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t// container entry is variable ?\r", "-\t\t\t\t\t\t\tif (containerRawEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){\r", "-\t\t\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(containerRawEntry);\r", "-\t\t\t\t\t\t\t\tif (resolvedEntry == null) {\r", "-\t\t\t\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "-\t\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "-\t\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "-\t\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,\r", "-\t\t\t\t\t\t\t\t\t\t\t\tcontainerRawEntry.getPath().toString()));\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\r", "+\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();\r", "+\t\t\t\t\tif (containerEntries == null) break;\r", "+\r", "+\t\t\t\t\t// container was bound, container entries could be variables\r", "+\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "+\t\t\t\t\t\tIClasspathEntry containerRawEntry = containerEntries[j];\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif (generateMarkerOnError) {\r", "+\t\t\t\t\t\t\tIJavaModelStatus status =\r", "+\t\t\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, containerRawEntry, false);\r", "+\t\t\t\t\t\t\tif (!status.isOK())\r", "+\t\t\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "+\t\t\t\t\t\t\t\t\tstatus.getMessage(), \r", "+\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "+\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\t// container entry is variable ?\r", "+\t\t\t\t\t\tif (containerRawEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){\r", "+\t\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(containerRawEntry);\r", "+\t\t\t\t\t\t\tif (resolvedEntry == null) {\r", "+\t\t\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "+\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "+\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,\r", "+\t\t\t\t\t\t\t\t\t\t\tcontainerRawEntry.getPath().toString()));\r", "-\t\t\t\t\t\t\t\tresolvedEntries.add(containerRawEntry);\r", "+\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tresolvedEntries.add(containerRawEntry);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b76ea36477f8318e512f6a00bd8a486f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "commitAfterChange": "3649f3f6d703fd53c9c12b41cdc037f657d98134", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "signatureAfterChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "diff": ["-\t\t\t\t\tIClasspathEntry[] containerEntries = JavaCore.getResolvedClasspathContainer(rawEntry.getPath(), javaProject);\r", "-\t\t\t\t\tif (containerEntries != null){\r", "-\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "-\t\t\t\t\t\t\t resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "-\t\t\t\t\t\t\tif (resolvedEntry != null){\r", "-\t\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\t\t\t\t\t\t\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\t\t\t\t\t\t\t\tif (resolvedEntry.getPath().equals(outputLocation)) allowNestingInOutput = true;\r", "-\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), javaProject);\r", "+\t\t\t\t\tif (container != null){\r", "+\t\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();\r", "+\t\t\t\t\t\tif (containerEntries != null){\r", "+\t\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "+\t\t\t\t\t\t\t\t resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "+\t\t\t\t\t\t\t\tif (resolvedEntry != null){\r", "+\t\t\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\t\t\t\t\t\t\t\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\t\t\t\t\t\t\t\t\tif (resolvedEntry.getPath().equals(outputLocation)) allowNestingInOutput = true;\r", "+\t\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\t\t\t}\r"]}], "num": 34065}
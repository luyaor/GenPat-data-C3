{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d204d40fa10e972f34dcc9bc838f0e55", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb5b01b6235c73b6597671b21f04697a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "8cf1dcdf2235b54b4116fb6f086a0d218e6b26f7", "commitAfterChange": "45fa88428d5d04389be0956547a1793c4e66bac3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tboolean nonStatic = !binding.isStatic();", "-\tflowInfo = receiver.analyseCode(currentScope, flowContext, flowInfo, nonStatic).unconditionalInits();", "+\tboolean nonStatic = !this.binding.isStatic();", "+\tflowInfo = this.receiver.analyseCode(currentScope, flowContext, flowInfo, nonStatic).unconditionalInits();", "-\t\treceiver.checkNPE(currentScope, flowContext, flowInfo);", "+\t\tthis.receiver.checkNPE(currentScope, flowContext, flowInfo);", "-\tif (arguments != null) {", "-\t\tint length = arguments.length;", "+\tif (this.arguments != null) {", "+\t\tint length = this.arguments.length;", "-\t\t\tflowInfo = arguments[i].analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\t\tflowInfo = this.arguments[i].analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "-\tif ((thrownExceptions = binding.thrownExceptions) != Binding.NO_EXCEPTIONS) {", "+\tif ((thrownExceptions = this.binding.thrownExceptions) != Binding.NO_EXCEPTIONS) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbf4ac7fa1e5c5f6e58c11a8a4b71cf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "133e081382658fdf4b2c93257a825d3355922192", "commitAfterChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif (enclosingInstance != null) {", "-\t\t\tflowInfo = enclosingInstance.analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (this.enclosingInstance != null) {", "+\t\t\tflowInfo = this.enclosingInstance.analyseCode(currentScope, flowContext, flowInfo);", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, count = arguments.length; i < count; i++) {", "-\t\t\t\tflowInfo = arguments[i].analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (this.arguments != null) {", "+\t\t\tfor (int i = 0, count = this.arguments.length; i < count; i++) {", "+\t\t\t\tflowInfo = this.arguments[i].analyseCode(currentScope, flowContext, flowInfo);", "-\t\tif (anonymousType != null) {", "-\t\t\tflowInfo = anonymousType.analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (this.anonymousType != null) {", "+\t\t\tflowInfo = this.anonymousType.analyseCode(currentScope, flowContext, flowInfo);", "-\t\tif (((thrownExceptions = binding.thrownExceptions).length) != 0) {", "+\t\tif (((thrownExceptions = this.binding.thrownExceptions).length) != 0) {"]}], "num": 14302}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "555a9056edab12d673ba33cf58404029", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9daadd383064ae240c284c37355ba6de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b18268c0ce6fbb737cee1ca1291ee19aeeac1ba2", "commitAfterChange": "fc2e0b5bc2df34e6de3029ff925cb036551f7d19", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-//\tif (type.javadoc != null) {", "-//\t\tASTNode[] nodes = nodeSet.matchingNodes(type.declarationSourceStart, type.sourceStart);", "-//\t\tif (nodes != null) {", "-//\t\t\tif (!matchedClassContainer) {", "-//\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "-//\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "-//\t\t\t} else {", "-//\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-//\t\t\t\t\tASTNode node = nodes[i];", "-//\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-//\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "+\tif (type.javadoc != null) {", "+\t\tASTNode[] nodes = nodeSet.matchingNodes(type.declarationSourceStart, type.sourceStart);", "+\t\tif (nodes != null) {", "+\t\t\tif (!matchedClassContainer) {", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "+\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad0d04fe4151c4c550fffbd05df43aef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "cd290957c2bd8d760411805c481ea53ade57f09d", "commitAfterChange": "c235f0d68d13055cb9237a3b54fd2255553fe602", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "signatureAfterChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "diff": ["+\t\t", "+\t\t// Look for reference inside annotation", "+\t\tASTNode[] nodes = nodeSet.matchingNodes(annotationType.sourceStart, annotationType.declarationSourceEnd);", "+\t\tif (nodes != null) {", "+\t\t\tif (!matchedContainer) {", "+\t\t\t\tfor (int j = 0, nl = nodes.length; j < nl; j++) {", "+\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[j]);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int j = 0, nl = nodes.length; j < nl; j++) {", "+\t\t\t\t\tASTNode node = nodes[j];", "+\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\tif (enclosesElement) {", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, elementBinding, level.intValue(), this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddd79d1e934e7f5c8d84583cc84355dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["+", "+\t// report references in javadoc", "+\tif (unit.javadoc != null) {", "+\t\tASTNode[] nodes = nodeSet.matchingNodes(unit.javadoc.sourceStart, unit.javadoc.sourceEnd);", "+\t\tif (nodes != null) {", "+\t\t\tif (!matchedUnitContainer) {", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "+\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t} else {", "+\t\t\t\tIJavaElement element = createTypeHandle(new String(unit.getMainTypeName()));", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\tif (encloses(element))", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, element, null/*no binding*/, level.intValue(), this);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+"]}], "num": 57786}
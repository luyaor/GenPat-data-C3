{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e0d61fb5c2f6d52ef0219c14ea790fc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bd10b8b0437541ffe6195e1d902058d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "3c48c9fa4ac4d99dec40bf37b65e9e7f38ac2398", "commitAfterChange": "b5bf53e6da2ad7bf71cf2aa2a6885479711b42ec", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "+protected void reportMatching(TypeDeclaration type, AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "-\t\t\t\tint length = scanner.currentPosition - nameSourceStart;", "-\t\t\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(method, enclosingElement, method.binding, accuracy, length, this);", "-\t\t\t\tif (match != null) report(match);", "+\t\t\t\tSearchMatch match = null;", "+\t\t\t\tif (method.isDefaultConstructor()) {", "+\t\t\t\t\t// Use type for match associated element as default constructor does not exist in source", "+\t\t\t\t\tint offset = type.sourceStart;", "+\t\t\t\t\tmatch = this.patternLocator.newDeclarationMatch(type, parent, type.binding, accuracy, type.sourceEnd-offset+1, this);", "+\t\t\t\t} else {", "+\t\t\t\t\tint length = scanner.currentPosition - nameSourceStart;", "+\t\t\t\t\tmatch = this.patternLocator.newDeclarationMatch(method, enclosingElement, method.binding, accuracy, length, this);", "+\t\t\t\t}", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treport(match);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6659525cb320c1a93cd5993b14fd6e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "a43f548b3a1c3d62722de2ff38ea24d34c2786a0", "commitAfterChange": "256997f0d353a7983d1c934f35d500006d3d2e1a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected int matchMethod(MethodBinding method)", "signatureAfterChange": " protected int matchMethod(MethodBinding method)", "diff": ["-\t\t\tint newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], method.parameters[i]);", "+\t\t\tTypeBinding argType = method.parameters[i];", "+\t\t\tint newLevel = IMPOSSIBLE_MATCH;", "+\t\t\tif (argType.isMemberType()) {", "+\t\t\t\t// only compare source name for member type (bug 41018)", "+\t\t\t\tnewLevel = CharOperation.match(this.pattern.parameterSimpleNames[i], argType.sourceName(), this.isCaseSensitive)", "+\t\t\t\t\t? ACCURATE_MATCH", "+\t\t\t\t\t: IMPOSSIBLE_MATCH;", "+\t\t\t} else {", "+\t\t\t\tnewLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], method.parameters[i]);", "+\t\t\t}"]}], "num": 70051}
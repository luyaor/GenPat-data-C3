{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "448795ddfb50419990e3157f16c8d6e9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02a3a12f1943e82adcfca53f1dbf8920", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ClasspathTests.java", "commitBeforeChange": "7878f4c2228c677604ec88f1859c6284007a67ac", "commitAfterChange": "1cebc3fd53a475c41ac0b2d0681333cea8569134", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testMissingLibrary() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testMissingLibrary2() throws JavaModelException", "diff": ["-\tpublic void testMissingLibrary() throws JavaModelException {", "-\t\tenv.addClass(root, \"p1\", \"Test1\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tenv.addClass(root, \"p2\", \"Test2\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t", "+\tpublic void testMissingLibrary2() throws JavaModelException {", "+\t\tIPath projectPath = env.addProject(\"Project\"); //$NON-NLS-1$", "+\t\tenv.removePackageFragmentRoot(projectPath, \"\"); //$NON-NLS-1$", "+\t\tIPath root = env.addPackageFragmentRoot(projectPath, \"src\"); //$NON-NLS-1$", "+\t\tIPath bin = env.setOutputFolder(projectPath, \"bin\"); //$NON-NLS-1$", "+\t\tIPath classTest1 = env.addClass(root, \"p1\", \"Test1\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\"package p1;\\n\"+ //$NON-NLS-1$", "+\t\t\t\"public class Test1 {}\" //$NON-NLS-1$", "+\t\t);", "+\t\tIPath classTest2 = env.addClass(root, \"p2\", \"Test2\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingOnlyProblemsFor(new IPath[] {projectPath, classTest3});", "-\t\texpectingOnlySpecificProblemsFor(projectPath,", "-\t\t\tnew Problem[] {", "-\t\t\t\tnew Problem(\"\", \"The project was not built since its classpath is incomplete. Cannot find the class file for java.lang.Object. Fix the classpath then try rebuilding this project.\", projectPath), //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p2\", \"This compilation unit indirectly references the missing type java.lang.Object (typically some required class file is referencing a type outside the classpath)\", classTest3) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "-\t\t);", "+\t\texpectingSpecificProblemFor(", "+\t\t\tprojectPath,", "+\t\t\tnew Problem(\"\", \"The project was not built since its classpath is incomplete. Cannot find the class file for java.lang.Object. Fix the classpath then try rebuilding this project.\", projectPath)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t", "+\t\tProblem[] prob1 = env.getProblemsFor(classTest1);", "+\t\tProblem[] prob2 = env.getProblemsFor(classTest2);", "+\t\tProblem[] prob3 = env.getProblemsFor(classTest3);", "+\t\tassertEquals(\"too much problems\", prob1.length + prob2.length + prob3.length,1);", "+\t\tif(prob1.length == 1) {", "+\t\t\texpectingSpecificProblemFor(classTest1, new Problem(\"p1\", \"This compilation unit indirectly references the missing type java.lang.Object (typically some required class file is referencing a type outside the classpath)\", classTest1)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t} else if (prob2.length == 1) {", "+\t\t\texpectingSpecificProblemFor(classTest2, new Problem(\"p2\", \"This compilation unit indirectly references the missing type java.lang.Object (typically some required class file is referencing a type outside the classpath)\", classTest2)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t} else {", "+\t\t\texpectingSpecificProblemFor(classTest3, new Problem(\"p2\", \"This compilation unit indirectly references the missing type java.lang.Object (typically some required class file is referencing a type outside the classpath)\", classTest3)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e52e362dd96011271ada61fc914703a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java", "commitBeforeChange": "f2ff53b9c5467491559775afe1992655f55a63fe", "commitAfterChange": "b38f964c0abc42b760a66a064dc1b2f95aca317b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void testMissingLibrary1() throws JavaModelException", "signatureAfterChange": "  public void testMissingLibrary1() throws JavaModelException", "diff": ["-", "-\tpublic void testMissingLibrary1() throws JavaModelException {", "-\t\tIPath projectPath = env.addProject(\"Project\"); //$NON-NLS-1$", "-\t\tenv.removePackageFragmentRoot(projectPath, \"\"); //$NON-NLS-1$", "-\t\tIPath root = env.addPackageFragmentRoot(projectPath, \"src\"); //$NON-NLS-1$", "-\t\tIPath bin = env.setOutputFolder(projectPath, \"bin\"); //$NON-NLS-1$", "-\t\tIPath classTest1 = env.addClass(root, \"p1\", \"Test1\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"package p1;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"public class Test1 {}\" //$NON-NLS-1$", "-\t\t);", "-", "-\t\tfullBuild();", "-\t\texpectingOnlyProblemsFor(new IPath[] {projectPath, classTest1});", "-\t\texpectingOnlySpecificProblemsFor(projectPath,", "-\t\t\tnew Problem[] {", "-\t\t\t\tnew Problem(\"\", \"The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project\", projectPath, -1, -1, CategorizedProblem.CAT_BUILDPATH, IMarker.SEVERITY_ERROR), //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p1\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest1, 0, 1, CategorizedProblem.CAT_BUILDPATH, IMarker.SEVERITY_ERROR) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "-\t\t);", "-", "-\t\t//----------------------------", "-\t\t//           Step 2", "-\t\t//----------------------------\t", "-\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());", "-", "-\t\tincrementalBuild();", "-\t\texpectingNoProblems();", "-\t\texpectingPresenceOf(new IPath[]{", "-\t\t\tbin.append(\"p1\").append(\"Test1.class\"), //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t});", "-\t}", "+", "+public void testMissingLibrary1() throws JavaModelException {", "+\tIPath projectPath = env.addProject(\"Project\"); //$NON-NLS-1$", "+\tenv.removePackageFragmentRoot(projectPath, \"\"); //$NON-NLS-1$", "+\tIPath root = env.addPackageFragmentRoot(projectPath, \"src\"); //$NON-NLS-1$", "+\tIPath bin = env.setOutputFolder(projectPath, \"bin\"); //$NON-NLS-1$", "+\tIPath classTest1 = env.addClass(root, \"p1\", \"Test1\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\"package p1;\\n\"+ //$NON-NLS-1$", "+\t\t\"public class Test1 {}\" //$NON-NLS-1$", "+\t);", "+", "+\tfullBuild();", "+\texpectingOnlyProblemsFor(new IPath[] {projectPath, classTest1});", "+\texpectingOnlySpecificProblemsFor(projectPath,", "+\t\tnew Problem[] {", "+\t\t\tnew Problem(\"\", \"The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project\", projectPath, -1, -1, CategorizedProblem.CAT_BUILDPATH, IMarker.SEVERITY_ERROR), //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tnew Problem(\"p1\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest1, 0, 1, CategorizedProblem.CAT_BUILDPATH, IMarker.SEVERITY_ERROR) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t}", "+\t);", "+", "+\t//----------------------------", "+\t//           Step 2", "+\t//----------------------------\t", "+\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());", "+", "+\tincrementalBuild();", "+\texpectingNoProblems();", "+\texpectingPresenceOf(new IPath[]{", "+\t\tbin.append(\"p1\").append(\"Test1.class\"), //$NON-NLS-1$ //$NON-NLS-2$", "+\t});", "+\tenv.removeProject(projectPath);", "+}"]}], "num": 66965}
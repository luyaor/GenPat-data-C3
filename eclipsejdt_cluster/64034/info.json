{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5362be40e6bbad6f01b6c48874f82c0b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "182214b65513a7daef601b0e7d0a17e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "cbbc77bad29ab0935f23d7976e8f3a83a2098569", "commitAfterChange": "218bf9e76765a0b6d9236837b12cba562b6c4513", "methodNumberBeforeChange": 264, "methodNumberAfterChange": 264, "signatureBeforeChange": " public void test117()", "signatureAfterChange": " public void test117()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-    \tMap options = this.getCompilerOptions();", "-    \toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "-    \tthis.runNegativeTest(", "-    \t\tnew String[] {", "-    \t\t\t\"X.java\",", "-    \t\t\t\"class Y {\\n\" + ", "-    \t\t\t\"  Object foo() {\\n\" +", "-    \t\t\t\"     return null;\\n\" +", "-    \t\t\t\"  }\\n\" + ", "-    \t\t\t\"}\\n\" + ", "-    \t\t\t\"public class X extends Y {\\n\" + ", "-    \t\t\t\"  @Override\\n\" +", "-    \t\t\t\"  Object foo() {\\n\" +", "-    \t\t\t\"     return new Y() {\\n\" +", "-       \t\t\t\"         @Override\\n\" +", "-    \t\t\t\"         Object foo() {\\n\" +", "-    \t\t\t\"            return null;\\n\" +", "-    \t\t\t\"         }\\n\" +", "-    \t\t\t\"     };\" +", "-    \t\t\t\"  }\\n\" + ", "-    \t\t\t\"}\"", "-    \t\t},", "-    \t\t\"----------\\n\" + ", "-    \t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "-    \t\t\"\tObject foo() {\\n\" + ", "-    \t\t\"\t       ^^^^^\\n\" + ", "-    \t\t\"The method X.foo() is overriding a method without making a super invocation\\n\" + ", "-    \t\t\"----------\\n\" + ", "-    \t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-    \t\t\"\tObject foo() {\\n\" + ", "-    \t\t\"\t       ^^^^^\\n\" + ", "-    \t\t\"The method new Y(){}.foo() is overriding a method without making a super invocation\\n\" + ", "-    \t\t\"----------\\n\",", "-    \t\tnull,", "-    \t\ttrue,", "-    \t\toptions", "-    \t);", "-\t}", "+\tMap options = this.getCompilerOptions();", "+\toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"class Y {\\n\" + ", "+\t\t\t\"  Object foo() {\\n\" +", "+\t\t\t\"     return null;\\n\" +", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\"  @Override\\n\" +", "+\t\t\t\"  Object foo() {\\n\" +", "+\t\t\t\"     return new Y() {\\n\" +", "+   \t\t\t\"         @Override\\n\" +", "+\t\t\t\"         Object foo() {\\n\" +", "+\t\t\t\"            return null;\\n\" +", "+\t\t\t\"         }\\n\" +", "+\t\t\t\"     };\" +", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\"The method X.foo() is overriding a method without making a super invocation\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\"The method new Y(){}.foo() is overriding a method without making a super invocation\\n\" + ", "+\t\t\"----------\\n\",", "+\t\tnull,", "+\t\ttrue,", "+\t\toptions", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8763b8a99185eceb177cbfa884d9bd65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "commitAfterChange": "eaaf8d51568dee07a03eec3ae337eaee38c80f58", "methodNumberBeforeChange": 263, "methodNumberAfterChange": 263, "signatureBeforeChange": " public void test116()", "signatureAfterChange": " public void test116()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-    \tMap options = this.getCompilerOptions();", "-    \toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "-    \tthis.runNegativeTest(", "-    \t\tnew String[] {", "-    \t\t\t\"X.java\",", "-    \t\t\t\"class Y {\\n\" + ", "-    \t\t\t\"  Zork foo() {}\\n\" + ", "-    \t\t\t\"}\\n\" + ", "-    \t\t\t\"public class X extends Y {\\n\" + ", "-    \t\t\t\"  @Override\\n\" +", "-    \t\t\t\"  Object foo() {\\n\" +", "-    \t\t\t\"     return new Y() {\\n\" +", "-    \t\t\t\"         Object foo() {\\n\" +", "-    \t\t\t\"            return null;\\n\" +", "-    \t\t\t\"         }\\n\" +", "-    \t\t\t\"     };\" +", "-    \t\t\t\"  }\\n\" + ", "-    \t\t\t\"}\"", "-    \t\t},", "-    \t\t\"----------\\n\" + ", "-    \t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-    \t\t\"\tZork foo() {}\\n\" + ", "-    \t\t\"\t^^^^\\n\" + ", "-    \t\t\"Zork cannot be resolved to a type\\n\" + ", "-    \t\t\"----------\\n\" + ", "-    \t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-    \t\t\"\tObject foo() {\\n\" + ", "-    \t\t\"\t       ^^^^^\\n\" + ", "-    \t\t\"The method foo() of type X must override a superclass method\\n\" + ", "-    \t\t\"----------\\n\",", "-    \t\tnull,", "-    \t\ttrue,", "-    \t\toptions", "-    \t);", "-\t}", "+   \tMap options = this.getCompilerOptions();", "+   \toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "+\tString expectedOutput = new CompilerOptions(options).sourceLevel < ClassFileConstants.JDK1_6", "+\t?\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tZork foo() {}\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\"The method foo() of type X must override a superclass method\\n\" + ", "+\t\t\"----------\\n\"", "+\t:\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tZork foo() {}\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\"The method foo() of type X must override or implement a supertype method\\n\" + ", "+\t\t\"----------\\n\";\t", "+   \tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"class Y {\\n\" + ", "+\t\t\t\"  Zork foo() {}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\"  @Override\\n\" +", "+\t\t\t\"  Object foo() {\\n\" +", "+\t\t\t\"     return new Y() {\\n\" +", "+\t\t\t\"         Object foo() {\\n\" +", "+\t\t\t\"            return null;\\n\" +", "+\t\t\t\"         }\\n\" +", "+\t\t\t\"     };\" +", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\texpectedOutput,", "+\t\tnull,", "+\t\ttrue,", "+\t\toptions\t);"]}], "num": 64034}
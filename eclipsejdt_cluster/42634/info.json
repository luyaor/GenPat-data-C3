{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b818e7ef009ae5f64dd92c4e399eb75", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "109e0ff81b0334da5170f5d72a47bd56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "a3974de2e53f4a7f6384d82823b901bd516b0970", "commitAfterChange": "7e5be365074b33481ef62dd48f6cd0d39e341472", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void traverse( \t\tIAbstractSyntaxTreeVisitor visitor, \t\tCompilationUnitScope scope)", "signatureAfterChange": "  \tpublic void traverse( \t\tIAbstractSyntaxTreeVisitor visitor, \t\tCompilationUnitScope unitScope)", "diff": ["-\t\tCompilationUnitScope scope) {", "+\t\tCompilationUnitScope unitScope) {", "-\t\t\tif (visitor.visit(this, scope)) {", "+\t\t\tif (visitor.visit(this, this.scope)) {", "-\t\t\t\t\tcurrentPackage.traverse(visitor, scope);", "+\t\t\t\t\tcurrentPackage.traverse(visitor, this.scope);", "-\t\t\t\t\t\timports[i].traverse(visitor, scope);", "+\t\t\t\t\t\timports[i].traverse(visitor, this.scope);", "-\t\t\t\t\t\ttypes[i].traverse(visitor, scope);", "+\t\t\t\t\t\ttypes[i].traverse(visitor, this.scope);", "-\t\t\tvisitor.endVisit(this, scope);", "+\t\t\tvisitor.endVisit(this, this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27c0425ef71e204dde917738f9054ef7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "9f63437bec67bc6f1450b706ffa6a59a67485b74", "commitAfterChange": "2b5868a69a1295fe1d99f9e80995ceed273132ed", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "-\t", "-\t\tint pc = codeStream.position;", "-\t\tboolean needRuntimeCheckcast = (this.bits & GenerateCheckcast) != 0;", "-\t\tif (constant != Constant.NotAConstant) {", "-\t\t\tif (valueRequired || needRuntimeCheckcast) { // Added for: 1F1W9IG: IVJCOM:WINNT - Compiler omits casting check", "-\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "-\t\t\t\tif (needRuntimeCheckcast) {", "-\t\t\t\t\tcodeStream.checkcast(this.resolvedType);", "-\t\t\t\tif (!valueRequired) {", "-\t\t\t\t\t// the resolveType cannot be double or long", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\treturn;", "-\t\t}", "-\t\texpression.generateCode(currentScope, codeStream, valueRequired || needRuntimeCheckcast);", "-\t\tif (needRuntimeCheckcast && this.expression.postConversionType(currentScope) != this.resolvedType.erasure()) { // no need to issue a checkcast if already done as genericCast", "-\t\t\tcodeStream.checkcast(this.resolvedType);", "-\t\t}", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t} else if (needRuntimeCheckcast) {", "-\t\t\tcodeStream.pop();", "+ */", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\tint pc = codeStream.position;", "+\tboolean needRuntimeCheckcast = (this.bits & ASTNode.GenerateCheckcast) != 0;", "+\tif (this.constant != Constant.NotAConstant) {", "+\t\tif (valueRequired || needRuntimeCheckcast) { // Added for: 1F1W9IG: IVJCOM:WINNT - Compiler omits casting check", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "+\t\t\tif (needRuntimeCheckcast) {", "+\t\t\t\tcodeStream.checkcast(this.resolvedType);", "+\t\t\t}", "+\t\t\tif (!valueRequired) {", "+\t\t\t\t// the resolveType cannot be double or long", "+\t\t\t\tcodeStream.pop();", "+\t\t\t}", "+\t\treturn;", "+\tthis.expression.generateCode(currentScope, codeStream, valueRequired || needRuntimeCheckcast);", "+\tif (needRuntimeCheckcast && this.expression.postConversionType(currentScope) != this.resolvedType.erasure()) { // no need to issue a checkcast if already done as genericCast", "+\t\tcodeStream.checkcast(this.resolvedType);", "+\t}", "+\tif (valueRequired) {", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t} else if (needRuntimeCheckcast) {", "+\t\tcodeStream.pop();", "+\t}", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c32d84129be27bc8d33c3cd5fd92ee9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "commitAfterChange": "e2ebe7e46ee7b738e4a2095867ce25f2e5cd118c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\t\tfor (; i < totalUnits; i++) {", "+\t\t\tfor (; i < this.totalUnits; i++) {", "-\t\t\t\t\t\t\t\tString.valueOf(totalUnits),", "+\t\t\t\t\t\t\t\tString.valueOf(this.totalUnits),", "-\t\t\t\t\t\t\tString.valueOf(totalUnits),", "+\t\t\t\t\t\t\tString.valueOf(this.totalUnits),", "-\t\t\tif (totalUnits > 1) {", "+\t\t\tif (this.totalUnits > 1) {", "-\t\t\t\t\tMessages.bind(Messages.compilation_units, String.valueOf(totalUnits))); ", "+\t\t\t\t\tMessages.bind(Messages.compilation_units, String.valueOf(this.totalUnits))); ", "-\t\t\t\t\tMessages.bind(Messages.compilation_unit, String.valueOf(totalUnits))); ", "+\t\t\t\t\tMessages.bind(Messages.compilation_unit, String.valueOf(this.totalUnits))); "]}], "num": 42634}
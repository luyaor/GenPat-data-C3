{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73898078d114060d81e9fe52b1e07f02", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fe86975f1604f66746d4a7c51e16c7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "commitAfterChange": "416292d2f4be39d514e933551cdaebb7c7ebd8a7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope)", "signatureAfterChange": "  \tpublic ReferenceExpression resolveExpressionExpecting(TypeBinding targetType, Scope scope)", "diff": ["-\t/** During inference: Try to find an applicable method binding without causing undesired side-effects. */", "-\tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope) {", "-\t\tif (this.exactMethodBinding != null) {", "+\tpublic ReferenceExpression resolveExpressionExpecting(TypeBinding targetType, Scope scope) {", "+\t", "+\t\tif (this.exactMethodBinding != null) { // We may see inference variables in target type.", "-\t\t\treturn (n == k || n == k + 1) ? this.exactMethodBinding : null;", "+\t\t\treturn (n == k || n == k + 1) ? this : null;", "-\t\tMethodBinding targetMethod = this.declarationPerTargetType != null ? this.declarationPerTargetType.get(targetType) : null;", "-\t\tif (targetMethod == null) {", "-\t\t\ttargetMethod = internalResolveTentatively(targetType, scope);", "-\t\t\tregisterResult(targetType, targetMethod);", "-\t\t}", "-\t\tif (targetMethod == null || !targetMethod.isValidBinding())", "-\t\t\treturn null;", "-\t\treturn targetMethod;", "-\t}", "+\t\t", "+\t\t// We are guaranteed here that we will not see inference variables in descriptor parameters.", "+\t\tReferenceExpression copy = this.copiesPerTargetType != null ? this.copiesPerTargetType.get(targetType) : null;", "+\t\tif (copy != null)", "+\t\t\treturn copy;", "+\t\t", "+\t\t\tcopy = copy();", "+\t\t\tif (copy == null) { // should never happen even for code assist.", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tcopy.setExpressionContext(this.expressionContext);", "+\t\t\tcopy.setExpectedType(targetType);", "+\t\t\tcopy.resolveType(this.enclosingScope);", "+\t\t\tregisterCopy(targetType, copy);", "+\t\t\treturn copy.resolvedType != null && copy.resolvedType.isValidBinding() && copy.binding != null && copy.binding.isValidBinding() ? copy : null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73c116fca14d786864a7d8ae8c8e192a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "6cd0099c2021e34815eaba987a586ae52dacf569", "commitAfterChange": "d6dc74869d8c303dbb7a6d8b327d8b104cd5865b", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic LambdaExpression resolveExpressionExpecting(TypeBinding targetType, Scope skope)", "signatureAfterChange": " \tpublic LambdaExpression resolveExpressionExpecting(TypeBinding targetType, Scope skope)", "diff": ["-\t\tLambdaExpression lambda = this.copiesPerTargetType != null ? this.copiesPerTargetType.get(targetType) : null;", "-\t\tif (lambda == null) {", "-\t\t\tlambda = getResolvedCopyForInferenceTargeting(targetType);", "-\t\t\tif (this.copiesPerTargetType == null)", "-\t\t\t\tthis.copiesPerTargetType = new HashMap<TypeBinding, LambdaExpression>();", "-\t\t\tthis.copiesPerTargetType.put(targetType, lambda);", "+\t\tLambdaExpression copy = null;", "+\t\ttry {", "+\t\t\tcopy = cachedResolvedCopy(targetType);", "+\t\t} catch (CopyFailureException cfe) {", "+\t\t\treturn null;", "-\t\treturn lambda;", "-\t}", "+\t\tfinal CompilerOptions compilerOptions = this.enclosingScope.compilerOptions();", "+\t\tboolean analyzeNPE = compilerOptions.isAnnotationBasedNullAnalysisEnabled;", "+\t\tIErrorHandlingPolicy oldPolicy = this.enclosingScope.problemReporter().switchErrorHandlingPolicy(silentErrorHandlingPolicy);", "+\t\t\tif (!copy.hasIgnoredMandatoryErrors && !enclosingScopesHaveErrors()) {", "+\t\t\t\tcopy.valueCompatible |= copy.doesNotCompleteNormally();"]}], "num": 4943}
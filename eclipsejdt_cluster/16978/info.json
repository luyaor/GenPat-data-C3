{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62ae051f43a10c3e6bea95afc29f2b6b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb3661d1fa7c621ea2710a30e0ea0a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, TypeBinding lastReceiverType, \tint index, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo)", "diff": ["-public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, TypeBinding lastReceiverType, \tint index, FlowInfo flowInfo) {", "+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo) {", "-\t// if field from parameterized type got found, use the original field at codegen time", "-\tFieldBinding originalField = fieldBinding.original();", "-\tif (originalField != fieldBinding) {", "-\t\tsetCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index, originalField);", "-\t}", "-", "-\t    FieldBinding someCodegenBinding = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "-\t\tif (someCodegenBinding.declaringClass != currentScope.enclosingSourceType()) {", "-\t\t    setSyntheticAccessor(fieldBinding, index,", "-\t\t            ((SourceTypeBinding) someCodegenBinding.declaringClass).addSyntheticMethod(someCodegenBinding, index >= 0 /*read-access?*/));", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(someCodegenBinding, this, index >= 0 /*read-access?*/);", "+\t    FieldBinding codegenField = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "+\t    ReferenceBinding declaringClass = codegenField.declaringClass;", "+\t\tif (declaringClass != currentScope.enclosingSourceType()) {", "+\t\t    setSyntheticAccessor(fieldBinding, index, ((SourceTypeBinding) declaringClass).addSyntheticMethod(codegenField, index >= 0 /*read-access?*/));", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenField, this, index >= 0 /*read-access?*/);", "-\t\t    FieldBinding someCodegenBinding = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "+\t\t    FieldBinding codegenField = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "-\t\t            ((SourceTypeBinding) currentScope.enclosingSourceType().enclosingTypeAt(depth)).addSyntheticMethod(someCodegenBinding, index >= 0 /*read-access?*/));", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(someCodegenBinding, this, index >= 0 /*read-access?*/);", "+\t\t            ((SourceTypeBinding) currentScope.enclosingSourceType().enclosingTypeAt(depth)).addSyntheticMethod(codegenField, index >= 0 /*read-access?*/));", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenField, this, index >= 0 /*read-access?*/);", "-\t\t}", "-\t}", "-\t// if the binding declaring class is not visible, need special action", "-\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t// and not from Object or implicit static field access.", "-\tif (fieldBinding.declaringClass != lastReceiverType", "-\t\t\t&& !lastReceiverType.isArrayType()", "-\t\t\t&& fieldBinding.declaringClass != null // array.length", "-\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {", "-\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(index <= 1 &&  this.indexOfFirstFieldBinding == 1 && fieldBinding.isStatic()))", "-\t\t\t\t&& fieldBinding.declaringClass.id != TypeIds.T_JavaLangObject) // no change for Object fields", "-\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope)) {", "-", "-\t\t    setCodegenBinding(", "-\t\t            index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index,", "-\t\t            currentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t                    getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index),", "-\t\t                    (ReferenceBinding)lastReceiverType.erasure()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745b4a596ec59f5ed005e18829a84f61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "a6829de4e3db7f328203e4f515f45bdc76ef3eb6", "commitAfterChange": "458d6ecb95c70f1df88b46b781028646894448a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "signatureAfterChange": "  private LinkedHashSet<ClasspathLocation> computeClasspathLocations(JavaProject javaProject)", "diff": ["-private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject) {", "+", "+private LinkedHashSet<ClasspathLocation> computeClasspathLocations(JavaProject javaProject) {", "-\t\t// project doesn't exist", "-\t\tthis.locations = new ClasspathLocation[0];", "-\t\treturn;", "+\t\treturn null;// project doesn't exist", "+\tLinkedHashSet<ClasspathLocation> locations = new LinkedHashSet<ClasspathLocation>();", "-\tClasspathLocation[] cpLocations = new ClasspathLocation[length];", "-\tint index = 0;", "-\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[i];", "-\t\tIPath path = root.getPath();", "-\t\ttry {", "-\t\t\tif (root.isArchive()) {", "-\t\t\t\tZipFile zipFile = manager.getZipFile(path);", "-\t\t\t\tcpLocations[index++] = new ClasspathJar(zipFile, ((ClasspathEntry) root.getRawClasspathEntry()).getAccessRuleSet());", "-\t\t\t} else {", "-\t\t\t\tObject target = JavaModel.getTarget(path, true);", "-\t\t\t\tif (target == null) {", "-\t\t\t\t\t// target doesn't exist any longer", "-\t\t\t\t\t// just resize cpLocations", "-\t\t\t\t\tSystem.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);", "-\t\t\t\t} else if (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "-\t\t\t\t\tcpLocations[index++] = new ClasspathSourceDirectory((IContainer)target, root.fullExclusionPatternChars(), root.fullInclusionPatternChars());", "-\t\t\t\t} else {", "-\t\t\t\t\tcpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false, ((ClasspathEntry) root.getRawClasspathEntry()).getAccessRuleSet());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (CoreException e1) {", "-\t\t\t// problem opening zip file or getting root kind", "-\t\t\t// consider root corrupt and ignore", "-\t\t\t// just resize cpLocations", "-\t\t\tSystem.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);", "-\t\t}", "+\t\tClasspathLocation cp = mapToClassPathLocation(manager, (PackageFragmentRoot) roots[i]);", "+\t\tif (cp != null) locations.add(cp);", "-\tthis.locations = cpLocations;", "+\treturn locations;", "+}"]}], "num": 16978}
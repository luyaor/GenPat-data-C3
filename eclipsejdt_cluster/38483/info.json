{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93a4d2abb290b8f0d1c1b9d77d31f7d5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a90825b2a6c66946b575c2a174a95867", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "c609c337bf309009b4e02e584ece29cf9833f54e", "commitAfterChange": "b4f87915b858b8e38e418046984ece5dc8db6148", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, JavaProject project)", "signatureAfterChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, JavaProject project)", "diff": ["-\t\tboolean reloadClasspath = true;", "-\t\tif (delta != null) {", "-\t\t\treloadClasspath = false; // narrow down need to reload based on delta", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.REMOVED : // recreate one based on in-memory classpath", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tJavaModelManager.PerProjectInfo info = project.getPerProjectInfo();", "-\t\t\t\t\t\tif (info.rawClasspath != null) { // if there is an in-memory classpath", "-\t\t\t\t\t\t\tproject.saveClasspath(info.rawClasspath, info.outputLocation);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\tUtil.log(e, \"Could not save classpath for \"+ project.getPath()); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\tswitch (delta.getKind()) {", "+\t\t\tcase IResourceDelta.REMOVED : // recreate one based on in-memory classpath", "+\t\t\t\ttry {", "+\t\t\t\t\tJavaModelManager.PerProjectInfo info = project.getPerProjectInfo();", "+\t\t\t\t\tif (info.rawClasspath != null) { // if there is an in-memory classpath", "+\t\t\t\t\t\tproject.saveClasspath(info.rawClasspath, info.outputLocation);", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\tif (project.getProject().isAccessible()) {", "+\t\t\t\t\t\tUtil.log(e, \"Could not save classpath for \"+ project.getPath()); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IResourceDelta.CHANGED :", "+\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0  // only consider content change", "+\t\t\t\t\t\t&& (delta.getFlags() & IResourceDelta.MOVED_FROM) == 0) {// and also move and overide scenario (see http://dev.eclipse.org/bugs/show_bug.cgi?id=21420)", "-\t\t\t\tcase IResourceDelta.CHANGED :", "-\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0  // only consider content change", "-\t\t\t\t\t\t\t&& (delta.getFlags() & IResourceDelta.MOVED_FROM) == 0) // and also move and overide scenario (see http://dev.eclipse.org/bugs/show_bug.cgi?id=21420)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\treloadClasspath = true;", "-\t\t\t}", "-\t\t}", "-\t\tif (reloadClasspath) {", "-\t\t\ttry {", "-\t\t\t\tproject.forceClasspathReload(null);", "-\t\t\t} catch (RuntimeException e) {", "-\t\t\t} catch (JavaModelException e) {\t", "-\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// fall through", "+\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\ttry {", "+\t\t\t\t\tproject.forceClasspathReload(null);", "+\t\t\t\t} catch (RuntimeException e) { \t\t// ignore", "+\t\t\t\t} catch (JavaModelException e) {\t// ignore", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd660c9b163874c60739d62290e7785a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe2.java", "commitBeforeChange": "74d059b3fbdc00070c70bee76509a44ccad7fb4d", "commitAfterChange": "31d2b0bac7c9b032f1ad8765fd4577eaff8d79fd", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void printModifiers(List modifiers, ASTVisitor visitor)", "signatureAfterChange": " \tpublic void printModifiers(List modifiers, ASTVisitor visitor)", "diff": ["-\t\t\tboolean hasModifiers = false;", "-\t\t\t\t\t\thasModifiers = true;", "-\t\t\t\t\t\thasModifiers = true;", "-\t\t\t\t\t\tif (hasModifiers) {", "-\t\t\t\t\t\t\tthis.space();", "-\t\t\t\t\t\t}"]}], "num": 38483}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e036a717dfcbd1662fcb5f10f780fc6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "798a156a8cece814a42d0c525459293a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r public void reportMethodDeclaration(\r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames,\r \tint accuracy) throws CoreException", "diff": ["+ */\r", "+public void reportMethodDeclaration(\r", "+\tAbstractMethodDeclaration methodDeclaration, \r", "+\tchar[][] definingTypeNames,\r", "+\tint accuracy) throws CoreException {\r", "+\t\t\r", "+\t// create method handle\r", "+\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\t// compute source positions of the selector \r", "+\tScanner scanner = parser.scanner;\r", "+\tint nameSourceStart = methodDeclaration.sourceStart;\r", "+\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "+\ttry {\r", "+\t\tscanner.getNextToken();\r", "+\t} catch(InvalidInputException e) {\r", "+\tint nameSourceEnd = scanner.currentPosition-1;\r", "+\t// accept method declaration\r", "+\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "+}\r", "-\t */\r", "-\tpublic void reportMethodDeclaration(\r", "-\t\tAbstractMethodDeclaration methodDeclaration,\r", "-\t\tchar[][] definingTypeNames,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException {\r", "-\r", "-\t\t// create method handle\r", "-\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t\t// compute source positions of the selector \r", "-\t\tScanner scanner = parser.scanner;\r", "-\t\tint nameSourceStart = methodDeclaration.sourceStart;\r", "-\t\tscanner.setSourceBuffer(\r", "-\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "-\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "-\t\t\tscanner.getNextToken();\r", "-\t\t} catch (InvalidInputException e) {\r", "-\t\tint nameSourceEnd = scanner.currentPosition - 1;\r", "-\r", "-\t\t// accept method declaration\r", "-\t\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f3f1288d44e280130fc81444933779", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \tpublic void reportQualifiedReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r public void reportQualifiedReference(\r \tint sourceStart,\r \tint sourceEnd,\r \tchar[][] qualifiedName,\r \tIJavaElement element,\r \tint accuracy) throws CoreException", "diff": ["+ */\r", "+public void reportQualifiedReference(\r", "+\tint sourceStart,\r", "+\tint sourceEnd,\r", "+\tchar[][] qualifiedName,\r", "+\tIJavaElement element,\r", "+\tint accuracy) throws CoreException {\r", "+\t\t\r", "+\t// compute source positions of the qualified reference \r", "+\tScanner scanner = parser.scanner;\r", "+\tscanner.resetTo(sourceStart, sourceEnd);\r", "+\tint refSourceStart = -1, refSourceEnd = -1;\r", "+\tint tokenNumber = qualifiedName.length;\r", "+\tint token = -1;\r", "+\tint previousValid = -1;\r", "+\tint i = 0;\r", "+\tdo {\r", "+\t\tint currentPosition = scanner.currentPosition;\r", "+\t\t// read token\r", "+\t\t\ttoken = scanner.getNextToken();\r", "+\t\t} catch(InvalidInputException e) {\r", "-\t */\r", "-\tpublic void reportQualifiedReference(\r", "-\t\tint sourceStart,\r", "-\t\tint sourceEnd,\r", "-\t\tchar[][] qualifiedName,\r", "-\t\tIJavaElement element,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException {\r", "-\r", "-\t\t// compute source positions of the qualified reference \r", "-\t\tScanner scanner = parser.scanner;\r", "-\t\tscanner.setSourceBuffer(\r", "-\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "-\t\tscanner.resetTo(sourceStart, sourceEnd);\r", "-\r", "-\t\tint refSourceStart = -1, refSourceEnd = -1;\r", "-\t\tint tokenNumber = qualifiedName.length;\r", "-\t\tint token = -1;\r", "-\t\tint previousValid = -1;\r", "-\t\tint i = 0;\r", "-\t\tdo {\r", "-\t\t\tint currentPosition = scanner.currentPosition;\r", "-\t\t\t// read token\r", "+\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "+\t\t\twhile (i < tokenNumber && !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "+\t\t\t}\r", "+\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i-1]) && (previousValid == -1 || previousValid == i-2)) {\r", "+\t\t\t\tpreviousValid = i-1;\r", "+\t\t\t\tif (refSourceStart == -1) {\r", "+\t\t\t\t\trefSourceStart = currentPosition;\r", "+\t\t\t\t}\r", "+\t\t\t\trefSourceEnd = scanner.currentPosition-1;\r", "+\t\t\t} else {\r", "+\t\t\t\ti = 0;\r", "+\t\t\t\trefSourceStart = -1;\r", "+\t\t\t\tpreviousValid = -1;\r", "+\t\t\t}\r", "+\t\t\t// read '.'\r", "-\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\t} catch(InvalidInputException e) {\r", "-\t\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "-\t\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "-\t\t\t\twhile (i < tokenNumber\r", "-\t\t\t\t\t&& !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "-\t\t\t\t}\r", "-\t\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i - 1])\r", "-\t\t\t\t\t&& (previousValid == -1 || previousValid == i - 2)) {\r", "-\t\t\t\t\tpreviousValid = i - 1;\r", "-\t\t\t\t\tif (refSourceStart == -1) {\r", "-\t\t\t\t\t\trefSourceStart = currentPosition;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\trefSourceEnd = scanner.currentPosition - 1;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\ti = 0;\r", "-\t\t\t\t\trefSourceStart = -1;\r", "-\t\t\t\t\tpreviousValid = -1;\r", "-\t\t\t\t}\r", "-\t\t\t\t// read '.'\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\ttoken = scanner.getNextToken();\r", "-\t\t\t\t} catch (InvalidInputException e) {\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\twhile (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "+\t\t} \r", "+\t} while (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "+\t// accept method declaration\r", "+\tif (refSourceStart != -1) {\r", "+\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "+\t} else {\r", "+\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r", "+\t}\r", "+}\r", "-\t\tif (refSourceStart != -1) {\r", "-\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "-\t\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdc7bccc86fe9369aa60be9637b30da9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r public void reportMethodDeclaration(\r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames,\r \tint accuracy) throws CoreException", "diff": ["+ */\r", "+public void reportMethodDeclaration(\r", "+\tAbstractMethodDeclaration methodDeclaration, \r", "+\tchar[][] definingTypeNames,\r", "+\tint accuracy) throws CoreException {\r", "+\t\t\r", "+\t// create method handle\r", "+\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\t// compute source positions of the selector \r", "+\tScanner scanner = parser.scanner;\r", "+\tint nameSourceStart = methodDeclaration.sourceStart;\r", "+\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "+\ttry {\r", "+\t\tscanner.getNextToken();\r", "+\t} catch(InvalidInputException e) {\r", "+\tint nameSourceEnd = scanner.currentPosition-1;\r", "+\t// accept method declaration\r", "+\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "+}\r", "-\t */\r", "-\tpublic void reportMethodDeclaration(\r", "-\t\tAbstractMethodDeclaration methodDeclaration,\r", "-\t\tchar[][] definingTypeNames,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException {\r", "-\r", "-\t\t// create method handle\r", "-\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t\t// compute source positions of the selector \r", "-\t\tScanner scanner = parser.scanner;\r", "-\t\tint nameSourceStart = methodDeclaration.sourceStart;\r", "-\t\tscanner.setSourceBuffer(\r", "-\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "-\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "-\t\t\tscanner.getNextToken();\r", "-\t\t} catch (InvalidInputException e) {\r", "-\t\tint nameSourceEnd = scanner.currentPosition - 1;\r", "-\r", "-\t\t// accept method declaration\r", "-\t\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "-\t}\r"]}], "num": 28381}
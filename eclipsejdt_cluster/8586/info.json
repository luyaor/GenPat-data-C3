{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08342ef9813777124e91f4fd909e3b35", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67ab077e1336e87a0411485d8d05a1f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "132971f23d5ad724e7abdb8444fe685456f8fc05", "commitAfterChange": "243454d9ddff3b98b1fa12e536cfddbd176702ef", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public TypeBinding[] inferElidedTypes(ReferenceBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "signatureAfterChange": "  public TypeBinding[] inferElidedTypes(ReferenceBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "diff": ["+\t\t// this is our last chance to inspect the result of the inference that is connected to the throw-away factory binding", "+\t\tInferenceContext18 infCtx18 = getInferenceContext(genericFactory);", "+\t\tif (infCtx18 != null && infCtx18.stepCompleted == InferenceContext18.BINDINGS_UPDATED) {", "+\t\t\t// refresh argumentTypes from updated bindings in arguments:", "+\t\t\t// (this shouldn't be strictly necessary, as FunctionExpression.isCompatibleWith() should give the same result,", "+\t\t\t//  but it's probably be a good idea to avoid the necessity to call isCompatibleWith() in the first place). ", "+\t\t\tfor (int i = 0; i < argumentTypes.length; i++) {", "+\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding)", "+\t\t\t\t\targumentTypes[i] = this.arguments[i].resolvedType;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec9e8b953d1c5c5dda02347a0a5f8bac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "40f76b3d0fb01a4a7fa1aad4b09c356c31458c94", "commitAfterChange": "323d52f789e646d704223fd3ac5d22c4e4efec25", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tpublic TypeBinding unannotated()", "signatureAfterChange": "  \tpublic TypeBinding unannotated()", "diff": ["+\t\tif (!hasNullTypeAnnotations())", "+\t\t\treturn this;", "-\t\treturn this.environment.createParameterizedType(this.type, this.arguments, this.enclosingType);", "+\t\tTypeBinding[] unannotatedArguments = null;", "+\t\tif (this.arguments != null) {", "+\t\t\tunannotatedArguments = new TypeBinding[this.arguments.length];", "+\t\t\tfor (int i = 0; i < unannotatedArguments.length; i++) {", "+\t\t\t\tunannotatedArguments[i] = this.arguments[i].unannotated();", "+\t\t\t}", "+\t\t}", "+\t\treturn this.environment.createParameterizedType(this.type, unannotatedArguments, ", "+\t\t\t\tthis.enclosingType == null ? null : (ReferenceBinding) this.enclosingType.unannotated());"]}], "num": 8586}
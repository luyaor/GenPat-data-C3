{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa650ce33858337de1af49e8d04e6d73", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cecf37a62b96e49e7e4aa5d7d8c2dec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "f64c781b520a5d04053021f1d2ec4228934d3094", "commitAfterChange": "f4cb909d55448a19964594cbb4a048da9d7e78f7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test011_problem_categories()", "signatureAfterChange": " public void test011_problem_categories()", "diff": ["+\t\texpectedProblemAttributes.put(\"ComparingIdentical\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"ShouldImplementHashcode\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"MissingSynchronizedModifierInInheritedMethod\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"ComparingIdentical\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"MissingSynchronizedModifierInInheritedMethod\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"ShouldImplementHashcode\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\tStringBuffer correctResult = new StringBuffer(70000);", "-\t\t\t\tint problemId = field.getInt(iProblemClass), maskedProblemId = problemId & IProblem.IgnoreCategoriesMask;", "+\t\t\t\tint problemId = field.getInt(iProblemClass);", "+\t\t\t\tint maskedProblemId = problemId & IProblem.IgnoreCategoriesMask;", "-\t\t\t\t\t\tSystem.out.println(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.CAT_UNSPECIFIED));\");", "+\t\t\t\t\t\tint actualCategory = ProblemReporter.getProblemCategory(ProblemSeverities.Error, problemId);", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\\n\");", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\\n\");", "-\t\t\t\t\t\t\tSystem.out.println(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\");", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", DEPRECATED);\\n\");", "+\t\t}", "+\t\tif (failures.length() > 0) {", "+\t\t\tSystem.out.println(correctResult);", "+\t\t\tSystem.out.println();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "662923cb71d3ac39b1b3253dd8f7c37f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "2405db5aa5fe68001490d17fc143b2b94cd3e4c0", "commitAfterChange": "f9e197d5d504f2f1e192bb89ac7c3b3675cc44f4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  protected void setUp() throws Exception", "signatureAfterChange": "  protected void setUp() throws Exception", "diff": ["-\tif (CURRENT_CLASS == null || CURRENT_CLASS != getClass()) {", "+\tboolean isFirstTestRun = CURRENT_CLASS == null;", "+\tif (isFirstTestRun || CURRENT_CLASS != getClass()) {", "+\t\tif (isFirstTestRun) clean();", "-\t\t\tstream.print(used);", "+\t\t\tstream.print(format(used));", "-\t\t\tstream.print(total);", "+\t\t\tstream.print(format(total));", "-\t\t\tstream.print(Runtime.getRuntime().maxMemory());", "+\t\t\tstream.print(format(Runtime.getRuntime().maxMemory()));", "+\t\t\tif (isFirstTestRun) {", "+\t\t\t\tSystem.out.println(\"\t\"+format(used));", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (isFirstTestRun) {", "+\t\t\t\tlong total = Runtime.getRuntime().totalMemory();", "+\t\t\t\tlong used = total - Runtime.getRuntime().freeMemory();", "+\t\t\t\tSystem.out.println(\"\talready used while starting: \"+format(used));", "+\t\t\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e45a36ff84b90583854dbd6f7a37dbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "f15f3a4daa4f7cbf363475bdb20d4707912f834f", "commitAfterChange": "1e2211eded7d5ae87dfcf507bb00676a5a81d8e9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void setUp() throws Exception", "signatureAfterChange": " \tprotected void setUp() throws Exception", "diff": ["+\t\t// Perform gc several times to be sure that it won't take time while executing current test", "+\t\tint iterations = 0;", "+\t\tlong delta;", "+\t\tdo {", "+\t\t\tlong free = Runtime.getRuntime().freeMemory();", "+\t\t\tSystem.gc();", "+\t\t\tdelta = Runtime.getRuntime().freeMemory() -free;", "+\t\t\tif (DEBUG) System.out.println(\"Loop gc \"+ ++iterations + \" (free=\"+free+\", delta=\"+delta+\")\");", "+\t\t\tThread.sleep(500);", "+\t\t} while (iterations<10 && delta>100);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91326034364f4e17e801061cbccc57bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "1711cd3c2a5b80208f9ca8c0106649ad2ac334e9", "commitAfterChange": "a1b95807b51dd3bce9c0bff1093436d199739dfa", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\t\t\tthis.key = buffer.toString();", "+\t\t\t\t\tITypeBinding[] typeArgs = this.getTypeArguments();", "+\t\t\t\t\tfinal int typeArgsLength = typeArgs.length;", "+\t\t\t\t\tif (typeArgsLength != 0) {", "+\t\t\t\t\t\tbuffer.append('<');", "+\t\t\t\t\t\tfor (int i = 0; i < typeArgsLength; i++) {", "+\t\t\t\t\t\t\tbuffer.append(typeArgs[i].getKey());", "+\t\t\t\t\t\t\tif (i != typeArgsLength - 1) {", "+\t\t\t\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append('>');", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.key = String.valueOf(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "969a8c348e42ae94389866530c922419", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "19de0bf25a38cb3c78ae5b1452a4badcf6ffab4c", "commitAfterChange": "d45a6d72ecac1399ae839b8bb0faf0b4626c38b4", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \t \tprivate void parseTypeVariable()", "signatureAfterChange": " \t \tprivate void parseTypeVariable()", "diff": ["-\t\tconsumeTypeVariable(this.scanner.getTokenSource());", "+\t\tchar[] typeVariableName = this.scanner.getTokenSource();", "+\t\tchar[] position;", "+\t\tint length = typeVariableName.length;", "+\t\tif (length > 0 && Character.isDigit(typeVariableName[0])) {", "+\t\t\tint firstT = CharOperation.indexOf('T', typeVariableName);", "+\t\t\tposition = CharOperation.subarray(typeVariableName, 0, firstT);", "+\t\t\ttypeVariableName = CharOperation.subarray(typeVariableName, firstT+1, typeVariableName.length);", "+\t\t} else {", "+\t\t\tposition = CharOperation.NO_CHAR;", "+\t\t}", "+\t\tconsumeTypeVariable(position, typeVariableName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaff7ad22cc6e30e784e2fb7b0eead4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/comment/JavaDocRegion.java", "commitBeforeChange": "9aadd271aa6b9408f381dcc08f67ae2c31958a0a", "commitAfterChange": "d789ada93846133166f6d4ecebd817b0acd80298", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate String postprocessCodeSnippet(String snippet, String indentation)", "signatureAfterChange": " \tprivate String postprocessCodeSnippet(String snippet, String indentation)", "diff": ["+\t\t// remove trailing spaces", "+\t\tint i= snippet.length();", "+\t\twhile (i > 0 && ' ' == snippet.charAt(i-1))", "+\t\t\ti--;", "+\t\tsnippet= snippet.substring(0, i);", "+\t\t", "-\t\tbuffer.append(getDelimiter());", "+\t\tString lineDelimiter= getDelimiter();", "+\t\tif (lineDelimiter != null && snippet.indexOf(lineDelimiter) != 0)", "+\t\t\tbuffer.append(lineDelimiter);", "-\t\tbuffer.append(getDelimiter());", "+\t\tif (lineDelimiter != null && snippet.lastIndexOf(lineDelimiter) != snippet.length() - lineDelimiter.length())", "+\t\t\tbuffer.append(lineDelimiter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3accbe12d6ae6a0cafea1467228956b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModelTestsUtil.java", "commitBeforeChange": "917603919e9d38772fd63709feb3bbda7696f523", "commitAfterChange": "fca5fd453024a315e76f840acd34b846e15423bf", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public static String trimLinesLeadingWhitespaces(String input)", "signatureAfterChange": " public static String trimLinesLeadingWhitespaces(String input)", "diff": ["-\t\t\tbuffer.append(line.substring(index+1).trim());", "+\t\t\tint length = line.length();", "+\t\t\tif (length > 80 && line.charAt(length-1) == '>') { // should not happen:  bug of old formatter", "+\t\t\t\tint idx = line.lastIndexOf('<');", "+\t\t\t\tbuffer.append(line.substring(index+1, idx).trim());", "+\t\t\t\tbuffer.append(Util.LINE_SEPARATOR);", "+\t\t\t\tbuffer.append(line.substring(idx).trim());", "+\t\t\t\tcontinue;", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(line.substring(index+1).trim());", "+\t\t\t}"]}], "num": 43804}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a71e38f89089309040648399e50344d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1259f1200a0763545a54bb0a8439ba44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate void locatePackageDeclarations( \t\tSearchPattern searchPattern, \t\tIWorkspace workspace) \t\tthrows JavaModelException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "diff": ["-\t */", "-\tprivate void locatePackageDeclarations(", "-\t\tSearchPattern searchPattern,", "-\t\tIWorkspace workspace)", "-\t\tthrows JavaModelException {", "-\t\tif (searchPattern instanceof OrPattern) {", "-\t\t\tSearchPattern[] patterns = ((OrPattern) searchPattern).patterns;", "-\t\t\tfor (int i = 0, length = patterns.length; i < length; i++)", "-\t\t\t\tthis.locatePackageDeclarations(patterns[i], workspace);", "-\t\t} else", "-\t\t\tif (searchPattern instanceof PackageDeclarationPattern) {", "-\t\t\t\tPackageDeclarationPattern pkgPattern =", "-\t\t\t\t\t(PackageDeclarationPattern) searchPattern;", "-\t\t\t\tIJavaProject[] projects =", "-\t\t\t\t\tJavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "-\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t\tIJavaProject javaProject = projects[i];", "-\t\t\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots();", "-\t\t\t\t\tfor (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {", "-\t\t\t\t\t\tIJavaElement[] pkgs = roots[j].getChildren();", "-\t\t\t\t\t\tfor (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {", "-\t\t\t\t\t\t\tIPackageFragment pkg = (IPackageFragment)pkgs[k];", "-\t\t\t\t\t\t\tif (pkg.getChildren().length > 0 ", "-\t\t\t\t\t\t\t\t\t&& pkgPattern.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {", "-\t\t\t\t\t\t\t\tIResource resource = pkg.getResource();", "-\t\t\t\t\t\t\t\tif (resource == null) { // case of a file in an external jar", "-\t\t\t\t\t\t\t\t\tresource = javaProject.getProject();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.currentPotentialMatch = new PotentialMatch(this, resource, null);", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tthis.report(-1, -2, pkg, IJavaSearchResultCollector.EXACT_MATCH);", "-\t\t\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\t\t\tif (e instanceof JavaModelException) {", "-\t\t\t\t\t\t\t\t\t\tthrow (JavaModelException) e;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t}", "+ */", "+protected void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException {", "+\tif (searchPattern instanceof OrPattern) {", "+\t\tSearchPattern[] patterns = ((OrPattern) searchPattern).patterns;", "+\t\tfor (int i = 0, length = patterns.length; i < length; i++)", "+\t\t\tlocatePackageDeclarations(patterns[i], workspace);", "+\t} else if (searchPattern instanceof PackageDeclarationPattern) {", "+\t\tPackageDeclarationPattern pkgPattern = (PackageDeclarationPattern) searchPattern;", "+\t\tIJavaProject[] projects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\tIJavaProject javaProject = projects[i];", "+\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots();", "+\t\t\tfor (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {", "+\t\t\t\tIJavaElement[] pkgs = roots[j].getChildren();", "+\t\t\t\tfor (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {", "+\t\t\t\t\tIPackageFragment pkg = (IPackageFragment) pkgs[k];", "+\t\t\t\t\tif (pkg.getChildren().length > 0 ", "+\t\t\t\t\t\t\t&& pkgPattern.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {", "+\t\t\t\t\t\tIResource resource = pkg.getResource();", "+\t\t\t\t\t\tif (resource == null) // case of a file in an external jar", "+\t\t\t\t\t\t\tresource = javaProject.getProject();", "+\t\t\t\t\t\tthis.currentPotentialMatch = new PotentialMatch(this, resource, null);", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\treport(-1, -2, pkg, IJavaSearchResultCollector.EXACT_MATCH);", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\tthrow e;", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2ca0da9a6690b82f981762e47c3451a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "b66bc0ca466232b8b3006ed38a5137923b03416c", "commitAfterChange": "d81f79f00816b88315f5cebda6e215147f9e97f8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public TypeBinding clone(TypeBinding outerType, TypeBinding[] typeArguments)", "signatureAfterChange": "  public TypeBinding clone(TypeBinding outerType)", "diff": ["-public TypeBinding clone(TypeBinding outerType, TypeBinding[] typeArguments) {", "+public TypeBinding clone(TypeBinding outerType) {", "-\tif (outerType == null) {", "-\t\touterType = enclosingType();", "-\t}", "+\tcopy.enclosingType = (SourceTypeBinding) outerType;"]}], "num": 2607}
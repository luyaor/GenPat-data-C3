{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1d3bef3fdee174e8c05da29fd0f0a04", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1322218c3be245ccc36163a871775adb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test022()", "signatureAfterChange": " \tpublic void test022()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X<T extends Object> {\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class Y<V extends String> extends X<V> {\\n\" +", "-\t\t\t\t\"  public <W extends String> Y<W> make(Class<W> clazz) {\\n\" +", "-\t\t\t\t\"    return new Y<W>();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  public <U extends Object> X<U> make(Class<U> clazz) {\\n\" +", "-\t\t\t\t\"    return new X<U>();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  public static void main(String[] args) throws Exception {\\n\" +", "-\t\t\t\t\"    Y y = new Y();\\n\" +", "-\t\t\t\t\"    y.make(String.class);\\n\" +", "-\t\t\t\t\"    y.make(getClazz());\\n\" +", "-\t\t\t\t\"    y.make(getClazz().newInstance().getClass());\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  public static Class getClazz() {\\n\" +", "-\t\t\t\t\"    return String.class;\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t},", "+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tclass Y<V extends String> extends X<V> {\\n\" + ", "+\t\t\"\t                  ^^^^^^\\n\" + ", "+\t\t\"The type parameter V should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tpublic <W extends String> Y<W> make(Class<W> clazz) {\\n\" + ", "+\t\t\"\t                  ^^^^^^\\n\" + ", "+\t\t\"The type parameter W should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tpublic <W extends String> Y<W> make(Class<W> clazz) {\\n\" + ", "+\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tpublic <U extends Object> X<U> make(Class<U> clazz) {\\n\" + ", "+\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\tY y = new Y();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"Y is a raw type. References to generic type Y<V> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\tY y = new Y();\\n\" + ", "+\t\t\"\t          ^\\n\" + ", "+\t\t\"Y is a raw type. References to generic type Y<V> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"\ty.make(String.class);\\n\" + ", "+\t\t\"\t  ^^^^\\n\" + ", "+\t\t\"The method make(Class) is ambiguous for the type Y\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"8. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"\ty.make(getClazz());\\n\" + ", "+\t\t\"\t  ^^^^\\n\" + ", "+\t\t\"The method make(Class) is ambiguous for the type Y\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"9. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"\ty.make(getClazz().newInstance().getClass());\\n\" + ", "+\t\t\"\t  ^^^^\\n\" + ", "+\t\t\"The method make(Class) is ambiguous for the type Y\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"10. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\"\tpublic static Class getClazz() {\\n\" + ", "+\t\t\"\t              ^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\":", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\";", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T extends Object> {\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y<V extends String> extends X<V> {\\n\" +", "+\t\t\t\t\"  public <W extends String> Y<W> make(Class<W> clazz) {\\n\" +", "+\t\t\t\t\"    return new Y<W>();\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"  public <U extends Object> X<U> make(Class<U> clazz) {\\n\" +", "+\t\t\t\t\"    return new X<U>();\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"  public static void main(String[] args) throws Exception {\\n\" +", "+\t\t\t\t\"    Y y = new Y();\\n\" +", "+\t\t\t\t\"    y.make(String.class);\\n\" +", "+\t\t\t\t\"    y.make(getClazz());\\n\" +", "+\t\t\t\t\"    y.make(getClazz().newInstance().getClass());\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"  public static Class getClazz() {\\n\" +", "+\t\t\t\t\"    return String.class;\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb333cf72f299d651a590a72e7acb7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void test021()", "signatureAfterChange": " \tpublic void test021()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"Y.java\",", "-\t\t\t\t\"class X<T extends Object> {\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"public class Y<V extends String> extends X<V> {\\n\" +", "-\t\t\t\t\"  public static <W extends String> Y<W> make(Class<W> clazz) {\\n\" +", "-\t\t\t\t\"    System.out.print(true);\\n\" +", "-\t\t\t\t\"    return new Y<W>();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  public static <U extends Object> X<U> make(Class<U> clazz) {\\n\" +", "-\t\t\t\t\"    System.out.print(false);\\n\" +", "-\t\t\t\t\"    return new X<U>();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  public static void main(String[] args) throws Exception {\\n\" +", "-\t\t\t\t\"    Y.make(getClazz());\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  public static Class getClazz() {\\n\" +", "-\t\t\t\t\"    return String.class;\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t},", "+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in Y.java (at line 3)\\n\" + ", "+\t\t\"\tpublic class Y<V extends String> extends X<V> {\\n\" + ", "+\t\t\"\t                         ^^^^^^\\n\" + ", "+\t\t\"The type parameter V should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in Y.java (at line 4)\\n\" + ", "+\t\t\"\tpublic static <W extends String> Y<W> make(Class<W> clazz) {\\n\" + ", "+\t\t\"\t                         ^^^^^^\\n\" + ", "+\t\t\"The type parameter W should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in Y.java (at line 4)\\n\" + ", "+\t\t\"\tpublic static <W extends String> Y<W> make(Class<W> clazz) {\\n\" + ", "+\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in Y.java (at line 8)\\n\" + ", "+\t\t\"\tpublic static <U extends Object> X<U> make(Class<U> clazz) {\\n\" + ", "+\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in Y.java (at line 13)\\n\" + ", "+\t\t\"\tY.make(getClazz());\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation make(Class) of the generic method make(Class<W>) of type Y\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in Y.java (at line 13)\\n\" + ", "+\t\t\"\tY.make(getClazz());\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in Y.java (at line 15)\\n\" + ", "+\t\t\"\tpublic static Class getClazz() {\\n\" + ", "+\t\t\"\t              ^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\":", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\";", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"Y.java\",", "+\t\t\t\t\"class X<T extends Object> {\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"public class Y<V extends String> extends X<V> {\\n\" +", "+\t\t\t\t\"  public static <W extends String> Y<W> make(Class<W> clazz) {\\n\" +", "+\t\t\t\t\"    System.out.print(true);\\n\" +", "+\t\t\t\t\"    return new Y<W>();\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"  public static <U extends Object> X<U> make(Class<U> clazz) {\\n\" +", "+\t\t\t\t\"    System.out.print(false);\\n\" +", "+\t\t\t\t\"    return new X<U>();\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"  public static void main(String[] args) throws Exception {\\n\" +", "+\t\t\t\t\"    Y.make(getClazz());\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"  public static Class getClazz() {\\n\" +", "+\t\t\t\t\"    return String.class;\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\texpectedCompilerLog"]}], "num": 67093}
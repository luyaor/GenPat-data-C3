{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca07aef0b64a4572297e0efa73af1f41", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7ae383fdf99681bf81280629f79098", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ClassLiteralAccess.java", "commitBeforeChange": "4694cc0005ea017b2601e02ddce206da50b47138", "commitAfterChange": "6b1cf9545e376e005c20d9c5709294b65e338780", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t", "+\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=320463", "+\t\t   https://bugs.eclipse.org/bugs/show_bug.cgi?id=312076", "+\t\t   JLS3 15.8.2 forbids the type named in the class literal expression from being a parameterized type.", "+\t\t   And the grammar in 18.1 disallows (where X and Y are some concrete types) constructs of the form", "+\t\t   Outer<X>.class, Outer<X>.Inner.class, Outer.Inner<X>.class, Outer<X>.Inner<Y>.class etc.", "+\t\t   Corollary wise, we should resolve the type of the class literal expression to be a raw type as", "+\t\t   class literals exist only for the raw underlying type. ", "+\t\t */", "+\t\tthis.targetType = scope.environment().convertToRawType(this.targetType, true /* force conversion of enclosing types*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eb5834e0822a6adeacfc49c6827027c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "10862673cc468a686e19591a5da27fefa3c4f311", "commitAfterChange": "d95cddc2779658eead76d04d49201937dc19989e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public SearchEngine()", "signatureAfterChange": " public SearchEngine()", "diff": ["+\tthis.workingCopies = JavaModelManager.getJavaModelManager().getWorkingCopies(DefaultWorkingCopyOwner.PRIMARY, false/*don't add primary WCs a second time*/);"]}], "num": 1868}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89abee748937e3d6f2b027326af304ce", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "320cd4154ac38ecf50b2094ba5d54b9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "538c0b31c8df84049489b5a401103859bb5eec8f", "commitAfterChange": "16b28f2f33ec894bf25a38e03f521a91d92e684d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t/* convert type parameters */", "-\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "+\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "-\t\tif (typeParameterNames != null) {", "-\t\t\tint parameterCount = typeParameterNames.length;", "-\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "-\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "-\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "-\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\tif (this.has1_5Compliance) {", "+\t\t\t/* convert type parameters */", "+\t\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "+\t\t\tif (typeParameterNames != null) {", "+\t\t\t\tint parameterCount = typeParameterNames.length;", "+\t\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "+\t\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "+\t\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "+\t\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t\t\t\t}", "-\t\t/* convert annotations */", "-\t\tmethod.annotations = convertAnnotations(methodHandle);", "+\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "+\t\tif (this.has1_5Compliance) {", "+\t\t\t/* convert annotations */", "+\t\t\tmethod.annotations = convertAnnotations(methodHandle);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32e2175c75478a8639ac4cf42a2b9c7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "e097b656649fad65adc5a0de7345699c53b02550", "commitAfterChange": "c1ed57c65f800091b6298f2d9d0ae2cf5ce4a4d3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\tlong position = ((long) start << 32) + end;", "-\t\tmethod.arguments = new Argument[argumentCount];", "-\t\tfor (int i = 0; i < argumentCount; i++) {", "-\t\t\tchar[] typeName = Signature.toCharArray(argumentTypeSignatures[i].toCharArray());", "-\t\t\tTypeReference typeReference = createTypeReference(typeName, start, end);", "-\t\t\tif (isVarargs && i == argumentCount-1) {", "-\t\t\t\ttypeReference.bits |= ASTNode.IsVarArgs;", "+\t\tif (argumentCount > 0) {", "+\t\t\tlong position = ((long) start << 32) + end;", "+\t\t\tmethod.arguments = new Argument[argumentCount];", "+\t\t\tfor (int i = 0; i < argumentCount; i++) {", "+\t\t\t\tchar[] typeName = Signature.toCharArray(argumentTypeSignatures[i].toCharArray());", "+\t\t\t\tTypeReference typeReference = createTypeReference(typeName, start, end);", "+\t\t\t\tif (isVarargs && i == argumentCount-1) {", "+\t\t\t\t\ttypeReference.bits |= ASTNode.IsVarArgs;", "+\t\t\t\t}", "+\t\t\t\tmethod.arguments[i] =", "+\t\t\t\t\tnew Argument(", "+\t\t\t\t\t\targumentNames[i],", "+\t\t\t\t\t\tposition,", "+\t\t\t\t\t\ttypeReference,", "+\t\t\t\t\t\tAccDefault);", "+\t\t\t\t// do not care whether was final or not", "-\t\t\tmethod.arguments[i] =", "-\t\t\t\tnew Argument(", "-\t\t\t\t\targumentNames[i],", "-\t\t\t\t\tposition,", "-\t\t\t\t\ttypeReference,", "-\t\t\t\t\tAccDefault);", "-\t\t\t// do not care whether was final or not", "-\t\tmethod.thrownExceptions = new TypeReference[exceptionCount];", "-\t\tfor (int i = 0; i < exceptionCount; i++) {", "-\t\t\tmethod.thrownExceptions[i] =", "-\t\t\t\tcreateTypeReference(exceptionTypeNames[i], start, end);", "+\t\tif (exceptionCount > 0) {", "+\t\t\tmethod.thrownExceptions = new TypeReference[exceptionCount];", "+\t\t\tfor (int i = 0; i < exceptionCount; i++) {", "+\t\t\t\tmethod.thrownExceptions[i] =", "+\t\t\t\t\tcreateTypeReference(exceptionTypeNames[i], start, end);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c70d3fa8cf189aac3bd498da6cbc3c71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/TypeConverter.java", "commitBeforeChange": "06d2a2b965ce8e361d3d7adbed247ec82bc33326", "commitAfterChange": "d051e39b37c2132ed5482eec136a6f8669919913", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate TypeReference decodeType(char[] typeName, int length, int start, int end)", "signatureAfterChange": "  \tprivate TypeReference decodeType(char[] typeName, int length, int start, int end)", "diff": ["-\t\t\t\t\tif (dim == 0) nameFragmentEnd = this.namePos-1;", "+\t\t\t\t\tif (dim == 0 && nameFragmentEnd < 0) nameFragmentEnd = this.namePos-1;", "-\t\t\t\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "-\t\t\t\t\tif (!this.has1_5Compliance)", "-\t\t\t\t\t\tbreak typeLoop;", "-\t\t\t\t\tif (fragments == null) fragments = new ArrayList(2);", "+\t\t\t\t\t/* We need to convert and preserve 1.5 specific constructs only if compliance is 1.5 or above,", "+\t\t\t\t\t   but in all cases, we must skip over them to see if there are any applicable type fragments", "+\t\t\t\t\t   after the type parameters: i.e we just aren't done having seen a '<' in 1.4 mode. Because of", "+\t\t\t\t\t   the way type signatures are encoded, TypeConverter.decodeType(String, int, int, int) is immune", "+\t\t\t\t\t   to this problem. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=325633", "+\t\t\t\t\t */", "+\t\t\t\t\tif (this.has1_5Compliance) {", "+\t\t\t\t\t\tif (fragments == null) fragments = new ArrayList(2);", "+\t\t\t\t\t}", "-\t\t\t\t\tchar[][] identifiers = CharOperation.splitOn('.', typeName, nameFragmentStart, this.namePos);", "-\t\t\t\t\tfragments.add(identifiers);", "+\t\t\t\t\tif (this.has1_5Compliance) {", "+\t\t\t\t\t\tchar[][] identifiers = CharOperation.splitOn('.', typeName, nameFragmentStart, this.namePos);", "+\t\t\t\t\t\tfragments.add(identifiers);", "+\t\t\t\t\t}", "-\t\t\t\t\tfragments.add(arguments);", "-\t\t\t\t\tidentCount = 0;", "-\t\t\t\t\tnameFragmentStart = -1;", "-\t\t\t\t\tnameFragmentEnd = -1;", "+\t\t\t\t\tif (this.has1_5Compliance) {", "+\t\t\t\t\t\tfragments.add(arguments);", "+\t\t\t\t\t\tidentCount = 0;", "+\t\t\t\t\t\tnameFragmentStart = -1;", "+\t\t\t\t\t\tnameFragmentEnd = -1;", "+\t\t\t\t\t}"]}], "num": 56229}
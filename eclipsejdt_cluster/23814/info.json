{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b54cd91a9d6b4f10732fd3e033ffb972", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78d111afc41e14740713ed4ccd6ecff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "b18b012adcc471e2280a6e20faa4d2a33f1db69a", "commitAfterChange": "5bb01926d23a6cf003d0d521691c391ac08b77a7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tbuffer", "-\t\t\t.append(Util.bind(\"disassembler.commentstart\")) //$NON-NLS-1$", "-\t\t\t.append(Util.bind(\"classfileformat.maxStack\")) //$NON-NLS-1$", "-\t\t\t.append(codeAttribute.getMaxStack())", "-\t\t\t.append(Util.bind(\"disassembler.comma\")) //$NON-NLS-1$", "-\t\t\t.append(Util.bind(\"classfileformat.maxLocals\")) //$NON-NLS-1$", "-\t\t\t.append(codeAttribute.getMaxLocals())", "-\t\t\t.append(Util.bind(\"disassembler.commentend\")); //$NON-NLS-1$", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\tbuffer.append(Util.bind(\"disassembler.codeattributeheader\")); //$NON-NLS-1$", "-\t\tDefaultBytecodeVisitor visitor = new DefaultBytecodeVisitor(codeAttribute.getCodeLength(), buffer, lineSeparator, tabNumber + 1);", "+\t\tDefaultBytecodeVisitor visitor = new DefaultBytecodeVisitor(codeAttribute.getCodeLength(), buffer, lineSeparator, tabNumber);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\tfinal int tabNumberForExceptionAttribute = tabNumber + 2;", "+\t\t\tdumpTab(tabNumberForExceptionAttribute, buffer);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\tfor (int i = 0; i < exceptionTableLength; i++) {", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForExceptionAttribute + 1);", "+\t\t\tfor (int i = 0; i < exceptionTableLength - 1; i++) {", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForExceptionAttribute + 1);", "+\t\t\tIExceptionTableEntry exceptionTableEntry = exceptionTableEntries[exceptionTableLength - 1];", "+\t\t\tbuffer", "+\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablefrom\")) //$NON-NLS-1$", "+\t\t\t\t.append(exceptionTableEntry.getStartPC())", "+\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontableto\")) //$NON-NLS-1$", "+\t\t\t\t.append(exceptionTableEntry.getEndPC())", "+\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablegoto\")) //$NON-NLS-1$", "+\t\t\t\t.append(exceptionTableEntry.getHandlerPC())", "+\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablewhen\")); //$NON-NLS-1$", "+\t\t\tif (exceptionTableEntry.getCatchTypeIndex() == 0) {", "+\t\t\t\tbuffer.append(ANY_EXCEPTION);", "+\t\t\t} else {", "+\t\t\t\tchar[] catchType = exceptionTableEntry.getCatchType();", "+\t\t\t\tCharOperation.replace(catchType, '/', '.');", "+\t\t\t\tbuffer.append(catchType);", "+\t\t\t}", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\tint tabNumberForLineAttribute = tabNumber + 2;", "+\t\t\tdumpTab(tabNumberForLineAttribute, buffer);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLineAttribute + 1);", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLineAttribute + 1);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\tint tabNumberForLocalVariableAttribute = tabNumber + 2;", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "+\t\t\t\tint index= localVariableTableEntry.getIndex();", "-\t\t\t\tchar[] exceptionType = Signature.toCharArray(localVariableTableEntry.getDescriptor());", "-\t\t\t\tCharOperation.replace(exceptionType, '/', '.');", "-\t\t\t\t\t.append(localVariableTableEntry.getIndex())", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(exceptionType);", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "+\t\t\t\t\t.append(index)", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")); //$NON-NLS-1$", "+\t\t\t\tbuffer.append(localVariableTableEntry.getDescriptor());", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "+\t\t\tint index= localVariableTableEntry.getIndex();", "-\t\t\tchar[] exceptionType = Signature.toCharArray(localVariableTableEntry.getDescriptor());", "-\t\t\tCharOperation.replace(exceptionType, '/', '.');", "-\t\t\t\t.append(localVariableTableEntry.getIndex())", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")) //$NON-NLS-1$", "-\t\t\t\t.append(exceptionType);", "+\t\t\t\t.append(index)", "+\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(localVariableTableEntry.getDescriptor());", "+\t\tILocalVariableTypeTableAttribute localVariableTypeAttribute= getLocalVariableTypeAttribute(codeAttribute);", "+\t\tint localVariableTypeTableLength = localVariableTypeAttribute == null ? 0 : localVariableTypeAttribute.getLocalVariableTypeTableLength();", "+\t\tif (localVariableTypeTableLength != 0) {", "+\t\t\tint tabNumberForLocalVariableAttribute = tabNumber + 2;", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute);", "+\t\t\tbuffer.append(Util.bind(\"disassembler.localvariabletypetableattributeheader\")); //$NON-NLS-1$", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "+\t\t\tILocalVariableTypeTableEntry[] localVariableTypeTableEntries = localVariableTypeAttribute.getLocalVariableTypeTable();", "+\t\t\tfor (int i = 0; i < localVariableTypeTableLength - 1; i++) {", "+\t\t\t\tILocalVariableTypeTableEntry localVariableTypeTableEntry = localVariableTypeTableEntries[i];", "+\t\t\t\tint index= localVariableTypeTableEntry.getIndex();", "+\t\t\t\tint startPC = localVariableTypeTableEntry.getStartPC();", "+\t\t\t\tint length  = localVariableTypeTableEntry.getLength();", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablefrom\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(startPC)", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletableto\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(startPC + length)", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalname\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(localVariableTypeTableEntry.getName())", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalindex\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(index)", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")); //$NON-NLS-1$", "+\t\t\t\tbuffer.append(localVariableTypeTableEntry.getSignature());", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "+\t\t\t}", "+\t\t\tILocalVariableTypeTableEntry localVariableTypeTableEntry = localVariableTypeTableEntries[localVariableTypeTableLength - 1];", "+\t\t\tint index= localVariableTypeTableEntry.getIndex();", "+\t\t\tint startPC = localVariableTypeTableEntry.getStartPC();", "+\t\t\tint length  = localVariableTypeTableEntry.getLength();", "+\t\t\tbuffer", "+\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablefrom\")) //$NON-NLS-1$", "+\t\t\t\t.append(startPC)", "+\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletableto\")) //$NON-NLS-1$", "+\t\t\t\t.append(startPC + length)", "+\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalname\")) //$NON-NLS-1$", "+\t\t\t\t.append(localVariableTypeTableEntry.getName())", "+\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalindex\")) //$NON-NLS-1$", "+\t\t\t\t.append(index)", "+\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")) //$NON-NLS-1$", "+\t\t\t\t.append(localVariableTypeTableEntry.getSignature());", "+\t\t} ", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8115d358dc712651421cb2b826a65ee2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/AllPerformanceTests.java", "commitBeforeChange": "dea180787931d8ee1f626772e59d44fa10c93411", "commitAfterChange": "b6e6b13ef7ecfc2948e12f097478c9541e12b4c6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["-\t\t// Cannot run performance tests if one of subset static fields is not null", "+\t\t// Display warning if one of subset static fields is not null", "-\t\tif (TestCase.TESTS_NAMES != null ||", "-\t\t\tTestCase.TESTS_PREFIX != null ||", "-\t\t\tTestCase.TESTS_NUMBERS != null ||", "-\t\t\tTestCase.TESTS_RANGE != null) {", "-\t\t\tSystem.err.println(\"Cannot run performance tests as there are defined subsets which may alter tests order!\");", "-\t\t\treturn perfSuite;", "+\t\tStringBuffer buffer = null;", "+\t\tif (TestCase.TESTS_NAMES != null) {", "+\t\t\tbuffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\tbuffer.append(\"\t- following subset is still defined and may alter tests order:\\n\");", "+\t\t\tbuffer.append(\"\t\t+ TESTS_NAMES = new String[] { \");", "+\t\t\tint length = TestCase.TESTS_NAMES.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tif (i>0) buffer.append(',');", "+\t\t\t\tbuffer.append('\"');", "+\t\t\t\tbuffer.append(TestCase.TESTS_NAMES[i]);", "+\t\t\t\tbuffer.append('\"');", "+\t\t\t}", "+\t\t\tbuffer.append(\" };\\n\");", "+\t\t}", "+\t\tif (TestCase.TESTS_PREFIX != null) {", "+\t\t\tif (buffer == null) {", "+\t\t\t\tbuffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\t\tbuffer.append(\"\t- following subset is still defined and may alter tests order:\\n\");", "+\t\t\t}", "+\t\t\tbuffer.append(\"\t\t+ TESTS_PREFIX = \");", "+\t\t\tbuffer.append('\"');", "+\t\t\tbuffer.append(TestCase.TESTS_PREFIX);", "+\t\t\tbuffer.append('\"');", "+\t\t\tbuffer.append(\";\\n\");", "+\t\t}", "+\t\tif (TestCase.TESTS_NUMBERS != null) {", "+\t\t\tif (buffer == null) {", "+\t\t\t\tbuffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\t\tbuffer.append(\"\t- following subset is still defined and may alter tests order:\\n\");", "+\t\t\t}", "+\t\t\tbuffer.append(\"\t\t+ TESTS_NUMBERS = new int[] { \");", "+\t\t\tint length = TestCase.TESTS_NUMBERS.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tif (i>0) buffer.append(',');", "+\t\t\t\tbuffer.append(TestCase.TESTS_NUMBERS[i]);", "+\t\t\t}", "+\t\t\tbuffer.append(\" };\\n\");", "+\t\t}", "+\t\tif (TestCase.TESTS_RANGE != null) {", "+\t\t\tif (buffer == null) {", "+\t\t\t\tbuffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\t\tbuffer.append(\"\t- following subset is still defined and may alter tests order:\\n\");", "+\t\t\t}", "+\t\t\tbuffer.append(\"\t\t+ TESTS_RANGE = new int[] { \");", "+\t\t\tbuffer.append(TestCase.TESTS_RANGE[0]);", "+\t\t\tbuffer.append(',');", "+\t\t\tbuffer.append(TestCase.TESTS_RANGE[1]);", "+\t\t\tbuffer.append(\";\\n\");", "+\t\t}", "+\t\t", "+\t\t// Verify VM memory arguments: should be -Xmx256M -Xms256M", "+\t\tNumberFormat floatFormat = NumberFormat.getNumberInstance();", "+\t\tfloatFormat.setMaximumFractionDigits(1);", "+\t\tlong maxMem = Runtime.getRuntime().maxMemory(); // -Xmx", "+\t\tboolean tooMuch = false;", "+\t\tif (maxMem < (MAX_MEM*0.98) || (tooMuch = maxMem > (MAX_MEM*1.02))) {", "+\t\t\tif (buffer == null) buffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\tbuffer.append(\"\t- \");", "+\t\t\tbuffer.append(tooMuch ? \"too much \" : \"not enough \");", "+\t\t\tbuffer.append(\"max memory allocated (\");", "+\t\t\tbuffer.append(floatFormat.format(((maxMem/1024.0)/1024.0)));", "+\t\t\tbuffer.append(\"M)!\\n\");", "+\t\t\tbuffer.append(\"\t\t=> -Xmx\");", "+\t\t\tbuffer.append(floatFormat.format(((MAX_MEM/1024.0)/1024.0)));", "+\t\t\tbuffer.append(\"M should have been specified.\\n\");", "+\t\t}", "+\t\tlong totalMem = Runtime.getRuntime().totalMemory(); // -Xms", "+\t\ttooMuch = false;", "+\t\tif (totalMem < (TOTAL_MEM*0.98)|| (tooMuch = totalMem > (TOTAL_MEM*1.02))) {", "+\t\t\tif (buffer == null) buffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\tbuffer.append(\"\t- \");", "+\t\t\tbuffer.append(tooMuch ? \"too much \" : \"not enough \");", "+\t\t\tbuffer.append(\"total memory allocated (\");", "+\t\t\tbuffer.append(floatFormat.format(((totalMem/1024.0)/1024.0)));", "+\t\t\tbuffer.append(\"M)!\\n\");", "+\t\t\tbuffer.append(\"\t\t=> -Xms\");", "+\t\t\tbuffer.append(floatFormat.format(((MAX_MEM/1024.0)/1024.0)));", "+\t\t\tbuffer.append(\"M should have been specified.\\n\");", "+\t\t}", "+\t\t", "+\t\t// Display warning message if any", "+\t\tif (buffer != null) {", "+\t\t\tSystem.err.println(buffer.toString());"]}], "num": 23814}
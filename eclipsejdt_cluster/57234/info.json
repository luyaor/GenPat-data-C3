{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de32b66fda1e5d4055533739336b3a24", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08b047474c619c12f2a7a4fcfb806d04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java", "commitBeforeChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "commitAfterChange": "20df751bc05b6a45429369ec9c23fe1ce9a0b0db", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-", "+\t\tConstant cst = right.constant;", "+\t\tif (cst != NotAConstant) {", "+\t\t\t// <expr> || true --> true", "+\t\t\tif (cst.booleanValue() == true) {", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, false);", "+\t\t\t\tif (valueRequired) codeStream.iconst_1();", "+\t\t\t} else {", "+\t\t\t\t// <expr>|| false --> <expr>", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t}", "+\t\t\tif (mergedInitStateIndex != -1) {", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "+\t\t\t}\t\t\t", "+\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "+\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "-\t\tConstant cst = left.optimizedBooleanConstant();", "+\t\tcst = left.optimizedBooleanConstant();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd4354ce55cbe0958fa137bee3cee3b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java", "commitBeforeChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "commitAfterChange": "20df751bc05b6a45429369ec9c23fe1ce9a0b0db", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-", "+\t\tConstant cst = right.constant;", "+\t\tif (cst != NotAConstant) {", "+\t\t\t// <expr> && true --> <expr>", "+\t\t\tif (cst.booleanValue() == true) {", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t} else {", "+\t\t\t\t// <expr> && false --> false", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, false);", "+\t\t\t\tif (valueRequired) codeStream.iconst_1();", "+\t\t\t}", "+\t\t\tif (mergedInitStateIndex != -1) {", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "+\t\t\t}\t\t\t", "+\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "+\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "-\t\tConstant cst = left.optimizedBooleanConstant();", "+\t\tcst = left.optimizedBooleanConstant();"]}], "num": 57234}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d1b48d6626f34b5749a314580a8852f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e0a6da60eee9f4b93e0333a3725530", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "d96b4f2d2690a613d86ff8a25f7f4e62c3b517ac", "commitAfterChange": "341ead40b71a0bffec0f8325f6b29d2b567caf8a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["-\t\t\t\t\tif (this.left.kind() != Binding.WILDCARD_TYPE && !this.left.isCapture()) {", "+\t\t\t\t\tif (this.left.kind() != Binding.WILDCARD_TYPE) {", "-\t\t\t\t\t\tWildcardBinding s = this.left.isCapture() ? ((CaptureBinding) this.left).wildcard : (WildcardBinding) this.left;", "+\t\t\t\t\t\tWildcardBinding s = (WildcardBinding) this.left;", "-\t\t\t\t\tif (this.left.kind() != Binding.WILDCARD_TYPE && !this.left.isCapture()) {", "+\t\t\t\t\tif (this.left.kind() != Binding.WILDCARD_TYPE) {", "-\t\t\t\t\t\tWildcardBinding s = this.left.isCapture() ? ((CaptureBinding) this.left).wildcard : (WildcardBinding) this.left;", "+\t\t\t\t\t\tWildcardBinding s = (WildcardBinding) this.left;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c8ab828e6dac1cf8b39925aace4bb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "63739b2368f2809d49b2ea10b6b3b2f6af96a94d", "commitAfterChange": "a08ab6c5a1a888fb837cc617f27fffac78616bdc", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\t\t\t\t\tint startPosition = infixExpression.getLeftOperand().getStartPosition();", "-\t\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\t\t\tsetInfixSourcePositions(infixExpression, infixExpression.getLeftOperand().getStartPosition());", "-\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\tsetInfixSourcePositions(infixExpression, startPosition);", "-\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\tsetInfixSourcePositions(infixExpression, startPosition);", "-\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\tsetInfixSourcePositions(infixExpression, startPosition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d250ecca86f609d9344ff724ea177b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "77c3ce15baae65ce09e64063026465c9791f8dea", "commitAfterChange": "7cfea2e3306df8a7d05ea831a35f4eb02ab822e2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "signatureAfterChange": "\r \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "diff": ["-\t\tIClasspathEntry targetEntry;\r", "-\t\t\r", "-\t\t\t\t\t\ttargetEntry = JavaCore.newProjectEntry(resolvedPath);\r", "-\t\t\t\t\t\ttargetEntry.setExported(entry.isExported());\r", "-\t\t\t\t\t\treturn targetEntry;\r", "+\t\t\t\t\t\treturn JavaCore.newProjectEntry(resolvedPath, entry.isExported());\r", "-\t\t\t\t\t\t\ttargetEntry = JavaCore.newLibraryEntry(\r", "+\t\t\t\t\t\t\treturn JavaCore.newLibraryEntry(\r", "-\t\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "-\t\t\t\t\t\t\ttargetEntry.setExported(entry.isExported());\r", "-\t\t\t\t\t\t\treturn targetEntry;\r", "+\t\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),\r", "+\t\t\t\t\t\t\t\t\tentry.isExported());\r", "-\t\t\t\t\t\ttargetEntry = JavaCore.newLibraryEntry(\r", "+\t\t\t\t\t\treturn JavaCore.newLibraryEntry(\r", "-\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "-\t\t\t\t\t\ttargetEntry.setExported(entry.isExported());\r", "-\t\t\t\t\t\treturn targetEntry;\r", "+\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),\r", "+\t\t\t\t\t\t\t\tentry.isExported());\r", "-\t\t\t\t\ttargetEntry = JavaCore.newLibraryEntry(\r", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(\r", "-\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "-\t\t\t\t\ttargetEntry.setExported(entry.isExported());\r", "-\t\t\t\t\treturn targetEntry;\r", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),\r", "+\t\t\t\t\t\t\tentry.isExported());\r", "-\t\t\t\ttargetEntry = JavaCore.newLibraryEntry(\r", "+\t\t\t\treturn JavaCore.newLibraryEntry(\r", "-\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "-\t\t\t\ttargetEntry.setExported(entry.isExported());\r", "-\t\t\t\treturn targetEntry;\r", "+\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),\r", "+\t\t\t\t\t\tentry.isExported());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f33f01c8913bbb9f8f3aba5717ef5593", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 415, "methodNumberAfterChange": 423, "signatureBeforeChange": " public void unsafeRawGenericMethodInvocation(ASTNode location, MethodBinding rawMethod, TypeBinding[] argumentTypes)", "signatureAfterChange": " public void unsafeRawGenericMethodInvocation(ASTNode location, MethodBinding rawMethod, TypeBinding[] argumentTypes)", "diff": ["-\t\t\t\ttypesAsString(rawMethod.original().isVarargs(), rawMethod.original().parameters, false),", "+\t\t\t\ttypesAsString(rawMethod.original(), false),", "-\t\t\t\ttypesAsString(false, argumentTypes, false),", "+\t\t\t\ttypesAsString(argumentTypes, false),", "-\t\t\t\ttypesAsString(rawMethod.original().isVarargs(), rawMethod.original().parameters, true),", "+\t\t\t\ttypesAsString(rawMethod.original(), true),", "-\t\t\t\ttypesAsString(false, argumentTypes, true),", "+\t\t\t\ttypesAsString(argumentTypes, true),", "-\t\t\t\ttypesAsString(rawMethod.original().isVarargs(), rawMethod.original().parameters, false),", "+\t\t\t\ttypesAsString(rawMethod.original(), false),", "-\t\t\t\ttypesAsString(false, argumentTypes, false),", "+\t\t\t\ttypesAsString(argumentTypes, false),", "-\t\t\t\ttypesAsString(rawMethod.original().isVarargs(), rawMethod.original().parameters, true),", "+\t\t\t\ttypesAsString(rawMethod.original(), true),", "-\t\t\t\ttypesAsString(false, argumentTypes, true),", "+\t\t\t\ttypesAsString(argumentTypes, true),"]}], "num": 44093}
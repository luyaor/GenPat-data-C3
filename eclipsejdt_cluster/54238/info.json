{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7f16e3284ac4b549ffd8f4992751110", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caecf383654364b233a0b0dbc904967a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "45b2548f21c6553964603037785b1fef0bb3e0d3", "commitAfterChange": "3f4a2c82508dce46555bf8187ab30ef1054115be", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tpublic void parse(boolean pauseAfterFullyQualifiedName)", "signatureAfterChange": "  \tpublic void parse(boolean pauseAfterFullyQualifiedName)", "diff": ["-\t\ttry {", "-\t\t\tif (!this.parsingPaused) {", "-\t\t\t\t// fully qualified name", "-\t\t\t\tparseFullyQualifiedName();", "-\t\t\t\tparseSecondaryType();", "-\t\t\t\tif (pauseAfterFullyQualifiedName) {", "-\t\t\t\t\tthis.parsingPaused = true;", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (!hasTypeName()) {", "-\t\t\t\tconsumeKey();", "+\t\tif (!this.parsingPaused) {", "+\t\t\t// fully qualified name", "+\t\t\tparseFullyQualifiedName();", "+\t\t\tparseSecondaryType();", "+\t\t\tif (pauseAfterFullyQualifiedName) {", "+\t\t\t\tthis.parsingPaused = true;", "-\t\t\tconsumeTopLevelType();", "-\t\t\tparseInnerType();", "-\t\t\t", "-\t\t\tif (this.scanner.isAtParametersStart()) {", "-\t\t\t\tthis.scanner.skipParametersStart();", "-\t\t\t\tif (this.scanner.isAtTypeParameterStart())\t{\t\t", "-\t\t\t\t\t// generic type", "-\t\t\t\t\tparseGenericType();", "-\t\t\t\t \t// skip \";>\"", "-\t\t\t\t \tthis.scanner.skipParametersEnd();", "-\t\t\t\t\t// local type in generic type", "-\t\t\t\t\tparseInnerType();", "-\t\t\t\t} else if (this.scanner.isAtTypeArgumentStart())", "-\t\t\t\t\t// parameterized type", "-\t\t\t\t\tparseParameterizedType(null/*top level type or member type with raw enclosing type*/, false/*no raw*/);", "-\t\t\t\telse if (this.scanner.isAtRawTypeEnd())", "-\t\t\t\t\t// raw type", "-\t\t\t\t\tparseRawType();", "-\t\t\t} else {", "-\t\t\t\t// non-generic type", "-\t\t\t\tconsumeNonGenericType();", "-\t\t\t}", "-\t\t\t", "-\t\t\tconsumeType();", "-\t\t\tthis.scanner.skipTypeEnd();", "-\t\t\t", "-\t\t\tif (this.scanner.isAtFieldOrMethodStart()) {", "-\t\t\t\tswitch (this.scanner.nextToken()) {", "-\t\t\t\t\tcase Scanner.FIELD:", "-\t\t\t\t\t\tparseField();", "-\t\t\t\t\t\tif (this.scanner.isAtAnnotationStart()) {", "-\t\t\t\t\t\t\tparseAnnotation();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\tcase Scanner.METHOD:", "-\t\t\t\t\t\tparseMethod();", "-\t\t\t\t\t\tif (this.scanner.isAtLocalVariableStart()) {", "-\t\t\t\t\t\t\tparseLocalVariable();", "-\t\t\t\t\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "-\t\t\t\t\t\t\tparseTypeVariable();", "-\t\t\t\t\t\t} else if (this.scanner.isAtAnnotationStart()) {", "-\t\t\t\t\t\t\tparseAnnotation();", "-\t\t\t\t\t\t}", "-\t\t\t\t \t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tmalformedKey();", "-\t\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "-\t\t\t\tparseTypeVariable();", "-\t\t\t} else if (this.scanner.isAtWildcardStart()) {", "-\t\t\t\tparseWildcard();", "-\t\t\t} else if (this.scanner.isAtTypeWithCaptureStart()) {", "-\t\t\t\tparseTypeWithCapture();", "-\t\t\t} else if (this.scanner.isAtAnnotationStart()) {", "-\t\t\t\tparseAnnotation();", "-\t\t\t}", "-\t\t\t", "-\t\t\tconsumeKey();", "-\t\t} catch (IllegalArgumentException e) {", "-\t\t\t// the given key was illegal", "+\t\tif (!hasTypeName()) {", "+\t\t\tconsumeKey();", "+\t\t\treturn;", "+\t\t}", "+\t\tconsumeTopLevelType();", "+\t\tparseInnerType();", "+\t\t", "+\t\tif (this.scanner.isAtParametersStart()) {", "+\t\t\tthis.scanner.skipParametersStart();", "+\t\t\tif (this.scanner.isAtTypeParameterStart())\t{\t\t", "+\t\t\t\t// generic type", "+\t\t\t\tparseGenericType();", "+\t\t\t \t// skip \";>\"", "+\t\t\t \tthis.scanner.skipParametersEnd();", "+\t\t\t\t// local type in generic type", "+\t\t\t\tparseInnerType();", "+\t\t\t} else if (this.scanner.isAtTypeArgumentStart())", "+\t\t\t\t// parameterized type", "+\t\t\t\tparseParameterizedType(null/*top level type or member type with raw enclosing type*/, false/*no raw*/);", "+\t\t\telse if (this.scanner.isAtRawTypeEnd())", "+\t\t\t\t// raw type", "+\t\t\t\tparseRawType();", "+\t\t} else {", "+\t\t\t// non-generic type", "+\t\t\tconsumeNonGenericType();", "+\t\t}", "+\t\t", "+\t\tconsumeType();", "+\t\tthis.scanner.skipTypeEnd();", "+\t\t", "+\t\tif (this.scanner.isAtFieldOrMethodStart()) {", "+\t\t\tswitch (this.scanner.nextToken()) {", "+\t\t\t\tcase Scanner.FIELD:", "+\t\t\t\t\tparseField();", "+\t\t\t\t\tif (this.scanner.isAtAnnotationStart()) {", "+\t\t\t\t\t\tparseAnnotation();", "+\t\t\t\t\t}", "+\t\t\t\t\treturn;", "+\t\t\t\tcase Scanner.METHOD:", "+\t\t\t\t\tparseMethod();", "+\t\t\t\t\tif (this.scanner.isAtLocalVariableStart()) {", "+\t\t\t\t\t\tparseLocalVariable();", "+\t\t\t\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "+\t\t\t\t\t\tparseTypeVariable();", "+\t\t\t\t\t} else if (this.scanner.isAtAnnotationStart()) {", "+\t\t\t\t\t\tparseAnnotation();", "+\t\t\t\t\t}", "+\t\t\t \t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tmalformedKey();", "+\t\t\t\t\treturn;", "+\t\t\t}", "+\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "+\t\t\tparseTypeVariable();", "+\t\t} else if (this.scanner.isAtWildcardStart()) {", "+\t\t\tparseWildcard();", "+\t\t} else if (this.scanner.isAtTypeWithCaptureStart()) {", "+\t\t\tparseTypeWithCapture();", "+\t\t} else if (this.scanner.isAtAnnotationStart()) {", "+\t\t\tparseAnnotation();", "+\t\t}", "+\t\t", "+\t\tconsumeKey();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dab172a5eba835c540c43728ffeb511d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/SubTypeSearchJob.java", "commitBeforeChange": "8abd75076e932cee4c42294e09e5c3451d79df9f", "commitAfterChange": "e864d30567ba5eac714ba35046546cbeb9eaf23a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void finished()", "signatureAfterChange": " public void finished()", "diff": ["-\ttry {", "-\t\tObject[] values = this.indexes.values;", "-\t\tfor (int i = 0, l = values.length; i < l; i++)", "-\t\t\tif (values[i] != null)", "-\t\t\t\t((Index) values[i]).stopQuery();", "-\t} catch(IOException e) {", "-\t\t// ignore", "-\t} ", "+\tObject[] values = this.indexes.values;", "+\tfor (int i = 0, l = values.length; i < l; i++)", "+\t\tif (values[i] != null)", "+\t\t\t((Index) values[i]).stopQuery();"]}], "num": 54238}
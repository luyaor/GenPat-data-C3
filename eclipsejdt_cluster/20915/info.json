{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02fb3b747c62e2f1d08c04542c16bd8b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31aa424c57929e2eec6d69be056a6cf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "8d0a5299117e5fc84e729116ac52feef1385b968", "commitAfterChange": "527793c3501c0044ba7f65ec00ff957c7a149690", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "signatureAfterChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "diff": ["-\t\t\tNodeList list = cpElement.getChildNodes();", "+\t\t\tNodeList list = cpElement.getElementsByTagName(\"classpathentry\"); //$NON-NLS-1$", "-\t\t\t\tshort type = node.getNodeType();", "-\t\t\t\tif (type == Node.ELEMENT_NODE) {", "+\t\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "-\t\t\t\t\tif (cpeElement.getNodeName().equalsIgnoreCase(\"classpathentry\")) { //$NON-NLS-1$", "-\t\t\t\t\t\tString cpeElementKind = cpeElement.getAttribute(\"kind\"); //$NON-NLS-1$", "-\t\t\t\t\t\tString pathStr = cpeElement.getAttribute(\"path\"); //$NON-NLS-1$", "-\t\t\t\t\t\t// ensure path is absolute", "-\t\t\t\t\t\tIPath path = new Path(pathStr);", "-\t\t\t\t\t\tint kind = kindFromString(cpeElementKind);", "-\t\t\t\t\t\tif (kind != IClasspathEntry.CPE_VARIABLE && kind != IClasspathEntry.CPE_CONTAINER && !path.isAbsolute()) {", "-\t\t\t\t\t\t\tpath = projectPath.append(path);", "+\t\t\t\t\tString cpeElementKind = cpeElement.getAttribute(\"kind\"); //$NON-NLS-1$", "+\t\t\t\t\tString pathStr = cpeElement.getAttribute(\"path\"); //$NON-NLS-1$", "+\t\t\t\t\t// ensure path is absolute", "+\t\t\t\t\tIPath path = new Path(pathStr);", "+\t\t\t\t\tint kind = kindFromString(cpeElementKind);", "+\t\t\t\t\tif (kind != IClasspathEntry.CPE_VARIABLE && kind != IClasspathEntry.CPE_CONTAINER && !path.isAbsolute()) {", "+\t\t\t\t\t\tpath = projectPath.append(path);", "+\t\t\t\t\t}", "+\t\t\t\t\t// source attachment info (optional)", "+\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\t//$NON-NLS-1$", "+\t\t\t\t\tIPath sourceAttachmentPath =", "+\t\t\t\t\t\tsourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$", "+\t\t\t\t\tString sourceAttachmentRootPathStr = cpeElement.getAttribute(\"rootpath\"); //$NON-NLS-1$", "+\t\t\t\t\tIPath sourceAttachmentRootPath =", "+\t\t\t\t\t\tsourceAttachmentRootPathStr.equals(\"\") //$NON-NLS-1$", "+\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t: new Path(sourceAttachmentRootPathStr);", "+\t\t\t\t\t", "+\t\t\t\t\t// exported flag (optional)", "+\t\t\t\t\tboolean isExported = cpeElement.getAttribute(\"exported\").equals(\"true\"); //$NON-NLS-1$ //$NON-NLS-2$", "+", "+\t\t\t\t\t// exclusion patterns (optional)", "+\t\t\t\t\tString exclusion = cpeElement.getAttribute(\"excluding\"); //$NON-NLS-1$ ", "+\t\t\t\t\tString[] exclusionPatterns = null;", "+\t\t\t\t\tif (!exclusion.equals(\"\")) {", "+\t\t\t\t\t\tchar[][] patterns = CharOperation.splitOn('|', exclusion.toCharArray());", "+\t\t\t\t\t\tint patternCount;", "+\t\t\t\t\t\tif ((patternCount  = patterns.length) > 0) {", "+\t\t\t\t\t\t\texclusionPatterns = new String[patternCount];", "+\t\t\t\t\t\t\tfor (int j = 0; j < patterns.length; j++){", "+\t\t\t\t\t\t\t\texclusionPatterns[i] = new String(patterns[j]);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t// source attachment info (optional)", "-\t\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\t//$NON-NLS-1$", "-\t\t\t\t\t\tIPath sourceAttachmentPath =", "-\t\t\t\t\t\t\tsourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$", "-\t\t\t\t\t\tString sourceAttachmentRootPathStr = cpeElement.getAttribute(\"rootpath\"); //$NON-NLS-1$", "-\t\t\t\t\t\tIPath sourceAttachmentRootPath =", "-\t\t\t\t\t\t\tsourceAttachmentRootPathStr.equals(\"\") //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t\t: new Path(sourceAttachmentRootPathStr);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// exported flag", "-\t\t\t\t\t\tboolean isExported = cpeElement.getAttribute(\"exported\").equals(\"true\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t", "-\t\t\t\t\t\t// recreate the CP entry", "-\t\t\t\t\t\tswitch (kind) {", "-\t\t\t\t", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :", "-\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// recreate the CP entry", "+\t\t\t\t\tswitch (kind) {", "+\t\t\t", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :", "+\t\t\t\t\t\t\tpaths.add(JavaCore.newProjectEntry(path, isExported));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "+\t\t\t\t\t\t\tpaths.add(JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :", "+\t\t\t\t\t\t\t// must be an entry in this project or specify another project", "+\t\t\t\t\t\t\tString projSegment = path.segment(0);", "+\t\t\t\t\t\t\tif (projSegment != null && projSegment.equals(getElementName())) {", "+\t\t\t\t\t\t\t\t// this project", "+\t\t\t\t\t\t\t\tpaths.add(JavaCore.newSourceEntry(path, exclusionPatterns));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// another project", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "-\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "-\t\t\t\t\t\t\t\tpaths.add(JavaCore.newLibraryEntry(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :", "-\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "-\t\t\t\t\t\t\t\t// must be an entry in this project or specify another project", "-\t\t\t\t\t\t\t\tString projSegment = path.segment(0);", "-\t\t\t\t\t\t\t\tif (projSegment != null && projSegment.equals(getElementName())) {", "-\t\t\t\t\t\t\t\t\t// this project", "-\t\t\t\t\t\t\t\t\tpaths.add(JavaCore.newSourceEntry(path));", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t// another project", "-\t\t\t\t\t\t\t\t\tpaths.add(JavaCore.newProjectEntry(path, isExported));", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "-\t\t\t\t\t\t\t\tpaths.add(JavaCore.newVariableEntry(", "-\t\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "-\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath, ", "-\t\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "-\t\t\t\t\t\t\t\tpaths.add(JavaCore.newContainerEntry(", "-\t\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\t\tbreak;", "-\t", "-\t\t\t\t\t\t\tcase ClasspathEntry.K_OUTPUT :", "-\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "-\t\t\t\t\t\t\t\tpaths.add(new ClasspathEntry(", "-\t\t\t\t\t\t\t\t\t\tClasspathEntry.K_OUTPUT,", "-\t\t\t\t\t\t\t\t\t\tIClasspathEntry.CPE_LIBRARY,", "-\t\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\t\tnull, // exclusion patterns", "-\t\t\t\t\t\t\t\t\t\tnull, // source attachment", "-\t\t\t\t\t\t\t\t\t\tnull, // source attachment root", "-\t\t\t\t\t\t\t\t\t\tfalse));", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tthrow new Assert.AssertionFailedException(Util.bind(\"classpath.unknownKind\", cpeElementKind)); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "+\t\t\t\t\t\t\tpaths.add(JavaCore.newVariableEntry(", "+\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "+\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath, ", "+\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "+\t\t\t\t\t\t\tpaths.add(JavaCore.newContainerEntry(", "+\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\tbreak;", "+", "+\t\t\t\t\t\tcase ClasspathEntry.K_OUTPUT :", "+\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t\t\tpaths.add(new ClasspathEntry(", "+\t\t\t\t\t\t\t\t\tClasspathEntry.K_OUTPUT,", "+\t\t\t\t\t\t\t\t\tIClasspathEntry.CPE_LIBRARY,", "+\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\tnull, // exclusion patterns", "+\t\t\t\t\t\t\t\t\tnull, // source attachment", "+\t\t\t\t\t\t\t\t\tnull, // source attachment root", "+\t\t\t\t\t\t\t\t\tfalse));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tthrow new Assert.AssertionFailedException(Util.bind(\"classpath.unknownKind\", cpeElementKind)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d367b8e2b78e89d63450c13a24338e8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c7494793aa1ed6a2f75240b5a076591b5a3e9bf6", "commitAfterChange": "54e21838d5d72a577ad5b83bd2ddcc9c60b93259", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic String loadClasspath() throws JavaModelException", "signatureAfterChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "diff": ["-\t */", "-\tpublic String loadClasspath() throws JavaModelException {", "-\t\ttry {", "-\t\t\treturn getSharedProperty(CLASSPATH_FILENAME);", "-\t\t} catch (CoreException e) {", "-\t\t\tthrow new JavaModelException(e);", "-\t\t}", "-\t}", "+\tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems) {", "+\t\ttry {", "+\t\t\tString xmlClasspath = getSharedProperty(CLASSPATH_FILENAME);", "+\t\t\tif (xmlClasspath == null) return null;", "+\t\t\tStringReader reader = new StringReader(xmlClasspath);", "+\t\t\tElement cpElement;", "+\t", "+\t\t\ttry {", "+\t\t\t\tDocumentBuilder parser =", "+\t\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "+\t\t\t\tcpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "+\t\t\t} catch (SAXException e) {", "+\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "+\t\t\t} catch (ParserConfigurationException e) {", "+\t\t\t\treader.close();", "+\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "+\t\t\t} finally {", "+\t\t\t\treader.close();", "+\t\t\t}", "+\t", "+\t\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"classpath\")) { //$NON-NLS-1$", "+\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tIPath projectPath = getProject().getFullPath();", "+\t\t\tNodeList list = cpElement.getChildNodes();", "+\t\t\tint length = list.getLength();", "+\t", "+\t\t\tfor (int i = 0; i < length; ++i) {", "+\t\t\t\tNode node = list.item(i);", "+\t\t\t\tshort type = node.getNodeType();", "+\t\t\t\tif (type == Node.ELEMENT_NODE) {", "+\t\t\t\t\tElement cpeElement = (Element) node;", "+\t", "+\t\t\t\t\tif (cpeElement.getNodeName().equalsIgnoreCase(\"classpathentry\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tString cpeElementKind = cpeElement.getAttribute(\"kind\"); //$NON-NLS-1$", "+\t\t\t\t\t\tString pathStr = cpeElement.getAttribute(\"path\"); //$NON-NLS-1$", "+\t\t\t\t\t\t// ensure path is absolute", "+\t\t\t\t\t\tIPath path = new Path(pathStr);", "+\t\t\t\t\t\tint kind = kindFromString(cpeElementKind);", "+\t\t\t\t\t\tif (kind != IClasspathEntry.CPE_VARIABLE && kind != IClasspathEntry.CPE_CONTAINER && !path.isAbsolute()) {", "+\t\t\t\t\t\t\tpath = projectPath.append(path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// source attachment info (optional)", "+\t\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\t//$NON-NLS-1$", "+\t\t\t\t\t\tIPath sourceAttachmentPath =", "+\t\t\t\t\t\t\tsourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$", "+\t\t\t\t\t\tString sourceAttachmentRootPathStr = cpeElement.getAttribute(\"rootpath\"); //$NON-NLS-1$", "+\t\t\t\t\t\tIPath sourceAttachmentRootPath =", "+\t\t\t\t\t\t\tsourceAttachmentRootPathStr.equals(\"\") //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t: new Path(sourceAttachmentRootPathStr);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// exported flag", "+\t\t\t\t\t\tboolean isExported = cpeElement.getAttribute(\"exported\").equals(\"true\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t", "+\t\t\t\t\t\t// recreate the CP entry", "+\t\t\t\t\t\tswitch (kind) {", "+\t\t\t\t", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :", "+\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "+\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t\t\t\tpaths.add(JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :", "+\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t\t\t\t// must be an entry in this project or specify another project", "+\t\t\t\t\t\t\t\tString projSegment = path.segment(0);", "+\t\t\t\t\t\t\t\tif (projSegment != null && projSegment.equals(getElementName())) {", "+\t\t\t\t\t\t\t\t\t// this project", "+\t\t\t\t\t\t\t\t\tpaths.add(JavaCore.newSourceEntry(path));", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// another project", "+\t\t\t\t\t\t\t\t\tpaths.add(JavaCore.newProjectEntry(path, isExported));", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "+\t\t\t\t\t\t\t\tpaths.add(JavaCore.newVariableEntry(", "+\t\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "+\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath, ", "+\t\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "+\t\t\t\t\t\t\t\tpaths.add(JavaCore.newContainerEntry(", "+\t\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\t\tbreak;", "+\t", "+\t\t\t\t\t\t\tcase ClasspathEntry.K_OUTPUT :", "+\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t\t\t\tpaths.add(new ClasspathEntry(", "+\t\t\t\t\t\t\t\t\t\tClasspathEntry.K_OUTPUT,", "+\t\t\t\t\t\t\t\t\t\tIClasspathEntry.CPE_LIBRARY,", "+\t\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t\t\tfalse));", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tthrow new Assert.AssertionFailedException(Util.bind(\"classpath.unknownKind\", cpeElementKind)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t} catch(CoreException e) {", "+\t\t\t// file does not exist (or not accessible)", "+\t\t\tif (createMarker && this.getProject().isAccessible()) {", "+\t\t\t\tthis.createClasspathProblemMarker(", "+\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", this.getElementName()), //$NON-NLS-1$", "+\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t}", "+\t\t\tif (logProblems) {", "+\t\t\t\tUtil.log(e, ", "+\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "+\t\t\t\t\t+\"/.classpath, will revert to default classpath\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t} catch (IOException e) {", "+\t\t\t// bad format", "+\t\t\tif (createMarker && this.getProject().isAccessible()) {", "+\t\t\t\tthis.createClasspathProblemMarker(", "+\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", this.getElementName()), //$NON-NLS-1$", "+\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t}", "+\t\t\tif (logProblems) {", "+\t\t\t\tUtil.log(e, ", "+\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "+\t\t\t\t\t+\"/.classpath, will revert to default classpath\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\treturn INVALID_CLASSPATH;", "+\t\t} catch (Assert.AssertionFailedException e) { ", "+\t\t\t// failed creating CP entries from file", "+\t\t\tif (createMarker && this.getProject().isAccessible()) {", "+\t\t\t\tthis.createClasspathProblemMarker(", "+\t\t\t\t\tUtil.bind(\"classpath.illegalEntryInClasspathFile\", this.getElementName(), e.getMessage()), //$NON-NLS-1$", "+\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t}", "+\t\t\tif (logProblems) {", "+\t\t\t\tUtil.log(e, ", "+\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "+\t\t\t\t\t+\"/.classpath, will mark classpath as invalid\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\treturn INVALID_CLASSPATH;"]}], "num": 20915}
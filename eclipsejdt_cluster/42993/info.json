{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b643cdee5bc8e87844f774c079455dfa", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2a6665ae9c34a3ccb400d88708ce8c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "de0226254a405a86138be24d23fd7ea72c01b855", "commitAfterChange": "2d0b70991183be97a67695fa28c23b0cb3fbbdbf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tMethodScope methodScope = currentScope.methodScope();", "+\tAbstractMethodDeclaration referenceMethod = methodScope.referenceMethod();", "-\t\t\tif (currentScope.methodScope() != trackingVariable.methodScope)", "+\t\t\tif (methodScope != trackingVariable.methodScope)", "-\t\tcurrentScope.methodScope().recordInitializationStates(flowInfo);", "+\t\tmethodScope.recordInitializationStates(flowInfo);", "-\t\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(flowInfo);", "+\t\t\t\t\t\tmethodScope.recordInitializationStates(flowInfo);", "+\t\tif (traversedContext.associatedNode == referenceMethod)", "+\t\t\tbreak; // don't traverse beyond the enclosing method (see https://bugs.eclipse.org/360328)."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5cc56dfb7cd881c06bbe102365c730f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ClassLiteralAccess.java", "commitBeforeChange": "3e0c5ac9aa92d53701e5df6b2f9163aef4500b8d", "commitAfterChange": "5499d7ab628f0d031c84d349d565b52915f502cb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.targetType = scope.environment().convertToRawType(this.targetType, true /* force conversion of enclosing types*/);", "+\t\tLookupEnvironment environment = scope.environment();", "+\t\tthis.targetType = environment.convertToRawType(this.targetType, true /* force conversion of enclosing types*/);", "-\t\t\t\tboxedType = scope.environment().getResolvedType(JAVA_LANG_VOID, scope);", "+\t\t\t\tboxedType = environment.getResolvedType(JAVA_LANG_VOID, scope);", "-\t\t\tthis.resolvedType = scope.environment().createParameterizedType(classType, new TypeBinding[]{ boxedType }, null/*not a member*/);", "+\t\t\tif (environment.usesNullTypeAnnotations())", "+\t\t\t\tboxedType = environment.createAnnotatedType(boxedType, new AnnotationBinding[] { environment.getNonNullAnnotation() });", "+\t\t\tthis.resolvedType = environment.createParameterizedType(classType, new TypeBinding[]{ boxedType }, null/*not a member*/);"]}], "num": 42993}
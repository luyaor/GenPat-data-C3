{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99c72764580bf7cd54755c92aca026d3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1282a419609d5e1b7fd8f23cdcdf296e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "90515f177fc66ff94534d5266cc647dd7b47561f", "commitAfterChange": "d48c25cb976d99917f58b366198a77010dd2d678", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void append(char[] text)", "signatureAfterChange": " public void append(char[] text)", "diff": ["-\t\tmoveAndResizeGap(length, text.length);", "-\t\tSystem.arraycopy(text, 0, this.contents, length, text.length);", "-\t\tthis.gapStart += text.length;", "-\t\tthis.flags |= F_HAS_UNSAVED_CHANGES;", "+\t\tsynchronized(this.lock) {", "+\t\t    if (this.contents == null) return;", "+\t\t\tmoveAndResizeGap(length, text.length);", "+\t\t\tSystem.arraycopy(text, 0, this.contents, length, text.length);", "+\t\t\tthis.gapStart += text.length;", "+\t\t\tthis.flags |= F_HAS_UNSAVED_CHANGES;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a95fc7901668527498edce7a683d75f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SwitchCase.java", "commitBeforeChange": "b035b1323921b903fa7e63039a8059077cbebf20", "commitAfterChange": "f4baff4257d9b6f1bb97486c41210e6bbf680256", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic Expression getExpression()", "signatureAfterChange": "  \tpublic Expression getExpression()", "diff": ["-\t\t\tpreLazyInit();", "-\t\t\tthis.optionalExpression = new SimpleName(this.ast);", "-\t\t\tthis.expressionInitialized = true;", "-\t\t\tpostLazyInit(this.optionalExpression, EXPRESSION_PROPERTY);", "+\t\t\t// lazy init must be thread-safe for readers", "+\t\t\tsynchronized (this.ast) {", "+\t\t\t\tif (!this.expressionInitialized) {", "+\t\t\t\t\tpreLazyInit();", "+\t\t\t\t\tthis.optionalExpression = new SimpleName(this.ast);", "+\t\t\t\t\tthis.expressionInitialized = true;", "+\t\t\t\t\tpostLazyInit(this.optionalExpression, EXPRESSION_PROPERTY);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 55754}
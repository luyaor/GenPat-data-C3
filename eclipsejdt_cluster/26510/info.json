{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "392e29db35319df240a345d8fad8a192", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cd58b91534f0a663dbd4559c1317d3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "65444f6bbda189372ebbf90cb8f83272733c23ae", "commitAfterChange": "82197baae0367830baca5c640478373ab5a7a62f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r protected void compile(String[] filenames, String[] initialTypeNames)", "signatureAfterChange": "\r protected void compile(String[] filenames, String[] initialTypeNames)", "diff": ["-\tnameEnvironment.initialTypeNames(initialTypeNames);\r", "-\r", "-\tint i = 0;\r", "-\tboolean inFirstPass = true;\r", "-\twhile (i < toDo) {\r", "-\t\tArrayList doNow = new ArrayList(Math.min(toDo, MAX_AT_ONCE));\r", "-\t\twhile (i < toDo && doNow.size() < MAX_AT_ONCE) {\r", "-\t\t\tString filename = filenames[i++];\r", "-\t\t\t// Although it needed compiling when this method was called, it may have\r", "-\t\t\t// already been compiled when it was referenced by another unit.\r", "-\t\t\tif (inFirstPass || workQueue.isWaiting(filename)) {\r", "-\t\t\t\tCompilationUnit compUnit = new CompilationUnit(null, filename);\r", "-\t\t\t\tdoNow.add(compUnit);\r", "-\t\t\t}\r", "+\tif (toDo <= MAX_AT_ONCE) {\r", "+\t\t// do them all now\r", "+\t\tCompilationUnit[] toCompile = new CompilationUnit[toDo];\r", "+\t\tfor (int i = 0; i < toDo; i++) {\r", "+\t\t\tString filename = filenames[i];\r", "+\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\tSystem.out.println(\"About to compile \" + filename);\r", "+\t\t\ttoCompile[i] = new CompilationUnit(null, filename);\r", "-\t\tinFirstPass = false;\r", "-\t\tnotifier.checkCancel();\r", "-\t\tif (doNow.size() > 0) {\r", "-\t\t\tCompilationUnit[] toCompile = new CompilationUnit[doNow.size()];\r", "-\t\t\tdoNow.toArray(toCompile);\r", "-\t\t\ttry {\r", "-\t\t\t\tinCompiler = true;\r", "-\t\t\t\tcompiler.compile(toCompile);\r", "-\t\t\t} finally {\r", "-\t\t\t\tinCompiler = false;\r", "+\t\tcompile(toCompile, initialTypeNames, null);\r", "+\t} else {\r", "+\t\tint i = 0;\r", "+\t\tboolean compilingFirstGroup = true;\r", "+\t\twhile (i < toDo) {\r", "+\t\t\tint doNow = Math.min(toDo, MAX_AT_ONCE);\r", "+\t\t\tint index = 0;\r", "+\t\t\tCompilationUnit[] toCompile = new CompilationUnit[doNow];\r", "+\t\t\tString[] initialNamesInLoop = new String[doNow];\r", "+\t\t\twhile (i < toDo && index < doNow) {\r", "+\t\t\t\tString filename = filenames[i];\r", "+\t\t\t\t// Although it needed compiling when this method was called, it may have\r", "+\t\t\t\t// already been compiled when it was referenced by another unit.\r", "+\t\t\t\tif (compilingFirstGroup || workQueue.isWaiting(filename)) {\r", "+\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"About to compile \" + filename);\r", "+\t\t\t\t\ttoCompile[index] = new CompilationUnit(null, filename);\r", "+\t\t\t\t\tinitialNamesInLoop[index++] = initialTypeNames[i];\r", "+\t\t\t\t}\r", "+\t\t\t\ti++;\r", "-\r", "-\t\t\t// Check for cancel immediately after a compile, because the compiler may\r", "-\t\t\t// have been cancelled but without propagating the correct exception\r", "-\t\t\tnotifier.checkCancel();\r", "+\t\t\tif (index < doNow) {\r", "+\t\t\t\tSystem.arraycopy(toCompile, 0, toCompile = new CompilationUnit[index], 0, index);\r", "+\t\t\t\tSystem.arraycopy(initialNamesInLoop, 0, initialNamesInLoop = new String[index], 0, index);\r", "+\t\t\t}\r", "+\t\t\tString[] additionalFilenames = new String[toDo - i];\r", "+\t\t\tSystem.arraycopy(filenames, i, additionalFilenames, 0, additionalFilenames.length);\r", "+\t\t\tcompilingFirstGroup = false;\r", "+\t\t\tcompile(toCompile, initialNamesInLoop, additionalFilenames);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1082e8dd7e6ce7857643a39075925dba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "b8d589b72f11298620e188a74f142f9887cfc702", "commitAfterChange": "92a5335907fd0cb9878a81d6d82d370dc8deacce", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "  protected void addAffectedSourceFiles(char[] secondaryTypeName)", "signatureAfterChange": "  protected void compile(SourceFile[] units, SourceFile[] additionalUnits, boolean compilingFirstGroup)", "diff": ["-protected void addAffectedSourceFiles(char[] secondaryTypeName) {", "-\t// the secondary type search can have too many false hits if we addAffectedSource files using all the qualified type names", "-\t// of each secondary type... so look for the dependents 1 file at a time", "-\tint index = CharOperation.lastIndexOf('/', secondaryTypeName);", "-\tString packageName = index == -1 ? \"\" : new String(CharOperation.subarray(secondaryTypeName, 0, index)); //$NON-NLS-1$", "-\tStringSet packageNames = new StringSet(1);", "-\tpackageNames.add(packageName);", "-\tString typeName = new String(index == -1 ? secondaryTypeName : CharOperation.subarray(secondaryTypeName, index + 1, secondaryTypeName.length));", "-\tStringSet typeNames = new StringSet(1);", "-\ttypeNames.add(typeName);", "-", "-\taddAffectedSourceFiles(packageNames, typeNames);", "-}", "+protected void compile(SourceFile[] units, SourceFile[] additionalUnits, boolean compilingFirstGroup) {", "+\tif (compilingFirstGroup && additionalUnits != null) {", "+\t\t// add any source file from additionalUnits to units if it defines secondary types", "+\t\t// otherwise its possible during testing with MAX_AT_ONCE == 1 that a secondary type", "+\t\t// can cause an infinite loop as it alternates between not found and defined, see bug 146324", "+\t\tArrayList extras = null;", "+\t\tfor (int i = 0, l = additionalUnits.length; i < l; i++) {", "+\t\t\tSourceFile unit = additionalUnits[i];", "+\t\t\tif (unit != null && newState.getDefinedTypeNamesFor(unit.typeLocator()) != null) {", "+\t\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\t\tSystem.out.println(\"About to compile file with secondary types \"+ unit.typeLocator()); //$NON-NLS-1$", "+\t\t\t\tif (extras == null)", "+\t\t\t\t\textras = new ArrayList(3);", "+\t\t\t\textras.add(unit);", "+\t\t\t}", "+\t\t}", "+\t\tif (extras != null) {", "+\t\t\tint oldLength = units.length;", "+\t\t\tint toAdd = extras.size();", "+\t\t\tSystem.arraycopy(units, 0, units = new SourceFile[oldLength + toAdd], 0, oldLength);", "+\t\t\tfor (int i = 0; i < toAdd; i++)", "+\t\t\t\tunits[oldLength++] = (SourceFile) extras.get(i);", "+\t\t}", "+\t}", "+\tsuper.compile(units, additionalUnits, compilingFirstGroup);", "+}"]}], "num": 26510}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5b20961b765f84946cabd8bbbfa83e9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e5da779e15f8fefde190d7858416e0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "1cd36da9dd049ac527dcab1976c08155d6c121b9", "commitAfterChange": "f2c2a11caa27156fb260986cef359f78136ce40c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic static CompilationUnit parsePartialCompilationUnit( \t\tICompilationUnit unit, \t\tint position, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner)", "signatureAfterChange": " \tpublic static CompilationUnit parsePartialCompilationUnit( \t\tICompilationUnit unit, \t\tint position, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner)", "diff": ["+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = CompilationUnitResolver.resolve(", "+\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.resolve(", "-\t\t\t\t\tsearcher);", "+\t\t\t\t\tsearcher,", "+\t\t\t\t\tfalse/*don't cleanup*/);", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = CompilationUnitResolver.parse(", "+\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration2 = CompilationUnitResolver.parse(", "-\t\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration, source);", "-\t\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "+\t\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration2, source);", "+\t\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration2.compilationResult.lineSeparatorPositions);", "+\t\t\t\tif (compilationUnitDeclaration != null) {", "+\t\t\t\t\tcompilationUnitDeclaration.cleanUp();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b439fad57104117d35bb4eb88a02e028", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "d3a9da1814717a2c18ee252440a7a4915c82ca4d", "commitAfterChange": "48f271f8e7253c61ab509c2c5bf9a6fc4c4c9724", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic int lineNumber(int position)", "signatureAfterChange": " \tpublic int lineNumber(int position)", "diff": ["-\t */", "-\tpublic int lineNumber(int position) {", "-\t\tint length = lineEndTable.length;", "-\t\tif (length == 0) {", "-\t\t\t// no line number info", "-\t\t\treturn 1;", "-\t\t}", "-\t\tint low = 0;", "-\t\tif (position <= lineEndTable[low]) {", "-\t\t\t// position illegal or before the first line delimiter", "-\t\t\treturn 1;", "-\t\t}", "-\t\t// assert position > lineEndTable[low+1]  && low == 0", "-\t\tint hi = length - 1;", "-\t\tif (position > lineEndTable[hi]) {", "-\t\t\t// position beyond the last line separator", "-\t\t\tif (position >= getStartPosition() + getLength()) {", "-\t\t\t\t// this is beyond the end of the source length", "-\t\t\t\treturn 1;", "-\t\t\t} else {", "-\t\t\t\treturn length + 1;", "-\t\t\t}", "-\t\t}", "-\t\t// assert lineEndTable[low]  < position <= lineEndTable[hi]", "-\t\t// && low == 0 && hi == length - 1 && low < hi", "-\t\t", "-\t\t// binary search line end table", "-\t\twhile (true) {", "-\t\t\t// invariant lineEndTable[low] < position <= lineEndTable[hi]", "-\t\t\t// && 0 <= low < hi <= length - 1", "-\t\t\t// reducing measure hi - low", "-\t\t\tif (low + 1 == hi) {", "-\t\t\t\t// assert lineEndTable[low] < position <= lineEndTable[low+1]", "-\t\t\t\t// position is on line low+1 (line number is low+2)", "-\t\t\t\treturn low + 2;", "-\t\t\t}", "-\t\t\t// assert hi - low >= 2, so average is truly in between", "-\t\t\tint mid = (low + hi) / 2;", "-\t\t\t// assert 0 <= low < mid < hi <= length - 1", "-\t\t\tif (position <= lineEndTable[mid]) {", "-\t\t\t\t// assert lineEndTable[low] < position <= lineEndTable[mid]", "-\t\t\t\t// && 0 <= low < mid < hi <= length - 1", "-\t\t\t\thi = mid;", "-\t\t\t} else {", "-\t\t\t\t// position > lineEndTable[mid]", "-\t\t\t\t// assert lineEndTable[mid] < position <= lineEndTable[hi]", "-\t\t\t\t// && 0 <= low < mid < hi <= length - 1", "-\t\t\t\tlow = mid;", "-\t\t\t}", "-\t\t\t// in both cases, invariant reachieved with reduced measure", "-\t\t}", "-\t}", "+\t */", "+\tpublic int lineNumber(int position) {", "+\t\tif (this.lineEndTable == null) return 1;", "+\t\tint length = this.lineEndTable.length;", "+\t\tif (length == 0) {", "+\t\t\t// no line number info", "+\t\t\treturn 1;", "+\t\t}", "+\t\tint low = 0;", "+\t\tif (position <= this.lineEndTable[low]) {", "+\t\t\t// position illegal or before the first line delimiter", "+\t\t\treturn 1;", "+\t\t}", "+\t\t// assert position > lineEndTable[low+1]  && low == 0", "+\t\tint hi = length - 1;", "+\t\tif (position > this.lineEndTable[hi]) {", "+\t\t\t// position beyond the last line separator", "+\t\t\tif (position >= getStartPosition() + getLength()) {", "+\t\t\t\t// this is beyond the end of the source length", "+\t\t\t\treturn 1;", "+\t\t\t} else {", "+\t\t\t\treturn length + 1;", "+\t\t\t}", "+\t\t}", "+\t\t// assert lineEndTable[low]  < position <= lineEndTable[hi]", "+\t\t// && low == 0 && hi == length - 1 && low < hi", "+\t\t", "+\t\t// binary search line end table", "+\t\twhile (true) {", "+\t\t\t// invariant lineEndTable[low] < position <= lineEndTable[hi]", "+\t\t\t// && 0 <= low < hi <= length - 1", "+\t\t\t// reducing measure hi - low", "+\t\t\tif (low + 1 == hi) {", "+\t\t\t\t// assert lineEndTable[low] < position <= lineEndTable[low+1]", "+\t\t\t\t// position is on line low+1 (line number is low+2)", "+\t\t\t\treturn low + 2;", "+\t\t\t}", "+\t\t\t// assert hi - low >= 2, so average is truly in between", "+\t\t\tint mid = (low + hi) / 2;", "+\t\t\t// assert 0 <= low < mid < hi <= length - 1", "+\t\t\tif (position <= this.lineEndTable[mid]) {", "+\t\t\t\t// assert lineEndTable[low] < position <= lineEndTable[mid]", "+\t\t\t\t// && 0 <= low < mid < hi <= length - 1", "+\t\t\t\thi = mid;", "+\t\t\t} else {", "+\t\t\t\t// position > lineEndTable[mid]", "+\t\t\t\t// assert lineEndTable[mid] < position <= lineEndTable[hi]", "+\t\t\t\t// && 0 <= low < mid < hi <= length - 1", "+\t\t\t\tlow = mid;", "+\t\t\t}", "+\t\t\t// in both cases, invariant reachieved with reduced measure", "+\t\t}", "+\t}"]}], "num": 32963}
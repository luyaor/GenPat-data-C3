{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "695d0855118e8e75bc1d9e1512cefa99", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "756bdead1d988d520c6f43c4c4af3b06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 300, "signatureBeforeChange": " \tpublic void test296()", "signatureAfterChange": " \tpublic void test296()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in C.java (at line 4)\\n\" + ", "-\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "-\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The static method start() from the type B should be accessed in a static way\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in C.java (at line 4)\\n\" + ", "-\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "-\t\t\"\t                    ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The static method start() from the type B should be accessed in a static way\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in C.java (at line 4)\\n\" + ", "-\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "-\t\t\"\t                                     ^^^\\n\" + ", "-\t\t\"The method get(B<D>) in the type B<D> is not applicable for the arguments (B<B<D>>)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. WARNING in C.java (at line 4)\\n\" + ", "-\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "-\t\t\"\t                                         ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The static method start() from the type B should be accessed in a static way\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in C.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The static method start() from the type B should be accessed in a static way\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in C.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "+\t\t\t\"\t    ^\\n\" + ", "+\t\t\t\"Type safety: B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in C.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "+\t\t\t\"\t                    ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The static method start() from the type B should be accessed in a static way\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in C.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"Type safety: B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in C.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "+\t\t\t\"\t                                     ^^^\\n\" + ", "+\t\t\t\"The method get(B<D>) in the type B<D> is not applicable for the arguments (B<B<D>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in C.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "+\t\t\t\"\t                                         ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The static method start() from the type B should be accessed in a static way\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in C.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew B().start().get(new B().start()).get(new B().start());\\n\" + ", "+\t\t\t\"\t                                             ^\\n\" + ", "+\t\t\t\"Type safety: B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in B.java (at line 3)\\n\" + ", "+\t\t\t\"\tstatic B<B<D>> start() { return null; }\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Type safety: D is a raw type. References to generic type D<Y> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f335ddd1f92ed3297f9bbc46cc5b701", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e2422311047b85902980920dda1eeedf124d520c", "commitAfterChange": "c107fdebcaaafcbea0a28f68e9b229afba9f7c4f", "methodNumberBeforeChange": 1376, "methodNumberAfterChange": 1376, "signatureBeforeChange": " public void test1345() throws Exception", "signatureAfterChange": " public void test1345() throws Exception", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tpublic class X<T> extends Adapter {\\n\" +", "-\t\t\t\"\t                          ^^^^^^^\\n\" +", "-\t\t\t\"Adapter is a raw type. References to generic type Adapter<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" +", "-\t\t\t\"\t           ^^^^^^^^\\n\" +", "-\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" +", "-\t\t\t\"\t                    ^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The method makeSetter() of type X<T> should be tagged with @Override since it actually overrides a superclass method\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" +", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot cast from new Adapter.Setter(){} to String\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" +", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type mismatch: cannot convert from String to Adapter.Setter\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. WARNING in X.java (at line 9)\\n\" +", "-\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" +", "-\t\t\t\"\t                    ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in X.java (at line 9)\\n\" +", "-\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" +", "-\t\t\t\"\t                            ^^^^^^\\n\" +", "-\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"8. WARNING in X.java (at line 12)\\n\" +", "-\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" +", "-\t\t\t\"\t     ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"9. WARNING in X.java (at line 12)\\n\" +", "-\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" +", "-\t\t\t\"\t                                       ^^^^^^^^\\n\" +", "-\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tpublic class X<T> extends Adapter {\\n\" + ", "+\t\t\t\"\t                          ^^^^^^^\\n\" + ", "+\t\t\t\"Adapter is a raw type. References to generic type Adapter<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" + ", "+\t\t\t\"\t                    ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method makeSetter() of type X<T> has the same erasure as makeSetter() of type Adapter but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot cast from new Adapter.Setter(){} to String\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from String to Adapter.Setter\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn (String) new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t                            ^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}], "num": 52537}
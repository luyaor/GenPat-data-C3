{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f61e74106c8c68341b600b749920da2f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13be13986c44566f8f2bff69ffcaaa6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "4cf47d627358d0cbaa8f441928dc92203ede93b7", "commitAfterChange": "9a5b5a99030a69cb46e540836dd1e4aec26aaffb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-            int otherLength = otherParamType.arguments == null ? 0 : otherParamType.arguments.length;", "+            TypeBinding[] otherArguments = otherParamType.arguments;", "+            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "+            // argument must be identical, only equivalence is allowed if wildcard other type", "-                if (!this.arguments[i].isEquivalentTo(otherParamType.arguments[i]))", "-                        return false;", "+            \tTypeBinding argument = this.arguments[i];", "+            \tTypeBinding otherArgument = otherArguments[i];", "+\t\t\t\tif (!(argument == otherArgument", "+\t\t\t\t\t\t|| (otherArgument.isWildcard()) && argument.isEquivalentTo(otherArgument))) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8adc61a58976b95815f6ebe832def52c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalPackageFragmentRoot.java", "commitBeforeChange": "3df203dd14216a5a05c7609bcd2dd61cc345cbe4", "commitAfterChange": "220df3e54541b1d486d18b098bb99954035d7238", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tprotected boolean resourceExists(IResource underlyingResource)", "signatureAfterChange": " \t \tprotected boolean resourceExists(IResource underlyingResource)", "diff": ["-\t\treturn underlyingResource != null && underlyingResource.getLocation().toFile().exists();", "+\t\tif (underlyingResource == null)", "+\t\t\treturn false;", "+\t\tIPath location = underlyingResource.getLocation();", "+\t\tif (location == null)", "+\t\t\treturn false;", "+\t\tFile file = location.toFile();", "+\t\tif (file == null)", "+\t\t\treturn false;", "+\t\treturn file.exists();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22c84177feeadb7bedf24663acaf1a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "b1f26dd7246467dc23b84856de7e72a03a078127", "commitAfterChange": "28b12db798aef83fea7df32f8ed84696ebec2fff", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superclass) : this.superclass;", "-\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t    return TypeConstants.MISMATCH;", "-\t\t\t}", "-\t\t\tif (argumentType instanceof ReferenceBinding) {", "-\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "-\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeWithSameErasure(substitutedSuperType);", "-\t\t\t\tif (match != null){", "-\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "-\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "-\t\t\t\t\t\tunchecked = true;", "+\t\t\tTypeBinding superType = this.superclass;", "+\t\t\tif (superType != argumentType) { // check identity before substituting (104649)", "+\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, superType) : superType;", "+\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t\t    return TypeConstants.MISMATCH;", "-\t\t\t} ", "+\t\t\t\tif (argumentType instanceof ReferenceBinding) {", "+\t\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "+\t\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeWithSameErasure(substitutedSuperType);", "+\t\t\t\t\tif (match != null){", "+\t\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "+\t\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "+\t\t\t\t\t\t\tunchecked = true;", "+\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t}", "-\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces[i]) : this.superInterfaces[i];", "-\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t    return TypeConstants.MISMATCH;", "-\t\t\t}", "-\t\t\tif (argumentType instanceof ReferenceBinding) {", "-\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "-\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeWithSameErasure(substitutedSuperType);", "-\t\t\t\tif (match != null){", "-\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "-\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "-\t\t\t\t\t\tunchecked = true;", "+\t    \tTypeBinding superType = this.superInterfaces[i];", "+\t    \tif (superType != argumentType) { // check identity before substituting (104649)", "+\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, superType) : superType;", "+\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t\t    return TypeConstants.MISMATCH;", "-\t\t\t}", "+\t\t\t\tif (argumentType instanceof ReferenceBinding) {", "+\t\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "+\t\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeWithSameErasure(substitutedSuperType);", "+\t\t\t\t\tif (match != null){", "+\t\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "+\t\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "+\t\t\t\t\t\t\tunchecked = true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee29a6ac3c0615b8231ff411556c9af3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "677db12ffe2b33d9711034d339aec7b56ab85d41", "commitAfterChange": "617fadfcdd9d3f85493c65c27088f408a3cd9c9d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r protected void executeOperation() throws JavaModelException", "signatureAfterChange": "\r protected void executeOperation() throws JavaModelException", "diff": ["-\tbeginTask(Util.bind(\"workingCopy.commit\"), 2); //$NON-NLS-1$\r", "-\tWorkingCopy copy = (WorkingCopy)getCompilationUnit();\r", "-\tICompilationUnit original = (ICompilationUnit) copy.getOriginalElement();\r", "-\r", "-\t\r", "-\t// creates the delta builder (this remembers the content of the cu)\t\r", "-\tif (!original.isOpen()) {\r", "-\t\t// force opening so that the delta builder can get the old info\r", "-\t\toriginal.open(null);\r", "-\t}\r", "-\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(original);\r", "-\r", "-\t// save the cu\r", "-\tchar[] originalContents = original.getBuffer().getCharacters();\r", "-\tboolean hasSaved = false;\r", "-\t\toriginal.getBuffer().setContents(copy.getBuffer().getCharacters());\r", "-\t\toriginal.save(fMonitor, fForce);\r", "-\t\tthis.hasModifiedResource = true;\r", "-\t\thasSaved = true;\r", "-\t} finally {\r", "-\t\tif (!hasSaved){\r", "-\t\t\t// restore original buffer contents since something went wrong\r", "-\t\t\toriginal.getBuffer().setContents(originalContents);\r", "-\t\t}\r", "-\t}\r", "-\t// make sure working copy is in sync\r", "-\tcopy.updateTimeStamp((CompilationUnit)original);\r", "-\tcopy.makeConsistent(this);\r", "-\tworked(1);\r", "-\r", "-\t// build the deltas\r", "-\tdeltaBuilder.buildDeltas();\r", "-\r", "-\t// add the deltas to the list of deltas created during this operation\r", "-\tif (deltaBuilder.delta != null) {\r", "-\t\taddDelta(deltaBuilder.delta);\r", "-\t}\r", "-\tworked(1);\r", "+\t\tbeginTask(Util.bind(\"workingCopy.commit\"), 2); //$NON-NLS-1$\r", "+\t\tWorkingCopy copy = (WorkingCopy)getCompilationUnit();\r", "+\t\tICompilationUnit original = (ICompilationUnit) copy.getOriginalElement();\r", "-\tdone();\r", "-//\tcheckPackageDeclaration(original);\r", "+\t\t\r", "+\t\t// creates the delta builder (this remembers the content of the cu)\t\r", "+\t\tif (!original.isOpen()) {\r", "+\t\t\t// force opening so that the delta builder can get the old info\r", "+\t\t\toriginal.open(null);\r", "+\t\t}\r", "+\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(original);\r", "+\t\r", "+\t\t// save the cu\r", "+\t\tIBuffer originalBuffer = original.getBuffer();\r", "+\t\tif (originalBuffer == null) return;\r", "+\t\tchar[] originalContents = originalBuffer.getCharacters();\r", "+\t\tboolean hasSaved = false;\r", "+\t\ttry {\r", "+\t\t\tIBuffer copyBuffer = copy.getBuffer();\r", "+\t\t\tif (copyBuffer == null) return;\r", "+\t\t\toriginalBuffer.setContents(copyBuffer.getCharacters());\r", "+\t\t\toriginal.save(fMonitor, fForce);\r", "+\t\t\tthis.hasModifiedResource = true;\r", "+\t\t\thasSaved = true;\r", "+\t\t} finally {\r", "+\t\t\tif (!hasSaved){\r", "+\t\t\t\t// restore original buffer contents since something went wrong\r", "+\t\t\t\toriginalBuffer.setContents(originalContents);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// make sure working copy is in sync\r", "+\t\tcopy.updateTimeStamp((CompilationUnit)original);\r", "+\t\tcopy.makeConsistent(this);\r", "+\t\tworked(1);\r", "+\t\r", "+\t\t// build the deltas\r", "+\t\tdeltaBuilder.buildDeltas();\r", "+\t\r", "+\t\t// add the deltas to the list of deltas created during this operation\r", "+\t\tif (deltaBuilder.delta != null) {\r", "+\t\t\taddDelta(deltaBuilder.delta);\r", "+\t\t}\r", "+\t\tworked(1);\r", "+\t} finally {\t\r", "+\t\tdone();\r", "+\t}\r"]}], "num": 56290}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f9f5369ea3a0003cb8a6c7469ae73ec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e915f8fe664c0b3767f2e7db827b452", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "d471673792c33710d43ba989e7727f72f37f7860", "commitAfterChange": "5cc3bd3c20ab2d5790e538b2ed1ced032bbe5534", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public IBuffer getBuffer() throws JavaModelException", "signatureAfterChange": " public IBuffer getBuffer() throws JavaModelException", "diff": ["+\t\tif (buffer instanceof NullBuffer) {", "+\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d05e87ba85e197fef2212a1cc6cc4e66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "bfaf9d23a02d05c466f9843a8f1857a7dba35c49", "commitAfterChange": "eb1af8158c83ea43d46875607c5495b0cb47979e", "methodNumberBeforeChange": 447, "methodNumberAfterChange": 447, "signatureBeforeChange": " public void typeMismatchError(TypeBinding actualType, TypeBinding expectedType, ASTNode location, ASTNode expectingLocation)", "signatureAfterChange": " public void typeMismatchError(TypeBinding actualType, TypeBinding expectedType, ASTNode location, ASTNode expectingLocation)", "diff": ["+\t\tif (location instanceof Annotation) {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=376977", "+\t\t\treturn; // Already reported, don't report a secondary error", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e447733e6a7e69651a85631325441d42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "6ba33977e63feb9d08c7d3c1dcfe1d17fe38ce32", "commitAfterChange": "0cfc1909e7a79aeaf7a72a81c013f0897f47ac1d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public BinaryTypeBinding createBinaryTypeFrom(IBinaryType binaryType, PackageBinding packageBinding, boolean needFieldsAndMethods, AccessRestriction accessRestriction)", "signatureAfterChange": " public BinaryTypeBinding createBinaryTypeFrom(IBinaryType binaryType, PackageBinding packageBinding, boolean needFieldsAndMethods, AccessRestriction accessRestriction)", "diff": ["-\t\t// TODO (kent) suspect the check below is no longer required, since we should not be requesting a binary which is already in the cache", "-\t\tif (cachedType.isBinaryBinding()) // sanity check before the cast... at this point the cache should ONLY contain unresolved types", "-\t\t\treturn (BinaryTypeBinding) cachedType;", "-", "-\t\t((UnresolvedReferenceBinding) cachedType).setResolvedType(binaryBinding, this);", "+\t\tif (cachedType instanceof UnresolvedReferenceBinding) {", "+\t\t\t((UnresolvedReferenceBinding) cachedType).setResolvedType(binaryBinding, this);", "+\t\t} else {", "+\t\t\tif (cachedType.isBinaryBinding()) // sanity check... at this point the cache should ONLY contain unresolved types", "+\t\t\t\treturn (BinaryTypeBinding) cachedType;", "+\t\t\t// it is possible with a large number of source files (exceeding AbstractImageBuilder.MAX_AT_ONCE) that a member type can be in the cache as an UnresolvedType,", "+\t\t\t// but because its enclosingType is resolved while its created (call to BinaryTypeBinding constructor), its replaced with a source type", "+\t\t\treturn null;", "+\t\t}"]}], "num": 45362}
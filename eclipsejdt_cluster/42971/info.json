{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "272214f84a38be3526b8a2f5d4f20d21", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19b9b89e16fd0e4e0dbe093d09997e68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "424b9c711eb8f066b325841662effb171f3ae4ef", "commitAfterChange": "4d19416746402b8fbbfd02c13772658da70a345a", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r \tpublic IPackageFragmentRoot[] getPackageFragmentRoots()\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IPackageFragmentRoot[] getPackageFragmentRoots()\r \t\tthrows JavaModelException", "diff": ["-\t\tIPackageFragmentRoot[] children = getAllPackageFragmentRoots();\r", "-\t\tObjectVector directChildren = new ObjectVector();\r", "+\t\tObject[] children;\r", "+\t\tint length;\r", "+\t\tIPackageFragmentRoot[] roots;\r", "-\t\tfor (int i = 0; i < children.length; i++) {\r", "-\t\t\tIPackageFragmentRoot root = children[i];\r", "-\t\t\tIJavaProject proj = root.getJavaProject();\r", "-\t\t\tif (proj != null && proj.equals(this)) {\r", "-\t\t\t\tdirectChildren.add(root);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tchildren = new IPackageFragmentRoot[directChildren.size()];\r", "-\t\tdirectChildren.copyInto(children);\r", "-\t\treturn children;\r", "+\t\tSystem.arraycopy(\r", "+\t\t\tchildren = getChildren(), \r", "+\t\t\t0, \r", "+\t\t\troots = new IPackageFragmentRoot[length = children.length], \r", "+\t\t\t0, \r", "+\t\t\tlength);\r", "+\t\t\t\r", "+\t\treturn roots;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3289bd8b9f52127562c53616f87cb737", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "e67c77fc5e097eac99c8909bb016eff7011eb0ce", "commitAfterChange": "5d677f26e6a9dfca4bbd2cd8a965c43c4f46ed94", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " private int indexOf(String relativePath, String containerPath)", "signatureAfterChange": " private int indexOf(String containerPath, String relativePath)", "diff": ["-private int indexOf(String relativePath, String containerPath) {", "-\tif (containerPath != null) {", "-\t\t// if container path is known, use the hash to get faster comparison", "-\t\tint index = (containerPath.hashCode()& 0x7FFFFFFF) % this.paths.length;", "-\t\tString currentContainerPath;", "-\t\twhile ((currentContainerPath = this.containerPaths[index]) != null) {", "-\t\t\tif (currentContainerPath.equals(containerPath)) {", "-\t\t\t\tString scopePath = this.paths[index];", "-\t\t\t\tif (encloses(scopePath, relativePath, index))", "-\t\t\t\t\treturn index;", "-\t\t\t}", "-\t\t\tindex = (index + 1) % this.paths.length;", "-\t\t}", "-\t\treturn -1;", "-\t}", "-\t", "-\tfor (int i = 0, length = this.paths.length; i < length; i++) {", "-\t\tString scopePath = this.paths[i];", "-\t\tif (scopePath == null) continue;", "-\t\tif (encloses(this.containerPaths[i] + '/' + scopePath, relativePath, i))", "+ */", "+private int indexOf(String containerPath, String relativePath) {", "+\t// use the hash to get faster comparison", "+\tint index = (containerPath.hashCode()& 0x7FFFFFFF) % this.containerPaths.length;", "+\tString currentContainerPath;", "+\twhile ((currentContainerPath = this.containerPaths[index]) != null) {", "+\t\tif (currentContainerPath.equals(containerPath)) {", "+\t\t\tString currentRelativePath = this.relativePaths[index];", "+\t\t\tif (encloses(currentRelativePath, relativePath, index))", "+\t\t\t\treturn index;", "+\t\tindex = (index + 1) % this.relativePaths.length;", "+\t}", "+\treturn -1;", "+}"]}], "num": 42971}
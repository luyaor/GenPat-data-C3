{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4222de8acb280a306d32908295acffa3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17bf9e302b2f45846978a10282a7315a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "26de20ae619c91a55a35147a34aba32ab3111d61", "commitAfterChange": "6aa15157c4a89778b30fbac85a8e1c76029da034", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tstatic void annotateMember(String typeName, IFile file, String selector, String originalSignature, String annotatedSignature, \t\t\t\t\t\t\t\t\t\tint updatePosition, MergeStrategy mergeStrategy, IProgressMonitor monitor) \t\t\tthrows CoreException, IOException", "signatureAfterChange": "  \tstatic void annotateMember(String typeName, IFile file, String selector, String originalSignature, String annotatedSignature, \t\t\t\t\t\t\t\t\t\tint updatePosition, MergeStrategy mergeStrategy, IProgressMonitor monitor) \t\t\tthrows CoreException, IOException, IllegalArgumentException", "diff": ["-\t\t\tthrows CoreException, IOException", "+\t\t\tthrows CoreException, IOException, IllegalArgumentException", "+\t\t\t\t\t\tif (line == null) {", "+\t\t\t\t\t\t\tbreak; // found only the selector at EOF, append right here, ignoring 'pending'", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tString nextLine = reader.readLine();", "-\t\t\t\t\t\t\tif (nextLine == null)", "-\t\t\t\t\t\t\t\tnextLine = line; // no annotated line yet, use unannotated line instead", "-\t\t\t\t\t\t\tif (nextLine.startsWith(\" \")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tString annotationLine = reader.readLine();", "+\t\t\t\t\t\t\tString nextLine = null;", "+\t\t\t\t\t\t\tif (annotationLine == null || annotationLine.isEmpty() || !annotationLine.startsWith(\" \")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tnextLine = annotationLine; // push back, since not a signature line", "+\t\t\t\t\t\t\t\tannotationLine = line; // no annotated line yet, use unannotated line instead", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (annotationLine.startsWith(\" \")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\t\tannotatedSignature = addAnnotationsTo(annotatedSignature, nextLine.trim(), mergeStrategy);", "+\t\t\t\t\t\t\t\t\t\t\tannotatedSignature = addAnnotationsTo(annotatedSignature, annotationLine.trim(), mergeStrategy);", "-\t\t\t\t\t\t\t\t\t\t\tannotatedSignature = updateMethodReturnType(annotatedSignature, nextLine.trim(), mergeStrategy);", "+\t\t\t\t\t\t\t\t\t\t\tannotatedSignature = updateMethodReturnType(annotatedSignature, annotationLine.trim(), mergeStrategy);", "-\t\t\t\t\t\t\t\t\t\t\tannotatedSignature = updateParameterType(annotatedSignature, updatePosition, nextLine.trim(), mergeStrategy);", "+\t\t\t\t\t\t\t\t\t\t\tannotatedSignature = updateParameterType(annotatedSignature, updatePosition, annotationLine.trim(), mergeStrategy);", "-\t\t\t\t\t\t\t\tnextLine = null; // discard old annotated signature (may have been merged above)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85c3a94bbf66bfb027d8e97caa4f5667", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "34f724a9738d7636a75842e2910c694725115548", "commitAfterChange": "9b49fc6edec0d13e82a14df97219e6ae294f74cc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate static String addAnnotationsTo(String newSignature, String oldSignature, MergeStrategy mergeStategy)", "signatureAfterChange": " \tpublic static String extractGenericTypeSignature(ITypeBinding type)", "diff": ["+\t */", "+\tpublic static String extractGenericTypeSignature(ITypeBinding type) {", "+\t\tString key = type.getKey();", "+\t\tif (type.isTypeVariable()) {", "+\t\t\tint colon= key.indexOf(':');", "+\t\t\tif (colon > -1)", "+\t\t\t\treturn key.substring(colon+1); // cut of unwanted declaring type prefix", "+\t\t}", "+\t\treturn key;", "-\tprivate static String addAnnotationsTo(String newSignature, String oldSignature, MergeStrategy mergeStategy) {", "-\t\t// TODO: consider rewrite using updateType() below", "-\t\tStringBuffer buf = new StringBuffer();", "-\t\tassert newSignature.charAt(0) == '(' : \"signature must start with '('\"; //$NON-NLS-1$", "-\t\tassert oldSignature.charAt(0) == '(' : \"signature must start with '('\"; //$NON-NLS-1$", "-\t\tbuf.append('(');", "-\t\tSignatureWrapper wrapperNew = new SignatureWrapper(newSignature.toCharArray(), true); // when using annotations we must be at 1.5+", "-\t\twrapperNew.start = 1;", "-\t\tSignatureWrapper wrapperOld = new SignatureWrapper(oldSignature.toCharArray(), true);", "-\t\twrapperOld.start = 1;", "-\t\twhile (!wrapperNew.atEnd() && !wrapperOld.atEnd()) {", "-\t\t\tint startNew = wrapperNew.start;", "-\t\t\tint startOld = wrapperOld.start;", "-\t\t\tif (wrapperNew.signature[startNew] == ')') {", "-\t\t\t\tif (wrapperOld.signature[startOld] != ')')", "-\t\t\t\t\tthrow new IllegalArgumentException(\"Structural difference between signatures \"+newSignature+\" and \"+oldSignature);  //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\tstartNew = ++wrapperNew.start;", "-\t\t\t\tstartOld = ++wrapperOld.start;", "-\t\t\t\tbuf.append(')');", "-\t\t\t}\t\t\t", "-\t\t\tint endNew = wrapperNew.computeEnd();", "-\t\t\tint endOld = wrapperOld.computeEnd();", "-\t\t\tint lenNew = endNew-startNew+1;", "-\t\t\tint lenOld = endOld-startOld+1;", "-\t\t\t // TODO detailed comparison / merging:", "-\t\t\tif (lenNew == lenOld) {", "-\t\t\t\tswitch (mergeStategy) {", "-\t\t\t\t\tcase OVERWRITE_ANNOTATIONS:", "-\t\t\t\t\t\tbuf.append(wrapperNew.signature, startNew, lenNew);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ADD_ANNOTATIONS:", "-\t\t\t\t\t\tbuf.append(wrapperOld.signature, startOld, lenOld);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t//$CASES-OMITTED$ should only be called with the two strategies handled above", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tJavaCore.getJavaCore().getLog().log(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Unexpected value for enum MergeStrategy\")); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t} else if (lenNew > lenOld) {", "-\t\t\t\tbuf.append(wrapperNew.signature, startNew, lenNew);", "-\t\t\t} else {\t\t\t\t", "-\t\t\t\tbuf.append(wrapperOld.signature, startOld, lenOld);", "-\t\t\t}", "-\t\t}", "-\t\treturn buf.toString();", "-\t}"]}], "num": 12401}
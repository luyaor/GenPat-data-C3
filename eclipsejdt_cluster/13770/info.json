{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fe393c8474af5366078fba2606a4016", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e8cb3298e322addc7d85503a9bbcec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "commitAfterChange": "2e2e66f7f68b994d0931afecfd3c1e559acd59d5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private void injectAllTypesForPackageFragmentRoot(IPackageFragmentRoot root, Vector types)", "signatureAfterChange": "\r \tprivate void injectAllTypesForPackageFragmentRoot(\r \t\tIPackageFragmentRoot root,\r \t\tArrayList types)", "diff": ["+\t */\r", "+\tprivate void injectAllTypesForPackageFragmentRoot(\r", "+\t\tIPackageFragmentRoot root,\r", "+\t\tArrayList types) {\r", "+\t\ttry {\r", "+\t\t\tIJavaElement[] packFrags = root.getChildren();\r", "+\t\t\tfor (int k = 0; k < packFrags.length; k++) {\r", "+\t\t\t\tIPackageFragment packFrag = (IPackageFragment) packFrags[k];\r", "+\t\t\t\tinjectAllTypesForPackageFragment(packFrag, types);\r", "+\t\t\t}\r", "+\t\t} catch (JavaModelException e) {\r", "- */\r", "-private void injectAllTypesForPackageFragmentRoot(IPackageFragmentRoot root, Vector types) {\r", "-\ttry {\r", "-\t\tIJavaElement[] packFrags = root.getChildren();\r", "-\t\tfor (int k = 0; k < packFrags.length; k++) {\r", "-\t\t\tIPackageFragment packFrag = (IPackageFragment) packFrags[k];\r", "-\t\t\tinjectAllTypesForPackageFragment(packFrag, types);\r", "-\t\t}\r", "-\t} catch (JavaModelException npe) {\r", "-\t\treturn;\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6fbb53ebfc17102d5428915a429a54f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "commitAfterChange": "2e2e66f7f68b994d0931afecfd3c1e559acd59d5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r private void injectAllTypesForPackageFragment(IPackageFragment packFrag, Vector types)", "signatureAfterChange": "\r \tprivate void injectAllTypesForPackageFragment(\r \t\tIPackageFragment packFrag,\r \t\tArrayList types)", "diff": ["+\t */\r", "+\tprivate void injectAllTypesForPackageFragment(\r", "+\t\tIPackageFragment packFrag,\r", "+\t\tArrayList types) {\r", "+\t\t\t\r", "+\t\ttry {\r", "+\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) packFrag.getParent();\r", "+\t\t\tint kind = root.getKind();\r", "+\t\t\tif (kind != 0) {\r", "+\t\t\t\tboolean isSourcePackageFragment = (kind == IPackageFragmentRoot.K_SOURCE);\r", "+\t\t\t\tif (isSourcePackageFragment) {\r", "+\t\t\t\t\tICompilationUnit[] typeContainers = packFrag.getCompilationUnits();\r", "+\t\t\t\t\tinjectAllTypesForTypeContainers(typeContainers, types);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tIClassFile[] typeContainers = packFrag.getClassFiles();\r", "+\t\t\t\t\tinjectAllTypesForTypeContainers(typeContainers, types);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t}\r", "+\t}\r", "- */\r", "-private void injectAllTypesForPackageFragment(IPackageFragment packFrag, Vector types) {\r", "-\ttry {\r", "-\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) packFrag.getParent();\r", "-\t\tint kind = root.getKind();\r", "-\t\tif (kind != 0) {\r", "-\t\t\tboolean isSourcePackageFragment = (kind == IPackageFragmentRoot.K_SOURCE);\r", "-\t\t\tif (isSourcePackageFragment) {\r", "-\t\t\t\tICompilationUnit[] typeContainers = packFrag.getCompilationUnits();\r", "-\t\t\t\tinjectAllTypesForTypeContainers(typeContainers, types);\r", "-\t\t\t} else {\r", "-\t\t\t\tIClassFile[] typeContainers = packFrag.getClassFiles();\r", "-\t\t\t\tinjectAllTypesForTypeContainers(typeContainers, types);\r", "-\t} catch (JavaModelException npe) {\r", "-}\r"]}], "num": 13770}
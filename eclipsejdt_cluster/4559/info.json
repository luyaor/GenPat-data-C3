{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "586b3b70abf8d263997334eb82c8b583", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "642b5f7f0b41668e7ae4fe7473407404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "93b2da494f05ea9d7d07cce04c925af478b85ee5", "commitAfterChange": "c69071f87158dd93231fe63287bd6768307408eb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tprotected void buildSupertypes()", "signatureAfterChange": "\r \tprotected void buildSupertypes()", "diff": ["-\t\tif (nameLookup != null && unitToLookInside != null) {\r", "+\t\tif (nameLookup != null) {\r", "+\t\t\t\tIWorkingCopy[] workingCopies = this.getWokingCopies();\r", "+\t\t\t\tIWorkingCopy[] unitsToLookInside;\r", "+\t\t\t\tif (unitToLookInside != null) {\r", "+\t\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;\r", "+\t\t\t\t\tif (wcLength == 0) {\r", "+\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];\r", "+\t\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;\r", "+\t\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tunitsToLookInside = workingCopies;\r", "+\t\t\t\t}\r", "-\t\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "+\t\t\t\t\tnameLookup.setUnitsToLookInside(unitsToLookInside);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "696c7da54e98b2784970cfce1d6a88b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic HierarchyBuilder(TypeHierarchy hierarchy) throws JavaModelException", "signatureAfterChange": " \tpublic HierarchyBuilder(TypeHierarchy hierarchy) throws JavaModelException", "diff": ["-\t\tthis.searchableEnvironment =", "-\t\t\t(SearchableEnvironment) project.getSearchableNameEnvironment();", "-\t\tthis.nameLookup = project.getNameLookup();", "+\t\t", "+\t\tIType focusType = hierarchy.getType();", "+\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType == null ? null : focusType.getCompilationUnit();", "+\t\torg.eclipse.jdt.core.ICompilationUnit[] workingCopies = this.hierarchy.workingCopies;", "+\t\torg.eclipse.jdt.core.ICompilationUnit[] unitsToLookInside;", "+\t\tif (unitToLookInside != null) {", "+\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "+\t\t\tif (wcLength == 0) {", "+\t\t\t\tunitsToLookInside = new org.eclipse.jdt.core.ICompilationUnit[] {unitToLookInside};", "+\t\t\t} else {", "+\t\t\t\tunitsToLookInside = new org.eclipse.jdt.core.ICompilationUnit[wcLength+1];", "+\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "+\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tunitsToLookInside = workingCopies;", "+\t\t}", "+\t\tSearchableEnvironment searchableEnvironment = (SearchableEnvironment) project.newSearchableNameEnvironment(unitsToLookInside);", "+\t\tthis.nameLookup = searchableEnvironment.nameLookup;", "-\t\t\t\tthis.searchableEnvironment,", "+\t\t\t\tsearchableEnvironment,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f653ffe0e6da392917159c3fe96ce170", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "44977e3b03be3654979e5c18499b69a14e8712d9", "commitAfterChange": "1ab5591c67cb695048e1591e0a714342e9b9c85b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["+\tchar[][] argumentNames = method.getArgumentNames();", "+", "+\t\t", "+\t\tfinal int argumentNamesLength = argumentNames == null ? 0 : argumentNames.length;", "+\t\tif (startIndex > 0 && argumentNamesLength > 0) {", "+\t\t\t// We'll have to slice the starting arguments off", "+\t\t\tif (startIndex >= argumentNamesLength) {", "+\t\t\t\targumentNames = Binding.NO_PARAMETER_NAMES; // We know nothing about the argument names", "+\t\t\t} else {", "+\t\t\t\tchar[][] slicedArgumentNames = new char[argumentNamesLength - startIndex][];", "+\t\t\t\tSystem.arraycopy(argumentNames, startIndex, slicedArgumentNames, 0, argumentNamesLength - startIndex);", "+\t\t\t\targumentNames = slicedArgumentNames;", "+\t\t\t}", "+\t\t}", "+", "+\tif (argumentNames != null) result.parameterNames = argumentNames;", "+\t"]}], "num": 4559}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "808caf0da06d62e6e58a9894d3e1e028", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dfaa06a67ea0807e9ef075f7f7824ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 116, "signatureBeforeChange": " \t \tprivate InfixExpression.Operator getOperatorFor(int operatorID)", "signatureAfterChange": " \t \tprivate InfixExpression.Operator getOperatorFor(int operatorID)", "diff": ["-\t\t\tcase OperatorIds.EQUAL_EQUAL :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "-\t\t\tcase OperatorIds.LESS_EQUAL :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "-\t\t\tcase OperatorIds.GREATER_EQUAL :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "-\t\t\tcase OperatorIds.NOT_EQUAL :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "-\t\t\tcase OperatorIds.LEFT_SHIFT :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "-\t\t\tcase OperatorIds.RIGHT_SHIFT :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "-\t\t\tcase OperatorIds.UNSIGNED_RIGHT_SHIFT :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\tcase OperatorIds.OR_OR :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "-\t\t\tcase OperatorIds.AND_AND :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "-\t\t\tcase OperatorIds.PLUS :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\tcase OperatorIds.MINUS :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\tcase OperatorIds.REMAINDER :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "-\t\t\tcase OperatorIds.XOR :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "-\t\t\tcase OperatorIds.AND :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "-\t\t\tcase OperatorIds.MULTIPLY :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "-\t\t\tcase OperatorIds.OR :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "-\t\t\tcase OperatorIds.DIVIDE :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "-\t\t\tcase OperatorIds.GREATER :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "-\t\t\tcase OperatorIds.LESS :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520fe2c92708bc8fb50a9214cd513b3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic Assignment convert(CompoundAssignment expression)", "signatureAfterChange": "  \tpublic Assignment convert(org.eclipse.jdt.internal.compiler.ast.CompoundAssignment expression)", "diff": ["-\tpublic Assignment convert(CompoundAssignment expression) {", "+\tpublic Assignment convert(org.eclipse.jdt.internal.compiler.ast.CompoundAssignment expression) {", "-\t\t\tcase OperatorIds.PLUS :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\tcase OperatorIds.MINUS :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\tcase OperatorIds.MULTIPLY :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "-\t\t\tcase OperatorIds.DIVIDE :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "-\t\t\tcase OperatorIds.AND :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "-\t\t\tcase OperatorIds.OR :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "-\t\t\tcase OperatorIds.XOR :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "-\t\t\tcase OperatorIds.REMAINDER :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "-\t\t\tcase OperatorIds.LEFT_SHIFT :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "-\t\t\tcase OperatorIds.RIGHT_SHIFT :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "-\t\t\tcase OperatorIds.UNSIGNED_RIGHT_SHIFT :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "645f4aeb922f3c1dbf23da0517d974b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b2caa750738c585e3970cd6cbdee229067bea596", "commitAfterChange": "8d1eb8a1ba1f8d42e85f057c2e74fe0db8cb690d", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\t\tif (expression.left instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "+\t\tif (expression.left instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression", "+\t\t\t\t&& ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "-\t\t\t\tif ((((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID && ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))", "-\t\t\t\t || ((rightOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID) && ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))) {", "+\t\t\t\tif ((((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID", "+\t\t\t\t\t\t\t&& ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))", "+\t\t\t\t\t || ((rightOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression", "+\t\t\t\t \t\t\t&& ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID)", "+\t\t\t\t\t\t\t&& ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))) {", "-\t\t}\t\t", "+\t\t} else if (expression.left instanceof StringLiteralConcetanation", "+\t\t\t\t&& ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "+\t\t\tStringLiteralConcetanation literal = (StringLiteralConcetanation) expression.left;", "+\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.StringLiteral[] stringLiterals = literal.literals;", "+\t\t\tinfixExpression.setLeftOperand(convert(stringLiterals[0]));", "+\t\t\tinfixExpression.setRightOperand(convert(stringLiterals[1]));", "+\t\t\tfor (int i = 2; i < literal.counter; i++) {", "+\t\t\t\tinfixExpression.extendedOperands().add(convert(stringLiterals[i]));", "+\t\t\t}", "+\t\t\tinfixExpression.extendedOperands().add(convert(expression.right));", "+\t\t\tint startPosition = literal.sourceStart;", "+\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\treturn infixExpression;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0486cf5b1e45fcd3ca8a1600da55bcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "8abf03ebc64c5dfaa72b42e56c19fb01c4c7861e", "commitAfterChange": "5b58321cc6529786ed20cb721ece7536a2d99088", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\t\tswitch (expressionOperatorID) {", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LESS_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.GREATER_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.NOT_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LEFT_SHIFT);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.RIGHT_SHIFT_SIGNED);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_OR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_AND);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.PLUS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.MINUS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.REMAINDER);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.XOR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.AND);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.TIMES);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.OR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.DIVIDE);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.GREATER);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LESS);", "-\t\t}", "+\t\tinfixExpression.setOperator(getOperatorFor(expressionOperatorID));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8eaae019e0108637e461c2f3dff8b07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 286, "methodNumberAfterChange": 306, "signatureBeforeChange": " public void sendOperator(int operatorConstant, int type_ID)", "signatureAfterChange": " public void sendOperator(int operatorConstant, int type_ID)", "diff": ["-\t\tcase T_int :", "-\t\tcase T_boolean :", "-\t\tcase T_char :", "-\t\tcase T_byte :", "-\t\tcase T_short :", "+\t\tcase TypeIds.T_int :", "+\t\tcase TypeIds.T_boolean :", "+\t\tcase TypeIds.T_char :", "+\t\tcase TypeIds.T_byte :", "+\t\tcase TypeIds.T_short :", "-\t\t\t\tcase PLUS :", "+\t\t\t\tcase OperatorIds.PLUS :", "-\t\t\t\tcase MINUS :", "+\t\t\t\tcase OperatorIds.MINUS :", "-\t\t\t\tcase MULTIPLY :", "+\t\t\t\tcase OperatorIds.MULTIPLY :", "-\t\t\t\tcase DIVIDE :", "+\t\t\t\tcase OperatorIds.DIVIDE :", "-\t\t\t\tcase REMAINDER :", "+\t\t\t\tcase OperatorIds.REMAINDER :", "-\t\t\t\tcase LEFT_SHIFT :", "+\t\t\t\tcase OperatorIds.LEFT_SHIFT :", "-\t\t\t\tcase RIGHT_SHIFT :", "+\t\t\t\tcase OperatorIds.RIGHT_SHIFT :", "-\t\t\t\tcase UNSIGNED_RIGHT_SHIFT :", "+\t\t\t\tcase OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\tcase AND :", "+\t\t\t\tcase OperatorIds.AND :", "-\t\t\t\tcase OR :", "+\t\t\t\tcase OperatorIds.OR :", "-\t\t\t\tcase XOR :", "+\t\t\t\tcase OperatorIds.XOR :", "-\t\tcase T_long :", "+\t\tcase TypeIds.T_long :", "-\t\t\t\tcase PLUS :", "+\t\t\t\tcase OperatorIds.PLUS :", "-\t\t\t\tcase MINUS :", "+\t\t\t\tcase OperatorIds.MINUS :", "-\t\t\t\tcase MULTIPLY :", "+\t\t\t\tcase OperatorIds.MULTIPLY :", "-\t\t\t\tcase DIVIDE :", "+\t\t\t\tcase OperatorIds.DIVIDE :", "-\t\t\t\tcase REMAINDER :", "+\t\t\t\tcase OperatorIds.REMAINDER :", "-\t\t\t\tcase LEFT_SHIFT :", "+\t\t\t\tcase OperatorIds.LEFT_SHIFT :", "-\t\t\t\tcase RIGHT_SHIFT :", "+\t\t\t\tcase OperatorIds.RIGHT_SHIFT :", "-\t\t\t\tcase UNSIGNED_RIGHT_SHIFT :", "+\t\t\t\tcase OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\tcase AND :", "+\t\t\t\tcase OperatorIds.AND :", "-\t\t\t\tcase OR :", "+\t\t\t\tcase OperatorIds.OR :", "-\t\t\t\tcase XOR :", "+\t\t\t\tcase OperatorIds.XOR :", "-\t\tcase T_float :", "+\t\tcase TypeIds.T_float :", "-\t\t\t\tcase PLUS :", "+\t\t\t\tcase OperatorIds.PLUS :", "-\t\t\t\tcase MINUS :", "+\t\t\t\tcase OperatorIds.MINUS :", "-\t\t\t\tcase MULTIPLY :", "+\t\t\t\tcase OperatorIds.MULTIPLY :", "-\t\t\t\tcase DIVIDE :", "+\t\t\t\tcase OperatorIds.DIVIDE :", "-\t\t\t\tcase REMAINDER :", "+\t\t\t\tcase OperatorIds.REMAINDER :", "-\t\tcase T_double :", "+\t\tcase TypeIds.T_double :", "-\t\t\t\tcase PLUS :", "+\t\t\t\tcase OperatorIds.PLUS :", "-\t\t\t\tcase MINUS :", "+\t\t\t\tcase OperatorIds.MINUS :", "-\t\t\t\tcase MULTIPLY :", "+\t\t\t\tcase OperatorIds.MULTIPLY :", "-\t\t\t\tcase DIVIDE :", "+\t\t\t\tcase OperatorIds.DIVIDE :", "-\t\t\t\tcase REMAINDER :", "+\t\t\t\tcase OperatorIds.REMAINDER :"]}], "num": 57890}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "498dec830d3abe5048903d9f20656d1f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2106b1c2589e635545571eeab0e437e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference, TypeBinding[] argTypes)", "signatureAfterChange": "  \tpublic boolean detectCycle(TypeBinding superType, TypeReference reference, TypeBinding[] argTypes)", "diff": ["-\tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference, TypeBinding[] argTypes) {", "+\tpublic boolean detectCycle(TypeBinding superType, TypeReference reference, TypeBinding[] argTypes) {", "+\t\tif (!(superType instanceof ReferenceBinding)) return false;", "+", "+\t\t\tif (superType.isTypeVariable())", "+\t\t\t\treturn false; // error case caught in resolveSuperType()", "-\t\t\treturn detectCycle(referenceContext.binding, superType, reference);", "+\t\t\tcompilationUnitScope().recordSuperTypeReference(superType); // to record supertypes", "+\t\t\treturn detectCycle(referenceContext.binding, (ReferenceBinding) superType, reference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8e1e8c1eef46a1bf10a584a5eaabba7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "a553ab0efc253750fd6fd20126423a55431b0462", "commitAfterChange": "c37a92566081779e57ec58244a049f41ef8eac6b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\t \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t\t// need assertion flag: $assertionsDisabled on outer most source type", "-\t\tClassScope outerMostClassScope = currentScope.outerMostClassScope();", "-\t\tSourceTypeBinding sourceTypeBinding = outerMostClassScope.enclosingSourceType();", "-\t\tthis.assertionSyntheticFieldBinding = sourceTypeBinding.addSyntheticField(this, currentScope);", "+\t\t// need assertion flag: $assertionsDisabled on outer most source clas", "+\t\t// (in case of static member of interface, will use the outermost static member - bug 22334)", "+\t\tSourceTypeBinding outerMostClass = currentScope.enclosingSourceType();", "+\t\twhile (outerMostClass.isNestedType()){", "+\t\t\tReferenceBinding enclosing = outerMostClass.enclosingType();", "+\t\t\tif (enclosing == null || enclosing.isInterface()) break;", "+\t\t\touterMostClass = (SourceTypeBinding) enclosing;", "+\t\t}", "+", "+\t\tthis.assertionSyntheticFieldBinding = outerMostClass.addSyntheticField(this, currentScope);", "-\t\tTypeDeclaration typeDeclaration = outerMostClassScope.referenceType();", "+\t\tTypeDeclaration typeDeclaration = outerMostClass.scope.referenceType();"]}], "num": 51603}
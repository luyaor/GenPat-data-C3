{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52d7a08d48d50705377db7f334a0a201", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "147218c778cf0fbb9b19687d5fc5a573", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "cd68b167bcb2c40d959f9db282b6c0fe02c36af3", "commitAfterChange": "56bc267ccbb561e15a1def744b67e8208e4ddb23", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\t\t\t\t} else if (!method.original().areTypeVariableErasuresEqual(method2.original())) {", "+\t\t\t\t\t\t// cannot override an inherited method if type variables are not compatible", "+\t\t\t\t\t\tcontinue nextVisible;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c27101fa5421922a3ce9e3da7f42147", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a20c7987b715f8a0fad829453c4bde4984a825aa", "commitAfterChange": "18214de46fa9202fa142bc8c10e22754e8ddc00c", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tprivate Set findBottomSet(Set constraints, Set allOutputVariables)", "signatureAfterChange": "  \tprivate Set findBottomSet(Set constraints, Set allOutputVariables)", "diff": ["-\t\t// 18.5.2 bullet 5.1", "+\t\t// 18.5.2 bullet 6.1", "+\t\t\t\tif (allOutputVariables.contains(in)) // not explicit in the spec, but let's assume any inference variable depends on itself", "+\t\t\t\t\tcontinue constraintLoop;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2a5e7f9556ffd5e0bce78f7d776d457", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "3e46de81fd9b6212e2fd963b5eb609700fda2ced", "commitAfterChange": "a96aa9c23005bae79eeab94b73fb31e145f5ba7a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate int elementType(IResource res, int kind, int flags, int parentType, boolean isPkgFragmentRoot)", "signatureAfterChange": "\r \tprivate int elementType(IResource res, int kind, int flags, int parentType, boolean isPkgFragmentRoot)", "diff": ["+\t\t\t\t\t} else if (this.roots.get(res.getFullPath()) != null) {\r", "+\t\t\t\t\t\t// case of proj=src=bin and resource is a jar file on the classpath\r", "+\t\t\t\t\t\treturn IJavaElement.PACKAGE_FRAGMENT_ROOT;\r"]}], "num": 59549}
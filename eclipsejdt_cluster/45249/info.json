{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e9ba5c7d63d33e2c5fdd992790ab551", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58ef1eac69a04cbed7184a6106ec5797", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "d9fda77d232da7f091dc88d9a558643b5c785959", "commitAfterChange": "ba572e75ccc281ead35081ded887517feadc6035", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public AnnotationBinding[][] getParameterAnnotations()", "signatureAfterChange": " public AnnotationBinding[][] getParameterAnnotations()", "diff": ["-\tif (allParameterAnnotations == null) {", "+\tif (allParameterAnnotations == null && (this.tagBits & TagBits.HasParameterAnnotations) != 0) {", "-\t\tif ((this.tagBits & TagBits.HasParameterAnnotations) != 0) {", "-\t\t\t// forward reference to method, where param annotations have not yet been associated to method", "-\t\t\tif (this.declaringClass instanceof SourceTypeBinding) {", "-\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) this.declaringClass;", "-\t\t\t\tif (sourceType.scope != null) {", "-\t\t\t\t\tAbstractMethodDeclaration methodDecl = sourceType.scope.referenceType().declarationOf(this);", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "-\t\t\t\t\t\tif (argument.annotations != null) {", "-\t\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "-\t\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tallParameterAnnotations[i] = Binding.NO_ANNOTATIONS;", "+\t\t// forward reference to method, where param annotations have not yet been associated to method", "+\t\tif (this.declaringClass instanceof SourceTypeBinding) {", "+\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) this.declaringClass;", "+\t\t\tif (sourceType.scope != null) {", "+\t\t\t\tAbstractMethodDeclaration methodDecl = sourceType.scope.referenceType().declarationOf(this);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "+\t\t\t\t\tif (argument.annotations != null) {", "+\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "+\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99bd75d131ca7c5fd6ed9b96161861d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "3c1fddff6d397917a4f2c0ea6ea46a4e7420b00d", "commitAfterChange": "509e23a47cec653aabf10f57bfcca245aaa6e4e2", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": "  \tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit)", "signatureAfterChange": "  \tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit)", "diff": ["-\t\t\t\t\tconstantPoolName = new char[classNameLength + dimensions];", "-\t\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "-\t\t\t\t\t\tconstantPoolName[i] = '[';", "-\t\t\t\t\t}", "-\t\t\t\t\tSystem.arraycopy(className, 0, constantPoolName, dimensions, classNameLength);", "+\t\t\t\t\t// class name is already the name of the right array type with all dimensions", "+\t\t\t\t\tconstantPoolName = new char[classNameLength];", "+\t\t\t\t\tSystem.arraycopy(className, 0, constantPoolName, 0, classNameLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c10f3a1da6a33be08a0f2d407101be7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "d137239e9d64b43b4573cdfef965a2c47040a54e", "commitAfterChange": "448d62b2ff66cd7ed3c1bda65bd5259a6d0971b0", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void addConstantFieldsMask(UnconditionalFlowInfo other)", "signatureAfterChange": " public void addConstantFieldsMask(UnconditionalFlowInfo other)", "diff": ["-\t    \tif (otherLen > (oldLength = this.extraConstantFieldMask.length)) {", "+\t    \tif (otherLen >= (oldLength = this.extraConstantFieldMask.length)) {", "-\t\t\t\tfor (int i = 0; i < oldLength; i++) {", "-\t\t\t\t\tthis.extraConstantFieldMask[i] |= other.extraConstantFieldMask[i];", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0; i < otherLen; i++) {", "-\t\t\t\t\tthis.extraConstantFieldMask[i] |= other.extraConstantFieldMask[i];", "-\t\t\t\t}", "+\t\t\t}", "+\t    \tfor (int i = 0; i < this.extraConstantFieldMask.length; i++) {", "+\t\t\t\tthis.extraConstantFieldMask[i] |= other.extraConstantFieldMask[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2ffa4d54c2abc20feefd723b3d1982c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "56242f2c4a4e3fdfdcffa7d9541655946a7953f8", "commitAfterChange": "40f76b3d0fb01a4a7fa1aad4b09c356c31458c94", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus)", "signatureAfterChange": " static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus)", "diff": ["-\t\t\treturn 3; // mismatching annotations", "+\t\t\treturn 2; // mismatching annotations", "-\t\t\tif (requiredBits == TagBits.AnnotationNonNull) {", "-\t\t\t\tif ((nullStatus & FlowInfo.POTENTIALLY_NULL) != 0) {", "-\t\t\t\t\treturn 1; // @NonNull vs. inferred @Nullable", "-\t\t\t\t} else if (nullStatus == FlowInfo.NULL) {", "-\t\t\t\t\treturn 1; // @NonNull vs. null", "-\t\t\t\t} else if (nullStatus == FlowInfo.NON_NULL) {", "-\t\t\t\t\treturn 0;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn 2; // need unchecked conversion regarding type detail", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\treturn 2; // need unchecked conversion regarding type detail", "+\t\t\tif (requiredBits == TagBits.AnnotationNonNull && nullStatus == FlowInfo.NON_NULL) {", "+\t\t\t\treturn 0; // OK by flow analysis", "+\t\t\treturn 1; // need unchecked conversion regarding type detail", "-\treturn 0;", "+\treturn 0; // OK by tagBits"]}], "num": 45249}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2492c8e859d2531ede8f8168a7051157", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a8c481bb824da09b049e7ce9d8316a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprotected Object createArgumentReference(char[] name, int dim, Object typeRef, int argEnd) throws InvalidInputException", "diff": ["+\tprotected Object createArgumentReference(char[] name, int dim, Object typeRef, int argEnd) throws InvalidInputException {", "+\t\ttry {", "+\t\t\tTypeReference argTypeRef = (TypeReference) typeRef;", "+\t\t\tif (dim > 0) {", "+\t\t\t\tlong pos = ((long) argTypeRef.sourceStart) << 32 + argTypeRef.sourceEnd;", "+\t\t\t\t\targTypeRef = new JavadocArraySingleTypeReference(singleRef.token, dim, pos);", "+\t\t\t\t\targTypeRef = new JavadocArrayQualifiedTypeReference(qualifRef, dim);", "+\t\t\treturn new JavadocArgumentExpression(name, argTypeRef.sourceStart, argEnd, argTypeRef);", "-\t */", "-\tprivate boolean parseHref() throws InvalidInputException {", "-\t\tint start = this.scanner.getCurrentTokenStartPosition();", "-\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\tconsumeToken();", "-\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)", "-\t\t\t\t\t&& readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\tconsumeToken();", "-\t\t\t\ttry {", "-\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'h', 'r', 'e', 'f'}, false) &&", "-\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameEQUAL) {", "-\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameStringLiteral) {", "-\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "-\t\t\t\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n' || this.scanner.getCurrentTokenStartPosition() > this.lineEnd) {", "-\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "-\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameDIVIDE) {", "-\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)\t&&", "-\t\t\t\t\t\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\t\t\t// Valid href", "-\t\t\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} catch (InvalidInputException ex) {", "-\t\t\t\t\t// Do nothing as we want to keep positions for error message", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "-\t\treturn false;", "-\t}", "+\t\tcatch (ClassCastException ex) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72069da6f53f263cb3fbea00bb8f4d85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "1784048e951cac8e5c6590cc5827817757e6384e", "commitAfterChange": "4a48abb3b4027036bdeac61104059b6c83710144", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprivate boolean parseHref() throws InvalidInputException", "diff": ["-\t\t//int end = this.scanner.getCurrentTokenEndPosition();", "-\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t//end = this.index-1;", "+\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\tconsumeToken();", "-\t\t\t\t\t&& readTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t//end = this.index - 1;", "+\t\t\t\t\t&& readToken() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\tconsumeToken();", "-\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameEQUAL &&", "-\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameStringLiteral &&", "-\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\twhile (readTokenAndConsume() != TerminalTokens.TokenNameLESS) {", "-\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.lineEnd) {", "-\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd - 1);", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameDIVIDE\t&&", "-\t\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t\t\t\t//end = this.index - 1;", "-\t\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)\t&&", "-\t\t\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\t// Valid href", "-\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameEQUAL) {", "+\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameStringLiteral) {", "+\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "+\t\t\t\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n' || this.scanner.getCurrentTokenStartPosition() > this.lineEnd) {", "+\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameDIVIDE) {", "+\t\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)\t&&", "+\t\t\t\t\t\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\t\t\t\t// Valid href", "+\t\t\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t// Place to change end position for error report", "-\t\t\t\t\t//end = getEndPosition();", "+\t\t\t\t\t// Do nothing as we want to keep positions for error message", "-\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd - 1);", "+\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);"]}], "num": 29805}
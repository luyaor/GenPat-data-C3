{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3e301373d759a4195b1bc6442445c7e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5659e49ed06d82fde5200e537fae9aa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static CompilationUnit parsePartialCompilationUnit(         IClassFile classFile, \t\tint position, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parsePartialCompilationUnit(         IClassFile classFile, \t\tint position, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "diff": ["-\t\tif (owner == null) {", "-\t\t\towner = DefaultWorkingCopyOwner.PRIMARY;", "-\t\t}", "-", "-\t\tchar[] source = null;", "-\t\tString sourceString = null;", "-\t\ttry {", "-\t\t\tsourceString = classFile.getSource();", "-\t\t} catch (JavaModelException e) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-", "-\t\tif (sourceString == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tsource = sourceString.toCharArray();", "-", "-\t\tNodeSearcher searcher = new NodeSearcher(position);", "-", "-\t\tfinal Map options = classFile.getJavaProject().getOptions(true);", "-\t\tif (resolveBindings) {", "-\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "-\t\t\ttry {", "-\t\t\t\t// parse and resolve", "-\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.resolve(", "-\t\t\t\t\tclassFile,", "-\t\t\t\t\tsearcher,", "-\t\t\t\t\tfalse/*don't cleanup*/,", "-\t\t\t\t\tsource,", "-\t\t\t\t\towner,", "-\t\t\t\t\tmonitor);", "-\t\t\t\t", "-\t\t\t\tASTConverter converter = new ASTConverter(options, true, monitor);", "-\t\t\t\tAST ast = new AST();", "-\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "-\t\t\t\tast.setBindingResolver(resolver);", "-\t\t\t\tconverter.setAST(ast);", "-\t\t\t", "-\t\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration, source);", "-\t\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\t\treturn compilationUnit;", "-\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "-\t\t\t\t * then we simply do a parsing without creating bindings.", "-\t\t\t\t * Therefore all binding resolution will return null.", "-\t\t\t\t */", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration2 = CompilationUnitResolver.parse(", "-\t\t\t\t\tsource,", "-\t\t\t\t\tsearcher,", "-\t\t\t\t\toptions);", "-\t\t\t\t", "-\t\t\t\tASTConverter converter = new ASTConverter(options, false, monitor);", "-\t\t\t\tAST ast = new AST();", "-\t\t\t\tfinal BindingResolver resolver = new BindingResolver();", "-\t\t\t\tast.setBindingResolver(resolver);", "-\t\t\t\tconverter.setAST(ast);", "-\t", "-\t\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration2, source);", "-\t\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration2.compilationResult.lineSeparatorPositions);", "-\t\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\t\treturn compilationUnit;", "-\t\t\t} finally {", "-\t\t\t\tif (compilationUnitDeclaration != null) {", "-\t\t\t\t\tcompilationUnitDeclaration.cleanUp();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = CompilationUnitResolver.parse(", "-\t\t\t\tsource,", "-\t\t\t\tsearcher,", "-\t\t\t\toptions);", "-\t\t\t", "-\t\t\tASTConverter converter = new ASTConverter(options, false, monitor);", "-\t\t\tAST ast = new AST();", "-\t\t\tfinal BindingResolver resolver = new BindingResolver();", "-\t\t\tast.setBindingResolver(resolver);", "-\t\t\tconverter.setAST(ast);", "-", "-\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration, source);", "-\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\treturn compilationUnit;", "-\t\t}", "+\t\tASTParser c = ASTParser.internalNewParser2();", "+\t\tc.setSource(classFile);", "+\t\tc.setPartial(position);", "+\t\tc.setResolveBindings(resolveBindings);", "+\t\tc.setWorkingCopyOwner(owner);", "+\t\tASTNode result = c.createAST(monitor);", "+\t\treturn (CompilationUnit) result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fdda96e56e8cac589d65ff75e44f467", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate static CompilationUnit parsePartialCompilationUnit( \t    IClassFile classFile, \t\tint position, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void propagateErrors(ASTNode astNode, IProblem[] problems)", "diff": ["+\tprivate void propagateErrors(ASTNode astNode, IProblem[] problems) {", "+\t\tASTSyntaxErrorPropagator syntaxErrorPropagator = new ASTSyntaxErrorPropagator(problems);", "+\t\tastNode.accept(syntaxErrorPropagator);", "-\t */", "-\tprivate static CompilationUnit parsePartialCompilationUnit(", "-\t    IClassFile classFile,", "-\t\tint position,", "-\t\tboolean resolveBindings,", "-\t\tWorkingCopyOwner owner,", "-\t\tIProgressMonitor monitor) {", "-\t\t\t\t", "-\t\tif (classFile == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (owner == null) {", "-\t\t\towner = DefaultWorkingCopyOwner.PRIMARY;", "-\t\t}", "-\t", "-\t\tchar[] source = null;", "-\t\tString sourceString = null;", "-\t\ttry {", "-\t\t\tsourceString = classFile.getSource();", "-\t\t} catch (JavaModelException e) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t", "-\t\tif (sourceString == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tsource = sourceString.toCharArray();", "-\t", "-\t\tNodeSearcher searcher = new NodeSearcher(position);", "-\t", "-\t\tfinal Map options = classFile.getJavaProject().getOptions(true);", "-\t\tif (resolveBindings) {", "-\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "-\t\t\ttry {", "-\t\t\t\t// parse and resolve", "-\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.resolve(", "-\t\t\t\t\tclassFile,", "-\t\t\t\t\tsearcher,", "-\t\t\t\t\tfalse/*don't cleanup*/,", "-\t\t\t\t\tsource,", "-\t\t\t\t\towner,", "-\t\t\t\t\tmonitor);", "-\t\t\t\t", "-\t\t\t\tASTConverter converter = new ASTConverter(options, true, monitor);", "-\t\t\t\tAST ast = AST.newAST(AST.LEVEL_2_0);", "-\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "-\t\t\t\tast.setBindingResolver(resolver);", "-\t\t\t\tconverter.setAST(ast);", "-\t\t\t", "-\t\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration, source);", "-\t\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\t\treturn compilationUnit;", "-\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "-\t\t\t\t * then we simply do a parsing without creating bindings.", "-\t\t\t\t * Therefore all binding resolution will return null.", "-\t\t\t\t */", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration2 = CompilationUnitResolver.parse(", "-\t\t\t\t\tsource,", "-\t\t\t\t\tsearcher,", "-\t\t\t\t\toptions);", "-\t\t\t\t", "-\t\t\t\tASTConverter converter = new ASTConverter(options, false, monitor);", "-\t\t\t\tAST ast = AST.newAST(AST.LEVEL_2_0);", "-\t\t\t\tfinal BindingResolver resolver = new BindingResolver();", "-\t\t\t\tast.setBindingResolver(resolver);", "-\t\t\t\tconverter.setAST(ast);", "-\t", "-\t\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration2, source);", "-\t\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration2.compilationResult.lineSeparatorPositions);", "-\t\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\t\treturn compilationUnit;", "-\t\t\t} finally {", "-\t\t\t\tif (compilationUnitDeclaration != null) {", "-\t\t\t\t\tcompilationUnitDeclaration.cleanUp();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = CompilationUnitResolver.parse(", "-\t\t\t\tsource,", "-\t\t\t\tsearcher,", "-\t\t\t\toptions);", "-\t\t\t", "-\t\t\tASTConverter converter = new ASTConverter(options, false, monitor);", "-\t\t\tAST ast = AST.newAST(AST.LEVEL_2_0);", "-\t\t\tfinal BindingResolver resolver = new BindingResolver();", "-\t\t\tast.setBindingResolver(resolver);", "-\t\t\tconverter.setAST(ast);", "-\t", "-\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration, source);", "-\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\treturn compilationUnit;", "-\t\t}", "-\t}"]}], "num": 40534}
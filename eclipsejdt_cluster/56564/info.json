{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17bc6df782715aede9196db17d6680d8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4792328c7a406375ea0e381ad9abd14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "7163191ad837ee4dbd99301bb257966d1ab9ea7a", "commitAfterChange": "efcbc8246985c2d4ce62d9f4d57040e9d6aab069", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tstatic boolean isAnnotationTargetAllowed(Annotation annotation, BlockScope scope, TypeBinding annotationType, int kind)", "signatureAfterChange": "  \tprivate static boolean isAnnotationTargetAllowed(Binding recipient, BlockScope scope, TypeBinding annotationType, int kind, long metaTagBits)", "diff": ["+\tprivate static boolean isAnnotationTargetAllowed(Binding recipient, BlockScope scope, TypeBinding annotationType, int kind, long metaTagBits) {", "+\t\tswitch (kind) {", "+\t\t\tcase Binding.PACKAGE :", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "+\t\t\t\t\treturn true;", "+\t\t\t\telse if (scope.compilerOptions().sourceLevel <= ClassFileConstants.JDK1_6) {", "+\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) recipient;", "+\t\t\t\t\tif (CharOperation.equals(sourceType.sourceName, TypeConstants.PACKAGE_INFO_NAME))", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE_USE :", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t// jsr 308", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\t\t// already reported as syntax error; don't report secondary problems", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE :", "+\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tif (((ReferenceBinding)recipient).isAnnotationType()) {", "+\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0)", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & (TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForPackage) != 0) {", "+\t\t\t\t\tif (CharOperation.equals(((ReferenceBinding) recipient).sourceName, TypeConstants.PACKAGE_INFO_NAME))", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.METHOD :", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) recipient;", "+\t\t\t\tif (methodBinding.isConstructor()) {", "+\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForConstructor | TagBits.AnnotationForTypeUse)) != 0)", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) methodBinding.declaringClass;", "+\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(methodBinding);", "+\t\t\t\t\tif (isTypeUseCompatible(methodDecl.returnType, scope)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.FIELD :", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tFieldBinding sourceField = (FieldBinding) recipient;", "+\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) sourceField.declaringClass;", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "+\t\t\t\t\tif (isTypeUseCompatible(fieldDeclaration.type, scope)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.LOCAL :", "+\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) recipient;", "+\t\t\t\tif ((localVariableBinding.tagBits & TagBits.IsArgument) != 0) {", "+\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391196", "+\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}", "-\t\tswitch (kind) {", "-\t\t\tcase Binding.PACKAGE :", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "-\t\t\t\t\treturn true;", "-\t\t\t\telse if (scope.compilerOptions().sourceLevel <= ClassFileConstants.JDK1_6) {", "-\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) annotation.recipient;", "-\t\t\t\t\tif (CharOperation.equals(sourceType.sourceName, TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE_USE :", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t// jsr 308", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\t\t// already reported as syntax error; don't report secondary problems", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE :", "-\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\tif (((ReferenceBinding)annotation.recipient).isAnnotationType()) {", "-\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0)", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & (TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForPackage) != 0) {", "-\t\t\t\t\tif (CharOperation.equals(((ReferenceBinding) annotation.recipient).sourceName, TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.METHOD :", "-\t\t\t\tMethodBinding methodBinding = (MethodBinding) annotation.recipient;", "-\t\t\t\tif (methodBinding.isConstructor()) {", "-\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForConstructor | TagBits.AnnotationForTypeUse)) != 0)", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) methodBinding.declaringClass;", "-\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(methodBinding);", "-\t\t\t\t\tif (isTypeUseCompatible(methodDecl.returnType, scope)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.FIELD :", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tFieldBinding sourceField = (FieldBinding) annotation.recipient;", "-\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) sourceField.declaringClass;", "-\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "-\t\t\t\t\tif (isTypeUseCompatible(fieldDeclaration.type, scope)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.LOCAL :", "-\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) annotation.recipient;", "-\t\t\t\tif ((localVariableBinding.tagBits & TagBits.IsArgument) != 0) {", "-\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391196", "-\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t}", "-\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f100eac1f892ab360df76d50353d23c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "fe6ffdef0750d72bbc70fe8bbcab741af97eada4", "commitAfterChange": "73a5ad5796e2751191a9ca65c5fd12f72d0d03d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+}", "-\t\t\t\t\t\t\t\t// relocate if finding another quote fairly close: thus unicode '/u000D' will be fully consumed", "-\t\t\t\t\t\t\t\t\tint start = this.currentPosition;", "-\t\t\t\t\t\t\t\t\tfor (int lookAhead = 0; lookAhead < 50; lookAhead++) {", "-\t\t\t\t\t\t\t\t\t\tif (this.currentPosition >= this.eofPosition) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition = start;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "-\t\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tisUnicode = false;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (!isUnicode && this.currentCharacter == '\\n') {", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition--; // set current position on new line character", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\\"') {", "-\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHAR_IN_STRING);", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tthis.currentPosition -= 5;", "+\t\t\t\t\t\t\t\t\twhile(this.source[this.currentPosition] != '\\\\') {", "+\t\t\t\t\t\t\t\t\t\tthis.currentPosition--;", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHAR_IN_STRING);", "+\t\t\t\t\t\t\t\treturn TokenNameStringLiteral;", "+\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\tisUnicode = false;", "-\t\t\t\t\t\tthrow new InvalidInputException(UNTERMINATED_STRING);", "+\t\t\t\t\t\treturn TokenNameStringLiteral;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (this.startPosition <= this.cursorLocation && this.cursorLocation <= this.currentPosition-1){", "-\t\t\t\t\t\tthrow new InvalidCursorLocation(InvalidCursorLocation.NO_COMPLETION_INSIDE_STRING);"]}], "num": 56564}
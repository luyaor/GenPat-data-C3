{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ffa0fa9f4e6d1e23602c110810df764", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f525e7da50a43ddbf62227612b07bff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void _test0100_if_else()", "signatureAfterChange": " public void test0300_if_else()", "diff": ["-\t// TODO (maxime) fix", "-\tpublic void _test0100_if_else() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"  public void foo() {\\n\" + \t\t\t\t", "-\t\t\t\t\"\t\t Object o = null;\\n\" + ", "-\t\t\t\t\"\t\t if (false) {\\n\" + ", "-\t\t\t\t\"\t\t\t o = new Object();\\n\" + // skipped ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t if (true) {\\n\" + ", "-\t\t\t\t\"\t\t\t //\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t else {\\n\" + ", "-\t\t\t\t\"\t\t\t o = new Object();\\n\" + // skipped", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t o.toString();\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"\to.toString();\\n\" + ", "-\t\t\t\"\t^\\n\" + ", "-\t\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t\t\t\"----------\\n\"  ", "-\t\t);", "-\t}", "+// {code...} volontary code exclusion pattern)", "+public void test0300_if_else() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  public void foo() {\\n\" +         ", "+\t\t\t\"    Object o = null;\\n\" + ", "+\t\t\t\"    if (false) {\\n\" + ", "+\t\t\t\"      o = new Object();\\n\" + // skipped ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    if (true) {\\n\" + ", "+\t\t\t\"      //\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    else {\\n\" + ", "+\t\t\t\"      o = new Object();\\n\" + // skipped", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"\to.toString();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e422df0f054131d0bfc5acaf4f8a43ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 222, "signatureBeforeChange": " \tpublic void test0302_switch()", "signatureAfterChange": " public void test0802_switch()", "diff": ["-\t// null analysis -- switch", "-\tpublic void test0302_switch() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\tint k;\\n\" + ", "-\t\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\t\"\t\tObject o = null;\\n\" + ", "-\t\t\t\t\"\t\tswitch (k) {\\n\" + ", "-\t\t\t\t\"\t\t\tcase 0 :\\n\" + ", "-\t\t\t\t\"\t\t\t\to.toString();\\n\" + // complain: o can only be null", "-\t\t\t\t\"\t\t\t\tbreak;\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\t\"\to.toString();\\n\" + ", "-\t\t\t\"\t^\\n\" + ", "-\t\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}", "+// null analysis -- switch", "+public void test0802_switch() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\" int k;\\n\" + ", "+\t\t\t\" void foo() {\\n\" + ", "+\t\t\t\"   Object o = null;\\n\" + ", "+\t\t\t\"   switch (k) {\\n\" + ", "+\t\t\t\"     case 0 :\\n\" + ", "+\t\t\t\"       o.toString();\\n\" + // complain: o can only be null", "+\t\t\t\"       break;\\n\" + ", "+\t\t\t\"   }\\n\" + ", "+\t\t\t\" }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\to.toString();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}], "num": 64049}
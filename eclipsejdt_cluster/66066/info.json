{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31c63bff2105249aee9c7e91bcf6037b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "833bbfab3e567aa5fe31bc3f910b66e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "649631b834e755f12bf40b9c916ce9dfc765a8d0", "commitAfterChange": "19a679a95bc1c8afc10cb50ce5a617f6914888ae", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static char[] getSignature(Binding binding)", "signatureAfterChange": " \t \tpublic static char[] getSignature(MethodBinding methodBinding)", "diff": ["-\tpublic static char[] getSignature(Binding binding) {", "+\t", "+\tpublic static char[] getSignature(MethodBinding methodBinding) {", "-\t\tif ((binding.kind() & Binding.TYPE) != 0) {", "-\t\t\tTypeBinding typeBinding = (TypeBinding)binding;", "-\t\t\tresult = typeBinding.genericTypeSignature();", "-\t\t} else if ((binding.kind() & Binding.METHOD) != 0) {", "-\t\t\tMethodBinding methodBinding = (MethodBinding)binding;", "-\t\t\tint oldMod = methodBinding.modifiers;", "-\t\t\t//TODO remove the next line when method from binary type will be able to generate generic siganute", "-\t\t\tmethodBinding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "-\t\t\tresult = methodBinding.genericSignature();", "-\t\t\tif(result == null) {", "-\t\t\t\tresult = methodBinding.signature();", "-\t\t\t}", "-\t\t\tmethodBinding.modifiers = oldMod;", "+\t\t", "+\t\tint oldMod = methodBinding.modifiers;", "+\t\t//TODO remove the next line when method from binary type will be able to generate generic signature", "+\t\tmethodBinding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "+\t\tresult = methodBinding.genericSignature();", "+\t\tif(result == null) {", "+\t\t\tresult = methodBinding.signature();", "+\t\tmethodBinding.modifiers = oldMod;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd82e419922d59bfd1f93e4aa4b94329", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic static String getSignature(Binding binding)", "signatureAfterChange": " \t \tpublic static char[] getSignature(Binding binding)", "diff": ["-\tpublic static String getSignature(Binding binding) {", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tappendSignature(binding, buffer);", "-\t\treturn buffer.toString();", "-\t}", "+\tpublic static char[] getSignature(Binding binding) {", "+\t\tchar[] result = null;", "+\t\t\t\tTypeBinding typeBinding = (TypeBinding)binding;", "+\t\t\t\tif(typeBinding.isLocalType()) {", "+\t\t\t\t\tLocalTypeBinding localTypeBinding = (LocalTypeBinding)typeBinding;", "+\t\t\t\t\tif(localTypeBinding.isAnonymousType()) {", "+\t\t\t\t\t\ttypeBinding = localTypeBinding.superclass();", "+\t\t\t\t\t\tlocalTypeBinding.setConstantPoolName(typeBinding.sourceName());", "+\t\t\t\tresult = typeBinding.genericTypeSignature();", "+\t\t\t\tbreak;", "+\t\t\tcase BindingIds.METHOD:", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding)binding;", "+\t\t\t\tint oldMod = methodBinding.modifiers;", "+\t\t\t\t//TODO remove the next line when method from binary type will be able to generate generic siganute", "+\t\t\t\tmethodBinding.modifiers |= CompilerModifiers.AccGenericSignature;", "+\t\t\t\tresult = methodBinding.genericSignature(); ", "+\t\t\t\tif(result == null) {", "+\t\t\t\t\tresult = methodBinding.signature();", "+\t\t\t\t}", "+\t\t\t\tmethodBinding.modifiers = oldMod;", "+\t\tresult = CharOperation.replaceOnCopy(result, '/', '.');", "+\t\treturn result;"]}], "num": 66066}
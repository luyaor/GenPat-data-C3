{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ada7eb0de74ac9bf3fd5a48a0d400d4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171d3aa6ea5db218b09307218430d095", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "c7e13eb999aeeb70fd34b19df0f27a778109206c", "commitAfterChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate boolean collectElements()", "signatureAfterChange": " \tprivate boolean collectElements()", "diff": ["+\t\t_elementH = _elementUtils.getTypeElement(\"targets.model.pc.H\");", "+\t\tif (_elementH == null || _elementH.getKind() != ElementKind.CLASS) {", "+\t\t\treportError(\"element H was not found or was not a class\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\t_elementAnnoX = _elementUtils.getTypeElement(\"targets.model.pc.AnnoX\");", "+\t\tif (null == _elementAnnoX || _elementAnnoX.getKind() != ElementKind.ANNOTATION_TYPE) {", "+\t\t\treportError(\"annotation type annoX was not found or was not an annotation\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tfor (ExecutableElement method : ElementFilter.methodsIn(_elementAnnoX.getEnclosedElements())) {", "+\t\t\tif (\"value\".equals(method.getSimpleName().toString())) {", "+\t\t\t\t_annoXValue = method;", "+\t\t\t}", "+\t\t}", "+\t\tif (null == _annoXValue) {", "+\t\t\treportError(\"Could not find value() method in annotation type AnnoX\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\t_elementAnnoY = _elementUtils.getTypeElement(\"targets.model.pc.AnnoY\");", "+\t\tif (null == _elementAnnoY || _elementAnnoY.getKind() != ElementKind.ANNOTATION_TYPE) {", "+\t\t\treportError(\"annotation type annoY was not found or was not an annotation\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tfor (ExecutableElement method : ElementFilter.methodsIn(_elementAnnoY.getEnclosedElements())) {", "+\t\t\tif (\"value\".equals(method.getSimpleName().toString())) {", "+\t\t\t\t_annoYValue = method;", "+\t\t\t}", "+\t\t}", "+\t\tif (null == _annoYValue) {", "+\t\t\treportError(\"Could not find value() method in annotation type AnnoY\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c85f11b24355cc27fbd7ca521722d627", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "53380a5830867128cd28d10f3919067730bbfb82", "commitAfterChange": "c0f393752b7d4523a5fc372912c7b4e192e52da7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprotected void createTag()", "signatureAfterChange": " \tprotected void createTag()", "diff": ["-\t\tTagElement tag = this.ast.newTagElement();", "+\t\tTagElement tagElement = this.ast.newTagElement();", "-\t\ttag.setTagName(new String(this.source, start, this.tagSourceEnd-start+1));", "+\t\tString tagName = new String(this.source, start, this.tagSourceEnd-start+1);", "+\t\tswitch (tagName.charAt(0)) {", "+\t\t\tcase 'a':", "+\t\t\t\tif (tagName.equals(TagElement.TAG_AUTHOR)) {", "+\t\t\t\t\ttagName = TagElement.TAG_AUTHOR;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'd':", "+\t\t\t\tif (tagName.equals(TagElement.TAG_DOCROOT)) {", "+\t\t\t\t\ttagName = TagElement.TAG_DOCROOT;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'r':", "+\t\t\t\tif (tagName.equals(TagElement.TAG_RETURN)) {", "+\t\t\t\t\ttagName = TagElement.TAG_RETURN;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 's':", "+\t\t\t\tif (tagName.equals(TagElement.TAG_SERIAL)) {", "+\t\t\t\t\ttagName = TagElement.TAG_SERIAL;", "+\t\t\t\t} else  if (tagName.equals(TagElement.TAG_SERIALDATA)) {", "+\t\t\t\t\ttagName = TagElement.TAG_SERIALDATA;", "+\t\t\t\t} else if (tagName.equals(TagElement.TAG_SERIALFIELD)) {", "+\t\t\t\t\ttagName = TagElement.TAG_SERIALFIELD;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase 'v':", "+\t\t\t\tif (tagName.equals(TagElement.TAG_VERSION)) {", "+\t\t\t\t\ttagName = TagElement.TAG_VERSION;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\ttagElement.setTagName(tagName);", "-\t\t\tpreviousTag.fragments().add(tag);", "+\t\t\tpreviousTag.fragments().add(tagElement);", "-\t\t\tpushOnAstStack(tag, true);", "+\t\t\tpushOnAstStack(tagElement, true);", "-\t\ttag.setSourceRange(start, this.tagSourceEnd-start+1);", "+\t\ttagElement.setSourceRange(start, this.tagSourceEnd-start+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e769077ec8541fe27e96108b50fd4cc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java", "commitBeforeChange": "4cba6159f283363f8bd747cb4e532be44a8b1a70", "commitAfterChange": "83ac320f656827a9d8ea883f97b343912fdaf3c7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate Object convertToMirrorType(Object value, TypeBinding type, int kind[])", "signatureAfterChange": " \tprivate Object convertToMirrorType(Object value, TypeBinding type, int kind[])", "diff": ["-\t\tif (value instanceof Constant) {", "-\t\t\tif (type instanceof BaseTypeBinding) {", "-\t\t\t\tkind[0] = ((BaseTypeBinding)type).id;", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tkind[0] = ((Constant)value).typeID();", "-\t\t\t}", "-\t\t\tswitch (kind[0]) {", "-\t\t\tcase T_boolean:", "-\t\t\t\treturn ((Constant)value).booleanValue();", "-\t\t\tcase T_byte:", "-\t\t\t\treturn ((Constant)value).byteValue();", "-\t\t\tcase T_char:", "-\t\t\t\treturn ((Constant)value).charValue();", "-\t\t\tcase T_double:", "-\t\t\t\treturn ((Constant)value).doubleValue();", "-\t\t\tcase T_float:", "-\t\t\t\treturn ((Constant)value).floatValue();", "-\t\t\tcase T_int:", "-\t\t\t\ttry {", "-\t\t\t\t\treturn ((Constant)value).intValue();", "-\t\t\t\t} catch (ShouldNotImplement e) {", "+\t\tif (type == null) {", "+\t\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t} else if (type instanceof BaseTypeBinding || type.id == TypeIds.T_JavaLangString) {", "+\t\t\tif (value == null) {", "+\t\t\t\tif (type instanceof BaseTypeBinding", "+\t\t\t\t\t\t|| type.id == TypeIds.T_JavaLangString) {", "+\t\t\t\t\t// return a string with error in it to reflect a value that could not be resolved", "+\t\t\t\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\t\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t\t\t} else if (type.isAnnotationType()) {", "+\t\t\t\t\tkind[0] = T_AnnotationMirror;", "+\t\t\t\t\treturn _env.getFactory().newAnnotationMirror(null);", "+\t\t\t\t}", "+\t\t\t} else if (value instanceof Constant) {", "+\t\t\t\tif (type instanceof BaseTypeBinding) {", "+\t\t\t\t\tkind[0] = ((BaseTypeBinding)type).id;", "+\t\t\t\t}", "+\t\t\t\telse if (type.id == TypeIds.T_JavaLangString) {", "+\t\t\t\t\tkind[0] = ((Constant)value).typeID();", "+\t\t\t\t} else {", "+\t\t\t\t\t// error case", "+\t\t\t\t\tkind[0] = TypeIds.T_JavaLangString;", "-\t\t\tcase T_JavaLangString:", "-\t\t\t\treturn ((Constant)value).stringValue();", "-\t\t\tcase T_long:", "-\t\t\t\treturn ((Constant)value).longValue();", "-\t\t\tcase T_short:", "-\t\t\t\treturn ((Constant)value).shortValue();", "+\t\t\t\tswitch (kind[0]) {", "+\t\t\t\tcase T_boolean:", "+\t\t\t\t\treturn ((Constant)value).booleanValue();", "+\t\t\t\tcase T_byte:", "+\t\t\t\t\treturn ((Constant)value).byteValue();", "+\t\t\t\tcase T_char:", "+\t\t\t\t\treturn ((Constant)value).charValue();", "+\t\t\t\tcase T_double:", "+\t\t\t\t\treturn ((Constant)value).doubleValue();", "+\t\t\t\tcase T_float:", "+\t\t\t\t\treturn ((Constant)value).floatValue();", "+\t\t\t\tcase T_int:", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (value instanceof LongConstant", "+\t\t\t\t\t\t\t\t|| value instanceof DoubleConstant", "+\t\t\t\t\t\t\t\t|| value instanceof FloatConstant) {", "+\t\t\t\t\t\t\t// error case", "+\t\t\t\t\t\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\t\t\t\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn ((Constant)value).intValue();", "+\t\t\t\t\t} catch (ShouldNotImplement e) {", "+\t\t\t\t\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\t\t\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\tcase T_JavaLangString:", "+\t\t\t\t\treturn ((Constant)value).stringValue();", "+\t\t\t\tcase T_long:", "+\t\t\t\t\treturn ((Constant)value).longValue();", "+\t\t\t\tcase T_short:", "+\t\t\t\t\treturn ((Constant)value).shortValue();", "+\t\t\t\t}", "-\t\t} else if (value instanceof FieldBinding) {", "-\t\t\tkind[0] = T_EnumConstant;", "-\t\t\treturn (VariableElement) _env.getFactory().newElement((FieldBinding) value);", "+\t\t} else if (type.isEnum()) {", "+\t\t\tif (value instanceof FieldBinding) {", "+\t\t\t\tkind[0] = T_EnumConstant;", "+\t\t\t\treturn (VariableElement) _env.getFactory().newElement((FieldBinding) value);", "+\t\t\t} else {", "+\t\t\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t\t}", "+\t\t} else if (type.isAnnotationType()) {", "+\t\t\tif (value instanceof AnnotationBinding) {", "+\t\t\t\tkind[0] = T_AnnotationMirror;", "+\t\t\t\treturn _env.getFactory().newAnnotationMirror((AnnotationBinding) value);", "+\t\t\t}", "-\t\t} else if (value instanceof AnnotationBinding) {", "-\t\t\tkind[0] = T_AnnotationMirror;", "-\t\t\treturn _env.getFactory().newAnnotationMirror((AnnotationBinding) value);", "-\t\t} ", "-\t\tthrow new IllegalArgumentException(\"Unexpected type for annotation value: \" + value); //$NON-NLS-1$", "+\t\t}", "+\t\t// error case", "+\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\treturn \"<error>\"; //$NON-NLS-1$"]}], "num": 28882}
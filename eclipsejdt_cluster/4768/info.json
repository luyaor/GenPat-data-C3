{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1609272a57b794f01b16aae6f597b28", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6c06940dd1973bf989c98a8bffec302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "c12a3a9781a2cb03fb343a1b11660c99cccf4eb5", "commitAfterChange": "25f6ec4d6e61ae8f45e86debb6fc86f45cfebab1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public int getNextToken() throws InvalidInputException", "signatureAfterChange": "  public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif (getNextChar('\\\\'))", "+\t\t\t\t\tif (getNextChar('\\\\')) {", "+\t\t\t\t\t\tif (this.unicodeAsBackSlash) {", "+\t\t\t\t\t\t\t// consume next character", "+\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\t\tunicodeStore();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.currentCharacter = this.source[this.currentPosition++];", "+\t\t\t\t\t\t}", "-\t\t\t\t\telse { // consume next character", "+\t\t\t\t\t} else { // consume next character", "-\t\t\t\t\t\t\t\tint escapeSize = this.currentPosition;", "-\t\t\t\t\t\t\t\tboolean backSlashAsUnicodeInString = this.unicodeAsBackSlash;", "-\t\t\t\t\t\t\t\t//scanEscapeCharacter make a side effect on this value and we need the previous value few lines down this one", "-\t\t\t\t\t\t\t\tscanEscapeCharacter();", "-\t\t\t\t\t\t\t\tescapeSize = this.currentPosition - escapeSize;", "-\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr == 0) {", "-\t\t\t\t\t\t\t\t\t//buffer all the entries that have been left aside....", "-", "-\t\t\t\t\t\t\t\t\tunicodeInitializeBuffer(this.currentPosition - escapeSize - 1 - this.startPosition);", "-\t\t\t\t\t\t\t\t\tthis.unicodeStore();", "-\t\t\t\t\t\t\t\t} else { //overwrite the / in the buffer", "-\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr--; // unicode store will increment", "-\t\t\t\t\t\t\t\t    this.unicodeStore();", "-\t\t\t\t\t\t\t\t\tif (backSlashAsUnicodeInString) { //there are TWO \\ in the stream where only one is correct", "+\t\t\t\t\t\t\t\tif (this.unicodeAsBackSlash) {", "+\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr--;", "+\t\t\t\t\t\t\t\t\t// consume next character", "+\t\t\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr == 0) {", "+\t\t\t\t\t\t\t\t\t\tunicodeInitializeBuffer(this.currentPosition - this.startPosition);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr --;", "+\t\t\t\t\t\t\t\t\tthis.currentCharacter = this.source[this.currentPosition++];", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// we need to compute the escape character in a separate buffer", "+\t\t\t\t\t\t\t\tscanEscapeCharacter();", "+\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\t\tunicodeStore();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0c1037a3b034233a76894e6eed96b6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "c12a3a9781a2cb03fb343a1b11660c99cccf4eb5", "commitAfterChange": "25f6ec4d6e61ae8f45e86debb6fc86f45cfebab1", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif (getNextChar('\\\\'))", "+\t\t\t\t\tif (getNextChar('\\\\')) {", "+\t\t\t\t\t\tif (this.unicodeAsBackSlash) {", "+\t\t\t\t\t\t\t// consume next character", "+\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\t\tunicodeStore();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.currentCharacter = this.source[this.currentPosition++];", "+\t\t\t\t\t\t}", "-\t\t\t\t\telse { // consume next character", "+\t\t\t\t\t} else { // consume next character", "-\t\t\t\t\t\t\t\tint escapeSize = this.currentPosition;", "-\t\t\t\t\t\t\t\tboolean backSlashAsUnicodeInString = this.unicodeAsBackSlash;", "-\t\t\t\t\t\t\t\t//scanEscapeCharacter make a side effect on this value and we need the previous value few lines down this one", "-\t\t\t\t\t\t\t\tscanEscapeCharacter();", "-\t\t\t\t\t\t\t\tescapeSize = this.currentPosition - escapeSize;", "-\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr == 0) {", "-\t\t\t\t\t\t\t\t\t//buffer all the entries that have been left aside....", "-\t\t\t\t\t\t\t\t    unicodeInitializeBuffer(this.currentPosition - escapeSize - 1 - this.startPosition);", "-\t\t\t\t\t\t\t\t    unicodeStore();", "-\t\t\t\t\t\t\t\t} else { //overwrite the / in the buffer", "-\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr--; // unicode store will increment", "-\t\t\t\t\t\t\t\t    unicodeStore();", "-\t\t\t\t\t\t\t\t\tif (backSlashAsUnicodeInString) { //there are TWO \\ in the stream where only one is correct", "+\t\t\t\t\t\t\t\tif (this.unicodeAsBackSlash) {", "+\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr--;", "+\t\t\t\t\t\t\t\t\t// consume next character", "+\t\t\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr == 0) {", "+\t\t\t\t\t\t\t\t\t\tunicodeInitializeBuffer(this.currentPosition - this.startPosition);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr --;", "+\t\t\t\t\t\t\t\t\tthis.currentCharacter = this.source[this.currentPosition++];", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// we need to compute the escape character in a separate buffer", "+\t\t\t\t\t\t\t\tscanEscapeCharacter();", "+\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\t\tunicodeStore();"]}], "num": 4768}
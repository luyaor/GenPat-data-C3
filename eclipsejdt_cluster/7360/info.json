{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab93495a6de96c5a0c44ad9e338898a7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "002349281f250b3f001100b7ccfcc905", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests2.java", "commitBeforeChange": "120defa76e249a7b50b5aa52206e16b815780186", "commitAfterChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testBug376673b() throws CoreException", "signatureAfterChange": " \tpublic void testBug376673b() throws CoreException", "diff": ["-\t\t\t\t\t\"class \ud842\udf9f1 {\" +", "-\t\t\t\t\t\"\tpublic void \ud842\udf9fm() {}\\n\" +", "+\t\t\t\t\t\"class \\uD842\\uDF9F1 {\" +", "+\t\t\t\t\t\"\tpublic void \\uD842\\uDF9Fm() {}\\n\" +", "-\t\t\t\tIFile file = createFile(\"/P/pkg/\ud842\udf9f1.java\", content, \"UTF-8\");", "+\t\t\t\tIFile file = createFile(\"/P/pkg/\\uD842\\uDF9F1.java\", content, \"UTF-8\");", "-\t\t\tsearch(\"\ud842\udf9fm\", METHOD, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "-\t\t\tassertSearchResults(\"pkg/\ud842\udf9f1.java void pkg.\ud842\udf9f1.\ud842\udf9fm() [\ud842\udf9fm] EXACT_MATCH\");", "+\t\t\tsearch(\"\\uD842\\uDF9Fm\", METHOD, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "+\t\t\tassertSearchResults(\"pkg/\\uD842\\uDF9F1.java void pkg.\\uD842\\uDF9F1.\\uD842\\uDF9Fm() [\\uD842\\uDF9Fm] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00edfc273bbcdfba087b4f3664884e4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test029()", "signatureAfterChange": " \tpublic void test029()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     7  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    10  iload_1\\n\" + ", "-\t\t\t\"    11  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  iload_1 [i]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019f95e4d59ddead3d7bc6050573b518", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 229, "signatureBeforeChange": " \tpublic void test227()", "signatureAfterChange": " \tpublic void test227()", "diff": ["-\t\t\t\"Type safety: The cast from List to List<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List to List<X> is actually checking against the erased type List\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type List is converted to List<X>. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type List is converted to List<X> using a raw conversion. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type Iterator is converted to Iterator<X>. References to generic type Iterator<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type Iterator is converted to Iterator<X> using a raw conversion. References to generic type Iterator<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The cast from Collection to List<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Collection to List<X> is actually checking against the erased type List\\n\" + ", "-\t\t\t\"Type safety: The cast from List to Collection<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List to Collection<X> is actually checking against the erased type Collection\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "048cdb9bd427861432e5df7dd4c2d6e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05b744814592752414b443a70253901e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void test20() throws JavaModelException", "signatureAfterChange": "  \tpublic void test20() throws JavaModelException", "diff": ["-\t\t\t\"Field {key=LTest$74;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$74;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\",", "+\t\t\t\"Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "077ce98c3be905e6de7f34f2b8647c03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \t \tpublic void test050()", "signatureAfterChange": " \t \tpublic void test050()", "diff": ["-\t\t\t\"     1  istore_0\\n\" + ", "-\t\t\t\"     2  iload_0\\n\" + ", "+\t\t\t\"     1  istore_0 [i]\\n\" + ", "+\t\t\t\"     2  iload_0 [i]\\n\" + ", "-\t\t\t\"     8  getstatic #26 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    11  iload_0\\n\" + ", "-\t\t\t\"    12  invokevirtual #32 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "+\t\t\t\"    11  iload_0 [i]\\n\" + ", "+\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [32]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0844b36e6ad7b88d4bbb5687906b24ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "\r public void test0071() throws IOException", "signatureAfterChange": "\r public void test0071() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0,2}\", locations.get(\"@H\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0,1}\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1)]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@G\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08541b4c7e2e53a38a2d20709e74cf2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "e733dacf7e2cb0f1c468842218b8cf0fff8a2c3b", "commitAfterChange": "ef98b1110b7ab3f8a6089643c80689cd9cb542d0", "methodNumberBeforeChange": 747, "methodNumberAfterChange": 749, "signatureBeforeChange": " public void testBug198074_c3() throws JavaModelException", "signatureAfterChange": " public void testBug198074_c3() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\t+ \\\" nommbr=\\'\\\" + getName() + \\\"\\'\\\"\\n\" + ", "-\t\t\"\t\t\t\t+ \\\" nomgrp=\\'\\\" + getService().getArgtbl() + \\\"\\'\\\"\\n\" + ", "-\t\t\"\t\t\t\t+ \\\" typmbr=\\'\\\" + getMemberType().getArgument() + \\\"\\'\\\"\\n\" + ", "-\t\t\"\t\t\t\t+ \\\" srcpat=\\'\\\" + getPhysicalPath() + \\\"\\'\\\"\\n\" + ", "-\t\t\"\t\t\t\t+ \\\" nommdl=\\'\\\" + getModel() + \\\"\\'\\\";\\n\" + ", "+\t\t\"\t\t+ \\\" nommbr=\\'\\\" + getName() + \\\"\\'\\\"\\n\" + ", "+\t\t\"\t\t+ \\\" nomgrp=\\'\\\" + getService().getArgtbl() + \\\"\\'\\\"\\n\" + ", "+\t\t\"\t\t+ \\\" typmbr=\\'\\\" + getMemberType().getArgument() + \\\"\\'\\\"\\n\" + ", "+\t\t\"\t\t+ \\\" srcpat=\\'\\\" + getPhysicalPath() + \\\"\\'\\\"\\n\" + ", "+\t\t\"\t\t+ \\\" nommdl=\\'\\\" + getModel() + \\\"\\'\\\";\\n\" + ", "+\t\t\"}\\n\"", "+\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "098a0c9b611ccbe2de76854140a4f824", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public void test108()", "signatureAfterChange": " public void test108()", "diff": ["-\t\t\"\tint a = new int[]{0,0}, b = new int[]{0,0};\\n\" +", "+\t\t\"\tint a = new int[]{0, 0}, b = new int[]{0, 0};\\n\" +", "-\t\t\"  int a = new int[]{0,0,};\\n\" +", "-\t\t\"  int b = new int[]{0,0,};\\n\" +", "+\t\t\"  int a = new int[]{0, 0};\\n\" +", "+\t\t\"  int b = new int[]{0, 0};\\n\" +", "-\t\t\"  int a = new int[]{0,0,};\\n\" +", "-\t\t\"  int b = new int[]{0,0,};\\n\" +", "+\t\t\"  int a = new int[]{0, 0};\\n\" +", "+\t\t\"  int b = new int[]{0, 0};\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bba890e28600f6e5febd27461363e37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 658, "methodNumberAfterChange": 658, "signatureBeforeChange": "\t\t \tpublic void test654()", "signatureAfterChange": "\t\t \tpublic void test654()", "diff": ["-\t\t\t\"Type safety: Map is a raw type. References to generic type Map<K,V> should be parameterized\\n\" + ", "+\t\t\t\"Map is a raw type. References to generic type Map<K,V> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized\\n\" + ", "+\t\t\t\"HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "+\t\t\t\"Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "+\t\t\t\"Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "+\t\t\t\"Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c52d8403a7619c313fde86c63ed1f5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void testProjectGetPackageFragments() throws JavaModelException", "signatureAfterChange": " public void testProjectGetPackageFragments() throws JavaModelException", "diff": ["-\t\t\"<default> [in \"+ getExternalJCLPathString() + \" [in JavaProjectTests]]\\n\" + ", "+\t\t\"<default> [in \"+ getExternalJCLPathString() + \"]\\n\" + ", "-\t\t\"META-INF [in \"+ getExternalJCLPathString() + \" [in JavaProjectTests]]\\n\" + ", "+\t\t\"META-INF [in \"+ getExternalJCLPathString() + \"]\\n\" + ", "-\t\t\"java [in \"+ getExternalJCLPathString() + \" [in JavaProjectTests]]\\n\" + ", "-\t\t\"java.io [in \"+ getExternalJCLPathString() + \" [in JavaProjectTests]]\\n\" + ", "-\t\t\"java.lang [in \"+ getExternalJCLPathString() + \" [in JavaProjectTests]]\\n\" + ", "+\t\t\"java [in \"+ getExternalJCLPathString() + \"]\\n\" + ", "+\t\t\"java.io [in \"+ getExternalJCLPathString() + \"]\\n\" + ", "+\t\t\"java.lang [in \"+ getExternalJCLPathString() + \"]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ee51f2b0844ecb028983939ff8f8012", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "194abd534b611ec2d23ab367d4102b5723758d82", "commitAfterChange": "c7d3258ae74375a57da545fcb11a05d452eeaa7b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testCreateBindings01() throws JavaModelException", "signatureAfterChange": " \tpublic void testCreateBindings01() throws JavaModelException", "diff": ["-\t\t\t\"LX;^1\\n\" + ", "-\t\t\t\"Ljava/lang/Object;^33\\n\" + ", "-\t\t\t\"LX;.foo(ILjava/lang/String;)V^1\\n\" + ", "-\t\t\t\"LI;.BAR^25\\n\" + ", "-\t\t\t\"LY$50;^1\",", "+\t\t\t\"LX;\\n\" + ", "+\t\t\t\"Ljava/lang/Object;\\n\" + ", "+\t\t\t\"LX;.foo(ILjava/lang/String;)V\\n\" + ", "+\t\t\t\"LI;.BAR\\n\" + ", "+\t\t\t\"LY$50;\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1137e887e2811eb66234b2638f3728bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void test24() throws JavaModelException", "signatureAfterChange": "  \tpublic void test24() throws JavaModelException", "diff": ["-\t\t\t\"Method {key=LTest$98;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$98;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\",", "+\t\t\t\"Method {key=LTest$98;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$98;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14c754ccf05a1fc563aff899647c7262", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests2.java", "commitBeforeChange": "120defa76e249a7b50b5aa52206e16b815780186", "commitAfterChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testBug376673c() throws CoreException", "signatureAfterChange": " \tpublic void testBug376673c() throws CoreException", "diff": ["-\t\t\t\t\t\"class \ud842\udf9f1 {\" +", "-\t\t\t\t\t\"\tpublic \ud842\udf9f1() {}\\n\" +", "+\t\t\t\t\t\"class \\uD842\\uDF9F1 {\" +", "+\t\t\t\t\t\"\tpublic \\uD842\\uDF9F1() {}\\n\" +", "-\t\t\t\tIFile file = createFile(\"/P/pkg/\ud842\udf9f1.java\", content, \"UTF-8\");", "+\t\t\t\tIFile file = createFile(\"/P/pkg/\\uD842\\uDF9F1.java\", content, \"UTF-8\");", "-\t\t\tsearch(\"\ud842\udf9f1\", CONSTRUCTOR, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "-\t\t\tassertSearchResults(\"pkg/\ud842\udf9f1.java pkg.\ud842\udf9f1() [\ud842\udf9f1] EXACT_MATCH\");", "+\t\t\tsearch(\"\\uD842\\uDF9F1\", CONSTRUCTOR, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "+\t\t\tassertSearchResults(\"pkg/\\uD842\\uDF9F1.java pkg.\\uD842\\uDF9F1() [\\uD842\\uDF9F1] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15deb8ca4067b8d850a9588da29b6fb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test009()", "signatureAfterChange": " \tpublic void test009()", "diff": ["-\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    19  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 23] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 23] local: b index: 1 type: Z\\n\" + ", "-\t\t\t\"        [pc: 5, pc: 23] local: i index: 2 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 23] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 23] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"        [pc: 5, pc: 23] local: i index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18a0b6d8938aaecd6ef956fbd9e130d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "6616b103b53af13bafcc8a32713ca6371865f9c4", "commitAfterChange": "fcd90e4a2f5e40578ea3ad28461a3e5ea180ab4e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private boolean hasClasspathChanged()", "signatureAfterChange": "  private boolean hasClasspathChanged()", "diff": ["-\t\t\tSystem.out.println(\"New location: \" + newSourceLocations[n] + \"\\n!= old location: \" + oldSourceLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tSystem.out.println(\"JavaBuilder: New location: \" + newSourceLocations[n] + \"\\n!= old location: \" + oldSourceLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tSystem.out.println(\"Added non-empty source folder\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Added non-empty source folder\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Removed non-empty source folder\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Removed non-empty source folder\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"New location: \" + newBinaryLocations[n] + \"\\n!= old location: \" + oldBinaryLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tSystem.out.println(\"JavaBuilder: New location: \" + newBinaryLocations[n] + \"\\n!= old location: \" + oldBinaryLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tSystem.out.println(\"Number of binary folders/jar files has changed:\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Number of binary folders/jar files has changed:\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18da2178a6a089eb2df47bc0b982b3d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void test20() throws JavaModelException", "signatureAfterChange": "  \tpublic void test20() throws JavaModelException", "diff": ["-\t\t\t\"Field {key=LTest$74;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$74;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\",", "+\t\t\t\"Field {key=LTest$74;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$74;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$74;.foo} [in Field [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d6955c9a51c1503a54da6fa005d3503", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \t \tpublic void test052()", "signatureAfterChange": " \t \tpublic void test052()", "diff": ["-\t\t\t\"     2  istore_0\\n\" + ", "-\t\t\t\"     3  iload_0\\n\" + ", "+\t\t\t\"     2  istore_0 [i]\\n\" + ", "+\t\t\t\"     3  iload_0 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #26 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_0\\n\" + ", "-\t\t\t\"    13  invokevirtual #32 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "+\t\t\t\"    12  iload_0 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [32]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e93004e82366c2a1d3f522360af5e94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void test044()", "signatureAfterChange": " public void test044()", "diff": ["-\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ee11188f8db94861e2723dee6220fb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "commitAfterChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "methodNumberBeforeChange": 561, "methodNumberAfterChange": 561, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f6a0d6eed0e2734f43350a921db3107", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 95, "signatureBeforeChange": " \tpublic void testStringPatternNestedParam06() throws CoreException", "signatureAfterChange": " \tpublic void testStringPatternNestedParam06() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_wld [g3.t.def.GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [g3.t.def.GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] EXACT_MATCH\",", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_wld [GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20f57b2e2e969b4fb3d31abcc8f5a0fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void test027()", "signatureAfterChange": " \tpublic void test027()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     7  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    10  iload_1\\n\" + ", "-\t\t\t\"    11  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  iload_1 [i]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21972cb959a367c116b3577086507ad3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void test21() throws JavaModelException", "signatureAfterChange": "  \tpublic void test21() throws JavaModelException", "diff": ["-\t\t\t\"Method {key=LTest$77;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$77;.foo()V} [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$77;.foo()V} [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$77;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$77;.foo()V} [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\",", "+\t\t\t\"Method {key=LTest$77;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$77;.foo()V} [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$77;.foo()V} [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$77;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$77;.foo()V} [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25b69357bc20ae9a7f29f601e5cbb076", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void test24() throws JavaModelException", "signatureAfterChange": "  \tpublic void test24() throws JavaModelException", "diff": ["-\t\t\t\"Method {key=LTest$98;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$98;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\",", "+\t\t\t\"Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "+\t\t\t\"Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27b58f081360adbba2c6eea456d08294", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void test013()", "signatureAfterChange": "  \tpublic void test013()", "diff": ["-\t\t\t\"Name clash : The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type A has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<T>) of type X5 has the same erasure as foo(Class<T>) of type A but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type X5 has the same erasure as foo(Class<T>) of type A but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27b65ca8506734a3f37c387510857d93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void test045()", "signatureAfterChange": " \tpublic void test045()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28c9de6bf2e65b2076ef5a497ba1445b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 534, "methodNumberAfterChange": 534, "signatureBeforeChange": " \tpublic void test530()", "signatureAfterChange": " \tpublic void test530()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: LinkedList is a raw type. References to generic type LinkedList<E> should be parameterized\\n\" + ", "+\t\t\t\"LinkedList is a raw type. References to generic type LinkedList<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2958886d8bc6905244f43b604d23ccf4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void testGeneric3() throws JavaModelException", "signatureAfterChange": " public void testGeneric3() throws JavaModelException", "diff": ["-\t\t\"  List {key=Lutil/List<TE;>;} [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"  ArrayList {key=Lutil/ArrayList<TE;>;} [in ArrayList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"    List {key=Lutil/List<TE;>;} [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"    AbstractList {key=Lutil/AbstractList<TE;>;} [in AbstractList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"      Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"  List [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"  ArrayList [in ArrayList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"    List [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"    AbstractList [in AbstractList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"      Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in TypeHierarchy15]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a385139707ef11a68052f842beb5590", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments02() throws CoreException", "diff": ["-\t\tsearch(\"complete % <? extends Exception>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<? extends Exception> complete \", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [complete(new Exception(), gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [complete(new Exception(), gs)] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [complete(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testRuntimeException() [complete(new RuntimeException(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [<Exception>complete(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testRuntimeException() [<RuntimeException>complete(new RuntimeException(), gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] EQUIVALENT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [<RuntimeException>complete(new RuntimeException(), gs)] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b31ae7edfbac9b5864fddb5a3c4e1d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void testPatternMatchPackageReference() throws CoreException", "signatureAfterChange": " public void testPatternMatchPackageReference() throws CoreException", "diff": ["-\t\t\"src/PackageReference/A.java [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/B.java [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/C.java PackageReference.C [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/D.java PackageReference.D.x [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/E.java PackageReference.E.x [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/F.java PackageReference.F.foo() -> p3.p2.p.X [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/G.java PackageReference.G.foo(p3.p2.p.X) -> void [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/H.java PackageReference.H.foo() -> void [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/I.java PackageReference.I.foo() -> void [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/J.java PackageReference.J.foo() -> void [p3.p2.p]\", ", "+\t\t\"src/PackageReference/A.java [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/B.java [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/C.java PackageReference.C [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/D.java PackageReference.D.x [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/E.java PackageReference.E.x [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/F.java p3.p2.p.X PackageReference.F.foo() [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/G.java void PackageReference.G.foo(p3.p2.p.X) [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/H.java void PackageReference.H.foo() [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/I.java void PackageReference.I.foo() [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/J.java void PackageReference.J.foo() [p3.p2.p]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32bd73fb188846b97b5e75d7912fd21e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void test044()", "signatureAfterChange": " \tpublic void test044()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "350a8a5dfdb4a42a2dd01778dec685da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test005()", "signatureAfterChange": " \tpublic void test005()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "352d858177f4922deb1d471dd0b90869", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test038()", "signatureAfterChange": " \tpublic void test038()", "diff": ["-\t\t\t\"    29  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    29  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    33  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    33  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 37] local: b index: 1 type: Z\\n\" + ", "-\t\t\t\"        [pc: 5, pc: 37] local: i index: 2 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 37] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"        [pc: 5, pc: 37] local: i index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35430e927129db622183908ea5f5c16e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "26d507f9337456ca82e52ed896177b679ad9ed51", "commitAfterChange": "6954f6f09ec0fa4357c31e7abaa82f5c7cd86dbc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate boolean examineGetAllAnnotations()", "signatureAfterChange": " \tprivate boolean examineGetAllAnnotations()", "diff": ["-\t\t\treportError(\"getAllAnnotationMirrors(_elementH) returned null\");", "+\t\t\treportError(\"examineGetAllAnnotations: getAllAnnotationMirrors(_elementH) returned null\");", "-\t\t\t\t\treportError(\"unexpected value for annotation AnnoY\");", "+\t\t\t\t\treportError(\"examineGetAllAnnotations: unexpected value for annotation AnnoY\");", "-\t\t\t\t\t\treportError(\"unexpected value for annotation AnnoX\");", "+\t\t\t\t\t\treportError(\"examineGetAllAnnotations: unexpected value for annotation AnnoX\");", "-\t\t\t\t\treportError(\"getAllAnnotationMirrors(_elementH) returned a mirror with no value()\");", "+\t\t\t\t\treportError(\"examineGetAllAnnotations: getAllAnnotationMirrors(_elementH) returned a mirror with no value()\");", "-\t\t\treportError(\"getAllAnnotationMirrors() found wrong number of annotations on H\");", "+\t\t\treportError(\"examineGetAllAnnotations: getAllAnnotationMirrors() found wrong number of annotations on H\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3986aa24113ef037d475bcefcccc2027", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 451, "methodNumberAfterChange": 451, "signatureBeforeChange": " \tpublic void test449()", "signatureAfterChange": " \tpublic void test449()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tX<String>.Inner<Integer> d4 = new X.Inner<Integer>();\\r\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String>.Inner<Integer> d4 = new X.Inner<Integer>();\\n\" + ", "-\t\t\t\"Type safety: The expression of type X.Inner<Integer> is converted to X<String>.Inner<Integer> using a raw conversion. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type X.Inner<Integer> needs unchecked conversion to conform to X<String>.Inner<Integer>\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tX<String>.Inner<Integer> d4 = new X.Inner<Integer>();\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String>.Inner<Integer> d4 = new X.Inner<Integer>();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ba40b80e33de994215da1109bc83cdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void testModifiers1()", "signatureAfterChange": " \tpublic void testModifiers1()", "diff": ["-\t\t\t\"    void foo1() default {}\\n\" +", "-\t\t\t\"    public synchronized void foo2() default { System.exit(0); }\\n\" +", "-\t\t\t\"    strictfp void foo3() default {}\\n\" +", "-\t\t\t\"    public strictfp synchronized void foo4() default {}\\n\" +", "-\t\t\t\"    public strictfp synchronized @Annot void foo5() default {}\\n\" +", "+\t\t\t\"    default void foo1()  {}\\n\" +", "+\t\t\t\"    public default synchronized void foo2() { System.exit(0); }\\n\" +", "+\t\t\t\"    strictfp default void foo3() {}\\n\" +", "+\t\t\t\"    public default strictfp synchronized void foo4() {}\\n\" +", "+\t\t\t\"    public default strictfp synchronized @Annot void foo5() {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bbcbc797d532bc6d53bafa15512e08e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void test004()", "signatureAfterChange": "  \tpublic void test004()", "diff": ["-\t\t\t\t\"class Y<T> extends X<A> { public T foo() { return super.foo(); } }\\n\" +", "+\t\t\t\t\"class Y<T> extends X<A> { @Override public T foo() { return super.foo(); } }\\n\" +", "-\t\t\t\"\tclass Y<T> extends X<A> { public T foo() { return super.foo(); } }\\n\" + ", "-\t\t\t\"\t                                   ^^^^^\\n\" + ", "+\t\t\t\"\tclass Y<T> extends X<A> { @Override public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\"\t                                             ^^^^^\\n\" + ", "-\t\t\t\"\tclass Y<T> extends X<A> { public T foo() { return super.foo(); } }\\n\" + ", "-\t\t\t\"\t                                                  ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\tclass Y<T> extends X<A> { @Override public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\"\t                                                            ^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc335d59146da3437d32d3b57377b9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 263, "methodNumberAfterChange": 264, "signatureBeforeChange": " public void testBug305518()", "signatureAfterChange": " public void testBug305518()", "diff": ["-\t\t\"\t *     A\\n\" + ", "-\t\t\"\t *    / \\\\\\n\" + ", "-\t\t\"\t *   B   C\\n\" + ", "-\t\t\"\t *  / \\\\ / \\\\\\n\" + ", "-\t\t\"\t * D  E F  G\\n\" + ", "+\t\t\"\t *    A\\n\" + ", "+\t\t\"\t *   / \\\\\\n\" + ", "+\t\t\"\t *  B   C\\n\" + ", "+\t\t\"\t * / \\\\ / \\\\\\n\" + ", "+\t\t\"\t *D  E F  G\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c24c3dccf1859b45620e7eab4cd4a15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/LocalElementTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void testGetType()", "signatureAfterChange": " \tpublic void testGetType()", "diff": ["-\t\t\t\"<anonymous #1> [in <initializer #1> [in X [in X.java [in [default] [in [project root] [in P]]]]]]\\n\" + ", "-\t\t\t\"Y [in <initializer #1> [in X [in X.java [in [default] [in [project root] [in P]]]]]]\\n\" + ", "-\t\t\t\"<anonymous #1> [in f [in X [in X.java [in [default] [in [project root] [in P]]]]]]\\n\" + ", "-\t\t\t\"<anonymous #1> [in foo [in X [in X.java [in [default] [in [project root] [in P]]]]]]\\n\" + ", "-\t\t\t\"Z [in foo [in X [in X.java [in [default] [in [project root] [in P]]]]]]\",", "+\t\t\t\"<anonymous #1> [in <initializer #1> [in X [in X.java [in <default> [in <project root> [in P]]]]]]\\n\" + ", "+\t\t\t\"Y [in <initializer #1> [in X [in X.java [in <default> [in <project root> [in P]]]]]]\\n\" + ", "+\t\t\t\"<anonymous #1> [in f [in X [in X.java [in <default> [in <project root> [in P]]]]]]\\n\" + ", "+\t\t\t\"<anonymous #1> [in foo [in X [in X.java [in <default> [in <project root> [in P]]]]]]\\n\" + ", "+\t\t\t\"Z [in foo [in X [in X.java [in <default> [in <project root> [in P]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d23a8699e5d8f0bb9054a908b1a1a18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void test014()", "signatureAfterChange": " public void test014()", "diff": ["-\t\t\"     1  newarray #10 int\\n\" + ", "+\t\t\"     1  newarray int [10]\\n\" + ", "-\t\t\"     7  astore_1\\n\" + ", "-\t\t\"     8  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    11  ldc #23 <String \\\"SUCCESS\\\">\\n\" + ", "-\t\t\"    13  invokevirtual #29 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"     7  astore_1 [tab]\\n\" + ", "+\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    11  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "+\t\t\"    13  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d998dffdf564f0d3ccd31b3e3570a22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 264, "methodNumberAfterChange": 263, "signatureBeforeChange": " public void testBug305518()", "signatureAfterChange": " public void testBug305518()", "diff": ["-\t\t\"\t *    A\\n\" + ", "-\t\t\"\t *   / \\\\\\n\" + ", "-\t\t\"\t *  B   C\\n\" + ", "-\t\t\"\t * / \\\\ / \\\\\\n\" + ", "-\t\t\"\t *D  E F  G\\n\" + ", "+\t\t\"\t *     A\\n\" + ", "+\t\t\"\t *    / \\\\\\n\" + ", "+\t\t\"\t *   B   C\\n\" + ", "+\t\t\"\t *  / \\\\ / \\\\\\n\" + ", "+\t\t\"\t * D  E F  G\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "431ce2469332f8fb29f830bbf78c199c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTestJLS3.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void testBug130778o() throws JavaModelException", "signatureAfterChange": " public void testBug130778o() throws JavaModelException", "diff": ["-\t\t\t\"[*1*][*2*]@AnAnnotation[*2*]([*3*]name1=[*3*])\\n\" +", "+\t\t\t\"[*1*][*2*]@AnAnnotation([*3*]name1=[*3*][*2*])\\n\" +", "-\t\t\t\"[*1*][*2*]@AnAnnotation[*2*] public class X {\\n\" + ", "+\t\t\t\"[*1*][*2*]@AnAnnotation([*3*]name1=$missing$[*3*])[*2*] public class X {\\n\" + ", "-\t\t\t\"1:TYPE_DECLARATION,[11,40],,MALFORMED|RECOVERED,[TYPE,La/X;,]\\n\" + ", "-\t\t\t\"2:MARKER_ANNOTATION,[11,13],,,[ANNOTATION,La/X;@La/AnAnnotation;,]\\n\" + ", "-\t\t\t\"3:No corresponding node\\n\" + ", "+\t\t\t\"1:TYPE_DECLARATION,[11,40],,MALFORMED,[TYPE,La/X;,]\\n\" + ", "+\t\t\t\"2:NORMAL_ANNOTATION,[11,20],,RECOVERED,[ANNOTATION,La/X;@La/AnAnnotation;,]\\n\" + ", "+\t\t\t\"3:MEMBER_VALUE_PAIR,[25,6],,RECOVERED,[N/A]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "437325373a39e0dc565069c319adcaec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "066f1fe71d5d139e5a681c9aeece89fa867b71b7", "commitAfterChange": "39951c3ce9f26380d44e65dd4f0a9c708c89c0d1", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"<compiler name=\\\"{1}\\\" copyright=\\\"{2}\\\" version=\\\"{3}\\\">\\n\" + ", "+\t\t\t\"<compiler copyright=\\\"{2}\\\" name=\\\"{1}\\\" version=\\\"{3}\\\">\\n\" + ", "-\t\t\t\"\t\t\t<problems problems=\\\"1\\\" errors=\\\"1\\\" warnings=\\\"0\\\">\\n\" + ", "-\t\t\t\"\t\t\t\t<problem charEnd=\\\"28\\\" charStart=\\\"25\\\" severity=\\\"ERROR\\\" line=\\\"3\\\" id=\\\"UndefinedType\\\">\\n\" + ", "+\t\t\t\"\t\t\t<problems errors=\\\"1\\\" problems=\\\"1\\\" warnings=\\\"0\\\">\\n\" + ", "+\t\t\t\"\t\t\t\t<problem charEnd=\\\"28\\\" charStart=\\\"25\\\" id=\\\"UndefinedType\\\" line=\\\"3\\\" severity=\\\"ERROR\\\">\\n\" + ", "-\t\t\t\"\t\t\t\t\t<source_context value=\\\"Zork z;\\\" sourceStart=\\\"0\\\" sourceEnd=\\\"3\\\"/>\\n\" + ", "+\t\t\t\"\t\t\t\t\t<source_context sourceEnd=\\\"3\\\" sourceStart=\\\"0\\\" value=\\\"Zork z;\\\"/>\\n\" + ", "-\t\t\t\"\t\t<problem_summary problems=\\\"1\\\" errors=\\\"1\\\" warnings=\\\"0\\\" tasks=\\\"0\\\"/>\\n\" + ", "+\t\t\t\"\t\t<problem_summary errors=\\\"1\\\" problems=\\\"1\\\" tasks=\\\"0\\\" warnings=\\\"0\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4426d83122c3171882462fa44629aafd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Supertype() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Supertype() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [public class TestTypes extends \ufffd|type.def.Types|\ufffd {@81] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends \ufffd|Exception|\ufffd implements ITest1, ITest2 {@57] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements \ufffd|ITest1|\ufffd, ITest2 {@78] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, \ufffd|ITest2|\ufffd {@86] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends \ufffd|ITest1|\ufffd {}@184] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [public class TestTypes extends !|type.def.Types|! {@81] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends !|Exception|! implements ITest1, ITest2 {@57] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements !|ITest1|!, ITest2 {@78] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, !|ITest2|! {@86] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends !|ITest1|! {}@184] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "446dac25951d0f1250c74762028552cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/NameReferenceCompletionTest.java", "commitBeforeChange": "18f82f9b3d96b0cbaed089b15d61446eb0618142", "commitAfterChange": "8ab73b3fd3410dbf30af626275dd87b20a54b001", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void testQualifiedNameReferenceShrinkAllButOne2()", "signatureAfterChange": " public void testQualifiedNameReferenceShrinkAllButOne2()", "diff": ["-\t\t\"\t\tcom.ibm.tests.X o = new Y(i);\t\t\\n\" +", "+\t\t\"\t\ta.b.c.X o = new Y(i);\t\t\\n\" +", "-\t\t\"com.\",", "+\t\t\"\t\ta.\",", "-\t\t\"<CompleteOnName:com.>\",", "+\t\t\"<CompleteOnName:a.>\",", "-\t\t\"    <CompleteOnName:com.>;\\n\" +", "+\t\t\"    <CompleteOnName:a.>;\\n\" +", "-\t\t\"com.\",", "+\t\t\"a.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46be090ce8ea813f35c91f6bbe3aaf86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 559, "methodNumberAfterChange": 559, "signatureBeforeChange": " \tpublic void test0554()", "signatureAfterChange": " \tpublic void test0554()", "diff": ["-\t\t\t\"Type safety: The cast from X<capture-of ? extends Object> to X<String> is actually checking against the erased type X\\n\" + ", "+\t\t\t\"Type safety: The cast from X<capture#1-of ? extends Object> to X<String> is actually checking against the erased type X\\n\" + ", "-\t\t\t\"Unnecessary cast from X<capture-of ? extends Object> to X<String>\\n\" + ", "+\t\t\t\"Unnecessary cast from X<capture#1-of ? extends Object> to X<String>\\n\" + ", "-\t\t\t\"Unnecessary cast from X<capture-of ? extends Object> to X2\\n\" + ", "+\t\t\t\"Unnecessary cast from X<capture#3-of ? extends Object> to X2\\n\" + ", "-\t\t\t\"Type safety: The cast from X<capture-of ? extends Object> to X3<String> is actually checking against the erased type X3\\n\" + ", "+\t\t\t\"Type safety: The cast from X<capture#5-of ? extends Object> to X3<String> is actually checking against the erased type X3\\n\" + ", "-\t\t\t\"Unnecessary cast from X<capture-of ? extends Object> to X3<String>\\n\" + ", "+\t\t\t\"Unnecessary cast from X<capture#5-of ? extends Object> to X3<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "479767ce0abb932c1ac44be5a7542d7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void test025()", "signatureAfterChange": " \tpublic void test025()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     8  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    11  iload_1\\n\" + ", "-\t\t\t\"    12  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    11  iload_1 [i]\\n\" + ", "+\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48901612b01f3ceb55306d3eeda55bd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AccessRestrictionsTests.java", "commitBeforeChange": "64774f020d7005b54827ff53032895aaf4555d81", "commitAfterChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test011() throws CoreException", "signatureAfterChange": " public void test011() throws CoreException", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in /P1/src/q/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tp.X x = new p.X();\\n\" +", "-\t\t\t\"\t^^^\\n\" +", "-\t\t\t\"Access restriction: The type X is not accessible due to restriction on required library AccessRestrictions/lib.jar\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in /P1/src/q/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tp.X x = new p.X();\\n\" +", "-\t\t\t\"\t        ^^^^^^^^^\\n\" +", "-\t\t\t\"Access restriction: The constructor X() is not accessible due to restriction on required library AccessRestrictions/lib.jar\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in /P1/src/q/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tp.X x = new p.X();\\n\" +", "-\t\t\t\"\t            ^^^\\n\" +", "-\t\t\t\"Access restriction: The type X is not accessible due to restriction on required library AccessRestrictions/lib.jar\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in /P1/src/q/Y.java (at line 5)\\n\" +", "-\t\t\t\"\tx.foo();\\n\" +", "-\t\t\t\"\t^^^^^^^\\n\" +", "-\t\t\t\"Access restriction: The method foo() from the type X is not accessible due to restriction on required library AccessRestrictions/lib.jar\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in /P1/src/q/Y.java (at line 6)\\n\" +", "-\t\t\t\"\tif (x.m > 0) {}\\n\" +", "-\t\t\t\"\t      ^\\n\" +", "-\t\t\t\"Access restriction: The field m from the type X is not accessible due to restriction on required library AccessRestrictions/lib.jar\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in /P1/src/q/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tp.X x = new p.X();\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X\\' is not API (restriction on required library \\'AccessRestrictions/lib.jar\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in /P1/src/q/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tp.X x = new p.X();\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^\\n\" + ", "+\t\t\t\"Access restriction: The constructor \\'X()\\' is not API (restriction on required library \\'AccessRestrictions/lib.jar\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in /P1/src/q/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tp.X x = new p.X();\\n\" + ", "+\t\t\t\"\t            ^^^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X\\' is not API (restriction on required library \\'AccessRestrictions/lib.jar\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in /P1/src/q/Y.java (at line 5)\\n\" + ", "+\t\t\t\"\tx.foo();\\n\" + ", "+\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\"Access restriction: The method \\'X.foo()\\' is not API (restriction on required library \\'AccessRestrictions/lib.jar\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in /P1/src/q/Y.java (at line 6)\\n\" + ", "+\t\t\t\"\tif (x.m > 0) {}\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"Access restriction: The field \\'X.m\\' is not API (restriction on required library \\'AccessRestrictions/lib.jar\\')\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a049e64cc4fc7b2f86326099d95190d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 761, "methodNumberAfterChange": 761, "signatureBeforeChange": " public void test755()", "signatureAfterChange": " public void test755()", "diff": ["-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tX<?>.B[] b = new X<?>.B[1];\\r\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tX<?>.B[] b = new X<?>.B[1];\\n\" + ", "+\t\t\"\t^^^^^^^^\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tX<?>.B[] b = new X<?>.B[1];\\r\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tX<?>.B[] b = new X<?>.B[1];\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ac77f737f4af4746ad4a1777c3da9ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 293, "methodNumberAfterChange": 293, "signatureBeforeChange": " public void testBug330313_wksp1_16_njl()", "signatureAfterChange": " public void testBug330313_wksp1_16_njl()", "diff": ["-\t\t\"\t\t\t\t\t\t\t// || declaration.modifiers != 0\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t|| (this.scanner.getLineNumber(\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\tdeclaration.type.sourceStart) != this.scanner\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\t\t\t.getLineNumber(\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t(int) (namePosition >>> 32))))) {\\n\" + ", "+\t\t\"\t\t\t\t\t// || declaration.modifiers != 0\\n\" + ", "+\t\t\"\t\t\t\t\t|| (this.scanner\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t.getLineNumber(declaration.type.sourceStart)\\n\" + ", "+\t\t\"\t\t\t\t\t\t!= this.scanner\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t.getLineNumber((int) (namePosition >>> 32))))) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ad10605543baa7b65069883ff68556e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 921, "methodNumberAfterChange": 921, "signatureBeforeChange": " public void test0914()", "signatureAfterChange": " public void test0914()", "diff": ["-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection<?>[]> to List<Collection[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#1-of ? super Collection<?>[]> to List<Collection[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection[]> to List<Collection[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#2-of ? super Collection[]> to List<Collection[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection<?>[]> to List<Collection<?>[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#3-of ? super Collection<?>[]> to List<Collection<?>[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection[]> to List<Collection<?>[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#4-of ? super Collection[]> to List<Collection<?>[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection<?>[]> to List<? super Collection[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#12-of ? super Collection<?>[]> to List<? super Collection[]>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b25149b3512e0b0aea0edf373585b95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "cf895c35367340c7abd90778e60347850683ddea", "commitAfterChange": "04e1bf5f2770f9a2cdfb59f2c6a93389d529209c", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 252, "signatureBeforeChange": " public void testBug110291() throws CoreException", "signatureAfterChange": " public void testBug110291() throws CoreException", "diff": ["-\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b110291/TestXX.java\",", "+\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b110291/Test110291XX.java\",", "-\t\t\"public class TestXX {\\n\" + ", "-\t\t\"\tclass TestYY {}\" +", "+\t\t\"public class Test110291XX {\\n\" + ", "+\t\t\"\tclass Test110291YY {}\" +", "-\tsearch(\"Test\", CONSTRUCTOR, DECLARATIONS, SearchPattern.R_PREFIX_MATCH);", "+\tsearch(\"Test110291\", CONSTRUCTOR, DECLARATIONS, SearchPattern.R_PREFIX_MATCH);", "-\t\t\"src/b110291/TestXX.java b110291.TestXX$TestYY [TestYY] EXACT_MATCH\"", "+\t\t\"src/b110291/Test110291XX.java b110291.Test110291XX$Test110291YY [Test110291YY] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dbe287e0266653d14a73540ee6f6894", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test014()", "signatureAfterChange": " \tpublic void test014()", "diff": ["-\t\t\t\"    28  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    32  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    32  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 36] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 36] local: b index: 1 type: Z\\n\" + ", "-\t\t\t\"        [pc: 5, pc: 36] local: i index: 2 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 36] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 36] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"        [pc: 5, pc: 36] local: i index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "529dbe16c122f48e83eab270e587e8ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void testTypeRefGenericAll01_TypeVariableBound() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll01_TypeVariableBound() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {@124] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {@144] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {@168] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends !|Types|!, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends !|Types|! & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & !|Comparable|!<Types> & Serializable, V extends A<? super Types>> {@124] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & !|Serializable|!, V extends A<? super Types>> {@144] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends !|A|!<? super Types>> {@168] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53ba11ad24514c0e83757fa23188b1ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 937, "methodNumberAfterChange": 937, "signatureBeforeChange": " public void test0927()", "signatureAfterChange": " public void test0927()", "diff": ["-\t\t\"Type mismatch: cannot convert from List<List<capture-of ? extends Object>> to List<? extends List<Object>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<List<capture#2-of ? extends Object>> to List<? extends List<Object>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<List<capture-of ? extends Object>> to List<List<Object>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<List<capture#3-of ? extends Object>> to List<List<Object>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<List<capture-of ?>> to List<List<Object>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<List<capture#4-of ?>> to List<List<Object>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Object> to List<Object>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#5-of ? extends Object> to List<Object>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Object> to List<Object>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#6-of ? extends Object> to List<Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5468db022378b0483ab1dfe44ea7a85e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void test016()", "signatureAfterChange": " \tpublic void test016()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5977de269ea1eb5a50aec639c52c7bb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ArrayTest.java", "commitBeforeChange": "c9e02661baa80cf1f75154d10de9df61ce3f636d", "commitAfterChange": "d92419d7d90bedd902391c7e83696cf6304867ae", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void test013()", "signatureAfterChange": " public void test013()", "diff": ["-\t\t\"argument cannot be resolved\\n\" +", "+\t\t\"argument cannot be resolved to a variable\\n\" +", "-\t\t\"argument cannot be resolved\\n\" +", "+\t\t\"argument cannot be resolved to a variable\\n\" +", "-\t\t\"argument cannot be resolved\\n\" +", "+\t\t\"argument cannot be resolved to a variable\\n\" +", "-\t\t\"argument cannot be resolved\\n\" +", "+\t\t\"argument cannot be resolved to a variable\\n\" +", "-\t\t\"argument cannot be resolved\\n\" +", "+\t\t\"argument cannot be resolved to a variable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aeca12a1cf4ff50abcb6de7beaebfa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "\r public void test0070() throws IOException", "signatureAfterChange": "\r public void test0070() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,2}\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), ARRAY, ARRAY]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb75f6319436c838f49eff604ebda1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void test022()", "signatureAfterChange": " \tpublic void test022()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     7  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    10  iload_1\\n\" + ", "-\t\t\t\"    11  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  iload_1 [i]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bfa31872876ddb2d21496e7aecae71f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void test019()", "signatureAfterChange": " \tpublic void test019()", "diff": ["-\t\t\t\"    21  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    21  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    25  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    25  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 29] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 29] local: b index: 1 type: Z\\n\" + ", "-\t\t\t\"        [pc: 5, pc: 29] local: i index: 2 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 29] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 29] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"        [pc: 5, pc: 29] local: i index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c8b75a7d7680f74ee366f88cc31a3b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 310, "signatureBeforeChange": " public void test1004()", "signatureAfterChange": " public void test1004()", "diff": ["-\t\t\"The variable x cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable x cannot be null at this location\\n\" + ", "-\t\t\"The variable x cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable x cannot be null at this location\\n\" + ", "-\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null pointer access: The variable x can only be null at this location\\n\" + ", "-\t\t\"The variable x cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable x cannot be null at this location\\n\" + ", "-\t\t\"The variable x may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable x may be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e0d49150c9c16fe88e1512a9c140732", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "21c2c8ab182b7aa411b8e7bf4277aee52240c980", "commitAfterChange": "f512a9071a69431983c5a97730f23f8ae82e0f5d", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 177, "signatureBeforeChange": " public void testEnum03() throws CoreException", "signatureAfterChange": " public void testEnum03() throws CoreException", "diff": ["-\t\t\"src/e1/Team.java e1.Team.PHILIPPE [PHILIPPE]\\n\" + ", "-\t\t\"src/e1/Team.java e1.Team.DAVID [DAVID]\\n\" + ", "-\t\t\"src/e1/Team.java e1.Team.JEROME [JEROME]\\n\" + ", "-\t\t\"src/e1/Team.java e1.Team.OLIVIER [OLIVIER]\\n\" + ", "-\t\t\"src/e1/Team.java e1.Team.KENT [KENT]\",", "+\t\t\"src/e1/Team.java e1.Team.PHILIPPE [PHILIPPE(37)]\\n\" + ", "+\t\t\"src/e1/Team.java e1.Team.DAVID [DAVID(27)]\\n\" + ", "+\t\t\"src/e1/Team.java e1.Team.JEROME [JEROME(33)]\\n\" + ", "+\t\t\"src/e1/Team.java e1.Team.OLIVIER [OLIVIER(35)]\\n\" + ", "+\t\t\"src/e1/Team.java e1.Team.KENT [KENT(40)]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60bf7940dad42d0853b86d6697b83003", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "85fe43540d2fa2b41e90fbadb73dc3c8d856ecfb", "commitAfterChange": "e60ca02f81acc7600a43413bd7fb7c0779ae6a52", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " \tpublic void test247()", "signatureAfterChange": " \tpublic void test247()", "diff": ["-\t\t\t\"\t                            ^^^\\n\" + ", "+\t\t\t\"\t                                  ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"\t                            ^^^\\n\" + ", "+\t\t\t\"\t                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"\t                            ^^^\\n\" + ", "+\t\t\t\"\t                                  ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"\t                           ^^^\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"\t                        ^^^\\n\" + ", "+\t\t\t\"\t                              ^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6432500a5864076183bc69c7bc8dd206", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "8881369a7d0e4bdf41211abd8b5386c3693abb68", "commitAfterChange": "bf2117b5b91f53fb296d1eef53e3b05f16ac6939", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void testSwitchOnNull()", "signatureAfterChange": " public void testSwitchOnNull()", "diff": ["-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + ", "-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + ", "-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + ", "-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + ", "-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6571aa70b6106d503949ce0bbc1cbdab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "0f66102af28e1b86113fee77f4eb0d3035d12202", "commitAfterChange": "b90626a8f6e0a122baef19254d7e1d462d97446e", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testMultipleParameterizedElementPattern03() throws CoreException", "signatureAfterChange": " \tpublic void testMultipleParameterizedElementPattern03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [t.m.def.NonGeneric.GenericMember<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [t.m.def.NonGeneric.GenericMember<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [t.m.def.NonGeneric.GenericMember<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [t.m.def.NonGeneric.GenericMember<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [g1.t.m.def.NonGeneric.GenericMember<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [g1.t.m.def.NonGeneric.GenericMember<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [g1.t.m.def.NonGeneric.GenericMember<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [g1.t.m.def.NonGeneric.GenericMember<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69a59b42b4aae9a25edd7182a08198c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test034()", "signatureAfterChange": " \tpublic void test034()", "diff": ["-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69cf03d69cae8d0c2079f4da3f26df7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003()", "diff": ["-\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: LA003;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: A003\\n\" + ", "-\t\t\t\"     0  getstatic java/lang/System.out Ljava/io/PrintStream; [22]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "-\t\t\t\"     4  invokevirtual A003.bar()I [24]\\n\" + ", "-\t\t\t\"     7  invokevirtual java/io/PrintStream.println(I)V [30]\\n\" + ", "+\t\t\t\"     4  invokevirtual A003.bar() : int  [24]\\n\" + ", "+\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void  [30]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 11] local: this index: 0 type: LA003;\\n\";", "+\t\t\t\"        [pc: 0, pc: 11] local: this index: 0 type: A003\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c19fba9f914a1bd31734c8e54d61aaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void testGeneric4() throws JavaModelException", "signatureAfterChange": " public void testGeneric4() throws JavaModelException", "diff": ["-\t\t\"  List {key=Lutil/List<TE;>;} [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"  ArrayList {key=Lutil/ArrayList<TE;>;} [in ArrayList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"    List {key=Lutil/List<TE;>;} [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"    AbstractList {key=Lutil/AbstractList<TE;>;} [in AbstractList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"      Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"  List [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"  ArrayList [in ArrayList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"    List [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"    AbstractList [in AbstractList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"      Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in TypeHierarchy15]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e035b0c6acd25943156278a9bbe7891", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void testRenameCompilationUnitsCheckingDeltas() throws CoreException", "signatureAfterChange": " public void testRenameCompilationUnitsCheckingDeltas() throws CoreException", "diff": ["-\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "-\t\t\"\t\t\tX.java[-]: {MOVED_TO(NewX.java [in [default] [in src [in P]]])}\\n\" + ", "-\t\t\"\t\t\tNewX.java[+]: {MOVED_FROM(X.java [in [default] [in src [in P]]])}\\n\" + ", "-\t\t\"\t\t\tY.java[-]: {MOVED_TO(NewY.java [in [default] [in src [in P]]])}\\n\" + ", "-\t\t\"\t\t\tNewY.java[+]: {MOVED_FROM(Y.java [in [default] [in src [in P]]])}\"", "+\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + ", "+\t\t\"\t\t\tX.java[-]: {MOVED_TO(NewX.java [in <default> [in src [in P]]])}\\n\" + ", "+\t\t\"\t\t\tNewX.java[+]: {MOVED_FROM(X.java [in <default> [in src [in P]]])}\\n\" + ", "+\t\t\"\t\t\tY.java[-]: {MOVED_TO(NewY.java [in <default> [in src [in P]]])}\\n\" + ", "+\t\t\"\t\t\tNewY.java[+]: {MOVED_FROM(Y.java [in <default> [in src [in P]]])}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e5b15900830b8107abe3c42622f093c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "4cdb299c3f5b0de082f2ec44442dd8762f2b077f", "commitAfterChange": "146b201b76577d8a0a09d69f0ce4d90e5c5e3978", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private boolean hasClasspathChanged()", "signatureAfterChange": "  private boolean hasClasspathChanged()", "diff": ["-\t\t\tSystem.out.println(\"New location: \" + newSourceLocations[n] + \"\\n!= old location: \" + oldSourceLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tSystem.out.println(\"JavaBuilder: New location: \" + newSourceLocations[n] + \"\\n!= old location: \" + oldSourceLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tSystem.out.println(\"Added non-empty source folder\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Added non-empty source folder\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Removed non-empty source folder\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Removed non-empty source folder\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"New location: \" + newBinaryLocations[n] + \"\\n!= old location: \" + oldBinaryLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tSystem.out.println(\"JavaBuilder: New location: \" + newBinaryLocations[n] + \"\\n!= old location: \" + oldBinaryLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tSystem.out.println(\"Number of binary folders/jar files has changed:\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Number of binary folders/jar files has changed:\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d72eb889c95d2d45e9685fa0e85328", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void test011()", "signatureAfterChange": " \tpublic void test011()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "751986f87d2530fd484c8746ef0e7c56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "27a11ce8ecc325901777098d9d0eafdb0be3dc5b", "commitAfterChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "methodNumberBeforeChange": 561, "methodNumberAfterChange": 561, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75d76a66f121a2b712eac3ce7cddef55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void test024()", "signatureAfterChange": " \tpublic void test024()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     7  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    10  iload_1\\n\" + ", "-\t\t\t\"    11  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  iload_1 [i]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "767e312e02431cf91c7abd14359f68f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "20d87d7260da51837a3bc4f2cefbc874868e947f", "commitAfterChange": "b780374be3c7661000af7572b9b8f18e78e84d97", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-\t\t\t\"Cannot make a static reference to the type parameter T\\n\" + ", "+\t\t\t\"Cannot make a static reference to the non-static type T\\n\" + ", "-\t\t\t\"Cannot make a static reference to the type parameter T\\n\" + ", "+\t\t\t\"Cannot make a static reference to the non-static type T\\n\" + ", "-\t\t\t\"Cannot make a static reference to the type parameter T\\n\" + ", "+\t\t\t\"Cannot make a static reference to the non-static type T\\n\" + ", "-\t\t\t\"Cannot make a static reference to the type parameter T\\n\" + ", "+\t\t\t\"Cannot make a static reference to the non-static type T\\n\" + ", "-\t\t\t\"Cannot make a static reference to the type parameter T\\n\" + ", "+\t\t\t\"Cannot make a static reference to the non-static type T\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "798cef16a07457a7b1165d786962c4d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments01() throws CoreException", "diff": ["-\t\tsearch(\"Multiple  % <?, ? extends Exception, ? super RuntimeException>\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<?, ? extends Exception, ? super RuntimeException>Multiple\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d5cd5709bc7b2220a9cba8304fe13cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "6c7de59cc4e8b7d3ff952cb73eea6ba69e83b190", "commitAfterChange": "8eda346eb2b6784c607071f6828a328415623f59", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \t \tpublic void test070d_codeblocks_castDoubleIntersectionCastInExpression() throws Exception", "signatureAfterChange": " \t \tpublic void test070d_codeblocks_castDoubleIntersectionCastInExpression() throws Exception", "diff": ["-\t\t\t\t\"     9  checkcast K [28]\\n\" + ", "-\t\t\t\t\"    12  checkcast L [30]\\n\" + ", "-\t\t\t\t\"    15  checkcast I [32]\\n\" + ", "-\t\t\t\t\"    18  checkcast J [34]\\n\" + ", "+\t\t\t\t\"     9  checkcast L [28]\\n\" + ", "+\t\t\t\t\"    12  checkcast K [30]\\n\" + ", "+\t\t\t\t\"    15  checkcast J [32]\\n\" + ", "+\t\t\t\t\"    18  checkcast I [34]\\n\" + ", "-\t\t\t\t\"        offset = 15\\n\" + ", "+\t\t\t\t\"        offset = 18\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da65585d45395ca9a2c6cd81fb816aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTestJLS3.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testBug130778k() throws JavaModelException", "signatureAfterChange": " public void testBug130778k() throws JavaModelException", "diff": ["-\t\t\t\"[*1*]@AnAnnotation[*1*](value=)\\n\" +", "-\t\t\t\"[*2*]@AnAnnotation2[*2*](value=)\\n\" +", "+\t\t\t\"[*1*]@AnAnnotation(value=[*1*])\\n\" +", "+\t\t\t\"[*2*]@AnAnnotation2(value=[*2*])\\n\" +", "-\t\t\t\"[*1*]@AnAnnotation[*1*] [*2*]@AnAnnotation2[*2*] [*3*]public[*3*] class X {\\n\" + ", "+\t\t\t\"[*1*]@AnAnnotation(value=$missing$)[*1*] [*2*]@AnAnnotation2(value=$missing$)[*2*] [*3*]public[*3*] class X {\\n\" + ", "-\t\t\t\"1:MARKER_ANNOTATION,[11,13],,,[ANNOTATION,La/X;@La/AnAnnotation;,]\\n\" + ", "-\t\t\t\"2:MARKER_ANNOTATION,[33,14],,,[ANNOTATION,La/X;@La/AnAnnotation2;,]\\n\" + ", "+\t\t\t\"1:NORMAL_ANNOTATION,[11,20],,RECOVERED,[ANNOTATION,La/X;@La/AnAnnotation;,]\\n\" + ", "+\t\t\t\"2:NORMAL_ANNOTATION,[33,21],,RECOVERED,[ANNOTATION,La/X;@La/AnAnnotation2;,]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f231d787b273df3287734f8d58c7519", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void test031()", "signatureAfterChange": " \tpublic void test031()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     8  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    11  iload_1\\n\" + ", "-\t\t\t\"    12  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    11  iload_1 [i]\\n\" + ", "+\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ff11e5d26b1f96fe2e9b1500a9a2e89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void test030()", "signatureAfterChange": " \tpublic void test030()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     7  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    10  iload_1\\n\" + ", "-\t\t\t\"    11  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  iload_1 [i]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8169275f46414225555cc71292986538", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test015()", "signatureAfterChange": " public void test015()", "diff": ["-\t\t\"     1  newarray #10 int\\n\" + ", "+\t\t\"     1  newarray int [10]\\n\" + ", "-\t\t\"     7  astore_1\\n\" + ", "-\t\t\"     8  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    11  ldc #23 <String \\\"SUCCESS\\\">\\n\" + ", "-\t\t\"    13  invokevirtual #29 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"     7  astore_1 [tab]\\n\" + ", "+\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    11  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "+\t\t\"    13  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "829d30b3ad82551dd907c3d0e0a92cef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void test08() throws JavaModelException", "signatureAfterChange": "  \tpublic void test08() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"field {key=LTest;.field} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"field {key=LTest;.field} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82de20c06608d0ab79e90536f5d692ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void test084()", "signatureAfterChange": " \tpublic void test084()", "diff": ["-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8333a01c496e9a55bf76ed4c3074363e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "64774f020d7005b54827ff53032895aaf4555d81", "commitAfterChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 191, "signatureBeforeChange": " public void test148_access_restrictions()", "signatureAfterChange": " public void test148_access_restrictions()", "diff": ["-  \"----------\\n\" +", "-  \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 3)\\n\" +", "-  \"\tKO ko;\\n\" +", "-  \"\t^^\\n\" +", "-  \"Access restriction: The type KO is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" +", "-  \"----------\\n\" +", "-  \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 5)\\n\" +", "-  \"\tko = new KO();\\n\" +", "-  \"\t     ^^^^^^^^\\n\" +", "-  \"Access restriction: The constructor KO() is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" +", "-  \"----------\\n\" +", "-  \"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 5)\\n\" +", "-  \"\tko = new KO();\\n\" +", "-  \"\t         ^^\\n\" +", "-  \"Access restriction: The type KO is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" +", "-  \"----------\\n\" +", "-  \"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 6)\\n\" +", "-  \"\tko.bar();\\n\" +", "-  \"\t^^^^^^^^\\n\" +", "-  \"Access restriction: The method bar() from the type KO is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" +", "-  \"----------\\n\" +", "-  \"5. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 7)\\n\" +", "-  \"\tif (ko.m) {}\\n\" +", "-  \"\t       ^\\n\" +", "-  \"Access restriction: The field m from the type KO is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---\\n\" +", "-  \"----------\\n\" +", "-  \"6. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 9)\\n\" +", "-  \"\tZork z;\\n\" +", "-  \"\t^^^^\\n\" +", "-  \"Zork cannot be resolved to a type\\n\" +", "-  \"----------\\n\" +", "+  \"----------\\n\" + ", "+  \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 3)\\n\" + ", "+  \"\tKO ko;\\n\" + ", "+  \"\t^^\\n\" + ", "+  \"Access restriction: The type \\'KO\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---\\')\\n\" + ", "+  \"----------\\n\" + ", "+  \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 5)\\n\" + ", "+  \"\tko = new KO();\\n\" + ", "+  \"\t     ^^^^^^^^\\n\" + ", "+  \"Access restriction: The constructor \\'KO()\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---\\')\\n\" + ", "+  \"----------\\n\" + ", "+  \"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 5)\\n\" + ", "+  \"\tko = new KO();\\n\" + ", "+  \"\t         ^^\\n\" + ", "+  \"Access restriction: The type \\'KO\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---\\')\\n\" + ", "+  \"----------\\n\" + ", "+  \"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 6)\\n\" + ", "+  \"\tko.bar();\\n\" + ", "+  \"\t^^^^^^^^\\n\" + ", "+  \"Access restriction: The method \\'KO.bar()\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---\\')\\n\" + ", "+  \"----------\\n\" + ", "+  \"5. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 7)\\n\" + ", "+  \"\tif (ko.m) {}\\n\" + ", "+  \"\t       ^\\n\" + ", "+  \"Access restriction: The field \\'KO.m\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---\\')\\n\" + ", "+  \"----------\\n\" + ", "+  \"6. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 9)\\n\" + ", "+  \"\tZork z;\\n\" + ", "+  \"\t^^^^\\n\" + ", "+  \"Zork cannot be resolved to a type\\n\" + ", "+  \"----------\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bbabe88ca26069c5f17c335cec10d99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": " \tpublic void test054a()", "signatureAfterChange": " \tpublic void test054a()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tString a(X x) {  return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tString a(X x) {  return null; }\\n\" + ", "-\t\t\t\"Duplicate method a(X) in type X\\n\" + ", "+\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 7)\\r\\n\" + ", "-\t\t\t\"\t<T extends X> T a(T x) {  return null; }\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t<T extends X> T a(T x) {  return null; }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bde2e86f83aa074cefcaf87852a29d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ClasspathTests.java", "commitBeforeChange": "b6c3ef88a42ce595faa4897ed3f3cb935e51c7fb", "commitAfterChange": "80d11a1b2e7fe69d0ca6c0214575c56a017a1140", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testMissingLibrary2() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testMissingLibrary2() throws JavaModelException", "diff": ["-\t\t\tnew Problem(\"\", \"The project was not built since its classpath is incomplete. Cannot find the class file for java.lang.Object. Fix the classpath then try rebuilding this project.\", projectPath)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tnew Problem(\"\", \"The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try rebuilding this project.\", projectPath)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tassertEquals(\"too much problems\", prob1.length + prob2.length + prob3.length,1); //$NON-NLS-1$", "+\t\tassertEquals(\"too many problems\", prob1.length + prob2.length + prob3.length,1); //$NON-NLS-1$", "-\t\t\texpectingSpecificProblemFor(classTest1, new Problem(\"p1\", \"This compilation unit indirectly references the missing type java.lang.Object (typically some required class file is referencing a type outside the classpath)\", classTest1)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingSpecificProblemFor(classTest1, new Problem(\"p1\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files.\", classTest1)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingSpecificProblemFor(classTest2, new Problem(\"p2\", \"This compilation unit indirectly references the missing type java.lang.Object (typically some required class file is referencing a type outside the classpath)\", classTest2)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingSpecificProblemFor(classTest2, new Problem(\"p2\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files.\", classTest2)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingSpecificProblemFor(classTest3, new Problem(\"p2\", \"This compilation unit indirectly references the missing type java.lang.Object (typically some required class file is referencing a type outside the classpath)\", classTest3)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingSpecificProblemFor(classTest3, new Problem(\"p2\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files.\", classTest3)); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee440b7282a8cde55f7545d83252414", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 920, "methodNumberAfterChange": 920, "signatureBeforeChange": " public void test0913()", "signatureAfterChange": " public void test0913()", "diff": ["-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection<?>[]> to List<Collection[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#1-of ? extends Collection<?>[]> to List<Collection[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection[]> to List<Collection[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#2-of ? extends Collection[]> to List<Collection[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection<?>[]> to List<Collection<?>[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#3-of ? extends Collection<?>[]> to List<Collection<?>[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection[]> to List<Collection<?>[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#4-of ? extends Collection[]> to List<Collection<?>[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection[]> to List<? extends Collection<?>[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#8-of ? extends Collection[]> to List<? extends Collection<?>[]>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90174d9d825448160a8f81321c30dda6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void test010()", "signatureAfterChange": " \tpublic void test010()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91884918c62cbc5ba4cf0934e574f583", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void test043()", "signatureAfterChange": " \tpublic void test043()", "diff": ["-\t\t\t\"    29  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    29  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    33  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    33  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 37] local: b index: 1 type: Z\\n\" + ", "-\t\t\t\"        [pc: 5, pc: 37] local: i index: 2 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 37] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"        [pc: 5, pc: 37] local: i index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91fc5c8504aee8879ff1c59290c613c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test024()", "signatureAfterChange": " public void test024()", "diff": ["-\t\t\"    57  invokeinterface [nargs : 1] #33 <Interface method java/util/List.iterator()Ljava/util/Iterator;>\\n\" + ", "+\t\t\"    57  invokeinterface [nargs : 1] #32 <Interface method java/util/List.iterator()Ljava/util/Iterator;>\\n\" + ", "-\t\t\"    69  invokeinterface [nargs : 1] #39 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "+\t\t\"    69  invokeinterface [nargs : 1] #38 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "-\t\t\"    75  getstatic #45 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    75  getstatic #44 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    79  invokevirtual #51 <Method java/io/PrintStream.print(Ljava/lang/Object;)V>\\n\" + ", "+\t\t\"    79  invokevirtual #50 <Method java/io/PrintStream.print(Ljava/lang/Object;)V>\\n\" + ", "-\t\t\"    84  invokeinterface [nargs : 1] #55 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "+\t\t\"    84  invokeinterface [nargs : 1] #54 <Interface method java/util/Iterator.hasNext()Z>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9270739d3d693c57d231dd530344ef4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void test07() throws JavaModelException", "signatureAfterChange": "  \tpublic void test07() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"field {key=LTest;.field} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"field {key=LTest;.field} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9365b1bd5e4703b8457ff3dd9b1b9943", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testCreateBindings01() throws JavaModelException", "signatureAfterChange": " \tpublic void testCreateBindings01() throws JavaModelException", "diff": ["-\t\t\t\"LX;\\n\" + ", "-\t\t\t\"Ljava/lang/Object;\\n\" + ", "-\t\t\t\"LX;.foo(ILjava/lang/String;)V\\n\" + ", "-\t\t\t\"LI;.BAR\\n\" + ", "-\t\t\t\"LY$50;\",", "+\t\t\t\"LX;^1\\n\" + ", "+\t\t\t\"Ljava/lang/Object;^33\\n\" + ", "+\t\t\t\"LX;.foo(ILjava/lang/String;)V^1\\n\" + ", "+\t\t\t\"LI;.BAR^25\\n\" + ", "+\t\t\t\"LY$50;^1\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9456cd11953eb2d7e46a6423223eef62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void _testModifiers1a()", "signatureAfterChange": " \tpublic void _testModifiers1a()", "diff": ["-\t\t\t\"    void foo1() default {}\\n\" +", "-\t\t\t\"    public synchronized void foo2() default {}\\n\" +", "-\t\t\t\"    stritfp void foo3() default {}\\n\" + // typo in strictfp", "-\t\t\t\"    public strictfp synchronized void foo4() default {}\\n\" +", "-\t\t\t\"    public strictfp synchronized @Annot void foo5() default {}\\n\" +", "+\t\t\t\"    default void foo1() {}\\n\" +", "+\t\t\t\"    public default synchronized void foo2() {}\\n\" +", "+\t\t\t\"    stritfp default void foo3() {}\\n\" + // typo in strictfp", "+\t\t\t\"    default public strictfp synchronized void foo4() {}\\n\" +", "+\t\t\t\"    public strictfp  default synchronized @Annot void foo5() {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9562bcaf3ab943b3a194e140eb57ad2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 340, "methodNumberAfterChange": 340, "signatureBeforeChange": " public void testBug110336b() throws CoreException", "signatureAfterChange": " public void testBug110336b() throws CoreException", "diff": ["-\t\t\"src/b110336/Test.java void b110336.Test.method1(Test):<anonymous>#1 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method1(Test):<anonymous>#1.c [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo().TP [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo().o [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo().o [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method1(Test).methodParam [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method1(Test).localVar1 [Test]\",", "+\t\t\"src/b110336/Test.java void b110336.Test.method1(Test):<anonymous>#1 [Test]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method1(Test):<anonymous>#1.c [Test]\\n\" + ", "+\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo() [Test]+[TP]\\n\" + ", "+\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo() [Test]+[o]\\n\" + ", "+\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo() [Test]+[o]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method1(Test) [Test]+[methodParam]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method1(Test) [Test]+[localVar1]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "973a59d9f5dc789f69240919cc9baa2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97df0211121858df3ca9726dc8a22809", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 561, "methodNumberAfterChange": 561, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bb34488c859d4ad6c0a94b502e8c8a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Field() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Field() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t\ufffd|type.def.Types|\ufffd field = new type.def.Types(), local, other = new type.def.Types();@131] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.object [\t\ufffd|Object|\ufffd object;@845] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.str [\t\ufffd|String|\ufffd str;@861] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types.test1 [\t\ufffd|ITest1|\ufffd test1;@96] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types.test2 [\t\ufffd|ITest2|\ufffd test2;@111] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t!|type.def.Types|! field = new type.def.Types(), local, other = new type.def.Types();@131] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.object [\t!|Object|! object;@845] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.str [\t!|String|! str;@861] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types.test1 [\t!|ITest1|! test1;@96] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types.test2 [\t!|ITest2|! test2;@111] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e200f9b074fc18718bbcd1b9dd03f91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 293, "methodNumberAfterChange": 293, "signatureBeforeChange": " public void testBug330313_wksp1_16_njl()", "signatureAfterChange": " public void testBug330313_wksp1_16_njl()", "diff": ["-\t\t\"\t\t\t\t\t// || declaration.modifiers != 0\\n\" + ", "-\t\t\"\t\t\t\t\t|| (this.scanner\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t.getLineNumber(declaration.type.sourceStart)\\n\" + ", "-\t\t\"\t\t\t\t\t\t!= this.scanner\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t.getLineNumber((int) (namePosition >>> 32))))) {\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t// || declaration.modifiers != 0\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t|| (this.scanner.getLineNumber(\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\tdeclaration.type.sourceStart) != this.scanner\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t.getLineNumber(\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t(int) (namePosition >>> 32))))) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ee2c7c2b83bbfc583e82d8a1872f57e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void testJavadocMethodReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodReference() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "-\t\tIMethod method = type.getMethod(\"annSearchedMethod\", null);", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "+\t\tIMethod method = type.getMethod(\"javadocSearchedMethod\", null);", "-\t\t\t\t\"src/j1/AnnInvalidRef.java void j1.AnnInvalidRef.invalid() [annSearchedMethod] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\"src/j1/AnnValidRef.java void j1.AnnValidRef.valid() [annSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a03d4c15448ab450bfb39c9e5f229b45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void test026()", "signatureAfterChange": " \tpublic void test026()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     7  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    10  iload_1\\n\" + ", "-\t\t\t\"    11  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  iload_1 [i]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a46597e89658380b5522834ddea32012", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 917, "methodNumberAfterChange": 917, "signatureBeforeChange": " public void test0910()", "signatureAfterChange": " public void test0910()", "diff": ["-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection<?>> to List<Collection>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#1-of ? extends Collection<?>> to List<Collection>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection> to List<Collection>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#3-of ? extends Collection> to List<Collection>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection<?>> to List<Collection<?>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#4-of ? extends Collection<?>> to List<Collection<?>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection> to List<Collection<?>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#6-of ? extends Collection> to List<Collection<?>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection> to List<? extends Collection<?>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#13-of ? extends Collection> to List<? extends Collection<?>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4a2bbda6b3d1121c753b05d5c41cdc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test032()", "signatureAfterChange": " \tpublic void test032()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     8  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    11  iload_1\\n\" + ", "-\t\t\t\"    12  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    11  iload_1 [i]\\n\" + ", "+\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5c48d2cf34e640dfe84a2da5f7546a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void test015()", "signatureAfterChange": " \tpublic void test015()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a60414ab44d517126b7208698150d0ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 918, "methodNumberAfterChange": 918, "signatureBeforeChange": " public void test0911()", "signatureAfterChange": " public void test0911()", "diff": ["-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection<?>> to List<Collection>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#1-of ? super Collection<?>> to List<Collection>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection> to List<Collection>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#2-of ? super Collection> to List<Collection>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection<?>> to List<Collection<?>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#3-of ? super Collection<?>> to List<Collection<?>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection> to List<Collection<?>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#4-of ? super Collection> to List<Collection<?>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection<?>> to List<? super Collection>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#12-of ? super Collection<?>> to List<? super Collection>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6a2be07ef2f85da792303721758b7d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void testGeneric2() throws JavaModelException", "signatureAfterChange": " public void testGeneric2() throws JavaModelException", "diff": ["-\t\t\"  List {key=Lutil/List<TE;>;} [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"  AbstractList {key=Lutil/AbstractList<TE;>;} [in AbstractList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"  List [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"  AbstractList [in AbstractList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"  X {key=LX<TE;>;} [in X.java [in <default> [in src [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"  Y {key=LY;} [in Y.java [in <default> [in src [in TypeHierarchy15]]]]\\n\",", "+\t\t\"  X [in X.java [in <default> [in src [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"  Y [in Y.java [in <default> [in src [in TypeHierarchy15]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7cfc82b7c1273c579489c30f22e5929", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void testTypeRefAll_Field() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Field() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t\ufffd|Types|\ufffd field = new Types(), local, other = new Types();@149] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.object [\t\ufffd|Object|\ufffd object;@719] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.str [\t\ufffd|String|\ufffd str;@735] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types.test1 [\t\ufffd|ITest1|\ufffd test1;@96] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types.test2 [\t\ufffd|ITest2|\ufffd test2;@111] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t!|Types|! field = new Types(), local, other = new Types();@149] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.object [\t!|Object|! object;@719] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.str [\t!|String|! str;@735] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types.test1 [\t!|ITest1|! test1;@96] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types.test2 [\t!|ITest2|! test2;@111] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa4bfe9d9b54e69b1de3640da71dde97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "5ffa6d87d82bcd877c2c1c819145a0122be38cd2", "commitAfterChange": "712c3e08152ef0500611b85e95a98a332827c891", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test008()", "signatureAfterChange": " \tpublic void test008()", "diff": ["-\t// TODO (olivier) unoptimal syntax error -> annotation method cannot be generic?", "+\t// annotation method cannot be generic?", "-\t\t\t\"1. ERROR in Foo.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic @interface Foo {\\n\" + ", "-\t\t\t\"\t                      ^\\n\" + ", "-\t\t\t\"Syntax error on token \\\"{\\\", Type expected after this token\\n\" + ", "+\t\t\t\"1. ERROR in Foo.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T> T value();\\n\" + ", "+\t\t\t\"\t    ^\\n\" + ", "+\t\t\t\"Invalid type T for the annotation attribute Foo.value; only primitive type, String, Class, annotation, enumeration are permitted or 1-dimensional arrays thereof\\n\" + ", "-\t\t\t\"Syntax error on token \\\"value\\\", delete this token\\n\" + ", "+\t\t\t\"Annotation attributes cannot be generic\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaf1a03ae5b02fedde16248ede0eff6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testBug198074_c3() throws JavaModelException", "signatureAfterChange": " public void testBug198074_c3() throws JavaModelException", "diff": ["-\t\t\"\t\t+ \\\" nommbr=\\'\\\" + getName() + \\\"\\'\\\"\\n\" + ", "-\t\t\"\t\t+ \\\" nomgrp=\\'\\\" + getService().getArgtbl() + \\\"\\'\\\"\\n\" + ", "-\t\t\"\t\t+ \\\" typmbr=\\'\\\" + getMemberType().getArgument() + \\\"\\'\\\"\\n\" + ", "-\t\t\"\t\t+ \\\" srcpat=\\'\\\" + getPhysicalPath() + \\\"\\'\\\"\\n\" + ", "-\t\t\"\t\t+ \\\" nommdl=\\'\\\" + getModel() + \\\"\\'\\\";\\n\" + ", "+\t\t\"\t\t\t\t+ \\\" nommbr=\\'\\\" + getName() + \\\"\\'\\\"\\n\" + ", "+\t\t\"\t\t\t\t+ \\\" nomgrp=\\'\\\" + getService().getArgtbl() + \\\"\\'\\\"\\n\" + ", "+\t\t\"\t\t\t\t+ \\\" typmbr=\\'\\\" + getMemberType().getArgument() + \\\"\\'\\\"\\n\" + ", "+\t\t\"\t\t\t\t+ \\\" srcpat=\\'\\\" + getPhysicalPath() + \\\"\\'\\\"\\n\" + ", "+\t\t\"\t\t\t\t+ \\\" nommdl=\\'\\\" + getModel() + \\\"\\'\\\";\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf77a68065bebbd30b008279c3eb77c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": " \tpublic void test182()", "signatureAfterChange": " \tpublic void test182()", "diff": ["-\t\t\t\"Unnecessary cast to type X<E> for expression of type X<E>\\n\" + ", "+\t\t\t\"Unnecessary cast from X<E> to X<E>\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from Object to parameterized type AX<String> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to AX<String> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from Object to parameterized type AX<E> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to AX<E> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unnecessary cast to type AX<E> for expression of type null\\n\" + ", "+\t\t\t\"Unnecessary cast from null to AX<E>\\n\" + ", "-\t\t\t\"Unnecessary cast to type X<String> for expression of type BX\\n\" + ", "+\t\t\t\"Unnecessary cast from BX to X<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac7cd45a6e65e816974419f4bb9f53b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testLongConversion_Reflection() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testLongConversion_Reflection() throws Exception", "diff": ["-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber z expected true but got false\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber s expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber i expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber c expected 1 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber b expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member z expected true but got false\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member s expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member i expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member c expected 1 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member b expected 49 but got 0\", testPath),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad6e216b2e00429c2b26cb8903c1bb0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 263, "methodNumberAfterChange": 264, "signatureBeforeChange": " public void testBug305518()", "signatureAfterChange": " public void testBug305518()", "diff": ["-\t\t\"\t *     A\\n\" + ", "-\t\t\"\t *    / \\\\\\n\" + ", "-\t\t\"\t *   B   C\\n\" + ", "-\t\t\"\t *  / \\\\ / \\\\\\n\" + ", "-\t\t\"\t * D  E F  G\\n\" + ", "+\t\t\"\t *    A\\n\" + ", "+\t\t\"\t *   / \\\\\\n\" + ", "+\t\t\"\t *  B   C\\n\" + ", "+\t\t\"\t * / \\\\ / \\\\\\n\" + ", "+\t\t\"\t *D  E F  G\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adfdbaacdaa7a0c4593af282e35f5ab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 150, "signatureBeforeChange": " public void testVariousPackageReference() throws CoreException", "signatureAfterChange": " public void testVariousPackageReference() throws CoreException", "diff": ["-\t\t\"src/PackageReference/A.java [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/B.java [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/C.java PackageReference.C [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/D.java PackageReference.D.x [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/E.java PackageReference.E.x [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/F.java PackageReference.F.foo() -> p3.p2.p.X [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/G.java PackageReference.G.foo(p3.p2.p.X) -> void [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/H.java PackageReference.H.foo() -> void [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/I.java PackageReference.I.foo() -> void [p3.p2.p]\\n\" +", "-\t\t\"src/PackageReference/J.java PackageReference.J.foo() -> void [p3.p2.p]\", ", "+\t\t\"src/PackageReference/A.java [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/B.java [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/C.java PackageReference.C [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/D.java PackageReference.D.x [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/E.java PackageReference.E.x [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/F.java p3.p2.p.X PackageReference.F.foo() [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/G.java void PackageReference.G.foo(p3.p2.p.X) [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/H.java void PackageReference.H.foo() [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/I.java void PackageReference.I.foo() [p3.p2.p]\\n\" + ", "+\t\t\"src/PackageReference/J.java void PackageReference.J.foo() [p3.p2.p]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae9c326cd4416ea70fecdd16daa98a73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test002()", "signatureAfterChange": " \tpublic void test002()", "diff": ["-\t\t\t\"     0  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     3  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "-\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     3  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: [Ljava/lang/String;\\n\";", "+\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: java.lang.String[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aea68307e59025c7e05804b2e9f6f19c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testJavadocMethodReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodReferenceWithJavadoc() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "-\t\t\tIMethod method = type.getMethod(\"annSearchedMethod\", null);", "+\t\t\tIMethod method = type.getMethod(\"javadocSearchedMethod\", null);", "-\t\t\t\t\t\"src/j1/AnnInvalidRef.java void j1.AnnInvalidRef.invalid() [annSearchedMethod] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\t\"src/j1/AnnValidRef.java void j1.AnnValidRef.valid() [annSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedMethod] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afa0265ae25746d3ba764bd4ece6fb8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments03() throws CoreException", "diff": ["-\t\tsearch(\"S?ng* % <? super Exception>\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<? super Exception>S?ng*\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(gs)] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1556982f3004274d925ed05a565a0cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void testJavadocFieldReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocFieldReferenceWithJavadoc() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "-\t\tIField field = type.getField(\"annSearchedVar\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "+\t\tIField field = type.getField(\"javadocSearchedVar\");", "-\t\t\t\t\t\"src/j1/AnnInvalidRef.java void j1.AnnInvalidRef.invalid() [annSearchedVar] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\t\"src/j1/AnnValidRef.java void j1.AnnValidRef.valid() [annSearchedVar] EXACT_MATCH\",", "+\t\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedVar] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedVar] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b331058325c077e172ed0ab2ee81d33d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": "\r public void test0082() throws IOException", "signatureAfterChange": "\r public void test0082() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,2}\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), ARRAY, ARRAY]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c7b670a38e46e7cfbfde9d6f0d8459", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " \tpublic void test215()", "signatureAfterChange": " \tpublic void test215()", "diff": ["-\t\t\t\"    10  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    10  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    14  invokevirtual java.io.PrintStream.println(java.lang.Object) : void  [27]\\n\" + ", "-\t\t\t\"    17  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    20  ldc <String \\\"SUCCESS\\\"> [29]\\n\" + ", "-\t\t\t\"    22  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [32]\\n\" + ", "+\t\t\t\"    14  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [22]\\n\" + ", "+\t\t\t\"    17  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"    20  ldc <String \\\"SUCCESS\\\"> [28]\\n\" + ", "+\t\t\t\"    22  invokevirtual java.io.PrintStream.println(java.lang.String) : void [30]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb01b6afd7c49374c7250dd0819e66cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "991f1409bd400be711e46d765f6fd8e3f406ddac", "commitAfterChange": "6ab6a87ca5d929b4ba822bcc3a8b7337ae50a5fb", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public void testMissingPrereq4() throws CoreException", "signatureAfterChange": " public void testMissingPrereq4() throws CoreException", "diff": ["-\t\t\t\"A cycle was detected in the build path of project: A\",", "+\t\t\t\"A cycle was detected in the build path of project 'A'\",", "-\t\t\t\"A cycle was detected in the build path of project: B\",", "+\t\t\t\"A cycle was detected in the build path of project 'B'\",", "-\t\t\t\"Project A is missing required Java project: \\'B\\'\",", "+\t\t\t\"Project 'A' is missing required Java project: \\'B\\'\",", "-\t\t\t\"A cycle was detected in the build path of project: A\",", "+\t\t\t\"A cycle was detected in the build path of project 'A'\",", "-\t\t\t\"A cycle was detected in the build path of project: B\",", "+\t\t\t\"A cycle was detected in the build path of project 'B'\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb3029e47d8a97a1cf8366a7bcb137f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testLongConversion() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testLongConversion() throws Exception", "diff": ["-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber z expected java.lang.Boolean but got java.lang.Long\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber s expected java.lang.Short but got java.lang.Long\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber i expected java.lang.Integer but got java.lang.Long\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber c expected java.lang.Character but got java.lang.Long\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber b expected java.lang.Byte but got java.lang.Long\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member z expected java.lang.Boolean but got java.lang.Long\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member s expected java.lang.Short but got java.lang.Long\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member i expected java.lang.Integer but got java.lang.Long\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member c expected java.lang.Character but got java.lang.Long\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member b expected java.lang.Byte but got java.lang.Long\", testPath),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bde549a519f400c894f528affec6644b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 561, "methodNumberAfterChange": 561, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13387064232cc793096957fc17de678", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 513, "methodNumberAfterChange": 513, "signatureBeforeChange": " \tpublic void test509()", "signatureAfterChange": " \tpublic void test509()", "diff": ["-\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9b41664f70d718920c3db884aa0f37a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void testTypeRefAll_Supertype() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Supertype() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [public class TestTypes extends \ufffd|Types|\ufffd {@117] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends \ufffd|Exception|\ufffd implements ITest1, ITest2 {@57] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements \ufffd|ITest1|\ufffd, ITest2 {@78] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, \ufffd|ITest2|\ufffd {@86] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends \ufffd|ITest1|\ufffd {}@184] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [public class TestTypes extends !|Types|! {@117] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends !|Exception|! implements ITest1, ITest2 {@57] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements !|ITest1|!, ITest2 {@78] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, !|ITest2|! {@86] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends !|ITest1|! {}@184] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd2e0588ef2ee040ca075496e5293a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void test005()", "signatureAfterChange": "  \tpublic void test005()", "diff": ["-\t\t\t\t\"class Y<T> extends X<A> { public T foo() { return super.foo(); } }\\n\",", "+\t\t\t\t\"class Y<T> extends X<A> { @Override public T foo() { return super.foo(); } }\\n\",", "-\t\t\t\"\tclass Y<T> extends X<A> { public T foo() { return super.foo(); } }\\n\" + ", "-\t\t\t\"\t                                   ^^^^^\\n\" + ", "+\t\t\t\"\tclass Y<T> extends X<A> { @Override public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\"\t                                             ^^^^^\\n\" + ", "-\t\t\t\"\tclass Y<T> extends X<A> { public T foo() { return super.foo(); } }\\n\" + ", "-\t\t\t\"\t                                                  ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\tclass Y<T> extends X<A> { @Override public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\"\t                                                            ^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0b3fa57c5f323e88944e24adb1a3d1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void test001() throws JavaModelException", "signatureAfterChange": " public void test001() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"inheritDoc[JAVADOC_INLINE_TAG]{{@inheritDoc }, null, null, inheritDoc, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"inheritDoc[JAVADOC_INLINE_TAG]{{@inheritDoc}, null, null, inheritDoc, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ade1be257aae0a71ec2903cdb4cc2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void testGeneric1() throws JavaModelException", "signatureAfterChange": " public void testGeneric1() throws JavaModelException", "diff": ["-\t\t\"  List {key=Lutil/List<TE;>;} [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"  ArrayList {key=Lutil/ArrayList<TE;>;} [in ArrayList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"    List {key=Lutil/List<TE;>;} [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"    AbstractList {key=Lutil/AbstractList<TE;>;} [in AbstractList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "-\t\t\"      Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"  List [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"  ArrayList [in ArrayList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"    List [in List.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"    AbstractList [in AbstractList.class [in util [in lib15.jar [in TypeHierarchy15]]]]\\n\" + ", "+\t\t\"      Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in TypeHierarchy15]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b3b636ba22f8ddd8678776c6b0332b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 566, "methodNumberAfterChange": 566, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref) [    void doA(\ufffd|Ref|\ufffd ref) {}]+[ref]\\n\" + ", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>) [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]+[ref]\\n\" + ", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]+[@Tag on ref]\\n\" + ", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]+[ref]\\n\" + ", "-\t\t\"src/comment5/Ref.java void comment5.Ref.dontD(Object) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]+[@Tag on ref]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref) [    void doA(!|Ref|! ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>) [    void doB(List<!|Ref|!> ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(!|Ref|!.class) Ref ref) {}]+[@Tag on ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(Ref.class) !|Ref|! ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.dontD(Object) [    void dontD(@Tag(!|Ref|!.class) Object ref) {}]+[@Tag on ref]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b8cd8cb494ecc5057159f890390c07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void test023()", "signatureAfterChange": " \tpublic void test023()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     7  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    10  iload_1\\n\" + ", "-\t\t\t\"    11  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  iload_1 [i]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5bf5abdfa8ce72b48fca2c018fb89e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test028()", "signatureAfterChange": " \tpublic void test028()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     8  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    11  iload_1\\n\" + ", "-\t\t\t\"    12  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    11  iload_1 [i]\\n\" + ", "+\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d86562d395d0486019d4faab8afd69f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test034()", "signatureAfterChange": " \tpublic void test034()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d99b923044412950af1d1c9c33458dea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests2.java", "commitBeforeChange": "120defa76e249a7b50b5aa52206e16b815780186", "commitAfterChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void testBug376673d() throws CoreException", "signatureAfterChange": " \tpublic void testBug376673d() throws CoreException", "diff": ["-\t\t\t\t\t\"class \ud842\udf9f1 {\" +", "-\t\t\t\t\t\"\tpublic int \ud842\udf9ff;\\n\" +", "+\t\t\t\t\t\"class \\uD842\\uDF9F1 {\" +", "+\t\t\t\t\t\"\tpublic int \\uD842\\uDF9Ff;\\n\" +", "-\t\t\t\tIFile file = createFile(\"/P/pkg/\ud842\udf9f1.java\", content, \"UTF-8\");", "+\t\t\t\tIFile file = createFile(\"/P/pkg/\\uD842\\uDF9F1.java\", content, \"UTF-8\");", "-\t\t\tsearch(\"\ud842\udf9ff\", FIELD, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "-\t\t\tassertSearchResults(\"pkg/\ud842\udf9f1.java pkg.\ud842\udf9f1.\ud842\udf9ff [\ud842\udf9ff] EXACT_MATCH\");", "+\t\t\tsearch(\"\\uD842\\uDF9Ff\", FIELD, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "+\t\t\tassertSearchResults(\"pkg/\\uD842\\uDF9F1.java pkg.\\uD842\\uDF9F1.\\uD842\\uDF9Ff [\\uD842\\uDF9Ff] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dabb7420c5db34473eb7410dc26a1184", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "0f66102af28e1b86113fee77f4eb0d3035d12202", "commitAfterChange": "b90626a8f6e0a122baef19254d7e1d462d97446e", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testSingleParameterizedElementPattern03() throws CoreException", "signatureAfterChange": " \tpublic void testSingleParameterizedElementPattern03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [t.s.def.NonGeneric.GenericMember<Exception>] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [t.s.def.NonGeneric.GenericMember<?>] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [t.s.def.NonGeneric.GenericMember<? extends Throwable>] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [t.s.def.NonGeneric.GenericMember<? super RuntimeException>] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [g1.t.s.def.NonGeneric.GenericMember<Exception>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [g1.t.s.def.NonGeneric.GenericMember<?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [g1.t.s.def.NonGeneric.GenericMember<? extends Throwable>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [g1.t.s.def.NonGeneric.GenericMember<? super RuntimeException>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daf367372cab4a7d3a401a5389893193", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testJavadocFieldReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocFieldReference() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "-\t\tIField field = type.getField(\"annSearchedVar\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "+\t\tIField field = type.getField(\"javadocSearchedVar\");", "-\t\t\t\t\"src/j1/AnnInvalidRef.java void j1.AnnInvalidRef.invalid() [annSearchedVar] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\"src/j1/AnnValidRef.java void j1.AnnValidRef.valid() [annSearchedVar] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedVar] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedVar] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de64699d01a94b27b4b28524bb7a2044", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "8b2f544bc2c01b972e8c0734076c17a325ac4120", "commitAfterChange": "cedc325f2a935c759cba1f1e5e6c7415bee87a4f", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r \tpublic void test0383913b()", "signatureAfterChange": "\r \tpublic void test0383913b()", "diff": ["-\t\t\t\t\t\t\"            InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\\n\" +\r", "+\t\t\t\t\t\t\"            InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this, Object obj) {}\\n\" +\r", "-\t\t\t\t\t\t\"            InnerMost(Outer.Inner<K, V> this, float f) {}\\n\" +\r", "+\t\t\t\t\t\t\"            InnerMost(Outer.Inner<K, V> this, float f, int i) {}\\n\" +\r", "-\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\\n\" + \r", "+\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this, Object obj) {}\\n\" + \r", "-\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\\n\" + \r", "+\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this, Object obj) {}\\n\" + \r", "-\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K, V> this, float f) {}\\n\" + \r", "+\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K, V> this, float f, int i) {}\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfcc7522b332ffcb576f927d92d3c43c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void test004()", "signatureAfterChange": " \tpublic void test004()", "diff": ["-\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    19  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 23] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 23] local: b index: 1 type: Z\\n\" + ", "-\t\t\t\"        [pc: 5, pc: 23] local: i index: 2 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 23] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 23] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"        [pc: 5, pc: 23] local: i index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1a70ca7e567da1c751e11fdd03fb9bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments02() throws CoreException", "diff": ["-\t\tsearch(\"Multiple % <Object, Exception, RuntimeException>\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<Object, Exception, RuntimeException>Multiple\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1c06cf03dea9ad480eb0ad799785372", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " public void test107()", "signatureAfterChange": " public void test107()", "diff": ["-\t\t\"\tint[] a = new int[]{0,0}, b = new int[]{0,0};\\n\" +", "+\t\t\"\tint[] a = new int[]{0, 0}, b = new int[]{0, 0};\\n\" +", "-\t\t\"  int[] a = new int[]{0,0,};\\n\" +", "-\t\t\"  int[] b = new int[]{0,0,};\\n\" +", "+\t\t\"  int[] a = new int[]{0, 0};\\n\" +", "+\t\t\"  int[] b = new int[]{0, 0};\\n\" +", "-\t\t\"  int[] a = new int[]{0,0,};\\n\" +", "-\t\t\"  int[] b = new int[]{0,0,};\\n\" +", "+\t\t\"  int[] a = new int[]{0, 0};\\n\" +", "+\t\t\"  int[] b = new int[]{0, 0};\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3f5b39b8b4e8a8283bb40ab8f8802df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void test21() throws JavaModelException", "signatureAfterChange": "  \tpublic void test21() throws JavaModelException", "diff": ["-\t\t\t\"Method {key=LTest$77;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$77;.foo()V} [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$77;.foo()V} [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$77;} [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$77;.foo()V} [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\",", "+\t\t\t\"Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e47c32e332102016b4e50bd260916b5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "e37ddd2cb60251da977bfe008d0c558febeb1616", "commitAfterChange": "ddff16f6a6b8fee88d497b4653d14d58ccda81b4", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testAbstract02b()", "signatureAfterChange": " \tpublic void testAbstract02b()", "diff": ["-\t// same as above but for interfaces this is illegal", "+\t// class is abstract", "+\t\trunNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"I1.java\",", "+\t\t\t\t\"public interface I1 {\\n\" +", "+\t\t\t\t\"    void test();\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"I2.java\",", "+\t\t\t\t\"public interface I2 {\\n\" +", "+\t\t\t\t\"    default void test() {}\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"C.java\",", "+\t\t\t\t\"public abstract class C implements I2, I1 {\\n\" +", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in C.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic abstract class C implements I2, I1 {\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\"The default method test() inherited from I2 conflicts with another method inherited from I1\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4f00088ed39c4d3e2b8c340b19f5211", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void test005() throws JavaModelException", "signatureAfterChange": "  public void test005() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"inheritDoc[JAVADOC_INLINE_TAG]{{@inheritDoc }, null, null, inheritDoc, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"inheritDoc[JAVADOC_INLINE_TAG]{{@inheritDoc}, null, null, inheritDoc, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4f1fa6a12e9b61f1a169011ab51a04a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 293, "methodNumberAfterChange": 293, "signatureBeforeChange": " public void testBug330313_wksp1_16_njl()", "signatureAfterChange": " public void testBug330313_wksp1_16_njl()", "diff": ["-\t\t\"\t\t\t\t\t// || declaration.modifiers != 0\\n\" + ", "-\t\t\"\t\t\t\t\t|| (this.scanner\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t.getLineNumber(declaration.type.sourceStart)\\n\" + ", "-\t\t\"\t\t\t\t\t\t!= this.scanner\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t.getLineNumber((int) (namePosition >>> 32))))) {\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t// || declaration.modifiers != 0\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t|| (this.scanner.getLineNumber(\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\tdeclaration.type.sourceStart) != this.scanner\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t.getLineNumber(\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t(int) (namePosition >>> 32))))) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5d32e562cb3e1758a2a747677fc60a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void test021()", "signatureAfterChange": " \tpublic void test021()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     7  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    10  iload_1\\n\" + ", "-\t\t\t\"    11  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  iload_1 [i]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e91e5704c1ca3c362ec6da1ac291dcf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "9b0b9be20fe15cfaaf5f2085fd6c89bedb4ddb87", "commitAfterChange": "fa0e82d308d3296777700187006d45ae091ad828", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 134, "signatureBeforeChange": " public void testCompletionInstanceofOperator1() throws JavaModelException", "signatureAfterChange": " public void testCompletionInstanceofOperator1() throws JavaModelException", "diff": ["-\t\tString completeBehind = \"x instanceof ZZZCompletionInstanceof\";", "+\t\tString completeBehind = \"x instanceof WWWCompletionInstanceof\";", "-\t\t\t\"element:ZZZCompletionInstanceof1    completion:ZZZCompletionInstanceof1    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXPECTED_TYPE)+\"\\n\" +", "-\t\t\t\"element:ZZZCompletionInstanceof2    completion:ZZZCompletionInstanceof2    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXACT_EXPECTED_TYPE)+\"\\n\" +", "-\t\t\t\"element:ZZZCompletionInstanceof3    completion:ZZZCompletionInstanceof3    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXPECTED_TYPE)+\"\\n\" +", "-\t\t\t\"element:ZZZCompletionInstanceof4    completion:ZZZCompletionInstanceof4    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),", "+\t\t\t\"element:WWWCompletionInstanceof1    completion:WWWCompletionInstanceof1    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXPECTED_TYPE)+\"\\n\" +", "+\t\t\t\"element:WWWCompletionInstanceof2    completion:WWWCompletionInstanceof2    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXACT_EXPECTED_TYPE)+\"\\n\" +", "+\t\t\t\"element:WWWCompletionInstanceof3    completion:WWWCompletionInstanceof3    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXPECTED_TYPE)+\"\\n\" +", "+\t\t\t\"element:WWWCompletionInstanceof4    completion:WWWCompletionInstanceof4    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e984dac2aa6fc15be8380b9a679571d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void test001()", "signatureAfterChange": " public void test001()", "diff": ["-\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    11  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 4, pc: 15] local: c1 index: 1 type: Ljava/lang/Cloneable;\\n\" + ", "-\t\t\"        [pc: 6, pc: 15] local: c2 index: 2 type: Ljava/lang/Cloneable;\\n\";", "+\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 4, pc: 15] local: c1 index: 1 type: java.lang.Cloneable\\n\" + ", "+\t\t\"        [pc: 6, pc: 15] local: c2 index: 2 type: java.lang.Cloneable\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9fc9f1ecabfd93abb2ea13aec0f4989", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void test033()", "signatureAfterChange": " \tpublic void test033()", "diff": ["-\t\t\t\"    29  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    29  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    33  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    33  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 37] local: b index: 1 type: Z\\n\" + ", "-\t\t\t\"        [pc: 5, pc: 37] local: i index: 2 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 37] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"        [pc: 5, pc: 37] local: i index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea72e7f30807fcccf5ad9c58c1007446", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments07() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments07() throws CoreException", "diff": ["-\t\tsearch(\"complete % <?,? extends Throwable,? extends RuntimeException>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<?,? extends Throwable,? extends RuntimeException>complete\", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [<Object, Exception, RuntimeException>complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [<Object, RuntimeException, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [<Object, RuntimeException, IllegalMonitorStateException>complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea9eb8ecf214338c415672bacf334135", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " \tpublic void test117()", "signatureAfterChange": " \tpublic void test117()", "diff": ["-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb5b361d86099d6218f9fb1fbd4b8e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "85fe43540d2fa2b41e90fbadb73dc3c8d856ecfb", "commitAfterChange": "e60ca02f81acc7600a43413bd7fb7c0779ae6a52", "methodNumberBeforeChange": 512, "methodNumberAfterChange": 512, "signatureBeforeChange": " \tpublic void test508()", "signatureAfterChange": " \tpublic void test508()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tint i = l.get(0).length;\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tint i = l.get(0).length;\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 13)\\r\\n\" + ", "-\t\t\t\"\tSerializable s2 = b ? l.get(0) : s;\\r\\n\" + ", "-\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tSerializable s2 = b ? l.get(0) : s;\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef3efac4dab536d8c83dccecc2e32cb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic void test23() throws JavaModelException", "signatureAfterChange": "  \tpublic void test23() throws JavaModelException", "diff": ["-\t\t\t\"Field {key=LTest$95;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$95;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\",", "+\t\t\t\"Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "+\t\t\t\"Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4b0aa23a987a0843461282921ce6f5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 566, "methodNumberAfterChange": 566, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref) [    void doA(\ufffd|Ref|\ufffd ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>) [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]+[@Tag on ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.dontD(Object) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]+[@Tag on ref]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8040532e604af79eeb88f828d83f14e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic void test23() throws JavaModelException", "signatureAfterChange": "  \tpublic void test23() throws JavaModelException", "diff": ["-\t\t\t\"Field {key=LTest$95;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$95;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\",", "+\t\t\t\"Field {key=LTest$95;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$95;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c4db54b39bb454c939d20226cf355f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "eaa3dc329700f9b17c5ba178d826ab61f47e8466", "commitAfterChange": "1534c3fb9312be746c807d9f0aa370d7a2598284", "methodNumberBeforeChange": 830, "methodNumberAfterChange": 830, "signatureBeforeChange": " public void test0809()", "signatureAfterChange": " public void test0809()", "diff": ["-\t\t\"1. WARNING in X.java (at line 22)\\n\" +", "+\t\t\"1. WARNING in X.java (at line 23)\\n\" +", "-\t\t\"2. ERROR in X.java (at line 23)\\n\" +", "+\t\t\"2. ERROR in X.java (at line 24)\\n\" +", "-\t\t\"3. ERROR in X.java (at line 26)\\n\" +", "+\t\t\"3. ERROR in X.java (at line 27)\\n\" +", "-\t\t\"4. WARNING in X.java (at line 36)\\n\" +", "+\t\t\"4. WARNING in X.java (at line 37)\\n\" +", "-\t\t\"5. ERROR in X.java (at line 39)\\n\" +", "+\t\t\"5. ERROR in X.java (at line 40)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c6d69d6dea217538441153ad805f5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void test020()", "signatureAfterChange": " \tpublic void test020()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     8  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    11  iload_1\\n\" + ", "-\t\t\t\"    12  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    11  iload_1 [i]\\n\" + ", "+\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fabe21c3baabbd63ef948d102ea08133", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "328c06fa136c963530115a367863b6a931384871", "commitAfterChange": "c0d735bb59d0292c44074a58c867bfe7a8670833", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " public void test384750o()", "signatureAfterChange": " public void test384750o()", "diff": ["-\t\t\t\t\t\"\t      ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^\\n\" + "]}], "num": 7360}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3b3b22e3322bc4b2679ae8509bb8ad1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f7d964f0d6395642cc56ff6204d2bb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e3dd2b05ac8f41c0dca5c47353959d33b3013e99", "commitAfterChange": "f2616d9c66b0302f054a7d87b47e25d04c9332b7", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tprivate void printCodeSnippet(int startPosition, int endPosition)", "signatureAfterChange": " \tprivate void printCodeSnippet(int startPosition, int endPosition)", "diff": ["-\t\t// 3 - process snippet (@see JavaDocRegion#formatCodeSnippet)", "+\t\t// 3 - format snippet (@see JavaDocRegion#formatCodeSnippet)", "-\t\tif (edit != null) {", "-\t\t\tformattedSnippet= CommentFormatterUtil.evaluateFormatterEdit(convertedSnippet, edit, null);", "+\t\tif (edit == null) {", "+\t\t\t// 3.a - not a valid code to format, keep initial buffer", "+\t\t\tformattedSnippet = inputBuffer.toString();", "+\t\t} else {", "+\t\t\t// 3.b - valid code formatted", "+\t\t\t// 3.b.i - get the result", "+\t\t\tformattedSnippet = CommentFormatterUtil.evaluateFormatterEdit(convertedSnippet, edit, null);", "+", "+\t\t\t// 3.b.ii- convert back to HTML (@see JavaDocRegion#convertJava2Html)", "+\t\t\tJava2HTMLEntityReader javaReader= new Java2HTMLEntityReader(new StringReader(formattedSnippet));", "+\t\t\tbuf= new char[256];", "+\t\t\tStringBuffer conversionBuffer= new StringBuffer();", "+\t\t\tint l;", "+\t\t\ttry {", "+\t\t\t\tdo {", "+\t\t\t\t\tl= javaReader.read(buf);", "+\t\t\t\t\tif (l != -1)", "+\t\t\t\t\t\tconversionBuffer.append(buf, 0, l);", "+\t\t\t\t} while (l > 0);", "+\t\t\t\tformattedSnippet = conversionBuffer.toString();", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// should not happen", "+\t\t\t\tCommentFormatterUtil.log(e);", "+\t\t\t\treturn;", "+\t\t\t}", "-\t\tStringBuffer outputBuffer= new StringBuffer();", "-\t\ttracker= new DefaultLineTracker();", "+\t\tStringBuffer outputBuffer = new StringBuffer();", "+\t\ttracker = new DefaultLineTracker();", "-", "-\t\t// 5 - convert back to HTML (@see JavaDocRegion#convertJava2Html)", "-\t\tJava2HTMLEntityReader javaReader= new Java2HTMLEntityReader(new StringReader(formattedSnippet));", "-\t\tbuf= new char[256];", "-\t\tStringBuffer conversionBuffer= new StringBuffer();", "-\t\tint l;", "-\t\ttry {", "-\t\t\tdo {", "-\t\t\t\tl= javaReader.read(buf);", "-\t\t\t\tif (l != -1)", "-\t\t\t\t\tconversionBuffer.append(buf, 0, l);", "-\t\t\t} while (l > 0);", "-\t\t\tformattedSnippet = conversionBuffer.toString();", "-\t\t} catch (IOException e) {", "-\t\t\t// should not happen", "-\t\t\tCommentFormatterUtil.log(e);", "-\t\t\treturn;", "-\t\t}", "-", "-", "-", "-\t\tfor (int lines= tracker.getNumberOfLines() - 1; lines > 0; lines--) {", "+\t\tfor (int lines=tracker.getNumberOfLines() - 1; lines > 0; lines--) {", "-\t\t// replace old text with the formatted snippet", "+", "+\t\t// 5 - replace old text with the formatted snippet"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8d5580c444dcbdc61aced410e466e66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "8333ea47de8c8dd08d7da970e59138bbf0535ab6", "commitAfterChange": "ba043485f3f4ffb2f39b1cfecdcdb6e7265fe5af", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " APTDispatchRunnable( IFile file, IJavaProject javaProject, List<AnnotationProcessorFactory> factories)", "signatureAfterChange": " APTDispatchRunnable( IFile file, IJavaProject javaProject, List<AnnotationProcessorFactory> factories)", "diff": ["+\t\t_phaseName =  \"build\";", "+\t\t_fileName =  _file.toString();"]}], "num": 63724}
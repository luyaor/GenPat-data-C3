{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ddcab0b1608578cbfb1f4f934641523", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ff9d0ca759b1e7ea7a364f13a680bf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateImpl.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \tprotected byte[] getElementContentBytes(SourceEntry entry)", "signatureAfterChange": "\r \tprotected byte[] getElementContentBytes(SourceEntry entry)", "diff": ["-\t\t\t\t\t//throw internalException(\"Error reading file \" + entry + \"due to missing zip/jar file\");\r", "-\t\t\t\t\t//throw internalException(\"Error reading file \" + entry + \" due to missing zip/jar entry\");\r", "-\t\t\t\t\t//throw internalException(\"Error reading file \" + entry + \" due to missing zip/jar entry\");\r", "-\t\t\t\t\t//throw internalException(\"Error reading file \" + entry + \" due to error reading contents\");\r", "-\t\t\t\t//throw internalException(e);\r", "-\t\t\t\tString message= e.getMessage();\r", "-\t\t\t\tmessage= (message == null ? \".\" : \" due to \" + message + \".\");\r", "-\t\t\t\t//throw internalException(\"Error reading file \" + entry + message);\r", "-\t\t\t\tmessage= (message == null ? \".\" : \" due to \" + message + \".\");\r", "-\t\t\t\t//throw internalException(\"Error reading file \" + entry + message);\r", "+\t\t\t\tmessage= (message == null ? \".\"/*nonNLS*/ : \" due to \"/*nonNLS*/ + message + \".\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0c3403c60dfe380496fc5c33d647128", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "ab7733a54402b64bb328ef9a7aa36d933deb8ac7", "commitAfterChange": "7ed8fb3f335f5407b01a590a0c668733ebc19aa6", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems)", "signatureAfterChange": " \tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems)", "diff": ["-\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "+\t\t\t\tthrow new IOException(Messages.file_badFormat); ", "-\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "+\t\t\t\tthrow new IOException(Messages.file_badFormat); ", "-\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "+\t\t\t\tthrow new IOException(Messages.file_badFormat); ", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.xmlFormatError\", this.getElementName(), e.getMessage()))); //$NON-NLS-1$", "+\t\t\t\t\t\t\tMessages.bind(Messages.classpath_xmlFormatError, (new String[] {this.getElementName(), e.getMessage()})))); ", "-\t\t\t\t\t\tUtil.bind(\"classpath.illegalEntryInClasspathFile\", this.getElementName(), e.getMessage()))); //$NON-NLS-1$", "+\t\t\t\t\t\tMessages.bind(Messages.classpath_illegalEntryInClasspathFile, (new String[] {this.getElementName(), e.getMessage()})))); "]}], "num": 14183}
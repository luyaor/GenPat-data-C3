{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6457afe83149b7a86ba6fd8249359d7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626e5e7aced1721ee4eba85799174315", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "7e1b661f635897c28beea613ca1b58777d8c7c7a", "commitAfterChange": "ea0c13f57ba1bc8fcf24d57a6ed1fca3a4943554", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "signatureAfterChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "diff": ["-\t\tif (type.isUnresolvedType() && CharOperation.indexOf('$', type.sourceName()) > 0) {", "+\t\tif (type.isUnresolvedType()) {", "-\t\t\tboolean mayTolerateMissingType = this.environment.mayTolerateMissingType;", "-\t\t\tthis.environment.mayTolerateMissingType = true;", "-\t\t\ttry {", "-\t\t\t\ttype = BinaryTypeBinding.resolveType(type, this.environment, true); // to ensure unique id assignment (when enclosing type is parameterized, inner type is also) ", "-\t\t\t} finally {", "-\t\t\t\tthis.environment.mayTolerateMissingType = mayTolerateMissingType;", "+\t\t\tReferenceBinding resolvedType = urb.resolvedType;", "+\t\t\tif (resolvedType != null) {", "+\t\t\t\ttype = resolvedType;", "+\t\t\t} else if (CharOperation.indexOf('$', type.sourceName()) > 0) {", "+\t\t\t\tboolean mayTolerateMissingType = this.environment.mayTolerateMissingType;", "+\t\t\t\tthis.environment.mayTolerateMissingType = true;", "+\t\t\t\ttry {", "+\t\t\t\t\ttype = BinaryTypeBinding.resolveType(type, this.environment, true); // to ensure unique id assignment (when enclosing type is parameterized, inner type is also) ", "+\t\t\t\t} finally {", "+\t\t\t\t\tthis.environment.mayTolerateMissingType = mayTolerateMissingType;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4f5d4a776722af5b73526aa35935da9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "9c3c9a68123a2dba6c0a481afee1d6f36fcdd02a", "commitAfterChange": "c00079358eb2e0feded1f86b5088b09215957a9d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "signatureAfterChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "diff": ["-\t\tif (type.isUnresolvedType() && CharOperation.indexOf('$', type.sourceName()) > 0)", "-\t\t\ttype = BinaryTypeBinding.resolveType(type, this.environment, true); // to ensure unique id assignment (when enclosing type is parameterized, inner type is also) ", "+\t\tif (type.isUnresolvedType() && CharOperation.indexOf('$', type.sourceName()) > 0) {", "+\t\t\tboolean mayTolerateMissingType = this.environment.mayTolerateMissingType;", "+\t\t\tthis.environment.mayTolerateMissingType = true;", "+\t\t\ttry {", "+\t\t\t\ttype = BinaryTypeBinding.resolveType(type, this.environment, true); // to ensure unique id assignment (when enclosing type is parameterized, inner type is also) ", "+\t\t\t} finally {", "+\t\t\t\tthis.environment.mayTolerateMissingType = mayTolerateMissingType;", "+\t\t\t}", "+\t\t}"]}], "num": 45315}
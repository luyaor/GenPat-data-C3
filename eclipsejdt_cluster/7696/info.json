{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48c86901e832abcd644c91fb42538888", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a38543a192f3a5cbd0f73a8aa7740b36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "1bcc314de8ecb33755f26c04c2cbb843edde9199", "commitAfterChange": "dbe6aca431faafcf7eddb9a34689b7f814a6a0d3", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic static char[][] getJavaLikeExtensions()", "signatureAfterChange": " \tpublic static char[][] getJavaLikeExtensions()", "diff": ["-\t\t\t\tString[] fileExtensions = javaContentType == null ? null : javaContentType.getFileSpecs(IContentType.FILE_EXTENSION_SPEC);", "-\t\t\t\t// note that file extensions contains \"java\" as it is defined in JDT Core's plugin.xml", "-\t\t\t\tint length = fileExtensions == null ? 0 : fileExtensions.length;", "-\t\t\t\tchar[][] extensions = new char[length][];", "-\t\t\t\tSimpleWordSet knownExtensions = new SimpleWordSet(length); // used to ensure no duplicate extensions", "-\t\t\t\textensions[0] = SuffixConstants.EXTENSION_java.toCharArray(); // ensure that \"java\" is first", "-\t\t\t\tknownExtensions.add(extensions[0]);", "-\t\t\t\tint index = 1;", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tString fileExtension = fileExtensions[i];", "-\t\t\t\t\tchar[] extension = fileExtension.toCharArray();", "-\t\t\t\t\tif (!knownExtensions.includes(extension)) {", "-\t\t\t\t\t\textensions[index++] = extension;", "-\t\t\t\t\t\tknownExtensions.add(extension);", "+\t\t\t\tHashSet fileExtensions = new HashSet();", "+\t\t\t\t// content types derived from java content type should be included (https://bugs.eclipse.org/bugs/show_bug.cgi?id=121715)", "+\t\t\t\tIContentType[] contentTypes = Platform.getContentTypeManager().getAllContentTypes();", "+\t\t\t\tfor (int i = 0, length = contentTypes.length; i < length; i++) {", "+\t\t\t\t\tif (contentTypes[i].isKindOf(javaContentType)) { // note that javaContentType.isKindOf(javaContentType) == true", "+\t\t\t\t\t\tString[] fileExtension = contentTypes[i].getFileSpecs(IContentType.FILE_EXTENSION_SPEC);", "+\t\t\t\t\t\tfor (int j = 0, length2 = fileExtension.length; j < length2; j++) {", "+\t\t\t\t\t\t\tfileExtensions.add(fileExtension[j]);", "+\t\t\t\t\t\t}", "-\t\t\t\tif (index != length)", "-\t\t\t\t\tSystem.arraycopy(extensions, 0, extensions = new char[index][], 0, index);", "+\t\t\t\tint length = fileExtensions.size();", "+\t\t\t\t// note that file extensions contains \"java\" as it is defined in JDT Core's plugin.xml", "+\t\t\t\tchar[][] extensions = new char[length][];", "+\t\t\t\textensions[0] = SuffixConstants.EXTENSION_java.toCharArray(); // ensure that \"java\" is first", "+\t\t\t\tint index = 1;", "+\t\t\t\tIterator iterator = fileExtensions.iterator();", "+\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\tString fileExtension = (String) iterator.next();", "+\t\t\t\t\tif (SuffixConstants.EXTENSION_java.equals(fileExtension))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\textensions[index++] = fileExtension.toCharArray();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd34cd5fee05fce4d0603bac962e596e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "64a9f2e9afe2fbf2747713a2decd682b6bd4fd22", "commitAfterChange": "d86bc247ec1c7c9af2048c5ca892bb1a88b65fc5", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic static char[][] getJavaLikeExtensions()", "signatureAfterChange": " \tpublic static char[][] getJavaLikeExtensions()", "diff": ["-\t\t\t// TODO (jerome) reenable once JDT UI supports other file extensions (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=71460)", "-\t\t\tif (!ENABLE_JAVA_LIKE_EXTENSIONS)", "-\t\t\t\tJAVA_LIKE_EXTENSIONS = new char[][] {SuffixConstants.EXTENSION_java.toCharArray()};", "-\t\t\telse {", "-\t\t\t\tIContentType javaContentType = Platform.getContentTypeManager().getContentType(JavaCore.JAVA_SOURCE_CONTENT_TYPE);", "-\t\t\t\tHashSet fileExtensions = new HashSet();", "-\t\t\t\t// content types derived from java content type should be included (https://bugs.eclipse.org/bugs/show_bug.cgi?id=121715)", "-\t\t\t\tIContentType[] contentTypes = Platform.getContentTypeManager().getAllContentTypes();", "-\t\t\t\tfor (int i = 0, length = contentTypes.length; i < length; i++) {", "-\t\t\t\t\tif (contentTypes[i].isKindOf(javaContentType)) { // note that javaContentType.isKindOf(javaContentType) == true", "-\t\t\t\t\t\tString[] fileExtension = contentTypes[i].getFileSpecs(IContentType.FILE_EXTENSION_SPEC);", "-\t\t\t\t\t\tfor (int j = 0, length2 = fileExtension.length; j < length2; j++) {", "-\t\t\t\t\t\t\tfileExtensions.add(fileExtension[j]);", "-\t\t\t\t\t\t}", "+\t\t\tIContentType javaContentType = Platform.getContentTypeManager().getContentType(JavaCore.JAVA_SOURCE_CONTENT_TYPE);", "+\t\t\tHashSet fileExtensions = new HashSet();", "+\t\t\t// content types derived from java content type should be included (https://bugs.eclipse.org/bugs/show_bug.cgi?id=121715)", "+\t\t\tIContentType[] contentTypes = Platform.getContentTypeManager().getAllContentTypes();", "+\t\t\tfor (int i = 0, length = contentTypes.length; i < length; i++) {", "+\t\t\t\tif (contentTypes[i].isKindOf(javaContentType)) { // note that javaContentType.isKindOf(javaContentType) == true", "+\t\t\t\t\tString[] fileExtension = contentTypes[i].getFileSpecs(IContentType.FILE_EXTENSION_SPEC);", "+\t\t\t\t\tfor (int j = 0, length2 = fileExtension.length; j < length2; j++) {", "+\t\t\t\t\t\tfileExtensions.add(fileExtension[j]);", "-\t\t\t\tint length = fileExtensions.size();", "-\t\t\t\t// note that file extensions contains \"java\" as it is defined in JDT Core's plugin.xml", "-\t\t\t\tchar[][] extensions = new char[length][];", "-\t\t\t\textensions[0] = SuffixConstants.EXTENSION_java.toCharArray(); // ensure that \"java\" is first", "-\t\t\t\tint index = 1;", "-\t\t\t\tIterator iterator = fileExtensions.iterator();", "-\t\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\t\tString fileExtension = (String) iterator.next();", "-\t\t\t\t\tif (SuffixConstants.EXTENSION_java.equals(fileExtension))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\textensions[index++] = fileExtension.toCharArray();", "-\t\t\t\t}", "-\t\t\t\tJAVA_LIKE_EXTENSIONS = extensions;", "+\t\t\tint length = fileExtensions.size();", "+\t\t\t// note that file extensions contains \"java\" as it is defined in JDT Core's plugin.xml", "+\t\t\tchar[][] extensions = new char[length][];", "+\t\t\textensions[0] = SuffixConstants.EXTENSION_java.toCharArray(); // ensure that \"java\" is first", "+\t\t\tint index = 1;", "+\t\t\tIterator iterator = fileExtensions.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tString fileExtension = (String) iterator.next();", "+\t\t\t\tif (SuffixConstants.EXTENSION_java.equals(fileExtension))", "+\t\t\t\t\tcontinue;", "+\t\t\t\textensions[index++] = fileExtension.toCharArray();", "+\t\t\t}", "+\t\t\tJAVA_LIKE_EXTENSIONS = extensions;"]}], "num": 7696}
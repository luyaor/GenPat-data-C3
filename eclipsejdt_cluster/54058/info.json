{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fe4069ae7bfcf642906054d00fab8c0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dc84d021d8b6f0bb8e3cf939732e748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "269f312257be83a1ad7c36278e7ea6d85f19531b", "commitAfterChange": "87ed66aa23eb18c40ed50003879a94df88ad854b", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "signatureAfterChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "diff": ["-\t\tSet keys = allContainerPaths.keySet();", "-\t\tint length = keys.size();", "-\t\tIJavaProject[] javaProjects = new IJavaProject[length]; // clone as the following will have a side effect", "-\t\tkeys.toArray(javaProjects);", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tIJavaProject javaProject = javaProjects[i];", "-\t\t\tHashSet pathSet = (HashSet) allContainerPaths.get(javaProject);", "-\t\t\tif (pathSet == null) continue;", "-\t\t\tint length2 = pathSet.size();", "-\t\t\tIPath[] paths = new IPath[length2];", "-\t\t\tpathSet.toArray(paths); // clone as the following will have a side effect", "-\t\t\tfor (int j = 0; j < length2; j++) {", "-\t\t\t\tIPath path = paths[j];", "-\t\t\t\tinitializeContainer(javaProject, path);", "+\t\tboolean ok = false;", "+\t\ttry {", "+\t\t\tSet keys = allContainerPaths.keySet();", "+\t\t\tint length = keys.size();", "+\t\t\tIJavaProject[] javaProjects = new IJavaProject[length]; // clone as the following will have a side effect", "+\t\t\tkeys.toArray(javaProjects);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIJavaProject javaProject = javaProjects[i];", "+\t\t\t\tHashSet pathSet = (HashSet) allContainerPaths.get(javaProject);", "+\t\t\t\tif (pathSet == null) continue;", "+\t\t\t\tint length2 = pathSet.size();", "+\t\t\t\tIPath[] paths = new IPath[length2];", "+\t\t\t\tpathSet.toArray(paths); // clone as the following will have a side effect", "+\t\t\t\tfor (int j = 0; j < length2; j++) {", "+\t\t\t\t\tIPath path = paths[j];", "+\t\t\t\t\tinitializeContainer(javaProject, path);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tok = true;", "+\t\t} finally {", "+\t\t\tif (!ok) { ", "+\t\t\t\t// if we're being traversed by an exception, ensure that that containers are ", "+\t\t\t\t// no longer marked as initialization in progress", "+\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=66437)", "+\t\t\t\tthis.containerInitializationInProgress.set(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c70306089faec28b5f5e2e6789b75eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "325f3cd70524915aea7c5208cccbff17dcccc775", "commitAfterChange": "eaaeea046b340f91bd2146e38b8d80abded44679", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "signatureAfterChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "diff": ["-\t\t\t\t\t\tSet entrySet = allContainerPaths.entrySet();", "-\t\t\t\t\t\tint length = entrySet.size();", "-\t\t\t\t\t\tMap.Entry[] entries = new Map.Entry[length]; // clone as the following will have a side effect", "-\t\t\t\t\t\tentrySet.toArray(entries);", "-\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\tMap.Entry entry = entries[i];", "-\t\t\t\t\t\t\tIJavaProject javaProject = (IJavaProject) entry.getKey();", "-\t\t\t\t\t\t\tHashSet pathSet = (HashSet) entry.getValue();", "-\t\t\t\t\t\t\tif (pathSet == null) continue;", "-\t\t\t\t\t\t\tint length2 = pathSet.size();", "-\t\t\t\t\t\t\tIPath[] paths = new IPath[length2];", "-\t\t\t\t\t\t\tpathSet.toArray(paths); // clone as the following will have a side effect", "-\t\t\t\t\t\t\tfor (int j = 0; j < length2; j++) {", "-\t\t\t\t\t\t\t\tIPath path = paths[j];", "-\t\t\t\t\t\t\t\tinitializeContainer(javaProject, path);", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tSet entrySet = allContainerPaths.entrySet();", "+\t\t\t\t\t\t\tint length = entrySet.size();", "+\t\t\t\t\t\t\tif (monitor != null)", "+\t\t\t\t\t\t\t\tmonitor.beginTask(\"\", length); //$NON-NLS-1$", "+\t\t\t\t\t\t\tMap.Entry[] entries = new Map.Entry[length]; // clone as the following will have a side effect", "+\t\t\t\t\t\t\tentrySet.toArray(entries);", "+\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\t\tMap.Entry entry = entries[i];", "+\t\t\t\t\t\t\t\tIJavaProject javaProject = (IJavaProject) entry.getKey();", "+\t\t\t\t\t\t\t\tHashSet pathSet = (HashSet) entry.getValue();", "+\t\t\t\t\t\t\t\tif (pathSet == null) continue;", "+\t\t\t\t\t\t\t\tint length2 = pathSet.size();", "+\t\t\t\t\t\t\t\tIPath[] paths = new IPath[length2];", "+\t\t\t\t\t\t\t\tpathSet.toArray(paths); // clone as the following will have a side effect", "+\t\t\t\t\t\t\t\tfor (int j = 0; j < length2; j++) {", "+\t\t\t\t\t\t\t\t\tIPath path = paths[j];", "+\t\t\t\t\t\t\t\t\tinitializeContainer(javaProject, path);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (monitor != null)", "+\t\t\t\t\t\t\t\t\tmonitor.worked(1);", "+\t\t\t\t\t\t} finally {", "+\t\t\t\t\t\t\tif (monitor != null)", "+\t\t\t\t\t\t\t\tmonitor.done();", "+\t\t\tIProgressMonitor monitor = (IProgressMonitor) this.batchContainerInitializationsProgress.get();", "-\t\t\t\trunnable.run(null/*no progress available*/);", "+\t\t\t\trunnable.run(monitor);", "-\t\t\t\t\tnull/*no progress available here*/);", "+\t\t\t\t\tmonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cfccb44dc12170cdf505c3f2c4b69bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "2d45e82533a4fdf2e19ac612c4a04c15da28bf1a", "commitAfterChange": "fabf6bf3cec26424988d597b756c5fec9a4b330d", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "signatureAfterChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "diff": ["-\t\tHashMap allContainerPaths = new HashMap();", "+\t\tfinal HashMap allContainerPaths = new HashMap();", "-\t\t\tSet keys = allContainerPaths.keySet();", "-\t\t\tint length = keys.size();", "-\t\t\tIJavaProject[] javaProjects = new IJavaProject[length]; // clone as the following will have a side effect", "-\t\t\tkeys.toArray(javaProjects);", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tIJavaProject javaProject = javaProjects[i];", "-\t\t\t\tHashSet pathSet = (HashSet) allContainerPaths.get(javaProject);", "-\t\t\t\tif (pathSet == null) continue;", "-\t\t\t\tint length2 = pathSet.size();", "-\t\t\t\tIPath[] paths = new IPath[length2];", "-\t\t\t\tpathSet.toArray(paths); // clone as the following will have a side effect", "-\t\t\t\tfor (int j = 0; j < length2; j++) {", "-\t\t\t\t\tIPath path = paths[j];", "-\t\t\t\t\tinitializeContainer(javaProject, path);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\t// if possible run inside an IWokspaceRunnable with AVOID_UPATE to avoid unwanted builds", "+\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=118507)", "+\t\t\tIWorkspaceRunnable runnable = \t\t\t\t", "+\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\t\tSet keys = allContainerPaths.keySet();", "+\t\t\t\t\t\tint length = keys.size();", "+\t\t\t\t\t\tIJavaProject[] javaProjects = new IJavaProject[length]; // clone as the following will have a side effect", "+\t\t\t\t\t\tkeys.toArray(javaProjects);", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tIJavaProject javaProject = javaProjects[i];", "+\t\t\t\t\t\t\tHashSet pathSet = (HashSet) allContainerPaths.get(javaProject);", "+\t\t\t\t\t\t\tif (pathSet == null) continue;", "+\t\t\t\t\t\t\tint length2 = pathSet.size();", "+\t\t\t\t\t\t\tIPath[] paths = new IPath[length2];", "+\t\t\t\t\t\t\tpathSet.toArray(paths); // clone as the following will have a side effect", "+\t\t\t\t\t\t\tfor (int j = 0; j < length2; j++) {", "+\t\t\t\t\t\t\t\tIPath path = paths[j];", "+\t\t\t\t\t\t\t\tinitializeContainer(javaProject, path);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t};", "+\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\t\tif (workspace.isTreeLocked())", "+\t\t\t\trunnable.run(null/*no progress available*/);", "+\t\t\telse", "+\t\t\t\tworkspace.run(", "+\t\t\t\t\trunnable,", "+\t\t\t\t\tnull/*don't take any lock*/,", "+\t\t\t\t\tIWorkspace.AVOID_UPDATE,", "+\t\t\t\t\tnull/*no progress available here*/);", "+\t\t} catch (CoreException e) {", "+\t\t\t// ignore", "+\t\t\tUtil.log(e, \"Exception while initializing all containers\"); //$NON-NLS-1$"]}], "num": 54058}
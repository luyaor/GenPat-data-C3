{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9161b5f67c6a409e6e228e45be5f0e01", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "093cdca7d4a6ad1bde2f787eca5a9bed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "3a52394f0d22844465ca678eae001b22da348629", "commitAfterChange": "204668dea8f27b8498b13996f1332d4610d869bb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate HashSet containerInitializationInProgress(IJavaProject project)", "signatureAfterChange": "  \tprivate void containerAddInitializationInProgress(IJavaProject project, IPath containerPath)", "diff": ["-\t */", "-\tprivate HashSet containerInitializationInProgress(IJavaProject project) {", "-\t\tif (initializations == null) {", "-\t\t\tinitializations = new HashMap();", "-\t\t\tthis.containerInitializationInProgress.set(initializations);", "-\t\t}", "-\t\tHashSet projectInitializations = (HashSet)initializations.get(project);", "-\t\tif (projectInitializations == null) {", "-\t\t\tprojectInitializations = new HashSet();", "-\t\t\tinitializations.put(project, projectInitializations);", "-\t\t}", "-\t\treturn projectInitializations;", "+\tprivate void containerAddInitializationInProgress(IJavaProject project, IPath containerPath) {", "+\t\tMap initializations = (Map)this.containerInitializationInProgress.get();", "+\t\tif (initializations == null)", "+\t\t\tthis.containerInitializationInProgress.set(initializations = new HashMap());", "+\t\tHashSet projectInitializations = (HashSet) initializations.get(project);", "+\t\tif (projectInitializations == null)", "+\t\t\tinitializations.put(project, projectInitializations = new HashSet());", "+\t\tprojectInitializations.add(containerPath);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77f81605b6154814a114ef9c879cf751", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/APITests.java", "commitBeforeChange": "13c7fe094d778e029a6ff3885a33b085ac95c7a1", "commitAfterChange": "3d23167de0cc8549a88a05b8aab19471006b9190", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void testAptUtil() throws Exception", "signatureAfterChange": " \t \tpublic void testAptUtil() throws Exception", "diff": ["-\t\t// Check getting an annotation with a wildcard", "+\t\t// Check getting an annotation with a partial wildcard (\"org.eclipse.jdt.apt.tests.*\")", "+\t\t", "+\t\t", "+\t\t// Check getting an annotation with a full wildcard (\"*\")", "+\t\t// Note that these tests require that we do not cache what annotations", "+\t\t// a factory claims to support. Specifically, the HelloWorldWildcard one", "+\t\t// will swap out what it returns based on this static boolean.", "+\t\t// If we change to cache the results, this test will need to be modified to work", "+\t\t// in that scenario, probably by created a new external jar with ", "+\t\t// a processor that claims *.", "+\t\tHelloWorldWildcardAnnotationProcessorFactory.CLAIM_ALL_ANNOTATIONS = true;", "+\t\ttry {", "+\t\t\tfactory = ", "+\t\t\t\tAptUtil.getFactoryForAnnotation(\"org.eclipse.Foo\", jproj); //$NON-NLS-1$", "+\t\t\t", "+\t\t\tassertEquals(factory.getClass(), HelloWorldWildcardAnnotationProcessorFactory.class);", "+\t\t}", "+\t\tfinally {", "+\t\t\tHelloWorldWildcardAnnotationProcessorFactory.CLAIM_ALL_ANNOTATIONS = false;", "+\t\t}", "+\t\t", "+\t\t// Make sure we've unset the wildcard behavior", "+\t\tfactory = ", "+\t\t\tAptUtil.getFactoryForAnnotation(\"org.eclipse.Foo\", jproj); //$NON-NLS-1$", "+\t\t", "+\t\tassertNull(factory);", "+\t\t"]}], "num": 66707}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e6bd091fad79db3fac7a1ba5fad8975", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c7fe4c1be3c6dd426a5f6b52f809748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "0e8ca24e8451f1d91ed53a269d184ea21d12301f", "commitAfterChange": "369ffd3db09511488e039ba2575df2eeea055320", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \t\r private boolean isOnClasspath(IClasspathEntry[] classpath, IResource res)", "signatureAfterChange": "\r \t\r private boolean isOnClasspath(IPath path)", "diff": ["-private boolean isOnClasspath(IClasspathEntry[] classpath, IResource res) {\r", "-\tIPath path = res.getFullPath();\r", "-\tif (classpath == null) {\r", "-\t\treturn true;\r", "-\t} else if (classpath == UNKNOWN_CLASSPATH) {\r", "-\t\treturn false;\r", "-\t} else {\r", "-\t\tfor (int i = 0, length = classpath.length; i < length; i++) {\r", "-\t\t\tif (classpath[i].getPath().isPrefixOf(path)) {\r", "-\t\t\t\treturn true;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn false;\r", "-\t}\r", "+private boolean isOnClasspath(IPath path) {\r", "+\treturn this.roots.get(path) != null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6763412e92bb57830e83d1ccdcb92c37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBinaryType.java", "commitBeforeChange": "b2329baad162e28eeaa0efd6e2ada9db5179775c", "commitAfterChange": "1d49668f30e4a48841a7ba14782018ddd855d6b6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public boolean isAnonymous()", "signatureAfterChange": "\r public boolean isAnonymous()", "diff": ["+public boolean isAnonymous() {\r", "+\treturn false; // index did not record this information (since unused for hierarchies)\r", "+}\r", "-}\r", "-public boolean isAnonymous() {\r", "-\tint index = CharOperation.lastIndexOf('$', this.name);\r", "-\tif (index == -1) {\r", "-\t\treturn false;\r", "-\t} else {\r", "-\t\tfor (int i = index + 1, length = this.name.length; i < length; i++) {\r", "-\t\t\tif (!Character.isDigit(this.name[i])) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn true;\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdf7625fec30f898e6df20c7a2920a1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/TestVerifier.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " private void launchVerifyTestsIfNeeded(String[] classpaths, String[] vmArguments)", "signatureAfterChange": " private void launchVerifyTestsIfNeeded(String[] classpaths, String[] vmArguments)", "diff": ["-\t\tboolean sameClasspaths = true;", "-\t\tfor (int i = 0; i < classpaths.length; i++) {", "-\t\t\tif (!this.classpathCache[i].equals(classpaths[i])) {", "-\t\t\t\tsameClasspaths = false;", "-\t\t\t\tbreak;", "+\t\tif (classpaths.length == classpathCache.length) {", "+\t\t\tboolean sameClasspaths = true;", "+\t\t\tfor (int i = 0; i < classpaths.length; i++) {", "+\t\t\t\tif (!this.classpathCache[i].equals(classpaths[i])) {", "+\t\t\t\t\tsameClasspaths = false;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t}", "-\t\tif (sameClasspaths) {", "-\t\t\treturn;", "+\t\t\tif (sameClasspaths) {", "+\t\t\t\treturn;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd2a0e6f1ddeee87004eb61b9aaec75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "409f0d1ccf0133d5fcf6863869c728111e50135d", "commitAfterChange": "84e2da9db5b8e3d6a6df97b0f7ad6795dd65a9ad", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tprotected boolean isOnClasspath(IJavaElement element)", "signatureAfterChange": "\r \t\r private boolean isOnClasspath(IClasspathEntry[] classpath, IResource res)", "diff": ["-\t */\r", "-\tprotected boolean isOnClasspath(IJavaElement element) {\r", "-\r", "-\t\tif (element.getElementType() == IJavaElement.PACKAGE_FRAGMENT_ROOT) {\r", "-\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) element;\r", "-\t\t\tJavaProject jp = (JavaProject) element.getJavaProject();\r", "-\t\t\ttry {\r", "-\t\t\t\treturn jp.getClasspathEntryFor(root.getPath()) != null;\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\treturn true;\r", "-\t\t}\r", "-\r", "-\t}\r", "+\t\r", "+private boolean isOnClasspath(IClasspathEntry[] classpath, IResource res) {\r", "+\tIPath path = res.getFullPath();\r", "+\tif (classpath == null) {\r", "+\t\treturn true;\r", "+\t} else if (classpath == UNKNOWN_CLASSPATH) {\r", "+\t\treturn false;\r", "+\t} else {\r", "+\t\tfor (int i = 0, length = classpath.length; i < length; i++) {\r", "+\t\t\tif (classpath[i].getPath().isPrefixOf(path)) {\r", "+\t\t\t\treturn true;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn false;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f766ac5c9694ab49e8baa440ec2b37dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "aa26b9b8d7416323ddb940d58fe661ba8f5d7223", "commitAfterChange": "a4cacbfb8be6276f1bbe9130c20576048fe33408", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public boolean hasStructuralChanges(byte[] newBytes, boolean orderRequired, boolean excludesSynthetic)", "signatureAfterChange": " public boolean hasStructuralChanges(byte[] newBytes, boolean orderRequired, boolean excludesSynthetic)", "diff": ["+\t\tchar[][][] missingTypes = getMissingTypeNames();", "+\t\tchar[][][] newMissingTypes = newClassFile.getMissingTypeNames();", "+\t\tif (missingTypes != null) {", "+\t\t\tif (newMissingTypes == null) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tint length = missingTypes.length;", "+\t\t\tif (length != newMissingTypes.length) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tif (!CharOperation.equals(missingTypes[i], newMissingTypes[i])) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (newMissingTypes != null) {", "+\t\t\treturn true;", "+\t\t}"]}], "num": 41971}
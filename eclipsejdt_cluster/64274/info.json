{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2370933abfa0882ec830cf8dc6dfaa94", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "035c733069b070a16b0b147d6e3b5e66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "2aafd163940041eceef8b780ff91e2b7a2e51bfb", "commitAfterChange": "1748a55668f189f632b3b49793f54d9718d62af3", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": "  \tpublic void testArrayType()", "signatureAfterChange": "  \tpublic void testArrayType()", "diff": ["+\t\tfinal ArrayType x3 = this.ast.newArrayType(x, 2);", "+\t\tassertTrue(x3.getDimensions() == 7);", "+\t\t", "+\t\ttry {", "+\t\t\tthis.ast.newArrayType(null, 2);", "+\t\t} catch(IllegalArgumentException e) {", "+\t\t\t// ignore - expected", "+\t\t}", "+\t\ttry {", "+\t\t\tthis.ast.newArrayType(x, 0);", "+\t\t} catch(IllegalArgumentException e) {", "+\t\t\t// ignore - expected", "+\t\t}", "+\t\ttry {", "+\t\t\tthis.ast.newArrayType(x, 100000);", "+\t\t} catch(IllegalArgumentException e) {", "+\t\t\t// ignore - expected", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6d70d188c3103671e361072678edf96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "52b00369d469c7b24a63a3fde464411aba7b73af", "commitAfterChange": "2bfa11153ef154267e539d45f27351ed761ef0a2", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "diff": ["+\t\t\tIMarker marker = null;", "-\t\t\t\t\tcreateClasspathProblemMarker(", "+\t\t\t\t\tmarker = createClasspathProblemMarker(", "+\t\t\t\t\t\tif (marker != null) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tmarker.setAttribute(IJavaModelMarker.UNBOUND_VARIABLE, rawEntry.getPath().segment(0));", "+\t\t\t\t\t\t\t} catch(CoreException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (marker != null) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tmarker.setAttribute(IJavaModelMarker.UNBOUND_CONTAINER, rawEntry.getPath().makeRelative().toString());", "+\t\t\t\t\t\t\t} catch(CoreException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}], "num": 64274}
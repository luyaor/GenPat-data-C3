{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "230d378e8a5cfd91d9d381fe2c106844", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "471c5c2a23e587ab6c8a5b8f4b255d94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateElementInCUOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprotected void insertDOMNode(IDOMNode parent, IDOMNode child)", "signatureAfterChange": " \tprotected void insertASTNode(ASTRewrite rewriter, ASTNode parent, ASTNode child) throws JavaModelException", "diff": ["-    // TODO - JDOM - remove once model ported off of JDOM", "-\tprotected void insertDOMNode(IDOMNode parent, IDOMNode child) {", "-\t\tif (fInsertionPolicy != INSERT_LAST) {", "-\t\t\tIDOMNode sibling = ((JavaElement)fAnchorElement).findNode(fCUDOM);", "-\t\t\tif (sibling != null && fInsertionPolicy == INSERT_AFTER) {", "-\t\t\t\tsibling = sibling.getNextNode();", "-\t\t\t}", "-\t\t\tif (sibling != null) {", "-\t\t\t\tsibling.insertSibling(child);", "-\t\t\t\tfCreatedElement = (DOMNode)child;", "-\t\t\t\tfInsertionPosition = ((DOMNode)sibling).getStartPosition();", "-\t\t\t\tfReplacementLength = 0;", "-\t\t\t\treturn;", "-\t\t\t}", "+\tprotected void insertASTNode(ASTRewrite rewriter, ASTNode parent, ASTNode child) throws JavaModelException {", "+\t\tStructuralPropertyDescriptor propertyDescriptor = getChildPropertyDescriptor(parent);", "+\t\tif (propertyDescriptor instanceof ChildListPropertyDescriptor) {", "+\t\t\tChildListPropertyDescriptor childListPropertyDescriptor = (ChildListPropertyDescriptor) propertyDescriptor;", "+\t \t\tListRewrite rewrite = rewriter.getListRewrite(parent, childListPropertyDescriptor);", "+\t \t\tswitch (this.insertionPolicy) {", "+\t \t\t\tcase INSERT_BEFORE:", "+\t \t\t\t\tASTNode element = ((JavaElement) this.anchorElement).findNode(this.cuAST);", "+\t \t\t\t\tif (childListPropertyDescriptor.getElementType().isAssignableFrom(element.getClass()))", "+\t\t \t\t\t\trewrite.insertBefore(child, element, null);", "+\t \t\t\t\telse", "+\t \t\t\t\t\t// case of an empty import list: the anchor element is the top level type and cannot be used in insertBefore as it is not the same type", "+\t \t\t\t\t\trewrite.insertLast(child, null);", "+\t \t\t\t\tbreak;", "+\t \t\t\tcase INSERT_AFTER:", "+\t \t\t\t\telement = ((JavaElement) this.anchorElement).findNode(this.cuAST);", "+\t \t\t\t\tif (childListPropertyDescriptor.getElementType().isAssignableFrom(element.getClass()))", "+\t\t \t\t\t\trewrite.insertAfter(child, element, null);", "+\t \t\t\t\telse", "+\t \t\t\t\t\t// case of an empty import list: the anchor element is the top level type and cannot be used in insertAfter as it is not the same type", "+\t \t\t\t\t\trewrite.insertLast(child, null);", "+\t \t\t\t\tbreak;", "+\t \t\t\tcase INSERT_LAST:", "+\t \t\t\t\trewrite.insertLast(child, null);", "+\t \t\t\t\tbreak;", "+\t \t\t}", "+\t\t} else {", "+\t\t\trewriter.set(parent, propertyDescriptor, child, null);", "-\t\t//add as the last element of the parent", "-\t\tparent.addChild(child);", "-\t\tfCreatedElement = (org.eclipse.jdt.internal.core.jdom.DOMNode)child;", "-\t\tfInsertionPosition = ((org.eclipse.jdt.internal.core.jdom.DOMNode)parent).getInsertionPosition();", "-\t//\tfInsertionPosition = lastChild == null ? ((DOMNode)parent).getInsertionPosition() : lastChild.getInsertionPosition();", "-\t\tfReplacementLength = parent.getParent() == null ? -1 : 0;", "+ \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c1e2c02a03cf3eb360b9a641eba76e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "390e166678e0fa49ec55a0c44a3dd31625f6e21a", "commitAfterChange": "9ea60639cd404b75c69d97f9c48097cabdf417fc", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tsynchronized IBinding resolveImport(ImportDeclaration importDeclaration)", "signatureAfterChange": " \tsynchronized IBinding resolveImport(ImportDeclaration importDeclaration)", "diff": ["+\t\t\t\tfinal boolean isStatic = importReference.isStatic();", "-\t\t\t\t\tBinding binding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length), true, importReference.isStatic());", "+\t\t\t\t\tBinding binding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length), true, isStatic);", "-\t\t\t\t\t\tif ((binding.kind() & Binding.PACKAGE) != 0) {", "-\t\t\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "-\t\t\t\t\t\t\tif (packageBinding == null) {", "-\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\tif (isStatic) {", "+\t\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "+\t\t\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "+\t\t\t\t\t\t\t\treturn typeBinding == null ? null : typeBinding;\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\treturn packageBinding;", "-\t\t\t\t\t\t\t// if it is not a package, it has to be a type", "-\t\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "-\t\t\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\tif ((binding.kind() & Binding.PACKAGE) != 0) {", "+\t\t\t\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "+\t\t\t\t\t\t\t\tif (packageBinding == null) {", "+\t\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn packageBinding;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// if it is not a package, it has to be a type", "+\t\t\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "+\t\t\t\t\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn typeBinding;", "-\t\t\t\t\t\t\treturn typeBinding;", "-\t\t\t\t\tBinding binding = this.scope.getImport(importReference.tokens, false, importReference.isStatic());", "-\t\t\t\t\tif (binding != null && binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "-\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "-\t\t\t\t\t\treturn typeBinding == null ? null : typeBinding;", "+\t\t\t\t\tBinding binding = this.scope.getImport(importReference.tokens, false, isStatic);", "+\t\t\t\t\tif (binding != null) {", "+\t\t\t\t\t\tif (isStatic) {", "+\t\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "+\t\t\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "+\t\t\t\t\t\t\t\treturn typeBinding == null ? null : typeBinding;\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t} else if (binding instanceof FieldBinding) {", "+\t\t\t\t\t\t\t\tIVariableBinding variableBinding = this.getVariableBinding((FieldBinding) binding);", "+\t\t\t\t\t\t\t\treturn variableBinding == null ? null : variableBinding;\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t} else if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.MethodBinding) {", "+\t\t\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\t\t\treturn this.getMethodBinding((org.eclipse.jdt.internal.compiler.lookup.MethodBinding)binding);\t\t\t\t\t\t", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "+\t\t\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "+\t\t\t\t\t\t\t\treturn typeBinding == null ? null : typeBinding;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}], "num": 72433}
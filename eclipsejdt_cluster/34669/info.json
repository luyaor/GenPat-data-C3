{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9ad7e1acb93376fce7cd48b981faa2c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11916dd9e76947e10273ab807d12cf4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "b14a6c4d09a9bece1bab75937908ff44df19fa09", "commitAfterChange": "a846071c58f9098177eef02be0134294158f9c4f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["+\t\t\tboolean enableSyntacticNullAnalysisForFields = this.scope.compilerOptions().enableSyntacticNullAnalysisForFields;", "+\t\t\t\t}", "+\t\t\t\tif (enableSyntacticNullAnalysisForFields) {", "+\t\t\t\t\tconstructorContext.expireNullCheckedFieldInfo();", "-\t\t// check missing blank final field initializations", "+\t\t// check missing blank final field initializations (plus @NonNull)", "-\t\t\t\tFieldBinding field;", "-\t\t\t\tif ((!(field = fields[i]).isStatic())", "-\t\t\t\t\t&& field.isFinal()", "-\t\t\t\t\t&& (!flowInfo.isDefinitelyAssigned(fields[i]))) {", "-\t\t\t\t\tthis.scope.problemReporter().uninitializedBlankFinalField(", "-\t\t\t\t\t\tfield,", "-\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0)", "-\t\t\t\t\t\t\t\t? (ASTNode) this.scope.referenceType().declarationOf(field.original())", "-\t\t\t\t\t\t\t\t: this);", "+\t\t\t\tFieldBinding field = fields[i];", "+\t\t\t\tif (!field.isStatic() && !flowInfo.isDefinitelyAssigned(field)) {", "+\t\t\t\t\tif (field.isFinal()) {", "+\t\t\t\t\t\tthis.scope.problemReporter().uninitializedBlankFinalField(", "+\t\t\t\t\t\t\t\tfield,", "+\t\t\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0)", "+\t\t\t\t\t\t\t\t\t? (ASTNode) this.scope.referenceType().declarationOf(field.original())", "+\t\t\t\t\t\t\t\t\t: this);", "+\t\t\t\t\t} else if (field.isNonNull()) {", "+\t\t\t\t\t\t\tthis.scope.problemReporter().uninitializedNonNullField(", "+\t\t\t\t\t\t\t\tfield,", "+\t\t\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0) ", "+\t\t\t\t\t\t\t\t\t? (ASTNode) this.scope.referenceType().declarationOf(field.original())", "+\t\t\t\t\t\t\t\t\t: this);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8469a77ee2631bd28cfb5f514b1ad8f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["+\t\t\tboolean enableSyntacticNullAnalysisForFields = this.scope.compilerOptions().enableSyntacticNullAnalysisForFields;", "+\t\t\t\t}", "+\t\t\t\tif (enableSyntacticNullAnalysisForFields) {", "+\t\t\t\t\tconstructorContext.expireNullCheckedFieldInfo();", "-\t\t// check missing blank final field initializations", "+\t\t// check missing blank final field initializations (plus @NonNull)", "-\t\t\t\tFieldBinding field;", "-\t\t\t\tif ((!(field = fields[i]).isStatic())", "-\t\t\t\t\t&& field.isFinal()", "-\t\t\t\t\t&& (!flowInfo.isDefinitelyAssigned(fields[i]))) {", "-\t\t\t\t\tthis.scope.problemReporter().uninitializedBlankFinalField(", "-\t\t\t\t\t\tfield,", "-\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0)", "-\t\t\t\t\t\t\t\t? (ASTNode) this.scope.referenceType().declarationOf(field.original())", "-\t\t\t\t\t\t\t\t: this);", "+\t\t\t\tFieldBinding field = fields[i];", "+\t\t\t\tif (!field.isStatic() && !flowInfo.isDefinitelyAssigned(field)) {", "+\t\t\t\t\tif (field.isFinal()) {", "+\t\t\t\t\t\tthis.scope.problemReporter().uninitializedBlankFinalField(", "+\t\t\t\t\t\t\t\tfield,", "+\t\t\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0)", "+\t\t\t\t\t\t\t\t\t? (ASTNode) this.scope.referenceType().declarationOf(field.original())", "+\t\t\t\t\t\t\t\t\t: this);", "+\t\t\t\t\t} else if (field.isNonNull()) {", "+\t\t\t\t\t\t\tthis.scope.problemReporter().uninitializedNonNullField(", "+\t\t\t\t\t\t\t\tfield,", "+\t\t\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0) ", "+\t\t\t\t\t\t\t\t\t? (ASTNode) this.scope.referenceType().declarationOf(field.original())", "+\t\t\t\t\t\t\t\t\t: this);", "+\t\t\t\t\t}"]}], "num": 34669}
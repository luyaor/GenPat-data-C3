{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29ef6609d167e4f60f1900fb3c6b7a5f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fe38f83aaa4ac3f03a2f8e9e8c9b2ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "1d5b841741b609cf6927afba3dde0ac1dd2572e2", "commitAfterChange": "09c7c7b4fe8a9c0ad49252ee63d32d12d87dd8ea", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 18, "signatureBeforeChange": "\t \tpublic static CompilationUnitDeclaration resolve( \t\tICompilationUnit unitElement, \t\tboolean cleanUp, \t\tchar[] source, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "\t \tpublic static CompilationUnitDeclaration resolve( \t\tICompilationUnit unitElement, \t\tboolean cleanUp, \t\tchar[] source, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\tchar[] fileName = unitElement.getElementName().toCharArray();", "-\t\tJavaProject project = (JavaProject) unitElement.getJavaProject();", "-\t\tCompilationUnitResolver compilationUnitVisitor =", "-\t\t\tnew CompilationUnitResolver(", "-\t\t\t\tgetNameEnvironment(project, owner, monitor),", "-\t\t\t\tgetHandlingPolicy(),", "-\t\t\t\tproject.getOptions(true),", "-\t\t\t\tgetRequestor(),", "-\t\t\t\tgetProblemFactory(monitor));", "-", "-\t\tCompilationUnitDeclaration unit = null;", "-\t\ttry {", "-\t\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true);", "-", "-\t\t\tIPackageFragment packageFragment = (IPackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "-\t\t\tchar[][] expectedPackageName = null;", "-\t\t\tif (packageFragment != null){", "-\t\t\t\texpectedPackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "-\t\t\t}", "-\t\t\t", "-\t\t\tunit =", "-\t\t\t\tcompilationUnitVisitor.resolve(", "-\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\tsource,", "-\t\t\t\t\t\texpectedPackageName,", "-\t\t\t\t\t\tnew String(fileName),", "-\t\t\t\t\t\tencoding),", "-\t\t\t\t\ttrue, // method verification", "-\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\ttrue); // generate code", "-\t\t\treturn unit;", "-\t\t} finally {", "-\t\t\tif (cleanUp && unit != null) {", "-\t\t\t\tunit.cleanUp();", "-\t\t\t}", "+\t\tIPackageFragment packageFragment = (IPackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "+\t\tchar[][] packageName = null;", "+\t\tif (packageFragment != null){", "+\t\t\tpackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "+\t\tString fileName = unitElement.getElementName();", "+\t\tIJavaProject project = unitElement.getJavaProject();", "+\t\treturn resolve(source, packageName, fileName, project, null/*no node searcher*/, cleanUp, owner, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae555f3f3cd4562afbf8e232503df127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "3614fb7a931da6f7d6b963e79da43a1a287be280", "commitAfterChange": "f35ac795e031f468ed2702736c7462517694be67", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnitDeclaration unit, \t\tICompilationUnit unitElement,  \t\tchar[] contents, \t\tParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tHashMap problems, \t\tboolean creatingAST, \t\tint reconcileFlags, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnit unitElement,  \t\tSourceElementParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tHashMap problems, \t\tboolean creatingAST, \t\tint reconcileFlags, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\tCompilationUnitDeclaration unit,", "-\t\tICompilationUnit unitElement, ", "-\t\tchar[] contents,", "-\t\tParser parser,", "+\t\tCompilationUnit unitElement, ", "+\t\tSourceElementParser parser,", "+\t\t\tCompilationUnitDeclaration unit = null;", "-\t\t\t}", "-\t\t\tPackageFragment packageFragment = (PackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "-\t\t\tchar[][] expectedPackageName = null;", "-\t\t\tif (packageFragment != null){", "-\t\t\t\texpectedPackageName = Util.toCharArrays(packageFragment.names);", "-\t\t\t}", "-\t\t\tif (unit == null) {", "-\t\t\t\tunit = problemFinder.resolve(", "-\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\tcontents,", "-\t\t\t\t\t\texpectedPackageName,", "-\t\t\t\t\t\tunitElement.getPath().toString(),", "-\t\t\t\t\t\tunitElement),", "-\t\t\t\t\ttrue, // verify methods", "-\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\ttrue); // generate code", "+\t\t\t\ttry {", "+\t\t\t\t\tunit = parser.parseCompilationUnit(unitElement, true/*full parse*/);", "+\t\t\t\t\tproblemFinder.resolve(", "+\t\t\t\t\t\tunit,", "+\t\t\t\t\t\tunitElement,", "+\t\t\t\t\t\ttrue, // verify methods", "+\t\t\t\t\t\ttrue, // analyze code", "+\t\t\t\t\t\ttrue); // generate code", "+\t\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t\tproblemFinder.handleInternalException(e, unit);", "+\t\t\t\t}", "-\t\t\t\tproblemFinder.resolve(", "-\t\t\t\t\tunit,", "-\t\t\t\t\tnull, // no need for source", "-\t\t\t\t\ttrue, // verify methods", "-\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\ttrue); // generate code", "+\t\t\t\tunit = ", "+\t\t\t\t\tproblemFinder.resolve(", "+\t\t\t\t\t\tunitElement,", "+\t\t\t\t\t\ttrue, // verify methods", "+\t\t\t\t\t\ttrue, // analyze code", "+\t\t\t\t\t\ttrue); // generate code", "-\t\t\tmessage.append(contents);", "+\t\t\tmessage.append(unitElement.getSource());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f033e35903b8a052f82ed33ffd406e41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "a4e360d6406fed9275bf933467b5e9a51a704eb6", "commitAfterChange": "7065da01531bf4c318c59206b62aa1503a948abe", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tICompilationUnit unitElement,  \t\tIProblemRequestor problemRequestor, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration process( \t\tICompilationUnit unitElement,  \t\tIProblemRequestor problemRequestor, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\tpublic static CompilationUnitDeclaration resolve(", "-\t\tICompilationUnit unitElement, ", "-\t\tIProblemRequestor problemRequestor,", "-\t\tIProgressMonitor monitor)", "-\t\tthrows JavaModelException {", "-", "-\t\tchar[] fileName = unitElement.getElementName().toCharArray();", "-\t\t", "-\t\tIJavaProject project = unitElement.getJavaProject();", "-\t\tCompilationUnitProblemFinder problemFinder =", "-\t\t\tnew CompilationUnitProblemFinder(", "-\t\t\t\tgetNameEnvironment(unitElement),", "-\t\t\t\tgetHandlingPolicy(),", "-\t\t\t\tproject.getOptions(true),", "-\t\t\t\tgetRequestor(),", "-\t\t\t\tgetProblemFactory(fileName, problemRequestor, monitor));", "-", "-\t\tCompilationUnitDeclaration unit = null;", "-\t\ttry {", "-\t\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true);", "-\t\t\t", "-\t\t\tIPackageFragment packageFragment = (IPackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "-\t\t\tchar[][] expectedPackageName = null;", "-\t\t\tif (packageFragment != null){", "-\t\t\t\texpectedPackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "-\t\t\t}", "-\t\t\tunit = problemFinder.resolve(", "-\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\tunitElement.getSource().toCharArray(),", "-\t\t\t\t\t\texpectedPackageName,", "-\t\t\t\t\t\tnew String(fileName),", "-\t\t\t\t\t\tencoding));", "-\t\t\treturn unit;", "-\t\t} finally {", "-\t\t\tif (unit != null) {", "-\t\t\t\tunit.cleanUp();", "-\t\t\t}", "-\t\t\tproblemFinder.lookupEnvironment.reset();\t\t\t", "-\t\t}", "-\t}", "+\tpublic static CompilationUnitDeclaration process(", "+\t\tICompilationUnit unitElement, ", "+\t\tIProblemRequestor problemRequestor,", "+\t\tIProgressMonitor monitor)", "+\t\tthrows JavaModelException {", "+", "+\t\tchar[] fileName = unitElement.getElementName().toCharArray();", "+\t\t", "+\t\tIJavaProject project = unitElement.getJavaProject();", "+\t\tCompilationUnitProblemFinder problemFinder =", "+\t\t\tnew CompilationUnitProblemFinder(", "+\t\t\t\tgetNameEnvironment(unitElement),", "+\t\t\t\tgetHandlingPolicy(),", "+\t\t\t\tproject.getOptions(true),", "+\t\t\t\tgetRequestor(),", "+\t\t\t\tgetProblemFactory(fileName, problemRequestor, monitor));", "+", "+\t\tCompilationUnitDeclaration unit = null;", "+\t\ttry {", "+\t\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true);", "+\t\t\t", "+\t\t\tIPackageFragment packageFragment = (IPackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "+\t\t\tchar[][] expectedPackageName = null;", "+\t\t\tif (packageFragment != null){", "+\t\t\t\texpectedPackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "+\t\t\t}", "+\t\t\tunit = problemFinder.resolve(", "+\t\t\t\t\tnew BasicCompilationUnit(", "+\t\t\t\t\t\tunitElement.getSource().toCharArray(),", "+\t\t\t\t\t\texpectedPackageName,", "+\t\t\t\t\t\tnew String(fileName),", "+\t\t\t\t\t\tencoding),", "+\t\t\t\t\ttrue, // verify methods", "+\t\t\t\t\ttrue, // analyze code", "+\t\t\t\t\ttrue); // generate code", "+\t\t\treturn unit;", "+\t\t} finally {", "+\t\t\tif (unit != null) {", "+\t\t\t\tunit.cleanUp();", "+\t\t\t}", "+\t\t\tproblemFinder.lookupEnvironment.reset();\t\t\t", "+\t\t}", "+\t}"]}], "num": 699}
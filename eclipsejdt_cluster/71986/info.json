{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "811588f3051f41b7ace2dd41fdeaf7cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b7effbec5526b0c0f51216a0fc599dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "0371188bae8847b23acded54b847b2e6acb55e2f", "commitAfterChange": "70388ba5a3272ffd8da7da345ffb96bb25e84f31", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "diff": ["-\t\t\t\t} else if (scope.isBoxingCompatibleWith(expressionType, elementType)", "-\t\t\t\t\t\t\t\t\t|| (expressionType.isBaseType()  // narrowing then boxing ?", "-\t\t\t\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "-\t\t\t\t\t\t\t\t\t\t\t&& !elementType.isBaseType()", "-\t\t\t\t\t\t\t\t\t\t\t&& expression.isConstantValueOfTypeAssignableToType(expressionType, scope.environment().computeBoxingType(elementType)))) {", "+\t\t\t\t} else if (isBoxingCompatible(expressionType, elementType, expression, scope)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b4d8586add03f2b8562c52e4ce7c08d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "835454076c7c84a3d008630e11d7802ddd16d580", "commitAfterChange": "dfc6a6fda29de48e066662fb088bf2e300f9b1e1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static APTResult runAPTDuringBuild( \t\t\tfinal List<AnnotationProcessorFactory> factories, IFile file, \t\t\tIJavaProject javaProj)", "signatureAfterChange": "\t \tpublic static APTResult runAPTDuringBuild( \t\t\tfinal List<AnnotationProcessorFactory> factories, final IFile file, \t\t\tfinal IJavaProject javaProj)", "diff": ["-", "+{\t", "-\t\t\tfinal List<AnnotationProcessorFactory> factories, IFile file,", "-\t\t\tIJavaProject javaProj) {", "-\t\t", "-\t\t//", "-\t\t//  bail-out early if there aren't factories, or if there aren't any annotation instances", "-\t\t// ", "-\t\tif ( factories == null || factories.size() == 0  || ! AptUtil.hasAnnotationInstance( file ) )", "-\t\t{", "-\t\t\tif ( DEBUG ) trace( \"runAPTDuringBuild: leaving early because there are no factories or annotation instances\");", "-\t\t\tSet<IFile> deletedFiles = cleanupAllGeneratedFilesForParent( file );", "-\t\t\tif ( deletedFiles.size() == 0 )", "-\t\t\t\treturn EMPTY_APT_RESULT;", "-\t\t\telse", "-\t\t\t\treturn new APTResult( (Set<IFile>)Collections.emptySet(), deletedFiles, (Set<String>)Collections.emptySet() );", "-\t\t}", "-\t\t\t\t\t", "-\t\tProcessorEnvImpl processorEnv = ProcessorEnvImpl", "-\t\t\t\t.newProcessorEnvironmentForBuild( file, javaProj);", "-\t\tAPTResult result = runAPT(factories, processorEnv);", "-\t\treturn result;", "+\t\t\tfinal List<AnnotationProcessorFactory> factories, final IFile file,", "+\t\t\tfinal IJavaProject javaProj) ", "+\t{", "+\t\treturn runAPT( factories, javaProj, file, null );"]}], "num": 71986}
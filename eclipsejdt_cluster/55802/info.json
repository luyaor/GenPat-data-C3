{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3fbec452a981458d00c204fd4190ee6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7bb2916d19a180a6a5e371d0a31e888", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public MethodBinding binding(TypeBinding targetType)", "signatureAfterChange": " public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope)", "diff": ["-public MethodBinding binding(TypeBinding targetType) {", "+public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope) {", "+\tif (reportErrors) {", "+\t\tif (this.binding == null)", "+\t\t\tscope.problemReporter().genericInferenceError(\"method is unexpectedly unresolved\", this); //$NON-NLS-1$", "+\t\telse if (!this.binding.isValidBinding())", "+\t\t\tscope.problemReporter().invalidMethod(this, this.binding);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebf66ea5cae28d3f21d84183877f47a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic MethodBinding binding(TypeBinding targetType)", "signatureAfterChange": " \tpublic MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope)", "diff": ["-\tpublic MethodBinding binding(TypeBinding targetType) {", "+\tpublic MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope) {", "+\t\tif (reportErrors) {", "+\t\t\tif (this.binding == null)", "+\t\t\t\tscope.problemReporter().genericInferenceError(\"constructor is unexpectedly unresolved\", this); //$NON-NLS-1$", "+\t\t\telse if (!this.binding.isValidBinding())", "+\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "+\t\t}"]}], "num": 55802}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "826bc9925d3d667d619f890f5759dfc4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33a503d8b36ed6206677416f96c164bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  \tpublic void test037()", "signatureAfterChange": "  \tpublic void test037()", "diff": ["-\t\t\t\"1. ERROR in XX.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic abstract class XX implements I, J { public abstract void foo(A<String> a); }\\r\\n\" + ", "+\t\t\t\"1. ERROR in XX.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic abstract class XX implements I, J { public abstract void foo(A<String> a); }\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in XX.java (at line 2)\\n\" + ", "+\t\t\t\"\tinterface I { void foo(A a); }\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"Type safety: A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in XX.java (at line 4)\\n\" + ", "+\t\t\t\"\tinterface I { void foo(A a); }\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"Type safety: A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic abstract class X extends Y implements I { }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic abstract class X extends Y implements I { }\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tinterface I { void foo(A a); }\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"Type safety: A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic abstract class X extends Y implements I { }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic abstract class X extends Y implements I { }\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass Y { void foo(A a) {} }\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Type safety: A is a raw type. References to generic type A<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe4c4a99a89b8d53cc5bb5a3424b874d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprivate void verifyPositions(Javadoc docComment, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(Javadoc docComment, char[] source)", "diff": ["-\t\tassertTrue(this.prefix+\"Misplaced javadoc start\", source[start++] == '/' && source[start++] == '*' && source[start++] == '*');", "+\t\tassumeTrue(this.prefix+\"Misplaced javadoc start at <\"+start+\">: \"+docComment, source[start++] == '/' && source[start++] == '*' && source[start++] == '*');", "-\t\t\tassertEquals(this.prefix+\"Tag element has wrong start position\", tagStart, tagElement.getStartPosition());", "-//\t\t\tint tagEnd = tagStart+tagElement.getLength()-1;", "+\t\t\tint teStart = tagElement.getStartPosition();", "+\t\t\tassumeEquals(this.prefix+\"Wrong start position <\"+teStart+\"> for tag element: \"+tagElement, tagStart, teStart);", "-\t\tassertTrue(this.prefix+\"Misplaced javadoc end\", source[tagStart-1] == '*' && source[tagStart] == '/');", "-\t\tassertEquals(this.prefix+\"Wrong javadoc length\", tagStart, end);", "+\t\tassumeTrue(this.prefix+\"Misplaced javadoc end at <\"+tagStart+'>', source[tagStart-1] == '*' && source[tagStart] == '/');", "+\t\tassumeEquals(this.prefix+\"Wrong javadoc length at <\"+end+\">: \", tagStart, end);"]}], "num": 16327}
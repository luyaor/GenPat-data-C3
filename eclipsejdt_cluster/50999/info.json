{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5bc3adb91f4aebf0873ba0950b47040", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d112d514f18898f674ceeb271955a41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic static FlowInfo markPassedToOutside(BlockScope scope, Expression expression, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic static FlowInfo markPassedToOutside(BlockScope scope, Expression expression, FlowInfo flowInfo, boolean owned)", "diff": ["-\tpublic static FlowInfo markPassedToOutside(BlockScope scope, Expression expression, FlowInfo flowInfo) {", "+\tpublic static FlowInfo markPassedToOutside(BlockScope scope, Expression expression, FlowInfo flowInfo, boolean owned) {\t", "+\t\t", "-\t\t\ttrackVar.globalClosingState |= PASSED_TO_OUTSIDE;", "-\t\t\tif (scope.methodScope() != trackVar.methodScope)", "-\t\t\t\ttrackVar.globalClosingState |= CLOSED_IN_NESTED_METHOD;", "+\t\t\tif (trackVar.originalBinding == null) {", "+\t\t\t\t// an allocation that never was assigned to a local variable -> drop it completely as we're not responsible", "+\t\t\t\tscope.removeTrackingVar(trackVar);", "+\t\t\t\treturn flowInfo;", "+\t\t\t}", "-\t\t\tinfoResourceIsClosed.markAsDefinitelyNonNull(trackVar.binding);", "+\t\t\tint flag = owned ? OWNED_BY_OUTSIDE : SHARED_WITH_OUTSIDE;", "+\t\t\tdo {", "+\t\t\t\ttrackVar.globalClosingState |= flag;", "+\t\t\t\tif (scope.methodScope() != trackVar.methodScope)", "+\t\t\t\t\ttrackVar.globalClosingState |= CLOSED_IN_NESTED_METHOD;", "+\t\t\t\tinfoResourceIsClosed.markAsDefinitelyNonNull(trackVar.binding);", "+\t\t\t} while ((trackVar = trackVar.innerTracker) != null); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "174688861dbcc08d3493a1db01e644f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "9e99dfd97eaf9264bcdd3b675b4c9f32dbc2a956", "commitAfterChange": "5692048ca062d688ce263b4ab687b16bc7ecb4fa", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \t \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement)", "signatureAfterChange": " \t \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement)", "diff": ["-\t\t\t\tsourceStart = statement.typeArgumentsSourceStart;", "+\t\t\t\tif (sourceStart > statement.typeArgumentsSourceStart) {", "+\t\t\t\t\tsourceStart = statement.typeArgumentsSourceStart;", "+\t\t\t\t}", "-\t\t\t\tsourceStart = statement.typeArgumentsSourceStart;", "+\t\t\t\tif (sourceStart > statement.typeArgumentsSourceStart) {", "+\t\t\t\t\tsourceStart = statement.typeArgumentsSourceStart;", "+\t\t\t\t}", "+\t\t\tif (statement.qualification != null) {", "+\t\t\t\t// this is an error", "+\t\t\t\tconstructorInvocation.setFlags(constructorInvocation.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}"]}], "num": 50999}
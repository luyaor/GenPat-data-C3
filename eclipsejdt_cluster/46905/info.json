{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef705084a54f97384f700447bdb6cfe2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbef5872014607bbb9138162f5bd3eb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "commitAfterChange": "bd2d6cba91ea60af9a4818216d0ebbc8f0ef4bb2", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\t\t\t\t\tif (verifier.isParameterSubsignature(matchingMethod.original(), currentMethod.original())) {", "+\t\t\t\t\t\t\tMethodBinding matchingOriginal = matchingMethod.original();", "+\t\t\t\t\t\t\tMethodBinding currentOriginal = matchingOriginal.findOriginalInheritedMethod(currentMethod);", "+\t\t\t\t\t\t\tif (currentOriginal != null && verifier.isParameterSubsignature(matchingOriginal, currentOriginal)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff3dd17ec1dc344cb0350bbf37a59361", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "78489a1112068ad791184216a4e6b3439ea59739", "commitAfterChange": "44562039ccc53dd5301ff720c35ac750589a8412", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "signatureAfterChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "diff": ["+\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "+\t\t\t\t\t\t\tif(original != constructor) {", "+\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "+\t\t\t\t\t\t\tif(original != constructor) {", "+\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t\t}"]}], "num": 46905}
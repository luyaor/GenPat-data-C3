{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38ff90c45ca30f92024708d892f33814", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fe9f6e8ab07b0d91019eac68dc3913a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunFormatterTests.java", "commitBeforeChange": "45b137a4bdfd0a4d28126aeb67f27b127e7f1dfd", "commitAfterChange": "15b0c36cf52521c62289eac551e0070a05f02d1e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["+\t}", "+\tpublic static Test suite() {", "+\t\tTestSuite ts = new TestSuite(RunFormatterTests.class.getName());", "+", "+\t\tClass[] testClasses = getAllTestClasses();", "+\t\tfor (int i = 0; i < testClasses.length; i++) {", "+\t\t\tClass testClass = testClasses[i];", "+", "+\t\t\t// call the suite() method and add the resulting suite to the suite", "+\t\t\ttry {", "+\t\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "+\t\t\t\tTest suite = (Test)suiteMethod.invoke(null, new Object[0]);", "+\t\t\t\tts.addTest(suite);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\te.getTargetException().printStackTrace();", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\treturn ts;", "+\t}", "-}", "-public static Test suite() {", "-\tTestSuite suite = new TestSuite(RunFormatterTests.class.getName());", "-\tsuite.addTest(FormatterRegressionTests.suite());", "-\treturn suite;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9d1dacfde5b92735b3863e6353827fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "2f4a4896a43542edbc3219399755cb58107d11c0", "commitAfterChange": "1b94558fa757b767854d14340a754f8fb18540c3", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "diff": ["-\t\t\tString timeoutVal = \"10000\"; //$NON-NLS-1$", "-\t\t\tSystem.setProperty(\"sun.net.client.defaultConnectTimeout\", timeoutVal);  //$NON-NLS-1$", "-\t\t\tSystem.setProperty(\"sun.net.client.defaultReadTimeout\", timeoutVal); //$NON-NLS-1$", "+\t\t\tClass[] parameterTypes = new Class[]{int.class};", "+\t\t\tInteger timeoutVal = new Integer(10000);", "+\t\t\t// set the connect and read timeouts using reflection since these methods are not available in java 1.4", "+\t\t\tClass URLClass = connection.getClass();", "+\t\t\ttry {", "+\t\t\t\tMethod connectTimeoutMethod = URLClass.getDeclaredMethod(\"setConnectTimeout\", parameterTypes); //$NON-NLS-1$", "+\t\t\t\tMethod readTimeoutMethod = URLClass.getDeclaredMethod(\"setReadTimeout\", parameterTypes); //$NON-NLS-1$", "+\t\t\t\tconnectTimeoutMethod.invoke(connection, new Object[]{timeoutVal});", "+\t\t\t\treadTimeoutMethod.invoke(connection, new Object[]{timeoutVal});", "+\t\t\t} catch (SecurityException e) {", "+\t\t\t\t// ignore", "+\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t// ignore", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\t// ignore", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\t// ignore", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a222662be72ec8052edf0d51baee05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/FriendDependencyTests.java", "commitBeforeChange": "b98255ea12b09d2a9b7c2a33f6e9c53123da1aec", "commitAfterChange": "ea7357803f7625c89fd0063c616a1f7a28c12a8c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void internSimpleNames()", "signatureAfterChange": " public void testInternSimpleNames()", "diff": ["-public void internSimpleNames() {", "+public void testInternSimpleNames() {", "+", "+\ttry {", "+\t\tString className = \"org.eclipse.jdt.internal.core.builder.ReferenceCollection\";", "+\t\tClass clazz = Class.forName(className);", "+\t\t//org.eclipse.jdt.internal.core.JavaModelManager.getLastBuiltState(IProject, IProgressMonitor)", "+\t\tClass[] arguments = new Class[2];", "+\t\tString argumentClassName = \"org.eclipse.jdt.internal.core.builder.StringSet\";", "+\t\targuments[0] = Class.forName(argumentClassName);", "+\t\targuments[1] = Boolean.TYPE;", "+\t\tclazz.getDeclaredMethod(\"internSimpleNames\", arguments);", "+\t} catch (ClassNotFoundException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t} catch (SecurityException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t} catch (NoSuchMethodException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t} catch (IllegalArgumentException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t}", "+}"]}], "num": 42981}
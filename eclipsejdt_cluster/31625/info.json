{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c784ac087ebd0a7ea74c27cc33bafa53", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2384295b94388226618b0bc59ccc4230", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e3b6417804c74fbbeb8b8f8e61d3da1fa272d9b4", "commitAfterChange": "d11e0b7b2ec4acf083dada122937da91409bfbab", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["-\t\t\t\t\t\tif (method", "+\t\t\t\t\t\tif (!superCall && method", "-\t\t\t\t\tprefixRequired = true;", "+\t\t\t\t\tif(!superCall) {", "+\t\t\t\t\t\tprefixRequired = true;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5231edf7789c5e2ae9773d4df019b54f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "bec882b73e7c0461cc0585cc90fdee9b599b323f", "commitAfterChange": "2d93f702c418ae37553e53fb53a22c5fb9d1c19a", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r protected void consumeConstructorDeclaration()", "signatureAfterChange": "\r protected void consumeConstructorDeclaration()", "diff": ["-\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();\r", "+\t\tif (!diet){\r", "+\t\t\t// add it only in non-diet mode, if diet_bodies, then constructor call will be added elsewhere.\r", "+\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();\r", "+\t\t}\r", "-\tif (cd.constructorCall.sourceEnd == 0) {\r", "+\tif (constructorCall != null && cd.constructorCall.sourceEnd == 0) {\r"]}], "num": 31625}
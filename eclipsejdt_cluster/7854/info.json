{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6c230e1604427e7ea773e554b03009a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d49d3a08e6fe3ef22e3e6cda7b14038", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "70d26734867455ac1b14a226bd371e6f98a4d2ae", "commitAfterChange": "e72c40632f386c18405c37cebd5b66e2533b6c7e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-\t\tString[] registeredContainerIDs = getRegisteredContainerIDs();", "-\t\tfor (int i = 0; i < registeredContainerIDs.length; i++) {", "-\t\t\tString containerID = registeredContainerIDs[i];", "-\t\t\tIterator projectIterator = this.containers.keySet().iterator();", "-\t\t\twhile (projectIterator.hasNext()){", "-\t\t\t\tIJavaProject project = (IJavaProject)projectIterator.next();", "-\t\t\t\tMap projectContainers = (Map)this.containers.get(project);", "-\t\t\t\tif (projectContainers != null){", "-\t\t\t\t\tIterator containerIterator = projectContainers.keySet().iterator();", "-\t\t\t\t\twhile (containerIterator.hasNext()){", "-\t\t\t\t\t\tIPath containerPath = (IPath)containerIterator.next();", "-\t\t\t\t\t\tif (containerPath.segment(0).equals(containerID)) { // registered container", "-\t\t\t\t\t\t\tprojectContainers.put(containerPath, null); // reset container value, but leave entry in Map", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tcontainersReset(getRegisteredContainerIDs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60c5858fbfcd609d844cd8f24f24481d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate synchronized void computeAllRootPaths(IType type)", "signatureAfterChange": " \t \tprivate synchronized void computeAllRootPaths(IType type)", "diff": ["-\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), root.getPath(), true);", "+\t\t\tObject target = JavaModel.getTarget(root.getPath(), true);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else if (target instanceof File) {", "-\t\t\t\tFile file = (File)target;", "-\t\t\t\tif (file.isDirectory()) {", "-\t\t\t\t\tFile[] files = file.listFiles();", "-\t\t\t\t\tfor (int i = 0, max = files.length; i < max; i++) {", "-\t\t\t\t\t\tFile currentFile = files[i];", "-\t\t\t\t\t\tif (currentFile.isDirectory()) {", "-\t\t\t\t\t\t\tfirstLevelPackageNames.add(currentFile.getName());", "-\t\t\t\t\t\t} else if (Util.isClassFileName(currentFile.getName())) {", "-\t\t\t\t\t\t\tcontainsADefaultPackage = true;", "-\t\t\t\t\t\t}", "-\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), this.sourcePath, true);", "-\t\t\tif (target instanceof IResource) {", "-\t\t\t\tif (target instanceof IContainer) {", "-\t\t\t\t\tcomputeRootPath((IContainer)target, firstLevelPackageNames, containsADefaultPackage, tempRoots);", "-\t\t\t\t}", "-\t\t\t} else if (target instanceof File) {", "-\t\t\t\tFile file = (File)target;", "-\t\t\t\tif (file.isDirectory()) {", "-\t\t\t\t\tcomputeRootPath(file, firstLevelPackageNames, containsADefaultPackage, tempRoots);", "-\t\t\t\t}", "+\t\t\tObject target = JavaModel.getTarget(this.sourcePath, true);", "+\t\t\tif (target instanceof IContainer) {", "+\t\t\t\tcomputeRootPath((IContainer)target, firstLevelPackageNames, containsADefaultPackage, tempRoots);"]}], "num": 7854}
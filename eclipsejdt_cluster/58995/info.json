{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb40e7a4da742457fac9f2c9a69748a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "173dfa29e41df6f7719eae95f8892d53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "d32639fa2ab9bcc59e4aac9996a4cf8d63edf941", "commitAfterChange": "b317a1e7ce5a7a6cc55cd1f344eea57539a2bc94", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["+\t\tif (this.parameterNames == null) {", "+\t\t\t// try to see if we can retrieve the names from the attached javadoc", "+\t\t\tIBinaryMethod info = (IBinaryMethod) getElementInfo();", "+\t\t\tfinal int paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));", "+\t\t\tif (paramCount != 0) {", "+\t\t\t\tString javadoc = this.getAttachedJavadoc(new NullProgressMonitor(), \"UTF-8\"); //$NON-NLS-1$", "+\t\t\t\tif (javadoc != null) {", "+\t\t\t\t\tfinal int indexOfOpenParen = javadoc.indexOf('(');", "+\t\t\t\t\tif (indexOfOpenParen != -1) {", "+\t\t\t\t\t\tfinal int indexOfClosingParen = javadoc.indexOf(')', indexOfOpenParen);", "+\t\t\t\t\t\tif (indexOfClosingParen != -1) {", "+\t\t\t\t\t\t\tfinal char[] paramsSource =", "+\t\t\t\t\t\t\t\tCharOperation.replace(", "+\t\t\t\t\t\t\t\t\tjavadoc.substring(indexOfOpenParen + 1, indexOfClosingParen).toCharArray(),", "+\t\t\t\t\t\t\t\t\t\"&nbsp;\".toCharArray(), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tnew char[] {' '});", "+\t\t\t\t\t\t\tfinal StringTokenizer tokenizer = new StringTokenizer(String.valueOf(paramsSource), \", \\n\\r\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tint index = 0;", "+\t\t\t\t\t\t\tfinal ArrayList paramNames = new ArrayList(paramCount);", "+\t\t\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\t\t\tfinal String token = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\tif ((index & 1) != 0) {", "+\t\t\t\t\t\t\t\t\t// if odd then this is a parameter name", "+\t\t\t\t\t\t\t\t\tparamNames.add(token);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (!paramNames.isEmpty()) {", "+\t\t\t\t\t\t\t\tthis.parameterNames = new String[paramNames.size()];", "+\t\t\t\t\t\t\t\tparamNames.toArray(this.parameterNames);", "+\t\t\t\t\t\t\t}", "+\t \t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6f6fa6d11857ed653a8ecc04e885e10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "b317a1e7ce5a7a6cc55cd1f344eea57539a2bc94", "commitAfterChange": "7eed6a96df74657d78e1bde1e5678b14a74d3ac5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\tif (this.parameterNames == null) {", "-\t\t\t// try to see if we can retrieve the names from the attached javadoc", "-\t\t\tIBinaryMethod info = (IBinaryMethod) getElementInfo();", "-\t\t\tfinal int paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));", "-\t\t\tif (paramCount != 0) {", "-\t\t\t\tString javadoc = this.getAttachedJavadoc(new NullProgressMonitor(), \"UTF-8\"); //$NON-NLS-1$", "-\t\t\t\tif (javadoc != null) {", "-\t\t\t\t\tfinal int indexOfOpenParen = javadoc.indexOf('(');", "-\t\t\t\t\tif (indexOfOpenParen != -1) {", "-\t\t\t\t\t\tfinal int indexOfClosingParen = javadoc.indexOf(')', indexOfOpenParen);", "-\t\t\t\t\t\tif (indexOfClosingParen != -1) {", "-\t\t\t\t\t\t\tfinal char[] paramsSource =", "-\t\t\t\t\t\t\t\tCharOperation.replace(", "-\t\t\t\t\t\t\t\t\tjavadoc.substring(indexOfOpenParen + 1, indexOfClosingParen).toCharArray(),", "-\t\t\t\t\t\t\t\t\t\"&nbsp;\".toCharArray(), //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tnew char[] {' '});", "-\t\t\t\t\t\t\tfinal StringTokenizer tokenizer = new StringTokenizer(String.valueOf(paramsSource), \", \\n\\r\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tint index = 0;", "-\t\t\t\t\t\t\tfinal ArrayList paramNames = new ArrayList(paramCount);", "-\t\t\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\t\t\tfinal String token = tokenizer.nextToken();", "-\t\t\t\t\t\t\t\tif ((index & 1) != 0) {", "-\t\t\t\t\t\t\t\t\t// if odd then this is a parameter name", "-\t\t\t\t\t\t\t\t\tparamNames.add(token);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (!paramNames.isEmpty()) {", "-\t\t\t\t\t\t\t\tthis.parameterNames = new String[paramNames.size()];", "-\t\t\t\t\t\t\t\tparamNames.toArray(this.parameterNames);", "-\t\t\t\t\t\t\t}", "-\t \t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}\t\t"]}], "num": 58995}
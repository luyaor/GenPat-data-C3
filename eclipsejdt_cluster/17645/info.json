{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04ef872375ad2f472dd44974ea56f16f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03babc343ec8a6ae31f97f472e6631e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "d6269129563f98355327b1ab05b64efc1651a96c", "commitAfterChange": "3a42960d70f16619a40a10161fc61740ab2695a4", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\tsourceEnd = returnType.sourceEnd;", "+\t\tif (returnType instanceof ParameterizedSingleTypeReference) {", "+\t\t\tParameterizedSingleTypeReference typeReference = (ParameterizedSingleTypeReference) returnType;", "+\t\t\tTypeReference[] typeArguments = typeReference.typeArguments;", "+\t\t\tif (typeArguments[typeArguments.length - 1].sourceEnd > typeReference.sourceEnd) {", "+\t\t\t\tsourceEnd = retrieveClosingAngleBracketPosition(typeReference.sourceEnd);", "+\t\t\t} else {", "+\t\t\t\tsourceEnd = returnType.sourceEnd;", "+\t\t\t}", "+\t\t} else if (returnType instanceof ParameterizedQualifiedTypeReference) {", "+\t\t\tParameterizedQualifiedTypeReference typeReference = (ParameterizedQualifiedTypeReference) returnType;", "+\t\t\tsourceEnd = retrieveClosingAngleBracketPosition(typeReference.sourceEnd);", "+\t\t} else {", "+\t\t\tsourceEnd = returnType.sourceEnd;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "465b2143ecc9fc06c5fa39c75db14fbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType)", "signatureAfterChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "diff": ["-\tpublic boolean isPertinentToApplicability(TypeBinding targetType) {", "-\t\t", "-\t\t// Add the rule about type variable of the generic method.", "-\t\t", "-\t\tfinal MethodBinding sam = targetType.getSingleAbstractMethod(this.enclosingScope); // cached/cheap call.", "-\t\t", "-\t\tif (sam == null || !sam.isValidBinding())", "-\t\t\treturn true;", "-\t\t", "-\t\tif (sam.parameters.length != this.argumentTypes.length)", "+\tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method) {", "+\t\tif (targetType == null) // assumed to signal another primary error", "-\t\tExpression [] returnExpressions = this.resultExpressions;", "-\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "-\t\t\tif (!returnExpressions[i].isPertinentToApplicability(targetType))", "+\t\tif (targetType instanceof TypeVariableBinding) {", "+\t\t\tif (method != null) { // when called from type inference", "+\t\t\t\tif (((TypeVariableBinding)targetType).declaringElement == method)", "+\t\t\t\t\treturn false;", "+\t\t\t} else { // for internal calls", "+\t\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) targetType;", "+\t\t\t\tif (typeVariable.declaringElement instanceof MethodBinding)", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif (this.body instanceof Expression) {", "+\t\t\tif (!((Expression) this.body).isPertinentToApplicability(targetType, method))", "+\t\t} else {", "+\t\t\tExpression [] returnExpressions = this.resultExpressions;", "+\t\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "+\t\t\t\tif (!returnExpressions[i].isPertinentToApplicability(targetType, method))", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t}"]}], "num": 17645}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e94d7a80e49e19bc0ab743511d1a7c6a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9059d9e1f88af0d7d2eeb487fc6d68cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate boolean connectSuperclass()", "signatureAfterChange": " \tprivate boolean connectSuperclass()", "diff": ["-\t\tReferenceBinding superclass = findSupertype(referenceContext.superclass);", "-\t\tif (superclass != null) { // is null if a cycle was detected cycle", "-\t\t\treferenceContext.superclass.resolvedType = superclass; // hold onto the problem type", "-\t\t\tif (!superclass.isValidBinding()) {", "-\t\t\t\tproblemReporter().invalidSuperclass(sourceType, referenceContext.superclass, superclass);", "-\t\t\t} else if (superclass.isInterface()) {", "-\t\t\t\tproblemReporter().superclassMustBeAClass(sourceType, referenceContext.superclass, superclass);", "+\t\tTypeReference superclassRef = referenceContext.superclass;", "+\t\tReferenceBinding superclass = findSupertype(superclassRef);", "+\t\tif (superclass != null) { // is null if a cycle was detected cycle or a problem", "+\t\t\tif (superclass.isInterface()) {", "+\t\t\t\tproblemReporter().superclassMustBeAClass(sourceType, superclassRef, superclass);", "-\t\t\t\tproblemReporter().classExtendFinalClass(sourceType, referenceContext.superclass, superclass);", "+\t\t\t\tproblemReporter().classExtendFinalClass(sourceType, superclassRef, superclass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1712357c8ce42711c4a970cabd4ad46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate boolean connectSuperInterfaces()", "signatureAfterChange": " \tprivate boolean connectSuperInterfaces()", "diff": ["-\t\t\tReferenceBinding superInterface = findSupertype(referenceContext.superInterfaces[i]);", "+\t\t    TypeReference superInterfaceRef = referenceContext.superInterfaces[i];", "+\t\t\tReferenceBinding superInterface = findSupertype(superInterfaceRef);", "-\t\t\t\tnoProblems = false;", "-\t\t\t\tcontinue nextInterface;", "-\t\t\t}", "-\t\t\treferenceContext.superInterfaces[i].resolvedType = superInterface; // hold onto the problem type", "-\t\t\tif (!superInterface.isValidBinding()) {", "-\t\t\t\tproblemReporter().invalidSuperinterface(", "-\t\t\t\t\tsourceType,", "-\t\t\t\t\treferenceContext.superInterfaces[i],", "-\t\t\t\t\tsuperInterface);", "+\t\t\tsuperInterfaceRef.resolvedType = superInterface; // hold onto the problem type", "+\t\t\t\tsourceType.tagBits |= HierarchyHasProblems;", "+\t\t\t\tnoProblems = false;", "+\t\t\t\tcontinue nextInterface;", "+\t\t\t}", "+\t\t\tReferenceBinding invalid = findAmbiguousInterface(superInterface, sourceType);", "+\t\t\tif (invalid != null) {", "+\t\t\t\tReferenceBinding generic = null;", "+\t\t\t\tif (superInterface.isParameterizedType())", "+\t\t\t\t\tgeneric = ((ParameterizedTypeBinding) superInterface).type;", "+\t\t\t\telse if (invalid.isParameterizedType())", "+\t\t\t\t\tgeneric = ((ParameterizedTypeBinding) invalid).type;", "+\t\t\t\tproblemReporter().superinterfacesCollide(generic, referenceContext, superInterface, invalid);"]}], "num": 2697}
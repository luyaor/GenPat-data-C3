{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f06199dfc5e711f9e57d420bcc957c2d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc30439b5a7cbbfaf53f7b369fdd2562", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "740d8a3bbf7d827a9782a8704551b5892c828d42", "commitAfterChange": "37fa53fe1bcd1db81d377f564f101511c07818f5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void collectSubstitutes(Scope currentScope, TypeBinding otherType, Map substitutes, int constraint)", "signatureAfterChange": " public void collectSubstitutes(Scope currentScope, TypeBinding otherType, Map substitutes, int constraint)", "diff": ["-\t        otherEquivalent = ((ReferenceBinding)otherType).findSuperTypeErasingTo(this);", "+\t        otherEquivalent = ((ReferenceBinding)otherType).findSuperTypeWithSameErasure(this);", "-\t        equivalent = this.findSuperTypeErasingTo((ReferenceBinding)(otherType.erasure()));", "+\t        equivalent = this.findSuperTypeWithSameErasure(otherType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef99b01572f5a357dd5b1627d89b7ae8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "diff": ["-\t\t        actualEquivalent = actualType.findSuperTypeWithSameErasure(this.type);", "+\t\t        actualEquivalent = actualType.findSuperTypeOriginatingFrom(this.type);", "-\t\t        formalEquivalent = this.findSuperTypeWithSameErasure(actualType);", "+\t\t        formalEquivalent = this.findSuperTypeOriginatingFrom(actualType);"]}], "num": 59380}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5c60f75d7c2ed44ca4f628649583f3e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "137067a5b6484949eb4cd21199e9c0a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "8fea12e4bfaf9512e2895dd3e38d29d36df0b0d7", "commitAfterChange": "44745746fe14ee21b76846ff0560d4bd8139889c", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["-\tboolean useEnableJavadoc = false;", "-\t\t\t\t\t\thandleWarningToken(token, isEnabling, useEnableJavadoc);", "+\t\t\t\t\t\thandleWarningToken(token, isEnabling);", "-\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "-\t\t\t\t\t\tCompilerOptions.ENABLED);", "-\t\t\t\t\tuseEnableJavadoc = true;", "+\t\t\t\t\tthis.enableJavadocOn = true;", "+\t", "+\t// set DocCommentSupport, with appropriate side effects on defaults if ", "+\t// javadoc is not enabled", "+\tif (this.enableJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\tCompilerOptions.ENABLED);", "+\t} else if (this.warnJavadocOn || this.warnAllJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\t// override defaults: references that are embedded in javadoc are ignored", "+\t\t// from the perspective of parameters and thrown exceptions usage", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportUnusedParameterIncludeDocCommentReference,", "+\t\t\tCompilerOptions.DISABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,", "+\t\t\tCompilerOptions.DISABLED);", "+\t}", "+\t// configure warnings for javadoc contents", "+\tif (this.warnJavadocOn || this.warnAllJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadoc,", "+\t\t\tCompilerOptions.WARNING);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTags,", "+\t\t\tCompilerOptions.WARNING);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "+\t\t\tCompilerOptions.PRIVATE);", "+\t}", "+\tif (this.warnAllJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingJavadocComments,", "+\t\t\tCompilerOptions.WARNING);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd2db6be0d0bb99b44a15f9328b69611", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 372, "methodNumberAfterChange": 377, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["+\tboolean jumpOverTypeAfterReduce = false;", "-\t\t\t}\t\t\t\t\t", "+\t\t\t}\t\t\t\t", "+\t\t\tif(this.statementRecoveryActivated) {", "+\t\t\t\tjumpOverTypeAfterReduce = true;", "+\t\t\t}", "+\t\t\t\tif(this.statementRecoveryActivated) {", "+\t\t\t\t\tthis.jumpOverType();", "+\t\t\t\t}", "+\t\t\tif(this.statementRecoveryActivated && act > NUM_RULES) {", "+\t\t\t\tif(jumpOverTypeAfterReduce) {", "+\t\t\t\t\tthis.jumpOverType();", "+\t\t\t\t\tjumpOverTypeAfterReduce = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t", "-\tif (this.reportSyntaxErrorIsRequired && this.hasError) {", "-\t\treportSyntaxErrors(isDietParse, oldFirstToken);", "-\t}\t", "+\tif (this.reportSyntaxErrorIsRequired && this.hasError && !this.statementRecoveryActivated) {", "+\t\tif(!this.options.performStatementsRecovery) {", "+\t\t\treportSyntaxErrors(isDietParse, oldFirstToken);", "+\t\t} else {", "+\t\t\tRecoveryScannerData data = this.referenceContext.compilationResult().recoveryScannerData;", "+\t\t\t", "+\t\t\tif(this.recoveryScanner == null) {", "+\t\t\t\tthis.recoveryScanner = new RecoveryScanner(this.scanner, data);", "+\t\t\t} else {", "+\t\t\t\tthis.recoveryScanner.setData(data);", "+\t\t\t}", "+\t\t\t", "+\t\t\tthis.recoveryScanner.setSource(scanner.source);", "+\t\t\tthis.recoveryScanner.lineEnds = this.scanner.lineEnds;", "+\t\t\tthis.recoveryScanner.linePtr = this.scanner.linePtr;", "+\t\t\t", "+\t\t\treportSyntaxErrors(isDietParse, oldFirstToken);", "+\t\t\t", "+\t\t\tif(data == null) {", "+\t\t\t\tthis.referenceContext.compilationResult().recoveryScannerData =", "+\t\t\t\t\tthis.recoveryScanner.getData();", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (this.methodRecoveryActivated) {", "+\t\t\t\tthis.methodRecoveryActivated = false;", "+\t\t\t\tthis.recoverStatements();", "+\t\t\t\tthis.methodRecoveryActivated = true;", "+", "+\t\t\t\tthis.lastAct = ERROR_ACTION;", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c27700c5552d29e9f052fa3c237add48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void recordContinueFrom(FlowInfo flowInfo)", "signatureAfterChange": "  public void recordContinueFrom(FlowContext innerFlowContext, FlowInfo flowInfo)", "diff": ["-\tpublic void recordContinueFrom(FlowInfo flowInfo) {", "-", "-\t\tif (!flowInfo.isReachable()) return;", "-\t\tif (initsOnContinue == FlowInfo.DEAD_END) {", "-\t\t\tinitsOnContinue = flowInfo.copy().unconditionalInits();", "-\t\t} else {", "-\t\t\tinitsOnContinue = initsOnContinue.mergedWith(flowInfo.copy().unconditionalInits());", "-\t\t}", "+public void recordContinueFrom(FlowContext innerFlowContext, FlowInfo flowInfo) {", "+\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "+\tif ((initsOnContinue.tagBits & FlowInfo.UNREACHABLE) == 0) {", "+\t\tinitsOnContinue = initsOnContinue.", "+\t\t\tmergedWith(flowInfo.unconditionalInitsWithoutSideEffect());", "+\t} ", "+\telse {", "+\t\tinitsOnContinue = flowInfo.unconditionalCopy();", "+\tFlowContext inner = innerFlowContext;", "+\twhile (inner != this && !(inner instanceof LoopingFlowContext)) {", "+\t\tinner = inner.parent;", "+\t}", "+\tif (inner == this) {", "+\t\tthis.upstreamNullFlowInfo.", "+\t\t\taddPotentialNullInfoFrom(", "+\t\t\t\tflowInfo.unconditionalInitsWithoutSideEffect());", "+\t}", "+\telse {", "+\t\tint length = 0;", "+\t\tif (this.innerFlowContexts == null) {", "+\t\t\tthis.innerFlowContexts = new LoopingFlowContext[5];", "+\t\t\tthis.innerFlowInfos = new UnconditionalFlowInfo[5];", "+\t\t}", "+\t\telse if (this.innerFlowContextsNb == ", "+\t\t\t\t(length = this.innerFlowContexts.length) - 1) {", "+\t\t\tSystem.arraycopy(this.innerFlowContexts, 0, ", "+\t\t\t\t(this.innerFlowContexts = new LoopingFlowContext[length + 5]), ", "+\t\t\t\t0, length);", "+\t\t\tSystem.arraycopy(this.innerFlowInfos, 0, ", "+\t\t\t\t(this.innerFlowInfos= new UnconditionalFlowInfo[length + 5]), ", "+\t\t\t\t0, length);", "+\t\t}", "+\t\tthis.innerFlowContexts[this.innerFlowContextsNb] = (LoopingFlowContext) inner;", "+\t\tthis.innerFlowInfos[this.innerFlowContextsNb++] = ", "+\t\t\tflowInfo.unconditionalInitsWithoutSideEffect();", "+\t}", "+\t}", "+}"]}], "num": 54307}
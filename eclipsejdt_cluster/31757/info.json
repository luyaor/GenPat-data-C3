{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cec94d642126c33fb7fb6ac98a88809", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d5aa6ed6ce858af88f300de83a28c83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java", "commitBeforeChange": "d8bc0369a4febbf26184c3abdfb00924e5abcf8a", "commitAfterChange": "840a1f2f1e9b39c00b9c2e1286430c4050c7bac6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate Object convertToJavaType(Object value, TypeBinding type, int kind[])", "signatureAfterChange": " \tprivate Object convertToJavaType(Object value, TypeBinding type, int kind[])", "diff": ["-\t\t\t\treturn ((Constant)value).intValue();", "+\t\t\t\ttry {", "+\t\t\t\t\treturn ((Constant)value).intValue();", "+\t\t\t\t} catch (ShouldNotImplement e) {", "+\t\t\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b352e8830c9e668bcd9d8bfa049163", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "6b044a21b8195fa1c92c30a7427837916da799a8", "commitAfterChange": "8855054f1b1724ed183606f994c99a2387743661", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "diff": ["-\t\t\tstream = new BufferedInputStream(connection.getInputStream());", "+\t\t\ttry {", "+\t\t\t\tstream = new BufferedInputStream(connection.getInputStream());", "+\t\t\t} catch (NullPointerException e) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=304316", "+\t\t\t\treturn null;", "+\t\t\t}", "- \t\t} catch (MalformedURLException e) {", "- \t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this));", "+\t\t} catch (MalformedURLException e) {", "+\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd0ae6a7e00bf98d7c4e7b5e7cf4bec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceField.java", "commitBeforeChange": "726a798d36524f8c9a905565a81f0a3797b5162f", "commitAfterChange": "e925e4f453288f04c2f64d6eaf5afcd7f24f7bf6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getConstant() throws JavaModelException", "signatureAfterChange": " public Object getConstant() throws JavaModelException", "diff": ["-\tif (signature.equals(Signature.SIG_INT)) {", "-\t\tconstant = new Integer(constantSource);", "-\t} else if (signature.equals(Signature.SIG_SHORT)) {", "-\t\tconstant = new Short(constantSource);", "-\t} else if (signature.equals(Signature.SIG_BYTE)) {", "-\t\tconstant = new Byte(constantSource);", "-\t} else if (signature.equals(Signature.SIG_BOOLEAN)) {", "-\t\tconstant = Boolean.valueOf(constantSource);", "-\t} else if (signature.equals(Signature.SIG_CHAR)) {", "-\t\tif (constantSourceChars.length != 3) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tconstant = new Character(constantSourceChars[1]);", "-\t} else if (signature.equals(Signature.SIG_DOUBLE)) {", "-\t\tconstant = new Double(constantSource);", "-\t} else if (signature.equals(Signature.SIG_FLOAT)) {", "-\t\tconstant = new Float(constantSource);", "-\t} else if (signature.equals(Signature.SIG_LONG)) {", "-\t\tif (constantSource.endsWith(\"L\") || constantSource.endsWith(\"l\")) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tint index = constantSource.lastIndexOf(\"L\");//$NON-NLS-1$", "-\t\t\tif (index != -1) {", "-\t\t\t\tconstant = new Long(constantSource.substring(0, index));", "-\t\t\t} else {", "-\t\t\t\tconstant = new Long(constantSource.substring(0, constantSource.lastIndexOf(\"l\")));//$NON-NLS-1$", "+\ttry {", "+\t\tif (signature.equals(Signature.SIG_INT)) {", "+\t\t\tconstant = new Integer(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_SHORT)) {", "+\t\t\tconstant = new Short(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_BYTE)) {", "+\t\t\tconstant = new Byte(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_BOOLEAN)) {", "+\t\t\tconstant = Boolean.valueOf(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_CHAR)) {", "+\t\t\tif (constantSourceChars.length != 3) {", "+\t\t\t\treturn null;", "-\t\t} else {", "-\t\t\tconstant = new Long(constantSource);", "+\t\t\tconstant = new Character(constantSourceChars[1]);", "+\t\t} else if (signature.equals(Signature.SIG_DOUBLE)) {", "+\t\t\tconstant = new Double(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_FLOAT)) {", "+\t\t\tconstant = new Float(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_LONG)) {", "+\t\t\tif (constantSource.endsWith(\"L\") || constantSource.endsWith(\"l\")) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tint index = constantSource.lastIndexOf(\"L\");//$NON-NLS-1$", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tconstant = new Long(constantSource.substring(0, index));", "+\t\t\t\t} else {", "+\t\t\t\t\tconstant = new Long(constantSource.substring(0, constantSource.lastIndexOf(\"l\")));//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tconstant = new Long(constantSource);", "+\t\t\t}", "+\t\t} else if (signature.equals(\"QString;\")) {//$NON-NLS-1$", "+\t\t\tconstant = constantSource;", "-\t} else if (signature.equals(\"QString;\")) {//$NON-NLS-1$", "-\t\tconstant = constantSource;", "+\t} catch (NumberFormatException e) {", "+\t\t// not a parsable constant", "+\t\treturn null;"]}], "num": 31757}
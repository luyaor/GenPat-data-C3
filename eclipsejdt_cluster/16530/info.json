{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c16b90d50e0103acb88bf4bb539baf7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e7301028a150014ae2eef73dc7a313d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f875f4161e47c5087f589529b7e7ee5cf66c1b26", "commitAfterChange": "3e03e3984540d3907fa7739b419f89dad9725944", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate void format(FieldDeclaration fieldDeclaration, ASTVisitor visitor, MethodScope scope, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "signatureAfterChange": "  \tprivate void format(FieldDeclaration fieldDeclaration, ASTVisitor visitor, MethodScope scope, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "diff": ["-\t\tformatExtraDimensions(fieldDeclaration.type);", "+\t\t/*", "+\t\t * Check for extra dimensions", "+\t\t */", "+\t\tint extraDimensions = getDimensions();", "+\t\tif (extraDimensions != 0) {", "+\t\t\t for (int i = 0; i < extraDimensions; i++) {", "+\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t }", "+\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b474e1c4b2924ae9507373712468a701", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f875f4161e47c5087f589529b7e7ee5cf66c1b26", "commitAfterChange": "3e03e3984540d3907fa7739b419f89dad9725944", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tprivate void formatLocalDeclaration(LocalDeclaration localDeclaration, BlockScope scope, boolean insertSpaceBeforeComma, boolean insertSpaceAfterComma)", "signatureAfterChange": "  \tprivate void formatLocalDeclaration(LocalDeclaration localDeclaration, BlockScope scope, boolean insertSpaceBeforeComma, boolean insertSpaceAfterComma)", "diff": ["-\t\tformatExtraDimensions(localDeclaration.type);", "+\t\t/*", "+\t\t * Check for extra dimensions", "+\t\t */", "+\t\tint extraDimensions = getDimensions();", "+\t\tif (extraDimensions != 0) {", "+\t\t\t for (int index = 0; index < extraDimensions; index++) {", "+\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t }", "+\t\t}"]}], "num": 16530}
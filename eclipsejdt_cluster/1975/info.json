{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e33c91df89727b76d2940ba230d321a8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1958cecb072c207890430028ed61615f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "836fef68856b7e7f6b208deb388901eeda69de4b", "commitAfterChange": "79e5d72bba2066424baa4a0d68a49d71cc4f75a5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public TypeBinding substitute(TypeBinding originalType)", "signatureAfterChange": " \tpublic TypeBinding substitute(TypeBinding originalType)", "diff": ["-     */", "-    public TypeBinding substitute(TypeBinding originalType) {", "-        ", "+\t */", "+\tpublic TypeBinding substitute(TypeBinding originalType) {", "+\t    ", "-    \t        TypeVariableBinding originalVariable = (TypeVariableBinding) originalType;", "-    \t        TypeVariableBinding[] variables = this.originalMethod.typeVariables;", "-    \t        int length = variables.length;", "-    \t        // check this variable can be substituted given parameterized type", "-   \t\t        if (originalVariable.rank < length && variables[originalVariable.rank] == originalVariable) {", "+\t\t        TypeVariableBinding originalVariable = (TypeVariableBinding) originalType;", "+\t\t        TypeVariableBinding[] variables = this.originalMethod.typeVariables;", "+\t\t        int length = variables.length;", "+\t\t        // check this variable can be substituted given parameterized type", "+\t\t        if (originalVariable.rank < length && variables[originalVariable.rank] == originalVariable) {", "-   \t\t        }", "-   \t\t        break;", "-       \t\t       ", "+\t\t        }", "+\t\t        if (this.declaringClass instanceof Substitution) {", "+\t\t        \treturn ((Substitution)this.declaringClass).substitute(originalType);", "+\t\t        }", "+\t\t        break;", "+\t   \t\t       ", "-    \t        ", "+\t\t        ", "-", "-", "+\t", "+\t", "-        }", "-        return originalType;", "-    }", "+\t    }", "+\t    return originalType;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1edec265f7f99e931c9b00fef5f4b773", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "211eb968a7e76304f435bc3a2df40421403cc67d", "commitAfterChange": "1604cfae28d7a5fbf135c974f0085e046db607c7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "diff": ["-\t\t\t\t originalMethod.returnType,", "+\t\t\t\toriginalMethod.returnType,", "-\t\tthis.tagBits = originalMethod.tagBits;", "+\t\t/* missing type bit cannot be copied as is it might come from the return type or a parameter type that", "+\t\t * is substituted by a raw type.", "+\t\t */", "+\t\tthis.tagBits = originalMethod.tagBits & ~TagBits.HasMissingType;", "-\t\t\t        // check this variable can be substituted given copied variables", "-\t\t\t        if (typeVariable.rank < length && originalVariables[typeVariable.rank] == typeVariable) {", "+\t\t\t\t\t// check this variable can be substituted given copied variables", "+\t\t\t\t\tif (typeVariable.rank < length && originalVariables[typeVariable.rank] == typeVariable) {", "-\t\t\t        }", "-\t\t\t        if (!isStatic)", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!isStatic)", "-\t\t\t        return typeVariable;", "+\t\t\t\t\treturn typeVariable;", "-\t\t    // error case where exception type variable would have been substituted by a non-reference type (207573)", "-\t\t    if (this.thrownExceptions == null) this.thrownExceptions = Binding.NO_EXCEPTIONS;", "+\t\t\t// error case where exception type variable would have been substituted by a non-reference type (207573)", "+\t\t\tif (this.thrownExceptions == null) this.thrownExceptions = Binding.NO_EXCEPTIONS;"]}], "num": 1975}
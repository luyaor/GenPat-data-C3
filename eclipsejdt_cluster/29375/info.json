{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b67524050216dd2be89393fcb5c098f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c5693770e9d75f882b3a58b5fc602c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "0174bc81f7d2de8d27eebb7df04fb04a776d1f62", "commitAfterChange": "02ca7d63ca30b6951ead9edfd62cb5ea00ae7204", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "   private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "signatureAfterChange": "   private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "diff": ["+\t", "+\t// -- the following are used for early termination.", "+\t// ---", "-\tfor (int i = 0, length = methods == null ? 0 : methods.length; i < length; i++) {", "-\t\tfinal MethodBinding method = methods[i];", "-\t\tif (!method.isAbstract() || method.redeclaresPublicObjectMethod(scope)) continue; // skips statics, defaults, public object methods ...", "-\t\tfinal boolean validBinding = method.isValidBinding();", "-\t\tif (aContract == null && validBinding) {", "-\t\t\taContract = method;", "-\t\t\tcontractParameterLength = aContract.parameters.length;", "-\t\t\tcontractSelector = aContract.selector;", "-\t\t} else {", "-\t\t\tif (!validBinding || method.parameters.length != contractParameterLength || !CharOperation.equals(contractSelector, method.selector)) {", "-\t\t\t\tthrow new InvalidInputException(\"Not a functional interface\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif (contractsCount == contractsLength) {", "-\t\t\tSystem.arraycopy(contracts, 0, contracts = new MethodBinding[contractsLength += 16], 0, contractsCount);", "-\t\t}", "-\t\tcontracts[contractsCount++] = method;", "-\t}", "+\tfor (int i = 0, length = methods == null ? 0 : methods.length; i < length; i++) {", "+\t\tfinal MethodBinding method = methods[i];", "+\t\tif (method.isStatic() || method.redeclaresPublicObjectMethod(scope)) continue;", "+\t\tif (method.isDefaultMethod()) {", "+\t\t\tfor (int j = 0; j < contractsCount; j++) {", "+\t\t\t\tif (contracts[j] == null)", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (MethodVerifier.doesMethodOverride(method, contracts[j], scope.environment())) {", "+\t\t\t\t\tif (aContract == contracts[j]) {", "+\t\t\t\t\t\taContract = null;", "+\t\t\t\t\t\tcontractParameterLength = 0;", "+\t\t\t\t\t\tcontractSelector = null;", "+\t\t\t\t\t}", "+\t\t\t\t\tcontractsCount--;", "+\t\t\t\t\t// abstract method from super type rendered default by present interface ==> contracts[j] = null;", "+\t\t\t\t\tif (j < contractsCount)", "+\t\t\t\t\t\tSystem.arraycopy(contracts, j+1, contracts, j, contractsCount - j);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcontinue; // skip default method itself", "+\t\t}", "+\t\tfinal boolean validBinding = method.isValidBinding();", "+\t\tif (aContract == null && validBinding) {", "+\t\t\taContract = method;", "+\t\t\tcontractParameterLength = aContract.parameters.length;", "+\t\t\tcontractSelector = aContract.selector;", "+\t\t} else {", "+\t\t\tif (!validBinding || method.parameters.length != contractParameterLength || !CharOperation.equals(contractSelector, method.selector)) {", "+\t\t\t\tthrow new InvalidInputException(\"Not a functional interface\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\tif (contractsCount == contractsLength) {", "+\t\t\tSystem.arraycopy(contracts, 0, contracts = new MethodBinding[contractsLength += 16], 0, contractsCount);", "+\t\t}", "+\t\tcontracts[contractsCount++] = method;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "735105f25822b712788d564d2e0f2a6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic void printModifiers()", "signatureAfterChange": "  \tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor)", "diff": ["-\tpublic void printModifiers() {", "+\tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor) {", "+\t\t\tint annotationsLength = annotations != null ? annotations.length : 0;", "+\t\t\tint annotationsIndex = 0;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameAT :", "+\t\t\t\t\t\tif (!isFirstModifier) {", "+\t\t\t\t\t\t\tthis.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.scanner.resetTo(this.scanner.getCurrentTokenStartPosition(), this.scannerEndPosition - 1);", "+\t\t\t\t\t\tif (annotationsIndex < annotationsLength) {", "+\t\t\t\t\t\t\tannotations[annotationsIndex++].traverse(visitor, (BlockScope) null);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tisFirstModifier = false;", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;"]}], "num": 29375}
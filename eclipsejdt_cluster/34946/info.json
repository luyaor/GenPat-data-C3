{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a73201c39bbeee736ab6bb87d2eb589", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f31cb1a9158a5c125a993ebe6c1ce2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrLocator.java", "commitBeforeChange": "fb92cfb822669ddb00db1cf41e3bdb1057d4d00d", "commitAfterChange": "00c13f2feec2211d8da2f8282a37167ca349b1b8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public int match(Reference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MemberValuePair node, MatchingNodeSet nodeSet)", "diff": ["+public int match(MemberValuePair node, MatchingNodeSet nodeSet) {", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patternLocators.length; i < length; i++) {", "+\t\tint newLevel = this.patternLocators[i].match(node, nodeSet);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77f9298f7afed74586e7a60bddab6f93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrLocator.java", "commitBeforeChange": "425b0c5314087893896fa849d0ee8761b973ef60", "commitAfterChange": "340d840f950775980b46fcf21979bc21f0e19016", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public int match(LocalDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(LambdaExpression node, MatchingNodeSet nodeSet)", "diff": ["+public int match(LambdaExpression node, MatchingNodeSet nodeSet) {", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patternLocators.length; i < length; i++) {", "+\t\tint newLevel = this.patternLocators[i].match(node, nodeSet);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd302314caa2490d7983143d22da1347", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndLocator.java", "commitBeforeChange": "425b0c5314087893896fa849d0ee8761b973ef60", "commitAfterChange": "340d840f950775980b46fcf21979bc21f0e19016", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public int match(LocalDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(LambdaExpression node, MatchingNodeSet nodeSet)", "diff": ["+public int match(LambdaExpression node, MatchingNodeSet nodeSet) {", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patternLocators.length; i < length; i++) {", "+\t\tint newLevel = this.patternLocators[i].match(node, nodeSet);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;", "+}"]}], "num": 34946}
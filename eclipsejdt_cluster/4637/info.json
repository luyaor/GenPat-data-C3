{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b36d92b4ad68d04050b066155019be7b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "640d47487fa89369e756114b1917c92d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": " \t \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tif (isTypeUseDeprecated(this.binding.type, initializationScope)) {", "-\t\t\t\t\tinitializationScope.problemReporter().deprecatedType(this.binding.type, this.type);", "-\t\t\t\t}", "-\t\t\t\t\tTypeBinding typeBinding = this.binding.type;", "-\t\t\t\t\tTypeBinding initializationTypeBinding;", "-\t\t\t\t\t", "+\t\t\t\t\tTypeBinding fieldType = this.binding.type;", "+\t\t\t\t\tTypeBinding initializationType;", "+\t\t\t\t\tthis.initialization.setExpectedType(fieldType); // needed in case of generic method invocation", "-\t\t\t\t\t\tif ((initializationTypeBinding = this.initialization.resolveTypeExpecting(initializationScope, typeBinding)) != null) {", "-\t\t\t\t\t\t\t((ArrayInitializer) this.initialization).binding = (ArrayBinding) initializationTypeBinding;", "-\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);", "+\t\t\t\t\t\tif ((initializationType = this.initialization.resolveTypeExpecting(initializationScope, fieldType)) != null) {", "+\t\t\t\t\t\t\t((ArrayInitializer) this.initialization).binding = (ArrayBinding) initializationType;", "+\t\t\t\t\t\t\tthis.initialization.computeConversion(initializationScope, fieldType, initializationType);", "-\t\t\t\t\t} else if ((initializationTypeBinding = this.initialization.resolveType(initializationScope)) != null) {", "+\t\t\t\t\t} else if ((initializationType = this.initialization.resolveType(initializationScope)) != null) {", "-\t\t\t\t\t\tif (this.initialization.isConstantValueOfTypeAssignableToType(initializationTypeBinding, typeBinding)", "-\t\t\t\t\t\t\t|| (typeBinding.isBaseType() && BaseTypeBinding.isWidening(typeBinding.id, initializationTypeBinding.id))) {", "-", "-\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);", "-", "-\t\t\t\t\t\t}\telse if (initializationTypeBinding.isCompatibleWith(typeBinding)) {", "-\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);", "-", "+\t\t\t\t\t\tif (this.initialization.isConstantValueOfTypeAssignableToType(initializationType, fieldType)", "+\t\t\t\t\t\t\t\t|| (fieldType.isBaseType() && BaseTypeBinding.isWidening(fieldType.id, initializationType.id))", "+\t\t\t\t\t\t\t\t|| initializationType.isCompatibleWith(fieldType)) {", "+\t\t\t\t\t\t\tthis.initialization.computeConversion(initializationScope, fieldType, initializationType);", "+\t\t\t\t\t\t\tif (initializationType.isRawType() && (fieldType.isParameterizedType() || fieldType.isGenericType())) {", "+\t\t\t\t\t\t\t\t    initializationScope.problemReporter().unsafeRawAssignment(this.initialization, initializationType, fieldType);", "+\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initializationTypeBinding, typeBinding, this);", "+\t\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initializationType, fieldType, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "980e24d32c534ba68f9410f91812d0ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tTypeBinding typeBinding = type.resolveType(scope);", "+\t\tTypeBinding variableType = type.resolveType(scope);", "-\t\tif (typeBinding != null) {", "-\t\t\tif (typeBinding == VoidBinding) {", "+\t\tif (variableType != null) {", "+\t\t\tif (variableType == VoidBinding) {", "-\t\t\tif (typeBinding.isArrayType() && ((ArrayBinding) typeBinding).leafComponentType == VoidBinding) {", "+\t\t\tif (variableType.isArrayType() && ((ArrayBinding) variableType).leafComponentType == VoidBinding) {", "-\t\t\tbinding = new LocalVariableBinding(this, typeBinding, modifiers, false);", "+\t\t\tbinding = new LocalVariableBinding(this, variableType, modifiers, false);", "-\t\tif (typeBinding == null) {", "+\t\tif (variableType == null) {", "-\t\t\t\tTypeBinding initializationType = initialization.resolveTypeExpecting(scope, typeBinding);", "+\t\t\t\tTypeBinding initializationType = initialization.resolveTypeExpecting(scope, variableType);", "-\t\t\t\t\tinitialization.implicitWidening(typeBinding, initializationType);", "+\t\t\t\t\tinitialization.computeConversion(scope, variableType, initializationType);", "-\t\t\t\tTypeBinding initializationType = initialization.resolveType(scope);", "+\t\t\t    this.initialization.setExpectedType(variableType);", "+\t\t\t\tTypeBinding initializationType = this.initialization.resolveType(scope);", "-\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initializationType, typeBinding)", "-\t\t\t\t\t\t|| (typeBinding.isBaseType() && BaseTypeBinding.isWidening(typeBinding.id, initializationType.id))", "-\t\t\t\t\t\t|| initializationType.isCompatibleWith(typeBinding))", "-\t\t\t\t\t\tinitialization.implicitWidening(typeBinding, initializationType);", "-\t\t\t\t\telse", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initializationType, typeBinding, this);", "+\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initializationType, variableType)", "+\t\t\t\t\t\t|| (variableType.isBaseType() && BaseTypeBinding.isWidening(variableType.id, initializationType.id))", "+\t\t\t\t\t\t|| initializationType.isCompatibleWith(variableType)) {", "+\t\t\t\t\t\tthis.initialization.computeConversion(scope, variableType, initializationType);", "+\t\t\t\t\t\tif (initializationType.isRawType() && (variableType.isParameterizedType() || variableType.isGenericType())) {", "+\t\t\t\t\t\t\t    scope.problemReporter().unsafeRawAssignment(this.initialization, initializationType, variableType);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initializationType, variableType, this);", "+\t\t\t\t\t}", "-\t\t\t\t\t\t? initialization.constant.castTo((typeBinding.id << 4) + initialization.constant.typeID())", "+\t\t\t\t\t\t? initialization.constant.castTo((variableType.id << 4) + initialization.constant.typeID())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c895fb7e4a6e499577ab0b0cc96390a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "ce9c3dc3780579b9d7ca1bf9f8f7982e5e565824", "commitAfterChange": "313b53cfbdcba61e6d447a2d1253d1393322e31e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tTypeBinding tb = type.resolveType(scope);", "+\t\tTypeBinding typeBinding = type.resolveType(scope);", "-\t\tif (tb != null) {", "-\t\t\tif (tb == VoidBinding) {", "+\t\tif (typeBinding != null) {", "+\t\t\tif (typeBinding == VoidBinding) {", "-\t\t\tif (tb.isArrayType() && ((ArrayBinding) tb).leafComponentType == VoidBinding) {", "+\t\t\tif (typeBinding.isArrayType() && ((ArrayBinding) typeBinding).leafComponentType == VoidBinding) {", "-\t\t\tbinding = new LocalVariableBinding(this, tb, modifiers, false);", "+\t\t\tbinding = new LocalVariableBinding(this, typeBinding, modifiers, false);", "-\t\tif (tb == null) {", "+\t\tif (typeBinding == null) {", "-\t\t\t\tTypeBinding initTb = initialization.resolveTypeExpecting(scope, tb);", "-\t\t\t\tif (initTb != null) {", "-\t\t\t\t\t((ArrayInitializer) initialization).binding = (ArrayBinding) initTb;", "-\t\t\t\t\tinitialization.implicitWidening(tb, initTb);", "+\t\t\t\tTypeBinding initializationType = initialization.resolveTypeExpecting(scope, typeBinding);", "+\t\t\t\tif (initializationType != null) {", "+\t\t\t\t\t((ArrayInitializer) initialization).binding = (ArrayBinding) initializationType;", "+\t\t\t\t\tinitialization.implicitWidening(typeBinding, initializationType);", "-\t\t\t\tTypeBinding initTb = initialization.resolveType(scope);", "-\t\t\t\tif (initTb != null) {", "-\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initTb, tb)", "-\t\t\t\t\t\t|| (tb.isBaseType() && BaseTypeBinding.isWidening(tb.id, initTb.id))", "-\t\t\t\t\t\t|| initTb.isCompatibleWith(tb))", "-\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);", "+\t\t\t\tTypeBinding initializationType = initialization.resolveType(scope);", "+\t\t\t\tif (initializationType != null) {", "+\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initializationType, typeBinding)", "+\t\t\t\t\t\t|| (typeBinding.isBaseType() && BaseTypeBinding.isWidening(typeBinding.id, initializationType.id))", "+\t\t\t\t\t\t|| initializationType.isCompatibleWith(typeBinding))", "+\t\t\t\t\t\tinitialization.implicitWidening(typeBinding, initializationType);", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initTb, tb, this);", "+\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initializationType, typeBinding, this);", "-\t\t\t\t\t\t? initialization.constant.castTo((tb.id << 4) + initialization.constant.typeID())", "+\t\t\t\t\t\t? initialization.constant.castTo((typeBinding.id << 4) + initialization.constant.typeID())"]}], "num": 4637}
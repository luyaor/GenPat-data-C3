{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c94fc745ea1862df00300dcd0ed6156", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c0aebe8ca06fc4c77786a41603fc186", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 34, "signatureBeforeChange": "\r public ConfigurableOption[] getConfigurableOptions(Locale locale)", "signatureAfterChange": "\r void setOption(ConfigurableOption setting)", "diff": ["- */\r", "-public ConfigurableOption[] getConfigurableOptions(Locale locale) {\r", "-\tString componentName = Compiler.class.getName();\r", "-\treturn new ConfigurableOption[] {\r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.vars\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(produceDebugAttributes & Vars) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.lines\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(produceDebugAttributes & Lines) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.source\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(produceDebugAttributes & Source) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.preserveAllLocals\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\tpreserveAllLocalVariables ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalError.unReachableCode\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(errorThreshold & UnreachableCode) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalError.importProblem\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(errorThreshold & ImportProblem) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.methodWithConstructorName\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & MethodWithConstructorName) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.overridingPackageDefaultMethod\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & OverriddenPackageDefaultMethod) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.deprecated\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & UsingDeprecatedAPI) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.maskedCatchBlock\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & MaskedCatchBlock) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.unusedLocalVariable\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & UnusedLocalVariable) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.unusedArgument\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & UnusedArgument) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"binaryCompatibility.targetJDK\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\ttargetJDK), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.accessEmulation\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & AccessEmulation) != 0 ? 0 : 1),\r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.nonExternalizedString\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & NonExternalizedString) != 0 ? 0 : 1)\r", "-\t\t}; \r", "-}\r", "+\tString componentName = Compiler.class.getName();\r", "+\tString optionID = setting.getID();\r", "+\t\r", "+\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "+\t\tif (setting.getValueIndex() == 0) {\r", "+\t\t\t// set the debug flag with Vars.\r", "+\t\t\tproduceDebugAttributes |= Vars;\r", "+\t\t} else {\r", "+\t\t\tproduceDebugAttributes &= ~Vars;\r", "+\t\t}\r", "+\t} else if(optionID.equals(OPTION_LineNumberAttribute)) {\r", "+\t\tif (setting.getValueIndex() == 0) {\r", "+\t\t\t// set the debug flag with Lines\r", "+\t\t\tproduceDebugAttributes |= Lines;\r", "+\t\t} else {\r", "+\t\t\tproduceDebugAttributes &= ~Lines;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_SourceFileAttribute)) {\r", "+\t\tif (setting.getValueIndex() == 0) {\r", "+\t\t\t// set the debug flag with Source.\r", "+\t\t\tproduceDebugAttributes |= Source;\r", "+\t\t} else {\r", "+\t\t\tproduceDebugAttributes &= ~Source;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "+\t\tpreserveAllLocalVariables(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_ReportUnreachableCode)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetUnreachableCodeSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetUnreachableCodeSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 : \r", "+\t\t\t\tsetUnreachableCodeSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportInvalidImport)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetImportProblemSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetImportProblemSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetImportProblemSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_TargetPlatform)){\r", "+\t\tsetTargetJDK(setting.getValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "+\t}else if(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetMethodWithConstructorNameSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetMethodWithConstructorNameSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetMethodWithConstructorNameSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportDeprecation)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetDeprecationUseSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetDeprecationUseSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetDeprecationUseSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetMaskedCatchBlockSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetMaskedCatchBlockSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetMaskedCatchBlockSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportUnusedLocal)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetUnusedLocalVariableSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetUnusedLocalVariableSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetUnusedLocalVariableSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportUnusedParameter)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetUnusedArgumentSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetUnusedArgumentSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetUnusedArgumentSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetAccessEmulationSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetAccessEmulationSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetAccessEmulationSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetNonExternalizedStringLiteralSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetNonExternalizedStringLiteralSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetNonExternalizedStringLiteralSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetAssertIdentifierSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetAssertIdentifierSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetAssertIdentifierSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_Source)){\r", "+\t\tsetAssertMode(setting.getValueIndex() == 1);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75c5834a003aeb9b35d5359eaf04de03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 34, "signatureBeforeChange": "\r public ConfigurableOption[] getConfigurableOptions(Locale locale)", "signatureAfterChange": "\r void setOption(ConfigurableOption setting)", "diff": ["- */\r", "-public ConfigurableOption[] getConfigurableOptions(Locale locale) {\r", "-\tString componentName = Compiler.class.getName();\r", "-\treturn new ConfigurableOption[] {\r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.vars\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(produceDebugAttributes & Vars) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.lines\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(produceDebugAttributes & Lines) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.source\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(produceDebugAttributes & Source) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.preserveAllLocals\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\tpreserveAllLocalVariables ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalError.unReachableCode\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(errorThreshold & UnreachableCode) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalError.importProblem\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(errorThreshold & ImportProblem) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.methodWithConstructorName\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & MethodWithConstructorName) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.overridingPackageDefaultMethod\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & OverriddenPackageDefaultMethod) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.deprecated\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & UsingDeprecatedAPI) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.maskedCatchBlock\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & MaskedCatchBlock) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.unusedLocalVariable\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & UnusedLocalVariable) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.unusedArgument\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & UnusedArgument) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"binaryCompatibility.targetJDK\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\ttargetJDK), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.accessEmulation\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & AccessEmulation) != 0 ? 0 : 1),\r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.nonExternalizedString\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & NonExternalizedString) != 0 ? 0 : 1)\r", "-\t\t}; \r", "-}\r", "+\tString componentName = Compiler.class.getName();\r", "+\tString optionID = setting.getID();\r", "+\t\r", "+\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "+\t\tif (setting.getValueIndex() == 0) {\r", "+\t\t\t// set the debug flag with Vars.\r", "+\t\t\tproduceDebugAttributes |= Vars;\r", "+\t\t} else {\r", "+\t\t\tproduceDebugAttributes &= ~Vars;\r", "+\t\t}\r", "+\t} else if(optionID.equals(OPTION_LineNumberAttribute)) {\r", "+\t\tif (setting.getValueIndex() == 0) {\r", "+\t\t\t// set the debug flag with Lines\r", "+\t\t\tproduceDebugAttributes |= Lines;\r", "+\t\t} else {\r", "+\t\t\tproduceDebugAttributes &= ~Lines;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_SourceFileAttribute)) {\r", "+\t\tif (setting.getValueIndex() == 0) {\r", "+\t\t\t// set the debug flag with Source.\r", "+\t\t\tproduceDebugAttributes |= Source;\r", "+\t\t} else {\r", "+\t\t\tproduceDebugAttributes &= ~Source;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "+\t\tpreserveAllLocalVariables(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_ReportUnreachableCode)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetUnreachableCodeSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetUnreachableCodeSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 : \r", "+\t\t\t\tsetUnreachableCodeSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportInvalidImport)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetImportProblemSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetImportProblemSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetImportProblemSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_TargetPlatform)){\r", "+\t\tsetTargetJDK(setting.getValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "+\t}else if(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetMethodWithConstructorNameSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetMethodWithConstructorNameSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetMethodWithConstructorNameSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportDeprecation)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetDeprecationUseSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetDeprecationUseSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetDeprecationUseSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetMaskedCatchBlockSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetMaskedCatchBlockSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetMaskedCatchBlockSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportUnusedLocal)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetUnusedLocalVariableSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetUnusedLocalVariableSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetUnusedLocalVariableSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportUnusedParameter)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetUnusedArgumentSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetUnusedArgumentSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetUnusedArgumentSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetAccessEmulationSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetAccessEmulationSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetAccessEmulationSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetNonExternalizedStringLiteralSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetNonExternalizedStringLiteralSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetNonExternalizedStringLiteralSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetAssertIdentifierSeverity(Error);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetAssertIdentifierSeverity(Warning);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetAssertIdentifierSeverity(Ignore);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_Source)){\r", "+\t\tsetAssertMode(setting.getValueIndex() == 1);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a31cc40001abf9578b8f74d34af75a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "77f822579c514662c97fa5cfdb004c75e9bbd57e", "commitAfterChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 34, "signatureBeforeChange": "\r public ConfigurableOption[] getConfigurableOptions(Locale locale)", "signatureAfterChange": "\r void setOption(ConfigurableOption setting)", "diff": ["- */\r", "-public ConfigurableOption[] getConfigurableOptions(Locale locale) {\r", "-\tString componentName = Compiler.class.getName();\r", "-\treturn new ConfigurableOption[] {\r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.vars\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(produceDebugAttributes & Vars) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.lines\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(produceDebugAttributes & Lines) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.source\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(produceDebugAttributes & Source) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"debug.preserveAllLocals\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\tpreserveAllLocalVariables ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalError.unReachableCode\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(errorThreshold & UnreachableCode) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalError.importProblem\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(errorThreshold & ImportProblem) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.methodWithConstructorName\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & MethodWithConstructorName) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.overridingPackageDefaultMethod\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & OverriddenPackageDefaultMethod) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.deprecated\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & UsingDeprecatedAPI) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.maskedCatchBlock\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & MaskedCatchBlock) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.unusedLocalVariable\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & UnusedLocalVariable) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.unusedArgument\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & UnusedArgument) != 0 ? 0 : 1), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"binaryCompatibility.targetJDK\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\ttargetJDK), \r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.accessEmulation\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & AccessEmulation) != 0 ? 0 : 1),\r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.nonExternalizedString\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & NonExternalizedString) != 0 ? 0 : 1),\r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"source\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\tassertMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(\r", "-\t\t\tcomponentName,\r", "-\t\t\t\"optionalWarning.assertIdentifier\"/*nonNLS*/, \r", "-\t\t\tlocale, \r", "-\t\t\t(warningThreshold & AssertUsedAsAnIdentifier) != 0 ? 0 : 1)\r", "-\t\t}; \r", "-}\r", "+\tString componentName = Compiler.class.getName();\r", "+\tString optionID = setting.getID();\r", "+\t\r", "+\tif(optionID.equals(componentName + \".debugLocalVariable\"/*nonNLS*/)){\r", "+\t\tif (setting.getValueIndex() == 0) {\r", "+\t\t\t// set the debug flag with Vars.\r", "+\t\t\tproduceDebugAttributes |= Vars;\r", "+\t\t} else {\r", "+\t\t\tproduceDebugAttributes &= ~Vars;\r", "+\t\t}\r", "+\t} else if(optionID.equals(componentName + \".debugLineNumber\"/*nonNLS*/)) {\r", "+\t\tif (setting.getValueIndex() == 0) {\r", "+\t\t\t// set the debug flag with Lines\r", "+\t\t\tproduceDebugAttributes |= Lines;\r", "+\t\t} else {\r", "+\t\t\tproduceDebugAttributes &= ~Lines;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".debugSourceFile\"/*nonNLS*/)) {\r", "+\t\tif (setting.getValueIndex() == 0) {\r", "+\t\t\t// set the debug flag with Source.\r", "+\t\t\tproduceDebugAttributes |= Source;\r", "+\t\t} else {\r", "+\t\t\tproduceDebugAttributes &= ~Source;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".codegenUnusedLocal\"/*nonNLS*/)){\r", "+\t\tpreserveAllLocalVariables(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName + \".problemUnreachableCode\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetUnreachableCodeSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetUnreachableCodeSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetUnreachableCodeSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".problemInvalidImport\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetImportProblemSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetImportProblemSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetImportProblemSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".codegenTargetPlatform\"/*nonNLS*/)){\r", "+\t\tsetTargetJDK(setting.getValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "+\t}else if(optionID.equals(componentName + \".problemMethodWithConstructorName\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetMethodWithConstructorNameSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetMethodWithConstructorNameSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetMethodWithConstructorNameSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".problemOverridingPackageDefaultMethod\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".problemDeprecation\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetDeprecationUseSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetDeprecationUseSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetDeprecationUseSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".problemHiddenCatchBlock\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetMaskedCatchBlockSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetMaskedCatchBlockSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetMaskedCatchBlockSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".problemUnusedLocal\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetUnusedLocalVariableSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetUnusedLocalVariableSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetUnusedLocalVariableSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".problemUnusedParameter\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetUnusedArgumentSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetUnusedArgumentSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetUnusedArgumentSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".problemSyntheticAccessEmulation\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetAccessEmulationSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetAccessEmulationSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetAccessEmulationSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".problemNonExternalizedStringLiteral\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetNonExternalizedStringLiteralSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetNonExternalizedStringLiteralSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetNonExternalizedStringLiteralSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".problemAssertIdentifier\"/*nonNLS*/)){\r", "+\t\tswitch(setting.getValueIndex()){\r", "+\t\t\tcase 0 : \r", "+\t\t\t\tsetAssertIdentifierSeverity(ERROR);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 1 :\r", "+\t\t\t\tsetAssertIdentifierSeverity(WARNING);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase 2 :\r", "+\t\t\t\tsetAssertIdentifierSeverity(IGNORE);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}else if(optionID.equals(componentName + \".source\"/*nonNLS*/)){\r", "+\t\tsetAssertMode(setting.getValueIndex() == 1);\r"]}], "num": 70080}
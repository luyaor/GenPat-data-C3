{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2146979215b22e18b7f4c9816f4c5e5a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bc802db41e1fa7826e8104b499c7e17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "19198639bc25484a459cb1c53c953f761d4a6a3d", "commitAfterChange": "f495bb04967a33ceb30ace84eb082a0e7e182ce6", "methodNumberBeforeChange": 644, "methodNumberAfterChange": 644, "signatureBeforeChange": " public void testCompletionAllMemberTypes5() throws JavaModelException", "signatureAfterChange": " public void testCompletionAllMemberTypes5() throws JavaModelException", "diff": ["-\t    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {", "-\t    \t// AType.Member1.Member2.Member3 and AType.Member1.Member2.Member3.Member4 should not be proposed because they are not visible.", "-\t    \t// But visibility need modifiers of enclosing types to be computed. ", "-\t    \tassertResults(", "-\t\t            \"AType.Member1[TYPE_REF]{test.AType.Member1, test, Ltest.AType$Member1;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\t\"AType.Member1.Member2.Member3[TYPE_REF]{test.AType.Member1.Member2.Member3, test, Ltest.AType$Member1$Member2$Member3;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\t\"AType.Member1.Member2.Member3.Member4[TYPE_REF]{test.AType.Member1.Member2.Member3.Member4, test, Ltest.AType$Member1$Member2$Member3$Member4;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "-\t\t            requestor.getResults());", "-\t    } else {", "-\t    \tassertResults(", "-\t\t            \"\",", "-\t\t            requestor.getResults());", "-\t    }", "+    \t// AType.Member1.Member2.Member3 and AType.Member1.Member2.Member3.Member4 should not be proposed because they are not visible.", "+    \t// But visibility need modifiers of enclosing types to be computed. ", "+    \tassertResults(", "+\t            \"AType.Member1[TYPE_REF]{test.AType.Member1, test, Ltest.AType$Member1;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"AType.Member1.Member2.Member3[TYPE_REF]{test.AType.Member1.Member2.Member3, test, Ltest.AType$Member1$Member2$Member3;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"AType.Member1.Member2.Member3.Member4[TYPE_REF]{test.AType.Member1.Member2.Member3.Member4, test, Ltest.AType$Member1$Member2$Member3$Member4;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t            requestor.getResults());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "853ecef116abfe023666280c5a23a761", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "19198639bc25484a459cb1c53c953f761d4a6a3d", "commitAfterChange": "f495bb04967a33ceb30ace84eb082a0e7e182ce6", "methodNumberBeforeChange": 646, "methodNumberAfterChange": 646, "signatureBeforeChange": " public void testCompletionAllMemberTypes7() throws JavaModelException", "signatureAfterChange": " public void testCompletionAllMemberTypes7() throws JavaModelException", "diff": ["-\t    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {", "-\t    \tassertResults(", "-\t\t            \"AType.Member1.Member2[TYPE_REF]{test.AType.Member1.Member2, test, Ltest.AType$Member1$Member2;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\t\"AType.Member1.Member2.Member3[TYPE_REF]{test.AType.Member1.Member2.Member3, test, Ltest.AType$Member1$Member2$Member3;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\t\"AType.Member1[TYPE_REF]{Member1, test, Ltest.AType$Member1;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "-\t\t            requestor.getResults());", "-\t    } else {", "-\t    \tassertResults(", "-\t\t            \"AType.Member1[TYPE_REF]{Member1, test, Ltest.AType$Member1;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "-\t\t            requestor.getResults());", "-\t    }", "+    \tassertResults(", "+\t            \"AType.Member1.Member2[TYPE_REF]{test.AType.Member1.Member2, test, Ltest.AType$Member1$Member2;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"AType.Member1.Member2.Member3[TYPE_REF]{test.AType.Member1.Member2.Member3, test, Ltest.AType$Member1$Member2$Member3;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"AType.Member1[TYPE_REF]{Member1, test, Ltest.AType$Member1;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+\t            requestor.getResults());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97f731059748fba52546b5c8c5a1f638", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "19198639bc25484a459cb1c53c953f761d4a6a3d", "commitAfterChange": "f495bb04967a33ceb30ace84eb082a0e7e182ce6", "methodNumberBeforeChange": 640, "methodNumberAfterChange": 640, "signatureBeforeChange": " public void testCompletionAllMemberTypes() throws JavaModelException", "signatureAfterChange": " public void testCompletionAllMemberTypes() throws JavaModelException", "diff": ["-    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {", "-    \tassertResults(", "-\t            \"CompletionAllMemberTypes.Member1.Member2.Member3[TYPE_REF]{test.CompletionAllMemberTypes.Member1.Member2.Member3, test, Ltest.CompletionAllMemberTypes$Member1$Member2$Member3;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"CompletionAllMemberTypes.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes$Member1;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"CompletionAllMemberTypes.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes$Member1$Member2;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "-\t            requestor.getResults());", "-    } else {", "-    \tassertResults(", "-\t            \"CompletionAllMemberTypes.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes$Member1;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"CompletionAllMemberTypes.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes$Member1$Member2;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "-\t            requestor.getResults());", "-    }", "+\tassertResults(", "+            \"CompletionAllMemberTypes.Member1.Member2.Member3[TYPE_REF]{test.CompletionAllMemberTypes.Member1.Member2.Member3, test, Ltest.CompletionAllMemberTypes$Member1$Member2$Member3;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"CompletionAllMemberTypes.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes$Member1;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"CompletionAllMemberTypes.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes$Member1$Member2;, null, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+            requestor.getResults());"]}], "num": 15464}
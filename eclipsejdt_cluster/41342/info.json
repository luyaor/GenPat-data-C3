{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f264c6bed9361b269621a8ecd730c02a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b5d82b562871663ccf2efd277236ddd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "bb035342af3e77c43a12431c380fb2a6fe6ec67e", "commitAfterChange": "d9aabee2fc6180b2ed4f4131332dc5a46cc37a0d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void checkExceptionHandlers( \t\tTypeBinding[] raisedExceptions, \t\tAstNode location, \t\tFlowInfo flowInfo, \t\tBlockScope scope)", "signatureAfterChange": " \t \tpublic void checkExceptionHandlers( \t\tTypeBinding[] raisedExceptions, \t\tAstNode location, \t\tFlowInfo flowInfo, \t\tBlockScope scope)", "diff": ["-\t\t\tAstNode sub;", "-\t\t\tif (((sub = traversedContext.subRoutine()) != null) && sub.cannotReturn()) {", "+\t\t\tSubRoutineStatement sub;", "+\t\t\tif (((sub = traversedContext.subRoutine()) != null) && sub.isSubRoutineEscaping()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26ebe807f80211071b595c738d588706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "0d08aa661af23c77dec180adb0e2d54bc237084f", "commitAfterChange": "5eb7cf53adf1de05482e3d2eb14b8fd35c6f4286", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void resolveParamTags(MethodScope methScope)", "signatureAfterChange": " \tprivate void resolveParamTags(MethodScope methScope)", "diff": ["-\t\t\t\tmethScope.problemReporter().annotationInvalidParam(arg);", "+\t\t\t\tmethScope.problemReporter().annotationMissingParamTag(arg);", "-\t\t\t\t\tmethScope.problemReporter().annotationInvalidParam(arg);", "+\t\t\t\t\tmethScope.problemReporter().annotationMissingParamTag(arg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57b8c2b046e5869aef598120de83518a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTParserTest.java", "commitBeforeChange": "7511ce8ac2a616c416b32731f4d10587027e3f25", "commitAfterChange": "71d14c28198258a4d6a7c5df6309a1aa1f387bf3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testSetting()", "signatureAfterChange": "  \tpublic void testSetting()", "diff": ["-\t    parser.setPartial(-1);", "-\t    parser.setPartial(0);", "+\t    parser.setFocalPosition(-1);", "+\t    parser.setFocalPosition(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64d3292938e8bc28d0678803e9b5a08f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BranchStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\t\tSubRoutineStatement.reenterExceptionHandlers(subroutines, i, codeStream);", "+\t\t\t\t\tSubRoutineStatement.reenterAnyExceptionHandlers(subroutines, i, codeStream);", "-\tSubRoutineStatement.reenterExceptionHandlers(subroutines, -1, codeStream);", "+\tSubRoutineStatement.reenterAnyExceptionHandlers(subroutines, -1, codeStream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80aa9f8a603d39071c9a060d7f45f3aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "b2a8fded035cda546b66064f20542371f7983ff2", "commitAfterChange": "2b0122bcb96284325ae0cf7554d9488a50d64c97", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static void assertEquals(String message, String expected, String actual)", "signatureAfterChange": " public static void assertEquals(String message, String expected, String actual)", "diff": ["-\tthrow new ComparisonFailure(message, showCRs(expected), showCRs(actual));", "+\tthrow new ComparisonFailure(message, showLineSeparators(expected), showLineSeparators(actual));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8947b7839ac3f009dcdb63a938d51f4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\t\t\tSubRoutineStatement.reenterExceptionHandlers(subroutines, i, codeStream);", "+\t\t\t\t\t\tSubRoutineStatement.reenterAnyExceptionHandlers(subroutines, i, codeStream);", "-\t\tSubRoutineStatement.reenterExceptionHandlers(subroutines, -1, codeStream);", "+\t\tSubRoutineStatement.reenterAnyExceptionHandlers(subroutines, -1, codeStream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90fcaa1a1fd7dd3f551a687b65e6b125", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "bb035342af3e77c43a12431c380fb2a6fe6ec67e", "commitAfterChange": "d9aabee2fc6180b2ed4f4131332dc5a46cc37a0d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void checkExceptionHandlers( \t\tTypeBinding raisedException, \t\tAstNode location, \t\tFlowInfo flowInfo, \t\tBlockScope scope)", "signatureAfterChange": "  \tpublic void checkExceptionHandlers( \t\tTypeBinding raisedException, \t\tAstNode location, \t\tFlowInfo flowInfo, \t\tBlockScope scope)", "diff": ["-\t\t\tAstNode sub;", "-\t\t\tif (((sub = traversedContext.subRoutine()) != null) && sub.cannotReturn()) {", "+\t\t\tSubRoutineStatement sub;", "+\t\t\tif (((sub = traversedContext.subRoutine()) != null) && sub.isSubRoutineEscaping()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c26888779adebb837d19d610c68e35f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java", "commitBeforeChange": "884ff6d126e8e167078e1254e70ddd633d4b8d87", "commitAfterChange": "066bc941d64c2c94b08ec4c2b9ccf65ccce86e18", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean computeChildren(OpenableElementInfo info)", "signatureAfterChange": " protected boolean computeChildren(OpenableElementInfo info)", "diff": ["-\tif (jInfo.fEntryNames != null){", "+\tif (jInfo.entryNames != null){", "-\t\tfor (Iterator iter = jInfo.fEntryNames.iterator(); iter.hasNext();) {", "+\t\tfor (Iterator iter = jInfo.entryNames.iterator(); iter.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c755ae12ac3b89cadfc6720dcdb850b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "7315a9946428ac17ed2f3c53c5f292f76322b904", "commitAfterChange": "62f8132aa6e66bc79d2cfcc69b7efa69d325d62b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected boolean parseHtmlTag(int previousPosition, int endTextPosition) throws InvalidInputException", "signatureAfterChange": " protected boolean parseHtmlTag(int previousPosition, int endTextPosition) throws InvalidInputException", "diff": ["-\t\t\t\thtmlIndex = htmlTagIndex(htmlTag);", "+\t\t\t\thtmlIndex = getHtmlTagIndex(htmlTag);", "-\t\t\t\thtmlIndex = htmlTagIndex(identifier);", "+\t\t\t\thtmlIndex = getHtmlTagIndex(identifier);", "-}"]}], "num": 41342}
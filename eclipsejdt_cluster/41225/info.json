{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c0ff81bafa7de8a1f37c583a69daf4d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c32240fc7c2ebffd2589b6ffa972b70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " protected int resolveLevelForType (char[] simpleNamePattern, \t\t\t\t\t\t\t\t\tchar[] qualificationPattern, \t\t\t\t\t\t\t\t\tchar[][][] patternTypeArguments, \t\t\t\t\t\t\t\t\tint depth, \t\t\t\t\t\t\t\t\tTypeBinding type)", "signatureAfterChange": " protected int resolveLevelForType (char[] simpleNamePattern, \t\t\t\t\t\t\t\t\tchar[] qualificationPattern, \t\t\t\t\t\t\t\t\tchar[][][] patternTypeArguments, \t\t\t\t\t\t\t\t\tint depth, \t\t\t\t\t\t\t\t\tTypeBinding type)", "diff": ["-\tif (type == null || patternTypeArguments == null|| patternTypeArguments.length == 0 || depth>=patternTypeArguments.length || patternTypeArguments[depth] == null) return level;", "+\tif (type == null || patternTypeArguments == null || patternTypeArguments.length == 0 || depth >= patternTypeArguments.length) {", "+\t\treturn level;", "+\t}", "-\t\t// type variables length must match at least specified type names length", "-\t\tif (typeVariables == null || typeVariables.length == 0) {", "-\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\tif (patternTypeArguments[depth] != null && patternTypeArguments[depth].length > 0 &&", "+\t\t\ttypeVariables != null && typeVariables.length > 0) {", "+\t\t\tif (typeVariables.length != patternTypeArguments[depth].length) return IMPOSSIBLE_MATCH;", "-\t\tint length = patternTypeArguments[depth].length;", "-\t\tif (typeVariables.length != length) return IMPOSSIBLE_MATCH;", "-\t\treturn IMPOSSIBLE_MATCH;", "+\t\treturn (patternTypeArguments[depth]==null || patternTypeArguments[depth].length==0) ? level : IMPOSSIBLE_MATCH;", "-\t\t// When there's no type argument, no verification is necessary ", "-\t\tif (paramTypeBinding.arguments != null) {", "+", "+\t\t// Compare arguments only if there ones on both sides", "+\t\tif (patternTypeArguments[depth] != null && patternTypeArguments[depth].length > 0 &&", "+\t\t\tparamTypeBinding.arguments != null && paramTypeBinding.arguments.length > 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be94d133e6505e78da3cdc81cfbda901", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "9f614fc97667efed681d3433770b756cc7555814", "commitAfterChange": "e5350265da2408990b972b2cb2f8a82c97230de1", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean patternHasTypeParameters, int depth, MatchLocator locator)", "signatureAfterChange": " protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean patternHasTypeParameters, int depth, MatchLocator locator)", "diff": ["-\tboolean isRaw = parameterizedBinding.isRawType()|| (parameterizedBinding.arguments==null && parameterizedBinding.type.isGenericType());", "+\tTypeBinding[] argumentsBindings = parameterizedBinding.arguments;", "+\tboolean isRaw = parameterizedBinding.isRawType()|| (argumentsBindings==null && parameterizedBinding.type.isGenericType());", "-\t\tchar[][] patternArguments =  patternTypeArguments[depth];", "-\t\tupdateMatch(parameterizedBinding.arguments, locator, patternArguments, patternHasTypeParameters);", "+\t\t// verify if this is a reference to the generic type itself", "+\t\tif (!isRaw && patternHasTypeParameters && argumentsBindings != null) {", "+\t\t\tboolean needUpdate = false;", "+\t\t\tTypeVariableBinding[] typeVariables = parameterizedBinding.type.typeVariables();", "+\t\t\tfor (int i=0, l=argumentsBindings.length; i<l; i++) {", "+\t\t\t\tif (argumentsBindings[i] != typeVariables[i]) {", "+\t\t\t\t\tneedUpdate = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (needUpdate) {", "+\t\t\t\tchar[][] patternArguments =  patternTypeArguments[depth];", "+\t\t\t\tupdateMatch(argumentsBindings, locator, patternArguments, patternHasTypeParameters);\t", "+\t\t\t}", "+\t\t} else {", "+\t\t\tchar[][] patternArguments =  patternTypeArguments[depth];", "+\t\t\tupdateMatch(argumentsBindings, locator, patternArguments, patternHasTypeParameters);", "+\t\t}"]}], "num": 41225}
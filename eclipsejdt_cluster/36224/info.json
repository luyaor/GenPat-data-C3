{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08a9ebe574a00e5ed88278ffd50882c4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e2306fa39b957719522e66c79e8409c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "bc3a64dfc18ca9208d47ca0c4c780501f11956e7", "commitAfterChange": "06fc8e7b57a6268383b5a97ff433bb4fd67804ef", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r void write(DataOutputStream out) throws IOException", "signatureAfterChange": "\r \r void write(DataOutputStream out) throws IOException", "diff": ["+\t\t\t\tlength--;\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"structuralBuildNumbers table is inconsistent\"); //$NON-NLS-1$\r", "-\tkeyTable = references.keyTable;\r", "-\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "-\t\tif (keyTable[i] != null) {\r", "-\t\t\tString key = (String) keyTable[i];\r", "-\t\t\tout.writeUTF(key);\r", "-\t\t\tinternedLocations.add(key);\r", "+\tif (length > 0) {\r", "+\t\tkeyTable = references.keyTable;\r", "+\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\t\tif (keyTable[i] != null) {\r", "+\t\t\t\tlength--;\r", "+\t\t\t\tString key = (String) keyTable[i];\r", "+\t\t\t\tout.writeUTF(key);\r", "+\t\t\t\tinternedLocations.add(key);\r", "+\t\t\t}\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"references table is inconsistent\"); //$NON-NLS-1$\r", "+\t\t\t\tlength--;\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"typeLocations table is inconsistent\"); //$NON-NLS-1$\r", "-\tkeyTable = references.keyTable;\r", "-\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "-\t\tif (keyTable[i] != null) {\r", "-\t\t\tout.writeInt(internedLocations.indexOf((String) keyTable[i]));\r", "-\t\t\tReferenceCollection collection = (ReferenceCollection) valueTable[i];\r", "-\t\t\tif (collection instanceof AdditionalTypeCollection) {\r", "-\t\t\t\tout.writeByte(1);\r", "-\t\t\t\tAdditionalTypeCollection atc = (AdditionalTypeCollection) collection;\r", "-\t\t\t\twriteNames(atc.definedTypeNames, out);\r", "-\t\t\t} else {\r", "-\t\t\t\tout.writeByte(2);\r", "+\tif (length > 0) {\r", "+\t\tkeyTable = references.keyTable;\r", "+\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\t\tif (keyTable[i] != null) {\r", "+\t\t\t\tlength--;\r", "+\t\t\t\tout.writeInt(internedLocations.indexOf((String) keyTable[i]));\r", "+\t\t\t\tReferenceCollection collection = (ReferenceCollection) valueTable[i];\r", "+\t\t\t\tif (collection instanceof AdditionalTypeCollection) {\r", "+\t\t\t\t\tout.writeByte(1);\r", "+\t\t\t\t\tAdditionalTypeCollection atc = (AdditionalTypeCollection) collection;\r", "+\t\t\t\t\twriteNames(atc.definedTypeNames, out);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tout.writeByte(2);\r", "+\t\t\t\t}\r", "+\t\t\t\tchar[][][] qNames = collection.qualifiedNameReferences;\r", "+\t\t\t\tint qLength = qNames.length;\r", "+\t\t\t\tout.writeInt(qLength);\r", "+\t\t\t\tfor (int j = 0; j < qLength; j++)\r", "+\t\t\t\t\tout.writeInt(internedQualifiedNames.indexOf(qNames[j]));\r", "+\t\t\t\tchar[][] sNames = collection.simpleNameReferences;\r", "+\t\t\t\tint sLength = sNames.length;\r", "+\t\t\t\tout.writeInt(sLength);\r", "+\t\t\t\tfor (int j = 0; j < sLength; j++)\r", "+\t\t\t\t\tout.writeInt(internedSimpleNames.indexOf(sNames[j]));\r", "-\t\t\tchar[][][] qNames = collection.qualifiedNameReferences;\r", "-\t\t\tint qLength = qNames.length;\r", "-\t\t\tout.writeInt(qLength);\r", "-\t\t\tfor (int j = 0; j < qLength; j++)\r", "-\t\t\t\tout.writeInt(internedQualifiedNames.indexOf(qNames[j]));\r", "-\t\t\tchar[][] sNames = collection.simpleNameReferences;\r", "-\t\t\tint sLength = sNames.length;\r", "-\t\t\tout.writeInt(sLength);\r", "-\t\t\tfor (int j = 0; j < sLength; j++)\r", "-\t\t\t\tout.writeInt(internedSimpleNames.indexOf(sNames[j]));\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"references table is inconsistent\"); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdafe632a59d28686fb633cd3bd9f284", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceCompletionTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected void tearDown() throws Exception", "signatureAfterChange": " \tprotected void tearDown() throws Exception", "diff": ["+        ", "+\t\t// Print statistics", "+        if (TESTS_COUNT == 0) {", "+\t\t\tSystem.out.println(\"-------------------------------------\");", "+\t\t\tSystem.out.println(\"Completion performance test statistics:\");", "+\t\t\tNumberFormat intFormat = NumberFormat.getIntegerInstance();", "+\t\t\tSystem.out.println(\"  - \"+intFormat.format(ITERATION_COUNT*MEASURES_COUNT)+\" completions have been performed\");", "+\t\t\tSystem.out.println(\"  - \"+intFormat.format(this.proposalCount)+\" proposals have been done\");", "+\t\t\tSystem.out.println(\"-------------------------------------\\n\");", "+        }"]}], "num": 36224}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8df04c462e1118a3d2921bf90c54fe55", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37c3b8438d1392b5bc0bf43023e1b9da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "b90ae111ff29246e99448511171a44d6aca74c50", "commitAfterChange": "c746ac6ae60dd73c0e681419d361cf16b338a627", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\tSubProgressMonitor subMonitor = null;", "+\t\t\tSubMonitor subMonitor = null;", "-\t\t\t\t\tsubMonitor = new SubProgressMonitor(monitor, 50); // 50% of the time is spent in initializing containers and variables", "+\t\t\t\t\tsubMonitor = SubMonitor.convert(monitor, 50); // 50% of the time is spent in initializing containers and variables", "-\t\t\t\t\tmonitor == null ? null : new SubProgressMonitor(monitor, 1) // 1% of the time is spent in jar refresh", "+\t\t\t\t\tmonitor == null ? null : SubMonitor.convert(monitor, 1) // 1% of the time is spent in jar refresh", "-\t\t\t\t\tmonitor == null ? null : new SubProgressMonitor(monitor, 49) // 49% of the time is spent in the dummy search", "+\t\t\t\t\tmonitor == null ? null : SubMonitor.convert(monitor, 49) // 49% of the time is spent in the dummy search"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5618f3f754cc9f16c2817d3720567ab1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "b90ae111ff29246e99448511171a44d6aca74c50", "commitAfterChange": "c746ac6ae60dd73c0e681419d361cf16b338a627", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "signatureAfterChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "diff": ["-\t\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));", "+\t\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : SubMonitor.convert(progress, concurrentJobWork));", "-\t\t\t\t\t\t\t\tsubProgress = new SubProgressMonitor(progress, concurrentJobWork * 8 / 10);", "+\t\t\t\t\t\t\t\tsubProgress = SubMonitor.convert(progress, concurrentJobWork * 8 / 10);", "-\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));", "+\t\t\tstatus = searchJob.execute(progress == null ? null : SubMonitor.convert(progress, concurrentJobWork));"]}], "num": 10941}
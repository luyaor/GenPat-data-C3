{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a777f94bc883c2d2508f7c38f5f1669f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6867ccd3f3df7f439b3215231932035", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1946967a9e32c7d85b297d2bebdf975f6bbc96fc", "commitAfterChange": "c9b1852bced374fe00589e40f571193dbce71507", "methodNumberBeforeChange": 1146, "methodNumberAfterChange": 1146, "signatureBeforeChange": " public void test1119()", "signatureAfterChange": " public void test1119()", "diff": ["+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=169728", "+\t\t\t\"\t\tX<ComparableRunnableThrowable> x4 = null; // ok\\n\" + ", "+\t\t\t\"\t\t\\n\" + ", "+\t\t\t\"\t\tfoo1(x1); // ok\\n\" + ", "+\t\t\t\"\t\tfoo1(x2); // ok\\n\" + ", "+\t\t\t\"\t\tfoo1(x3); // ok\\n\" + ", "+\t\t\t\"\t\tfoo1(x4); // ok\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\t\tfoo2(x1); // error\\n\" + ", "+\t\t\t\"\t\tfoo2(x2); // error\\n\" + ", "+\t\t\t\"\t\tfoo2(x3); // error\\n\" + ", "+\t\t\t\"\t\tfoo2(x4); // ok\\n\" + ", "-\t\t\t\"\tvoid foo(X<?> x) {\\n\" + ", "-\t\t\t\"\t\tx.get().run();\\n\" + ", "-\t\t\t\"\t\tx.get().compareTo(null);\\n\" + ", "+\t\t\t\"\tstatic void foo1(X<?> x) {\\n\" + ", "+\t\t\t\"\t\tx.get().run(); // ok\\n\" + ", "+\t\t\t\"\t\tx.get().compareTo(null); // ok\\n\" + ", "+\t\t\t\"\tstatic void foo2(X<? extends Throwable> x) {\\n\" + ", "+\t\t\t\"\t\tx.get().run(); // ok\\n\" + ", "+\t\t\t\"\t\tx.get().compareTo(null); // ok\\n\" + ", "+\t\t\t\"\t\tx.get().compareTo(x.get()); // error\\n\" + ", "+\t\t\t\"\t}\t\\n\" + ", "-\t\t\t\"abstract class ComparableRunnable implements Comparable<ComparableRunnable>, Runnable {}\", // =================", "+\t\t\t\"abstract class ComparableRunnable implements Comparable<ComparableRunnable>, Runnable {}\\n\" + ", "+\t\t\t\"abstract class ComparableRunnableThrowable extends Throwable implements Comparable<ComparableRunnable>, Runnable {}\", // =================\t\t", "-\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"\tX<ComparableRunnableThrowable> x4 = null; // ok\\n\" + ", "+\t\t\"\t  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Bound mismatch: The type ComparableRunnableThrowable is not a valid substitute for the bounded parameter <T extends Comparable<T> & Runnable> of the type X<T>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\"\tfoo2(x1); // error\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"The method foo2(X<? extends Throwable>) in the type X<T> is not applicable for the arguments (X<OnlyRunnable>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\"\tfoo2(x2); // error\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"The method foo2(X<? extends Throwable>) in the type X<T> is not applicable for the arguments (X<OnlyComparable>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\"\tfoo2(x3); // error\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"The method foo2(X<? extends Throwable>) in the type X<T> is not applicable for the arguments (X<ComparableRunnable>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 26)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"8. ERROR in X.java (at line 31)\\n\" + ", "+\t\t\"\tx.get().compareTo(x.get()); // error\\n\" + ", "+\t\t\"\t        ^^^^^^^^^\\n\" + ", "+\t\t\"The method compareTo(capture#7-of ? extends Throwable) in the type Comparable<capture#7-of ? extends Throwable> is not applicable for the arguments (capture#8-of ? extends Throwable)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daf531d166e804bd721169a8151b9e07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": " public void test401939b()", "signatureAfterChange": " public void test401939b()", "diff": ["-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {\\n\" + ", "-\t\t\t\t\"  while (FALSE)    throw new Exception();\\n\" + ", "-\t\t\t\t\"})\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"This method must return a result of type String\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { while (FALSE) throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t                           ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Unreachable code\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 17)\\n\" + ", "-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {\\n\" + ", "-\t\t\t\t\"  while (POI)    throw new Exception();\\n\" + ", "-\t\t\t\t\"})\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"This method must return a result of type String\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { while (POI) throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Unreachable code\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { if (TRUE) throw new Exception(); else throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t                                                   ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Statement unnecessarily nested within else clause. The corresponding then clause does not complete normally\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 19)\\n\" + ", "-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {\\n\" + ", "-\t\t\t\t\"  if (TRUE)\\n\" + ", "-\t\t\t\t\"      throw new Exception();\\n\" + ", "-\t\t\t\t\"})\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"This method must return a result of type String\\n\" + ", "-\t\t\t\t\"4. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\t\t\"7. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { if (true) throw new Exception(); else throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t                                                   ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Statement unnecessarily nested within else clause. The corresponding then clause does not complete normally\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"8. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { if (true) throw new Exception(); else throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t                                                   ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Dead code\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"9. WARNING in X.java (at line 21)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { if (false) throw new Exception(); else throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t                        ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Dead code\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"10. WARNING in X.java (at line 21)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { if (false) throw new Exception(); else throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t                                                    ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Statement unnecessarily nested within else clause. The corresponding then clause does not complete normally\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"11. ERROR in X.java (at line 22)\\n\" + ", "-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {\\n\" + ", "-\t\t\t\t\"  while (BLANK)    throw new Exception();\\n\" + ", "-\t\t\t\t\"})\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"This method must return a result of type String\\n\" + "]}], "num": 66513}
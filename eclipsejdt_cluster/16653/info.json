{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eba5af72e60ad0f234b2911b87d424e8", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30ebc5f1b4d58a8e23f98d17040b9248", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "40ff73b7071407f455ce167883a827d5d0333258", "commitAfterChange": "20607cc9da90bd1294c224d1eff6327bec9954ac", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword)", "signatureAfterChange": " \tprivate void findKeywords(char[] keyword, char[][] choices, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword)", "diff": ["-\tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword) {", "+\tprivate void findKeywords(char[] keyword, char[][] choices, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword) {", "-", "-\t\tif (canCompleteEmptyToken || length > 0)", "-\t\t\tfor (int i = 0; i < choices.length; i++)", "-\t\t\t\tif (length <= choices[i].length", "-\t\t\t\t\t&& CharOperation.prefixEquals(keyword, choices[i], false /* ignore case */", "-\t\t\t\t)){", "-\t\t\t\t\tif (ignorePackageKeyword && CharOperation.equals(choices[i], Keywords.PACKAGE))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\trelevance += computeRelevanceForResolution();", "-\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\t\trelevance += computeRelevanceForCaseMatching(keyword, choices[i]);", "-\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "-\t\t\t\t\tif (staticFieldsAndMethodOnly && this.insideQualifiedReference) relevance += R_NON_INHERITED;", "+\t\tfor (int i = 0; i < choices.length; i++)", "+\t\t\tif (length <= choices[i].length", "+\t\t\t&& CharOperation.prefixEquals(keyword, choices[i], false /* ignore case */", "+\t\t\t\t\t)){", "+\t\t\t\tif (ignorePackageKeyword && CharOperation.equals(choices[i], Keywords.PACKAGE))", "+\t\t\t\t\tcontinue;", "+\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\trelevance += computeRelevanceForResolution();", "+\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\trelevance += computeRelevanceForCaseMatching(keyword, choices[i]);", "+\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "+\t\t\t\tif (staticFieldsAndMethodOnly && this.insideQualifiedReference) relevance += R_NON_INHERITED;", "-\t\t\t\t\tif(CharOperation.equals(choices[i], Keywords.TRUE) || CharOperation.equals(choices[i], Keywords.FALSE)) {", "-\t\t\t\t\t\trelevance += computeRelevanceForExpectingType(TypeBinding.BOOLEAN);", "-\t\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "-\t\t\t\t\t\tproposal.setName(choices[i]);", "-\t\t\t\t\t\tproposal.setCompletion(choices[i]);", "-\t\t\t\t\t\tproposal.setReplaceRange((canCompleteEmptyToken && (this.startPosition < 0)) ? 0 : this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setTokenRange((canCompleteEmptyToken && (this.tokenStart < 0)) ? 0 : this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t}", "+\t\t\t\tif(CharOperation.equals(choices[i], Keywords.TRUE) || CharOperation.equals(choices[i], Keywords.FALSE)) {", "+\t\t\t\t\trelevance += computeRelevanceForExpectingType(TypeBinding.BOOLEAN);", "+\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "+\t\t\t\t}", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setName(choices[i]);", "+\t\t\t\t\tproposal.setCompletion(choices[i]);", "+\t\t\t\t\tproposal.setReplaceRange((this.startPosition < 0) ? 0 : this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange((this.tokenStart < 0) ? 0 : this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe15f7cd5448ea04897504a9aea0912b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "40e5e462287b79ef847047a4bab6d5d9140df3cb", "commitAfterChange": "f9a29367ea8f3c4c9489072b937e0b301d28ae36", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " \tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword)", "signatureAfterChange": " \tprivate void findKeywords(char[] keyword, char[][] choices, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword)", "diff": ["-\tprivate void findKeywords(char[] keyword, char[][] choices, boolean canCompleteEmptyToken, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword) {", "+\tprivate void findKeywords(char[] keyword, char[][] choices, boolean staticFieldsAndMethodOnly, boolean ignorePackageKeyword) {", "-", "-\t\tif (canCompleteEmptyToken || length > 0)", "-\t\t\tfor (int i = 0; i < choices.length; i++)", "-\t\t\t\tif (length <= choices[i].length", "-\t\t\t\t\t&& CharOperation.prefixEquals(keyword, choices[i], false /* ignore case */", "-\t\t\t\t)){", "-\t\t\t\t\tif (ignorePackageKeyword && CharOperation.equals(choices[i], Keywords.PACKAGE))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\trelevance += computeRelevanceForResolution();", "-\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\t\trelevance += computeRelevanceForCaseMatching(keyword, choices[i]);", "-\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "-\t\t\t\t\tif (staticFieldsAndMethodOnly && this.insideQualifiedReference) relevance += R_NON_INHERITED;", "+\t\tfor (int i = 0; i < choices.length; i++)", "+\t\t\tif (length <= choices[i].length", "+\t\t\t&& CharOperation.prefixEquals(keyword, choices[i], false /* ignore case */", "+\t\t\t\t\t)){", "+\t\t\t\tif (ignorePackageKeyword && CharOperation.equals(choices[i], Keywords.PACKAGE))", "+\t\t\t\t\tcontinue;", "+\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\trelevance += computeRelevanceForResolution();", "+\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\trelevance += computeRelevanceForCaseMatching(keyword, choices[i]);", "+\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "+\t\t\t\tif (staticFieldsAndMethodOnly && this.insideQualifiedReference) relevance += R_NON_INHERITED;", "-\t\t\t\t\tif(CharOperation.equals(choices[i], Keywords.TRUE) || CharOperation.equals(choices[i], Keywords.FALSE)) {", "-\t\t\t\t\t\trelevance += computeRelevanceForExpectingType(TypeBinding.BOOLEAN);", "-\t\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "-\t\t\t\t\t\tproposal.setName(choices[i]);", "-\t\t\t\t\t\tproposal.setCompletion(choices[i]);", "-\t\t\t\t\t\tproposal.setReplaceRange((canCompleteEmptyToken && (this.startPosition < 0)) ? 0 : this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setTokenRange((canCompleteEmptyToken && (this.tokenStart < 0)) ? 0 : this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t}", "+\t\t\t\tif(CharOperation.equals(choices[i], Keywords.TRUE) || CharOperation.equals(choices[i], Keywords.FALSE)) {", "+\t\t\t\t\trelevance += computeRelevanceForExpectingType(TypeBinding.BOOLEAN);", "+\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "+\t\t\t\t}", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setName(choices[i]);", "+\t\t\t\t\tproposal.setCompletion(choices[i]);", "+\t\t\t\t\tproposal.setReplaceRange((this.startPosition < 0) ? 0 : this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange((this.tokenStart < 0) ? 0 : this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t}"]}], "num": 16653}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "503f346f6849e4e55af6413e69f0b065", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a5392b0896ab8b8fecc14c444c56669", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 76, "signatureBeforeChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "signatureAfterChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "diff": ["+", "+\t\tif (statement instanceof ForeachStatement) {", "+\t\t\treturn convert((ForeachStatement) statement);", "+\t\t}", "-\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration ", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration", "-\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(convert((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) statement));", "-\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "-\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\treturn typeDeclarationStatement;", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\treturn createFakeEmptyStatement(statement);", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(convert((org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration) statement));", "+\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "+\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "+\t\t\t\t\treturn typeDeclarationStatement;", "+\t\t\t}", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.EnumDeclaration", "+\t\t\t\t&& (statement.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsLocalTypeMASK) != 0) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\treturn createFakeEmptyStatement(statement);", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(convert((org.eclipse.jdt.internal.compiler.ast.EnumDeclaration) statement));", "+\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "+\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "+\t\t\t\t\treturn typeDeclarationStatement;", "+\t\t\t}", "+\t\t}\t\t", "-\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(convert((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) statement));", "-\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "-\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\treturn typeDeclarationStatement;", "+\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) convert((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) statement);", "+\t\t\tif (typeDeclaration == null) {", "+\t\t\t\treturn createFakeEmptyStatement(statement);", "+\t\t\t} else {", "+\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(typeDeclaration);", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.getTypeDeclaration();", "+\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tAbstractTypeDeclaration typeDeclAST3 = typeDeclarationStatement.getDeclaration();", "+\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDeclAST3.getStartPosition(), typeDeclAST3.getLength());\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\treturn typeDeclarationStatement;", "+\t\t\t}", "-\t\tthrow new IllegalArgumentException(\"Not yet implemented: convert(\" + statement.getClass() + \")\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\treturn createFakeEmptyStatement(statement);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe1619e0f74caca256b7032918b388b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 84, "signatureBeforeChange": "  \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration)", "signatureAfterChange": "  \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration)", "diff": ["-", "-\tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration) {", "-\t\tcheckCanceled();", "-\t\tTypeDeclaration typeDecl = this.ast.newTypeDeclaration();", "-\t\tint modifiers = typeDeclaration.modifiers;", "-\t\tmodifiers &= ~IConstants.AccInterface; // remove AccInterface flags", "-\t\tmodifiers &= CompilerModifiers.AccJustFlag;", "-\t\ttypeDecl.setModifiers(modifiers);", "-\t\ttypeDecl.setInterface(typeDeclaration.isInterface());", "-\t\tSimpleName typeName = this.ast.newSimpleName(new String(typeDeclaration.name));", "-\t\ttypeName.setSourceRange(typeDeclaration.sourceStart, typeDeclaration.sourceEnd - typeDeclaration.sourceStart + 1);", "-\t\ttypeDecl.setName(typeName);", "-\t\ttypeDecl.setSourceRange(typeDeclaration.declarationSourceStart, typeDeclaration.bodyEnd - typeDeclaration.declarationSourceStart + 1);", "-\t\t", "-\t\t// need to set the superclass and super interfaces here since we cannot distinguish them at", "-\t\t// the type references level.", "-\t\tif (typeDeclaration.superclass != null) {", "-\t\t\ttypeDecl.setSuperclass(convert(typeDeclaration.superclass));", "-\t\t}", "-\t\t", "-\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces = typeDeclaration.superInterfaces;", "-\t\tif (superInterfaces != null) {", "-\t\t\tfor (int index = 0, length = superInterfaces.length; index < length; index++) {", "-\t\t\t\ttypeDecl.superInterfaces().add(convert(superInterfaces[index]));", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tbuildBodyDeclarations(typeDeclaration, typeDecl);", "-\t\t// The javadoc comment is now got from list store in compilation unit declaration", "-//\t\tsetJavaDocComment(typeDecl);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(typeDecl, typeDeclaration);", "-\t\t\trecordNodes(typeName, typeDeclaration);", "-\t\t\ttypeDecl.resolveBinding();", "-\t\t}", "-\t\treturn typeDecl;", "-\t}", "+", "+\tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration) {", "+\t\tif (typeDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration) {", "+\t\t\tif (this.ast.apiLevel == AST.JLS2) {", "+\t\t\t\treturn null;", "+\t\t\t} else {", "+\t\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration) typeDeclaration);", "+\t\t\t}", "+\t\t}", "+\t\tif (typeDeclaration instanceof EnumConstant) {", "+\t\t\tif (this.ast.apiLevel == AST.JLS2) {", "+\t\t\t\treturn null;", "+\t\t\t} else {", "+\t\t\t\treturn convert((EnumConstant) typeDeclaration);", "+\t\t\t}", "+\t\t}", "+\t\tif (typeDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.EnumDeclaration) {", "+\t\t\tif (this.ast.apiLevel == AST.JLS2) {", "+\t\t\t\treturn null;", "+\t\t\t} else {", "+\t\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.EnumDeclaration) typeDeclaration);", "+\t\t\t}", "+\t\t}", "+\t\tcheckCanceled();", "+\t\tTypeDeclaration typeDecl = this.ast.newTypeDeclaration();", "+\t\tint modifiers = typeDeclaration.modifiers;", "+\t\tmodifiers &= ~IConstants.AccInterface; // remove AccInterface flags", "+\t\tmodifiers &= CompilerModifiers.AccJustFlag;", "+\t\tif (modifiers != 0) {", "+\t\t\tsetModifiers(typeDecl, typeDeclaration);", "+\t\t}", "+\t\ttypeDecl.setInterface(typeDeclaration.isInterface());", "+\t\tSimpleName typeName = this.ast.newSimpleName(new String(typeDeclaration.name));", "+\t\ttypeName.setSourceRange(typeDeclaration.sourceStart, typeDeclaration.sourceEnd - typeDeclaration.sourceStart + 1);", "+\t\ttypeDecl.setName(typeName);", "+\t\ttypeDecl.setSourceRange(typeDeclaration.declarationSourceStart, typeDeclaration.bodyEnd - typeDeclaration.declarationSourceStart + 1);", "+\t\t", "+\t\t// need to set the superclass and super interfaces here since we cannot distinguish them at", "+\t\t// the type references level.", "+\t\tif (typeDeclaration.superclass != null) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\ttypeDecl.setSuperclass(convert(typeDeclaration.superclass));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\ttypeDecl.setSuperclassType(convertType(typeDeclaration.superclass));", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces = typeDeclaration.superInterfaces;", "+\t\tif (superInterfaces != null) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tfor (int index = 0, length = superInterfaces.length; index < length; index++) {", "+\t\t\t\t\t\ttypeDecl.superInterfaces().add(convert(superInterfaces[index]));", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tfor (int index = 0, length = superInterfaces.length; index < length; index++) {", "+\t\t\t\t\t\ttypeDecl.superInterfaceTypes().add(convertType(superInterfaces[index]));", "+\t\t\t\t\t}", "+\t\t\t}\t\t\t\t\t", "+\t\t}", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = typeDeclaration.typeParameters;", "+\t\tif (typeParameters != null) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\ttypeDecl.setFlags(typeDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tfor (int index = 0, length = typeParameters.length; index < length; index++) {", "+\t\t\t\t\t\ttypeDecl.typeParameters().add(convert(typeParameters[index]));", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tbuildBodyDeclarations(typeDeclaration, typeDecl);", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(typeDecl, typeDeclaration);", "+\t\t\trecordNodes(typeName, typeDeclaration);", "+\t\t\ttypeDecl.resolveBinding();", "+\t\t}", "+\t\treturn typeDecl;", "+\t}"]}], "num": 14387}
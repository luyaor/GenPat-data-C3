{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af2ec6186ceb66a85279cd06d71b0e5a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4716011c0daf5e1ae8ed53568be2d3b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "a184055df3953fc7636d02b495d8ddad60f03a7d", "commitAfterChange": "6ec8b600d2528691e914df35d7ab6d321bfc7cb2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (closestMatch != null) this.binding = closestMatch;", "+\t\tif (closestMatch != null) {", "+\t\t\tthis.binding = closestMatch;", "+\t\t\tif (closestMatch.isPrivate() && !scope.isDefinedInMethod(closestMatch)) {", "+\t\t\t\t// ignore cases where method is used from within inside itself (e.g. direct recursions)", "+\t\t\t\tclosestMatch.modifiers |= AccPrivateUsed;", "+\t\t\t}", "+\t\t}", "+\t\treceiver.computeConversion(scope, receiverType, receiverType); // compute generic cast if necessary"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8fe5d31906803bb3ea0d86fdb3d07e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "86653d5c035aa51cca2173bb8c909d061953e701", "commitAfterChange": "e556f9da5ae6c442ae4aa18b3f85e0ca7f743a2a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tExpression reference, int checkType, FlowInfo flowInfo)", "diff": ["+\t\t\t} else if (this.upstreamNullFlowInfo.isDefinitelyNonNull(local) && !flowInfo.isPotentiallyNull(local)) {    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=291418", "+\t\t\t\tflowInfo.markAsDefinitelyNonNull(local);", "+\t\t\t\trecordNullReference(local, reference, checkType);"]}], "num": 57287}
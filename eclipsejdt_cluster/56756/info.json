{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "840294e2b9f606b4e04c89acda1124b1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "689236acfb2b085c50be5435ae684be2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTypeHierarchyTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testPerfAllTypes() throws CoreException", "signatureAfterChange": "  \tpublic void testPerfAllTypes() throws CoreException", "diff": ["-\t\tIType[] types = unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses();", "-\t\tint length = types.length;", "+\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "+\t\t\tIType[] types = unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses();", "+\t\t\tif (i==0) {", "+\t\t\t\tSystem.out.println(\"  - \"+INT_FORMAT.format(types.length)+\" all classes found in hierarchy.\");", "+\t\t\t}", "+\t\t}", "+\t\t\trunGc();", "-\t\t\tassertEquals(\"Unexpected classes number in hierarchy!\", length, unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses().length);", "+\t\t\tunit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses();", "-", "-\t\t// Print statistics", "-\t\tif (TESTS_COUNT == 0) {", "-\t\t\t// Print statistics", "-\t\t\tSystem.out.println(\"-------------------------------------\");", "-\t\t\tSystem.out.println(\"Type Hierarchy test statistics:\");", "-\t\t\tNumberFormat intFormat = NumberFormat.getIntegerInstance();", "-\t\t\tSystem.out.println(\"  - \"+intFormat.format(length)+\" all types found.\");", "-\t\t\tSystem.out.println(\"-------------------------------------\\n\");", "-\t\t}", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "803b28dc112d14b68d49d7a46c7a1e8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTypeHierarchyTests.java", "commitBeforeChange": "4a0a176fc1f5079a22fc4d3de624f4e4a375deea", "commitAfterChange": "6a18c2222a1285809e9dd75483f3998190af8138", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void testPerSuperTypes() throws CoreException", "signatureAfterChange": " \tpublic void testPerSuperTypes() throws CoreException", "diff": ["-\t\ttagAsSummary(\"Type hierarchy\", true); // put in fingerprint", "-\t\tICompilationUnit unit = getCompilationUnit(\"org.eclipse.jdt.core\", \"org.eclipse.jdt.internal.compiler.parser\", \"Parser.java\");", "-\t\tassertNotNull(\"Parser not found!\", unit);", "+\t\tassertNotNull(\"Parser not found!\", PARSER_WORKING_COPY);", "-\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "-\t\t\tIType[] types = unit.getType(\"Parser\").newSupertypeHierarchy(null).getAllClasses();", "+\t\tfor (int i=0; i<10*WARMUP_COUNT; i++) { // More Warm up is required.", "+\t\t\tIType[] types = PARSER_WORKING_COPY.getType(\"Parser\").newSupertypeHierarchy(null).getAllClasses();", "-\t\t\t\tSystem.out.println(\"  - \"+INT_FORMAT.format(types.length)+\" all classes found in hierarchy.\");", "+\t\t\t\tSystem.out.println(\"  - \"+INT_FORMAT.format(types.length)+\" classes found in hierarchy.\");", "-\t\t\tunit.getType(\"Parser\").newSupertypeHierarchy(null).getAllClasses();", "+\t\t\tfor (int j =0; j < 20; j++) {", "+\t\t\t\tPARSER_WORKING_COPY.getType(\"Parser\").newSupertypeHierarchy(null).getAllClasses();", "+\t\t\t}"]}], "num": 56756}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a55959cc45722b2d1a66e7d0ef08d69", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d6a69ca433fc2e78a707612c209b9ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test039()", "signatureAfterChange": " \tpublic void test039()", "diff": ["-\t\t\t\"     3  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     3  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     7  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 11] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 11] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 11] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 11] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21e59b027d15eb91449edfc6d7fc90b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 906, "methodNumberAfterChange": 906, "signatureBeforeChange": " public void test900()", "signatureAfterChange": " public void test900()", "diff": ["-\t\t\"1. WARNING in X.java (at line 11)\\r\\n\" + ", "-\t\t\"\t((Comparable<R>) new Implements()).toString();\\r\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\t((Comparable<R>) new Implements()).toString();\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 16)\\r\\n\" + ", "-\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\"\tZork z;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e75b835643d93a1f8e742a9a47c4a85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "40f8b37f10f9ab9fcfe2c27230d51f19f97f4e2e", "commitAfterChange": "cbbe8b69b29b99c8c679b98644156abe11f1564d", "methodNumberBeforeChange": 450, "methodNumberAfterChange": 450, "signatureBeforeChange": " \tpublic void test0446()", "signatureAfterChange": " \tpublic void test0446()", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=82159", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=82159 **", "-\t\t\t\t\"    //OK for javac and eclipse\\n\" + ", "+\t\t\t\t\"    // OK\\n\" + ", "-\t\t\t\t\"    //javac: error: \\'(\\' or \\'[\\' expected\\n\" + ", "+\t\t\t\t\"    //other: error: \\'(\\' or \\'[\\' expected\\n\" + ", "-\t\t\t\t\"    //javac: OK\\n\" + ", "+\t\t\t\t\"    //other: OK\\n\" + ", "-\t\t\t\t\"    //OK for javac and eclipse\\n\" + ", "+\t\t\t\t\"    // OK\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80cb6a9cf04422f475f38f78d5c9c4e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 449, "methodNumberAfterChange": 449, "signatureBeforeChange": " \tpublic void test445()", "signatureAfterChange": " \tpublic void test445()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tfinal T val = (T) getProperty(src, name); // this gives erroneous cast warning\\r\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tfinal T val = (T) getProperty(src, name); // this gives erroneous cast warning\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8515fcce2cbebee13a612aaf588419dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "7e90cfc843b0651b2df6811a5c412b5db3d07d3e", "commitAfterChange": "5aa22ef02c63418c06be6cd6a1ebf3ebbd649c6f", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "\r \tpublic void test0388085a()", "signatureAfterChange": "\r \tpublic void test0388085a()", "diff": ["-\t\t\t\t\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "-\t\t\t\t\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "-\t\t\t\t\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "-\t\t\t\t\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2d3570c717df70c281ca191c26d72c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void testBug118311() throws JavaModelException", "signatureAfterChange": " public void testBug118311() throws JavaModelException", "diff": ["-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a830175dd35e19e8c4f63147e9f62d38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void test018()", "signatureAfterChange": " \tpublic void test018()", "diff": ["-\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7c65fc9f31aac6116fe78881a8aa820", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void test0054()", "signatureAfterChange": " public void test0054()", "diff": ["-\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"      new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      new X[]{<CompleteOnName:zzz>};\\n\" + ", "-\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"    Object[] o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    Object[] o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efdad5099c25adfd7eaef6fa0a6764b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6e1daeed1b338c470552c705d4bce7d654dc9164", "commitAfterChange": "284c289846ff27fe8fc104da5e422fc3fb8c5d90", "methodNumberBeforeChange": 748, "methodNumberAfterChange": 748, "signatureBeforeChange": " public void test742()", "signatureAfterChange": " public void test742()", "diff": ["-\t\t\"Bound mismatch: The generic method makeSingletonList(T) of type X is not applicable for the arguments (X.SubType) since the type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method makeSingletonList(T) of type X is not applicable for the arguments (X.SubType). The inferred type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "-\t\t\"Bound mismatch: The generic method makeSingletonList(T) of type X is not applicable for the arguments (X.SubType) since the type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method makeSingletonList(T) of type X is not applicable for the arguments (X.SubType). The inferred type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "-\t\t\"Bound mismatch: The generic method makeSingletonList2(S) of type X is not applicable for the arguments (X.SubType) since the type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method makeSingletonList2(S) of type X is not applicable for the arguments (X.SubType). The inferred type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "-\t\t\"Bound mismatch: The generic method makeSingletonList2(S) of type X is not applicable for the arguments (X.SubType) since the type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method makeSingletonList2(S) of type X is not applicable for the arguments (X.SubType). The inferred type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + "]}], "num": 56983}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d13bc0a7d00c3f6ae5351b5d195684f3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af2592fb44399ac7df0b0d4ff49ff99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate boolean connectEnumSuperclass()", "signatureAfterChange": " \tprivate boolean connectEnumSuperclass()", "diff": ["-\t\tSourceTypeBinding sourceType = referenceContext.binding;", "+\t\tSourceTypeBinding sourceType = this.referenceContext.binding;", "-\t\t\tproblemReporter().nonGenericTypeCannotBeParameterized(null, rootEnumType, new TypeBinding[]{ sourceType });", "+\t\t\tproblemReporter().nonGenericTypeCannotBeParameterized(0, null, rootEnumType, new TypeBinding[]{ sourceType });", "-\t\tParameterizedTypeBinding  superType = environment().createParameterizedType(rootEnumType, new TypeBinding[]{ environment().convertToRawType(sourceType, false /*do not force conversion of enclosing types*/) } , null);", "+\t\tParameterizedTypeBinding  superType = environment().createParameterizedType(", "+\t\t\trootEnumType, ", "+\t\t\tnew TypeBinding[]{ ", "+\t\t\t\tenvironment().convertToRawType(sourceType, false /*do not force conversion of enclosing types*/), ", "+\t\t\t} , ", "+\t\t\tnull);", "+\t\tsourceType.tagBits |= (superType.tagBits & TagBits.HierarchyHasProblems); // propagate if missing supertpye"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50064f68faf84a8627e793a323c74870", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "8e43318d18f951ae3a3314bdbfe107991355bc65", "commitAfterChange": "6a28357528f11445ee351675b8133965f3b96037", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\t\t\tif (currentType.isGenericType()) {", "+\t\t\t\tReferenceBinding currentErasure = (ReferenceBinding)currentType.erasure();", "+\t\t\t\tif (currentErasure.isGenericType()) {", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType(currentErasure, null, qualifiedType));", "-\t   \t\t\t    qualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "+\t   \t\t\t    qualifiedType = scope.environment().createRawType(currentErasure, qualifiedType); // raw type", "-\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.environment().createParameterizedType(currentErasure, null, qualifiedType)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fc4b41685f26fca751def95dd6b262c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "65bc58d731b2b7495611004f31fbf68869bf0c34", "commitAfterChange": "a618dea008dd005a2062d94159d61d7900b021b7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t ParameterizedTypeBinding getParameterizedTypeBinding(ReferenceBinding genericType, ReferenceBinding enclosingType, CompilationUnitResolver resolver)", "signatureAfterChange": " \t ParameterizedTypeBinding getParameterizedTypeBinding(ReferenceBinding genericType, ReferenceBinding enclosingType)", "diff": ["-\t ParameterizedTypeBinding getParameterizedTypeBinding(ReferenceBinding genericType, ReferenceBinding enclosingType, CompilationUnitResolver resolver) {", "+\t ParameterizedTypeBinding getParameterizedTypeBinding(ReferenceBinding genericType, ReferenceBinding enclosingType) {", "-\t\t\tBinding argument = getCompilerBinding(resolver);", "+\t\t\tBinding argument = getCompilerBinding();", "-\t\t\t\treturn resolver.lookupEnvironment.createRawType(genericType, enclosingType);", "+\t\t\t\treturn this.environment.createRawType(genericType, enclosingType);", "-\t \tParameterizedTypeBinding parameterizedTypeBinding = resolver.lookupEnvironment.createParameterizedType(genericType, arguments, enclosingType);", "+\t \tParameterizedTypeBinding parameterizedTypeBinding = this.environment.createParameterizedType(genericType, arguments, enclosingType);", "-\t \t\treturn getParameterizedTypeBinding(memberType, parameterizedTypeBinding, resolver);", "+\t \t\treturn getParameterizedTypeBinding(memberType, parameterizedTypeBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "715f00a27ab08fe72b7bdea980764fcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "45342f8bb4f6d2ee4110ba3a5733c6f91b36b60e", "commitAfterChange": "ab8ca59a5dd4b7954a1bf4f4ac6d29a32841c241", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifyingType));", "+\t\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifyingType), i);", "-\t\t\t\t\tscope.problemReporter().incorrectArityForParameterizedType(this, currentType, argTypes);", "+\t\t\t\t\tscope.problemReporter().incorrectArityForParameterizedType(this, currentType, argTypes, i);", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType(currentOriginal, null, qualifyingType));", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType(currentOriginal, null, qualifyingType), i);", "-\t\t\t\treportDeprecatedType(qualifyingType, scope);", "+\t\t\t\treportDeprecatedType(qualifyingType, scope, i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88da5826ea68613a5186d3108381e980", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\tprivate TypeBinding internalResolveType(Scope scope) {", "+\tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds) {", "-\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType(currentType, null, qualifiedType));", "+\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentType, qualifiedType), argTypes);", "+\t\t\t\t\t\t\tthis, scope.environment().createRawType((ReferenceBinding)currentType.erasure(), qualifiedType), argTypes);", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, qualifiedType);", "-\t\t\t\t// check argument type compatibility now if not a class scope", "-\t\t\t\tif (!isClassScope) // otherwise will do it in Scope.connectTypeVariables()", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);", "+\t\t\t\t// check argument type compatibility", "+\t\t\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, qualifiedType));", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.createParameterizedType(currentType, null, qualifiedType)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d252986ca49b90d2107ece7bfd6ccd8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "53a88facba099a7ef05d98b75f25800af60438f8", "commitAfterChange": "086132dd6f6e6011785d8d9b469716062157a8c1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "+\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);", "+\t\t\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff45f348048f1474e803dedbff9511f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "0f27abdc440c19d22cca8de897116ef5e59c08c4", "commitAfterChange": "b1c884262e1cb2a37d9804b581d279b5a78777c8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\t\t\t", "-   \t\t\t    if (enclosingType != null && enclosingType.isParameterizedType()) {", "-\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, enclosingType));", "-\t\t\t\t\treturn null;", "+\t\t\t\tif (currentType.erasure().isGenericType()) {", "+\t   \t\t\t    if (enclosingType != null && enclosingType.isParameterizedType()) {", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, enclosingType));", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t   \t\t\t    this.resolvedType = scope.environment().createRawType(currentType, enclosingType); // raw type", "-   \t\t\t    this.resolvedType = scope.environment().createRawType(currentType, enclosingType); // raw type"]}], "num": 37888}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40bc71448bcf103cb1d5d54793036c56", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32199494acca381617d3cdc3501c8ffa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "bc9fb826fad258109fd282b013c3bd67797f6224", "commitAfterChange": "0bc9dd202c6e847a333047931c61d8acd765f32c", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "signatureAfterChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "diff": ["-\t// allow wildcard containment", "-\tcase Binding.WILDCARD_TYPE:", "-\tcase Binding.INTERSECTION_TYPE:", "+\t\t// allow wildcard containment", "+\t\tcase Binding.WILDCARD_TYPE:", "+\t\tcase Binding.INTERSECTION_TYPE:", "+\t\t\t", "+\t\t\tTypeBinding lowerBound = this;", "+\t\t\tTypeBinding upperBound = this;", "+\t\t\tswitch (this.kind()) {", "+\t\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\t\tcase Binding.INTERSECTION_TYPE:", "+\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "+\t\t\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\t\tif (wildcard.otherBounds != null) // intersection type", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tupperBound = wildcard.bound;", "+\t\t\t\t\t\t\tlowerBound = null;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\t\tupperBound = wildcard;", "+\t\t\t\t\t\t\tlowerBound = wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\t\t\tupperBound = wildcard;", "+\t\t\t\t\t\t\tlowerBound = null;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.TYPE_PARAMETER:", "+\t\t\t\t\tif (this.isCapture()) {", "+\t\t\t\t\t\tCaptureBinding capture = (CaptureBinding) this;", "+\t\t\t\t\t\tif (capture.lowerBound != null)", "+\t\t\t\t\t\t\tlowerBound = capture.lowerBound;", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\t\tif (otherWildcard.otherBounds != null)", "+\t\t\t\treturn false; // not a true wildcard (intersection type)", "+\t\t\tTypeBinding otherBound = otherWildcard.bound;", "+\t\t\tswitch (otherWildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\tif (otherBound == this)", "+\t\t\t\t\t\treturn true; // ? extends T  <=  ? extends ? extends T", "+\t\t\t\t\tif (upperBound == null)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\tTypeBinding match = upperBound.findSuperTypeOriginatingFrom(otherBound);", "+\t\t\t\t\tif (match != null && (match = match.leafComponentType()).isRawType()) {", "+\t\t\t\t\t\treturn match == otherBound.leafComponentType(); // forbide: Collection <=  ? extends Collection<?>", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// forbide: Collection[] <=  ? extends Collection<?>[]", "+\t\t\t\t\t}", "+\t\t\t\t\treturn upperBound.isCompatibleWith(otherBound);", "-\t\tTypeBinding lowerBound = this;", "-\t\tTypeBinding upperBound = this;", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\tif (otherBound == this)", "+\t\t\t\t\t\treturn true; // ? super T  <=  ? super ? super T", "+\t\t\t\t\tif (lowerBound == null)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\tmatch = otherBound.findSuperTypeOriginatingFrom(lowerBound);", "+\t\t\t\t\tif (match != null && (match = match.leafComponentType()).isRawType()) {", "+\t\t\t\t\t\treturn match == lowerBound.leafComponentType(); // forbide: Collection <=  ? super Collection<?>", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// forbide: Collection[] <=  ? super Collection<?>[]", "+\t\t\t\t\t}", "+\t\t\t\t\treturn otherBound.isCompatibleWith(lowerBound);", "+\t\t", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\t// allow List<?> to match List<? extends Object> (and reciprocally)", "+\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\tif (!this.isParameterizedType())", "+\t\t\t\treturn false;", "+\t\t\tParameterizedTypeBinding paramType = (ParameterizedTypeBinding) this;", "+\t\t\tParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t\t\tif (paramType.actualType() != otherParamType.actualType())", "+\t\t\t\treturn false;", "+\t\t\tif (!paramType.isStatic()) { // static member types do not compare their enclosing", "+\t\t\t\tReferenceBinding enclosing = enclosingType();", "+\t\t\t\tif (enclosing != null) {", "+\t\t\t\t\tReferenceBinding otherEnclosing = otherParamType\t.enclosingType();", "+\t\t\t\t\tif (otherEnclosing == null)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\tif ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {", "+\t\t\t\t\t\tif (enclosing != otherEnclosing)", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (!enclosing.isEquivalentTo(otherParamType.enclosingType()))", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint length = paramType.arguments == null ? 0 : paramType.arguments.length;", "+\t\t\tTypeBinding[] otherArguments = otherParamType.arguments;", "+\t\t\tint otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t\t\tif (otherLength != length)", "+\t\t\t\treturn false;", "+\t\t\tnextArgument: for (int i = 0; i < length; i++) {", "+\t\t\t\tTypeBinding argument = paramType.arguments[i];", "+\t\t\t\tTypeBinding otherArgument = otherArguments[i];", "+\t\t\t\tif (argument == otherArgument)", "+\t\t\t\t\tcontinue nextArgument;", "+\t\t\t\tint kind = argument.kind();", "+\t\t\t\tif (otherArgument.kind() != kind)", "+\t\t\t\t\treturn false;", "+\t\t\t\tswitch (kind) {", "+\t\t\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\t\t\t\tif (argument.isTypeArgumentContainedBy(otherArgument)) // recurse", "+\t\t\t\t\t\t\tcontinue nextArgument;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\t\t\tcase Binding.INTERSECTION_TYPE:", "+\t\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) argument;", "+\t\t\t\t\t\totherWildcard = (WildcardBinding) otherArgument;", "+\t\t\t\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\t\t// match \"? extends <upperBound>\" with \"?\"", "+\t\t\t\t\t\t\tif (otherWildcard.boundKind == Wildcard.UNBOUND", "+\t\t\t\t\t\t\t\t\t&& wildcard.bound == wildcard.typeVariable().upperBound())", "+\t\t\t\t\t\t\t\tcontinue nextArgument;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\t\t\t// match \"?\" with \"? extends <upperBound>\"", "+\t\t\t\t\t\t\tif (otherWildcard.boundKind == Wildcard.EXTENDS", "+\t\t\t\t\t\t\t\t\t&& otherWildcard.bound == otherWildcard.typeVariable().upperBound())", "+\t\t\t\t\t\t\t\tcontinue nextArgument;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\treturn true;", "+\t}", "+\t// (? super Object) <= Object", "+\tif (otherType.id == TypeIds.T_JavaLangObject) {", "-\t\t\tcase Binding.INTERSECTION_TYPE:", "-\t\t\t\tswitch (wildcard.boundKind) {", "-\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\tif (wildcard.otherBounds != null) // intersection type", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tupperBound = wildcard.bound;", "-\t\t\t\t\tlowerBound = null;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\tupperBound = wildcard;", "-\t\t\t\t\tlowerBound = wildcard.bound;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\t\tupperBound = wildcard;", "-\t\t\t\t\tlowerBound = null;", "+\t\t\t\tif (wildcard.boundKind == Wildcard.SUPER && wildcard.bound.id == TypeIds.T_JavaLangObject) {", "+\t\t\t\t\treturn true;", "-\t\t\tcase Binding.TYPE_PARAMETER:", "-\t\t\t\tif (this.isCapture()) {", "-\t\t\t\t\tCaptureBinding capture = (CaptureBinding) this;", "-\t\t\t\t\tif (capture.lowerBound != null)", "-\t\t\t\t\t\tlowerBound = capture.lowerBound;", "-\t\t\t\t}", "-\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "-\t\tif (otherWildcard.otherBounds != null)", "-\t\t\treturn false; // not a true wildcard (intersection type)", "-\t\tTypeBinding otherBound = otherWildcard.bound;", "-\t\tswitch (otherWildcard.boundKind) {", "-\t\tcase Wildcard.EXTENDS:", "-\t\t\tif (otherBound == this)", "-\t\t\t\treturn true; // ? extends T  <=  ? extends ? extends T", "-\t\t\tif (upperBound == null)", "-\t\t\t\treturn false;", "-\t\t\tTypeBinding match = upperBound.findSuperTypeOriginatingFrom(otherBound);", "-\t\t\tif (match != null && (match = match.leafComponentType()).isRawType()) {", "-\t\t\t\treturn match == otherBound.leafComponentType(); // forbide: Collection <=  ? extends Collection<?>", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// forbide: Collection[] <=  ? extends Collection<?>[]", "-\t\t\t}", "-\t\t\treturn upperBound.isCompatibleWith(otherBound);", "-", "-\t\tcase Wildcard.SUPER:", "-\t\t\tif (otherBound == this)", "-\t\t\t\treturn true; // ? super T  <=  ? super ? super T", "-\t\t\tif (lowerBound == null)", "-\t\t\t\treturn false;", "-\t\t\tmatch = otherBound.findSuperTypeOriginatingFrom(lowerBound);", "-\t\t\tif (match != null && (match = match.leafComponentType()).isRawType()) {", "-\t\t\t\treturn match == lowerBound.leafComponentType(); // forbide: Collection <=  ? super Collection<?>", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// forbide: Collection[] <=  ? super Collection<?>[]", "-\t\t\t}", "-\t\t\treturn otherBound.isCompatibleWith(lowerBound);", "-", "-\t\tcase Wildcard.UNBOUND:", "-\t\tdefault:", "-\t\t\treturn true;", "-\t\t}", "-\t\t// allow List<?> to match List<? extends Object> (and reciprocally)", "-\tcase Binding.PARAMETERIZED_TYPE:", "-\t\tif (!this.isParameterizedType())", "-\t\t\treturn false;", "-\t\tParameterizedTypeBinding paramType = (ParameterizedTypeBinding) this;", "-\t\tParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "-\t\tif (paramType.actualType() != otherParamType.actualType())", "-\t\t\treturn false;", "-\t\tif (!paramType.isStatic()) { // static member types do not compare their enclosing", "-\t\t\tReferenceBinding enclosing = enclosingType();", "-\t\t\tif (enclosing != null) {", "-\t\t\t\tReferenceBinding otherEnclosing = otherParamType\t.enclosingType();", "-\t\t\t\tif (otherEnclosing == null)", "-\t\t\t\t\treturn false;", "-\t\t\t\tif ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {", "-\t\t\t\t\tif (enclosing != otherEnclosing)", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (!enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tint length = paramType.arguments == null ? 0 : paramType.arguments.length;", "-\t\tTypeBinding[] otherArguments = otherParamType.arguments;", "-\t\tint otherLength = otherArguments == null ? 0 : otherArguments.length;", "-\t\tif (otherLength != length)", "-\t\t\treturn false;", "-\t\tnextArgument: for (int i = 0; i < length; i++) {", "-\t\t\tTypeBinding argument = paramType.arguments[i];", "-\t\t\tTypeBinding otherArgument = otherArguments[i];", "-\t\t\tif (argument == otherArgument)", "-\t\t\t\tcontinue nextArgument;", "-\t\t\tint kind = argument.kind();", "-\t\t\tif (otherArgument.kind() != kind)", "-\t\t\t\treturn false;", "-\t\t\tswitch (kind) {", "-\t\t\tcase Binding.PARAMETERIZED_TYPE:", "-\t\t\t\tif (argument.isTypeArgumentContainedBy(otherArgument)) // recurse", "-\t\t\t\t\tcontinue nextArgument;", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.WILDCARD_TYPE:", "-\t\t\tcase Binding.INTERSECTION_TYPE:", "-\t\t\t\tWildcardBinding wildcard = (WildcardBinding) argument;", "-\t\t\t\totherWildcard = (WildcardBinding) otherArgument;", "-\t\t\t\tswitch (wildcard.boundKind) {", "-\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\t// match \"? extends <upperBound>\" with \"?\"", "-\t\t\t\t\tif (otherWildcard.boundKind == Wildcard.UNBOUND", "-\t\t\t\t\t\t\t&& wildcard.bound == wildcard.typeVariable().upperBound())", "-\t\t\t\t\t\tcontinue nextArgument;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\t\t// match \"?\" with \"? extends <upperBound>\"", "-\t\t\t\t\tif (otherWildcard.boundKind == Wildcard.EXTENDS", "-\t\t\t\t\t\t\t&& otherWildcard.bound == otherWildcard.typeVariable().upperBound())", "-\t\t\t\t\t\tcontinue nextArgument;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t}", "-\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd717841ea5cd22fe980136283e91d92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "signatureAfterChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "diff": ["-\tswitch(otherType.kind()) {", "-\t\t// allow wildcard containment", "-\t\tcase Binding.WILDCARD_TYPE :", "-\t\t\tTypeBinding lowerBound = this;", "-\t\t\tTypeBinding upperBound = this;", "-\t\t\tswitch (this.kind()) {", "-\t\t\t\tcase Binding.WILDCARD_TYPE :", "-\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "-\t\t\t\t\tswitch(wildcard.boundKind) {", "-\t\t\t\t\t\tcase Wildcard.EXTENDS :", "-\t\t\t\t\t\t\tif (wildcard.otherBounds != null) // intersection type", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tupperBound = wildcard.bound;", "-\t\t\t\t\t\t\tlowerBound = null;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase Wildcard. SUPER :", "-\t\t\t\t\t\t\tupperBound = wildcard;", "-\t\t\t\t\t\t\tlowerBound = wildcard.bound;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase Wildcard.UNBOUND :", "-\t\t\t\t\t\t\tupperBound = wildcard;", "-\t\t\t\t\t\t\tlowerBound = null;", "-\t\t\t\t\t}", "+\tswitch (otherType.kind()) {", "+\t// allow wildcard containment", "+\tcase Binding.WILDCARD_TYPE:", "+\t\tTypeBinding lowerBound = this;", "+\t\tTypeBinding upperBound = this;", "+\t\tswitch (this.kind()) {", "+\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "+\t\t\tswitch (wildcard.boundKind) {", "+\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\tif (wildcard.otherBounds != null) // intersection type", "-\t\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\t\tif (this.isCapture()) {", "-\t\t\t\t\t\tCaptureBinding capture = (CaptureBinding) this;", "-\t\t\t\t\t\tif (capture.lowerBound != null) lowerBound = capture.lowerBound;", "-\t\t\t\t\t}", "+\t\t\t\tupperBound = wildcard.bound;", "+\t\t\t\tlowerBound = null;", "+\t\t\t\tbreak;", "+\t\t\tcase Wildcard.SUPER:", "+\t\t\t\tupperBound = wildcard;", "+\t\t\t\tlowerBound = wildcard.bound;", "+\t\t\t\tbreak;", "+\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\tupperBound = wildcard;", "+\t\t\t\tlowerBound = null;", "-\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "-\t\t\tif (otherWildcard.otherBounds != null) return false; // not a true wildcard (intersection type)", "-\t\t\tswitch(otherWildcard.boundKind) {", "-\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\tif (otherWildcard.bound == this) return true; // ? extends T  <=  ? extends ? extends T", "-\t\t\t\t\treturn upperBound != null && upperBound.isCompatibleWith(otherWildcard.bound);", "-\t", "-\t\t\t\tcase Wildcard.SUPER :", "-\t\t\t\t\tif (otherWildcard.bound == this) return true; // ? super T  <=  ? super ? super T", "-\t\t\t\t\treturn lowerBound != null && otherWildcard.bound.isCompatibleWith(lowerBound);", "-\t", "-\t\t\t\tcase Wildcard.UNBOUND :", "-\t\t\t\tdefault:", "-\t\t\t\t\treturn true;", "+\t\t\tbreak;", "+\t\tcase Binding.TYPE_PARAMETER:", "+\t\t\tif (this.isCapture()) {", "+\t\t\t\tCaptureBinding capture = (CaptureBinding) this;", "+\t\t\t\tif (capture.lowerBound != null)", "+\t\t\t\t\tlowerBound = capture.lowerBound;", "+\t\t}", "+\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\tif (otherWildcard.otherBounds != null)", "+\t\t\treturn false; // not a true wildcard (intersection type)", "+\t\tTypeBinding otherBound = otherWildcard.bound;", "+\t\tswitch (otherWildcard.boundKind) {", "+\t\tcase Wildcard.EXTENDS:", "+\t\t\tif (otherBound == this)", "+\t\t\t\treturn true; // ? extends T  <=  ? extends ? extends T", "+\t\t\tif (upperBound == null)", "+\t\t\t\treturn false;", "+\t\t\tTypeBinding match = upperBound.findSuperTypeWithSameErasure(otherBound);", "+\t\t\tif (match != null && (match = match.leafComponentType()).isRawType()) {", "+\t\t\t\treturn match == otherBound.leafComponentType(); // forbide: Collection <=  ? extends Collection<?>", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// forbide: Collection[] <=  ? extends Collection<?>[]", "+\t\t\t}", "+\t\t\treturn upperBound.isCompatibleWith(otherBound);", "+", "+\t\tcase Wildcard.SUPER:", "+\t\t\tif (otherBound == this)", "+\t\t\t\treturn true; // ? super T  <=  ? super ? super T", "+\t\t\tif (lowerBound == null)", "+\t\t\t\treturn false;", "+\t\t\tmatch = otherBound.findSuperTypeWithSameErasure(lowerBound);", "+\t\t\tif (match != null && (match = match.leafComponentType()).isRawType()) {", "+\t\t\t\treturn match == lowerBound.leafComponentType(); // forbide: Collection <=  ? super Collection<?>", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// forbide: Collection[] <=  ? super Collection<?>[]", "+\t\t\t}", "+\t\t\treturn otherBound.isCompatibleWith(lowerBound);", "+", "+\t\tcase Wildcard.UNBOUND:", "+\t\tdefault:", "+\t\t\treturn true;", "+\t\t}", "-\t\tcase Binding.PARAMETERIZED_TYPE :", "-\t\t\tif (!this.isParameterizedType()) return false;", "-\t\t\tParameterizedTypeBinding paramType = (ParameterizedTypeBinding) this;", "-            ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "-            if (paramType.type != otherParamType.type) ", "-                return false;", "-            if (!paramType.isStatic()) { // static member types do not compare their enclosing", "-            \tReferenceBinding enclosing = enclosingType();", "-            \tif (enclosing != null) {", "-            \t\tReferenceBinding otherEnclosing = otherParamType.enclosingType();", "-            \t\tif (otherEnclosing == null) return false;", "-            \t\tif ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {", "-\t\t\t\t\t\tif (enclosing != otherEnclosing) return false;", "-            \t\t} else {", "-            \t\t\tif (!enclosing.isEquivalentTo(otherParamType.enclosingType())) return false;", "-            \t\t}", "-            \t}", "-            }", "-            int length = paramType.arguments == null ? 0 : paramType.arguments.length;", "-            TypeBinding[] otherArguments = otherParamType.arguments;", "-            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "-            if (otherLength != length) ", "-                return false;", "-            nextArgument: for (int i = 0; i < length; i++) {", "-            \tTypeBinding argument = paramType.arguments[i];", "-            \tTypeBinding otherArgument = otherArguments[i];", "-            \tif (argument == otherArgument) ", "-            \t\tcontinue nextArgument;", "-            \tint kind = argument.kind();", "-            \tif (otherArgument.kind() != kind)", "-            \t\treturn false;", "-           \t\tswitch(kind) {", "-        \t\t\tcase Binding.PARAMETERIZED_TYPE :", "-        \t\t\t\tif (argument.isTypeArgumentContainedBy(otherArgument)) // recurse", "-\t        \t\t\t\tcontinue nextArgument;", "-        \t\t\t\tbreak;", "-        \t\t\tcase Binding.WILDCARD_TYPE :", "-        \t\t\t\tWildcardBinding wildcard = (WildcardBinding) argument;", "-        \t\t\t\totherWildcard = (WildcardBinding) otherArgument;", "-        \t\t\t\tswitch (wildcard.boundKind) {", "-        \t\t\t\t\tcase Wildcard.EXTENDS :", "-        \t\t\t\t\t\t// match \"? extends <upperBound>\" with \"?\"", "-        \t\t\t\t\t\tif (otherWildcard.boundKind == Wildcard.UNBOUND && wildcard.bound == wildcard.typeVariable().upperBound())", "-        \t\t\t\t\t\t\tcontinue nextArgument; ", "-        \t\t\t\t\t\tbreak;", "-        \t\t\t\t\tcase Wildcard.SUPER :", "-        \t\t\t\t\t\tbreak;", "-        \t\t\t\t\tcase Wildcard.UNBOUND :", "-        \t\t\t\t\t\t// match \"?\" with \"? extends <upperBound>\"", "-        \t\t\t\t\t\tif (otherWildcard.boundKind == Wildcard.EXTENDS && otherWildcard.bound == otherWildcard.typeVariable().upperBound())", "-        \t\t\t\t\t\t\tcontinue nextArgument; ", "-        \t\t\t\t\t\tbreak;", "-        \t\t\t\t}", "-        \t\t\t\tbreak;", "-           \t\t}", "-           \t\treturn false;", "-            }", "-            return true;", "+\tcase Binding.PARAMETERIZED_TYPE:", "+\t\tif (!this.isParameterizedType())", "+\t\t\treturn false;", "+\t\tParameterizedTypeBinding paramType = (ParameterizedTypeBinding) this;", "+\t\tParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t\tif (paramType.type != otherParamType.type)", "+\t\t\treturn false;", "+\t\tif (!paramType.isStatic()) { // static member types do not compare their enclosing", "+\t\t\tReferenceBinding enclosing = enclosingType();", "+\t\t\tif (enclosing != null) {", "+\t\t\t\tReferenceBinding otherEnclosing = otherParamType", "+\t\t\t\t\t\t.enclosingType();", "+\t\t\t\tif (otherEnclosing == null)", "+\t\t\t\t\treturn false;", "+\t\t\t\tif ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {", "+\t\t\t\t\tif (enclosing != otherEnclosing)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (!enclosing.isEquivalentTo(otherParamType", "+\t\t\t\t\t\t\t.enclosingType()))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tint length = paramType.arguments == null ? 0", "+\t\t\t\t: paramType.arguments.length;", "+\t\tTypeBinding[] otherArguments = otherParamType.arguments;", "+\t\tint otherLength = otherArguments == null ? 0", "+\t\t\t\t: otherArguments.length;", "+\t\tif (otherLength != length)", "+\t\t\treturn false;", "+\t\tnextArgument: for (int i = 0; i < length; i++) {", "+\t\t\tTypeBinding argument = paramType.arguments[i];", "+\t\t\tTypeBinding otherArgument = otherArguments[i];", "+\t\t\tif (argument == otherArgument)", "+\t\t\t\tcontinue nextArgument;", "+\t\t\tint kind = argument.kind();", "+\t\t\tif (otherArgument.kind() != kind)", "+\t\t\t\treturn false;", "+\t\t\tswitch (kind) {", "+\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\t\tif (argument.isTypeArgumentContainedBy(otherArgument)) // recurse", "+\t\t\t\t\tcontinue nextArgument;", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\t\tWildcardBinding wildcard = (WildcardBinding) argument;", "+\t\t\t\totherWildcard = (WildcardBinding) otherArgument;", "+\t\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t// match \"? extends <upperBound>\" with \"?\"", "+\t\t\t\t\tif (otherWildcard.boundKind == Wildcard.UNBOUND", "+\t\t\t\t\t\t\t&& wildcard.bound == wildcard.typeVariable()", "+\t\t\t\t\t\t\t\t\t.upperBound())", "+\t\t\t\t\t\tcontinue nextArgument;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\t// match \"?\" with \"? extends <upperBound>\"", "+\t\t\t\t\tif (otherWildcard.boundKind == Wildcard.EXTENDS", "+\t\t\t\t\t\t\t&& otherWildcard.bound == otherWildcard", "+\t\t\t\t\t\t\t\t\t.typeVariable().upperBound())", "+\t\t\t\t\t\tcontinue nextArgument;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\treturn false;", "+\t\t}", "+\t\treturn true;"]}], "num": 38121}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d0a49ac37056a5702fcd22c444fb185", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d7e124615f5c86a23624762fa6d94a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\tif (this.binding != null ", "-\t\t\t\t&& (this.binding.tagBits & TagBits.AnnotationOverride) != 0", "-\t\t\t\t&& (this.binding.modifiers & AccOverriding) == 0) {", "-\t\t\tscope.problemReporter().methodMustOverride(this);", "+\t\tif (this.binding != null) {", "+\t\t\t// claims to override, and doesn't actually do so", "+\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) != 0 && (this.binding.modifiers & AccOverriding) == 0) {", "+\t\t\t\tscope.problemReporter().methodMustOverride(this);", "+\t\t\t}", "+\t\t\t// actually overrides, but did not claim to do so", "+\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) == 0 ", "+\t\t\t\t\t&& (this.binding.modifiers & AccOverriding) != 0", "+\t\t\t\t\t&& scope.environment().options.sourceLevel >= JDK1_5) {", "+\t\t\t\tscope.problemReporter().missingOverrideAnnotation(this);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcb22b5c736a8742e39a4fbeef2843f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t// check for assignment with no effect", "-\t\t\tif (this.binding == Assignment.getDirectBinding(this.initialization)) {", "-\t\t\t\tscope.problemReporter().assignmentHasNoEffect(this, this.name);", "-\t\t\t}", "-\t\t\t// change the constant in the binding when it is final", "-\t\t\t// (the optimization of the constant propagation will be done later on)", "-\t\t\t// cast from constant actual type to variable type", "+\t\t\t\t// check for assignment with no effect", "+\t\t\t\tif (this.binding == Assignment.getDirectBinding(this.initialization)) {", "+\t\t\t\t\tscope.problemReporter().assignmentHasNoEffect(this, this.name);", "+\t\t\t\t}", "+\t\t\t\t// change the constant in the binding when it is final", "+\t\t\t\t// (the optimization of the constant propagation will be done later on)", "+\t\t\t\t// cast from constant actual type to variable type"]}], "num": 60977}
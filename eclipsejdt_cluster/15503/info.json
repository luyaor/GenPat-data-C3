{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f8ef7b6eb5ee10cd64478368d1c93a4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e6fcee96f1985d07fd4652b1c14a9f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\tthis.javadocTokensBuffer.setLength(0);", "-\t    \t\tint tokensBufferLength = tokensBuffer.length();", "+\t    \t\tint tokensBufferLength = this.javadocTokensBuffer.length();", "-\t\t\t\tString tokensBufferString = tokensBuffer.toString().trim();", "+\t\t\t\tString tokensBufferString = this.javadocTokensBuffer.toString().trim();", "-\t\t\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "-\t\t\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t    \tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t\t    \t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t\t\t\tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t\t\t\t\tthis.tempBuffer.append(this.commentIndentation);", "-\t\t\t\t\t\t    \t\tnewLineString = newLineBuffer.toString();", "+\t\t\t\t\t\t    \t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\t\t\tbuffer.append(this.javadocTokensBuffer);", "-\t\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\t\tthis.javadocTokensBuffer.setLength(0);", "-\t\t\t\t\t&& token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || tokensBuffer.charAt(tokensBufferLength-1) != '@'); // avoid to split just before a '@'", "+\t\t\t\t\t&& token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || this.javadocTokensBuffer.charAt(tokensBufferLength-1) != '@'); // avoid to split just before a '@'", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tbuffer.append(this.javadocTokensBuffer);", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tthis.javadocTokensBuffer.setLength(0);", "-\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "-\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "-\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t    \tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t    \t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t\tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t\t\tthis.tempBuffer.append(this.commentIndentation);", "-\t\t\t\t    \t\tnewLineString = newLineBuffer.toString();", "+\t\t\t\t    \t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tthis.javadocTokensBuffer.setLength(0);", "-\t\t    \t\t\ttokensBuffer.append(' ');", "+\t\t    \t\t\tthis.javadocTokensBuffer.append(' ');", "-\t\t\t\t\ttokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\t\tthis.javadocTokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\tif (tokensBuffer.length() > 0) {", "-\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\tif (this.javadocTokensBuffer.length() > 0) {", "+\t\t\t\tbuffer.append(this.javadocTokensBuffer);", "+\t\t\t\tthis.column += this.javadocTokensBuffer.length();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9d195dd5368a6ef357ad1eab3d52897", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tprivate void printCodeSnippet(int startPosition, int endPosition, int linesGap)", "signatureAfterChange": " \tprivate void printCodeSnippet(int startPosition, int endPosition, int linesGap)", "diff": ["-\t\tStringBuffer inputBuffer= new StringBuffer();", "+\t\tthis.codeSnippetBuffer.setLength(0);", "-\t\t\tinputBuffer.append(snippet);", "+\t\t\tthis.codeSnippetBuffer.append(snippet);", "-\t\t\t\tinputBuffer.append(this.scanner.source, startPosition, this.lineEnds[firstLine]+1-startPosition);", "+\t\t\t\tthis.codeSnippetBuffer.append(this.scanner.source, startPosition, this.lineEnds[firstLine]+1-startPosition);", "-\t\t\tint initialLength = inputBuffer.length();", "+\t\t\tint initialLength = this.codeSnippetBuffer.length();", "-\t\t\t\t\t\t\t\t\t\tinputBuffer.setLength(initialLength);", "+\t\t\t\t\t\t\t\t\t\tthis.codeSnippetBuffer.setLength(initialLength);", "-\t\t\t\tinputBuffer.append(this.scanner.source, lineStart, end+1-lineStart);", "+\t\t\t\tthis.codeSnippetBuffer.append(this.scanner.source, lineStart, end+1-lineStart);", "-\t\tHTMLEntity2JavaReader reader= new HTMLEntity2JavaReader(new StringReader(inputBuffer.toString()));", "-\t\tchar[] buf= new char[inputBuffer.length()]; // html2text never gets longer, only shorter!", "+\t\tHTMLEntity2JavaReader reader= new HTMLEntity2JavaReader(new StringReader(this.codeSnippetBuffer.toString()));", "+\t\tchar[] buf= new char[this.codeSnippetBuffer.length()]; // html2text never gets longer, only shorter!", "-\t\t\tformattedSnippet = inputBuffer.toString();", "+\t\t\tformattedSnippet = this.codeSnippetBuffer.toString();", "-\t\t\tStringBuffer conversionBuffer= new StringBuffer();", "+\t\t\tthis.codeSnippetBuffer.setLength(0);", "-\t\t\t\t\t\tconversionBuffer.append(buf, 0, l);", "+\t\t\t\t\t\tthis.codeSnippetBuffer.append(buf, 0, l);", "-\t\t\t\tformattedSnippet = conversionBuffer.toString();", "+\t\t\t\tformattedSnippet = this.codeSnippetBuffer.toString();", "-\t\tStringBuffer outputBuffer = new StringBuffer();", "+\t\tthis.codeSnippetBuffer.setLength(0);", "-\t\tprintIndentationIfNecessary(outputBuffer); // append indentation", "-\t\toutputBuffer.append(BLOCK_LINE_PREFIX);", "-\t\tString linePrefix = outputBuffer.toString();", "-\t\toutputBuffer.setLength(0);", "+\t\tprintIndentationIfNecessary(this.codeSnippetBuffer); // append indentation", "+\t\tthis.codeSnippetBuffer.append(BLOCK_LINE_PREFIX);", "+\t\tString linePrefix = this.codeSnippetBuffer.toString();", "+\t\tthis.codeSnippetBuffer.setLength(0);", "-\t\t\t\tif (i>0) outputBuffer.append(linePrefix);", "+\t\t\t\tif (i>0) this.codeSnippetBuffer.append(linePrefix);", "-\t\t\t\t\toutputBuffer.append(formattedSnippet.substring(tracker.getLineOffset(i), lastLineOffset));", "+\t\t\t\t\tthis.codeSnippetBuffer.append(formattedSnippet.substring(tracker.getLineOffset(i), lastLineOffset));", "-\t\t\toutputBuffer.append(linePrefix);", "-\t\t\toutputBuffer.append(formattedSnippet.substring(lastLineOffset));", "-\t\t\treplacement = outputBuffer.toString();", "+\t\t\tthis.codeSnippetBuffer.append(linePrefix);", "+\t\t\tthis.codeSnippetBuffer.append(formattedSnippet.substring(lastLineOffset));", "+\t\t\treplacement = this.codeSnippetBuffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d079cfa9b678638226a87e69c492e5fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tprivate void printJavadocBlockReference(FormatJavadocBlock block, FormatJavadocReference reference)", "signatureAfterChange": "  \tprivate void printJavadocBlockReference(FormatJavadocBlock block, FormatJavadocReference reference)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tthis.javadocBlockRefBuffer.setLength(0);", "-\t\t\t\t\t\t\t\tspacePosition = buffer.length();", "+\t\t\t\t\t\t\t\tspacePosition = this.javadocBlockRefBuffer.length();", "-\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tthis.javadocBlockRefBuffer.append(' ');", "-\t\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "-\t\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t    \tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t    \t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t    \tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t\t    \tthis.tempBuffer.append(this.commentIndentation);", "-\t\t\t\t\t\t    \tnewLineString = newLineBuffer.substring(0, newLineBuffer.length()-1); // remove last space as buffer will be inserted before a space", "+\t\t\t\t\t\t    \tnewLineString = this.tempBuffer.substring(0, this.tempBuffer.length()-1); // remove last space as buffer will be inserted before a space", "-\t\t\t\t\t\t\tthis.column = firstColumn + buffer.length() - spacePosition - 1;", "-\t\t\t\t\t\t\tbuffer.insert(spacePosition, newLineString);", "+\t\t\t\t\t\t\tthis.column = firstColumn + this.javadocBlockRefBuffer.length() - spacePosition - 1;", "+\t\t\t\t\t\t\tthis.javadocBlockRefBuffer.insert(spacePosition, newLineString);", "-\t\t\t\t\t\tbuffer.append(this.scanner.source, this.scanner.startPosition, tokenLength);", "+\t\t\t\t\t\tthis.javadocBlockRefBuffer.append(this.scanner.source, this.scanner.startPosition, tokenLength);", "-\t\t    addReplaceEdit(block.tagEnd+1, reference.sourceEnd, buffer.toString());", "+\t\t    addReplaceEdit(block.tagEnd+1, reference.sourceEnd, this.javadocBlockRefBuffer.toString());"]}], "num": 15503}
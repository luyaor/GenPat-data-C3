{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed4a27029bcda21b382b11e4fc3e6437", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1368a251735d571174c6993ad4643739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "e60903fe9d1be9609e2d7018794b66ab39d77839", "commitAfterChange": "1cff9f79be5fd6fcc760af55214bca85f6dbdfe8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "signatureAfterChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "diff": ["-\t\t\t\tIPath outputLocation = entry.getOutputLocation() != null ", "+\t\t\t\tIPath outputPath = entry.getOutputLocation() != null ", "-\t\t\t\tIContainer outputFolder;", "-\t\t\t\tif (javaProject.getProject().getFullPath().equals(outputLocation)){", "-\t\t\t\t\toutputFolder = javaProject.getProject();", "-\t\t\t\t} else {", "-\t\t\t\t\toutputFolder = root.getFolder(outputLocation);", "-\t\t\t\t}", "+\t\t\t\tIContainer outputFolder = outputPath.segmentCount() == 1", "+\t\t\t\t\t? (IContainer) javaProject.getProject()", "+\t\t\t\t\t: (IContainer) root.getFolder(outputPath);", "-\t\t\t\t\t\tIPath prereqOutputLocation = e.getOutputLocation() != null ", "+\t\t\t\t\t\tIPath prereqOutputPath = e.getOutputLocation() != null ", "-\t\t\t\t\t\tIContainer binaryFolder;", "-\t\t\t\t\t\tif (prereqJavaProject.getProject().getFullPath().equals(prereqOutputLocation)){", "-\t\t\t\t\t\t\tbinaryFolder = prereqJavaProject.getProject();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tbinaryFolder = root.getFolder(prereqOutputLocation);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tIContainer binaryFolder = prereqOutputPath.segmentCount() == 1", "+\t\t\t\t\t\t\t? (IContainer) prereqProject", "+\t\t\t\t\t\t\t: (IContainer) root.getFolder(prereqOutputPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0b1c9127f88735113d8a4689aa457b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "66e12741e7e071e8d74aa6092f53c9f69e2104d4", "commitAfterChange": "e615c0d4b0a6a70779d285838aac0be87bb57945", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "signatureAfterChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "diff": ["-\t\t\t\tIContainer outputFolder = root.getFolder(", "-\t\t\t\t\tentry.getOutputLocation() != null ? entry.getOutputLocation() : javaProject.getOutputLocation());", "+\t\t\t\tIPath outputLocation = entry.getOutputLocation() != null ", "+\t\t\t\t\t? entry.getOutputLocation() ", "+\t\t\t\t\t: javaProject.getOutputLocation();", "+\t\t\t\tIContainer outputFolder;", "+\t\t\t\tif (javaProject.getProject().getFullPath().equals(outputLocation)){", "+\t\t\t\t\toutputFolder = javaProject.getProject();", "+\t\t\t\t} else {", "+\t\t\t\t\toutputFolder = root.getFolder(outputLocation);", "+\t\t\t\t}", "-\t\t\t\t\t\tIContainer binaryFolder = root.getFolder(", "-\t\t\t\t\t\t\te.getOutputLocation() != null ? e.getOutputLocation() : prereqJavaProject.getOutputLocation());", "+\t\t\t\t\t\tIPath prereqOutputLocation = e.getOutputLocation() != null ", "+\t\t\t\t\t\t\t? e.getOutputLocation() ", "+\t\t\t\t\t\t\t: prereqJavaProject.getOutputLocation();", "+\t\t\t\t\t\tIContainer binaryFolder;", "+\t\t\t\t\t\tif (prereqJavaProject.getProject().getFullPath().equals(prereqOutputLocation)){", "+\t\t\t\t\t\t\tbinaryFolder = prereqJavaProject.getProject();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tbinaryFolder = root.getFolder(prereqOutputLocation);", "+\t\t\t\t\t\t}"]}], "num": 49648}
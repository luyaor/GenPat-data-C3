{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "960cd00bbcef980e32850e54a006a981", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3321c4011a66c465a739470197d37b31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "1c1690d4a455cf673033c3f59d8b82154672a19c", "commitAfterChange": "23824f4fb168cc36c6c82db2559ffdc41eda2cfc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void checkExceptionHandlers(TypeBinding[] raisedExceptions, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": "  public void checkExceptionHandlers(TypeBinding[] raisedExceptions, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "diff": ["+\tArrayList abruptlyExitedLoops = null;", "+\t\t\t\t\t\t    if (abruptlyExitedLoops != null && state != Scope.NOT_RELATED) {", "+\t\t\t\t\t\t    \tfor (int i = 0, abruptlyExitedLoopsCount = abruptlyExitedLoops.size(); i < abruptlyExitedLoopsCount; i++) {", "+\t\t\t\t\t\t\t\t\tLoopingFlowContext loop = (LoopingFlowContext) abruptlyExitedLoops.get(i);", "+\t\t\t\t\t\t\t\t\tloop.recordCatchContextOfEscapingException(exceptionContext, caughtException);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+        } else if (traversedContext instanceof LoopingFlowContext) {", "+\t\t\tif (abruptlyExitedLoops == null) {", "+\t\t\t\tabruptlyExitedLoops = new ArrayList(5);", "+\t\t\t}", "+\t\t\tabruptlyExitedLoops.add(traversedContext);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f9f569ca56ef84535ad49381cbdd9e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "1c1690d4a455cf673033c3f59d8b82154672a19c", "commitAfterChange": "23824f4fb168cc36c6c82db2559ffdc41eda2cfc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": "  public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "diff": ["+\tArrayList abruptlyExitedLoops = null;", "+\t\t\t\t    if (abruptlyExitedLoops != null && state != Scope.NOT_RELATED) {", "+\t\t\t\t    \tfor (int i = 0, abruptlyExitedLoopsCount = abruptlyExitedLoops.size(); i < abruptlyExitedLoopsCount; i++) {", "+\t\t\t\t\t\t\tLoopingFlowContext loop = (LoopingFlowContext) abruptlyExitedLoops.get(i);", "+\t\t\t\t\t\t\tloop.recordCatchContextOfEscapingException(exceptionContext, caughtException);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t} else if (traversedContext instanceof LoopingFlowContext) {", "+\t\t\tif (abruptlyExitedLoops == null) {", "+\t\t\t\tabruptlyExitedLoops = new ArrayList(5);", "+\t\t\t}", "+\t\t\tabruptlyExitedLoops.add(traversedContext);"]}], "num": 35783}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87842818d88aacac1536efc335f660e9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073942cfb7b27a51e5fee3eb4c728d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "88071a18de8125978b5d3303668846dde79db410", "commitAfterChange": "37ef962b78fbc30ac28041498d0fd35e1634577e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": " public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\tString fullDeclaringName = field.getDeclaringType().getFullyQualifiedName().replace('$', '.');", "-\t\t\tlastDot = fullDeclaringName.lastIndexOf('.');", "-\t\t\tchar[] declaringSimpleName = (lastDot != -1 ? fullDeclaringName.substring(lastDot + 1) : fullDeclaringName).toCharArray();", "-\t\t\tchar[] declaringQualification = lastDot != -1 ? fullDeclaringName.substring(0, lastDot).toCharArray() : CharOperation.NO_CHAR;", "+\t\t\tIType declaringClass = field.getDeclaringType();", "+\t\t\tchar[] declaringSimpleName = declaringClass.getElementName().toCharArray();", "+\t\t\tchar[] declaringQualification = declaringClass.getPackageFragment().getElementName().toCharArray();", "+\t\t\tchar[][] enclosingNames = enclosingTypeNames(declaringClass);", "+\t\t\tif (enclosingNames.length > 0)", "+\t\t\t\tdeclaringQualification = CharOperation.concat(declaringQualification, CharOperation.concatWith(enclosingNames, '.'), '.');", "-\t\t\tfullDeclaringName = method.getDeclaringType().getFullyQualifiedName().replace('$', '.');", "-\t\t\tlastDot = fullDeclaringName.lastIndexOf('.');", "-\t\t\tdeclaringSimpleName = (lastDot != -1 ? fullDeclaringName.substring(lastDot + 1) : fullDeclaringName).toCharArray();", "-\t\t\tdeclaringQualification = lastDot != -1 ? fullDeclaringName.substring(0, lastDot).toCharArray() : CharOperation.NO_CHAR;", "+\t\t\tdeclaringClass = method.getDeclaringType();", "+\t\t\tdeclaringSimpleName = declaringClass.getElementName().toCharArray();", "+\t\t\tdeclaringQualification = declaringClass.getPackageFragment().getElementName().toCharArray();", "+\t\t\tenclosingNames = enclosingTypeNames(declaringClass);", "+\t\t\tif (enclosingNames.length > 0)", "+\t\t\t\tdeclaringQualification = CharOperation.concat(declaringQualification, CharOperation.concatWith(enclosingNames, '.'), '.');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "919d9deea3aef191931281c50d3bf438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void computeSuperTypeNames()", "signatureAfterChange": " protected char[][][] computeSuperTypeNames(IType focusType)", "diff": ["-\t */", "-\tprivate void computeSuperTypeNames() {", "-\t\tif (this.allSuperTypeNames != null) ", "-\t\t\treturn; // all super types have already been computed", "-\t\t", "-\t\tIType focusType = getFocusType();", "-\t\tif (focusType == null) return;", "-", "-\t\tString fullyQualifiedName = focusType.getFullyQualifiedName();", "-\t\tint lastDot = fullyQualifiedName.lastIndexOf('.');", "-\t\tchar[] qualification = lastDot == -1 ? CharOperation.NO_CHAR : fullyQualifiedName.substring(0, lastDot).toCharArray();", "-\t\tchar[] simpleName = focusType.getElementName().toCharArray();", "-", "-\t\tSuperTypeNamesCollector superTypeNamesCollector = ", "-\t\t\tnew SuperTypeNamesCollector(", "-\t\t\t\tthis.pattern, ", "-\t\t\t\tsimpleName,", "-\t\t\t\tqualification,", "-\t\t\t\tnew MatchLocator(this.pattern, this.detailLevel, this.collector, this.scope, this.progressMonitor), // clone MatchLocator so that it has no side effect", "-\t\t\t\tfocusType, ", "-\t\t\t\tthis.progressMonitor);", "-\t\ttry {", "-\t\t\tthis.allSuperTypeNames = superTypeNamesCollector.collect();", "-\t\t} catch (JavaModelException e) {", "-\t\t}", "-\t}", "+ */", "+protected char[][][] computeSuperTypeNames(IType focusType) {", "+\tString fullyQualifiedName = focusType.getFullyQualifiedName();", "+\tint lastDot = fullyQualifiedName.lastIndexOf('.');", "+\tchar[] qualification = lastDot == -1 ? CharOperation.NO_CHAR : fullyQualifiedName.substring(0, lastDot).toCharArray();", "+\tchar[] simpleName = focusType.getElementName().toCharArray();", "+", "+\tSuperTypeNamesCollector superTypeNamesCollector = ", "+\t\tnew SuperTypeNamesCollector(", "+\t\t\tthis.pattern, ", "+\t\t\tsimpleName,", "+\t\t\tqualification,", "+\t\t\tnew MatchLocator(this.pattern, this.detailLevel, this.collector, this.scope, this.progressMonitor), // clone MatchLocator so that it has no side effect", "+\t\t\tfocusType, ", "+\t\t\tthis.progressMonitor);", "+\ttry {", "+\t\tthis.allSuperTypeNames = superTypeNamesCollector.collect();", "+\t} catch (JavaModelException e) {", "+\t}", "+\treturn this.allSuperTypeNames;", "+}"]}], "num": 32840}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07aa77f6dd95c78c3b07ca868958e0d5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a03d6d403732a4617ab93a0a93f56aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 239, "signatureBeforeChange": " protected void consumeImportDeclarationsopt()", "signatureAfterChange": " protected void consumeSingleStaticImportDeclarationName()", "diff": ["-}", "-protected void consumeImportDeclarationsopt() {", "-\t// ImportDeclarationsopt ::= ImportDeclarations", "-\tint length;", "-\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\tthis.astPtr -= length;", "-\t\tSystem.arraycopy(", "-\t\t\tthis.astStack,", "-\t\t\tthis.astPtr + 1,", "-\t\t\tthis.compilationUnit.imports = new ImportReference[length],", "-\t\t\t0,", "-\t\t\tlength);", "-\t}", "+}", "+protected void consumeSingleStaticImportDeclarationName() {", "+\t// SingleTypeImportDeclarationName ::= 'import' 'static' Name", "+\t/* push an ImportRef build from the last name ", "+\tstored in the identifier stack. */", "+", "+\tImportReference impt;", "+\tint length;", "+\tchar[][] tokens = new char[length = this.identifierLengthStack[this.identifierLengthPtr--]][];", "+\tthis.identifierPtr -= length;", "+\tlong[] positions = new long[length];", "+\tSystem.arraycopy(this.identifierStack, this.identifierPtr + 1, tokens, 0, length);", "+\tSystem.arraycopy(this.identifierPositionStack, this.identifierPtr + 1, positions, 0, length);", "+\tpushOnAstStack(impt = new ImportReference(tokens, positions, false, AccStatic));", "+", "+\tthis.modifiers = AccDefault;", "+\tthis.modifiersSourceStart = -1; // <-- see comment into modifiersFlag(int)", "+\tif (this.currentToken == TokenNameSEMICOLON){", "+\t\timpt.declarationSourceEnd = this.scanner.currentPosition - 1;", "+\t} else {", "+\t\timpt.declarationSourceEnd = impt.sourceEnd;", "+\t}", "+\timpt.declarationEnd = impt.declarationSourceEnd;", "+\t//this.endPosition is just before the ;", "+\timpt.declarationSourceStart = this.intStack[this.intPtr--];", "+\tif(this.options.sourceLevel < ClassFileConstants.JDK1_5 &&", "+\t\t\tthis.lastErrorEndPositionBeforeRecovery < this.scanner.currentPosition) {", "+\t\tthis.problemReporter().invalidUsageOfStaticImports(impt);", "+\t}", "+\t", "+\tif (this.currentElement != null){", "+\t\tthis.lastCheckPoint = impt.declarationSourceEnd+1;", "+\t\tthis.restartRecovery = true; // used to avoid branching back into the regular automaton\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82c1cec1c05412eb020df11c353fbb11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "2414c381d9fba720a3b5b2375f506f068b4616ba", "commitAfterChange": "888d5cb313019c8c62b5cbd42b139e8dc64793b3", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " protected void consumeStaticImportOnDemandDeclarationName()", "signatureAfterChange": " protected void consumeStaticImportOnDemandDeclarationName()", "diff": ["-\tsuper.consumeStaticImportOnDemandDeclarationName();", "-\tImportReference impt = (ImportReference)astStack[astPtr];", "+\tImportReference impt;", "+\tint length;", "+\tchar[][] tokens = new char[length = this.identifierLengthStack[this.identifierLengthPtr--]][];", "+\tthis.identifierPtr -= length;", "+\tlong[] positions = new long[length];", "+\tSystem.arraycopy(this.identifierStack, this.identifierPtr + 1, tokens, 0, length);", "+\tSystem.arraycopy(this.identifierPositionStack, this.identifierPtr + 1, positions, 0, length);", "+\tpushOnAstStack(impt = new ImportReference(tokens, positions, true, ClassFileConstants.AccStatic));", "+\t", "+\tthis.modifiers = ClassFileConstants.AccDefault;", "+\tthis.modifiersSourceStart = -1; // <-- see comment into modifiersFlag(int)", "+\t", "+\tif (this.currentToken == TokenNameSEMICOLON){", "+\t\timpt.declarationSourceEnd = this.scanner.currentPosition - 1;", "+\t} else {", "+\t\timpt.declarationSourceEnd = impt.sourceEnd;", "+\t}", "+\timpt.declarationEnd = impt.declarationSourceEnd;", "+\t//this.endPosition is just before the ;", "+\timpt.declarationSourceStart = this.intStack[this.intPtr--];", "+\t", "+\tif(!this.statementRecoveryActivated &&", "+\t\t\toptions.sourceLevel < ClassFileConstants.JDK1_5 &&", "+\t\t\tthis.lastErrorEndPositionBeforeRecovery < this.scanner.currentPosition) {", "+\t\timpt.modifiers = ClassFileConstants.AccDefault; // convert the static import reference to a non-static importe reference", "+\t\tthis.problemReporter().invalidUsageOfStaticImports(impt);", "+\t}", "+\t", "+\t// recovery", "+\tif (this.currentElement != null){", "+\t\tthis.lastCheckPoint = impt.declarationSourceEnd+1;", "+\t\tthis.currentElement = this.currentElement.add(impt, 0);", "+\t\tthis.lastIgnoredToken = -1;", "+\t\tthis.restartRecovery = true; // used to avoid branching back into the regular automaton\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "873b4ccdaee53f31e2fca21651ec49e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "2414c381d9fba720a3b5b2375f506f068b4616ba", "commitAfterChange": "888d5cb313019c8c62b5cbd42b139e8dc64793b3", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " protected void consumeSingleStaticImportDeclarationName()", "signatureAfterChange": " protected void consumeSingleStaticImportDeclarationName()", "diff": ["-\tsuper.consumeSingleStaticImportDeclarationName();", "-\tImportReference impt = (ImportReference)astStack[astPtr];", "+\tImportReference impt;", "+\tint length;", "+\tchar[][] tokens = new char[length = this.identifierLengthStack[this.identifierLengthPtr--]][];", "+\tthis.identifierPtr -= length;", "+\tlong[] positions = new long[length];", "+\tSystem.arraycopy(this.identifierStack, this.identifierPtr + 1, tokens, 0, length);", "+\tSystem.arraycopy(this.identifierPositionStack, this.identifierPtr + 1, positions, 0, length);", "+\tpushOnAstStack(impt = newImportReference(tokens, positions, false, ClassFileConstants.AccStatic));", "+\t", "+\tthis.modifiers = ClassFileConstants.AccDefault;", "+\tthis.modifiersSourceStart = -1; // <-- see comment into modifiersFlag(int)", "+\t", "+\tif (this.currentToken == TokenNameSEMICOLON){", "+\t\timpt.declarationSourceEnd = this.scanner.currentPosition - 1;", "+\t} else {", "+\t\timpt.declarationSourceEnd = impt.sourceEnd;", "+\t}", "+\timpt.declarationEnd = impt.declarationSourceEnd;", "+\t//this.endPosition is just before the ;", "+\timpt.declarationSourceStart = this.intStack[this.intPtr--];", "+\t", "+\tif(!this.statementRecoveryActivated &&", "+\t\t\tthis.options.sourceLevel < ClassFileConstants.JDK1_5 &&", "+\t\t\tthis.lastErrorEndPositionBeforeRecovery < this.scanner.currentPosition) {", "+\t\timpt.modifiers = ClassFileConstants.AccDefault; // convert the static import reference to a non-static importe reference", "+\t\tthis.problemReporter().invalidUsageOfStaticImports(impt);", "+\t}", "+\t", "+\t// recovery", "+\tif (this.currentElement != null){", "+\t\tthis.lastCheckPoint = impt.declarationSourceEnd+1;", "+\t\tthis.currentElement = this.currentElement.add(impt, 0);", "+\t\tthis.lastIgnoredToken = -1;", "+\t\tthis.restartRecovery = true; // used to avoid branching back into the regular automaton\t\t", "+\t}", "-\t\tint length = impt.tokens.length-1;", "-\t\tint start = (int) (impt.sourcePositions[length] >>> 32);", "-\t\tchar[] last = impt.tokens[length];", "+\t\tint tokensLength = impt.tokens.length-1;", "+\t\tint start = (int) (impt.sourcePositions[tokensLength] >>> 32);", "+\t\tchar[] last = impt.tokens[tokensLength];", "-\t\tif (length > 0) {", "-\t\t\tchar[][] compoundName = new char[length][];", "-\t\t\tSystem.arraycopy(impt.tokens, 0, compoundName, 0, length);", "-\t\t\tint end = (int) impt.sourcePositions[length-1];", "+\t\tif (tokensLength > 0) {", "+\t\t\tchar[][] compoundName = new char[tokensLength][];", "+\t\t\tSystem.arraycopy(impt.tokens, 0, compoundName, 0, tokensLength);", "+\t\t\tint end = (int) impt.sourcePositions[tokensLength-1];"]}], "num": 52786}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c945d576b9b93e28ab1ab6b4586d4e4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "285dd32813a25d577c08b743dfa14296", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java", "commitBeforeChange": "65f890bbea90cd2421a6ab66f84aac632ed3ecc6", "commitAfterChange": "f30a18a2decb6f1fda736d299a391b81b93c8d2a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\", //-----------------------------------------------------------------------", "-\t\t\t\t\t\"import q1.q2.*;\\n\" +", "-\t\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\t\t\"\t\tZork z;\\n\" +", "-\t\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\t\"}\t\\n\",", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\timport q1.q2.*;\\n\" + ", "-\t\t\t\"\t       ^^\\n\" + ", "-\t\t\t\"The import q1 cannot be resolved\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\",", "-\t\t\tnull,", "-\t\t\tfalse);", "+\trunNegativeTest(", "+\t\t// test directory preparation", "+\t\tfalse /* do not flush output directory */,", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\", //-----------------------------------------------------------------------", "+\t\t\t\"import q1.q2.*;\\n\" +", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\"\t\tZork z;\\n\" +", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\t\\n\",", "+\t\t},", "+\t\t// compiler options", "+\t\tnull /* no class libraries */,", "+\t\tnull /* no custom options */,", "+\t\t// compiler results", "+\t\t\"----------\\n\" + /* expected compiler log */", "+\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"\timport q1.q2.*;\\n\" + ", "+\t\t\"\t       ^^\\n\" + ", "+\t\t\"The import q1 cannot be resolved\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\",\t\t\t// javac options", "+\t\tJavacTestOptions.SKIP_UNTIL_FRAMEWORK_FIX /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c84249b658a62d60b1304d9184e43ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java", "commitBeforeChange": "65f890bbea90cd2421a6ab66f84aac632ed3ecc6", "commitAfterChange": "f30a18a2decb6f1fda736d299a391b81b93c8d2a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void test010()", "signatureAfterChange": " public void test010()", "diff": ["-\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\", //-----------------------------------------------------------------------", "-\t\t\t\t\t\"import q1.q2.Zork;\\n\" +", "-\t\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\t\t\"\t\tZork z;\\n\" +", "-\t\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\t\"}\t\\n\",", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\timport q1.q2.Zork;\\n\" + ", "-\t\t\t\"\t       ^^\\n\" + ", "-\t\t\t\"The import q1 cannot be resolved\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\",", "-\t\t\tnull,", "-\t\t\tfalse);", "+\trunNegativeTest(", "+\t\t// test directory preparation", "+\t\tfalse /* do not flush output directory */,", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\", //-----------------------------------------------------------------------", "+\t\t\t\"import q1.q2.Zork;\\n\" +", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\"\t\tZork z;\\n\" +", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\t\\n\",", "+\t\t},", "+\t\t// compiler options", "+\t\tnull /* no class libraries */,", "+\t\tnull /* no custom options */,", "+\t\t// compiler results", "+\t\t\"----------\\n\" + /* expected compiler log */", "+\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"\timport q1.q2.Zork;\\n\" + ", "+\t\t\"\t       ^^\\n\" + ", "+\t\t\"The import q1 cannot be resolved\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\",", "+\t\t// javac options", "+\t\tJavacTestOptions.SKIP_UNTIL_FRAMEWORK_FIX /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b8e34aaf698ee62fcf2206335eacc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java", "commitBeforeChange": "65f890bbea90cd2421a6ab66f84aac632ed3ecc6", "commitAfterChange": "f30a18a2decb6f1fda736d299a391b81b93c8d2a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test005()", "signatureAfterChange": " public void test005()", "diff": ["-\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\", //-----------------------------------------------------------------------", "-\t\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\t\t\"\t\tp.OtherFoo ofoo = new p.OtherFoo();\\n\" +", "-\t\t\t\t\t\"\t\tofoo.bar();\\n\" +", "-\t\t\t\t\t\"\t\tq1.q2.Zork z;\\n\" +", "-\t\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\t\"}\t\\n\",", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tofoo.bar();\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^\\n\" + ", "-\t\t\t\"The type q1.q2.Zork cannot be resolved. It is indirectly referenced from required .class files\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tofoo.bar();\\n\" + ", "-\t\t\t\"\t     ^^^\\n\" + ", "-\t\t\t\"The method bar() from the type OtherFoo refers to the missing type Zork\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tq1.q2.Zork z;\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^\\n\" + ", "-\t\t\t\"q1.q2.Zork cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\",", "-\t\t\tnull,", "-\t\t\tfalse);", "+\trunNegativeTest(", "+\t\t// test directory preparation", "+\t\tfalse /* do not flush output directory */,", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\", //-----------------------------------------------------------------------", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\"\t\tp.OtherFoo ofoo = new p.OtherFoo();\\n\" +", "+\t\t\t\"\t\tofoo.bar();\\n\" +", "+\t\t\t\"\t\tq1.q2.Zork z;\\n\" +", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\t\\n\",\t", "+\t\t},", "+\t\t// compiler options", "+\t\tnull /* no class libraries */,", "+\t\tnull /* no custom options */,", "+\t\t// compiler results", "+\t\t\"----------\\n\" + /* expected compiler log */", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tofoo.bar();\\n\" + ", "+\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\"The type q1.q2.Zork cannot be resolved. It is indirectly referenced from required .class files\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tofoo.bar();\\n\" + ", "+\t\t\"\t     ^^^\\n\" + ", "+\t\t\"The method bar() from the type OtherFoo refers to the missing type Zork\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tq1.q2.Zork z;\\n\" + ", "+\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\"q1.q2.Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\",", "+\t\t// javac options", "+\t\tJavacTestOptions.SKIP_UNTIL_FRAMEWORK_FIX /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65488796edbfcf98035aa105e01a28f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java", "commitBeforeChange": "65f890bbea90cd2421a6ab66f84aac632ed3ecc6", "commitAfterChange": "f30a18a2decb6f1fda736d299a391b81b93c8d2a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test008()", "signatureAfterChange": " public void test008()", "diff": ["-\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\", //-----------------------------------------------------------------------", "-\t\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\t\t\"\t\tq1.q2.Zork z;\\n\" +", "-\t\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\t\"}\t\\n\",", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tq1.q2.Zork z;\\n\" + ", "-\t\t\t\"\t^^\\n\" + ", "-\t\t\t\"q1 cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\",", "-\t\t\tnull,", "-\t\t\tfalse);", "+\trunNegativeTest(", "+\t\t// test directory preparation", "+\t\tfalse /* do not flush output directory */,", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\", //-----------------------------------------------------------------------", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\"\t\tq1.q2.Zork z;\\n\" +", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\t\\n\",", "+\t\t},", "+\t\t// compiler options", "+\t\tnull /* no class libraries */,", "+\t\tnull /* no custom options */,", "+\t\t// compiler results", "+\t\t\"----------\\n\" + /* expected compiler log */", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tq1.q2.Zork z;\\n\" + ", "+\t\t\"\t^^\\n\" + ", "+\t\t\"q1 cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\",", "+\t\t// javac options", "+\t\tJavacTestOptions.SKIP_UNTIL_FRAMEWORK_FIX /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc48c2c9ceee95ea07d87bdde770b13a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java", "commitBeforeChange": "65f890bbea90cd2421a6ab66f84aac632ed3ecc6", "commitAfterChange": "f30a18a2decb6f1fda736d299a391b81b93c8d2a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test007()", "signatureAfterChange": " public void test007()", "diff": ["-\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\", //-----------------------------------------------------------------------", "-\t\t\t\t\t\"import q1.q2.Zork;\\n\" +", "-\t\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\t\t\"\t\tp.OtherFoo ofoo = new p.OtherFoo();\\n\" +", "-\t\t\t\t\t\"\t\tofoo.bar();\\n\" +", "-\t\t\t\t\t\"\t\tZork z;\\n\" +", "-\t\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\t\"}\t\\n\",", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\timport q1.q2.Zork;\\n\" + ", "-\t\t\t\"\t       ^^\\n\" + ", "-\t\t\t\"The import q1 cannot be resolved\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tofoo.bar();\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^\\n\" + ", "-\t\t\t\"The type q1.q2.Zork cannot be resolved. It is indirectly referenced from required .class files\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tofoo.bar();\\n\" + ", "-\t\t\t\"\t     ^^^\\n\" + ", "-\t\t\t\"The method bar() from the type OtherFoo refers to the missing type Zork\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\",", "-\t\t\tnull,", "-\t\t\tfalse);", "+\trunNegativeTest(", "+\t\t// test directory preparation", "+\t\tfalse /* do not flush output directory */,", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\", //-----------------------------------------------------------------------", "+\t\t\t\"import q1.q2.Zork;\\n\" +", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\"\t\tp.OtherFoo ofoo = new p.OtherFoo();\\n\" +", "+\t\t\t\"\t\tofoo.bar();\\n\" +", "+\t\t\t\"\t\tZork z;\\n\" +", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\t\\n\",", "+\t\t},", "+\t\t// compiler options", "+\t\tnull /* no class libraries */,", "+\t\tnull /* no custom options */,", "+\t\t// compiler results", "+\t\t\"----------\\n\" + /* expected compiler log */", "+\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"\timport q1.q2.Zork;\\n\" + ", "+\t\t\"\t       ^^\\n\" + ", "+\t\t\"The import q1 cannot be resolved\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tofoo.bar();\\n\" + ", "+\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\"The type q1.q2.Zork cannot be resolved. It is indirectly referenced from required .class files\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tofoo.bar();\\n\" + ", "+\t\t\"\t     ^^^\\n\" + ", "+\t\t\"The method bar() from the type OtherFoo refers to the missing type Zork\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\",", "+\t\t// javac options", "+\t\tJavacTestOptions.SKIP_UNTIL_FRAMEWORK_FIX /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f62b4d9d78e5760df37c1da90e08dbd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java", "commitBeforeChange": "65f890bbea90cd2421a6ab66f84aac632ed3ecc6", "commitAfterChange": "f30a18a2decb6f1fda736d299a391b81b93c8d2a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test006()", "signatureAfterChange": " public void test006()", "diff": ["-\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\", //-----------------------------------------------------------------------", "-\t\t\t\t\t\"import q1.q2.*;\\n\" +", "-\t\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\t\t\"\t\tp.OtherFoo ofoo = new p.OtherFoo();\\n\" +", "-\t\t\t\t\t\"\t\tofoo.bar();\\n\" +", "-\t\t\t\t\t\"\t\tZork z;\\n\" +", "-\t\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\t\"}\t\\n\",", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\timport q1.q2.*;\\n\" + ", "-\t\t\t\"\t       ^^\\n\" + ", "-\t\t\t\"The import q1 cannot be resolved\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tofoo.bar();\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^\\n\" + ", "-\t\t\t\"The type q1.q2.Zork cannot be resolved. It is indirectly referenced from required .class files\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tofoo.bar();\\n\" + ", "-\t\t\t\"\t     ^^^\\n\" + ", "-\t\t\t\"The method bar() from the type OtherFoo refers to the missing type Zork\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\",", "-\t\t\tnull,", "-\t\t\tfalse);", "+\trunNegativeTest(", "+\t\t// test directory preparation", "+\t\tfalse /* do not flush output directory */,", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\", //-----------------------------------------------------------------------", "+\t\t\t\"import q1.q2.*;\\n\" +", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\"\t\tp.OtherFoo ofoo = new p.OtherFoo();\\n\" +", "+\t\t\t\"\t\tofoo.bar();\\n\" +", "+\t\t\t\"\t\tZork z;\\n\" +", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\t\\n\",", "+\t\t},", "+\t\t// compiler options", "+\t\tnull /* no class libraries */,", "+\t\tnull /* no custom options */,", "+\t\t// compiler results", "+\t\t\"----------\\n\" + /* expected compiler log */", "+\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"\timport q1.q2.*;\\n\" + ", "+\t\t\"\t       ^^\\n\" + ", "+\t\t\"The import q1 cannot be resolved\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tofoo.bar();\\n\" + ", "+\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\"The type q1.q2.Zork cannot be resolved. It is indirectly referenced from required .class files\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tofoo.bar();\\n\" + ", "+\t\t\"\t     ^^^\\n\" + ", "+\t\t\"The method bar() from the type OtherFoo refers to the missing type Zork\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\",", "+\t\t// javac options", "+\t\tJavacTestOptions.SKIP_UNTIL_FRAMEWORK_FIX /* javac test options */);"]}], "num": 15564}
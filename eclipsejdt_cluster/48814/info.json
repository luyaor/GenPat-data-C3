{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "358c3b6dc5b909dbb55d824a972cf01b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fe6f10c60d70ef84a60728ece469d08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected String getClasspathAsXML( \t\tIClasspathEntry[] classpath, \t\tIPath outputLocation) \t\tthrows JavaModelException", "signatureAfterChange": " \tprotected String encodeClasspath(IClasspathEntry[] classpath, IPath outputLocation, boolean useLineSeparator) throws JavaModelException", "diff": ["+\t */", "+\tprotected String encodeClasspath(IClasspathEntry[] classpath, IPath outputLocation, boolean useLineSeparator) throws JavaModelException {", "+", "+\t\tDocument document = new DocumentImpl();", "+\t\tElement cpElement = document.createElement(\"classpath\"); //$NON-NLS-1$", "+\t\tdocument.appendChild(cpElement);", "+", "+\t\tfor (int i = 0; i < classpath.length; ++i) {", "+\t\t\tcpElement.appendChild(((ClasspathEntry)classpath[i]).elementEncode(document, getProject().getFullPath()));", "+\t\t}", "+", "+\t\tif (outputLocation != null) {", "+\t\t\toutputLocation = outputLocation.removeFirstSegments(1);", "+\t\t\toutputLocation = outputLocation.makeRelative();", "+\t\t\tElement oElement = document.createElement(\"classpathentry\"); //$NON-NLS-1$", "+\t\t\toElement.setAttribute(\"kind\", ClasspathEntry.kindToString(ClasspathEntry.K_OUTPUT));\t//$NON-NLS-1$", "+\t\t\toElement.setAttribute(\"path\", outputLocation.toString()); //$NON-NLS-1$", "+\t\t\tcpElement.appendChild(oElement);", "+\t\t}", "+", "+\t\t// produce a String output", "+\t\ttry {", "+\t\t\tByteArrayOutputStream s = new ByteArrayOutputStream();", "+\t\t\tOutputFormat format = new OutputFormat();", "+\t\t\tif (useLineSeparator) {", "+\t\t\t\tformat.setIndenting(true);", "+\t\t\t\tformat.setLineSeparator(System.getProperty(\"line.separator\"));  //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tformat.setPreserveSpace(true);", "+\t\t\t}\t\t\t", "+\t\t\tSerializer serializer =", "+\t\t\t\tSerializerFactory.getSerializerFactory(Method.XML).makeSerializer(", "+\t\t\t\t\tnew OutputStreamWriter(s, \"UTF8\"), //$NON-NLS-1$", "+\t\t\t\t\tformat);", "+\t\t\tserializer.asDOMSerializer().serialize(document);", "+\t\t\treturn s.toString(\"UTF8\"); //$NON-NLS-1$", "+\t\t} catch (IOException e) {", "+\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t\t}", "+\t}", "-\t */", "-\tprotected String getClasspathAsXML(", "-\t\tIClasspathEntry[] classpath,", "-\t\tIPath outputLocation)", "-\t\tthrows JavaModelException {", "-", "-\t\tDocument document = new DocumentImpl();", "-\t\tElement cpElement = document.createElement(\"classpath\"); //$NON-NLS-1$", "-\t\tdocument.appendChild(cpElement);", "-", "-\t\tfor (int i = 0; i < classpath.length; ++i) {", "-\t\t\tcpElement.appendChild(((ClasspathEntry)classpath[i]).elementEncode(document, getProject().getFullPath()));", "-\t\t}", "-", "-\t\tif (outputLocation != null) {", "-\t\t\toutputLocation = outputLocation.removeFirstSegments(1);", "-\t\t\toutputLocation = outputLocation.makeRelative();", "-\t\t\tElement oElement = document.createElement(\"classpathentry\"); //$NON-NLS-1$", "-\t\t\toElement.setAttribute(\"kind\", ClasspathEntry.kindToString(ClasspathEntry.K_OUTPUT));\t//$NON-NLS-1$", "-\t\t\toElement.setAttribute(\"path\", outputLocation.toString()); //$NON-NLS-1$", "-\t\t\tcpElement.appendChild(oElement);", "-\t\t}", "-", "-\t\t// produce a String output", "-\t\ttry {", "-\t\t\tByteArrayOutputStream s= new ByteArrayOutputStream();", "-\t\t\tOutputFormat format = new OutputFormat();", "-\t\t\tformat.setIndenting(true);", "-\t\t\tformat.setLineSeparator(System.getProperty(\"line.separator\"));  //$NON-NLS-1$", "-\t\t\t", "-\t\t\tSerializer serializer =", "-\t\t\t\tSerializerFactory.getSerializerFactory(Method.XML).makeSerializer(", "-\t\t\t\t\tnew OutputStreamWriter(s, \"UTF8\"), //$NON-NLS-1$", "-\t\t\t\t\tformat);", "-\t\t\tserializer.asDOMSerializer().serialize(document);", "-\t\t\treturn s.toString(\"UTF8\"); //$NON-NLS-1$", "-\t\t} catch (IOException e) {", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b19eaa84659784a500f1238490df8d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "4d657d16dcce8d103534cfb60b4be82696664aa1", "commitAfterChange": "497330b1202ed51ff374b68cee6dd523314e3109", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprotected String encodeClasspath(IClasspathEntry[] classpath, IPath outputLocation, boolean useLineSeparator) throws JavaModelException", "signatureAfterChange": " \tprotected String encodeClasspath(IClasspathEntry[] classpath, IPath outputLocation, boolean indent) throws JavaModelException", "diff": ["-\tprotected String encodeClasspath(IClasspathEntry[] classpath, IPath outputLocation, boolean useLineSeparator) throws JavaModelException {", "-", "-\t\tDocument document = new DocumentImpl();", "-\t\tElement cpElement = document.createElement(\"classpath\"); //$NON-NLS-1$", "-\t\tdocument.appendChild(cpElement);", "-", "-\t\tfor (int i = 0; i < classpath.length; ++i) {", "-\t\t\tcpElement.appendChild(((ClasspathEntry)classpath[i]).elementEncode(document, getProject().getFullPath()));", "-\t\t}", "-", "-\t\tif (outputLocation != null) {", "-\t\t\toutputLocation = outputLocation.removeFirstSegments(1);", "-\t\t\toutputLocation = outputLocation.makeRelative();", "-\t\t\tElement oElement = document.createElement(\"classpathentry\"); //$NON-NLS-1$", "-\t\t\toElement.setAttribute(\"kind\", ClasspathEntry.kindToString(ClasspathEntry.K_OUTPUT));\t//$NON-NLS-1$", "-\t\t\toElement.setAttribute(\"path\", outputLocation.toString()); //$NON-NLS-1$", "-\t\t\tcpElement.appendChild(oElement);", "-\t\t}", "-", "-\t\t// produce a String output", "+\tprotected String encodeClasspath(IClasspathEntry[] classpath, IPath outputLocation, boolean indent) throws JavaModelException {", "-\t\t\tOutputFormat format = new OutputFormat();", "-\t\t\tif (useLineSeparator) {", "-\t\t\t\tformat.setIndenting(true);", "-\t\t\t\tformat.setLineSeparator(System.getProperty(\"line.separator\"));  //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tformat.setPreserveSpace(true);", "-\t\t\t}\t\t\t", "-\t\t\tSerializer serializer =", "-\t\t\t\tSerializerFactory.getSerializerFactory(Method.XML).makeSerializer(", "-\t\t\t\t\tnew OutputStreamWriter(s, \"UTF8\"), //$NON-NLS-1$", "-\t\t\t\t\tformat);", "-\t\t\tserializer.asDOMSerializer().serialize(document);", "-\t\t\treturn s.toString(\"UTF8\"); //$NON-NLS-1$", "+\t\t\tOutputStreamWriter writer = new OutputStreamWriter(s, \"UTF8\"); //$NON-NLS-1$", "+\t\t\tXMLWriter xmlWriter = new XMLWriter(writer);", "+\t\t\t", "+\t\t\txmlWriter.startTag(\"classpath\", indent); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < classpath.length; ++i) {", "+\t\t\t\t((ClasspathEntry)classpath[i]).elementEncode(xmlWriter, getProject().getFullPath(), indent, true);", "+\t\t\t}", "+\t", "+\t\t\tif (outputLocation != null) {", "+\t\t\t\toutputLocation = outputLocation.removeFirstSegments(1);", "+\t\t\t\toutputLocation = outputLocation.makeRelative();", "+\t\t\t\tHashMap parameters = new HashMap();", "+\t\t\t\tparameters.put(\"kind\", ClasspathEntry.kindToString(ClasspathEntry.K_OUTPUT));//$NON-NLS-1$", "+\t\t\t\tparameters.put(\"path\", String.valueOf(outputLocation));//$NON-NLS-1$", "+\t\t\t\txmlWriter.printTag(\"classpathentry\", parameters, indent, true, true);//$NON-NLS-1$", "+\t\t\t}", "+\t", "+\t\t\txmlWriter.endTag(\"classpath\", indent);//$NON-NLS-1$", "+\t\t\twriter.flush();", "+\t\t\twriter.close();", "+\t\t\tSystem.out.println(s.toString(\"UTF8\"));//$NON-NLS-1$", "+\t\t\treturn s.toString(\"UTF8\");//$NON-NLS-1$"]}], "num": 48814}
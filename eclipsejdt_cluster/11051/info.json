{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3368b281b9a325bb8d593c10d6bed605", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "642b5f7f0b41668e7ae4fe7473407404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "93b2da494f05ea9d7d07cce04c925af478b85ee5", "commitAfterChange": "c69071f87158dd93231fe63287bd6768307408eb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tprotected void buildSupertypes()", "signatureAfterChange": "\r \tprotected void buildSupertypes()", "diff": ["-\t\tif (nameLookup != null && unitToLookInside != null) {\r", "+\t\tif (nameLookup != null) {\r", "+\t\t\t\tIWorkingCopy[] workingCopies = this.getWokingCopies();\r", "+\t\t\t\tIWorkingCopy[] unitsToLookInside;\r", "+\t\t\t\tif (unitToLookInside != null) {\r", "+\t\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;\r", "+\t\t\t\t\tif (wcLength == 0) {\r", "+\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];\r", "+\t\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;\r", "+\t\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tunitsToLookInside = workingCopies;\r", "+\t\t\t\t}\r", "-\t\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "+\t\t\t\t\tnameLookup.setUnitsToLookInside(unitsToLookInside);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc4c31e05fefbac810e6d2f1a6ce17e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "93b2da494f05ea9d7d07cce04c925af478b85ee5", "commitAfterChange": "c69071f87158dd93231fe63287bd6768307408eb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private void buildForProject(JavaProject project, ArrayList infos, ArrayList units) throws JavaModelException", "signatureAfterChange": "\r private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies) throws JavaModelException", "diff": ["-private void buildForProject(JavaProject project, ArrayList infos, ArrayList units) throws JavaModelException {\r", "+private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies) throws JavaModelException {\r", "-\t\tsynchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set\r", "+\t\tsynchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the units to look inside are set\r", "+\t\t\t\tIWorkingCopy[] unitsToLookInside;\r", "-\t\t\t\t\tthis.nameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "+\t\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;\r", "+\t\t\t\t\tif (wcLength == 0) {\r", "+\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];\r", "+\t\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;\r", "+\t\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tunitsToLookInside = workingCopies;\r", "+\t\t\t\tthis.nameLookup.setUnitsToLookInside(unitsToLookInside);\r"]}], "num": 11051}
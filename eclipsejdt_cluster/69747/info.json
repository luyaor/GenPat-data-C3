{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3465536c92bb832e1e009423adabce9a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a299c7b800f5277afe59cb68cc75b77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic IFile generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tIProject project, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor, \t\t\tString charsetName )  \t\tthrows CoreException, UnsupportedEncodingException", "signatureAfterChange": " \tpublic synchronized FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tIJavaProject javaProject, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor, \t\t\tString charsetName )  \t\tthrows CoreException, UnsupportedEncodingException", "diff": ["-\tpublic IFile generateFileDuringBuild(", "+\tpublic synchronized FileGenerationResult generateFileDuringBuild(", "-\t\t\tIProject project,", "+\t\t\tIJavaProject javaProject,", "+\t\t\tIProject project = javaProject.getProject();", "+\t\t\t// create folder for generated source files", "+\t\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "+\t\t\tif (!folder.exists())", "+\t\t\t\tfolder.create(true, false, null);", "-\t\t// create folder for generated source files", "-\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "-\t\tif (!folder.exists())", "-\t\t\tfolder.create(true, false, null);", "-", "-\t\t// split the type name into its parts", "-\t\tString[] parts = typeName.split( \"\\\\.\");", "-", "-\t\t//  create folders for the package parts", "-\t\tint i = 0;", "-\t\tfor ( ;i < parts.length - 1; i++ )", "-\t\t{", "-\t\t\tfolder = folder.getFolder( parts[i] );", "-\t\t\tif ( !folder.exists() )", "-\t\t\t\tfolder.create( true, false, null );", "-\t\t}", "-\t\t", "-\t\tString fileName = parts[i] + \".java\";\t\t", "-\t\tIFile file = folder.getFile( fileName );", "-", "-\t\tbyte[] bytes;", "-\t\tif ( charsetName == null || charsetName == \"\" )", "-\t\t\tbytes = contents.getBytes();", "-\t\telse", "-\t\t\tbytes = contents.getBytes( charsetName );", "-\t\tInputStream is = new ByteArrayInputStream( bytes );", "-\t\t", "-\t\tif ( !file.exists() )", "-\t\t{", "-\t\t\tfile.create( is, true, progressMonitor );", "-\t\t}", "-\t\telse", "-\t\t{", "-\t\t\tmakeReadOnly( file, false );", "-\t\t\tfile.setContents( is, true, true, progressMonitor );", "-\t\t}", "-\t\t", "-\t\tfile.setDerived( true );", "-\t\t", "-\t\tmakeReadOnly( file, true );", "-\t\t", "-\t\tupdateFileMaps( typeName, parentFile, file );", "-\t\treturn file;", "+\t\t\t//", "+\t\t\t// make sure __generated_src dir is on the cp if not already", "+\t\t\t//", "+\t\t\tupdateProjectClasspath( (JavaProject)javaProject, folder, progressMonitor );", "+\t\t\t", "+\t\t\t// split the type name into its parts", "+\t\t\tString[] parts = typeName.split( \"\\\\.\");", "+\t", "+\t\t\t//  create folders for the package parts", "+\t\t\tint i = 0;", "+\t\t\tfor ( ;i < parts.length - 1; i++ )", "+\t\t\t{", "+\t\t\t\tfolder = folder.getFolder( parts[i] );", "+\t\t\t\tif ( !folder.exists() )", "+\t\t\t\t\tfolder.create( true, false, null );", "+\t\t\t}", "+\t\t\t", "+\t\t\tString fileName = parts[i] + \".java\";\t\t", "+\t\t\tIFile file = folder.getFile( fileName );", "+\t", "+\t\t\tbyte[] bytes;", "+\t\t\tif ( charsetName == null || charsetName == \"\" )", "+\t\t\t\tbytes = contents.getBytes();", "+\t\t\telse", "+\t\t\t\tbytes = contents.getBytes( charsetName );", "+\t\t\tInputStream is = new ByteArrayInputStream( bytes );", "+\t\t\t", "+\t\t\tboolean contentsDiffer = true;", "+\t\t\t", "+\t\t\tif ( !file.exists() )", "+\t\t\t{", "+\t\t\t\tfile.create( is, true, progressMonitor );", "+\t\t\t}", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\t// Check if the content has changed", "+\t\t\t\tInputStream oldData = null;", "+\t\t\t\ttry {", "+\t\t\t\t\toldData = new BufferedInputStream(file.getContents());", "+\t\t\t\t\tcontentsDiffer = !compareStreams(oldData, is);", "+\t\t\t\t}", "+\t\t\t\tcatch (CoreException ce) {", "+\t\t\t\t\t// Do nothing. Assume the new content is different", "+\t\t\t\t}", "+\t\t\t\tfinally {", "+\t\t\t\t\tis.reset();", "+\t\t\t\t\tif (oldData != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\toldData.close();", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t\tcatch (IOException ioe) ", "+\t\t\t\t\t\t{}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (contentsDiffer) {", "+\t\t\t\t\tmakeReadOnly( file, false );", "+\t\t\t\t\tfile.setContents( is, true, true, progressMonitor );", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tfile.setDerived( true );", "+\t\t\t", "+\t\t\tmakeReadOnly( file, true );", "+\t\t\t", "+\t\t\tupdateFileMaps( typeName, parentFile, file );", "+\t\t\treturn new FileGenerationResult(file, contentsDiffer);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4e432b14300c27fb0c84607d3602ca3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "987b84492820c5eeff2230233c35db158228c8e3", "commitAfterChange": "882e850a9e00f22aac1934fd17ac4c0522b9b030", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["+\t\t\tIFile resource = (IFile)workingCopy.getResource();", "-\t\t", "-\t\t\t// creates the delta builder (this remembers the content of the cu)\t", "-\t\t\tif (!primary.isOpen()) {", "+", "+\t\t\tJavaElementDeltaBuilder deltaBuilder = null;", "+\t\t\t", "+\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)workingCopy.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\tif (root.isOnClasspath() && resource.isAccessible()) {", "+\t\t\t", "-\t\t\t\tprimary.open(null);", "-\t\t\t}", "-\t\t\tJavaElementDeltaBuilder deltaBuilder;", "-\t\t\tif (Util.isExcluded(primary)) {", "-\t\t\t\tdeltaBuilder = null;", "-\t\t\t} else {", "-\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(primary);", "-\t\t\t}", "-\t\t", "-\t\t\t// save the cu", "-\t\t\tIBuffer primaryBuffer = primary.getBuffer();", "-\t\t\tif (primaryBuffer == null) return;", "-\t\t\tchar[] primaryContents = primaryBuffer.getCharacters();", "-\t\t\tboolean hasSaved = false;", "-\t\t\ttry {", "-\t\t\t\tIBuffer workingCopyBuffer = workingCopy.getBuffer();", "-\t\t\t\tif (workingCopyBuffer == null) return;", "-\t\t\t\tprimaryBuffer.setContents(workingCopyBuffer.getCharacters());", "-\t\t\t\tprimary.save(fMonitor, fForce);", "-\t\t\t\tsetAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); ", "-\t\t\t\thasSaved = true;", "-\t\t\t} finally {", "-\t\t\t\tif (!hasSaved){", "-\t\t\t\t\t// restore original buffer contents since something went wrong", "-\t\t\t\t\tprimaryBuffer.setContents(primaryContents);", "+\t\t\t\tif (!primary.isOpen()) {", "+\t\t\t\t\tprimary.open(null);", "+", "+\t\t\t\t// creates the delta builder (this remembers the content of the cu)\t", "+\t\t\t\tif (!Util.isExcluded(primary)) {", "+\t\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(primary);", "+\t\t\t\t}", "+\t\t\t", "+\t\t\t\t// save the cu", "+\t\t\t\tIBuffer primaryBuffer = primary.getBuffer();", "+\t\t\t\tif (primaryBuffer == null) return;", "+\t\t\t\tchar[] primaryContents = primaryBuffer.getCharacters();", "+\t\t\t\tboolean hasSaved = false;", "+\t\t\t\ttry {", "+\t\t\t\t\tIBuffer workingCopyBuffer = workingCopy.getBuffer();", "+\t\t\t\t\tif (workingCopyBuffer == null) return;", "+\t\t\t\t\tprimaryBuffer.setContents(workingCopyBuffer.getCharacters());", "+\t\t\t\t\tprimaryBuffer.save(fMonitor, fForce);", "+\t\t\t\t\tprimary.makeConsistent(this);", "+\t\t\t\t\thasSaved = true;", "+\t\t\t\t} finally {", "+\t\t\t\t\tif (!hasSaved){", "+\t\t\t\t\t\t// restore original buffer contents since something went wrong", "+\t\t\t\t\t\tprimaryBuffer.setContents(primaryContents);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// working copy on cu outside classpath OR resource doesn't exist yet", "+\t\t\t\tString encoding = workingCopy.getJavaProject().getOption(JavaCore.CORE_ENCODING, true);", "+\t\t\t\tString contents = workingCopy.getSource();", "+\t\t\t\tif (contents == null) return;", "+\t\t\t\ttry {", "+\t\t\t\t\tbyte[] bytes = encoding == null ", "+\t\t\t\t\t\t? contents.getBytes() ", "+\t\t\t\t\t\t: contents.getBytes(encoding);", "+\t\t\t\t\tByteArrayInputStream stream = new ByteArrayInputStream(bytes);", "+\t\t\t\t\tif (resource.exists()) {", "+\t\t\t\t\t\tresource.setContents(", "+\t\t\t\t\t\t\tstream, ", "+\t\t\t\t\t\t\tfForce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "+\t\t\t\t\t\t\tnull);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tresource.create(", "+\t\t\t\t\t\t\tstream,", "+\t\t\t\t\t\t\tfForce,", "+\t\t\t\t\t\t\tfMonitor);", "+\t\t\t\t\t}", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t\t\t\t}", "+\t\t\t\t", "+", "+\t\t\tsetAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); ", "+\t\t\t", "+\t\t\t// build the deltas", "-\t\t\t\t// build the deltas"]}], "num": 69747}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f9492ead338ffbc4ca6f3a6a5753332", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "675c2e79e06b9b86bd9c983804701982", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 22, "signatureBeforeChange": "\t \t \tprivate void mapPositions(int startOrigin, int startFormatted, int length)", "signatureAfterChange": " \tpublic void initializeScanner(char[] compilationUnitSource)", "diff": ["-\t", "-\tprivate void mapPositions(int startOrigin, int startFormatted, int length) {", "-\t\t// positionsToMap is not null", "-\t\tfor (; this.positionsIndex < this.positionsToMap.length; this.positionsIndex++) {", "-\t\t\tif (this.positionsToMap[this.positionsIndex] < startOrigin) {", "-\t\t\t\tthis.mappedPositions[this.positionsIndex] = startFormatted;", "-\t\t\t} else if (this.positionsToMap[this.positionsIndex] < startOrigin + length) {", "-\t\t\t\tthis.mappedPositions[this.positionsIndex] = this.positionsToMap[this.positionsIndex] - startOrigin + startFormatted;", "-\t\t\t} else {", "-\t\t\t\treturn;", "-\t\t\t}", "+\t */", "+\tpublic void initializeScanner(char[] compilationUnitSource) {", "+\t\tthis.scanner.setSource(compilationUnitSource);", "+\t\tthis.scannerEndPosition = compilationUnitSource.length;", "+\t\tthis.scanner.resetTo(0, this.scannerEndPosition);", "+\t\tif (this.textRegionEnd == -1) {", "+\t\t\tthis.textRegionEnd = this.scannerEndPosition;", "-\t}", "+\t\tthis.edits = new OptimizedReplaceEdit[INITIAL_SIZE];", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a317fc1c3ad3815efeadf89aaf0daa1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  protected void addAllSourceFiles(final ArrayList locations, final ArrayList typeNames) throws CoreException", "signatureAfterChange": "  protected void addAllSourceFiles(final ArrayList sourceFiles) throws CoreException", "diff": ["-protected void addAllSourceFiles(final ArrayList locations, final ArrayList typeNames) throws CoreException {", "-\tfor (int i = 0, length = sourceFolders.length; i < length; i++) {", "-\t\tfinal int srcFolderLength = sourceFolders[i].getLocation().addTrailingSeparator().toString().length();", "-\t\tsourceFolders[i].accept(", "-\t\t\tnew IResourceVisitor() {", "-\t\t\t\tpublic boolean visit(IResource resource) {", "-\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\tif (JavaBuilder.JAVA_EXTENSION.equalsIgnoreCase(resource.getFileExtension())) {", "-\t\t\t\t\t\t\tString sourceLocation = resource.getLocation().toString();", "-\t\t\t\t\t\t\tlocations.add(sourceLocation);", "-\t\t\t\t\t\t\ttypeNames.add(sourceLocation.substring(srcFolderLength, sourceLocation.length() - 5)); // length of .java", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t);", "-\t\tnotifier.checkCancel();", "-\t}", "-}", "+protected void addAllSourceFiles(final ArrayList sourceFiles) throws CoreException {", "+\tfor (int i = 0, l = sourceLocations.length; i < l; i++) {", "+\t\tfinal ClasspathMultiDirectory sourceLocation = sourceLocations[i];", "+\t\tfinal char[][] exclusionPatterns = sourceLocation.exclusionPatterns;", "+\t\tsourceLocation.sourceFolder.accept(", "+\t\t\t\t\tif (exclusionPatterns != null && Util.isExcluded(resource, exclusionPatterns))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tif (JavaBuilder.JAVA_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "+\t\t\t\t\t\t\tsourceFiles.add(new SourceFile((IFile) resource, sourceLocation, encoding));", "+\t\tnotifier.checkCancel();"]}], "num": 33846}
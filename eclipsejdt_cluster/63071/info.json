{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7376edfbc60f0f1e352a050f1e2439fe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1382dc3a1662e7cddecd836c2d4f8c7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "2aa51948b1d182868074055df3bd1567fc296c80", "commitAfterChange": "6ffa47a72c896e52fce5e876180115cd6d618fcb", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 170, "signatureBeforeChange": "\r protected void consumeToken(int type)", "signatureAfterChange": "\r protected void consumeToken(int type)", "diff": ["+\tif (scanner.wasNonExternalizedStringLiteral) {\r", "+\t\tStringLiteral[] literals = this.scanner.nonNLSStrings;\r", "+\t\tfor (int i = 0, max = literals.length; i < max; i++) {\r", "+\t\t\tproblemReporter().nonExternalizedStringLiteral(literals[i]);\r", "+\t\t}\r", "+\t\tscanner.currentLine = null;\r", "+\t\tscanner.wasNonExternalizedStringLiteral = false;\r", "+\t}\r", "-\t\t\tif (scanner.wasNonExternalizedStringLiteral) problemReporter().nonExternalizedStringLiteral(stringLiteral);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d8c360c64c712c014b2d2b208aa7154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "1b9007dc89ab106404098b866327ad6247c78bf1", "commitAfterChange": "5c0f7fbdc93e77016d1a112ec7fb397c1eca62e7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic NameLookup( \t\t\tIPackageFragmentRoot[] packageFragmentRoots,  \t\t\tHashtableOfArrayToObject packageFragments,  \t\t\tICompilationUnit[] workingCopies,  \t\t\tMap rootToResolvedEntries)", "signatureAfterChange": "  \tpublic NameLookup( \t\t\tIPackageFragmentRoot[] packageFragmentRoots,  \t\t\tHashtableOfArrayToObject packageFragments,  \t\t\tICompilationUnit[] workingCopies,  \t\t\tMap rootToResolvedEntries)", "diff": ["+\t\t\tHashSet rootsSet = new HashSet();", "+\t\t\tfor (int i = 0, length = packageFragmentRoots.length; i < length; i++) {", "+\t\t\t\trootsSet.add(packageFragmentRoots[i]);", "+\t\t\t}", "+\t\t\t\tif (!rootsSet.contains(pkg.getParent()))", "+\t\t\t\t\tcontinue; // working copy is not visible from this project (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=169970)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3406facd637da5e9a2bfdd1eca7c4628", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "d85d39eaac6c50a092ebc71013caff6067946721", "commitAfterChange": "4113d4b15f909d9ae6a13dfdc1603db4b3835658", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": " \t \tpublic static Object getAnnotationMemberValue(JavaElement parent, MemberValuePair memberValuePair, Object binaryValue)", "signatureAfterChange": " \t \tpublic static Object getAnnotationMemberValue(JavaElement parent, MemberValuePair memberValuePair, Object binaryValue)", "diff": ["-\t\t\treturn getAnnotation(parent, (IBinaryAnnotation) binaryValue);", "+\t\t\treturn getAnnotation(parent, (IBinaryAnnotation) binaryValue, memberValuePair.getMemberName());", "+\t\t\t\tif (value instanceof Annotation) {", "+\t\t\t\t\tAnnotation annotation = (Annotation) value;", "+\t\t\t\t\tfor (int j = 0; j < i; j++) {", "+\t\t\t\t\t\tif (annotation.equals(values[j])) {", "+\t\t\t\t\t\t\tannotation.occurrenceCount++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a8aeff9ec5fc3330f73c9ebcb6115a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "8622e99cc18e0c0ae6c600de97be8d909f3d7ad6", "commitAfterChange": "97ffd5d9f10b645b867987b89ee09e9ee483a6d1", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tpublic void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "signatureAfterChange": " \t \tpublic void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "diff": ["-\t\t\tif (this.types[unresolvedTypeId] != null && this.types[unresolvedTypeId][0] == unresolvedType) { //$IDENTITY-COMPARISON$", "-\t\t\t\tresolvedType.id = unresolvedTypeId;", "-\t\t\t\tthis.types[unresolvedTypeId][0] = resolvedType;", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=432977", "+\t\t\tTypeBinding[] derivedTypes = this.types[unresolvedTypeId];", "+\t\t\tfor (int i = 0, length = derivedTypes == null ? 0 : derivedTypes.length; i < length; i++) {", "+\t\t\t\tif (derivedTypes[i] == null)", "+\t\t\t\t\tbreak;", "+\t\t\t\tif (derivedTypes[i] == unresolvedType) { //$IDENTITY-COMPARISON$", "+\t\t\t\t\tresolvedType.id = unresolvedTypeId;", "+\t\t\t\t\tderivedTypes[i] = resolvedType;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46550b20be1cc6759773d88e07cd3bc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "d57d057b9e029964391a7d18231884c456809f0a", "commitAfterChange": "a5db2eb78d347817bbf37d865afb84de837fdf1b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements, int includeMask)", "signatureAfterChange": " \tpublic static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements, int includeMask)", "diff": ["+\t\tHashSet projectsToBeAdded = new HashSet(2);", "+\t\tfor (int i = 0, length = elements.length; i < length; i++) {", "+\t\t\tIJavaElement element = elements[i];", "+\t\t\tif (element instanceof JavaProject) {", "+\t\t\t\tprojectsToBeAdded.add(element);", "+\t\t\t}", "+\t\t}", "-\t\tHashSet visitedProjects = new HashSet(2);", "-\t\t\t\t\tif (element instanceof JavaProject) {", "-\t\t\t\t\t\tscope.add((JavaProject)element, includeMask, visitedProjects);", "+\t\t\t\t\tif (projectsToBeAdded.remove(element)) {", "+\t\t\t\t\t\tscope.add((JavaProject)element, includeMask, projectsToBeAdded);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62312bc511f7ada6b52cec66b2e8f0ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "579829d4867b5583bfe72f32f009d0dbea13c114", "commitAfterChange": "330aeaad59d1633d10c0cd3a9ee9ac57073b385f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "signatureAfterChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "diff": ["-\t\tif (cachedTable != null)", "+\t\tif (cachedTable != null) {", "+\t\t\tif (readDocNumbers) { // must cache remaining document number arrays", "+\t\t\t\tObject[] arrayOffsets = cachedTable.valueTable;", "+\t\t\t\tfor (int i = 0, l = arrayOffsets.length; i < l; i++)", "+\t\t\t\t\tif (arrayOffsets[i] instanceof Integer)", "+\t\t\t\t\t\tarrayOffsets[i] = readDocumentNumbers(arrayOffsets[i]);", "+\t\t\t}", "+\t\t}", "-\t\tif (readDocNumbers)", "-\t\t\tmatchingWords = new char[size][];", "-\t\t\t\tif (matchingWords != null) {", "+\t\t\t\tif (readDocNumbers) {", "+\t\t\t\t\tif (matchingWords == null)", "+\t\t\t\t\t\tmatchingWords = new char[size][];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6542133070cda02e2111c4bd3f792aa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "10a59ab8fb6256e59e155c071a356402964eb736", "commitAfterChange": "bacbe6f6e994ffc49a94960691c76bff97cb04d5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate boolean squarePegInRoundHole(final MethodBinding sam)", "signatureAfterChange": "  \tprivate boolean squarePegInRoundHole(final MethodBinding sam)", "diff": ["+\t\tif (!argumentsTypeElided()) {", "+\t\t\tTypeBinding [] samPararameterTypes = sam.parameters;", "+\t\t\tfor (int i = 0, length = samPararameterTypes.length; i < length; i++) { // lengths known to be equal.", "+\t\t\t\tif (TypeBinding.notEquals(samPararameterTypes[i], this.argumentTypes[i]))", "+\t\t\t\t\treturn true;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fc4d3de334d2f2fa298bb7e00237a4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " public IResource getResource()", "signatureAfterChange": " public IResource getResource()", "diff": ["-\t\tString elementName = this.getElementName();", "-\t\tif (elementName.length() == 0) {", "+\t\tint length = this.names.length;", "+\t\tif (length == 0) {", "-\t\t\treturn ((IContainer)root.getResource()).getFolder(new Path(this.getElementName().replace('.', '/')));", "+\t\t\tIPath path = new Path(this.names[0]);", "+\t\t\tfor (int i = 1; i < length; i++)", "+\t\t\t\tpath = path.append(this.names[i]);", "+\t\t\treturn ((IContainer)root.getResource()).getFolder(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e00ef57f86417edf0c4d3faeea36cec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t\tprotected void sortDeltas(IJavaElementDelta[] elementDeltas)", "signatureAfterChange": " \t\tprotected void sortDeltas(IJavaElementDelta[] elementDeltas)", "diff": ["+\t\t\tfor (int i = 0, max = elementDeltas.length; i < max; i++) {", "+\t\t\t\tIJavaElementDelta delta = elementDeltas[i];", "+\t\t\t\tIJavaElementDelta[] children = delta.getAffectedChildren();", "+\t\t\t\tif (children != null) {", "+\t\t\t\t\tsortDeltas(children);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05a0fc18a41a36bbf358be75bfa78ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public IPath getPath()", "signatureAfterChange": " public IPath getPath()", "diff": ["-\t\treturn root.getPath().append(this.getElementName().replace('.', '/'));", "+\t\tIPath path = root.getPath();", "+\t\tfor (int i = 0, length = this.names.length; i < length; i++) {", "+\t\t\tString name = this.names[i];", "+\t\t\tpath = path.append(name);", "+\t\t}", "+\t\treturn path;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7c654e74ee8a0303eb853b24c82f382", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "e0224da700606ee4894293f10b71bd4b6b9d30f5", "commitAfterChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding capture(Scope scope, int position)", "signatureAfterChange": " \tpublic TypeBinding capture(Scope scope, int position)", "diff": ["+\t\tif ((this.tagBits & TagBits.HasDirectWildcard) == 0) ", "+\t\t\treturn this;", "+\t\t", "-\t\tif ((this.tagBits & TagBits.HasDirectWildcard) != 0) {", "-\t\t\tint length = originalArguments.length;", "-\t\t\tcapturedArguments = new TypeBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tTypeBinding argument = originalArguments[i];", "-\t\t\t\tif (argument.kind() == Binding.WILDCARD_TYPE) {", "-\t\t\t\t\tcapturedArguments[i] = ", "-\t\t\t\t\t\tnew CaptureBinding(", "-\t\t\t\t\t\t\t\t(WildcardBinding) argument, ", "-\t\t\t\t\t\t\t\tscope.enclosingSourceType().outermostEnclosingType(),", "-\t\t\t\t\t\t\t\tposition);", "-\t\t\t\t} else {", "-\t\t\t\t\tcapturedArguments[i] = argument;", "-\t\t\t\t}", "+\t\tint length = originalArguments.length;", "+\t\tcapturedArguments = new TypeBinding[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tTypeBinding argument = originalArguments[i];", "+\t\t\tif (argument.kind() == Binding.WILDCARD_TYPE) {", "+\t\t\t\tcapturedArguments[i] = ", "+\t\t\t\t\tnew CaptureBinding(", "+\t\t\t\t\t\t\t(WildcardBinding) argument, ", "+\t\t\t\t\t\t\tscope.enclosingSourceType().outermostEnclosingType(),", "+\t\t\t\t\t\t\tposition);", "+\t\t\t} else {", "+\t\t\t\tcapturedArguments[i] = argument;", "-\t\t\treturn this.environment.createParameterizedType(this.type, capturedArguments, enclosingType());", "+\t\t\tParameterizedTypeBinding capturedParameterizedType = this.environment.createParameterizedType(this.type, capturedArguments, enclosingType());", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeBinding argument = capturedArguments[i];", "+\t\t\t\tif (argument.isCapture()) {", "+\t\t\t\t\t((CaptureBinding)argument).initializeBounds(capturedParameterizedType);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn capturedParameterizedType;"]}], "num": 63071}
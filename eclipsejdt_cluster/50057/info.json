{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a774deb99469368a1997031f10a8087d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1175b037659027bbcd1b1ab06f22bb4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "b2caa750738c585e3970cd6cbdee229067bea596", "commitAfterChange": "8d1eb8a1ba1f8d42e85f057c2e74fe0db8cb690d", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic boolean visit(NullLiteral nullLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(StringLiteralConcetanation stringLiteral, BlockScope scope)", "diff": ["+\t */", "+\tpublic boolean visit(StringLiteralConcetanation stringLiteral, BlockScope scope) {", "+\t\tfinal int numberOfParens = (stringLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(stringLiteral, numberOfParens);", "+\t\t}", "+", "+\t\tthis.scribe.printComment();", "+\t\tASTNode[] fragments = stringLiteral.literals;", "+\t\tint fragmentsSize = stringLiteral.counter;", "+\t\tAlignment binaryExpressionAlignment = this.scribe.createAlignment(\"binaryExpressionAlignment\", this.preferences.alignment_for_binary_expression, Alignment.R_OUTERMOST, fragmentsSize, this.scribe.scanner.currentPosition); //$NON-NLS-1$", "+\t\tthis.scribe.enterAlignment(binaryExpressionAlignment);", "+\t\tboolean ok = false;", "+\t\tdo {", "+\t\t\ttry {", "+\t\t\t\tfor (int i = 0; i < fragmentsSize - 1; i++) {", "+\t\t\t\t\tASTNode fragment = fragments[i];", "+\t\t\t\t\tfragment.traverse(this, scope);", "+\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\tif (this.scribe.lastNumberOfNewLines == 1) {", "+\t\t\t\t\t\t// a new line has been inserted by printTrailingComment()", "+\t\t\t\t\t\tthis.scribe.indentationLevel = binaryExpressionAlignment.breakIndentationLevel;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.alignFragment(binaryExpressionAlignment, i);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamePLUS, this.preferences.insert_space_before_binary_operator);", "+\t\t\t\t\tif (this.preferences.insert_space_after_binary_operator) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tfragments[fragmentsSize - 1].traverse(this, scope);", "+\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\tok = true;", "+\t\t\t} catch(AlignmentException e){", "+\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t}", "+\t\t} while (!ok);\t\t", "+\t\tthis.scribe.exitAlignment(binaryExpressionAlignment, true);", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(stringLiteral, numberOfParens);", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71d8c26496c7fb69ffe050d7ee7b2b83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "d7b968f8074ad4e44b5a08309dcb414a4be941a4", "commitAfterChange": "b64275d5d6005c49a64e53460529203088ebb2bb", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " \tpublic boolean visit(LongLiteral longLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(LambdaExpression lambdaExpression, BlockScope scope)", "diff": ["+\t */", "+\tpublic boolean visit(LambdaExpression lambdaExpression, BlockScope scope) {", "+\t\t", "+\t\tfinal int numberOfParens = (lambdaExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(lambdaExpression, numberOfParens);", "+\t\t}", "+\t\tif (isNextToken(TerminalTokens.TokenNameLPAREN)) {", "+\t\t\t// Format arguments", "+\t\t\tformatMethodArguments(", "+\t\t\t\tlambdaExpression.arguments,", "+\t\t\t\tlambdaExpression.getScope(),", "+\t\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "+\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "+\t\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+\t\t} else {", "+\t\t\t// This MUST be a single, untyped parameter", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);", "+\t\t}", "+\t\tif (this.preferences.insert_space_before_lambda_arrow) this.scribe.space();", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameARROW);", "+\t\tif (this.preferences.insert_space_after_lambda_arrow) this.scribe.space();", "+\t\tif (lambdaExpression.body instanceof Block) {", "+\t\t\tformatBlock((Block) lambdaExpression.body, scope, this.preferences.brace_position_for_lambda_body, this.preferences.insert_space_before_opening_brace_in_block);", "+\t\t} else {", "+\t\t\tlambdaExpression.body.traverse(this, scope);", "+\t\t}", "+", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(lambdaExpression, numberOfParens);", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 50057}
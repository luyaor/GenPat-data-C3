{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "126863f12d3ca8377182adf7862f52da", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061779a8abe7b96956a76962f8675e70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "38835101c5cb5aa877400915ae93db40feae72e1", "commitAfterChange": "4007ad30c270c1323bfebe340590d44f8586e167", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testValidTypeName()", "signatureAfterChange": " \tpublic void testValidTypeName()", "diff": ["-\t\tassertTrue(\"type name should not contain slashes (1)\", JavaConventions.validateJavaTypeName(\"Object\\\\\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"type name should not contain slashes (2)\", JavaConventions.validateJavaTypeName(\"Object/\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"type name should not contain slashes (3)\", JavaConventions.validateJavaTypeName(\"\\\\Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"type name should not contain slashes (4)\", JavaConventions.validateJavaTypeName(\"java\\\\lang\\\\Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "+\t\tassertEquals(\"type name should not contain slashes (1)\", IStatus.ERROR, validate(\"Object\\\\\", JAVA_TYPE_NAME));", "+\t\tassertEquals(\"type name should not contain slashes (2)\", IStatus.ERROR, validate(\"Object/\", JAVA_TYPE_NAME));", "+\t\tassertEquals(\"type name should not contain slashes (3)\", IStatus.ERROR, validate(\"\\\\Object\", JAVA_TYPE_NAME));", "+\t\tassertEquals(\"type name should not contain slashes (4)\", IStatus.ERROR, validate(\"java\\\\lang\\\\Object\", JAVA_TYPE_NAME));", "-\t\tassertTrue(\"discouraged type names not handled\", JavaConventions.validateJavaTypeName(\"alowercasetypename\", sourceLevel, complianceLevel).getSeverity() == IStatus.WARNING);", "+\t\tassertEquals(\"discouraged type names not handled\", IStatus.WARNING, validate(\"alowercasetypename\", JAVA_TYPE_NAME));", "-\t\tassertTrue(\"unicode type name not handled\", JavaConventions.validateJavaTypeName(\"P\\\\u0065a\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"qualified type names not handled\", JavaConventions.validateJavaTypeName(\"java  .  lang\\t.Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"simple qualified type names not handled\", JavaConventions.validateJavaTypeName(\"java.lang.Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"simple type names not handled\", JavaConventions.validateJavaTypeName(\"Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"discouraged type names not handled\", JavaConventions.validateJavaTypeName(\"Object$SubType\", sourceLevel, complianceLevel).getSeverity() == IStatus.WARNING);", "-\t\tassertTrue(\"invalid type name not recognized\", JavaConventions.validateJavaTypeName(\"==?==\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "+\t\tassertEquals(\"unicode type name not handled\", IStatus.OK, validate(\"P\\\\u0065a\", JAVA_TYPE_NAME));", "+\t\tassertEquals(\"qualified type names not handled\", IStatus.OK, validate(\"java  .  lang\\t.Object\", JAVA_TYPE_NAME));", "+\t\tassertEquals(\"simple qualified type names not handled\", IStatus.OK, validate(\"java.lang.Object\", JAVA_TYPE_NAME));", "+\t\tassertEquals(\"simple type names not handled\", IStatus.OK, validate(\"Object\", JAVA_TYPE_NAME));", "+\t\tassertEquals(\"discouraged type names not handled\", IStatus.WARNING, validate(\"Object$SubType\", JAVA_TYPE_NAME));", "+\t\tassertEquals(\"invalid type name not recognized\", IStatus.ERROR, validate(\"==?==\", JAVA_TYPE_NAME));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11fa646dc839693c616a201a79b2dc72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testValidTypeName()", "signatureAfterChange": " \tpublic void testValidTypeName()", "diff": ["-\t\tassertTrue(\"type name should not contain slashes (1)\", JavaConventions.validateJavaTypeName(\"Object\\\\\").getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"type name should not contain slashes (2)\", JavaConventions.validateJavaTypeName(\"Object/\").getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"type name should not contain slashes (3)\", JavaConventions.validateJavaTypeName(\"\\\\Object\").getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"type name should not contain slashes (4)\", JavaConventions.validateJavaTypeName(\"java\\\\lang\\\\Object\").getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"type name should not contain slashes (1)\", JavaConventions.validateJavaTypeName(\"Object\\\\\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"type name should not contain slashes (2)\", JavaConventions.validateJavaTypeName(\"Object/\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"type name should not contain slashes (3)\", JavaConventions.validateJavaTypeName(\"\\\\Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"type name should not contain slashes (4)\", JavaConventions.validateJavaTypeName(\"java\\\\lang\\\\Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"discouraged type names not handled\", JavaConventions.validateJavaTypeName(\"alowercasetypename\").getSeverity() == IStatus.WARNING);", "+\t\tassertTrue(\"discouraged type names not handled\", JavaConventions.validateJavaTypeName(\"alowercasetypename\", sourceLevel, complianceLevel).getSeverity() == IStatus.WARNING);", "-\t\tassertTrue(\"unicode type name not handled\", JavaConventions.validateJavaTypeName(\"P\\\\u0065a\").getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"qualified type names not handled\", JavaConventions.validateJavaTypeName(\"java  .  lang\\t.Object\").getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"simple qualified type names not handled\", JavaConventions.validateJavaTypeName(\"java.lang.Object\").getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"simple type names not handled\", JavaConventions.validateJavaTypeName(\"Object\").getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"discouraged type names not handled\", JavaConventions.validateJavaTypeName(\"Object$SubType\").getSeverity() == IStatus.WARNING);", "-\t\tassertTrue(\"invalid type name not recognized\", JavaConventions.validateJavaTypeName(\"==?==\").getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"unicode type name not handled\", JavaConventions.validateJavaTypeName(\"P\\\\u0065a\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "+\t\tassertTrue(\"qualified type names not handled\", JavaConventions.validateJavaTypeName(\"java  .  lang\\t.Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "+\t\tassertTrue(\"simple qualified type names not handled\", JavaConventions.validateJavaTypeName(\"java.lang.Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "+\t\tassertTrue(\"simple type names not handled\", JavaConventions.validateJavaTypeName(\"Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "+\t\tassertTrue(\"discouraged type names not handled\", JavaConventions.validateJavaTypeName(\"Object$SubType\", sourceLevel, complianceLevel).getSeverity() == IStatus.WARNING);", "+\t\tassertTrue(\"invalid type name not recognized\", JavaConventions.validateJavaTypeName(\"==?==\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);"]}], "num": 71805}
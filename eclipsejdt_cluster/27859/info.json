{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f8fc1bb37a0f4e8ce66f1656427be10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3084adb24ea4993bd5a8d0eca767c8ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tASTParser(int level)", "signatureAfterChange": " \tASTParser(int level)", "diff": ["-\t\tif ((level != AST.JLS2_INTERNAL)", "-\t\t\t&& (level != AST.JLS3)) {", "-\t\t\tthrow new IllegalArgumentException();", "+\t\tswitch(level) {", "+\t\t\tcase AST.JLS2_INTERNAL:", "+\t\t\tcase AST.JLS3:", "+\t\t\tcase AST.JLS4:", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tthrow new IllegalArgumentException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b34c7aec2438848b6913943797c30626", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "de542d47e7857076ff550f4560e517bc0773f2ce", "commitAfterChange": "29901dd2faebfaef1b4d98d076ffc43db80ce6e9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\tif ((operationTypeID = (implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_JavaLangString || operationTypeID == T_JavaLangObject) {", "-\t\t\t// we enter here if the single name reference is a field of type java.lang.String or if the type of the ", "-\t\t\t// operation is java.lang.Object", "-\t\t\t// For example: o = o + \"\"; // where the compiled type of o is java.lang.Object.", "-\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "-\t\t\t// no need for generic cast on previous #getfield since using Object string buffer methods.\t\t\t", "-\t\t} else {", "-\t\t\t// promote the array reference to the suitable operation type", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t// generate the increment value (will by itself  be promoted to the operation value)", "-\t\t\tif (expression == IntLiteral.One){ // prefix operation", "-\t\t\t\tcodeStream.generateConstant(expression.constant, implicitConversion);\t\t\t", "-\t\t\t} else {", "-\t\t\t\texpression.generateCode(currentScope, codeStream, true);", "-\t\t\t}\t\t", "-\t\t\t// perform the operation", "-\t\t\tcodeStream.sendOperator(operator, operationTypeID);", "-\t\t\t// cast the value back to the array reference type", "-\t\t\tcodeStream.generateImplicitConversion(assignmentImplicitConversion);", "+\t\tswitch(operationTypeID = (implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) {", "+\t\t\tcase T_JavaLangString :", "+\t\t\tcase T_JavaLangObject :", "+\t\t\tcase T_undefined :", "+\t\t\t\t// we enter here if the single name reference is a field of type java.lang.String or if the type of the ", "+\t\t\t\t// operation is java.lang.Object", "+\t\t\t\t// For example: o = o + \"\"; // where the compiled type of o is java.lang.Object.", "+\t\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "+\t\t\t\t// no need for generic cast on previous #getfield since using Object string buffer methods.\t\t\t", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\t// promote the array reference to the suitable operation type", "+\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t// generate the increment value (will by itself  be promoted to the operation value)", "+\t\t\t\tif (expression == IntLiteral.One){ // prefix operation", "+\t\t\t\t\tcodeStream.generateConstant(expression.constant, implicitConversion);\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\texpression.generateCode(currentScope, codeStream, true);", "+\t\t\t\t}\t\t", "+\t\t\t\t// perform the operation", "+\t\t\t\tcodeStream.sendOperator(operator, operationTypeID);", "+\t\t\t\t// cast the value back to the array reference type", "+\t\t\t\tcodeStream.generateImplicitConversion(assignmentImplicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f614e11e831955e8bf812c1e39215034", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "de542d47e7857076ff550f4560e517bc0773f2ce", "commitAfterChange": "29901dd2faebfaef1b4d98d076ffc43db80ce6e9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\tif ((operationTypeID = (this.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_JavaLangString || operationTypeID == T_JavaLangObject) {", "-\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "-\t} else {", "-\t\t// promote the array reference to the suitable operation type", "-\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t// generate the increment value (will by itself  be promoted to the operation value)", "-\t\tif (expression == IntLiteral.One){ // prefix operation", "-\t\t\tcodeStream.generateConstant(expression.constant, this.implicitConversion);\t\t\t", "-\t\t} else {", "-\t\t\texpression.generateCode(currentScope, codeStream, true);", "-\t\t}\t\t", "-\t\t// perform the operation", "-\t\tcodeStream.sendOperator(operator, operationTypeID);", "-\t\t// cast the value back to the array reference type", "-\t\tcodeStream.generateImplicitConversion(assignmentImplicitConversion);", "+\tswitch(operationTypeID = (this.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) {", "+\t\tcase T_JavaLangString :", "+\t\tcase T_JavaLangObject :", "+\t\tcase T_undefined :", "+\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\t// promote the array reference to the suitable operation type", "+\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t// generate the increment value (will by itself  be promoted to the operation value)", "+\t\t\tif (expression == IntLiteral.One){ // prefix operation", "+\t\t\t\tcodeStream.generateConstant(expression.constant, this.implicitConversion);\t\t\t", "+\t\t\t} else {", "+\t\t\t\texpression.generateCode(currentScope, codeStream, true);", "+\t\t\t}\t\t", "+\t\t\t// perform the operation", "+\t\t\tcodeStream.sendOperator(operator, operationTypeID);", "+\t\t\t// cast the value back to the array reference type", "+\t\t\tcodeStream.generateImplicitConversion(assignmentImplicitConversion);"]}], "num": 27859}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fcac8efeac8af7d180629ef4925339f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c4936fae0bba1d0858575cbb4a20abe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f88c1fe220ded26227925e3745e5515c08409c5d", "commitAfterChange": "8f896a654035e16596d9bc3a2404427ff7b3145b", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tprivate void findEnumConstant(char[] enumConstantName, SwitchStatement switchStatement)", "signatureAfterChange": " \t \tprivate void findEnumConstantsFromSwithStatement(char[] enumConstantName, SwitchStatement switchStatement)", "diff": ["-\tprivate void findEnumConstant(char[] enumConstantName, SwitchStatement switchStatement) {", "-\t\tTypeBinding expressionType = switchStatement.expression.resolvedType;", "-\t\tif(expressionType != null && expressionType.isEnum()) {", "-\t\t\tReferenceBinding enumType = (ReferenceBinding) expressionType;", "-\t\t\tCaseStatement[] cases = switchStatement.cases;", "-\t\t\tchar[][] alreadyUsedConstants = new char[switchStatement.caseCount][];", "-\t\t\tint alreadyUsedConstantCount = 0;", "-\t\t\tfor (int i = 0; i < switchStatement.caseCount; i++) {", "-\t\t\t\tExpression caseExpression = cases[i].constantExpression;", "-\t\t\t\tif((caseExpression instanceof SingleNameReference)", "-\t\t\t\t\t\t&& (caseExpression.resolvedType != null && caseExpression.resolvedType.isEnum())) {", "-\t\t\t\t\talreadyUsedConstants[alreadyUsedConstantCount++] = ((SingleNameReference)cases[i].constantExpression).token;", "-\t\t\t\t}", "-\t\t\tFieldBinding[] fields = enumType.fields();", "-\t\t\tint enumConstantLength = enumConstantName.length;", "-\t\t\tnext : for (int f = fields.length; --f >= 0;) {\t\t\t", "-\t\t\t\tFieldBinding field = fields[f];", "-", "-\t\t\t\tif (field.isSynthetic()) continue next;", "-", "-\t\t\t\tif ((field.modifiers & Flags.AccEnum) == 0) continue next;", "-", "-\t\t\t\tif (enumConstantLength > field.name.length) continue next;", "-", "-\t\t\t\tif (!CharOperation.prefixEquals(enumConstantName, field.name, false /* ignore case */)", "-\t\t\t\t\t\t&& !(this.options.camelCaseMatch && CharOperation.camelCaseMatch(enumConstantName, field.name)))\tcontinue next;", "-\t\t\t\tchar[] completion = field.name;", "-\t\t\t\t", "-\t\t\t\tfor (int i = 0; i < alreadyUsedConstantCount; i++) {", "-\t\t\t\t\tif(CharOperation.equals(alreadyUsedConstants[i], completion)) continue next;", "-\t\t\t\t}", "-", "-\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\trelevance += computeRelevanceForInterestingProposal(field);", "-\t\t\t\trelevance += computeRelevanceForEnum();", "-\t\t\t\trelevance += computeRelevanceForCaseMatching(enumConstantName, field.name);", "-\t\t\t\trelevance += computeRelevanceForExpectingType(field.type);", "-\t\t\t\trelevance += computeRelevanceForQualification(false);", "-\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE);", "-\t\t\t\t", "-\t\t\t\tthis.noProposal = false;", "+\t", "+\tprivate void findEnumConstantsFromSwithStatement(char[] enumConstantName, SwitchStatement switchStatement) {", "+\t\tTypeBinding expressionType = switchStatement.expression.resolvedType;", "+\t\tif(expressionType != null && expressionType.isEnum()) {", "+\t\t\tReferenceBinding enumType = (ReferenceBinding) expressionType;", "+\t\t\t", "+\t\t\tCaseStatement[] cases = switchStatement.cases;", "+\t\t\t", "+\t\t\tchar[][] alreadyUsedConstants = new char[switchStatement.caseCount][];", "+\t\t\tint alreadyUsedConstantCount = 0;", "+\t\t\tfor (int i = 0; i < switchStatement.caseCount; i++) {", "+\t\t\t\tExpression caseExpression = cases[i].constantExpression;", "+\t\t\t\tif((caseExpression instanceof SingleNameReference)", "+\t\t\t\t\t\t&& (caseExpression.resolvedType != null && caseExpression.resolvedType.isEnum())) {", "+\t\t\t\t\talreadyUsedConstants[alreadyUsedConstantCount++] = ((SingleNameReference)cases[i].constantExpression).token;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tfindEnumConstants(", "+\t\t\t\t\tenumConstantName,", "+\t\t\t\t\tenumType,", "+\t\t\t\t\tnull /* doesn't need invocation scope */,", "+\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\talreadyUsedConstants,", "+\t\t\t\t\talreadyUsedConstantCount,", "+\t\t\t\t\tfalse);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b8bfd05e8f2690feada398511bc584", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] typeName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] simpleTypeName, \t\tchar[][] enclosingTypeNames, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "diff": ["-\t\tchar[] typeName,", "+\t\tchar[] simpleTypeName,", "+\t\tchar[][] enclosingTypeNames,", "-\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, typeName, '.');", "-\t\tchar[] completionName = fullyQualifiedName;", "-", "-\t\tif (this.knownTypes.containsKey(completionName)) return;", "-", "-\t\tthis.knownTypes.put(completionName, this);", "-", "+\t\tif (this.options.checkVisibility) {", "+\t\t\tif((modifiers & IConstants.AccPublic) == 0) {", "+\t\t\t\tif((modifiers & IConstants.AccPrivate) != 0) return;", "+\t\t\t\t", "+\t\t\t\tchar[] currentPackage = CharOperation.concatWith(this.unitScope.fPackage.compoundName, '.');", "+\t\t\t\tif(!CharOperation.equals(packageName, currentPackage)) return;", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\tboolean isQualified = true;", "+\t\tif(acceptedTypes == null) {", "+\t\t\tacceptedTypes = new ObjectVector();", "+\t\t}", "+\t\tacceptedTypes.add(new AcceptedType(packageName, simpleTypeName, enclosingTypeNames, modifiers, accessibility));", "+\t}", "-\t\tif (this.resolvingImports) {", "-\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, fullyQualifiedName);", "-\t\t} else {", "-\t\t\tif (mustQualifyType(packageName, typeName)) {", "-\t\t\t\tif (packageName == null || packageName.length == 0)", "-\t\t\t\t\tif (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)", "-\t\t\t\t\t\treturn; // ignore types from the default package from outside it", "-\t\t\t} else {", "-\t\t\t\tcompletionName = typeName;", "-\t\t\t\tisQualified = false;", "-\t\t\t}", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, typeName);", "-\t\t\trelevance += computeRelevanceForExpectingType(packageName, typeName);", "-\t\t\trelevance += computeRelevanceForQualification(isQualified);", "-\t\t\t", "-\t\t\tint kind = modifiers & (IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation);", "-\t\t\tswitch (kind) {", "-\t\t\t\tcase IConstants.AccAnnotation:", "-\t\t\t\tcase IConstants.AccAnnotation | IConstants.AccInterface:", "-\t\t\t\t\trelevance += computeRelevanceForAnnotation();", "-\t\t\t\t\trelevance += computeRelevanceForInterface();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IConstants.AccEnum:", "-\t\t\t\t\trelevance += computeRelevanceForEnum();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IConstants.AccInterface:", "-\t\t\t\t\trelevance += computeRelevanceForInterface();", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\trelevance += computeRelevanceForClass();", "-\t\t\t\t\trelevance += computeRelevanceForException(typeName);", "-\t\t\t\t\tbreak;", "-\t\t\t}"]}], "num": 41182}
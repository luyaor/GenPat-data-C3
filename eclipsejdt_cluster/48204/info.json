{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5c8f013ded44246cb36ba6d61303cf2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62ab733425235eff300e8900e7dbef4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 212, "signatureBeforeChange": " \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean insideTypeAnnotation, \t\tboolean insideAnnotationAttribute)", "signatureAfterChange": " \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean insideTypeAnnotation, \t\tboolean insideAnnotationAttribute)", "diff": ["-\t\t\t\t\t\t\t\t\tif (!(local.type instanceof BaseTypeBinding))", "+\t\t\t\t\t\t\t\t\tif (this.assistNodeIsString){", "+\t\t\t\t\t\t\t\t\t\tif (local.type == null || local.type.id != TypeIds.T_JavaLangString)", "+\t\t\t\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t\t\t} else if (!(local.type instanceof BaseTypeBinding))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0cd0994df50f8c6ac3b66803adb4c26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 142, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\t\t\t\tif (!(field.type instanceof BaseTypeBinding))", "+\t\t\t\t\tif (this.assistNodeIsString){", "+\t\t\t\t\t\tif (field.type == null || field.type.id != TypeIds.T_JavaLangString)", "+\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t} else if (!(field.type instanceof BaseTypeBinding))"]}], "num": 48204}
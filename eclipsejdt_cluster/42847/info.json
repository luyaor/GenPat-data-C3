{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "caf53ddcb16c05ec7fccf2e4f6927fc5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "184597d3b43dfe72e85891e8bf4a922c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "bc08a214a7dd82d4fa33bb61277cfaad2825deac", "commitAfterChange": "2208491f1e360e4237b8017b36c8fa0890474137", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\t\t\t\t} else if (currentArg.equals(\"jsr14\")) { //$NON-NLS-1$", "+\t\t\t\t} else if (currentArg.equals(\"1.8\") || currentArg.equals(\"8\") || currentArg.equals(\"8.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "+\t\t\t\t}", "+\t\t\t\telse if (currentArg.equals(\"jsr14\")) { //$NON-NLS-1$", "+\t\t\t\t} else if (currentArg.equals(\"1.8\") || currentArg.equals(\"8\") || currentArg.equals(\"8.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_8);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efd1c0f4788b8b09e89225f55369433c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "c7a9edf536467451ba659d7e03ac6c483c5c0cfe", "commitAfterChange": "e6bf96fd82847410c46479a652f4e58f9a6dd052", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "-\t\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"maskedCatchBlock\") || token.equals(\"maskedCatchBlocks\")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t} else if (token.equals(\"unusedLocals\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"unusedLocal\") || token.equals(\"unusedLocals\")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t} else if (token.equals(\"unusedArguments\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"unusedArgument\") || token.equals(\"unusedArguments\")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t} else if (token.equals(\"unusedImports\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"unusedImport\") || token.equals(\"unusedImports\")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t} else if (token.equals(\"unusedPrivate\")) { //$NON-NLS-1$", "+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);"]}], "num": 42847}
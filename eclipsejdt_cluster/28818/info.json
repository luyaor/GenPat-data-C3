{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "945175245d16bf58ee9963519d4272b3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1308143750bbe3134e50b500309b368a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/BuildListener.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "signatureAfterChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "diff": ["+\t\tHashSet<IFile> deletedFiles = new HashSet<IFile>();", "-\t\t\tAPTBuildResult result = APTDispatch.runAPTDuringBuild( ", "+\t\t\tAPTResult result = APTDispatch.runAPTDuringBuild( ", "-\t\t\tnewFiles.addAll( result.getNewFiles() );", "+\t\t\tnewFiles.addAll( result.getNewFiles() );\t\t\t", "+\t\t\tdeletedFiles.addAll( result.getDeletedFiles() );", "-\t\treturn new PreBuildCompilationResult( newFiles.toArray( new IFile[ newFiles.size() ] ), newDependencies ); ", "+\t\t// for apt, new files will always trump deleted files", "+\t\tfor ( IFile df : deletedFiles )", "+\t\t\tif ( newFiles.contains( df ) )", "+\t\t\t\tdeletedFiles.remove( df );", "+", "+\t\treturn new PreBuildCompilationResult( newFiles.toArray( new IFile[ newFiles.size() ] ), deletedFiles.toArray( new IFile[ deletedFiles.size() ] ), newDependencies ); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c2dc2a567de9f59205dd60eed58399", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "4b460199498c48cda44ce10125aa5901a10bff62", "commitAfterChange": "ccd12469d7fc21a8e1a0a597451a059df56002ad", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void testClassDeclaration(ClassDeclaration testClassDec)", "signatureAfterChange": " \tprivate void testClassDeclaration(ClassDeclaration testClassDec)", "diff": ["-\t\tProcessorTestStatus.assertEquals(\"Number of methods\", 2, methodDecls.size());", "+\t\tProcessorTestStatus.assertEquals(\"Number of methods\", 5, methodDecls.size());", "+\t\tHashSet<AnnotationMirror> annotationMirrors = new HashSet<AnnotationMirror>();", "+\t\tfor (MethodDeclaration methodDeclaration : methodDecls) {", "+\t\t\tCollection<AnnotationMirror> mirrors = methodDeclaration.getAnnotationMirrors();", "+\t\t\tannotationMirrors.addAll(mirrors);", "+\t\t}", "+\t\tProcessorTestStatus.assertEquals(\"Wrong size for annotation mirrors\", 3, annotationMirrors.size());", "+\t\t", "-\t\tProcessorTestStatus.assertEquals(\"Object is only super\", \"java.lang.Object\", superClass.toString());\t", "+\t\tProcessorTestStatus.assertEquals(\"Object is only super\", \"java.lang.Object\", superClass.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9563c1a4e716b323e22537fd9a01eff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "972920d1a43cd2d33dad1368881c9bfce5835a88", "commitAfterChange": "b8436cec91c88fa7fc7b0bd6dedc9fb67e331ccc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate synchronized boolean checkIntegrity() throws IllegalStateException", "signatureAfterChange": " \tprivate synchronized boolean checkIntegrity() throws IllegalStateException", "diff": ["+\t\t// Every file in _clearDuringReconcile must be a value in _buildDeps.", "+\t\tList<IFile> extraClearDuringReconcileFiles = new ArrayList<IFile>();", "+\t\tfor (IFile clearDuringReconcile : _clearDuringReconcile) {", "+\t\t\tif (!_buildDeps.containsValue(clearDuringReconcile)) {", "+\t\t\t\textraClearDuringReconcileFiles.add(clearDuringReconcile);", "+\t\t\t}", "+\t\t}", "+\t\tif (!extraClearDuringReconcileFiles.isEmpty()) {", "+\t\t\tlogExtraFiles(\"File(s) in list to clear during reconcile but not in build dependency map: \", //$NON-NLS-1$", "+\t\t\t\t\textraClearDuringReconcileFiles);", "+\t\t}", "+\t\t"]}], "num": 28818}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab2b20d8df8cb31bf009ee8c96d3fe54", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87ed5e97d3ece103986994680e9cdfb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "594cd83ff88684fe048c67afeebfbae2953dc7be", "commitAfterChange": "253974b8e0badc35a364b079060f4bef219ede16", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tprivate void updateClasspathMarkers(Map preferredClasspaths, Map preferredOutputs)", "signatureAfterChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta)", "diff": ["-\tprivate void updateClasspathMarkers(Map preferredClasspaths, Map preferredOutputs) {", "+\tprivate void updateClasspathMarkers(IResourceDelta delta) {", "-\t\tif (!this.rootsToRefresh.isEmpty()) {", "+\t\tMap preferredClasspaths = new HashMap(5);", "+\t\tMap preferredOutputs = new HashMap(5);", "+\t\tHashSet affectedProjects = new HashSet(5);", "+\t\t", "+\t\t// read .classpath files that have changed, and create markers if format is wrong", "+\t\tupdateClasspathMarkers(delta, affectedProjects, preferredClasspaths, preferredOutputs); ", "+", "+\t\tif (!affectedProjects.isEmpty()) {", "-\t\t\t\tif (!ResourcesPlugin.getWorkspace().isAutoBuilding()) {", "-\t\t\t\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\t\t\t\tIProject[] projects = workspaceRoot.getProjects();", "-\t\t\t\t\tint length = projects.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++){", "-\t\t\t\t\t\tIProject project = projects[i];", "-\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true); // allowed to reuse model cache", "-\t\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "-\t\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && this.rootsToRefresh.contains(entry.getPath())) {", "-\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "+\t\t\t\tIProject[] projects = workspaceRoot.getProjects();", "+\t\t\t\tint length = projects.length;", "+\t\t\t\tfor (int i = 0; i < length; i++){", "+\t\t\t\t\tIProject project = projects[i];", "+\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tIPath projectPath = project.getFullPath();", "+\t\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true); // allowed to reuse model cache", "+\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "+\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\t\t\tswitch (entry.getEntryKind()) {", "+\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:", "+\t\t\t\t\t\t\t\t\t\tif (affectedProjects.contains(entry.getPath())) {", "+\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\t\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\t\t\t\t\t\tIPath libProjectPath = entryPath.removeLastSegments(entryPath.segmentCount()-1);", "+\t\t\t\t\t\t\t\t\t\tif (!libProjectPath.equals(projectPath) // if library contained in another project", "+\t\t\t\t\t\t\t\t\t\t\t\t&& affectedProjects.contains(libProjectPath)) {", "+\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t\t\t\t\t\t// project no longer exists", "+\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\t\t// project no longer exists", "-\t\t\t\t\t// project no longer exists", "-\t\t\t} finally {", "-\t\t\t\tthis.rootsToRefresh = new HashSet();", "+\t\t\t\t// project no longer exists"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9039a1b569e218c6cefc309ae8be0ebb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": " \tpublic static void updateAllCycleMarkers() throws JavaModelException", "signatureAfterChange": " \tpublic static void updateAllCycleMarkers(Map preferredClasspaths) throws JavaModelException", "diff": ["-\tpublic static void updateAllCycleMarkers() throws JavaModelException {", "+\tpublic static void updateAllCycleMarkers(Map preferredClasspaths) throws JavaModelException {", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tIJavaProject[] projects = manager.getJavaModel().getJavaProjects();", "-", "+\t\tIProject[] rscProjects = workspaceRoot.getProjects();", "+\t\tint length = rscProjects.length;", "+\t\tJavaProject[] projects = new JavaProject[length];", "+\t\t\t\t", "-\t\tint length = projects.length;", "-\t\t\tJavaProject project = (JavaProject)projects[i];", "-\t\t\tif (!traversed.contains(project.getPath())){", "-\t\t\t\tprereqChain.clear();", "-\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, traversed);", "+\t\t\tif (hasJavaNature(rscProjects[i])) {", "+\t\t\t\tJavaProject project = (projects[i] = (JavaProject)JavaCore.create(rscProjects[i]));", "+\t\t\t\tif (!traversed.contains(project.getPath())){", "+\t\t\t\t\tprereqChain.clear();", "+\t\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, traversed, preferredClasspaths);", "+\t\t\t\t}", "-\t\t\tJavaProject project = (JavaProject)projects[i];", "-\t\t\t", "-\t\t\tif (cycleParticipants.contains(project.getPath())){", "-\t\t\t\tIMarker cycleMarker = project.getCycleMarker();", "-\t\t\t\tString circularCPOption = project.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH, true);", "-\t\t\t\tint circularCPSeverity = JavaCore.ERROR.equals(circularCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING;", "-\t\t\t\tif (cycleMarker != null) {", "-\t\t\t\t\t// update existing cycle marker if needed", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tint existingSeverity = ((Integer)cycleMarker.getAttribute(IMarker.SEVERITY)).intValue();", "-\t\t\t\t\t\tif (existingSeverity != circularCPSeverity) {", "-\t\t\t\t\t\t\tcycleMarker.setAttribute(IMarker.SEVERITY, circularCPSeverity);", "+\t\t\tJavaProject project = projects[i];", "+\t\t\tif (project != null) {", "+\t\t\t\tif (cycleParticipants.contains(project.getPath())){", "+\t\t\t\t\tIMarker cycleMarker = project.getCycleMarker();", "+\t\t\t\t\tString circularCPOption = project.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH, true);", "+\t\t\t\t\tint circularCPSeverity = JavaCore.ERROR.equals(circularCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING;", "+\t\t\t\t\tif (cycleMarker != null) {", "+\t\t\t\t\t\t// update existing cycle marker if needed", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tint existingSeverity = ((Integer)cycleMarker.getAttribute(IMarker.SEVERITY)).intValue();", "+\t\t\t\t\t\t\tif (existingSeverity != circularCPSeverity) {", "+\t\t\t\t\t\t\t\tcycleMarker.setAttribute(IMarker.SEVERITY, circularCPSeverity);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// create new marker", "+\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\tnew JavaModelStatus(IJavaModelStatusConstants.CLASSPATH_CYCLE, project)); ", "-\t\t\t\t\t// create new marker", "-\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\tnew JavaModelStatus(IJavaModelStatusConstants.CLASSPATH_CYCLE, project)); ", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tproject.flushClasspathProblemMarkers(true, false);", "-\t\t\t}\t\t\t", "+\t\t\t\t\tproject.flushClasspathProblemMarkers(true, false);", "+\t\t\t\t}\t\t\t", "+\t\t\t}"]}], "num": 27715}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c59de1a28e32af2cb7b0e641a0ebb25", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "927124f5f804fc28a419b9d1ff80721f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "377267c7b8a2a28bb5624532c958378e4aa9d9fb", "commitAfterChange": "bac18f086dd9a87e1d5b6dea3b31ca1c92463a84", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tif (this.haveReceiver) {", "-\t\t\tthis.lhs.generateCode(currentScope, codeStream, true);", "-\t\t}", "+\t\tint argumentsSize = 0;", "+\t\t\tthis.lhs.generateCode(currentScope, codeStream, true);", "+\t\t\targumentsSize = 1;", "+\t\t} else {", "+\t\t\tif (this.isConstructorReference() && this.receiverType.isNestedType()) {", "+\t\t\t\tNestedTypeBinding nestedType = (NestedTypeBinding) this.receiverType;", "+\t\t\t\tReferenceBinding[] syntheticArgumentTypes;", "+\t\t\t\tif ((syntheticArgumentTypes = nestedType.syntheticEnclosingInstanceTypes()) != null) {", "+\t\t\t\t\tint length = syntheticArgumentTypes.length;", "+\t\t\t\t\targumentsSize = length;", "+\t\t\t\t\tfor (int i = 0 ; i < length; i++) {", "+\t\t\t\t\t\tReferenceBinding syntheticArgumentType = syntheticArgumentTypes[i];", "+\t\t\t\t\t\tbuffer.append(syntheticArgumentType.signature());", "+\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(", "+\t\t\t\t\t\t\t\tsyntheticArgumentType,", "+\t\t\t\t\t\t\t\tfalse /* allow compatible match */,", "+\t\t\t\t\t\t\t\ttrue /* disallow instance reference in explicit constructor call */);", "+\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, syntheticArgumentType, currentScope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\tcodeStream.invokeDynamic(invokeDynamicNumber, this.haveReceiver ? 1 : 0, 1, LAMBDA, buffer.toString().toCharArray());", "+\t\tcodeStream.invokeDynamic(invokeDynamicNumber, argumentsSize, 1, LAMBDA, buffer.toString().toCharArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2d7cfb75f39b9b5916c12e84f53078d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "f0d98c4f580c534cd9bb9d201adb77ab90eafc65", "commitAfterChange": "44beb229da7acf29f8209404ea1120f9422c2f4a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tint invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);", "-\t\t\tif (this.isConstructorReference() && this.receiverType.isNestedType()) {", "-\t\t\t\tNestedTypeBinding nestedType = (NestedTypeBinding) this.receiverType;", "-\t\t\t\tReferenceBinding[] syntheticArgumentTypes;", "-\t\t\t\tif ((syntheticArgumentTypes = nestedType.syntheticEnclosingInstanceTypes()) != null) {", "-\t\t\t\t\tint length = syntheticArgumentTypes.length;", "-\t\t\t\t\targumentsSize = length;", "-\t\t\t\t\tfor (int i = 0 ; i < length; i++) {", "-\t\t\t\t\t\tReferenceBinding syntheticArgumentType = syntheticArgumentTypes[i];", "-\t\t\t\t\t\tbuffer.append(syntheticArgumentType.signature());", "-\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(", "-\t\t\t\t\t\t\t\tsyntheticArgumentType,", "-\t\t\t\t\t\t\t\tfalse /* allow compatible match */,", "-\t\t\t\t\t\t\t\ttrue /* disallow instance reference in explicit constructor call */);", "-\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, syntheticArgumentType, currentScope);", "+\t\t\tif (this.isConstructorReference()) {", "+\t\t\t\tReferenceBinding[] enclosingInstances = Binding.UNINITIALIZED_REFERENCE_TYPES;", "+\t\t\t\tif (this.receiverType.isNestedType()) {", "+\t\t\t\t\tNestedTypeBinding nestedType = (NestedTypeBinding) this.receiverType;", "+\t\t\t\t\tif ((enclosingInstances = nestedType.syntheticEnclosingInstanceTypes()) != null) {", "+\t\t\t\t\t\tint length = enclosingInstances.length;", "+\t\t\t\t\t\targumentsSize = length;", "+\t\t\t\t\t\tfor (int i = 0 ; i < length; i++) {", "+\t\t\t\t\t\t\tReferenceBinding syntheticArgumentType = enclosingInstances[i];", "+\t\t\t\t\t\t\tbuffer.append(syntheticArgumentType.signature());", "+\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(", "+\t\t\t\t\t\t\t\t\tsyntheticArgumentType,", "+\t\t\t\t\t\t\t\t\tfalse /* allow compatible match */,", "+\t\t\t\t\t\t\t\t\ttrue /* disallow instance reference in explicit constructor call */);", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, syntheticArgumentType, currentScope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t// Reject types that capture outer local arguments, these cannot be manufactured by the metafactory.", "+\t\t\t\t\tif (nestedType.syntheticOuterLocalVariables() != null) {", "+\t\t\t\t\t\tcurrentScope.problemReporter().noSuchEnclosingInstance(nestedType.enclosingType, this, false);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (this.syntheticAccessor != null) {", "+\t\t\t\t\tthis.binding = sourceType.addSyntheticFactoryMethod(this.binding, this.syntheticAccessor, enclosingInstances);", "+\t\tint invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);", "+\t}"]}], "num": 41477}
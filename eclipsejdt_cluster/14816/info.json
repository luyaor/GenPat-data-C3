{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45afa8a3126c90f5db1d4b5b1e73fee4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a40f935f1493185c4831e022f824c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "09e6a0d689d92bccdede36cccd43932276d7e4d3", "commitAfterChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public MethodBinding getSingleAbstractMethod(Scope scope)", "signatureAfterChange": " public MethodBinding getSingleAbstractMethod(Scope scope)", "diff": ["-\t\t\tif (!MethodVerifier.isParameterSubsignature(method, otherMethod, environment) || !MethodVerifier.areReturnTypesCompatible(method, otherMethod, environment)) ", "+\t\t\t", "+\t\t\tif (genericMethodSeen) { // adapt type parameters.", "+\t\t\t\totherMethod = MethodVerifier.computeSubstituteMethod(otherMethod, method, environment);", "+\t\t\t\tif (otherMethod == null)", "+\t\t\t\t\tcontinue next;", "+\t\t\t}", "+\t\t\tif (!MethodVerifier.isSubstituteParameterSubsignature(method, otherMethod, environment) || !MethodVerifier.areReturnTypesCompatible(method, otherMethod, environment)) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "266170663d3906c35a5e2477c9d1834d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a52f17f8883dd812875c341ff752527a9011d961", "commitAfterChange": "b79c86afbec252e4061e220059353bed4588479c", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": " \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, InvocationSite site)", "signatureAfterChange": " \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, InvocationSite site)", "diff": ["-\t\t\tint inferenceKind = InferenceContext18.CHECK_UNKNOWN;", "+\t\t\tint inferenceKind = InferenceContext18.CHECK_STRICT;", "-\t\t\t\tinferenceKind = ((ReferenceExpression) site).inferenceKind;", "+\t\t\t\tReferenceExpression referenceExpression = (ReferenceExpression) site;", "+\t\t\t\tcontext = referenceExpression.getInferenceContext((ParameterizedGenericMethodBinding) method);", "+\t\t\t\tif (context != null)", "+\t\t\t\t\tinferenceKind = context.inferenceKind;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae0e272c3e4110da62e34f6f8dd0ff42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/LineBreaksPreparator.java", "commitBeforeChange": "2e56c16c054ee89ad0380a5a606694122f7187a1", "commitAfterChange": "9120b6c49a4b36e25b20147789ffde03aca85f97", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(ArrayInitializer node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(ArrayInitializer node)", "diff": ["-\t\tboolean isEmpty = handleEmptyLinesIndentation(openBraceIndex);", "-", "+", "+\t\tboolean isEmpty = openBraceIndex + 1 == closeBraceIndex;", "+\t\tif (isEmpty) {", "+\t\t\taddEmptyLineTokenAfter(openBraceIndex);", "+\t\t\tcloseBraceIndex = this.tm.lastIndexIn(node, TokenNameRBRACE);", "+\t\t}", "+"]}], "num": 14816}
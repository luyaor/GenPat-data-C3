{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c421eec2bfce0fb25a7d7e710102583", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64afa3d37038fe6ff8e762a3ec076ce5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestUtil.java", "commitBeforeChange": "78c270cb0e8bf81b3b471a8bdedbb8d9bf04e016", "commitAfterChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \t  \tpublic static void addLibraryEntry(IJavaProject project, IPath path, IPath srcAttachmentPath, IPath srcAttachmentPathRoot, boolean exported) throws JavaModelException", "signatureAfterChange": " \t \t \tpublic static void addLibraryEntry(IJavaProject project, IPath path, IPath srcAttachmentPath, IPath srcAttachmentPathRoot, boolean exported) throws JavaModelException", "diff": ["-", "+\t\tIClasspathEntry newPathEntry = JavaCore.newLibraryEntry(", "+\t\t\t\tpath, ", "+\t\t\t\tsrcAttachmentPath, ", "+\t\t\t\tsrcAttachmentPathRoot, ", "+\t\t\t\texported); ", "+\t\tfor(int i = 0; i < length; i++) {", "+\t\t\t//check for duplicates (Causes JavaModelException) - return if path already exists", "+\t\t\tif(newPathEntry.equals(entries[i]))", "+\t\t\t\treturn;", "+\t\t}", "-\t\tentries[0] = JavaCore.newLibraryEntry(", "-\t\t\tpath, ", "-\t\t\tsrcAttachmentPath, ", "-\t\t\tsrcAttachmentPathRoot, ", "-\t\t\texported);", "+\t\tentries[0] = newPathEntry;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf18c1cb573361d8af981ebfbe1f605c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "43c7d834579a78e14e74d42ff9708daa5f74ded5", "commitAfterChange": "c5fca7ef6c294c6139aba614099e9d98b3db43cc", "methodNumberBeforeChange": 295, "methodNumberAfterChange": 295, "signatureBeforeChange": " protected void consumeLambdaExpression()", "signatureAfterChange": " protected void consumeLambdaExpression()", "diff": ["+\tfor (int i = 0; i < length; i++) {", "+\t\tif (arguments[i].isReceiver()) {", "+\t\t\tproblemReporter().illegalThis(arguments[i]);", "+\t\t}", "+\t}"]}], "num": 11632}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca62dfa0d33c26fad7c186431a8ad643", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94a44f346ad0959c59f6f49da8dd4e07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "90ab26b26139b04c1b21341903f9bda9323cd1a1", "commitAfterChange": "63bda44d804d11c0afa7e8111644ceeb5480e759", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\tint varArgDimension = varArgType.dimensions();", "-\t\t\t\t\tint lastArgDimensions = lastArgument.dimensions();", "-\t\t\t\t\tif (varArgDimension == lastArgDimensions || varArgDimension - 1 == lastArgDimensions) {", "-\t\t\t\t\t\tvarArgType = varArgType.leafComponentType();", "-\t\t\t\t\t\tlastArgument = lastArgument.leafComponentType();", "-\t\t\t\t\t\tif (varArgType != lastArgument && !lastArgument.isCompatibleWith(varArgType))", "+\t\t\t\t\tif (varArgType != lastArgument && !lastArgument.isCompatibleWith(varArgType)) {", "+\t\t\t\t\t\t// expect X[], called with X", "+\t\t\t\t\t\tvarArgType = ((ArrayBinding) varArgType).elementsType();", "+\t\t\t\t\t\tif (!lastArgument.isCompatibleWith(varArgType))", "-\t\t\t\t\t} else { // dimensions are not compatible", "-\t\t\t\t\t\tbreak argumentCompatibility;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4f4148ebf890428f7434488bb8f79f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "629a3f65ab389a5cfc8b01a51ec0ef547bc3adfe", "commitAfterChange": "a93dad39ef275bbf6417bb0529204b9a1aeb09b1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif(actualReceiverType instanceof ReferenceBinding) {", "-\t\t\t\t// record any selector match, for clients who may still need hint about possible method match", "-\t\t\t\tint resolvedCount = 0;", "-\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\tif (argumentTypes[i] != null)", "-\t\t\t\t\t\tresolvedCount++;", "-\t\t\t\tTypeBinding[] knownArgs = new TypeBinding[resolvedCount];", "+\t\t\tif (actualReceiverType instanceof ReferenceBinding) {", "+\t\t\t\t//  record a best guess, for clients who need hint about possible method match", "+\t\t\t\tTypeBinding[] pseudoArgs = new TypeBinding[length];", "-\t\t\t\t\tif (argumentTypes[i] != null)", "-\t\t\t\t\t\tknownArgs[--resolvedCount] = argumentTypes[i];", "-\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding)actualReceiverType, selector, knownArgs, this);", "-\t\t\t}\t\t\t", "+\t\t\t\t\tpseudoArgs[i] = argumentTypes[i] == null ? actualReceiverType : argumentTypes[i]; // replace args with errors with receiver", "+\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding) actualReceiverType, selector, pseudoArgs, this);", "+\t\t\t}"]}], "num": 65953}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f859930f37d447372b6aa4e58ef56bc0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43842fa54ce0eedd6363250f17296c00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void testClasspathNoChanges() throws CoreException", "signatureAfterChange": " public void testClasspathNoChanges() throws CoreException", "diff": ["-", "-", "-//\t\ttry {", "-//\t\t\tjava.io.File file = p.getProject().getFile(JavaProject.CLASSPATH_FILENAME).getLocation().toFile();", "-//\t\t\tif (file.exists()){", "-//\t\t\t\tchar[] classpath = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(file, \"UTF-8\");", "-//\t\t\t\tSystem.out.println(new String(classpath));", "-//\t\t\t}", "-//\t\t} catch(java.io.IOException e){", "-//\t\t}", "-", "-\t\tStringBuffer buffer = new StringBuffer(10);", "-\t\tfor (int i = 0; i < this.deltaListener.deltas.length; i++){", "-\t\t\tbuffer.append(this.deltaListener.deltas[i].toString()).append('\\n');", "-\t\t}", "-\t\tassertEquals(\"No deltas should be generated for the same classpath\", \"\", buffer.toString());", "+\t\tassertDeltas(\"Unexpected delta\", \"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917e9062f5bbbbc894b74d76b4495637", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "commitAfterChange": "0768a01c46bf55c1ad1aefdbfa14c12019b43872", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tprotected void assertStringsEqual(String message, String expected, String[] strings)", "signatureAfterChange": " \tprotected void assertStringsEqual(String message, String expected, String[] strings)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tfor (int i = 0; i < strings.length; i++){", "-\t\t\tbuffer.append(strings[i]);", "-\t\t\tbuffer.append(\"\\n\");", "+\t\tString actual = toString(strings, true/*add extra new lines*/);", "+\t\tif (!expected.equals(actual)) {", "+\t\t\tSystem.out.println(displayString(actual, 3) + this.endChar);", "-\t\tString actual = buffer.toString();", "+\t\tassertEquals(message, expected, actual);", "+\t}"]}], "num": 14448}
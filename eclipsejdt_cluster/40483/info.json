{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2ca4d8636a7a019708c58766e86bb1c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7280f4e255a229683711e76cf66a31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 887, "methodNumberAfterChange": 887, "signatureBeforeChange": " public void test0867()", "signatureAfterChange": " public void test0867()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 20)\\n\" +", "-\t\t\"\tList<List> o = Foo.foo1();\\n\" +", "-\t\t\"\t     ^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 20)\\n\" +", "-\t\t\"\tList<List> o = Foo.foo1();\\n\" +", "-\t\t\"\t                   ^^^^\\n\" +", "-\t\t\"The method foo1() in the type Foo is not applicable for the arguments ()\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 21)\\n\" +", "-\t\t\"\tFoo.bar1(o);\\n\" +", "-\t\t\"\t    ^^^^\\n\" +", "-\t\t\"The method bar1(List<List<T>>) in the type Foo is not applicable for the arguments (List<List>)\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 24)\\n\" +", "-\t\t\"\tList o = Foo.foo2();\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 25)\\n\" +", "-\t\t\"\tFoo.bar2(o);\\n\" +", "-\t\t\"\t^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar2(List) of the generic method bar2(List<T>) of type Foo\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 25)\\n\" +", "-\t\t\"\tFoo.bar2(o);\\n\" +", "-\t\t\"\t         ^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tList<List> o = Foo.foo1();\\n\" + ", "+\t\t\"\t     ^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\"\tList<List> o = Foo.foo1();\\n\" + ", "+\t\t\"\t                   ^^^^\\n\" + ", "+\t\t\"The method foo1() in the type Foo is not applicable for the arguments ()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\"\tFoo.bar1(o);\\n\" + ", "+\t\t\"\t    ^^^^\\n\" + ", "+\t\t\"The method bar1(List<List<T>>) in the type Foo is not applicable for the arguments (List<List>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 24)\\n\" + ", "+\t\t\"\tList o = Foo.foo2();\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 25)\\n\" + ", "+\t\t\"\tFoo.bar2(o);\\n\" + ", "+\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar2(List) of the generic method bar2(List<T>) of type Foo\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 25)\\n\" + ", "+\t\t\"\tFoo.bar2(o);\\n\" + ", "+\t\t\"\t         ^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Runnable>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce64904d6cc2f4c259dd9d8be5a2eba6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1035, "methodNumberAfterChange": 1035, "signatureBeforeChange": " public void test1011()", "signatureAfterChange": " public void test1011()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "-\t\t\"\tvoid foo(HashMap map, String s, Map<String,String> map2) {\\n\" +", "-\t\t\"\t         ^^^^^^^\\n\" +", "-\t\t\"HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tbar(map, s, map2); //1\\n\" +", "-\t\t\"\t^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar(Map, Object, Map) of the generic method bar(Map<U,U>, U, Map<U,U>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tbar(map, s, map2); //1\\n\" +", "-\t\t\"\t    ^^^\\n\" +", "-\t\t\"Type safety: The expression of type HashMap needs unchecked conversion to conform to Map<U,U>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 6)\\n\" +", "-\t\t\"\tbar2(map, s, map2); //3\\n\" +", "-\t\t\"\t     ^^^\\n\" +", "-\t\t\"Type safety: The expression of type HashMap needs unchecked conversion to conform to Map<String,String>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 7)\\n\" +", "-\t\t\"\tbar3(map, s, map2); //4\\n\" +", "-\t\t\"\t     ^^^\\n\" +", "-\t\t\"Type safety: The expression of type HashMap needs unchecked conversion to conform to Map<String,String>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tvoid foo(HashMap map, String s, Map<String,String> map2) {\\n\" + ", "+\t\t\"\t         ^^^^^^^\\n\" + ", "+\t\t\"HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tbar(map, s, map2); //1\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar(HashMap, String, Map<String,String>) of the generic method bar(Map<U,U>, U, Map<U,U>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tbar(map, s, map2); //1\\n\" + ", "+\t\t\"\t    ^^^\\n\" + ", "+\t\t\"Type safety: The expression of type HashMap needs unchecked conversion to conform to Map<String,String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tbar2(map, s, map2); //3\\n\" + ", "+\t\t\"\t     ^^^\\n\" + ", "+\t\t\"Type safety: The expression of type HashMap needs unchecked conversion to conform to Map<String,String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tbar3(map, s, map2); //4\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar3(HashMap, String, Map<String,String>) of the generic method bar3(Map<String,String>, U, Map<U,U>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tbar3(map, s, map2); //4\\n\" + ", "+\t\t\"\t     ^^^\\n\" + ", "+\t\t\"Type safety: The expression of type HashMap needs unchecked conversion to conform to Map<String,String>\\n\" + "]}], "num": 40483}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdf0ef2e2a24ef06f0d2efae9549fa90", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69fdfa79dba7a0f018384e63efe47fe2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMType.java", "commitBeforeChange": "0e5ccea62c4a156cded8b69c3d23ada9782b2b7b", "commitAfterChange": "45f363221504243f87ba612b5fa2787cfaa05c75", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r void normalize(ILineStartFinder finder)", "signatureAfterChange": "\r void normalize(ILineStartFinder finder)", "diff": ["-\tint openBodyEnd, closeBodyStart;\r", "+\tint openBodyEnd, openBodyStart, closeBodyStart, closeBodyEnd;\r", "-\tcloseBodyStart = fCloseBodyRange[1];\r", "-\tif (isDetailed()) {\r", "-\t\tif (first == null) {\r", "-\t\t\topenBodyEnd = fCloseBodyRange[0] - 1;\r", "+\tDOMNode lastNode = null;\r", "+\t// look for the open body\r", "+\tScanner scanner = new Scanner();\r", "+\tscanner.setSourceBuffer(fDocument);\r", "+\tscanner.resetTo(fNameRange[1] + 1, fDocument.length);\r", "+\t\r", "+\ttry {\r", "+\t\tint currentToken = scanner.getNextToken();\r", "+\t\twhile(currentToken != TerminalSymbols.TokenNameLBRACE &&\r", "+\t\t\t\tcurrentToken != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\tcurrentToken = scanner.getNextToken();\r", "+\t\t}\r", "+\t\tif(currentToken == TerminalSymbols.TokenNameLBRACE) {\t\t\r", "+\t\t\topenBodyEnd = scanner.currentPosition - 1;\r", "+\t\t\topenBodyStart = scanner.startPosition;\r", "-\t\t\topenBodyEnd = first.getStartPosition();\r", "-\t\t\tint lineStart = finder.getLineStart(openBodyEnd);\r", "-\t\t\topenBodyEnd--;\r", "-\t\t\tif (lineStart > fOpenBodyRange[0])\r", "-\t\t\t\topenBodyEnd = lineStart - 1;\r", "+\t\t\topenBodyEnd = fDocument.length;\r", "+\t\t\topenBodyStart = fDocument.length;\r", "+\t\t}\r", "+\t} catch(InvalidInputException e) {\r", "+\t\topenBodyEnd = fDocument.length;\r", "+\t\topenBodyStart = fDocument.length;\r", "+\t}\r", "+\tif (first != null) {\r", "+\t\tint lineStart = finder.getLineStart(first.getStartPosition());\r", "+\t\tif (lineStart > openBodyEnd) {\r", "+\t\t\topenBodyEnd = lineStart - 1;\r", "+\t\t} else {\r", "+\t\t\topenBodyEnd = first.getStartPosition() - 1;\r", "+\t\t}\t\t\r", "+\t\tlastNode = (DOMNode) first.getNextNode();\r", "+\t\tif (lastNode == null) {\r", "+\t\t\tlastNode = first;\r", "+\t\t} else {\r", "+\t\t\twhile (lastNode.getNextNode() != null) {\r", "+\t\t\t\tlastNode = (DOMNode) lastNode.getNextNode();\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tscanner.setSourceBuffer(fDocument);\r", "+\t\tscanner.resetTo(lastNode.getEndPosition() + 1, fDocument.length);\r", "+\t\ttry {\r", "+\t\t\tint currentToken = scanner.getNextToken();\r", "+\t\t\twhile(currentToken != TerminalSymbols.TokenNameRBRACE &&\r", "+\t\t\t\t\tcurrentToken != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\t\tcurrentToken = scanner.getNextToken();\r", "+\t\t\t}\r", "+\t\t\tif(currentToken == TerminalSymbols.TokenNameRBRACE) {\t\t\r", "+\t\t\t\tcloseBodyStart = scanner.startPosition;\r", "+\t\t\t\tcloseBodyEnd = scanner.currentPosition - 1;\r", "+\t\t\t} else {\r", "+\t\t\t\tcloseBodyStart = fDocument.length;\r", "+\t\t\t\tcloseBodyEnd = fDocument.length;\r", "+\t\t\t}\r", "+\t\t} catch(InvalidInputException e) {\r", "+\t\t\tcloseBodyStart = fDocument.length;\r", "+\t\t\tcloseBodyEnd = fDocument.length;\r", "-\t\tif (first != null) {\r", "-\t\t\t// look for the open body\r", "-\t\t\topenBodyEnd= CharArrayOps.indexOf('{', fDocument, fNameRange[1] + 1);\r", "-\t\t\tif (openBodyEnd < 0 || openBodyEnd >= first.getStartPosition()) {\r", "-\t\t\t\topenBodyEnd= first.getStartPosition() - 1;\r", "+\t\tscanner.resetTo(openBodyEnd, fDocument.length);\r", "+\t\ttry {\r", "+\t\t\tint currentToken = scanner.getNextToken();\r", "+\t\t\twhile(currentToken != TerminalSymbols.TokenNameRBRACE &&\r", "+\t\t\t\t\tcurrentToken != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\t\tcurrentToken = scanner.getNextToken();\r", "+\t\t\t}\r", "+\t\t\tif(currentToken == TerminalSymbols.TokenNameRBRACE) {\t\t\r", "+\t\t\t\tcloseBodyStart = scanner.startPosition;\r", "+\t\t\t\tcloseBodyEnd = scanner.currentPosition - 1;\r", "-\t\t\t\tint lineStart = finder.getLineStart(first.getStartPosition());\r", "-\t\t\t\tif (lineStart > openBodyEnd) {\r", "-\t\t\t\t\topenBodyEnd = lineStart - 1;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\topenBodyEnd = first.getStartPosition() - 1;\r", "-\t\t\t\t}\r", "+\t\t\t\tcloseBodyStart = fDocument.length;\r", "+\t\t\t\tcloseBodyEnd = fDocument.length;\r", "-\t\t\tif (fDocument[closeBodyStart] != '}') {\r", "-\t\t\t\t// look for the body end\r", "-\t\t\t\tScanner scanner = new Scanner();\r", "-\t\t\t\tscanner.setSourceBuffer(CharArrayOps.subarray(fDocument, fLastChild.getEndPosition() + 1, closeBodyStart - fLastChild.getEndPosition() + 1));\r", "-\t\t\t\t\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tint currentToken = scanner.getNextToken();\r", "-\t\t\t\t\twhile(currentToken != TerminalSymbols.TokenNameRBRACE &&\r", "-\t\t\t\t\t\t\tcurrentToken != TerminalSymbols.TokenNameEOF) {\r", "-\t\t\t\t\t\tcurrentToken = scanner.getNextToken();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif(currentToken == TerminalSymbols.TokenNameRBRACE) {\t\t\r", "-\t\t\t\t\t\tcloseBodyStart = fLastChild.getEndPosition() + scanner.currentPosition;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tcatch(InvalidInputException e) {\r", "-\t\t\t\t\t// leave closeBodyStart as is\r", "-\t\t\t\t}\r", "-\t\t\t\t\t\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\topenBodyEnd = fCloseBodyRange[0] - 1;\r", "+\t\t} catch(InvalidInputException e) {\r", "+\t\t\tcloseBodyStart = fDocument.length;\r", "+\t\t\tcloseBodyEnd = fDocument.length;\r", "+\t\topenBodyEnd = closeBodyEnd - 1;\r", "+\tsetOpenBodyRangeStart(openBodyStart);\r", "+\tsetCloseBodyRangeEnd(closeBodyEnd);\r", "+\tif (lastNode != null && fInsertionPosition < lastNode.getEndPosition()) {\r", "+\t\tfInsertionPosition = getCloseBodyPosition();\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e69bb050bc76def1d770e8675ec8ce8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ConfigurableOption.java", "commitBeforeChange": "a966ab35031fa2a990a0d7a15092ccc9d20bd7c8", "commitAfterChange": "77f822579c514662c97fa5cfdb004c75e9bbd57e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public ConfigurableOption(\r \tString componentName, \r \tString optionName, \r \tLocale loc, \r \tint currentValueIndex)", "signatureAfterChange": "\r \r \tpublic ConfigurableOption(String id, Locale loc)", "diff": ["- */\r", "-public ConfigurableOption(\r", "-\tString componentName, \r", "-\tString optionName, \r", "-\tLocale loc, \r", "-\tint currentValueIndex) {\r", "-\tthis.componentName = componentName;\r", "-\tthis.currentValueIndex = currentValueIndex;\r", "-\t\t\r", "-\tResourceBundle resource = null;\r", "-\ttry {\r", "-\t\tString location = componentName.substring(0, componentName.lastIndexOf('.'));\r", "-\t\tresource = ResourceBundle.getBundle(location + \".Options\"/*nonNLS*/, loc); \r", "-\t} catch (MissingResourceException e) {\r", "-\t\tcategory = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "-\t\tname = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "-\t\tdescription = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "-\t\tpossibleValues = new String[0];\r", "-\t\tid = -1;\r", "-\t}\r", "-\tif (resource == null) return;\r", "-\ttry {\r", "-\t\tid = Integer.parseInt(resource.getString(optionName + \".number\"/*nonNLS*/)); \r", "-\t} catch (MissingResourceException e) {\r", "-\t\tid = -1;\r", "-\t} catch (NumberFormatException e) {\r", "-\t\tid = -1;\r", "-\t}\r", "-\ttry {\r", "-\t\tcategory = resource.getString(optionName + \".category\"/*nonNLS*/); \r", "-\t} catch (MissingResourceException e) {\r", "-\t\tcategory = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "-\t}\r", "-\ttry {\r", "-\t\tname = resource.getString(optionName + \".name\"/*nonNLS*/); \r", "-\t} catch (MissingResourceException e) {\r", "-\t\tname = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "-\t}\r", "-\ttry {\r", "-\t\tStringTokenizer tokenizer = new StringTokenizer(resource.getString(optionName + \".possibleValues\"/*nonNLS*/), \"|\"/*nonNLS*/);\r", "-\t\tint numberOfValues = Integer.parseInt(tokenizer.nextToken());\r", "-\t\tif(numberOfValues == -1){\r", "+\tpublic ConfigurableOption(String id, Locale loc) {\r", "+\t\tthis.id = id;\r", "+\t\tthis.value = value;\r", "+\t\tthis.loc = loc;\r", "+\r", "+\t\tthis.componentName = id.substring(0,id.lastIndexOf('.'));\r", "+\r", "+\t\tResourceBundle bundle = null;\r", "+\t\tmissing = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t\ttry {\r", "+\t\t\tbundle = ResourceBundle.getBundle(componentName,loc); \r", "+\t\t} catch (MissingResourceException e) {\r", "+\t\t\tid = missing;\r", "+\t\t\tdefaultValue = missing;\r", "+\t\t\tcategory = missing;\r", "+\t\t\tname = missing;\r", "+\t\t\tdescription = missing;\r", "-\t\t} else {\r", "-\t\t\tpossibleValues = new String[numberOfValues];\r", "-\t\t\tint index = 0;\r", "-\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\tpossibleValues[index] = tokenizer.nextToken();\r", "-\t\t\t\tindex++;\r", "+\t\t}\r", "+\t\tif (bundle == null) return;\r", "+\t\ttry{\r", "+\t\t\tStringTokenizer tokenizer =\r", "+\t\t\t\tnew StringTokenizer(\r", "+\t\t\t\t\tbundle.getString(id + \".possibleValues\"/*nonNLS*/),\r", "+\t\t\t\t\t\"|\"/*nonNLS*/);\r", "+\t\t\tint numberOfValues = Integer.parseInt(tokenizer.nextToken());\r", "+\t\t\tif (numberOfValues == -1) {\r", "+\t\t\t\t// the possible value are not discrete\r", "+\t\t\t\tpossibleValues = NoDiscreteValue;\r", "+\t\t\t\t\r", "+\t\t\t\tString token = tokenizer.nextToken();\r", "+\t\t\t\ttype = token;\r", "+\t\t\t\tif(token.equals(STRING)){\r", "+\r", "+\t\t\t\t}\r", "+\t\t\t\telse if(token.equals(INT) && tokenizer.hasMoreTokens()){\r", "+\t\t\t\t\ttoken = tokenizer.nextToken();\r", "+\t\t\t\t\tif(!token.equals(\"no\"/*nonNLS*/)){\r", "+\t\t\t\t\t\tminExisting = true;\r", "+\t\t\t\t\t\tminInt = Integer.parseInt(token);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\ttoken = tokenizer.nextToken();\r", "+\t\t\t\t\tif(!token.equals(\"no\"/*nonNLS*/)){\r", "+\t\t\t\t\t\tmaxExisting = true;\r", "+\t\t\t\t\t\tmaxInt = Integer.parseInt(token);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\telse if(token.equals(FLOAT) && tokenizer.hasMoreTokens()){\r", "+\t\t\t\t\ttoken = tokenizer.nextToken();\r", "+\t\t\t\t\tif(!token.equals(\"no\"/*nonNLS*/)){\r", "+\t\t\t\t\t\tminExisting = true;\r", "+\t\t\t\t\t\tminFloat = Float.parseFloat(token);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\ttoken = tokenizer.nextToken();\r", "+\t\t\t\t\tif(!token.equals(\"no\"/*nonNLS*/)){\r", "+\t\t\t\t\t\tmaxExisting = true;\r", "+\t\t\t\t\t\tmaxFloat = Float.parseFloat(token);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\t\t\t\r", "+\t\t\t} else {\r", "+\t\t\t\t// possible value are discrete\r", "+\t\t\t\ttype = DISCRETE;\r", "+\t\t\t\tpossibleValues = new String[numberOfValues];\r", "+\t\t\t\tint index = 0;\r", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "+\t\t\t\t\tpossibleValues[index] = tokenizer.nextToken();\r", "+\t\t\t\t\tindex++;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t} catch (MissingResourceException e) {\r", "+\t\t\tpossibleValues = NoDiscreteValue;\r", "+\t\t\ttype = missing;\r", "+\t\t} catch (NoSuchElementException e) {\r", "+\t\t\tpossibleValues = NoDiscreteValue;\r", "+\t\t\ttype = missing;\r", "+\t\t} catch (NumberFormatException e) {\r", "+\t\t\tpossibleValues = NoDiscreteValue;\r", "+\t\t\ttype = missing;\r", "+\t\t}\r", "+\t\ttry{\r", "+\t\t\tif(possibleValues == NoDiscreteValue){\r", "+\t\t\t\tdefaultValue = bundle.getString(id + \".default\"/*nonNLS*/);\r", "+\t\t\t}\r", "+\t\t\telse{\r", "+\t\t\t\tdefaultValueIndex = Integer.parseInt(bundle.getString(id + \".default\"/*nonNLS*/));\r", "+\t\t\t}\r", "+\t\t} catch (MissingResourceException e) {\r", "+\t\t\tdefaultValue = missing;\r", "+\t\t} catch (NumberFormatException e) {\r", "+\t\t\tdefaultValueIndex = -1;\r", "+\t\t}\r", "+\t\ttry{\r", "+\t\t\torder = Integer.parseInt(bundle.getString(id + \".order\"/*nonNLS*/));\r", "+\t\t} catch (NumberFormatException e) {\r", "+\t\t\torder = -1;\r", "+\t\t} catch (MissingResourceException e) {\r", "+\t\t\torder = -1;\r", "+\t\t}\r", "+\t\ttry{\r", "+\t\t\tcategory = bundle.getString(id + \".category\"/*nonNLS*/);\r", "+\t\t} catch (MissingResourceException e) {\r", "+\t\t\tcategory = missing;\r", "+\t\t}\r", "+\t\ttry{\r", "+\t\t\tname = bundle.getString(id + \".name\"/*nonNLS*/);\r", "+\t\t} catch (MissingResourceException e) {\r", "+\t\t\tname = missing;\r", "+\t\t}\r", "+\t\ttry{\r", "+\t\t\tdescription = bundle.getString(id + \".description\"/*nonNLS*/);\r", "+\t\t} catch (MissingResourceException e) {\r", "+\t\t\tdescription = missing;\r", "+\t\t}\r", "+\t}\r", "-\t} catch (MissingResourceException e) {\r", "-\t\tpossibleValues = new String[0];\r", "-\t} catch (NoSuchElementException e) {\r", "-\t\tpossibleValues = new String[0];\r", "-\t} catch (NumberFormatException e) {\r", "-\t\tpossibleValues = new String[0];\r", "-\ttry {\r", "-\t\tdescription = resource.getString(optionName + \".description\"/*nonNLS*/); \r", "-\t} catch (MissingResourceException e) {\r", "-\t\tdescription = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "-\t}\r", "-}\r"]}], "num": 30523}
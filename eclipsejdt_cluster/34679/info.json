{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "030e965e0d8aa22cb610401db3a834b2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "201b0f69c6ac9d8bdf79dc8ea3b9b68c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["-", "-\t\tif ((produceDebugAttributes & Vars) != 0){", "-\t\t\tbuf.append(\"\\n-local variables debug attributes: ON\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tbuf.append(\"\\n-local variables debug attributes: OFF\"); //$NON-NLS-1$", "-\t\t}", "-\t\tif ((produceDebugAttributes & Lines) != 0){", "-\t\t\tbuf.append(\"\\n-line number debug attributes: ON\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tbuf.append(\"\\n-line number debug attributes: OFF\"); //$NON-NLS-1$", "-\t\t}", "-\t\tif ((produceDebugAttributes & Source) != 0){", "-\t\t\tbuf.append(\"\\n-source debug attributes: ON\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tbuf.append(\"\\n-source debug attributes: OFF\"); //$NON-NLS-1$", "-\t\t}", "-\t\tif (preserveAllLocalVariables){", "-\t\t\tbuf.append(\"\\n-preserve all local variables: ON\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tbuf.append(\"\\n-preserve all local variables: OFF\"); //$NON-NLS-1$", "-\t\t}", "-\t\tif ((errorThreshold & UnreachableCode) != 0){", "-\t\t\tbuf.append(\"\\n-unreachable code: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & UnreachableCode) != 0){", "-\t\t\t\tbuf.append(\"\\n-unreachable code: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-unreachable code: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & ImportProblem) != 0){", "-\t\t\tbuf.append(\"\\n-import problem: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & ImportProblem) != 0){", "-\t\t\t\tbuf.append(\"\\n-import problem: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-import problem: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & MethodWithConstructorName) != 0){", "-\t\t\tbuf.append(\"\\n-method with constructor name: ERROR\");\t\t //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & MethodWithConstructorName) != 0){", "-\t\t\t\tbuf.append(\"\\n-method with constructor name: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-method with constructor name: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & OverriddenPackageDefaultMethod) != 0){", "-\t\t\tbuf.append(\"\\n-overridden package default method: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & OverriddenPackageDefaultMethod) != 0){", "-\t\t\t\tbuf.append(\"\\n-overridden package default method: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-overridden package default method: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & UsingDeprecatedAPI) != 0){", "-\t\t\tbuf.append(\"\\n-deprecation: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & UsingDeprecatedAPI) != 0){", "-\t\t\t\tbuf.append(\"\\n-deprecation: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-deprecation: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & MaskedCatchBlock) != 0){", "-\t\t\tbuf.append(\"\\n-masked catch block: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & MaskedCatchBlock) != 0){", "-\t\t\t\tbuf.append(\"\\n-masked catch block: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-masked catch block: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & UnusedLocalVariable) != 0){", "-\t\t\tbuf.append(\"\\n-unused local variable: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & UnusedLocalVariable) != 0){", "-\t\t\t\tbuf.append(\"\\n-unused local variable: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-unused local variable: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & UnusedArgument) != 0){", "-\t\t\tbuf.append(\"\\n-unused parameter: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & UnusedArgument) != 0){", "-\t\t\t\tbuf.append(\"\\n-unused parameter: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-unused parameter: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & UnusedImport) != 0){", "-\t\t\tbuf.append(\"\\n-unused import: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & UnusedImport) != 0){", "-\t\t\t\tbuf.append(\"\\n-unused import: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-unused import: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & AccessEmulation) != 0){", "-\t\t\tbuf.append(\"\\n-synthetic access emulation: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & AccessEmulation) != 0){", "-\t\t\t\tbuf.append(\"\\n-synthetic access emulation: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-synthetic access emulation: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & NoEffectAssignment) != 0){", "-\t\t\tbuf.append(\"\\n-assignment with no effect: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & NoEffectAssignment) != 0){", "-\t\t\t\tbuf.append(\"\\n-assignment with no effect: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-assignment with no effect: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}\t\tif ((errorThreshold & NonExternalizedString) != 0){", "-\t\t\tbuf.append(\"\\n-non externalized string: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & NonExternalizedString) != 0){", "-\t\t\t\tbuf.append(\"\\n-non externalized string: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-non externalized string: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & StaticAccessReceiver) != 0){", "-\t\t\tbuf.append(\"\\n-static access receiver: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & StaticAccessReceiver) != 0){", "-\t\t\t\tbuf.append(\"\\n-static access receiver: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-static access receiver: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & IncompatibleNonInheritedInterfaceMethod) != 0){", "-\t\t\tbuf.append(\"\\n-incompatible non inherited interface method: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & IncompatibleNonInheritedInterfaceMethod) != 0){", "-\t\t\t\tbuf.append(\"\\n-incompatible non inherited interface method: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-incompatible non inherited interface method: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & UnusedPrivateMember) != 0){", "-\t\t\tbuf.append(\"\\n-unused private member: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & UnusedPrivateMember) != 0){", "-\t\t\t\tbuf.append(\"\\n-unused private member: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-unused private member: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & LocalVariableHiding) != 0){", "-\t\t\tbuf.append(\"\\n-local variable hiding another variable: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & LocalVariableHiding) != 0){", "-\t\t\t\tbuf.append(\"\\n-local variable hiding another variable: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-local variable hiding another variable: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & FieldHiding) != 0){", "-\t\t\tbuf.append(\"\\n-field hiding another variable: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & FieldHiding) != 0){", "-\t\t\t\tbuf.append(\"\\n-field hiding another variable: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-field hiding another variable: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & AccidentalBooleanAssign) != 0){", "-\t\t\tbuf.append(\"\\n-possible accidental boolean assignment: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & AccidentalBooleanAssign) != 0){", "-\t\t\t\tbuf.append(\"\\n-possible accidental boolean assignment: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-possible accidental boolean assignment: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\tif ((errorThreshold & SuperfluousSemicolon) != 0){", "-\t\t\tbuf.append(\"\\n-superfluous semicolon: ERROR\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((warningThreshold & SuperfluousSemicolon) != 0){", "-\t\t\t\tbuf.append(\"\\n-superfluous semicolon: WARNING\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuf.append(\"\\n-superfluous semicolon: IGNORE\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "+\t\tbuf.append(\"\\n-local variables debug attributes: \").append((produceDebugAttributes & Vars) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-line number debug attributes: \").append((produceDebugAttributes & Lines) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-source debug attributes: \").append((produceDebugAttributes & Source) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-preserve all local variables: \").append(preserveAllLocalVariables ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-unreachable code: \").append(getSeverityString(UnreachableCode)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-import problem: \").append(getSeverityString(ImportProblem)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n--method with constructor name: \").append(getSeverityString(MethodWithConstructorName)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-overridden package default method: \").append(getSeverityString(OverriddenPackageDefaultMethod)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-deprecation: \").append(getSeverityString(UsingDeprecatedAPI)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-masked catch block: \").append(getSeverityString(MaskedCatchBlock)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-unused local variable: \").append(getSeverityString(UnusedLocalVariable)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-unused parameter: \").append(getSeverityString(UnusedArgument)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-unused import: \").append(getSeverityString(UnusedImport)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-synthetic access emulation: \").append(getSeverityString(AccessEmulation)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-assignment with no effect: \").append(getSeverityString(NoEffectAssignment)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-non externalized string: \").append(getSeverityString(NonExternalizedString)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-static access receiver: \").append(getSeverityString(NonStaticAccessToStatic)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-indirect static access: \").append(getSeverityString(IndirectStaticAccess)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-incompatible non inherited interface method: \").append(getSeverityString(IncompatibleNonInheritedInterfaceMethod)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-unused private member: \").append(getSeverityString(UnusedPrivateMember)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-local variable hiding another variable: \").append(getSeverityString(LocalVariableHiding)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-field hiding another variable: \").append(getSeverityString(FieldHiding)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-possible accidental boolean assignment: \").append(getSeverityString(AccidentalBooleanAssign)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n-superfluous semicolon: \").append(getSeverityString(SuperfluousSemicolon)); //$NON-NLS-1$", "-\t\tif (isPrivateConstructorAccessChangingVisibility){", "-\t\t\tbuf.append(\"\\n-private constructor access emulation: extra argument\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tbuf.append(\"\\n-private constructor access emulation: make default access\"); //$NON-NLS-1$", "-\t\t}", "-\t\tbuf.append(\"\\n-verbose : \" + (verbose ? \"ON\" : \"OFF\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-produce reference info : \" + (produceReferenceInfo ? \"ON\" : \"OFF\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-parse literal expressions as constants : \" + (parseLiteralExpressionsAsConstants ? \"ON\" : \"OFF\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-encoding : \" + (defaultEncoding == null ? \"<default>\" : defaultEncoding)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n-task tags: \" + (this.taskTags == null ? \"\" : new String(CharOperation.concatWith(this.taskTags,','))));  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n-task priorities : \" + (this.taskPriorites == null ? \"\" : new String(CharOperation.concatWith(this.taskPriorites,',')))); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n-report deprecation inside deprecated code : \" + (reportDeprecationInsideDeprecatedCode ? \"ENABLED\" : \"DISABLED\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-report unused parameter when implementing abstract method : \" + (reportUnusedParameterWhenImplementingAbstract ? \"ENABLED\" : \"DISABLED\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-report unused parameter when overriding concrete method : \" + (reportUnusedParameterWhenOverridingConcrete ? \"ENABLED\" : \"DISABLED\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-report constructor/setter parameter hiding existing field : \" + (reportSpecialParameterHidingField ? \"ENABLED\" : \"DISABLED\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-private constructor access: \").append(isPrivateConstructorAccessChangingVisibility ? \"extra argument\" : \"make default access\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-verbose : \").append(verbose ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-produce reference info : \").append(produceReferenceInfo ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-parse literal expressions as constants : \").append(parseLiteralExpressionsAsConstants ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-encoding : \").append(defaultEncoding == null ? \"<default>\" : defaultEncoding); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbuf.append(\"\\n-task tags: \").append(this.taskTags == null ? \"\" : new String(CharOperation.concatWith(this.taskTags,',')));  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbuf.append(\"\\n-task priorities : \").append(this.taskPriorites == null ? \"\" : new String(CharOperation.concatWith(this.taskPriorites,','))); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbuf.append(\"\\n-report deprecation inside deprecated code : \").append(reportDeprecationInsideDeprecatedCode ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-report unused parameter when implementing abstract method : \").append(reportUnusedParameterWhenImplementingAbstract ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-report unused parameter when overriding concrete method : \").append(reportUnusedParameterWhenOverridingConcrete ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n-report constructor/setter parameter hiding existing field : \").append(reportSpecialParameterHidingField ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40c889a549790d1f309c0a712f066841", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\tint errorThreshold = this.options.errorThreshold;", "-\tint warningThreshold = this.options.warningThreshold;", "-\t", "-\t\t\tif ((errorThreshold & CompilerOptions.UnreachableCode) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.UnreachableCode) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.UnreachableCode);", "-\t\t\tif ((errorThreshold & CompilerOptions.MaskedCatchBlock) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.MaskedCatchBlock) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "-\t\t\t", "-/*", "-\t\tcase Never Used  :", "-\t\t\tif ((errorThreshold & ParsingOptionalError) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & ParsingOptionalError) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "-*/", "+\t\t\treturn this.options.getSeverity(CompilerOptions.MaskedCatchBlock);", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.ImportProblem) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.ImportProblem) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "-\t\t\t", "+\t\t\treturn this.options.getSeverity(CompilerOptions.ImportProblem);", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.ImportProblem) == 0 ", "-\t\t\t\t&& (warningThreshold & CompilerOptions.ImportProblem) == 0){", "+\t\t\tif (this.options.getSeverity(CompilerOptions.ImportProblem) == Ignore) {", "-\t\t\tif ((errorThreshold & CompilerOptions.UnusedImport) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.UnusedImport) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.UnusedImport);", "-\t\t\tif ((errorThreshold & CompilerOptions.MethodWithConstructorName) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.MethodWithConstructorName) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.MethodWithConstructorName);", "-\t\t\tif ((errorThreshold & CompilerOptions.OverriddenPackageDefaultMethod) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.OverriddenPackageDefaultMethod) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.OverriddenPackageDefaultMethod);", "-\t\t\tif ((errorThreshold & CompilerOptions.IncompatibleNonInheritedInterfaceMethod) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.IncompatibleNonInheritedInterfaceMethod) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.IncompatibleNonInheritedInterfaceMethod);", "-\t\t\tif ((errorThreshold & CompilerOptions.UsingDeprecatedAPI) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.UsingDeprecatedAPI) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.UsingDeprecatedAPI);", "-\t\t\tif ((errorThreshold & CompilerOptions.UnusedLocalVariable) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.UnusedLocalVariable) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.UnusedLocalVariable);", "-\t\t\tif ((errorThreshold & CompilerOptions.UnusedArgument) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.UnusedArgument) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.UnusedArgument);", "-\t\t\tif ((errorThreshold & CompilerOptions.NoImplicitStringConversion) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.NoImplicitStringConversion) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.NoImplicitStringConversion);", "-\t\t\tif ((errorThreshold & CompilerOptions.AccessEmulation) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.AccessEmulation) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.AccessEmulation);", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.NonExternalizedString) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.NonExternalizedString) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.NonExternalizedString);", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.AssertUsedAsAnIdentifier) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.AssertUsedAsAnIdentifier) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;\t\t", "+\t\t\treturn this.options.getSeverity(CompilerOptions.AssertUsedAsAnIdentifier);", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.StaticAccessReceiver) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.StaticAccessReceiver) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;\t\t", "+\t\t\treturn this.options.getSeverity(CompilerOptions.NonStaticAccessToStatic);", "+", "+\t\tcase IProblem.IndirectAccessToStaticMethod :", "+\t\tcase IProblem.IndirectAccessToStaticField :", "+\t\tcase IProblem.IndirectAccessToStaticType :", "+\t\t\treturn this.options.getSeverity(CompilerOptions.IndirectStaticAccess);", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.NoEffectAssignment) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.NoEffectAssignment) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;\t\t", "+\t\t\treturn this.options.getSeverity(CompilerOptions.NoEffectAssignment);", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.UnusedPrivateMember) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.UnusedPrivateMember) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;\t\t", "+\t\t\treturn this.options.getSeverity(CompilerOptions.UnusedPrivateMember);", "+", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.LocalVariableHiding) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.LocalVariableHiding) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;\t\t", "+\t\t\treturn this.options.getSeverity(CompilerOptions.LocalVariableHiding);", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.FieldHiding) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.FieldHiding) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;\t\t", "+\t\t\treturn this.options.getSeverity(CompilerOptions.FieldHiding);", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.AccidentalBooleanAssign) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.AccidentalBooleanAssign) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;\t\t", "+\t\t\treturn this.options.getSeverity(CompilerOptions.AccidentalBooleanAssign);", "+", "-\t\t\tif ((errorThreshold & CompilerOptions.SuperfluousSemicolon) != 0){", "-\t\t\t\treturn Error;", "-\t\t\t}", "-\t\t\tif ((warningThreshold & CompilerOptions.SuperfluousSemicolon) != 0){", "-\t\t\t\treturn Warning;", "-\t\t\t}", "-\t\t\treturn Ignore;\t\t", "+\t\t\treturn this.options.getSeverity(CompilerOptions.SuperfluousSemicolon);", "+"]}], "num": 34679}
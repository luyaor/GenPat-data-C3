{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e9e6d4583dbffd952f5cd7a70d66ae4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0711e0ee83cf7a63ddf593af8b34ad9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": " public TypeBinding reportError(BlockScope scope)", "diff": ["-\tconstant = Constant.NotAConstant;", "-\tif (binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound){", "+\tthis.constant = Constant.NotAConstant;", "+\tif (this.binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) this.binding).problemId() == NotFound){", "-\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\tif (delegateThis != null){  // if not found then internal error, field should have been found", "+\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\tif (this.delegateThis != null){  // if not found then internal error, field should have been found", "-\t\t\t\tthis.codegenBinding = binding = scope.getField(delegateThis.type, this.token, this);", "-\t\t\t\tif (!binding.isValidBinding()) {", "+\t\t\t\tthis.codegenBinding = this.binding = scope.getField(this.delegateThis.type, this.token, this);", "+\t\t\t\tif (!this.binding.isValidBinding()) {", "-\tif (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound){", "+\tif (this.binding instanceof ProblemBinding && ((ProblemBinding) this.binding).problemId() == NotFound){", "-\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\tif (delegateThis != null){  // if not found then internal error, field should have been found", "+\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\tif (this.delegateThis != null){  // if not found then internal error, field should have been found", "-\t\t\t\tFieldBinding fieldBinding = scope.getField(delegateThis.type, this.token, this);", "+\t\t\t\tFieldBinding fieldBinding = scope.getField(this.delegateThis.type, this.token, this);", "-\t\t\t\t\t\tthis.codegenBinding = binding = localScope.getFieldForCodeSnippet(delegateThis.type, this.token, this);", "+\t\t\t\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(this.delegateThis.type, this.token, this);", "-\t\t\t\tthis.codegenBinding = binding = fieldBinding;", "+\t\t\t\tthis.codegenBinding = this.binding = fieldBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1042b787c6f0c9ccbfec6ecfbbac48b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\tif (expressionTb == null) {", "-\t\t\tconstant = NotAConstant;", "+\t\t", "+\t\tTypeBinding expressionType = this.expression.resolveType(scope);", "+\t\tif (expressionType == null) {", "+\t\t\tthis.constant = NotAConstant;", "-\t\tint expressionId = expressionTb.id;", "+\t\tint expressionId = expressionType.id;", "-\t\t\tconstant = NotAConstant;", "-\t\t\tscope.problemReporter().invalidOperator(this, expressionTb);", "+\t\t\tthis.constant = NotAConstant;", "+\t\t\tscope.problemReporter().invalidOperator(this, expressionType);", "-\t\texpression.implicitConversion = result >>> 12;", "-\t\tbits |= result & 0xF;", "+\t\tthis.expression.implicitConversion = result >>> 12;", "+\t\tthis.bits |= result & 0xF;", "-\t\t\t\tconstant = Constant.NotAConstant;", "+\t\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\t\t\tscope.problemReporter().invalidOperator(this, expressionTb);", "+\t\t\t\t\tscope.problemReporter().invalidOperator(this, expressionType);", "-\t\tif (expression.constant != Constant.NotAConstant) {", "-\t\t\tconstant =", "+\t\tif (this.expression.constant != Constant.NotAConstant) {", "+\t\t\tthis.constant =", "-\t\t\t\t\texpression.constant,", "+\t\t\t\t\tthis.expression.constant,", "-\t\t\tconstant = Constant.NotAConstant;", "+\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\t\tConstant cst = expression.conditionalConstant();", "-\t\t\t\tif (cst.typeID() == T_boolean)", "-\t\t\t\t\toptimizedBooleanConstant = Constant.fromValue(!cst.booleanValue());", "+\t\t\t\tConstant cst = expression.optimizedBooleanConstant();", "+\t\t\t\tif (cst != Constant.NotAConstant) ", "+\t\t\t\t\tthis.optimizedBooleanConstant = Constant.fromValue(!cst.booleanValue());"]}], "num": 46287}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1328175e2275ae7d15001b75e900d2c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d95b0a4fcd76c8736eddfd5ac10fcb12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7c94615c7f1a34c1f25e73121dcbe10e789a0e6c", "commitAfterChange": "2b8d0ac8be572d49eb7c83b89c8816f15915abc9", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": " \t \tprotected void setModifiers(SingleVariableDeclaration variableDecl, LocalDeclaration localDeclaration)", "signatureAfterChange": " \t \tprotected void setModifiers(SingleVariableDeclaration variableDecl, LocalDeclaration localDeclaration)", "diff": ["-\t\tthis.scanner.resetTo(localDeclaration.declarationSourceStart, localDeclaration.sourceStart);", "-\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = localDeclaration.annotations;", "-\t\tint indexInAnnotations = 0;", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tIExtendedModifier modifier = null;", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameabstract:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.ABSTRACT_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamepublic:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamestatic:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.STATIC_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameprotected:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PROTECTED_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameprivate:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamefinal:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.FINAL_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamenative:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.NATIVE_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamesynchronized:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.SYNCHRONIZED_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNametransient:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.TRANSIENT_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamevolatile:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.VOLATILE_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamestrictfp:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.STRICTFP_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameAT :", "-\t\t\t\t\t\t// we have an annotation", "-\t\t\t\t\t\tif (annotations != null && indexInAnnotations < annotations.length) {", "-\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation annotation = annotations[indexInAnnotations++];", "-\t\t\t\t\t\t\tmodifier = convert(annotation);", "-\t\t\t\t\t\t\tthis.scanner.resetTo(annotation.declarationSourceEnd + 1, this.scanner.eofPosition);", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (modifier != null) {", "-\t\t\t\t\tvariableDecl.modifiers().add(modifier);", "-\t\t\t\t}", "+\t\tswitch(this.ast.apiLevel) {", "+\t\tcase AST.JLS2 :", "+\t\t\tvariableDecl.setModifiers(localDeclaration.modifiers & CompilerModifiers.AccJustFlag);", "+\t\t\tif (localDeclaration.annotations != null) {", "+\t\t\t\tvariableDecl.setFlags(variableDecl.getFlags() | ASTNode.MALFORMED);", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "+\t\t\tbreak;", "+\t\tcase AST.JLS3 :", "+\t\t\tthis.scanner.resetTo(localDeclaration.declarationSourceStart, localDeclaration.sourceStart);", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = localDeclaration.annotations;", "+\t\t\tint indexInAnnotations = 0;", "+\t\t\ttry {", "+\t\t\t\tint token;", "+\t\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\t\tIExtendedModifier modifier = null;", "+\t\t\t\t\tswitch(token) {", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameabstract:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.ABSTRACT_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamepublic:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamestatic:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.STATIC_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameprotected:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PROTECTED_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameprivate:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamefinal:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.FINAL_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamenative:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.NATIVE_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamesynchronized:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.SYNCHRONIZED_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNametransient:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.TRANSIENT_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamevolatile:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.VOLATILE_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamestrictfp:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.STRICTFP_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameAT :", "+\t\t\t\t\t\t\t// we have an annotation", "+\t\t\t\t\t\t\tif (annotations != null && indexInAnnotations < annotations.length) {", "+\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation annotation = annotations[indexInAnnotations++];", "+\t\t\t\t\t\t\t\tmodifier = convert(annotation);", "+\t\t\t\t\t\t\t\tthis.scanner.resetTo(annotation.declarationSourceEnd + 1, this.scanner.eofPosition);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (modifier != null) {", "+\t\t\t\t\t\tvariableDecl.modifiers().add(modifier);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch(InvalidInputException e) {", "+\t\t\t\t// ignore", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc1f680fea0e51473f771285af3fc32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "82286041004c3a1c8b03ed85a8b5ba0c85e39f08", "commitAfterChange": "c3894f02481a65e7c5a6b2e211e3716b20cd9dd8", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic boolean match(SimpleName node, Object other)", "signatureAfterChange": " \tpublic boolean match(SimpleName node, Object other)", "diff": ["-\t\treturn node.getIdentifier().equals(o.getIdentifier());", "+\t\tswitch(node.getAST().apiLevel) {", "+\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\tcase AST.JLS3_INTERNAL :", "+\t\t\tcase AST.JLS4:", "+\t\t\t\treturn node.getIdentifier().equals(o.getIdentifier());", "+\t\t\tdefault:", "+\t\t\t\treturn (node.getIdentifier().equals(o.getIdentifier())) &&", "+\t\t\t\t\t\tsafeSubtreeListMatch(node.annotations(), o.annotations());", "+\t\t}\t"]}], "num": 31023}
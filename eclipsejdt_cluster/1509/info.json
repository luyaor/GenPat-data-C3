{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46fbee8fe6d60e4c146e4e84b237ec0a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af3d013ebb9149ad0ed83309c9ec7b9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[3][];", "-\t\tint lastPosition = -1;", "-\t\tReferenceBinding[] itsInterfaces = null;", "+\t\tReferenceBinding[] interfacesToVisit = null;", "+\t\tint nextPosition = 0;", "-\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\tReferenceBinding[] itsInterfaces = superType.superInterfaces();", "+\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\tnextPosition = itsInterfaces.length;", "+\t\t\tinterfacesToVisit = itsInterfaces;", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t\t} else {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\tfor (int j = 0, l = interfaces.length; j < l; j++) {", "-\t\t\t\tsuperType = interfaces[j];", "-\t\t\t\tif (superType.isValidBinding()) {", "-\t\t\t\t\tMethodBinding[] methods = superType.getMethods(currentMethod.selector);", "-\t\t\t\t\tfor (int m = 0, n = methods.length; m < n; m++){", "-\t\t\t\t\t\tMethodBinding substitute = computeSubstituteMethod(methods[m], currentMethod);", "-\t\t\t\t\t\tif (substitute != null && !doesSubstituteMethodOverride(currentMethod, substitute) && detectNameClash(currentMethod, substitute))", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\tsuperType = interfacesToVisit[i];", "+\t\t\tif (superType.isValidBinding()) {", "+\t\t\t\tMethodBinding[] methods = superType.getMethods(currentMethod.selector);", "+\t\t\t\tfor (int m = 0, n = methods.length; m < n; m++){", "+\t\t\t\t\tMethodBinding substitute = computeSubstituteMethod(methods[m], currentMethod);", "+\t\t\t\t\tif (substitute != null && !doesSubstituteMethodOverride(currentMethod, substitute) && detectNameClash(currentMethod, substitute))", "+\t\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e12ddc834f9bb2651ce2bb30b0ff193f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprivate void findFields( \t\tchar[] fieldName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed)", "signatureAfterChange": "  \tprivate void findFields( \t\tchar[] fieldName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed)", "diff": ["-\t\tReferenceBinding[][] interfacesToVisit = null;", "-\t\tint lastPosition = -1;", "+\t\tReferenceBinding[] interfacesToVisit = null;", "+\t\tint nextPosition = 0;", "-", "-", "-\t\t\t\tif (interfacesToVisit == null)", "-\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];", "-", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t0,", "-\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t0,", "-\t\t\t\t\t\tlastPosition);", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t\t} else {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tSimpleSet interfacesSeen = new SimpleSet(lastPosition * 2);", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding anInterface = interfacesToVisit[i];", "+\t\t\t\tFieldBinding[] fields = anInterface.availableFields();", "+\t\t\t\tif(fields !=  null) {", "+\t\t\t\t\tfindFields(", "+\t\t\t\t\t\tfieldName,", "+\t\t\t\t\t\tfields,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\tlocalsFound,", "+\t\t\t\t\t\tonlyStaticFields,", "+\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\timplicitCall,", "+\t\t\t\t\t\tcanBePrefixed);", "+\t\t\t\t}", "-\t\t\t\t\tReferenceBinding anInterface = interfaces[j];", "-\t\t\t\t\tif (!interfacesSeen.includes(anInterface)) {", "-\t\t\t\t\t\t// if interface as not already been visited", "-\t\t\t\t\t\tinterfacesSeen.add(anInterface);", "-", "-\t\t\t\t\t\tFieldBinding[] fields = anInterface.availableFields();", "-\t\t\t\t\t\tif(fields !=  null) {", "-\t\t\t\t\t\t\tfindFields(", "-\t\t\t\t\t\t\t\tfieldName,", "-\t\t\t\t\t\t\t\tfields,", "-\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\tfieldsFound,", "-\t\t\t\t\t\t\t\tlocalsFound,", "-\t\t\t\t\t\t\t\tonlyStaticFields,", "-\t\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\t\t\timplicitCall,", "-\t\t\t\t\t\t\t\tcanBePrefixed);", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();", "-\t\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tlastPosition);", "-\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t\t}", "+\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();", "+\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}], "num": 1509}
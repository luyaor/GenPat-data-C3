{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "759d38c2b458f79856d1cf29e0c5daf5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "596e9b8170893821e3f4694c234fdbb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d82ae848a9c4d7b35f614d484418e3b413534446", "commitAfterChange": "c4725a925ff03cde3fc0735f1b7bd65f4e96815b", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tpublic void test109636_4()", "signatureAfterChange": "  \tpublic void test109636_4()", "diff": ["-\t\tif (DefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT) {", "-\t\t\tMap options = DefaultCodeFormatterConstants.getEclipseDefaultSettings();", "+\t\tMap options = DefaultCodeFormatterConstants.getEclipseDefaultSettings();", "-\t\t\tString input =", "-\t\t\t\t\t\"/**\" + DELIMITER +", "-\t\t\t\t\t\" * <pre>\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"/&#42; traditional comment &#42;/\\\");  // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"missing comment delimiters\\\");  // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"/&#42; unterminated traditional comment \\\");  // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"/&#42; broken\\\\n traditional comment &#42;/\\\");  // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment\\\\n\\\");  // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment without line terminator\\\");  // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(\\\"// broken\\\\n end-of-line comment\\\\n\\\");  // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * </pre>\" + DELIMITER +", "-\t\t\t\t\t\" */\";", "+\t\tString input =", "+\t\t\t\t\"/**\" + DELIMITER +", "+\t\t\t\t\" * <pre>\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; traditional comment &#42;/\\\");  // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"missing comment delimiters\\\");  // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; unterminated traditional comment \\\");  // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; broken\\\\n traditional comment &#42;/\\\");  // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment\\\\n\\\");  // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment without line terminator\\\");  // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// broken\\\\n end-of-line comment\\\\n\\\");  // wrong\" + DELIMITER +", "+\t\t\t\t\" * </pre>\" + DELIMITER +", "+\t\t\t\t\" */\";", "-\t\t\tString expected =", "-\t\t\t\t\t\"/**\" + DELIMITER +", "-\t\t\t\t\t\" * <pre>\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;/* traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;missing comment delimiters&quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;/* unterminated traditional comment &quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;/* broken\\\\n traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment\\\\n&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment without line terminator&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\t\" * setLeadingComment(&quot;// broken\\\\n end-of-line comment\\\\n&quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\t\" * </pre>\" + DELIMITER +", "-\t\t\t\t\t\" */\";", "-\t\t\tString result=testFormat(input, options);", "-\t\t\tassertEquals(expected, result);", "-\t\t}", "+\t\tString expected =", "+\t\t\t\t\"/**\" + DELIMITER +", "+\t\t\t\t\" * <pre>\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;missing comment delimiters&quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* unterminated traditional comment &quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* broken\\\\n traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment\\\\n&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment without line terminator&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// broken\\\\n end-of-line comment\\\\n&quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * </pre>\" + DELIMITER +", "+\t\t\t\t\" */\";", "+\t\tString result=testFormat(input, options);", "+\t\tassertEquals(expected, result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faec7a67cba3cb4cf659cb98f498093f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d82ae848a9c4d7b35f614d484418e3b413534446", "commitAfterChange": "c4725a925ff03cde3fc0735f1b7bd65f4e96815b", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  \tpublic void test109636()", "signatureAfterChange": "  \tpublic void test109636()", "diff": ["-\t\tString expected = DefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT", "-\t\t\t? input // do not change as <code> is an immutable tag", "-\t\t\t:\t\"/**\" + DELIMITER +", "-\t\t\t\t\" * <code>\" + DELIMITER +", "-\t\t\t\t\" * <pre>\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;/* traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;missing comment delimiters&quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;/* unterminated traditional comment &quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;/* broken\\\\n traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment\\\\n&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment without line terminator&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// broken\\\\n end-of-line comment\\\\n&quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\" * </pre>\" + DELIMITER +", "-\t\t\t\t\" * </code>\" + DELIMITER +", "-\t\t\t\t\" */\";", "-\t\tassertEquals(expected, result);", "+\t\tassertEquals(input, result);"]}], "num": 44175}
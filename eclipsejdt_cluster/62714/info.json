{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b36ce33da087ba083f0e0ce1df1e90a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2241b87d748184dd6ae32c4bb923853a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "305f8457996f4929ada1f7e8e969ac751e79132d", "commitAfterChange": "5fb01dfe557c968821725c623938248969e3ad61", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "signatureAfterChange": "  \tpublic boolean isPertinentToApplicability(final TypeBinding targetType, final MethodBinding method)", "diff": ["-\tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method) {", "+\tpublic boolean isPertinentToApplicability(final TypeBinding targetType, final MethodBinding method) {", "+", "+\t\tclass NotPertientToApplicability extends RuntimeException {", "+\t\t\tprivate static final long serialVersionUID = 1L;", "+\t\t}", "+\t\tclass ResultsAnalyser extends ASTVisitor {", "+\t\t\tpublic boolean visit(TypeDeclaration type, BlockScope skope) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tpublic boolean visit(TypeDeclaration type, ClassScope skope) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tpublic boolean visit(LambdaExpression type, BlockScope skope) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t    public boolean visit(ReturnStatement returnStatement, BlockScope skope) {", "+\t\t    \tif (returnStatement.expression != null) {", "+\t\t\t\t\tif (!returnStatement.expression.isPertinentToApplicability(targetType, method))", "+\t\t\t\t\t\tthrow new NotPertientToApplicability();", "+\t\t    \t}", "+\t\t    \treturn false;", "+\t\t    }", "+\t\t}", "+", "-\t\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "-\t\t\t\tif (!returnExpressions[i].isPertinentToApplicability(targetType, method))", "+\t\t\tif (returnExpressions != NO_EXPRESSIONS) {", "+\t\t\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "+\t\t\t\t\tif (!returnExpressions[i].isPertinentToApplicability(targetType, method))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// return expressions not yet discovered by resolveType(), so traverse no looking just for one that's not pertinent", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.body.traverse(new ResultsAnalyser(), this.scope);", "+\t\t\t\t} catch (NotPertientToApplicability npta) {", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "465b2143ecc9fc06c5fa39c75db14fbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType)", "signatureAfterChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "diff": ["-\tpublic boolean isPertinentToApplicability(TypeBinding targetType) {", "-\t\t", "-\t\t// Add the rule about type variable of the generic method.", "-\t\t", "-\t\tfinal MethodBinding sam = targetType.getSingleAbstractMethod(this.enclosingScope); // cached/cheap call.", "-\t\t", "-\t\tif (sam == null || !sam.isValidBinding())", "-\t\t\treturn true;", "-\t\t", "-\t\tif (sam.parameters.length != this.argumentTypes.length)", "+\tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method) {", "+\t\tif (targetType == null) // assumed to signal another primary error", "-\t\tExpression [] returnExpressions = this.resultExpressions;", "-\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "-\t\t\tif (!returnExpressions[i].isPertinentToApplicability(targetType))", "+\t\tif (targetType instanceof TypeVariableBinding) {", "+\t\t\tif (method != null) { // when called from type inference", "+\t\t\t\tif (((TypeVariableBinding)targetType).declaringElement == method)", "+\t\t\t\t\treturn false;", "+\t\t\t} else { // for internal calls", "+\t\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) targetType;", "+\t\t\t\tif (typeVariable.declaringElement instanceof MethodBinding)", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif (this.body instanceof Expression) {", "+\t\t\tif (!((Expression) this.body).isPertinentToApplicability(targetType, method))", "+\t\t} else {", "+\t\t\tExpression [] returnExpressions = this.resultExpressions;", "+\t\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "+\t\t\t\tif (!returnExpressions[i].isPertinentToApplicability(targetType, method))", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t}"]}], "num": 62714}
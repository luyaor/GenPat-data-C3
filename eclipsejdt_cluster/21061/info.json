{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d31ff56b4bf2bc252558a00b44fccd1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4336c44be82854fbf6b60d569372345c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "d4fbb2dc620a3bd100b1dfc77464dd2b555e2dbc", "commitAfterChange": "a87cbcf6820e29c784cdbeba4d4d7b888f3bb8dc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["+\t\t// methodDvoid3 has an annotation with string array type, but its value is a single string.", "+\t\t// See bug 261969.", "+\t\tList<? extends AnnotationMirror> annotsMethodDvoid3 = _methodDvoid3.getAnnotationMirrors();", "+\t\tif (1 != annotsMethodDvoid3.size()) {", "+\t\t\treportError(\"Wrong number of annotations on D.methodDvoid3(): expected 1, got \" + annotsMethodDvoid3.size());", "+\t\t\treturn false;", "+\t\t}", "+\t\tAnnotationMirror annotMethodDvoid3 = annotsMethodDvoid3.get(0);", "+\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> annotMethodDvoid3Values = annotMethodDvoid3.getElementValues();", "+\t\tif (1 != annotMethodDvoid3Values.size()) {", "+\t\t\treportError(\"Wrong number of values on annotation on D.methodDvoid3(): expected 1, got \" ", "+\t\t\t\t\t+ annotMethodDvoid3Values.size());", "+\t\t\treturn false;", "+\t\t}", "+\t\tAnnotationValue annotMethodDvoid3Value = annotMethodDvoid3Values.values().iterator().next();", "+\t\tObject annotMethodDvoid3RealValue = annotMethodDvoid3Value.getValue();", "+\t\tif (null == annotMethodDvoid3RealValue) {", "+\t\t\treportError(\"Value of annotation on D.methodDvoid3() was null\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!(annotMethodDvoid3RealValue instanceof List<?>)) {", "+\t\t\treportError(\"Expected type of annotation on D.methodDvoid3() to be List<?> but was: \" +", "+\t\t\t\t\tannotMethodDvoid3RealValue.getClass().getName());", "+\t\t\treturn false;", "+\t\t}", "+\t\t// If it's a List, then it's a List<AnnotationValue> so we've got another layer to decipher", "+\t\tAnnotationValue innerDvoid3Value = ((AnnotationValue)((List<?>)annotMethodDvoid3RealValue).get(0));", "+\t\tif (!\"methodDvoid3Value\".equals((String)innerDvoid3Value.getValue())) {", "+\t\t\treportError(\"Expected value of annotation on D.methodDvoid3() to be \\\"methodDvoid3Value\\\" but was: \" +", "+\t\t\t\t\tinnerDvoid3Value.getValue());", "+\t\t\treturn false;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6508a4ec82d3d1caa51319849a7d777", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "afeec6e98298a3fee7e4fc33bbdcecb405bc1466", "commitAfterChange": "0c9fb87884972e83c7f78543403ac376b274d8ea", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["-\t\t\t\t\tif (!(value instanceof String)) {", "-\t\t\t\t\t\treportError(\"Value of annoZString param on element D is null\");", "+\t\t\t\t\tif (!\"annoZOnD\".equals(value)) {", "+\t\t\t\t\t\treportError(\"Value of annoZString param on element D is not \\\"annoZOnD\\\"\");", "-\t\t// TODO: Examine annotation on method declaration", "-", "+\t\tList<? extends AnnotationMirror> annotsMethodDvoid = _methodDvoid.getAnnotationMirrors();", "+\t\tif (null == annotsMethodDvoid || annotsMethodDvoid.isEmpty()) {", "+\t\t\treportError(\"method D.methodDvoid() reports no annotations\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tfor (AnnotationMirror annotMethodDvoid : annotsMethodDvoid) {", "+\t\t\tDeclaredType annotDType = annotMethodDvoid.getAnnotationType();", "+\t\t\tif (null == annotDType) {", "+\t\t\t\treportError(\"annotation mirror of AnnoZ on D.methodDvoid() reports null type\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tElement annotDElem = annotDType.asElement();", "+\t\t\tif (!(annotDElem instanceof TypeElement) || ", "+\t\t\t\t\t\"targets.model.pa.AnnoZ\".equals(((TypeElement)annotDElem).getQualifiedName().toString())) {", "+\t\t\t\treportError(\"annotation on D.methodDvoid() is not TypeElement targets.model.pa.AnnoZ\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = annotMethodDvoid.getElementValues();", "+\t\t\tif (null == values || values.isEmpty()) {", "+\t\t\t\treportError(\"@AnnoZ on D.methodDvoid() reports no values\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tboolean foundIntMethod = false;", "+\t\t\tfor (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "+\t\t\t\tString methodName = entry.getKey().getSimpleName().toString();", "+\t\t\t\tif (\"annoZint\".equals(methodName)) {", "+\t\t\t\t\tfoundIntMethod = true;", "+\t\t\t\t\tObject value = entry.getValue().getValue();", "+\t\t\t\t\tif (!(value instanceof Integer) || (Integer)value != 31) {", "+\t\t\t\t\t\treportError(\"Value of annoZint param on D.methodDvoid() is not 31\");", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!foundIntMethod) {", "+\t\t\t\treportError(\"Failed to find method annoZint on @AnnoZ on D.methodDvoid()\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80291b3c61e8398c929fd9c13ed2904", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "commitAfterChange": "309aed033cc4257b36692ed1549ee0025e0800df", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["+\t\tif (!_processorEnabled) {", "+\t\t\t// Disable this processor unless we are intentionally performing the test.", "+\t\t\treturn false;", "+\t\t}", "-\t\t", "-\t\t// Selectively enable just one of the test routines", "-\t\tMap<String, String> options = processingEnv.getOptions();", "-\t\tif (!options.containsKey(CLASSNAME)) {", "-\t\t\t// Disable this processor unless we are intentionally performing the test.", "+\t\tif (_oneTest < 0 || _oneTest > testMethodNames.length) {", "+\t\t\treportError(\"Invalid test method specified: \" + processingEnv.getOptions().get(CLASSNAME));", "-\t\tString oneTest = options.get(CLASSNAME);", "-\t\tif (oneTest != null && oneTest.length() > 0) {", "-\t\t\tint enable = 0;", "-\t\t\ttry {", "-\t\t\t\tenable = Integer.parseInt(oneTest);", "+\t\t", "+\t\t// Reflectively invoke the specified tests.", "+\t\ttry {", "+\t\t\tif (_oneTest == 0) {", "+\t\t\t\tfor (Method testMethod : testMethods) {", "+\t\t\t\t\tObject success = testMethod.invoke(this);", "+\t\t\t\t\tif (!(success instanceof Boolean) || !(Boolean)success) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tcatch (NumberFormatException e) {", "-\t\t\t\treportError(\"Option value '\" + oneTest + \"' must be an integer indicating what test to enable\");", "-\t\t\t\treturn false;", "+\t\t\telse {", "+\t\t\t\tObject success = testMethods[_oneTest - 1].invoke(this);", "+\t\t\t\tif (!(success instanceof Boolean) || !(Boolean)success) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "-\t\t\tif (enable > 5) {", "-\t\t\t\treportError(\"Option value must be an integer 1 to 5\");", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (enable >= 1) {", "-\t\t\t\ttestNegative1 = enable == 1;", "-\t\t\t\ttestNegative2 = enable == 2;", "-\t\t\t\ttestNegative3 = enable == 3;", "-\t\t\t\ttestNegative4 = enable == 4;", "-\t\t\t\ttestNegative5 = enable == 5;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tif (testNegative1 && !checkNegative1()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (testNegative2 && !checkNegative2()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (testNegative3 && !checkNegative3()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (testNegative4 && !checkNegative4()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (testNegative5 && !checkNegative5()) {", "+\t\t} catch (Exception e) {", "+\t\t\te.printStackTrace();", "+\t\t\treportError(\"Exception thrown while invoking test method: \" + e);"]}], "num": 21061}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10969cb7a3af22fb18533c498988f828", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6a9d6a21174e232e7a380c306a89179", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "bd655e292f27be12899d4ef9049b7c8c31255fe5", "commitAfterChange": "b5bed3972356e8be51cd606b69a9491540b97af1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t} else if (this.binding instanceof ParameterizedMethodBinding && this.actualReceiverType instanceof ReferenceBinding) {", "-\t\t\tReferenceBinding refBinding = (ReferenceBinding) this.actualReceiverType;", "-\t\t\tif (refBinding.isGenericType() || refBinding.isRawType() || refBinding.isParameterizedType()) {", "-\t\t\t\tMethodBinding exactMethod = scope.findExactMethod(refBinding, this.selector, argumentTypes, this);", "-\t\t\t\tif (exactMethod == null) {", "-\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "-\t\t\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "-\t\t\t\t}", "-\t\t\t}", "+//\t\t} else if (this.binding instanceof ParameterizedMethodBinding && this.actualReceiverType instanceof ReferenceBinding) {", "+//\t\t\tReferenceBinding refBinding = (ReferenceBinding) this.actualReceiverType;", "+//\t\t\tif (refBinding.isGenericType() || refBinding.isRawType() || refBinding.isParameterizedType()) {", "+//\t\t\t\tMethodBinding exactMethod = scope.getMethod(refBinding, this.selector, argumentTypes, this);", "+//\t\t\t\tif (exactMethod == null) {", "+//\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+//\t\t\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "+//\t\t\t\t}", "+//\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6c4fe9ccef5e7114720d86b0d4856fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "84ae743840b7f8b6bc94fdc63b21247cc7cb378b", "commitAfterChange": "160613f931d3107092c23ec0bbf5c709e81be6c4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-//\t\t} else if (this.binding instanceof ParameterizedMethodBinding) {", "-//\t\t\tif (allocationType.isGenericType() || allocationType.isRawType() || allocationType.isParameterizedType()) {", "-//\t\t\t\tMethodBinding exactMethod = scope.getConstructor(allocationType, argumentTypes, this);", "-//\t\t\t\tif (exactMethod == null) {", "-//\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "-//\t\t\t\t\tscope.problemReporter().javadocInvalidConstructor(this, problem, scope.getDeclarationModifiers());", "-//\t\t\t\t}", "-//\t\t\t}", "+\t\t} else if (this.binding instanceof ParameterizedMethodBinding) {", "+\t\t\tParameterizedMethodBinding paramMethodBinding = (ParameterizedMethodBinding) this.binding;", "+\t\t\tif (paramMethodBinding.hasSubstitutedParameters()) {", "+\t\t\t\tint length = argumentTypes.length;", "+\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\tif (paramMethodBinding.parameters[i] != argumentTypes[i] &&", "+\t\t\t\t\t\t\tparamMethodBinding.parameters[i].erasure() != argumentTypes[i].erasure()) {", "+\t\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidConstructor(this, problem, scope.getDeclarationModifiers());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f71dd91f5202b3758efbd1372e98cb56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "84ae743840b7f8b6bc94fdc63b21247cc7cb378b", "commitAfterChange": "160613f931d3107092c23ec0bbf5c709e81be6c4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-//\t\t} else if (this.binding instanceof ParameterizedMethodBinding && this.actualReceiverType instanceof ReferenceBinding) {", "-//\t\t\tReferenceBinding refBinding = (ReferenceBinding) this.actualReceiverType;", "-//\t\t\tif (refBinding.isGenericType() || refBinding.isRawType() || refBinding.isParameterizedType()) {", "-//\t\t\t\tMethodBinding exactMethod = scope.getMethod(refBinding, this.selector, argumentTypes, this);", "-//\t\t\t\tif (exactMethod == null) {", "-//\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "-//\t\t\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "-//\t\t\t\t}", "-//\t\t\t}", "+\t\t} else if (this.binding instanceof ParameterizedMethodBinding && this.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\tParameterizedMethodBinding paramMethodBinding = (ParameterizedMethodBinding) this.binding;", "+\t\t\tif (paramMethodBinding.hasSubstitutedParameters()) {", "+\t\t\t\tint length = argumentTypes.length;", "+\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\tif (paramMethodBinding.parameters[i] != argumentTypes[i] &&", "+\t\t\t\t\t\t\tparamMethodBinding.parameters[i].erasure() != argumentTypes[i].erasure()) {", "+\t\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 16123}
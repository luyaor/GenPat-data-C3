{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f398b5cc4c86dca72151cbaa7bb8c7b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d64ad21e0a847197ab440a7c16a4fa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t", "+\t\tif (valueIfTrue instanceof CastExpression) {", "+\t\t\tvalueIfTrue.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t}", "+\t\tif (valueIfFalse instanceof CastExpression) {", "+\t\t\tvalueIfFalse.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t}", "-\t\t\t\t&& (valueIfFalseType == IntBinding", "-\t\t\t\t\t&& valueIfFalse.isConstantValueOfTypeAssignableToType(valueIfFalseType, valueIfTrueType))) {", "+\t\t\t\t\t&& (valueIfFalseType == IntBinding", "+\t\t\t\t\t\t&& valueIfFalse.isConstantValueOfTypeAssignableToType(valueIfFalseType, valueIfTrueType))) {", "-\t\t\t\t|| valueIfFalseType == ShortBinding", "-\t\t\t\t|| valueIfFalseType == CharBinding)", "-\t\t\t\t&& (valueIfTrueType == IntBinding", "-\t\t\t\t\t&& valueIfTrue.isConstantValueOfTypeAssignableToType(valueIfTrueType, valueIfFalseType))) {", "+\t\t\t\t\t|| valueIfFalseType == ShortBinding", "+\t\t\t\t\t|| valueIfFalseType == CharBinding)", "+\t\t\t\t\t&& (valueIfTrueType == IntBinding", "+\t\t\t\t\t\t&& valueIfTrue.isConstantValueOfTypeAssignableToType(valueIfTrueType, valueIfFalseType))) {", "-\t\t\t\t&& BaseTypeBinding.isNarrowing(valueIfFalseType.id, T_int)) {", "+\t\t\t\t\t&& BaseTypeBinding.isNarrowing(valueIfFalseType.id, T_int)) {", "-\t\t\t\t&& BaseTypeBinding.isNarrowing(valueIfFalseType.id, T_long)) {", "+\t\t\t\t\t&& BaseTypeBinding.isNarrowing(valueIfFalseType.id, T_long)) {", "-\t\t\t\t&& BaseTypeBinding.isNarrowing(valueIfFalseType.id, T_float)) {", "+\t\t\t\t\t&& BaseTypeBinding.isNarrowing(valueIfFalseType.id, T_float)) {", "-\t\t\t|| (valueIfFalseType.isBaseType() && valueIfFalseType != NullBinding)) {", "+\t\t\t\t|| (valueIfFalseType.isBaseType() && valueIfFalseType != NullBinding)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7fee9003d6e397ec7320fc4cd67c432", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "20ba2adddd9acb8b30c82e8f2340c23092f7b231", "commitAfterChange": "71af1339250e9bbfcdc32b243ce0a3939731748f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tTypeBinding unboxedIfTrueType = valueIfTrueType.isBaseType() ? valueIfTrueType : env.computeBoxingType(valueIfTrueType);", "-\t\t\tTypeBinding unboxedIfFalseType = valueIfFalseType.isBaseType() ? valueIfFalseType : env.computeBoxingType(valueIfFalseType);", "-\t\t\tif (unboxedIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "-\t\t\t\tvalueIfTrueType = unboxedIfTrueType;", "-\t\t\t\tvalueIfFalseType = unboxedIfFalseType;", "-\t\t\t} else if (valueIfTrueType.isBaseType()) {", "-\t\t\t\tif ((valueIfTrueType == NullBinding) == valueIfFalseType.isBaseType()) {  // bool ? null : 12 --> Integer", "-\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType);", "-\t\t\t\t}", "-\t\t\t} else if (valueIfFalseType.isBaseType()) {", "-\t\t\t\tif ((valueIfFalseType == NullBinding) == valueIfTrueType.isBaseType()) {  // bool ? 12 : null --> Integer", "-\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\tif (valueIfTrueType != valueIfFalseType) {", "+\t\t\t\tTypeBinding unboxedIfTrueType = valueIfTrueType.isBaseType() ? valueIfTrueType : env.computeBoxingType(valueIfTrueType);", "+\t\t\t\tTypeBinding unboxedIfFalseType = valueIfFalseType.isBaseType() ? valueIfFalseType : env.computeBoxingType(valueIfFalseType);", "+\t\t\t\tif (unboxedIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "+\t\t\t\t\tvalueIfTrueType = unboxedIfTrueType;", "+\t\t\t\t\tvalueIfFalseType = unboxedIfFalseType;", "+\t\t\t\t} else if (valueIfTrueType.isBaseType()) {", "+\t\t\t\t\tif ((valueIfTrueType == NullBinding) == valueIfFalseType.isBaseType()) {  // bool ? null : 12 --> Integer", "+\t\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType);", "+\t\t\t\t\t}", "+\t\t\t\t} else if (valueIfFalseType.isBaseType()) {", "+\t\t\t\t\tif ((valueIfFalseType == NullBinding) == valueIfTrueType.isBaseType()) {  // bool ? 12 : null --> Integer", "+\t\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\t\t\t}"]}], "num": 59506}
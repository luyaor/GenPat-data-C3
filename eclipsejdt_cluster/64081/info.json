{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a85cad944633bda17015327a72d9ec89", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "581f755459cd5bc4fa4ff45eae3d862d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "7f04146f7ecfc97ac8decbf845cb74d2c5fd9ef2", "commitAfterChange": "904675358dc0c5cf51f156f5fad299110702a532", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public String[] getSuperInterfaceTypeSignatures() throws JavaModelException", "signatureAfterChange": " public String[] getSuperInterfaceTypeSignatures() throws JavaModelException", "diff": ["-\tchar[][] names= info.getInterfaceNames();", "-\tint length;", "-\tif (names == null || (length = names.length) == 0) {", "-\t\treturn NO_STRINGS;", "+\tchar[] genericSignature = info.getGenericSignature();", "+\tif (genericSignature != null) {", "+\t\tArrayList interfaces = new ArrayList();", "+\t\tint signatureLength = genericSignature.length;", "+\t\t// skip type parameters", "+\t\tint index = 0;", "+\t\tif (genericSignature[0] == '<') {", "+\t\t\tint count = 1;", "+\t\t\twhile (count > 0 && ++index < signatureLength) {", "+\t\t\t\tswitch (genericSignature[index]) {", "+\t\t\t\t\tcase '<': ", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '>':", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tindex++;", "+\t\t}", "+\t\t// skip superclass", "+\t\tindex = Util.scanClassTypeSignature(genericSignature, index) + 1;", "+\t\twhile (index  < signatureLength) {", "+\t\t\tint start = index;", "+\t\t\tindex = Util.scanClassTypeSignature(genericSignature, start) + 1;", "+\t\t\tchar[] interfaceSig = CharOperation.subarray(genericSignature, start, index);", "+\t\t\tinterfaces.add(new String(interfaceSig));", "+\t\t}", "+\t\tint size = interfaces.size();", "+\t\tString[] result = new String[size];", "+\t\tinterfaces.toArray(result);", "+\t\treturn result;", "+\t} else {", "+\t\tchar[][] names= info.getInterfaceNames();", "+\t\tint length;", "+\t\tif (names == null || (length = names.length) == 0) {", "+\t\t\treturn NO_STRINGS;", "+\t\t}", "+\t\tnames= ClassFile.translatedNames(names);", "+\t\tString[] strings= new String[length];", "+\t\tfor (int i= 0; i < length; i++) {", "+\t\t\tstrings[i]= new String(Signature.createTypeSignature(names[i], true));", "+\t\t}", "+\t\treturn strings;", "-\tnames= ClassFile.translatedNames(names);", "-\tString[] strings= new String[length];", "-\tfor (int i= 0; i < length; i++) {", "-\t\tstrings[i]= new String(Signature.createTypeSignature(names[i], true));", "-\t}", "-\treturn strings;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9939059388de0f999f6cba6cfd303e81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "6cbac45128bba7fa6d271bf8229dffb842e17b14", "commitAfterChange": "068cd980b5edbe213826c80d8c3fb1a72582288a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " private TypeVariableBinding createTypeVariable(SignatureWrapper wrapper, int rank)", "signatureAfterChange": "  private TypeVariableBinding[] createTypeVariables(SignatureWrapper wrapper, Binding declaringElement)", "diff": ["-private TypeVariableBinding createTypeVariable(SignatureWrapper wrapper, int rank) {", "-\t// ParameterSignature = Identifier ':' TypeSignature", "-\t//   or Identifier ':' TypeSignature(optional) InterfaceBound(s)", "-\t// InterfaceBound = ':' TypeSignature", "-\tint colon = CharOperation.indexOf(':', wrapper.signature, wrapper.start);", "-\tchar[] variableName = CharOperation.subarray(wrapper.signature, wrapper.start, colon);", "-\tTypeVariableBinding variable = new TypeVariableBinding(variableName, this, rank);", "-\treturn variable;", "+", "+private TypeVariableBinding[] createTypeVariables(SignatureWrapper wrapper, Binding declaringElement) {", "+\t// detect all type variables first", "+\tchar[] typeSignature = wrapper.signature;", "+\tint depth = 0, length = typeSignature.length;", "+\tint rank = 0;", "+\tArrayList variables = new ArrayList(1);", "+\tdepth = 0;", "+\tboolean pendingVariable = true;", "+\tcreateVariables: {", "+\t\tfor (int i = 1; i < length; i++) {", "+\t\t\tswitch(typeSignature[i]) {", "+\t\t\t\tcase '<' : ", "+\t\t\t\t\tdepth++;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '>' : ", "+\t\t\t\t\tif (--depth < 0)", "+\t\t\t\t\t\tbreak createVariables;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ';' :", "+\t\t\t\t\tif ((depth == 0) && (i +1 < length) && (typeSignature[i+1] != ':'))", "+\t\t\t\t\t\tpendingVariable = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tif (pendingVariable) {", "+\t\t\t\t\t\tpendingVariable = false;", "+\t\t\t\t\t\tint colon = CharOperation.indexOf(':', typeSignature, i);", "+\t\t\t\t\t\tchar[] variableName = CharOperation.subarray(typeSignature, i, colon);", "+\t\t\t\t\t\tvariables.add(new TypeVariableBinding(variableName, declaringElement, rank++));", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t// initialize type variable bounds - may refer to forward variables", "+\tTypeVariableBinding[] result;", "+\tvariables.toArray(result = new TypeVariableBinding[rank]);", "+\tfor (int i = 0; i < rank; i++) {", "+\t\tinitializeTypeVariable(result[i], result, wrapper);", "+\t}", "+\treturn result;"]}], "num": 64081}
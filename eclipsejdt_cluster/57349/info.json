{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f64ef50c8a3c5e653545f33d12d79f1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c7054ddf5875fe15ae7f7520b3ea4fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void recordUsingNullReference(Scope scope, VariableBinding local, \t\t\tASTNode location, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\t\tASTNode location, int checkType, FlowInfo flowInfo)", "diff": ["-\tpublic void recordUsingNullReference(Scope scope, VariableBinding local,", "+\tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local,", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, location);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, location);", "-\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, location);", "+\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "904df8b6f3b0c58fa2a0157044c02dd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "signatureAfterChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "diff": ["-\t\t\tVariableBinding local = this.nullVariables[i];", "+\t\t\tLocalVariableBinding local = this.nullLocals[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, location);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "-\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, location);", "-\t\t\t\t\tif (local instanceof LocalVariableBinding) {", "-\t\t\t\t\t\tFakedTrackingVariable trackingVar = ((LocalVariableBinding) local).closeTracker;", "+\t\t\t\t\t\tFakedTrackingVariable trackingVar = local.closeTracker;", "-\t\t\t\t\t}", "-\t\t\tVariableBinding local = this.nullVariables[i];", "+\t\t\tLocalVariableBinding local = this.nullLocals[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "-\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, location);", "-\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, location);", "+\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, location);", "-\t\t\t\t\tif (nullStatus != FlowInfo.NON_NULL && local instanceof LocalVariableBinding) {", "-\t\t\t\t\t\tFakedTrackingVariable closeTracker = ((LocalVariableBinding)local).closeTracker;", "+\t\t\t\t\tif (nullStatus != FlowInfo.NON_NULL) {", "+\t\t\t\t\t\tFakedTrackingVariable closeTracker = local.closeTracker;"]}], "num": 57349}
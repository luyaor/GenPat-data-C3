{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7068eddd5e379f522ba55643f3cfd52f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "289c8a8417aedb25902d28dba06dfefb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate APTResult runAPT( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFiles, \t\t\tfinal int internalRound)", "signatureAfterChange": " \tprivate Set<AnnotationProcessorFactory> build(final ProcessorEnvImpl processorEnv)", "diff": ["-\t", "-\tprivate APTResult runAPT(", "-\t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories,", "-\t\t\tfinal ProcessorEnvImpl processorEnv,", "-\t\t\tfinal List<IFile> filesWithMissingType,", "-\t\t\tfinal List<ICompilationUnit> unitsForFiles,", "-\t\t\tfinal int internalRound) ", "+\tprivate Set<AnnotationProcessorFactory> build(final ProcessorEnvImpl processorEnv)", "-\t\t\tif (factories.size() == 0)", "-\t\t\t{", "-\t\t\t\tif ( AptPlugin.DEBUG ) ", "-\t\t\t\t\ttrace( \"runAPT: leaving early because there are no factories\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\tprocessorEnv );", "-\t\t\t\treturn EMPTY_APT_RESULT;", "-\t\t\t}", "-\t\t", "-\t\t\tfinal IFile[] files = processorEnv.getFiles();", "+\t\t\tfinal ICompilationParticipantResult[] results = processorEnv.getFilesWithAnnotation();", "-\t\t\tfor( IFile parentIFile : files ){", "+\t\t\tfor( ICompilationParticipantResult result : results ){", "+\t\t\t\tfinal IFile parentIFile = result.getFile();", "-\t\t\tboolean mixedModeDispatch = shouldDispatchToBatchProcessor(factories, processorEnv);", "-\t\t\tfinal Set<AnnotationProcessorFactory> currentRoundDispatchedBatchFactories;", "+\t\t\tboolean mixedModeDispatch = shouldDispatchToBatchProcessor(processorEnv);", "-\t\t\t\tcurrentRoundDispatchedBatchFactories = new LinkedHashSet<AnnotationProcessorFactory>();", "-\t\t\t\trunAPTInMixedMode(factories, currentRoundDispatchedBatchFactories, processorEnv, filesWithMissingType, unitsForFiles, internalRound);", "+\t\t\t\trunAPTInMixedMode(lastGeneratedFiles, processorEnv);", "-\t\t\t\tcurrentRoundDispatchedBatchFactories = Collections.emptySet();", "-\t\t\t\trunAPTInFileBasedMode(factories, processorEnv, filesWithMissingType, unitsForFiles);", "+\t\t\t\trunAPTInFileBasedMode(processorEnv, lastGeneratedFiles);", "-\t\t\t", "-", "-\t\t\tfinal Map<IFile, Set<IFile>> allGeneratedFiles = processorEnv.getAllGeneratedFiles();", "-\t\t\tfinal Set<IFile> modifiedGeneratedSourceFiles = processorEnv.getModifiedGeneratedSourceFiles();", "-\t\t\t// any files that were generated for this parent on the last", "-\t\t\t// run, but are no longer generated should be removed", "-\t\t\t// BUGZILLA 103183 - reconcile-path disabled until type-generation in reconcile is turned on", "-\t\t\tSet<IFile> allDeletedFiles = new HashSet<IFile>();", "-\t\t\tfor( IFile file : files ){", "-\t\t\t\tSet<IFile> generatedFiles = allGeneratedFiles.get(file);", "-\t\t\t\tif (generatedFiles == null)", "-\t\t\t\t\tgeneratedFiles = Collections.emptySet();", "-\t\t\t\tfinal Set<IFile> deletedFiles = cleanupNoLongerGeneratedFiles( ", "-\t\t\t\t\t\t\tfile, ", "-\t\t\t\t\t\t\tprocessorEnv.getCompilationUnit(), ", "-\t\t\t\t\t\t\tlastGeneratedFiles.get(file), ", "-\t\t\t\t\t\t\tgeneratedFiles, ", "-\t\t\t\t\t\t\tgfm,", "-\t\t\t\t\t\t\tprocessorEnv);", "-\t\t\t\tif(deletedFiles != null )", "-\t\t\t\t\tallDeletedFiles.addAll(deletedFiles);\t\t", "-\t\t\t}\t\t", "-\t\t\tAPTResult result = new APTResult( modifiedGeneratedSourceFiles, ", "-\t\t\t\t\t\t\t\t\t\t\t  allDeletedFiles, ", "-\t\t\t\t\t\t\t\t\t\t\t  currentRoundDispatchedBatchFactories,", "-\t\t\t\t\t\t\t\t\t\t\t  processorEnv.getTypeDependencies(), ", "-\t\t\t\t\t\t\t\t\t\t\t  processorEnv.getProblems(), ", "-\t\t\t\t\t\t\t\t\t\t\t  processorEnv.hasGeneratedClassFiles() || processorEnv.hasGeneratedSourceFiles());", "+\t\t\tif( _filesWithoutAnnotation != null ){", "+\t\t\t\t/*final Set<IFile> deletedFiles = */ ", "+\t\t\t\t\tcleanupAllGeneratedFilesFrom(_filesWithoutAnnotation, null);", "+\t\t\t\t// TODO: figure out where to report <code>deletedFiles</code>", "+\t\t\t}", "+\t\t\t", "-\t\t\treturn result;", "-\t\treturn EMPTY_APT_RESULT;", "+\t\t", "+\t\treturn Collections.emptySet();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b4942a3c767a77b93109bb673874316", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate APTResult runAPT( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \t \tprivate void reconcile(ReconcileContext reconcileContext, \t\t\t   IJavaProject javaProject)", "diff": ["+\tprivate void reconcile(ReconcileContext reconcileContext,", "+\t\t\t   IJavaProject javaProject)", "+\t{", "+\t\tif (_factories.size() == 0) {", "+\t\t\tif (AptPlugin.DEBUG)", "+\t\t\t\ttrace(\"runAPT: leaving early because there are no factories\", //$NON-NLS-1$", "+\t\t\t\t\t\tnull);", "+\t\t\treturn;", "+\t\t}", "+\t\tReconcileProcessorEnv processorEnv = CompilationProcessorEnv", "+\t\t\t\t.newReconcileEnv(reconcileContext, javaProject);", "+\t\tdispatchToFileBasedProcessor(processorEnv);", "+", "+\t\tfinal List<? extends CategorizedProblem> problemList = processorEnv", "+\t\t\t\t.getProblems();", "+\t\tfinal int numProblems = problemList.size();", "+\t\tif (numProblems > 0) {", "+\t\t\tfinal CategorizedProblem[] aptCatProblems = new CategorizedProblem[numProblems];", "+\t\t\treconcileContext.putProblems(", "+\t\t\t\t\tAptPlugin.APT_COMPILATION_PROBLEM_MARKER, problemList", "+\t\t\t\t\t\t\t.toArray(aptCatProblems));", "+\t\t}", "+\t\tprocessorEnv.close();", "+\t}\t", "-\tprivate APTResult runAPT(", "-\t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories,", "-\t\t\tfinal ProcessorEnvImpl processorEnv) ", "-\t{", "-\t\tfinal List<IFile> filesWithMissingType = new ArrayList<IFile>();", "-\t\tfinal List<ICompilationUnit> unitsForFiles = new ArrayList<ICompilationUnit>();", "-\t\tfinal APTResult result = runAPT(factories, processorEnv, filesWithMissingType, unitsForFiles, 0);", "-\t", "-\t\tif( processorEnv.getPhase() == Phase.BUILD )", "-\t\t{\t", "-\t\t\tboolean generatedTypes = result.hasGeneratedTypes();", "-\t\t\tint internalRound = 1;", "-\t\t\twhile( generatedTypes && !filesWithMissingType.isEmpty() ){", "-\t\t\t\t// compile all generated files and try to satisfy the missing generated types.", "-\t\t\t\t\t\t\t", "-\t\t\t\tfinal int numFiles = filesWithMissingType.size();", "-\t\t\t\tassert numFiles == unitsForFiles.size() :", "-\t\t\t\t\t\"size mismatch\"; //$NON-NLS-1$\t\t\t", "-\t\t\t\t// we are about to re-process the file, wipe out the problems and", "-\t\t\t\t// type dependencies recorded from the previous run.", "-\t\t\t\tfor( IFile file :  filesWithMissingType ){", "-\t\t\t\t\tresult.removeDependenciesFrom(file);", "-\t\t\t\t\tresult.removeProblemsFrom(file);", "-\t\t\t\t", "-\t\t\t\tfinal IFile[] files = new IFile[numFiles];", "-\t\t\t\tfinal ICompilationUnit[] units = new ICompilationUnit[numFiles];", "-\t\t\t\tfor(int i=0; i<numFiles; i++ ){", "-\t\t\t\t\tfiles[i] = filesWithMissingType.get(i);", "-\t\t\t\t\tunits[i] = unitsForFiles.get(i);", "-\t\t\t\t}", "-\t\t\t\tProcessorEnvImpl newEnv = ProcessorEnvImpl.newBuildEnvInternalRounding(", "-\t\t\t\t\t\tfiles, units, processorEnv.getJavaProject() );", "-", "-\t\t\t\tfilesWithMissingType.clear();", "-\t\t\t\tunitsForFiles.clear();", "-\t\t\t\tAPTResult newResult = runAPT(factories, newEnv, filesWithMissingType, unitsForFiles, internalRound++);", "-\t\t\t\t// Only have generated types if there are *new* generated files", "-\t\t\t\tgeneratedTypes = hasNewFiles(result, newResult);", "-\t\t\t\t", "-\t\t\t\tresult.merge(newResult);", "-\t\t\t\tnewEnv.close();", "-\t", "-\t\treturn result;"]}], "num": 40880}
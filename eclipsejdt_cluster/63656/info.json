{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e86a495193b95786fc4e35a59d5a4e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b252bc014e610b1f9503727649fbb7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "7b3309da9229750686e478a0bba24cf03c887fb9", "commitAfterChange": "e72851f7c02ccfbc91816922dcb863357cca4426", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": "\r public void test443467() throws Exception", "signatureAfterChange": "\r public void test443467() throws Exception", "diff": ["-\tString jreDirectory = Util.getJREDirectory();\r", "-\tString jfxJar = Util.toNativePath(jreDirectory + \"/lib/ext/jfxrt.jar\");\r", "-\tthis.runNegativeTestWithExtraLibs(\r", "+\trunNegativeTestWithLibs(\r", "+\t\t\t\"import java.util.AbstractMap.SimpleEntry;\\n\" +\r", "-\t\t\t\"import javafx.util.Pair;\\n\" +\r", "-\t\t\t\"static void writeUpdates(Stream<Path> filter2, HashMap<Path, Pair<byte[], Instant>> ideFiles, HashMap<Path, Path> updateToFile) {\\n\" +\r", "-\t\t\t\"   filter2.map(p -> new Pair<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" +\r", "+\t\t\t\"static void writeUpdates(Stream<Path> filter2, HashMap<Path, SimpleEntry<byte[], Instant>> ideFiles, HashMap<Path, Path> updateToFile) {\\n\" +\r", "+\t\t\t\"   filter2.map(p -> new SimpleEntry<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" +\r", "-\t\t\"\tfilter2.map(p -> new Pair<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" + \r", "-\t\t\"\t                                                 ^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"\tfilter2.map(p -> new SimpleEntry<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" + \r", "+\t\t\"\t                                                        ^^^^^^^^^^^^^^^^^^\\n\" + \r", "-\t\t\"----------\\n\",\r", "-\t\tnew String[]{jfxJar});\r", "+\t\t\"----------\\n\");\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c5088786042d996a0dbb5c57d5d256a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "d5c3de1bf49901f78640f1692fd5e63eca3fdc62", "commitAfterChange": "59d1426d6ce986de5d867421d1fe44ed55b3b34c", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 309, "signatureBeforeChange": " \tpublic void test0662() throws JavaModelException", "signatureAfterChange": " \tpublic void test0662() throws JavaModelException", "diff": ["-\t\t\tString key = variableBinding.getKey();", "+\t\t\t// String key = variableBinding.getKey();", "-\t\t\tString key2 = variableBinding.getKey();", "-\t\t\tassertFalse(\"Keys should not be equals\", key2.equals(key));", "+\t\t\t// String key2 = variableBinding.getKey();", "+\t\t\t//assertFalse(\"Keys should not be equals\", key2.equals(key));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8b7790ed2b455ed74ee373f5e7ca872", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "commitAfterChange": "15b9b64cd3395138df99a099416e32d991a0ba26", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 298, "signatureBeforeChange": " public void test148()", "signatureAfterChange": " public void test148()", "diff": ["-\tString baseLogPart1 = ", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"Y.java\",", "+\t\t\t\"abstract class X { abstract <T extends Object> T go(A<T> a); }\\n\" +", "+\t\t\t\"class Y extends X {\\n\" +", "+\t\t\t\"\t@Override <T extends Object> T go(A a) { return null; }\\n\" +", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class A<T> {}\"", "+\t\t},", "-\t\t\"\t                               ^^^^^^^\\n\";", "-\tString baseLogPart2 = ", "+\t\t\"\t                               ^^^^^^^\\n\" + ", "+\t\tmustOverrideMessage(\"go(A)\", \"Y\") + ", "-\t\t\"----------\\n\";", "-\tString overrideLog= \"The method go(A) of type Y must override a superclass method\\n\";", "-\t// warning message differs at 1.6 level", "-\tif (COMPLIANCE_1_6.compareTo(this.complianceLevel) <= 0) {", "-\t\toverrideLog = \"The method go(A) of type Y must override or implement a supertype method\\n\";", "-\t}", "-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"Y.java\",", "-\t\t\t\"abstract class X { abstract <T extends Object> T go(A<T> a); }\\n\" +", "-\t\t\t\"class Y extends X {\\n\" +", "-\t\t\t\"\t@Override <T extends Object> T go(A a) { return null; }\\n\" +", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class A<T> {}\"", "-\t\t}, baseLogPart1 + overrideLog + baseLogPart2", "+\t\t\"----------\\n\""]}], "num": 63656}
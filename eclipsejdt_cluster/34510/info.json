{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9812e267db906690f541357c8e34db05", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82f0370225a6e4d0c90a1b6b09624670", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a83998eafb5710017d069118e5017f85165dc68d", "commitAfterChange": "507dcedd3a1fdac6fc22c9b1a4a0ec9c8798fdc1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["+\t */", "-\t\t// search for compiler ast nodes with same position", "-\t\tfor (int i=0; i<this.thrownExceptions.length; i++) {", "-\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "-\t\t\tif (typeRef.sourceStart==start) {", "-\t\t\t\treturn typeRef;", "+\t\t// parameters array", "+\t\tif (this.parameters != null) {", "+\t\t\tfor (int i=0; i<this.parameters.length; i++) {", "+\t\t\t\tJavadocSingleNameReference param = this.parameters[i];", "+\t\t\t\tif (param.sourceStart==start) {", "+\t\t\t\t\treturn param;", "+\t\t\t\t}", "-\t\tfor (int i=0; i<this.references.length; i++) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = this.references[i];", "-\t\t\tif (expression.sourceStart==start) {", "-\t\t\t\treturn expression;", "+\t\t// thrown exception array", "+\t\tif (this.thrownExceptions != null) {", "+\t\t\tfor (int i=0; i<this.thrownExceptions.length; i++) {", "+\t\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "+\t\t\t\tif (typeRef.sourceStart==start) {", "+\t\t\t\t\treturn typeRef;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// references array", "+\t\tif (this.references != null) {", "+\t\t\tfor (int i=0; i<this.references.length; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = this.references[i];", "+\t\t\t\tif (expression.sourceStart==start) {", "+\t\t\t\t\treturn expression;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afb4c83d1c3143a82ba366b75f8d22f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "0f3488dac4b5e77709c2ba33d94446481058e6f7", "commitAfterChange": "99350dc001d49db8dc24214c00ce73e1cd4de055", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t// Variables initialized only for the purpose of the for loop can be removed for further flow info", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=359495", "+\t\tif (this.initializations != null) {", "+\t\t\tfor (int i = 0; i < this.initializations.length; i++) {", "+\t\t\t\tStatement init = this.initializations[i];", "+\t\t\t\tif (init instanceof LocalDeclaration) {", "+\t\t\t\t\tLocalVariableBinding binding = ((LocalDeclaration) init).binding;", "+\t\t\t\t\tmergedInfo.resetAssignmentInfo(binding);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 34510}
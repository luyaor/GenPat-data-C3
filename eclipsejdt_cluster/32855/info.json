{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "815ba1a9966f031d4c88a20d92362a2f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8151e6c00905a5e16791f0dc2dbeb01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ForStatement.java", "commitBeforeChange": "4ab6cc8c24529af798fcb3762ec8aa5f9887812e", "commitAfterChange": "86d04547b51d0677dda29f45b4279354b3702983", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tboolean equalSubtrees(Object other)", "signatureAfterChange": "\r \tpublic boolean subtreeMatch(ASTMatcher matcher, Object other)", "diff": ["-\tboolean equalSubtrees(Object other) {\r", "-\t\tif (!(other instanceof ForStatement)) {\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t\tForStatement o = (ForStatement) other;\r", "-\t\treturn \r", "-\t\t\t(ASTNode.equalLists(initializers(), o.initializers())\r", "-\t\t\t&& ASTNode.equalNodes(getExpression(), o.getExpression())\r", "-\t\t\t&& ASTNode.equalLists(updaters(), o.updaters())\r", "-\t\t\t&& ASTNode.equalNodes(getBody(), o.getBody()));\r", "+\tpublic boolean subtreeMatch(ASTMatcher matcher, Object other) {\r", "+\t\t// dispatch to correct overloaded match method\r", "+\t\treturn matcher.match(this, other);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8bf7914b43ae8211f72feedd615eb90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ConditionalExpression.java", "commitBeforeChange": "4ab6cc8c24529af798fcb3762ec8aa5f9887812e", "commitAfterChange": "86d04547b51d0677dda29f45b4279354b3702983", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tboolean equalSubtrees(Object other)", "signatureAfterChange": "\r \tpublic boolean subtreeMatch(ASTMatcher matcher, Object other)", "diff": ["-\tboolean equalSubtrees(Object other) {\r", "-\t\tif (!(other instanceof ConditionalExpression)) {\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t\tConditionalExpression o = (ConditionalExpression) other;\r", "-\t\treturn \r", "-\t\t\t(ASTNode.equalNodes(getExpression(), o.getExpression())\r", "-\t\t\t&& ASTNode.equalNodes(getThenExpression(), o.getThenExpression())\r", "-\t\t\t&& ASTNode.equalNodes(getElseExpression(), o.getElseExpression()));\r", "+\tpublic boolean subtreeMatch(ASTMatcher matcher, Object other) {\r", "+\t\t// dispatch to correct overloaded match method\r", "+\t\treturn matcher.match(this, other);\r"]}], "num": 32855}
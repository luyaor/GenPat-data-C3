{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "343ba2836c85aceac7aa11dd08d2818c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ebe10cc8e7464d49f6a1d6d3fabb99b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "f2d2df0fb5504922fbc1cf85d25df5b20854758d", "commitAfterChange": "2ffe55c3b0132227da94f4cc6f226bb4c9f07c4f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \r private void notifyAllUnknownReferences()", "signatureAfterChange": "\r \r private void notifyAllUnknownReferences()", "diff": ["-\t\t\tif ((nameRef.bits & BindingIds.FIELD) != 0) {\r", "-\t\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\t\trequestor.acceptFieldReference(((SingleNameReference) nameRef).token, nameRef.sourceStart());\r", "+\t\t\tif ((nameRef.bits & BindingIds.TYPE) == 0) { \r", "+\t\t\t\t// variable but not type\r", "+\t\t\t\tif (nameRef instanceof SingleNameReference) { \r", "+\t\t\t\t\t// local var or field\r", "+\t\t\t\t\trequestor.acceptUnknownReference(((SingleNameReference) nameRef).token, nameRef.sourceStart());\r", "-\t\t\t\t\t// it is a QualifiedNameReference\r", "-\t\t\t\t\t// The last token is a field reference and the previous tokens are a type reference\r", "+\t\t\t\t\t// QualifiedNameReference\r", "+\t\t\t\t\t// The last token is a field reference and the previous tokens are a type/variable references\r", "-\t\t\t\t\trequestor.acceptTypeReference(typeRef, nameRef.sourceStart(), nameRef.sourceEnd() - tokens[tokensLength - 1].length);\r", "+\t\t\t\t\trequestor.acceptUnknownReference(typeRef, nameRef.sourceStart(), nameRef.sourceEnd() - tokens[tokensLength - 1].length);\r", "+\t\t\t\t// variable or type\r", "-\t\t\t\t// it is a QualifiedNameReference\r", "-\t\t\t\trequestor.acceptUnknownReference(((QualifiedNameReference) nameRef).tokens, nameRef.sourceStart(), nameRef.sourceEnd());\r", "-\t\t\t}\r", "+\t\t\t\t\t//QualifiedNameReference\r", "+\t\t\t\t\trequestor.acceptUnknownReference(((QualifiedNameReference) nameRef).tokens, nameRef.sourceStart(), nameRef.sourceEnd());\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d744e39e92761e7af8e4a4baadc2a76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "2414c381d9fba720a3b5b2375f506f068b4616ba", "commitAfterChange": "888d5cb313019c8c62b5cbd42b139e8dc64793b3", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 63, "signatureBeforeChange": " public void addUnknownRef(NameReference nameRef)", "signatureAfterChange": " public void addUnknownRef(NameReference nameRef)", "diff": ["-\tif (this.unknownRefs.length == this.unknownRefsCounter) {", "-\t\t// resize", "-\t\tSystem.arraycopy(", "-\t\t\tthis.unknownRefs,", "-\t\t\t0,", "-\t\t\t(this.unknownRefs = new NameReference[this.unknownRefsCounter * 2]),", "-\t\t\t0,", "-\t\t\tthis.unknownRefsCounter);", "+\t// Note that:", "+\t// - the only requestor interested in references is the SourceIndexerRequestor", "+\t// - a name reference can become a type reference only during the cast case, it is then tagged later with the Binding.TYPE bit", "+\t// However since the indexer doesn't make the distinction between name reference and type reference, there is no need", "+\t// to report a type reference in the SourceElementParser.", "+\t// This gained 3.7% in the indexing performance test.", "+\tif (nameRef instanceof SingleNameReference) {", "+\t\trequestor.acceptUnknownReference(((SingleNameReference) nameRef).token, nameRef.sourceStart);", "+\t} else {", "+\t\t//QualifiedNameReference", "+\t\trequestor.acceptUnknownReference(((QualifiedNameReference) nameRef).tokens, nameRef.sourceStart, nameRef.sourceEnd);", "-\tthis.unknownRefs[this.unknownRefsCounter++] = nameRef;"]}], "num": 58731}
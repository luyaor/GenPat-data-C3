{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eea0e27fb524d415a528e68f44a4f8c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4338b86b04df6c0df3c0b556f58ee582", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "commitAfterChange": "e6d8789df9b4566a0124edc04d16cdf543582e67", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (compilerOptions.isAnyEnabled(IrritantSet.UNLIKELY_ARGUMENT_TYPE) && this.binding.isValidBinding()) {", "-\t\tTypeBinding[] signatureReplacement = detectAndReplaceDangerousSignature(currentScope);", "-\t\tif (signatureReplacement != null) {", "-\t\t\tint len = this.argumentTypes.length;", "-\t\t\tfor (int i = 0; i < len; i++) {", "-\t\t\t\tTypeBinding expectedArgumentType = signatureReplacement[i];", "-\t\t\t\tTypeBinding argumentType = this.argumentTypes[i];", "-\t\t\t\tif (argumentType.isBaseType())", "-\t\t\t\t\targumentType = currentScope.boxing(argumentType);", "-\t\t\t\tif (!argumentType.isCompatibleWith(expectedArgumentType, currentScope)) {", "-\t\t\t\t\tboolean castable = checkCastTypesCompatibility(currentScope, expectedArgumentType, argumentType, this.arguments[i]);", "-\t\t\t\t\tcurrentScope.problemReporter().discouragedInvocationIncompatibleArgument(this.binding, this.arguments[i],", "-\t\t\t\t\t\t\t\texpectedArgumentType, signatureReplacement[len], castable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "458ae5b4815650aaf769a094c5a90e6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f97b24f3f8e94d8f54a74d9a196551c56851e735", "commitAfterChange": "edd951b2efc6b8f7b24cb3f178fd99c174eb6c7a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, String[] exclusionPatterns)", "signatureAfterChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, IPath[] exclusionPatterns)", "diff": ["-\tpublic static IClasspathEntry newSourceEntry(IPath path, String[] exclusionPatterns) {", "+\tpublic static IClasspathEntry newSourceEntry(IPath path, IPath[] exclusionPatterns) {", "-\t\t// discard empty trimmed patterns", "-\t\t\tString[] trimmedPatterns = exclusionPatterns;", "-\t\tif (exclusionPatterns != null) {", "-\t\t\tint index = 0;", "-\t\t\tint patternCount = exclusionPatterns.length;", "-\t\t\tfor (int i = 0; i < patternCount; i++){", "-\t\t\t\tString pattern;", "-\t\t\t\tif ((pattern = exclusionPatterns[i]) == null) continue;", "-\t\t\t\tString trimmedPattern = exclusionPatterns[i].trim();", "-\t\t\t\tif (trimmedPattern.length() == 0) continue;", "-\t\t\t\t", "-\t\t\t\tif (pattern.length() == trimmedPattern.length()) {", "-\t\t\t\t\tif (trimmedPatterns == exclusionPatterns) { // clone if necessary", "-\t\t\t\t\t\tSystem.arraycopy(exclusionPatterns, 0, trimmedPatterns = new String[patternCount], 0, index);", "-\t\t\t\t\t}", "-\t\t\t\t\ttrimmedPatterns[index] = trimmedPattern;", "-\t\t\t\t}", "-\t\t\t\tindex++;", "-\t\t\t}", "-\t\t\tif (index != patternCount) {", "-\t\t\t\tif (index == 0) {", "-\t\t\t\t\ttrimmedPatterns = null;", "-\t\t\t\t} else {", "-\t\t\t\t\tSystem.arraycopy(trimmedPatterns, 0, trimmedPatterns = new String[index], 0, index);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}\t\t", "-\t\t\ttrimmedPatterns,", "+\t\t\texclusionPatterns,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d88ea4027dae293c0f3001f029bc530e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavadocContents.java", "commitBeforeChange": "1b94558fa757b767854d14340a754f8fb18540c3", "commitAfterChange": "c0f8220101d45cc95e0339b31adfd53c34571071", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate String computeMethodAnchorPrefixEnd(BinaryMethod method) throws JavaModelException", "signatureAfterChange": " \t \tprivate String computeMethodAnchorPrefixEnd(BinaryMethod method) throws JavaModelException", "diff": ["-\t\t\tfinal String packageFragmentName = declaringType.getPackageFragment().getElementName();", "-\t\t\tfinal IJavaProject javaProject = declaringType.getJavaProject();", "-\t\t\tchar[][] typeNames = CharOperation.splitOn('.', typeQualifiedName.toCharArray());", "-\t\t\tif (!Flags.isStatic(declaringType.getFlags())) depth++;", "-\t\t\tStringBuffer typeName = new StringBuffer();", "-\t\t\tfor (int i = 0, max = typeNames.length; i < max; i++) {", "-\t\t\t\tif (typeName.length() == 0) {", "-\t\t\t\t\ttypeName.append(typeNames[i]);", "-\t\t\t\t} else {", "-\t\t\t\t\ttypeName.append('.').append(typeNames[i]);", "-\t\t\t\t}", "-\t\t\t\tIType resolvedType = javaProject.findType(packageFragmentName, String.valueOf(typeName));", "-\t\t\t\tif (resolvedType != null && resolvedType.isMember() && !Flags.isStatic(resolvedType.getFlags())) depth++;", "+\t\t\tif (!Flags.isStatic(declaringType.getFlags())) {", "+\t\t\t\tdepth++;", "+\t\t\t\t// depth is 1", "-\t\t\t\tfor (int i = 0; i < depth; i++) {", "-\t\t\t\t\tint indexOfComma = anchor.indexOf(',', index);", "-\t\t\t\t\tif (indexOfComma != -1) {", "-\t\t\t\t\t\tindex = indexOfComma + 2;", "-\t\t\t\t\t}", "+\t\t\t\tint indexOfComma = anchor.indexOf(',', index);", "+\t\t\t\tif (indexOfComma != -1) {", "+\t\t\t\t\tindex = indexOfComma + 2;"]}], "num": 7714}
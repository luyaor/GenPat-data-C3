{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80741af17d547fbb5a5a607f7b847d98", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "059fd7a63058a845d4d19ce1a5496a6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceTypeElementInfo.java", "commitBeforeChange": "d3244b9b1f07dec23fc8a11bdb05cd710c7b96c6", "commitAfterChange": "ed58872582a38f521f8bc7cc18b9c76c2c6fa7a1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " public char[][] getImports()", "signatureAfterChange": " public ISourceImport[] getImports()", "diff": ["-public char[][] getImports() {", "-\treturn fImports;", "+public ISourceImport[] getImports() {", "+\tif (this.imports == null) {", "+\t\ttry {", "+\t\t\tIImportDeclaration[] importDeclarations = this.fHandle.getCompilationUnit().getImports();", "+\t\t\tint length = importDeclarations.length;", "+\t\t\tif (length == 0) {", "+\t\t\t\tthis.imports = NO_IMPORTS;", "+\t\t\t} else {", "+\t\t\t\tthis.imports = new ISourceImport[importDeclarations.length];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\timports[i] = (ImportDeclarationElementInfo)((ImportDeclaration)importDeclarations[i]).getElementInfo();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (JavaModelException e) {", "+\t\t\tthis.imports = NO_IMPORTS;", "+\t\t}", "+\t}", "+\treturn this.imports;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58bc40890ce76cab3652be43e7eb82da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/EntryResult.java", "commitBeforeChange": "c3ad34ec44b228feb09e91ff5ac00fc774236d05", "commitAfterChange": "1d56e6175009cdfe398560b7ba099bb7669a1ef0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public String[] getDocumentNames(Index index) throws java.io.IOException", "signatureAfterChange": " public String[] getDocumentNames(Index index) throws java.io.IOException", "diff": ["-\t\tfor (int i = 0, l = this.documentTables.length; i < l; i++) {", "+\t\tint length = this.documentTables.length;", "+\t\tif (length == 1 && this.documentNames == null) { // have a single table", "+\t\t\tObject offset = this.documentTables[0].get(word);", "+\t\t\tint[] numbers = index.diskIndex.readDocumentNumbers(offset);", "+\t\t\tString[] names = new String[numbers.length];", "+\t\t\tfor (int i = 0, l = numbers.length; i < l; i++)", "+\t\t\t\tnames[i] = index.diskIndex.readDocumentName(numbers[i]);", "+\t\t\treturn names;", "+\t\t}", "+", "+\t\tfor (int i = 0; i < length; i++) {"]}], "num": 45663}
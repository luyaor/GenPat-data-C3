{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a38ebd7465d2610c830b8b9f86ec5ac4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "324dc9f07818bd8e9a036ffa6af4303d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "93bf0e16bb624b3d2ee6bc7dcb06214605ebe2f4", "commitAfterChange": "27fd6b1218a2223f75b9add3ad72e983a5f4500b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["-\t\t\tint end = methodName.getStartPosition()+methodName.getLength()-1;", "+//\t\t\tint end = methodName.getStartPosition()+methodName.getLength()-1;", "-\t\t\t\t\tend = param.getStartPosition()+param.getLength()-1;", "+//\t\t\t\t\tend = param.getStartPosition()+param.getLength()-1;", "-\t\t\tmethodRef.setSourceRange(start, end-start+1);", "+//\t\t\tmethodRef.setSourceRange(start, end-start+1);", "+\t\t\tmethodRef.setSourceRange(start, this.scanner.getCurrentTokenEndPosition()-start+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c79a70e138ec1b4ac81ac3e66a38ccb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "59f906dde0386689cf221a0077edc4ded4fac940", "commitAfterChange": "53a88facba099a7ef05d98b75f25800af60438f8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\tint importLevel = -1; // -1 = not found, 0 = on demand match, 1 = single import match", "-\t\t\t\t\t\tif (!importBinding.onDemand && importBinding.isStatic()) {", "+\t\t\t\t\t\tif (importBinding.onDemand) {", "+\t\t\t\t\t\t\tif (resolvedImport instanceof ReferenceBinding)", "+\t\t\t\t\t\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "+\t\t\t\t\t\t\t\tpossible = findMethod((ReferenceBinding) resolvedImport, selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t} else if (importBinding.onDemand && importLevel < 1 && resolvedImport instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "-\t\t\t\t\t\t\tpossible = findMethod((ReferenceBinding) resolvedImport, selector, argumentTypes, invocationSite);", "-\t\t\t\t\t\t\t\t\t\t\timportLevel = importBinding.onDemand ? 0 : 1;"]}], "num": 56273}
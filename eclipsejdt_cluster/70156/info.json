{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0733e805d96cef7d44c99596a558898", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69bbacff07112ab86a309c96d6996fcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void resolveTypeParameterTags(Scope scope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveTypeParameterTags(Scope scope, boolean reportMissing)", "diff": ["-\t\tTypeDeclaration typeDeclaration = null;", "-\t\tAbstractMethodDeclaration methodDeclaration = null;", "+\t\tTypeParameter[] parameters = null;", "-\t\t\t\tmethodDeclaration = ((MethodScope)scope).referenceMethod();", "+\t\t\t\tAbstractMethodDeclaration methodDeclaration = ((MethodScope)scope).referenceMethod();", "+\t\t\t\tparameters = methodDeclaration.typeParameters();", "-\t\t\t\ttypeDeclaration = ((ClassScope) scope).referenceContext;", "+\t\t\t\tTypeDeclaration typeDeclaration = ((ClassScope) scope).referenceContext;", "+\t\t\t\tparameters = typeDeclaration.typeParameters;", "-\t\tTypeParameter[] parameters = typeDeclaration==null ? methodDeclaration.typeParameters() : typeDeclaration.typeParameters;", "-\t\tint typeParametersLength = parameters == null ? 0 : parameters.length;", "-\t\tif (paramTypeParamLength == 0) {", "-\t\t\tif (reportMissing) {", "-\t\t\t\tfor (int i = 0, l=parameters.length; i<l; i++) {", "-\t\t\t\t\tscope.problemReporter().javadocMissingParamTag(parameters[i].name, parameters[i].sourceStart, parameters[i].sourceEnd, modifiers);", "+\t\tif (parameters != null) {", "+\t\t\tint typeParametersLength = parameters.length;", "+\t\t\tif (paramTypeParamLength == 0) {", "+\t\t\t\tif (reportMissing) {", "+\t\t\t\t\tfor (int i = 0, l=typeParametersLength; i<l; i++) {", "+\t\t\t\t\t\tscope.problemReporter().javadocMissingParamTag(parameters[i].name, parameters[i].sourceStart, parameters[i].sourceEnd, modifiers);", "+\t\t\t\t\t}", "-\t\t\t}", "-\t\t// Otherwise verify that all param tags match type parameters", "-\t\t} else if (typeVariables.length == typeParametersLength) {", "-\t\t\tTypeVariableBinding[] bindings = new TypeVariableBinding[paramTypeParamLength];", "-\t\t\t// Scan all @param tags", "-\t\t\tfor (int i = 0; i < paramTypeParamLength; i++) {", "-\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "-\t\t\t\tTypeBinding paramBindind = param.internalResolveType(scope);", "-\t\t\t\tif (paramBindind != null && paramBindind.isValidBinding()) {", "-\t\t\t\t\tif (paramBindind.isTypeVariable()) {", "-\t\t\t\t\t\t// Verify duplicated tags", "-\t\t\t\t\t\tboolean duplicate = false;", "-\t\t\t\t\t\tfor (int j = 0; j < i && !duplicate; j++) {", "-\t\t\t\t\t\t\tif (bindings[j] == param.resolvedType) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().javadocDuplicatedParamTag(param.token, param.sourceStart, param.sourceEnd, modifiers);", "-\t\t\t\t\t\t\t\tduplicate = true;", "+\t\t\t// Otherwise verify that all param tags match type parameters", "+\t\t\t} else if (typeVariables.length == typeParametersLength) {", "+\t\t\t\tTypeVariableBinding[] bindings = new TypeVariableBinding[paramTypeParamLength];", "+", "+\t\t\t\t// Scan all @param tags", "+\t\t\t\tfor (int i = 0; i < paramTypeParamLength; i++) {", "+\t\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "+\t\t\t\t\tTypeBinding paramBindind = param.internalResolveType(scope);", "+\t\t\t\t\tif (paramBindind != null && paramBindind.isValidBinding()) {", "+\t\t\t\t\t\tif (paramBindind.isTypeVariable()) {", "+\t\t\t\t\t\t\t// Verify duplicated tags", "+\t\t\t\t\t\t\tboolean duplicate = false;", "+\t\t\t\t\t\t\tfor (int j = 0; j < i && !duplicate; j++) {", "+\t\t\t\t\t\t\t\tif (bindings[j] == param.resolvedType) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().javadocDuplicatedParamTag(param.token, param.sourceStart, param.sourceEnd, modifiers);", "+\t\t\t\t\t\t\t\t\tduplicate = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (!duplicate) {", "+\t\t\t\t\t\t\t\tbindings[i] = (TypeVariableBinding) param.resolvedType;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().javadocUndeclaredParamTagName(param.token, param.sourceStart, param.sourceEnd, modifiers);", "-\t\t\t\t\t\tif (!duplicate) {", "-\t\t\t\t\t\t\tbindings[i] = (TypeVariableBinding) param.resolvedType;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\t// Look for undocumented type parameters", "+\t\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\t\tTypeParameter parameter = parameters[i];", "+\t\t\t\t\tboolean found = false;", "+\t\t\t\t\tfor (int j = 0; j < paramTypeParamLength && !found; j++) {", "+\t\t\t\t\t\tif (parameter.binding == bindings[j]) {", "+\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\tbindings[j] = null;", "-\t\t\t\t\t} else {", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!found && reportMissing) {", "+\t\t\t\t\t\tscope.problemReporter().javadocMissingParamTag(parameter.name, parameter.sourceStart, parameter.sourceEnd, modifiers);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t", "+\t\t\t\t// Report invalid param", "+\t\t\t\tfor (int i=0; i<paramTypeParamLength; i++) {", "+\t\t\t\t\tif (bindings[i] != null) {", "+\t\t\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t// Look for undocumented type parameters", "-\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\t\tTypeParameter parameter = parameters[i];", "-\t\t\t\tboolean found = false;", "-\t\t\t\tfor (int j = 0; j < paramTypeParamLength && !found; j++) {", "-\t\t\t\t\tif (parameter.binding == bindings[j]) {", "-\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\tbindings[j] = null;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (!found && reportMissing) {", "-\t\t\t\t\tscope.problemReporter().javadocMissingParamTag(parameter.name, parameter.sourceStart, parameter.sourceEnd, modifiers);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// Report invalid param", "-\t\t\tfor (int i=0; i<paramTypeParamLength; i++) {", "-\t\t\t\tif (bindings[i] != null) {", "-\t\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "-\t\t\t\t\tscope.problemReporter().javadocUndeclaredParamTagName(param.token, param.sourceStart, param.sourceEnd, modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1cdf1fd24487e96d066527e272cfada", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "517b7635549251305475f5979e09084934078df3", "commitAfterChange": "1d890ea58166bb002c22a6562a5afba809d4c5d9", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic void traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, ArrayList frames, boolean isClinit)", "signatureAfterChange": "  \tpublic void traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, ArrayList frames, boolean isClinit)", "diff": ["-\t\t// set initial values for stack markers", "+\t\t// set initial values for stack depth markers", "+\t\tint indexInStackDepthMarkers = 0;", "+\t\tStackDepthMarker[] stackDepthMarkers = stackMapFrameCodeStream.getStackDepthMarkers();", "+\t\tint stackDepthMarkersLength = stackDepthMarkers == null ? 0 : stackDepthMarkers.length;", "+\t\tboolean hasStackDepthMarkers = stackDepthMarkersLength != 0;", "+\t\tStackDepthMarker stackDepthMarker = null;", "+\t\tif (hasStackDepthMarkers) {", "+\t\t\tstackDepthMarker = stackDepthMarkers[0];", "+\t\t}", "+", "+\t\t// set initial values for stack markers (used only in cldc mode)", "-\t\tArrayList stackMarkers = stackMapFrameCodeStream.stackMarkers;", "-\t\tboolean hasStackMarkers = stackMarkers != null && stackMarkers.size() != 0;", "-\t\tStackMarker[] markers = null;", "-\t\tint markersLength = 0;", "-\t\tStackMarker marker = null;", "+\t\tStackMarker[] stackMarkers = stackMapFrameCodeStream.getStackMarkers();", "+\t\tint stackMarkersLength = stackMarkers == null ? 0 : stackMarkers.length;", "+\t\tboolean hasStackMarkers = stackMarkersLength != 0;", "+\t\tStackMarker stackMarker = null;", "-\t\t\tmarkersLength = stackMarkers.size();", "-\t\t\tstackMarkers.toArray(markers = new StackMarker[markersLength]);", "-\t\t\tmarker = markers[0];", "+\t\t\tstackMarker = stackMarkers[0];", "-\t\tboolean hasExceptionMarkers = exceptionMarkers != null && exceptionMarkers.length != 0;", "-\t\tint exceptionsMarkersLength = 0;", "+\t\tint exceptionsMarkersLength = exceptionMarkers == null ? 0 : exceptionMarkers.length;", "+\t\tboolean hasExceptionMarkers = exceptionsMarkersLength != 0;", "-\t\t\texceptionsMarkersLength = exceptionMarkers.length;", "-\t\t\tif (hasStackMarkers && marker.pc == currentPC) {", "-\t\t\t\tTypeBinding typeBinding = marker.typeBinding;", "+\t\t\tif (hasStackMarkers && stackMarker.pc == currentPC) {", "+\t\t\t\tVerificationTypeInfo[] infos = frame.stackItems;", "+\t\t\t\tVerificationTypeInfo[] tempInfos = new VerificationTypeInfo[frame.numberOfStackItems];", "+\t\t\t\tSystem.arraycopy(infos, 0, tempInfos, 0, frame.numberOfStackItems);", "+\t\t\t\tstackMarker.setInfos(tempInfos);", "+\t\t\t} else if (hasStackMarkers && stackMarker.destinationPC == currentPC) {", "+\t\t\t\tVerificationTypeInfo[] infos = stackMarker.infos;", "+\t\t\t\tframe.stackItems = infos;", "+\t\t\t\tframe.numberOfStackItems = infos.length;", "+\t\t\t\tindexInStackMarkers++;", "+\t\t\t\tif (indexInStackMarkers < stackMarkersLength) {", "+\t\t\t\t\tstackMarker = stackMarkers[indexInStackMarkers];", "+\t\t\t\t} else {", "+\t\t\t\t\thasStackMarkers = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (hasStackDepthMarkers && stackDepthMarker.pc == currentPC) {", "+\t\t\t\tTypeBinding typeBinding = stackDepthMarker.typeBinding;", "-\t\t\t\t\tif (marker.delta > 0) {", "+\t\t\t\t\tif (stackDepthMarker.delta > 0) {", "-\t\t\t\tindexInStackMarkers++;", "-\t\t\t\tif (indexInStackMarkers < markersLength) {", "-\t\t\t\t\tmarker = markers[indexInStackMarkers];", "+\t\t\t\tindexInStackDepthMarkers++;", "+\t\t\t\tif (indexInStackDepthMarkers < stackDepthMarkersLength) {", "+\t\t\t\t\tstackDepthMarker = stackDepthMarkers[indexInStackDepthMarkers];", "-\t\t\t\t\thasStackMarkers = false;", "+\t\t\t\t\thasStackDepthMarkers = false;", "+\t\t\t\tframe.numberOfStackItems = 0;"]}], "num": 70156}
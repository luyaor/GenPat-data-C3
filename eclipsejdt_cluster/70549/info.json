{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3bc69e1a2032611a5367c5ca0a61a98", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68dbff820858e3f432c198b0500ac5d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void consumeInsideCastExpressionLL1()", "signatureAfterChange": " protected void consumeInsideCastExpressionLL1()", "diff": ["-\tsuper.consumeInsideCastExpressionLL1();", "+\tif (!this.record) {", "+\t\tsuper.consumeInsideCastExpressionLL1();", "+\t} else {", "+\t\tboolean temp = this.skipRecord;", "+\t\ttry {", "+\t\t\tthis.skipRecord = true;", "+\t\t\tsuper.consumeInsideCastExpressionLL1();", "+\t\t\tif (this.record) {", "+\t\t\t\tExpression typeReference = this.expressionStack[this.expressionPtr];", "+\t\t\t\tif (!isAlreadyPotentialName(typeReference.sourceStart)) {", "+\t\t\t\t\tthis.addPotentialName(null, typeReference.sourceStart, typeReference.sourceEnd);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.skipRecord = temp;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5c2f1a59949d21a67d76af583493b93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "c29ff6f3ca53453d86d6a9de68da632d3d253455", "commitAfterChange": "c11e4d3823cd197ba20b5c4c8ef1ddf1ca70b418", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " protected void consumeInsideCastExpressionLL1WithBounds()", "signatureAfterChange": " protected void consumeInsideCastExpressionLL1WithBounds()", "diff": ["-\t\t\t\tExpression typeReference = this.expressionStack[this.expressionPtr];", "-\t\t\t\tif (!isAlreadyPotentialName(typeReference.sourceStart)) {", "-\t\t\t\t\taddPotentialName(null, typeReference.sourceStart, typeReference.sourceEnd);", "+\t\t\t\tint length =  this.expressionLengthStack[this.expressionLengthPtr];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tExpression typeReference = this.expressionStack[this.expressionPtr - length + i + 1];", "+\t\t\t\t\tif (!isAlreadyPotentialName(typeReference.sourceStart)) {", "+\t\t\t\t\t\taddPotentialName(null, typeReference.sourceStart, typeReference.sourceEnd);", "+\t\t\t\t\t}"]}], "num": 70549}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e6bd3424f52a50b5fbaf9836a0e726e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5402cfebc5f57a6ab2644de991add47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "2fed68de4f28af9e25ceba559157a67158806686", "commitAfterChange": "fb92a6812847f2670c8d1e77d78e650152148e1a", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues( \t\tBlockScope currentScope,  \t\tReferenceBinding targetType,  \t\tExpression enclosingInstance,  \t\tAstNode invocationSite)", "diff": ["-public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite) {", "+public void generateSyntheticEnclosingInstanceValues(", "+\t\tBlockScope currentScope, ", "+\t\tReferenceBinding targetType, ", "+\t\tExpression enclosingInstance, ", "+\t\tAstNode invocationSite) {", "+\t\t// deny access to enclosing instance argument for allocation and super constructor call (if 1.4)", "+\t\tboolean ignoreEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression", "+\t\t\t\t\t|| (complyTo14 && ((invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess())));", "-\t\t\t\t", "-\t\t\t\t// TODO (philippe) should have sender specify how to select enclosing instance 1.3/1.4 flavor ", "-\t\t\t\t\tsyntheticArgType, ", "-\t\t\t\t\tfalse /*not only exact match (that is, allow compatible)*/,", "-\t\t\t\t\tcomplyTo14", "-\t\t\t\t\t\t? (invocationSite instanceof AllocationExpression ", "-\t\t\t\t\t\t\t|| (invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess()))", "-\t\t\t\t\t\t: invocationSite instanceof AllocationExpression);", "+\t\t\t\t\t\tsyntheticArgType, ", "+\t\t\t\t\t\tfalse /*not only exact match (that is, allow compatible)*/,", "+\t\t\t\t\t\tignoreEnclosingArgInConstructorCall);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f262faafe70a633d989375cf4cdd19bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "4b1cb82b00b0f3c43755c37280deb732ae600c1a", "commitAfterChange": "1caf2b41c370e66c328190589dd64f01b35d7384", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void generateSyntheticEnclosingInstanceValues( \t\tBlockScope currentScope,  \t\tReferenceBinding targetType,  \t\tExpression enclosingInstance,  \t\tASTNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues( \t\tBlockScope currentScope,  \t\tReferenceBinding targetType,  \t\tExpression enclosingInstance,  \t\tASTNode invocationSite)", "diff": ["-\t\tboolean complyTo14 = currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\tlong compliance = currentScope.environment().options.complianceLevel;", "+", "-\t\tboolean ignoreEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression", "-\t\t\t\t\t|| (complyTo14 && ((invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess())));", "-\t\t\t\t\t\t", "+\t\t// always consider it if complying to 1.5", "+\t\tboolean denyEnclosingArgInConstructorCall;", "+\t\tif (compliance <= JDK1_3) {", "+\t\t\tdenyEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression;", "+\t\t} else if (compliance == JDK1_4){", "+\t\t\tdenyEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression", "+\t\t\t\t|| invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess();", "+\t\t} else {", "+\t\t\t//compliance >= JDK1_5", "+\t\t\tdenyEnclosingArgInConstructorCall = (invocationSite instanceof AllocationExpression", "+\t\t\t\t\t|| invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess()) ", "+\t\t\t\t&& !targetType.isLocalType();", "+\t\t}", "+\t\t", "+\t\tboolean complyTo14 = compliance >= ClassFileConstants.JDK1_4;", "-\t\t\t\t\t\tignoreEnclosingArgInConstructorCall);", "+\t\t\t\t\t\tdenyEnclosingArgInConstructorCall);"]}], "num": 31922}
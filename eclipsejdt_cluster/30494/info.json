{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40695f0ef15fe4e6f8d849189176f3b0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52ad58d25ab8dccc4e997a4f198e4de0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "71ab6b3956db9fea4a8f81e891e05ac4d44d96d9", "commitAfterChange": "6720ac2482e494a3ed8f387ef6b8945b6d3454d0", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r public Object[] getCompatibleEmulationPath(ReferenceBinding targetEnclosingType)", "signatureAfterChange": "\r public Object[] getCompatibleEmulationPath(ReferenceBinding targetEnclosingType)", "diff": ["-\t\t\tpath[0] = sourceType.getSyntheticField((SourceTypeBinding)currentType, this);\r", "+\t\t\tpath[0] = sourceType.getSyntheticField((SourceTypeBinding)currentType, this, false);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "903c5802ee10339fb18a2fc616244311", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "signatureAfterChange": "\r public static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "diff": ["-\t */\r", "-\tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry) {\r", "+ */\r", "+public static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry) {\r", "-\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_VARIABLE)\r", "-\t\t\treturn entry;\r", "+\tif (entry.getEntryKind() != IClasspathEntry.CPE_VARIABLE) return entry;\r", "-\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\r", "-\t\tIPath resolvedPath = JavaCore.getResolvedVariablePath(entry.getPath());\r", "-\t\tif (resolvedPath == null)\r", "-\t\t\treturn null;\r", "+\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\r", "+\tIPath resolvedPath = JavaCore.getResolvedVariablePath(entry.getPath());\r", "+\tif (resolvedPath == null) return null;\r", "-\t\tObject target = JavaModel.getTarget(workspaceRoot, resolvedPath);\r", "-\t\tif (target == null)\r", "-\t\t\treturn null;\r", "+\tObject target = JavaModel.getTarget(workspaceRoot, resolvedPath, false);\r", "+\tif (target == null) return null;\r", "-\t\t// inside the workspace\r", "-\t\tif (target instanceof IResource) {\r", "-\t\t\tIResource resolvedResource = (IResource) target;\r", "-\t\t\tif (resolvedResource != null) {\r", "-\t\t\t\tswitch (resolvedResource.getType()) {\r", "-\t\t\t\t\tcase IResource.PROJECT :\r", "-\t\t\t\t\t\treturn JavaCore.newProjectEntry(resolvedPath); // internal project\r", "-\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tString extension = resolvedResource.getFileExtension();\r", "-\t\t\t\t\t\tif (\"jar\".equalsIgnoreCase(extension)\r", "-\t\t\t\t\t\t\t|| \"zip\".equalsIgnoreCase(extension)) { // internal binary archive\r", "-\t\t\t\t\t\t\treturn JavaCore.newLibraryEntry(\r", "+\t// inside the workspace\r", "+\tif (target instanceof IResource){\t\r", "+\t\tIResource resolvedResource = (IResource) target;\r", "+\t\tif (resolvedResource != null){\r", "+\t\t\tswitch(resolvedResource.getType()){\r", "+\t\t\t\tcase IResource.PROJECT :\r", "+\t\t\t\t\treturn JavaCore.newProjectEntry(resolvedPath); // internal project\r", "+\t\t\t\tcase IResource.FILE :\r", "+\t\t\t\t\tString extension = resolvedResource.getFileExtension();\r", "+\t\t\t\t\tif (\"jar\"/*nonNLS*/.equalsIgnoreCase(extension) || \"zip\"/*nonNLS*/.equalsIgnoreCase(extension)){ // internal binary archive\r", "+\t\t\t\t\t\treturn JavaCore.newLibraryEntry( \r", "-\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResource.FOLDER : // internal binary folder\r", "-\t\t\t\t\t\treturn JavaCore.newLibraryEntry(\r", "+\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath())); \r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IResource.FOLDER :\t// internal binary folder\r", "+\t\t\t\t\treturn JavaCore.newLibraryEntry( \r", "-\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "-\t\t\t\t}\r", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath())); \r", "-\t\t// outside the workspace\r", "-\t\tif (target instanceof File) {\r", "-\t\t\tFile externalFile = (File) target;\r", "-\t\t\tif (externalFile.isFile()) {\r", "-\t\t\t\tString fileName = externalFile.getName().toLowerCase();\r", "-\t\t\t\tif (fileName.endsWith(\".jar\")\r", "-\t\t\t\t\t|| fileName.endsWith(\".zip\")) { // external binary archive\r", "-\t\t\t\t\treturn JavaCore.newLibraryEntry(\r", "+\t}\r", "+\t// outside the workspace\r", "+\tif (target instanceof File){\r", "+\t\tFile externalFile = (File) target;\r", "+\t\tif (externalFile.isFile()){\r", "+\t\t\tString fileName = externalFile.getName().toLowerCase();\r", "+\t\t\tif (fileName.endsWith(\".jar\"/*nonNLS*/) || fileName.endsWith(\".zip\"/*nonNLS*/)){ // external binary archive\r", "+\t\t\t\treturn JavaCore.newLibraryEntry( \r", "-\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "-\t\t\t\t}\r", "-\t\t\t} else { // external binary folder\r", "-\t\t\t\treturn JavaCore.newLibraryEntry(\r", "-\t\t\t\t\tresolvedPath,\r", "-\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),\r", "-\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "+\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath())); \r", "+\t\t} else { // external binary folder\r", "+\t\t\treturn JavaCore.newLibraryEntry( \r", "+\t\t\t\t\t\tresolvedPath,\r", "+\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),\r", "+\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath())); \r", "-\t\treturn null;\r", "+\treturn null;\r", "+}\r"]}], "num": 30494}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fc5c6514da52ca1dec65ec2ac108366", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d7f32f39b9d7552f673f64b48e5b3bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c0735951a055fba3f0be3b86f55a77d744b6fbe2", "commitAfterChange": "68f72525a8dac445249ab2b31cd220cf1a851f87", "methodNumberBeforeChange": 397, "methodNumberAfterChange": 396, "signatureBeforeChange": " public void testBug160324a() throws CoreException", "signatureAfterChange": " public void testBug160324a() throws CoreException", "diff": ["+\tboolean debug = false;", "-\t\tpublic void acceptTypeNameMatch(TypeNameMatch match) {", "-\t\t\tassertTrue(\"Problem with equals method for match \"+match, match.equals(match.getType()));", "-\t\t\tassertEquals(\"Problem with hashCode method for match \"+match, match.getType().hashCode(), match.hashCode());", "-\t\t\tsuper.acceptTypeNameMatch(match);", "-\t\t}", "-\tassertEquals(\"We should not find any type\", \"\", collector.toString());", "-\tassertEquals(\"We should not find any type\", \"\", requestor.toString());", "+\tif (debug) System.out.println(\"TypeNameRequestor results: \\n\"+requestor);", "+\t// Should have same types with these 2 searches", "+\tassertTrue(\"We should get some types!\", collector.size() > 0);", "+\tassertEquals(\"Found types sounds not to be correct\", requestor.toString(), collector.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0226de1575ee000c8bf74e422077134", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "65a63579ebc9b37573db7995b64988407cf25ede", "commitAfterChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void test013() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test013() throws JavaModelException, CoreException", "diff": ["-\t// TODO (frederic) put back assertions when failure on linux platform will be fixed", "-\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File, null));", "-//\t\tString independentEncodedContents = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(encodedContents);", "-\t\tString independentSource = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(source);", "-//\t\tassertEquals(\"Encoded UTF-8 source should have been decoded the same way!\", independentEncodedContents, independentSource);", "-//\t\tassertSourceEquals(\"Encoded UTF-8 source should have been decoded the same way!\", source, encodedContents);", "-\t\tSystem.out.println(\"Encoding tests013:\");", "-\t\tSystem.out.println(\"  - file encoding: \"+this.utf8File.getCharset());", "-\t\tSystem.out.println(\"  - project encoding: \"+this.encodingProject.getDefaultCharset());", "-\t\tSystem.out.println(\"  - workspace encoding: \"+getWorkspaceRoot().getDefaultCharset());", "-\t\tif (encodedContents.equals(independentSource)) {", "-\t\t\tSystem.out.println(\"  => SUCCESS: sources are identical\");", "-\t\t} else {", "-//\t\t\tSystem.out.println(\"  => FAIL: Encoded UTF-8 source should have been decoded the same way!\");", "-\t\t}", "+\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File, systemEncoding));", "+\t\tassertFalse(\"System encoding: \"+systemEncoding+\" should be different than UTF-8!\", \"UTF-8\".equals(systemEncoding));", "+\t\tassertSourceEquals(\"Encoded UTF-8 source should have been decoded the same way!\", source, encodedContents);"]}], "num": 13755}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0dee1ab6f33528e1dc4fa3de3072df35", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a9e06820aab3b54f6476fa73ee683fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "7a24b5673519868b3d216b53b0f32f47ba6cb3b0", "commitAfterChange": "07f0481ff2b1a4347f81b0851eed1d1f6479507f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "signatureAfterChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "diff": ["+\t\tString previousResult = result;", "-\t\t\tString newResult = org.eclipse.jdt.internal.core.util.Util.editedString(result, edit);", "-\t\t\tif (!result.equals(newResult)) {", "-\t\t\t\tswitch (IGNORE_SPACES) {", "-\t\t\t\t\tcase ALL_SPACES:", "-\t\t\t\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(result);", "-\t\t\t\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(newResult);", "-\t\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "-\t\t\t\t\t\t\treturn result;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase LINES_LEADING_SPACES:", "-\t\t\t\t\t\ttrimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(result);", "-\t\t\t\t\t\ttrimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(newResult);", "-\t\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "-\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "-\t\t\t\t\t\t\treturn result;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (ModelTestsUtil.removeWhiteSpace(result).equals(ModelTestsUtil.removeWhiteSpace(newResult))) {", "-\t\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "-\t\t\t\t\t\t\treturn result;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\ttrimmedExpected = filterFormattingInComments(result);", "-\t\t\t\t\t\ttrimmedActual= filterFormattingInComments(newResult);", "-\t\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "-\t\t\t\t\t\t\treturn result;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif (!isExpectedFailure()) {", "-\t\t\t\t\tassertSourceEquals(\"2nd formatting is different from first one!\", Util.convertToIndependantLineDelimiter(result), Util.convertToIndependantLineDelimiter(newResult));", "-\t\t\t\t}", "+\t\t\tpreviousResult = result;", "+\t\t\tresult = org.eclipse.jdt.internal.core.util.Util.editedString(result, edit);", "+\t\t}", "+\t\tif (!previousResult.equals(result)) {", "+\t\t\tswitch (IGNORE_SPACES) {", "+\t\t\t\tcase ALL_SPACES:", "+\t\t\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(previousResult);", "+\t\t\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(result);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\treturn previousResult;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase LINES_LEADING_SPACES:", "+\t\t\t\t\ttrimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(previousResult);", "+\t\t\t\t\ttrimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(result);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "+\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\treturn previousResult;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (ModelTestsUtil.removeWhiteSpace(previousResult).equals(ModelTestsUtil.removeWhiteSpace(result))) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\treturn previousResult;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\ttrimmedExpected = filterFormattingInComments(previousResult);", "+\t\t\t\t\ttrimmedActual= filterFormattingInComments(result);", "+\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\treturn previousResult;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\tif (!isExpectedFailure()) {", "+\t\t\t\tString counterString = counterToString(count);", "+\t\t\t\tassertSourceEquals(counterString+\" formatting is different from first one!\", Util.convertToIndependantLineDelimiter(previousResult), Util.convertToIndependantLineDelimiter(result));", "+\t\t\t}", "+\t\t\tresult = previousResult;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e1b590ec3e8e1a75a78626211442f70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "signatureAfterChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "diff": ["-\tif (length == source.length()) {", "+\tif (!COMPARE && length == source.length()) {", "-\t\t\t\tString counterString = counterString(count);", "-\t\t\t\tif (IGNORE_WHITESPACES) {", "-\t\t\t\t\tString trimmedResult = ModelTestsUtil.removeWhiteSpace(result);", "-\t\t\t\t\tString trimmedNewResult = ModelTestsUtil.removeWhiteSpace(newResult);", "-\t\t\t\t\tif (trimmedResult.equals(trimmedNewResult)) {", "-\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\tthis.hasSpaceFailure = true;", "-\t\t\t\t\t\treturn result;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (IGNORE_LINES_LEADING_WHITESPACES) {", "-\t\t\t\t\tString trimmedResult = ModelTestsUtil.trimLinesLeadingWhitespaces(result);", "-\t\t\t\t\tString trimmedNewResult = ModelTestsUtil.trimLinesLeadingWhitespaces(newResult);", "-\t\t\t\t\tif (trimmedResult.equals(trimmedNewResult)) {", "-\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "-\t\t\t\t\t\tthis.hasSpaceFailure = true;", "-\t\t\t\t\t\treturn result;", "-\t\t\t\t\t}", "-\t\t\t\t\tString compressedResult = ModelTestsUtil.removeWhiteSpace(result);", "-\t\t\t\t\tString compressedNewResult = ModelTestsUtil.removeWhiteSpace(newResult);", "-\t\t\t\t\tif (compressedResult.equals(compressedNewResult)) {", "-\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\tthis.hasSpaceFailure = true;", "-\t\t\t\t\t\treturn result;", "-\t\t\t\t\t}", "+\t\t\t\tswitch (IGNORE_SPACES) {", "+\t\t\t\t\tcase ALL_SPACES:", "+\t\t\t\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(result);", "+\t\t\t\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(newResult);", "+\t\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase LINES_LEADING_SPACES:", "+\t\t\t\t\t\ttrimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(result);", "+\t\t\t\t\t\ttrimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(newResult);", "+\t\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "+\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (ModelTestsUtil.removeWhiteSpace(result).equals(ModelTestsUtil.removeWhiteSpace(newResult))) {", "+\t\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\ttrimmedExpected = filterFormattingInComments(result);", "+\t\t\t\t\t\ttrimmedActual= filterFormattingInComments(newResult);", "+\t\t\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tassertSourceEquals(counterString+\" formatting is different from first one!\", Util.convertToIndependantLineDelimiter(result), Util.convertToIndependantLineDelimiter(newResult));", "+\t\t\t\t\tassertSourceEquals(\"2nd formatting is different from first one!\", Util.convertToIndependantLineDelimiter(result), Util.convertToIndependantLineDelimiter(newResult));", "-}"]}], "num": 28033}
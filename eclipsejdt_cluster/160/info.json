{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8b7999c5cc95f1d840e59160d12793a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e807e767df14134d2302602b0fe65b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "580481ae11bd0f856242b0cf44caa66107bf550d", "commitAfterChange": "d08e87c35b21123010227cf2729df51d820e4d50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "signatureAfterChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "diff": ["+\t\t\tClasspathEntry classpathEntry = (ClasspathEntry) root.getRawClasspathEntry();", "-\t\t\t\tcpLocations[index++] = new ClasspathJar(zipFile, ((ClasspathEntry) root.getRawClasspathEntry()).getAccessRuleSet());", "+\t\t\t\tcpLocations[index++] = new ClasspathJar(zipFile, classpathEntry.getAccessRuleSet(), classpathEntry.getExternalAnnotationPath());", "-\t\t\t\t\tcpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false, ((ClasspathEntry) root.getRawClasspathEntry()).getAccessRuleSet());", "+\t\t\t\t\tcpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false, classpathEntry.getAccessRuleSet());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db1d00ad560d8ebe9b878e5cdfeb16c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "b39f3a5a9fadba74f50d9dc16813d561f779e994", "commitAfterChange": "efd3b1f31e7f6af67fb63e84ece49ae3c1341055", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "signatureAfterChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "diff": ["-\t\t\tClasspathEntry classpathEntry = (ClasspathEntry) root.getRawClasspathEntry();", "-\t\t\t\tcpLocations[index++] = new ClasspathJar(zipFile, classpathEntry.getAccessRuleSet(), classpathEntry.getExternalAnnotationPath());", "+\t\t\t\tcpLocations[index++] = new ClasspathJar(zipFile, ((ClasspathEntry) root.getRawClasspathEntry()).getAccessRuleSet());", "-\t\t\t\t\tcpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false, classpathEntry.getAccessRuleSet());", "+\t\t\t\t\tcpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false, ((ClasspathEntry) root.getRawClasspathEntry()).getAccessRuleSet());"]}], "num": 160}
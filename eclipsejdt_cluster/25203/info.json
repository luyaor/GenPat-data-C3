{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54074ac696197ebe3b4df1a1c8e9095e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07ed8fb7955c672f8586abfc2317dc97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "2a2935d5ba546500d563cc08921b53e5b286cdf8", "commitAfterChange": "2d9dc5098273e0e95832d81d735d2d77249738ef", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tIType findSecondaryType(String typeName, IPackageFragment pkg, boolean partialMatch, final int acceptFlags)", "signatureAfterChange": " \tprivate IType findSecondaryType(String packageName, String typeName, IJavaProject project)", "diff": ["+\t */", "+\tprivate IType findSecondaryType(String packageName, String typeName, IJavaProject project) {", "+\t\tif (VERBOSE) {", "+\t\t\tUtil.verbose(\"NameLookup FIND SECONDARY TYPES:\"); //$NON-NLS-1$", "+\t\t\tUtil.verbose(\" -> pkg name: \" + packageName);  //$NON-NLS-1$", "+\t\t\tUtil.verbose(\" -> type name: \" + typeName);  //$NON-NLS-1$", "+\t\t\tUtil.verbose(\" -> projects: \"+project.getElementName()); //$NON-NLS-1$", "+\t\t}", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\ttry {", "+\t\t\tIJavaProject javaProject = project;", "+\t\t\tHashMap secondaryTypePaths = manager.getSecondaryTypes(javaProject);", "+\t\t\tif (secondaryTypePaths.size() > 0) {", "+\t\t\t\tHashMap types = (HashMap) secondaryTypePaths.get(packageName==null?\"\":packageName); //$NON-NLS-1$", "+\t\t\t\tif (types != null && types.size() > 0) {", "+\t\t\t\t\tIType type = (IType) types.get(typeName);", "+\t\t\t\t\tif (type != null) {", "+\t\t\t\t\t\treturn type;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\t// give up", "+\t\t}", "+\t\treturn null;", "+\t}", "-\t// TODO (kent) enable once index support is in", "-\tIType findSecondaryType(String typeName, IPackageFragment pkg, boolean partialMatch, final int acceptFlags) {", "-\t\ttry {", "-\t\t\tfinal ArrayList paths = new ArrayList();", "-\t\t\tTypeNameRequestor nameRequestor = new TypeNameRequestor() {", "-\t\t\t\tpublic void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path) {", "-\t\t\t\t\tif (enclosingTypeNames == null || enclosingTypeNames.length == 0) { // accept only top level types", "-\t\t\t\t\t\tint kind = modifiers & (ClassFileConstants.AccInterface|ClassFileConstants.AccEnum|ClassFileConstants.AccAnnotation);", "-\t\t\t\t\t\tswitch (kind) {", "-\t\t\t\t\t\t\tcase ClassFileConstants.AccAnnotation:", "-\t\t\t\t\t\t\tcase ClassFileConstants.AccAnnotation|ClassFileConstants.AccInterface:", "-\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_ANNOTATIONS) != 0) paths.add(path);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase ClassFileConstants.AccEnum:", "-\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_ENUMS) != 0) paths.add(path);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase ClassFileConstants.AccInterface:", "-\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_INTERFACES) != 0) paths.add(path);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_CLASSES) != 0) paths.add(path);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t};", "-", "-\t\t\tint matchMode = partialMatch ? SearchPattern.R_PREFIX_MATCH : SearchPattern.R_EXACT_MATCH;", "-\t\t\tint matchRule = !partialMatch ? matchMode | SearchPattern.R_CASE_SENSITIVE : matchMode;", "-\t\t\tnew SearchEngine().searchAllTypeNames(", "-\t\t\t\tpkg.getElementName().toCharArray(),", "-\t\t\t\ttypeName.toCharArray(),", "-\t\t\t\tmatchRule,", "-\t\t\t\tIJavaSearchConstants.TYPE,", "-\t\t\t\tSearchEngine.createJavaSearchScope(new IJavaElement[] {pkg}, false),", "-\t\t\t\tnameRequestor,", "-\t\t\t\tIJavaSearchConstants.CANCEL_IF_NOT_READY_TO_SEARCH,", "-\t\t\t\tnull);", "-", "-\t\t\tif (!paths.isEmpty()) {", "-\t\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\t\t\tfor (int i = 0, l = paths.size(); i < l; i++) {", "-\t\t\t\t\tString pathname = (String) paths.get(i);", "-\t\t\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(pathname)) {", "-\t\t\t\t\t\tIFile file = workspace.getRoot().getFile(new Path(pathname));", "-\t\t\t\t\t\tICompilationUnit unit = JavaCore.createCompilationUnitFrom(file);", "-\t\t\t\t\t\treturn unit.getType(typeName);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// ignore", "-\t\t} catch (OperationCanceledException ignore) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e789b61add0915b7bf7aba16b4816480", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(ForeachStatement forStatement, BlockScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(ForeachStatement forStatement, BlockScope scope) {", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamefor);", "+\t    final int line = this.scribe.line;", "+\t    this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_for);", "+\t\t", "+\t\tif (this.preferences.insert_space_after_opening_paren_in_for) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tformatLocalDeclaration(forStatement.elementVariable, scope, false, false);", "+", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOLON, this.preferences.insert_space_before_colon_in_for);", "+\t\tif (this.preferences.insert_space_after_colon_in_for) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tforStatement.collection.traverse(this, scope);", "+", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_for);", "+\t\t", "+\t\tfinal Statement action = forStatement.action;", "+\t\tif (action != null) {", "+\t\t\tif (action instanceof Block) {", "+\t            formatLeftCurlyBrace(line, this.preferences.brace_position_for_block);", "+\t\t\t\taction.traverse(this, scope);", "+\t\t\t} else if (action instanceof EmptyStatement) {", "+\t\t\t\t/*", "+\t\t\t\t * This is an empty statement", "+\t\t\t\t */", "+\t\t\t\tformatNecessaryEmptyStatement();", "+\t\t\t} else {", "+\t\t\t\tthis.scribe.indent();", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\taction.traverse(this, scope);", "+\t\t\t\tthis.scribe.unIndent();", "+\t\t\t}", "+\t\t\tif (action instanceof Expression) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t}", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t * This is an empty statement", "+\t\t\t */", "+\t\t\tformatNecessaryEmptyStatement(); ", "-        this.scribe.printModifiers();"]}], "num": 25203}
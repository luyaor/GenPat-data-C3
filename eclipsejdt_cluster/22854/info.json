{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0b2537639e395aa4d16579633437f86", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399b58aa32595d1c24084d10d6d55868", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "266ddb07da0dd2618bcfbec3256d70ddf353d13c", "commitAfterChange": "0f0f6cf807937b95cd594ad18f819e710f9be563", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length) throws JavaModelException", "signatureAfterChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "diff": ["- */", "-protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length) throws JavaModelException {", "-\tSelectionRequestor requestor= new SelectionRequestor(((JavaProject)getJavaProject()).getNameLookup(), this);", "-\tthis.codeSelect(cu, offset, length, requestor);", "-\treturn requestor.getElements();", "-}", "+}", "+protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException {", "+\tNameLookup nameLookup = null;", "+\ttry {", "+\t\t// set the units to look inside", "+\t\tnameLookup = ((JavaProject)getJavaProject()).getNameLookup();", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\tnameLookup.setUnitsToLookInside(workingCopies);", "+", "+\t\t// code select", "+\t\tSelectionRequestor requestor= new SelectionRequestor(nameLookup, this);", "+\t\tIBuffer buffer = getBuffer();", "+\t\tif (buffer == null) {", "+\t\t\treturn requestor.getElements();", "+\t\t}", "+\t\tint end= buffer.getLength();", "+\t\tif (offset < 0 || length < 0 || offset + length > end ) {", "+\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INDEX_OUT_OF_BOUNDS));", "+\t\t}", "+\t", "+\t\t// fix for 1FVGGKF", "+\t\tJavaProject project = (JavaProject)getJavaProject();", "+\t\tISearchableNameEnvironment environment = project.getSearchableNameEnvironment();", "+\t\t", "+\t\t// fix for 1FVXGDK", "+\t\tSelectionEngine engine = new SelectionEngine(environment, requestor, project.getOptions(true));", "+\t\tengine.select(cu, offset, offset + length - 1);", "+\t\treturn requestor.getElements();", "+\t} finally {", "+\t\tif (nameLookup != null) {", "+\t\t\tnameLookup.setUnitsToLookInside(null);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f460ef1e1fded2ded0a96bc444d670ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tNameLookup nameLookup = null;", "-\ttry {", "-\t\t// set the units to look inside", "-\t\tnameLookup = ((JavaProject)getJavaProject()).getNameLookup();", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "-\t\tnameLookup.setUnitsToLookInside(workingCopies);", "-\t\t// code select", "-\t\tSelectionRequestor requestor= new SelectionRequestor(nameLookup, this);", "-\t\tIBuffer buffer = getBuffer();", "-\t\tif (buffer == null) {", "-\t\t\treturn requestor.getElements();", "-\t\t}", "-\t\tint end= buffer.getLength();", "-\t\tif (offset < 0 || length < 0 || offset + length > end ) {", "-\t\t\tthrow new IllegalArgumentException(\"Selected range (\"+offset+ \", \" + (offset+length)+\") is not located in supplied source range (0, \"+end+\")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\t}", "+\tJavaProject project = (JavaProject)getJavaProject();", "+\tSearchableEnvironment environment = (SearchableEnvironment) project.newSearchableNameEnvironment(owner);", "-\t\t// fix for 1FVGGKF", "-\t\tJavaProject project = (JavaProject)getJavaProject();", "-\t\tISearchableNameEnvironment environment = project.getSearchableNameEnvironment();", "-\t\t", "-\t\t// fix for 1FVXGDK", "-\t\tSelectionEngine engine = new SelectionEngine(environment, requestor, project.getOptions(true));", "-\t\tengine.select(cu, offset, offset + length - 1);", "+\tSelectionRequestor requestor= new SelectionRequestor(environment.nameLookup, this);", "+\tIBuffer buffer = getBuffer();", "+\tif (buffer == null) {", "-\t} finally {", "-\t\tif (nameLookup != null) {", "-\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t}", "+\tint end= buffer.getLength();", "+\tif (offset < 0 || length < 0 || offset + length > end ) {", "+\t\tthrow new IllegalArgumentException(\"Selected range (\"+offset+ \", \" + (offset+length)+\") is not located in supplied source range (0, \"+end+\")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t}", "+", "+\t// fix for 1FVXGDK", "+\tSelectionEngine engine = new SelectionEngine(environment, requestor, project.getOptions(true));", "+\tengine.select(cu, offset, offset + length - 1);", "+\treturn requestor.getElements();"]}], "num": 22854}
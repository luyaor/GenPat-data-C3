{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e32b225394c86c8f712f17546ae375f7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f9e8aa1c917196473fc358e80768d54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException", "signatureAfterChange": " \tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException", "diff": ["-\t\t\tHashMap packageFragToTypes= new HashMap();", "+\t\t\tHashtableOfArrayToObject packageFragToTypes= new HashtableOfArrayToObject();", "-\t\t\tpackageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\tpackageFragToTypes.put(CharOperation.NO_STRINGS, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "-\t\t\t\t\tint last = entryName.length() - 1;", "-\t\t\t\t\tentryName= entryName.substring(0, last);", "-\t\t\t\t\tentryName= entryName.replace('/', '.');", "+\t\t\t\t\tentryName= entryName.substring(0, entryName.length() - 1);", "+\t\t\t\t\tString[] names = CharOperation.toStrings(CharOperation.splitOn('/', entryName.toCharArray()));", "+\t\t\t\t\tint length = names.length;", "-\t\t\t\t\t\tif (packageFragToTypes.containsKey(entryName)) break;", "-\t\t\t\t\t\tpackageFragToTypes.put(entryName, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\t\t\t\tif (packageFragToTypes.containsKey(names)) break;", "+\t\t\t\t\t\tpackageFragToTypes.put(names, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "-\t\t\t\t\t\tif ((last = entryName.lastIndexOf('.')) < 0) break;", "-\t\t\t\t\t\tentryName = entryName.substring(0, last);", "+\t\t\t\t\t\tif (--length <= 0) break;", "+\t\t\t\t\t\tSystem.arraycopy(names, 0, names = new String[length], 0, length);", "-\t\t\t\t\tString packageName;", "+\t\t\t\t\tString[] names;", "-\t\t\t\t\t\tentryName= entryName.replace('/', '.');", "-\t\t\t\t\t\tpackageName= entryName.substring(0, lastSeparator);", "+\t\t\t\t\t\tchar[] packageName = new char[lastSeparator];", "+\t\t\t\t\t\tentryName.getChars(0, lastSeparator, packageName, 0);", "+\t\t\t\t\t\tnames = CharOperation.toStrings(CharOperation.splitOn('/', packageName));", "-\t\t\t\t\t\tpackageName =  IPackageFragment.DEFAULT_PACKAGE_NAME;", "+\t\t\t\t\t\tnames =  CharOperation.NO_STRINGS;", "-\t\t\t\t\tString currentPackageName = packageName;", "+\t\t\t\t\tString[] currentNames = names;", "+\t\t\t\t\tint length = currentNames.length;", "-\t\t\t\t\t\tif (packageFragToTypes.containsKey(currentPackageName)) break;", "-\t\t\t\t\t\tpackageFragToTypes.put(currentPackageName, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\t\t\t\tif (packageFragToTypes.containsKey(currentNames)) break;", "+\t\t\t\t\t\tpackageFragToTypes.put(currentNames, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "-\t\t\t\t\t\tint last;", "-\t\t\t\t\t\tif ((last = currentPackageName.lastIndexOf('.')) < 0) break;", "-\t\t\t\t\t\tcurrentPackageName = currentPackageName.substring(0, last);", "+\t\t\t\t\t\tif (--length <= 0) break;", "+\t\t\t\t\t\tSystem.arraycopy(currentNames, 0, currentNames = new String[length], 0, length);", "-\t\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(packageName);", "+\t\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(names);", "-\t\t\tIterator packages = packageFragToTypes.keySet().iterator();", "-\t\t\twhile (packages.hasNext()) {", "-\t\t\t\tString packName = (String) packages.next();", "+\t\t\tfor (int i = 0, length = packageFragToTypes.keyTable.length; i < length; i++) {", "+\t\t\t\tString[] pkgName = (String[]) packageFragToTypes.keyTable[i];", "+\t\t\t\tif (pkgName == null) continue;", "-\t\t\t\tArrayList[] entries= (ArrayList[]) packageFragToTypes.get(packName);", "-\t\t\t\tJarPackageFragment packFrag= (JarPackageFragment) getPackageFragment(packName);", "+\t\t\t\tArrayList[] entries= (ArrayList[]) packageFragToTypes.get(pkgName);", "+\t\t\t\tJarPackageFragment packFrag= (JarPackageFragment) getPackageFragment(pkgName);", "-\t\t\t\t\tpackFrag.computeNonJavaResources(NO_STRINGS, fragInfo, jar.getName());", "+\t\t\t\t\tpackFrag.computeNonJavaResources(CharOperation.NO_STRINGS, fragInfo, jar.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4574fcc83ec2275759d5f170b3cb6567", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "d74cc8c06b35228791394046e6c7725558d6ea07", "commitAfterChange": "cbd48da7303f20fe27c3bb57f06cce9208a1cb77", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException", "signatureAfterChange": " \tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException", "diff": ["-\t\t\t\t\tentryName= entryName.substring(0, entryName.length() - 1);", "-\t\t\t\t\tString[] names = CharOperation.toStrings(CharOperation.splitOn('/', entryName.toCharArray()));", "-\t\t\t\t\tint length = names.length;", "-\t", "-\t\t\t\t\t// add the package name & all of its parent packages", "-\t\t\t\t\twhile (true) {", "-\t\t\t\t\t\t// extract the package name", "-\t\t\t\t\t\tif (packageFragToTypes.containsKey(names)) break;", "-\t\t\t\t\t\tpackageFragToTypes.put(names, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (--length <= 0) break;", "-\t\t\t\t\t\tSystem.arraycopy(names, 0, names = new String[length], 0, length);", "-\t\t\t\t\t}", "+\t\t\t\t\tinitPackageFragToTypes(packageFragToTypes, entryName, entryName.length()-1);", "-\t\t\t\t\tString[] names;", "-\t\t\t\t\tString fileName;", "-\t\t\t\t\tif (lastSeparator != -1) { //not in the default package", "-\t\t\t\t\t\tfileName= entryName.substring(lastSeparator + 1);", "-\t\t\t\t\t\tchar[] packageName = new char[lastSeparator];", "-\t\t\t\t\t\tentryName.getChars(0, lastSeparator, packageName, 0);", "-\t\t\t\t\t\tnames = CharOperation.toStrings(CharOperation.splitOn('/', packageName));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfileName = entryName;", "-\t\t\t\t\t\tnames =  CharOperation.NO_STRINGS;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// add the package name & all of its parent packages", "-\t\t\t\t\tString[] currentNames = names;", "-\t\t\t\t\tint length = currentNames.length;", "-\t\t\t\t\twhile (true) {", "-\t\t\t\t\t\t// extract the package name", "-\t\t\t\t\t\tif (packageFragToTypes.containsKey(currentNames)) break;", "-\t\t\t\t\t\tpackageFragToTypes.put(currentNames, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (--length <= 0) break;", "-\t\t\t\t\t\tSystem.arraycopy(currentNames, 0, currentNames = new String[length], 0, length);", "-\t\t\t\t\t}", "+\t\t\t\t\tString fileName= entryName.substring(lastSeparator + 1);", "+\t\t\t\t\tString[] pkgName = initPackageFragToTypes(packageFragToTypes, entryName, lastSeparator);", "+", "-\t\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(names);", "+\t\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(pkgName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb2f2b62bd577e9313f153f5155fb52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "commitAfterChange": "2e2e66f7f68b994d0931afecfd3c1e559acd59d5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r protected void computeJarChildren(JarPackageFragmentRootInfo info, Vector vChildren) throws JavaModelException", "signatureAfterChange": "\r protected void computeJarChildren(JarPackageFragmentRootInfo info, ArrayList vChildren) throws JavaModelException", "diff": ["-protected void computeJarChildren(JarPackageFragmentRootInfo info, Vector vChildren) throws JavaModelException {\r", "+protected void computeJarChildren(JarPackageFragmentRootInfo info, ArrayList vChildren) throws JavaModelException {\r", "-\t\tHashtable packageFragToTypes= new Hashtable();\r", "+\t\tHashMap packageFragToTypes= new HashMap();\r", "-\t\tpackageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new Vector[] { new Vector(), new Vector()\r", "+\t\tpackageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\tVector[] temp;\r", "+\t\tArrayList[] temp;\r", "-\t\t\t\ttemp= (Vector[]) packageFragToTypes.get(eName);\r", "+\t\t\t\ttemp= (ArrayList[]) packageFragToTypes.get(eName);\r", "-\t\t\t\t\ttemp= new Vector[] { new Vector(), new Vector()\r", "+\t\t\t\t\ttemp= new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\t\t\t\tVector classTemp;\r", "+\t\t\t\t\tArrayList classTemp;\r", "-\t\t\t\t\ttemp= (Vector[]) packageFragToTypes.get(key);\r", "+\t\t\t\t\ttemp= (ArrayList[]) packageFragToTypes.get(key);\r", "-\t\t\t\t\t\t\t\tpackageFragToTypes.put(prefix, new Vector[] { new Vector(), new Vector()\r", "+\t\t\t\t\t\t\t\tpackageFragToTypes.put(prefix, new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\t\t\t\t\tclassTemp= new Vector();\r", "-\t\t\t\t\t\tclassTemp.addElement(value);\r", "-\t\t\t\t\t\tpackageFragToTypes.put(key, new Vector[] {classTemp, new Vector()\r", "+\t\t\t\t\t\tclassTemp= new ArrayList();\r", "+\t\t\t\t\t\tclassTemp.add(value);\r", "+\t\t\t\t\t\tpackageFragToTypes.put(key, new ArrayList[] {classTemp, new ArrayList()\r", "-\t\t\t\t\t\tclassTemp.addElement(value);\r", "+\t\t\t\t\t\tclassTemp.add(value);\r", "-\t\t\t\t\tVector resTemp;\r", "+\t\t\t\t\tArrayList resTemp;\r", "-\t\t\t\t\ttemp= (Vector[]) packageFragToTypes.get(key);\r", "+\t\t\t\t\ttemp= (ArrayList[]) packageFragToTypes.get(key);\r", "-\t\t\t\t\t\t\t\tpackageFragToTypes.put(prefix, new Vector[] { new Vector(), new Vector()\r", "+\t\t\t\t\t\t\t\tpackageFragToTypes.put(prefix, new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\t\t\t\t\tresTemp= new Vector();\r", "-\t\t\t\t\t\tresTemp.addElement(value);\r", "-\t\t\t\t\t\tpackageFragToTypes.put(key, new Vector[] { new Vector(), resTemp });\r", "+\t\t\t\t\t\tresTemp= new ArrayList();\r", "+\t\t\t\t\t\tresTemp.add(value);\r", "+\t\t\t\t\t\tpackageFragToTypes.put(key, new ArrayList[] { new ArrayList(), resTemp });\r", "-\t\t\t\t\t\tresTemp.addElement(value);\r", "+\t\t\t\t\t\tresTemp.add(value);\r", "-\t\tEnumeration packages= packageFragToTypes.keys();\r", "-\t\twhile (packages.hasMoreElements()) {\r", "-\t\t\tString packName= (String) packages.nextElement();\r", "-\t\t\tVector[] entries= (Vector[]) packageFragToTypes.get(packName);\r", "+\t\tIterator packages = packageFragToTypes.keySet().iterator();\r", "+\t\twhile (packages.hasNext()) {\r", "+\t\t\tString packName= (String) packages.next();\r", "+\t\t\tArrayList[] entries= (ArrayList[]) packageFragToTypes.get(packName);\r", "-\t\t\t\tentries[1].copyInto(resNames);\r", "+\t\t\t\tentries[1].toArray(resNames);\r", "-\t\t\tvChildren.addElement(packFrag);\r", "+\t\t\tvChildren.add(packFrag);\r"]}], "num": 40725}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a18e19d327b41579c10627817199671", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4145bdf1dbd9e6b3b5584e6c02d0460b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "diff": ["-\t\tint methodLength = methodName.length;", "-\t\t\tif (exactMatch) {", "-\t\t\t\tif (!CharOperation.equals(methodName, method.selector, false /* ignore case */", "-\t\t\t\t\t))", "-\t\t\t\t\tcontinue next;", "-", "-\t\t\t} else {", "-", "-\t\t\t\tif (methodLength > method.selector.length)", "-\t\t\t\t\tcontinue next;", "-", "-\t\t\t\tif (!CharOperation.prefixEquals(methodName, method.selector, false", "-\t\t\t\t\t/* ignore case */", "-\t\t\t\t\t))", "-\t\t\t\t\tcontinue next;", "+\t\t\tif (methodName != null) {", "+\t\t\t\tif (exactMatch) {", "+\t\t\t\t\tif (!CharOperation.equals(methodName, method.selector, false /* ignore case */)) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (methodName.length > method.selector.length) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!CharOperation.prefixEquals(methodName, method.selector, false\t/* ignore case */)) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\tif (argTypes[a] != null){ // can be null if it could not be resolved properly", "+\t\t\t\tif (argTypes[a] != null && argTypes[a].isValidBinding()) { // can be null if it could not be resolved properly", "-\t\t\t", "-\t\t\t// nothing to insert - do not want to replace the existing selector & arguments", "-\t\t\tif (!exactMatch) {", "-\t\t\t\tif (this.source != null", "-\t\t\t\t\t&& this.source.length > this.endPosition", "-\t\t\t\t\t&& this.source[this.endPosition] == '(')", "-\t\t\t\t\tcompletion = method.selector;", "-\t\t\t\telse", "-\t\t\t\t\tcompletion = CharOperation.concat(method.selector, new char[] { '(', ')' });", "-\t\t\t} else {", "-\t\t\t\tif(prefixRequired && (this.source != null)) {", "-\t\t\t\t\tcompletion = CharOperation.subarray(this.source, this.startPosition, this.endPosition);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.startPosition = this.endPosition;", "+", "+\t\t\t// Special case for completion in javadoc", "+\t\t\tif (this.assistNodeInJavadoc > 0) {", "+\t\t\t\tExpression receiver = null;", "+\t\t\t\tif (invocationSite instanceof CompletionOnJavadocMessageSend) {", "+\t\t\t\t\tCompletionOnJavadocMessageSend msg = (CompletionOnJavadocMessageSend) invocationSite;", "+\t\t\t\t\treceiver = msg.receiver;", "+\t\t\t\t} else if (invocationSite instanceof CompletionOnJavadocFieldReference) {", "+\t\t\t\t\tCompletionOnJavadocFieldReference fieldRef = (CompletionOnJavadocFieldReference) invocationSite;", "+\t\t\t\t\treceiver = fieldRef.receiver;", "-\t\t\t}", "-\t\t\t", "-\t\t\tif(prefixRequired || this.options.forceImplicitQualification){", "-\t\t\t\tchar[] prefix = computePrefix(scope.enclosingSourceType(), invocationScope.enclosingSourceType(), method.isStatic());", "-\t\t\t\tcompletion = CharOperation.concat(prefix,completion,'.');", "+\t\t\t\tStringBuffer javadocCompletion = new StringBuffer();", "+\t\t\t\tif (receiver.isThis()) {", "+\t\t\t\t\tif ((this.assistNodeInJavadoc & /*IN_JAVADOC_TEXT*/CompletionOnJavadoc.TEXT) != 0) {", "+\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t}", "+\t\t\t\t} else if ((this.assistNodeInJavadoc & /*IN_JAVADOC_TEXT*/CompletionOnJavadoc.TEXT) != 0) {", "+\t\t\t\t\tif (receiver instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\t\tJavadocSingleTypeReference typeRef = (JavadocSingleTypeReference) receiver;", "+\t\t\t\t\t\tjavadocCompletion.append(typeRef.token);", "+\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t} else if (receiver instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\t\tJavadocQualifiedTypeReference typeRef = (JavadocQualifiedTypeReference) receiver;", "+\t\t\t\t\t\tcompletion = CharOperation.concat(CharOperation.concatWith(typeRef.tokens, '.'), method.selector, '#');", "+\t\t\t\t\t\tfor (int t=0,nt =typeRef.tokens.length; t<nt; t++) {", "+\t\t\t\t\t\t\tif (t>0) javadocCompletion.append('.');", "+\t\t\t\t\t\t\tjavadocCompletion.append(typeRef.tokens[t]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tjavadocCompletion.append(method.selector);", "+\t\t\t\t// Append parameters types", "+\t\t\t\tjavadocCompletion.append('(');", "+\t\t\t\tif (method.parameters != null) {", "+\t\t\t\t\tfor (int p=0, ln=method.parameters.length; p<ln; p++) {", "+\t\t\t\t\t\tif (p>0) javadocCompletion.append(\", \"); //$NON-NLS-1$", "+\t\t\t\t\t\tTypeBinding argTypeBinding = method.parameters[p];", "+\t\t\t\t\t\tcreateType(argTypeBinding.erasure(), javadocCompletion);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tjavadocCompletion.append(')');", "+\t\t\t\tcompletion = javadocCompletion.toString().toCharArray();", "+\t\t\t} else {", "+\t\t\t\t// nothing to insert - do not want to replace the existing selector & arguments", "+\t\t\t\tif (!exactMatch) {", "+\t\t\t\t\tif (this.source != null", "+\t\t\t\t\t\t&& this.source.length > this.endPosition", "+\t\t\t\t\t\t&& this.source[this.endPosition] == '(')", "+\t\t\t\t\t\tcompletion = method.selector;", "+\t\t\t\t\telse", "+\t\t\t\t\t\tcompletion = CharOperation.concat(method.selector, new char[] { '(', ')' });", "+\t\t\t\t} else {", "+\t\t\t\t\tif(prefixRequired && (this.source != null)) {", "+\t\t\t\t\t\tcompletion = CharOperation.subarray(this.source, this.startPosition, this.endPosition);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.startPosition = this.endPosition;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif(prefixRequired || this.options.forceImplicitQualification){", "+\t\t\t\t\tchar[] prefix = computePrefix(scope.enclosingSourceType(), invocationScope.enclosingSourceType(), method.isStatic());", "+\t\t\t\t\tcompletion = CharOperation.concat(prefix,completion,'.');", "+\t\t\t\t}", "-\t\t\trelevance += computeRelevanceForCaseMatching(methodName, method.selector);", "+\t\t\tif (methodName != null) relevance += computeRelevanceForCaseMatching(methodName, method.selector);", "-\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t// Standard proposal", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF) && (this.assistNodeInJavadoc & CompletionOnJavadoc.ONLY_INLINE_TAG) == 0) {", "+\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t// Javadoc proposal", "+\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0 && !this.requestor.isIgnored(CompletionProposal.JAVADOC_METHOD_REF)) {", "+\t\t\t\tchar[] javadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_LINK);", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.JAVADOC_METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\tMethodBinding original = method.original();", "+\t\t\t\tif(original != method) {", "+\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t}", "+\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\tproposal.setCompletion(javadocCompletion);", "+\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\tint start = (this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0 ? this.javadocTagPosition : this.startPosition;", "+\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance+R_INLINE_TAG);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7abb1abd6a306c7df03d2d580efb53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "signatureAfterChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "diff": ["-\t\t\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly", "+\t\t\t\t\t\tif (argTypes[a] != null && argTypes[a].isValidBinding()) // can be null if it could not be resolved properly", "+", "+\t\t\t\t\t\t// Special case for completion in javadoc", "+\t\t\t\t\t\tif (this.assistNodeInJavadoc > 0) {", "+\t\t\t\t\t\t\tExpression receiver = null;", "+\t\t\t\t\t\t\tchar[] selector = null;", "+\t\t\t\t\t\t\tif (invocationSite instanceof CompletionOnJavadocAllocationExpression) {", "+\t\t\t\t\t\t\t\tCompletionOnJavadocAllocationExpression alloc = (CompletionOnJavadocAllocationExpression) invocationSite;", "+\t\t\t\t\t\t\t\treceiver = alloc.type;", "+\t\t\t\t\t\t\t} else if (invocationSite instanceof CompletionOnJavadocFieldReference) {", "+\t\t\t\t\t\t\t\tCompletionOnJavadocFieldReference fieldRef = (CompletionOnJavadocFieldReference) invocationSite;", "+\t\t\t\t\t\t\t\treceiver = fieldRef.receiver;", "+//\t\t\t\t\t\t\t\t if (fieldRef.completeTypeWithDefaultContructor()) relevance--;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tStringBuffer javadocCompletion = new StringBuffer();", "+\t\t\t\t\t\t\tif (receiver.isThis()) {", "+\t\t\t\t\t\t\t\tselector = (((JavadocImplicitTypeReference)receiver).token);", "+\t\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "+\t\t\t\t\t\t\t\t\tjavadocCompletion.append('#');", "+//\t\t\t\t\t\t\t\t\tjavadocCompletion.append(((JavadocImplicitTypeReference)receiver).token);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (receiver instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\t\t\t\tJavadocSingleTypeReference typeRef = (JavadocSingleTypeReference) receiver;", "+\t\t\t\t\t\t\t\tselector = typeRef.token;", "+\t\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "+\t\t\t\t\t\t\t\t\tjavadocCompletion.append(typeRef.token);", "+\t\t\t\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (receiver instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\t\t\t\tJavadocQualifiedTypeReference typeRef = (JavadocQualifiedTypeReference) receiver;", "+\t\t\t\t\t\t\t\tselector = typeRef.tokens[typeRef.tokens.length-1];", "+\t\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0) {", "+\t\t\t\t\t\t\t\t\tjavadocCompletion.append(CharOperation.concatWith(typeRef.tokens, '.'));", "+\t\t\t\t\t\t\t\t\tjavadocCompletion.append('#');", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// Append parameters types", "+\t\t\t\t\t\t\tjavadocCompletion.append(selector);", "+\t\t\t\t\t\t\tjavadocCompletion.append('(');", "+\t\t\t\t\t\t\tif (constructor.parameters != null) {", "+\t\t\t\t\t\t\t\tfor (int p=0, ln=constructor.parameters.length; p<ln; p++) {", "+\t\t\t\t\t\t\t\t\tif (p>0) javadocCompletion.append(\", \"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tTypeBinding argTypeBinding = constructor.parameters[p];", "+\t\t\t\t\t\t\t\t\tcreateType(argTypeBinding.erasure(), javadocCompletion);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tjavadocCompletion.append(')');", "+\t\t\t\t\t\t\tcompletion = javadocCompletion.toString().toCharArray();", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t\t// Create standard proposal", "-\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF) && (this.assistNodeInJavadoc & CompletionOnJavadoc.ONLY_INLINE_TAG) == 0) {", "-\t\t\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\tint start = (this.assistNodeInJavadoc > 0) ? this.startPosition : this.endPosition;", "+\t\t\t\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0 && !this.requestor.isIgnored(CompletionProposal.JAVADOC_METHOD_REF)) {", "+\t\t\t\t\t\t\tchar[] javadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_LINK);", "+\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.JAVADOC_METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "+\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "+\t\t\t\t\t\t\tif(original != constructor) {", "+\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\t\t\tproposal.setName(currentType.sourceName());", "+\t\t\t\t\t\t\tproposal.setIsContructor(true);", "+\t\t\t\t\t\t\tproposal.setCompletion(javadocCompletion);", "+\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "+\t\t\t\t\t\t\tint start = (this.assistNodeInJavadoc > 0) ? this.startPosition : this.endPosition;", "+\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0) start = this.javadocTagPosition;", "+\t\t\t\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\tproposal.setRelevance(relevance+R_INLINE_TAG);"]}], "num": 24551}
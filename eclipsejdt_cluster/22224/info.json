{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d09f2987deda5c1340a12270c6de668", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54ffcd17f00f4fbf28a267170abb4123", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "b1909bb0c4bbb70fecea5345c2e954fa4204b1dd", "commitAfterChange": "1ef42230a28632657bfac5df1d197b6d35dcc83d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate static ParameterizedGenericMethodBinding inferFromArgumentTypes(Scope scope, MethodBinding originalMethod, TypeBinding[] arguments, TypeBinding[] parameters, Map collectedSubstitutes, TypeBinding[] substitutes)", "signatureAfterChange": " \tprivate static ParameterizedGenericMethodBinding inferFromArgumentTypes(Scope scope, MethodBinding originalMethod, TypeBinding[] arguments, TypeBinding[] parameters, InferenceContext inferenceContext)", "diff": ["-\tprivate static ParameterizedGenericMethodBinding inferFromArgumentTypes(Scope scope, MethodBinding originalMethod, TypeBinding[] arguments, TypeBinding[] parameters, Map collectedSubstitutes, TypeBinding[] substitutes) {", "+\tprivate static ParameterizedGenericMethodBinding inferFromArgumentTypes(Scope scope, MethodBinding originalMethod, TypeBinding[] arguments, TypeBinding[] parameters, InferenceContext inferenceContext) {", "-\t\t\t\tparameters[i].collectSubstitutes(scope, arguments[i], collectedSubstitutes, CONSTRAINT_EXTENDS);", "-\t\t\t\tif (collectedSubstitutes.get(TypeBinding.VOID) != null) return null; // impossible substitution", "+\t\t\t\tparameters[i].collectSubstitutes(scope, arguments[i], inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\tif (inferenceContext.status == InferenceContext.FAILED) return null; // impossible substitution", "-\t\t\t\t\tvarargType.collectSubstitutes(scope, arguments[i], collectedSubstitutes, CONSTRAINT_EXTENDS);", "-\t\t\t\t\tif (collectedSubstitutes.get(TypeBinding.VOID) != null) return null; // impossible substitution", "+\t\t\t\t\tvarargType.collectSubstitutes(scope, arguments[i], inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\t\tif (inferenceContext.status == InferenceContext.FAILED) return null; // impossible substitution", "-\t\t\t\tparameters[i].collectSubstitutes(scope, arguments[i], collectedSubstitutes, CONSTRAINT_EXTENDS);", "-\t\t\t\tif (collectedSubstitutes.get(TypeBinding.VOID) != null) return null; // impossible substitution", "+\t\t\t\tparameters[i].collectSubstitutes(scope, arguments[i], inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\tif (inferenceContext.status == InferenceContext.FAILED) return null; // impossible substitution", "-\t\tTypeVariableBinding[] originalVariables = originalMethod.typeVariables;", "-\t\tint varLength = originalVariables.length;", "-\t\tsubstitutes = resolveSubstituteConstraints(scope, originalVariables , substitutes, false/*ignore Ti<:Uk*/, collectedSubstitutes);", "-\t\tif (substitutes == null) ", "-\t\t\treturn null; // incompatible", "-\t\tif (substitutes.length == 0) {", "+\t\tif (inferenceContext.status == InferenceContext.RAW_SUBSTITUTION) {", "+\t\tTypeVariableBinding[] originalVariables = originalMethod.typeVariables;", "+\t\tif (!resolveSubstituteConstraints(scope, originalVariables , inferenceContext, false/*ignore Ti<:Uk*/)) ", "+\t\t\treturn null; // impossible substitution", "+", "-\t\tTypeBinding[] resolvedSubstitutes = substitutes;", "-\t\tfor (int i = 0; i < varLength; i++) {", "-\t\t\tif (substitutes[i] == null) {", "-\t\t\t\tif (resolvedSubstitutes == substitutes) {", "-\t\t\t\t\tSystem.arraycopy(substitutes, 0, resolvedSubstitutes = new TypeBinding[varLength], 0, i); // clone to replace null with original variable in param method", "+\t\tTypeBinding[] inferredSustitutes = inferenceContext.substitutes;", "+\t\tTypeBinding[] actualSubstitutes = inferredSustitutes;", "+\t\tfor (int i = 0, varLength = originalVariables.length; i < varLength; i++) {", "+\t\t\tif (inferredSustitutes[i] == null) {", "+\t\t\t\tif (actualSubstitutes == inferredSustitutes) {", "+\t\t\t\t\tSystem.arraycopy(inferredSustitutes, 0, actualSubstitutes = new TypeBinding[varLength], 0, i); // clone to replace null with original variable in param method", "-\t\t\t\tresolvedSubstitutes[i] = originalVariables[i];", "-\t\t\t} else if (resolvedSubstitutes != substitutes) {", "-\t\t\t\tresolvedSubstitutes[i] = substitutes[i];", "+\t\t\t\tactualSubstitutes[i] = originalVariables[i];", "+\t\t\t} else if (actualSubstitutes != inferredSustitutes) {", "+\t\t\t\tactualSubstitutes[i] = inferredSustitutes[i];", "-\t\treturn scope.environment().createParameterizedGenericMethod(originalMethod, resolvedSubstitutes);\t\t", "+\t\tParameterizedGenericMethodBinding paramMethod = scope.environment().createParameterizedGenericMethod(originalMethod, actualSubstitutes);", "+\t\treturn paramMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d86fdea0b85b9b5818846eda0f9b9ecd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "b1909bb0c4bbb70fecea5345c2e954fa4204b1dd", "commitAfterChange": "1ef42230a28632657bfac5df1d197b6d35dcc83d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, TypeBinding expectedType, Map collectedSubstitutes, TypeBinding[] substitutes)", "signatureAfterChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, TypeBinding expectedType, InferenceContext inferenceContext)", "diff": ["-\tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, TypeBinding expectedType, Map collectedSubstitutes, TypeBinding[] substitutes) {", "+\tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, TypeBinding expectedType, InferenceContext inferenceContext) {", "-\t\t\t    this.returnType.collectSubstitutes(scope, expectedType, collectedSubstitutes, CONSTRAINT_SUPER);", "-\t\t\t\tif (collectedSubstitutes.get(TypeBinding.VOID) != null) return null; // impossible substitution", "+\t\t\t    this.returnType.collectSubstitutes(scope, expectedType, inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t    if (inferenceContext.status == InferenceContext.FAILED) return null; // impossible substitution", "-\t\t\t\t\targument.collectSubstitutes(scope, substitutedBound, collectedSubstitutes, CONSTRAINT_SUPER);", "-\t\t\t\t\tif (collectedSubstitutes.get(TypeBinding.VOID) != null) return null; // impossible substitution", "+\t\t\t\t\targument.collectSubstitutes(scope, substitutedBound, inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\tif (inferenceContext.status == InferenceContext.FAILED) return null; // impossible substitution", "-\t\t\t\t\t\tsubstitutedBound.collectSubstitutes(scope, argument, collectedSubstitutes, CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\tif (collectedSubstitutes.get(TypeBinding.VOID) != null) return null; // impossible substitution", "+\t\t\t\t\t\tsubstitutedBound.collectSubstitutes(scope, argument, inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\tif (inferenceContext.status == InferenceContext.FAILED) return null; // impossible substitution", "-\t\t\t\t\targument.collectSubstitutes(scope, substitutedBound, collectedSubstitutes, CONSTRAINT_SUPER);", "-\t\t\t\t\tif (collectedSubstitutes.get(TypeBinding.VOID) != null) return null; // impossible substitution", "+\t\t\t\t\targument.collectSubstitutes(scope, substitutedBound, inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\tif (inferenceContext.status == InferenceContext.FAILED) return null; // impossible substitution", "-\t\t\t\t\t\tsubstitutedBound.collectSubstitutes(scope, argument, collectedSubstitutes, CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\tif (collectedSubstitutes.get(TypeBinding.VOID) != null) return null; // impossible substitution", "+\t\t\t\t\t\tsubstitutedBound.collectSubstitutes(scope, argument, inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\tif (inferenceContext.status == InferenceContext.FAILED) return null; // impossible substitution", "-\t\t\tsubstitutes = resolveSubstituteConstraints(scope, originalVariables, substitutes, true/*consider Ti<:Uk*/, collectedSubstitutes);", "-\t\t\tif (substitutes == null) ", "-\t\t\t\treturn null; // incompatible", "-\t\t\tif (substitutes.length == 0) {", "+\t\t\tif (inferenceContext.status == InferenceContext.RAW_SUBSTITUTION) {", "-\t\t\t}", "+\t\t\t}\t\t", "+\t\t\tif (!resolveSubstituteConstraints(scope, originalVariables, inferenceContext, true/*consider Ti<:Uk*/)) ", "+\t\t\t\treturn null; // incompatible", "-\t    \t\tTypeBinding substitute = substitutes[i];", "+\t    \t\tTypeBinding substitute = inferenceContext.substitutes[i];", "-\t    \t\t\tthis.typeArguments[i] = substitutes[i];", "+\t    \t\t\tthis.typeArguments[i] = inferenceContext.substitutes[i];"]}], "num": 22224}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2aa7cc1e1ec488aa4c008dbd3da858e5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a54197ccd7cb8003076fc07dcf27b546", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Java50Tests.java", "commitBeforeChange": "eadf5ba6d44f28f071965cf829d67590b0a71974", "commitAfterChange": "67ea81843f1f922a9502d78e868c5fb128acafba", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void testParameterizedMemberType() throws JavaModelException", "signatureAfterChange": "  \tpublic void testParameterizedMemberType() throws JavaModelException", "diff": ["-\t\t\t\"class A<T> extends B<B<T>.M> {}\\n\" + ", "+\t\t\t\"class A<T> extends B<B<T>.M> {}\"", "+\t\t);", "+", "+\t\tIPath bPath = env.addClass(projectPath, \"\", \"B\",", "-\t\t); ", "+\t\t);", "-\t\tenv.addClass(projectPath, \"\", \"A\",", "-\t\t\t\"class A<T> extends B<B<T>.M> {}\\n\" + ", "+\t\tenv.addClass(projectPath, \"\", \"B\",", "-\t\t); ", "+\t\t);", "-\t\texpectingProblemsFor(", "-\t\t\tnew IPath[] {aPath, xPath},", "-\t\t\t\"Problem : The hierarchy of the type A is inconsistent [ resource : </Project/A.java> range : <6,7> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : Missing cannot be resolved to a type [ resource : </Project/A.java> range : <51,58> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : The hierarchy of the type X is inconsistent [ resource : </Project/X.java> range : <6,7> category : <40> severity : <2>]\"", "-\t\t);", "+\t\texpectingSpecificProblemFor(xPath, new Problem(\"X\", \"The hierarchy of the type X is inconsistent\", xPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The hierarchy of the type A is inconsistent\", aPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"Missing cannot be resolved to a type\", bPath, 19, 26, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingProblemsFor(", "-\t\t\tnew IPath[] {aPath, xPath},", "-\t\t\t\"Problem : The hierarchy of the type A is inconsistent [ resource : </Project/A.java> range : <6,7> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : Missing cannot be resolved to a type [ resource : </Project/A.java> range : <51,58> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : The hierarchy of the type X is inconsistent [ resource : </Project/X.java> range : <6,7> category : <40> severity : <2>]\"", "-\t\t);", "+\t\texpectingSpecificProblemFor(xPath, new Problem(\"X\", \"The hierarchy of the type X is inconsistent\", xPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The hierarchy of the type A is inconsistent\", aPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"Missing cannot be resolved to a type\", bPath, 19, 26, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tenv.addClass(projectPath, \"\", \"A\",", "-\t\t\t\"class A<T> extends B<B<T>.M> {}\\n\" + ", "+\t\tenv.addClass(projectPath, \"\", \"B\",", "-\t\t); ", "-", "-\t\tincrementalBuild(projectPath);", "-\t\texpectingProblemsFor(", "-\t\t\tnew IPath[] {aPath, xPath},", "-\t\t\t\"Problem : The hierarchy of the type A is inconsistent [ resource : </Project/A.java> range : <6,7> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : Missing cannot be resolved to a type [ resource : </Project/A.java> range : <51,58> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : The hierarchy of the type X is inconsistent [ resource : </Project/X.java> range : <6,7> category : <40> severity : <2>]\"", "-\t\tenv.addClass(projectPath, \"\", \"A\",", "-\t\t\t\"class A<T> extends B<B<T>.M> {}\\n\" + ", "+\t\tincrementalBuild(projectPath);", "+\t\texpectingSpecificProblemFor(xPath, new Problem(\"X\", \"The hierarchy of the type X is inconsistent\", xPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The hierarchy of the type A is inconsistent\", aPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"Missing cannot be resolved to a type\", bPath, 19, 26, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+", "+\t\tenv.addClass(projectPath, \"\", \"B\",", "-\t\t); ", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e37c3300b9911696fc3ea0377a16297d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "bcf05e1a23e85c2be26c967fe98fcd6135357ea5", "commitAfterChange": "bd19f394e99e7308ae085922e4bf1b95d3c9ebb7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void testCycle4() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCycle4() throws JavaModelException", "diff": ["-\t\tenv.setBuildOrder(new String[]{\"P1\", \"P2\", \"P3\"});", "+\t\tenv.setBuildOrder(new String[]{\"P1\", \"P2\", \"P3\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ ", "-\t\texpectingCompilingOrder(new String[]{\"p2.Y\", \"p3.Z\", \"p2.Y\"});", "-\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));", "+\t\texpectingCompilingOrder(new String[]{\"p2.Y\", \"p3.Z\", \"p2.Y\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$", "+\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p2\", \"The import p1 cannot be resolved\", c2),", "-\t\t\tnew Problem(\"p2\", \"X cannot be resolved (or is not a valid return type) for the method zork\", c2),", "-\t\t\tnew Problem(\"p2\", \"X cannot be resolved or is not a type\", c2),", "-\t\t\tnew Problem(\"p2\", \"The method foo() is undefined for the type Y\", c2),", "-\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)", "+\t\t\tnew Problem(\"p2\", \"The import p1 cannot be resolved\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tnew Problem(\"p2\", \"X cannot be resolved (or is not a valid return type) for the method zork\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tnew Problem(\"p2\", \"X cannot be resolved or is not a type\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tnew Problem(\"p2\", \"The method foo() is undefined for the type Y\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p3\", \"X cannot be resolved (or is not a valid return type) for the method foo\", c3),", "-\t\t\tnew Problem(\"p3\", \"The import p1 cannot be resolved\", c3),", "-\t\t\tnew Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3)", "+\t\t\tnew Problem(\"p3\", \"X cannot be resolved (or is not a valid return type) for the method foo\", c3),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tnew Problem(\"p3\", \"The import p1 cannot be resolved\", c3),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tnew Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingCompilingOrder(new String[]{\"p1.X\", \"p2.Y\", \"p3.Z\", \"p1.X\", \"p2.Y\"});;", "-\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));", "-\t\texpectingOnlySpecificProblemFor(p2,new Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2));", "-\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3));", "+\t\texpectingCompilingOrder(new String[]{\"p1.X\", \"p2.Y\", \"p3.Z\", \"p1.X\", \"p2.Y\"}); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$//$NON-NLS-5$ ", "+\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingOnlySpecificProblemFor(p2,new Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3));//$NON-NLS-1$ //$NON-NLS-2$"]}], "num": 38772}
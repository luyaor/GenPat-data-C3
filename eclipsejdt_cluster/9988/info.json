{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40af849249efec2887141b768958eb1b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ddd8bd32dd65f232641d997d1a55c54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "commitAfterChange": "e5c3d5b0e6dea9912518a784573c6285e20af882", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic IPackageFragment[] findPackageFragments(String name, boolean partialMatch)", "signatureAfterChange": " \tpublic IPackageFragment[] findPackageFragments(String name, boolean partialMatch)", "diff": ["-\t\tint count= this.packageFragmentRoots.length;", "-\t\t\tname= name.toLowerCase();", "-\t\t\tfor (int i= 0; i < count; i++) {", "-\t\t\t\tIPackageFragmentRoot root= this.packageFragmentRoots[i];", "-\t\t\t\tIJavaElement[] list= null;", "-\t\t\t\ttry {", "-\t\t\t\t\tlist= root.getChildren();", "-\t\t\t\t} catch (JavaModelException npe) {", "-\t\t\t\t\tcontinue; // the package fragment root is not present;", "-\t\t\t\t}", "-\t\t\t\tint elementCount= list.length;", "-\t\t\t\tIPackageFragment[] result = new IPackageFragment[elementCount];", "-\t\t\t\tint resultLength = 0; ", "-\t\t\t\tfor (int j= 0; j < elementCount; j++) {", "-\t\t\t\t\tIPackageFragment packageFragment= (IPackageFragment) list[j];", "-\t\t\t\t\tif (nameMatches(name, packageFragment, true)) {", "-\t\t\t\t\t\tresult[resultLength++] = packageFragment;", "+\t\t\tString[] splittedName = Util.splitOn('.', name, 0, name.length());", "+\t\t\tArrayList pkgs = null;", "+\t\t\tObject[][] keys = this.packageFragments.keyTable;", "+\t\t\tfor (int i = 0, length = keys.length; i < length; i++) {", "+\t\t\t\tString[] pkgName = (String[]) keys[i];", "+\t\t\t\tif (pkgName != null && Util.startsWithIgnoreCase(pkgName, splittedName)) {", "+\t\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.valueTable[i];", "+\t\t\t\t\tfor (int j = 0, length2 = roots.length; j < length2; j++) {", "+\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[j];", "+\t\t\t\t\t\tif (pkgs == null) pkgs = new ArrayList();", "+\t\t\t\t\t\tpkgs.add(root.getPackageFragment(pkgName));\t\t\t\t\t", "-\t\t\t\tif (resultLength > 0) {", "-\t\t\t\t\tSystem.arraycopy(result, 0, result = new IPackageFragment[resultLength], 0, resultLength);", "-\t\t\t\t\treturn result;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "+\t\t\tif (pkgs == null) return null;", "+\t\t\tint resultLength = pkgs.size();", "+\t\t\tIPackageFragment[] result = new IPackageFragment[resultLength];", "+\t\t\tpkgs.toArray(result);", "+\t\t\treturn result;", "-\t\t\tString[] pkgName = Signature.getSimpleNames(name);", "-\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.get(pkgName);", "+\t\t\tString[] splittedName = Util.splitOn('.', name, 0, name.length());", "+\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.get(splittedName);", "-\t\t\t\t\tresult[i] = ((PackageFragmentRoot) roots[i]).getPackageFragment(pkgName);", "+\t\t\t\t\tresult[i] = ((PackageFragmentRoot) roots[i]).getPackageFragment(splittedName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48c21273ddca0ef65a99cae7e3191d6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "3d0cee6e94784a6b3bd48a07f7ded01c1ecae704", "commitAfterChange": "4a091e274958592dbd1ebba3d64bb9359dcb3c8a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "signatureAfterChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "diff": ["-\t\t\tint count= this.packageFragmentRoots.length;", "-\t\t\tString matchName= name.toLowerCase();", "-\t\t\tfor (int i= 0; i < count; i++) {", "+\t\t\tString[] splittedName = Util.splitOn('.', name, 0, name.length());", "+\t\t\tObject[][] keys = this.packageFragments.keyTable;", "+\t\t\tfor (int i = 0, length = keys.length; i < length; i++) {", "-\t\t\t\tIPackageFragmentRoot root= this.packageFragmentRoots[i];", "-\t\t\t\tIJavaElement[] list= null;", "-\t\t\t\ttry {", "-\t\t\t\t\tlist= root.getChildren();", "-\t\t\t\t} catch (JavaModelException npe) {", "-\t\t\t\t\tcontinue; // this root package fragment is not present", "-\t\t\t\t}", "-\t\t\t\tint elementCount= list.length;", "-\t\t\t\tfor (int j= 0; j < elementCount; j++) {", "-\t\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\tIPackageFragment packageFragment= (IPackageFragment) list[j];", "-\t\t\t\t\tif (packageFragment.getElementName().toLowerCase().startsWith(matchName))", "-\t\t\t\t\t\trequestor.acceptPackageFragment(packageFragment);", "+\t\t\t\tString[] pkgName = (String[]) keys[i];", "+\t\t\t\tif (pkgName != null && Util.startsWithIgnoreCase(pkgName, splittedName)) {", "+\t\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.valueTable[i];", "+\t\t\t\t\tfor (int j = 0, length2 = roots.length; j < length2; j++) {", "+\t\t\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[j];", "+\t\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(pkgName));\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\t\treturn;"]}], "num": 9988}
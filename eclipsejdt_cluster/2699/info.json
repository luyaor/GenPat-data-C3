{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8453905960d3d8bdbbefa5dfa83250d2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ca054a7220b150c5ab1e89c492b111d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic Alignment createAlignment(int kind, int mode, int tieBreakRule, int count, int sourceRestart, int continuationIndent, boolean adjust)", "signatureAfterChange": "  \tpublic Alignment createAlignment(int kind, int mode, int tieBreakRule, int count, int sourceRestart, int continuationIndent, boolean adjust)", "diff": ["+\t\t// specific break indentation for message arguments inside binary expressions", "+\t\tif ((this.currentAlignment == null && this.formatter.expressionsDepth >= 0) ||", "+\t\t\t(this.currentAlignment != null && this.currentAlignment.kind == Alignment.BINARY_EXPRESSION &&", "+\t\t\t\t(this.formatter.expressionsPos & CodeFormatterVisitor.EXPRESSIONS_POS_MASK) == CodeFormatterVisitor.EXPRESSIONS_POS_BETWEEN_TWO)) {", "+\t\t\tswitch (kind) {", "+\t\t\t\tcase Alignment.CONDITIONAL_EXPRESSION:", "+\t\t\t\tcase Alignment.MESSAGE_ARGUMENTS:", "+\t\t\t\tcase Alignment.MESSAGE_SEND:", "+\t\t\t\t\tif (this.formatter.lastBinaryExpressionAlignmentBreakIndentation == alignment.breakIndentationLevel) {", "+\t\t\t\t\t\talignment.breakIndentationLevel += this.indentationSize;", "+\t\t\t\t\t\talignment.shiftBreakIndentationLevel += this.indentationSize;", "+\t\t\t\t\t\tthis.formatter.lastBinaryExpressionAlignmentBreakIndentation = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6334093fcaf2423569835ee6c24ecf25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "49221e1dedf80843e710093d67caabba63367062", "commitAfterChange": "26bd6002dbcadf28eb844a4d87a4d9f705c01741", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 58, "signatureBeforeChange": " protected void consumeEnterVariable()", "signatureAfterChange": " protected void consumeEnterVariable()", "diff": ["-\t\tsuper.consumeEnterVariable();", "+\t\t", "+\t\tif (this.pendingAnnotation != null &&", "+\t\t\t\tthis.assistNode != null &&", "+\t\t\t\tthis.currentElement != null &&", "+\t\t\t\tthis.currentElement instanceof RecoveredMethod &&", "+\t\t\t\t!this.currentElement.foundOpeningBrace &&", "+\t\t\t\t((RecoveredMethod)this.currentElement).methodDeclaration.declarationSourceEnd == 0) {", "+\t\t\t// this is a method parameter", "+\t\t\tsuper.consumeEnterVariable();", "+\t\t\tthis.pendingAnnotation.potentialAnnotatedNode = this.astStack[this.astPtr];", "+\t\t\tthis.pendingAnnotation.isParameter = true;", "+\t\t\tthis.pendingAnnotation = null;", "+\t\t\t", "+\t\t} else {", "+\t\t\tsuper.consumeEnterVariable();", "+\t\t\tif (this.pendingAnnotation != null) {", "+\t\t\t\tthis.pendingAnnotation.potentialAnnotatedNode = this.astStack[this.astPtr];", "+\t\t\t\tthis.pendingAnnotation = null;", "+\t\t\t}", "+\t\t}", "-", "-//\t\tprivate boolean checkKeyword() {", "-//\t\t\tif (currentElement instanceof RecoveredUnit) {", "-//\t\t\t\tRecoveredUnit unit = (RecoveredUnit) currentElement;", "-//\t\t\t\tint index = -1;", "-//\t\t\t\tif ((index = this.indexOfAssistIdentifier()) > -1) {", "-//\t\t\t\t\tif(unit.typeCount == 0", "-//\t\t\t\t\t\t&& CharOperation.prefixEquals(identifierStack[index], Keywords.IMPORT)) {", "-//\t\t\t\t\t\tCompletionOnKeyword2 completionOnImportKeyword = new CompletionOnKeyword2(Keywords.IMPORT, identifierPositionStack[index]);", "-//\t\t\t\t\t\tthis.assistNode = completionOnImportKeyword;", "-//\t\t\t\t\t\tthis.lastCheckPoint = completionOnImportKeyword.sourceEnd + 1;", "-//\t\t\t\t\t\tthis.isOrphanCompletionNode = true;", "-//\t\t\t\t\t\treturn true;", "-//\t\t\t\t\t} else if(unit.typeCount == 0", "-//\t\t\t\t\t\t&& unit.importCount == 0", "-//\t\t\t\t\t\t&& CharOperation.prefixEquals(identifierStack[index], Keywords.PACKAGE)) {", "-//\t\t\t\t\t\tCompletionOnKeyword2 completionOnImportKeyword = new CompletionOnKeyword2(Keywords.PACKAGE, identifierPositionStack[index]);", "-//\t\t\t\t\t\tthis.assistNode = completionOnImportKeyword;", "-//\t\t\t\t\t\tthis.lastCheckPoint = completionOnImportKeyword.sourceEnd + 1;", "-//\t\t\t\t\t\tthis.isOrphanCompletionNode = true;", "-//\t\t\t\t\t\treturn true;", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\treturn false;", "-//\t\t}", "-//\t\t\t\tpushOnGenericsIdentifiersLengthStack(identifierLengthStack[identifierLengthPtr]);", "-//\t\t\t\tpushOnGenericsLengthStack(0);", "+\t}", "+}"]}], "num": 2699}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76fcc6f16dc854cf01ff191e218573de", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f7e77b860b200fec80c921e78403e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TestPessimisticProvider.java", "commitBeforeChange": "6e0c03610cbc826f510f4808a438e90bdc9be9b7", "commitAfterChange": "011e8e3a52083052e5657e005c0f9c924e859fa5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic IFileModificationValidator getFileModificationValidator()", "signatureAfterChange": " \t \tpublic FileModificationValidator getFileModificationValidator2()", "diff": ["-\t */", "-\tpublic IFileModificationValidator getFileModificationValidator() {", "-\t\treturn soleInstance;", "+\tpublic FileModificationValidator getFileModificationValidator2() {", "+\t\treturn new FileModificationValidator() {", "+\t\t\tpublic IStatus validateEdit(final IFile[] files, FileModificationValidationContext context) {", "+\t\t\t\tif (TestPessimisticProvider.markWritableOnEdit) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tResourcesPlugin.getWorkspace().run(", "+\t\t\t\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\t\t\t\tpublic void run(IProgressMonitor monitor)\t{", "+\t\t\t\t\t\t\t\t\tfor (int i = 0, length = files.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\t\t\tsetReadOnly(files[i], false);", "+\t\t\t\t\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t},", "+\t\t\t\t\t\t\tnull);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\treturn e.getStatus();", "+\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t\treturn Status.OK_STATUS;", "+\t\t\t}", "+\t\t", "+\t\t\tpublic IStatus validateSave(IFile file) {", "+\t\t\t\tif (TestPessimisticProvider.markWritableOnSave) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tsetReadOnly(file, false);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\treturn e.getStatus();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn Status.OK_STATUS;", "+\t\t\t}", "+\t\t", "+\t\t\tvoid setReadOnly(IResource resource, boolean readOnly) throws CoreException {", "+\t\t\t\tif (Util.isReadOnlySupported()) {", "+\t\t\t\t\tResourceAttributes resourceAttributes = resource.getResourceAttributes();", "+\t\t\t\t\tif (resourceAttributes != null) {", "+\t\t\t\t\t\tresourceAttributes.setReadOnly(readOnly);", "+\t\t\t\t\t\tresource.setResourceAttributes(resourceAttributes);", "+\t\t\t\t\t}\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbd5aad40fec8274a341b8216fe4861e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "593b7c498e35f1adb3620eff493d0f4b5e771b68", "commitAfterChange": "3b34d278ba258a10a58d188a2047da908229b941", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public boolean breaksOut()", "signatureAfterChange": " public boolean breaksOut(final char[] label)", "diff": ["-public boolean breaksOut() {", "-\tclass ControlStructureVisitor extends ASTVisitor {", "-\t\tStatement body;", "+// Inspect AST nodes looking for a break statement, descending into nested control structures only when necessary (looking for a break with a specific label.)", "+public boolean breaksOut(final char[] label) {", "+\treturn new ASTVisitor() {", "+\t\t", "-\t\tpublic ControlStructureVisitor(Statement statement) {", "-\t\t\tthis.body = statement;", "-\t\t\tthis.breaksOut = false;", "-\t\t}", "-\t\tpublic boolean visit(TypeDeclaration type, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(TypeDeclaration type, ClassScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(LambdaExpression lambda, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(WhileStatement whileStatement, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(DoStatement doStatement, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(ForeachStatement foreachStatement, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(ForStatement forStatement, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(SwitchStatement switchStatement, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "+\t\tpublic boolean visit(TypeDeclaration type, BlockScope skope) { return label != null; }", "+\t\tpublic boolean visit(TypeDeclaration type, ClassScope skope) { return label != null; }", "+\t\tpublic boolean visit(LambdaExpression lambda, BlockScope skope) { return label != null;}", "+\t\tpublic boolean visit(WhileStatement whileStatement, BlockScope skope) { return label != null; }", "+\t\tpublic boolean visit(DoStatement doStatement, BlockScope skope) { return label != null; }", "+\t\tpublic boolean visit(ForeachStatement foreachStatement, BlockScope skope) { return label != null; }", "+\t\tpublic boolean visit(ForStatement forStatement, BlockScope skope) { return label != null; }", "+\t\tpublic boolean visit(SwitchStatement switchStatement, BlockScope skope) { return label != null; }", "+\t\t", "-\t    \tthis.breaksOut = true;", "+\t\t\tif (label == null || CharOperation.equals(label,  breakStatement.label))", "+\t\t\t\tthis.breaksOut = true;", "+\t\t", "-\t\t\tthis.body.traverse(this, null);", "+\t\t\tStatement.this.traverse(this, null);", "-\t}", "-\treturn new ControlStructureVisitor(this).breaksOut();", "+\t}.breaksOut();", "+}"]}], "num": 29452}
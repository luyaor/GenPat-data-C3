{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c5087a668831bb68874f55b606325ce", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68d2880ba671933e1d9063a9d6989c2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "23e8716719900ce4b242cb2e611d552c0a8892a4", "commitAfterChange": "fd7de82f6da7ed292619b2fd7babad1ecc33c07d", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " public void invokespecial(MethodBinding methodBinding)", "signatureAfterChange": " public void invokespecial(MethodBinding methodBinding)", "diff": ["-\t\tif (methodBinding.declaringClass.isNestedType()) {", "+\t\tfinal ReferenceBinding declaringClass = methodBinding.declaringClass;", "+\t\tif (declaringClass.isNestedType()) {", "-\t\t\tTypeBinding[] syntheticArgumentTypes = methodBinding.declaringClass.syntheticEnclosingInstanceTypes();", "+\t\t\tTypeBinding[] syntheticArgumentTypes = declaringClass.syntheticEnclosingInstanceTypes();", "-\t\t\tSyntheticArgumentBinding[] syntheticArguments = methodBinding.declaringClass.syntheticOuterLocalVariables();", "+\t\t\tSyntheticArgumentBinding[] syntheticArguments = declaringClass.syntheticOuterLocalVariables();", "+\t\t} else if (declaringClass.isEnum()) {", "+\t\t\targCount += 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79b77870ab8c93398e9daf22dd414641", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ac6a9f56760bba7aec9ca8548c00a789a95fdc11", "commitAfterChange": "f238d59edecc5d87c39084d60c9040567d09deaf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tprotected Openable createElement(IResource resource, int elementType)", "signatureAfterChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "diff": ["-\tprotected Openable createElement(IResource resource, int elementType) {\r", "+\tprotected Openable createElement(IResource resource, int elementType, IJavaProject project) {\r", "-\t\t\t\t\telement = JavaCore.create((IProject)resource);\r", "+\t\t\t\t\telement = project;\r", "-\t\t\t\t\telement = this.currentElement.getJavaProject().getPackageFragmentRoot(resource);\r", "+\t\t\t\t\telement = project.getPackageFragmentRoot(resource);\r", "+\t\t\t\t\tif (this.currentElement == null) break;\r", "-\t\t\t\t\tif (root != null && !Util.conflictsWithOutputLocation(path, (JavaProject)root.getJavaProject())) {\r", "+\t\t\t\t\tif (root != null && !JavaModelManager.conflictsWithOutputLocation(path, (JavaProject)project)) {\r", "+\t\t\t\t\tif (this.currentElement == null) break;\r", "+\t\t\t\t\tif (this.currentElement == null) break;\r", "-\t\t\telement = JavaCore.create(resource);\r", "+\t\t\telement = JavaModelManager.create(resource, project);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a7290cff926338ed9d61bb453e1a7d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected boolean parseParam() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseParam() throws InvalidInputException", "diff": ["-\t\t\tthis.scanner.currentPosition = start;", "+\t\t\tif (this.kind != COMPLETION_PARSER) this.scanner.currentPosition = start;", "+\t\tboolean mayBeGeneric = this.sourceLevel >= ClassFileConstants.JDK1_5;", "-\t\t\t\t\tif (valid && this.jdk15) {", "+\t\t\t\t\tif (valid && mayBeGeneric) {", "-\t\t\t\t\t\telse if (this.jdk15 && isTypeParam)", "+\t\t\t\t\t\telse if (mayBeGeneric && isTypeParam)", "-\t\tif (isTypeParam && this.jdk15) {", "+\t\tif (isTypeParam && mayBeGeneric) {", "-\t\t\tif (this.jdk15 && isTypeParam)", "+\t\t\tif (mayBeGeneric && isTypeParam)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac2772f74e743dfea55ddc0c54b8e1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "23e8716719900ce4b242cb2e611d552c0a8892a4", "commitAfterChange": "fd7de82f6da7ed292619b2fd7babad1ecc33c07d", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 205, "signatureBeforeChange": " public void invokespecial(MethodBinding methodBinding)", "signatureAfterChange": " public void invokespecial(MethodBinding methodBinding)", "diff": ["-\tif (methodBinding.isConstructor() && methodBinding.declaringClass.isNestedType()) {", "-\t\t// enclosing instances", "-\t\tTypeBinding[] syntheticArgumentTypes = methodBinding.declaringClass.syntheticEnclosingInstanceTypes();", "-\t\tif (syntheticArgumentTypes != null) {", "-\t\t\tfor (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {", "-\t\t\t\tif (((id = syntheticArgumentTypes[i].id) == TypeIds.T_double) || (id == TypeIds.T_long)) {", "-\t\t\t\t\targCount += 2;", "-\t\t\t\t} else {", "-\t\t\t\t\targCount++;", "+\tif (methodBinding.isConstructor()) {", "+\t\tfinal ReferenceBinding declaringClass = methodBinding.declaringClass;", "+\t\tif (declaringClass.isNestedType()) {", "+\t\t\t// enclosing instances", "+\t\t\tTypeBinding[] syntheticArgumentTypes = declaringClass.syntheticEnclosingInstanceTypes();", "+\t\t\tif (syntheticArgumentTypes != null) {", "+\t\t\t\tfor (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {", "+\t\t\t\t\tif (((id = syntheticArgumentTypes[i].id) == TypeIds.T_double) || (id == TypeIds.T_long)) {", "+\t\t\t\t\t\targCount += 2;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\targCount++;", "+\t\t\t\t\t}", "-\t\t}", "-\t\t// outer local variables", "-\t\tSyntheticArgumentBinding[] syntheticArguments = methodBinding.declaringClass.syntheticOuterLocalVariables();", "-\t\tif (syntheticArguments != null) {", "-\t\t\tfor (int i = 0, max = syntheticArguments.length; i < max; i++) {", "-\t\t\t\tif (((id = syntheticArguments[i].type.id) == TypeIds.T_double) || (id == TypeIds.T_long)) {", "-\t\t\t\t\targCount += 2;", "-\t\t\t\t} else {", "-\t\t\t\t\targCount++;", "+\t\t\t// outer local variables", "+\t\t\tSyntheticArgumentBinding[] syntheticArguments = declaringClass.syntheticOuterLocalVariables();", "+\t\t\tif (syntheticArguments != null) {", "+\t\t\t\tfor (int i = 0, max = syntheticArguments.length; i < max; i++) {", "+\t\t\t\t\tif (((id = syntheticArguments[i].type.id) == TypeIds.T_double) || (id == TypeIds.T_long)) {", "+\t\t\t\t\t\targCount += 2;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\targCount++;", "+\t\t\t\t\t}", "+\t\t} else if (declaringClass.isEnum()) {", "+\t\t\t// adding String and int", "+\t\t\targCount += 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ab08234a7cf4db6094e1f463fabed06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "2e45e13022b2a9411380e4e0b6133d9f38ca8be4", "commitAfterChange": "d11ec20c5ee631d9416842868616675440352aca", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "-\t\t\t\tif (!inProjectOfFocusType && searchableEnvironment.findType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {", "-\t\t\t\t\t// focus type is not visible in this project: no need to go further", "-\t\t\t\t\treturn;", "+\t\t\t\tif (!inProjectOfFocusType) {", "+\t\t\t\t\tchar[] typeQualifiedName = focusType.getTypeQualifiedName('.').toCharArray();", "+\t\t\t\t\tString[] packageName = ((PackageFragment) focusType.getPackageFragment()).names;", "+\t\t\t\t\tif (searchableEnvironment.findType(typeQualifiedName, Util.toCharArrays(packageName)) == null) {", "+\t\t\t\t\t\t// focus type is not visible in this project: no need to go further", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}"]}], "num": 65527}
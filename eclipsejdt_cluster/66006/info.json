{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "151fd1b7d769be0fa84e1db8da09563c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e2a7ec468ff2dcc7b7ee0fd5a56983", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\treceiverType = receiver.resolveType(scope);", "-\tif (receiverType == null){", "-\t\tconstant = NotAConstant;", "+\tthis.receiverType = this.receiver.resolveType(scope);", "+\tif (this.receiverType == null){", "+\t\tthis.constant = NotAConstant;", "-\tthis.codegenBinding = this.binding = scope.getField(receiverType, token, this);", "-\tFieldBinding firstAttempt = binding;", "+\tthis.codegenBinding = this.binding = scope.getField(this.receiverType, this.token, this);", "+\tFieldBinding firstAttempt = this.binding;", "-\tif (!binding.isValidBinding()) {", "-\t\tif (binding instanceof ProblemFieldBinding", "-\t\t\t&& ((ProblemFieldBinding) binding).problemId() == NotVisible) {", "+\tif (!this.binding.isValidBinding()) {", "+\t\tif (this.binding instanceof ProblemFieldBinding", "+\t\t\t&& ((ProblemFieldBinding) this.binding).problemId() == NotVisible) {", "-\t\t\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\t\t\tif (delegateThis == null){  // if not found then internal error, field should have been found", "-\t\t\t\t\t\tconstant = NotAConstant;", "-\t\t\t\t\t\tscope.problemReporter().invalidField(this, receiverType);", "+\t\t\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\t\t\tif (this.delegateThis == null){  // if not found then internal error, field should have been found", "+\t\t\t\t\t\tthis.constant = NotAConstant;", "+\t\t\t\t\t\tscope.problemReporter().invalidField(this, this.receiverType);", "-\t\t\t\t\tconstant = NotAConstant;", "-\t\t\t\t\tscope.problemReporter().invalidField(this, receiverType);", "+\t\t\t\t\tthis.constant = NotAConstant;", "+\t\t\t\t\tscope.problemReporter().invalidField(this, this.receiverType);", "-\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(delegateThis.type, token, this);", "+\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(this.delegateThis.type, this.token, this);", "-\tif (!binding.isValidBinding()) {", "-\t\tconstant = NotAConstant;", "+\tif (!this.binding.isValidBinding()) {", "+\t\tthis.constant = NotAConstant;", "-\t\tscope.problemReporter().invalidField(this, receiverType);", "+\t\tscope.problemReporter().invalidField(this, this.receiverType);", "-\tif (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0)) {", "-\t\tscope.problemReporter().deprecatedField(binding, this);", "+\tif (isFieldUseDeprecated(this.binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0)) {", "+\t\tscope.problemReporter().deprecatedField(this.binding, this);", "-\tconstant = FieldReference.getConstantFor(binding, this, receiver.isImplicitThis(), scope);", "-\tif (!receiver.isThis()) {", "-\t\tconstant = NotAConstant;", "+\tthis.constant = FieldReference.getConstantFor(this.binding, this, this.receiver.isImplicitThis(), scope);", "+\tif (!this.receiver.isThis()) {", "+\t\tthis.constant = NotAConstant;", "-\treturn this.resolvedType = binding.type;", "+\treturn this.resolvedType = this.binding.type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f843e616dd61ac6e3776f13133160161", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\tint length = tokens.length;", "-\tif ((bits & FIELD) != 0) {", "-\t\tif (!((FieldBinding) binding).isStatic()) { //must check for the static status....", "-\t\t\tif (indexOfFirstFieldBinding == 1) {", "+\tint length = this.tokens.length;", "+\tif ((this.bits & FIELD) != 0) {", "+\t\tif (!((FieldBinding) this.binding).isStatic()) { //must check for the static status....", "+\t\t\tif (this.indexOfFirstFieldBinding == 1) {", "-\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, (FieldBinding) binding);", "+\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, (FieldBinding) this.binding);", "-\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, (FieldBinding) binding);", "+\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, (FieldBinding) this.binding);", "-\t\tif (isFieldUseDeprecated((FieldBinding) binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length)) {", "-\t\t\tscope.problemReporter().deprecatedField((FieldBinding) binding, this);", "+\t\tif (isFieldUseDeprecated((FieldBinding) this.binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && this.indexOfFirstFieldBinding == length)) {", "+\t\t\tscope.problemReporter().deprecatedField((FieldBinding) this.binding, this);", "-\tTypeBinding type = ((VariableBinding) binding).type;", "-\tint index = indexOfFirstFieldBinding;", "+\tTypeBinding type = ((VariableBinding) this.binding).type;", "+\tint index = this.indexOfFirstFieldBinding;", "-\t\tconstant = FieldReference.getConstantFor((FieldBinding) binding, this, false, scope);", "+\t\tthis.constant = FieldReference.getConstantFor((FieldBinding) this.binding, this, false, scope);", "-\tconstant =", "-\t\t((bits & FIELD) != 0)", "-\t\t\t? FieldReference.getConstantFor((FieldBinding) binding, this, false, scope)", "-\t\t\t: ((VariableBinding) binding).constant;", "+\tthis.constant =", "+\t\t((this.bits & FIELD) != 0)", "+\t\t\t? FieldReference.getConstantFor((FieldBinding) this.binding, this, false, scope)", "+\t\t\t: ((VariableBinding) this.binding).constant;", "-\t\tchar[] token = tokens[index];", "+\t\tchar[] token = this.tokens[index];", "-\t\tint place = index - indexOfFirstFieldBinding;", "-\t\totherBindings[place] = field;", "+\t\tint place = index - this.indexOfFirstFieldBinding;", "+\t\tthis.otherBindings[place] = field;", "-\t\t\tif (delegateThis == null) {", "+\t\t\tif (this.delegateThis == null) {", "-\t\t\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\t\t\tif (delegateThis == null){  // if not found then internal error, field should have been found", "+\t\t\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\t\t\tif (this.delegateThis == null){  // if not found then internal error, field should have been found", "-\t\t\t\t\tconstant = NotAConstant; //don't fill other constants slots...", "+\t\t\t\t\tthis.constant = NotAConstant; //don't fill other constants slots...", "-\t\t\tfield = localScope.getFieldForCodeSnippet(delegateThis.type, token, this);", "-\t\t\totherBindings[place] = field;", "+\t\t\tfield = localScope.getFieldForCodeSnippet(this.delegateThis.type, token, this);", "+\t\t\tthis.otherBindings[place] = field;", "-\t\t\tif (constant != NotAConstant){", "-\t\t\t\tconstant = someConstant;", "+\t\t\tif (this.constant != NotAConstant){", "+\t\t\t\tthis.constant = someConstant;", "-\t\t\tconstant = NotAConstant; //don't fill other constants slots...", "+\t\t\tthis.constant = NotAConstant; //don't fill other constants slots...", "-\treturn (otherBindings[otherBindingsLength - 1]).type;", "+\treturn (this.otherBindings[otherBindingsLength - 1]).type;"]}], "num": 66006}
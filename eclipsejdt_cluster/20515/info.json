{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "addcc78085d500ec3b0677dcb1d6395f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3e31b2515f0b31e4cfc5c1291188c6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tfinal private void markAsDefinitelyAssigned(int position)", "signatureAfterChange": " final private void markAsDefinitelyAssigned(int position)", "diff": ["+ */", "+final private void markAsDefinitelyAssigned(int position) {", "+\tif (this != DEAD_END) {", "+\t\t// position is zero-based", "-\t */", "-\tfinal private void markAsDefinitelyAssigned(int position) {", "-\t\t", "-\t\tif (this != DEAD_END) {", "-\t", "-\t\t\t// position is zero-based", "-\t\t\tif (position < BitCacheSize) {", "-\t\t\t\t// use bits", "-\t\t\t\tlong mask;", "-\t\t\t\tdefiniteInits |= (mask = 1L << position);", "-\t\t\t\tpotentialInits |= mask;", "-\t\t\t\tdefiniteNulls &= ~mask;", "-\t\t\t\tdefiniteNonNulls &= ~mask;", "-\t\t\t} else {", "-\t\t\t\t// use extra vector", "-\t\t\t\tint vectorIndex = (position / BitCacheSize) - 1;", "-\t\t\t\tif (extraDefiniteInits == null) {", "-\t\t\t\t\tint length;", "-\t\t\t\t\textraDefiniteInits = new long[length = vectorIndex + 1];", "-\t\t\t\t\textraPotentialInits = new long[length];", "-\t\t\t\t\textraDefiniteNulls = new long[length];", "-\t\t\t\t\textraDefiniteNonNulls = new long[length];", "-\t\t\t\t} else {", "-\t\t\t\t\tint oldLength; // might need to grow the arrays", "-\t\t\t\t\tif (vectorIndex >= (oldLength = extraDefiniteInits.length)) {", "-\t\t\t\t\t\tSystem.arraycopy(extraDefiniteInits, 0, (extraDefiniteInits = new long[vectorIndex + 1]), 0, oldLength);", "-\t\t\t\t\t\tSystem.arraycopy(extraPotentialInits, 0, (extraPotentialInits = new long[vectorIndex + 1]), 0, oldLength);", "-\t\t\t\t\t\tSystem.arraycopy(extraDefiniteNulls, 0, (extraDefiniteNulls = new long[vectorIndex + 1]), 0, oldLength);", "-\t\t\t\t\t\tSystem.arraycopy(extraDefiniteNonNulls, 0, (extraDefiniteNonNulls = new long[vectorIndex + 1]), 0, oldLength);", "-\t\t\t\t\t}", "+\t\t\tlong mask;", "+\t\t\tthis.definiteInits |= (mask = 1L << position);", "+\t\t\tthis.potentialInits |= mask;", "+\t\t} ", "+\t\telse {", "+\t\t\t// use extra vector", "+\t\t\tint vectorIndex = (position / BitCacheSize) - 1;", "+\t\t\tif (this.extra == null) {", "+\t\t\t\tint length = vectorIndex + 1;", "+\t\t\t\tthis.extra = new long[extraLength][];", "+\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\tthis.extra[j] = new long[length];", "-\t\t\t\tlong mask;", "-\t\t\t\textraDefiniteInits[vectorIndex] |= (mask = 1L << (position % BitCacheSize));", "-\t\t\t\textraPotentialInits[vectorIndex] |= mask;", "-\t\t\t\textraDefiniteNulls[vectorIndex] &= ~mask;", "-\t\t\t\textraDefiniteNonNulls[vectorIndex] &= ~mask;", "-\t\t\t}", "-\t\t}", "-\t}", "+\t\t\telse {", "+\t\t\t\tint oldLength; // might need to grow the arrays", "+\t\t\t\tif (vectorIndex >= (oldLength = this.extra[0].length)) {", "+\t\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "+\t\t\t\t\t\t\t(this.extra[j] = new long[vectorIndex + 1]), 0, ", "+\t\t\t\t\t\t\toldLength);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlong mask;", "+\t\t\tthis.extra[0][vectorIndex] |= ", "+\t\t\t\t(mask = 1L << (position % BitCacheSize));", "+\t\t\tthis.extra[1][vectorIndex] |= mask;", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c24cad7c0c4d727a1f00e0eb20f4eae0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tprivate ASTNode internalCreateASTForKind()", "diff": ["-\tprivate static ASTNode parse(int kind, char[] source, int offset, int length, Map options) {", "-\t\tif (kind != K_CLASS_BODY_DECLARATIONS", "-\t\t\t\t&& kind != K_EXPRESSION", "-\t\t\t\t&& kind != K_STATEMENTS) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (source == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (length < 0 || offset < 0 || offset > source.length - length) {", "-\t\t    throw new IndexOutOfBoundsException();", "-\t\t}", "-\t\tif (options == null) {", "-\t\t\toptions = JavaCore.getOptions();", "-\t\t}", "-\t\tASTConverter converter = new ASTConverter(options, false, null);", "-\t\tconverter.compilationUnitSource = source;", "-\t\tconverter.scanner.setSource(source);", "+\tprivate ASTNode internalCreateASTForKind() {", "+\t\tASTConverter converter = new ASTConverter(this.compilerOptions, false, null);", "+\t\tconverter.compilationUnitSource = this.rawSource;", "+\t\tconverter.scanner.setSource(this.rawSource);", "-\t\tAST ast = AST.newAST(AST.LEVEL_2_0);", "+\t\tAST ast = AST.newAST(this.apiLevel);", "-\t\tswitch(kind) {", "+\t\tswitch(this.astKind) {", "-\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "+\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, block, recordedParsingInformation);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, compilationUnit, block, recordedParsingInformation);", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, expression2, codeSnippetParsingUtil.recordedParsingInformation);", "+\t\t\t\t\trootNodeToCompilationUnit(expression2.getAST(), compilationUnit, expression2, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation);", "+\t\t\t\t\trootNodeToCompilationUnit(typeDeclaration.getAST(), compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\tthrow new IllegalArgumentException();", "+\t\tthrow new IllegalStateException();"]}], "num": 20515}
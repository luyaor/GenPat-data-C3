{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08979ccf7e63a5bc723b492c20e0c07a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31039e83f558203a9bea687834af9759", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "7bf89e29c34a348a2ed388f7cdb6c1016941cf61", "commitAfterChange": "cd5adcef3921beea7df4f6703ab58225bdb4ec39", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "signatureAfterChange": " \tprivate void addFieldInfo(FieldBinding fieldBinding)", "diff": ["-\t */", "-\tpublic void addFieldInfo(FieldBinding fieldBinding) {", "-\t\tint attributeNumber = 0;", "-\t\t// check that there is enough space to write all the bytes for the field info corresponding", "-\t\t// to the @fieldBinding", "-\t\tif (contentsOffset + 30 >= contents.length) {", "-\t\t\tresizeContents(30);", "-\t\t}", "-\t\t// Now we can generate all entries into the byte array", "-\t\t// First the accessFlags", "-\t\tint accessFlags = fieldBinding.getAccessFlags();", "-\t\tif (targetJDK < ClassFileConstants.JDK1_5) {", "-\t\t    // pre 1.5, synthetic was an attribute, not a modifier", "-\t\t    accessFlags &= ~AccSynthetic;", "-\t\t}\t\t", "-\t\tcontents[contentsOffset++] = (byte) (accessFlags >> 8);", "-\t\tcontents[contentsOffset++] = (byte) accessFlags;", "-\t\t// Then the nameIndex", "-\t\tint nameIndex = constantPool.literalIndex(fieldBinding.name);", "-\t\tcontents[contentsOffset++] = (byte) (nameIndex >> 8);", "-\t\tcontents[contentsOffset++] = (byte) nameIndex;", "-\t\t// Then the descriptorIndex", "-\t\tint descriptorIndex = constantPool.literalIndex(fieldBinding.type.signature());", "-\t\tcontents[contentsOffset++] = (byte) (descriptorIndex >> 8);", "-\t\tcontents[contentsOffset++] = (byte) descriptorIndex;", "-\t\t// leave some space for the number of attributes", "-\t\tint fieldAttributeOffset = contentsOffset;", "-\t\tcontentsOffset += 2;", "-\t\t\tattributeNumber++;", "-\t\t\t\t\t\t\tcontentsOffset = fieldAttributeOffset + 2;", "-\t\t\t\t\t\t\t// +2 is necessary to keep the two byte space for the attribute number", "-\t\t\t\t\t\t\tattributeNumber--;", "-\t\t\tattributeNumber++;", "-\t\t\tattributeNumber++;", "-\t\t\tattributeNumber++;", "-\t\t}\t\t\t\t", "+\t */", "+\tprivate void addFieldInfo(FieldBinding fieldBinding) {", "+\t\t// check that there is enough space to write all the bytes for the field info corresponding", "+\t\t// to the @fieldBinding", "+\t\tif (contentsOffset + 8 >= contents.length) {", "+\t\t\tresizeContents(8);", "+\t\t}", "+\t\t// Now we can generate all entries into the byte array", "+\t\t// First the accessFlags", "+\t\tint accessFlags = fieldBinding.getAccessFlags();", "+\t\tif (targetJDK < ClassFileConstants.JDK1_5) {", "+\t\t    // pre 1.5, synthetic was an attribute, not a modifier", "+\t\t    accessFlags &= ~AccSynthetic;", "+\t\t}\t\t", "+\t\tcontents[contentsOffset++] = (byte) (accessFlags >> 8);", "+\t\tcontents[contentsOffset++] = (byte) accessFlags;", "+\t\t// Then the nameIndex", "+\t\tint nameIndex = constantPool.literalIndex(fieldBinding.name);", "+\t\tcontents[contentsOffset++] = (byte) (nameIndex >> 8);", "+\t\tcontents[contentsOffset++] = (byte) nameIndex;", "+\t\t// Then the descriptorIndex", "+\t\tint descriptorIndex = constantPool.literalIndex(fieldBinding.type.signature());", "+\t\tcontents[contentsOffset++] = (byte) (descriptorIndex >> 8);", "+\t\tcontents[contentsOffset++] = (byte) descriptorIndex;", "+\t\tint fieldAttributeOffset = contentsOffset;", "+\t\tint attributeNumber = 0;", "+\t\t// leave some space for the number of attributes", "+\t\tcontentsOffset += 2;", "+\t\tattributeNumber += addFieldAttributes(fieldBinding, fieldAttributeOffset);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecbf38d59ed4d2759ab05c172e01e848", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "08705eafdfa67c6d3ffc73b48a9888b3c4d4ff93", "commitAfterChange": "5e9228969768cbfafe3797c4206907b59326e768", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void addAttributes()", "signatureAfterChange": " \tpublic void addAttributes()", "diff": ["+\t\tif (targetJDK >= ClassFileConstants.JDK1_5", "+\t\t\t\t&& (this.referenceBinding.isAnonymousType() || this.referenceBinding.isLocalType())) {", "+\t\t\t// add enclosing method attribute (1.5 mode only)", "+\t\t\tif (contentsOffset + 10 >= contents.length) {", "+\t\t\t\tresizeContents(10);", "+\t\t\t}", "+\t\t\tint enclosingMethodAttributeNameIndex =", "+\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.EnclosingMethodName);", "+\t\t\tcontents[contentsOffset++] = (byte) (enclosingMethodAttributeNameIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) enclosingMethodAttributeNameIndex;", "+\t\t\t// the length of a signature attribute is equals to 2", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\tcontents[contentsOffset++] = 4;", "+\t\t\t", "+\t\t\tint enclosingTypeIndex = constantPool.literalIndexForType(this.referenceBinding.enclosingType().constantPoolName());", "+\t\t\tcontents[contentsOffset++] = (byte) (enclosingTypeIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) enclosingTypeIndex;", "+\t\t\tbyte methodIndexByte1 = 0;", "+\t\t\tbyte methodIndexByte2 = 0;", "+\t\t\tif (this.referenceBinding.scope != null) {", "+\t\t\t\tMethodScope methodScope = this.referenceBinding.scope.methodScope();", "+\t\t\t\tif (methodScope != null) {", "+\t\t\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "+\t\t\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\t\tAbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) referenceContext;", "+\t\t\t\t\t\tMethodBinding methodBinding = methodDeclaration.binding;", "+\t\t\t\t\t\tint enclosingMethodIndex = constantPool.literalIndexForMethod(methodBinding.selector, methodBinding.signature());", "+\t\t\t\t\t\tmethodIndexByte1 = (byte) (enclosingMethodIndex >> 8);", "+\t\t\t\t\t\tmethodIndexByte2 = (byte) enclosingMethodIndex;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcontents[contentsOffset++] = methodIndexByte1;", "+\t\t\tcontents[contentsOffset++] = methodIndexByte2;", "+\t\t\tattributeNumber++;\t\t\t", "+\t\t}"]}], "num": 1997}
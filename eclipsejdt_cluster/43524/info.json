{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3eb5b35093901e747a411fb2f7e881e1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f720d8bc5811d411127bc8b2ae8a45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean repeat)", "signatureAfterChange": " \t \tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean repeat)", "diff": ["-\t\t\tIRegion[] regions =  new Region[10];", "-\t\t\tint idx = 0;", "+\t\t\tArrayList<IRegion> regions =  new ArrayList<>();", "-\t\t\t\tregions[idx++] = new Region(regionStart-delta, regionEnd-(regionStart+2));", "+\t\t\t\tregions.add(new Region(regionStart-delta, regionEnd-(regionStart+2)));", "-\t\t\tif (idx == 1) {", "+\t\t\tif (regions.size() == 1) {", "-\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions[0].getOffset(), regions[0].getLength(), LINE_SEPARATOR, repeat);", "+\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions.get(0).getOffset(), regions.get(0).getLength(), LINE_SEPARATOR, repeat);", "-\t\t\t\tSystem.arraycopy(regions, 0, regions = new Region[idx], 0, idx);", "-\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions, LINE_SEPARATOR);", "+\t\t\t\tIRegion[] regionsArray = regions.toArray(new IRegion[regions.size()]);", "+\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regionsArray, LINE_SEPARATOR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c7b05b39ff4407761070c06fbb8bdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "a89cccae838c2b51a63527545b3d2d2d64fda77c", "commitAfterChange": "dc5bbd1a58a7eb7d9f32c665292f733f85515c9c", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void testReplaceProject() throws CoreException", "signatureAfterChange": " public void testReplaceProject() throws CoreException", "diff": ["-\t\tfinal IJavaProject[] javaProjects = new IJavaProject[1];", "-\t\tjavaProjects[0] = createJavaProject(\"P\", new String[] {\"src\"}, \"bin\");", "+\t\tfinal IJavaProject javaProject = createJavaProject(\"P\", new String[] {\"src\"}, \"bin\");", "-\t\t\t\t\tdeleteProject(\"P\");", "-\t\t\t\t\tjavaProjects[0] = createJavaProject(\"P\", new String[] {\"src2\"}, \"bin2\");", "+\t\t\t\t\tIProjectDescription descr = javaProject.getProject().getDescription();", "+\t\t\t\t\tdescr.setComment(\"dummy\"); // ensure it is changed", "+\t\t\t\t\tjavaProject.getProject().setDescription(descr, monitor);", "+\t\t\t\t\teditFile(", "+\t\t\t\t\t\t\"/P/.classpath\",", "+\t\t\t\t\t\t\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +", "+\t\t\t\t\t\t\"<classpath>\\n\" +", "+\t\t\t\t\t\t\"    <classpathentry kind=\\\"src\\\" path=\\\"src2\\\"/>\\n\" +", "+\t\t\t\t\t\t\"    <classpathentry kind=\\\"output\\\" path=\\\"bin\\\"/>\\n\" +", "+\t\t\t\t\t\t\"</classpath>\"", "+\t\t\t\t\t);", "-\t\tIClasspathEntry[] classpath = javaProjects[0].getRawClasspath();", "+\t\tIClasspathEntry[] classpath = javaProject.getRawClasspath();"]}], "num": 43524}
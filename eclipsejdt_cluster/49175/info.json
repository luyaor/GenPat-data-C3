{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f2d416039810a10c0182b378f84ab05", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78f658fe2dcc4a0b218c5e435131ec24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "commitAfterChange": "07061c09a4baa11ac0a53e425e478493f3662bd4", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void addSpecialMethods()", "signatureAfterChange": " \tpublic void addSpecialMethods()", "diff": ["-\t\tLambdaExpression [] lambdas = this.referenceBinding.getLambdaMethods();", "-\t\tfor (int i = 0, length = lambdas == null ? 0 : lambdas.length; i < length; i++) {", "-\t\t\tlambdas[i].generateCode(this.referenceBinding.scope, this);", "-\t\t}", "+\t\tboolean doneGeneratingLambdas = false;", "+\t\tint currentLambda = 0;", "+\t\tdo {", "+\t\t\tLambdaExpression [] lambdas = this.referenceBinding.getLambdaMethods();  // refresh as a lambda code generation could schedule nested lambdas for code generation.", "+\t\t\tint lambdaCount = lambdas == null ? 0 : lambdas.length;", "+\t\t\tif (lambdaCount > currentLambda) {", "+\t\t\t\tlambdas[currentLambda++].generateCode(this.referenceBinding.scope, this);", "+\t\t\t} else {", "+\t\t\t\tdoneGeneratingLambdas = true;", "+\t\t\t}", "+\t\t} while (!doneGeneratingLambdas);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f1bf11fe898dae8d432837bd27cc9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public char[] genericSignature()", "signatureAfterChange": " public char[] genericSignature()", "diff": ["-\t// only append thrown exception if any is generic/parameterized", "-\tfor (int i = 0, length = this.thrownExceptions.length; i < length; i++) {", "+\t", "+\t// only append thrown exceptions if any is generic/parameterized", "+\tboolean needExceptionSignatures = false;", "+\tint length = this.thrownExceptions.length;", "+\tfor (int i = 0; i < length; i++) {", "-\t\t\tfor (int j = 0; j < length; j++) {", "-\t\t\t\tsig.append(this.thrownExceptions[j].genericTypeSignature());", "-\t\t\t}", "+\t\t\tneedExceptionSignatures = true;", "+\t\t}", "+\t}", "+\tif (needExceptionSignatures) {", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tsig.append(this.thrownExceptions[i].genericTypeSignature());"]}], "num": 49175}
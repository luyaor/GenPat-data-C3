{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d32be8b4a74ccd713acb1c746caed97", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "054a71c11dab1e2e562c6195d62ab501", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": " public void test401610c()", "signatureAfterChange": " public void test401610c()", "diff": ["-\t\t\t\t\"\t        ^^^\\n\" + ", "-\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments (() -> {\\n\" + ", "-\t\t\t\t\"  return \\\"\\\";\\n\" + ", "-\t\t\t\t\"})\\n\" + ", "+\t\t\t\t\"\t                  ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Void methods cannot return a value\\n\" + ", "-\t\t\t\t\"\t        ^^^\\n\" + ", "-\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments (() -> 10)\\n\" + ", "+\t\t\t\t\"\t                 ^^\\n\" + ", "+\t\t\t\t\"Void methods cannot return a value\\n\" + ", "-\t\t\t\t\"\t        ^^^\\n\" + ", "-\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments ((<no type> s) -> {\\n\" + ", "-\t\t\t\t\"})\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "-\t\t\t\t\"\t        ^^^\\n\" + ", "-\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments ((<no type> s) -> {\\n\" + ", "-\t\t\t\t\"  return ;\\n\" + ", "-\t\t\t\t\"})\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c90ce5aefc0645860a84964cd8b9f796", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "241d64f631bbf77014d4fbfc8f74f781b65e5c36", "commitAfterChange": "42e53b3c82f631cac5341438af4d88461f281652", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void verifyNamePositions(int nameStart, Name name, char[] source)", "signatureAfterChange": " \tprivate void verifyNamePositions(int nameStart, Name name, char[] source)", "diff": ["-\t\t\tassumeEquals(this.prefix+\"Misplaced or wrong name at <\"+start+\"> for qualified name: \"+name, str, qualified.getName().toString());", "+\t\t\tassumeEquals(this.prefix+\"Misplaced or wrong name for qualified name: \"+name, str, qualified.getName().toString());", "-\t\t\tassumeEquals(this.prefix+\"Misplaced name at <\"+nameStart+\"> for qualified name: \", str, name.toString());", "+\t\t\tassumeEquals(this.prefix+\"Misplaced name for qualified name: \", str, name.toString());", "-\t\t\tSystem.out.println(this.prefix+\"Name contains new line at <\"+nameStart+\"> for qualified name: \"+name);", "+\t\t\tSystem.out.println(this.prefix+\"Name contains new line for qualified name: \"+name);"]}], "num": 40134}
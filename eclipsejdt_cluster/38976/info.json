{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4f4d69dcbc3bc286973127cae421c54", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "833bbfab3e567aa5fe31bc3f910b66e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "649631b834e755f12bf40b9c916ce9dfc765a8d0", "commitAfterChange": "19a679a95bc1c8afc10cb50ce5a617f6914888ae", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static char[] getSignature(Binding binding)", "signatureAfterChange": " \t \tpublic static char[] getSignature(MethodBinding methodBinding)", "diff": ["-\tpublic static char[] getSignature(Binding binding) {", "+\t", "+\tpublic static char[] getSignature(MethodBinding methodBinding) {", "-\t\tif ((binding.kind() & Binding.TYPE) != 0) {", "-\t\t\tTypeBinding typeBinding = (TypeBinding)binding;", "-\t\t\tresult = typeBinding.genericTypeSignature();", "-\t\t} else if ((binding.kind() & Binding.METHOD) != 0) {", "-\t\t\tMethodBinding methodBinding = (MethodBinding)binding;", "-\t\t\tint oldMod = methodBinding.modifiers;", "-\t\t\t//TODO remove the next line when method from binary type will be able to generate generic siganute", "-\t\t\tmethodBinding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "-\t\t\tresult = methodBinding.genericSignature();", "-\t\t\tif(result == null) {", "-\t\t\t\tresult = methodBinding.signature();", "-\t\t\t}", "-\t\t\tmethodBinding.modifiers = oldMod;", "+\t\t", "+\t\tint oldMod = methodBinding.modifiers;", "+\t\t//TODO remove the next line when method from binary type will be able to generate generic signature", "+\t\tmethodBinding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "+\t\tresult = methodBinding.genericSignature();", "+\t\tif(result == null) {", "+\t\t\tresult = methodBinding.signature();", "+\t\tmethodBinding.modifiers = oldMod;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf91c20182fc0788109fc021649a80e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/FieldAligner.java", "commitBeforeChange": "15931130cc3603cc40cf03dc17251cf7622502d5", "commitAfterChange": "80f1e7c4e4b868f26698d3e483443bcf19375a87", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void prepareAlign(TypeDeclaration node)", "signatureAfterChange": "  \tpublic void prepareAlign(List<FieldDeclaration> bodyDeclarations)", "diff": ["-\tpublic void prepareAlign(TypeDeclaration node) {", "-\t\tList<FieldDeclaration> bodyDeclarations = node.bodyDeclarations();", "+\tpublic void prepareAlign(List<FieldDeclaration> bodyDeclarations) {", "-\t\t\tif (!alignGroup.isEmpty()) {", "-\t\t\t\tif ((declaration instanceof FieldDeclaration)) {", "-\t\t\t\t\talignGroup.add((FieldDeclaration) declaration);", "-\t\t\t\t} else {", "-\t\t\t\t\talignFields(alignGroup);", "-\t\t\t\t\talignGroup = new ArrayList<>();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (alignGroup.isEmpty()) {", "-\t\t\t\tif (declaration instanceof FieldDeclaration)", "-\t\t\t\t\talignGroup.add((FieldDeclaration) declaration);", "+\t\t\tif ((declaration instanceof FieldDeclaration)) {", "+\t\t\t\talignGroup.add((FieldDeclaration) declaration);", "+\t\t\t} else {", "+\t\t\t\talignFields(alignGroup);", "+\t\t\t\talignGroup = new ArrayList<>();"]}], "num": 38976}
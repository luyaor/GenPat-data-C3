{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d42c33c381cb47300c8c270bd7c8c35b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a7bc46bf2abfeec97ac678e9ac39b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "1b6413921860c74cfa469f859f6fc627d6400adf", "commitAfterChange": "b6853ef8bd2b453c33734f1b2bce782deb4bd05c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\t\tfinal TypeBinding expectedParameterType = this.singleAbstractMethod.parameters[i];", "+\t\t\tfinal TypeBinding expectedParameterType = haveDescriptor ? this.singleAbstractMethod.parameters[i] : null;", "-\t\tif (!argumentsTypeElided && this.binding.isVarargs()) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=337795", "+\t\tif (!argumentsTypeElided && this.binding.isVarargs()) {", "-\t\tif ((returnType.tagBits & TagBits.HasMissingType) != 0) {", "-\t\t\tthis.binding.tagBits |= TagBits.HasMissingType;", "+\t\tif (returnType != null) {", "+\t\t\tif ((returnType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.binding.tagBits |= TagBits.HasMissingType;", "+\t\t\t}", "+\t\t\tTypeBinding leafType = returnType.leafComponentType();", "+\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)", "+\t\t\t\tthis.binding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "-\t\tTypeBinding leafType = returnType.leafComponentType();", "-\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)", "-\t\t\tthis.binding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98349e005400feb598006f738178e827", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "327da611a0b93f8998399de3e02937c2497802a7", "commitAfterChange": "42d0e867915c53d81d65bec90350d5bf95684e73", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate Expression parseArguments(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Expression parseArguments(TypeReference receiver) throws InvalidInputException", "diff": ["-\t\tchar[][] receiverTokens = receiver.getTypeName();", "-\t\tchar[] memberName = identifierStack[0];", "-\t\tboolean isConstructor = CharOperation.equals(memberName, receiverTokens[receiverTokens.length-1]);", "+\t\tboolean isConstructor = true;", "+\t\tif (receiver != null) {", "+\t\t\tchar[][] receiverTokens = receiver.getTypeName();", "+\t\t\tchar[] memberName = identifierStack[0];", "+\t\t\tisConstructor = CharOperation.equals(memberName, receiverTokens[receiverTokens.length-1]);", "+\t\t}"]}], "num": 50576}
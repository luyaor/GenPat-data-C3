{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e0c39e9402fd3023fb79530ecc1defa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "218563dc4801e4ba4323d5cab802d65b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTypeHierarchyTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testPerfAllTypes() throws CoreException", "signatureAfterChange": "  \tpublic void testPerfAllTypes() throws CoreException", "diff": ["-\t\ttagAsSummary(\"Type Hierarchy>All Types\", Dimension.CPU_TIME, true/*put in fingerprint*/);", "+\t\ttagAsSummary(\"Type Hierarchy>All Types\", true); // put in fingerprint", "-\t\t// warm-up", "+\t\t// Warm up", "-\t\t// Loop of measures", "+\t\t// Clean memory", "+\t\trunGc();", "+", "+\t\t// Measures", "-//\t\t\tfor (int j=0; j<ITERATIONS_COUNT; j++) {", "-\t\t\t\tassertEquals(\"Unexpected classes number in hierarchy!\", length, unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses().length);", "-//\t\t\t}", "+\t\t\tassertEquals(\"Unexpected classes number in hierarchy!\", length, unit.getType(\"ASTNode\").newTypeHierarchy(null).getAllClasses().length);", "-\t\t// Commit measures", "+\t\t// Commit"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6355f7225a0b2437e80dd2cedcd0428", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testPerfIndexing() throws CoreException", "signatureAfterChange": " \tpublic void testIndexing() throws CoreException", "diff": ["-\tpublic void testPerfIndexing() throws CoreException {", "-\t\ttagAsSummary(\"Search>Indexing\", Dimension.CPU_TIME, true/*put in fingerprint*/);", "-//\t\tINDEX_MANAGER.discardJobs(null); // discard all previous index jobs", "+\tpublic void testIndexing() throws CoreException {", "+\t\ttagAsSummary(\"Search>Indexing\", true); // put in fingerprint", "+\t", "-//\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "-//\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "+\t\t// Clean memory", "+\t\trunGc();", "+\t", "-//\t\tINDEX_MANAGER.enable();", "-//\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "-//\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "-\t\t// Commit measures", "+\t\t// Commit", "-//\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "-//\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "-\t}"]}], "num": 27930}
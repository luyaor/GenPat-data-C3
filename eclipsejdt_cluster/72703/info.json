{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbfcc9d9041b12f242bf92b24c492cb0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04d915ad73a35cb578bc78f30b7dae93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/InternalSearchDocument.java", "commitBeforeChange": "2a2935d5ba546500d563cc08921b53e5b286cdf8", "commitAfterChange": "2d9dc5098273e0e95832d81d735d2d77249738ef", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic void addIndexEntry(char[] category, char[] key)", "signatureAfterChange": " \tpublic void addIndexEntry(char[] category, char[] key)", "diff": ["-\t\tif (this.index != null)", "+\t\tif (this.index != null) {", "+\t\t\tif (category == IIndexConstants.TYPE_DECL && key != null) {", "+\t\t\t\tint length = key.length;", "+\t\t\t\tif (length > 1 && key[length-2] == IIndexConstants.SEPARATOR && key[length-1] == IIndexConstants.SECONDARY_SUFFIX ) {", "+\t\t\t\t\t// This is a key of a secondary type => reset java model manager secondary types cache for document path project", "+\t\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\t\tmanager.resetSecondaryTypesCache(getPath());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e87d7eb6415639fafe9ea2d69d868033", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/DoubleCache.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " public int get(double key)", "signatureAfterChange": " public int putIfAbsent(double key, int value)", "diff": ["- */", "-public int get(double key) {", "-\tif (key == 0.0) {", "-\t\tfor (int i = 0, max = elementSize; i < max; i++) {", "-\t\t\tif (keyTable[i] == 0.0) {", "-\t\t\t\tlong value1 = Double.doubleToLongBits(key);", "-\t\t\t\tlong value2 = Double.doubleToLongBits(keyTable[i]);", "-\t\t\t\tif (value1 == -9223372036854775808L && value2 == -9223372036854775808L)", "-\t\t\t\t\treturn valueTable[i];", "-\t\t\t\tif (value1 == 0 && value2 == 0)", "-\t\t\t\t\treturn valueTable[i];", "-\t\t\t}", "-\t\t}", "-\t} else {", "-\t\tfor (int i = 0, max = elementSize; i < max; i++) {", "-\t\t\tif (keyTable[i] == key) {", "-\t\t\t\treturn valueTable[i];", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn -1;", "-}", "+ */", "+public int putIfAbsent(double key, int value) {", "+\tif (key == 0.0) {", "+\t\tfor (int i = 0, max = elementSize; i < max; i++) {", "+\t\t\tif (keyTable[i] == 0.0) {", "+\t\t\t\tlong value1 = Double.doubleToLongBits(key);", "+\t\t\t\tlong value2 = Double.doubleToLongBits(keyTable[i]);", "+\t\t\t\tif (value1 == -9223372036854775808L && value2 == -9223372036854775808L)", "+\t\t\t\t\treturn valueTable[i];", "+\t\t\t\tif (value1 == 0 && value2 == 0)", "+\t\t\t\t\treturn valueTable[i];", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tfor (int i = 0, max = elementSize; i < max; i++) {", "+\t\t\tif (keyTable[i] == key) {", "+\t\t\t\treturn valueTable[i];", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (elementSize == keyTable.length) {", "+\t\t// resize", "+\t\tSystem.arraycopy(keyTable, 0, (keyTable = new double[elementSize * 2]), 0, elementSize);", "+\t\tSystem.arraycopy(valueTable, 0, (valueTable = new int[elementSize * 2]), 0, elementSize);", "+\t}", "+\tkeyTable[elementSize] = key;", "+\tvalueTable[elementSize] = value;", "+\telementSize++;", "+\treturn -value; // negative when added, assumes value is > 0", "+}"]}], "num": 72703}
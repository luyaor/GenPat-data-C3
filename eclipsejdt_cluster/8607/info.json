{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97ab0103fd90d036f8298c72d13063ae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d921010434a1bf6835a0804d8bed27df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testBecomeWorkingCopy2() throws CoreException", "signatureAfterChange": " \tpublic void testBecomeWorkingCopy2() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getCompilationUnit(\"P/X.java\").getWorkingCopy(new TestWorkingCopyOwner(), null, null);", "-\t\t\tassertTrue(\"should be in working copy mode\", workingCopy.isWorkingCopy());", "-\t\t\t", "-\t\t\tworkingCopy.becomeWorkingCopy(null, null);", "-\t\t\tassertTrue(\"should still be in working copy mode\", workingCopy.isWorkingCopy());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tthis.workingCopy = getCompilationUnit(\"P/X.java\").getWorkingCopy(new TestWorkingCopyOwner(), null, null);", "+\t\tassertTrue(\"should be in working copy mode\", this.workingCopy.isWorkingCopy());", "+\t\t", "+\t\tthis.workingCopy.becomeWorkingCopy(null, null);", "+\t\tassertTrue(\"should still be in working copy mode\", this.workingCopy.isWorkingCopy());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f933a6c9e37b15a85612fc24f9a7077b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void testBecomeWorkingCopy1() throws CoreException", "signatureAfterChange": " \tpublic void testBecomeWorkingCopy1() throws CoreException", "diff": ["-\t\tICompilationUnit cu = null;", "-\t\ttry {", "-\t\t\tcu = getCompilationUnit(\"P/X.java\");", "-\t\t\tassertTrue(\"should not be in working copy mode\", !cu.isWorkingCopy());", "-\t\t\t", "-\t\t\tcu.becomeWorkingCopy(null, null);", "-\t\t\tassertTrue(\"should be in working copy mode\", cu.isWorkingCopy());", "-\t\t} finally {", "-\t\t\tif (cu != null) {", "-\t\t\t\tcu.discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tthis.workingCopy = getCompilationUnit(\"P/X.java\");", "+\t\tassertTrue(\"should not be in working copy mode\", !this.workingCopy.isWorkingCopy());", "+\t\t", "+\t\tthis.workingCopy.becomeWorkingCopy(null, null);", "+\t\tassertTrue(\"should be in working copy mode\", this.workingCopy.isWorkingCopy());"]}], "num": 8607}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f68e9dde9ea6672662897a4f1baee4b3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3788887d30c694547709d0d03ce3ca62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java", "commitBeforeChange": "c8e38af4061e913418267ce2e0bea6536a30ada5", "commitAfterChange": "9e6132e2b18c9287726a1aa4b0962a75948a06e3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tConstant inlinedValue;\r", "-\tif ((inlinedValue = left.constant) == NotAConstant) inlinedValue = left.conditionalConstant();\r", "-\tif (inlinedValue != NotAConstant){\r", "-\t\tif (inlinedValue.booleanValue() == false){ \r", "+\tConstant opConstant;\r", "+\tif ((opConstant = left.constant) != NotAConstant) {\r", "+\t\tif (opConstant.booleanValue() == true) { \r", "+\t\t\t// TRUE && anything\r", "+\t\t\tFlowInfo mergedInfo = right.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "+\t\t\treturn mergedInfo;\r", "+\t\t} else { \r", "+\t\t\treturn flowInfo;\r", "+\t\t}\r", "+\t}\r", "+\tif ((opConstant = right.constant) != NotAConstant) {\r", "+\t\tif (opConstant.booleanValue() == true) { \r", "+\t\t\t// anything && TRUE\r", "+\t\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "+\t\t\treturn mergedInfo;\r", "+\t\t} else { \r", "+\t\t\t// anything && FALSE\r", "+\t\t\t// whatever is on the left, we will fail, so the result must merge the left inits when answering\r", "+\t\t\t// initsWhenFalse. the initsWhenTrue are undetermined, since this path will be fake reachable...\r", "+\t\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();\r", "+\t\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "+\t\t\treturn mergedInfo;\t\t\t\r", "+\t\t}\r", "+\t}\r", "+\tif ((opConstant = left.conditionalConstant()) != NotAConstant){\r", "+\t\tif (opConstant.booleanValue() == false){ \r", "+\t\t\t// something eq. FALSE && anything\r", "-\t} else {\r", "-\t\tif ((inlinedValue = right.constant) == NotAConstant) inlinedValue = right.conditionalConstant();\r", "-\t}\r", "-\tif (inlinedValue != NotAConstant){\r", "-\t\t// TRUE && anything, anything && TRUE, anything && FALSE\r", "-\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo);\r", "-\t\tmergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);\r", "-\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "-\t\treturn mergedInfo;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea14903d70f084f6d8bf3a2ca0a409e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java", "commitBeforeChange": "c8e38af4061e913418267ce2e0bea6536a30ada5", "commitAfterChange": "9e6132e2b18c9287726a1aa4b0962a75948a06e3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\r", "-\tConstant inlinedValue;\r", "-\tif ((inlinedValue = left.constant) == NotAConstant) inlinedValue = left.conditionalConstant();\r", "-\tif (inlinedValue != NotAConstant){\r", "-\t\tif (inlinedValue.booleanValue() == true){ \r", "+\r", "+\tConstant opConstant;\r", "+\tif ((opConstant = left.constant) != NotAConstant) {\r", "+\t\tif (opConstant.booleanValue() == false) { \r", "+\t\t\t// FALSE || anything\r", "+\t\t\treturn right.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t} else { \r", "+\t\t\t// TRUE || anything\r", "+\t\t\treturn flowInfo;\r", "+\t\t}\r", "+\t}\r", "+\tif ((opConstant = right.constant) != NotAConstant) {\r", "+\t\tif (opConstant.booleanValue() == true) { \r", "+\t\t\t// anything || TRUE\r", "+\t\t\t// whatever is on the left, we will succeed, so the result must merge the left inits when answering\r", "+\t\t\t// initsWhenTrue.\r", "+\t\t\t// the initsWhenFalse are undetermined, since this path will be fake reachable...\r", "+\t\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();\r", "+\t\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "+\t\t\treturn mergedInfo;\t\t\t\r", "+\t\t} else { \r", "+\t\t\t// anything || FALSE\r", "+\t\t\t// ignore the right part\r", "+\t\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "+\t\t\treturn mergedInfo;\t\t\t\r", "+\t\t}\r", "+\t}\r", "+\tif ((opConstant = left.conditionalConstant()) != NotAConstant) {\r", "+\t\tif (opConstant.booleanValue() == true){ \r", "-\t} else {\r", "-\t\tif ((inlinedValue = right.constant) == NotAConstant) inlinedValue = right.conditionalConstant();\r", "-\t}\r", "-\tif (inlinedValue != NotAConstant){\r", "-\t\t// FALSE || anything, anything || TRUE, anything || FALSE\r", "-\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo);\r", "-\t\tmergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);\r", "-\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "-\t\treturn mergedInfo;\r"]}], "num": 72584}
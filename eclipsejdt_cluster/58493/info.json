{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f764c5800f8e3675b50b1e42a0196fb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bde1c0a55a19e7190c2b8c25e25e0e0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "8383cd6a1b5752120968ed218780b2cf5ae8c588", "commitAfterChange": "e22918dcca89ca1a203e107a6d2bb5b3db630a43", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic boolean visit( \t\tAND_AND_Expression and_and_Expression, \t\tBlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit( \t\tAND_AND_Expression and_and_Expression, \t\tBlockScope scope)", "diff": ["-\t\t\tif (buildFragments(and_and_Expression)) {", "-\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameAND_AND));", "-\t\t\t\treturn true;", "-\t\t\t} else {", "-\t\t\t\treturn false;", "-\t\t\t}", "+", "+\t\tif (((and_and_Expression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {", "+\t\t\taddRealFragment(and_and_Expression);", "+\t\t} else {", "+\t\t\tand_and_Expression.left.traverse(this, scope);", "+\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameAND_AND));", "+\t\t\tand_and_Expression.right.traverse(this, scope);", "+\t\t}", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfce6b1c5ba2a321375240044359c00b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "8383cd6a1b5752120968ed218780b2cf5ae8c588", "commitAfterChange": "e22918dcca89ca1a203e107a6d2bb5b3db630a43", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tpublic boolean visit(OR_OR_Expression or_or_Expression, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(OR_OR_Expression or_or_Expression, BlockScope scope)", "diff": ["-\t\tif (buildFragments(or_or_Expression)) {", "-\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameOR_OR));", "-\t\t\treturn true;", "+\t\tif (((or_or_Expression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {", "+\t\t\taddRealFragment(or_or_Expression);", "-\t\t\treturn false;", "+\t\t\tor_or_Expression.left.traverse(this, scope);", "+\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameOR_OR));", "+\t\t\tor_or_Expression.right.traverse(this, scope);", "+\t\treturn false;\t\t"]}], "num": 58493}
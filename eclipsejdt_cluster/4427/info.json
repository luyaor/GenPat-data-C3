{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb080dd62c3a13ad97fbe6402dabc681", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524978f2413986e66342013deb52fe6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "795236662f4c72deb433448a946f4a36cebbebd0", "commitAfterChange": "b74a7b82d9221b86893a88ea5453e92534ffe51b", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "diff": ["-\t\tboolean pathStartsWithProject = projectName.equals(path.segment(0));", "-\t\tString entryPathMsg = pathStartsWithProject ? path.removeFirstSegments(1).makeRelative().toString() : path.toString();", "+\t\tString entryPathMsg = projectName.equals(path.segment(0)) ? path.removeFirstSegments(1).makeRelative().toString() : path.toString();", "-\t\t\t\tif (path.isAbsolute() && !path.isEmpty()) {", "-\t\t\t\t\tIPath sourceAttachment = entry.getSourceAttachmentPath();", "-\t\t\t\t\tObject target = JavaModel.getTarget(path, true);", "-\t\t\t\t\tif (target != null && !JavaCore.IGNORE.equals(project.getOption(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL, true))) {", "-\t\t\t\t\t\tlong projectTargetJDK = CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, true));", "-\t\t\t\t\t\tlong libraryJDK = Util.getJdkLevel(target);", "-\t\t\t\t\t\tif (libraryJDK != 0 && libraryJDK > projectTargetJDK) {", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INCOMPATIBLE_JDK_LEVEL, project, path, CompilerOptions.versionFromJdkLevel(libraryJDK));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (target instanceof IResource){", "-\t\t\t\t\t\tIResource resolvedResource = (IResource) target;", "-\t\t\t\t\t\tswitch(resolvedResource.getType()){", "-\t\t\t\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\t\t\t\tif (checkSourceAttachment", "-\t\t\t\t\t\t\t\t\t&& sourceAttachment != null", "-\t\t\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "-\t\t\t\t\t\t\t\t\t&& JavaModel.getTarget(sourceAttachment, true) == null){", "-\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_unboundSourceAttachment, new String [] {sourceAttachment.toString(), path.toString(), projectName}));", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase IResource.FOLDER :\t// internal binary folder", "-\t\t\t\t\t\t\t\tif (checkSourceAttachment", "-\t\t\t\t\t\t\t\t\t&& sourceAttachment != null", "-\t\t\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "-\t\t\t\t\t\t\t\t\t&& JavaModel.getTarget(sourceAttachment, true) == null){", "-\t\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_unboundSourceAttachment, new String [] {sourceAttachment.toString(), path.toString(), projectName}));", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if (target instanceof File){", "-\t\t\t\t\t\tFile file = JavaModel.getFile(target);", "-\t\t\t\t\t    if (file == null) {", "-\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_illegalExternalFolder, new String[] {path.toOSString(), projectName}));", "-\t\t\t\t\t    } else if (checkSourceAttachment", "-\t\t\t\t\t\t\t\t&& sourceAttachment != null", "-\t\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "-\t\t\t\t\t\t\t\t&& JavaModel.getTarget(sourceAttachment, true) == null){", "-\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_unboundSourceAttachment, new String [] {sourceAttachment.toString(), path.toOSString(), projectName}));", "-\t\t\t\t\t    }", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tboolean isExternal = path.getDevice() != null || !workspaceRoot.getProject(path.segment(0)).exists();", "-\t\t\t\t\t\tif (isExternal) {", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_unboundLibrary, new String[] {path.toOSString(), projectName}));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_unboundLibrary, new String[] {entryPathMsg, projectName}));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_illegalLibraryPath, new String[] {entryPathMsg, projectName}));", "+\t\t\t\t", "+\t\t\t\t// resolve Class-Path: in manifest", "+\t\t\t\tIPath[] chainedJars = ClasspathEntry.resolvedChainedLibraries(path);", "+\t\t\t\tfor (int i = 0, length = chainedJars.length; i < length; i++) {", "+\t\t\t\t\tIPath chainedJar = chainedJars[i];", "+\t\t\t\t\tIJavaModelStatus status = validateLibraryEntry(chainedJar, project, null/*don't check source attachment*/, null/*force computing of entryPathMsg*/);", "+\t\t\t\t\tif (!status.isOK())", "+\t\t\t\t\t\treturn status;", "+\t\t\t\t", "+\t\t\t\tIJavaModelStatus status = validateLibraryEntry(path, project, checkSourceAttachment ? entry.getSourceAttachmentPath() : null, entryPathMsg);", "+\t\t\t\tif (!status.isOK())", "+\t\t\t\t\treturn status;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e053fda9c10bb5ac429eab4ed8b3d1d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "17b1cbd42bc737b47c9ebf5ceda98737740d0825", "commitAfterChange": "c184ff0d8868e4e4a23c45be667e27d2482aa33f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables)", "signatureAfterChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] bindings, org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] otherBindings, boolean checkTypeVariables)", "diff": ["+\t */", "+\tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] bindings, org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] otherBindings, boolean checkTypeVariables) {", "+\t\t\t\tif (!isEqual(bindings[i], otherBindings[i], checkTypeVariables)) {", "-", "-\t\t\t\t\t&& isEqual(typeBinding.leafComponentType(), typeBinding2.leafComponentType());", "-\t\t\t\t\t&& (referenceBinding.modifiers == referenceBinding2.modifiers)", "-\t\t\t\t\t&& isEqual(parameterizedTypeBinding.arguments, parameterizedTypeBinding2.arguments);", "-\t\t\t\t\tif (!isEqual(referenceBinding.typeVariables(), referenceBinding2.typeVariables())) {"]}], "num": 4427}
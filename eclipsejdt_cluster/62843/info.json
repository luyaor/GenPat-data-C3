{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "862837ac3f49142735d03a148da50b1b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f80e2c20a4966d370adcf27aeee0a4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean commentParse(int javadocStart, int javadocEnd)", "diff": ["-\tprotected boolean parseComment(int javadocStart, int javadocEnd) {", "+\tprotected boolean commentParse(int javadocStart, int javadocEnd) {", "-\t\t\t\t\t\tboolean valid = false;", "-\t\t\t\t\t\t// Start tag parsing only if we have a java identifier start character and if we are on line beginning or at inline tag beginning", "+\t\t\t\t\t\t// Start tag parsing only if we are on line beginning or at inline tag beginning", "-\t\t\t\t\t\t\t\tint token = readTokenAndConsume();", "-\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource(); // first token is either an identifier or a keyword", "-\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t// For DOM parser, try to get tag name other than java identifier", "-\t\t\t\t\t\t\t\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51660)", "-\t\t\t\t\t\t\t\t\tint tk = token;", "-\t\t\t\t\t\t\t\t\tint le = this.lineEnd;", "-\t\t\t\t\t\t\t\t\tchar pc = peekChar();", "-\t\t\t\t\t\t\t\t\ttagNameToken: while (tk != TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\t\t\ttoken = tk;", "-\t\t\t\t\t\t\t\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "-\t\t\t\t\t\t\t\t\t\tswitch (pc) {", "-\t\t\t\t\t\t\t\t\t\t\tcase '}':", "-\t\t\t\t\t\t\t\t\t\t\tcase '!':", "-\t\t\t\t\t\t\t\t\t\t\tcase '#':", "-\t\t\t\t\t\t\t\t\t\t\tcase '%':", "-\t\t\t\t\t\t\t\t\t\t\tcase '&':", "-\t\t\t\t\t\t\t\t\t\t\tcase '\\'':", "-\t\t\t\t\t\t\t\t\t\t\tcase ':':", "-\t\t\t\t\t\t\t\t\t\t\t// case '-': allowed in tag names as this character is often used in doclets (bug 68087)", "-\t\t\t\t\t\t\t\t\t\t\tcase '<':", "-\t\t\t\t\t\t\t\t\t\t\tcase '>':", "-\t\t\t\t\t\t\t\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak tagNameToken;", "-\t\t\t\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\t\t\t\tif (pc == ' ' || Character.isWhitespace(pc)) break tagNameToken;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\ttk = readTokenAndConsume();", "-\t\t\t\t\t\t\t\t\t\tpc = peekChar();", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tint length = this.tagSourceEnd-this.tagSourceStart+1;", "-\t\t\t\t\t\t\t\t\ttag = new char[length];", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(this.source, this.tagSourceStart, tag, 0, length);", "-\t\t\t\t\t\t\t\t\tthis.index = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\t\tthis.tagSourceStart = previousPosition;", "-\t\t\t\t\t\t\t\t\tthis.lineEnd = le;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.deprecated = true;", "-\t\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_INHERITDOC)) {", "-\t\t\t\t\t\t\t\t\t\t\t// inhibits inherited flag when tags have been already stored", "-\t\t\t\t\t\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "-\t\t\t\t\t\t\t\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "-\t\t\t\t\t\t\t\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "-\t\t\t\t\t\t\t\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "-\t\t\t\t\t\t\t\t\t\t\tthis.inherited = this.astPtr==-1;", "-\t\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseParam();", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows(false);", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "-\t\t\t\t\t\t\t\t\t\t\t\t// Cannot have @see inside inline comment", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINK)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "-\t\t\t\t\t\t\t\t\t\t\t\t// Cannot have @link outside inline comment", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(true);", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\t\t\t\t\t\t\tvalid = parseReturn();", "-\t\t\t\t\t\t\t\t\t\t// verify characters after return tag (we're expecting text description)", "-\t\t\t\t\t\t\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) {", "-\t\t\t\t\t\t\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\t\t\t\t\t\t\tvalid = parseThrows(true);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameabstract:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameassert:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameboolean:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamebreak:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamebyte:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamecase:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamecatch:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamechar:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameclass:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamecontinue:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamedefault:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamedo:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamedouble:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameelse:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameextends:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefalse:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefinal:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefinally:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefloat:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefor:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameif:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameimplements:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameimport:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameinstanceof:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameint:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameinterface:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamelong:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamenative:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamenew:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamenull:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamepackage:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameprivate:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameprotected:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamepublic:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameshort:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamestatic:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamestrictfp:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamesuper:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameswitch:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamesynchronized:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethis:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrow:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNametransient:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNametrue:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNametry:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamevoid:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamevolatile:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamewhile:", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.textStart = this.index;", "-\t\t\t\t\t\t\t\tif (!valid) {", "+\t\t\t\t\t\t\t\tif (!parseTag(previousPosition)) {", "-\t\t\t\t\t\t\t\t\t\tparseTag();", "+\t\t\t\t\t\t\t\t\t\tcreateTag();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee7bcb4fcc73a1a6a6edc3b346d9f60a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "b27018b8c1a5ebc19dde96a43cd2635a038b5a15", "commitAfterChange": "d5bd2c8e29ae6e0345c9dfd55cea025d71bd4c4b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic DefaultCodeFormatterOptions()", "signatureAfterChange": " \t \tprivate DefaultCodeFormatterOptions()", "diff": ["-\tpublic DefaultCodeFormatterOptions() {", "-\t\tthis.allocation_expression_arguments_alignment = DEFAULT_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT;", "-\t\tthis.anonymous_type_declaration_brace_position = DEFAULT_ANONYMOUS_TYPE_DECLARATION_BRACE_POSITION;", "-\t\tthis.array_initializer_expressions_alignment = DEFAULT_ARRAY_INITIALIZER_EXPRESSIONS_ALIGNMENT;", "-\t\tthis.binary_expression_alignment = DEFAULT_BINARY_EXPRESSION_ALIGNMENT;", "-\t\tthis.blank_lines_after_imports = DEFAULT_BLANK_LINES_AFTER_IMPORTS;", "-\t\tthis.blank_lines_after_package = DEFAULT_BLANK_LINES_AFTER_PACKAGE;", "-\t\tthis.blank_lines_before_field = DEFAULT_BLANK_LINES_BEFORE_FIELD;", "-\t\tthis.blank_lines_before_imports = DEFAULT_BLANK_LINES_BEFORE_IMPORTS;", "-\t\tthis.blank_lines_before_member_type = DEFAULT_BLANK_LINES_BEFORE_MEMBER_TYPE;", "-\t\tthis.blank_lines_before_method = DEFAULT_BLANK_LINES_BEFORE_METHOD;", "-\t\tthis.blank_lines_before_new_chunk = DEFAULT_BLANK_LINES_BEFORE_NEW_CHUNK;", "-\t\tthis.blank_lines_before_package = DEFAULT_BLANK_LINES_BEFORE_PACKAGE;", "-\t\tthis.block_brace_position = DEFAULT_BLOCK_BRACE_POSITION;", "-\t\tthis.compact_else_if = DEFAULT_COMPACT_ELSE_IF;", "-\t\tthis.compact_if_alignment = DEFAULT_COMPACT_IF_ALIGNMENT;", "-\t\tthis.conditional_expression_alignment = DEFAULT_CONDITIONAL_EXPRESSION_ALIGNMENT;", "-\t\tthis.continuation_indentation = DEFAULT_CONTINUATION_INDENTATION;", "-\t\tthis.explicit_constructor_arguments_alignment = DEFAULT_EXPLICIT_CONSTRUCTOR_ARGUMENTS_ALIGNMENT;", "-\t\tthis.filling_space = DEFAULT_FILLING_SPACE;", "-\t\tthis.format_guardian_clause_on_one_line = DEFAULT_FORMAT_GUARDIAN_CLAUSE_ON_ONE_LINE;", "-\t\tthis.indent_block_statements = DEFAULT_INDENT_BLOCK_STATEMENTS;", "-\t\tthis.indent_body_declarations_compare_to_type_header = DEFAULT_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER;", "-\t\tthis.indent_breaks_compare_to_cases = DEFAULT_INDENT_BREAKS_COMPARE_TO_CASES;", "-\t\tthis.indent_switchstatements_compare_to_cases = DEFAULT_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES;", "-\t\tthis.indent_switchstatements_compare_to_switch = DEFAULT_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH;", "-\t\tthis.initial_indentation_level = DEFAULT_INITIAL_INDENTATION_LEVEL;", "-\t\tthis.insert_new_line_before_closing_brace_in_array_initializer = DEFAULT_INSERT_NEW_LINE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER;", "-\t\tthis.insert_new_line_in_control_statements = DEFAULT_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS;", "-\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = DEFAULT_INSERT_NEW_LINE_IN_EMPTY_ANONYMOUS_TYPE_DECLARATION;", "-\t\tthis.insert_new_line_in_empty_block = DEFAULT_INSERT_NEW_LINE_IN_EMPTY_BLOCK;", "-\t\tthis.insert_new_line_in_empty_method_body = DEFAULT_INSERT_NEW_LINE_IN_EMPTY_METHOD_BODY;", "-\t\tthis.insert_new_line_in_empty_type_declaration = DEFAULT_INSERT_NEW_LINE_IN_EMPTY_TYPE_DECLARATION;", "-\t\tthis.insert_space_after_assignment_operators = DEFAULT_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATORS;", "-\t\tthis.insert_space_after_binary_operator = DEFAULT_INSERT_SPACE_AFTER_BINARY_OPERATOR;", "-\t\tthis.insert_space_after_block_close_brace = DEFAULT_INSERT_SPACE_AFTER_BLOCK_CLOSE_BRACE;", "-\t\tthis.insert_space_after_closing_paren_in_cast = DEFAULT_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST;", "-\t\tthis.insert_space_after_colon_in_assert = DEFAULT_INSERT_SPACE_AFTER_COLON_IN_ASSERT;", "-\t\tthis.insert_space_after_colon_in_conditional = DEFAULT_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL;", "-\t\tthis.insert_space_after_colon_in_labeled_statement = DEFAULT_INSERT_SPACE_AFTER_COLON_IN_LABELED_STATEMENT;", "-\t\tthis.insert_space_after_comma_in_allocation_expression = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_ALLOCATION_EXPRESSION;", "-\t\tthis.insert_space_after_comma_in_array_initializer = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_INITIALIZER;", "-\t\tthis.insert_space_after_comma_in_constructor_arguments = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_ARGUMENTS;", "-\t\tthis.insert_space_after_comma_in_constructor_throws = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_THROWS;", "-\t\tthis.insert_space_after_comma_in_explicitconstructorcall_arguments = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS;", "-\t\tthis.insert_space_after_comma_in_for_increments = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_FOR_INCREMENTS;", "-\t\tthis.insert_space_after_comma_in_for_inits = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_FOR_INITS;", "-\t\tthis.insert_space_after_comma_in_messagesend_arguments = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_MESSAGESEND_ARGUMENTS;", "-\t\tthis.insert_space_after_comma_in_method_arguments = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_METHOD_ARGUMENTS;", "-\t\tthis.insert_space_after_comma_in_method_throws = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_METHOD_THROWS;", "-\t\tthis.insert_space_after_comma_in_multiple_field_declarations = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS;", "-\t\tthis.insert_space_after_comma_in_multiple_local_declarations = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS;", "-\t\tthis.insert_space_after_comma_in_superinterfaces = DEFAULT_INSERT_SPACE_AFTER_COMMA_IN_SUPERINTERFACES;", "-\t\tthis.insert_space_after_open_paren_in_parenthesized_expression = DEFAULT_INSERT_SPACE_AFTER_OPEN_PAREN_IN_PARENTHESIZED_EXPRESSION;", "-\t\tthis.insert_space_after_opening_paren_in_cast = DEFAULT_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CAST;", "-\t\tthis.insert_space_after_postfix_operator = DEFAULT_INSERT_SPACE_AFTER_POSTFIX_OPERATOR;", "-\t\tthis.insert_space_after_prefix_operator = DEFAULT_INSERT_SPACE_AFTER_PREFIX_OPERATOR;", "-\t\tthis.insert_space_after_question_in_conditional = DEFAULT_INSERT_SPACE_AFTER_QUESTION_IN_CONDITIONAL;", "-\t\tthis.insert_space_after_semicolon_in_for = DEFAULT_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR;", "-\t\tthis.insert_space_after_unary_operator = DEFAULT_INSERT_SPACE_AFTER_UNARY_OPERATOR;", "-\t\tthis.insert_space_before_anonymous_type_open_brace = DEFAULT_INSERT_SPACE_BEFORE_ANONYMOUS_TYPE_OPEN_BRACE;", "-\t\tthis.insert_space_before_assignment_operators = DEFAULT_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATORS;", "-\t\tthis.insert_space_before_binary_operator = DEFAULT_INSERT_SPACE_BEFORE_BINARY_OPERATOR;", "-\t\tthis.insert_space_before_block_open_brace = DEFAULT_INSERT_SPACE_BEFORE_BLOCK_OPEN_BRACE;", "-\t\tthis.insert_space_before_bracket_in_array_reference = DEFAULT_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_REFERENCE;", "-\t\tthis.insert_space_before_bracket_in_array_type_reference = DEFAULT_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_TYPE_REFERENCE;", "-\t\tthis.insert_space_before_catch_expression = DEFAULT_INSERT_SPACE_BEFORE_CATCH_EXPRESSION;", "-\t\tthis.insert_space_before_closing_brace_in_array_initializer = DEFAULT_INSERT_SPACE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER;", "-\t\tthis.insert_space_before_closing_paren = DEFAULT_INSERT_SPACE_BEFORE_CLOSING_PAREN;", "-\t\tthis.insert_space_before_closing_paren_in_cast = DEFAULT_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CAST;", "-\t\tthis.insert_space_before_closing_paren_in_parenthesized_expression = DEFAULT_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHESIZED_EXPRESSION;", "-\t\tthis.insert_space_before_colon_in_assert = DEFAULT_INSERT_SPACE_BEFORE_COLON_IN_ASSERT;", "-\t\tthis.insert_space_before_colon_in_case = DEFAULT_INSERT_SPACE_BEFORE_COLON_IN_CASE;", "-\t\tthis.insert_space_before_colon_in_conditional = DEFAULT_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL;", "-\t\tthis.insert_space_before_colon_in_default = DEFAULT_INSERT_SPACE_BEFORE_COLON_IN_DEFAULT;", "-\t\tthis.insert_space_before_colon_in_labeled_statement = DEFAULT_INSERT_SPACE_BEFORE_COLON_IN_LABELED_STATEMENT;", "-\t\tthis.insert_space_before_comma_in_allocation_expression = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_ALLOCATION_EXPRESSION;", "-\t\tthis.insert_space_before_comma_in_array_initializer = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_INITIALIZER;", "-\t\tthis.insert_space_before_comma_in_constructor_arguments = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_ARGUMENTS;", "-\t\tthis.insert_space_before_comma_in_constructor_throws = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_THROWS;", "-\t\tthis.insert_space_before_comma_in_explicitconstructorcall_arguments = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS;", "-\t\tthis.insert_space_before_comma_in_for_increments = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INCREMENTS;", "-\t\tthis.insert_space_before_comma_in_for_inits = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INITS;", "-\t\tthis.insert_space_before_comma_in_messagesend_arguments = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_MESSAGESEND_ARGUMENTS;", "-\t\tthis.insert_space_before_comma_in_method_arguments = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_ARGUMENTS;", "-\t\tthis.insert_space_before_comma_in_method_throws = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_THROWS;", "-\t\tthis.insert_space_before_comma_in_multiple_field_declarations = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS;", "-\t\tthis.insert_space_before_comma_in_multiple_local_declarations = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS;", "-\t\tthis.insert_space_before_comma_in_superinterfaces = DEFAULT_INSERT_SPACE_BEFORE_COMMA_IN_SUPERINTERFACES;", "-\t\tthis.insert_space_before_first_argument = DEFAULT_INSERT_SPACE_BEFORE_FIRST_ARGUMENT;", "-\t\tthis.insert_space_before_first_initializer = DEFAULT_INSERT_SPACE_BEFORE_FIRST_INITIALIZER;", "-\t\tthis.insert_space_before_for_paren = DEFAULT_INSERT_SPACE_BEFORE_FOR_PAREN;", "-\t\tthis.insert_space_before_if_condition = DEFAULT_INSERT_SPACE_BEFORE_IF_CONDITION;", "-\t\tthis.insert_space_before_message_send = DEFAULT_INSERT_SPACE_BEFORE_MESSAGE_SEND;", "-\t\tthis.insert_space_before_method_declaration_open_paren = DEFAULT_INSERT_SPACE_BEFORE_METHOD_DECLARATION_OPEN_PAREN;", "-\t\tthis.insert_space_before_method_open_brace = DEFAULT_INSERT_SPACE_BEFORE_METHOD_OPEN_BRACE;", "-\t\tthis.insert_space_before_open_paren_in_parenthesized_expression = DEFAULT_INSERT_SPACE_BEFORE_OPEN_PAREN_IN_PARENTHESIZED_EXPRESSION;", "-\t\tthis.insert_space_before_opening_brace_in_array_initializer = DEFAULT_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ARRAY_INITIALIZER;", "-\t\tthis.insert_space_before_postfix_operator = DEFAULT_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR;", "-\t\tthis.insert_space_before_prefix_operator = DEFAULT_INSERT_SPACE_BEFORE_PREFIX_OPERATOR;", "-\t\tthis.insert_space_before_question_in_conditional = DEFAULT_INSERT_SPACE_BEFORE_QUESTION_IN_CONDITIONAL;", "-\t\tthis.insert_space_before_semicolon = DEFAULT_INSERT_SPACE_BEFORE_SEMICOLON;", "-\t\tthis.insert_space_before_switch_condition = DEFAULT_INSERT_SPACE_BEFORE_SWITCH_CONDITION;", "-\t\tthis.insert_space_before_switch_open_brace = DEFAULT_INSERT_SPACE_BEFORE_SWITCH_OPEN_BRACE;", "-\t\tthis.insert_space_before_synchronized_condition = DEFAULT_INSERT_SPACE_BEFORE_SYNCHRONIZED_CONDITION;", "-\t\tthis.insert_space_before_type_open_brace = DEFAULT_INSERT_SPACE_BEFORE_TYPE_OPEN_BRACE;", "-\t\tthis.insert_space_before_unary_operator = DEFAULT_INSERT_SPACE_BEFORE_UNARY_OPERATOR;", "-\t\tthis.insert_space_before_while_condition = DEFAULT_INSERT_SPACE_BEFORE_WHILE_CONDITION;", "-\t\tthis.insert_space_between_brackets_in_array_reference = DEFAULT_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_REFERENCE;", "-\t\tthis.insert_space_between_brackets_in_array_type_reference = DEFAULT_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_TYPE_REFERENCE;", "-\t\tthis.insert_space_between_empty_arguments = DEFAULT_INSERT_SPACE_BETWEEN_EMPTY_ARGUMENTS;", "-\t\tthis.insert_space_between_empty_array_initializer = DEFAULT_INSERT_SPACE_BETWEEN_EMPTY_ARRAY_INITIALIZER;", "-\t\tthis.insert_space_in_catch_expression = DEFAULT_INSERT_SPACE_IN_CATCH_EXPRESSION;", "-\t\tthis.insert_space_in_for_parens = DEFAULT_INSERT_SPACE_IN_FOR_PARENS;", "-\t\tthis.insert_space_in_if_condition = DEFAULT_INSERT_SPACE_IN_IF_CONDITION;", "-\t\tthis.insert_space_in_switch_condition = DEFAULT_INSERT_SPACE_IN_SWITCH_CONDITION;", "-\t\tthis.insert_space_in_synchronized_condition = DEFAULT_INSERT_SPACE_IN_SYNCHRONIZED_CONDITION;", "-\t\tthis.insert_space_in_while_condition = DEFAULT_INSERT_SPACE_IN_WHILE_CONDITION;", "-\t\tthis.insert_space_within_message_send = DEFAULT_INSERT_SPACE_WITHIN_MESSAGE_SEND;", "-\t\tthis.keep_else_statement_on_same_line = DEFAULT_KEEP_ELSE_STATEMENT_ON_SAME_LINE;", "-\t\tthis.keep_simple_if_on_one_line = DEFAULT_KEEP_SIMPLE_IF_ON_ONE_LINE;", "-\t\tthis.keep_then_statement_on_same_line = DEFAULT_KEEP_THEN_STATEMENT_ON_SAME_LINE;", "-\t\tthis.line_delimiter = DEFAULT_LINE_SEPARATOR;", "-\t\tthis.message_send_arguments_alignment = DEFAULT_MESSAGE_SEND_ARGUMENTS_ALIGNMENT;", "-\t\tthis.message_send_selector_alignment = DEFAULT_MESSAGE_SEND_SELECTOR_ALIGNMENT;", "-\t\tthis.method_declaration_arguments_alignment = DEFAULT_METHOD_DECLARATION_ARGUMENTS_ALIGNMENT;", "-\t\tthis.method_declaration_brace_position = DEFAULT_METHOD_DECLARATION_BRACE_POSITION;", "-\t\tthis.method_throws_clause_alignment = DEFAULT_METHOD_THROWS_CLAUSE_ALIGNMENT;", "-\t\tthis.multiple_fields_alignment = DEFAULT_MULTIPLE_FIELDS_ALIGNMENT;", "-\t\tthis.number_of_blank_lines_to_insert_at_beginning_of_method_body = DEFAULT_NUMBER_OF_BLANK_LINES_TO_INSERT_AT_BEGINNING_OF_METHOD_BODY;", "-\t\tthis.number_of_empty_lines_to_preserve = DEFAULT_NUMBER_OF_EMPTY_LINES_TO_PRESERVE;", "-\t\tthis.page_width = DEFAULT_PAGE_WIDTH;", "-\t\tthis.preserve_user_linebreaks = DEFAULT_PRESERVE_USER_LINEBREAKS;", "-\t\tthis.put_empty_statement_on_new_line = DEFAULT_PUT_EMPTY_STATEMENT_ON_NEW_LINE;", "-\t\tthis.qualified_allocation_expression_arguments_alignment = DEFAULT_QUALIFIED_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT;", "-\t\tthis.switch_brace_position = DEFAULT_SWITCH_BRACE_POSITION;", "-\t\tthis.tab_size = DEFAULT_TAB_SIZE;", "-\t\tthis.type_declaration_brace_position = DEFAULT_TYPE_DECLARATION_BRACE_POSITION;", "-\t\tthis.type_declaration_superclass_alignment = DEFAULT_TYPE_DECLARATION_SUPERCLASS_ALIGNMENT;", "-\t\tthis.type_declaration_superinterfaces_alignment = DEFAULT_TYPE_DECLARATION_SUPERINTERFACES_ALIGNMENT;", "-\t\tthis.type_member_alignment = DEFAULT_TYPE_MEMBER_ALIGNMENT;", "-\t\tthis.use_tab = DEFAULT_USE_TAB;", "+\tprivate DefaultCodeFormatterOptions() {", "+\t\t// cannot be instantiated"]}], "num": 62843}
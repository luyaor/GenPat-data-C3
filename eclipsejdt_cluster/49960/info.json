{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28b172860c2bc8efb54e9cae1b352ad1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "364de65d4858375b10484f23b75d3371", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavadocCompletionModelTest.java", "commitBeforeChange": "f97912416c5f4661289c43d63ee763608220be3f", "commitAfterChange": "e5efe07482ca39d7bb013c10359ef31d2cc33138", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprotected void completeInJavadoc(String[] sources, boolean showPositions, String completeBehind, int occurencePosition) throws JavaModelException", "signatureAfterChange": "  \tprotected void completeInJavadoc(String[] sources, boolean showPositions, String completeBehind, int occurencePosition) throws JavaModelException", "diff": ["-\t\tif (!Character.isWhitespace(source.charAt(this.cursorLocation))) {", "+\t\tchar ch = source.charAt(endPosition);", "+\t\tif (Character.isJavaIdentifierPart(ch) || ch == '>' || ch == '}' || ch == '(' || ch == ')') {", "-\t\t\t\tendPosition++;", "-\t\t\t} while (!Character.isWhitespace(source.charAt(endPosition)));", "+\t\t\t\tch = source.charAt(++endPosition);", "+\t\t\t} while (Character.isJavaIdentifierPart(ch) || ch == '>' || ch == '}' || ch == '(' || ch == ')');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "599499ea0bf21b03c62f72bce5a496e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "e0b93cd9388950bd51950e07247cdecc9e3263df", "commitAfterChange": "265ec26aa6d2cbdb7df581eef4b2a30df572f94f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tprivate void formatTypeMembers(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \tprivate void formatTypeMembers(TypeDeclaration typeDeclaration)", "diff": ["-\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.staticInitializerScope, isChunkStart);", "+\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.staticInitializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.initializerScope, isChunkStart);", "+\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.initializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\t\tif (newLineBeforeChunk > 0) {", "+\t\t\t\t\t\t\tif (newLineBeforeChunk > 0 && i != 0) {", "+\t\t\t\t\t\t\t} else if (i == 0) {", "+\t\t\t\t\t\t\t\tint newLinesBeforeFirstClassBodyDeclaration = this.preferences.blank_lines_before_first_class_body_declaration;", "+\t\t\t\t\t\t\t\tif (newLinesBeforeFirstClassBodyDeclaration > 0) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printEmptyLines(newLinesBeforeFirstClassBodyDeclaration);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.staticInitializerScope, isChunkStart);", "+\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.staticInitializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.initializerScope, isChunkStart);", "+\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.initializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, typeDeclaration.scope, isChunkStart);", "+\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, typeDeclaration.scope, isChunkStart, i == 0);", "-\t\t\t\t\t\tformat((TypeDeclaration)member, typeDeclaration.scope, isChunkStart);", "+\t\t\t\t\t\tformat((TypeDeclaration)member, typeDeclaration.scope, isChunkStart, i == 0);"]}], "num": 49960}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffec127cfce557f21a0b5371f7f02512", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "879c0bb5c9c829a41a207bf2def21348", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "bcb46990486d868577608d099b51c359510600ab", "commitAfterChange": "76641371763d25b26245b79d3162c6759e069b9e", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "diff": ["+ */", "+protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException {", "+\tfor (int i=0, al=annotations.length; i<al; i++) {", "+\t\tAnnotation annotationType = annotations[i];", "+", "+\t\t// Look for annotation type ref", "+\t\tTypeReference typeRef = annotationType.type;", "+\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeRef);", "+\t\tif (level != null && matchedContainer) {", "+\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, elementBinding, level.intValue(), this);", "+\t\t}", "+\t\t", "+\t\t// Look for attribute ref", "+\t\tMemberValuePair[] pairs = annotationType.memberValuePairs();", "+\t\tfor (int j = 0, pl = pairs.length; j < pl; j++) {", "+\t\t\tMemberValuePair pair = pairs[j];", "+\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(pair);", "+\t\t\tif (level != null && enclosesElement) {", "+\t\t\t\tASTNode reference = (annotationType instanceof SingleMemberAnnotation) ? (ASTNode) annotationType: pair;", "+\t\t\t\tthis.patternLocator.matchReportReference(reference, enclosingElement, pair.binding, level.intValue(), this);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea988ce59c8fc5d1ee80a8988d2c88c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4f7bc7ed550fb18b593380689460147b32682704", "commitAfterChange": "67127a55a3347cdaa557fc79db09229324829608", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["+\t", "+\t// report the type parameters", "+\tif (type.typeParameters != null) {", "+\t\tfor (int i=0, l=type.typeParameters.length; i<l; i++) {", "+\t\t\tTypeParameter typeParameter = type.typeParameters[i];", "+\t\t\tif (typeParameter != null) {", "+\t\t\t\tif (typeParameter.type != null) {", "+\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.type);", "+\t\t\t\t\tif (level != null && matchedClassContainer) {", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.type, enclosingElement, level.intValue(), this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (typeParameter.bounds != null) {", "+\t\t\t\t\tfor (int j=0, b=typeParameter.bounds.length; j<b; j++) {", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.bounds[j]);", "+\t\t\t\t\t\tif (level != null && matchedClassContainer) {", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, level.intValue(), this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+"]}], "num": 16024}
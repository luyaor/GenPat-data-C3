{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da1965941857d1805708d1a03d49dd0d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b9ca2ec26ea0e80d38e83f1ecffacfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "0907dc6b12ade48990b856e3edfafde71195d9de", "commitAfterChange": "2fd2027f1bd96549ae174a672a3e75a3fbef9f00", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator)", "diff": ["+\t\treturn disassemble(classFileReader, lineSeparator, IClassFileDisassembler.DEFAULT);", "+\t}", "-\t\tbuffer.append(Util.bind(\"classfileformat.magicnumber\")); //$NON-NLS-1$", "-\t\tbuffer.append(Integer.toHexString(classFileReader.getMagic()).toUpperCase());", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\tbuffer.append(Util.bind(\"classfileformat.minorversion\")); //$NON-NLS-1$", "-\t\tbuffer.append(classFileReader.getMinorVersion());", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\tbuffer.append(Util.bind(\"classfileformat.majorversion\")); //$NON-NLS-1$", "-\t\tbuffer.append(classFileReader.getMajorVersion());", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\tdisassembleTypeMembers(classFileReader, buffer, lineSeparator, 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0c2ea251a6515c5ccddd2d4ccb1d936", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "6b6471423b89c70a33d53654f3143292c15724dc", "commitAfterChange": "dbb5484f1c0506305bb2de3acc0db3501ec7c329", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public static Test suite()", "signatureAfterChange": "  public static Test suite()", "diff": ["+\treturn suite(new File(System.getProperty(\"inputDir\")), buildProfileString(), new HashMap());", "+}", "-\tTestSuite suite = new Suite(FormatterMassiveRegressionTests.class.getName());", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tinitVersion(buffer);", "-\t\t", "-\t\tinitProfiles(buffer);", "-\t\t// Log date of test", "-\t\tlong start = System.currentTimeMillis();", "-\t\tSimpleDateFormat format = new SimpleDateFormat();", "-\t\tDate now = new Date(start);", "-\t\tbuffer.append(\"Test date : \");", "-\t\tbuffer.append(format.format(now));", "-\t\tbuffer.append(LINE_SEPARATOR);", "-", "-\t\t// Get input dir", "-\t\tbuffer.append(\"Input dir : \");", "-\t\tbuffer.append(INPUT_DIR);", "-", "-\t\t// Output to console to show startup", "-\t\tString firstBuffer = buffer.toString();", "-\t\tSystem.out.println(firstBuffer);", "-\t\tbuffer.setLength(0);", "-\t\tFile[] allFiles = ModelTestsUtil.getAllFiles(INPUT_DIR, filter);", "-\t\tbuffer.append(\"            \");", "-\t\tbuffer.append(MAX_FILES);", "-\t\tbuffer.append(\" java files found\");", "-\t\tbuffer.append(LINE_SEPARATOR);", "-\t\t// Init directories", "-\t\tinitDirectories(buffer);", "-//\t\tbuffer.append(\"Compare vs: \");", "-\t\tif (CAN_COMPARE) {", "-\t\t\tif (CLEAN) {", "-//\t\t\t\tbuffer.append(JDT_CORE_VERSION);", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(\"Compare vs: \");", "-\t\t\t\tFile versionFile = new File(OUTPUT_DIR, \"version.txt\");", "-\t\t\t\tif (versionFile.exists()) {", "-\t\t\t\t\tString fileContent = Util.fileContent(versionFile.getAbsolutePath());", "-\t\t\t\t\tif (TEMP_OUTPUT != null) {", "-\t\t\t\t\t\tbuffer.append(TEMP_OUTPUT);", "-\t\t\t\t\t\tbuffer.append(\" on top of \");", "-\t\t\t\t\t}", "-\t\t\t\t\tbuffer.append(fileContent);", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(\"???\");", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tbuffer.append(\"Compare vs: none\");", "-\t\t}", "-", "-\t\t// Write logs", "-\t\tSystem.out.println(buffer.toString());", "-\t\tif (LOG_STREAM != null) {", "-\t\t\tLOG_STREAM.println(firstBuffer);", "-\t\t\tLOG_STREAM.println(buffer.toString());", "-\t\t\tLOG_STREAM.flush();", "-\t\t}", "-\t\t", "-\t\tif (CLEAN) {", "-\t\t\tsuite.addTest(new FormatterMassiveRegressionTests());", "-//\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(allFiles));", "-\t\t}", "-\t\t", "-\t\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(allFiles[i], i, false/*do not compare while cleaning*/));", "-\t\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(allFiles[i], i, CAN_COMPARE));", "-    \t// skip"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d39dac77403180c47d6ede50528403b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "924bb53fdc2b8abef6daacf4b8eb0fd3e9ce7fd5", "commitAfterChange": "a6002c5b8e946e1be020c41b3eb8e042f8637f31", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 35, "signatureBeforeChange": " public String getAttachedJavadoc(IProgressMonitor monitor, String defaultEncoding) throws JavaModelException", "signatureAfterChange": " public String getAttachedJavadoc(IProgressMonitor monitor, String defaultEncoding) throws JavaModelException", "diff": ["+\treturn extractJavadoc(declaringType, contents);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeca630a4def86f354a3d372717a19ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "0abc087f459f97c1cd1bf94e70ce2fce01e94d86", "commitAfterChange": "69d9dc418b17dbc4faaf6413a8492947423155e4", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\tif (isLocal()) {", "-\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t", "-\t\t\t\t// declaring method or type", "-\t\t\t\tSourceTypeBinding sourceBinding = (SourceTypeBinding) this.binding; // per construction, a local type can only be defined in source", "-\t\t\t\tClassScope scope = sourceBinding.scope;", "-\t\t\t\tClassScope classScope = scope.enclosingClassScope();", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceContext = classScope.referenceContext;", "-\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding internalBinding = referenceContext.binding;", "-\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(internalBinding);", "-\t\t\t\tif (typeBinding != null) {", "-\t\t\t\t\tbuffer.append(typeBinding.getKey());", "-\t\t\t\t}", "-\t\t\t\tbuffer.append('$');", "-\t\t\t\tCompilationUnitScope compilationUnitScope = scope.compilationUnitScope();", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = compilationUnitScope.referenceContext;", "-\t\t\t\tLocalTypeBinding[] localTypeBindings = compilationUnitDeclaration.localTypes;", "-\t\t\t\tfor (int i = 0, max = compilationUnitDeclaration.localTypeCount; i < max; i++) {", "-\t\t\t\t\tif (localTypeBindings[i] == sourceBinding) {", "-\t\t\t\t\t\tbuffer.append(i+1);", "-\t\t\t\t\t\tif (!isAnonymous()) {", "-\t\t\t\t\t\t\tbuffer.append('$');", "-\t\t\t\t\t\t\tbuffer.append(sourceBinding.sourceName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tthis.key = buffer.toString();", "-\t\t\t} else {", "-\t\t\t\tif (this.binding.isTypeVariable()) {", "-\t\t\t\t\treturn getTypeVariableKey(true/*include declaring element*/);", "-\t\t\t\t} else if (this.binding.isWildcard()) {", "-\t\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) binding;", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding bound = wildcardBinding.bound;", "-\t\t\t\t\tif (bound != null) {", "-\t\t\t\t\t\treturn this.resolver.getTypeBinding(bound).getKey();", "-\t\t\t\t\t}", "-\t\t\t\t\treturn new String(wildcardBinding.genericTypeSignature());", "-\t\t\t\t} else if (this.isClass()", "-\t\t\t\t\t\t|| this.isInterface()", "-\t\t\t\t\t\t|| this.isEnum()", "-\t\t\t\t\t\t|| this.isAnnotation()) {", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\tchar[] qualifiedSourceName = this.binding.qualifiedSourceName();", "-\t\t\t\t\tif (qualifiedSourceName != null) {", "-\t\t\t\t\t\tCharOperation.replace(qualifiedSourceName, '.', '$');", "-\t\t\t\t\t\tbuffer", "-\t\t\t\t\t\t\t.append(getPackage().getName())", "-\t\t\t\t\t\t\t.append('/')", "-\t\t\t\t\t\t\t.append(qualifiedSourceName);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tbuffer", "-\t\t\t\t\t\t\t.append(getPackage().getName())", "-\t\t\t\t\t\t\t.append('/')", "-\t\t\t\t\t\t\t.append(getName());", "-\t\t\t\t\t}", "-\t\t\t\t\tITypeBinding[] typeArgs = this.getTypeArguments();", "-\t\t\t\t\tfinal int typeArgsLength = typeArgs.length;", "-\t\t\t\t\tif (typeArgsLength != 0) {", "-\t\t\t\t\t\tbuffer.append('<');", "-\t\t\t\t\t\tfor (int i = 0; i < typeArgsLength; i++) {", "-\t\t\t\t\t\t\tbuffer.append(typeArgs[i].getKey());", "-\t\t\t\t\t\t\tif (i != typeArgsLength - 1) {", "-\t\t\t\t\t\t\t\tbuffer.append(',');", "-\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbuffer.append('>');", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.key = String.valueOf(buffer);", "-\t\t\t\t} else if (this.binding.isArrayType()) {", "-\t\t\t\t\tif (this.getElementType() != null) {", "-\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(this.getElementType().getKey());", "-\t\t\t\t\t\tint dimensions = this.getDimensions();", "-\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "-\t\t\t\t\t\t\tbuffer.append('[').append(']');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.key = String.valueOf(buffer);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\tint dimensions = this.getDimensions();", "-\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "-\t\t\t\t\t\t\tbuffer.append('[').append(']');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.key = String.valueOf(buffer);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// this is a primitive type", "-\t\t\t\t\tthis.key = getName();", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tappendKey(buffer);", "+\t\t\tthis.key = buffer.toString();"]}], "num": 44818}
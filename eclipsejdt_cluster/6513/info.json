{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d232436148fbc108c9c6936da80cd958", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b54526ac6634ce65b94017953bcce3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "ccc3f585223a02209d9fb1de4b1dae325e3fd665", "commitAfterChange": "9a356484adb65f7cc29bbc7281d74cb6498e9713", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tprivate static void registerClasspathVariableInitializers()", "signatureAfterChange": "\r \tprivate static ClasspathVariableInitializer getClasspathVariableInitializer(String variable)", "diff": ["+ \t */\r", "+\tprivate static ClasspathVariableInitializer getClasspathVariableInitializer(String variable){\r", "+\t\t\r", "+\t\tPlugin jdtCorePlugin = JavaCore.getPlugin();\r", "+\t\tif (jdtCorePlugin == null) return null;\r", "+\r", "+\t\tIExtensionPoint extension = jdtCorePlugin.getDescriptor().getExtensionPoint(CPVAR_INIT_EXTPOINT_ID);\r", "+\t\tif (extension != null) {\r", "+\t\t\tIExtension[] extensions =  extension.getExtensions();\r", "+\t\t\tfor(int i = 0; i < extensions.length; i++){\r", "+\t\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();\r", "+\t\t\t\t\tIPluginDescriptor plugin = extension.getDeclaringPluginDescriptor();\r", "+\t\t\t\t\tif (plugin.isPluginActivated()) {\r", "+\t\t\t\t\t\tfor(int j = 0; j < configElements.length; j++){\r", "+\t\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t\tString varAttribute = configElements[j].getAttribute(\"variable\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\tif (variable.equals(varAttribute)) {\r", "+\t\t\t\t\t\t\t\t\tif (JavaModelManager.VARIABLE_VERBOSE) {\r", "+\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"CPVariable INIT - found initializer: \"+variable+\" --> \" + configElements[j].getAttribute(\"class\"));\r", "+\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\tObject execExt = configElements[j].createExecutableExtension(\"class\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\t\tif (execExt instanceof ClasspathVariableInitializer){\r", "+\t\t\t\t\t\t\t\t\t\treturn (ClasspathVariableInitializer)execExt;\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t}\t\r", "+\t\t}\r", "+\t\treturn null;\r", "+\t}\t\r", "- \t */\r", "-\tprivate static void registerClasspathVariableInitializers(){\r", "-\t\tPlugin plugin = JavaCore.getPlugin();\r", "-\t\tif (plugin == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\tIExtensionPoint extension = plugin.getDescriptor().getExtensionPoint(CPVAR_INIT_EXTPOINT_ID);\r", "-\t\tif (extension != null) {\r", "-\t\t\tIExtension[] extensions =  extension.getExtensions();\r", "-\t\t\tfor(int i = 0; i < extensions.length; i++){\r", "-\t\t\t\tString pluginID = extension.getDeclaringPluginDescriptor().getUniqueIdentifier();\r", "-\t\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();\r", "-\t\t\t\tfor(int j = 0; j < configElements.length; j++){\r", "-\t\t\t\t\tString variable = configElements[j].getAttribute(\"variable\"); //$NON-NLS-1$\r", "-\t\t\t\t\tif (variable != null) {\r", "-\t\t\t\t\t\tString initializerClassName = configElements[j].getAttribute(\"class\"); //$NON-NLS-1$\r", "-\r", "-\t\t\t\t\t\tif (JavaModelManager.VARIABLE_VERBOSE) {\r", "-\t\t\t\t\t\t\tSystem.out.println(\"CPVariable INIT - register initializer: \"+variable+\" --> \" + initializerClassName);\r", "-\t\t\t\t\t\t}\t\t\t\t\t\t\r", "-\t\t\t\t\t\tVariableInitializers.put(variable, new String[]{ pluginID, initializerClassName });\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\t\r", "-\t\t}\r", "-\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46711238244c3c0461a268b83d9ba123", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "2090b5298a9eb5bc7687aac3bc306c4718d688bb", "commitAfterChange": "7549708bfbb6541d509ec2f74894b85fedbf2954", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private ClassLoader _getExtensionClassLoader(final File[] jars)", "signatureAfterChange": " \t \tprivate List<FactoryContainer> getPluginFactoryContainers()", "diff": ["+\tprivate List<FactoryContainer> getPluginFactoryContainers()", "+\t{", "+\t\tList<FactoryContainer> factories = new ArrayList<FactoryContainer>();", "+\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(", "+\t\t\t\t\"org.eclipse.jdt.apt.core\",  //$NON-NLS-1$ - name of plugin that exposes this extension", "+\t\t\t\t\"annotationProcessorFactory\"); //$NON-NLS-1$ - extension id", "-     */", "-    private ClassLoader _getExtensionClassLoader(final File[] jars)", "-    {", "-\t\t//TODO: check that this is actually creating the right classLoader, in the apt/Eclipse world.", "-        final ClassLoader myLoader = getClass().getClassLoader();", "- \t\tif (_verboseLoad)", "-\t\t\tSystem.err.println(\"I will create my own URL class loader to load these classes; my class loader type is \\\"\" + ", "-\t\t\t\t\tmyLoader.getClass().getName() + \"\\\".\");", "-\t\tfinal List<URL> temp = new ArrayList<URL>(jars.length);", "-\t\tfor (File jar : jars) {", "-\t\t\ttry {", "-\t\t\t\tfinal URL url = jar.toURL();", "-\t\t\t\tif (_verboseLoad) System.err.println(\"Conversion to URL succeeded: \" + url);", "-\t\t\t\ttemp.add(url);", "-\t\t\t}", "-\t\t\tcatch (MalformedURLException e) {", "-\t\t\t\tif (_verboseLoad) System.err.println(\"This URL was malformed; skipping.\");", "+\t\tIExtension[] extensions =  extension.getExtensions();", "+\t\tfor(int i = 0; i < extensions.length; i++) ", "+\t\t{", "+\t\t\tPluginFactoryContainer container = null;", "+\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();", "+\t\t\tfor(int j = 0; j < configElements.length; j++)", "+\t\t\t{", "+\t\t\t\tString elementName = configElements[j].getName();", "+\t\t\t\tif ( \"factory\".equals( elementName ) ) //$NON-NLS-1$ - name of configElement ", "+\t\t\t\t{ ", "+\t\t\t\t\tif ( container == null )", "+\t\t\t\t\t{", "+\t\t\t\t\t\tcontainer = new PluginFactoryContainer();", "+\t\t\t\t\t\tfactories.add( container );", "+\t\t\t\t\t}", "+\t\t\t\t\tcontainer.addFactoryName( configElements[j].getAttribute(\"class\") );", "+\t\t\t\t}", "-\t\tfinal URL[] urls = temp.toArray(new URL[temp.size()]);", "-\t\tfinal ClassLoader jarLoader = new URLClassLoader(urls, myLoader);", "-        return jarLoader;", "-    }", "+\t\treturn factories;", "+\t}"]}], "num": 6513}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f84fdd19fea1d3ca6b2120e775a0093", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3185a2bb9a5c58d30de039aca13da44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "c2862088078b3d0bc7ba3af4b4865ffe4ca72da7", "commitAfterChange": "945521c99c895e07ea8e1e22071b43333b314109", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void generateReadSequence( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateReadSequence( \t\tBlockScope currentScope, \t\tCodeStream codeStream)", "diff": ["-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "+\t\tCodeStream codeStream) {", "+\t\t\t", "-\t\tint indexOfFirstValueRequired;", "-\t\tif (valueRequired) {", "-\t\t\tindexOfFirstValueRequired = otherBindingsCount;", "-\t\t\twhile (indexOfFirstValueRequired > 0) {", "-\t\t\t\tFieldBinding otherBinding = this.otherCodegenBindings[indexOfFirstValueRequired - 1];", "-\t\t\t\tif (otherBinding.isStatic() || otherBinding.constant != NotAConstant)", "-\t\t\t\t\tbreak; // no longer need any value before this point", "-\t\t\t\tindexOfFirstValueRequired--;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tindexOfFirstValueRequired = otherBindingsCount + 1;", "-\t\t}", "-\t\tif (indexOfFirstValueRequired == 0) {", "-\t\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\t\tcase FIELD :", "-\t\t\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "-\t\t\t\t\t// if first field is actually constant, we can inline it", "-\t\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "-\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant, 0);", "-\t\t\t\t\t\t// no implicit conversion", "-\t\t\t\t\t\tlastFieldBinding = null; // will not generate it again", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\tObject[] emulationPath =", "-\t\t\t\t\t\t\t\tcurrentScope.getExactEmulationPath(", "-\t\t\t\t\t\t\t\t\tcurrentScope.enclosingSourceType().enclosingTypeAt(", "-\t\t\t\t\t\t\t\t\t\t(bits & DepthMASK) >> DepthSHIFT));", "-\t\t\t\t\t\t\tif (emulationPath == null) {", "-\t\t\t\t\t\t\t\t// internal error, per construction we should have found it", "-\t\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, currentScope);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+", "+\t\tboolean needValue = otherBindingsCount == 0 || !this.otherBindings[0].isStatic();", "+\t\tswitch (bits & RestrictiveFlagMASK) {", "+\t\t\tcase FIELD :", "+\t\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\t\t// if first field is actually constant, we can inline it", "+\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "-\t\t\t\tcase LOCAL : // reading the first local variable", "-\t\t\t\t\tlastFieldBinding = null;", "-\t\t\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "-\t\t\t\t\t// regular local variable read", "-\t\t\t\t\tif (localBinding.constant != NotAConstant) {", "-\t\t\t\t\t\tcodeStream.generateConstant(localBinding.constant, 0);", "-\t\t\t\t\t\t// no implicit conversion", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// outer local?", "-\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "-\t\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "-\t\t\t\t\t\t\tif (path == null) {", "-\t\t\t\t\t\t\t\t// emulation was not possible (should not happen per construction)", "-\t\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (needValue && !lastFieldBinding.isStatic()) {", "+\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t\tObject[] emulationPath =", "+\t\t\t\t\t\t\tcurrentScope.getExactEmulationPath(", "+\t\t\t\t\t\t\t\tcurrentScope.enclosingSourceType().enclosingTypeAt(", "+\t\t\t\t\t\t\t\t\t(bits & DepthMASK) >> DepthSHIFT));", "+\t\t\t\t\t\tif (emulationPath == null) {", "+\t\t\t\t\t\t\t// internal error, per construction we should have found it", "+\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, currentScope);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tlastFieldBinding = null;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase LOCAL : // reading the first local variable", "+\t\t\t\tif (!needValue) break; // no value needed", "+\t\t\t\tlastFieldBinding = null;", "+\t\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\t\t// regular local variable read", "+\t\t\t\tif (localBinding.constant != NotAConstant) {", "+\t\t\t\t\tcodeStream.generateConstant(localBinding.constant, 0);", "+\t\t\t\t\t// no implicit conversion", "+\t\t\t\t} else {", "+\t\t\t\t\t// outer local?", "+\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "+\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "+\t\t\t\t\t\tif (path == null) {", "+\t\t\t\t\t\t\t// emulation was not possible (should not happen per construction)", "+\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "-\t\t\tint start = indexOfFirstValueRequired == 0 ? 0 : indexOfFirstValueRequired - 1;", "-\t\t\tfor (int i = start; i < otherBindingsCount; i++) {", "+\t\t\tfor (int i = 0; i < otherBindingsCount; i++) {", "+\t\t\t\tFieldBinding nextField = this.otherCodegenBindings[i];", "-\t\t\t\t\tMethodBinding accessor =", "-\t\t\t\t\t\tsyntheticReadAccessors == null ? null : syntheticReadAccessors[i];", "-\t\t\t\t\tif (accessor == null)", "-\t\t\t\t\t\tif (lastFieldBinding.isStatic())", "-\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\telse", "-\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\tneedValue = !nextField.isStatic();", "+\t\t\t\t\tif (needValue) {", "+\t\t\t\t\t\tMethodBinding accessor =", "+\t\t\t\t\t\t\tsyntheticReadAccessors == null ? null : syntheticReadAccessors[i]; ", "+\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "+\t\t\t\t\t\t\t\tif (this.lastFieldBinding != this.codegenBinding && !this.lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant, 0);", "+\t\t\t\t\t\t\t} else if (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.codegenBinding != this.lastFieldBinding && !this.lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}", "-\t\t\t\tlastFieldBinding = otherCodegenBindings[i];", "+\t\t\t\tthis.lastFieldBinding = nextField;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98c9430a47c6aefef693f8d04204796", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "c2862088078b3d0bc7ba3af4b4865ffe4ca72da7", "commitAfterChange": "945521c99c895e07ea8e1e22071b43333b314109", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generateReadSequence(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-public void generateReadSequence(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "-", "+public void generateReadSequence(BlockScope currentScope, CodeStream codeStream) {", "-\tint indexOfFirstValueRequired;", "-\tif (valueRequired) {", "-\t\tindexOfFirstValueRequired = otherBindingsCount;", "-\t\twhile (indexOfFirstValueRequired > 0) {", "-\t\t\tFieldBinding otherBinding = this.otherCodegenBindings[indexOfFirstValueRequired - 1];", "-\t\t\tif (otherBinding.isStatic() || otherBinding.constant != NotAConstant)", "-\t\t\t\tbreak; // no longer need any value before this point", "-\t\t\tindexOfFirstValueRequired--;", "-\t\t}", "-\t} else {", "-\t\tindexOfFirstValueRequired = otherBindingsCount + 1;", "-\t}", "-\tif (indexOfFirstValueRequired == 0) {", "-\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\tcase FIELD :", "-\t\t\t\tlastFieldBinding = (FieldBinding) binding;", "-\t\t\t\t// if first field is actually constant, we can inline it", "-\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "-\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant, 0); // no implicit conversion", "-\t\t\t\t\tlastFieldBinding = null; // will not generate it again", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+", "+\tboolean needValue = otherBindingsCount == 0 || !this.otherBindings[0].isStatic();", "+\tswitch (bits & RestrictiveFlagMASK) {", "+\t\tcase FIELD :", "+\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\t// if first field is actually constant, we can inline it", "+\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (needValue) {", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase LOCAL : // reading the first local variable", "-\t\t\t\tlastFieldBinding = null;", "-\t\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "-", "-\t\t\t\t// regular local variable read", "-\t\t\t\tif (localBinding.constant != NotAConstant) {", "-\t\t\t\t\tcodeStream.generateConstant(localBinding.constant, 0); // no implicit conversion", "-\t\t\t\t} else {", "-\t\t\t\t\t// outer local?", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "-\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "-\t\t\t\t\t\tif (path == null) {", "-\t\t\t\t\t\t\t// emulation was not possible (should not happen per construction)", "-\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "-\t\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase LOCAL : // reading the first local variable", "+\t\t\tif (!needValue) break; // no value needed", "+\t\t\tlastFieldBinding = null;", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\t// regular local variable read", "+\t\t\tif (localBinding.constant != NotAConstant) {", "+\t\t\t\tcodeStream.generateConstant(localBinding.constant, 0);", "+\t\t\t\t// no implicit conversion", "+\t\t\t} else {", "+\t\t\t\t// outer local?", "+\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "+\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "+\t\t\t\t\tif (path == null) {", "+\t\t\t\t\t\t// emulation was not possible (should not happen per construction)", "+\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "-\t\t\t\t}", "-\t\t}", "-\t} else {", "-\t\tlastFieldBinding = null;", "-\t}", "-\t// all intermediate field accesses are read accesses", "-\t// only the last field binding is a write access", "-\tif (otherBindings != null) {", "-\t\tint start = indexOfFirstValueRequired == 0 ? 0 : indexOfFirstValueRequired - 1;", "-\t\tfor (int i = start; i < otherBindingsCount; i++) {", "-\t\t\tif (lastFieldBinding != null) {", "-\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\tif (lastFieldBinding.isStatic())", "-\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\telse", "-\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\tcodeStream.load(localBinding);", "+\t}", "-\t\t\tlastFieldBinding = this.otherCodegenBindings[i];", "+\t// all intermediate field accesses are read accesses", "+\t// only the last field binding is a write access", "+\tif (this.otherCodegenBindings != null) {", "+\t\tfor (int i = 0; i < otherBindingsCount; i++) {", "+\t\t\tFieldBinding nextField = this.otherCodegenBindings[i];", "+\t\t\tif (lastFieldBinding != null) {", "+\t\t\t\tneedValue = !nextField.isStatic();", "+\t\t\t\tif (needValue) {", "+\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "+\t\t\t\t\t\t\tif (this.lastFieldBinding != this.codegenBinding && !this.lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant, 0);", "+\t\t\t\t\t\t} else if (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (this.codegenBinding != this.lastFieldBinding && !this.lastFieldBinding.isStatic()){", "+\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.lastFieldBinding = nextField;", "-\t\t}", "+\t\t}\t\t\t"]}], "num": 5621}
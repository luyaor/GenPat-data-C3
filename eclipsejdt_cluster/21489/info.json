{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5560b2f7d73f45ab6897aa3adb5c3cdc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bcd0d48c4b28098ef85cba96d484d20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "93d8d7da493f1511b9e604a6efa381c5567ae82d", "commitAfterChange": "a1ef86385643caa074ce407ec1aaf8fd121c9cc2", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 185, "signatureBeforeChange": " \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["+\t\t", "+\t\t// check the constants", "+\t\tassertTrue(TagElement.TAG_AUTHOR.equals(\"@author\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_DEPRECATED.equals(\"@deprecated\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_DOCROOT.equals(\"@docRoot\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_EXCEPTION.equals(\"@exception\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_INHERITDOC.equals(\"@inheritDoc\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_LINK.equals(\"@link\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_LINKPLAIN.equals(\"@linkplain\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_PARAM.equals(\"@param\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_RETURN.equals(\"@return\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_SEE.equals(\"@see\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_SERIAL.equals(\"@serial\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_SERIALDATA.equals(\"@serialData\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_SERIALFIELD.equals(\"@serialField\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_SINCE.equals(\"@since\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_THROWS.equals(\"@throws\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_VALUE.equals(\"@value\")); //$NON-NLS-1$", "+\t\tassertTrue(TagElement.TAG_VERSION.equals(\"@version\")); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39ab0619755ec6b385fe33b26e77aac7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "65014b9edcd64bc51154fcb1b47074eec77a5977", "commitAfterChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": "\t\t \t \tpublic void testCharacterLiteral()", "signatureAfterChange": "\t\t \t \tpublic void testCharacterLiteral()", "diff": ["+\t\ttry {", "+\t\t\tx.setEscapedValue(\"\\\"z\\\"\"); //$NON-NLS-1$", "+\t\t\tassertTrue(false);", "+\t\t} catch(IllegalArgumentException e) {", "+\t\t\t// pass", "+\t\t}", "+", "-\t\tassertTrue(x.charValue() == '\\'');\t\t", "+\t\tassertTrue(x.charValue() == '\\'');", "-\t\tassertTrue(x.charValue() == '\\'');\t\t", "+\t\tassertTrue(x.charValue() == '\\'');", "-\t\tassertTrue(x.charValue() == '\\\\');\t\t", "-\t}\t\t", "+\t\tassertTrue(x.charValue() == '\\\\');", "+\t\tx.setCharValue('\\b');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\b\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\n');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\n\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\f');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\f\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\r');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\r\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\\"');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\\\\"\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\0');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\0\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\1');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\1\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\2');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\2\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\3');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\3\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\4');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\4\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\5');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\5\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\6');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\6\\'\")); //$NON-NLS-1$", "+\t\tx.setCharValue('\\7');", "+\t\tassertTrue(x.getEscapedValue().equals(\"\\'\\\\7\\'\")); //$NON-NLS-1$", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a290108fadd16f1f22f2465abc03cbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 621, "methodNumberAfterChange": 770, "signatureBeforeChange": " \t \tpublic void testNodeTypeConstants()", "signatureAfterChange": " \t \tpublic void testNodeTypeConstants()", "diff": ["-", "+\t\tassertTrue(ASTNode.ENHANCED_FOR_STATEMENT == 70);", "+\t\tassertTrue(ASTNode.ENUM_DECLARATION == 71);", "+\t\tassertTrue(ASTNode.ENUM_CONSTANT_DECLARATION == 72);", "+\t\tassertTrue(ASTNode.TYPE_PARAMETER == 73);", "+\t\tassertTrue(ASTNode.PARAMETERIZED_TYPE == 74);", "+\t\tassertTrue(ASTNode.QUALIFIED_TYPE == 75);", "+\t\tassertTrue(ASTNode.WILDCARD_TYPE == 76);", "+\t\tassertTrue(ASTNode.NORMAL_ANNOTATION == 77);", "+\t\tassertTrue(ASTNode.MARKER_ANNOTATION == 78);", "+\t\tassertTrue(ASTNode.SINGLE_MEMBER_ANNOTATION == 79);", "+\t\tassertTrue(ASTNode.MEMBER_VALUE_PAIR == 80);", "+\t\tassertTrue(ASTNode.ANNOTATION_TYPE_DECLARATION == 81);", "+\t\tassertTrue(ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION == 82);", "+\t\tassertTrue(ASTNode.MODIFIER == 83);", "+\t\t", "+\t      \t  ASTNode.ANNOTATION_TYPE_DECLARATION,", "+\t\t\t  ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION,", "+              ASTNode.ENHANCED_FOR_STATEMENT,", "+              ASTNode.ENUM_CONSTANT_DECLARATION,", "+              ASTNode.ENUM_DECLARATION,", "+      \t\t  ASTNode.MARKER_ANNOTATION,", "+      \t\t  ASTNode.MEMBER_VALUE_PAIR,", "+      \t\t  ASTNode.MODIFIER,              ", "+\t\t\t  ASTNode.NORMAL_ANNOTATION,", "+              ASTNode.PARAMETERIZED_TYPE,", "+              ASTNode.QUALIFIED_TYPE,", "+      \t\t  ASTNode.SINGLE_MEMBER_ANNOTATION,", "+              ASTNode.TYPE_PARAMETER,", "-", "+              ASTNode.WILDCARD_TYPE,", "-\t\t\t", "-\t}}", "+\t}"]}], "num": 21489}
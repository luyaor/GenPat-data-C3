{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc5dfbf21144a37ca1872eb1b81ddb94", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d4473e7037f2a37bd87ee1c06ef3100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "bef60d1fb53f507f903d66ac6e04e719aa5b50f4", "commitAfterChange": "3b418eaef41604a68c97dae4dd32fddcb839b515", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\tif (methodDecl != null && methodDecl.binding != null) {", "-\t\t\t\t\t\t\tTypeVariableBinding typeVariable = methodDecl.binding.getTypeVariable(name);", "-\t\t\t\t\t\t\tif (typeVariable != null)\treturn typeVariable;", "+\t\t\t\t\t\tif (methodDecl != null) {", "+\t\t\t\t\t\t\tif (methodDecl.binding != null) {", "+\t\t\t\t\t\t\t\tTypeVariableBinding typeVariable = methodDecl.binding.getTypeVariable(name);", "+\t\t\t\t\t\t\t\tif (typeVariable != null)", "+\t\t\t\t\t\t\t\t\treturn typeVariable;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// use the methodDecl's typeParameters to handle problem cases when the method binding doesn't exist", "+\t\t\t\t\t\t\t\tTypeParameter[] params = methodDecl.typeParameters();", "+\t\t\t\t\t\t\t\tfor (int i = params == null ? 0 : params.length; --i >= 0;)", "+\t\t\t\t\t\t\t\t\tif (CharOperation.equals(params[i].name, name))", "+\t\t\t\t\t\t\t\t\t\tif (params[i].binding != null && params[i].binding.isValidBinding())", "+\t\t\t\t\t\t\t\t\t\t\treturn params[i].binding;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c871fa48154fb49a96865e6d5c37df1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a6b76fc7d7890cbbcb2fc001b8031466dd0ad995", "commitAfterChange": "8c05bff0d88a6a537ed2accc1c62c5430e927aee", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// type variables take precedence over member types", "-\t\t\t\t\t\tTypeVariableBinding typeVariable = sourceType.getTypeVariable(name);", "-\t\t\t\t\t\tif (typeVariable != null) {", "-\t\t\t\t\t\t\tif (insideStaticContext) // do not consider this type modifiers: access is legite within same type", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, typeVariable, ProblemReasons.NonStaticReferenceInStaticContext);", "-\t\t\t\t\t\t\treturn typeVariable;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t// member types take precedence over type variables", "-\t\t\t\t\t\tinsideTypeAnnotation = false;", "+\t\t\t\t\t\tTypeVariableBinding typeVariable = sourceType.getTypeVariable(name);", "+\t\t\t\t\t\tif (typeVariable != null) {", "+\t\t\t\t\t\t\tif (insideStaticContext) // do not consider this type modifiers: access is legite within same type", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, typeVariable, ProblemReasons.NonStaticReferenceInStaticContext);", "+\t\t\t\t\t\t\treturn typeVariable;", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tinsideTypeAnnotation = false;"]}], "num": 40188}
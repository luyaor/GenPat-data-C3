{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ed24b407b2f7d89d84ef4acc5da0ee3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b931d1f7a08d1bf7638f211ca8ba0b84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "da518c52dcbfe044bb9f162f86d0c3f3de2bc467", "commitAfterChange": "1bc1a66dee8786645fc203b9ded688e657fbf446", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public TypeBinding substitute(TypeBinding originalType)", "signatureAfterChange": "     public TypeBinding substitute(TypeBinding originalType)", "diff": ["-        if ((originalType.tagBits & TagBits.HasTypeVariable) != 0) {", "-    \t    if (originalType.isTypeVariable()) {", "+\t\tswitch (originalType.bindingType()) {", "+\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER:", "-       \t\t        if (originalVariable.rank < length && variables[originalVariable.rank] == originalVariable) {", "-    \t\t\t\t\treturn this.typeArguments[originalVariable.rank];", "-       \t\t        }", "-    \t    } else if (originalType.isParameterizedType()) {", "+   \t\t        if (originalVariable.rank < length && variables[originalVariable.rank] == originalVariable) {", "+\t\t\t\t\treturn this.typeArguments[originalVariable.rank];", "+   \t\t        }", "+   \t\t        break;", "+       \t\t       ", "+\t\t\tcase Binding.PARAMETERIZED_TYPE:", "-    \t        TypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "-    \t        if (substitutedArguments != originalArguments) {", "-\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "-\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "-\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "-\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn originalParameterizedType.type;", "-\t\t\t\t\t}    \t        \t", "-    \t            return this.environment.createParameterizedType(", "-    \t                    originalParameterizedType.type, substitutedArguments, originalParameterizedType.enclosingType());", "-        \t    } ", "-\t\t\t} else if (originalType.isArrayType()) {", "+    \t        if (originalArguments != null) {", "+\t    \t        TypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "+\t    \t        if (substitutedArguments != originalArguments) {", "+\t\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "+\t\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "+\t\t\t\t\t\t\tlength = originalVariables.length;", "+\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn originalParameterizedType.type;", "+\t\t\t\t\t\t}    \t        \t", "+\t    \t            return this.environment.createParameterizedType(", "+\t    \t                    originalParameterizedType.type, substitutedArguments, originalParameterizedType.enclosingType());", "+\t        \t    } ", "+    \t        }", "+    \t        break;", "+    \t        ", "+\t\t\tcase Binding.ARRAY_TYPE:", "-\t\t\t} else if (originalType.isWildcard()) {", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase Binding.WILDCARD_TYPE:", "-    \t    }", "-\t\t} else if (originalType.isGenericType()) {", "-\t\t    // treat as if parameterized with its type variables", "-\t\t\tReferenceBinding originalGenericType = (ReferenceBinding) originalType;", "-\t\t\tTypeVariableBinding[] originalVariables = originalGenericType.typeVariables();", "-\t\t\tint length = originalVariables.length;", "-\t\t\tTypeBinding[] originalArguments;", "-\t\t\tSystem.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);", "-\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "-\t\t\tif (substitutedArguments != originalArguments) {", "-\t\t\t\treturn this.environment.createParameterizedType(", "-\t\t\t\t\t\toriginalGenericType, substitutedArguments, null);", "-\t\t\t}", "+\t\t        break;", "+", "+\t\t\tcase Binding.GENERIC_TYPE:", "+\t\t\t    // treat as if parameterized with its type variables", "+\t\t\t\tReferenceBinding originalGenericType = (ReferenceBinding) originalType;", "+\t\t\t\tTypeVariableBinding[] originalVariables = originalGenericType.typeVariables();", "+\t\t\t\tlength = originalVariables.length;", "+\t\t\t\tSystem.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);", "+\t\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "+\t\t\t\tif (substitutedArguments != originalArguments) {", "+\t\t\t\t\treturn this.environment.createParameterizedType(", "+\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, null);", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c59bdc70b32ee0fb3f155a746c1ab89f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "c5c6bcddff761c0a416425cff989d848fca26469", "commitAfterChange": "d06e8d044b8d47de57499e466c78e11c0ab6a4e1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tfinal boolean hasEmptyAction = this.action == null", "-\t\t\t|| this.action.isEmptyBlock()", "-\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0);", "-", "+\t\tif (this.action == null", "+\t\t\t\t|| this.action.isEmptyBlock()", "+\t\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0)) {", "+\t\t\tcodeStream.exitUserScope(scope);", "+\t\t\tif (mergedInitStateIndex != -1) {", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "+\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);\t\t\t\t", "+\t\t\t}", "+\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\treturn;", "+\t\t}", "-\t\t\t\tif (hasEmptyAction) {", "-\t\t\t\t\tcollection.generateCode(scope, codeStream, false);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\t", "-\t\tswitch(this.kind) {", "-\t\t\tcase ARRAY :", "-\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) break;", "-\t\t\t\tcodeStream.load(this.collectionVariable);", "-\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\tcodeStream.arrayAt(this.collectionElementType.id);", "-\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "-\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "-\t\t\t\t}", "-\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "-\t\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "-\t\t\t\tif (this.postCollectionInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase RAW_ITERABLE :", "-\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "-\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) {", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t} else {", "+\t\tif (this.elementVariable.binding.resolvedPosition != -1) {", "+\t\t\tswitch(this.kind) {", "+\t\t\t\tcase ARRAY :", "+\t\t\t\t\tcodeStream.load(this.collectionVariable);", "+\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tcodeStream.arrayAt(this.collectionElementType.id);", "+\t\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "+\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase RAW_ITERABLE :", "+\t\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "-\t\t\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "-\t\t\t\t\tif (this.postCollectionInitStateIndex != -1) {", "-\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "-\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "+\t\t\tif (this.postCollectionInitStateIndex != -1) {", "+\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tthis.postCollectionInitStateIndex);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// if unused variable, some side effects still need to be performed (86487)", "+\t\t\tswitch(this.kind) {", "+\t\t\t\tcase ARRAY :", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase RAW_ITERABLE :", "+\t\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\t\t// still advance in iterator to prevent infinite loop", "+\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\tbreak;", "+\t\t\t}", "-", "-\t\tif (!hasEmptyAction) {", "-\t\t\tthis.action.generateCode(scope, codeStream);", "-\t\t}", "+\t\tthis.action.generateCode(scope, codeStream);", "-\t\t\t\t\tif (hasEmptyAction) break;", "-\t\t\t\tif (hasEmptyAction) break;"]}], "num": 19242}
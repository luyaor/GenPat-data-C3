{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2e7a6fe96537e0423b08a3e811b684c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4c75075c080048b7a0bca0209ecdc6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "30a32dc0337de627144cbccbbd93b9008fd470ea", "commitAfterChange": "935febc168deb80048c1a05ce50e867c26b355d7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\t\t\t&& scope.environment().options.getSeverity(CompilerOptions.IncompleteEnumSwitch) != ProblemSeverities.Ignore", "-\t\t\t\t\t&& caseCount != ((ReferenceBinding)expressionType).enumConstantCount()) {", "-\t\t\t\tFieldBinding[] enumFields = ((ReferenceBinding)expressionType.erasure()).fields();", "-\t\t\t\tfor (int i = 0, max = enumFields.length; i <max; i++) {", "-\t\t\t\t\tFieldBinding enumConstant = enumFields[i];", "-\t\t\t\t\tif ((enumConstant.modifiers & AccEnum) == 0) continue;", "-\t\t\t\t\tfindConstant : {", "-\t\t\t\t\t\tfor (int j = 0; j < caseCount; j++) {", "-\t\t\t\t\t\t\tif (enumConstant.id == this.constants[j]) break findConstant;", "+\t\t\t\t\t&& upperScope.environment().options.getSeverity(CompilerOptions.IncompleteEnumSwitch) != ProblemSeverities.Ignore) {", "+\t\t\t\tint constantCount = this.constants == null ? 0 : this.constants.length; // could be null if no case statement", "+\t\t\t\tif (constantCount == caseCount // ignore diagnosis if unresolved constants", "+\t\t\t\t\t\t&& caseCount != ((ReferenceBinding)expressionType).enumConstantCount()) {", "+\t\t\t\t\tFieldBinding[] enumFields = ((ReferenceBinding)expressionType.erasure()).fields();", "+\t\t\t\t\tfor (int i = 0, max = enumFields.length; i <max; i++) {", "+\t\t\t\t\t\tFieldBinding enumConstant = enumFields[i];", "+\t\t\t\t\t\tif ((enumConstant.modifiers & AccEnum) == 0) continue;", "+\t\t\t\t\t\tfindConstant : {", "+\t\t\t\t\t\t\tfor (int j = 0; j < caseCount; j++) {", "+\t\t\t\t\t\t\t\tif (enumConstant.id == this.constants[j]) break findConstant;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// enum constant did not get referenced from switch", "+\t\t\t\t\t\t\tupperScope.problemReporter().missingEnumConstantCase(this, enumConstant);", "-\t\t\t\t\t\t// enum constant did not get referenced from switch", "-\t\t\t\t\t\tscope.problemReporter().missingEnumConstantCase(this, enumConstant);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc4bed6513250abea52043f0a5e76a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "42a1621789d59f5727f1b8d1d95ca930314df17c", "commitAfterChange": "9cca91c0d0e7e32a793396ca268d390a14ac4f6a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["+\t\t\tboolean isEnumSwitch = false;", "+\t\t\t\t\tisEnumSwitch = true;", "+\t\t\t// for enum switch, check if all constants are accounted for (if no default) ", "+\t\t\tif (isEnumSwitch && defaultCase == null ", "+\t\t\t\t\t&& scope.environment().options.getSeverity(CompilerOptions.IncompleteEnumSwitch) != ProblemSeverities.Ignore", "+\t\t\t\t\t&& caseCount != ((ReferenceBinding)expressionType).enumConstantCount()) {", "+\t\t\t\tFieldBinding[] enumFields = ((ReferenceBinding)expressionType.erasure()).fields();", "+\t\t\t\tfor (int i = 0, max = enumFields.length; i <max; i++) {", "+\t\t\t\t\tFieldBinding enumConstant = enumFields[i];", "+\t\t\t\t\tif ((enumConstant.modifiers & AccEnum) == 0) continue;", "+\t\t\t\t\tfindConstant : {", "+\t\t\t\t\t\tfor (int j = 0; j < caseCount; j++) {", "+\t\t\t\t\t\t\tif (enumConstant.id == this.constants[j]) break findConstant;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// enum constant did not get referenced from switch", "+\t\t\t\t\t\tscope.problemReporter().missingEnumConstantCase(this, enumConstant);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 58550}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0eb1fcc250660594534e41c3e4db558a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0380f534006845aa317647f7d75e5554", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "b47007cd56be56e518f691f00411ed594be67102", "commitAfterChange": "eaa2c28fb9983936f1f852ef695044ad44499aa5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void addTrustedMatch(AstNode node)", "signatureAfterChange": " public void addTrustedMatch(AstNode node, boolean isExact)", "diff": ["-public void addTrustedMatch(AstNode node) {", "+public void addTrustedMatch(AstNode node, boolean isExact) {", "-\tthis.matchingNodes.put(node, EXACT_MATCH);", "+\tthis.matchingNodes.put(node, isExact ? EXACT_MATCH : POTENTIAL_MATCH);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "247e76ef224e2770d46893edc76257a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "0747fdf20cedad4937e8c04e2421862591a6a9c9", "commitAfterChange": "8ad920763747620475fe3a423609a18eb60eeab8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private HashtableOfObject addQueryResult(HashtableOfObject results, char[] word, CategoryTable wordsToDocNumbers, MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " private HashtableOfObject addQueryResult(HashtableOfObject results, char[] word, CategoryTable wordsToDocNumbers, MemoryIndex memoryIndex, boolean prevResults) throws IOException", "diff": ["-private HashtableOfObject addQueryResult(HashtableOfObject results, char[] word, CategoryTable wordsToDocNumbers, MemoryIndex memoryIndex) throws IOException {", "+private HashtableOfObject addQueryResult(HashtableOfObject results, char[] word, CategoryTable wordsToDocNumbers, MemoryIndex memoryIndex, boolean prevResults) throws IOException {", "-\tEntryResult result = (EntryResult) results.get(word);", "+\tEntryResult result = prevResults ? (EntryResult) results.get(word) : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "649c9edf27888e0f405d006d0d216aca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticAccessMethodBinding.java", "commitBeforeChange": "57f40e6c0dfcf939f53a8ca5092a4521d28a033f", "commitAfterChange": "315acf11b0c9cb31cc22fc01fb1efb136ce92270", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void initializeMethodAccessor(MethodBinding targetMethod, ReferenceBinding declaringClass)", "signatureAfterChange": "  public void initializeMethodAccessor(MethodBinding targetMethod, boolean isSuperAccess, ReferenceBinding declaringClass)", "diff": ["-public void initializeMethodAccessor(MethodBinding targetMethod, ReferenceBinding declaringClass) {", "+public void initializeMethodAccessor(MethodBinding targetMethod, boolean isSuperAccess, ReferenceBinding declaringClass) {", "-\tthis.accessType = MethodAccess;", "+\tthis.accessType = isSuperAccess ? SuperMethodAccess : MethodAccess;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f3722210cce6b0c3a4ab738318873ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f39e3e40a8fb480e71912552d3976827814676e5", "commitAfterChange": "cae1ac0076053182a150a9a6566741ab9c075217", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \t\tprivate ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus)", "signatureAfterChange": "  \t\tprivate ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus, boolean addClasspathChange)", "diff": ["-\t\tprivate ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus) {", "-\t\t\tClasspathChange classpathChange = addClasspathChange();", "+\t\tprivate ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus, boolean addClasspathChange) {", "+\t\t\tClasspathChange classpathChange = addClasspathChange ? addClasspathChange() : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd050c8e2cfe91290649b902386f2900", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "13badd688be686ebb5ba17a06b5117d9f7db22e6", "commitAfterChange": "678bd63c535ed58308236db21b34dad57015766d", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 254, "signatureBeforeChange": " private void rejectIllegalTypeAnnotations(TypeReference typeReference)", "signatureAfterChange": " private void rejectIllegalTypeAnnotations(TypeReference typeReference, boolean tolerateAnnotationsOnDimensions)", "diff": ["+}", "+private void rejectIllegalTypeAnnotations(TypeReference typeReference, boolean tolerateAnnotationsOnDimensions) {", "-\tannotations = typeReference.getAnnotationsOnDimensions(true);", "+\tannotations = tolerateAnnotationsOnDimensions ? null : typeReference.getAnnotationsOnDimensions(true);"]}], "num": 3428}
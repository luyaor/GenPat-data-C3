{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f8b614eded51851afeb3df21c9b0161", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b646928144de8e038f30e8ff231cc6c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "4168404bef1be66fa92e39948727385e68af408c", "commitAfterChange": "641db1701cbce57a1e73a64de662de098370be6e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void addExceptionConstraint(Set<ConstraintFormula> c, Expression argument, TypeBinding substF)", "signatureAfterChange": "  \tprivate boolean addConstraintsToC(Expression[] exprs, Set<ConstraintFormula> c, MethodBinding method)", "diff": ["-\tprivate void addExceptionConstraint(Set<ConstraintFormula> c, Expression argument, TypeBinding substF) {", "-\t\tif (argument instanceof FunctionalExpression) {", "-\t\t\tc.add(new ConstraintExceptionFormula((FunctionalExpression) argument, substF));", "-\t\t} else if (argument instanceof ConditionalExpression) {", "-\t\t\tConditionalExpression ce = (ConditionalExpression) argument;", "-\t\t\taddExceptionConstraint(c, ce.valueIfTrue, substF);", "-\t\t\taddExceptionConstraint(c, ce.valueIfFalse, substF);", "+\tprivate boolean addConstraintsToC(Expression[] exprs, Set<ConstraintFormula> c, MethodBinding method) {", "+\t\tTypeBinding[] fs;", "+\t\tif (exprs != null) {", "+\t\t\tint k = exprs.length;", "+\t\t\tint p = method.parameters.length;", "+\t\t\tif (k < (method.isVarargs() ? p-1 : p))", "+\t\t\t\treturn false; // insufficient arguments for parameters!", "+\t\t\tswitch (this.inferenceKind) {", "+\t\t\t\tcase CHECK_STRICT:", "+\t\t\t\tcase CHECK_LOOSE:", "+\t\t\t\t\tfs = method.parameters;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase CHECK_VARARG:", "+\t\t\t\t\tfs = varArgTypes(method.parameters, k);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tthrow new IllegalStateException(\"Unexpected checkKind \"+this.inferenceKind); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < k; i++) {", "+\t\t\t\tTypeBinding fsi = fs[Math.min(i, p-1)];", "+\t\t\t\tTypeBinding substF = substitute(fsi);", "+\t\t\t\tif (!addConstraintsToC_OneExpr(exprs[i], c, fsi, substF, method))", "+\t\t\t\t\treturn false;", "+\t        }", "+\t\treturn true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9320cbadbc3ee42ae6605741185dbf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "55f4964943e2f63287728b29450cbefa492d313d", "commitAfterChange": "ffcfe0dac7f476f076089d3cdae600b5982efdfb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["+\t}", "-\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t    TypeBinding parameterType = method.parameters[i];", "-\t\t    TypeBinding argumentType = argumentTypes[i];", "-\t\t\targuments[i].computeConversion(scope, parameterType, argumentType);", "-\t\t\tif (argumentType != NullBinding && parameterType.isWildcard() && ((WildcardBinding)parameterType).kind != Wildcard.SUPER) {", "-\t\t\t    unsafeWildcardInvocation = true;", "-\t\t\t} else if (argumentType != parameterType ", "-\t\t\t        && argumentType.isRawType() ", "-\t\t\t        && (parameterType.isBoundParameterizedType() || parameterType.isGenericType())) {", "-\t\t\t    scope.problemReporter().unsafeRawConversion(arguments[i], argumentType, parameterType);", "+\t\tTypeBinding[] params = method.parameters;", "+\t\tif (method.isVararg()) {", "+\t\t\t// 4 possibilities exist for a call to the vararg method foo(int i, long ... value) : foo(1), foo(1, 2), foo(1, 2, 3, 4) & foo(1, new long[] {1, 2})", "+\t\t\tint lastIndex = params.length - 1;", "+\t\t\tfor (int i = 0; i < lastIndex; i++)", "+\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i], argumentTypes[i]))", "+\t\t\t\t    unsafeWildcardInvocation = true;", "+\t\t   int argLength = arguments.length;", "+\t\t   if (lastIndex < argLength) { // vararg argument was provided", "+\t\t\t   \tTypeBinding parameterType = params[lastIndex];", "+\t\t\t    if (params.length != argLength || parameterType.dimensions() != argumentTypes[lastIndex].dimensions())", "+\t\t\t    \tparameterType = ((ArrayBinding) parameterType).elementsType(); // single element was provided for vararg parameter", "+\t\t\t\tfor (int i = lastIndex; i < argLength; i++)", "+\t\t\t\t    if (checkInvocationArgument(scope, arguments[i], parameterType, argumentTypes[i]))", "+\t\t\t\t\t    unsafeWildcardInvocation = true;", "+\t\t} else {", "+\t\t\tfor (int i = 0, argLength = arguments.length; i < argLength; i++)", "+\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i], argumentTypes[i]))", "+\t\t\t\t    unsafeWildcardInvocation = true;"]}], "num": 3331}
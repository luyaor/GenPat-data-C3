{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61975c41afad070bbf18d87313b83de0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac37dc0f7b02b43fe0119eedd0b2d60c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "05ca87fa79cdcdbf8adddd11b0044e5bbc381076", "commitAfterChange": "1a08d829c1b17811d102043c26cfbba0a6765570", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \t@Override \t@SuppressWarnings(\"unchecked\") \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding) throws InvalidInputException", "signatureAfterChange": " \t \t@Override \t@SuppressWarnings(\"unchecked\") \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding) throws InvalidInputException", "diff": ["+\t\tEclipseFileManager javaFileManager = null;", "+\t\tStandardJavaFileManager standardJavaFileManager = null;", "-\t\t\tEclipseFileManager javaFileManager = (EclipseFileManager) this.fileManager;", "+\t\t\tjavaFileManager = (EclipseFileManager) this.fileManager;", "+\t\t}", "+\t\tif (this.fileManager instanceof StandardJavaFileManager) {", "+\t\t\tstandardJavaFileManager = (StandardJavaFileManager) this.fileManager;", "+\t\t}", "+\t\tif (javaFileManager != null) {", "-\t\t\tIterable<? extends File> location = javaFileManager.getLocation(StandardLocation.PLATFORM_CLASS_PATH);", "-\t\t\tif (location != null) {", "-\t\t\t\tfor (File file : location) {", "-\t\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "-\t    \t\t\t\tfile.getAbsolutePath(),", "-\t    \t\t\t\tnull,", "-\t    \t\t\t\tnull));", "-\t\t\t\t}", "+\t\t}", "+\t\tIterable<? extends File> location = null;", "+\t\tif (standardJavaFileManager != null) {", "+\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.PLATFORM_CLASS_PATH);", "+\t\t}", "+\t\tif (location != null) {", "+\t\t\tfor (File file : location) {", "+\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "+    \t\t\t\tfile.getAbsolutePath(),", "+    \t\t\t\tnull,", "+    \t\t\t\tnull));", "-\t\t\tif ((javaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0", "-\t\t\t\t\t&& (javaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "-\t\t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleExtdirs(null));", "+\t\t}", "+\t\tif (javaFileManager != null) {", "+    \t\tif ((javaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0", "+    \t\t\t\t&& (javaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "+    \t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleExtdirs(null));", "+    \t\t}", "+\t\t}", "+\t\tif (standardJavaFileManager != null) {", "+\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.SOURCE_PATH);", "+\t\t} else {", "+\t\t\tlocation = null;", "+\t\t}", "+\t\tif (location != null) {", "+\t\t\tfor (File file : location) {", "+\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "+    \t\t\t\tfile.getAbsolutePath(),", "+    \t\t\t\tnull,", "+    \t\t\t\tnull));", "-\t\t\tlocation = javaFileManager.getLocation(StandardLocation.SOURCE_PATH);", "-\t\t\tif (location != null) {", "-\t\t\t\tfor (File file : location) {", "-\t\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "-\t    \t\t\t\tfile.getAbsolutePath(),", "-\t    \t\t\t\tnull,", "-\t    \t\t\t\tnull));", "-\t\t\t\t}", "+\t\t}", "+\t\tif (standardJavaFileManager != null) {", "+\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.CLASS_PATH);", "+\t\t} else {", "+\t\t\tlocation = null;", "+\t\t}", "+\t\tif (location != null) {", "+\t\t\tfor (File file : location) {", "+\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "+    \t\t\t\tfile.getAbsolutePath(),", "+    \t\t\t\tnull,", "+    \t\t\t\tnull));", "-\t\t\tlocation = javaFileManager.getLocation(StandardLocation.CLASS_PATH);", "-\t\t\tif (location != null) {", "-\t\t\t\tfor (File file : location) {", "-\t\t\t\t\tfileSystemClasspaths.add(FileSystem.getClasspath(", "-\t    \t\t\t\tfile.getAbsolutePath(),", "-\t    \t\t\t\tnull,", "-\t    \t\t\t\tnull));", "-\t\t\t\t}", "-\t\t\t}", "+\t\t}", "+\t\tif (this.checkedClasspaths == null) {", "+\t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleBootclasspath(null, null));", "+\t\t\tfileSystemClasspaths.addAll((ArrayList<? extends FileSystem.Classpath>) this.handleClasspath(null, null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b70a6602529f8ecbee982e77564f214e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java", "commitBeforeChange": "f6d7e4c8ebdaaf8a904962804a027a09edc0c0d3", "commitAfterChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \t@Override \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding)", "signatureAfterChange": "  \t@Override \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding)", "diff": ["-\t\tArrayList<FileSystem.Classpath> fileSystemClasspaths = new ArrayList<FileSystem.Classpath>();", "-\t\tEclipseFileManager javaFileManager = null;", "+\t\tArrayList<FileSystem.Classpath> fileSystemClasspaths = new ArrayList<>();", "+\t\tEclipseFileManager eclipseJavaFileManager = null;", "+\t\tJavaFileManager javaFileManager = null;", "+\t\tboolean havePlatformPaths = false;", "+\t\tboolean haveClassPaths = false;", "-\t\t\tjavaFileManager = (EclipseFileManager) this.fileManager;", "+\t\t\teclipseJavaFileManager = (EclipseFileManager) this.fileManager;", "+\t\tjavaFileManager = this.fileManager;", "-\t\tif (javaFileManager != null) {", "-\t\t\tif ((javaFileManager.flags & EclipseFileManager.HAS_ENDORSED_DIRS) == 0", "-\t\t\t\t\t&& (javaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "+\t\tif (eclipseJavaFileManager != null) {", "+\t\t\tif ((eclipseJavaFileManager.flags & EclipseFileManager.HAS_ENDORSED_DIRS) == 0", "+\t\t\t\t\t&& (eclipseJavaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "-\t\t}", "-\t\tif (location != null) {", "-\t\t\tfor (File file : location) {", "-\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "-\t\t\t\t\tfile.getAbsolutePath(),", "-\t\t\t\t\tnull,", "-\t\t\t\t\tnull);", "-\t\t\t\tif (classpath != null) {", "-\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\tif (location != null) {", "+\t\t\t\tfor (File file : location) {", "+\t\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "+\t\t\t\t\t\tfile.getAbsolutePath(),", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);", "+\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\t\thavePlatformPaths = true;", "+\t\t\t\t\t}", "+\t\t} else if (javaFileManager != null) {", "+\t\t\tClasspath classpath = new ClasspathJsr199(this.fileManager, StandardLocation.PLATFORM_CLASS_PATH);", "+\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\thavePlatformPaths = true;", "-\t\tif (javaFileManager != null) {", "-\t\t\tif ((javaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0", "-\t\t\t\t\t&& (javaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "+\t\tif (eclipseJavaFileManager != null) {", "+\t\t\tif ((eclipseJavaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0", "+\t\t\t\t\t&& (eclipseJavaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "-\t\t} else {", "-\t\t\tlocation = null;", "-\t\t}", "-\t\tif (location != null) {", "-\t\t\tfor (File file : location) {", "-\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "+\t\t\tif (location != null) {", "+\t\t\t\tfor (File file : location) {", "+\t\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "+\t\t\t\t\t\t\tfile.getAbsolutePath(),", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull);", "+\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.CLASS_PATH);", "+\t\t\tif (location != null) {", "+\t\t\t\tfor (File file : location) {", "+\t\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "-\t\t\t\tif (classpath != null) {", "-\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\t\thaveClassPaths = true;", "+\t\t\t\t\t}", "-\t\t}", "-\t\tif (standardJavaFileManager != null) {", "-\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.CLASS_PATH);", "-\t\t} else {", "-\t\t\tlocation = null;", "-\t\t}", "-\t\tif (location != null) {", "-\t\t\tfor (File file : location) {", "-\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "-\t\t\t\t\tfile.getAbsolutePath(),", "-\t\t\t\t\tnull,", "-\t\t\t\t\tnull);", "-\t\t\t\tif (classpath != null) {", "-\t\t\t\t\tfileSystemClasspaths.add(classpath);", "-\t\t\t\t}", "+\t\t} else if (javaFileManager != null) {", "+\t\t\tClasspath classpath = null;", "+\t\t\tif (this.fileManager.hasLocation(StandardLocation.SOURCE_PATH)) {", "+\t\t\t\tclasspath = new ClasspathJsr199(this.fileManager, StandardLocation.SOURCE_PATH);", "+\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\tclasspath = new ClasspathJsr199(this.fileManager, StandardLocation.CLASS_PATH);", "+\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\thaveClassPaths = true;", "-\t\t\tfileSystemClasspaths.addAll(this.handleBootclasspath(null, null));", "-\t\t\tfileSystemClasspaths.addAll(this.handleClasspath(null, null));", "+\t\t\t// It appears to be necessary to handleBootclasspath() for IBM JVMs", "+\t\t\t// in order to have visibility to java.lang.String (not present in rt.jar).", "+\t\t\t// The jars returned by StandardFileManager.getLocation(PLATFORM_CLASS_PATH) are", "+\t\t\t// not sufficient to resolve all standard classes.", "+\t\t\tif (!havePlatformPaths) fileSystemClasspaths.addAll(this.handleBootclasspath(null, null));", "+\t\t\tif (!haveClassPaths) fileSystemClasspaths.addAll(this.handleClasspath(null, null));"]}], "num": 48377}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3aa70ef1bae148298b336c43e29804f7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11cdce7ec3614eae682d0701be3d9a0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "ffd96339198fcdfc38a0c44d4da9dfd0a59d21fc", "commitAfterChange": "800086b43f754a4bddaa8c7c50578119d7c63538", "methodNumberBeforeChange": 501, "methodNumberAfterChange": 501, "signatureBeforeChange": " public void illegalUseOfUnderscoreAsAnIdentifier(int sourceStart, int sourceEnd)", "signatureAfterChange": " public void illegalUseOfUnderscoreAsAnIdentifier(int sourceStart, int sourceEnd, boolean lambdaParameter)", "diff": ["-public void illegalUseOfUnderscoreAsAnIdentifier(int sourceStart, int sourceEnd) {", "-\tthis.handle(", "-\t\tIProblem.IllegalUseOfUnderscoreAsAnIdentifier,", "-\t\tNoArgument,", "-\t\tNoArgument,", "-\t\tsourceStart,", "-\t\tsourceEnd);", "+public void illegalUseOfUnderscoreAsAnIdentifier(int sourceStart, int sourceEnd, boolean lambdaParameter) {", "+\tthis.underScoreIsLambdaParameter = lambdaParameter;", "+\ttry {", "+\t\tthis.handle(", "+\t\t\tIProblem.IllegalUseOfUnderscoreAsAnIdentifier,", "+\t\t\tNoArgument,", "+\t\t\tNoArgument,", "+\t\t\tsourceStart,", "+\t\t\tsourceEnd);", "+\t} finally {", "+\t\tthis.underScoreIsLambdaParameter = false;\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e529f032552b01609b74b072411cb715", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f59b711176ec061fe20b7b3f340d714d67ced1a8", "commitAfterChange": "df84bc0b0e74080458b4e3f35c6e77ec6fed2587", "methodNumberBeforeChange": 250, "methodNumberAfterChange": 250, "signatureBeforeChange": " public void isClassPathCorrect(char[][] wellKnownTypeName, CompilationUnitDeclaration compUnitDecl, Object location)", "signatureAfterChange": " public void isClassPathCorrect(char[][] wellKnownTypeName, CompilationUnitDeclaration compUnitDecl, Object location)", "diff": ["+\t// ProblemReporter is not designed to be reentrant. Just in case, we discovered a build path problem while we are already ", "+\t// in the midst of reporting some other problem, save and restore reference context thereby mimicking a stack.", "+\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=442755.", "+\tReferenceContext savedContext = this.referenceContext;", "-\tthis.handle(", "-\t\tIProblem.IsClassPathCorrect,", "-\t\targuments,", "-\t\targuments,", "-\t\tstart,", "-\t\tend);", "+\ttry {", "+\t\tthis.handle(", "+\t\t\t\tIProblem.IsClassPathCorrect,", "+\t\t\t\targuments,", "+\t\t\t\targuments,", "+\t\t\t\tstart,", "+\t\t\t\tend);", "+\t} finally {", "+\t\tthis.referenceContext = savedContext;", "+\t}"]}], "num": 46118}
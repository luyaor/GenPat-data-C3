{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b4c7f0e717333992f23bce95759e0ae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df5a3e8016d385ff850e372eaf29b490", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java", "commitBeforeChange": "9de11e1c2a41a21613174b6ab91cab4369b64686", "commitAfterChange": "d8ffd58c7c4b7aeb0d38e216b7c221e9b8f78625", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName)", "signatureAfterChange": " void computeNonJavaResources(String[] resNames, JarPackageFragment pkg, JarPackageFragmentInfo info, String zipName)", "diff": ["-/* package */ void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName) {", "+/* package */ void computeNonJavaResources(String[] resNames, JarPackageFragment pkg, JarPackageFragmentInfo info, String zipName) {", "-\t\tObject[] res = new Object[max];", "-\t\tint index = 0;", "+\t\tHashMap jarEntries = new HashMap(); // map from IPath to IJarEntryResource", "+\t\tHashMap childrenMap = new HashMap(); // map from IPath to ArrayList<IJarEntryResource>", "+\t\tArrayList topJarEntries = new ArrayList();", "-\t\t\t\tIPath parentRelativePath = new Path(resName).removeFirstSegments(this.names.length);", "-\t\t\t\tres[index++] = new JarEntryFile(resName, zipName, parentRelativePath);", "+\t\t\t\tIPath childPath = new Path(resName).removeFirstSegments(this.names.length);", "+\t\t\t\tJarEntryFile file = new JarEntryFile(resName, zipName, childPath);", "+\t\t\t\tjarEntries.put(childPath, file);", "+\t\t\t\tif (childPath.segmentCount() == 1) {", "+\t\t\t\t\tfile.setParent(pkg);", "+\t\t\t\t\ttopJarEntries.add(file);", "+\t\t\t\t} else {", "+\t\t\t\t\tIPath parentPath = childPath.removeLastSegments(1);", "+\t\t\t\t\twhile (parentPath.segmentCount() > 0) {", "+\t\t\t\t\t\tArrayList parentChildren = (ArrayList) childrenMap.get(parentPath);", "+\t\t\t\t\t\tif (parentChildren == null) {", "+\t\t\t\t\t\t\tObject dir = new JarEntryDirectory(parentPath);", "+\t\t\t\t\t\t\tjarEntries.put(parentPath, dir);", "+\t\t\t\t\t\t\tchildrenMap.put(parentPath, parentChildren = new ArrayList());", "+\t\t\t\t\t\t\tparentChildren.add(childPath);", "+\t\t\t\t\t\t\tif (parentPath.segmentCount() == 1) {", "+\t\t\t\t\t\t\t\ttopJarEntries.add(dir);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tchildPath = parentPath;", "+\t\t\t\t\t\t\tparentPath = childPath.removeLastSegments(1);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tparentChildren.add(childPath);", "+\t\t\t\t\t\t\tbreak; // all parents are already registered", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t} ", "-\t\tif (index != max) {", "-\t\t\tSystem.arraycopy(res, 0, res = new Object[index], 0, index);", "+\t\tIterator entries = childrenMap.entrySet().iterator();", "+\t\twhile (entries.hasNext()) {", "+\t\t\tMap.Entry entry = (Map.Entry) entries.next();", "+\t\t\tIPath entryPath = (IPath) entry.getKey();", "+\t\t\tArrayList entryValue =  (ArrayList) entry.getValue();", "+\t\t\tJarEntryDirectory jarEntryDirectory = (JarEntryDirectory) jarEntries.get(entryPath);", "+\t\t\tint size = entryValue.size();", "+\t\t\tIJarEntryResource[] children = new IJarEntryResource[size];", "+\t\t\tfor (int i = 0; i < size; i++) {", "+\t\t\t\tObject child = jarEntries.get(entryValue.get(i));", "+\t\t\t\tif (child instanceof JarEntryFile) {", "+\t\t\t\t\t((JarEntryFile) child).setParent(jarEntryDirectory);", "+\t\t\t\t} else {", "+\t\t\t\t\t((JarEntryDirectory) child).setParent(jarEntryDirectory);", "+\t\t\t\t}", "+\t\t\t\tchildren[i] = (IJarEntryResource) child;", "+\t\t\t}", "+\t\t\tjarEntryDirectory.setChildren(children);", "+\t\t\tif (entryPath.segmentCount() == 1) {", "+\t\t\t\tjarEntryDirectory.setParent(pkg);", "+\t\t\t}", "+\t\t}", "+\t\tObject[] res = topJarEntries.toArray(new Object[topJarEntries.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e007c5fab5c74df13229ade5d01531fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java", "commitBeforeChange": "ed25425f5de4194a0f32ce4c1315af886ca42c42", "commitAfterChange": "821b6028ffbd0ba8edfd1a0534c32e817f4e830d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " void computeNonJavaResources(String[] resNames, JarPackageFragment pkg, JarPackageFragmentInfo info, String zipName)", "signatureAfterChange": " private Object[] computeNonJavaResources(ArrayList entryNames)", "diff": ["-/* package */ void computeNonJavaResources(String[] resNames, JarPackageFragment pkg, JarPackageFragmentInfo info, String zipName) {", "-\tif (resNames == null) {", "-\t\tinfo.setNonJavaResources(null);", "-\t\treturn;", "-\tint max = resNames.length;", "-\tif (max == 0) {", "-\t    info.setNonJavaResources(JavaElementInfo.NO_NON_JAVA_RESOURCES);", "-\t} else {", "-\t\tHashMap jarEntries = new HashMap(); // map from IPath to IJarEntryResource", "-\t\tHashMap childrenMap = new HashMap(); // map from IPath to ArrayList<IJarEntryResource>", "-\t\tArrayList topJarEntries = new ArrayList();", "-\t\tfor (int i = 0; i < max; i++) {", "-\t\t\tString resName = resNames[i];", "-\t\t\t// consider that a .java file is not a non-java resource (see bug 12246 Packages view shows .class and .java files when JAR has source)", "-\t\t\tif (!Util.isJavaLikeFileName(resName)) {", "-\t\t\t\tIPath filePath = new Path(resName);", "-\t\t\t\tIPath childPath = filePath.removeFirstSegments(this.names.length);", "-\t\t\t\tJarEntryFile file = new JarEntryFile(filePath.lastSegment());", "-\t\t\t\tjarEntries.put(childPath, file);", "-\t\t\t\tif (childPath.segmentCount() == 1) {", "-\t\t\t\t\tfile.setParent(pkg);", "-\t\t\t\t\ttopJarEntries.add(file);", "-\t\t\t\t} else {", "-\t\t\t\t\tIPath parentPath = childPath.removeLastSegments(1);", "-\t\t\t\t\twhile (parentPath.segmentCount() > 0) {", "-\t\t\t\t\t\tArrayList parentChildren = (ArrayList) childrenMap.get(parentPath);", "-\t\t\t\t\t\tif (parentChildren == null) {", "-\t\t\t\t\t\t\tObject dir = new JarEntryDirectory(parentPath.lastSegment());", "-\t\t\t\t\t\t\tjarEntries.put(parentPath, dir);", "-\t\t\t\t\t\t\tchildrenMap.put(parentPath, parentChildren = new ArrayList());", "-\t\t\t\t\t\t\tparentChildren.add(childPath);", "-\t\t\t\t\t\t\tif (parentPath.segmentCount() == 1) {", "-\t\t\t\t\t\t\t\ttopJarEntries.add(dir);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tchildPath = parentPath;", "-\t\t\t\t\t\t\tparentPath = childPath.removeLastSegments(1);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tparentChildren.add(childPath);", "-\t\t\t\t\t\t\tbreak; // all parents are already registered", "+ */", "+private Object[] computeNonJavaResources(ArrayList entryNames) {", "+\tint length = entryNames.size();", "+\tif (length == 0)", "+\t\treturn JavaElementInfo.NO_NON_JAVA_RESOURCES;", "+\tHashMap jarEntries = new HashMap(); // map from IPath to IJarEntryResource", "+\tHashMap childrenMap = new HashMap(); // map from IPath to ArrayList<IJarEntryResource>", "+\tArrayList topJarEntries = new ArrayList();", "+\tfor (int i = 0; i < length; i++) {", "+\t\tString resName = (String) entryNames.get(i);", "+\t\t// consider that a .java file is not a non-java resource (see bug 12246 Packages view shows .class and .java files when JAR has source)", "+\t\tif (!Util.isJavaLikeFileName(resName)) {", "+\t\t\tIPath filePath = new Path(resName);", "+\t\t\tIPath childPath = filePath.removeFirstSegments(this.names.length);", "+\t\t\tJarEntryFile file = new JarEntryFile(filePath.lastSegment());", "+\t\t\tjarEntries.put(childPath, file);", "+\t\t\tif (childPath.segmentCount() == 1) {", "+\t\t\t\tfile.setParent(this);", "+\t\t\t\ttopJarEntries.add(file);", "+\t\t\t} else {", "+\t\t\t\tIPath parentPath = childPath.removeLastSegments(1);", "+\t\t\t\twhile (parentPath.segmentCount() > 0) {", "+\t\t\t\t\tArrayList parentChildren = (ArrayList) childrenMap.get(parentPath);", "+\t\t\t\t\tif (parentChildren == null) {", "+\t\t\t\t\t\tObject dir = new JarEntryDirectory(parentPath.lastSegment());", "+\t\t\t\t\t\tjarEntries.put(parentPath, dir);", "+\t\t\t\t\t\tchildrenMap.put(parentPath, parentChildren = new ArrayList());", "+\t\t\t\t\t\tparentChildren.add(childPath);", "+\t\t\t\t\t\tif (parentPath.segmentCount() == 1) {", "+\t\t\t\t\t\t\ttopJarEntries.add(dir);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tchildPath = parentPath;", "+\t\t\t\t\t\tparentPath = childPath.removeLastSegments(1);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tparentChildren.add(childPath);", "+\t\t\t\t\t\tbreak; // all parents are already registered", "-\t\tIterator entries = childrenMap.entrySet().iterator();", "-\t\twhile (entries.hasNext()) {", "-\t\t\tMap.Entry entry = (Map.Entry) entries.next();", "-\t\t\tIPath entryPath = (IPath) entry.getKey();", "-\t\t\tArrayList entryValue =  (ArrayList) entry.getValue();", "-\t\t\tJarEntryDirectory jarEntryDirectory = (JarEntryDirectory) jarEntries.get(entryPath);", "-\t\t\tint size = entryValue.size();", "-\t\t\tIJarEntryResource[] children = new IJarEntryResource[size];", "-\t\t\tfor (int i = 0; i < size; i++) {", "-\t\t\t\tJarEntryResource child = (JarEntryResource) jarEntries.get(entryValue.get(i));", "-\t\t\t\tchild.setParent(jarEntryDirectory);", "-\t\t\t\tchildren[i] = child;", "-\t\t\t}", "-\t\t\tjarEntryDirectory.setChildren(children);", "-\t\t\tif (entryPath.segmentCount() == 1) {", "-\t\t\t\tjarEntryDirectory.setParent(pkg);", "-\t\t\t}", "-\t\t}", "-\t\tObject[] res = topJarEntries.toArray(new Object[topJarEntries.size()]);", "-\t\tinfo.setNonJavaResources(res);", "+\tIterator entries = childrenMap.entrySet().iterator();", "+\twhile (entries.hasNext()) {", "+\t\tMap.Entry entry = (Map.Entry) entries.next();", "+\t\tIPath entryPath = (IPath) entry.getKey();", "+\t\tArrayList entryValue =  (ArrayList) entry.getValue();", "+\t\tJarEntryDirectory jarEntryDirectory = (JarEntryDirectory) jarEntries.get(entryPath);", "+\t\tint size = entryValue.size();", "+\t\tIJarEntryResource[] children = new IJarEntryResource[size];", "+\t\tfor (int i = 0; i < size; i++) {", "+\t\t\tJarEntryResource child = (JarEntryResource) jarEntries.get(entryValue.get(i));", "+\t\t\tchild.setParent(jarEntryDirectory);", "+\t\t\tchildren[i] = child;", "+\t\t}", "+\t\tjarEntryDirectory.setChildren(children);", "+\t\tif (entryPath.segmentCount() == 1) {", "+\t\t\tjarEntryDirectory.setParent(this);", "+\t\t}", "+\t}", "+\treturn topJarEntries.toArray(new Object[topJarEntries.size()]);"]}], "num": 42383}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25a7023ee67d918024e35f23b16e6857", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dceb5a11c7f96e01f4e4761e249eed5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "signatureAfterChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "diff": ["-\t\t// generate initializers", "+\t\t// generate static fields/initializers/enum constants", "+\t\tint enumCount = 0;", "-\t\t\t\tFieldDeclaration fieldDecl;", "-\t\t\t\tif ((fieldDecl = declaringType.fields[i]).isStatic()) {", "+\t\t\t\tFieldDeclaration fieldDecl = declaringType.fields[i];", "+\t\t\t\tif (fieldDecl.isStatic()) {", "+\t\t\t\t}", "+\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\tenumCount++;", "+\t\t// enum need to initialize $VALUES synthetic cache of enum constants", "+\t\tif (enumCount > 0) {", "+\t\t\tif (declaringType.fields != null) {", "+\t\t\t\t// $VALUES := new <EnumType>[<enumCount>]", "+\t\t\t\tcodeStream.generateInlinedValue(enumCount);", "+\t\t\t\tcodeStream.anewarray(declaringType.binding);", "+\t\t\t\tfor (int i = 0, max = declaringType.fields.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = declaringType.fields[i];", "+\t\t\t\t\t// $VALUES[i] = <enum-constant-i>", "+\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\tcodeStream.dup();", "+\t\t\t\t\t\tcodeStream.generateInlinedValue(fieldDecl.binding.id);", "+\t\t\t\t\t\tcodeStream.getstatic(fieldDecl.binding);", "+\t\t\t\t\t\tcodeStream.aastore();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tcodeStream.putstatic(declaringType.enumValuesSyntheticfield);", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d513565b25bd4bd4f9b4456bf09465bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "4874f3c07ca9ca090ef8ea0a7c6f93e3cab913e3", "commitAfterChange": "6b709bf6ea70d3d534a47bbc5c2e238ec217a717", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public FieldBinding addSyntheticFieldForInnerclass(ReferenceBinding enclosingType)", "signatureAfterChange": "  public FieldBinding addSyntheticFieldForInnerclass(ReferenceBinding enclosingType)", "diff": ["-\tFieldBinding existingField;", "-\tif ((existingField = this.getField(synthField.name, true /*resolve*/)) != null) {", "-\t\tTypeDeclaration typeDecl = scope.referenceContext;", "-\t\tfor (int i = 0, max = typeDecl.fields.length; i < max; i++) {", "-\t\t\tFieldDeclaration fieldDecl = typeDecl.fields[i];", "-\t\t\tif (fieldDecl.binding == existingField) {", "-\t\t\t\tscope.problemReporter().duplicateFieldInType(this, fieldDecl);", "-\t\t\t\tbreak;", "+\tboolean needRecheck;", "+\tdo {", "+\t\tneedRecheck = false;", "+\t\tFieldBinding existingField;", "+\t\tif ((existingField = this.getField(synthField.name, true /*resolve*/)) != null) {", "+\t\t\tTypeDeclaration typeDecl = scope.referenceContext;", "+\t\t\tfor (int i = 0, max = typeDecl.fields.length; i < max; i++) {", "+\t\t\t\tFieldDeclaration fieldDecl = typeDecl.fields[i];", "+\t\t\t\tif (fieldDecl.binding == existingField) {", "+\t\t\t\t\tif (this.scope.environment().options.complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tsynthField.name = CharOperation.concat(", "+\t\t\t\t\t\t\tsynthField.name,", "+\t\t\t\t\t\t\t\"$\".toCharArray()); //$NON-NLS-1$", "+\t\t\t\t\t\tneedRecheck = true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tscope.problemReporter().duplicateFieldInType(this, fieldDecl);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t}\t\t", "+\t} while (needRecheck);"]}], "num": 14938}
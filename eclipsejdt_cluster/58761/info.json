{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24620a7ad61432dd40407a98b77750c1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "732897efe932b97bf807671f24b9765f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tchar[] source, \t\tchar[][] packageName, \t\tString unitName, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tboolean cleanUp, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tchar[] source, \t\tchar[][] packageName, \t\tString unitName, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tboolean cleanUp, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\t\tCompilationUnitResolver compilationUnitVisitor =", "+\t\t\tCompilationUnitResolver resolver =", "-\t\t\tif (nodeSearcher != null) {", "-\t\t\t\tunit = ", "-\t\t\t\t\tcompilationUnitVisitor.resolve(", "-\t\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\t\tsource,", "-\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\tunitName,", "-\t\t\t\t\t\t\tencoding),", "-\t\t\t\t\t\tnodeSearcher,", "-\t\t\t\t\t\ttrue, // method verification", "-\t\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\t\ttrue); // generate code\t\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tunit = ", "-\t\t\t\t\tcompilationUnitVisitor.resolve(", "-\t\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\t\tsource,", "-\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\tunitName,", "-\t\t\t\t\t\t\tencoding),", "-\t\t\t\t\t\ttrue, // method verification", "-\t\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\t\ttrue); // generate code\t\t\t\t\t", "-\t\t\t}", "+\t\t\tunit = ", "+\t\t\t\tresolver.resolve(", "+\t\t\t\t\tnull, // no existing compilation unit declaration", "+\t\t\t\t\tnew BasicCompilationUnit(", "+\t\t\t\t\t\tsource,", "+\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\tunitName,", "+\t\t\t\t\t\tencoding),", "+\t\t\t\t\tnodeSearcher,", "+\t\t\t\t\ttrue, // method verification", "+\t\t\t\t\ttrue, // analyze code", "+\t\t\t\t\ttrue); // generate code\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c679a1d789f46206a20666fd2c80ce0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "27fd6b1218a2223f75b9add3ad72e983a5f4500b", "commitAfterChange": "d2861a7753e529217c872f1a7e1714670325b389", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tchar[] source, \t\tchar[][] packageName, \t\tString unitName, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tboolean cleanUp, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tchar[] source, \t\tchar[][] packageName, \t\tString unitName, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tboolean cleanUp, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\t\tCompilationUnitResolver compilationUnitVisitor =", "+\t\t\tCompilationUnitResolver resolver =", "-\t\t\tif (nodeSearcher != null) {", "-\t\t\t\tunit = ", "-\t\t\t\t\tcompilationUnitVisitor.resolve(", "-\t\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\t\tsource,", "-\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\tunitName,", "-\t\t\t\t\t\t\tencoding),", "-\t\t\t\t\t\tnodeSearcher,", "-\t\t\t\t\t\ttrue, // method verification", "-\t\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\t\ttrue); // generate code\t\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tunit = ", "-\t\t\t\t\tcompilationUnitVisitor.resolve(", "-\t\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\t\tsource,", "-\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\tunitName,", "-\t\t\t\t\t\t\tencoding),", "-\t\t\t\t\t\ttrue, // method verification", "-\t\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\t\ttrue); // generate code\t\t\t\t\t", "-\t\t\t}", "+\t\t\tunit = ", "+\t\t\t\tresolver.resolve(", "+\t\t\t\t\tnull, // no existing compilation unit declaration", "+\t\t\t\t\tnew BasicCompilationUnit(", "+\t\t\t\t\t\tsource,", "+\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\tunitName,", "+\t\t\t\t\t\tencoding),", "+\t\t\t\t\tnodeSearcher,", "+\t\t\t\t\ttrue, // method verification", "+\t\t\t\t\ttrue, // analyze code", "+\t\t\t\t\ttrue); // generate code\t\t\t\t\t"]}], "num": 58761}
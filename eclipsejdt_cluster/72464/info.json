{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e3d1291af47cee3a08e9431860bea99", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ac5ed4afdcc6902b4da1c54cae2729d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected boolean parseParam() throws InvalidInputException", "signatureAfterChange": " protected boolean parseParam() throws InvalidInputException", "diff": ["-\t\tif (ch != ' ' && !ScannerHelper.isWhitespace(ch)) {", "-\t\t\t// no space after the tag, just create a normal tag", "-\t\t\treturn false;", "+\t\t// Try to push an identifier in the stack, otherwise restart from the end tag position", "+\t\tif (ch == ' ' || ScannerHelper.isWhitespace(ch)) {", "+\t\t\tint token = this.scanner.getNextToken();", "+\t\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\tch = peekChar();", "+\t\t\t\tif (ch == ' ' || ScannerHelper.isWhitespace(ch)) {", "+\t\t\t\t\tpushIdentifier(true, false);", "+\t\t\t\t\tpushParamName(false);", "+\t\t\t\t\tthis.index = this.scanner.currentPosition;", "+\t\t\t\t\tvalid = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.scanner.resetTo(this.tagSourceEnd+1, this.javadocEnd);", "-\t\tthis.scanner.getNextToken(); // consume first token", "-\t\tpushIdentifier(true, false); // force the identifier even if invalid", "-\t\tpushParamName(false);", "-\t\tthis.index = this.scanner.currentPosition;", "-\t\tvalid = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a77cecc29e08675df7a1447190820469", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "signatureAfterChange": "  \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "diff": ["-\t\t\tif (type.isAnnotatable()) {", "-\t\t\t\tAnnotatableType annotatableType = (AnnotatableType) type;", "-\t\t\t\tif (this.ast.apiLevel() >= AST.JLS8 && !annotatableType.annotations().isEmpty()) {", "-\t\t\t\t\tIterator annotations = annotatableType.annotations().iterator();", "-\t\t\t\t\twhile (annotations.hasNext()) {", "-\t\t\t\t\t\tAnnotation annotation = (Annotation) annotations.next();", "+\t\t\tif (this.ast.apiLevel() >= AST.JLS8) {", "+\t\t\t\tList annotations  = null;", "+\t\t\t\tif (type.isAnnotatable()) {", "+\t\t\t\t\tannotations = ((AnnotatableType) type).annotations();", "+\t\t\t\t} else if (type.isArrayType()) {", "+\t\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\t\tannotations = arrayType.dimensions().isEmpty() ? null : ((arrayType.getDimensionAt(0)).annotations());", "+\t\t\t\t}", "+\t\t\t\tif (annotations != null) {", "+\t\t\t\t\tIterator iter = annotations.iterator();", "+\t\t\t\t\twhile (iter.hasNext()) {", "+\t\t\t\t\t\tAnnotation annotation = (Annotation) iter.next();"]}], "num": 72464}
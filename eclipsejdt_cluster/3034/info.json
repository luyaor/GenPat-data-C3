{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbdbe521930d14876e5ebb84d01333c0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c0fa5b8d0045dc90da4c3034d352171", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "5a5d0f43790375863ed059f546377b6a1dca079c", "commitAfterChange": "c8af5e76f44ad60b89fcc109db821631c8461cdd", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void outputClassFiles(CompilationResult unitResult)", "signatureAfterChange": " \tpublic void outputClassFiles(CompilationResult unitResult)", "diff": ["-    \t\t\t\tif (generateClasspathStructure) {", "-    \t\t\t\t\tif (currentDestinationPath != null) {", "-    \t\t\t\t\t\tint index = CharOperation.lastIndexOf(File.separatorChar, relativeName);", "-    \t\t\t\t\t\tFile currentFolder = new File(currentDestinationPath, relativeStringName.substring(0, index));", "-    \t\t\t\t\t\tcurrentFolder.mkdirs();", "-    \t\t\t\t\t} else {", "-        \t\t\t\t\t// create the subfolfers is necessary", "-    \t\t\t\t\t\t// need a way to retrieve the folders to create", "-        \t\t\t\t\tString path = javaFileForOutput.toUri().getPath();", "-        \t\t\t\t\tint index = path.lastIndexOf('/');", "-        \t\t\t\t\tif (index != -1) {", "-        \t\t\t\t\t\tFile file = new File(path.substring(0, index));", "-        \t\t\t\t\t\tfile.mkdirs();", "-        \t\t\t\t\t}", "-    \t\t\t\t\t}", "-    \t\t\t\t}", "+\t\t\t\t\tif (generateClasspathStructure) {", "+\t\t\t\t\t\tif (currentDestinationPath != null) {", "+\t\t\t\t\t\t\tint index = CharOperation.lastIndexOf(File.separatorChar, relativeName);", "+\t\t\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\t\t\tFile currentFolder = new File(currentDestinationPath, relativeStringName.substring(0, index));", "+\t\t\t\t\t\t\t\tcurrentFolder.mkdirs();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// create the subfolfers is necessary", "+\t\t\t\t\t\t\t// need a way to retrieve the folders to create", "+\t\t\t\t\t\t\tString path = javaFileForOutput.toUri().getPath();", "+\t\t\t\t\t\t\tint index = path.lastIndexOf('/');", "+\t\t\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\t\t\tFile file = new File(path.substring(0, index));", "+\t\t\t\t\t\t\t\tfile.mkdirs();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7209a05a60123d76fc843732be793a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "24a97143c66fa96e7fe7655b53f2b99dd1c9b806", "commitAfterChange": "2d2fc9e19e89b1b5be0389a21ddcf829825f1a2b", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " private void parseTags(NLSLine line) throws InvalidInputException", "signatureAfterChange": " private void parseTags(NLSLine line) throws InvalidInputException", "diff": ["-\t\tString index = s.substring(start, end);", "-\t\tint i = 0;", "-\t\ttry {", "-\t\t\ti = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "-\t\t} catch (NumberFormatException e) {", "-\t\t\ti = -1; // we don't want to consider this as a valid NLS tag", "-\t\t}", "-\t\tif (line.exists(i)) {", "-\t\t\tline.set(i, null);", "+\t\tif (end != -1) {", "+\t\t\tString index = s.substring(start, end);", "+\t\t\tint i = 0;", "+\t\t\ttry {", "+\t\t\t\ti = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\ti = -1; // we don't want to consider this as a valid NLS tag", "+\t\t\t}", "+\t\t\tif (line.exists(i)) {", "+\t\t\t\tline.set(i, null);", "+\t\t\t}"]}], "num": 3034}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a9e2e370403eaa8620bdbf972d45f2d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0992374944e2dab743383825660c5855", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "87d4fd7980451e90652820b5860e6399b708ef2c", "commitAfterChange": "913656a5a76e9163d25332c6a9aeee51291ec413", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "signatureAfterChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "diff": ["-\t\t// Delete leading whitespaces if any", "-\t\tif (previousToken != -1 && lastTokenEndPosition != commentStart && spaceEndPosition > lastTokenEndPosition) {", "-\t\t\taddDeleteEdit(lastTokenEndPosition, spaceEndPosition-1);", "+\t\t// Replace the line separator at the end of the comment if any...", "+\t\tint startReplace = previousToken == SKIP_FIRST_WHITESPACE_TOKEN ? spaceStartPosition : lastTokenEndPosition;", "+\t\tif (this.column == 1 && commentEnd >= startReplace) {", "+\t\t\taddReplaceEdit(startReplace, commentEnd, this.formatter.preferences.line_separator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72030bbe6c9e99e7066d1845efb9886b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 535, "methodNumberAfterChange": 542, "signatureBeforeChange": " public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType,  \t\tboolean uncheckedConversion, LookupEnvironment env)", "signatureAfterChange": " public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, int severity)", "diff": ["-public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, ", "-\t\tboolean uncheckedConversion, LookupEnvironment env) ", "+public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, int severity) ", "-\t\tString.valueOf(requiredType.nullAnnotatedReadableName(env, false)),", "-\t\tString.valueOf(providedType.nullAnnotatedReadableName(env, false))", "+\t\tString.valueOf(requiredType.nullAnnotatedReadableName(this.options, false)),", "+\t\tString.valueOf(providedType.nullAnnotatedReadableName(this.options, false))", "-\t\tString.valueOf(requiredType.nullAnnotatedReadableName(env, true)),", "-\t\tString.valueOf(providedType.nullAnnotatedReadableName(env, true))", "+\t\tString.valueOf(requiredType.nullAnnotatedReadableName(this.options, true)),", "+\t\tString.valueOf(providedType.nullAnnotatedReadableName(this.options, true))", "+\tint problemId = severity == 2 ? IProblem.NullityUncheckedTypeAnnotationDetail : IProblem.NullityMismatchingTypeAnnotation;\t\t\t", "-\t\t\tuncheckedConversion ? IProblem.NullityMismatchingTypeAnnotationUnchecked : IProblem.NullityMismatchingTypeAnnotation,", "+\t\t\tproblemId,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6e7180133453fc9795f20865e5acd01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 79, "signatureBeforeChange": "  \tprivate void printJavadocText(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "signatureAfterChange": "  \tprivate void printJavadocText(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tthis.javadocTextBuffer.setLength(0);", "-\t\t\tprintJavadocTextLine(buffer, nextStart, end, block, idx==0 || (!joinLines && textOnNewLine)/*first text?*/, needIndentation, false /*not an html tag*/);", "+\t\t\tprintJavadocTextLine(this.javadocTextBuffer, nextStart, end, block, idx==0 || (!joinLines && textOnNewLine)/*first text?*/, needIndentation, false /*not an html tag*/);", "-\t\t\t\t\taddReplaceEdit(textStart, end, buffer.toString());", "+\t\t\t\t\taddReplaceEdit(textStart, end, this.javadocTextBuffer.toString());", "-\t\t\t\t\tbuffer.setLength(0);", "+\t\t\t\t\tthis.javadocTextBuffer.setLength(0);", "-\t\tprintJavadocTextLine(buffer, nextStart, text.sourceEnd, block, text.separatorsPtr==-1 /* first text?*/, needIndentation, false /*not an html tag*/);", "+\t\tprintJavadocTextLine(this.javadocTextBuffer, nextStart, text.sourceEnd, block, text.separatorsPtr==-1 /* first text?*/, needIndentation, false /*not an html tag*/);", "-\t\t\taddReplaceEdit(textStart, text.sourceEnd, buffer.toString());", "+\t\t\taddReplaceEdit(textStart, text.sourceEnd, this.javadocTextBuffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f924d88d41f6da85601d0214540a7c31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "09344c3511ec65da3ebc80e49387be9bef2842c9", "commitAfterChange": "784fb3dfd6aad9e1272ee168af202a1a299ea44b", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic IJavaElement getHandleFromMemento(String memento) throws JavaModelException", "signatureAfterChange": " \tpublic IJavaElement getHandleFromMemento(String memento) throws JavaModelException", "diff": ["-\t\tJavaModel model= (JavaModel) getJavaModel();", "-\t\t\treturn model;", "+\t\t\treturn this.javaModel;", "-\t\tJavaProject proj= (JavaProject) model.getJavaProject(projectName);", "+\t\tJavaProject proj= (JavaProject) this.javaModel.getJavaProject(projectName);", "-\t\t\treturn model.getHandleFromMementoForRoot(memento, proj, projectEnd, memento.length());", "+\t\t\treturn this.javaModel.getHandleFromMementoForRoot(memento, proj, projectEnd, memento.length());", "-\t\tIPackageFragmentRoot root = model.getHandleFromMementoForRoot(memento, proj, projectEnd, rootEnd);", "+\t\tIPackageFragmentRoot root = this.javaModel.getHandleFromMementoForRoot(memento, proj, projectEnd, rootEnd);", "-\t\t\treturn model.getHandleFromMementoForBinaryMembers(memento, root, rootEnd, end);", "+\t\t\treturn this.javaModel.getHandleFromMementoForBinaryMembers(memento, root, rootEnd, end);", "-\t\treturn model.getHandleFromMementoForSourceMembers(memento, root, rootEnd, end);", "+\t\treturn this.javaModel.getHandleFromMementoForSourceMembers(memento, root, rootEnd, end);"]}], "num": 10886}
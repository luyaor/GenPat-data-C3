{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edc22699112df02e0bcd9637ef7da633", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a3b35a8bf424495ca6ae62c1ab5f61c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "31ed34e0a037856b8e3e3c1c78d05a0a783d81f2", "commitAfterChange": "837346ba964bb0d4b1f43b6b3500ddc7ecfbb966", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void checkIndexConsistency()", "signatureAfterChange": " public void checkIndexConsistency()", "diff": ["+\tif (isRunningLock == null) {", "+\t\tFile fileLock = new File(getJavaPluginWorkingLocation().toFile(), IsRunning);", "+\t\tif (!fileLock.exists()) return; // can skip it since the IndexManager was in a safe state", "+\t\tisRunningLock = fileLock;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea3ab08f72a72651a1d5d1dce55b3140", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void checkClassFile(String compliance, String className, String source, String expectedOutput)", "signatureAfterChange": " \tprivate void checkClassFile(String compliance, String directoryName, String className, String source, String expectedOutput, int mode)", "diff": ["-", "-\tprivate void checkClassFile(String compliance, String className, String source, String expectedOutput) {", "-\t\tcompileAndDeploy(compliance, source, className);", "+\tprivate void checkClassFile(String compliance, String directoryName, String className, String source, String expectedOutput, int mode) {", "+\t\tcompileAndDeploy(compliance, source, directoryName, className);", "-\t\t\tFile f = new File(EVAL_DIRECTORY + File.separator + className + \".class\");", "+\t\t\tFile directory = new File(EVAL_DIRECTORY, directoryName);", "+\t\t\tif (!directory.exists()) {", "+\t\t\t\tassertTrue(\".class file not generated properly in \" + directory, false);", "+\t\t\t}", "+\t\t\tFile f = new File(directory, className + \".class\");", "-\t\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.SYSTEM);", "+\t\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", mode);"]}], "num": 37214}
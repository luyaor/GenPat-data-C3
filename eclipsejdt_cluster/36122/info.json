{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17d53bd156dfa5e82d692d0c5baee208", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f720d8bc5811d411127bc8b2ae8a45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean repeat)", "signatureAfterChange": " \t \tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean repeat)", "diff": ["-\t\t\tIRegion[] regions =  new Region[10];", "-\t\t\tint idx = 0;", "+\t\t\tArrayList<IRegion> regions =  new ArrayList<>();", "-\t\t\t\tregions[idx++] = new Region(regionStart-delta, regionEnd-(regionStart+2));", "+\t\t\t\tregions.add(new Region(regionStart-delta, regionEnd-(regionStart+2)));", "-\t\t\tif (idx == 1) {", "+\t\t\tif (regions.size() == 1) {", "-\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions[0].getOffset(), regions[0].getLength(), LINE_SEPARATOR, repeat);", "+\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions.get(0).getOffset(), regions.get(0).getLength(), LINE_SEPARATOR, repeat);", "-\t\t\t\tSystem.arraycopy(regions, 0, regions = new Region[idx], 0, idx);", "-\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions, LINE_SEPARATOR);", "+\t\t\t\tIRegion[] regionsArray = regions.toArray(new IRegion[regions.size()]);", "+\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regionsArray, LINE_SEPARATOR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c57ba1e1c55113ced33541a06980ca2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "a4669bf7c1bea8a08bf4a9d017bbfc729f9d6fb3", "commitAfterChange": "8530f36dbde13058837d240762ab3a756916ff70", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate void runTest(String source, String expectedResult, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length)", "signatureAfterChange": " \t \t \tprivate void runTest(String input, String output, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "diff": ["+\tprivate void runTest(String input, String output, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator) {", "+\t\tString result;", "+\t\tif (length == -1) {", "+\t\t\tresult = runFormatter(codeFormatter, input, kind, indentationLevel, offset, input.length(), lineSeparator);", "+\t\t} else {", "+\t\t\tresult = runFormatter(codeFormatter, input, kind, indentationLevel, offset, length, lineSeparator);", "+\t\t}", "+\t\tassertLineEquals(result, input, output, checkNull);", "+\t}", "-\tprivate void runTest(String source, String expectedResult, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length) {", "-\t\tString result;", "-\t\tif (length == -1) {", "-\t\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, source.length(), null);", "-\t\t} else {", "-\t\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, length, null);", "-\t\t}", "-\t\tassertLineEquals(result, source, expectedResult, checkNull);", "-\t}"]}], "num": 36122}
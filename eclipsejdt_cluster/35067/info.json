{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25f48399304c8745a8ec41dea50cb0fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a82820bae26ee8624a49569b8f19299", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "00271ea450a08e464e158f7e4f05b195c1058507", "commitAfterChange": "c0b416aedc7957c92c0ea3ebe495003a2c5390e6", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["-\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity <", "-\t\t\t\t\t\t\t\tcursor.arityMax) {", "-\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor.left,", "-\t\t\t\t\t\t\t\tcursor.right, PLUS);", "+\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity < cursor.arityMax) {", "+\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor);", "-\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor.left,", "-\t\t\t\t\t\t\t\tcursor.right, PLUS, cursor.arity);", "+\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor);", "-\t\t\t\t\tint numberOfParens = (expr1.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity <", "-\t\t\t\t\t\t\t\tcursor.arityMax) {", "-\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor.left,", "-\t\t\t\t\t\t\t\tcursor.right, PLUS);", "-\t\t\t\t\t\tif (numberOfParens != 0) {", "-\t\t\t\t\t\t\t// clear the bits on cursor and put them back on cursor.left", "-\t\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "-\t\t\t\t\t\t\tcursor.left.bits &= ~ASTNode.ParenthesizedMASK;", "-\t\t\t\t\t\t\tcursor.left.bits |= numberOfParens << ASTNode.ParenthesizedSHIFT;", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity < cursor.arityMax) {", "+\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor);", "+\t\t\t\t\t\t// clear the bits on cursor", "+\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "-\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor.left,", "-\t\t\t\t\t\t\t\tcursor.right, PLUS, cursor.arity);", "-\t\t\t\t\t\tif (numberOfParens != 0) {", "-\t\t\t\t\t\t\t// clear the bits on cursor and put them back on cursor.left", "-\t\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "-\t\t\t\t\t\t\tcursor.left.bits &= ~ASTNode.ParenthesizedMASK;", "-\t\t\t\t\t\t\tcursor.left.bits |= numberOfParens << ASTNode.ParenthesizedSHIFT;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor);", "+\t\t\t\t\t\t// clear the bits on cursor", "+\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199437cbe1ccbf6b7eb733697ae86312", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "commitAfterChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-nullAnnotations:\")) { //$NON-NLS-1$", "-\t\t\t\t\tStringTokenizer tokenizer =", "-\t\t\t\t\t\tnew StringTokenizer(currentArg.substring(\"-nullAnnotations:\".length()), \",\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\tString token = tokenizer.nextToken();", "-\t\t\t\t\t\tif (token.startsWith(\"nullable=\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationName, token.substring(\"nullable=\".length())); //$NON-NLS-1$", "-\t\t\t\t\t\t} else if (token.startsWith(\"nonnull=\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationName, token.substring(\"nonnull=\".length())); //$NON-NLS-1$", "-\t\t\t\t\t\t} else if (token.equals(\"emulate\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_EmulateNullAnnotationTypes, CompilerOptions.ENABLED);", "-\t\t\t\t\t\t} else if (token.equals(\"import\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_DefaultImportNullAnnotationTypes, CompilerOptions.ENABLED);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\t\t\tthis.bind(\"configure.unrecognized.nullannotation.option\", token)); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = DEFAULT;"]}], "num": 35067}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e092f3a6e03d3d8c7eaa0543f85b685", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a38aede87cca3eb761ec932564c2a71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": " \tprotected void setModifiers(SingleVariableDeclaration variableDecl, Argument argument)", "signatureAfterChange": " \tprotected void setModifiers(SingleVariableDeclaration variableDecl, Argument argument)", "diff": ["+\t\t\t\t\t\tswitchToken:", "-\t\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation annotation = annotations[indexInAnnotations++];", "+\t\t\t\t\t\t\t\t\t// argument may have synthetic annotations, skip them:", "+\t\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation annotation;", "+\t\t\t\t\t\t\t\t\tdo {", "+\t\t\t\t\t\t\t\t\t\tif (indexInAnnotations == annotations.length)", "+\t\t\t\t\t\t\t\t\t\t\tbreak switchToken;", "+\t\t\t\t\t\t\t\t\t\tannotation = annotations[indexInAnnotations++];", "+\t\t\t\t\t\t\t\t\t} while ((annotation.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsSynthetic) != 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e4806ea8becee4ae9ccde1b2296523", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": " \tprotected void setModifiers(BodyDeclaration bodyDeclaration, org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations, int modifiersEnd)", "signatureAfterChange": " \tprotected void setModifiers(BodyDeclaration bodyDeclaration, org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations, int modifiersEnd)", "diff": ["+\t\t\t\tswitchToken:", "-\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation annotation = annotations[indexInAnnotations++];", "+\t\t\t\t\t\t\t// method may have synthetic annotations, skip them:", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation annotation;", "+\t\t\t\t\t\t\tdo {", "+\t\t\t\t\t\t\t\tif (indexInAnnotations == annotations.length)", "+\t\t\t\t\t\t\t\t\tbreak switchToken;", "+\t\t\t\t\t\t\t\tannotation = annotations[indexInAnnotations++];", "+\t\t\t\t\t\t\t} while ((annotation.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsSynthetic) != 0);"]}], "num": 20762}
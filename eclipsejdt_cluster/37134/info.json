{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cebc764e75a2515c154698f75c8fc888", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1782a8ee431bc2ea63186df55beab55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "0de5167791884524f72d9d44c10f0e243af65d00", "commitAfterChange": "07ab76f69fbeeb2f2fd54cdf3d01ee69344b9ae0", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static IBinding[] resolve( \t\tfinal IJavaElement[] elements, \t\tint apiLevel, \t\tMap compilerOptions, \t\tIJavaProject javaProject, \t\tWorkingCopyOwner owner, \t\tint flags, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static void resolve( \t\t\tString[] sourceUnits, \t\t\tString[] encodings, \t\t\tString[] bindingKeys, \t\t\tFileASTRequestor requestor, \t\t\tint apiLevel, \t\t\tMap options, \t\t\tList classpaths, \t\t\tint flags, \t\t\tIProgressMonitor monitor)", "diff": ["+\tpublic static void resolve(", "+\t\t\tString[] sourceUnits,", "+\t\t\tString[] encodings,", "+\t\t\tString[] bindingKeys,", "+\t\t\tFileASTRequestor requestor,", "+\t\t\tint apiLevel,", "+\t\t\tMap options,", "+\t\t\tList classpaths,", "+\t\t\tint flags,", "+\t\t\tIProgressMonitor monitor) {", "+", "+\t\t\tINameEnviromentWithProgress environment = null;", "+\t\t\tCancelableProblemFactory problemFactory = null;", "+\t\t\ttry {", "+\t\t\t\tif (monitor != null) {", "+\t\t\t\t\tint amountOfWork = (sourceUnits.length + bindingKeys.length) * 2; // 1 for beginToCompile, 1 for resolve", "+\t\t\t\t\tmonitor.beginTask(\"\", amountOfWork); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tClasspath[] allEntries = new Classpath[classpaths.size()];", "+\t\t\t\tclasspaths.toArray(allEntries);", "+\t\t\t\tenvironment = new NameEnviromentWithProgress(allEntries, null, monitor);", "+\t\t\t\tproblemFactory = new CancelableProblemFactory(monitor);", "+\t\t\t\tCompilerOptions compilerOptions = getCompilerOptions(options, (flags & ICompilationUnit.ENABLE_STATEMENTS_RECOVERY) != 0);", "+\t\t\t\tcompilerOptions.ignoreMethodBodies = (flags & ICompilationUnit.IGNORE_METHOD_BODIES) != 0;", "+\t\t\t\tCompilationUnitResolver resolver =", "+\t\t\t\t\tnew CompilationUnitResolver(", "+\t\t\t\t\t\tenvironment,", "+\t\t\t\t\t\tgetHandlingPolicy(),", "+\t\t\t\t\t\tcompilerOptions,", "+\t\t\t\t\t\tgetRequestor(),", "+\t\t\t\t\t\tproblemFactory,", "+\t\t\t\t\t\tmonitor,", "+\t\t\t\t\t\tfalse);", "+\t\t\t\tresolver.resolve(sourceUnits, encodings, bindingKeys, requestor, apiLevel, options, flags);", "+\t\t\t\tif (NameLookup.VERBOSE && (environment instanceof CancelableNameEnvironment)) {", "+\t\t\t\t\tCancelableNameEnvironment cancelableNameEnvironment = (CancelableNameEnvironment) environment;", "+\t\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInSourcePackage: \" + cancelableNameEnvironment.nameLookup.timeSpentInSeekTypesInSourcePackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInBinaryPackage: \" + cancelableNameEnvironment.nameLookup.timeSpentInSeekTypesInBinaryPackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t} finally {", "+\t\t\t\tif (monitor != null) monitor.done();", "+\t\t\t\tif (environment != null) {", "+\t\t\t\t\tenvironment.setMonitor(null); // don't hold a reference to this external object", "+\t\t\t\t}", "+\t\t\t\tif (problemFactory != null) {", "+\t\t\t\t\tproblemFactory.monitor = null; // don't hold a reference to this external object", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc4890a3633bedc52ed94261824e433e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "0de5167791884524f72d9d44c10f0e243af65d00", "commitAfterChange": "07ab76f69fbeeb2f2fd54cdf3d01ee69344b9ae0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic static CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tIJavaProject javaProject, \t\t\tNodeSearcher nodeSearcher, \t\t\tMap options, \t\t\tWorkingCopyOwner owner, \t\t\tint flags, \t\t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tIJavaProject javaProject, \t\t\tList classpaths, \t\t\tNodeSearcher nodeSearcher, \t\t\tMap options, \t\t\tWorkingCopyOwner owner, \t\t\tint flags, \t\t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t}", "+\t\t\tList classpaths,", "-\t\tCancelableNameEnvironment environment = null;", "+\t\tINameEnviromentWithProgress environment = null;", "-\t\t\tenvironment = new CancelableNameEnvironment(((JavaProject)javaProject), owner, monitor);", "+\t\t\tif (javaProject == null) {", "+\t\t\t\tClasspath[] allEntries = new Classpath[classpaths.size()];", "+\t\t\t\tclasspaths.toArray(allEntries);", "+\t\t\t\tenvironment = new NameEnviromentWithProgress(allEntries, null, monitor);", "+\t\t\t} else {", "+\t\t\t\tenvironment = new CancelableNameEnvironment((JavaProject) javaProject, owner, monitor);", "+\t\t\t}", "-\t\t\t\t\tmonitor);", "+\t\t\t\t\tmonitor,", "+\t\t\t\t\tjavaProject != null);", "-\t\t\tif (NameLookup.VERBOSE) {", "-\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInSourcePackage: \" + environment.nameLookup.timeSpentInSeekTypesInSourcePackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInBinaryPackage: \" + environment.nameLookup.timeSpentInSeekTypesInBinaryPackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tif (NameLookup.VERBOSE && environment instanceof CancelableNameEnvironment) {", "+\t\t\t\tCancelableNameEnvironment cancelableNameEnvironment = (CancelableNameEnvironment) environment;", "+\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInSourcePackage: \" + cancelableNameEnvironment.nameLookup.timeSpentInSeekTypesInSourcePackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tSystem.out.println(Thread.currentThread() + \" TIME SPENT in NameLoopkup#seekTypesInBinaryPackage: \" + cancelableNameEnvironment.nameLookup.timeSpentInSeekTypesInBinaryPackage + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tenvironment.monitor = null; // don't hold a reference to this external object", "+\t\t\t\t// don't hold a reference to this external object", "+\t\t\t\tenvironment.setMonitor(null);", "-\t\t\t// first unit cleanup is done by caller, but cleanup all enqueued requested units (not processed)", "-//\t\t\tif (resolver != null) {", "-//\t\t\t\tfor (int i = 1; i <  resolver.totalUnits; i++) { // could be more requested units", "-//\t\t\t\t\tCompilationUnitDeclaration parsedUnit = resolver.unitsToProcess[i];", "-//\t\t\t\t\tif (parsedUnit.scope != null)", "-//\t\t\t\t\t\tparsedUnit.scope.faultInTypes(); // force resolution of signatures, so clients can query DOM AST", "-//\t\t\t\t\tparsedUnit.cleanUp();", "-//\t\t\t\t}", "-//\t\t\t}"]}], "num": 37134}
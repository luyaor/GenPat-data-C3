{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a07e20f54ee620740fa171a4ec3a9a04", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29239991822ea8c6fa1cbc5172eb8f7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void bindArguments()", "signatureAfterChange": " \tpublic void bindArguments()", "diff": ["-\t\tif (arguments != null) {", "+\t\tif (this.arguments != null) {", "-\t\t\tboolean used = binding == null || binding.isAbstract() || binding.isNative();", "+\t\t\tboolean used = this.binding == null || this.binding.isAbstract() || this.binding.isNative();", "-\t\t\tint length = arguments.length;", "+\t\t\tint length = this.arguments.length;", "-\t\t\t\tTypeBinding argType = binding == null ? null : binding.parameters[i];", "-\t\t\t\targuments[i].bind(scope, argType, used);", "+\t\t\t\tTypeBinding argType = this.binding == null ? null : this.binding.parameters[i];", "+\t\t\t\tthis.arguments[i].bind(this.scope, argType, used);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6fa59a33e1980b13fcdccd2c8774a91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "6c5ff7a40e06214003233124a78f91b46a0db4e6", "commitAfterChange": "abfab6e38455079c19f7f3fadcf15c77c144ade8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, \tCodeStream codeStream, boolean valueRequired)", "diff": ["-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "+\tpublic void generateCode(BlockScope currentScope, \tCodeStream codeStream, boolean valueRequired) {", "-\t\tif (initializer != null) {", "-\t\t\tinitializer.generateCode(currentScope, codeStream, valueRequired);", "+\t\tif (this.initializer != null) {", "+\t\t\tthis.initializer.generateCode(currentScope, codeStream, valueRequired);", "-\t\tint nonNullDimensionsLength = 0;", "-\t\tfor (int i = 0, max = dimensions.length; i < max; i++)", "-\t\t\tif (dimensions[i] != null) {", "-\t\t\t\tdimensions[i].generateCode(currentScope, codeStream, true);", "-\t\t\t\tnonNullDimensionsLength++;", "-\t\t\t}", "+\t\tint explicitDimCount = 0;", "+\t\tfor (int i = 0, max = this.dimensions.length; i < max; i++) {", "+\t\t\tExpression dimExpression;", "+\t\t\tif ((dimExpression = this.dimensions[i]) == null) break; // implicit dim, no further explict after this point", "+\t\t\tdimExpression.generateCode(currentScope, codeStream, true);", "+\t\t\texplicitDimCount++;", "+\t\t}", "-\t\t// Generate a sequence of bytecodes corresponding to an array allocation", "-\t\tif (this.resolvedType.dimensions() == 1) {", "+\t\t// array allocation", "+\t\tif (explicitDimCount == 1) {", "-\t\t\tcodeStream.multianewarray(this.resolvedType, nonNullDimensionsLength);", "+\t\t\tcodeStream.multianewarray(this.resolvedType, explicitDimCount);", "-", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-"]}], "num": 22666}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4cd9d6b25aa0ca1033f3b9dd6efde6b1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccf37253236eddaa4f38e88a1583d0ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void checkComment()", "signatureAfterChange": "  public void checkComment()", "diff": ["-\t\tint throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;", "-\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "-\t\t\tTypeReference typeRef = thrownExceptions[i];", "-\t\t\tif (typeRef instanceof JavadocSingleTypeReference) {", "-\t\t\t\tJavadocSingleTypeReference singleRef = (JavadocSingleTypeReference) typeRef;", "-\t\t\t\tthis.requestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "-\t\t\t} else if (typeRef instanceof JavadocQualifiedTypeReference) {", "-\t\t\t\tJavadocQualifiedTypeReference qualifiedRef = (JavadocQualifiedTypeReference) typeRef;", "-\t\t\t\tthis.requestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "+\t\tif (thrownExceptions != null) {", "+\t\t\tfor (int i = 0, max=thrownExceptions.length; i < max; i++) {", "+\t\t\t\tTypeReference typeRef = thrownExceptions[i];", "+\t\t\t\tif (typeRef instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\tJavadocSingleTypeReference singleRef = (JavadocSingleTypeReference) typeRef;", "+\t\t\t\t\tthis.requestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "+\t\t\t\t} else if (typeRef instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\tJavadocQualifiedTypeReference qualifiedRef = (JavadocQualifiedTypeReference) typeRef;", "+\t\t\t\t\tthis.requestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "+\t\t\t\t}", "-\t\tint seeTagsNbre = references == null ? 0 : references.length;", "-\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "-\t\t\tExpression reference = references[i];", "-\t\t\tacceptJavadocTypeReference(reference);", "-\t\t\tif (reference instanceof JavadocFieldReference) {", "-\t\t\t\tJavadocFieldReference fieldRef = (JavadocFieldReference) reference;", "-\t\t\t\tthis.requestor.acceptFieldReference(fieldRef.token, fieldRef.sourceStart);", "-\t\t\t\tif (fieldRef.receiver != null && !fieldRef.receiver.isThis()) {", "-\t\t\t\t\tacceptJavadocTypeReference(fieldRef.receiver);", "-\t\t\t\t}", "-\t\t\t} else if (reference instanceof JavadocMessageSend) {", "-\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) reference;", "-\t\t\t\tint argCount = messageSend.arguments == null ? 0 : messageSend.arguments.length;", "-\t\t\t\tthis.requestor.acceptMethodReference(messageSend.selector, argCount, messageSend.sourceStart);", "-\t\t\t\tthis.requestor.acceptConstructorReference(messageSend.selector, argCount, messageSend.sourceStart);", "-\t\t\t\tif (messageSend.receiver != null && !messageSend.receiver.isThis()) {", "-\t\t\t\t\tacceptJavadocTypeReference(messageSend.receiver);", "-\t\t\t\t}", "-\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "-\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "-\t\t\t\tint argCount = constructor.arguments == null ? 0 : constructor.arguments.length;", "-\t\t\t\tif (constructor.type != null) {", "-\t\t\t\t\tchar[][] compoundName = constructor.type.getParameterizedTypeName();", "-\t\t\t\t\tthis.requestor.acceptConstructorReference(compoundName[compoundName.length-1], argCount, constructor.sourceStart);", "-\t\t\t\t\tif (!constructor.type.isThis()) {", "-\t\t\t\t\t\tacceptJavadocTypeReference(constructor.type);", "+\t\tif (references != null) {", "+\t\t\tfor (int i = 0, max=references.length; i < max; i++) {", "+\t\t\t\tExpression reference = references[i];", "+\t\t\t\tacceptJavadocTypeReference(reference);", "+\t\t\t\tif (reference instanceof JavadocFieldReference) {", "+\t\t\t\t\tJavadocFieldReference fieldRef = (JavadocFieldReference) reference;", "+\t\t\t\t\tthis.requestor.acceptFieldReference(fieldRef.token, fieldRef.sourceStart);", "+\t\t\t\t\tif (fieldRef.receiver != null && !fieldRef.receiver.isThis()) {", "+\t\t\t\t\t\tacceptJavadocTypeReference(fieldRef.receiver);", "+\t\t\t\t\t}", "+\t\t\t\t} else if (reference instanceof JavadocMessageSend) {", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) reference;", "+\t\t\t\t\tint argCount = messageSend.arguments == null ? 0 : messageSend.arguments.length;", "+\t\t\t\t\tthis.requestor.acceptMethodReference(messageSend.selector, argCount, messageSend.sourceStart);", "+\t\t\t\t\tthis.requestor.acceptConstructorReference(messageSend.selector, argCount, messageSend.sourceStart);", "+\t\t\t\t\tif (messageSend.receiver != null && !messageSend.receiver.isThis()) {", "+\t\t\t\t\t\tacceptJavadocTypeReference(messageSend.receiver);", "+\t\t\t\t\t}", "+\t\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "+\t\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "+\t\t\t\t\tint argCount = constructor.arguments == null ? 0 : constructor.arguments.length;", "+\t\t\t\t\tif (constructor.type != null) {", "+\t\t\t\t\t\tchar[][] compoundName = constructor.type.getParameterizedTypeName();", "+\t\t\t\t\t\tthis.requestor.acceptConstructorReference(compoundName[compoundName.length-1], argCount, constructor.sourceStart);", "+\t\t\t\t\t\tif (!constructor.type.isThis()) {", "+\t\t\t\t\t\t\tacceptJavadocTypeReference(constructor.type);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe702d9e1f81101e60136f97ad23a949", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t\tint length = paramReferences == null ? 0 : paramReferences.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.patternLocator.match(paramReferences[i], this.nodeSet);", "+\t\tif (paramReferences != null) {", "+\t\t\tfor (int i=0, length=paramReferences.length; i < length; i++) {", "+\t\t\t\tthis.patternLocator.match(paramReferences[i], this.nodeSet);", "+\t\t\t}", "-\t\tlength = paramTypeParameters == null ? 0 : paramTypeParameters.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.patternLocator.match(paramTypeParameters[i], this.nodeSet);", "+\t\tif (paramTypeParameters != null) {", "+\t\t\tfor (int i=0, length=paramTypeParameters.length; i < length; i++) {", "+\t\t\t\tthis.patternLocator.match(paramTypeParameters[i], this.nodeSet);", "+\t\t\t}", "-\t\tlength = thrownExceptions == null ? 0 : thrownExceptions.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.patternLocator.match(thrownExceptions[i], this.nodeSet);", "+\t\tif (thrownExceptions != null) {", "+\t\t\tfor (int i=0, length=thrownExceptions.length; i < length; i++) {", "+\t\t\t\tthis.patternLocator.match(thrownExceptions[i], this.nodeSet);", "+\t\t\t}", "-\t\tlength = references == null ? 0 : references.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tExpression reference = references[i];", "-\t\t\tif (reference instanceof TypeReference) {", "-\t\t\t\tTypeReference typeRef = (TypeReference) reference;", "-\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "-\t\t\t} else if (reference instanceof JavadocFieldReference) {", "-\t\t\t\tJavadocFieldReference fieldRef = (JavadocFieldReference) reference;", "-\t\t\t\tthis.patternLocator.match(fieldRef, this.nodeSet);", "-\t\t\t\tif (fieldRef.receiver instanceof TypeReference && !fieldRef.receiver.isThis()) {", "-\t\t\t\t\tTypeReference typeRef = (TypeReference) fieldRef.receiver;", "+\t\tif (references != null) {", "+\t\t\tfor (int i=0, length=references.length; i < length; i++) {", "+\t\t\t\tExpression reference = references[i];", "+\t\t\t\tif (reference instanceof TypeReference) {", "+\t\t\t\t\tTypeReference typeRef = (TypeReference) reference;", "-\t\t\t\t}", "-\t\t\t} else if (reference instanceof JavadocMessageSend) {", "-\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) reference;", "-\t\t\t\tthis.patternLocator.match(messageSend, this.nodeSet);", "-\t\t\t\tif (messageSend.receiver instanceof TypeReference && !messageSend.receiver.isThis()) {", "-\t\t\t\t\tTypeReference typeRef = (TypeReference) messageSend.receiver;", "-\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "-\t\t\t\t}", "-\t\t\t\tif (messageSend.arguments != null) {", "-\t\t\t\t\tfor (int a=0,al=messageSend.arguments.length; a<al; a++) {", "-\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) messageSend.arguments[a];", "-\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "-\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t} else if (reference instanceof JavadocFieldReference) {", "+\t\t\t\t\tJavadocFieldReference fieldRef = (JavadocFieldReference) reference;", "+\t\t\t\t\tthis.patternLocator.match(fieldRef, this.nodeSet);", "+\t\t\t\t\tif (fieldRef.receiver instanceof TypeReference && !fieldRef.receiver.isThis()) {", "+\t\t\t\t\t\tTypeReference typeRef = (TypeReference) fieldRef.receiver;", "+\t\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t} else if (reference instanceof JavadocMessageSend) {", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) reference;", "+\t\t\t\t\tthis.patternLocator.match(messageSend, this.nodeSet);", "+\t\t\t\t\tif (messageSend.receiver instanceof TypeReference && !messageSend.receiver.isThis()) {", "+\t\t\t\t\t\tTypeReference typeRef = (TypeReference) messageSend.receiver;", "+\t\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (messageSend.arguments != null) {", "+\t\t\t\t\t\tfor (int a=0,al=messageSend.arguments.length; a<al; a++) {", "+\t\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) messageSend.arguments[a];", "+\t\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "-\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "-\t\t\t\tthis.patternLocator.match(constructor, this.nodeSet);", "-\t\t\t\tif (constructor.type != null && !constructor.type.isThis()) {", "-\t\t\t\t\tthis.patternLocator.match(constructor.type, this.nodeSet);", "-\t\t\t\t}", "-\t\t\t\tif (constructor.arguments != null) {", "-\t\t\t\t\tfor (int a=0,al=constructor.arguments.length; a<al; a++) {", "-\t\t\t\t\t\tthis.patternLocator.match(constructor.arguments[a], this.nodeSet);", "-\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) constructor.arguments[a];", "-\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "-\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "+\t\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "+\t\t\t\t\tthis.patternLocator.match(constructor, this.nodeSet);", "+\t\t\t\t\tif (constructor.type != null && !constructor.type.isThis()) {", "+\t\t\t\t\t\tthis.patternLocator.match(constructor.type, this.nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (constructor.arguments != null) {", "+\t\t\t\t\t\tfor (int a=0,al=constructor.arguments.length; a<al; a++) {", "+\t\t\t\t\t\t\tthis.patternLocator.match(constructor.arguments[a], this.nodeSet);", "+\t\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) constructor.arguments[a];", "+\t\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t\t}"]}], "num": 22812}
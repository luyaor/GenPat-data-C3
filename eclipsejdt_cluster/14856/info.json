{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "daea1ff1f61a58abb46ff64326c5fb53", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2667e89b10d4f41734cbf850f007843b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "commitAfterChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected static int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "signatureAfterChange": " protected static NullAnnotationStatus findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "diff": ["-protected static int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus) {", "+protected static NullAnnotationStatus findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus) {", "+\tTypeBinding superTypeHint = null;", "-\t\t\t\t\t\t\treturn severity;", "+\t\t\t\t\t\t\treturn NULL_ANNOTATIONS_MISMATCH;", "-\t\t\t\t\treturn 2;", "+\t\t\t\t\treturn NULL_ANNOTATIONS_MISMATCH;", "-\t\t\tif (requiredType.isParameterizedType()  && providedType.isParameterizedType()) { // TODO(stephan): handle providedType.isRaw()", "+\t\t\tTypeBinding providedSuper = providedType.findSuperTypeOriginatingFrom(requiredType);", "+\t\t\tif (providedSuper != providedType)", "+\t\t\t\tsuperTypeHint = providedSuper;", "+\t\t\tif (requiredType.isParameterizedType()  && providedSuper instanceof ParameterizedTypeBinding) { // TODO(stephan): handle providedType.isRaw()", "-\t\t\t\tTypeBinding[] providedArguments = ((ParameterizedTypeBinding) providedType).arguments;", "+\t\t\t\tTypeBinding[] providedArguments = ((ParameterizedTypeBinding) providedSuper).arguments;", "-\t\t\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(requiredArguments[i], providedArguments[i], -1));", "+\t\t\t\t\t\tNullAnnotationStatus status = findNullTypeAnnotationMismatch(requiredArguments[i], providedArguments[i], -1);", "+\t\t\t\t\t\tseverity = Math.max(severity, status.severity);", "-\t\t\t\t\t\t\treturn severity;", "+\t\t\t\t\t\t\treturn new NullAnnotationStatus(severity, superTypeHint);", "-\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(((WildcardBinding) requiredType).bound, providedType, nullStatus));", "+\t\t\t\tNullAnnotationStatus status = findNullTypeAnnotationMismatch(((WildcardBinding) requiredType).bound, providedType, nullStatus);", "+\t\t\t\tseverity = Math.max(severity, status.severity);", "-\t\t\tif (requiredEnclosing != null && providedEnclosing != null)", "-\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(requiredEnclosing, providedEnclosing, -1));", "+\t\t\tif (requiredEnclosing != null && providedEnclosing != null) {", "+\t\t\t\tNullAnnotationStatus status = findNullTypeAnnotationMismatch(requiredEnclosing, providedEnclosing, -1);", "+\t\t\t\tseverity = Math.max(severity, status.severity);", "+\t\t\t}", "-\treturn severity;", "+\tif (severity == 0)", "+\t\treturn NULL_ANNOTATIONS_OK;", "+\treturn new NullAnnotationStatus(severity, superTypeHint);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc04c5fcd5a3589c127d158133e0ffd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "e90dfab1761bccc6555735320e283aaf05372db5", "commitAfterChange": "2360be30596f096b30c40d59f0ef4f349bd446d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic static void checkAnnotationValue(TypeBinding requiredType, TypeBinding annotationType, char[] memberName, Expression memberValue, Scope scope)", "signatureAfterChange": " \t \tpublic static void checkAnnotationValue(TypeBinding requiredType, TypeBinding annotationType, char[] memberName, Expression memberValue, Scope scope)", "diff": ["+\t\tTypeBinding memberValueType = memberValue.resolvedType;", "+\t\tif (memberValueType != null) {", "+\t\t\tif (!memberValueType.isCompatibleWith(requiredType)) {", "+\t\t\t\tscope.problemReporter().typeMismatchError(memberValueType, requiredType, memberValue);", "+\t\t\t\treturn; // may allow to proceed to find more errors at once", "+\t\t\t} else {", "+\t\t\t\tscope.compilationUnitScope().recordTypeConversion(requiredType, memberValueType);", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44215e2e769886476e87e6027c59ce1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic ICompilationUnit generateFileDuringReconcile( \t\t\tICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor )", "signatureAfterChange": " \tpublic synchronized FileGenerationResult generateFileDuringReconcile( \t\t\tICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor )", "diff": ["-\tpublic ICompilationUnit generateFileDuringReconcile(", "+\tpublic synchronized FileGenerationResult generateFileDuringReconcile(", "+\t\tFileGenerationResult result = null;", "-\t\t\tworkingCopy = getWorkingCopy( ", "-\t\t\t\tparentCompilationUnit,  typeName, contents,  ", "-\t\t\t\tworkingCopyOwner, problemRequestor,  progressMonitor);", "+\t\t\tworkingCopy = getCachedWorkingCopy( parentCompilationUnit, typeName );", "-\t\t\t//", "-\t\t\t//  Update working copy's buffer with the contents of the type ", "-\t\t\t// ", "-\t\t\tupdateWorkingCopy( contents, workingCopy, workingCopyOwner, progressMonitor );", "+\t\t\tif ( workingCopy == null )", "+\t\t\t{", "+\t\t\t\t// create a new working copy", "+\t\t\t\tworkingCopy = createNewWorkingCopy(  ", "+\t\t\t\t\t\tparentCompilationUnit,  typeName, contents,  ", "+\t\t\t\t\t\tworkingCopyOwner, problemRequestor,  progressMonitor);", "+\t\t\t\tworkingCopy.reconcile(AST.JLS3, true, workingCopyOwner,", "+\t\t\t\t\t\tprogressMonitor);", "+\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), true);", "+\t\t\t}", "+\t\t\telse", "+\t\t\t{", "+", "+\t\t\t\t//", "+\t\t\t\t//  Update working copy's buffer with the contents of the type ", "+\t\t\t\t// ", "+\t\t\t\tboolean modified = updateWorkingCopy( contents, workingCopy, workingCopyOwner, progressMonitor );", "+\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), modified);", "+\t\t\t}", "-\t\t\treturn workingCopy;", "-\t\t", "+\t\t\treturn result;", "-\t\treturn workingCopy;", "+\t\treturn new FileGenerationResult((IFile)workingCopy.getResource(), true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d134ce9d13489295edb0da5058cd7f90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b057a7f41b354df00fc836971733f7e56ec9e0f7", "commitAfterChange": "ed892004e9d31324e06eb4780bfb7eecc5b91586", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "signatureAfterChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "diff": ["-\t\t\tif (onlyStaticMethods && !method.isStatic()) continue next;", "+\t\t\tif(method.isStatic()) {", "+\t\t\t\tif(receiverType.isAnonymousType()) continue next;", "+\t\t\t\t", "+\t\t\t\tif(receiverType.isMemberType() && !receiverType.isStatic()) continue next;", "+\t\t\t\t", "+\t\t\t\tif(receiverType.isLocalType()) continue next;", "+\t\t\t} else  {", "+\t\t\t\tif(onlyStaticMethods) continue next;", "+\t\t\t}", "+\t\t\trelevance += computeRelevanceForStaticOveride(method.isStatic());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1e511af6bd0e969570a88b733517d31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1fd4391b9d956e4b222e75746a12248fe673ae09", "commitAfterChange": "0ac06ace387f6f7ca79dcd41a12a6564b157c4e4", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 81, "signatureBeforeChange": "  private void processPathEntries(final int defaultSize, final ArrayList paths,  \t\t\tfinal String currentPath, String customEncoding, boolean isSourceOnly, \t\t\tboolean rejectDestinationPathOnJars)  \t\tthrows InvalidInputException", "signatureAfterChange": " public void processPathEntries(final int defaultSize, final ArrayList paths,  \t\t\tfinal String currentPath, String customEncoding, boolean isSourceOnly, \t\t\tboolean rejectDestinationPathOnJars)  \t\tthrows InvalidInputException", "diff": ["-", "-private void processPathEntries(final int defaultSize, final ArrayList paths, ", "+public void processPathEntries(final int defaultSize, final ArrayList paths, ", "-\t\t\t\t\tMain.bind(\"configure.incorrectDestinationPathEntry\", //$NON-NLS-1$ ", "-\t\t\t\t\t\tcurrentPath));\t\t\t\t", "+\t\t\t\t\tthis.bind(\"configure.incorrectDestinationPathEntry\", //$NON-NLS-1$ ", "+\t\t\t\t\t\tcurrentPath));", "+\t\t\t\tbreak;", "+\t\t\tcase readyToCloseEndingWithDestinationPath:", "+\t\t\t\tstate = rulesStart;", "+\t\t\t\t\tif (currentDestinationPath != null) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\tthis.bind(\"configure.duplicateDestinationPathEntry\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\tcurrentPath));\t", "+\t\t\t\t\t}", "+\t\t\t\tif (currentDestinationPath != null) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.accessRuleAfterDestinationPath\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\tcurrentPath));", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e83ddb5fb946307666bfdb083f6f7b69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveResourcesTests.java", "commitBeforeChange": "7a7863e26d078771aa16ec2c24b37b93343d0529", "commitAfterChange": "1c413c5bfedbd5e52b224e291c0f8a4c59fbd8ff", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void testMoveReadOnlyPackageFragment() throws CoreException", "signatureAfterChange": " public void testMoveReadOnlyPackageFragment() throws CoreException", "diff": ["+\t\tIFile xSrcFile = getFile(\"/P/src/p1/p2/p3/X.java\");", "+\t\tif (xSrcFile != null) {", "+\t\t\txSrcFile.setReadOnly(false);", "+\t\t}", "+\t\tif (pkg2 != null) {", "+\t\t\tpkg2.getResource().setReadOnly(false);", "+\t\t}", "+\t\tif (pkgSource != null) {", "+\t\t\tpkgSource.getResource().setReadOnly(false);", "+\t\t}"]}], "num": 14856}
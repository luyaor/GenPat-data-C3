{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd484c67e92a97e9557cf1521cf3514d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40e0a976df3420d1e86997ed1c7721d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 118, "signatureBeforeChange": " \tpublic void test0107() throws JavaModelException", "signatureAfterChange": " \tpublic void test0107() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"@interface A {\\n\" +", "-\t\t\t\t\"    String value() default \\\"\\\";\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"@interface Main {\\n\" +", "-\t\t\t\t\"   A child() default @A(\\\"Void\\\");\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"@Main(child=@A(\\\"\\\")) @A class X {}\\n\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 2);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tcheckSourceRange(node, \"@Main(child=@A(\\\"\\\")) @A class X {}\", contents.toCharArray());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"@interface A {\\n\" +", "+\t\t\t\"    String value() default \\\"\\\";\\n\" +", "+\t\t\t\"}\\n\" +", "+\t\t\t\"@interface Main {\\n\" +", "+\t\t\t\"   A child() default @A(\\\"Void\\\");\\n\" +", "+\t\t\t\"}\\n\" +", "+\t\t\t\"@Main(child=@A(\\\"\\\")) @A class X {}\\n\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 2);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tcheckSourceRange(node, \"@Main(child=@A(\\\"\\\")) @A class X {}\", contents.toCharArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81e14e2a7a8dd375b65ea8c3cb37926", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 109, "signatureBeforeChange": " \tpublic void test0098() throws JavaModelException", "signatureAfterChange": " \tpublic void test0098() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"class X {\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\tList modifiers = typeDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 0, modifiers.size());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"class X {\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\tList modifiers = typeDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 0, modifiers.size());"]}], "num": 41462}
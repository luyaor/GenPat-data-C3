{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8317fe88312181bd4384b2f2020ff05", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e4f3923afe6e5e54fb3e84f97c88a39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " private synchronized static Object getTargetAsExternalFile(IPath path, boolean checkResourceExistence)", "signatureAfterChange": " public static Object getExternalTarget(IPath path, boolean checkResourceExistence)", "diff": ["-private synchronized static Object getTargetAsExternalFile(IPath path, boolean checkResourceExistence) {", "+}", "+public static Object getExternalTarget(IPath path, boolean checkResourceExistence) {", "+\tif (path == null)", "+\t\treturn null;", "+\tExternalFoldersManager externalFoldersManager = JavaModelManager.getExternalManager();", "+\tObject linkedFolder = externalFoldersManager.getFolder(path);", "+\tif (linkedFolder != null) {", "+\t\tif (checkResourceExistence) {", "+\t\t\t// check if external folder is present", "+\t\t\tFile externalFile = new File(path.toOSString());", "+\t\t\tif (!externalFile.isDirectory()) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\treturn linkedFolder;", "+\t}", "-\t} else if (existingExternalFiles.contains(externalFile)) {", "+\t} else if (existingExternalFilesContains(externalFile)) {", "-\t\tif (externalFile.exists()) {", "+\t\tif (externalFile.isFile()) { // isFile() checks for existence (it returns false if a directory)", "-\t\t\texistingExternalFiles.add(externalFile);", "+\t\t\texistingExternalFilesAdd(externalFile);", "+\t\t} else if (externalFile.isDirectory()) {", "+\t\t\treturn externalFoldersManager.addFolder(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caa36b52cf66d01e7efa784c70722d44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/ResourceChangedListener.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": " \t \tpublic void resourceChanged(IResourceChangeEvent event)", "diff": ["+\t", "-\t\tif ( event.getType() == IResourceChangeEvent.POST_CHANGE )", "+\t\tif ( event.getType() == IResourceChangeEvent.PRE_BUILD )", "-\t\t\t{", "-\t\t\t\tevent.getDelta().accept( new Visitor() );", "+\t\t\t{ ", "+\t\t\t\tevent.getDelta().accept( new PreBuildVisitor() );", "+\t\telse if ( event.getType() == IResourceChangeEvent.PRE_CLOSE )", "+\t\t{", "+\t\t\tIProject p = (IProject)event.getResource();", "+\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( p );", "+\t\t\tgfm.projectClosed();", "+\t\t}", "+\t\telse if ( event.getType() == IResourceChangeEvent.PRE_DELETE )", "+\t\t{", "+\t\t\t// TODO:  need to update projectDeleted() to delete the generated_src folder", "+\t\t\t// in an async thread.  The resource tree is locked here.", "+\t\t\tIProject p = (IProject)event.getResource();", "+\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( p );", "+\t\t\tgfm.projectDeleted();", "+\t\t}"]}], "num": 26639}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ebdd974acfcb24a4258e65cbadfc523d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56cb82728fecc3298399dd95322abeee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "e0b93cd9388950bd51950e07247cdecc9e3263df", "commitAfterChange": "265ec26aa6d2cbdb7df581eef4b2a30df572f94f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void formatClassBodyDeclarations(ASTNode[] nodes)", "signatureAfterChange": " \tprivate void formatClassBodyDeclarations(ASTNode[] nodes)", "diff": ["-\t\t", "+\t\tthis.scribe.lastNumberOfNewLines = 1;", "-\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart);", "+\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart, i == 0);", "+\t\t\t\t\t\t\tint newLineBeforeChunk = isChunkStart ? this.preferences.blank_lines_before_new_chunk : 0;", "+\t\t\t\t\t\t\tif (newLineBeforeChunk > 0 && i != 0) {", "+\t\t\t\t\t\t\t\tthis.scribe.printEmptyLines(newLineBeforeChunk);", "+\t\t\t\t\t\t\t} else if (i == 0) {", "+\t\t\t\t\t\t\t\tint newLinesBeforeFirstClassBodyDeclaration = this.preferences.blank_lines_before_first_class_body_declaration;", "+\t\t\t\t\t\t\t\tif (newLinesBeforeFirstClassBodyDeclaration > 0) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printEmptyLines(newLinesBeforeFirstClassBodyDeclaration);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tformat(field, this, null, isChunkStart);", "+\t\t\t\t\t\t\tformat(field, this, null, isChunkStart, i == 0);", "-\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, null, isChunkStart);", "+\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, null, isChunkStart, i == 0);", "-\t\t\t\t\t\tformat((TypeDeclaration)member, null, isChunkStart);", "+\t\t\t\t\t\tformat((TypeDeclaration)member, null, isChunkStart, i == 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "599499ea0bf21b03c62f72bce5a496e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "e0b93cd9388950bd51950e07247cdecc9e3263df", "commitAfterChange": "265ec26aa6d2cbdb7df581eef4b2a30df572f94f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tprivate void formatTypeMembers(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \tprivate void formatTypeMembers(TypeDeclaration typeDeclaration)", "diff": ["-\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.staticInitializerScope, isChunkStart);", "+\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.staticInitializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.initializerScope, isChunkStart);", "+\t\t\t\t\t\t\t\tformat(multiField, this, typeDeclaration.initializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\t\tif (newLineBeforeChunk > 0) {", "+\t\t\t\t\t\t\tif (newLineBeforeChunk > 0 && i != 0) {", "+\t\t\t\t\t\t\t} else if (i == 0) {", "+\t\t\t\t\t\t\t\tint newLinesBeforeFirstClassBodyDeclaration = this.preferences.blank_lines_before_first_class_body_declaration;", "+\t\t\t\t\t\t\t\tif (newLinesBeforeFirstClassBodyDeclaration > 0) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printEmptyLines(newLinesBeforeFirstClassBodyDeclaration);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.staticInitializerScope, isChunkStart);", "+\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.staticInitializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.initializerScope, isChunkStart);", "+\t\t\t\t\t\t\t\tformat(field, this, typeDeclaration.initializerScope, isChunkStart, i == 0);", "-\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, typeDeclaration.scope, isChunkStart);", "+\t\t\t\t\t\tformat((AbstractMethodDeclaration) member, typeDeclaration.scope, isChunkStart, i == 0);", "-\t\t\t\t\t\tformat((TypeDeclaration)member, typeDeclaration.scope, isChunkStart);", "+\t\t\t\t\t\tformat((TypeDeclaration)member, typeDeclaration.scope, isChunkStart, i == 0);"]}], "num": 43124}
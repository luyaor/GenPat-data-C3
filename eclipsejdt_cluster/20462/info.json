{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "057a2827647c589e1e09e929bfc8ab14", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2c1211a960db2c03f336d43efc68be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "commitAfterChange": "6ca7b05ef1b6b0934e3b4a61271beb56d55912f0", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tIBinding resolveImport(ImportDeclaration importDeclaration)", "signatureAfterChange": " \tIBinding resolveImport(ImportDeclaration importDeclaration)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(importDeclaration);", "-\t\tif (node instanceof ImportReference) {", "-\t\t\tImportReference importReference = (ImportReference) node;", "-\t\t\tif (importReference.onDemand) {", "-\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));", "-\t\t\t\tif (binding != null) {", "-\t\t\t\t\tif (binding.bindingType() == BindingIds.PACKAGE) {", "-\t\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "-\t\t\t\t\t\tif (packageBinding == null) {", "-\t\t\t\t\t\t\treturn null;", "+\t\ttry {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(importDeclaration);", "+\t\t\tif (node instanceof ImportReference) {", "+\t\t\t\tImportReference importReference = (ImportReference) node;", "+\t\t\t\tif (importReference.onDemand) {", "+\t\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));", "+\t\t\t\t\tif (binding != null) {", "+\t\t\t\t\t\tif (binding.bindingType() == BindingIds.PACKAGE) {", "+\t\t\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "+\t\t\t\t\t\t\tif (packageBinding == null) {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn packageBinding;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// if it is not a package, it has to be a type", "+\t\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "+\t\t\t\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn typeBinding;", "-\t\t\t\t\t\treturn packageBinding;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// if it is not a package, it has to be a type", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tBinding binding = this.scope.getTypeOrPackage(importReference.tokens);", "+\t\t\t\t\tif (binding != null && binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "-\t\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn typeBinding;", "+\t\t\t\t\t\treturn typeBinding == null ? null : typeBinding;", "-\t\t\t} else {", "-\t\t\t\tBinding binding = this.scope.getTypeOrPackage(importReference.tokens);", "-\t\t\t\tif (binding != null && binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "-\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "-\t\t\t\t\treturn typeBinding == null ? null : typeBinding;", "-\t\t\t\t}", "+\t\t} catch(AbortCompilation e) {", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852c2f62f957ea6f86fe72827c84da89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "67be753fec1b8f88653e28d3d4d4837dd29cdece", "commitAfterChange": "c76b87d837ed14384819cb84439501329f23edce", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r \tprivate IBinding resolveNameForMessageSend(Name name, AstNode node)", "signatureAfterChange": "\r \tIBinding resolveImport(ImportDeclaration importDeclaration)", "diff": ["-\tprivate IBinding resolveNameForMessageSend(Name name, AstNode node) {\r", "-\t\tMessageSend messageSend = (MessageSend) node;\r", "-\t\tif (name.isSimpleName()) {\r", "-\t\t\t// this can be either the qualifier or the method invocation name\r", "-\t\t\tSimpleName simpleName = (SimpleName) name;\r", "-\t\t\tif (simpleName.getIdentifier().equals(new String(messageSend.selector))) {\r", "-\t\t\t\treturn this.getMethodBinding(messageSend.binding); \r", "-\t\t\t} else {\r", "-\t\t\t\t// this is the qualifier\r", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression receiver = messageSend.receiver;\r", "-\t\t\t\tif (receiver instanceof SingleNameReference) {\r", "-\t\t\t\t\tSingleNameReference singleNameReference = (SingleNameReference) receiver;\r", "-\t\t\t\t\tif (singleNameReference.isTypeReference()) {\r", "-\t\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t// this is a variable or a field\r", "-\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding)singleNameReference.binding);\t\t\t\t\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\t// this is the qualifier\r", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression receiver = messageSend.receiver;\r", "-\t\t\tif (receiver instanceof QualifiedNameReference) {\r", "-\t\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) receiver;\r", "-\t\t\r", "-\t\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "-\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\t// this is a variable or a field\r", "-\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.binding);\t\t\t\t\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn super.resolveName(name);\r", "-\t}\r", "+\t */\r", "+\tIBinding resolveImport(ImportDeclaration importDeclaration) {\r", "+\t\tScope scope = retrieveCompilationUnitScope(importDeclaration);\r", "+\t\tAstNode node = (AstNode) this.newAstToOldAst.get(importDeclaration);\r", "+\t\tif (node instanceof ImportReference) {\r", "+\t\t\tImportReference importReference = (ImportReference) node;\r", "+\t\t\tif (importReference.onDemand) {\r", "+\t\t\t\tBinding binding = scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));\r", "+\t\t\t\tif ((binding != null) && (binding.isValidBinding())) {\r", "+\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);\r", "+\t\t\t\t\tthis.bindingsToAstNodes.put(packageBinding, importDeclaration);\r", "+\t\t\t\t\treturn packageBinding;\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tBinding binding = scope.getTypeOrPackage(importReference.tokens);\r", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {\r", "+\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);\r", "+\t\t\t\t\tthis.bindingsToAstNodes.put(typeBinding, importDeclaration);\r", "+\t\t\t\t\treturn typeBinding;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn super.resolveImport(importDeclaration);\r", "+\t}\r"]}], "num": 20462}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "176805303a52b9033cf679fb3e876fdc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aa00f71b3efd1ea35890837df824e69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "commitAfterChange": "bd2d6cba91ea60af9a4818216d0ebbc8f0ef4bb2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " boolean areMethodsCompatible(MethodBinding one, MethodBinding two)", "signatureAfterChange": " boolean areMethodsCompatible(MethodBinding one, MethodBinding two)", "diff": ["-\ttwo = two.original();", "+\ttwo = one.findOriginalInheritedMethod(two);", "-\tTypeBinding match = one.declaringClass.findSuperTypeOriginatingFrom(two.declaringClass);", "-\tif (!(match instanceof ReferenceBinding))", "+\tif (two == null)", "-", "-\tif (match != two.declaringClass) {", "-\t\tMethodBinding[] superMethods = ((ReferenceBinding) match).getMethods(two.selector);", "-\t\tfor (int i = 0, length = superMethods.length; i < length; i++)", "-\t\t\tif (superMethods[i].original() == two)", "-\t\t\t\treturn isParameterSubsignature(one, superMethods[i]);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d77daddfab028f649296bb960bc0aab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "commitAfterChange": "bd2d6cba91ea60af9a4818216d0ebbc8f0ef4bb2", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\t\tTypeBinding superType = original.declaringClass.findSuperTypeOriginatingFrom(original2.declaringClass.erasure());", "-\t\t\t\t\t\tif (superType == null)", "+", "+\t\t\t\t\t\toriginal2 = original.findOriginalInheritedMethod(original2);", "+\t\t\t\t\t\tif (original2 == null)", "-\t\t\t\t\t\t\tif (original2.declaringClass != superType) {", "-\t\t\t\t\t\t\t\t// must find inherited method with the same substituted variables", "-\t\t\t\t\t\t\t\tMethodBinding[] superMethods = ((ReferenceBinding) superType).getMethods(original2.selector, argumentTypes.length);", "-\t\t\t\t\t\t\t\tfor (int m = 0, l = superMethods.length; m < l; m++) {", "-\t\t\t\t\t\t\t\t\tif (superMethods[m].original() == original2) {", "-\t\t\t\t\t\t\t\t\t\toriginal2 = superMethods[m];", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a44907c48e8a26038f09bea2179d108e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "45a4564880a2dc68bab13a8cd21e316c500cb042", "commitAfterChange": "66abc385db66fdca41f9fe3a5bc9d59e168597c8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod)", "signatureAfterChange": " public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod)", "diff": ["-\tif (!couldMethodOverride(method, inheritedMethod))", "-\t\treturn false;", "-", "-\t// need to switch back to the original if the method is from a ParameterizedType", "-\tif (method.declaringClass.isParameterizedType())", "-\t\tmethod = method.original();", "-", "-\tinheritedMethod = inheritedMethod.original();", "-\tTypeBinding match = method.declaringClass.findSuperTypeOriginatingFrom(inheritedMethod.declaringClass);", "-\tif (!(match instanceof ReferenceBinding))", "-\t\treturn false; // method's declaringClass does not inherit from inheritedMethod's ", "-", "-\tif (match != inheritedMethod.declaringClass) {", "-\t\tMethodBinding[] superMethods = ((ReferenceBinding) match).getMethods(inheritedMethod.selector);", "-\t\tfor (int i = 0, length = superMethods.length; i < length; i++)", "-\t\t\tif (superMethods[i].original() == inheritedMethod)", "-\t\t\t\treturn isParameterSubsignature(method, superMethods[i]);", "-\t}", "-", "-\treturn isParameterSubsignature(method, inheritedMethod);", "+\treturn couldMethodOverride(method, inheritedMethod) && areMethodsCompatible(method, inheritedMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de024d6e1e33b574f62e9fe1cefad5e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "commitAfterChange": "bd2d6cba91ea60af9a4818216d0ebbc8f0ef4bb2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public boolean isMethodSubsignature(MethodBinding method, MethodBinding inheritedMethod)", "signatureAfterChange": " public boolean isMethodSubsignature(MethodBinding method, MethodBinding inheritedMethod)", "diff": ["-\tinheritedMethod = inheritedMethod.original();", "-\tTypeBinding match = method.declaringClass.findSuperTypeOriginatingFrom(inheritedMethod.declaringClass);", "-\tif ((match instanceof ReferenceBinding) && match != inheritedMethod.declaringClass) {", "-\t\tMethodBinding[] superMethods = ((ReferenceBinding) match).getMethods(inheritedMethod.selector);", "-\t\tfor (int i = 0, length = superMethods.length; i < length; i++)", "-\t\t\tif (superMethods[i].original() == inheritedMethod.original())", "-\t\t\t\treturn isParameterSubsignature(method, superMethods[i]);", "-\t}", "-", "-\treturn isParameterSubsignature(method, inheritedMethod);", "+\tMethodBinding inheritedOriginal = method.findOriginalInheritedMethod(inheritedMethod);", "+\treturn isParameterSubsignature(method, inheritedOriginal == null ? inheritedMethod : inheritedOriginal);"]}], "num": 48513}
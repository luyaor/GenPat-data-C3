{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4f2599ddc4a89fd7c46a1635ac96ffd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2aeadbd281e4d28c5c9ff1ab37fe33a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic void test112()", "signatureAfterChange": " \tpublic void test112()", "diff": ["-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4937fc432b4a74c4d555e7f25cbf7acb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocFieldCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void test007() throws JavaModelException", "signatureAfterChange": "  public void test007() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"code[JAVADOC_INLINE_TAG]{{@code }, null, null, code, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"literal[JAVADOC_INLINE_TAG]{{@literal }, null, null, literal, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"code[JAVADOC_INLINE_TAG]{{@code}, null, null, code, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"literal[JAVADOC_INLINE_TAG]{{@literal}, null, null, literal, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68869a628429c59791e47c2971732e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 834, "methodNumberAfterChange": 834, "signatureBeforeChange": " public void test828()", "signatureAfterChange": " public void test828()", "diff": ["-\t\t\"Type safety: Transformable is a raw type. References to generic type Transformable<T> should be parameterized\\n\" + ", "+\t\t\"Transformable is a raw type. References to generic type Transformable<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "+\t\t\"Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "-\t\t\"Type safety: Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "+\t\t\"Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "-\t\t\"Type safety: Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "+\t\t\"Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "-\t\t\"Type safety: Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "+\t\t\"Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "-\t\t\"Type safety: Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "+\t\t\"Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e7d5eaf96ff5e36c9a63e937f41df8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 388, "signatureBeforeChange": " \tpublic void test384()", "signatureAfterChange": " \tpublic void test384()", "diff": ["-\t\t\t\t\"\tClass<? extends String> foo() { return null; }\\n\" + ", "-\t\t\t\t\"\tClass<? extends String>[] foo2() { return null; }\\n\" + ", "+\t\t\t\t\"\t@Override Class<? extends String> foo() { return null; }\\n\" + ", "+\t\t\t\t\"\t@Override Class<? extends String>[] foo2() { return null; }\\n\" + ", "-\t\t\t\"\tClass<? extends String> foo() { return null; }\\n\" + ", "-\t\t\t\"\t                        ^^^^^\\n\" + ", "+\t\t\t\"\t@Override Class<? extends String> foo() { return null; }\\n\" + ", "+\t\t\t\"\t                                  ^^^^^\\n\" + ", "-\t\t\t\"\tClass<? extends String>[] foo2() { return null; }\\n\" + ", "-\t\t\t\"\t                          ^^^^^^\\n\" + ", "+\t\t\t\"\t@Override Class<? extends String>[] foo2() { return null; }\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a242c57652a786d0d57505bc58c4606c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void test010()", "signatureAfterChange": " public void test010()", "diff": ["-\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     3  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "-\t\t\"     5  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"     3  ldc <String \\\"SUCCESS\\\"> [22]\\n\" + ", "+\t\t\"     5  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    12  ldc <String \\\"SHOULDN\\'T BE GENERATED\\\"> [31]\\n\" + ", "-\t\t\"    14  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    12  ldc <String \\\"SHOULDN\\'T BE GENERATED\\\"> [30]\\n\" + ", "+\t\t\"    14  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aed62a16ffe5417d15073390a47d52b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void test034()", "signatureAfterChange": " public void test034()", "diff": ["-\t\t\"     0  new java.util.ArrayList [17]\\n\" + ", "+\t\t\"     0  new java.util.ArrayList [16]\\n\" + ", "-\t\t\"     8  new java.util.ArrayList [17]\\n\" + ", "+\t\t\"     8  new java.util.ArrayList [16]\\n\" + ", "-\t\t\"    16  new java.util.ArrayList [17]\\n\" + ", "+\t\t\"    16  new java.util.ArrayList [16]\\n\" + ", "-\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [24]\\n\" + ", "-\t\t\"    31  ldc <String \\\"SUCCESS\\\"> [26]\\n\" + ", "-\t\t\"    33  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [32]\\n\" + ", "+\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [19]\\n\" + ", "+\t\t\"    31  ldc <String \\\"SUCCESS\\\"> [25]\\n\" + ", "+\t\t\"    33  invokevirtual java.io.PrintStream.println(java.lang.String) : void [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4301c15273336d28be2460ad5a80f20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "a4c3ac4c4476b0535c9f4bcee41fc3bc1a1adef9", "commitAfterChange": "67766e5b27ea79987add5b8cee1657ec3cbfbedb", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void test101()", "signatureAfterChange": " \tpublic void test101()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\t\"\tnew X().foo(1);\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\tnew X().foo(1);\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tnew X().foo(new Integer(1));\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\"\tnew X().foo(new Integer(1));\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 7)\\r\\n\" + ", "-\t\t\t\"\tnew X().foo(1, new Integer(1));\\r\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\"\tnew X().foo(1, new Integer(1));\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d451043b4291721f8296c1df17c737fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void test077()", "signatureAfterChange": " \tpublic void test077()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa45a25b836f6c10341a5fd148c6a27c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"     8  invokevirtual long[].clone() : java.lang.Object  [27]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.println(java.lang.Object) : void  [33]\\n\" + ", "-\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     8  invokevirtual long[].clone() : java.lang.Object [22]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [28]\\n\" + ", "+\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    18  invokevirtual long[].clone() : java.lang.Object  [27]\\n\" + ", "-\t\t\t\"    21  invokevirtual java.io.PrintStream.println(java.lang.Object) : void  [33]\\n\" + ", "+\t\t\t\"    18  invokevirtual long[].clone() : java.lang.Object [22]\\n\" + ", "+\t\t\t\"    21  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [28]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fad151206c5eccd475c3dd32219f1705", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "  \tpublic void test048()", "signatureAfterChange": "  \tpublic void test048()", "diff": ["-\t\t\t\"    14  astore_3 [local_3]\\n\" + ", "+\t\t\t\"    14  astore_3\\n\" + ", "-\t\t\t\"    18  aload_3 [local_3]\\n\" + ", "+\t\t\t\"    18  aload_3\\n\" + ", "-\t\t\t\"    20  astore_2 [local_2]\\n\" + ", "+\t\t\t\"    20  astore_2\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 30] local: bool index: 0 type: Z\\n\" + ", "-\t\t\t\"        [pc: 11, pc: 14] local: j index: 1 type: I\\n\" + ", "-\t\t\t\"        [pc: 23, pc: 30] local: j index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 30] local: bool index: 0 type: boolean\\n\" + ", "+\t\t\t\"        [pc: 11, pc: 14] local: j index: 1 type: int\\n\" + ", "+\t\t\t\"        [pc: 23, pc: 30] local: j index: 1 type: int\\n\";"]}], "num": 8028}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45cbb829dcc9912d09125a0973ab06b3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20e1cde7e6e02347cc9cedcd7c415476", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b031afa5d276b867791e1b801c0ddbbd905837a2", "commitAfterChange": "af60458069f14dd1b42612d075df4c51d6608d2d", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": " \tpublic void test085()", "signatureAfterChange": " \tpublic void test085()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\":", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in Parent.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tstatic void staticCase1(Collection c) {}\\n\" + ", "+\t\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in Parent.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tvoid instanceCase1(Collection c) {}\\n\" + ", "+\t\t\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in Parent.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tstatic void staticCase1(Collection<String> c) {}\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method staticCase1(Collection<String>) of type Child has the same erasure as staticCase1(Collection) of type Parent but does not hide it\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in Parent.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tstatic void staticCase2(Collection c) {}\\n\" + ", "+\t\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in Parent.java (at line 11)\\n\" + ", "+\t\t\t\t\"\tvoid instanceCase1(Collection<String> c) {}\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method instanceCase1(Collection<String>) of type Child has the same erasure as instanceCase1(Collection) of type Parent but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. WARNING in Parent.java (at line 12)\\n\" + ", "+\t\t\t\t\"\t@Override void instanceCase2(Collection c) {}\\n\" + ", "+\t\t\t\t\"\t                             ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432281839221c1aa9c236395e8af91d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "bb670e5ec8185e24981d836127d58e53e56c1ba8", "commitAfterChange": "83a5df02089ecb5f7e6df978c59083c15170780c", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " \tpublic void test0178()", "signatureAfterChange": " \tpublic void test0178()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\tif (t instanceof X<T>) {\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against parameterized type X<T>. Use instead its raw form X since generic type information will be erased at runtime\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\t} else if (t instanceof X<String>) {\\n\" +", "-\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against parameterized type X<String>. Use instead its raw form X since generic type information will be erased at runtime\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\"\t} else \tif (t instanceof T) {\\n\" +", "-\t\t\t\"\t       \t    ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against type parameter T. Use instead its erasure Object since generic type information will be erased at runtime\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (t instanceof X<T>) {\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type X<T>. Use instead its raw form X since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t} else if (t instanceof X<String>) {\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type X<String>. Use instead its raw form X since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\t} else \tif (t instanceof T) {\\n\" + ", "+\t\t\t\"\t       \t    ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against type parameter T. Use instead its erasure Object since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\t} else if (t instanceof X) {\\n\" + ", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df144f512f0561cbac1703fe237290e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e2422311047b85902980920dda1eeedf124d520c", "commitAfterChange": "c107fdebcaaafcbea0a28f68e9b229afba9f7c4f", "methodNumberBeforeChange": 1375, "methodNumberAfterChange": 1375, "signatureBeforeChange": " public void test1344() throws Exception", "signatureAfterChange": " public void test1344() throws Exception", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\t\"\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tpublic class X<T> extends Adapter {\\n\" + ", "+\t\t\t\"\t                          ^^^^^^^\\n\" + ", "+\t\t\t\"Adapter is a raw type. References to generic type Adapter<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <V> X.Setter makeSetter() {\\n\" + ", "+\t\t\t\"\t                    ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method makeSetter() of type X<T> has the same erasure as makeSetter() of type Adapter but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn new X().new Setter() {};\\n\" + ", "+\t\t\t\"\t                   ^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tList<Adapter.Setter> l = new ArrayList<X.Setter>();\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^\\n\" + ", "+\t\t\t\"Adapter.Setter is a raw type. References to generic type Adapter<T>.Setter<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1028062fff30735323b7fac4daaf3c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "02d4f1049999a6639faf6572ec12176fbdb0f122", "commitAfterChange": "fecb7356870e11bfa0606dab85da0b88f89888ac", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void testBug429490()", "signatureAfterChange": " public void testBug429490()", "diff": ["-\trunNegativeTest(", "+\trunConformTest(", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in Junk11.java (at line 5)\\n\" + ", "-\t\t\"\tpublic void invalidated(Observable observable);\\n\" + ", "-\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "-\t\t\"Junk11.Observable is a raw type. References to generic type Junk11.Observable<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in Junk11.java (at line 19)\\n\" + ", "-\t\t\"\tpublic void invalidated(Observable o) {throw new RuntimeException();}\\n\" + ", "-\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "-\t\t\"Junk11.Observable is a raw type. References to generic type Junk11.Observable<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in Junk11.java (at line 21)\\n\" + ", "-\t\t\"\taddListener(null, null, (o) -> {throw new RuntimeException();});\\n\" + ", "-\t\t\"\t^^^^^^^^^^^\\n\" + ", "-\t\t\"The method addListener(Junk11.ExpressionHelper<Object>, Junk11.ObservableValue<Object>, Junk11.InvalidationListener) is ambiguous for the type Junk11\\n\" +", "-\t\t\"----------\\n\");", "+\t\t});", "+//\tTODO: spec'd error:", "+//\t\t\t\"----------\\n\" + ", "+//\t\t\t\"1. WARNING in Junk11.java (at line 5)\\n\" + ", "+//\t\t\t\"\tpublic void invalidated(Observable observable);\\n\" + ", "+//\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+//\t\t\t\"Junk11.Observable is a raw type. References to generic type Junk11.Observable<T> should be parameterized\\n\" + ", "+//\t\t\t\"----------\\n\" + ", "+//\t\t\t\"2. WARNING in Junk11.java (at line 19)\\n\" + ", "+//\t\t\t\"\tpublic void invalidated(Observable o) {throw new RuntimeException();}\\n\" + ", "+//\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+//\t\t\t\"Junk11.Observable is a raw type. References to generic type Junk11.Observable<T> should be parameterized\\n\" + ", "+//\t\t\t\"----------\\n\" + ", "+//\t\t\t\"3. ERROR in Junk11.java (at line 21)\\n\" + ", "+//\t\t\t\"\taddListener(null, null, (o) -> {throw new RuntimeException();});\\n\" + ", "+//\t\t\t\"\t^^^^^^^^^^^\\n\" + ", "+//\t\t\t\"The method addListener(Junk11.ExpressionHelper<Object>, Junk11.ObservableValue<Object>, Junk11.InvalidationListener) is ambiguous for the type Junk11\\n\" +", "+//\t\t\t\"----------\\n\";"]}], "num": 10448}
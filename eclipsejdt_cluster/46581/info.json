{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b4c36492a7435e5bed74a0efab14e98", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1e9953b40c12cf34bd708a2ee0fde5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r private void findMethods(\r \tchar[] selector,\r \tTypeBinding[] argTypes,\r \tReferenceBinding receiverType,\r \tScope scope,\r \tObjectVector methodsFound,\r \tboolean onlyStaticMethods,\r \tboolean exactMatch)", "signatureAfterChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tInvocationSite invocationSite)", "diff": ["-}\r", "-private void findMethods(\r", "-\tchar[] selector,\r", "-\tTypeBinding[] argTypes,\r", "-\tReferenceBinding receiverType,\r", "-\tScope scope,\r", "-\tObjectVector methodsFound,\r", "-\tboolean onlyStaticMethods,\r", "-\tboolean exactMatch) {\r", "-\tif (selector == null) return;\r", "-\tReferenceBinding currentType = receiverType;\r", "-\tif (currentType.isInterface()) {\r", "-\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "-\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\tint lastPosition = 0;\r", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\r", "-\t\t\t\t\tcurrentType = interfaces[j];\r", "-\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "-\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "-\t\t\t\t\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "-\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "-\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\tcurrentType = scope.getJavaLangObject();\r", "-\twhile (currentType != null) {\r", "-\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "-\t\tcurrentType = currentType.superclass();\r", "-}\r", "+\tprivate void findMethods(\r", "+\t\tchar[] selector,\r", "+\t\tTypeBinding[] argTypes,\r", "+\t\tReferenceBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tObjectVector methodsFound,\r", "+\t\tboolean onlyStaticMethods,\r", "+\t\tboolean exactMatch,\r", "+\t\tInvocationSite invocationSite) {\r", "+\t\tif (selector == null)\r", "+\t\t\treturn;\r", "+\t\tReferenceBinding currentType = receiverType;\r", "+\t\tif (currentType.isInterface()) {\r", "+\t\t\tfindMethods(\r", "+\t\t\t\tselector,\r", "+\t\t\t\targTypes,\r", "+\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\tscope,\r", "+\t\t\t\tmethodsFound,\r", "+\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\texactMatch,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\tinvocationSite);\r", "+\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\t\tint lastPosition = 0;\r", "+\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "+\t\t\t\t\t\tcurrentType = interfaces[j];\r", "+\t\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) {\r", "+\t\t\t\t\t\t\t// if interface as not already been visited\r", "+\t\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "+\r", "+\t\t\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\t\t\tselector,\r", "+\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\t\t\t\texactMatch,\r", "+\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\tinvocationSite);\r", "+\r", "+\t\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "+\t\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\t\tlastPosition);\r", "+\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t// bit reinitialization\r", "+\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tcurrentType = scope.getJavaLangObject();\r", "+\t\t}\r", "+\r", "+\t\twhile (currentType != null) {\r", "+\t\t\tfindMethods(\r", "+\t\t\t\tselector,\r", "+\t\t\t\targTypes,\r", "+\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\tscope,\r", "+\t\t\t\tmethodsFound,\r", "+\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\texactMatch,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\tinvocationSite);\r", "+\t\t\tcurrentType = currentType.superclass();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f61b07c28f2b621d1021bd04ee6ae97f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "dfc3b8264596f4754baac29eef1af815f182c4f3", "commitAfterChange": "db0143bfca2398448195a62173050bd24d4fcb31", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r private void findMethods(\r \tchar[] selector,\r \tTypeBinding[] argTypes,\r \tReferenceBinding receiverType,\r \tScope scope,\r \tObjectVector methodsFound,\r \tboolean onlyStaticMethods,\r \tboolean exactMatch)", "signatureAfterChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tInvocationSite invocationSite)", "diff": ["-}\r", "-private void findMethods(\r", "-\tchar[] selector,\r", "-\tTypeBinding[] argTypes,\r", "-\tReferenceBinding receiverType,\r", "-\tScope scope,\r", "-\tObjectVector methodsFound,\r", "-\tboolean onlyStaticMethods,\r", "-\tboolean exactMatch) {\r", "-\tif (selector == null) return;\r", "-\tReferenceBinding currentType = receiverType;\r", "-\tif (currentType.isInterface()) {\r", "-\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "-\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\tint lastPosition = 0;\r", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\r", "-\t\t\t\t\tcurrentType = interfaces[j];\r", "-\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "-\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "-\t\t\t\t\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "-\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "-\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\tcurrentType = scope.getJavaLangObject();\r", "-\twhile (currentType != null) {\r", "-\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "-\t\tcurrentType = currentType.superclass();\r", "-}\r", "+\tprivate void findMethods(\r", "+\t\tchar[] selector,\r", "+\t\tTypeBinding[] argTypes,\r", "+\t\tReferenceBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tObjectVector methodsFound,\r", "+\t\tboolean onlyStaticMethods,\r", "+\t\tboolean exactMatch,\r", "+\t\tInvocationSite invocationSite) {\r", "+\t\tif (selector == null)\r", "+\t\t\treturn;\r", "+\t\tReferenceBinding currentType = receiverType;\r", "+\t\tif (currentType.isInterface()) {\r", "+\t\t\tfindMethods(\r", "+\t\t\t\tselector,\r", "+\t\t\t\targTypes,\r", "+\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\tscope,\r", "+\t\t\t\tmethodsFound,\r", "+\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\texactMatch,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\tinvocationSite);\r", "+\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\t\tint lastPosition = 0;\r", "+\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "+\t\t\t\t\t\tcurrentType = interfaces[j];\r", "+\t\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) {\r", "+\t\t\t\t\t\t\t// if interface as not already been visited\r", "+\t\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "+\r", "+\t\t\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\t\t\tselector,\r", "+\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\t\t\t\texactMatch,\r", "+\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\tinvocationSite);\r", "+\r", "+\t\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "+\t\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\t\tlastPosition);\r", "+\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t// bit reinitialization\r", "+\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tcurrentType = scope.getJavaLangObject();\r", "+\t\t}\r", "+\r", "+\t\twhile (currentType != null) {\r", "+\t\t\tfindMethods(\r", "+\t\t\t\tselector,\r", "+\t\t\t\targTypes,\r", "+\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\tscope,\r", "+\t\t\t\tmethodsFound,\r", "+\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\texactMatch,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\tinvocationSite);\r", "+\t\t\tcurrentType = currentType.superclass();\r"]}], "num": 46581}
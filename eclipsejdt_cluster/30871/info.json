{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9741115bb2ea6e9c546ea222f4244b3", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89e16726a74fc496f2c2f77424e7b68d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "0ee327f784f1f4e34e68a84648fe26304fce751c", "commitAfterChange": "5b5d83d3544b223e577e7fddd59f42874f12eb50", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t\tpublic void logOptions(Map options)", "signatureAfterChange": " \t\tpublic void logOptions(Map options)", "diff": ["-\t\t\t\tfinal Set keySet = options.keySet();", "-\t\t\t\tObject[] keys = keySet.toArray();", "-\t\t\t\tArrays.sort(keys);", "-\t\t\t\tfor (int i = 0, max = keys.length; i < max; i++) {", "-\t\t\t\t\tObject key = keys[i];", "-\t\t\t\t\tthis.parameters.put(Logger.KEY, key);", "-\t\t\t\t\tthis.parameters.put(Logger.VALUE, options.get(key));", "+\t\t\t\tfinal Set entriesSet = options.entrySet();", "+\t\t\t\tObject[] entries = entriesSet.toArray();", "+\t\t\t\tArrays.sort(entries, new Comparator() {", "+\t\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\t\tMap.Entry entry1 = (Map.Entry) o1;", "+\t\t\t\t\t\tMap.Entry entry2 = (Map.Entry) o2;", "+\t\t\t\t\t\treturn ((String) entry1.getKey()).compareTo((String) entry2.getKey());", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\tthis.parameters.put(Logger.KEY, entry.getKey());", "+\t\t\t\t\tthis.parameters.put(Logger.VALUE, entry.getValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a4ebedb1ffe2cdd08d6f2840d3324e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/GenericXMLWriter.java", "commitBeforeChange": "0ee327f784f1f4e34e68a84648fe26304fce751c", "commitAfterChange": "5b5d83d3544b223e577e7fddd59f42874f12eb50", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void printTag(String name, HashMap parameters, boolean insertTab, boolean insertNewLine, boolean closeTag)", "signatureAfterChange": " \tpublic void printTag(String name, HashMap parameters, boolean insertTab, boolean insertNewLine, boolean closeTag)", "diff": ["-\t\t\tString[] keys = new String[length];", "-\t\t\tparameters.keySet().toArray(keys);", "-\t\t\tArrays.sort(keys);", "+\t\t\tMap.Entry[] entries = new Map.Entry[length];", "+\t\t\tparameters.entrySet().toArray(entries);", "+\t\t\tArrays.sort(entries, new Comparator() {", "+\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\tMap.Entry entry1 = (Map.Entry) o1;", "+\t\t\t\t\tMap.Entry entry2 = (Map.Entry) o2;", "+\t\t\t\t\treturn ((String) entry1.getKey()).compareTo((String) entry2.getKey());", "+\t\t\t\t}", "+\t\t\t});", "-\t\t\t\tsb.append(keys[i]);", "+\t\t\t\tsb.append(entries[i].getKey());", "-\t\t\t\tsb.append(getEscaped(String.valueOf(parameters.get(keys[i]))));", "+\t\t\t\tsb.append(getEscaped(String.valueOf(entries[i].getValue())));"]}], "num": 30871}
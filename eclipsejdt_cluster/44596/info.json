{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b125a8ef4ba8e8a2d5c9cea39163c6d9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f1a6f26ab0f5f22a532bc8df04f199e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/TypeAnnotationCodeStream.java", "commitBeforeChange": "6c7de59cc4e8b7d3ff952cb73eea6ba69e83b190", "commitAfterChange": "8eda346eb2b6784c607071f6828a328415623f59", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding)", "signatureAfterChange": " \t \tpublic void checkcast(TypeReference typeReference, TypeBinding typeBinding)", "diff": ["-\t\tif (typeReference != null && (typeReference.bits & ASTNode.HasTypeAnnotations) != 0) {", "-\t\t\taddAnnotationContext(typeReference, this.position, AnnotationTargetTypeConstants.CAST);", "+\t\t/* We use a slightly sub-optimal generation for intersection casts by resorting to a runtime cast for every intersecting type, but in", "+\t\t   reality this should not matter. In its intended use form such as (I & Serializable) () -> {}, no cast is emitted at all. Also note", "+\t\t   intersection cast type references cannot nest i.e ((X & I) & J) is not valid syntax.", "+\t\t*/", "+\t\tif (typeReference != null) {", "+\t\t\tTypeReference [] typeReferences = typeReference.getTypeReferences();", "+\t\t\tfor (int i = typeReferences.length - 1; i >= 0; i--) {  // need to emit right to left.", "+\t\t\t\ttypeReference = typeReferences[i];", "+\t\t\t\tif (typeReference != null) {", "+\t\t\t\t\tif ((typeReference.bits & ASTNode.HasTypeAnnotations) != 0)", "+\t\t\t\t\t\taddAnnotationContext(typeReference, this.position, i, AnnotationTargetTypeConstants.CAST);", "+\t\t\t\t\tsuper.checkcast(typeReference, typeReference.resolvedType);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tsuper.checkcast(null, typeBinding);", "-\t\tsuper.checkcast(typeReference, typeBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c43b6a1c67df2587e6186a941b7b0bd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "7d377efa996fb82a3b5c1b0d3643171f071fe458", "commitAfterChange": "5725587b7e076e798174c1de3afdd9fd81ea2803", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tvoid initialize(ReferenceBinding someGenericType, TypeBinding someBound, TypeBinding[] someOtherBounds)", "signatureAfterChange": "  \tvoid initialize(ReferenceBinding someGenericType, TypeBinding someBound, TypeBinding[] someOtherBounds)", "diff": ["-\t\t\tthis.tagBits |= someBound.tagBits & (TagBits.HasTypeVariable | TagBits.HasMissingType);", "+\t\t\tthis.tagBits |= someBound.tagBits & (TagBits.HasTypeVariable | TagBits.HasMissingType | TagBits.ContainsNestedTypeReferences);", "+\t\t}", "+\t\tif (someOtherBounds != null) {", "+\t\t\tfor (int i = 0, max = someOtherBounds.length; i < max; i++) {", "+\t\t\t\tTypeBinding someOtherBound = someOtherBounds[i];", "+\t\t\t\tthis.tagBits |= someOtherBound.tagBits & TagBits.ContainsNestedTypeReferences;", "+\t\t\t}"]}], "num": 44596}
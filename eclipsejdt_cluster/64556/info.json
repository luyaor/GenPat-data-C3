{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6ea3a09e6501a401fe53ee313bc4544", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86881732036bb1d195a4ab3fb93f4b83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "7e1c1ec5b1f6c711f6c7308f04d5e852eb81c57a", "commitAfterChange": "67ac4d9fec147bd68e968d5f616571d529bba8d0", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "\r \tpublic void updatePackageFragmentRoots()", "signatureAfterChange": "\r \tpublic void updatePackageFragmentRoots()", "diff": ["-\r", "-\t\t\t\t\tIPackageFragmentRoot[] oldRoots = getPackageFragmentRoots();\r", "-\t\t\t\t\tIPackageFragmentRoot[] newRoots = computePackageFragmentRoots(false);\r", "-\t\t\t\t\tcheckIdentical: {\r", "-\t\t\t\t\t\tif (oldRoots.length == newRoots.length){\r", "-\t\t\t\t\t\t\tfor (int i = 0, length = oldRoots.length; i < length; i++){\r", "-\t\t\t\t\t\t\t\tif (!oldRoots[i].equals(newRoots[i])){\r", "-\t\t\t\t\t\t\t\t\tbreak checkIdentical;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\treturn; // no need to update\r", "-\t\t\t\t\t\t}\t\r", "-\t\t\t\t\t}\r", "+\r", "+\t\t\t\t\tNameLookup lookup = info.getNameLookup();\r", "+\t\t\t\t\tif (lookup != null){\r", "+\t\t\t\t\t\tIPackageFragmentRoot[] oldRoots = lookup.fPackageFragmentRoots;\r", "+\t\t\t\t\t\tIPackageFragmentRoot[] newRoots = computePackageFragmentRoots(true);\r", "+\t\t\t\t\t\tcheckIdentical: { // compare all pkg fragment root lists\r", "+\t\t\t\t\t\t\tif (oldRoots.length == newRoots.length){\r", "+\t\t\t\t\t\t\t\tfor (int i = 0, length = oldRoots.length; i < length; i++){\r", "+\t\t\t\t\t\t\t\t\tif (!oldRoots[i].equals(newRoots[i])){\r", "+\t\t\t\t\t\t\t\t\t\tbreak checkIdentical;\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\treturn; // no need to update\r", "+\t\t\t\t\t\t\t}\t\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tinfo.setNameLookup(null); // discard name lookup (hold onto roots)\r", "+\t\t\t\t\t}\t\t\t\t\r", "+\t\t\t\t\tinfo.setNonJavaResources(null);\r", "-\t\t\t\t\tinfo.setNameLookup(null); // discard name lookup (hold onto roots)\r", "-\t\t\t\t\tinfo.setNonJavaResources(null);\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e474d0799e6953793f72a90ce843728c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void updatePackageFragmentRoots()", "signatureAfterChange": " \tpublic void updatePackageFragmentRoots()", "diff": ["-", "-\t\t\t\t\tIClasspathEntry[] classpath = getResolvedClasspath(true);", "-\t\t\t\t\tNameLookup lookup = info.getNameLookup();", "-\t\t\t\t\tif (lookup != null){", "-\t\t\t\t\t\tIPackageFragmentRoot[] oldRoots = lookup.fPackageFragmentRoots;", "-\t\t\t\t\t\tIPackageFragmentRoot[] newRoots = computePackageFragmentRoots(classpath, true);", "-\t\t\t\t\t\tcheckIdentical: { // compare all pkg fragment root lists", "-\t\t\t\t\t\t\tif (oldRoots.length == newRoots.length){", "-\t\t\t\t\t\t\t\tfor (int i = 0, length = oldRoots.length; i < length; i++){", "-\t\t\t\t\t\t\t\t\tif (!oldRoots[i].equals(newRoots[i])){", "-\t\t\t\t\t\t\t\t\t\tbreak checkIdentical;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn; // no need to update", "-\t\t\t\t\t\t\t}\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tinfo.setNameLookup(null); // discard name lookup (hold onto roots)", "-\t\t\t\t\t}\t\t\t\t", "-\t\t\t\t\tinfo.setNonJavaResources(null);", "-\t\t\t\t\tinfo.setChildren(", "-\t\t\t\t\t\tcomputePackageFragmentRoots(classpath, false));\t\t", "-", "+\t\t\t\t\tcomputeChildren(info);"]}], "num": 64556}
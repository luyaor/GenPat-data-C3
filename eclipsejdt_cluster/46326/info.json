{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "811735280fb3138366e217609e72771f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1492f1756cfbe48eaad59be9cb0d637b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 241, "signatureBeforeChange": " public void javadocNotVisibleReference(int sourceStart, int sourceEnd, int modifiers)", "signatureAfterChange": " public void javadocHiddenReference(int sourceStart, int sourceEnd, Scope scope, int modifiers)", "diff": ["-public void javadocNotVisibleReference(int sourceStart, int sourceEnd, int modifiers) {", "-\tif (javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers))", "-\t\tthis.handle(IProblem.JavadocNotVisibleReference, NoArgument, NoArgument, sourceStart, sourceEnd);", "+public void javadocHiddenReference(int sourceStart, int sourceEnd, Scope scope, int modifiers) {", "+\tScope currentScope = scope;", "+\twhile (currentScope.parent.kind != Scope.COMPILATION_UNIT_SCOPE ) {", "+\t\tif (!javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, currentScope.getDeclarationModifiers())) {", "+\t\t\treturn;", "+\t\t}", "+\t\tcurrentScope = currentScope.parent;", "+\t}", "+\tString[] arguments = new String[] { this.options.getVisibilityString(this.options.reportInvalidJavadocTagsVisibility), this.options.getVisibilityString(modifiers) };", "+\tthis.handle(IProblem.JavadocHiddenReference, arguments, arguments, sourceStart, sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1837e2601d52cffb4d5e6417743d4593", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "40b99e5148bf82c3e66b88907e69f5d1e18e6f74", "commitAfterChange": "85d2c2c8ac37bb6f0260d6630185def87956883b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["+\t\t\t} finally {", "+\t\t\t\t// ensures the project is getting rebuilt if only variable is modified", "+\t\t\t\tif (!this.identicalRoots && this.canChangeResources) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.project.getProject().touch(this.progressMonitor);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\t\t\tSystem.out.println(\"CPInit - FAILED to touch project: \"+ this.project.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f2d4d683afd024688cb903c32ba9db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "c20e678de306d96dc52329a1b146045377d02fc2", "commitAfterChange": "dabb194bc3f00ca0451d7f77892036995b490fbd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t    \tsetGenericCast(length, originalType.genericCast(targetType));", "+\t    \tTypeBinding typeCast = originalType.genericCast(targetType);", "+\t    \tsetGenericCast(length, typeCast);", "+\t        if (typeCast instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding referenceCast = (ReferenceBinding) typeCast;", "+\t\t\t\tif (!referenceCast.canBeSeenBy(scope)) {", "+\t\t        \tscope.problemReporter().invalidType(this, ", "+\t\t        \t\t\tnew ProblemReferenceBinding(", "+\t\t\t\t\t\t\t\tCharOperation.splitOn('.', referenceCast.shortReadableName()),", "+\t\t\t\t\t\t\t\treferenceCast,", "+\t\t\t\t\t\t\t\tProblemReasons.NotVisible));", "+\t\t\t\t}", "+\t        }\t\t\t    \t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ed4c875c2441b2cb2779e8bc119bcb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayQualifiedTypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "\t \t \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\tpublic TypeBinding getTypeBinding(Scope scope) {", "+\tprotected TypeBinding getTypeBinding(Scope scope) {", "-\t\treturn scope.createArray(scope.getType(tokens), dimensions);", "+\t\ttry {", "+\t\t\tTypeBinding leafComponentType = scope.getType(this.tokens, this.tokens.length);", "+\t\t\tif (leafComponentType.isParameterizedType()) {", "+\t\t\t    scope.problemReporter().illegalArrayOfParameterizedType(leafComponentType, this);", "+\t\t\t}", "+\t\t\treturn scope.createArrayType(leafComponentType, dimensions);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\te.updateContext(this, scope.referenceCompilationUnit().compilationResult);", "+\t\t\tthrow e;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80aad133c462342dee2ca61c9300ef6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "b61821098b3e91f47b6be870d0461734b9ea7274", "commitAfterChange": "b18b012adcc471e2280a6e20faa4d2a33f1db69a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "diff": ["+\t\t\t\t} catch (RuntimeException e) {", "+\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t}", "+\t\t\t\t\tthrow e;", "+\t\t\t\t} catch (Error e) {", "+\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t}", "+\t\t\t\t\tthrow e;", "-\t\t\t\t\tif (!ok) JavaModelManager.getJavaModelManager().containerPut(project, containerPath, null); // flush cache", "+\t\t\t\t\tif (!ok) {", "+\t\t\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(project, containerPath, null); // flush cache", "+\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "+\t\t\t\t\t\t\tUtil.verbose(", "+\t\t\t\t\t\t\t\t\"CPContainer INIT - FAILED\\n\" + //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\"\tproject: \" + project.getElementName() + '\\n' + //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\"\tcontainer path: \" + containerPath + '\\n' + //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\"\tinitializer: \" + initializer); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aec99d28ef78a3309fdc6280ad73a92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "739f46dc80f05018247a11479ac4224752f3b7da", "commitAfterChange": "b87b4725d2e28b5cdeb71175856b8b7535e04544", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void processPackageFragmentResource(PackageFragment source, PackageFragmentRoot root, String newName) throws JavaModelException", "signatureAfterChange": " \tprivate void processPackageFragmentResource(PackageFragment source, PackageFragmentRoot root, String newName) throws JavaModelException", "diff": ["-\t\t\t\t\t\tupdatePackageStatement(astCU, newFragName, getDocument(cu));", "+\t\t\t\t\t\tAST ast = astCU.getAST();", "+\t\t\t\t\t\tASTRewrite rewrite = ASTRewrite.create(ast);", "+\t\t\t\t\t\tupdatePackageStatement(astCU, newFragName, rewrite);", "+\t\t\t\t\t\tIDocument document = getDocument(cu);", "+\t\t\t\t\t\tTextEdit edits = rewrite.rewriteAST(document, null);", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tedits.apply(document);", "+\t\t\t\t\t\t} catch (BadLocationException e) {", "+\t\t\t\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.INVALID_CONTENTS);", "+\t\t\t\t\t\t}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7860f3a008f96607b8d57133d0b1bed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 335, "methodNumberAfterChange": 336, "signatureBeforeChange": " public void unsafeCast(CastExpression castExpression)", "signatureAfterChange": " public void unsafeCast(CastExpression castExpression, Scope scope)", "diff": ["-public void unsafeCast(CastExpression castExpression) {", "+public void unsafeCast(CastExpression castExpression, Scope scope) {", "+\tTypeBinding erasedCastType = castExpression.resolvedType.erasure();", "+\tif (erasedCastType.isGenericType()) erasedCastType = scope.environment().createRawType((ReferenceBinding)erasedCastType, erasedCastType.enclosingType());", "-\t\tnew String[]{ new String(castedExpressionType.readableName()), new String(castExpression.resolvedType.readableName())},", "-\t\tnew String[]{ new String(castedExpressionType.shortReadableName()), new String(castExpression.resolvedType.shortReadableName())},", "+\t\tnew String[]{ ", "+\t\t\tnew String(castedExpressionType.readableName()), ", "+\t\t\tnew String(castExpression.resolvedType.readableName()),", "+\t\t\tnew String(erasedCastType.readableName()),", "+\t\t},", "+\t\tnew String[]{ ", "+\t\t\tnew String(castedExpressionType.shortReadableName()), ", "+\t\t\tnew String(castExpression.resolvedType.shortReadableName()),", "+\t\t\tnew String(erasedCastType.shortReadableName()),", "+\t\t},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee53cbb573ad81a73316c2be85876d2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "edc23e66dbb95c3af3ddd76b4ae7b813c6ef35a5", "commitAfterChange": "8873795d3456fd4eb978570ebf0c2587e004407c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic IJavaElement[] getVisibleElements(String typeSignature)", "signatureAfterChange": "  \tpublic IJavaElement[] getVisibleElements(String typeSignature)", "diff": ["-\t\t\t\tLocalVariableBinding binding = (LocalVariableBinding) this.visibleLocalVariables.elementAt(i);", "-\t\t\t\tif (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;", "-\t\t\t\tJavaElement localVariable = getJavaElement(binding);", "-\t\t\t\tif (localVariable != null) result[elementCount++] = localVariable;", "+\t\t\t\ttry {", "+\t\t\t\t\tLocalVariableBinding binding = (LocalVariableBinding) this.visibleLocalVariables.elementAt(i);", "+\t\t\t\t\tif (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;", "+\t\t\t\t\tJavaElement localVariable = getJavaElement(binding);", "+\t\t\t\t\tif (localVariable != null) result[elementCount++] = localVariable;", "+\t\t\t\t} catch(AbortCompilation e) {", "+\t\t\t\t\t// log the exception and proceed", "+\t\t\t\t\tUtil.logRepeatedMessage(e.getKey(), e);", "+\t\t\t\t}", "-\t\t\t\tFieldBinding binding = (FieldBinding) this.visibleFields.elementAt(i);", "-\t\t\t\tif (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;", "-\t\t\t\tif (this.assistScope.isDefinedInSameUnit(binding.declaringClass)) {", "-\t\t\t\t\tJavaElement field = getJavaElementOfCompilationUnit(binding);", "-\t\t\t\t\tif (field != null) result[elementCount++] = field;", "-\t\t\t\t} else {", "-\t\t\t\t\tJavaElement field = Util.getUnresolvedJavaElement(binding, this.owner, EmptyNodeMap);", "-\t\t\t\t\tif (field != null) result[elementCount++] = field.resolved(binding);", "+\t\t\t\ttry {", "+\t\t\t\t\tFieldBinding binding = (FieldBinding) this.visibleFields.elementAt(i);", "+\t\t\t\t\tif (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;", "+\t\t\t\t\tif (this.assistScope.isDefinedInSameUnit(binding.declaringClass)) {", "+\t\t\t\t\t\tJavaElement field = getJavaElementOfCompilationUnit(binding);", "+\t\t\t\t\t\tif (field != null) result[elementCount++] = field;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tJavaElement field = Util.getUnresolvedJavaElement(binding, this.owner, EmptyNodeMap);", "+\t\t\t\t\t\tif (field != null) result[elementCount++] = field.resolved(binding);", "+\t\t\t\t\t}", "+\t\t\t\t} catch(AbortCompilation e) {", "+\t\t\t\t\t// log the exception and proceed", "+\t\t\t\t\tUtil.logRepeatedMessage(e.getKey(), e);", "-\t\t\t\tMethodBinding binding = (MethodBinding) this.visibleMethods.elementAt(i);", "-\t\t\t\tif (assignableTypeBinding != null && !binding.returnType.isCompatibleWith(assignableTypeBinding)) continue next;", "-\t\t\t\tif (this.assistScope.isDefinedInSameUnit(binding.declaringClass)) {", "-\t\t\t\t\tJavaElement method = getJavaElementOfCompilationUnit(binding);", "-\t\t\t\t\tif (method != null) result[elementCount++] = method;", "-\t\t\t\t} else {", "-\t\t\t\t\tJavaElement method = Util.getUnresolvedJavaElement(binding, this.owner, EmptyNodeMap);", "-\t\t\t\t\tif (method != null) result[elementCount++] = method.resolved(binding);", "+\t\t\t\ttry {", "+\t\t\t\t\tMethodBinding binding = (MethodBinding) this.visibleMethods.elementAt(i);", "+\t\t\t\t\tif (assignableTypeBinding != null && !binding.returnType.isCompatibleWith(assignableTypeBinding)) continue next;", "+\t\t\t\t\tif (this.assistScope.isDefinedInSameUnit(binding.declaringClass)) {", "+\t\t\t\t\t\tJavaElement method = getJavaElementOfCompilationUnit(binding);", "+\t\t\t\t\t\tif (method != null) result[elementCount++] = method;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tJavaElement method = Util.getUnresolvedJavaElement(binding, this.owner, EmptyNodeMap);", "+\t\t\t\t\t\tif (method != null) result[elementCount++] = method.resolved(binding);", "+\t\t\t\t\t}", "+\t\t\t\t} catch(AbortCompilation e) {", "+\t\t\t\t\t// log the exception and proceed", "+\t\t\t\t\tUtil.logRepeatedMessage(e.getKey(), e);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8ba145e177224bbab447badc302dbd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyPackageFragmentRootOperation.java", "commitBeforeChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "commitAfterChange": "7dfdcc33c89bb2a137f9c84963dd6ab9ff74a661", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected IClasspathEntry copy(IClasspathEntry entry) throws JavaModelException", "signatureAfterChange": " \tprotected IClasspathEntry copy(IClasspathEntry entry) throws JavaModelException", "diff": ["-\t\t\t\treturn JavaCore.newLibraryEntry(this.destination, entry.getSourceAttachmentPath(), entry.getSourceAttachmentRootPath(), entry.isExported());", "+\t\t\t\ttry {", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(this.destination, entry.getSourceAttachmentPath(), entry.getSourceAttachmentRootPath(), entry.isExported());", "+\t\t\t\t} catch (Assert.AssertionFailedException e) {", "+\t\t\t\t\tIJavaModelStatus status = new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, e.getMessage());", "+\t\t\t\t\tthrow new JavaModelException(status);", "+\t\t\t\t}", "-\t\t\t\treturn JavaCore.newVariableEntry(entry.getPath(), entry.getSourceAttachmentPath(), entry.getSourceAttachmentRootPath(), entry.isExported());", "+\t\t\t\ttry {", "+\t\t\t\t\treturn JavaCore.newVariableEntry(entry.getPath(), entry.getSourceAttachmentPath(), entry.getSourceAttachmentRootPath(), entry.isExported());", "+\t\t\t\t} catch (Assert.AssertionFailedException e) {", "+\t\t\t\t\tIJavaModelStatus status = new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, e.getMessage());", "+\t\t\t\t\tthrow new JavaModelException(status);", "+\t\t\t\t}"]}], "num": 46326}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9ab7c29c3a8baf8827c2b9552444933", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f5a3fff9c946517451877c502324871", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic static void checkContainingAnnotation(ASTNode markerNode, Scope scope, ReferenceBinding container, ReferenceBinding repeatableAnnotation)", "signatureAfterChange": "  \tpublic static void checkContainerAnnotationType(ASTNode culpritNode, BlockScope scope, ReferenceBinding containerAnnotationType, ReferenceBinding repeatableAnnotationType, boolean useSite)", "diff": ["-\tpublic static void checkContainingAnnotation(ASTNode markerNode, Scope scope, ReferenceBinding container, ReferenceBinding repeatableAnnotation) {", "-\t\tMethodBinding[] annotationMethods = container.methods();", "+\tpublic static void checkContainerAnnotationType(ASTNode culpritNode, BlockScope scope, ReferenceBinding containerAnnotationType, ReferenceBinding repeatableAnnotationType, boolean useSite) {", "+\t\tMethodBinding[] annotationMethods = containerAnnotationType.methods();", "-\t\t\t\t\tif (TypeBinding.equalsEquals(array.elementsType(), repeatableAnnotation)) continue;", "+\t\t\t\t\tif (TypeBinding.equalsEquals(array.elementsType(), repeatableAnnotationType)) continue;", "-\t\t\t\tscope.problemReporter().containingAnnotationHasWrongValueType(markerNode, container, repeatableAnnotation, method.returnType);", "+\t\t\t\trepeatableAnnotationType.tagAsHavingDefectiveContainerType();", "+\t\t\t\tscope.problemReporter().containingAnnotationHasWrongValueType(culpritNode, containerAnnotationType, repeatableAnnotationType, method.returnType);", "-\t\t\t\t// Not the value() - must have default (or else isn't suitable as container", "+\t\t\t\t// Not the value() - must have default (or else isn't suitable as container)", "-\t\t\t\t\tscope.problemReporter().containingAnnotationHasNonDefaultMembers(markerNode, container, method.selector);", "+\t\t\t\t\trepeatableAnnotationType.tagAsHavingDefectiveContainerType();", "+\t\t\t\t\tscope.problemReporter().containingAnnotationHasNonDefaultMembers(culpritNode, containerAnnotationType, method.selector);", "-\t\t\tscope.problemReporter().containingAnnotationMustHaveValue(markerNode, container);", "+\t\t\trepeatableAnnotationType.tagAsHavingDefectiveContainerType();", "+\t\t\tscope.problemReporter().containingAnnotationMustHaveValue(culpritNode, containerAnnotationType);", "-\t\tcheckContainingAnnotationRetention(markerNode, scope, container, repeatableAnnotation);", "-\t\tif (markerNode instanceof Annotation)", "-\t\t\tcheckContainingAnnotationTarget((Annotation) markerNode, (BlockScope) scope, (TypeBinding) container, repeatableAnnotation);", "-\t\telse", "-\t\t\tcheckContainingAnnotationTarget(markerNode, scope, container, repeatableAnnotation);", "-\t\tcheckContaintAnnotationDocumented(markerNode, scope, container, repeatableAnnotation);", "-\t\tcheckContaintAnnotationInherited(markerNode, scope, container, repeatableAnnotation);", "-\t}", "+\t\tcheckContainingAnnotationRetention(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "+\t\t", "+\t\tif (useSite)", "+\t\t\tcheckContainingAnnotationTargetAtUse((Annotation) culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "+\t\telse ", "+\t\t\tcheckContainingAnnotationTarget(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "+\t\t", "+\t\tcheckContaintAnnotationDocumented(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "+\t\tcheckContaintAnnotationInherited(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c089c7db67328b387ef2516c9657c5f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tpublic void checkRepeatableAnnotation(ASTNode valueAttribute, Scope scope, Object containingBinding)", "signatureAfterChange": "  \tpublic void checkRepeatableMetaAnnotation(BlockScope scope)", "diff": ["-\t", "-\tpublic void checkRepeatableAnnotation(ASTNode valueAttribute, Scope scope, Object containingBinding) {", "-\t\tif (! (this.recipient instanceof ReferenceBinding && containingBinding instanceof ReferenceBinding)) return; // Has deeper problems...", "-\t\tReferenceBinding containing = (ReferenceBinding)containingBinding;", "-\t\tReferenceBinding repeatableAnnotation = (ReferenceBinding) this.recipient;", "-\t\trepeatableAnnotation.setContainingAnnotation(containing);", "-\t\tcheckContainingAnnotation(valueAttribute, scope, containing, repeatableAnnotation);", "+\tpublic void checkRepeatableMetaAnnotation(BlockScope scope) {", "+\t\t", "+\t\t// `this' is the @Repeatable meta annotation, its recipient is the *repeatable* annotation type - we are at the declaration site, not the repeating use site.", "+\t\t", "+\t\tReferenceBinding repeatableAnnotationType = (ReferenceBinding) this.recipient; // know it to be an annotation type. On target miss we don't get here", "+\t\t", "+\t\tMemberValuePair[] valuePairs = this.memberValuePairs();", "+\t\tif (valuePairs == null || valuePairs.length != 1)", "+\t\t\treturn;", "+\t\t", "+\t\tObject value = valuePairs[0].compilerElementPair.value;", "+\t\tif (!(value instanceof ReferenceBinding))", "+\t\t\treturn; // Has deeper problems, will bark elsewhere.", "+\t\tReferenceBinding containerAnnotationType = (ReferenceBinding) value;", "+\t\tif (!containerAnnotationType.isAnnotationType())", "+\t\t\treturn; // Has deeper problems, will bark elsewhere.", "+\t\t", "+\t\trepeatableAnnotationType.setContainerAnnotationType(containerAnnotationType); // For now. May be reset later to PRB in case of problems.", "+\t\tcheckContainerAnnotationType(valuePairs[0], scope, containerAnnotationType, repeatableAnnotationType, false); // false => not use site, i.e declaration site error reporting requested."]}], "num": 12432}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f44a75ba3e1c90ff2b4175b6e57fd26c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "250c354308e4b74a845fb35c2b97b930", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["+\tIClasspathEntry[] classpath = this.newRawPath;\r", "+\tIPath projectPath= javaProject.getProject().getFullPath();\r", "-\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r", "+\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\tboolean allowNestingInOutput = false;\r", "+\tboolean hasSource = false;\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\tif (classpath[i].getPath().equals(outputLocation)){\r", "+\t\t\tallowNestingInOutput = true;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "+\t\r", "+\t// check all entries\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tIClasspathEntry entry = classpath[i];\r", "+\t\tIPath entryPath = entry.getPath();\r", "+\r", "+\t\t// no further check if entry coincidates with project or output location\r", "+\t\tif (entryPath.equals(projectPath)) continue;\r", "+\t\tif (entryPath.equals(outputLocation)) continue;\r", "+\t\t\r", "+\t\t// prevent nesting source entries in each other\r", "+\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\tfor (int j = 0; j < classpath.length; j++){\r", "+\t\t\t\tIClasspathEntry otherEntry = classpath[j];\r", "+\t\t\t\tif (entry != otherEntry && otherEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "+\t\t\t\t\tif (entryPath.isPrefixOf(otherEntry.getPath())){\r", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// prevent nesting output location inside entry\r", "+\t\tif (entryPath.isPrefixOf(outputLocation)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\r", "+\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "+\t\tif (!allowNestingInOutput && outputLocation.isPrefixOf(entryPath)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "+\t\t}\r", "+\t}\r", "+\treturn JavaModelStatus.VERIFIED_OK;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71822a25c191f0e229b0f46bf54aabd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompilationUnitTests.java", "commitBeforeChange": "9a828b6f308f1048d5448d6c6f9c881639322d34", "commitAfterChange": "5028738b115a56f3f04beb6089ff2c05854751f1", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testGetTypes() throws JavaModelException", "signatureAfterChange": " public void testGetTypes() throws JavaModelException", "diff": ["+\tboolean[] isClass = new boolean[] {true, false};", "+\tboolean[] isInterface = new boolean[] {false, true};", "+\tboolean[] isAnnotation = new boolean[] {false, false};", "+\tboolean[] isEnum = new boolean[] {false, false};", "+\tString[] superclassName = new String[] {null, null};", "+\tString[] superclassType = new String[] {null, null};", "+\tString[][] superInterfaceNames = new String[][] {", "+\t\t\tnew String[] {\"Runnable\"}, new String[0]", "+\t};", "+\tString[][] superInterfaceTypes = new String[][] {", "+\t\t\tnew String[] {\"QRunnable;\"}, new String[0]", "+\t};", "+\tString[][] formalTypeParameters = new String[][] {", "+\t\tnew String[0], new String[0]};", "+\t", "+\t\tassertEquals(\"Incorrect isClass for the \" + i + \" type\", isClass[i], types[i].isClass());", "+\t\tassertEquals(\"Incorrect isInterface for the \" + i + \" type\", isInterface[i], types[i].isInterface());", "+\t\tassertEquals(\"Incorrect isAnnotation for the \" + i + \" type\", isAnnotation[i], types[i].isAnnotation());", "+\t\tassertEquals(\"Incorrect isEnum for the \" + i + \" type\", isEnum[i], types[i].isEnum());", "+\t\tassertEquals(\"Incorrect superclassName for the \" + i + \" type\", superclassName[i], types[i].getSuperclassName());", "+\t\tassertEquals(\"Incorrect superclassType for the \" + i + \" type\", superclassType[i], types[i].getSuperclassType());", "+\t\tassertEquals(\"Incorrect superInterfaceNames for the \" + i + \" type\", superInterfaceNames[i].length, types[i].getSuperInterfaceNames().length);", "+\t\tassertEquals(\"Incorrect superInterfaceTypes for the \" + i + \" type\", superInterfaceTypes[i].length, types[i].getSuperInterfaceTypes().length);", "+\t\tassertEquals(\"Incorrect formalTypeParameters for the \" + i + \" type\", formalTypeParameters[i].length, types[i].getTypeParameters().length);"]}], "num": 60643}
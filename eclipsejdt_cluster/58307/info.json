{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59939623eca2c0ac56b7e9948e14a705", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "506c049fb32a0b24714644e4a7c706c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "a2ca4d1dca2fbcc72eef5c4d5e1d2d9929abeff3", "commitAfterChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tprivate void updateClasspath() throws JavaModelException", "signatureAfterChange": "  \tprivate void updateClasspath() throws JavaModelException", "diff": ["-\t\tIClasspathEntry[] newResolvedPath = ", "-\t\t\tproject.getResolvedClasspath(", "-\t\t\t\ttrue, // ignoreUnresolvedEntry", "-\t\t\t\tthis.canChangeResource);// also update cp markers", "-", "+\t\tif (this.newResolvedPath == null) {", "+\t\t\tthis.newResolvedPath = ", "+\t\t\t\tthis.newResolvedPath = project.getResolvedClasspath(true, this.canChangeResource);", "+\t\t}", "-\t\t\t\tnewResolvedPath,", "+\t\t\t\tthis.newResolvedPath,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7296bc1c0069c48adbe59a18ad5d2e06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchDocument.java", "commitBeforeChange": "70b32514588b091b133b82607c10c8c78d5b8fe3", "commitAfterChange": "aaa63e79319475935e2167f567ed10fa3d10e895", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate IFile getFile()", "signatureAfterChange": " \tprivate IFile getFile()", "diff": ["-\t\tIPath path = new Path(this.documentPath);", "-\t\treturn (IFile)ResourcesPlugin.getWorkspace().getRoot().findMember(path);", "+\t\tif (this.file == null)", "+\t\t\tthis.file = (IFile) ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(this.documentPath));", "+\t\treturn this.file;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19d2e35b0027d3fbb7b785d0fa8fb84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "faf66774125063b945b9059a75de1139a8d6264a", "commitAfterChange": "df7c7252bb25d1124375e0f48ecdac3fe62712d0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean isReadyToRun()", "signatureAfterChange": " \tpublic boolean isReadyToRun()", "diff": ["-\t\t// TODO: (jerome) Could improve by caching the index paths in the index selector", "-\t\tIndexSelector selector = new IndexSelector(this.scope, this.focus, this.isPolymorphicSearch, this.indexManager);", "-\t\tselector.getIndexes(); // do not want to cache these indexes since some may be null & need to be rebuilt", "+\t\tif (this.indexSelector == null) { // only check once, i.e. as long as this job is used, it will keep the same index picture", "+\t\t\tthis.indexSelector = new IndexSelector(this.scope, this.focus, this.isPolymorphicSearch, this.indexManager);", "+\t\t\tthis.indexSelector.getIndexes(); // will only cache answer if all indexes were available originally", "+\t\t}"]}], "num": 58307}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c760481c4a97d9928a7ebba8ee4668c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71f66bf19ded41fd62ccdff6a52692be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 48, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["+\t", "+\tif (this != this.prototype)", "+\t\treturn this.prototype.resolveTypesFor(method);", "+\t", "-\tif (this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "+\tfinal long sourceLevel = this.scope.compilerOptions().sourceLevel;", "+\tif (sourceLevel >= ClassFileConstants.JDK1_5) {", "-\tif (this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_7) {", "+\tif (sourceLevel >= ClassFileConstants.JDK1_7) {", "+\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t\t\tAnnotationBinding [] annotations = method.getAnnotations();", "+\t\t\t\t\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS) {", "+\t\t\t\t\t\tASTNode.copySE8AnnotationsToType(methodDecl.scope, method, annotations);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\t\t\t\tmethod.returnType = method.returnType.unannotated();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "-\t\t\t\t\t\t\tmethod.returnType = this.scope.environment().createAnnotatedType(method.returnType, nullTagBits);", "+\t\t\t\t\t\t\tmethod.returnType.tagBits &= ~TagBits.AnnotationNullMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feb9d21e72b619092b4ffe2998448bb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["+\t\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\tlong nullTagBits = method.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "+\t\t\t\tif (method.returnType.isBaseType()) {", "+\t\t\t\t\tif (method.returnType.id != TypeIds.T_void)  // type annotations are *always* illegal for 'void'", "+\t\t\t\t\t\tthis.scope.problemReporter().illegalAnnotationForBaseType(returnTypeRef, methodDecl.annotations, nullTagBits);", "+\t\t\t\t} else {", "+\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "+\t\t\t\t\tmethod.returnType = this.scope.environment().pushAnnotationIntoType(method.returnType, returnTypeRef, nullTagBits);", "+\t\t\t\t}", "+\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t}", "+\t\t}"]}], "num": 18866}
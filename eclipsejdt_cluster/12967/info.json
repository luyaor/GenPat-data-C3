{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce766dbd7658ec695478039fd8065df4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91e5cfc6d37c04ed017743a2be425eb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateImpl.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \tprotected char[] getElementContentCharArray(SourceEntry entry)", "signatureAfterChange": "\r \tprotected char[] getElementContentCharArray(SourceEntry entry)", "diff": ["-\t\tBufferedReader reader = null;\r", "+\t\tInputStream stream = null;\r", "-\t\t\treader= new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes)));\r", "-\t\t\tint length= bytes.length;\r", "-\t\t\tchar[] contents= new char[length];\r", "-\t\t\tint len= 0;\r", "-\t\t\tint readSize= 0;\r", "-\t\t\twhile ((readSize != -1) && (len != length)) {\r", "-\t\t\t\t// See PR 1FMS89U\r", "-\t\t\t\t// We record first the read size. In this case len is the actual read size.\r", "-\t\t\t\tlen += readSize;\r", "-\t\t\t\treadSize= reader.read(contents, len, length - len);\r", "-\t\t\t}\r", "-\t\t\treader.close();\r", "-\t\t\t// See PR 1FMS89U\r", "-\t\t\t// Now we need to resize in case the default encoding used more than one byte for each\r", "-\t\t\t// character\r", "-\t\t\tif (len != length)\r", "-\t\t\t\tSystem.arraycopy(contents, 0, (contents= new char[len]), 0, len);\r", "-\t\t\treturn contents;\r", "+\t\t\tstream = new ByteArrayInputStream(bytes);\r", "+\t\t\treturn org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(stream, bytes.length);\r", "-\t\t\tif (reader != null) {\r", "+\t\t\treturn new char[0];\r", "+\t\t} finally {\r", "+\t\t\tif (stream != null) {\r", "-\t\t\t\t\treader.close();\r", "+\t\t\t\t\tstream.close();\r", "-\t\t\treturn new char[0];\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdad8a71757107780c759f8081aa8389", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/SourceFile.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic char[] getContents()", "signatureAfterChange": "  public char[] getContents()", "diff": ["-\t", "-\tpublic char[] getContents() {", "-", "-\t\t// otherwise retrieve it", "-\t\tBufferedReader reader = null;", "+public char[] getContents() {", "+\t// otherwise retrieve it", "+\tInputStreamReader reader = null;", "+\ttry {", "+\t\treader =", "+\t\t\tthis.encoding == null", "+\t\t\t\t? new InputStreamReader(resource.getContents())", "+\t\t\t\t: new InputStreamReader(resource.getContents(), this.encoding);", "+\t\tCharArrayBuffer result = new CharArrayBuffer();", "-\t\t\tFile file = new File(new String(fileName));", "-\t\t\tInputStreamReader streamReader =", "-\t\t\t\tthis.encoding == null", "-\t\t\t\t\t? new InputStreamReader(new FileInputStream(file))", "-\t\t\t\t\t: new InputStreamReader(new FileInputStream(file), this.encoding);", "-\t\t\treader = new BufferedReader(streamReader);", "-\t\t\tint length = (int) file.length();", "-\t\t\tchar[] contents = new char[length];", "-\t\t\tint len = 0;", "-\t\t\tint readSize = 0;", "-\t\t\twhile ((readSize != -1) && (len != length)) {", "-\t\t\t\t// See PR 1FMS89U", "-\t\t\t\t// We record first the read size. In this case len is the actual read size.", "-\t\t\t\tlen += readSize;", "-\t\t\t\treadSize = reader.read(contents, len, length - len);", "-\t\t\t}", "+\t\t\tint count;", "+\t\t\tchar[] buffer = new char[4096];", "+\t\t\twhile ((count = reader.read(buffer, 0, buffer.length)) > -1)", "+\t\t\t\tresult.append(buffer, 0, count);", "+\t\t} finally {", "-\t\t\t// See PR 1FMS89U", "-\t\t\t// Now we need to resize in case the default encoding used more than one byte for each", "-\t\t\t// character", "-\t\t\tif (len != length)", "-\t\t\t\tSystem.arraycopy(contents, 0, (contents = new char[len]), 0, len);\t\t", "-\t\t\treturn contents;", "-\t\t} catch (FileNotFoundException e) {", "-\t\t\tthrow new AbortCompilation(true, new MissingSourceFileException(new String(fileName)));", "-\t\t} catch (IOException e) {", "-\t\t\tif (reader != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\treader.close();", "-\t\t\t\t} catch(IOException ioe) {", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthrow new AbortCompilation(true, new MissingSourceFileException(new String(fileName)));", "+\t\treturn result.getContents();", "+\t} catch (CoreException e) {", "+\t\tthrow new AbortCompilation(true, new MissingSourceFileException(resource.getFullPath().toString()));", "+\t} catch (IOException e) {", "+\t\tif (reader != null) {", "+\t\t\ttry { reader.close(); } catch(IOException ioe) {}", "+\t\t}", "+\t\tthrow new AbortCompilation(true, new MissingSourceFileException(resource.getFullPath().toString()));", "+}"]}], "num": 12967}
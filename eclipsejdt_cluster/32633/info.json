{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ea383cc04687480817237bc76d7ae17", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20399f85c4ce210dc8664f4e0123f635", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f03a3c2060092275ebe3df7a9969a3494a584807", "commitAfterChange": "10d218e167bd75add0dd3c7079813702993dcf64", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["+\t\t// Get cached preferences if exist", "+\t\tJavaModelManager.PerProjectInfo perProjectInfo = null;", "+\t\tif (inheritJavaCoreOptions) {", "+\t\t\ttry {", "+\t\t\t\tperProjectInfo = getPerProjectInfo();", "+\t\t\t\tif (perProjectInfo.options != null) {", "+\t\t\t\t\treturn new Hashtable(perProjectInfo.options);", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException jme) {", "+\t\t\t\t// skip", "+\t\t\t}", "+\t\t}", "+", "-\t\tIEclipsePreferences preferences = getEclipsePreferences();", "-\t\tif (preferences == null) return options; // cannot do better (non-Java project)", "+\t\tIEclipsePreferences projectPreferences= getEclipsePreferences();", "+\t\tif (projectPreferences == null) return options; // cannot do better (non-Java project)", "-\t\t\tString[] propertyNames = preferences.keys();", "+\t\t\tString[] propertyNames = projectPreferences.keys();", "-\t\t\t\tString value = preferences.get(propertyName, null);", "+\t\t\t\tString value = projectPreferences.get(propertyName, null);", "+\t\t// Cache computed map", "+\t\tif (perProjectInfo != null) {", "+\t\t\tperProjectInfo.options = options;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b9ade304dedb57f4264618429a6e763", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "eb5c674616fb78a01d2f52e1347da4c921d981ae", "commitAfterChange": "d1eee17b22e6a5c7fead90ad113c3a52618d279b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\t\tLong languageLevel = JavaModelManager.getJavaModelManager().getJarLanguageLevel(zipFilePath);", "-\t\t\t\t\t\t// Update the language level cache value for this jar, since we've already done the expensive IO.", "-\t\t\t\t\t\tif (languageLevel == null) {", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tlanguageLevel = new ClassFileReader(classFileBytes, null).getVersion();", "-\t\t\t\t\t\t\t\tJavaModelManager.getJavaModelManager().addToJarLanguageLevelsCache(zipFilePath, languageLevel);", "-\t\t\t\t\t\t\t} catch (ClassFormatException e1) {", "-\t\t\t\t\t\t\t\t// If we have trouble reading a class, stop trying to find this jar's language level.", "-\t\t\t\t\t\t\t\t// Set the local languageLevel variable to a dummy value but don't add it to the cache.", "-\t\t\t\t\t\t\t\tlanguageLevel = Long.MIN_VALUE;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5adba6871296ddabd5e3fa3f081591a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "ce0574029788b33026db9472a710468c9674b11f", "commitAfterChange": "3d73760dc9e0c52d27b28aa6b5ee7c1a07bc4ccf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["+\t\t\t\tLong languageLevel = JavaModelManager.getJavaModelManager().getJarLanguageLevel(zipFilePath);", "+\t\t\t\t\t\t// Update the language level cache value for this jar, since we've already done the expensive IO.", "+\t\t\t\t\t\tif (languageLevel == null) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tlanguageLevel = new ClassFileReader(classFileBytes, null).getVersion();", "+\t\t\t\t\t\t\t\tJavaModelManager.getJavaModelManager().addToJarLanguageLevelsCache(zipFilePath, languageLevel);", "+\t\t\t\t\t\t\t} catch (ClassFormatException e1) {", "+\t\t\t\t\t\t\t\t// If we have trouble reading a class, stop trying to find this jar's language level.", "+\t\t\t\t\t\t\t\t// Set the local languageLevel variable to a dummy value but don't add it to the cache.", "+\t\t\t\t\t\t\t\tlanguageLevel = Long.MIN_VALUE;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}], "num": 32633}
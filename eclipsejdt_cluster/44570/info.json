{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8033962d71097b1e91118c13b16d8513", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17292f1f8bc91a211de0c518a670cf59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "signatureAfterChange": " public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "diff": ["-\t\t    // do not allow type variables to match with erasures for free", "-\t\t    if (!otherType.isTypeVariable()) otherType = otherType.erasure();", "-\t\t    if (this == otherType || (!isTypeVariable() && erasure() == otherType)) return this;", "+\t\t    // do not allow type variables/intersection types to match with erasures for free", "+\t\t    if (!otherType.isTypeVariable() && !otherType.isIntersectionType()) otherType = otherType.erasure();", "+\t\t    if (this == otherType || (!isTypeVariable() && !isIntersectionType() && erasure() == otherType)) return this;", "-\t\t\t\t\tif (currentType == otherType || (!currentType.isTypeVariable() && currentType.erasure() == otherType)) return currentType;", "+\t\t\t\t\tif (currentType == otherType || (!currentType.isTypeVariable() && !currentType.isIntersectionType() && currentType.erasure() == otherType)) return currentType;", "-\t\t\t\tif (currentType == otherType || (!currentType.isTypeVariable() && currentType.erasure() == otherType))", "+\t\t\t\tif (currentType == otherType || (!currentType.isTypeVariable() && !currentType.isIntersectionType() && currentType.erasure() == otherType))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451ed6136d80c759a790089f04d546af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "41c63d173b783da585741afcc316e6689497e1b3", "commitAfterChange": "9211325c9e25bcdca490e5898b25afc780be94ca", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public ReferenceBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "signatureAfterChange": " public ReferenceBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "diff": ["-    if (this == otherType) return this;", "-    ", "-    if (!otherType.isTypeVariable()) {", "-    \totherType = otherType.erasure();", "-   \t    if (!isTypeVariable() && erasure() == otherType) return this;", "-    }", "+    if (!otherType.isTypeVariable()) otherType = otherType.erasure();", "+    if (this == otherType || (!isTypeVariable() && erasure() == otherType)) return this;", "-\t\t\tif (currentType == otherType || currentType.erasure() == otherType) return currentType;", "+\t\t\tif (currentType == otherType || (!currentType.isTypeVariable() && currentType.erasure() == otherType)) return currentType;", "-\t\t\tif ((currentType = interfaces[j]) == otherType || currentType.erasure() == otherType)", "+\t\t\tif ((currentType = interfaces[j]) == otherType || (!currentType.isTypeVariable() && currentType.erasure() == otherType))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "613fcd11280a8b1e16629e739b4924f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b4a98585238f00ec169e6c6eb5998e9d404a7925", "commitAfterChange": "7c6fe4f21cb5ba3a5ee61e01b5b0b2742e043690", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 187, "signatureBeforeChange": "  \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": "  \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["+\t\tboolean java8Plus = this.compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8;", "+\t\t\t/* Searching of superinterfaces for candidate proposal methods can be skipped if current type is concrete, but only for source levels below 1.8.", "+\t\t\t   For 1.8 even a concrete type's superinterfaces should be searched as they could have default methods which are not implemented by the concrete", "+\t\t\t   type.", "+\t\t\t*/", "-\t\t\t\t\t(currentType.isAbstract() ||", "-\t\t\t\t\t\t\tcurrentType.isTypeVariable() ||", "-\t\t\t\t\t\t\tcurrentType.isIntersectionType() ||", "-\t\t\t\t\t\t\tcurrentType.isEnum())){", "+\t\t\t\t\t(java8Plus || (currentType.isAbstract() || currentType.isTypeVariable() || currentType.isIntersectionType() || currentType.isEnum()))) {", "-\t\t\t\thasPotentialDefaultAbstractMethods = false;", "+\t\t\t\tif (!java8Plus)", "+\t\t\t\t\thasPotentialDefaultAbstractMethods = false;"]}], "num": 44570}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1a4fa6c106a9b70191c2577fe706623", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad86d62d2ed602dd6131a3882b9e85b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 93, "signatureBeforeChange": " protected int getPosition()", "signatureAfterChange": " protected int getPosition()", "diff": ["-\ttry {", "-\t\tif (this.frames.pc != pos) {", "-\t\t\tStackMapFrame newFrame = (StackMapFrame) this.currentFrame.clone();", "-\t\t\tthis.frames.nextFrame = newFrame;", "-\t\t\tnewFrame.pc = pos;", "-\t\t\tnewFrame.prevFrame = this.frames;", "-\t\t\tthis.frames = newFrame;", "-\t\t\tframesCounter++;", "-\t\t} else {", "-\t\t\t// the frame already exists", "-\t\t\tthis.frames.tagBits |= StackMapFrame.USED;", "-\t\t}", "-\t} catch (CloneNotSupportedException e) {", "-\t\te.printStackTrace();", "-\t}\t\t", "+\tthis.framePositions.add(new Integer(this.position));", "+\tstoreStackMapFrame();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c470bf6dbbecc97c0b1c1c41412cdba1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java", "commitBeforeChange": "04ca8b8834b8d337f24654f163a38f7df436213a", "commitAfterChange": "caf8f2570058b398c8462d443be791a90c9aa823", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public RecoveredElement add(FieldDeclaration addedfieldDeclaration, int bracketBalanceValue)", "signatureAfterChange": " public RecoveredElement add(LocalDeclaration localDeclaration, int bracketBalanceValue)", "diff": ["+ */", "+public RecoveredElement add(LocalDeclaration localDeclaration, int bracketBalanceValue) {", "+\tif (this.lambdaNestLevel > 0) // current element is really the lambda which is recovered in full elsewhere.", "+\t\treturn this;", "+\treturn super.add(localDeclaration, bracketBalanceValue);", "+}"]}], "num": 73099}
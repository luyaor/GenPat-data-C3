{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "156dbf01bc0f416947d30d32923952e7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d67bdf83ea7b473f3228d9ee50be946", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 89, "signatureBeforeChange": "  \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny)", "signatureAfterChange": "  \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny, int emptyLineRules)", "diff": ["+", "+\tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny, int emptyLineRules) {", "-\t\tswitch (expectedTokenType) {", "-\t\t\tcase TerminalTokens.TokenNameRBRACE:", "-\t\t\tcase TerminalTokens.TokenNameLBRACE:", "-\t\t\t\tthis.formatBrace = true;", "-\t\t}", "+\t\tprintComment(CodeFormatter.K_UNKNOWN, NO_TRAILING_COMMENT, emptyLineRules);", "-\t\t\tprintComment(CodeFormatter.K_UNKNOWN, NO_TRAILING_COMMENT);", "-\t\t\ttry {", "-\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\t\tif (expectedTokenType != this.currentToken) {", "-\t\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t}", "-\t\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);", "-\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\tthrow new AbortFormatting(e);", "+\t\t\tthis.currentToken = this.scanner.getNextToken();", "+\t\t\tif (expectedTokenType != this.currentToken) {", "+\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "-\t\t}", "-\t\tfinally {", "-\t\t\t// Flush brace flag", "-\t\t\tswitch (expectedTokenType) {", "-\t\t\t\tcase TerminalTokens.TokenNameRBRACE:", "-\t\t\t\tcase TerminalTokens.TokenNameLBRACE:", "-\t\t\t\t\tthis.formatBrace = false;", "-\t\t\t}", "+\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);", "+\t\t} catch (InvalidInputException e) {", "+\t\t\tthrow new AbortFormatting(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd55d0b57e04f1d2fee783ff6da21e9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "  \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny)", "signatureAfterChange": "  \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny)", "diff": ["-\tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny){", "-\t\tprintComment(CodeFormatter.K_UNKNOWN);", "+\tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny) {", "+\t\t// Set brace flag, it's useful for the scribe while preserving line breaks", "+\t\tswitch (expectedTokenType) {", "+\t\t\tcase TerminalTokens.TokenNameRBRACE:", "+\t\t\tcase TerminalTokens.TokenNameLBRACE:", "+\t\t\t\tthis.formatBrace = true;", "+\t\t}", "-\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\tif (expectedTokenType != this.currentToken) {", "-\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\tprintComment(CodeFormatter.K_UNKNOWN);", "+\t\t\ttry {", "+\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "+\t\t\t\tif (expectedTokenType != this.currentToken) {", "+\t\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\tthrow new AbortFormatting(e);", "-\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);", "-\t\t} catch (InvalidInputException e) {", "-\t\t\tthrow new AbortFormatting(e);", "+\t\t}", "+\t\tfinally {", "+\t\t\t// Flush brace flag", "+\t\t\tswitch (expectedTokenType) {", "+\t\t\t\tcase TerminalTokens.TokenNameRBRACE:", "+\t\t\t\tcase TerminalTokens.TokenNameLBRACE:", "+\t\t\t\t\tthis.formatBrace = false;", "+\t\t\t}"]}], "num": 16095}
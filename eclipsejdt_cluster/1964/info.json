{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6917d57edb2a956bb2d089784974bd10", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5209948af82190b5a4557a54f04931b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4e18be61bf7160195c84b24f379f8c0aef589b1d", "commitAfterChange": "727fde87229b4ba953ad5eb0cdd915c994cdd159", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void testBug82208_SearchAllTypeNames_TYPE() throws CoreException", "signatureAfterChange": " \tpublic void testBug82208_SearchAllTypeNames_TYPE() throws CoreException", "diff": ["-\t\t\tgetJavaSearchScopeBugs(\"b82208\", false),", "+\t\t\tgetJavaSearchScopeBugs(),", "+\t\t\t\"b81556.a.A81556\\n\" + ", "+\t\t\t\"b81556.a.B81556\\n\" + ", "+\t\t\t\"b81556.a.X81556\\n\" + ", "+\t\t\t\"b81556.b.XX81556\\n\" + ", "-\t\t\t\"b82208.B82208_I\",", "+\t\t\t\"b82208.B82208_I\\n\" + ", "+\t\t\t\"b89848.Test\\n\" + ", "+\t\t\t\"b89848.X\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic$Member\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic$MemberGeneric\\n\" + ", "+\t\t\t\"g1.t.s.def.NonGeneric\\n\" + ", "+\t\t\t\"g1.t.s.def.NonGeneric$GenericMember\\n\" + ", "+\t\t\t\"g5.c.def.Multiple\\n\" + ", "+\t\t\t\"g5.c.def.Single\\n\" + ", "+\t\t\t\"g5.m.def.Multiple\\n\" + ", "+\t\t\t\"g5.m.def.Single\\n\" + ", "+\t\t\t\"java.io.Serializable\\n\" + ", "+\t\t\t\"java.lang.Class\\n\" + ", "+\t\t\t\"java.lang.CloneNotSupportedException\\n\" + ", "+\t\t\t\"java.lang.Comparable\\n\" + ", "+\t\t\t\"java.lang.Enum\\n\" + ", "+\t\t\t\"java.lang.Error\\n\" + ", "+\t\t\t\"java.lang.Exception\\n\" + ", "+\t\t\t\"java.lang.IllegalMonitorStateException\\n\" + ", "+\t\t\t\"java.lang.InterruptedException\\n\" + ", "+\t\t\t\"java.lang.Object\\n\" + ", "+\t\t\t\"java.lang.RuntimeException\\n\" + ", "+\t\t\t\"java.lang.String\\n\" + ", "+\t\t\t\"java.lang.Throwable\\n\" + ", "+\t\t\t\"java.lang.annotation.Annotation\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8848faae11d5df2fe08b878275a74307", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4e18be61bf7160195c84b24f379f8c0aef589b1d", "commitAfterChange": "727fde87229b4ba953ad5eb0cdd915c994cdd159", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic void testBug82208_SearchAllTypeNames_CLASS_AND_INTERFACE() throws CoreException", "signatureAfterChange": " \tpublic void testBug82208_SearchAllTypeNames_CLASS_AND_INTERFACE() throws CoreException", "diff": ["-\t\t\tgetJavaSearchScopeBugs(\"b82208\", false),", "+\t\t\tgetJavaSearchScopeBugs(),", "+\t\t// Remove enum and annotation", "+\t\t\t\"b81556.a.A81556\\n\" + ", "+\t\t\t\"b81556.a.B81556\\n\" + ", "+\t\t\t\"b81556.a.X81556\\n\" + ", "+\t\t\t\"b81556.b.XX81556\\n\" + ", "-\t\t\t\"b82208.B82208_I\",", "+\t\t\t//\"b82208.B82208_A\\n\" + ", "+\t\t\t//\"b82208.B82208_E\\n\" + ", "+\t\t\t\"b82208.B82208_I\\n\" + ", "+\t\t\t\"b89848.Test\\n\" + ", "+\t\t\t\"b89848.X\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic$Member\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic$MemberGeneric\\n\" + ", "+\t\t\t\"g1.t.s.def.NonGeneric\\n\" + ", "+\t\t\t\"g1.t.s.def.NonGeneric$GenericMember\\n\" + ", "+\t\t\t\"g5.c.def.Multiple\\n\" + ", "+\t\t\t\"g5.c.def.Single\\n\" + ", "+\t\t\t\"g5.m.def.Multiple\\n\" + ", "+\t\t\t\"g5.m.def.Single\\n\" + ", "+\t\t\t\"java.io.Serializable\\n\" + ", "+\t\t\t\"java.lang.Class\\n\" + ", "+\t\t\t\"java.lang.CloneNotSupportedException\\n\" + ", "+\t\t\t\"java.lang.Comparable\\n\" + ", "+\t\t\t\"java.lang.Enum\\n\" +  // Enum is not an enum in java.lang", "+\t\t\t\"java.lang.Error\\n\" + ", "+\t\t\t\"java.lang.Exception\\n\" + ", "+\t\t\t\"java.lang.IllegalMonitorStateException\\n\" + ", "+\t\t\t\"java.lang.InterruptedException\\n\" + ", "+\t\t\t\"java.lang.Object\\n\" + ", "+\t\t\t\"java.lang.RuntimeException\\n\" + ", "+\t\t\t\"java.lang.String\\n\" + ", "+\t\t\t\"java.lang.Throwable\\n\" +", "+\t\t\t\"java.lang.annotation.Annotation\", // Annotation is an interface in java.lang"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91e5f96fd97aeb49d1f53cdef2a7d528", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "2575677ccf79826ae518b108e29fbe307f660188", "commitAfterChange": "b243eb08a74352504ffb14aeb81edca5ce327ed3", "methodNumberBeforeChange": 921, "methodNumberAfterChange": 921, "signatureBeforeChange": " public void _test915()", "signatureAfterChange": " public void test915()", "diff": ["-public void _test915() {", "+public void test915() {", "-\t\t\t\"public class X <T> {\\n\" + ", "-\t\t\t\"    class Y extends Throwable {\\n\" + // missing error ", "-\t\t\t\"        private static final long serialVersionUID = 1L;\\n\" + ", "-\t\t\t\"        T t;\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"    class Z<U> extends Throwable {\\n\" + ", "-\t\t\t\"        private static final long serialVersionUID = 1L;\\n\" + ", "-\t\t\t\"        T t;\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"}\\n\",", "+\t\t\t\"public class X<T> {\\n\" + ", "+\t\t\t\"\tclass Y1 extends Throwable {\\n\" + ", "+\t\t\t\"\t\tprivate static final long serialVersionUID = 1L;\\n\" + ", "+\t\t\t\"\t\tT t;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tstatic class Y2 extends Throwable {\\n\" + ", "+\t\t\t\"\t\tprivate static final long serialVersionUID = 1L;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tclass Y3<U> extends Throwable {\\n\" + ", "+\t\t\t\"\t\tprivate static final long serialVersionUID = 1L;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\t\tT t;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class Y4<E> extends Throwable {}\\n\" + ", "+\t\t\t\"\\n\",", "-\t\t\"SHOULD COMPLAIN FOR Z AND Y\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tclass Y1 extends Throwable {\\n\" + ", "+\t\t\"\t                 ^^^^^^^^^\\n\" + ", "+\t\t\"The generic class X<T>.Y1 may not subclass java.lang.Throwable\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tclass Y3<U> extends Throwable {\\n\" + ", "+\t\t\"\t                    ^^^^^^^^^\\n\" + ", "+\t\t\"The generic class X<T>.Y3<U> may not subclass java.lang.Throwable\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"\tclass Y4<E> extends Throwable {}\\n\" + ", "+\t\t\"\t      ^^\\n\" + ", "+\t\t\"The serializable class Y4 does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"\tclass Y4<E> extends Throwable {}\\n\" + ", "+\t\t\"\t                    ^^^^^^^^^\\n\" + ", "+\t\t\"The generic class Y4<E> may not subclass java.lang.Throwable\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "925add0bd76a65b6c916f14689cecda8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4e18be61bf7160195c84b24f379f8c0aef589b1d", "commitAfterChange": "727fde87229b4ba953ad5eb0cdd915c994cdd159", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic void testBug82208_SearchAllTypeNames_CLASS_AND_ENUM() throws CoreException", "signatureAfterChange": " \tpublic void testBug82208_SearchAllTypeNames_CLASS_AND_ENUM() throws CoreException", "diff": ["-\t\t\tgetJavaSearchScopeBugs(\"b82208\", false),", "+\t\t\tgetJavaSearchScopeBugs(),", "+\t\t// Remove interface and annotation", "+\t\t\t\"b81556.a.A81556\\n\" + ", "+\t\t\t\"b81556.a.B81556\\n\" + ", "+\t\t\t\"b81556.a.X81556\\n\" + ", "+\t\t\t\"b81556.b.XX81556\\n\" + ", "-\t\t\t\"b82208.B82208_E\",", "+\t\t\t//\"b82208.B82208_A\\n\" + ", "+\t\t\t\"b82208.B82208_E\\n\" + ", "+\t\t\t//\"b82208.B82208_I\\n\" + ", "+\t\t\t\"b89848.Test\\n\" + ", "+\t\t\t\"b89848.X\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic$Member\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic$MemberGeneric\\n\" + ", "+\t\t\t\"g1.t.s.def.NonGeneric\\n\" + ", "+\t\t\t\"g1.t.s.def.NonGeneric$GenericMember\\n\" + ", "+\t\t\t\"g5.c.def.Multiple\\n\" + ", "+\t\t\t\"g5.c.def.Single\\n\" + ", "+\t\t\t\"g5.m.def.Multiple\\n\" + ", "+\t\t\t\"g5.m.def.Single\\n\" + ", "+\t\t\t//\"java.io.Serializable\\n\" + ", "+\t\t\t\"java.lang.Class\\n\" + ", "+\t\t\t\"java.lang.CloneNotSupportedException\\n\" + ", "+\t\t\t//\"java.lang.Comparable\\n\" + ", "+\t\t\t\"java.lang.Enum\\n\" + ", "+\t\t\t\"java.lang.Error\\n\" + ", "+\t\t\t\"java.lang.Exception\\n\" + ", "+\t\t\t\"java.lang.IllegalMonitorStateException\\n\" + ", "+\t\t\t\"java.lang.InterruptedException\\n\" + ", "+\t\t\t\"java.lang.Object\\n\" + ", "+\t\t\t\"java.lang.RuntimeException\\n\" + ", "+\t\t\t\"java.lang.String\\n\" + ", "+\t\t\t\"java.lang.Throwable\",", "+\t\t\t//\"java.lang.annotation.Annotation\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a52cc0a673a70be43e5a51adfb4d147d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4e18be61bf7160195c84b24f379f8c0aef589b1d", "commitAfterChange": "727fde87229b4ba953ad5eb0cdd915c994cdd159", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic void testBug82208_SearchAllTypeNames_CLASS() throws CoreException", "signatureAfterChange": " \tpublic void testBug82208_SearchAllTypeNames_CLASS() throws CoreException", "diff": ["-\t\t\tnull,", "+\t\t\tIIndexConstants.ONE_STAR,", "-\t\t\tgetJavaSearchScopeBugs(\"b82208\", false),", "+\t\t\tgetJavaSearchScopeBugs(),", "+\t\t// Remove interface, enum and annotation", "-\t\t\t\"b82208.B82208\",", "+\t\t\t\"b81556.a.A81556\\n\" + ", "+\t\t\t\"b81556.a.B81556\\n\" + ", "+\t\t\t\"b81556.a.X81556\\n\" + ", "+\t\t\t\"b81556.b.XX81556\\n\" + ", "+\t\t\t\"b82208.B82208\\n\" + ", "+\t\t\t//\"b82208.B82208_A\\n\" + ", "+\t\t\t//\"b82208.B82208_E\\n\" + ", "+\t\t\t//\"b82208.B82208_I\\n\" + ", "+\t\t\t\"b89848.Test\\n\" + ", "+\t\t\t\"b89848.X\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic$Member\\n\" + ", "+\t\t\t\"g1.t.s.def.Generic$MemberGeneric\\n\" + ", "+\t\t\t\"g1.t.s.def.NonGeneric\\n\" + ", "+\t\t\t\"g1.t.s.def.NonGeneric$GenericMember\\n\" + ", "+\t\t\t\"g5.c.def.Multiple\\n\" + ", "+\t\t\t\"g5.c.def.Single\\n\" + ", "+\t\t\t\"g5.m.def.Multiple\\n\" + ", "+\t\t\t\"g5.m.def.Single\\n\" + ", "+\t\t\t//\"java.io.Serializable\\n\" + ", "+\t\t\t\"java.lang.Class\\n\" + ", "+\t\t\t\"java.lang.CloneNotSupportedException\\n\" + ", "+\t\t\t//\"java.lang.Comparable\\n\" + ", "+\t\t\t\"java.lang.Enum\\n\" +  // Enum is not an enum in java.lang", "+\t\t\t\"java.lang.Error\\n\" + ", "+\t\t\t\"java.lang.Exception\\n\" + ", "+\t\t\t\"java.lang.IllegalMonitorStateException\\n\" + ", "+\t\t\t\"java.lang.InterruptedException\\n\" + ", "+\t\t\t\"java.lang.Object\\n\" + ", "+\t\t\t\"java.lang.RuntimeException\\n\" + ", "+\t\t\t\"java.lang.String\\n\" + ", "+\t\t\t\"java.lang.Throwable\",", "+\t\t\t//\"java.lang.annotation.Annotation\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab27bbd648fd7c4290e174e5bce74a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testBinary08()", "signatureAfterChange": " \tpublic void testBinary08()", "diff": ["+\t\trunNegativeTestWithLibs(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"p/X1.java\",", "+\t\t\t\t\t\"package p;\\n\" +", "+\t\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\t\t\"public abstract class X1 {\\n\" +", "+\t\t\t\t\t\"    public class Inner {}\\n\" +", "+\t\t\t\t\t\"    public Object []@NonNull[] arrays(Object @NonNull[][] oa1) { return null; }\\n\" +", "+\t\t\t\t\t\"    public void nesting(@NonNull Inner i1, X1.@Nullable Inner i2) { }\\n\" +", "+\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends @NonNull X1> l) { } // contradiction\\n\" +", "+\t\t\t\t\t\"    public void wildcard2(List<? super @NonNull X1> l) { }\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\tcustomOptions,", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in p\\\\X1.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic void wildcard1(List<@Nullable ? extends @NonNull X1> l) { } // contradiction\\n\" + ", "+\t\t\t\t\"\t                                               ^^^^^^^^\\n\" + ", "+\t\t\t\t\"This nullness annotation conflicts with a \\'@Nullable\\' annotation which is effective on the same type parameter \\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t// fix the error:", "-\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends @NonNull X1> l) { }\\n\" + // contradiction", "+\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends X1> l) { }\\n\" +", "-// FIXME(stephan): add desired error messages:", "+", "-//\t\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\t\"import java.util.*;\\n\" +", "-\t\t\t\t\t\"\t\tObject @NonNull[][] a = new Object[0][];\\n\" + // unsafe", "-\t\t\t\t\t\"\t\tx.arrays(a)[0] = null;\\n\" + // illegal", "-\t\t\t\t\t\"\t\tx.nesting(null, null);\\n\" + // 1st null is illegal", "-//\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@NonNull Object>());\\n\" +", "+\t\t\t\t\t\"\t\tObject @NonNull[][] a = new Object[0][]; // unsafe\\n\" +", "+\t\t\t\t\t\"\t\tx.arrays(a)[0] = null; // illegal\\n\" +", "+\t\t\t\t\t\"\t\tx.nesting(null, null); // 1st null is illegal\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@NonNull Object>());\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@Nullable Object>()); // incompatible(1)\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard1(new ArrayList<@NonNull X1>()); // incompatible(2)\\n\" +", "-//\t\t\t\t\"1. ERROR in Y1.java (at line 5)\\n\" + ", "-//\t\t\t\t\"\tX1<@Nullable String> maybeStrings;\\n\" + ", "-//\t\t\t\t\"\t   ^^^^^^^^^^^^^^^^\\n\" + ", "-//\t\t\t\t\"Incompatible type argument ...\\n\" + ", "-//\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. WARNING in Y1.java (at line 5)\\n\" + ", "-\t\t\t\t\"\tObject @NonNull[][] a = new Object[0][];\\n\" + ", "+\t\t\t\t\"1. WARNING in Y1.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tObject @NonNull[][] a = new Object[0][]; // unsafe\\n\" + ", "-\t\t\t\t\"2. ERROR in Y1.java (at line 6)\\n\" + ", "-\t\t\t\t\"\tx.arrays(a)[0] = null;\\n\" + ", "+\t\t\t\t\"2. ERROR in Y1.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tx.arrays(a)[0] = null; // illegal\\n\" + ", "-\t\t\t\t\"3. ERROR in Y1.java (at line 7)\\n\" + ", "-\t\t\t\t\"\tx.nesting(null, null);\\n\" + ", "+\t\t\t\t\"3. ERROR in Y1.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tx.nesting(null, null); // 1st null is illegal\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in Y1.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tx.wildcard2(new ArrayList<@Nullable Object>()); // incompatible(1)\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<? super @NonNull X1>\\' but this expression has type \\'ArrayList<@Nullable Object>\\'\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in Y1.java (at line 11)\\n\" + ", "+\t\t\t\t\"\tx.wildcard1(new ArrayList<@NonNull X1>()); // incompatible(2)\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<@Nullable ? extends p.X1>\\' but this expression has type \\'ArrayList<@NonNull X1>\\'\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faad9143a5a9c9e24d516b3f310512f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "6afa93473446fb2c6b874f92c72045670997535f", "commitAfterChange": "e9d42bfbf494b3bd89965c526aaae07d7189c12c", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \t \tpublic void testBug416174()", "signatureAfterChange": " \tpublic void testBug416174()", "diff": ["+\t// incompatible null constraints on parameters ", "-\t\t// FIXME(stephan): should report null spec violation", "-\t\trunConformTestWithLibs(", "+\t\tMap options = getCompilerOptions();", "+\t\toptions.put(JavaCore.COMPILER_PB_NONNULL_PARAMETER_ANNOTATION_DROPPED, JavaCore.IGNORE);", "+\t\trunNegativeTestWithLibs(", "-\t\t\t\t\"import org.eclipse.jdt.annotation.NonNull;\\n\" + ", "+\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" + ", "-\t\t\t\t\"\tvoid  foo(List<X> lx) {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tvoid  foo1(List<X> lx) {}\\n\" +", "+\t\t\t\t\"\tvoid  foo2(List<@NonNull X> lx) {}\\n\" +", "+\t\t\t\t\"\tvoid  foo3(List<@Nullable X> lx) {}\\n\" +", "+\t\t\t\t\"\tvoid  foo4(@NonNull List<@Nullable X> lx) {}\\n\" +", "-\t\t\t\t\"\tvoid  foo(List<@NonNull X> xy) {\\n\" + ", "+\t\t\t\t\"\t@Override void foo1(List<@NonNull X> xy) {}\\n\" + ", "+\t\t\t\t\"\t@Override void foo2(List<X> lx) {}\\n\" +", "+\t\t\t\t\"\t@Override void foo3(List<X> lx) {}\\n\" +", "+\t\t\t\t\"\t@Override void foo4(List<@Nullable X> lx) {}\\n\" + // omitting annotation at toplevel can be tolerated (via option)", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\toptions,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tclass Z extends X {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The method foo1(List<@NonNull X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tclass Z extends X {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The method foo2(List<X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tclass Z extends X {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The method foo3(List<X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}", "-\t\t\t\"1. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tvoid  foo(List<@NonNull X> xy) {\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method foo(List<X>) of type Z should be tagged with @Override since it actually overrides a superclass method\\n\" + "]}], "num": 1964}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9d3669ce2319c43dead68abb834f45c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0983e2eacf739e9d12c9d58b0edce209", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void test_nonnull_return_009b()", "signatureAfterChange": " public void _test_nonnull_return_009b()", "diff": ["-public void test_nonnull_return_009b() {", "+public void _test_nonnull_return_009b() {", "-\trunNegativeTestWithLibs(", "+\trunConformTestWithLibs(", "-// Ideally we would see a second error, but when comparing local (depends on loop) with @NonNull", "-// we would have to include @NonNull into deferred checking :(", "-//\t\t\"----------\\n\" +", "-//\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "-//\t\t\"\tif (left != getObject())\\n\" +", "-//\t\t\"\t            ^^^^^^^^^^^\\n\" +", "-//\t\t\"Redundant null check: The method getObject() cannot return null\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "+\t\t\"\tif (left != getObject())\\n\" +", "+\t\t\"\t            ^^^^^^^^^^^\\n\" +", "+\t\t\"Redundant null check: The method getObject() cannot return null\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "321e2ab0a5663b1459f5688997b42537", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "aaa43eec904e27741de5c55121881f4c0383d53f", "commitAfterChange": "0ffd32ee08cd2dc832efa1134a050b16b350c66a", "methodNumberBeforeChange": 901, "methodNumberAfterChange": 901, "signatureBeforeChange": " public void _test0881()", "signatureAfterChange": " public void test0881()", "diff": ["-public void _test0881() {", "+public void test0881() {", "-\t\t\"Cannot cast from List<Object> to String\\n\" + ", "+\t\t\"Cannot cast from List<List<U>> to String\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tString s = (String) Foo.foo();\\n\" + ", "+\t\t\"\t                        ^^^\\n\" + ", "+\t\t\"Bound mismatch: The generic method foo() of type Foo is not applicable for the arguments (). The inferred type List<List<U>> is not a valid substitute for the bounded parameter <U extends List<U>>\\n\" + "]}], "num": 61374}
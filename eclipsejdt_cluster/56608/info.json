{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74a6d27c2c60b546df858cae50b12015", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4e22ed58565a9c5779ce35b8166dde2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "3fa437321fe88b141d60a98c3b39cea46c7fbc44", "commitAfterChange": "ac6a9f56760bba7aec9ca8548c00a789a95fdc11", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r void removePackage(IResourceDelta sourceDelta)", "signatureAfterChange": "\r \r void removePackage(IResourceDelta sourceDelta)", "diff": ["-\tIPath location = sourceDelta.getResource().getLocation();\r", "-\tString extension = location.getFileExtension();\r", "-\tif (extension == null) { // no extension indicates a folder\r", "-\t\tIResourceDelta[] children = sourceDelta.getAffectedChildren();\r", "-\t\tfor (int i = 0, length = children.length; i < length; ++i)\r", "-\t\t\tremovePackage(children[i]);\r", "-\t} else if (JavaBuilder.JAVA_EXTENSION.equalsIgnoreCase(extension)) {\r", "-\t\tremove(location);\r", "+\tIResource resource = sourceDelta.getResource();\r", "+\tswitch(resource.getType()) {\r", "+\t\tcase IResource.FOLDER :\r", "+\t\t\tIResourceDelta[] children = sourceDelta.getAffectedChildren();\r", "+\t\t\tfor (int i = 0, length = children.length; i < length; ++i)\r", "+\t\t\t\tremovePackage(children[i]);\r", "+\t\t\treturn;\r", "+\t\tcase IResource.FILE :\r", "+\t\t\tIPath location = resource.getLocation();\r", "+\t\t\tif (JavaBuilder.JAVA_EXTENSION.equalsIgnoreCase(location.getFileExtension()))\r", "+\t\t\t\tremove(location);\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5b82d634903e34a797ac4ef6ed85455", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "6f4f90e2451f9fcdb6af6941acb2518968bd5fec", "commitAfterChange": "140d5208fae36b92de255acde8dd7fe538818d2b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void add(IFile resource, IPath indexedContainer)", "signatureAfterChange": "\r public void addBinary(IFile resource, IPath indexedContainer)", "diff": ["-public void add(IFile resource, IPath indexedContainer){\r", "-\tString extension = resource.getFileExtension();\r", "-\tif (\"java\".equals(extension)){ //$NON-NLS-1$\r", "-\t\tAddCompilationUnitToIndex job = new AddCompilationUnitToIndex(resource, this, indexedContainer);\r", "-\t\tif (this.awaitingJobsCount() < MAX_FILES_IN_MEMORY) {\r", "-\t\t\tjob.initializeContents();\r", "-\t\t}\r", "-\t\trequest(job);\r", "-\t} else if (\"class\".equals(extension)){ //$NON-NLS-1$\r", "-\t\tAddClassFileToIndex job = new AddClassFileToIndex(resource, this, indexedContainer);\r", "-\t\tif (this.awaitingJobsCount() < MAX_FILES_IN_MEMORY) {\r", "-\t\t\tjob.initializeContents();\r", "-\t\t}\r", "-\t\trequest(job);\r", "+ */\r", "+public void addBinary(IFile resource, IPath indexedContainer){\r", "+\tif (JavaCore.getPlugin() == null || this.workspace == null) return;\t\r", "+\tAddClassFileToIndex job = new AddClassFileToIndex(resource, this, indexedContainer);\r", "+\tif (this.awaitingJobsCount() < MAX_FILES_IN_MEMORY) {\r", "+\t\tjob.initializeContents();\r", "+\t}\r", "+\trequest(job);\r"]}], "num": 56608}
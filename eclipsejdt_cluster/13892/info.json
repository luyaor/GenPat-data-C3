{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cefe0f22bdd96ef682b985b6860a4b9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5da8385fd9970b4d1fe95db373d4ee74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModelTestsUtil.java", "commitBeforeChange": "471b30fcd9175fdd69611c88984722b9e0b5e4ee", "commitAfterChange": "1a356ccfb3b5b00256393a405276ebc654766b8b", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public static String trimLinesLeadingWhitespaces(String input)", "signatureAfterChange": " public static String trimLinesLeadingWhitespaces(String input)", "diff": ["-\t\tString line = tokenizer.nextToken().trim();", "-\t\tint index = line.indexOf('*');", "-\t\tif (index >= 0) {", "-\t\t\tint length = line.length();", "-\t\t\tif (length > 80 && line.charAt(length-1) == '>') { // should not happen:  bug of old formatter", "-\t\t\t\tint idx = line.lastIndexOf('<');", "-\t\t\t\tbuffer.append(line.substring(index+1, idx).trim());", "-\t\t\t\tbuffer.append(Util.LINE_SEPARATOR);", "-\t\t\t\tbuffer.append(line.substring(idx).trim());", "-\t\t\t\tcontinue;", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(line.substring(index+1).trim());", "+\t\tString line = tokenizer.nextToken();", "+\t\tint length = line.length();", "+\t\tint size = 0;", "+\t\tint idx = -1;", "+\t\tif (length > 0) {", "+\t\t\tloop: while ((idx+1) < length) {", "+\t\t\t\tchar ch = line.charAt(++idx);", "+\t\t\t\tswitch (ch) {", "+\t\t\t\t\tcase '\\t':", "+\t\t\t\t\t\tsize += 4;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '*':", "+\t\t\t\t\tcase ' ':", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tbreak loop;", "+\t\t\t\t}", "+\t\t}", "+\t\tif (length > 0 && idx > 0 && idx < length) {", "+\t\t\tint splitLineIndex = line.indexOf(\"||\", idx);", "+\t\t\tif (splitLineIndex > 0) {", "+\t\t\t\tint commentStart = line.indexOf(\"/*\", splitLineIndex);", "+\t\t\t\tif (commentStart >= 80-((size*3)/4)) {", "+\t\t\t\t\tStringBuffer newLine = new StringBuffer(line.substring(idx-1, splitLineIndex).trim());", "+\t\t\t\t\tnewLine.append('\\n');", "+\t\t\t\t\tnewLine.append(line.substring(splitLineIndex).trim());", "+\t\t\t\t\tnewLine.append('\\n');", "+\t\t\t\t\tbuffer.append(newLine);", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbuffer.append(line.substring(idx).trim());", "-\t\tbuffer.append(Util.LINE_SEPARATOR);", "+\t\tbuffer.append('\\n');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79e674f14d6b4a4b08458ffbc55d60d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "ddf48a7e21056eecd0111cd750a59c8617c397eb", "commitAfterChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void addBound(TypeBound bound, LookupEnvironment environment)", "signatureAfterChange": "  \tpublic void addBound(TypeBound bound, LookupEnvironment environment)", "diff": ["-\t\tif (bound.equals(this.mostRecentBounds[0]) || bound.equals(this.mostRecentBounds[1]) || bound.equals(this.mostRecentBounds[2]) || bound.equals(this.mostRecentBounds[3])) {", "-\t\t\treturn;", "+\t\tfor (int recent = 0; recent < 4; recent++) {", "+\t\t\tif (bound.equals(this.mostRecentBounds[recent])) {", "+\t\t\t\tif (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\t\t\tTypeBound existing = this.mostRecentBounds[recent];", "+\t\t\t\t\tlong boundNullBits = bound.right.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\tlong existingNullBits = existing.right.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\tif (boundNullBits != existingNullBits) {", "+\t\t\t\t\t\tif (existingNullBits == 0)", "+\t\t\t\t\t\t\texisting.right = bound.right;", "+\t\t\t\t\t\telse if (boundNullBits != 0) // combine bits from both sources, even if this creates a contradiction", "+\t\t\t\t\t\t\texisting.right = environment.createAnnotatedType(existing.right, environment.nullAnnotationsFromTagBits(boundNullBits));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t}"]}], "num": 13892}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3344d254105512a8f067ee7118c9365f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0630c80f440ec0e91707d46f55ed604", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "736a3352edee05c04aa96eb4323328cfa8fdbdd5", "commitAfterChange": "9c251eade23f2143003635a87c2f3f96ae52d898", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "diff": ["-\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length;i++) {", "-\t\t\t\t\t\tif (arguments[i].isWildcard() && arguments[i].isProperType(true)) {", "-\t\t\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) arguments[i];", "-\t\t\t\t\t\t\tSourceTypeBinding contextType = inferenceContext.scope.enclosingSourceType();", "-\t\t\t\t\t\t\tint position = invocationSite.sourceEnd();", "-\t\t\t\t\t\t\tCompilationUnitScope compilationUnitScope = inferenceContext.scope.compilationUnitScope();", "-\t\t\t\t\t\t\tASTNode cud = compilationUnitScope.referenceContext;", "-\t\t\t\t\t\t\tfinal int captureID = compilationUnitScope.nextCaptureID();", "-\t\t\t\t\t\t\tCaptureBinding capture = inferenceContext.environment.createCapturedWildcard(wildcard, contextType, position, cud, captureID);", "+\t\t\t\t\tparameterizedType = parameterizedType.capture(inferenceContext.scope, invocationSite.sourceEnd());", "+\t\t\t\t\targuments = parameterizedType.arguments;", "+\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "+\t\t\t\t\t\tif (arguments[i].isCapture() && arguments[i].isProperType(true)) {", "+\t\t\t\t\t\t\tCaptureBinding capture = (CaptureBinding) arguments[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdb840578f9c4ef0e4eaad95f8af9e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "commitAfterChange": "192820efad9191d4773fbd88aa6d8a5ea915ea14", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "diff": ["-\t\t\t\tinferenceContext.currentBounds.captures.put(gbeta, parameterizedType.capture(inferenceContext.scope, invocationSite.sourceEnd())); // established: both types have nonnull arguments", "+\t\t\t\tinferenceContext.currentBounds.captures.put(gbeta, parameterizedType); // established: both types have nonnull arguments", "+\t\t\t\tif (InferenceContext18.SHOULD_WORKAROUND_BUG_JDK_8054721) {", "+\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length;i++) {", "+\t\t\t\t\t\tif (arguments[i].isWildcard() && arguments[i].isProperType(true)) {", "+\t\t\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) arguments[i];", "+\t\t\t\t\t\t\tSourceTypeBinding contextType = inferenceContext.scope.enclosingSourceType();", "+\t\t\t\t\t\t\tint position = invocationSite.sourceEnd();", "+\t\t\t\t\t\t\tCompilationUnitScope compilationUnitScope = inferenceContext.scope.compilationUnitScope();", "+\t\t\t\t\t\t\tASTNode cud = compilationUnitScope.referenceContext;", "+\t\t\t\t\t\t\tfinal int captureID = compilationUnitScope.nextCaptureID();", "+\t\t\t\t\t\t\tCaptureBinding capture = inferenceContext.environment.createCapturedWildcard(wildcard, contextType, position, cud, captureID);", "+\t\t\t\t\t\t\tinferenceContext.currentBounds.addBound(new TypeBound(betas[i], capture, SAME), inferenceContext.environment);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 41055}
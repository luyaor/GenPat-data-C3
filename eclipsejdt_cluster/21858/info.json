{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "949f3ce89072d79e4667ef7233ed63c4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc61ddb85d6736315fcc09fda8d23aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b7727722e1a93459ec6844ad6bb94bb1a32aeb2c", "commitAfterChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " protected void consumeAnnotationAsModifier()", "signatureAfterChange": " protected void consumeAnnotationAsModifier()", "diff": ["-\t// nothing to do", "+\tExpression expression = this.expressionStack[this.expressionPtr];", "+\tint sourceStart = expression.sourceStart;", "+\tif (this.modifiersSourceStart < 0) {", "+\t\tthis.modifiersSourceStart = sourceStart;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e5c331237bce32672cfd390c4eaf3d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " Compiler getCompiler(ICompilerRequestor compilerRequestor)", "signatureAfterChange": " Compiler getCompiler(ICompilerRequestor compilerRequestor)", "diff": ["+\t\tCompilerOptions compilerOptions = new CompilerOptions(this.options);", "+\t\tcompilerOptions.performStatementsRecovery = true;", "-\t\t\t\tthis.options, ", "+\t\t\t\tcompilerOptions, ", "+\t\tCompilerOptions compilerOptions = new CompilerOptions(this.options);", "+\t\tcompilerOptions.performStatementsRecovery = true;", "-\t\t\tthis.options, ", "+\t\t\tcompilerOptions, ", "-\t\t\tthis.problemFactory,", "-\t\t\ttrue);", "+\t\t\tthis.problemFactory);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c53eefc11d25fdd91e8c89ceb4e7504", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "5ac69e31344394af6d85649e5081c2926d966cc9", "commitAfterChange": "ef203494907c105d5c35d08d20d674c5bd671720", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " protected void consumeAnnotationTypeDeclarationHeader()", "signatureAfterChange": " protected void consumeAnnotationTypeDeclarationHeader()", "diff": ["+\tTypeDeclaration annotationTypeDeclaration = (TypeDeclaration) this.astStack[this.astPtr];", "+\tif (this.currentToken == TokenNameLBRACE) {", "+\t\tannotationTypeDeclaration.bodyStart = this.scanner.currentPosition;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80718615a7d964f9578b6d3824df5228", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "6612336f81825afdf894aa053e2e886c83842e87", "commitAfterChange": "9cd17ece7cc1ac607f4f1302fc1a6d286dff9da1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "signatureAfterChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "diff": ["+\t\t\tfinal CompilerOptions compilerOptions = this.enclosingScope.compilerOptions();", "+\t\t\tboolean analyzeNPE = compilerOptions.isAnnotationBasedNullAnalysisEnabled;", "+\t\t\tcompilerOptions.isAnnotationBasedNullAnalysisEnabled = false;", "+\t\t\t\tcompilerOptions.isAnnotationBasedNullAnalysisEnabled = analyzeNPE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84ee2313b85f85dbba14cb710c527f08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "57c6f1028b04692f68dfd108df673050b30e07bb", "commitAfterChange": "60307c1e2e6ef1d38cf313e756af798e2166cf66", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void dispatchToFileBasedProcessor( \t\t\tfinal AbstractCompilationEnv processorEnv)", "signatureAfterChange": " \tprivate void dispatchToFileBasedProcessor( \t\t\tfinal AbstractCompilationEnv processorEnv, \t\t\tboolean projectEnablesReconcile, boolean isReconcile)", "diff": ["+\t */", "-\t\t\tfinal AbstractCompilationEnv processorEnv){", "+\t\t\tfinal AbstractCompilationEnv processorEnv,", "+\t\t\tboolean projectEnablesReconcile, boolean isReconcile){", "+\t\t\t//TODO in 3.4: also consider factory path attributes", "+\t\t\tboolean reconcileSupported = projectEnablesReconcile && ", "+\t\t\t\tAbstractCompilationEnv.doesFactorySupportReconcile(factory);", "+\t\t\tif (isReconcile && !reconcileSupported)", "+\t\t\t\tcontinue;", "-\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(factory);", "+\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(factory, reconcileSupported);", "-\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(null);", "+\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(null, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adb4d91f58fcdcf7c767a86a324e1884", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ProcessTaskManager.java", "commitBeforeChange": "4b2447f980b1f004d5d76b9cf416fd4398082a5b", "commitAfterChange": "9ab1542db1d40bdde11e7c06d8c1a2b268c6c336", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void run()", "signatureAfterChange": "  public void run()", "diff": ["+\tboolean noAnnotations = this.compiler.annotationProcessorManager == null;", "+\t\tboolean cleanup = noAnnotations || this.compiler.shouldCleanup(this.unitIndex);", "-\t\t\t\tif (this.unitToProcess != null)", "+\t\t\t\t// cleanup compilation unit result, but only if not annotation processed.", "+\t\t\t\tif (this.unitToProcess != null && cleanup)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd6dab1dd9c85f1ba3bb1b40abbd673d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "9fff7ba189be037b4cf4f61956b7e287259b8f6d", "commitAfterChange": "8f52c3e814b7d9e86327e186704f1c7e2be78c75", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic final ReferenceBinding findLocalType(char[] name)", "signatureAfterChange": " \tpublic final ReferenceBinding findLocalType(char[] name)", "diff": ["+\t    long compliance = environment().options.complianceLevel;", "-\t\t\t\tSourceTypeBinding sourceType =", "-\t\t\t\t\t((ClassScope) subscopes[i]).referenceContext.binding;", "+\t\t\t\tLocalTypeBinding sourceType = (LocalTypeBinding)((ClassScope) subscopes[i]).referenceContext.binding;", "+\t\t\t\t// from 1.4 on, local types should not be accessed across switch case blocks (52221)\t\t\t\t", "+\t\t\t\tif (compliance >= ClassFileConstants.JDK1_4 && sourceType.switchCase != this.switchCase) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3013192a8eab5ca2798844a0214c3f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "57c6f1028b04692f68dfd108df673050b30e07bb", "commitAfterChange": "60307c1e2e6ef1d38cf313e756af798e2166cf66", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate void runAPTInMixedMode(final BuildEnv processorEnv)", "signatureAfterChange": " \tprivate void runAPTInMixedMode(final BuildEnv processorEnv)", "diff": ["-\t\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(factory);", "+\t\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(factory, false);", "-\t\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(null);", "+\t\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(null, false);", "-\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(prevRoundFactory);", "+\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(prevRoundFactory, false);", "-\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(null);", "+\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(null, false);", "+\t\t\tboolean projectEnablesReconcile = AptConfig.shouldProcessDuringReconcile(_aptProject.getJavaProject());", "-\t\t\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(factory);", "+\t\t\t\t\t\t\t//TODO in 3.4: also consider factory path attributes", "+\t\t\t\t\t\t\tboolean willReconcile = projectEnablesReconcile && AbstractCompilationEnv.doesFactorySupportReconcile(factory);", "+\t\t\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(factory, willReconcile);", "-\t\t\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(null);", "+\t\t\t\t\t\t\tprocessorEnv.setCurrentProcessorFactory(null, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f59a2c38575770ca4b2fd3eefc3d9797", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "1b98b39107e931dc0893df1da7a410cad5cc4745", "commitAfterChange": "9635fd418f2d5b55fe3d3dc4ccb7797a5daf3a53", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " protected void consumeMemberValuePair()", "signatureAfterChange": " protected void consumeMemberValuePair()", "diff": ["-\t\tthis.popElement(K_ANNOTATION_ASSIGNMENT_OPERATOR);", "+\t\tMemberValuePair memberValuePair = (MemberValuePair) this.astStack[this.astPtr];", "+\t\tif(this.assistNode != null && memberValuePair.value == this.assistNode) {", "+\t\t\tthis.assistNodeParent = memberValuePair;", "+\t\t}"]}], "num": 21858}
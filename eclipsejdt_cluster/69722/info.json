{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f628c3919e3da058fba1e7d17f319fd5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a8ac38925fdb75673ec9658ea56fc4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  public void resetNullInfoForFields()", "signatureAfterChange": "  public void resetNullInfoForFields(UnconditionalFlowInfo fieldResetFlow)", "diff": ["-public void resetNullInfoForFields() {", "+public void resetNullInfoForFields(UnconditionalFlowInfo fieldResetFlow) {", "-\t\tmask |= this.constantFieldsMask;", "+\t\tmask |= fieldResetFlow.constantFieldsMask;", "-\t\tthis.nullBit1 |= ~mask;", "-\t\tthis.nullBit2 &= mask;", "-\t\tthis.nullBit3 &= mask;", "-\t\tthis.nullBit4 |= ~mask;", "+\t\tthis.nullBit1 = (this.nullBit1 & mask) | fieldResetFlow.nullBit1;", "+\t\tthis.nullBit2 = (this.nullBit2 & mask) | fieldResetFlow.nullBit2;", "+\t\tthis.nullBit3 = (this.nullBit3 & mask) | fieldResetFlow.nullBit3;", "+\t\tthis.nullBit4 = (this.nullBit4 & mask) | fieldResetFlow.nullBit4;", "+", "-\t\t\tif (this.extraConstantFieldMask != null){", "-\t\t\t\tfor (int vectorIndex = 0; vectorIndex < this.extra[2].length; vectorIndex++) {", "-\t\t\t\t    if (vectorIndex >= this.extraConstantFieldMask.length) {", "+\t\t\tfor (int vectorIndex = 0; vectorIndex < this.extra[2].length; vectorIndex++) {", "+\t\t\t\tif (fieldResetFlow.extraConstantFieldMask != null) {", "+\t\t\t\t    if (vectorIndex >= fieldResetFlow.extraConstantFieldMask.length) {", "-\t\t\t\t    \t\tmask = ((-1 << localsStartOffset) | this.extraConstantFieldMask[vectorIndex]);", "+\t\t\t\t    \t\tmask = ((-1 << localsStartOffset) | fieldResetFlow.extraConstantFieldMask[vectorIndex]);", "-\t\t\t\t    \t\tmask = 0L | this.extraConstantFieldMask[vectorIndex];", "+\t\t\t\t    \t\tmask = 0L | fieldResetFlow.extraConstantFieldMask[vectorIndex];", "-\t\t\t\t\tthis.extra[2][vectorIndex]", "-\t\t\t\t\t    |= ~mask;", "-\t\t\t\t\tthis.extra[3][vectorIndex] &= mask;", "-\t\t\t\t\tthis.extra[4][vectorIndex] &= mask;", "-\t\t\t\t\tthis.extra[5][vectorIndex] |= ~mask;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (vectorIndex == localsStartIndex) {", "+\t\t\t\t\t\t// some locals, some fields at this vectorIndex", "+\t\t\t\t\t\tmask = -1L << localsStartOffset;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// all fields here", "+\t\t\t\t\t\tmask = 0L;", "+\t\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// no constant fields", "-\t\t\t\tfor (int vectorIndex = 0; vectorIndex < this.extra[2].length; vectorIndex++) {", "-\t\t\t\t    if (vectorIndex == localsStartIndex) {", "-\t\t\t\t    \t// some locals, some fields at this vectorIndex", "-\t\t\t\t    \tmask = -1L << localsStartOffset;", "-\t\t\t\t    } else {", "-\t\t\t\t    \t// all fields here", "-\t\t\t\t    \tmask = 0L;", "-\t\t\t\t    }", "-\t\t\t\t\tthis.extra[2][vectorIndex]", "-\t\t\t\t\t    |= ~mask;", "-\t\t\t\t\tthis.extra[3][vectorIndex] &= mask;", "-\t\t\t\t\tthis.extra[4][vectorIndex] &= mask;", "-\t\t\t\t\tthis.extra[5][vectorIndex] |= ~mask;", "-\t\t\t\t}", "+\t\t\t    long reset1, reset2, reset3, reset4;", "+\t\t\t    if (fieldResetFlow.extra != null && fieldResetFlow.extra[2].length > vectorIndex) {", "+\t\t\t    \treset1 = fieldResetFlow.extra[2][vectorIndex];", "+\t\t\t    \treset2 = fieldResetFlow.extra[3][vectorIndex];", "+\t\t\t    \treset3 = fieldResetFlow.extra[4][vectorIndex];", "+\t\t\t    \treset4 = fieldResetFlow.extra[5][vectorIndex];", "+\t\t\t    } else {", "+\t\t\t    \t// no status recorded in fieldResetFlow, use def unknown instead:", "+\t\t\t    \treset1 = reset4 = 1;", "+\t\t\t    \treset2 = reset3 = 0;", "+\t\t\t    }", "+\t\t\t\tthis.extra[2][vectorIndex] = (this.extra[2][vectorIndex] & mask) | reset1;", "+\t\t\t\tthis.extra[3][vectorIndex] = (this.extra[3][vectorIndex] & mask) | reset2;", "+\t\t\t\tthis.extra[4][vectorIndex] = (this.extra[4][vectorIndex] & mask) | reset3;", "+\t\t\t\tthis.extra[5][vectorIndex] = (this.extra[5][vectorIndex] & mask) | reset4;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b48ee28bc60b4e4750ce70b2cb18a331", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " protected void consumeEnterVariable()", "signatureAfterChange": " protected void consumeEnterVariable()", "diff": ["-\tchar[] identifierName = identifierStack[identifierPtr];", "-\tlong namePosition = identifierPositionStack[identifierPtr];", "-\tint extendedDimension = intStack[intPtr--];", "+\tchar[] identifierName = this.identifierStack[this.identifierPtr];", "+\tlong namePosition = this.identifierPositionStack[this.identifierPtr];", "+\tint extendedDimension = this.intStack[this.intPtr--];", "-\tboolean isLocalDeclaration = nestedMethod[nestedType] != 0; ", "+\tboolean isLocalDeclaration = this.nestedMethod[this.nestedType] != 0; ", "-\tidentifierPtr--;", "-\tidentifierLengthPtr--;", "+\tthis.identifierPtr--;", "+\tthis.identifierLengthPtr--;", "-\tint variableIndex = variablesCounter[nestedType];", "+\tint variableIndex = this.variablesCounter[this.nestedType];", "-\t\t\tdeclaration.declarationSourceStart = intStack[intPtr--];", "-\t\t\tdeclaration.modifiers = intStack[intPtr--];", "-\t\t\ttype = getTypeReference(typeDim = intStack[intPtr--]); // type dimension", "+\t\t\tdeclaration.declarationSourceStart = this.intStack[this.intPtr--];", "+\t\t\tdeclaration.modifiers = this.intStack[this.intPtr--];", "+\t\t\ttype = getTypeReference(typeDim = this.intStack[this.intPtr--]); // type dimension", "-\t\t\ttype = getTypeReference(typeDim = intStack[intPtr--]); // type dimension", "+\t\t\ttype = getTypeReference(typeDim = this.intStack[this.intPtr--]); // type dimension", "-\t\t\tdeclaration.declarationSourceStart = intStack[intPtr--];", "-\t\t\tdeclaration.modifiers = intStack[intPtr--];", "+\t\t\tdeclaration.declarationSourceStart = this.intStack[this.intPtr--];", "+\t\t\tdeclaration.modifiers = this.intStack[this.intPtr--];", "-\t\ttype = (TypeReference) astStack[astPtr - variableIndex];", "+\t\ttype = (TypeReference) this.astStack[this.astPtr - variableIndex];", "-\t\t\t(AbstractVariableDeclaration) astStack[astPtr]; ", "+\t\t\t(AbstractVariableDeclaration) this.astStack[this.astPtr]; ", "-\t\tif ((baseType = identifierLengthStack[identifierLengthPtr + 1]) < 0) {", "+\t\tif ((baseType = this.identifierLengthStack[this.identifierLengthPtr + 1]) < 0) {", "-\tvariablesCounter[nestedType]++;", "+\tthis.variablesCounter[this.nestedType]++;", "-\tif (currentElement != null) {", "-\t\tif (!(currentElement instanceof RecoveredType)", "-\t\t\t&& (currentToken == TokenNameDOT", "+\tif (this.currentElement != null) {", "+\t\tif (!(this.currentElement instanceof RecoveredType)", "+\t\t\t&& (this.currentToken == TokenNameDOT", "-\t\t\t\t|| (scanner.getLineNumber(declaration.type.sourceStart)", "-\t\t\t\t\t\t!= scanner.getLineNumber((int) (namePosition >>> 32))))){", "-\t\t\tlastCheckPoint = (int) (namePosition >>> 32);", "-\t\t\trestartRecovery = true;", "+\t\t\t\t|| (this.scanner.getLineNumber(declaration.type.sourceStart)", "+\t\t\t\t\t\t!= this.scanner.getLineNumber((int) (namePosition >>> 32))))){", "+\t\t\tthis.lastCheckPoint = (int) (namePosition >>> 32);", "+\t\t\tthis.restartRecovery = true;", "-\t\t\tLocalDeclaration localDecl = (LocalDeclaration) astStack[astPtr];", "-\t\t\tlastCheckPoint = localDecl.sourceEnd + 1;", "-\t\t\tcurrentElement = currentElement.add(localDecl, 0);", "+\t\t\tLocalDeclaration localDecl = (LocalDeclaration) this.astStack[this.astPtr];", "+\t\t\tthis.lastCheckPoint = localDecl.sourceEnd + 1;", "+\t\t\tthis.currentElement = this.currentElement.add(localDecl, 0);", "-\t\t\tFieldDeclaration fieldDecl = (FieldDeclaration) astStack[astPtr];", "-\t\t\tlastCheckPoint = fieldDecl.sourceEnd + 1;", "-\t\t\tcurrentElement = currentElement.add(fieldDecl, 0);", "+\t\t\tFieldDeclaration fieldDecl = (FieldDeclaration) this.astStack[this.astPtr];", "+\t\t\tthis.lastCheckPoint = fieldDecl.sourceEnd + 1;", "+\t\t\tthis.currentElement = this.currentElement.add(fieldDecl, 0);", "-\t\tlastIgnoredToken = -1;", "+\t\tthis.lastIgnoredToken = -1;"]}], "num": 69722}
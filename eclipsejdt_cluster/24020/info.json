{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c0d306ba8778e080e175b536fd70664", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6795ea28b6ba6789dcf78ede209618fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-//public void match(FieldDeclaration node, MatchingNodeSet nodeSet) - SKIP IT", "-public void match(MethodDeclaration node, MatchingNodeSet nodeSet) {", "-\tif (!this.pattern.findDeclarations) return;", "+//public int match(FieldDeclaration node, MatchingNodeSet nodeSet) - SKIP IT", "+public int match(MethodDeclaration node, MatchingNodeSet nodeSet) {", "+\tif (!this.pattern.findDeclarations) return IMPOSSIBLE_MATCH;", "-\tif (!matchesName(this.pattern.selector, node.selector)) return;", "+\tif (!matchesName(this.pattern.selector, node.selector)) return IMPOSSIBLE_MATCH;", "-\t\tif (length != argsLength) return;", "+\t\tif (length != argsLength) return IMPOSSIBLE_MATCH;", "-\t\t\tif (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) return;", "+\t\t\tif (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) return IMPOSSIBLE_MATCH;", "-\tif (!matchesTypeReference(this.pattern.returnSimpleName, node.returnType)) return;", "+\tif (!matchesTypeReference(this.pattern.returnSimpleName, node.returnType)) return IMPOSSIBLE_MATCH;", "-\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7706be405ac51dfd604366218e4b30df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void match(Expression node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(Expression node, MatchingNodeSet nodeSet)", "diff": ["-public void match(Expression node, MatchingNodeSet nodeSet) { // interested in AllocationExpression", "-\tif (!this.pattern.findReferences) return;", "-\tif (!(node instanceof AllocationExpression)) return;", "+public int match(Expression node, MatchingNodeSet nodeSet) { // interested in AllocationExpression", "+\tif (!this.pattern.findReferences) return IMPOSSIBLE_MATCH;", "+\tif (!(node instanceof AllocationExpression)) return IMPOSSIBLE_MATCH;", "-\t\treturn;", "+\t\treturn IMPOSSIBLE_MATCH;", "-\t\tif (length != argsLength) return;", "+\t\tif (length != argsLength) return IMPOSSIBLE_MATCH;", "-\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);"]}], "num": 24020}
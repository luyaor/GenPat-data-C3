{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d168904dfa2345781ab67cac27a98c1c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f108cc8fcd4e4581a60672cdfefcc8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic boolean isPolyExpression() throws UnsupportedOperationException", "signatureAfterChange": " \t \tpublic boolean isPolyExpression() throws UnsupportedOperationException", "diff": ["-\t\treturn this.isPolyExpression;", "+\t\tif (this.isPolyExpression) // TODO(stephan): is this still used/needed?", "+\t\t\treturn true;", "+", "+\t\t// \"... unless both operands produce primitives (or boxed primitives)\":", "+\t\tTypeBinding opType = this.valueIfTrue.resolvedType;", "+\t\tif (opType != null) {", "+\t\t\tif (opType.isBaseType() || (opType.id >= TypeIds.T_JavaLangByte && opType.id <= TypeIds.T_JavaLangBoolean))", "+\t\t\t\treturn false;", "+\t\t}", "+\t\topType = this.valueIfFalse.resolvedType;", "+\t\tif (opType != null) {", "+\t\t\tif (opType.isBaseType() || (opType.id >= TypeIds.T_JavaLangByte && opType.id <= TypeIds.T_JavaLangBoolean))", "+\t\t\t\treturn false;", "+\t\t}", "+", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b134acce7676caadf429fdd05369cc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocArgumentExpression.java", "commitBeforeChange": "6cb1ee2c113971e09be9a0df169e31be32946ece", "commitAfterChange": "471f53ef0bd83fc3e916031568fa5c5d2d4e985d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\t\t\t} else if (typeRef instanceof QualifiedTypeReference) {", "+\t\t\t\t\tTypeBinding enclosingType = this.resolvedType.leafComponentType().enclosingType();", "+\t\t\t\t\tif (enclosingType != null) {", "+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=233187", "+\t\t\t\t\t\t// inner type references should be fully qualified", "+\t\t\t\t\t\tint compoundLength = 2;", "+\t\t\t\t\t\twhile ((enclosingType = enclosingType.enclosingType()) != null) compoundLength++;", "+\t\t\t\t\t\tcompoundLength+=this.resolvedType.getPackage().compoundName.length;", "+\t\t\t\t\t\tif (typeRef.getTypeName().length != compoundLength) {", "+\t\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(typeRef.sourceStart, typeRef.sourceEnd, scope.getDeclarationModifiers());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 35251}
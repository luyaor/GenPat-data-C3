{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59c60c0d34f5210f71658241548a7a3f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a9762ec99011de84d1f1804050b1243", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static boolean checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static boolean checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["+\t\tboolean is1_7 = scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_7;", "+\t\tif (is1_7 && method.isPolymorphic()) {", "+\t\t\treturn false;", "+\t\t}", "-\t\t    \tif (!parameterType.isReifiable()) {", "-\t\t\t\t    scope.problemReporter().unsafeGenericArrayForVarargs(parameterType, (ASTNode)invocationSite);", "-\t\t    \t}", "+\t\t\t\tif (!parameterType.isReifiable()", "+\t\t\t\t\t\t&& (!is1_7 || ((method.tagBits & TagBits.AnnotationSafeVarargs) == 0))) {", "+\t\t\t\t\tscope.problemReporter().unsafeGenericArrayForVarargs(parameterType, (ASTNode)invocationSite);", "+\t\t\t\t}", "-\t\t\t   int argLength = arguments.length;", "-\t\t\t   if (lastIndex <= argLength) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=337093", "-\t\t\t\t   \tTypeBinding parameterType = params[lastIndex];", "+\t\t\t\tint argLength = arguments.length;", "+\t\t\t\tif (lastIndex <= argLength) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=337093", "+\t\t\t\t\tTypeBinding parameterType = params[lastIndex];", "-\t\t\t\t    if (paramLength != argLength || parameterType.dimensions() != argumentTypes[lastIndex].dimensions()) {", "-\t\t\t\t    \tparameterType = ((ArrayBinding) parameterType).elementsType(); // single element was provided for vararg parameter", "-\t\t\t\t    \tif (!parameterType.isReifiable()) {", "-\t\t\t\t\t\t    scope.problemReporter().unsafeGenericArrayForVarargs(parameterType, (ASTNode)invocationSite);", "-\t\t\t\t    \t}", "+\t\t\t\t\tif (paramLength != argLength || parameterType.dimensions() != argumentTypes[lastIndex].dimensions()) {", "+\t\t\t\t\t\tparameterType = ((ArrayBinding) parameterType).elementsType(); // single element was provided for vararg parameter", "+\t\t\t\t\t\tif (!parameterType.isReifiable()", "+\t\t\t\t\t\t\t\t&& (!is1_7 || ((method.tagBits & TagBits.AnnotationSafeVarargs) == 0))) {", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeGenericArrayForVarargs(parameterType, (ASTNode)invocationSite);", "+\t\t\t\t\t\t}", "-\t\t\t\t    }", "+\t\t\t\t\t}", "-\t\t    scope.problemReporter().wildcardInvocation((ASTNode)invocationSite, receiverType, method, argumentTypes);", "+\t\t\tscope.problemReporter().wildcardInvocation((ASTNode)invocationSite, receiverType, method, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3967df270adf5912761fa0f22241346", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\tboolean complyTo15 = this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5;", "+\t\tboolean complyTo15OrAbove = this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5;", "+\t\tboolean compliance16 = this.scope.compilerOptions().complianceLevel == ClassFileConstants.JDK1_6;", "+\t\t", "+\t\t\tint severity = ProblemSeverities.Error;", "-\t\t\t\tif (complyTo15 ? !method.areParameterErasuresEqual(method2) : !method.areParametersEqual(method2))", "-\t\t\t\t\tcontinue nextSibling; // otherwise duplicates / name clash", "+\t\t\t\tif (complyTo15OrAbove) {", "+\t\t\t\t\tif (method.areParameterErasuresEqual(method2)) {", "+\t\t\t\t\t\t// we now ignore return types in 1.7 when detecting duplicates, just as we did before 1.5 ", "+\t\t\t\t\t\t// Only in 1.6, we have to make sure even return types are different", "+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=317719", "+\t\t\t\t\t\tif (compliance16 && method.returnType != null && method2.returnType != null) {", "+\t\t\t\t\t\t\tif (method.returnType.erasure() != method2.returnType.erasure()) {", "+\t\t\t\t\t\t\t\tseverity = ProblemSeverities.Warning;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// else return types also equal. All conditions satisfied", "+\t\t\t\t\t\t\t// to give error in 1.6 compliance as well.", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcontinue nextSibling;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (!method.areParametersEqual(method2)) {", "+\t\t\t\t\t// prior to 1.5, parameters identical meant a collision case", "+\t\t\t\t\tcontinue nextSibling;", "+\t\t\t\t}", "+\t\t\t\t// otherwise duplicates / name clash", "-\t\t\t\tboolean removeMethod2 = true;", "+\t\t\t\tboolean removeMethod2 = (severity == ProblemSeverities.Error) ? true : false; // do not remove if in 1.6 and just a warning given", "-\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, methodDecl, method.areParametersEqual(method2));", "+\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, methodDecl, method.areParametersEqual(method2), severity);", "-\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, method2Decl, method.areParametersEqual(method2));", "+\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, method2Decl, method.areParametersEqual(method2), severity);"]}], "num": 43240}
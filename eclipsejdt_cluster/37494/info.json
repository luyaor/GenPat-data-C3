{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0faeffefd314f3d174cd0ce95efc020", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "088d0154331cfdfff564fb64af229999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void record(CategorizedProblem newProblem, ReferenceContext referenceContext)", "signatureAfterChange": "  public void record(CategorizedProblem newProblem, ReferenceContext referenceContext)", "diff": ["-", "-\tpublic void record(CategorizedProblem newProblem, ReferenceContext referenceContext) {", "-", "-\t\t//new Exception(\"VERBOSE PROBLEM REPORTING\").printStackTrace();", "-\t\tif(newProblem.getID() == IProblem.Task) {", "-\t\t\t\trecordTask(newProblem);", "-\t\t\t\treturn;", "-\t\t}", "-\t\tif (problemCount == 0) {", "-\t\t\tproblems = new CategorizedProblem[5];", "-\t\t} else if (problemCount == problems.length) {", "-\t\t\tSystem.arraycopy(problems, 0, (problems = new CategorizedProblem[problemCount * 2]), 0, problemCount);", "-\t\t}", "-\t\tproblems[problemCount++] = newProblem;", "-\t\tif (referenceContext != null){", "-\t\t\tif (problemsMap == null) problemsMap = new HashMap(5);", "-\t\t\tif (firstErrors == null) firstErrors = new HashSet(5);", "-\t\t\tif (newProblem.isError() && !referenceContext.hasErrors()) firstErrors.add(newProblem);", "-\t\t\tproblemsMap.put(newProblem, referenceContext);", "-\t\t}", "-\t\tif ((newProblem.getID() & IProblem.Syntax) != 0 && newProblem.isError())", "-\t\t\tthis.hasSyntaxError = true;", "-\t}", "+", "+public void record(CategorizedProblem newProblem, ReferenceContext referenceContext) {", "+\t//new Exception(\"VERBOSE PROBLEM REPORTING\").printStackTrace();", "+\tif(newProblem.getID() == IProblem.Task) {", "+\t\t\trecordTask(newProblem);", "+\t\t\treturn;", "+\t}", "+\tif (this.problemCount == 0) {", "+\t\tthis.problems = new CategorizedProblem[5];", "+\t} else if (this.problemCount == this.problems.length) {", "+\t\tSystem.arraycopy(this.problems, 0, (this.problems = new CategorizedProblem[this.problemCount * 2]), 0, this.problemCount);", "+\t}", "+\tthis.problems[this.problemCount++] = newProblem;", "+\tif (referenceContext != null){", "+\t\tif (this.problemsMap == null) this.problemsMap = new HashMap(5);", "+\t\tif (this.firstErrors == null) this.firstErrors = new HashSet(5);", "+\t\tif (newProblem.isError() && !referenceContext.hasErrors()) this.firstErrors.add(newProblem);", "+\t\tthis.problemsMap.put(newProblem, referenceContext);", "+\t}", "+\tif ((newProblem.getID() & IProblem.Syntax) != 0 && newProblem.isError())", "+\t\tthis.hasSyntaxError = true;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f16ed6d16b1b5b6e55564e136045d23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tint treeSize()", "signatureAfterChange": " \tint treeSize()", "diff": ["-\t\t\t+ (getJavadoc() == null ? 0 : getJavadoc().treeSize())", "-\t\t\t+ (methodName == null ? 0 : getName().treeSize())", "-\t\t\t+ (returnType == null ? 0 : getReturnType().treeSize())", "-\t\t\t+ parameters.listSize()", "-\t\t\t+ thrownExceptions.listSize()", "-\t\t\t+ (optionalBody == null ? 0 : getBody().treeSize());", "+\t\t\t+ (this.optionalDocComment == null ? 0 : getJavadoc().treeSize())", "+\t\t\t+ (this.modifiers == null ? 0 : this.modifiers.listSize())", "+\t\t\t+ (this.typeParameters == null ? 0 : this.typeParameters.listSize())", "+\t\t\t+ (this.methodName == null ? 0 : getName().treeSize())", "+\t\t\t+ (this.returnType == null ? 0 : this.returnType.treeSize())", "+\t\t\t+ this.parameters.listSize()", "+\t\t\t+ this.thrownExceptions.listSize()", "+\t\t\t+ (this.optionalBody == null ? 0 : getBody().treeSize());"]}], "num": 37494}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30600ca24f346d9104acf18993947d36", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b07ab023b1eead3b9da2d023102b4cad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void testTypeReferenceBug73336c() throws CoreException", "signatureAfterChange": " \tpublic void testBug73336c() throws CoreException", "diff": ["+\t// Verify that no NPE was raised on following case (which produces compiler error)", "+\tpublic void testBug73336c() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = new ICompilationUnit[4];", "+\t\ttry {", "+\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/A.java\",", "+\t\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\t\"public class A {}\\n\",", "+\t\t\t\towner", "+\t\t\t\t);", "+\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/B.java\",", "+\t\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\t\"public class B extends X<A, A> {\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/C.java\",", "+\t\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\t\"public class C implements X<A, A>.Interface<A>  {\\n\" + ", "+\t\t\t\t\"\tvoid bar() {}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/X.java\",", "+\t\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\t\"public class X<T, U> {\\n\" + ", "+\t\t\t\t\"\tinterface Interface<V> {\\n\" + ", "+\t\t\t\t\"\t\tvoid bar();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue\t);", "+\t\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\t\tsearch(type,", "+\t\t\t\tREFERENCES,", "+\t\t\t\tgetJavaSearchScopeBugs(\"b73336c\", false), ", "+\t\t\t\tthis.resultCollector);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}", "-\t// Verify that no NPE was raised on following case (which produces compiler error)", "-\tpublic void testTypeReferenceBug73336c() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b73336c/A.java\").getType(\"A\");", "-\t\t", "-\t\tsearch(type,", "-\t\t\tREFERENCES,", "-\t\t\tgetJavaSearchScopeBugs(\"b73336c\", false), ", "-\t\t\tresultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0321072d1d24f10718f36efeb634bba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void testTypeReferenceBug73336b() throws CoreException", "signatureAfterChange": " \tpublic void testBug73336b() throws CoreException", "diff": ["+\t}", "+\tpublic void testBug73336b() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = new ICompilationUnit[4];", "+\t\ttry {", "+\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/A.java\",", "+\t\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\t\"public class A {}\\n\",", "+\t\t\t\towner", "+\t\t\t\t);", "+\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/B.java\",", "+\t\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\t\"public class B extends X<A, A> {\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/C.java\",", "+\t\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\t\"public class C extends X<A, A>.Member<A> {\\n\" + ", "+\t\t\t\t\"\tpublic C() {\\n\" + ", "+\t\t\t\t\"\t\tnew X<A, A>().super();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/X.java\",", "+\t\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\t\"public class X<T, U> {\\n\" + ", "+\t\t\t\t\"\t<V> void foo(V v) {}\\n\" + ", "+\t\t\t\t\"\tclass Member<T> {\\n\" + ", "+\t\t\t\t\"\t\tvoid foo() {}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue\t);", "+\t\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\t\tsearch(type,", "+\t\t\t\tREFERENCES,", "+\t\t\t\tgetJavaSearchScopeBugs(\"b73336b\", false), ", "+\t\t\t\tthis.resultCollector);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}", "-\t}", "-\tpublic void testTypeReferenceBug73336b() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b73336b/A.java\").getType(\"A\");", "-\t\t", "-\t\tsearch(type,", "-\t\t\tREFERENCES,", "-\t\t\tgetJavaSearchScopeBugs(\"b73336b\", false), ", "-\t\t\tresultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}"]}], "num": 25375}
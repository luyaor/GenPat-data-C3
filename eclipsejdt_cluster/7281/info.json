{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4a21705394964d01959c28c09449fab", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6edcce9e2a490e9589b719ffceed55b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate ASTNode[] computeMergedMemberDeclarations(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \t \tprivate ASTNode[] computeMergedMemberDeclarations(TypeDeclaration typeDeclaration)", "diff": ["+\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\t// filter out enum constants", "+\t\t\t\t\t\tpreviousFieldStart = fieldStart;", "+\t\t\t\t\t\tif (++fieldIndex < fieldCount) { // find next field if any", "+\t\t\t\t\t\t\tfieldStart = (field = typeDeclaration.fields[fieldIndex]).declarationSourceStart;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfieldStart = Integer.MAX_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6a49a4e92fb0c81f6088a5579df51da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void checkAndSetModifiersForField(FieldBinding fieldBinding, FieldDeclaration fieldDecl)", "signatureAfterChange": " \tprivate void checkAndSetModifiersForField(FieldBinding fieldBinding, FieldDeclaration fieldDecl)", "diff": ["+\t\t\treturn;", "+\t\t\t", "+\t\t} else if (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t// check that they are not modifiers in source", "+\t\t\tif ((modifiers & AccJustFlag) != 0)", "+\t\t\t\tproblemReporter().illegalModifierForEnumConstant(fieldBinding.declaringClass, fieldDecl);", "+\t\t", "+\t\t\t// set the modifiers", "+\t\t\tint implicitValue = AccPublic | AccStatic | AccFinal | AccEnumConstant;", "+\t\t\tfieldBinding.modifiers|= implicitValue;"]}], "num": 7281}
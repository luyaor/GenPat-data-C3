{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e77c5b86ea56f27abd07fb4de9fb714", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b535fa5832e5ffbe27db4467103a9fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "9e733725973bf60aeaebc889415ea2286c54f96e", "commitAfterChange": "3c311a61671e5b7f3b27e7c52a90844815a7ac27", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "signatureAfterChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "diff": ["-\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\t\t\t\t\t\t\t resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "+\t\t\t\t\t\t\t\t//resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "+\t\t\t\t\t\t\t\tresolvedEntry = containerEntries[j];\r", "-\t\t\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8b843c18209e1229c5b78e0811f71c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "dd7a18d099a9b8a557ed1fb7fc46e76ea5cfac10", "commitAfterChange": "61620cc52bd94ec88d2d4d64acf040dcf8022b0a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\t\t\t|| castType.isGenericType() ", "-\t\t\t\t|| \texpressionType.isBoundParameterizedType() ", "-\t\t\t\t|| expressionType.isGenericType())) {", "+\t\t\t\t|| \texpressionType.isBoundParameterizedType())) {", "-\t\t\t\tif ((!match.isParameterizedType() && !match.isGenericType())", "-\t\t\t\t\t\t|| expressionType.isRawType()) {", "+\t\t\t\tif (!match.isParameterizedType() || expressionType.isRawType()) {", "-\t\t\tif (expressionType.id == T_JavaLangObject && castType.isArrayType() && (leafType.isBoundParameterizedType() || leafType.isGenericType())) {", "+\t\t\tif (expressionType.id == T_JavaLangObject && castType.isArrayType() && leafType.isBoundParameterizedType()) {"]}], "num": 43897}
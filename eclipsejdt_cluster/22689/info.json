{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1346465500d59c5b47fba9fb38137927", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b487aa494c04f84a318a58b99cad071", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "027a5942c1f8a8df8288ac0e347e39e4a0c4c335", "commitAfterChange": "16d018b1beaec2325e8b119cf0432c848cb2dd74", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "signatureAfterChange": " \t \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "diff": ["-\tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress, boolean isSuppressingWarnings) {", "+\tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings) {", "-\t\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "+\t\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(inits[j]);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "-\t\t\t\t\t}", "+\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "+\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(value);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t", "-\t\t\tcompilationResult.recordSuppressWarnings(suppressWarningIrritants, startSuppresss, endSuppress);", "+\t\t\tscope.referenceCompilationUnit().compilationResult.recordSuppressWarnings(suppressWarningIrritants, startSuppresss, endSuppress);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de232227d5a70fb9e810c5b20a5a371e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "75626c86f330665d1108699a16e66c07439f9416", "commitAfterChange": "bef3e5a79fe47869598af3178c0ba26481433802", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "signatureAfterChange": " \t \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "diff": ["-\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "-\t\t\t\t\t\tConstant cst = inits[j].constant;", "-\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "-\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\t\tif (irritant != 0) {", "-\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "-\t\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(inits[j]);", "+\t\t\t\t\tif (inits != null) {", "+\t\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "+\t\t\t\t\t\t\tConstant cst = inits[j].constant;", "+\t\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "+\t\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "+\t\t\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(inits[j]);", "+\t\t\t\t\t\t\t\t}"]}], "num": 22689}
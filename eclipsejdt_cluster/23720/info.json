{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d98be74057ffda1e5cdf6ee076219edf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a15a57a3850e13e7877d535142267ce7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 43, "signatureBeforeChange": " protected void consumeOpenBlock()", "signatureAfterChange": " protected void consumeOpenBlock()", "diff": ["-", "+", "-\t\t\tthis.blockStarts, 0,", "-\t\t\tthis.blockStarts = new int[stackLength + StackIncrement], 0,", "-\t\t\tstackLength);", "+\t\t\t\tthis.blockStarts, 0,", "+\t\t\t\tthis.blockStarts = new int[stackLength + StackIncrement], 0,", "+\t\t\t\tstackLength);", "+\tif (requireExtendedRecovery()) {", "+\t\t// This is an epsilon production: We are in the state with kernel item: Block ::= .OpenBlock LBRACE BlockStatementsopt RBRACE", "+\t\tstackLength = this.stack.length;", "+\t\tif (++this.stateStackTop >= stackLength - 1) {   // Need two slots.", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.stack, 0,", "+\t\t\t\tthis.stack = new int[stackLength + StackIncrement], 0,", "+\t\t\t\tstackLength);", "+\t\t}", "+\t\tthis.stack[this.stateStackTop++] = this.unstackedAct; // transition to Block ::= OpenBlock  .LBRACE BlockStatementsopt RBRACE", "+\t\tthis.stack[this.stateStackTop] = tAction(this.unstackedAct, this.currentToken); // transition to Block ::= OpenBlock LBRACE  .BlockStatementsopt RBRACE ", "+\t\tcommit();", "+\t\tthis.stateStackTop -= 2;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc4b70840150026e98b2ff01d795f68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "641db1701cbce57a1e73a64de662de098370be6e", "commitAfterChange": "90c80d82832fd719fe60993fa6dd40696f0b049a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " protected void consumeOpenBlock()", "signatureAfterChange": " protected void consumeOpenBlock()", "diff": ["-\t\tstackLength = this.stack.length;", "-\t\tif (++this.stateStackTop >= stackLength - 1) {   // Need two slots.", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.stack, 0,", "-\t\t\t\tthis.stack = new int[stackLength + StackIncrement], 0,", "-\t\t\t\tstackLength);", "+\t\tif (this.currentToken == TokenNameLBRACE && this.unstackedAct > NUM_RULES) { // wait for chain reductions to finish before commit.", "+\t\t\tstackLength = this.stack.length;", "+\t\t\tif (++this.stateStackTop >= stackLength - 1) {   // Need two slots.", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\tthis.stack, 0,", "+\t\t\t\t\t\tthis.stack = new int[stackLength + StackIncrement], 0,", "+\t\t\t\t\t\tstackLength);", "+\t\t\t}", "+\t\t\tthis.stack[this.stateStackTop++] = this.unstackedAct; // transition to Block ::= OpenBlock  .LBRACE BlockStatementsopt RBRACE", "+\t\t\tthis.stack[this.stateStackTop] = tAction(this.unstackedAct, this.currentToken); // transition to Block ::= OpenBlock LBRACE  .BlockStatementsopt RBRACE ", "+\t\t\tcommit();", "+\t\t\tthis.stateStackTop -= 2;", "-\t\tthis.stack[this.stateStackTop++] = this.unstackedAct; // transition to Block ::= OpenBlock  .LBRACE BlockStatementsopt RBRACE", "-\t\tthis.stack[this.stateStackTop] = tAction(this.unstackedAct, this.currentToken); // transition to Block ::= OpenBlock LBRACE  .BlockStatementsopt RBRACE ", "-\t\tcommit();", "-\t\tthis.stateStackTop -= 2;"]}], "num": 23720}
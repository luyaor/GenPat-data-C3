{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f23c4171578f4658f6d3a581d833d0e6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0220ad4631f926dc85f6b4cdc7cacf53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void run(IProgressMonitor monitor)", "signatureAfterChange": " \t \tpublic void run(IProgressMonitor monitor)", "diff": ["-\t\t//", "-\t\t//  bail-out early if there aren't factories, or if there aren't any annotation instances", "-\t\t// ", "-\t\t\t\tif ( _factories == null || _factories.size() == 0 )", "+\t\t\t\tif ( (_factories == null || _factories.size() == 0) && _dispatchedBatchFactories.isEmpty() )", "-\t\t\t\t\tmsg = \"no annotation instances in file.\"; //$NON-NLS-1$", "+\t\t\t\t\tmsg = \"no files to dispatch to.\"; //$NON-NLS-1$", "-\t\t\t\tfor( int i=0, len = _originalFiles.length; i<len; i++ ){", "-\t\t\t\t\tIFile f = _originalFiles[i];", "+\t\t\t\tfor( int i=0, len = _allFilesRequireProcessing.length; i<len; i++ ){", "+\t\t\t\t\tIFile f = _allFilesRequireProcessing[i];", "+\t\t\t\t\tfinal Set<IFile> deletedFiles = ", "+\t\t\t\t\t\tcleanupAllGeneratedFilesForParent( f, _compilationUnit, null );", "+\t\t\t\t\tif( deletedFiles != null )", "+\t\t\t\t\t\tallDeletedFiles.addAll(deletedFiles);", "+\t\t\t\t}", "+\t\t\t\tfor( int i=0, len=_remainingFiles.length; i<len; i++ ){", "+\t\t\t\t\tIFile f = _remainingFiles[i];", "-\t\t\t\t\t\t\t\t\t\t allDeletedFiles, ", "+\t\t\t\t\t\t\t\t\t\t allDeletedFiles,", "+\t\t\t\t\t\t\t\t\t\t Collections.<AnnotationProcessorFactory>emptySet(),", "-\t\t\t\t\t.newProcessorEnvironmentForReconcile(_compilationUnit, _javaProject);", "+\t\t\t\t\t.newReconcileEnv(_compilationUnit, _javaProject);", "-\t\t\t\t\t.newProcessorEnvironmentForBuild( _allFilesRequireProcessing, _javaProject);", "+\t\t\t\t\t.newBuildEnv( _allFilesRequireProcessing, _remainingFiles, _javaProject);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2bf8991b22208e48627b01af636eaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ReferenceCollection.java", "commitBeforeChange": "b4c2326bdb14a7f730ed9986567b454f5f0cd0c5", "commitAfterChange": "7e1c1ec5b1f6c711f6c7308f04d5e852eb81c57a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "signatureAfterChange": "\r \r boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "diff": ["-\tif (simpleNames == null) {\r", "-\t\tif (JavaBuilder.DEBUG) System.out.println(\"  found well known match\"); //$NON-NLS-1$\r", "-\t\treturn true;\r", "-\t} else if (qualifiedNames == null) {\r", "-\t\tfor (int i = 0, l = simpleNames.length; i < l; i++) {\r", "-\t\t\tif (includes(simpleNames[i])) {\r", "-\t\t\t\tif (JavaBuilder.DEBUG) System.out.println(\"  found match in well known package to \" + new String(simpleNames[i])); //$NON-NLS-1$\r", "-\t\t\t\treturn true;\r", "+\tif (simpleNames == null || qualifiedNames == null) {\r", "+\t\tif (simpleNames == null && qualifiedNames == null) {\r", "+\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\tSystem.out.println(\"  found well known match\"); //$NON-NLS-1$\r", "+\t\t\treturn true;\r", "+\t\t} else if (qualifiedNames == null) {\r", "+\t\t\tfor (int i = 0, l = simpleNames.length; i < l; i++) {\r", "+\t\t\t\tif (includes(simpleNames[i])) {\r", "+\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"  found match in well known package to \" + new String(simpleNames[i])); //$NON-NLS-1$\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tfor (int i = 0, l = qualifiedNames.length; i < l; i++) {\r", "+\t\t\t\tchar[][] qualifiedName = qualifiedNames[i];\r", "+\t\t\t\tif (qualifiedName.length == 1 ? includes(qualifiedName[0]) : includes(qualifiedName)) {\r", "+\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"  found well known match in \" + CharOperation.toString(qualifiedName)); //$NON-NLS-1$\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a893f93fbfcd10ad8b225a2d3912b52f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "dad4bcb84907c50a28cd05a6778724183876bb84", "commitAfterChange": "2383278ec3bebb3e2677851c12a5c6653f7680e9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\tIClasspathEntry[] entries = JavaCore.create(this.project).getRawClasspath();", "+\t\t\tIJavaProject javaProject = JavaCore.create(this.project);", "+\t\t\tIClasspathEntry[] entries = javaProject.getRawClasspath();", "+\t\t\t", "+\t\t\t// collect output locations", "+\t\t\tfinal HashSet outputs = new HashSet();", "+\t\t\toutputs.add(javaProject.getOutputLocation());", "+\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "+\t\t\t\tIPath output = entries[i].getOutputLocation();", "+\t\t\t\tif (output != null) {", "+\t\t\t\t\toutputs.add(output);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\tif (outputs.contains(proxy.requestFullPath())) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae5fdd10392b0eb925af748630e64bf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "b05fdc0766ce1f089450816aa5eb0912ffdae4d5", "commitAfterChange": "faea515ca49430200259c66030d0a505f729ebda", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["-\t\tdecodeModifiersForType(buffer, classFileReader.getAccessFlags());", "+\t\t", "+\t\tIInnerClassesAttribute innerClassesAttribute = classFileReader.getInnerClassesAttribute();", "+\t\t", "+\t\tif (innerClassesAttribute != null) {", "+\t\t\t// search the right entry", "+\t\t\tIInnerClassesAttributeEntry[] entries = innerClassesAttribute.getInnerClassAttributesEntries();", "+\t\t\tfor (int i = 0, max = entries.length; i < max ; i++) {", "+\t\t\t\tIInnerClassesAttributeEntry entry = entries[i];", "+\t\t\t\tchar[] innerClassName = entry.getInnerClassName();", "+\t\t\t\tif (innerClassName != null) {", "+\t\t\t\t\tif (CharOperation.equals(classFileReader.getClassName(), innerClassName)) {", "+\t\t\t\t\t\tdecodeModifiersForInnerClasses(buffer, entry.getAccessFlags());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tdecodeModifiersForType(buffer, classFileReader.getAccessFlags());", "+\t\t}", "-\t\t\tIInnerClassesAttribute innerClassesAttribute = classFileReader.getInnerClassesAttribute();"]}], "num": 5913}
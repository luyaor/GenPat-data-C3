{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3381c74aa24c0633768fc4f1e570864d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35de73b6c3e2389526eea1fad8b22439", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "6fd936ba6ff4fd9ebd7b92d3caff0f533974ef34", "commitAfterChange": "afae5ec0c1e6fe82c8553a9480b7bba01ac56f61", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void start(BundleContext context) throws Exception", "signatureAfterChange": " \tpublic void start(BundleContext context) throws Exception", "diff": ["-\t\t\tmanager.getIndexManager().request(", "-\t\t\t\tnew IJob() {", "-\t\t\t\t\tpublic boolean belongsTo(String jobFamily) {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic void cancel() {", "-\t\t\t\t\t\t// ignore", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic void ensureReadyToRun() {", "-\t\t\t\t\t\t// ignore", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic boolean execute(IProgressMonitor progress) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t// add save participant and process delta atomically", "-\t\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=59937", "-\t\t\t\t\t\t\tworkspace.run(", "-\t\t\t\t\t\t\t\tnew IWorkspaceRunnable() {", "-\t\t\t\t\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\t\t\t\t\t\tISavedState savedState = workspace.addSaveParticipant(JavaCore.this, manager);", "-\t\t\t\t\t\t\t\t\t\tif (savedState != null) {", "-\t\t\t\t\t\t\t\t\t\t\t// the event type coming from the saved state is always POST_AUTO_BUILD", "-\t\t\t\t\t\t\t\t\t\t\t// force it to be POST_CHANGE so that the delta processor can handle it", "-\t\t\t\t\t\t\t\t\t\t\tmanager.deltaState.getDeltaProcessor().overridenEventType = IResourceChangeEvent.POST_CHANGE;", "-\t\t\t\t\t\t\t\t\t\t\tsavedState.processResourceChangeEvents(manager.deltaState);", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\tJob processSavedState = new Job(Util.bind(\"savedState.jobName\")) { //$NON-NLS-1$", "+\t\t\t\tprotected IStatus run(IProgressMonitor monitor) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\t// add save participant and process delta atomically", "+\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=59937", "+\t\t\t\t\t\tworkspace.run(", "+\t\t\t\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\t\t\t\tpublic void run(IProgressMonitor progress) throws CoreException {", "+\t\t\t\t\t\t\t\t\tISavedState savedState = workspace.addSaveParticipant(JavaCore.this, manager);", "+\t\t\t\t\t\t\t\t\tif (savedState != null) {", "+\t\t\t\t\t\t\t\t\t\t// the event type coming from the saved state is always POST_AUTO_BUILD", "+\t\t\t\t\t\t\t\t\t\t// force it to be POST_CHANGE so that the delta processor can handle it", "+\t\t\t\t\t\t\t\t\t\tmanager.deltaState.getDeltaProcessor().overridenEventType = IResourceChangeEvent.POST_CHANGE;", "+\t\t\t\t\t\t\t\t\t\tsavedState.processResourceChangeEvents(manager.deltaState);", "-\t\t\t\t\t\t\t\t},", "-\t\t\t\t\t\t\t\tnull); // no progress monitor", "-\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\tUtil.log(e, \"Could not process saved state delta\"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t},", "+\t\t\t\t\t\t\tmonitor);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\treturn e.getStatus();", "-\t\t\t\t});", "+\t\t\t\t\treturn Status.OK_STATUS;", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tprocessSavedState.setSystem(true);", "+\t\t\tprocessSavedState.setPriority(Job.SHORT); // process asap", "+\t\t\tprocessSavedState.schedule();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62fec496613f10fb0782bae0441beb69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "20a3b07578a2ebec2d9a0569764e78af37761eaf", "commitAfterChange": "c052d66dbc2732414cdaf446e79eec5da0743843", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 130, "signatureBeforeChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner, boolean computeProblems) throws JavaModelException", "signatureAfterChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner, boolean computeProblems) throws JavaModelException {", "-\t\tIProblemRequestor problemRequestor = computeProblems", "-\t\t\t? new IProblemRequestor() {", "-\t\t\t\tpublic void acceptProblem(IProblem problem) {}", "-\t\t\t\tpublic void beginReporting() {}", "-\t\t\t\tpublic void endReporting() {}", "-\t\t\t\tpublic boolean isActive() {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} ", "-\t\t\t: null;", "-\t\treturn getWorkingCopy(path, source, owner, problemRequestor);", "+\tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner) throws JavaModelException {", "+\t\tICompilationUnit workingCopy = getCompilationUnit(path);", "+\t\tif (owner != null)", "+\t\t\tworkingCopy = workingCopy.getWorkingCopy(owner, null/*no progress monitor*/);", "+\t\telse", "+\t\t\tworkingCopy.becomeWorkingCopy(null/*no progress monitor*/);", "+\t\tworkingCopy.getBuffer().setContents(source);", "+\t\tIProblemRequestor problemRequestor = owner.getProblemRequestor(workingCopy);", "+\t\tif (problemRequestor instanceof ProblemRequestor) {", "+\t\t\t((ProblemRequestor) problemRequestor).initialize(source.toCharArray());", "+\t\t}", "+\t\tworkingCopy.makeConsistent(null/*no progress monitor*/);", "+\t\treturn workingCopy;"]}], "num": 14505}
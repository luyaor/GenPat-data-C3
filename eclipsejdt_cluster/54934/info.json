{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9821fe0386dbe09d5c6ea266fc0ad73a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6163915b37a4f16633e9d934c484b77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7bf89e29c34a348a2ed388f7cdb6c1016941cf61", "commitAfterChange": "cd5adcef3921beea7df4f6703ab58225bdb4ec39", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 107, "signatureBeforeChange": " \t \tprivate BlockScope lookupScope(ASTNode node)", "signatureAfterChange": " \t \tprivate BlockScope lookupScope(ASTNode node)", "diff": ["-\t\t\t\t|| currentNode instanceof EnumDeclaration) {", "+\t\t\t\t|| currentNode instanceof EnumDeclaration", "+\t\t\t\t|| currentNode instanceof AnnotationTypeDeclaration) {", "-\t\t\t\t}", "-\t\t\t} else if (currentNode instanceof AnnotationTypeDeclaration) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration annotationTypeDecl = (org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "-\t\t\t\tif ((initializer.getModifiers() & Modifier.STATIC) != 0) {", "-\t\t\t\t\treturn annotationTypeDecl.staticInitializerScope;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn annotationTypeDecl.initializerScope;", "-\t\t\t\t\t|| currentNode instanceof EnumDeclaration) {", "+\t\t\t\t\t|| currentNode instanceof EnumDeclaration", "+\t\t\t\t\t|| currentNode instanceof AnnotationTypeDeclaration) {", "-\t\t\t} else if (currentNode instanceof AnnotationTypeDeclaration) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration annotationTypeDecl = (org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "-\t\t\t\tif ((fieldDeclaration.getModifiers() & Modifier.STATIC) != 0) {", "-\t\t\t\t\treturn annotationTypeDecl.staticInitializerScope;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn annotationTypeDecl.initializerScope;", "-\t\t\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d77de070c4e1460e80ea8758eab49086", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic CompilationParticipantResult notify( CompilationParticipantEvent cpe )", "signatureAfterChange": " \t \tpublic boolean isAnnotationProcessor()", "diff": ["-", "-\tpublic CompilationParticipantResult notify( CompilationParticipantEvent cpe )", "-\t{\t", "-        // We need to clean even if we have been disabled. This allows", "-\t\t// us to remove our generated source files if we get disabled", "-        if ( cpe.getKind() == CompilationParticipant.CLEAN_EVENT ) {", "-            return cleanNotify( cpe );", "-        }", "-        else if (!AptConfig.isEnabled(cpe.getJavaProject())) {", "-\t\t\treturn GENERIC_COMPILATION_RESULT;", "-        }", "-        else if ( cpe == null ) {", "-\t\t\treturn GENERIC_COMPILATION_RESULT;", "-\t\t}", "-\t\telse if ( cpe.getKind() == CompilationParticipant.PRE_BUILD_EVENT ) {", "-\t\t\treturn preBuildNotify( (PreBuildCompilationEvent) cpe );", "-\t\t}", "-\t\telse if ( cpe.getKind() == CompilationParticipant.PRE_RECONCILE_EVENT ) {", "-\t\t\treturn preReconcileNotify( (PreReconcileCompilationEvent) cpe );", "-\t\t}", "-\t\telse {", "-\t\t\treturn GENERIC_COMPILATION_RESULT;", "-\t\t}", "+\t", "+\tpublic boolean isAnnotationProcessor(){", "+\t\treturn true;"]}], "num": 54934}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b9513fa3bfa484294f19fee80bb5453", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d0733130948671a65c341c4cdcaeef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static void handleResourceAssignment(BlockScope scope, FlowInfo upstreamInfo, FlowInfo flowInfo, ASTNode location, Expression rhs, LocalVariableBinding local)", "signatureAfterChange": " \tpublic static void handleResourceAssignment(BlockScope scope, FlowInfo upstreamInfo, FlowInfo flowInfo, ASTNode location, Expression rhs, LocalVariableBinding local)", "diff": ["+\t\trhsAnalyis:", "-\t\t\t\t\t// null shouldn't occur but let's play safe", "+\t\t\t\t\t// null shouldn't occur but let's play safe:", "-\t\t\t\t\t\tlocal.closeTracker = rhsTrackVar;\t\t\t//\t\ta.: let fresh LHS share it ", "+\t\t\t\t\t\tlocal.closeTracker = rhsTrackVar;\t\t\t//\t\ta.: let fresh LHS share it", "+\t\t\t\t\tif (rhsTrackVar.currentAssignment == location) {", "+\t\t\t\t\t\t// pre-set tracker from lhs - passed from outside?", "+\t\t\t\t\t\t// now it's a fresh resource", "+\t\t\t\t\t\trhsTrackVar.globalClosingState &= ~(SHARED_WITH_OUTSIDE|OWNED_BY_OUTSIDE);", "+\t\t\t\t\t}", "-\t\t\t\t\tif (rhsTrackVar == disconnectedTracker && rhs instanceof AllocationExpression)", "-\t\t\t\t\t\treturn; \t\t\t\t\t\t\t\t\t// \t\tb.: self wrapper: res = new Wrap(res); -> done!", "-\t\t\t\t\tlocal.closeTracker = rhsTrackVar;\t\t\t\t//\t\tc.: conflicting LHS and RHS, proceed with recordErrorLocation below", "+\t\t\t\t\tif (rhs instanceof AllocationExpression) {", "+\t\t\t\t\t\tif (rhsTrackVar == disconnectedTracker)", "+\t\t\t\t\t\t\treturn;\t\t\t\t\t\t\t\t\t// \t\tb.: self wrapper: res = new Wrap(res); -> done!", "+\t\t\t\t\t\tif (local.closeTracker == rhsTrackVar ", "+\t\t\t\t\t\t\t\t&& ((rhsTrackVar.globalClosingState & OWNED_BY_OUTSIDE) != 0)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\tc.: assigning a fresh resource (pre-connected alloc) ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\t\t\tto a local previously holding an alien resource -> start over", "+\t\t\t\t\t\t\tlocal.closeTracker = new FakedTrackingVariable(local, location);", "+\t\t\t\t\t\t\tflowInfo.markAsDefinitelyNull(local.closeTracker.binding);", "+\t\t\t\t\t\t\t// still check disconnectedTracker below", "+\t\t\t\t\t\t\tbreak rhsAnalyis;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tlocal.closeTracker = rhsTrackVar;\t\t\t\t//\t\td.: conflicting LHS and RHS, proceed with recordErrorLocation below"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f100eac1f892ab360df76d50353d23c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "fe6ffdef0750d72bbc70fe8bbcab741af97eada4", "commitAfterChange": "73a5ad5796e2751191a9ca65c5fd12f72d0d03d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+}", "-\t\t\t\t\t\t\t\t// relocate if finding another quote fairly close: thus unicode '/u000D' will be fully consumed", "-\t\t\t\t\t\t\t\t\tint start = this.currentPosition;", "-\t\t\t\t\t\t\t\t\tfor (int lookAhead = 0; lookAhead < 50; lookAhead++) {", "-\t\t\t\t\t\t\t\t\t\tif (this.currentPosition >= this.eofPosition) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition = start;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "-\t\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tisUnicode = false;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (!isUnicode && this.currentCharacter == '\\n') {", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition--; // set current position on new line character", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\\"') {", "-\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHAR_IN_STRING);", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tthis.currentPosition -= 5;", "+\t\t\t\t\t\t\t\t\twhile(this.source[this.currentPosition] != '\\\\') {", "+\t\t\t\t\t\t\t\t\t\tthis.currentPosition--;", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHAR_IN_STRING);", "+\t\t\t\t\t\t\t\treturn TokenNameStringLiteral;", "+\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\tisUnicode = false;", "-\t\t\t\t\t\tthrow new InvalidInputException(UNTERMINATED_STRING);", "+\t\t\t\t\t\treturn TokenNameStringLiteral;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (this.startPosition <= this.cursorLocation && this.cursorLocation <= this.currentPosition-1){", "-\t\t\t\t\t\tthrow new InvalidCursorLocation(InvalidCursorLocation.NO_COMPLETION_INSIDE_STRING);"]}], "num": 52383}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89d0afe61fbcf9ceea09f0ae6a012cc6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7831368eb65748072b56916051e529b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["-\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Fix bug 51650", "+\t\t\t\t\t\tthis.textStart = -1;", "-\t\t\tif (this.lineStarted && this.textStart <= this.endComment) {", "-\t\t\t\tpushText(this.textStart, this.endComment);", "+\t\t\tif (this.lineStarted && this.textStart <= charPosition) {", "+\t\t\t\tpushText(this.textStart, charPosition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2eb0d957b84285bdededfb7c5d70fbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "signatureAfterChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "diff": ["-\t\tint[] wildcards = new int[10];", "+\t\tint[] wildcards = null;", "-\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Not treated yet...", "+\t\t\t\t\t\t\t\t// TODO (frederic) Should warn user that syntax is not valid", "-\t\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Invalid syntax", "+\t\t\t\t\t\t\t\t\t// TODO (frederic) Should warn user that syntax is not valid", "-\t\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Invalid syntax", "+\t\t\t\t\t\t\t\t\t// TODO (frederic) Should warn user that syntax is not valid", "-\t\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Invalid syntax", "+\t\t\t\t\t\t\t\t\t// TODO (frederic) Should warn user that syntax is not valid", "+\t\t\t\t\t\t\t\twildcards = new int[10]; // 10 parameters max"]}], "num": 46384}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "766271196d83fb510c61b871df7e84ec", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "439145a288f5808b3952a842cf523be7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "5bb2bc7f924033ac90ef06377adaf6e8028c136c", "commitAfterChange": "ef1e5cb9e8f1ed367497f33911cb9848dee28aa7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tprotected void verifyComments(String fileName, char[] source)", "signatureAfterChange": " \t \tprotected CompilationUnit verifyComments(String fileName, char[] source)", "diff": ["-\tprotected void verifyComments(String fileName, char[] source) {", "+\tprotected CompilationUnit verifyComments(String fileName, char[] source) {", "-\t\t", "-//\t\tif (this.comments.size() == size) {", "-\t\t\tfor (int i=0; i<size; i++) {", "-\t\t\t\tComment comment = (Comment) unitComments.get(i);", "-\t\t\t\tList tags = (List) allTags.get(i);", "-\t\t\t\t// Verify flattened content", "-\t\t\t\tString stringComment = (String) this.comments.get(i);", "-\t//\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "-\t//\t\t\tcomment.accept(printer);", "-\t\t\t\tString text = new String(testedSource, comment.getStartPosition(), comment.getLength());", "-\t\t\t\tassumeEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "-\t\t\t\t// Verify javdoc tags positions and bindings", "-\t\t\t\tif (comment.isDocComment()) {", "-\t\t\t\t\tJavadoc docComment = (Javadoc)comment;", "-\t\t\t\t\tif (this.docCommentSupport.equals(JavaCore.ENABLED)) {", "-\t\t\t\t\t\tassumeEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "-\t\t\t\t\t\tverifyPositions(docComment, testedSource);", "-\t\t\t\t\t\tif (this.resolveBinding) {", "-\t\t\t\t\t\t\tverifyBindings(docComment);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tassumeEquals(\"Javadoc should be flat!\", 0, docComment.tags().size());", "+\t\tfor (int i=0; i<size; i++) {", "+\t\t\tComment comment = (Comment) unitComments.get(i);", "+\t\t\tList tags = (List) allTags.get(i);", "+\t\t\t// Verify flattened content", "+\t\t\tString stringComment = (String) this.comments.get(i);", "+//\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "+//\t\t\tcomment.accept(printer);", "+\t\t\tString text = new String(testedSource, comment.getStartPosition(), comment.getLength());", "+\t\t\tassumeEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "+\t\t\t// Verify javdoc tags positions and bindings", "+\t\t\tif (comment.isDocComment()) {", "+\t\t\t\tJavadoc docComment = (Javadoc)comment;", "+\t\t\t\tif (this.docCommentSupport.equals(JavaCore.ENABLED)) {", "+\t\t\t\t\tassumeEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "+\t\t\t\t\tverifyPositions(docComment, testedSource);", "+\t\t\t\t\tif (this.resolveBinding) {", "+\t\t\t\t\t\tverifyBindings(docComment);", "+\t\t\t\t} else {", "+\t\t\t\t\tassumeEquals(\"Javadoc should be flat!\", 0, docComment.tags().size());", "-//\t\t}", "+\t\t}", "+", "+\t\t// Return compilation unit for possible further verifications", "+\t\treturn compilUnit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1401d6db7c0ccee21b618984b95b49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "1cd36da9dd049ac527dcab1976c08155d6c121b9", "commitAfterChange": "f2c2a11caa27156fb260986cef359f78136ce40c", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void test0502() throws JavaModelException", "signatureAfterChange": " \tpublic void test0502b() throws JavaModelException", "diff": ["-\tpublic void test0502() throws JavaModelException {", "-\t\t// test0502.A/0/i", "-\t\tASTNode declaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-\t\t// test0502.A/0/0/j", "+\t */", "+\tpublic void test0502b() throws JavaModelException {", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter\" , \"\", \"test0502\", \"A.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tCompilationUnit unit = (CompilationUnit)runConversion(sourceUnit, true);", "+\t\t", "+\t\t// 'j' in 'then' block in initializer", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "+\t\tVariableDeclarationStatement variableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "+\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "+\t\tIVariableBinding localBinding = fragment.resolveBinding();", "+\t\tassertEquals(\"Unexpected key\", \"test0502/A/0/0/j\", localBinding.getKey()); //$NON-NLS-1$", "+\t}\t", "-\t\t// test0502.A/foo()/i", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement)getASTNode(unit, 0, 1, 0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-\t\t// test0502.A/foo()/0/j", "-\t\tifStatement = (IfStatement) getASTNode(unit, 0, 1, 1);", "-\t\tblock = (Block)ifStatement.getThenStatement();", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-\t\t// test0502.A/foo()/1/j", "-\t\tifStatement = (IfStatement) getASTNode(unit, 0, 1, 1);", "-\t\tblock = (Block)ifStatement.getElseStatement();", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-"]}], "num": 17038}
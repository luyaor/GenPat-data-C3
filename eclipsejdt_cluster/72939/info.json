{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86a1092c78488dfb4d77265199b91426", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f861ffaf150cfdcc3e0dc2cc6755fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\trequestor.enterConstructor(", "-\t\t\t\tmethodDeclaration.declarationSourceStart, ", "-\t\t\t\tmethodDeclaration.modifiers, ", "-\t\t\t\tmethodDeclaration.selector, ", "-\t\t\t\tmethodDeclaration.sourceStart, ", "-\t\t\t\tselectorSourceEnd, ", "-\t\t\t\targumentTypes, ", "-\t\t\t\targumentNames, ", "-\t\t\t\tthrownExceptionTypes);", "-\t\t\tnotifySourceElementRequestor(methodDeclaration.typeParameters());\t\t\t", "+\t\t\tISourceElementRequestor.MethodInfo methodInfo = new ISourceElementRequestor.MethodInfo();", "+\t\t\tmethodInfo.isConstructor = true;", "+\t\t\tmethodInfo.declarationStart = methodDeclaration.declarationSourceStart;", "+\t\t\tmethodInfo.modifiers = methodDeclaration.modifiers;", "+\t\t\tmethodInfo.name = methodDeclaration.selector;", "+\t\t\tmethodInfo.nameSourceStart = methodDeclaration.sourceStart;", "+\t\t\tmethodInfo.nameSourceEnd = selectorSourceEnd;", "+\t\t\tmethodInfo.parameterTypes = argumentTypes;", "+\t\t\tmethodInfo.parameterNames = argumentNames;", "+\t\t\tmethodInfo.exceptionTypes = thrownExceptionTypes;", "+\t\t\tmethodInfo.typeParameters = getTypeParameterInfos(methodDeclaration.typeParameters());", "+\t\t\trequestor.enterConstructor(methodInfo);", "-\t\tif (methodDeclaration instanceof MethodDeclaration) {", "-\t\t\tTypeReference returnType = ((MethodDeclaration) methodDeclaration).returnType;", "-\t\t\trequestor.enterMethod(", "-\t\t\t\tmethodDeclaration.declarationSourceStart, ", "-\t\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "-\t\t\t\treturnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.'),", "-\t\t\t\tmethodDeclaration.selector, ", "-\t\t\t\tmethodDeclaration.sourceStart, ", "-\t\t\t\tselectorSourceEnd, ", "-\t\t\t\targumentTypes, ", "-\t\t\t\targumentNames, ", "-\t\t\t\tthrownExceptionTypes);", "-\t\t} else {", "-\t\t\tTypeReference returnType = ((AnnotationTypeMemberDeclaration) methodDeclaration).returnType;", "-\t\t\trequestor.enterMethod(", "-\t\t\t\tmethodDeclaration.declarationSourceStart, ", "-\t\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "-\t\t\t\treturnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.'),", "-\t\t\t\tmethodDeclaration.selector, ", "-\t\t\t\tmethodDeclaration.sourceStart, ", "-\t\t\t\tselectorSourceEnd, ", "-\t\t\t\targumentTypes, ", "-\t\t\t\targumentNames, ", "-\t\t\t\tthrownExceptionTypes);", "-\t\t}", "-\t\tnotifySourceElementRequestor(methodDeclaration.typeParameters());\t\t\t", "+\t\tTypeReference returnType = methodDeclaration instanceof MethodDeclaration", "+\t\t\t? ((MethodDeclaration) methodDeclaration).returnType", "+\t\t\t: ((AnnotationTypeMemberDeclaration) methodDeclaration).returnType;", "+\t\tISourceElementRequestor.MethodInfo methodInfo = new ISourceElementRequestor.MethodInfo();", "+\t\tmethodInfo.declarationStart = methodDeclaration.declarationSourceStart;", "+\t\tmethodInfo.modifiers = deprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag;", "+\t\tmethodInfo.returnType = returnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.');", "+\t\tmethodInfo.name = methodDeclaration.selector;", "+\t\tmethodInfo.nameSourceStart = methodDeclaration.sourceStart;", "+\t\tmethodInfo.nameSourceEnd = selectorSourceEnd;", "+\t\tmethodInfo.parameterTypes = argumentTypes;", "+\t\tmethodInfo.parameterNames = argumentNames;", "+\t\tmethodInfo.exceptionTypes = thrownExceptionTypes;", "+\t\tmethodInfo.typeParameters = getTypeParameterInfos(methodDeclaration.typeParameters());", "+\t\trequestor.enterMethod(methodInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "656d556557e4e43cbf74981e6b0748b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 29, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["+    ", "+\tif (methodDecl == null) return null; // method could not be resolved in previous iteration", "+\t", "+\tTypeParameter[] typeParameters = methodDecl.typeParameters();", "+\tif (typeParameters != null) methodDecl.scope.connectTypeVariables(typeParameters);", "-\t\t\tresolvedExceptionType = (ReferenceBinding) exceptionTypes[i].getTypeBinding(scope);", "-\t\t\tif (!resolvedExceptionType.isValidBinding()) {", "-\t\t\t\tmethodDecl.scope.problemReporter().exceptionTypeProblem(this, methodDecl, exceptionTypes[i], resolvedExceptionType);", "-\t\t\t\t//methodDecl.scope.problemReporter().invalidType(exceptionTypes[i], resolvedExceptionType);", "+\t\t\tresolvedExceptionType = (ReferenceBinding) exceptionTypes[i].resolveType(methodDecl.scope);", "+\t\t\tif (resolvedExceptionType == null) {", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tif (resolvedExceptionType.isGenericType() || resolvedExceptionType.isParameterizedType()) {", "+\t\t\t\tmethodDecl.scope.problemReporter().invalidParameterizedExceptionType(resolvedExceptionType, exceptionTypes[i]);", "+\t\t\t}", "+\t\t    if ((resolvedExceptionType.modifiers & AccGenericSignature) != 0) {", "+\t\t\t\tmethod.modifiers |= AccGenericSignature;", "-\t\t\tmethod.parameters[i] = arg.type.getTypeBinding(scope);", "-\t\t\tif (!method.parameters[i].isValidBinding()) {", "-\t\t\t\tmethodDecl.scope.problemReporter().argumentTypeProblem(this, methodDecl, arg, method.parameters[i]);", "-\t\t\t\t//methodDecl.scope.problemReporter().invalidType(arg, method.parameters[i]);", "+\t\t\tTypeBinding parameterType = arg.type.resolveType(methodDecl.scope);", "+\t\t\tif (parameterType == null) {", "-\t\t\t} else if (method.parameters[i] == VoidBinding) {", "+\t\t\t} else if (parameterType == VoidBinding) {", "-\t\t\t} else if (method.parameters[i].isArrayType() && ((ArrayBinding) method.parameters[i]).leafComponentType == VoidBinding) {", "+\t\t\t} else if (parameterType.isArrayType() && ((ArrayBinding) parameterType).leafComponentType == VoidBinding) {", "+\t\t\t} else {", "+\t\t\t    if (parameterType instanceof ReferenceBinding && (((ReferenceBinding)parameterType).modifiers & AccGenericSignature) != 0) {", "+\t\t\t\t\tmethod.modifiers |= AccGenericSignature;", "+\t\t\t\t}", "+\t\t\t\tmethod.parameters[i] = parameterType;", "-\t\tTypeReference returnType = ((MethodDeclaration) methodDecl).returnType;", "+\t\tTypeReference returnType = methodDecl instanceof MethodDeclaration", "+\t\t\t? ((MethodDeclaration) methodDecl).returnType", "+\t\t\t: ((AnnotationTypeMemberDeclaration) methodDecl).returnType;", "-\t\t\tmethod.returnType = returnType.getTypeBinding(scope);", "-\t\t\tif (!method.returnType.isValidBinding()) {", "-\t\t\t\tmethodDecl.scope.problemReporter().returnTypeProblem(this, (MethodDeclaration) methodDecl, method.returnType);", "-\t\t\t\t//methodDecl.scope.problemReporter().invalidType(returnType, method.returnType);", "-\t\t\t\tmethod.returnType = null;", "+\t\t    TypeBinding methodType = returnType.resolveType(methodDecl.scope);", "+\t\t\tif (methodType == null) {", "-\t\t\t} else if (method.returnType.isArrayType() && ((ArrayBinding) method.returnType).leafComponentType == VoidBinding) {", "+\t\t\t} else if (methodType.isArrayType() && ((ArrayBinding) methodType).leafComponentType == VoidBinding) {", "-\t\t\t\tmethod.returnType = null;", "+\t\t\t} else {", "+\t\t\t\tmethod.returnType = methodType;", "+\t\t\t\tif (methodType instanceof ReferenceBinding && (((ReferenceBinding)methodType).modifiers & AccGenericSignature) != 0) {", "+\t\t\t\t\tmethod.modifiers |= AccGenericSignature;", "+\t\t\t\t}"]}], "num": 72939}
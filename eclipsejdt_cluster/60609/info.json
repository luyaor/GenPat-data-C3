{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af2e4f019ebf02957ffde7cfe80096f3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d521879d5054dd66a47b4e51f2acf1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "f15f3a4daa4f7cbf363475bdb20d4707912f834f", "commitAfterChange": "1e2211eded7d5ae87dfcf507bb00676a5a81d8e9", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testPerfSearchField() throws CoreException", "signatureAfterChange": " \tpublic void testPerfSearchField() throws CoreException", "diff": ["+\t */", "-\t\ttagAsSummary(\"Search Field all occurences\", Dimension.CPU_TIME);", "-\t\tstartMeasuring();", "-\t\tsearch(", "-\t\t\t\"FILE\", ", "-\t\t\tFIELD,", "-\t\t\tALL_OCCURRENCES, ", "-\t\t\tthis.resultCollector);", "-\t\tstopMeasuring();", "+\t\ttagAsSummary(\"Search>Occurences>Fields\", Dimension.CPU_TIME, true/*put in fingerprint*/);", "+", "+\t\t// Wait for indexing end", "+\t\twaitUntilIndexesReady();", "+//\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "+//\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "+", "+\t\t// warm-up", "+\t\tsearch(\"FILE\", FIELD, ALL_OCCURRENCES, this.resultCollector);", "+", "+\t\t// Loop of measures", "+\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "+\t\t\tstartMeasuring();", "+//\t\t\tfor (int j=0; j<ITERATIONS_COUNT; j++) {", "+\t\t\t\tsearch(\"FILE\", FIELD, ALL_OCCURRENCES, this.resultCollector);", "+//\t\t\t}", "+\t\t\tstopMeasuring();", "+\t\t}", "+\t\t", "+\t\t// Commit measures", "-\t\t// store counter", "+", "+\t\t// Store counter"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9e5db354f1ee2d73dce44ac28578ded", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "f15f3a4daa4f7cbf363475bdb20d4707912f834f", "commitAfterChange": "1e2211eded7d5ae87dfcf507bb00676a5a81d8e9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testPerfSearchMethod() throws CoreException", "signatureAfterChange": " \tpublic void testPerfSearchMethod() throws CoreException", "diff": ["+\t */", "-\t\ttagAsSummary(\"Search Method all occurences\", Dimension.CPU_TIME);", "-\t\tstartMeasuring();", "-\t\tsearch(", "-\t\t\t\"equals\", ", "-\t\t\tMETHOD,", "-\t\t\tALL_OCCURRENCES, ", "-\t\t\tthis.resultCollector);", "-\t\tstopMeasuring();", "+\t\ttagAsSummary(\"Search>Occurences>Methods\", Dimension.CPU_TIME, true/*put in fingerprint*/);", "+", "+\t\t// Wait for indexing end", "+\t\twaitUntilIndexesReady();", "+//\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "+//\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "+", "+\t\t// warm-up", "+\t\tsearch(\"equals\", METHOD, ALL_OCCURRENCES, this.resultCollector);", "+", "+\t\t// Loop of measures", "+\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "+\t\t\tstartMeasuring();", "+//\t\t\tfor (int j=0; j<ITERATIONS_COUNT; j++) {", "+\t\t\t\tsearch(\"equals\", METHOD, ALL_OCCURRENCES, this.resultCollector);", "+//\t\t\t}", "+\t\t\tstopMeasuring();", "+\t\t}", "+\t\t", "+\t\t// Commit measures", "-\t\t// store counter", "+", "+\t\t// Store counter"]}], "num": 60609}
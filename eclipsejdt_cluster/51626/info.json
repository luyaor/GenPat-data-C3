{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d39feee70610dcad82baaf989b93779", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "826ac9523f8f1980b839d31263735d32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\t", "+\tif (polyExpressionSeen && polyExpressionsHaveErrors(scope, this.binding, this.arguments, argumentTypes))", "+\t\treturn null;", "+", "-\t}", "-\tif (polyExpressionSeen) {", "-\t\tboolean variableArity = this.binding.isVarargs();", "-\t\tfinal TypeBinding[] parameters = this.binding.parameters;", "-\t\tfinal int parametersLength = parameters.length;", "-\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "-\t\t\tExpression argument = this.arguments[i];", "-\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];", "-\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "-\t\t\t\tif (variableArity && i >= parametersLength - 1)", "-\t\t\t\t\targument.tagAsEllipsisArgument();", "-\t\t\t\targument.setExpectedType(parameterType);", "-\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fae60ebdbf74cc5c330bbbdfd0a1267", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["+\t", "+\tif (polyExpressionSeen && polyExpressionsHaveErrors(scope, this.binding, this.arguments, argumentTypes))", "+\t\treturn null;", "+\t", "-\t\t}", "-\t}", "-\tif (polyExpressionSeen) {", "-\t\tboolean variableArity = this.binding.isVarargs();", "-\t\tfinal TypeBinding[] parameters = this.binding.parameters;", "-\t\tfinal int parametersLength = parameters.length;", "-\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "-\t\t\tExpression argument = this.arguments[i];", "-\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];", "-\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "-\t\t\t\tif (variableArity && i >= parametersLength - 1)", "-\t\t\t\t\targument.tagAsEllipsisArgument();", "-\t\t\t\targument.setExpectedType(parameterType);", "-\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "-\t\t\t}"]}], "num": 51626}
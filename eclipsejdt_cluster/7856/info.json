{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6abc3ba8271eeb7219483005db5d046e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a3bf080b67e094f9687663db34d7b50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RegressionTestSetup.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void setUp()", "signatureAfterChange": " \t \tprotected void setUp()", "diff": ["+\t", "+\tprotected void setUp() {", "+\t\tif (this.javaClassLib == null) {", "+\t\t\t// Create name environment", "+\t\t\tthis.javaClassLib = new FileSystem(Util.getJavaClassLibs(), new String[0], null);", "+\t\tsuper.setUp();", "-}", "-protected void setUp() {", "-\t// Create name environment", "-\tINameEnvironment javaClassLib = new FileSystem(Util.getJavaClassLibs(), new String[0], null);", "-", "-\t// Init wrapped suite", "-\tinitTest(fTest, this.verifier, javaClassLib);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa22ed7497a626b82a86e1b9b1db83f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationSetup.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void setUp()", "signatureAfterChange": "  \tprotected void setUp()", "diff": ["-}", "-protected void setUp() {", "-\t// Launch VM in evaluation mode", "-\tint evalPort = Util.getFreePort();", "-\ttry {", "-\t\tLocalVMLauncher launcher = LocalVMLauncher.getLauncher();", "-\t\tlauncher.setVMPath(this.jrePath);", "-\t\tlauncher.setEvalPort(evalPort);", "-\t\tlauncher.setEvalTargetPath(this.evalDirectory);", "-\t\tthis.launchedVM = launcher.launch();", "-\t} catch (TargetException e) {", "-\t\tthrow new Error(e.getMessage());", "-\t// Thread that read the stout of the VM so that the VM doesn't block", "-\ttry {", "-\t\tstartReader(\"VM's stdout reader\", this.launchedVM.getInputStream(), System.out);", "-\t} catch (TargetException e) {", "-\t}", "-", "-\t// Thread that read the sterr of the VM so that the VM doesn't block", "-\ttry {", "-\t\tstartReader(\"VM's sterr reader\",this.launchedVM.getErrorStream(), System.err);", "-\t} catch (TargetException e) {", "-\t}", "-", "-\t// Create context", "-\tthis.context = new EvaluationContext();", "-", "-\t// Create target", "-\tthis.target = new TargetInterface();", "-\tthis.target.connect(\"localhost\", evalPort, 10000);", "-", "-\t// Create name environment", "-\tINameEnvironment env = new FileSystem(Util.getJavaClassLibs(), new String[0], null);", "-", "-\t// Init wrapped suite", "-\tinitTest(fTest, this.context, this.target, this.launchedVM, env);", "-}", "+\tprotected void setUp() {", "+\t\tif (this.context == null) { // non null if called from subclass", "+\t\t\t// Launch VM in evaluation mode", "+\t\t\tint evalPort = Util.getFreePort();", "+\t\t\t\tLocalVMLauncher launcher = LocalVMLauncher.getLauncher();", "+\t\t\t\tlauncher.setVMPath(JRE_PATH);", "+\t\t\t\tlauncher.setEvalPort(evalPort);", "+\t\t\t\tlauncher.setEvalTargetPath(EVAL_DIRECTORY);", "+\t\t\t\tthis.launchedVM = launcher.launch();", "+", "+\t\t\t// Thread that read the stout of the VM so that the VM doesn't block", "+\t\t\ttry {", "+\t\t\t\tstartReader(\"VM's stdout reader\", this.launchedVM.getInputStream(), System.out);", "+\t\t\t} catch (TargetException e) {", "+\t\t\t}", "+", "+\t\t\t// Thread that read the sterr of the VM so that the VM doesn't block", "+\t\t\ttry {", "+\t\t\t\tstartReader(\"VM's sterr reader\", this.launchedVM.getErrorStream(), System.err);", "+\t\t\t} catch (TargetException e) {", "+\t\t\t}", "+", "+\t\t\t// Create context", "+\t\t\tthis.context = new EvaluationContext();", "+", "+\t\t\t// Create target", "+\t\t\tthis.target = new TargetInterface();", "+\t\t\tthis.target.connect(\"localhost\", evalPort, 10000);", "+", "+\t\t\t// Create name environment", "+\t\t\tthis.env = new FileSystem(Util.getJavaClassLibs(), new String[0], null);", "+\t\t}", "+\t\tsuper.setUp();", "+\t}"]}], "num": 7856}
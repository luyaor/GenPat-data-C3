{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60fcef0147060c703afdd94be3c406cd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64cd5e02de99e43e0c81c5be5a6248ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "e4b55bd211dccbfbd971d96ae9fb1fa085f3370c", "commitAfterChange": "608a55b772f6bb6d5bb4b781bdb909738331065e", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": " protected void consumeEnumConstantHeader()", "signatureAfterChange": " protected void consumeEnumConstantHeader()", "diff": ["+      anonymousType.bodyStart = this.scanner.currentPosition;", "-      this.lastCheckPoint = anonymousType.bodyStart = this.scanner.currentPosition;", "-      if (this.currentElement != null) {", "-         this.currentElement = this.currentElement.add(anonymousType, 0);", "-         this.lastIgnoredToken = -1;", "-         this.currentToken = 0; // opening brace already taken into account", "-      }", "+      if (this.currentElement != null) {", "+         this.currentElement = this.currentElement.add(anonymousType, 0);", "+       \tthis.lastCheckPoint = anonymousType.bodyStart;", "+        this.lastIgnoredToken = -1;", "+         this.currentToken = 0; // opening brace already taken into account", "+         return;", "+      }", "-      this.lastCheckPoint = enumConstant.declarationEnd + 1;", "-      this.currentElement = this.currentElement.add(enumConstant, 0);", "-//      this.currentElement.foundOpeningBrace = foundOpeningBrace;", "+\t  this.lastCheckPoint = this.scanner.startPosition; // force to restart at this exact position"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4c010151e6972ae9312122591368092", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "commitAfterChange": "e43c8c0f67a0087e9b964d25afd6c8f6f400f425", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": " protected void consumeEnumConstantHeader()", "signatureAfterChange": " protected void consumeEnumConstantHeader()", "diff": ["-      if (this.currentElement != null) {", "-         this.currentElement = this.currentElement.add(anonymousType, 0);", "-       \tthis.lastCheckPoint = anonymousType.bodyStart;", "-        this.lastIgnoredToken = -1;", "-         this.currentToken = 0; // opening brace already taken into account", "-         return;", "-      }", "-\t  if(this.currentToken == TokenNameSEMICOLON) {", "-\t  \tthis.isInsideEnumConstantPart = false;", "+\t  if(foundOpeningBrace) {", "+\t  \tTypeDeclaration anonymousType = (TypeDeclaration) this.astStack[this.astPtr];", "+\t  \tthis.currentElement = this.currentElement.add(anonymousType, 0);", "+      \tthis.lastCheckPoint = anonymousType.bodyStart;", "+        this.lastIgnoredToken = -1;", "+        this.currentToken = 0; // opening brace already taken into account", "+\t  } else {", "+\t  \t  if(this.currentToken == TokenNameSEMICOLON) {", "+\t\t  \tthis.enumConstantPartStack[this.enumConstantPartPtr] = false;", "+\t\t  }", "+\t      if (!(this.currentElement instanceof RecoveredType)", "+\t            && (this.currentToken == TokenNameDOT)){", "+\t         this.lastCheckPoint = enumConstant.sourceStart;", "+\t         this.restartRecovery = true;", "+\t         return;", "+\t      }", "+\t\t  this.lastCheckPoint = this.scanner.startPosition; // force to restart at this exact position", "+\t      this.lastIgnoredToken = -1;", "+\t      this.restartRecovery = true;", "-      if (!(this.currentElement instanceof RecoveredType)", "-            && (this.currentToken == TokenNameDOT)){", "-         this.lastCheckPoint = enumConstant.sourceStart;", "-         this.restartRecovery = true;", "-         return;", "-      }", "-\t  this.lastCheckPoint = this.scanner.startPosition; // force to restart at this exact position", "-      this.lastIgnoredToken = -1;", "-      this.restartRecovery = true;"]}], "num": 40841}
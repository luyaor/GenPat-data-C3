{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6a9d71ceebf27f73c3b204ffaf4a7a1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d797003c8d6dce966a73d90fd4ce84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c6083a2d48fa11ffa1e9554a2f00be6af36feafe", "commitAfterChange": "6dbe2813dd7277bd2252f3441ba09237b6b43790", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding, ITypeAnnotationWalker externalAnnotationWalker)", "signatureAfterChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding, ITypeAnnotationWalker externalAnnotationWalker)", "diff": ["-\tchar[][] nullableAnnotationName = this.environment.getNullableAnnotationName();", "-\tchar[][] nonNullAnnotationName = this.environment.getNonNullAnnotationName();", "-\tchar[][] nonNullByDefaultAnnotationName = this.environment.getNonNullByDefaultAnnotationName();", "-\tif (nullableAnnotationName == null || nonNullAnnotationName == null || nonNullByDefaultAnnotationName == null)", "-\t\treturn; // not well-configured to use null annotations", "-\t\t\tchar[][] typeName = signature2qualifiedTypeName(annotationTypeName);", "-\t\t\tif (CharOperation.equals(typeName, nonNullByDefaultAnnotationName)) {", "+\t\t\tint typeBit = this.environment.getNullAnnotationBit(signature2qualifiedTypeName(annotationTypeName));", "+\t\t\tif (typeBit == TypeIds.BitNonNullByDefaultAnnotation) {", "-\t\t\t\tif (methodBinding.defaultNullness == Binding.NULL_UNSPECIFIED_BY_DEFAULT)", "+\t\t\t\tif (methodBinding.defaultNullness == Binding.NULL_UNSPECIFIED_BY_DEFAULT) {", "-\t\t\t\telse if (methodBinding.defaultNullness != 0)", "+\t\t\t\t} else if (methodBinding.defaultNullness != 0) {", "-\t\t\t} else if (CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\t\tif (methodBinding.defaultNullness == Binding.NONNULL_BY_DEFAULT && this.environment.usesNullTypeAnnotations()) {", "+\t\t\t\t\t\t// reading a decl-nnbd in a project using type annotations, mimic corresponding semantics by enumerating:", "+\t\t\t\t\t\tmethodBinding.defaultNullness |= Binding.DefaultLocationParameter | Binding.DefaultLocationReturnType;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (typeBit == TypeIds.BitNonNullAnnotation) {", "-\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t} else if (typeBit == TypeIds.BitNullableAnnotation) {", "-\t\t\t\t\t\tchar[][] typeName = signature2qualifiedTypeName(annotationTypeName);", "-\t\t\t\t\t\tif (CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\t\t\tint typeBit = this.environment.getNullAnnotationBit(signature2qualifiedTypeName(annotationTypeName));", "+\t\t\t\t\t\tif (typeBit == TypeIds.BitNonNullAnnotation) {", "-\t\t\t\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t\t\t\t} else if (typeBit == TypeIds.BitNullableAnnotation) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37cab26793bbd17be0a3ee09631afea3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": "  void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "diff": ["+\tif (this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t// FIXME(stephan): the following code could be used as a stop-gap measure to hook type annotation tagBits into our existing analysis:", "+//\t\tmethodBinding.tagBits |= (methodBinding.returnType.tagBits & TagBits.AnnotationNullMASK);", "+//\t\tTypeBinding[] parameters = methodBinding.parameters;", "+//\t\tint numVisibleParams = parameters.length;", "+//\t\tfor (int j = 0; j < numVisibleParams; j++) {", "+//\t\t\tif ((parameters[j].tagBits & TagBits.AnnotationNonNull) != 0) {", "+//\t\t\t\tif (methodBinding.parameterNonNullness == null)", "+//\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "+//\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;", "+//\t\t\t\tbreak;", "+//\t\t\t} else if ((parameters[j].tagBits & TagBits.AnnotationNullable) != 0) {", "+//\t\t\t\tif (methodBinding.parameterNonNullness == null)", "+//\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "+//\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.FALSE;", "+//\t\t\t\tbreak;", "+//\t\t\t}", "+//\t\t}", "+\t\t// END", "+\t\treturn; // not using method.tagBits and parameterNonNullness when we have type annotations.", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "710bf076ecba30c38297c6d7b9845888", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": "  void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "diff": ["-\tif (this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "-\t\t// FIXME(stephan): the following code could be used as a stop-gap measure to hook type annotation tagBits into our existing analysis:", "-//\t\tmethodBinding.tagBits |= (methodBinding.returnType.tagBits & TagBits.AnnotationNullMASK);", "-//\t\tTypeBinding[] parameters = methodBinding.parameters;", "-//\t\tint numVisibleParams = parameters.length;", "-//\t\tfor (int j = 0; j < numVisibleParams; j++) {", "-//\t\t\tif ((parameters[j].tagBits & TagBits.AnnotationNonNull) != 0) {", "-//\t\t\t\tif (methodBinding.parameterNonNullness == null)", "-//\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "-//\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;", "-//\t\t\t\tbreak;", "-//\t\t\t} else if ((parameters[j].tagBits & TagBits.AnnotationNullable) != 0) {", "-//\t\t\t\tif (methodBinding.parameterNonNullness == null)", "-//\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "-//\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.FALSE;", "-//\t\t\t\tbreak;", "-//\t\t\t}", "-//\t\t}", "-\t\t// END", "-\t\treturn; // not using method.tagBits and parameterNonNullness when we have type annotations.", "-\t}", "+\tboolean useTypeAnnotations = this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8;", "+\t// in 1.8 we only need @NonNullByDefault, see below and exit further down.", "-\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nonNullAnnotationName)) {", "-\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "-\t\t\t\texplicitNullness = true;", "-\t\t\t}", "-\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nullableAnnotationName)) {", "-\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullable;", "-\t\t\t\texplicitNullness = true;", "+\t\t\tif (!useTypeAnnotations) {", "+\t\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "+\t\t\t\t\texplicitNullness = true;", "+\t\t\t\t}", "+\t\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullable;", "+\t\t\t\t\texplicitNullness = true;", "+\t\t\t\t}", "+\tif (useTypeAnnotations)", "+\t\treturn;", "+"]}], "num": 13789}
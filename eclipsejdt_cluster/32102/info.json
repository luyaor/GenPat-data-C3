{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd0b6de0d4e5b5a178937205fddbd485", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "009c397d9c84d8dfc681babbedc41c93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8f906774856d3fb8be48e8c1fa76527878a0f865", "commitAfterChange": "ecf6de5abf72d6130a58d26da044687c85216430", "methodNumberBeforeChange": 785, "methodNumberAfterChange": 785, "signatureBeforeChange": " public void test779()", "signatureAfterChange": " public void test779()", "diff": ["+\t", "+\tString expectedOutput =", "+\t\t\t\"  // Method descriptor #29 (I)Ljava/lang/Object;\\n\" + ", "+\t\t\t\"  // Stack: 2, Locals: 2\\n\" + ", "+\t\t\t\"  public bridge synthetic Object get(int arg);\\n\" + ", "+\t\t\t\"    0  aload_0\\n\" + ", "+\t\t\t\"    1  iload_1\\n\" + ", "+\t\t\t\"    2  invokevirtual X$1.get(int) : java.lang.String  [37]\\n\" + ", "+\t\t\t\"    5  areturn\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 1]\\n\";", "+\t", "+\t// check no unnecessary checkcast on bridge method for X$1", "+\ttry {", "+\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X$1.class\");", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "+\t\tint index = result.indexOf(expectedOutput);", "+\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\t\t}", "+\t\tif (index == -1) {", "+\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "+\t\t}", "+\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "+\t\tassertTrue(false);", "+\t} catch (IOException e) {", "+\t\tassertTrue(false);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87e1f99f77c98b78196e74069977a419", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bfcf9b26d6e4144cb0c2640d02cc59095e635771", "commitAfterChange": "dcd57d09638877b63364224680d27d9dec37d5fa", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void __test034()", "signatureAfterChange": " public void test037()", "diff": ["-public void __test034() { ", "+public void test037() { ", "-\t// TODO need to add disassembled code to check that the declaring class is ArrayList", "+", "+\tString expectedOutput =", "+\t\t\"  // Method descriptor #43 (Ljava/util/ArrayList;)V\\n\" + ", "+\t\t\"  // Signature: <T:Ljava/util/ArrayList<Ljava/lang/String;>;>(TT;)V\\n\" + ", "+\t\t\"  // Stack: 2, Locals: 3\\n\" + ", "+\t\t\"  public static void foo(ArrayList t);\\n\" + ", "+\t\t\"     0  aload_0 [t]\\n\" + ", "+\t\t\"     1  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator [45]\\n\" + ", "+\t\t\"     4  astore_2\\n\" + ", "+\t\t\"     5  goto 25\\n\" + ", "+\t\t\"     8  aload_2\\n\" + ", "+\t\t\"     9  invokeinterface java.util.Iterator.next() : java.lang.Object [49] [nargs: 1]\\n\" + ", "+\t\t\"    14  checkcast java.lang.String [19]\\n\" + ", "+\t\t\"    17  astore_1 [s]\\n\" + ", "+\t\t\"    18  getstatic java.lang.System.out : java.io.PrintStream [55]\\n\" + ", "+\t\t\"    21  aload_1 [s]\\n\" + ", "+\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.String) : void [61]\\n\" + ", "+\t\t\"    25  aload_2\\n\" + ", "+\t\t\"    26  invokeinterface java.util.Iterator.hasNext() : boolean [67] [nargs: 1]\\n\" + ", "+\t\t\"    31  ifne 8\\n\" + ", "+\t\t\"    34  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 8]\\n\" + ", "+\t\t\"        [pc: 18, line: 9]\\n\" + ", "+\t\t\"        [pc: 25, line: 8]\\n\" + ", "+\t\t\"        [pc: 34, line: 10]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 35] local: t index: 0 type: java.util.ArrayList\\n\" + ", "+\t\t\"        [pc: 18, pc: 34] local: s index: 1 type: java.lang.String\\n\" + ", "+\t\t\"      Local variable type table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 35] local: t index: 0 type: T\\n\";", "+\t", "+\ttry {", "+\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X.class\");", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "+\t\tint index = result.indexOf(expectedOutput);", "+\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\t\t}", "+\t\tif (index == -1) {", "+\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "+\t\t}", "+\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "+\t\tassertTrue(false);", "+\t} catch (IOException e) {", "+\t\tassertTrue(false);", "+\t}"]}], "num": 32102}
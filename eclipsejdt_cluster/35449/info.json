{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c7a6e03ee39f90f564622b4ca457941", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ef5fd5a7438c5f5237d0c4f4adf1d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b64f224a477bcbe9ca6144dc3c1b296938ab0569", "commitAfterChange": "e2a464122cca0e168e5e6a45c115970b861f3e3d", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "signatureAfterChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tReferenceBinding receiverType)", "diff": ["-\t\t\tMethodBinding[] existingMethods = receiverType.availableMethods();\r", "-\t\t\tfor(int i =0, length = existingMethods == null ? 0 : existingMethods.length; i < length ; i++){\r", "-\t\t\t\tMethodBinding existingMethod = existingMethods[i];\r", "-\t\t\t\tif (CharOperation.equals(method.selector, existingMethod.selector, true)\r", "-\t\t\t\t\t&& method.areParametersEqual(existingMethod)){\r", "-\t\t\t\t\tcontinue next;\t\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\r", "-\t\t\t\tObject[] other = (Object[]) methodsFound.elementAt(i);\r", "-\t\t\t\tMethodBinding otherMethod = (MethodBinding) other[0];\r", "+\t\t\t\tMethodBinding otherMethod = (MethodBinding) methodsFound.elementAt(i);\r", "-\r", "-\t\t\t\t\tif (method.declaringClass.isSuperclassOf(otherMethod.declaringClass))\r", "-\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\t\tif (otherMethod.declaringClass.isInterface())\r", "-\t\t\t\t\t\tif (method\r", "-\t\t\t\t\t\t\t.declaringClass\r", "-\t\t\t\t\t\t\t.implementsInterface(otherMethod.declaringClass, true))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\tif (method.declaringClass.isInterface())\r", "-\t\t\t\t\t\tif(otherMethod\r", "-\t\t\t\t\t\t\t.declaringClass\r", "-\t\t\t\t\t\t\t.implementsInterface(method.declaringClass,true))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t\tcontinue next;\r", "-\t\t\tmethodsFound.add(new Object[]{method, receiverType});\r", "+\t\t\tmethodsFound.add(method);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c328ab98fd29657a3446ef40bdb65c54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "387b2eaf3ce0e720e6825fac06c84c2963551791", "commitAfterChange": "c848c526397205050ce74f2846e59bdbf8b870a1", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\t\t\t\tfor (int i = 0, length = existingMethods.length; i < length; i++) {", "-\t\t\t\t\tif (existingMethods[i].declaringClass != inheritedMethod.declaringClass && areMethodsCompatible(existingMethods[i], inheritedMethod)) {", "-\t\t\t\t\t\tif (inheritedMethod.isDefault() && inheritedMethod.isAbstract())", "-\t\t\t\t\t\t\tcheckPackagePrivateAbstractMethod(inheritedMethod);", "+\t\t\t\texisting : for (int i = 0, length = existingMethods.length; i < length; i++) {", "+\t\t\t\t\tMethodBinding existingMethod = existingMethods[i];", "+\t\t\t\t\tif (existingMethod.declaringClass != inheritedMethod.declaringClass && areMethodsCompatible(existingMethod, inheritedMethod)) {", "+\t\t\t\t\t\tif (inheritedMethod.isDefault()) {", "+\t\t\t\t\t\t\tif (inheritedMethod.isAbstract()) {", "+\t\t\t\t\t\t\t\tcheckPackagePrivateAbstractMethod(inheritedMethod);", "+\t\t\t\t\t\t\t} else if (existingMethod.declaringClass.fPackage != inheritedMethod.declaringClass.fPackage) {", "+\t\t\t\t\t\t\t\tif (this.type.fPackage == inheritedMethod.declaringClass.fPackage && !areReturnTypesCompatible(inheritedMethod, existingMethod))", "+\t\t\t\t\t\t\t\t\tcontinue existing; // may need to record incompatible return type", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}], "num": 35449}
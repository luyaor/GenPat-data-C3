{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "820e2158918650e472c03186ca36a917", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3feed1d687e2d6c702dd3f296d4fa5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "e686f52588b3553d0b0ba4d48f2d54683dd7a4fd", "commitAfterChange": "4acccab2f9ef38ff3831903ed60c83256b8f84dc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static ICodeFormatter createDefaultCodeFormatter(Map options)", "signatureAfterChange": " \tpublic static ICodeFormatter createDefaultCodeFormatter(Map options)", "diff": ["-\t\t\tcodeFormatter = new DefaultCodeFormatter(options);", "+\t\t\tclass CompatibleCodeFormatter extends DefaultCodeFormatter implements ICodeFormatter {", "+\t\t\t\tCompatibleCodeFormatter(Map settings) {", "+\t\t\t\t\tsuper(settings);", "+\t\t\t\t}", "+\t\t\t\t/**", "+\t\t\t\t * @see org.eclipse.jdt.core.ICodeFormatter#format(String, int, int[], String)", "+\t\t\t\t */", "+\t\t\t\tpublic String format(", "+\t\t\t\t\tString source,", "+\t\t\t\t\tint indentationLevel,", "+\t\t\t\t\tint[] positions,", "+\t\t\t\t\tString lineSeparator) {", "+\t\t\t\t\t", "+\t\t\t\t\tTextEdit textEdit = probeFormatting(source, indentationLevel, lineSeparator, 0, source.length());", "+\t\t\t\t\tif (textEdit == null) {", "+\t\t\t\t\t\treturn source;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tDocument document = new Document(source);", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ttextEdit.apply(document, TextEdit.UPDATE_REGIONS);", "+\t\t\t\t\t\t} catch (MalformedTreeException e) {", "+\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t} catch (BadLocationException e) {", "+\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn document.get();", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t", "+\t\t\t}", "+\t\t\tcodeFormatter = new CompatibleCodeFormatter(options);", "-\t\t\tcodeFormatter = new CodeFormatter(options);", "+\t\t\tcodeFormatter = new org.eclipse.jdt.internal.formatter.CodeFormatter(options);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7af223d874db965970bf5019377a1e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "e0d2ac0f68410ce5e24c00863a7757362b38f650", "commitAfterChange": "bd5031aa06ed60d49116e20ca597d7bf22898173", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static ICodeFormatter createDefaultCodeFormatter(Map options)", "signatureAfterChange": " \tpublic static ICodeFormatter createDefaultCodeFormatter(Map options)", "diff": ["-\t\tfinal String NEW_CODE_FORMATTER_ACTIVATION = JavaCore.PLUGIN_ID + \".newformatter.activation\"; //$NON-NLS-1$", "-\t", "-\t\tObject newFormatterActivation = JavaCore.getOption(NEW_CODE_FORMATTER_ACTIVATION);", "-\t\t", "-\t\tICodeFormatter codeFormatter;", "-\t\tif (JavaCore.ENABLED.equals(newFormatterActivation)) {", "-\t\t\tclass CompatibleCodeFormatter extends DefaultCodeFormatter implements ICodeFormatter {", "-\t\t\t\tCompatibleCodeFormatter(Map settings) {", "-\t\t\t\t\tsuper(settings);", "-\t\t\t\t}", "-\t\t\t\t/**", "-\t\t\t\t * @see org.eclipse.jdt.core.ICodeFormatter#format(String, int, int[], String)", "-\t\t\t\t */", "-\t\t\t\tpublic String format(", "-\t\t\t\t\tString source,", "-\t\t\t\t\tint indentationLevel,", "-\t\t\t\t\tint[] positions,", "-\t\t\t\t\tString lineSeparator) {", "-\t\t\t\t\t", "-\t\t\t\t\tTextEdit textEdit = probeFormatting(source, indentationLevel, lineSeparator, 0, source.length());", "-\t\t\t\t\tif (textEdit == null) {", "-\t\t\t\t\t\treturn source;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tDocument document = new Document(source);", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\ttextEdit.apply(document, TextEdit.UPDATE_REGIONS);", "-\t\t\t\t\t\t} catch (MalformedTreeException e) {", "-\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t} catch (BadLocationException e) {", "-\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn document.get();", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t", "-\t\t\t}", "-\t\t\tcodeFormatter = new CompatibleCodeFormatter(options);", "-\t\t} else {", "-\t\t\tif (options == null) options = JavaCore.getOptions();", "-\t\t\tcodeFormatter = new org.eclipse.jdt.internal.formatter.CodeFormatter(options);", "-\t\t}", "-\t\treturn codeFormatter;", "+\t\tif (options == null) options = JavaCore.getOptions();", "+\t\treturn new org.eclipse.jdt.internal.formatter.CodeFormatter(options);"]}], "num": 53665}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b36bd5119dcb546f5cf214100ab8005d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7881a814548b7e24ad728ae875aebf4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testBug51363() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51363() throws JavaModelException", "diff": ["-\t\tassertEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "-\t\tassertEquals(this.prefix+\"Wrong number of comments\", 2, unit.getCommentTable().length);", "+\t\tassumeEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\tassumeEquals(this.prefix+\"Wrong number of comments\", 2, unit.getCommentList().size());", "-\t\tComment comment = unit.getCommentTable()[0];", "-\t\tassertTrue(this.prefix+\"Comment should be a line comment \", comment.isLineComment());", "+\t\tComment comment = (Comment) unit.getCommentList().get(0);", "+\t\tassumeTrue(this.prefix+\"Comment should be a line comment \", comment.isLineComment());", "-\t\tassertEquals(\"Wrong length for line comment \"+comment, \"public\", sourceStr.substring(startPos, startPos+6));", "+\t\tassumeEquals(\"Wrong length for line comment \"+comment, \"\\\\u000D\\\\u000A\", sourceStr.substring(startPos, startPos+12));", "-\t\tcomment = unit.getCommentTable()[1];", "-\t\tassertTrue(this.prefix+\"Comment should be a line comment\", comment.isLineComment());", "+\t\tcomment = (Comment) unit.getCommentList().get(1);", "+\t\tassumeTrue(this.prefix+\"Comment should be a line comment\", comment.isLineComment());", "-\t\tassertEquals(\"Wrong length for line comment \"+comment, \"void\", sourceStr.substring(startPos, startPos+4));", "+\t\tassumeEquals(\"Wrong length for line comment \"+comment, \"\\\\u000Dvoid\", sourceStr.substring(startPos, startPos+10));", "+//\t\tverifyComments(\"testBug51363\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef488f915f94de52e3151d2d67a94129", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprotected void verifyComments(String sourceStr, char[] source, Comment[] unitComments)", "signatureAfterChange": " \tprotected void verifyComments(String sourceStr, char[] source, List unitComments)", "diff": ["-\tprotected void verifyComments(String sourceStr, char[] source, Comment[] unitComments) {", "+\tprotected void verifyComments(String sourceStr, char[] source, List unitComments) {", "-\t\tassertEquals(this.prefix+\"Wrong number of comments in source:\\n\"+sourceStr+\"\\n\", this.comments.size(), unitComments.length);", "+\t\tint size = unitComments.size();", "+\t\tassumeEquals(this.prefix+\"Wrong number of comments in source:\\n\"+sourceStr+\"\\n\", this.comments.size(), size);", "-\t\tfor (int i=0; i<unitComments.length; i++) {", "-\t\t\tComment comment = unitComments[i];", "+\t\tfor (int i=0; i<size; i++) {", "+\t\t\tComment comment = (Comment) unitComments.get(i);", "-\t\t\tassertEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "+\t\t\tassumeEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "-\t\t\t\tassertEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "+\t\t\t\tassumeEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));"]}], "num": 13499}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f28ea58509dafcaa4d7ad372b905537f", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c561c027693cb938e47f0bdaa0e0049", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "5f4e9c737df9b212364b9e892d0039c92ce2476a", "commitAfterChange": "3a2d8fc091b6c143de1eaab0e407d9046bc0425f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "\r void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r void setOption(ConfigurableOption setting)", "diff": ["-\tif(optionID.equals(componentName + \".debugLocalVariable\"/*nonNLS*/)){\r", "+\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "-\t} else if(optionID.equals(componentName + \".debugLineNumber\"/*nonNLS*/)) {\r", "+\t} else if(optionID.equals(OPTION_LineNumberAttribute)) {\r", "-\t}else if(optionID.equals(componentName + \".debugSourceFile\"/*nonNLS*/)) {\r", "+\t}else if(optionID.equals(OPTION_SourceFileAttribute)) {\r", "-\t}else if(optionID.equals(componentName + \".codegenUnusedLocal\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "-\t}else if(optionID.equals(componentName + \".problemUnreachableCode\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportUnreachableCode)){\r", "-\t\t\tcase 2 :\r", "+\t\t\tcase 2 : \r", "-\t}else if(optionID.equals(componentName + \".problemInvalidImport\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportInvalidImport)){\r", "-\t}else if(optionID.equals(componentName + \".codegenTargetPlatform\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_TargetPlatform)){\r", "-\t}else if(optionID.equals(componentName + \".problemMethodWithConstructorName\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "-\t}else if(optionID.equals(componentName + \".problemOverridingPackageDefaultMethod\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "-\t}else if(optionID.equals(componentName + \".problemDeprecation\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportDeprecation)){\r", "-\t}else if(optionID.equals(componentName + \".problemHiddenCatchBlock\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "-\t}else if(optionID.equals(componentName + \".problemUnusedLocal\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportUnusedLocal)){\r", "-\t}else if(optionID.equals(componentName + \".problemUnusedParameter\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportUnusedParameter)){\r", "-\t}else if(optionID.equals(componentName + \".problemSyntheticAccessEmulation\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "-\t}else if(optionID.equals(componentName + \".problemNonExternalizedStringLiteral\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "-\t}else if(optionID.equals(componentName + \".problemAssertIdentifier\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "-\t}else if(optionID.equals(componentName + \".source\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_Source)){\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e95e2baebb7d41e719ae3f79469315", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "5f4e9c737df9b212364b9e892d0039c92ce2476a", "commitAfterChange": "3a2d8fc091b6c143de1eaab0e407d9046bc0425f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r public void setOption(ConfigurableOption setting)", "diff": ["-\tString componentName = CodeFormatter.class.getName();\r", "-\tif(optionID.equals(componentName+\".newlineOpeningBrace\"/*nonNLS*/)){\r", "+\tif(optionID.equals(OPTION_InsertNewlineBeforeOpeningBrace)){\r", "-\t}else if(optionID.equals(componentName+\".newlineControlStatement\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_InsertNewlineInControlStatement)){\r", "-\t}else if(optionID.equals(componentName+\".newlineClearAll\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_ClearAllBlankLines)){\r", "-\t}else if(optionID.equals(componentName+\".newlineElseIf\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_InsertNewLineBetweenElseAndIf)){\r", "-\t}else if(optionID.equals(componentName+\".newlineEmptyBlock\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_InsertNewLineInEmptyBlock)){\r", "-\t}else if(optionID.equals(componentName+\".lineSplit\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_SplitLineExceedingLength)){\r", "-\t}else if(optionID.equals(componentName+\".compactAssignment\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_CompactAssignment)){\r", "-\t}else if(optionID.equals(componentName+\".tabulationChar\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_TabulationChar)){\r", "-\t}else if(optionID.equals(componentName+\".tabulationSize\"/*nonNLS*/)){\r", "+\t}else if(optionID.equals(OPTION_TabulationSize)){\r"]}], "num": 25664}
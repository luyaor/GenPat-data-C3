{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bce96dac88b93f9b40b376e2686094dd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "204b3189301e473b19270aea0211d6da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "686d49fbd8450ce0409a37660e136752d9a01dc6", "commitAfterChange": "5a709311100399f724e07cfa2abf31a306fb6f62", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "diff": ["-\t\t\t\tsubstitutedVariable.superclass = (ReferenceBinding) (substitutedSuperclass.isArrayType() ", "-\t\t\t\t\t\t\t? parameterizedDeclaringClass.environment.getType(JAVA_LANG_OBJECT)", "-\t\t\t\t\t\t\t: substitutedSuperclass);", "-\t\t\t\tsubstitutedVariable.superInterfaces = Scope.substitute(substitution, originalVariable.superInterfaces);", "+\t\t\t\tReferenceBinding[] substitutedInterfaces = Scope.substitute(substitution, originalVariable.superInterfaces);", "-\t\t\t\t\t\t? substitutedSuperclass // could be array type", "-\t\t\t\t\t\t: substitutedVariable.superInterfaces[0];", "+\t\t\t\t\t\t? substitutedSuperclass // could be array type or interface", "+\t\t\t\t\t\t: substitutedInterfaces[0];", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tswitch (substitutedSuperclass.kind()) {", "+\t\t\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\t\t\tsubstitutedVariable.superclass = parameterizedDeclaringClass.environment.getType(JAVA_LANG_OBJECT);", "+\t\t\t\t\t\tsubstitutedVariable.superInterfaces = substitutedInterfaces;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif (substitutedSuperclass.isInterface()) {", "+\t\t\t\t\t\t\tsubstitutedVariable.superclass = parameterizedDeclaringClass.environment.getType(JAVA_LANG_OBJECT);", "+\t\t\t\t\t\t\tint interfaceCount = substitutedInterfaces.length;", "+\t\t\t\t\t\t\tSystem.arraycopy(substitutedInterfaces, 0, substitutedInterfaces = new ReferenceBinding[interfaceCount+1], 1, interfaceCount);", "+\t\t\t\t\t\t\tsubstitutedInterfaces[0] = (ReferenceBinding) substitutedSuperclass;", "+\t\t\t\t\t\t\tsubstitutedVariable.superInterfaces = substitutedInterfaces;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tsubstitutedVariable.superclass = (ReferenceBinding) substitutedSuperclass; // typeVar was extending other typeVar which got substituted with interface", "+\t\t\t\t\t\t\tsubstitutedVariable.superInterfaces = substitutedInterfaces;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97268e7d8a8ce81d543f10bea9b1f705", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntersectionCastTypeReference.java", "commitBeforeChange": "fb41fdb7e255d6e5b46ffe2a413c2cecddfaeeea", "commitAfterChange": "e63b9746075cfa36f9c16fdf188f3c8e6604903a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "diff": ["+\t\tint typeCount = 0;", "+\t\tnextType:", "-\t\t\t} else if (!type.isInterface()) {  // TODO: understand how annotations play here ...", "+\t\t\t} else if (!type.isInterface()) {", "-\t\t\tfor (int j = 0; j < i; j++) {", "-\t\t\t\tif (TypeBinding.equalsEquals(intersectingTypes[j], type)) {", "+\t\t\tfor (int j = 0; j < typeCount; j++) {", "+\t\t\t\tfinal ReferenceBinding priorType = intersectingTypes[j];", "+\t\t\t\tif (TypeBinding.equalsEquals(priorType, type)) {", "+\t\t\t\tif (!priorType.isInterface())", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (type.findSuperTypeOriginatingFrom(priorType) != null) {", "+\t\t\t\t\tintersectingTypes[j] = (ReferenceBinding) type;", "+\t\t\t\t\tcontinue nextType;", "+\t\t\t\t}", "+\t\t\t\tif (priorType.findSuperTypeOriginatingFrom(type) != null)", "+\t\t\t\t\tcontinue nextType;", "-\t\t\tintersectingTypes[i] = (ReferenceBinding) type;", "+\t\t\tintersectingTypes[typeCount++] = (ReferenceBinding) type;", "+\t\tif (typeCount != length) {", "+\t\t\tif (typeCount == 1) {", "+\t\t\t\treturn this.resolvedType = intersectingTypes[0];", "+\t\t\t}", "+\t\t\tSystem.arraycopy(intersectingTypes, 0, intersectingTypes = new ReferenceBinding[typeCount], 0, typeCount);", "+\t\t}"]}], "num": 22}
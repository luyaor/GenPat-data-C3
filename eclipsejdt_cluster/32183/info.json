{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6296c3bace0f538ffc7a19a2d08e9ee3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d28165d7032d95ac693f80bd20ca16d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tITypeBinding resolveExpressionType(Expression expression)", "diff": ["-\t\t\treturn this.getTypeBinding(arrayAllocationExpression.arrayTb);", "+\t\t\treturn this.getTypeBinding(arrayAllocationExpression.resolvedType);", "-\t\t\treturn this.getTypeBinding(castExpression.castTb);", "+\t\t\treturn this.getTypeBinding(castExpression.resolvedType);", "-\t\t\treturn this.getTypeBinding(operatorExpression.expressionType);", "+\t\t\treturn this.getTypeBinding(operatorExpression.resolvedType);", "-\t\t\treturn this.getTypeBinding(instanceOfExpression.expressionType);", "+\t\t\treturn this.getTypeBinding(instanceOfExpression.resolvedType);", "-\t\t\treturn this.getTypeBinding(arrayReference.arrayElementBinding);", "+\t\t\treturn this.getTypeBinding(arrayReference.resolvedType);", "-\t\t\treturn this.getTypeBinding(conditionalExpression.expressionType);", "+\t\t\treturn this.getTypeBinding(conditionalExpression.resolvedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1bbe3fed61b4e54259c4ec84980af8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "b3a2f7bfaa3438c01da8001220d197a764da19bb", "commitAfterChange": "40a85c2d4c57226c917bc0f991a26ac5a5d8b085", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "diff": ["-\t\t\tOperatorExpression operatorExpression = (OperatorExpression) this.newAstToOldAst.get(expression);", "-\t\t\treturn this.getTypeBinding(operatorExpression.resolvedType);", "+\t\t\tObject node = this.newAstToOldAst.get(expression);", "+\t\t\tif (node instanceof OperatorExpression) {", "+\t\t\t\tOperatorExpression operatorExpression = (OperatorExpression) node;", "+\t\t\t\treturn this.getTypeBinding(operatorExpression.resolvedType);", "+\t\t\t} else if (node instanceof StringLiteralConcatenation) {", "+\t\t\t\tStringLiteralConcatenation stringLiteralConcatenation = (StringLiteralConcatenation) node;", "+\t\t\t\treturn this.getTypeBinding(stringLiteralConcatenation.resolvedType);", "+\t\t\t}"]}], "num": 32183}
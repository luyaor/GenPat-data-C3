{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56fcb59654c0b8e1d5d21e313d9c28d0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1103182e2577c630539130084b6923ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "fa4cf904b1d5690e02fc0246dbc8bc14a58e5d04", "commitAfterChange": "4ddddb5424dafb4b8650d4349863e03fece6ac06", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 66, "signatureBeforeChange": "  \tprivate char[][] getParameterNames(char[] methodDescriptor, ICodeAttribute codeAttribute, int accessFlags)", "signatureAfterChange": "  \tprivate char[][] getParameterNames(char[] methodDescriptor, ICodeAttribute codeAttribute, IMethodParametersAttribute parametersAttribute, int accessFlags)", "diff": ["-\tprivate char[][] getParameterNames(char[] methodDescriptor, ICodeAttribute codeAttribute, int accessFlags) {", "+\tprivate char[][] getParameterNames(char[] methodDescriptor, ICodeAttribute codeAttribute, IMethodParametersAttribute parametersAttribute, int accessFlags) {", "-\t\tif (codeAttribute != null) {", "-\t\t\tILocalVariableAttribute localVariableAttribute = codeAttribute.getLocalVariableAttribute();", "-\t\t\tif (localVariableAttribute != null) {", "-\t\t\t\tILocalVariableTableEntry[] entries = localVariableAttribute.getLocalVariableTable();", "-\t\t\t\tfinal int startingIndex = (accessFlags & IModifierConstants.ACC_STATIC) != 0 ? 0 : 1;", "-\t\t\t\tfor (int i = 0; i < paramCount; i++) {", "-\t\t\t\t\tILocalVariableTableEntry searchedEntry = getEntryFor(getLocalIndex(startingIndex, i, methodDescriptor), entries);", "-\t\t\t\t\tif (searchedEntry != null) {", "-\t\t\t\t\t\tparameterNames[i] = searchedEntry.getName();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tparameterNames[i] = CharOperation.concat(Messages.disassembler_parametername.toCharArray(), Integer.toString(i).toCharArray());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0; i < paramCount; i++) {", "+\t\tif (parametersAttribute != null) {", "+\t\t\tint parameterCount = parametersAttribute.getMethodParameterLength();", "+\t\t\tfor (int i = 0; i < paramCount; i++) {", "+\t\t\t\tif (i < parameterCount && parametersAttribute.getParameterName(i) != null) {", "+\t\t\t\t\tparameterNames[i] = parametersAttribute.getParameterName(i);", "+\t\t\t\t} else {", "+\t\t} else if (codeAttribute != null) {", "+\t\t\t\tILocalVariableAttribute localVariableAttribute = codeAttribute.getLocalVariableAttribute();", "+\t\t\t\tif (localVariableAttribute != null) {", "+\t\t\t\t\tILocalVariableTableEntry[] entries = localVariableAttribute.getLocalVariableTable();", "+\t\t\t\t\tfinal int startingIndex = (accessFlags & IModifierConstants.ACC_STATIC) != 0 ? 0 : 1;", "+\t\t\t\t\tfor (int i = 0; i < paramCount; i++) {", "+\t\t\t\t\t\tILocalVariableTableEntry searchedEntry = getEntryFor(getLocalIndex(startingIndex, i, methodDescriptor), entries);", "+\t\t\t\t\t\tif (searchedEntry != null) {", "+\t\t\t\t\t\t\tparameterNames[i] = searchedEntry.getName();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tparameterNames[i] = CharOperation.concat(Messages.disassembler_parametername.toCharArray(), Integer.toString(i).toCharArray());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tfor (int i = 0; i < paramCount; i++) {", "+\t\t\t\t\t\tparameterNames[i] = CharOperation.concat(Messages.disassembler_parametername.toCharArray(), Integer.toString(i).toCharArray());", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "978dee30cda92af8773008dc80bb7017", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "e92ab0eafbe7472576da485243db5aa49da5df74", "commitAfterChange": "a4e58088a1010e10b50ef0d8683567f65215eac1", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic void consumeLocalVar(char[] varName, int occurrenceCount)", "signatureAfterChange": "  \tpublic void consumeLocalVar(char[] varName, int occurrenceCount)", "diff": ["-\t\t\tthis.scope = this.methodBinding.sourceMethod().scope;", "+\t\t\tAbstractMethodDeclaration sourceMethod = this.methodBinding.sourceMethod();", "+\t\t\tif (sourceMethod != null) {", "+\t\t\t\tthis.scope = sourceMethod.scope;", "+\t\t\t} else {", "+\t\t\t\tchar[][] parameterNames = this.methodBinding.parameterNames;", "+\t\t\t\tfor (int i = 0; i < parameterNames.length; i++) {", "+\t\t\t\t\tif (CharOperation.equals(parameterNames[i], varName)) {", "+\t\t\t\t\t\t// we don't have a compiler binding for this argument, but we can craft one:", "+\t\t\t\t\t\tthis.compilerBinding = new SyntheticLocalVariableBinding(varName, this.methodBinding.parameters[i], this.methodBinding);", "+\t\t\t\t\t\tthis.methodBinding = null;", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t \tfor (int i = 0; i < this.scope.localIndex; i++) {", "-\t\t\tLocalVariableBinding local = this.scope.locals[i];", "-\t\t\tif (CharOperation.equals(local.name, varName)", "-\t\t\t\t\t&& occurrenceCount-- == 0) {", "-\t\t\t\tthis.methodBinding = null;", "-\t\t\t\tthis.compilerBinding = local;", "-\t\t\t\treturn;", "+\t\tif (this.scope != null) {", "+\t\t \tfor (int i = 0; i < this.scope.localIndex; i++) {", "+\t\t\t\tLocalVariableBinding local = this.scope.locals[i];", "+\t\t\t\tif (CharOperation.equals(local.name, varName)", "+\t\t\t\t\t\t&& occurrenceCount-- == 0) {", "+\t\t\t\t\tthis.methodBinding = null;", "+\t\t\t\t\tthis.compilerBinding = local;", "+\t\t\t\t\treturn;", "+\t\t\t\t}"]}], "num": 71087}
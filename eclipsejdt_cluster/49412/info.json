{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f734717711c9b9795fffd23073d819bd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76a9bd75c474e06084ef88a83bcbef81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "67744c35fb096b073b6eb207529145544c47d6b6", "commitAfterChange": "a69ec5abfba2adcf10fe50b7c7be7bc087bd47c7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\tSourceElementParser parser = new SourceElementParser(requestor, problemFactory, new CompilerOptions(getJavaProject().getOptions(true)));", "+\tSourceElementParser parser = new SourceElementParser(", "+\t\trequestor, ", "+\t\tproblemFactory, ", "+\t\tnew CompilerOptions(getJavaProject().getOptions(true)),", "+\t\tUSE_LOCAL_ELEMENTS/*report local declarations*/);", "-\t\t}, false /*diet parse*/);", "+\t\t}, USE_LOCAL_ELEMENTS /*full parse if use local elements only*/);", "-\t\tCompilationUnitProblemFinder.process(unit, this, perWorkingCopyInfo, problemFactory, pm);", "+\t\tCompilationUnitProblemFinder.process(unit, this, parser, perWorkingCopyInfo, problemFactory, pm);", "-\t}\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa55646e6abc29cf9c1679152c0b06c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "7e33e0081c2b631262f97075c28fd3adbfb92392", "commitAfterChange": "ebc568fad377cf85a79bc0aeeea9122e5115f057", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\tIProblemFactory factory = ", "-\t\tcomputeProblems ", "-\t\t\t?  CompilationUnitProblemFinder.getProblemFactory(getElementName().toCharArray(), perWorkingCopyInfo, pm) ", "-\t\t\t:  \tnew DefaultProblemFactory();", "-\tSourceElementParser parser = new SourceElementParser(requestor, factory, new CompilerOptions(getJavaProject().getOptions(true)));", "+\tIProblemFactory problemFactory = new DefaultProblemFactory();", "+\tSourceElementParser parser = new SourceElementParser(requestor, problemFactory, new CompilerOptions(getJavaProject().getOptions(true)));", "-\tif (computeProblems) {", "-\t\tperWorkingCopyInfo.beginReporting();", "-\t}", "-\t\t}, computeProblems /*full parse if compute problems*/);", "+\t\t}, false /*diet parse*/);", "-\t\tCompilationUnitProblemFinder.process(unit, this, perWorkingCopyInfo, pm);", "+\t\tperWorkingCopyInfo.beginReporting();", "+\t\tCompilationUnitProblemFinder.process(unit, this, perWorkingCopyInfo, problemFactory, pm);"]}], "num": 49412}
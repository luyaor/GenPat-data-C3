{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a3d1945f2063db54a74bade2c15de48", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cc719944b1522e0992cd34d45e5363d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "9951b7a54ba18cc36a88513505c20a6b6559265f", "commitAfterChange": "37e893fac6e74361f92234e78fe4ff338a9de8c2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tpublic void computePackageFragmentRoots(\r \t\tObjectVector accumulatedRoots, \r \t\tObjectSet visitedProjects, \r \t\tboolean insideOriginalProject,\r \t\tboolean checkExistency,\r \t\tboolean computeBuilderRoots)", "signatureAfterChange": "\r \tpublic void computePackageFragmentRoots(\r \t\tObjectVector accumulatedRoots, \r \t\tObjectSet rootIDs, \r \t\tboolean insideOriginalProject,\r \t\tboolean checkExistency,\r \t\tboolean computeBuilderRoots)", "diff": ["-\t\tObjectSet visitedProjects, \r", "+\t\tObjectSet rootIDs, \r", "-\t\t\r", "-\t\tif (visitedProjects.contains(this)) return;\r", "-\t\tvisitedProjects.add(this);\r", "-\t\t\r", "+\r", "+\t\tif (insideOriginalProject){\r", "+\t\t\trootIDs.add(rootID());\r", "+\t\t}\t\r", "-\t\t\t\t\tvisitedProjects,\r", "+\t\t\t\t\trootIDs,\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42b607eec68be2bb99009b2770c5da0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "d57d057b9e029964391a7d18231884c456809f0a", "commitAfterChange": "a5db2eb78d347817bbf37d865afb84de837fdf1b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visitedProjects, IClasspathEntry referringEntry) throws JavaModelException", "signatureAfterChange": " void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet projectsToBeAdded, IClasspathEntry referringEntry) throws JavaModelException", "diff": ["-void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visitedProjects, IClasspathEntry referringEntry) throws JavaModelException {", "+void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet projectsToBeAdded, IClasspathEntry referringEntry) throws JavaModelException {", "-\tif (!project.isAccessible() || !visitedProjects.add(project)) return;", "+\tif (!project.isAccessible() || projectsToBeAdded.contains(project)) return;", "-\t\t\t\t// Need to remove the project from visited projects list to be sure", "-\t\t\t\t// not to skip library when the project will be added as a top level.", "-\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=176831", "-\t\t\t\tvisitedProjects.remove(project);", "-\t\t\t\t\t\tadd((JavaProject) model.getJavaProject(path.lastSegment()), null, includeMask, visitedProjects, cpEntry);", "+\t\t\t\t\t\tprojectsToBeAdded.add(project); // avoid infinite recursion", "+\t\t\t\t\t\tadd((JavaProject) model.getJavaProject(path.lastSegment()), null, includeMask, projectsToBeAdded, cpEntry);", "+\t\t\t\t\t\tprojectsToBeAdded.remove(project);"]}], "num": 50201}
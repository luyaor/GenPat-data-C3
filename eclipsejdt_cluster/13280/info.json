{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20eee8770a3073b155e108b33306d142", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c97cd4baf61805865b7b372725ff62f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 110, "signatureBeforeChange": " \t \tprivate void recordNodes(ASTNode node, org.eclipse.jdt.internal.compiler.ast.ASTNode oldASTNode)", "signatureAfterChange": " \t \tprotected void recordNodes(ASTNode node, org.eclipse.jdt.internal.compiler.ast.ASTNode oldASTNode)", "diff": ["+\tprotected void recordNodes(ASTNode node, org.eclipse.jdt.internal.compiler.ast.ASTNode oldASTNode) {", "+\t\tthis.ast.getBindingResolver().store(node, oldASTNode);", "+\t}", "-\tprivate void recordNodes(ASTNode node, org.eclipse.jdt.internal.compiler.ast.ASTNode oldASTNode) {", "-\t\tthis.ast.getBindingResolver().store(node, oldASTNode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d903b9785e6e6d9071c0c85dcb9e96e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": " \t \tprotected void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["+\tprotected void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression) {", "+\t\tint start = expression.sourceStart;", "+\t\tint end = expression.sourceEnd;", "+\t\tint leftParentCount = 1;", "+\t\tint rightParentCount = 0;", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token = this.scanner.getNextToken();", "+\t\t\texpression.sourceStart = this.scanner.currentPosition;", "+\t\t\tboolean stop = false;", "+\t\t\twhile (!stop && ((token  = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN:", "+\t\t\t\t\t\tleftParentCount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN:", "+\t\t\t\t\t\trightParentCount++;", "+\t\t\t\t\t\tif (rightParentCount == leftParentCount) {", "+\t\t\t\t\t\t\t// we found the matching parenthesis", "+\t\t\t\t\t\t\tstop = true;", "+\t\t\t\t\t\t}", "+\t\t\t}", "+\t\t\texpression.sourceEnd = this.scanner.startPosition - 1;", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t}", "-\t", "-\tprivate void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression) {", "-\t\tint start = expression.sourceStart;", "-\t\tint end = expression.sourceEnd;", "-\t\tint leftParentCount = 1;", "-\t\tint rightParentCount = 0;", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token = this.scanner.getNextToken();", "-\t\t\texpression.sourceStart = this.scanner.currentPosition;", "-\t\t\tboolean stop = false;", "-\t\t\twhile (!stop && ((token  = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN:", "-\t\t\t\t\t\tleftParentCount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN:", "-\t\t\t\t\t\trightParentCount++;", "-\t\t\t\t\t\tif (rightParentCount == leftParentCount) {", "-\t\t\t\t\t\t\t// we found the matching parenthesis", "-\t\t\t\t\t\t\tstop = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\texpression.sourceEnd = this.scanner.startPosition - 1;", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}"]}], "num": 13280}
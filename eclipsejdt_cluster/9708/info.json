{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d4146d1e28d25124995a1d3de452d18", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed47e70fdc1fd24dfd0fe2896513bd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "89c02f523f65c89809fb264fe79e53a85533954d", "commitAfterChange": "56b6a38e6a1d1e5e3885772174f09cd30c719b47", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": " \tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tbuffer.append(' ');", "+\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "-\t\t\tbuffer.append(' ');", "+\t\tCharOperation.replace(fieldDescriptor, '.', '/');", "-\t\t\t.append(' ')", "-\t\t\t.append(' ')", "-\t\t\t.append(' ')", "-\t\t\t.append(fieldInfo.getDescriptor())", "-\t\t\t.append(' ')", "+\t\t\t.append(Util.bind(\"disassembler.space\")) //$NON-NLS-1$", "+\t\t\t.append(fieldDescriptor)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a71bec0c8584c8770001e1c3589feb6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " void computeInheritedMethods()", "signatureAfterChange": " void computeInheritedMethods()", "diff": ["-\twhile (superType != null) {", "-\t\tif (superType.isValidBinding()) {", "-\t\t    if (allSuperclassesAreAbstract) {", "-\t\t\t    if (superType.isAbstract()) {", "-\t\t\t\t\t// only need to include superinterfaces if immediate superclasses are abstract", "-\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t    allSuperclassesAreAbstract = false;", "+\twhile (superType != null && superType.isValidBinding()) {", "+\t    if (allSuperclassesAreAbstract) {", "+\t\t    if (superType.isAbstract()) {", "+\t\t\t\t// only need to include superinterfaces if immediate superclasses are abstract", "+\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {", "+\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "+\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t} else {", "+\t\t\t    allSuperclassesAreAbstract = false;", "-", "-\t\t\tMethodBinding[] methods = superType.unResolvedMethods();", "-\t\t\tnextMethod : for (int m = methods.length; --m >= 0;) {", "-\t\t\t\tMethodBinding inheritedMethod = methods[m];", "-\t\t\t\tif (inheritedMethod.isPrivate() || inheritedMethod.isConstructor() || inheritedMethod.isDefaultAbstract())", "-\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\tMethodBinding[] existingMethods = (MethodBinding[]) this.inheritedMethods.get(inheritedMethod.selector);", "-\t\t\t\tif (existingMethods != null) {", "-\t\t\t\t\tfor (int i = 0, length = existingMethods.length; i < length; i++) {", "-\t\t\t\t\t\tif (doesMethodOverride(existingMethods[i], inheritedMethod)) {", "-\t\t\t\t\t\t\tif (inheritedMethod.isDefault() && inheritedMethod.isAbstract())", "-\t\t\t\t\t\t\t\tcheckPackagePrivateAbstractMethod(inheritedMethod);", "-\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tMethodBinding[] nonVisible = (MethodBinding[]) nonVisibleDefaultMethods.get(inheritedMethod.selector);", "-\t\t\t\tif (nonVisible != null)", "-\t\t\t\t\tfor (int i = 0, l = nonVisible.length; i < l; i++)", "-\t\t\t\t\t\tif (doesMethodOverride(nonVisible[i], inheritedMethod))", "-\t\t\t\t\t\t\tcontinue nextMethod;", "-", "-\t\t\t\tif (!inheritedMethod.isDefault() || inheritedMethod.declaringClass.fPackage == type.fPackage) {", "-\t\t\t\t\tif (existingMethods == null) {", "-\t\t\t\t\t\texistingMethods = new MethodBinding[] {inheritedMethod};", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint length = existingMethods.length;", "-\t\t\t\t\t\tSystem.arraycopy(existingMethods, 0, existingMethods = new MethodBinding[length + 1], 0, length);", "-\t\t\t\t\t\texistingMethods[length] = inheritedMethod;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.inheritedMethods.put(inheritedMethod.selector, existingMethods);", "-\t\t\t\t} else {", "-\t\t\t\t\tif (nonVisible == null) {", "-\t\t\t\t\t\tnonVisible = new MethodBinding[] {inheritedMethod};", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint length = nonVisible.length;", "-\t\t\t\t\t\tSystem.arraycopy(nonVisible, 0, nonVisible = new MethodBinding[length + 1], 0, length);", "-\t\t\t\t\t\tnonVisible[length] = inheritedMethod;", "-\t\t\t\t\t}", "-\t\t\t\t\tnonVisibleDefaultMethods.put(inheritedMethod.selector, nonVisible);", "-", "-\t\t\t\t\tif (inheritedMethod.isAbstract() && !this.type.isAbstract()) // non visible abstract methods cannot be overridden so the type must be defined abstract", "-\t\t\t\t\t\tthis.problemReporter().abstractMethodCannotBeOverridden(this.type, inheritedMethod);", "-", "-\t\t\t\t\tMethodBinding[] current = (MethodBinding[]) this.currentMethods.get(inheritedMethod.selector);", "-\t\t\t\t\tif (current != null) { // non visible methods cannot be overridden so a warning is issued", "-\t\t\t\t\t\tfoundMatch : for (int i = 0, length = current.length; i < length; i++) {", "-\t\t\t\t\t\t\tif (doesMethodOverride(current[i], inheritedMethod)) {", "-\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], inheritedMethod);", "-\t\t\t\t\t\t\t\tbreak foundMatch;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tsuperType = superType.superclass();", "+", "+\t\tMethodBinding[] methods = superType.unResolvedMethods();", "+\t\tnextMethod : for (int m = methods.length; --m >= 0;) {", "+\t\t\tMethodBinding inheritedMethod = methods[m];", "+\t\t\tif (inheritedMethod.isPrivate() || inheritedMethod.isConstructor() || inheritedMethod.isDefaultAbstract())", "+\t\t\t\tcontinue nextMethod;", "+\t\t\tMethodBinding[] existingMethods = (MethodBinding[]) this.inheritedMethods.get(inheritedMethod.selector);", "+\t\t\tif (existingMethods != null) {", "+\t\t\t\tfor (int i = 0, length = existingMethods.length; i < length; i++) {", "+\t\t\t\t\tif (doesMethodOverride(existingMethods[i], inheritedMethod)) {", "+\t\t\t\t\t\tif (inheritedMethod.isDefault() && inheritedMethod.isAbstract())", "+\t\t\t\t\t\t\tcheckPackagePrivateAbstractMethod(inheritedMethod);", "+\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tMethodBinding[] nonVisible = (MethodBinding[]) nonVisibleDefaultMethods.get(inheritedMethod.selector);", "+\t\t\tif (nonVisible != null)", "+\t\t\t\tfor (int i = 0, l = nonVisible.length; i < l; i++)", "+\t\t\t\t\tif (doesMethodOverride(nonVisible[i], inheritedMethod))", "+\t\t\t\t\t\tcontinue nextMethod;", "+", "+\t\t\tif (!inheritedMethod.isDefault() || inheritedMethod.declaringClass.fPackage == type.fPackage) {", "+\t\t\t\tif (existingMethods == null) {", "+\t\t\t\t\texistingMethods = new MethodBinding[] {inheritedMethod};", "+\t\t\t\t} else {", "+\t\t\t\t\tint length = existingMethods.length;", "+\t\t\t\t\tSystem.arraycopy(existingMethods, 0, existingMethods = new MethodBinding[length + 1], 0, length);", "+\t\t\t\t\texistingMethods[length] = inheritedMethod;", "+\t\t\t\t}", "+\t\t\t\tthis.inheritedMethods.put(inheritedMethod.selector, existingMethods);", "+\t\t\t} else {", "+\t\t\t\tif (nonVisible == null) {", "+\t\t\t\t\tnonVisible = new MethodBinding[] {inheritedMethod};", "+\t\t\t\t} else {", "+\t\t\t\t\tint length = nonVisible.length;", "+\t\t\t\t\tSystem.arraycopy(nonVisible, 0, nonVisible = new MethodBinding[length + 1], 0, length);", "+\t\t\t\t\tnonVisible[length] = inheritedMethod;", "+\t\t\t\t}", "+\t\t\t\tnonVisibleDefaultMethods.put(inheritedMethod.selector, nonVisible);", "+", "+\t\t\t\tif (inheritedMethod.isAbstract() && !this.type.isAbstract()) // non visible abstract methods cannot be overridden so the type must be defined abstract", "+\t\t\t\t\tproblemReporter().abstractMethodCannotBeOverridden(this.type, inheritedMethod);", "+", "+\t\t\t\tMethodBinding[] current = (MethodBinding[]) this.currentMethods.get(inheritedMethod.selector);", "+\t\t\t\tif (current != null) { // non visible methods cannot be overridden so a warning is issued", "+\t\t\t\t\tfoundMatch : for (int i = 0, length = current.length; i < length; i++) {", "+\t\t\t\t\t\tif (doesMethodOverride(current[i], inheritedMethod)) {", "+\t\t\t\t\t\t\tproblemReporter().overridesPackageDefaultMethod(current[i], inheritedMethod);", "+\t\t\t\t\t\t\tbreak foundMatch;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tsuperType = superType.superclass();", "-\t\t\t\t\t\t\tfor (int e = 0; e < length; e++) {", "-\t\t\t\t\t\t\t\tMethodBinding existing = existingMethods[e];", "-\t\t\t\t\t\t\t\t// look to see if any of the existingMethods implement this inheritedMethod", "-\t\t\t\t\t\t\t\tif (areParametersEqual(existing, inheritedMethod) && existing.declaringClass.implementsInterface(superType, true))", "-// so if the implemented method is abstract & has a different return type then did it get a bridge method?", "+\t\t\t\t\t\t\t// look to see if any of the existingMethods implement this inheritedMethod", "+\t\t\t\t\t\t\tfor (int e = 0; e < length; e++)", "+\t\t\t\t\t\t\t\tif (isInterfaceMethodImplemented(inheritedMethod, existingMethods[e], superType))", "-\t\t\t\t\t\t\t}"]}], "num": 9708}
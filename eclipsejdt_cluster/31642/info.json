{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4305cc6faf1bbe57f34b8b0167cb427", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131b466473a92c6072bb4901f8f9ca0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 352, "methodNumberAfterChange": 352, "signatureBeforeChange": " \tpublic void test348()", "signatureAfterChange": " \tpublic void test348()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tstatic void foo(X x) {\\n\" + ", "+\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 10)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "433760307d4cbb7c20428a1a23af383d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 983, "methodNumberAfterChange": 983, "signatureBeforeChange": " public void test0960()", "signatureAfterChange": " public void test0960()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 7)\\n\" +", "-\t\t\"\tX x = newInstance();\\n\" +", "-\t\t\"\t^\\n\" +", "-\t\t\"X is a raw type. References to generic type X<A> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 8)\\n\" +", "-\t\t\"\treturn new X[] { x };\\n\" +", "-\t\t\"\t       ^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type X[] needs unchecked conversion to conform to X<String>[]\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 10)\\n\" +", "-\t\t\"\tZork z;\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tX x = newInstance();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"X is a raw type. References to generic type X<A> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tX x = newInstance();\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^\\n\" + ", "+\t\t\"Bound mismatch: The generic method newInstance() of type X<A> is not applicable for the arguments (). The inferred type Comparable<Comparable<B>> is not a valid substitute for the bounded parameter <B extends Comparable<B>>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\treturn new X[] { x };\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type X[] needs unchecked conversion to conform to X<String>[]\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a2bd5b634cc80a5fd0a325bfe7daa21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "9fd5428ce736a6251b7049cd29424ae48e74034b", "commitAfterChange": "462fdbe66c95fe469d26ca4c9a495870e5915168", "methodNumberBeforeChange": 440, "methodNumberAfterChange": 440, "signatureBeforeChange": " public void testBug291418a()", "signatureAfterChange": " public void testBug291418a()", "diff": ["-\t\t\t\t\t\t\"\t if(argArray == null) return;\" +", "+\t\t\t\t\t\t\"\t if(argArray == null) return;\\n\" +", "+\t\t\t\t\t\t\"\t array = new int[0];\\n\" + \t\t\t// reset tainting by null check", "+\t\t\t\t\t\t\"\t if (argArray == null) return;\\n\" + // reset tainting by null check", "-\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\t\"1. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\t\"2. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\t\"2. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\t\"3. ERROR in X.java (at line 8)\\n\" +", "+\t\t\t\t\"3. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\t\"4. ERROR in X.java (at line 13)\\n\" +", "+\t\t\t\t\"4. ERROR in X.java (at line 14)\\n\" +", "-\t\t\t\t\"5. ERROR in X.java (at line 14)\\n\" +", "+\t\t\t\t\"5. ERROR in X.java (at line 15)\\n\" +", "-\t\t\t\t\"6. ERROR in X.java (at line 17)\\n\" +", "+\t\t\t\t\"6. ERROR in X.java (at line 20)\\n\" +", "-\t\t\t\t\"7. ERROR in X.java (at line 18)\\n\" +", "+\t\t\t\t\"7. ERROR in X.java (at line 21)\\n\" +", "-\t\t\t\t\"8. ERROR in X.java (at line 21)\\n\" +", "+\t\t\t\t\"8. ERROR in X.java (at line 24)\\n\" +", "-\t\t\t\t\"9. ERROR in X.java (at line 22)\\n\" +", "+\t\t\t\t\"9. ERROR in X.java (at line 25)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8847b5cc3733e9f8931f0230d7d7c9e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "39cfeabaf2630f8aaf01c3058d94b243711e01e5", "commitAfterChange": "7a4894572c8dc97616c8aa59652842aae37320e6", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void test057()", "signatureAfterChange": " public void test057()", "diff": ["+\t\t\t\"            i = Y.Z:: new;\\n\" +", "+\t\t\t\"            i.foo(new Y<String>());\\n\" +", "+\t\t\t\t\"Y<T>.Z<K>:: new\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98b9be1d5198e3c9f2397f01f0988c13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void test0044()", "signatureAfterChange": " public void test0044()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic <T> X(T t){\\n\" + ", "-\t\t\"\t        ^\\n\" + ", "-\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\t^\\n\" + ", "-\t\t\"Syntax error on token \\\"}\\\", delete this token\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\t<String>super(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\"\t ^^^^^^\\n\" + ", "-\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\t<String>super(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\"\t ^^^^^^\\n\" + ", "-\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\"----------\\n\" +", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\"\tpublic <T> X(T t){\\n\" +", "+\t\t\"\t        ^\\n\" +", "+\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 2)\\n\" +", "+\t\t\"\tpublic <T> X(T t){\\n\" +", "+\t\t\"\t             ^\\n\" +", "+\t\t\"T cannot be resolved to a type\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "+\t\t\"\t}\\n\" +", "+\t\t\"\t^\\n\" +", "+\t\t\"Syntax error on token \\\"}\\\", delete this token\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"4. ERROR in X.java (at line 9)\\n\" +", "+\t\t\"\t<String>super(\\\"SUCCESS\\\");\\n\" +", "+\t\t\"\t ^^^^^^\\n\" +", "+\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"5. ERROR in X.java (at line 9)\\n\" +", "+\t\t\"\t<String>super(\\\"SUCCESS\\\");\\n\" +", "+\t\t\"\t ^^^^^^\\n\" +", "+\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fccb0c2bb34373375c88e537cb0b9f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": "     public void test132()", "signatureAfterChange": "     public void test132()", "diff": ["-    \t\t\"----------\\n\" + ", "+            \"----------\\n\" + ", "-    \t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "+    \t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+    \t\t\"\tList<X> l = new Vector();\\n\" + ", "+    \t\t\"\t                ^^^^^^\\n\" + ", "+    \t\t\"Type safety: Vector is a raw type. References to generic type Vector<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "-    \t\t\"4. WARNING in X.java (at line 18)\\n\" + ", "+    \t\t\"5. WARNING in X.java (at line 18)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a954c5953b0df79a3728de5b67c9e9d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "c53fb291a849342748306e59b6959038f8ec1321", "commitAfterChange": "d5a32e245b27c645dcf70347396d7253765682d3", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void testCaseTypeMismatch3()", "signatureAfterChange": " public void testCaseTypeMismatch3()", "diff": ["-\t\t\"2. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tswitch(Days.Sunday) {\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^\\n\" + ", "+\t\t\"The switch on the enum type Days should have a default case\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 13)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87a5c487591b4681357b0e187cd914c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 348, "methodNumberAfterChange": 348, "signatureBeforeChange": " \tpublic void test344()", "signatureAfterChange": " \tpublic void test344()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tstatic void foo(X x) {\\n\" + ", "+\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 14)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc9ad466bd1bdf3246d1c30b79bfc06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "commitAfterChange": "cf0fc1d100d6a0dfa353e3125744fa10a50c8d3b", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void testNullTypeInference2f()", "signatureAfterChange": " \tpublic void testNullTypeInference2f()", "diff": ["-\t\t\t\"1. WARNING in PolyNull.java (at line 9)\\n\" + ", "+\t\t\t\"1. ERROR in PolyNull.java (at line 7)\\n\" + ", "+\t\t\t\"\t<X> X extract(Func<@Nullable X> f, @Nullable X s) { return f.a(s); }\\n\" + ", "+\t\t\t\"\t                                                           ^^^^^^\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'X\\' but this expression has type \\'@Nullable X\\', where 'X' is a free type variable\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in PolyNull.java (at line 9)\\n\" + ", "-\t\t\t\"2. ERROR in PolyNull.java (at line 9)\\n\" + ", "+\t\t\t\"3. ERROR in PolyNull.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1c5577ae3135217fac8a856af670c92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c8d7e735b1fdf27bd805f7e5ae0a6eacad7e4530", "commitAfterChange": "8fed2cc02e45d0c02f4805c1a6592bef37ca778a", "methodNumberBeforeChange": 521, "methodNumberAfterChange": 521, "signatureBeforeChange": " \tpublic void test0503() throws Exception", "signatureAfterChange": " \tpublic void test0503() throws Exception", "diff": ["-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"class XA {}\\n\" +", "-\t\t\t\t\"interface XB {\\n\" +", "-\t\t\t\t\"\tXB CONST = new XB(){ public String toString() { return \\\"SUCCESS\\\"; }};\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class XAB extends XA implements XB {}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"public class X <E extends XA&XB> {\\n\" +", "-\t\t\t\t\"\tE e;\\n\" +", "-\t\t\t\t\"  public static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t  System.out.print(new X<XAB>().e.CONST);\\n\" +", "-\t\t\t\t\"\t  new X<XAB>().foo();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  public void foo() {\\n\" +", "-\t\t\t\t\"    System.out.print(this.e.CONST);\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\\n\",", "-\t\t\t},", "-\t\t\t\"SUCCESSSUCCESS\");", "-\t\tString expectedOutput =", "-\t\t\t\"// Signature: <E:LXA;:LXB;>Ljava/lang/Object;\\n\" +", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  // Field descriptor #6 LXA;\\n\" +", "-\t\t\t\"  // Signature: TE;\\n\" +", "-\t\t\t\"  XA e;\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  // Method descriptor #10 ()V\\n\" +", "-\t\t\t\"  // Stack: 1, Locals: 1\\n\" +", "-\t\t\t\"  public X();\\n\" +", "-\t\t\t\"    0  aload_0 [this]\\n\" +", "-\t\t\t\"    1  invokespecial java.lang.Object() [12]\\n\" +", "-\t\t\t\"    4  return\\n\" +", "-\t\t\t\"      Line numbers:\\n\" +", "-\t\t\t\"        [pc: 0, line: 7]\\n\" +", "-\t\t\t\"      Local variable table:\\n\" +", "-\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X\\n\" +", "-\t\t\t\"      Local variable type table:\\n\" +", "-\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X<E>\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  // Method descriptor #21 ([Ljava/lang/String;)V\\n\" +", "-\t\t\t\"  // Stack: 3, Locals: 1\\n\" +", "-\t\t\t\"  public static void main(java.lang.String[] args);\\n\" +", "-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" +", "-\t\t\t\"     3  new X [1]\\n\" +", "-\t\t\t\"     6  dup\\n\" +", "-\t\t\t\"     7  invokespecial X() [28]\\n\" +", "-\t\t\t\"    10  getfield X.e : XA [29]\\n\" +", "-\t\t\t\"    13  checkcast XAB [31]\\n\" +", "-\t\t\t\"    16  pop\\n\" +", "-\t\t\t\"    17  getstatic XAB.CONST : XB [33]\\n\" +", "-\t\t\t\"    20  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" +", "-\t\t\t\"    23  new X [1]\\n\" +", "-\t\t\t\"    26  dup\\n\" +", "-\t\t\t\"    27  invokespecial X() [28]\\n\" +", "-\t\t\t\"    30  invokevirtual X.foo() : void [43]\\n\" +", "-\t\t\t\"    33  return\\n\" +", "-\t\t\t\"      Line numbers:\\n\" +", "-\t\t\t\"        [pc: 0, line: 10]\\n\" +", "-\t\t\t\"        [pc: 23, line: 11]\\n\" +", "-\t\t\t\"        [pc: 33, line: 12]\\n\" +", "-\t\t\t\"      Local variable table:\\n\" +", "-\t\t\t\"        [pc: 0, pc: 34] local: args index: 0 type: java.lang.String[]\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  // Method descriptor #10 ()V\\n\" +", "-\t\t\t\"  // Stack: 2, Locals: 1\\n\" +", "-\t\t\t\"  public void foo();\\n\" +", "-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" +", "-\t\t\t\"     3  getstatic XB.CONST : XB [48]\\n\" +", "-\t\t\t\"     6  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" +", "-\t\t\t\"     9  return\\n\" +", "-\t\t\t\"      Line numbers:\\n\" +", "-\t\t\t\"        [pc: 0, line: 14]\\n\" +", "-\t\t\t\"        [pc: 9, line: 15]\\n\" +", "-\t\t\t\"      Local variable table:\\n\" +", "-\t\t\t\"        [pc: 0, pc: 10] local: this index: 0 type: X\\n\" +", "-\t\t\t\"      Local variable type table:\\n\" +", "-\t\t\t\"        [pc: 0, pc: 10] local: this index: 0 type: X<E>\\n\";", "-", "-\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X.class\");", "-\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "-\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "-\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "-\t\tint index = result.indexOf(expectedOutput);", "-\t\tif (index == -1 || expectedOutput.length() == 0) {", "-\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"class XA {}\\n\" + ", "+\t\t\t\t\t\"interface XB {\\n\" + ", "+\t\t\t\t\t\"\tXB CONST = new XB(){ public String toString() { return \\\"SUCCESS\\\"; }};\\n\" + ", "+\t\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\t\"class XAB extends XA implements XB {}\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"public class X <E extends XA&XB> {\\n\" + ", "+\t\t\t\t\t\"\tE e;\\n\" + ", "+\t\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"\t  System.out.print(new X<XAB>().e.CONST);\\n\" + ", "+\t\t\t\t\t\"\t  new X<XAB>().foo();\\n\" + ", "+\t\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\t\"  public void foo() {\\n\" + ", "+\t\t\t\t\t\"    System.out.print(this.e.CONST);\\n\" + ", "+\t\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t},", "+\t\t\t\t\"SUCCESSSUCCESS\");\t\t", "+\t\t\tString expectedOutput =", "+\t\t\t\t\"// Signature: <E:LXA;:LXB;>Ljava/lang/Object;\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Field descriptor #6 LXA;\\n\" + ", "+\t\t\t\t\"  // Signature: TE;\\n\" + ", "+\t\t\t\t\"  XA e;\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Method descriptor #10 ()V\\n\" + ", "+\t\t\t\t\"  // Stack: 1, Locals: 1\\n\" + ", "+\t\t\t\t\"  public X();\\n\" + ", "+\t\t\t\t\"    0  aload_0 [this]\\n\" + ", "+\t\t\t\t\"    1  invokespecial java.lang.Object() [12]\\n\" + ", "+\t\t\t\t\"    4  return\\n\" + ", "+\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 7]\\n\" + ", "+\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X\\n\" + ", "+\t\t\t\t\"      Local variable type table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X<E>\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Method descriptor #21 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\t\t\"  // Stack: 3, Locals: 1\\n\" + ", "+\t\t\t\t\"  public static void main(java.lang.String[] args);\\n\" + ", "+\t\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "+\t\t\t\t\"     3  new X [1]\\n\" + ", "+\t\t\t\t\"     6  dup\\n\" + ", "+\t\t\t\t\"     7  invokespecial X() [28]\\n\" + ", "+\t\t\t\t\"    10  getfield X.e : XA [29]\\n\" + ", "+\t\t\t\t\"    13  checkcast XAB [31]\\n\" + ", "+\t\t\t\t\"    16  pop\\n\" + ", "+\t\t\t\t\"    17  getstatic XAB.CONST : XB [33]\\n\" + ", "+\t\t\t\t\"    20  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + ", "+\t\t\t\t\"    23  new X [1]\\n\" + ", "+\t\t\t\t\"    26  dup\\n\" + ", "+\t\t\t\t\"    27  invokespecial X() [28]\\n\" + ", "+\t\t\t\t\"    30  invokevirtual X.foo() : void [43]\\n\" + ", "+\t\t\t\t\"    33  return\\n\" + ", "+\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 10]\\n\" + ", "+\t\t\t\t\"        [pc: 23, line: 11]\\n\" + ", "+\t\t\t\t\"        [pc: 33, line: 12]\\n\" + ", "+\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 34] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Method descriptor #10 ()V\\n\" + ", "+\t\t\t\t\"  // Stack: 2, Locals: 1\\n\" + ", "+\t\t\t\t\"  public void foo();\\n\" + ", "+\t\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "+\t\t\t\t\"     3  aload_0 [this]\\n\" + ", "+\t\t\t\t\"     4  getfield X.e : XA [29]\\n\" + ", "+\t\t\t\t\"     7  checkcast XB [48]\\n\" + ", "+\t\t\t\t\"    10  pop\\n\" + ", "+\t\t\t\t\"    11  getstatic XB.CONST : XB [50]\\n\" + ", "+\t\t\t\t\"    14  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + ", "+\t\t\t\t\"    17  return\\n\" + ", "+\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 14]\\n\" + ", "+\t\t\t\t\"        [pc: 17, line: 15]\\n\" + ", "+\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 18] local: this index: 0 type: X\\n\" + ", "+\t\t\t\t\"      Local variable type table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 18] local: this index: 0 type: X<E>\\n\";", "+\t\t\t", "+\t\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X.class\");", "+\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "+\t\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "+\t\t\tint index = result.indexOf(expectedOutput);", "+\t\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\t\t\t}", "+\t\t\tif (index == -1) {", "+\t\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "+\t\t\t}", "-\t\tif (index == -1) {", "-\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "-\t\t}", "-\t}"]}], "num": 31642}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44e6900ad6b4847a15bfb7e211793420", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53bd0cc9f341df7fce69b9ed43745d77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "04b1f777f72aaed365425972c86158987dc99f47", "commitAfterChange": "627e74400f5d869da7cccfccaf9f22c5e00c372a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate static char[] computeBaseTypeNames(char firstName, char[][] excludedNames)", "signatureAfterChange": "  \tprivate static char[][] computeBaseTypeNames(char[] typeName, boolean isConstantField, char[][] excludedNames)", "diff": ["+\tprivate static char[][] computeBaseTypeNames(char[] typeName, boolean isConstantField, char[][] excludedNames){", "+\t\tchar[] name = computeBaseTypeNames(typeName[0], excludedNames);", "+\t\tif(name != null) {", "+\t\t\treturn new char[][]{name};", "+\t\t} else {", "+\t\t\t// compute variable name like from non base type", "+\t\t\treturn  computeNonBaseTypeNames(typeName, isConstantField);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7af750335e0fa7e6fd8895b1f70882bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "a3e63b72d2efd2058d202d3e2711391afc827fec", "commitAfterChange": "f0131d199789fbf75036ba10803faed4ef08b399", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate static char[][] computeBaseTypeNames(char[] typeName, boolean isConstantField, char[][] excludedNames)", "signatureAfterChange": "  \tprivate static char[][] computeBaseTypeNames(char[] typeName, boolean isConstantField, char[][] excludedNames)", "diff": ["-\t\tchar[] name = computeBaseTypeNames(typeName[0], excludedNames);", "-\t\tif(name != null) {", "-\t\t\treturn new char[][]{name};", "+\t\tif (isConstantField) {", "+\t\t\treturn computeNonBaseTypeNames(typeName, isConstantField);", "-\t\t\t// compute variable name like from non base type", "-\t\t\treturn  computeNonBaseTypeNames(typeName, isConstantField);", "+\t\t\tchar[] name = computeBaseTypeNames(typeName[0], excludedNames);", "+\t\t\tif(name != null) {", "+\t\t\t\treturn new char[][]{name};", "+\t\t\t} else {", "+\t\t\t\t// compute variable name like from non base type", "+\t\t\t\treturn computeNonBaseTypeNames(typeName, isConstantField);", "+\t\t\t}"]}], "num": 33998}
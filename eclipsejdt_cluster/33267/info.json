{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b3b7928808a5efee9065f8b72631175", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c46f8a6fd34e0c4b07e84995ac1588b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "106f3756e5999bf7fc285b76343c30257bc8ef38", "commitAfterChange": "b78c9eb519121b68605325fd214ba23170967998", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " private ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized, boolean wasMissingType)", "signatureAfterChange": " private ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized, boolean wasMissingType)", "diff": ["-\t\tthis.problemReporter.isClassPathCorrect(compoundName, this.unitBeingCompleted, this.missingClassFileLocation);", "+\t\tif (!wasMissingType) {", "+\t\t\t/* Since missing types have been already been complained against while producing binaries, there is no class path ", "+\t\t\t * misconfiguration now that did not also exist in some equivalent form while producing the class files which encode ", "+\t\t\t * these missing types. So no need to bark again. Note that wasMissingType == true signals a type referenced in a .class ", "+\t\t\t * file which could not be found when the binary was produced. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=364450 */", "+\t\t\tthis.problemReporter.isClassPathCorrect(compoundName, this.unitBeingCompleted, this.missingClassFileLocation);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7396507909dfedbcb090a8b1e77e77dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized)", "signatureAfterChange": " private ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized, boolean wasMissingType)", "diff": ["-", "-ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized) {", "+private ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized, boolean wasMissingType) {", "-\t\tPackageBinding packageBinding = computePackageFrom(compoundName);", "+\t\tPackageBinding packageBinding = computePackageFrom(compoundName, false /* valid pkg */);", "+\t\tif (wasMissingType) {", "+\t\t\tbinding.tagBits |= TagBits.HasMissingType; // record it was bound to a missing type", "+\t\t}", "+\t\t// report the missing class file first", "+\t\tproblemReporter.isClassPathCorrect(compoundName, this.unitBeingCompleted, this.missingClassFileLocation);\t\t", "-\t\tbinding = cacheMissingBinaryType(compoundName, this.unitBeingCompleted);", "+\t\tbinding = createMissingType(null, compoundName);"]}], "num": 33267}
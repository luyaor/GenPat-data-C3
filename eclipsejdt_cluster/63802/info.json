{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "875ca6e1967adbac5b73f8cb2a446293", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19165763c5fc8c82f70921e929b74d4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Continue.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tFlowContext targetContext;", "-\t\tif (label == null) {", "-\t\t\ttargetContext = flowContext.getTargetContextForDefaultContinue();", "-\t\t} else {", "-\t\t\ttargetContext = flowContext.getTargetContextForContinueLabel(label);", "-\t\t}", "+\t\tFlowContext targetContext = (label == null)", "+\t\t\t\t? flowContext.getTargetContextForDefaultContinue()", "+\t\t\t\t: flowContext.getTargetContextForContinueLabel(label);", "+", "-\t\t\t\tcurrentScope.problemReporter().undefinedLabel(this); // need to improve", "+\t\t\t\tcurrentScope.problemReporter().undefinedLabel(this); ", "-\t\t} else {", "-\t\t\tif (targetContext == FlowContext.NotContinuableContext) {", "-\t\t\t\tcurrentScope.problemReporter().invalidContinue(this);", "-\t\t\t\treturn FlowInfo.DeadEnd;", "-\t\t\t}", "-\t\t\ttargetLabel = targetContext.continueLabel();", "-\t\t\ttargetContext.recordContinueFrom(flowInfo);", "-\t\t\tFlowContext traversedContext = flowContext;", "-\t\t\tint subIndex = 0, maxSub = 5;", "-\t\t\tsubroutines = new AstNode[maxSub];", "-\t\t\twhile (true) {", "-\t\t\t\tAstNode sub;", "-\t\t\t\tif ((sub = traversedContext.subRoutine()) != null) {", "-\t\t\t\t\tif (subIndex == maxSub) {", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tsubroutines,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(subroutines = new AstNode[maxSub *= 2]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tsubIndex);", "-\t\t\t\t\t\t// grow", "-\t\t\t\t\t}", "-\t\t\t\t\tsubroutines[subIndex++] = sub;", "-\t\t\t\t\tif (sub.cannotReturn()) {", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// remember the initialization at this", "-\t\t\t\t// point for dealing with blank final variables.", "-\t\t\t\ttraversedContext.recordReturnFrom(flowInfo.unconditionalInits());", "+\t\t\treturn flowInfo; // pretend it did not continue since no actual target\t\t\t", "+\t\t} ", "-\t\t\t\tif (traversedContext == targetContext) {", "+\t\tif (targetContext == FlowContext.NotContinuableContext) {", "+\t\t\tcurrentScope.problemReporter().invalidContinue(this);", "+\t\t\treturn flowInfo; // pretend it did not continue since no actual target", "+\t\t}", "+\t\ttargetLabel = targetContext.continueLabel();", "+\t\ttargetContext.recordContinueFrom(flowInfo);", "+\t\tFlowContext traversedContext = flowContext;", "+\t\tint subIndex = 0, maxSub = 5;", "+\t\tsubroutines = new AstNode[maxSub];", "+\t\twhile (true) {", "+\t\t\tAstNode sub;", "+\t\t\tif ((sub = traversedContext.subRoutine()) != null) {", "+\t\t\t\tif (subIndex == maxSub) {", "+\t\t\t\t\tSystem.arraycopy(subroutines, 0, (subroutines = new AstNode[maxSub*=2]), 0, subIndex); // grow", "+\t\t\t\t}", "+\t\t\t\tsubroutines[subIndex++] = sub;", "+\t\t\t\tif (sub.cannotReturn()) {", "-\t\t\t\t} else {", "-\t\t\t\t\ttraversedContext = traversedContext.parent;", "-\t\t\t// resize subroutines", "-\t\t\tif (subIndex != maxSub) {", "-\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\tsubroutines,", "-\t\t\t\t\t0,", "-\t\t\t\t\t(subroutines = new AstNode[subIndex]),", "-\t\t\t\t\t0,", "-\t\t\t\t\tsubIndex);", "+\t\t\t// remember the initialization at this", "+\t\t\t// point for dealing with blank final variables.", "+\t\t\ttraversedContext.recordReturnFrom(flowInfo.unconditionalInits());", "+", "+\t\t\tif (traversedContext == targetContext) {", "+\t\t\t\tbreak;", "+\t\t\t} else {", "+\t\t\t\ttraversedContext = traversedContext.parent;", "+\t\t}", "+\t\t// resize subroutines", "+\t\tif (subIndex != maxSub) {", "+\t\t\tSystem.arraycopy(subroutines, 0, (subroutines = new AstNode[subIndex]), 0, subIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "992ef290f9850091f11a283aebc9febd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Break.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tFlowContext targetContext;", "-\t\tif (label == null) {", "-\t\t\ttargetContext = flowContext.getTargetContextForDefaultBreak();", "-\t\t} else {", "-\t\t\ttargetContext = flowContext.getTargetContextForBreakLabel(label);", "-\t\t}", "+\t\tFlowContext targetContext = (label == null) ", "+\t\t\t? flowContext.getTargetContextForDefaultBreak()", "+\t\t\t: flowContext.getTargetContextForBreakLabel(label);", "+", "-\t\t\t\tcurrentScope.problemReporter().undefinedLabel(this); // need to improve", "+\t\t\t\tcurrentScope.problemReporter().undefinedLabel(this); ", "-\t\t} else {", "-\t\t\ttargetLabel = targetContext.breakLabel();", "-\t\t\ttargetContext.recordBreakFrom(flowInfo);", "-\t\t\tFlowContext traversedContext = flowContext;", "-\t\t\tint subIndex = 0, maxSub = 5;", "-\t\t\tsubroutines = new AstNode[maxSub];", "-\t\t\twhile (true) {", "-\t\t\t\tAstNode sub;", "-\t\t\t\tif ((sub = traversedContext.subRoutine()) != null) {", "-\t\t\t\t\tif (subIndex == maxSub) {", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tsubroutines,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(subroutines = new AstNode[maxSub *= 2]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tsubIndex);", "-\t\t\t\t\t\t// grow", "-\t\t\t\t\t}", "-\t\t\t\t\tsubroutines[subIndex++] = sub;", "-\t\t\t\t\tif (sub.cannotReturn()) {", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\treturn flowInfo; // pretend it did not break since no actual target", "+\t\t}", "+\t\t", "+\t\ttargetLabel = targetContext.breakLabel();", "+\t\ttargetContext.recordBreakFrom(flowInfo);", "+\t\tFlowContext traversedContext = flowContext;", "+\t\tint subIndex = 0, maxSub = 5;", "+\t\tsubroutines = new AstNode[maxSub];", "+\t\twhile (true) {", "+\t\t\tAstNode sub;", "+\t\t\tif ((sub = traversedContext.subRoutine()) != null) {", "+\t\t\t\tif (subIndex == maxSub) {", "+\t\t\t\t\tSystem.arraycopy(subroutines, 0, (subroutines = new AstNode[maxSub*=2]), 0, subIndex); // grow", "-\t\t\t\t// remember the initialization at this", "-\t\t\t\t// point for dealing with blank final variables.", "-\t\t\t\ttraversedContext.recordReturnFrom(flowInfo.unconditionalInits());", "-", "-\t\t\t\tif (traversedContext == targetContext) {", "+\t\t\t\tsubroutines[subIndex++] = sub;", "+\t\t\t\tif (sub.cannotReturn()) {", "-\t\t\t\t} else {", "-\t\t\t\t\ttraversedContext = traversedContext.parent;", "-\t\t\t// resize subroutines", "-\t\t\tif (subIndex != maxSub) {", "-\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\tsubroutines,", "-\t\t\t\t\t0,", "-\t\t\t\t\t(subroutines = new AstNode[subIndex]),", "-\t\t\t\t\t0,", "-\t\t\t\t\tsubIndex);", "+\t\t\t// remember the initialization at this", "+\t\t\t// point for dealing with blank final variables.", "+\t\t\ttraversedContext.recordReturnFrom(flowInfo.unconditionalInits());", "+", "+\t\t\tif (traversedContext == targetContext) {", "+\t\t\t\tbreak;", "+\t\t\t} else {", "+\t\t\t\ttraversedContext = traversedContext.parent;", "+\t\t}", "+\t\t// resize subroutines", "+\t\tif (subIndex != maxSub) {", "+\t\t\tSystem.arraycopy(subroutines, 0, (subroutines = new AstNode[subIndex]), 0, subIndex);"]}], "num": 63802}
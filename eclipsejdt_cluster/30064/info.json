{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7ce2b1a84edbd6247102bd05207b7f1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09a12cf0c4e249af0cc64ba6daf4609b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptUtil.java", "commitBeforeChange": "c1f8b23725dd7ea4b476b40485a277dac1e772a8", "commitAfterChange": "9aadd271aa6b9408f381dcc08f67ae2c31958a0a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static boolean hasAnnotationInstance( IFile f )", "signatureAfterChange": " \tprivate AptUtil()", "diff": ["+\t// Private c-tor to prevent construction", "+\tprivate AptUtil() {}", "-\tpublic static boolean hasAnnotationInstance( IFile f ) {", "-\t\tInputStreamReader reader = null;", "-\t\tInputStream input = null;", "-\t\ttry {", "-\t\t\tAnnotationScanner scanner;", "-\t\t\t// If this is a single byte encoding, we can deal directly ", "-\t\t\t// with the bytes, which is *much* faster", "-\t\t\tif (SINGLE_BYTE_ENCODINGS.contains(f.getCharset())) {", "-\t\t\t\tinput = ProcessorEnvImpl.getInputStream(f);", "-\t\t\t\tscanner = new InputStreamAnnotationScanner(input);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\treader = ProcessorEnvImpl.getFileReader( f );", "-\t\t\t\tscanner = new ReaderAnnotationScanner(reader);", "-\t\t\t}", "-\t\t\treturn scanner.containsAnnotations();", "-\t\t}", "-\t\tcatch( Exception ioe ) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tfinally {", "-\t\t\tif (reader != null) { try {reader.close();} catch (IOException ioe) {} }", "-\t\t\tif (input != null) { try {input.close();} catch (IOException ioe) {} }", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e599e279e1fa551c9cdb4eb04d2c739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/SourceFile.java", "commitBeforeChange": "cf266a5a150479cb6fad7bdee0518adaf976404e", "commitAfterChange": "31a48ee40204ffe042de7198e7d9c7bb19736730", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public char[] getContents()", "signatureAfterChange": "  public char[] getContents()", "diff": ["-\t// otherwise retrieve it", "-\tInputStreamReader reader = null;", "-\ttry {", "-\t\treader =", "-\t\t\tthis.encoding == null", "-\t\t\t\t? new InputStreamReader(resource.getContents())", "-\t\t\t\t: new InputStreamReader(resource.getContents(), this.encoding);", "-\t\tCharArrayBuffer result = new CharArrayBuffer();", "-\t\ttry {", "-\t\t\tint count;", "-\t\t\tchar[] buffer = new char[4096];", "-\t\t\twhile ((count = reader.read(buffer, 0, buffer.length)) > -1)", "-\t\t\t\tresult.append(buffer, 0, count);", "-\t\t} finally {", "-\t\t\treader.close();", "-\t\t}", "-\t\treturn result.getContents();", "+", "+\ttry {\t", "+\t\treturn Util.getResourceContentsAsCharArray(resource, this.encoding);", "-\t\tthrow new AbortCompilation(true, new MissingSourceFileException(resource.getFullPath().toString()));", "-\t} catch (IOException e) {", "-\t\tif (reader != null) {", "-\t\t\ttry { reader.close(); } catch(IOException ioe) {}", "-\t\t}"]}], "num": 30064}
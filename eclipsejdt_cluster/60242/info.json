{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0c2b49fc80c7cdfeba86757e18f1aca", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb3661d1fa7c621ea2710a30e0ea0a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, TypeBinding lastReceiverType, \tint index, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo)", "diff": ["-public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, TypeBinding lastReceiverType, \tint index, FlowInfo flowInfo) {", "+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo) {", "-\t// if field from parameterized type got found, use the original field at codegen time", "-\tFieldBinding originalField = fieldBinding.original();", "-\tif (originalField != fieldBinding) {", "-\t\tsetCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index, originalField);", "-\t}", "-", "-\t    FieldBinding someCodegenBinding = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "-\t\tif (someCodegenBinding.declaringClass != currentScope.enclosingSourceType()) {", "-\t\t    setSyntheticAccessor(fieldBinding, index,", "-\t\t            ((SourceTypeBinding) someCodegenBinding.declaringClass).addSyntheticMethod(someCodegenBinding, index >= 0 /*read-access?*/));", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(someCodegenBinding, this, index >= 0 /*read-access?*/);", "+\t    FieldBinding codegenField = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "+\t    ReferenceBinding declaringClass = codegenField.declaringClass;", "+\t\tif (declaringClass != currentScope.enclosingSourceType()) {", "+\t\t    setSyntheticAccessor(fieldBinding, index, ((SourceTypeBinding) declaringClass).addSyntheticMethod(codegenField, index >= 0 /*read-access?*/));", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenField, this, index >= 0 /*read-access?*/);", "-\t\t    FieldBinding someCodegenBinding = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "+\t\t    FieldBinding codegenField = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "-\t\t            ((SourceTypeBinding) currentScope.enclosingSourceType().enclosingTypeAt(depth)).addSyntheticMethod(someCodegenBinding, index >= 0 /*read-access?*/));", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(someCodegenBinding, this, index >= 0 /*read-access?*/);", "+\t\t            ((SourceTypeBinding) currentScope.enclosingSourceType().enclosingTypeAt(depth)).addSyntheticMethod(codegenField, index >= 0 /*read-access?*/));", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenField, this, index >= 0 /*read-access?*/);", "-\t\t}", "-\t}", "-\t// if the binding declaring class is not visible, need special action", "-\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t// and not from Object or implicit static field access.", "-\tif (fieldBinding.declaringClass != lastReceiverType", "-\t\t\t&& !lastReceiverType.isArrayType()", "-\t\t\t&& fieldBinding.declaringClass != null // array.length", "-\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {", "-\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(index <= 1 &&  this.indexOfFirstFieldBinding == 1 && fieldBinding.isStatic()))", "-\t\t\t\t&& fieldBinding.declaringClass.id != TypeIds.T_JavaLangObject) // no change for Object fields", "-\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope)) {", "-", "-\t\t    setCodegenBinding(", "-\t\t            index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index,", "-\t\t            currentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t                    getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index),", "-\t\t                    (ReferenceBinding)lastReceiverType.erasure()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66b2717cc16b0b1286c8f8afe5ed26d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void manageSyntheticWriteAccessIfNecessary( \t\t\tBlockScope currentScope, \t\t\tFieldBinding fieldBinding, \t\t\tTypeBinding lastReceiverType, \t\t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary( \t\t\tBlockScope currentScope, \t\t\tFieldBinding fieldBinding, \t\t\tTypeBinding lastReceiverType, \t\t\tint index, \t\t\tFlowInfo flowInfo)", "diff": ["+\t */", "+\tpublic void manageSyntheticAccessIfNecessary(", "+\t    ", "+\t\t// index == 0 denotes the first fieldBinding, index > 0 denotes one of the 'otherBindings', index < 0 denotes a write access (to last binding)", "+", "+\t\t// if field from parameterized type got found, use the original field at codegen time", "+\t\tif (fieldBinding instanceof ParameterizedFieldBinding) {", "+\t\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) fieldBinding;", "+\t\t    FieldBinding originalField = parameterizedField.originalField;", "+\t\t    TypeBinding requiredGenericCast = null;", "+\t\t    // extra cast needed if field type was type variable", "+\t\t    if ((originalField.type.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t\t        requiredGenericCast = originalField.type.genericCast(parameterizedField.type);", "+\t\t    }\t\t    ", "+\t\t    setCodegenBinding(fieldBinding, index, originalField, requiredGenericCast);", "+\t\t}", "+\t\t", "+\t\t\t    FieldBinding someCodegenBinding = getCodegenBinding(fieldBinding, index);", "+\t\t\t    setSyntheticAccessor(fieldBinding, index, ", "+\t\t\t            ((SourceTypeBinding) fieldBinding.declaringClass).addSyntheticMethod(someCodegenBinding, index >= 0 /*read-access?*/));", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(someCodegenBinding, this, index >= 0 /*read-access?*/);", "-\t */", "-\tpublic void manageSyntheticWriteAccessIfNecessary(", "-\t\t\tBlockScope currentScope,", "-\t\t\tFieldBinding fieldBinding,", "-\t\t\tTypeBinding lastReceiverType,", "-\t\t\tFlowInfo flowInfo) {", "-\t\tif (!flowInfo.isReachable()) return;", "-\t\tif (fieldBinding.isPrivate()) {", "-\t\t\tif (fieldBinding.declaringClass != currentScope.enclosingSourceType()) {", "-\t\t\t\tsyntheticWriteAccessor = ((SourceTypeBinding) fieldBinding.declaringClass)", "-\t\t\t\t\t\t\t\t\t\t\t.addSyntheticMethod(fieldBinding, false);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(fieldBinding, this);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t} else if (fieldBinding.isProtected()){", "-\t\t\tint depth = fieldBinding == binding ? (bits & DepthMASK) >> DepthSHIFT : otherDepths[otherDepths.length-1];", "-\t\t\tif (depth > 0 && (fieldBinding.declaringClass.getPackage()", "-\t\t\t\t\t\t\t\t!= currentScope.enclosingSourceType().getPackage())) {", "-\t\t\t\tsyntheticWriteAccessor = ((SourceTypeBinding) currentScope.enclosingSourceType().enclosingTypeAt(depth))", "-\t\t\t\t\t\t\t\t\t\t\t.addSyntheticMethod(fieldBinding, false);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(fieldBinding, this);", "+\t\t    int depth = fieldBinding == binding ", "+\t\t    \t\t? (bits & DepthMASK) >> DepthSHIFT ", "+\t\t    \t\t : otherDepths[index < 0 ? otherDepths.length-1 : index-1];", "+\t\t\t", "+\t\t\t// implicit protected access ", "+\t\t\tif (depth > 0 && (fieldBinding.declaringClass.getPackage() != currentScope.enclosingSourceType().getPackage())) {", "+\t\t\t    FieldBinding someCodegenBinding = getCodegenBinding(fieldBinding, index);", "+\t\t\t    setSyntheticAccessor(fieldBinding, index, ", "+\t\t\t            ((SourceTypeBinding) currentScope.enclosingSourceType().enclosingTypeAt(depth)).addSyntheticMethod(someCodegenBinding, index >= 0 /*read-access?*/));", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(someCodegenBinding, this, index >= 0 /*read-access?*/);", "-\t\t\tif (fieldBinding == binding){", "-\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType);", "-\t\t\t} else {", "-\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){", "-\t\t\t\t\tint l = this.otherBindings.length;", "-\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);", "-\t\t\t\t}", "-\t\t\t\tthis.otherCodegenBindings[this.otherCodegenBindings.length-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType);", "-\t\t\t}", "+\t\t    setCodegenBinding(", "+\t\t            fieldBinding, ", "+\t\t            index, ", "+\t\t            currentScope.enclosingSourceType().getUpdatedFieldBinding(", "+\t\t                    getCodegenBinding(fieldBinding, index), ", "+\t\t                    (ReferenceBinding)lastReceiverType.erasure()), ", "+\t\t         \tnull/*reuse existing*/);", "-\t\t"]}], "num": 60242}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb2b3a9161cc3762f9ad77646d003833", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b781318878d95faaf90932b107bbf11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "9357aeb22ce7f7b62f42472f1ba9defaa31953c5", "commitAfterChange": "2beca67c12b6708d00577783b2092953170491c0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2)", "signatureAfterChange": "  \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables)", "diff": ["-\t */", "-\tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2) {", "+\tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables) {", "-\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "-\t\t\t\t&& (referenceBinding.isParameterizedType() == referenceBinding2.isParameterizedType())", "-\t\t\t\t&& (referenceBinding.isWildcard() == referenceBinding2.isWildcard())", "-\t\t\t\t&& (referenceBinding.isGenericType() == referenceBinding2.isGenericType())", "-\t\t\t\t&& (referenceBinding.isRawType() == referenceBinding2.isRawType())", "-\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "-\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "-\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "-\t\t\t\t&& (referenceBinding.modifiers == referenceBinding2.modifiers);", "+\t\t\tif (referenceBinding.isParameterizedType()) {", "+\t\t\t\tif (!referenceBinding2.isParameterizedType()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) referenceBinding;", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding2 = (ParameterizedTypeBinding) referenceBinding2;", "+\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "+\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "+\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "+\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "+\t\t\t\t\t&& (referenceBinding.modifiers == referenceBinding2.modifiers)", "+\t\t\t\t\t&& isEqual(parameterizedTypeBinding.arguments, parameterizedTypeBinding2.arguments);", "+\t\t\t} else if (referenceBinding.isWildcard()) {", "+\t\t\t\tif (!referenceBinding2.isWildcard()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) referenceBinding;", "+\t\t\t\tWildcardBinding wildcardBinding2 = (WildcardBinding) referenceBinding2;", "+\t\t\t\treturn isEqual(wildcardBinding.bound, wildcardBinding2.bound)", "+\t\t\t\t\t&& wildcardBinding.kind == wildcardBinding2.kind;", "+\t\t\t} else if (referenceBinding.isGenericType()) {", "+\t\t\t\tif (!referenceBinding2.isGenericType()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tif (checkTypeVariables) {", "+\t\t\t\t\tif (!isEqual(referenceBinding.typeVariables(), referenceBinding2.typeVariables())) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "+\t\t\t\t\t&& (referenceBinding.isGenericType() == referenceBinding2.isGenericType())", "+\t\t\t\t\t&& (referenceBinding.isRawType() == referenceBinding2.isRawType())", "+\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "+\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "+\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "+\t\t\t\t\t&& (referenceBinding.modifiers == referenceBinding2.modifiers);", "+\t\t\t} else {", "+\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "+\t\t\t\t\t&& (referenceBinding.isRawType() == referenceBinding2.isRawType())", "+\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "+\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "+\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "+\t\t\t\t\t&& (referenceBinding.modifiers == referenceBinding2.modifiers);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd5be9fa4f8f5a8e9dd59a1720f8bee3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "445862b3ac94af052eb272bc07b8bce2907ade1f", "commitAfterChange": "3695268f3d47cb88012e58d6baed589f7f62bb31", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables)", "signatureAfterChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, HashSet visitedTypes)", "diff": ["-\tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables) {", "+\tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, HashSet visitedTypes) {", "+", "+\t\tif (visitedTypes.contains(typeBinding)) return true;", "+\t\tvisitedTypes.add(typeBinding);", "-\t\t\t\t\t\t&& isEqual(typeBinding.leafComponentType(), typeBinding2.leafComponentType(), checkTypeVariables);", "+\t\t\t\t\t\t&& isEqual(typeBinding.leafComponentType(), typeBinding2.leafComponentType(), visitedTypes);", "-\t\t\t\tif (checkTypeVariables) {", "-\t\t\t\t\tif (!isEqual(parameterizedTypeBinding.arguments, parameterizedTypeBinding2.arguments, false)) {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t\t\t\t== (parameterizedTypeBinding2.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation));", "+\t\t\t\t\t\t\t== (parameterizedTypeBinding2.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation))", "+\t\t\t\t\t&& isEqual(parameterizedTypeBinding.arguments, parameterizedTypeBinding2.arguments, visitedTypes);", "-\t\t\t\treturn isEqual(wildcardBinding.bound, wildcardBinding2.bound, checkTypeVariables)", "+\t\t\t\treturn isEqual(wildcardBinding.bound, wildcardBinding2.bound, visitedTypes)", "-\t\t\t\t\t\t&& isEqual(captureBinding.wildcard, captureBinding2.wildcard, checkTypeVariables)", "-\t\t\t\t\t\t&& isEqual(captureBinding.sourceType, captureBinding2.sourceType, true);", "+\t\t\t\t\t\t&& isEqual(captureBinding.wildcard, captureBinding2.wildcard, visitedTypes)", "+\t\t\t\t\t\t&& isEqual(captureBinding.sourceType, captureBinding2.sourceType, visitedTypes);", "-\t\t\t\tif (checkTypeVariables) {", "-\t\t\t\t\treturn CharOperation.equals(typeVariableBinding.sourceName, typeVariableBinding2.sourceName)", "-\t\t\t\t\t\t&& isEqual(typeVariableBinding.declaringElement, typeVariableBinding2.declaringElement, false)", "-\t\t\t\t\t\t&& isEqual(typeVariableBinding.superclass(), typeVariableBinding2.superclass(), true)", "-\t\t\t\t\t\t&& isEqual(typeVariableBinding.superInterfaces(), typeVariableBinding2.superInterfaces(), true);", "-\t\t\t\t} else {", "-\t\t\t\t\treturn CharOperation.equals(typeVariableBinding.sourceName, typeVariableBinding2.sourceName);", "-\t\t\t\t}", "+\t\t\t\treturn CharOperation.equals(typeVariableBinding.sourceName, typeVariableBinding2.sourceName)", "+\t\t\t\t\t&& isEqual(typeVariableBinding.declaringElement, typeVariableBinding2.declaringElement, visitedTypes)", "+\t\t\t\t\t&& isEqual(typeVariableBinding.superclass(), typeVariableBinding2.superclass(), visitedTypes)", "+\t\t\t\t\t&& isEqual(typeVariableBinding.superInterfaces(), typeVariableBinding2.superInterfaces(), visitedTypes);", "-\t\t\t\tif (checkTypeVariables) {", "-\t\t\t\t\tif (!isEqual(referenceBinding.typeVariables(), referenceBinding2.typeVariables(), true)) {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t\t\t\t== (referenceBinding2.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation));", "+\t\t\t\t\t\t\t== (referenceBinding2.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation))", "+\t\t\t\t\t&& isEqual(referenceBinding.typeVariables(), referenceBinding2.typeVariables(), visitedTypes);"]}], "num": 64632}
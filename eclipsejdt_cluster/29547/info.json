{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26166ab15a59dd36cd12f741ab6cf517", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a03719c1c9a65cb4768d16ed57ba99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "20c9553c55b67a9c07624bd0b5b35f188a7f1769", "commitAfterChange": "14fb89a0281d6b0089ef94e47420da3d5f85923f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public int addMatch(ASTNode node, int matchLevel)", "signatureAfterChange": "  public int addMatch(ASTNode node, int matchLevel)", "diff": ["-\tswitch (matchLevel & PatternLocator.NODE_SET_MASK) {", "+\tint maskedLevel = matchLevel & PatternLocator.MATCH_LEVEL_MASK;", "+\tswitch (maskedLevel) {", "-\t\t\taddTrustedMatch(node, POTENTIAL_MATCH);", "+\t\t\tif (matchLevel != maskedLevel) {", "+\t\t\t\taddTrustedMatch(node, new Integer(SearchMatch.A_INACCURATE+(matchLevel & PatternLocator.FLAVORS_MASK)));", "+\t\t\t} else {", "+\t\t\t\taddTrustedMatch(node, POTENTIAL_MATCH);", "+\t\t\t}", "-\t\t\taddTrustedMatch(node, ERASURE_MATCH);", "+\t\t\tif (matchLevel != maskedLevel) {", "+\t\t\t\taddTrustedMatch(node, new Integer(SearchPattern.R_ERASURE_MATCH+(matchLevel & PatternLocator.FLAVORS_MASK)));", "+\t\t\t} else {", "+\t\t\t\taddTrustedMatch(node, ERASURE_MATCH);", "+\t\t\t}", "-\t\t\taddTrustedMatch(node, EXACT_MATCH);", "+\t\t\tif (matchLevel != maskedLevel) {", "+\t\t\t\taddTrustedMatch(node, new Integer(SearchMatch.A_ACCURATE+(matchLevel & PatternLocator.FLAVORS_MASK)));", "+\t\t\t} else {", "+\t\t\t\taddTrustedMatch(node, EXACT_MATCH);", "+\t\t\t}", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c9d57816a6a1695880563c36407408c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic boolean visit(TextElement node)", "signatureAfterChange": " \tpublic boolean visit(AnnotationTypeDeclaration node)", "diff": ["+\t */", "+\tpublic boolean visit(AnnotationTypeDeclaration node) {", "+\t\tASTNode javadoc= getChildNode(node, AnnotationTypeDeclaration.JAVADOC_PROPERTY);", "+\t\tif (javadoc != null) {", "+\t\t\tjavadoc.accept(this);", "+\t\t}", "+\t\tvisitList(node, AnnotationTypeDeclaration.MODIFIERS2_PROPERTY, String.valueOf(' '), EMPTY, String.valueOf(' '));", "+\t\tthis.result.append(\"@interface \");//$NON-NLS-1$", "+\t\tgetChildNode(node, AnnotationTypeDeclaration.NAME_PROPERTY).accept(this);", "+\t\tthis.result.append('{');", "+\t\tvisitList(node, AnnotationTypeDeclaration.BODY_DECLARATIONS_PROPERTY, EMPTY); ", "+\t\tthis.result.append('}');", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc722bdd02b36b23efc3b0b17991914", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "409d050617fcf352393ff243104bdcc98737726e", "commitAfterChange": "79aa5b474819808453695ac530baf1e6c5fdeb6b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " private String extractJavadoc(IType declaringType, String contents) throws JavaModelException", "signatureAfterChange": " private String extractJavadoc(IType declaringType, String contents) throws JavaModelException", "diff": ["-\tString anchor = Signature.toString(this.getSignature().replace('/', '.'), methodName, null, true, false, Flags.isVarargs(this.getFlags()));", "+\tIBinaryMethod info = (IBinaryMethod) getElementInfo();", "+\tchar[] genericSignature = info.getGenericSignature();", "+\tString anchor = null;", "+\tif (genericSignature != null) {", "+\t\tCharOperation.replace(genericSignature, '/', '.');", "+\t\tanchor = Util.toAnchor(genericSignature, methodName, Flags.isVarargs(this.getFlags()));", "+\t\tif (anchor == null) throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.UNKNOWN_JAVADOC_FORMAT, this));", "+\t} else {", "+\t\tanchor = Signature.toString(this.getSignature().replace('/', '.'), methodName, null, true, false, Flags.isVarargs(this.getFlags()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ba1e9bc62119e10653367aa16d06c59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "signatureAfterChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "diff": ["-\t\t\t\t\tfindPackages((CompletionOnPackageReference) parsedUnit.currentPackage);", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {", "+\t\t\t\t\t\tfindPackages((CompletionOnPackageReference) parsedUnit.currentPackage);", "+\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tsetSourceRange(importReference.sourceStart, importReference.sourceEnd);", "-\t\t\t\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)importReference;", "-\t\t\t\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords());", "+\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\t\t\t\tsetSourceRange(importReference.sourceStart, importReference.sourceEnd);", "+\t\t\t\t\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)importReference;", "+\t\t\t\t\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords());", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ddcba5685f85a6520e9d994e926ff76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "fbe3f3aabed3fd943703368b065a95bc68cf5a8d", "commitAfterChange": "3b51e6fd25bf226c9bb29d6317b71df712cf5255", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int SourceOption = 32;\r", "+\t\tif (currentArg.equals(\"-source\"/*nonNLS*/)) {\r", "+\t\t\tmode = SourceOption;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t\r", "+\t\tif (mode == SourceOption) {\r", "+\t\t\tif (currentArg.equals(\"1.4\"/*nonNLS*/)) {\r", "+\t\t\t\tassertMode = true;\r", "+\t\t\t} else if (currentArg.equals(\"1.3\"/*nonNLS*/)) {\r", "+\t\t\t\tassertMode = false;\r", "+\t\t\t} else {\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.sourceOption\"/*nonNLS*/,currentArg));\r", "+\t\t\t}\r", "+\t\t\tmode = Default;\t\t\t\r", "+\t\t\tcontinue;\r", "+\t\t}\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b730eb13b0a262d9527cb80e76909d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 90, "signatureBeforeChange": "  \tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration)", "signatureAfterChange": "  \tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration)", "diff": ["-\tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration) {", "-\t\torg.eclipse.jdt.internal.compiler.ast.ImportReference importReference = compilationUnitDeclaration.currentPackage;", "-\t\tPackageDeclaration packageDeclaration = this.ast.newPackageDeclaration();", "-\t\tchar[][] tokens = importReference.tokens;", "-\t\tint length = importReference.tokens.length;", "-\t\tlong[] positions = importReference.sourcePositions;", "-\t\tint start = (int)(positions[0]>>>32);", "-\t\tint end = (int)(positions[length - 1] & 0xFFFFFFFF);", "-\t\tName name = null;", "-\t\tif (length > 1) {", "-\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, importReference);", "-\t\t} else {", "-\t\t\tname = this.ast.newSimpleName(new String(tokens[0]));", "-\t\t\tname.setSourceRange(start, end - start + 1);", "-\t\t}", "-\t\tpackageDeclaration.setSourceRange(importReference.declarationSourceStart, importReference.declarationEnd - importReference.declarationSourceStart + 1);", "-\t\tpackageDeclaration.setName(name);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(packageDeclaration, importReference);", "-\t\t\trecordNodes(name, compilationUnitDeclaration);", "-\t\t}", "-\t\treturn packageDeclaration;", "-\t}", "+", "+\tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration) {", "+\t\torg.eclipse.jdt.internal.compiler.ast.ImportReference importReference = compilationUnitDeclaration.currentPackage;", "+\t\tPackageDeclaration packageDeclaration = this.ast.newPackageDeclaration();", "+\t\tchar[][] tokens = importReference.tokens;", "+\t\tint length = importReference.tokens.length;", "+\t\tlong[] positions = importReference.sourcePositions;", "+\t\tint start = (int)(positions[0]>>>32);", "+\t\tint end = (int)(positions[length - 1] & 0xFFFFFFFF);", "+\t\tName name = null;", "+\t\tif (length > 1) {", "+\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, importReference);", "+\t\t} else {", "+\t\t\tname = this.ast.newSimpleName(new String(tokens[0]));", "+\t\t\tname.setSourceRange(start, end - start + 1);", "+\t\t}", "+\t\tpackageDeclaration.setSourceRange(importReference.declarationSourceStart, importReference.declarationEnd - importReference.declarationSourceStart + 1);", "+\t\tpackageDeclaration.setName(name);", "+\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = importReference.annotations;", "+\t\tif (annotations != null) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tpackageDeclaration.setFlags(packageDeclaration.getFlags() & ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tfor (int i = 0, max = annotations.length; i < max; i++) {", "+\t\t\t\t\t\tpackageDeclaration.annotations().add(convert(annotations[i]));", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(packageDeclaration, importReference);", "+\t\t\trecordNodes(name, compilationUnitDeclaration);", "+\t\t}", "+\t\treturn packageDeclaration;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fa05c596a47fd04177bfefde9e5d7b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = SearchMatch.A_INACCURATE;", "+\t\t\t\t\t\tif (fieldBinding.type.isParameterizedType())", "+\t\t\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = refineAccuracy(SearchMatch.A_INACCURATE, (ParameterizedTypeBinding) fieldBinding.type, this.pattern.typeSignature, locator);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = SearchMatch.A_INACCURATE;", "-\t\t\t\t\t\t\taccuracies[i] = SearchMatch.A_INACCURATE;", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tif (otherBinding.type.isParameterizedType())", "+\t\t\t\t\t\t\t\taccuracies[i] = refineAccuracy(SearchMatch.A_INACCURATE, (ParameterizedTypeBinding) otherBinding.type, this.pattern.typeSignature, locator);", "+\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\taccuracies[i] = SearchMatch.A_INACCURATE;", "+\t\t\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fbd917626d1e27100bb66bacd1ad3ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "b56d246271c095551a3a882f52570003cc372a30", "commitAfterChange": "3000413ce5f7d2704ad6fa8d0b9095de57112c06", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\t\t\tbuffer.append(this.binding.constantPoolName());", "+\t\t\t\t\tchar[] constantPoolName = this.binding.constantPoolName();", "+\t\t\t\t\tif (constantPoolName != null) {", "+\t\t\t\t\t\tbuffer.append(constantPoolName);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tchar[] qualifiedSourceName = this.binding.qualifiedSourceName();", "+\t\t\t\t\t\tif (qualifiedSourceName != null) {", "+\t\t\t\t\t\t\tCharOperation.replace(qualifiedSourceName, '.', '$');", "+\t\t\t\t\t\t\tbuffer", "+\t\t\t\t\t\t\t\t.append(getPackage().getName())", "+\t\t\t\t\t\t\t\t.append(qualifiedSourceName);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tbuffer", "+\t\t\t\t\t\t\t\t.append(getPackage().getName())", "+\t\t\t\t\t\t\t\t.append('/')", "+\t\t\t\t\t\t\t\t.append(getName());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3228d1d76d3c58a3de568ec60d4a0cfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DefaultBytecodeVisitor.java", "commitBeforeChange": "160613f931d3107092c23ec0bbf5c709e81be6c4", "commitAfterChange": "4b4dbca0bb97a8d7d91d56de2e2d0246704ead9c", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 211, "signatureBeforeChange": "  \tprivate String returnDeclaringClassName(IConstantPoolEntry constantRef)", "signatureAfterChange": "  \tprivate String returnDeclaringClassName(IConstantPoolEntry constantRef)", "diff": ["+\t\tif (isCompact()) {", "+\t\t\tchar[] className = constantRef.getClassName();", "+\t\t\tint lastIndexOfSlash = CharOperation.lastIndexOf('/', className);", "+\t\t\tif (lastIndexOfSlash != -1) {", "+\t\t\t\treturn new String(CharOperation.subarray(className, lastIndexOfSlash + 1, className.length));", "+\t\t\t}", "+\t\t\treturn new String(constantRef.getClassName());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41c8a336db34cb0f507df536295c8710", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "commitAfterChange": "5ce130e25c355987e77b700c026948aca2c3cdd7", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 17, "signatureBeforeChange": " private void recordElementInfo(IJavaElement element, JavaModel model, int depth)", "signatureAfterChange": " private void recordElementInfo(IJavaElement element, JavaModel model, int depth)", "diff": ["-\tthis.putElementInfo(element, info);", "+\tthis.infos.put(element, info);", "+\tIAnnotation[] annotations = null;", "+\tif (info instanceof AnnotatableInfo) ", "+\t\tannotations = ((AnnotatableInfo) info).annotations;", "+\tif (annotations != null) {", "+\t\tif (this.annotationInfos == null)", "+\t\t\tthis.annotationInfos = new HashMap();", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tfor (int i = 0, length = annotations.length; i < length; i++) {", "+\t\t\tthis.annotationInfos.put(annotations[i], manager.getInfo(annotations[i]));", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "481aa4a7f1c265265ad3e7afc2efdb63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "diff": ["-\t\t\t\tif (kind == IResourceDelta.ADDED || kind == IResourceDelta.REMOVED) {", "+\t\t\t\tif (kind == IResourceDelta.ADDED || kind == IResourceDelta.REMOVED || (kind == IResourceDelta.CHANGED && (delta.getFlags() & IResourceDelta.LOCAL_CHANGED) != 0)) {", "+\t\t\t\t\tcase IResourceDelta.CHANGED:", "+\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.LOCAL_CHANGED) == 0)", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\tIPath binaryFolderPath = element.getPackageFragmentRoot().getPath();", "+\t\t\t\tPackageFragmentRoot root = element.getPackageFragmentRoot();", "+\t\t\t\tIPath binaryFolderPath = root.isExternal() && !root.isArchive() ? root.resource().getFullPath() : root.getPath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48773e117e7cd684b6222cfa66b7104b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "40f76b3d0fb01a4a7fa1aad4b09c356c31458c94", "commitAfterChange": "323d52f789e646d704223fd3ac5d22c4e4efec25", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 433, "signatureBeforeChange": " public void typeMismatchError(TypeBinding actualType, TypeBinding expectedType, ASTNode location, ASTNode expectingLocation)", "signatureAfterChange": " public void typeMismatchError(TypeBinding actualType, TypeBinding expectedType, ASTNode location, ASTNode expectingLocation)", "diff": ["+\tchar[] actualReadableName = actualType.readableName();", "+\tchar[] expectedReadableName = expectedType.readableName();", "-\t\tactualShortReadableName = actualType.readableName();", "-\t\texpectedShortReadableName = expectedType.readableName();", "+\t\tif (CharOperation.equals(actualReadableName, expectedReadableName)) {", "+\t\t\t// if full type names are equal, assume the incompatibility is due to mismatching null annotations:", "+\t\t\tactualReadableName = actualType.nullAnnotatedReadableName(this.options, false);", "+\t\t\texpectedReadableName = expectedType.nullAnnotatedReadableName(this.options, false);", "+\t\t\tactualShortReadableName = actualType.nullAnnotatedReadableName(this.options, true);", "+\t\t\texpectedShortReadableName = expectedType.nullAnnotatedReadableName(this.options, true);", "+\t\t} else {", "+\t\t\tactualShortReadableName = actualReadableName;", "+\t\t\texpectedShortReadableName = expectedReadableName;", "+\t\t}", "-\t\tnew String[] {new String(actualType.readableName()), new String(expectedType.readableName())},", "+\t\tnew String[] {new String(actualReadableName), new String(expectedReadableName)},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fa6ed1ca53791af2bdb36624bf66af6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "diff": ["-\t\tprintModifiers(node.getModifiers());", "+\t\tif (node.getAST().API_LEVEL == AST.LEVEL_2_0) {", "+\t\t\tprintModifiers(node.getModifiers());", "+\t\t}", "+\t\tif (node.getAST().API_LEVEL >= AST.LEVEL_3_0) {", "+\t\t\tprintModifiers(node.modifiers());", "+\t\t}", "+\t\tif (node.getAST().API_LEVEL >= AST.LEVEL_3_0) {", "+\t\t\tif (node.isVariableArity()) {", "+\t\t\t\tthis.buffer.append(\"...\");//$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5084aa2458706b42c2dc726b4efa6280", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LabeledStatement.java", "commitBeforeChange": "1d1767d299ea42c1df702d4cb48d62de1d45dc7c", "commitAfterChange": "09877be72bc6beb321466519e34e554926880ccd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\tFlowInfo mergedInfo =", "-\t\t\t\tstatement", "+\t\t\tFlowInfo statementInfo, mergedInfo;", "+\t\t\tif (((statementInfo = statement", "-\t\t\t\t\t\tflowInfo)", "-\t\t\t\t\t.mergedWith(labelContext.initsOnBreak);", "+\t\t\t\t\t\tflowInfo)).tagBits & FlowInfo.UNREACHABLE) != 0) {", "+\t\t\t\tif ((labelContext.initsOnBreak.tagBits & FlowInfo.UNREACHABLE) == 0) {", "+\t\t\t\t\t// an embedded loop has had no chance to reinject forgotten null info", "+\t\t\t\t\tmergedInfo = flowInfo.unconditionalCopy().", "+\t\t\t\t\t\taddInitializationsFrom(labelContext.initsOnBreak);", "+\t\t\t\t} else {", "+\t\t\t\t\tmergedInfo = labelContext.initsOnBreak;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tmergedInfo = statementInfo.mergedWith(labelContext.initsOnBreak);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57d32721693accd59245b3421aea3bba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "dc74bbda99d44eb7c9bf5e21853e09a003a72218", "commitAfterChange": "3c289b9a951cfd3e36c9387c73b3893fba2c0158", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "signatureAfterChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "diff": ["+\t\t\tif(method.typeVariables != null && method.typeVariables.length > 0) {", "+\t\t\t\tchar[][] excludedNames = findEnclosingTypeNames(scope);", "+\t\t\t\tchar[][] substituedParameterNames = substituteMethodTypeParameterNames(method.typeVariables, excludedNames);", "+\t\t\t\tif(substituedParameterNames != null) {", "+\t\t\t\t\tmethod = new ParameterizedMethodBinding(", "+\t\t\t\t\t\t\t\tmethod.declaringClass,", "+\t\t\t\t\t\t\t\tmethod,", "+\t\t\t\t\t\t\t\tsubstituedParameterNames,", "+\t\t\t\t\t\t\t\tscope.environment());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5a009b7150295b733a842e0c35fddf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "8c67d56825136ce0d7026162576ad6997e930bdc", "commitAfterChange": "0b88f9a0bb1950edae0865a8658608a49edfc445", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": " public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\tif (isPublic()) return true;", "+\tif (this.declaringClass.isInterface() && isStatic()) {", "+\t\t// Static interface methods can be explicitly invoked only through the type reference of the declaring interface or implicitly in the interface itself.", "+\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8 || !(invocationSite instanceof MessageSend))", "+\t\t\treturn false;", "+\t\tMessageSend messageSend = (MessageSend) invocationSite;", "+\t\tif (messageSend.isTypeAccess() && receiverType == this.declaringClass)", "+\t\t\treturn true;", "+\t\tif (messageSend.receiver.isImplicitThis() && invocationType == this.declaringClass)", "+\t\t\treturn true;", "+\t\treturn false;", "+\t}", "+\t", "+\tif (isPublic()) return true;", "+\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dfe59fc6e097be95493e0a4a9bc6baa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/InternalASTRewrite.java", "commitBeforeChange": "7c282c0ddcdb6ffe774e195ad66f8c97fb6de3a9", "commitAfterChange": "dda313dbc0ef7350384ee6e9286488fe4d55d0ab", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \t \tvoid postCloneNodeEvent(ASTNode node, ASTNode clone)", "signatureAfterChange": " \t \t \tvoid postCloneNodeEvent(ASTNode node, ASTNode clone)", "diff": ["-\t\tthis.clonedNodes.put(clone, node);", "+\t\tif(node.ast == root.ast && clone.ast == root.ast) {", "+\t\t\tif((node.getFlags() & ASTNode.ORIGINAL) != 0) {", "+\t\t\t\tthis.clonedNodes.put(clone, node);", "+\t\t\t} else {", "+\t\t\t\t// node can be a cloned node", "+\t\t\t\tObject original = this.clonedNodes.get(node);", "+\t\t\t\tif(original != null) {", "+\t\t\t\t\tthis.clonedNodes.put(clone, original);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e1c9bb22a43d8bec53886106cac63a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope)", "signatureAfterChange": " \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope)", "diff": ["-\t\tdone1 : while (true) { // done when a COMPILATION_UNIT_SCOPE is found", "-", "-\t\t\tswitch (currentScope.kind) {", "-", "-\t\t\t\tcase Scope.METHOD_SCOPE :", "-\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)", "-\t\t\t\t\tMethodScope methodScope = (MethodScope) currentScope;", "-\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;", "-", "-\t\t\t\tcase Scope.BLOCK_SCOPE :", "-\t\t\t\t\tBlockScope blockScope = (BlockScope) currentScope;", "-", "-\t\t\t\t\tnext : for (int i = 0, length = blockScope.locals.length; i < length; i++) {", "-\t\t\t\t\t\tLocalVariableBinding local = blockScope.locals[i];", "-", "-\t\t\t\t\t\tif (local == null)", "-\t\t\t\t\t\t\tbreak next;", "-", "-\t\t\t\t\t\tif (tokenLength > local.name.length)", "-\t\t\t\t\t\t\tcontinue next;", "-", "-\t\t\t\t\t\tif (!CharOperation.prefixEquals(token, local.name, false /* ignore case */", "-\t\t\t\t\t\t\t))", "-\t\t\t\t\t\t\tcontinue next;", "-", "-\t\t\t\t\t\tif (local.isSecret())", "-\t\t\t\t\t\t\tcontinue next;", "-", "-\t\t\t\t\t\tfor (int f = 0; f < localsFound.size; f++) {", "-\t\t\t\t\t\t\tLocalVariableBinding otherLocal =", "-\t\t\t\t\t\t\t\t(LocalVariableBinding) localsFound.elementAt(f);", "-\t\t\t\t\t\t\tif (CharOperation.equals(otherLocal.name, local.name, true))", "+\t\tif (!this.requestor.isIgnored(CompletionProposal.LOCAL_VARIABLE_REF)) {", "+\t\t\tdone1 : while (true) { // done when a COMPILATION_UNIT_SCOPE is found", "+\t", "+\t\t\t\tswitch (currentScope.kind) {", "+\t", "+\t\t\t\t\tcase Scope.METHOD_SCOPE :", "+\t\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)", "+\t\t\t\t\t\tMethodScope methodScope = (MethodScope) currentScope;", "+\t\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;", "+\t", "+\t\t\t\t\tcase Scope.BLOCK_SCOPE :", "+\t\t\t\t\t\tBlockScope blockScope = (BlockScope) currentScope;", "+\t", "+\t\t\t\t\t\tnext : for (int i = 0, length = blockScope.locals.length; i < length; i++) {", "+\t\t\t\t\t\t\tLocalVariableBinding local = blockScope.locals[i];", "+\t", "+\t\t\t\t\t\t\tif (local == null)", "+\t\t\t\t\t\t\t\tbreak next;", "+\t", "+\t\t\t\t\t\t\tif (tokenLength > local.name.length)", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tlocalsFound.add(local);", "-", "-\t\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\t\trelevance += computeRelevanceForInterestingProposal(local);", "-\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(token, local.name);", "-\t\t\t\t\t\trelevance += computeRelevanceForExpectingType(local.type);", "-\t\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "-\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for local variable", "-\t\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.LOCAL_VARIABLE_REF)) {", "-\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.LOCAL_VARIABLE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\t\tproposal.setSignature(", "-\t\t\t\t\t\t\t\tlocal.type == null", "-\t\t\t\t\t\t\t\t? createTypeSignature(", "-\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\t\t\t\t\t\tlocal.declaration.type.toString().toCharArray())", "-\t\t\t\t\t\t\t\t: getSignature(local.type));", "-\t\t\t\t\t\t\tif(local.type == null) {", "-\t\t\t\t\t\t\t\t//proposal.setPackageName(null);", "-\t\t\t\t\t\t\t\tproposal.setTypeName(local.declaration.type.toString().toCharArray());", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tproposal.setPackageName(local.type.qualifiedPackageName());", "-\t\t\t\t\t\t\t\tproposal.setTypeName(local.type.qualifiedSourceName());", "+\t", "+\t\t\t\t\t\t\tif (!CharOperation.prefixEquals(token, local.name, false /* ignore case */", "+\t\t\t\t\t\t\t\t))", "+\t\t\t\t\t\t\t\tcontinue next;", "+\t", "+\t\t\t\t\t\t\tif (local.isSecret())", "+\t\t\t\t\t\t\t\tcontinue next;", "+\t", "+\t\t\t\t\t\t\tfor (int f = 0; f < localsFound.size; f++) {", "+\t\t\t\t\t\t\t\tLocalVariableBinding otherLocal =", "+\t\t\t\t\t\t\t\t\t(LocalVariableBinding) localsFound.elementAt(f);", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(otherLocal.name, local.name, true))", "+\t\t\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t\tproposal.setName(local.name);", "-\t\t\t\t\t\t\tproposal.setCompletion(local.name);", "-\t\t\t\t\t\t\tproposal.setFlags(local.modifiers);", "-\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\tlocalsFound.add(local);", "+\t", "+\t\t\t\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\t\t\t\trelevance += computeRelevanceForInterestingProposal(local);", "+\t\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(token, local.name);", "+\t\t\t\t\t\t\trelevance += computeRelevanceForExpectingType(local.type);", "+\t\t\t\t\t\t\trelevance += computeRelevanceForQualification(false);", "+\t\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for local variable", "+\t\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.LOCAL_VARIABLE_REF)) {", "+\t\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.LOCAL_VARIABLE_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\t\t\tlocal.type == null", "+\t\t\t\t\t\t\t\t\t? createTypeSignature(", "+\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\tlocal.declaration.type.toString().toCharArray())", "+\t\t\t\t\t\t\t\t\t: getSignature(local.type));", "+\t\t\t\t\t\t\t\tif(local.type == null) {", "+\t\t\t\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t\t\t\tproposal.setTypeName(local.declaration.type.toString().toCharArray());", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tproposal.setPackageName(local.type.qualifiedPackageName());", "+\t\t\t\t\t\t\t\t\tproposal.setTypeName(local.type.qualifiedSourceName());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tproposal.setName(local.name);", "+\t\t\t\t\t\t\t\tproposal.setCompletion(local.name);", "+\t\t\t\t\t\t\t\tproposal.setFlags(local.modifiers);", "+\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :", "-\t\t\t\t\tbreak done1;", "+\t\t\t\t\t\tbreak;", "+\t", "+\t\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :", "+\t\t\t\t\t\tbreak done1;", "+\t\t\t\t}", "+\t\t\t\tcurrentScope = currentScope.parent;", "-\t\t\tcurrentScope = currentScope.parent;", "-", "+\t\t", "+\t\tboolean proposeField = !this.requestor.isIgnored(CompletionProposal.FIELD_REF);", "+\t\tboolean proposeMethod = !this.requestor.isIgnored(CompletionProposal.METHOD_REF);", "+\t\t", "-\t\tdone2 : while (true) { // done when a COMPILATION_UNIT_SCOPE is found", "-", "-\t\t\tswitch (currentScope.kind) {", "-\t\t\t\tcase Scope.METHOD_SCOPE :", "-\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)", "-\t\t\t\t\tMethodScope methodScope = (MethodScope) currentScope;", "-\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Scope.CLASS_SCOPE :", "-\t\t\t\t\tClassScope classScope = (ClassScope) currentScope;", "-\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;", "-\t\t\t\t\t/*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided", "-\t\t\t\t\t\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);", "-\t\t\t\t\t\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);", "-\t\t\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t\t\t} else { */", "-\t\t\t\t\tfindFields(", "-\t\t\t\t\t\ttoken,", "-\t\t\t\t\t\tenclosingType,", "-\t\t\t\t\t\tclassScope,", "-\t\t\t\t\t\tfieldsFound,", "-\t\t\t\t\t\tlocalsFound,", "-\t\t\t\t\t\tstaticsOnly,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\ttrue);", "-", "-\t\t\t\t\tfindMethods(", "-\t\t\t\t\t\ttoken,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\tenclosingType,", "-\t\t\t\t\t\tclassScope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tstaticsOnly,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\ttrue);", "-\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();", "-\t\t\t\t\t//\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :", "-\t\t\t\t\tbreak done2;", "-\t\t\t}", "-\t\t\tcurrentScope = currentScope.parent;", "-\t\t}", "-\t\t", "-\t\tImportBinding[] importBindings = scope.compilationUnitScope().imports;", "-\t\tfor (int i = 0; i < importBindings.length; i++) {", "-\t\t\tImportBinding importBinding = importBindings[i];", "-\t\t\tif(importBinding.isValidBinding() && importBinding.isStatic()) {", "-\t\t\t\tBinding binding = importBinding.resolvedImport;", "-\t\t\t\tif(binding != null && binding.isValidBinding()) {", "-\t\t\t\t\tif(importBinding.onDemand) {", "-\t\t\t\t\t\tif((binding.kind() & Binding.TYPE) != 0) {", "+\t\tif(proposeField || proposeMethod) {", "+\t\t\tdone2 : while (true) { // done when a COMPILATION_UNIT_SCOPE is found", "+\t", "+\t\t\t\tswitch (currentScope.kind) {", "+\t\t\t\t\tcase Scope.METHOD_SCOPE :", "+\t\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)", "+\t\t\t\t\t\tMethodScope methodScope = (MethodScope) currentScope;", "+\t\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Scope.CLASS_SCOPE :", "+\t\t\t\t\t\tClassScope classScope = (ClassScope) currentScope;", "+\t\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;", "+\t\t\t\t\t\t/*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided", "+\t\t\t\t\t\t\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);", "+\t\t\t\t\t\t\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);", "+\t\t\t\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t\t\t\t} else { */", "+\t\t\t\t\t\tif(proposeField) {", "-\t\t\t\t\t\t\t\t(ReferenceBinding)binding,", "-\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tenclosingType,", "+\t\t\t\t\t\t\t\tclassScope,", "-\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tstaticsOnly,", "-\t\t\t\t\t\t\t\tfalse);", "-\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif(proposeMethod) {", "-\t\t\t\t\t\t\t\t(ReferenceBinding)binding,", "-\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tenclosingType,", "+\t\t\t\t\t\t\t\tclassScope,", "-\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tstaticsOnly,", "-\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\t\ttrue);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif ((binding.kind() & Binding.FIELD) != 0) {", "-\t\t\t\t\t\t\t\tfindFields(", "+\t\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();", "+\t\t\t\t\t\t//\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t", "+\t\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :", "+\t\t\t\t\t\tbreak done2;", "+\t\t\t\t}", "+\t\t\t\tcurrentScope = currentScope.parent;", "+\t\t\t}", "+\t\t\t", "+\t\t\tImportBinding[] importBindings = scope.compilationUnitScope().imports;", "+\t\t\tfor (int i = 0; i < importBindings.length; i++) {", "+\t\t\t\tImportBinding importBinding = importBindings[i];", "+\t\t\t\tif(importBinding.isValidBinding() && importBinding.isStatic()) {", "+\t\t\t\t\tBinding binding = importBinding.resolvedImport;", "+\t\t\t\t\tif(binding != null && binding.isValidBinding()) {", "+\t\t\t\t\t\tif(importBinding.onDemand) {", "+\t\t\t\t\t\t\tif((binding.kind() & Binding.TYPE) != 0) {", "+\t\t\t\t\t\t\t\tif(proposeField) {", "+\t\t\t\t\t\t\t\t\tfindFields(", "-\t\t\t\t\t\t\t\t\t\tnew FieldBinding[]{(FieldBinding)binding},", "+\t\t\t\t\t\t\t\t\t\t(ReferenceBinding)binding,", "-\t\t\t\t\t\t\t\t\t\t((FieldBinding)binding).declaringClass,", "-\t\t\t\t\t\t} else if ((binding.kind() & Binding.METHOD) != 0) {", "-\t\t\t\t\t\t\t\tMethodBinding methodBinding = (MethodBinding)binding;", "-\t\t\t\t\t\t\t\tif(CharOperation.prefixEquals(token, methodBinding.selector))", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tfindLocalMethodsOfStaticImports(", "-\t\t\t\t\t\t\t\t\t\tmethodBinding.selector,", "-\t\t\t\t\t\t\t\t\t\tmethodBinding.declaringClass.methods(),", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif(proposeMethod) {", "+\t\t\t\t\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t\t\t(ReferenceBinding)binding,", "-\t\t\t\t\t\t\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t\t\t\t\t\t\tinvocationSite);", "+\t\t\t\t\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif ((binding.kind() & Binding.FIELD) != 0) {", "+\t\t\t\t\t\t\t\tif(proposeField) {", "+\t\t\t\t\t\t\t\t\t\tfindFields(", "+\t\t\t\t\t\t\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\t\t\t\t\t\t\tnew FieldBinding[]{(FieldBinding)binding},", "+\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\t\t\t\t\t\t\tlocalsFound,", "+\t\t\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\t\t\t((FieldBinding)binding).declaringClass,", "+\t\t\t\t\t\t\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\t\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if ((binding.kind() & Binding.METHOD) != 0) {", "+\t\t\t\t\t\t\t\tif(proposeMethod) {", "+\t\t\t\t\t\t\t\t\tMethodBinding methodBinding = (MethodBinding)binding;", "+\t\t\t\t\t\t\t\t\tif(CharOperation.prefixEquals(token, methodBinding.selector))", "+\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tfindLocalMethodsOfStaticImports(", "+\t\t\t\t\t\t\t\t\t\t\tmethodBinding.selector,", "+\t\t\t\t\t\t\t\t\t\t\tmethodBinding.declaringClass.methods(),", "+\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\tmethodBinding.declaringClass,", "+\t\t\t\t\t\t\t\t\t\t\tinvocationSite);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652a88e83efc478e860d1352ff613331", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "223ac176333d2fadca381dedcd267fe1a5e5fa31", "commitAfterChange": "908f55d6ba77993f6a6683ec18032e11ce9fef34", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "signatureAfterChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "diff": ["-\tint index = blockIndex != -1 && controlIndex < blockIndex ? blockIndex : controlIndex;", "-", "+\tint index;", "+\tif (controlIndex != -1) {", "+\t\tindex = blockIndex != -1 && controlIndex < blockIndex ? blockIndex : controlIndex;", "+\t} else {", "+\t\t// To handle the case when the completion is requested before enclosing R_PAREN", "+\t\t// and an instanceof expression is also present", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=261534", "+\t\tint instanceOfIndex = lastIndexOfElement(K_BETWEEN_INSTANCEOF_AND_RPAREN);", "+\t\tindex = blockIndex != -1 && instanceOfIndex < blockIndex ? blockIndex : instanceOfIndex;", "+\t}", "-", "+\t\tif (statement instanceof AND_AND_Expression && this.assistNode instanceof Statement) {", "+\t\t\tstatement = (Statement) this.assistNode;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6590a63a44719cf267e3242d32de5488", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 123, "signatureBeforeChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "diff": ["-\t\t", "-\t\trewriteModifiers(node, SingleVariableDeclaration.MODIFIERS_PROPERTY, node.getStartPosition());", "+\t\tint pos= node.getStartPosition();", "+\t\tif (node.getAST().apiLevel() == AST.JLS2) {", "+\t\t\trewriteModifiers(node, SingleVariableDeclaration.MODIFIERS_PROPERTY, pos);", "+\t\t} else {", "+\t\t\trewriteModifiers2(node, SingleVariableDeclaration.MODIFIERS2_PROPERTY, pos);", "+\t\t}", "-\t\tint pos= rewriteRequiredNode(node, SingleVariableDeclaration.NAME_PROPERTY);", "+\t\tif (node.getAST().apiLevel() >= AST.JLS3) {", "+\t\t\tif (isChanged(node, SingleVariableDeclaration.VARARGS_PROPERTY)) {", "+\t\t\t\tAssert.isTrue(false, \"Modifications of property \" + SingleVariableDeclaration.VARARGS_PROPERTY + \" not supported yet\");  //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tpos= rewriteRequiredNode(node, SingleVariableDeclaration.NAME_PROPERTY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68489c2f6f9e181d2a24d9c124170691", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IJavaProject project) throws JavaModelException", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashMap packageFragments, ICompilationUnit[] workingCopies) throws JavaModelException", "diff": ["-\tpublic NameLookup(IJavaProject project) throws JavaModelException {", "-\t\tconfigureFromProject(project);", "+\tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashMap packageFragments, ICompilationUnit[] workingCopies) throws JavaModelException {", "+\t\tthis.packageFragmentRoots = packageFragmentRoots;", "+\t\tthis.packageFragments = packageFragments;", "+\t\tif (workingCopies != null) {", "+\t\t\tthis.unitsToLookInside = new HashMap();", "+\t\t\tfor (int i = 0, length = workingCopies.length; i < length; i++) {", "+\t\t\t\tICompilationUnit unitToLookInside = workingCopies[i];", "+\t\t\t\tICompilationUnit original = unitToLookInside.getPrimary();", "+\t\t\t\tthis.unitsToLookInside.put(original, unitToLookInside);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de509f19e30fdb5c9fe5b36c164b7a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceField.java", "commitBeforeChange": "b3bdb44776faa860f50f450670f79dfc874cc5b3", "commitAfterChange": "a59c911bb67a4a0588e810060c73cd3ec2f53032", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getConstant() throws JavaModelException", "signatureAfterChange": " public Object getConstant() throws JavaModelException", "diff": ["-\t} else if (signature.equals(Signature.SIG_LONG)) { ", "-\t\tconstant = new Long(constantSource);", "+\t} else if (signature.equals(Signature.SIG_LONG)) {", "+\t\tif (constantSource.endsWith(\"L\") || constantSource.endsWith(\"l\")) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tint index = constantSource.lastIndexOf(\"L\");//$NON-NLS-1$", "+\t\t\tif (index != -1) {", "+\t\t\t\tconstant = new Long(constantSource.substring(0, index));", "+\t\t\t} else {", "+\t\t\t\tconstant = new Long(constantSource.substring(0, constantSource.lastIndexOf(\"l\")));//$NON-NLS-1$", "+\t\t\t}", "+\t\t} else {", "+\t\t\tconstant = new Long(constantSource);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ca5315e487a12c4e6ee71ea85c828d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1a94a1e6652f1701b8c360d56d755e5438b79c26", "commitAfterChange": "3b002cab97d2ee77b59be67feaf705de255bc1fb", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  private void addNewEntry(ArrayList paths, String currentClasspathName, ArrayList currentRuleSpecs, String customEncoding, boolean isSourceOnly)", "signatureAfterChange": "  private void addNewEntry(ArrayList paths, String currentClasspathName,  \t\tArrayList currentRuleSpecs, String customEncoding,  \t\tString destPath, boolean isSourceOnly,  \t\tboolean rejectDestinationPathOnJars) throws InvalidInputException", "diff": ["-private void addNewEntry(ArrayList paths, String currentClasspathName, ArrayList currentRuleSpecs, String customEncoding, boolean isSourceOnly) {", "+private void addNewEntry(ArrayList paths, String currentClasspathName, ", "+\t\tArrayList currentRuleSpecs, String customEncoding, ", "+\t\tString destPath, boolean isSourceOnly, ", "+\t\tboolean rejectDestinationPathOnJars) throws InvalidInputException {", "+\t\tif (NONE.equals(destPath)) {", "+\t\t\tdestPath = NONE; // keep == comparison valid", "+\t\t}", "+\t\tif (rejectDestinationPathOnJars && destPath != null &&", "+\t\t\t\t(currentClasspathName.endsWith(\".jar\") || //$NON-NLS-1$ ", "+\t\t\t\t\tcurrentClasspathName.endsWith(\".zip\"))) { //$NON-NLS-1$ ", "+\t\t\tthrow new InvalidInputException(", "+\t\t\t\tMain.bind(\"configure.unexpectedDestinationPathEntryFile\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\tcurrentClasspathName));", "+\t\t}", "-\t\t\t\taccessRuleSet);", "+\t\t\t\taccessRuleSet,", "+\t\t\t\tdestPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8792221a71d84b68a62d87311ec08a68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(MethodDeclaration node)", "diff": ["-\t\tprintModifiers(getIntAttribute(node, MethodDeclaration.MODIFIERS_PROPERTY), this.result);", "+\t\tif (node.getAST().apiLevel() == AST.JLS2) {", "+\t\t\tprintModifiers(getIntAttribute(node, MethodDeclaration.MODIFIERS_PROPERTY), this.result);", "+\t\t} else {", "+\t\t\tvisitList(node, MethodDeclaration.MODIFIERS2_PROPERTY, String.valueOf(' '), EMPTY, String.valueOf(' '));", "+\t\t}", "+\t\t", "-\t\t\tgetChildNode(node, MethodDeclaration.RETURN_TYPE_PROPERTY).accept(this);", "+\t\t\tif (node.getAST().apiLevel() == AST.JLS2) {", "+\t\t\t\tgetChildNode(node, MethodDeclaration.RETURN_TYPE_PROPERTY).accept(this);", "+\t\t\t} else {", "+\t\t\t\tASTNode returnType = getChildNode(node, MethodDeclaration.RETURN_TYPE2_PROPERTY);", "+\t\t\t\tif (returnType != null) {", "+\t\t\t\t\treturnType.accept(this);", "+\t\t\t\t} else {", "+\t\t\t\t\t// methods really ought to have a return type", "+\t\t\t\t\tthis.result.append(\"void\");//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "-\t\tvisitList(node, MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY, String.valueOf(','), \" throws \"); //$NON-NLS-1$", "+\t\tvisitList(node, MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY, String.valueOf(','), \" throws \", EMPTY); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91718bdf8045ee6c6e0c084ff2b92a18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "diff": ["-\t\tprintModifiers(getIntAttribute(node, SingleVariableDeclaration.MODIFIERS_PROPERTY), this.result);", "+\t\tif (node.getAST().apiLevel() == AST.JLS2) {", "+\t\t\tprintModifiers(getIntAttribute(node, SingleVariableDeclaration.MODIFIERS_PROPERTY), this.result);", "+\t\t} else {", "+\t\t\tvisitList(node, SingleVariableDeclaration.MODIFIERS2_PROPERTY, String.valueOf(' '), EMPTY, String.valueOf(' '));", "+\t\t}", "+\t\tif (node.getAST().apiLevel() >= AST.JLS3) {", "+\t\t\tif (getBooleanAttribute(node, SingleVariableDeclaration.VARARGS_PROPERTY)) {", "+\t\t\t\tthis.result.append(\"...\");//$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac2ea53a14d97ada6d48044154db75dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 89, "signatureBeforeChange": " \t \tpublic ImportDeclaration convertImport(org.eclipse.jdt.internal.compiler.ast.ImportReference importReference)", "signatureAfterChange": " \t \tpublic ImportDeclaration convertImport(org.eclipse.jdt.internal.compiler.ast.ImportReference importReference)", "diff": ["-\t", "-\tpublic ImportDeclaration convertImport(org.eclipse.jdt.internal.compiler.ast.ImportReference importReference) {", "-\t\tImportDeclaration importDeclaration = this.ast.newImportDeclaration();", "-\t\tboolean onDemand = importReference.onDemand;", "-\t\tchar[][] tokens = importReference.tokens;", "-\t\tint length = importReference.tokens.length;", "-\t\tlong[] positions = importReference.sourcePositions;", "-\t\tName name = null;", "-\t\tif (length > 1) {", "-\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, importReference);", "-\t\t} else {", "-\t\t\tname = this.ast.newSimpleName(new String(tokens[0]));", "-\t\t\tint start = (int)(positions[0]>>>32);", "-\t\t\tint end = (int)(positions[0] & 0xFFFFFFFF);", "-\t\t\tname.setSourceRange(start, end - start + 1);", "-\t\t}", "-\t\timportDeclaration.setSourceRange(importReference.declarationSourceStart, importReference.declarationEnd - importReference.declarationSourceStart + 1);", "-\t\timportDeclaration.setName(name);", "-\t\timportDeclaration.setOnDemand(onDemand);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(importDeclaration, importReference);", "-\t\t}", "-\t\treturn importDeclaration;", "-\t}", "+\tpublic ImportDeclaration convertImport(org.eclipse.jdt.internal.compiler.ast.ImportReference importReference) {", "+\t\tImportDeclaration importDeclaration = this.ast.newImportDeclaration();", "+\t\tboolean onDemand = importReference.onDemand;", "+\t\tchar[][] tokens = importReference.tokens;", "+\t\tint length = importReference.tokens.length;", "+\t\tlong[] positions = importReference.sourcePositions;", "+\t\tName name = null;", "+\t\tif (length > 1) {", "+\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, importReference);", "+\t\t} else {", "+\t\t\tname = this.ast.newSimpleName(new String(tokens[0]));", "+\t\t\tint start = (int)(positions[0]>>>32);", "+\t\t\tint end = (int)(positions[0] & 0xFFFFFFFF);", "+\t\t\tname.setSourceRange(start, end - start + 1);", "+\t\t}", "+\t\timportDeclaration.setSourceRange(importReference.declarationSourceStart, importReference.declarationEnd - importReference.declarationSourceStart + 1);", "+\t\timportDeclaration.setName(name);", "+\t\timportDeclaration.setOnDemand(onDemand);", "+\t\tint modifiers = importReference.modifiers;", "+\t\tif (modifiers != IConstants.AccDefault) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\timportDeclaration.setFlags(importDeclaration.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tif (modifiers == IConstants.AccStatic) {", "+\t\t\t\t\t\timportDeclaration.setStatic(true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\timportDeclaration.setFlags(importDeclaration.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(importDeclaration, importReference);", "+\t\t}", "+\t\treturn importDeclaration;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c351c56b7a872f637e7125006ffc64bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "820e796a655cc430ae4ae3cd649830ad2aa11511", "commitAfterChange": "15e62f7752b5ba1cd51b3fafb5a3b0c9d1ba5891", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public static char[][] getThrownExceptionTypes(char[] methodSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getThrownExceptionTypes(char[] methodSignature) throws IllegalArgumentException", "diff": ["-\tint paren = CharOperation.lastIndexOf(C_PARAM_END, methodSignature);", "-\tif (paren == -1) {", "+\tint exceptionStart = CharOperation.indexOf(C_EXCEPTION_START, methodSignature);", "+\tif (exceptionStart == -1) {", "+\t\tint paren = CharOperation.lastIndexOf(C_PARAM_END, methodSignature);", "+\t\tif (paren == -1) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\t// ignore return type", "+\t\texceptionStart = Util.scanTypeSignature(methodSignature, paren+1) + 1;", "+\t\tint length = methodSignature.length;", "+\t\tif (exceptionStart == length) return CharOperation.NO_CHAR_CHAR;", "-\t// ignore return type", "-\tint exceptionStart = Util.scanTypeSignature(methodSignature, paren+1) + 1;", "-\tif (exceptionStart == length) return CharOperation.NO_CHAR_CHAR;", "-\t", "-\tArrayList exceptionList = new ArrayList(1);", "+\tArrayList exceptionList = new ArrayList(1);", "+\t\tif (methodSignature[i] == C_EXCEPTION_START) {", "+\t\t\texceptionStart++;", "+\t\t\ti++;", "+\t\t} else {", "+\t\t\tthrow new IllegalArgumentException();\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd66ce50ec720aa8f1baebd077995963", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "7e47f9acc3454f5babc44432d7650b471f5736c6", "commitAfterChange": "75c0ccb1e2c68587a8e2efbb2a478d71f7d635f3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int InsideJCK = 64;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-jck\")) { //$NON-NLS-1$\r", "+\t\t\tmode = InsideJCK;\r", "+\t\tif (mode == InsideJCK){\r", "+\t\t\tif (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);\r", "+\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);\r", "+\t\t\t} else {\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.jck\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfbbac24c092ff72b5c337ec0fed35d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "bed3ca2531a0bd15601237e5d1a0c8400e43f29e", "commitAfterChange": "cf4403abeadc8dee9dfef541af716a8f200a1ee1", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " protected void validateOptions(boolean didSpecifyCompliance) throws InvalidInputException", "signatureAfterChange": " protected void validateOptions(boolean didSpecifyCompliance) throws InvalidInputException", "diff": ["+\t\t} else if (CompilerOptions.VERSION_CLDC1_1.equals(targetVersion)) {", "+\t\t\tif (this.didSpecifySource && CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_4) {", "+\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.incompatibleSourceForCldcTarget\", (String) targetVersion, (String) sourceVersion)); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (CompilerOptions.versionToJdkLevel(compliance) >= ClassFileConstants.JDK1_5) {", "+\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.incompatibleComplianceForCldcTarget\", (String) targetVersion, (String) sourceVersion)); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da8d36d1732581b6574d53cbc20723a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "80b216af2abfbc335ce04bf55fc463ba47e45873", "commitAfterChange": "8eb843ef75292ca86ade9a64a79ec382d0e5f4fa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic static void getBinding(ASTNode node, List<IBinding> bindings)", "signatureAfterChange": "     protected void getDeclarations(ASTNode node, List<Declaration>decls)", "diff": ["-\tpublic static void getBinding(ASTNode node, List<IBinding> bindings)", "-\t{", "-\t\tif( node == null ) return;", "+    protected void getDeclarations(ASTNode node, List<Declaration>decls)", "+    {", "+    \tif( node == null ) return;", "+\t\t\t\tfinal EclipseDeclarationImpl decl; ", "-\t\t\t\t\tbindings.add(fieldBinding);", "+\t\t\t\t\tdecl = Factory.createDeclaration(fieldBinding, this);", "+\t\t\t\telse{", "+\t\t\t\t\tdecl = Factory.createDeclaration(frag, getFileForNode(frag), this);", "+\t\t\t\t}", "+\t\t\t\tif( decl != null )", "+\t\t\t\t\tdecls.add(decl);", "-        if(binding != null)", "-            bindings.add(binding);", "+\t\tfinal EclipseDeclarationImpl decl; ", "+\t\tif( binding != null )", "+\t\t\tdecl = Factory.createDeclaration(binding, this);", "+\t\telse{", "+\t\t\tdecl = Factory.createDeclaration(node, getFileForNode(node), this);", "+\t\t}", "+\t\tif( decl != null )", "+\t\t\tdecls.add( decl );", "+        ", "-\t}", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4107a6a5872bd7baa17fd35628d34a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/TestVerifier.java", "commitBeforeChange": "f874c6b5077c159b72bb8e4b8aad8ed303fb1894", "commitAfterChange": "71c4acdd0905e065690b5a7def2363cd736fd9d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private boolean checkBuffers(String errorString, String outputString, String sourceFileName, String expectedSuccessOutputString)", "signatureAfterChange": " private boolean checkBuffers(String outputString, String errorString,  \t\tString sourceFileName, String expectedOutputString, String expectedErrorStringStart)", "diff": ["-private boolean checkBuffers(String errorString, String outputString, String sourceFileName, String expectedSuccessOutputString) {", "-", "-\tif (errorString.trim().length() > 0) {", "-\t\tthis.failureReason =", "-\t\t\t\"Unexpected target error running resulting class file for \"", "-\t\t\t\t+ sourceFileName", "-\t\t\t\t+ \":\\n\"", "-\t\t\t\t+ errorString;", "-\t\treturn false;", "+private boolean checkBuffers(String outputString, String errorString, ", "+\t\tString sourceFileName, String expectedOutputString, String expectedErrorStringStart) {", "+\tString platformIndependantString;", "+\tif (expectedOutputString != null) {", "+\t\tplatformIndependantString = Util.convertToIndependantLineDelimiter(outputString.trim());", "+\t\tif (!Util.convertToIndependantLineDelimiter(expectedOutputString).equals(platformIndependantString)) {", "+\t\t\tSystem.out.println(Util.displayString(platformIndependantString, 2));", "+\t\t\tthis.failureReason =", "+\t\t\t\t\"Unexpected output running resulting class file for \"", "+\t\t\t\t\t+ sourceFileName", "+\t\t\t\t\t+ \":\\n\"", "+\t\t\t\t\t+ \"--[START]--\\n\"", "+\t\t\t\t\t+ outputString", "+\t\t\t\t\t+ \"---[END]---\\n\";", "+\t\t\treturn false;", "+\t\t}", "+\t}\t", "+\tif (expectedErrorStringStart != null) {", "+\t\tplatformIndependantString = Util.convertToIndependantLineDelimiter(errorString.trim());", "+\t\tif (expectedErrorStringStart.length() == 0 && platformIndependantString.length() > 0 ||", "+\t\t\t\t!platformIndependantString.startsWith(Util.convertToIndependantLineDelimiter(expectedErrorStringStart))) {", "+\t\t\t/*", "+\t\t\t * This is an opportunistic heuristic for error strings comparison:", "+\t\t\t * - null means skip test;", "+\t\t\t * - empty means exactly empty;", "+\t\t\t * - other means starts with.", "+\t\t\t * If this became insufficient, we could envision using specific", "+\t\t\t * matchers for specific needs.", "+\t\t\t */", "+\t\t\tSystem.out.println(Util.displayString(platformIndependantString, 2));", "+\t\t\tthis.failureReason =", "+\t\t\t\t\"Unexpected error running resulting class file for \"", "+\t\t\t\t\t+ sourceFileName", "+\t\t\t\t\t+ \":\\n\"", "+\t\t\t\t\t+ \"--[START]--\\n\"", "+\t\t\t\t\t+ errorString", "+\t\t\t\t\t+ \"---[END]---\\n\";", "+\t\t\treturn false;", "+\t\t}", "-\tString platformIndependantOutputString = Util.convertToIndependantLineDelimiter(outputString.trim());", "-\tif (expectedSuccessOutputString != null && !Util.convertToIndependantLineDelimiter(expectedSuccessOutputString).equals(platformIndependantOutputString)) {", "-\t\tSystem.out.println(Util.displayString(platformIndependantOutputString, 2));", "-\t\tthis.failureReason =", "-\t\t\t\"Unexpected output running resulting class file for \"", "-\t\t\t\t+ sourceFileName", "-\t\t\t\t+ \":\\n\"", "-\t\t\t\t+ \"--[START]--\\n\"", "-\t\t\t\t+ outputString", "-\t\t\t\t+ \"---[END]---\\n\";", "-\t\treturn false;", "-\t}", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb754c4e5cbcd66b77994d14e4911233", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "signatureAfterChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "diff": ["+\t\t", "+\t\tboolean proposeType = !this.requestor.isIgnored(CompletionProposal.TYPE_REF);", "+\t\t", "-\t\tif (scope.enclosingSourceType() != null) {", "+\t\tif (proposeType && scope.enclosingSourceType() != null) {", "-\t\tif (this.unitScope != null) {", "+\t\tif (proposeType && this.unitScope != null) {", "-\t\tthis.findTypesFromStaticImports(token, scope, typesFound);", "+\t\tif(proposeType) {", "+\t\t\tthis.findTypesFromStaticImports(token, scope, typesFound);", "+\t\t}", "-\t\t\tif(this.expectedTypesPtr > -1) {", "+\t\t\tif(proposeType && this.expectedTypesPtr > -1) {", "-\t\t\tfindKeywords(token, baseTypes);", "-\t\t\tthis.nameEnvironment.findTypes(token, this);", "-\t\t\tthis.nameEnvironment.findPackages(token, this);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\tfindKeywords(token, baseTypes);", "+\t\t\t}", "+\t\t\tif(proposeType) {", "+\t\t\t\tthis.nameEnvironment.findTypes(token, this);", "+\t\t\t}", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {", "+\t\t\t\tthis.nameEnvironment.findPackages(token, this);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb631df73aacccb03e2caa6c61f6192", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTStructuralPropertyTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testCreateInstance()", "signatureAfterChange": " \tpublic void testCreateInstance()", "diff": ["-\t\t\t\t\t} else {", "+\t\t\t\t\t} else if (this.ast.apiLevel() == AST.JLS3) {", "+\t\t\t\t\t} else if (this.ast.apiLevel() == AST.JLS4) {", "+\t\t\t\t\t\tassertTrue((nodeType >= 1) && (nodeType <= 84));", "-\t\t\t\t\t} else {", "+\t\t\t\t\t} else if (this.ast.apiLevel() == AST.JLS3) {", "+\t\t\t\t\t} else if (this.ast.apiLevel() == AST.JLS4) {", "+\t\t\t\t\t\tassertTrue((nodeType < 1) || (nodeType > 84));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f262faafe70a633d989375cf4cdd19bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "4b1cb82b00b0f3c43755c37280deb732ae600c1a", "commitAfterChange": "1caf2b41c370e66c328190589dd64f01b35d7384", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void generateSyntheticEnclosingInstanceValues( \t\tBlockScope currentScope,  \t\tReferenceBinding targetType,  \t\tExpression enclosingInstance,  \t\tASTNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues( \t\tBlockScope currentScope,  \t\tReferenceBinding targetType,  \t\tExpression enclosingInstance,  \t\tASTNode invocationSite)", "diff": ["-\t\tboolean complyTo14 = currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\tlong compliance = currentScope.environment().options.complianceLevel;", "+", "-\t\tboolean ignoreEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression", "-\t\t\t\t\t|| (complyTo14 && ((invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess())));", "-\t\t\t\t\t\t", "+\t\t// always consider it if complying to 1.5", "+\t\tboolean denyEnclosingArgInConstructorCall;", "+\t\tif (compliance <= JDK1_3) {", "+\t\t\tdenyEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression;", "+\t\t} else if (compliance == JDK1_4){", "+\t\t\tdenyEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression", "+\t\t\t\t|| invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess();", "+\t\t} else {", "+\t\t\t//compliance >= JDK1_5", "+\t\t\tdenyEnclosingArgInConstructorCall = (invocationSite instanceof AllocationExpression", "+\t\t\t\t\t|| invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess()) ", "+\t\t\t\t&& !targetType.isLocalType();", "+\t\t}", "+\t\t", "+\t\tboolean complyTo14 = compliance >= ClassFileConstants.JDK1_4;", "-\t\t\t\t\t\tignoreEnclosingArgInConstructorCall);", "+\t\t\t\t\t\tdenyEnclosingArgInConstructorCall);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3d117edcd73b6bfa292f705a75dafa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DefaultBytecodeVisitor.java", "commitBeforeChange": "160613f931d3107092c23ec0bbf5c709e81be6c4", "commitAfterChange": "4b4dbca0bb97a8d7d91d56de2e2d0246704ead9c", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 210, "signatureBeforeChange": "  \tprivate String returnConstantClassName(IConstantPoolEntry constantClass)", "signatureAfterChange": "  \tprivate String returnConstantClassName(IConstantPoolEntry constantClass)", "diff": ["+", "+\t\t} else if ((mode & ClassFileBytesDisassembler.COMPACT) != 0) {", "+\t\t\tint lastIndexOfSlash = CharOperation.lastIndexOf('/', classInfoName);", "+\t\t\tif (lastIndexOfSlash != -1) {", "+\t\t\t\treturn new String(CharOperation.subarray(classInfoName, lastIndexOfSlash + 1, classInfoName.length));", "+\t\t\t}", "+\t\t\treturn new String(classInfoName);"]}], "num": 29547}
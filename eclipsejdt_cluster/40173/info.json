{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf87903c734e1351724db50c092d7e93", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc429eaec87ca6ac0aadb3b40b545c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "6c5ff7a40e06214003233124a78f91b46a0db4e6", "commitAfterChange": "abfab6e38455079c19f7f3fadcf15c77c144ade8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "   \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": "   \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["-", "-\t\t\tint dimensionsLength = dimensions.length;", "-\t\t\ttype.traverse(visitor, scope);", "+\t\t\tint dimensionsLength = this.dimensions.length;", "+\t\t\tthis.type.traverse(visitor, scope);", "-\t\t\t\tif (dimensions[i] != null)", "-\t\t\t\t\tdimensions[i].traverse(visitor, scope);", "+\t\t\t\tif (this.dimensions[i] != null)", "+\t\t\t\t\tthis.dimensions[i].traverse(visitor, scope);", "-\t\t\tif (initializer != null)", "-\t\t\t\tinitializer.traverse(visitor, scope);", "+\t\t\tif (this.initializer != null)", "+\t\t\t\tthis.initializer.traverse(visitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "770992efd360b51ea108fecfd179ca7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "372d175da142eb06ee96f2b4e45c55b51d9b736f", "commitAfterChange": "3fc938efd67d7f1d6ba4971b3e0f4aa8cd107965", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public ExceptionHandlingFlowContext(\r \tFlowContext parent, \r \tAstNode associatedNode, \r \tReferenceBinding[] handledExceptions, \r \tBlockScope scope, \r \tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic ExceptionHandlingFlowContext(\r \t\tFlowContext parent,\r \t\tAstNode associatedNode,\r \t\tReferenceBinding[] handledExceptions,\r \t\tBlockScope scope,\r \t\tUnconditionalFlowInfo flowInfo)", "diff": ["-public ExceptionHandlingFlowContext(\r", "-\tFlowContext parent, \r", "-\tAstNode associatedNode, \r", "-\tReferenceBinding[] handledExceptions, \r", "-\tBlockScope scope, \r", "-\tUnconditionalFlowInfo flowInfo) {\r", "-\tsuper(parent, associatedNode);\r", "-\tisMethodContext = scope == scope.methodScope();\r", "-/*\t\r", "-\t// for a method, append the unchecked exceptions to the handled exceptions collection\r", "+\tpublic ExceptionHandlingFlowContext(\r", "+\t\tFlowContext parent,\r", "+\t\tAstNode associatedNode,\r", "+\t\tReferenceBinding[] handledExceptions,\r", "+\t\tBlockScope scope,\r", "+\t\tUnconditionalFlowInfo flowInfo) {\r", "-\tif (scope.methodScope() == scope) {\r", "-\t\tint length;\r", "-\t\tSystem.arraycopy(\r", "-\t\t\thandledExceptions, \r", "-\t\t\t0, \r", "-\t\t\t(handledExceptions = \r", "-\t\t\t\tnew ReferenceBinding[(length = handledExceptions.length) + 2]), \r", "-\t\t\t0, \r", "-\t\t\tlength); \r", "-\t\thandledExceptions[length] = scope.getJavaLangRuntimeException();\r", "-\t\thandledExceptions[length + 1] = scope.getJavaLangError();\r", "-\t}\r", "-*/\t\r", "-\tthis.handledExceptions = handledExceptions;\r", "-\tint count = handledExceptions.length, cacheSize = (count / BitCacheSize) + 1;\r", "-\tisReached = new int[cacheSize]; // none is reached by default\r", "-\tisNeeded = new int[cacheSize]; // none is needed by default\r", "-\tinitsOnExceptions = new UnconditionalFlowInfo[count];\r", "-\tfor (int i = 0; i < count; i++) {\r", "-\t\tindexes.put(handledExceptions[i], i); // key type  -> value index\r", "-\t\tboolean isUnchecked = \r", "-\t\t\t(scope.compareUncheckedException(handledExceptions[i]) != NotRelated); \r", "-\t\tint cacheIndex = i / BitCacheSize, bitMask = 1 << (i % BitCacheSize);\r", "-\t\tif (isUnchecked) {\r", "-\t\t\tisReached[cacheIndex] |= bitMask;\r", "-\t\t\tinitsOnExceptions[i] = flowInfo.copy().unconditionalInits();\r", "-\t\t} else {\r", "-\t\t\tinitsOnExceptions[i] = FlowInfo.DeadEnd;\r", "-\t\t}\r", "-\t}\r", "-\tSystem.arraycopy(isReached, 0, isNeeded, 0, cacheSize);\r", "-}\r", "+\t\tsuper(parent, associatedNode);\r", "+\t\tisMethodContext = scope == scope.methodScope();\r", "+\t\tthis.handledExceptions = handledExceptions;\r", "+\t\tint count = handledExceptions.length, cacheSize = (count / BitCacheSize) + 1;\r", "+\t\tthis.isReached = new int[cacheSize]; // none is reached by default\r", "+\t\tthis.isNeeded = new int[cacheSize]; // none is needed by default\r", "+\t\tthis.initsOnExceptions = new UnconditionalFlowInfo[count];\r", "+\t\tfor (int i = 0; i < count; i++) {\r", "+\t\t\tthis.indexes.put(handledExceptions[i], i); // key type  -> value index\r", "+\t\t\tboolean isUnchecked =\r", "+\t\t\t\t(scope.compareUncheckedException(handledExceptions[i]) != NotRelated);\r", "+\t\t\tint cacheIndex = i / BitCacheSize, bitMask = 1 << (i % BitCacheSize);\r", "+\t\t\tif (isUnchecked) {\r", "+\t\t\t\tisReached[cacheIndex] |= bitMask;\r", "+\t\t\t\tthis.initsOnExceptions[i] = flowInfo.copy().unconditionalInits();\r", "+\t\t\t\tthis.initsOnExceptions[i] = FlowInfo.DeadEnd;\r", "+\t\tSystem.arraycopy(this.isReached, 0, this.isNeeded, 0, cacheSize);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3073815aec7e2fe0a65b5da654c7012", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method)", "signatureAfterChange": "  public void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method)", "diff": ["-\tpublic void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method) {", "-\t\tMethodScope scope = method.scope;", "-\t\t// can optionally skip overriding methods", "-\t\tif ((method.binding.modifiers & (ExtraCompilerModifiers.AccOverriding | ExtraCompilerModifiers.AccImplementing)) != 0", "-\t\t        && !scope.compilerOptions().reportUnusedDeclaredThrownExceptionWhenOverriding) {", "-\t\t    return;", "-\t\t}", "-\t\t    ", "-\t\t// report errors for unreachable exception handlers", "-\t\tfor (int i = 0, count = handledExceptions.length; i < count; i++) {", "-\t\t\tint index = indexes.get(handledExceptions[i]);", "-\t\t\tint cacheIndex = index / BitCacheSize;", "-\t\t\tint bitMask = 1 << (index % BitCacheSize);", "-\t\t\tif ((isReached[cacheIndex] & bitMask) == 0) {", "-\t\t\t\tscope.problemReporter().unusedDeclaredThrownException(", "-\t\t\t\t\thandledExceptions[index],", "-\t\t\t\t\tmethod,", "-\t\t\t\t\tmethod.thrownExceptions[index]);", "-\t\t\t}", "+public void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method) {", "+\tMethodScope scope = method.scope;", "+\t// can optionally skip overriding methods", "+\tif ((method.binding.modifiers & (ExtraCompilerModifiers.AccOverriding | ExtraCompilerModifiers.AccImplementing)) != 0", "+\t        && !scope.compilerOptions().reportUnusedDeclaredThrownExceptionWhenOverriding) {", "+\t    return;", "+\t}", "+\t    ", "+\t// report errors for unreachable exception handlers", "+\tfor (int i = 0, count = this.handledExceptions.length; i < count; i++) {", "+\t\tint index = this.indexes.get(this.handledExceptions[i]);", "+\t\tint cacheIndex = index / ExceptionHandlingFlowContext.BitCacheSize;", "+\t\tint bitMask = 1 << (index % ExceptionHandlingFlowContext.BitCacheSize);", "+\t\tif ((this.isReached[cacheIndex] & bitMask) == 0) {", "+\t\t\tscope.problemReporter().unusedDeclaredThrownException(", "+\t\t\t\tthis.handledExceptions[index],", "+\t\t\t\tmethod,", "+\t\t\t\tmethod.thrownExceptions[index]);", "+}"]}], "num": 40173}
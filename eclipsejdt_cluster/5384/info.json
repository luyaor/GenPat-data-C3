{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f59bca2a71de11d847283fa9910db8c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03cfd8948dca469c32ae18e02bcf0020", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "1995deba8c96efdefeb6a6078c7e55c511780c0c", "commitAfterChange": "c0961b9d73157eff51e68a5c49ea401574d94c27", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " void recordTypeReferences(TypeBinding[] types)", "signatureAfterChange": " void recordTypeReferences(TypeBinding[] types)", "diff": ["-\tif (qualifiedReferences == null) return; // not recording dependencies", "+\tif (referencedTypes == null) return; // not recording dependencies", "-\t\tif (actualType != null)", "-\t\t\trecordQualifiedReference(actualType.isMemberType()", "-\t\t\t\t? CharOperation.splitOn('.', actualType.readableName())", "-\t\t\t\t: actualType.compoundName);", "+\t\tif (actualType != null && !referencedTypes.containsIdentical(actualType))", "+\t\t\treferencedTypes.add(actualType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65ccd44465afb2f408a6f2c6b367b6b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "ac7757b9f18b80af245a139edbb9e9ec0399cc95", "commitAfterChange": "f8334cc2f4707a38bb8c442d2aa0203f2137a4bf", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["-\t\t\tboolean isProjectRelative = entryPath.segment(0).toString().equals(projectName);", "+\t\t\tboolean isProjectRelative = projectName.equals(entryPath.segment(0));", "-\t\t\tboolean isProjectRelative = entryPath.segment(0).toString().equals(projectName);", "+\t\t\tboolean isProjectRelative = projectName.equals(entryPath.segment(0));", "-\t\t\t\t\tboolean opStartsWithProject = otherEntry.getPath().segment(0).toString().equals(projectName);", "+\t\t\t\t\tboolean opStartsWithProject = projectName.equals(otherEntry.getPath().segment(0));"]}], "num": 5384}
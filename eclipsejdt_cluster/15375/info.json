{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb9a0f154984b529bc5e3ce4b7e0fd95", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32cb6fa7686aea08591540554cbf093c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b4f87915b858b8e38e418046984ece5dc8db6148", "commitAfterChange": "4b0e968ea18c9b6d539f97894bc6451b0df31a4f", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tif (rootInfo != null) { // if inside a package fragment root", "-\t\t\t\t\t\t\t\tif (!isValidParent) continue; ", "-\t\t\t\t\t\t\t\tif (parent == null) {", "-\t\t\t\t\t\t\t\t\t// find the parent of the non-java resource to attach to", "-\t\t\t\t\t\t\t\t\tif (this.currentElement == null ", "-\t\t\t\t\t\t\t\t\t\t\t|| !this.currentElement.getJavaProject().equals(rootInfo.project)) {", "-\t\t\t\t\t\t\t\t\t\t// force the currentProject to be used", "-\t\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT", "-\t\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT ", "-\t\t\t\t\t\t\t\t\t\t\t&& res instanceof IProject)) { ", "-\t\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)", "-\t\t\t\t\t\t\t\t\t\tparent = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, rootInfo);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (parent == null) {", "-\t\t\t\t\t\t\t\t\t\tisValidParent = false;", "-\t\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (rootInfo != null) { // if inside a package fragment root", "+\t\t\t\t\t\t\tif (!isValidParent) continue; ", "+\t\t\t\t\t\t\tif (parent == null) {", "+\t\t\t\t\t\t\t\t// find the parent of the non-java resource to attach to", "+\t\t\t\t\t\t\t\tif (this.currentElement == null ", "+\t\t\t\t\t\t\t\t\t\t|| !this.currentElement.getJavaProject().equals(rootInfo.project)) {", "+\t\t\t\t\t\t\t\t\t// force the currentProject to be used", "+\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t// add child as non java resource", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// the non-java resource (or its parent folder) will be attached to the java project", "-\t\t\t\t\t\t\t\tif (orphanChildren == null) orphanChildren = new IResourceDelta[length];", "-\t\t\t\t\t\t\t\torphanChildren[i] = child;", "+\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT", "+\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT ", "+\t\t\t\t\t\t\t\t\t\t&& res instanceof IProject)) { ", "+\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)", "+\t\t\t\t\t\t\t\t\tparent = (Openable)rootInfo.project;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, rootInfo);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (parent == null) {", "+\t\t\t\t\t\t\t\t\tisValidParent = false;", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// add child as non java resource", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t// ignore", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// the non-java resource (or its parent folder) will be attached to the java project", "+\t\t\t\t\t\t\tif (orphanChildren == null) orphanChildren = new IResourceDelta[length];", "+\t\t\t\t\t\t\torphanChildren[i] = child;", "+\t\t\t\t\t\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b0d823905eb825b0ab5d1237e4e0221", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testDeleteSyntaxErrorInMethod2() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorInMethod2() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"  public void foo() \\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public void foo() \\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebadfddb15fba127f862fd919dcbc5c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void testDeleteSyntaxErrorInMethod1() throws CoreException", "signatureAfterChange": " public void testDeleteSyntaxErrorInMethod1() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"  public void foo() {\\n\" +", "-\t\t\"    String s = ;\\n\" +", "-\t\t\"    System.out.println(s);\\n\" +", "-\t\t\"  }\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public void foo() {\\n\" +", "+\t\t\t\"    String s = ;\\n\" +", "+\t\t\t\"    System.out.println(s);\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIMethod method = cu.getType(\"X\").getMethod(\"foo\", new String[] {});", "+"]}], "num": 15375}
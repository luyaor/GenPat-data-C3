{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "061d801ae4dbc771f1d1ee167b5faeeb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a4d1bbbc44787a2d455416f265a8e25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate void checkAndAddMultipleLocalDeclaration(org.eclipse.jdt.internal.compiler.ast.Statement[] stmts, int index, List blockStatements)", "signatureAfterChange": " \t \tprivate void checkAndAddMultipleLocalDeclaration(org.eclipse.jdt.internal.compiler.ast.Statement[] stmts, int index, List blockStatements)", "diff": ["-\t\t    && stmts[index - 1] instanceof LocalDeclaration) {", "-\t\t    \tLocalDeclaration local1 = (LocalDeclaration) stmts[index - 1];", "-\t\t    \tLocalDeclaration local2 = (LocalDeclaration) stmts[index];", "+\t\t    && stmts[index - 1] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "+\t\t    \torg.eclipse.jdt.internal.compiler.ast.LocalDeclaration local1 = (org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) stmts[index - 1];", "+\t\t    \torg.eclipse.jdt.internal.compiler.ast.LocalDeclaration local2 = (org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) stmts[index];", "-\t\t\t\t\tvariableDeclarationStatement.fragments().add(convertToVariableDeclarationFragment((LocalDeclaration)stmts[index]));", "+\t\t\t\t\tvariableDeclarationStatement.fragments().add(convertToVariableDeclarationFragment((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)stmts[index]));", "-\t\t\t\t\tblockStatements.add(convertToVariableDeclarationStatement((LocalDeclaration)stmts[index]));", "+\t\t\t\t\tblockStatements.add(convertToVariableDeclarationStatement((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)stmts[index]));", "-\t\t\tblockStatements.add(convertToVariableDeclarationStatement((LocalDeclaration)stmts[index]));", "+\t\t\tblockStatements.add(convertToVariableDeclarationStatement((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)stmts[index]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "365e8e449f399820860f75e3ee234784", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "07b82c9368bd10ac7ebb1046caebd6da084b537f", "commitAfterChange": "cb61394506c50bdecec5c108eded9cebfe12f3fe", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "signatureAfterChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "diff": ["-\t\t\tint initializationsLength = initializations.length;", "-\t\t\tfor (int i = 0; i < initializationsLength; i++) {", "-\t\t\t\tforStatement.initializers().add(convertToExpression(initializations[i]));", "+\t\t\t// we know that we have at least one initialization", "+\t\t\tif (initializations[0] instanceof LocalDeclaration) {", "+\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression((LocalDeclaration) initializations[0]);", "+\t\t\t\tint initializationsLength = initializations.length;", "+\t\t\t\tfor (int i = 1; i < initializationsLength; i++) {", "+\t\t\t\t\tvariableDeclarationExpression.fragments().add(convertToVariableDeclarationFragment((LocalDeclaration)initializations[i]));", "+\t\t\t\t}", "+\t\t\t\tforStatement.initializers().add(variableDeclarationExpression);", "+\t\t\t} else {", "+\t\t\t\tint initializationsLength = initializations.length;", "+\t\t\t\tfor (int i = 0; i < initializationsLength; i++) {", "+\t\t\t\t\tforStatement.initializers().add(convertToExpression(initializations[i]));", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc4f419819b46b9696665cea3432170a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 67, "signatureBeforeChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "signatureAfterChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "diff": ["-\t\t\tif (initializations[0] instanceof LocalDeclaration) {", "-\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression((LocalDeclaration) initializations[0]);", "+\t\t\tif (initializations[0] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "+\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) initializations[0]);", "-\t\t\t\t\tvariableDeclarationExpression.fragments().add(convertToVariableDeclarationFragment((LocalDeclaration)initializations[i]));", "+\t\t\t\t\tvariableDeclarationExpression.fragments().add(convertToVariableDeclarationFragment((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)initializations[i]));", "-\t\t\t\t\tint end = ((LocalDeclaration) initializations[initializationsLength - 1]).declarationSourceEnd;", "+\t\t\t\t\tint end = ((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) initializations[initializationsLength - 1]).declarationSourceEnd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c53635fc8514838690e6a890a00ba32d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "c844b42e53f5e6c13f3c402081599074b3dd58c2", "commitAfterChange": "74e823c12b58763cc4b232a0075777330c8412ac", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "signatureAfterChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "diff": ["-\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) initializations[0]);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.LocalDeclaration initialization = (org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) initializations[0];", "+\t\t\t\tif (initialization.name == RecoveryScanner.FAKE_IDENTIFIER) { // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=199668) ", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression(initialization);", "-\t\t\t\t\tvariableDeclarationExpression.fragments().add(convertToVariableDeclarationFragment((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)initializations[i]));", "+\t\t\t\t\tinitialization = (org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)initializations[i];", "+\t\t\t\t\tif (initialization.name != RecoveryScanner.FAKE_IDENTIFIER) { // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=199668) ", "+\t\t\t\t\t\tvariableDeclarationExpression.fragments().add(convertToVariableDeclarationFragment(initialization));", "+\t\t\t\t\t}"]}], "num": 48912}
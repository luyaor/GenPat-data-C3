{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1370ff9f2c989ac5b8547cec274c1e7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "056a394d94d6c196271e00d227a6fff1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingStatementsTest.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tpublic void testBug400568_since_8() throws Exception", "signatureAfterChange": " \tpublic void testBug400568_since_8() throws Exception", "diff": ["-\t\t\tlistRewrite.insertAt(dim, 0, null);", "+\t\t\tlistRewrite.insertFirst(dim, null);", "-\t\t\tArrayType newArrayType = ast.newArrayType((ArrayType) ASTNode.copySubtree(ast, creationType));", "-\t\t\tnewArrayType = ast.newArrayType(newArrayType);", "-\t\t\trewrite.set(creation, ArrayCreation.TYPE_PROPERTY, newArrayType, null);", "-", "-\t\t\tlistRewrite= rewrite.getListRewrite(newArrayType, ArrayType.ANNOTATIONS_PROPERTY);", "+\t\t\tArrayType newArrayType = (ArrayType) ASTNode.copySubtree(ast, creationType);", "+\t\t\tnewArrayType.dimensions().add(ast.newExtraDimension());", "+\t\t\t", "+\t\t\tExtraDimension dim0 = ast.newExtraDimension();", "-\t\t\tlistRewrite.insertAt(markerAnnotation, 0, null);", "-\t\t\tnewArrayType.annotations().add(markerAnnotation);", "+\t\t\tdim0.annotations().add(markerAnnotation);", "-\t\t\tlistRewrite.insertAt(markerAnnotation, 1, null);", "+\t\t\tdim0.annotations().add(markerAnnotation);", "-\t\t\tlistRewrite.insertAt(markerAnnotation, 2, null);", "+\t\t\tdim0.annotations().add(markerAnnotation);", "+\t\t\tnewArrayType.dimensions().add(dim0);", "+\t\t\trewrite.set(creation, ArrayCreation.TYPE_PROPERTY, newArrayType, null);", "+", "-\t\t\tlistRewrite = rewrite.getListRewrite(creationType, ArrayType.ANNOTATIONS_PROPERTY);", "-\t\t\tMarkerAnnotation annotation = (MarkerAnnotation) creationType.annotations().get(0);", "+\t\t\tExtraDimension dim = creationType.getDimensionAt(2);", "+\t\t\tlistRewrite = rewrite.getListRewrite(dim, ExtraDimension.ANNOTATIONS_PROPERTY);", "+\t\t\tMarkerAnnotation annotation = (MarkerAnnotation) dim.annotations().get(0);", "-\t\t\tcreationType = (ArrayType) creationType.getComponentType();", "-\t\t\tlistRewrite = rewrite.getListRewrite(creationType, ArrayType.ANNOTATIONS_PROPERTY);", "-\t\t\tannotation = (MarkerAnnotation) creationType.annotations().get(1);", "+\t\t\tdim = creationType.getDimensionAt(1);", "+\t\t\tlistRewrite = rewrite.getListRewrite(dim, ExtraDimension.ANNOTATIONS_PROPERTY);", "+\t\t\tannotation = (MarkerAnnotation) dim.annotations().get(1);", "-\t\t\tcreationType = (ArrayType) creationType.getComponentType();", "-\t\t\tlistRewrite = rewrite.getListRewrite(creationType, ArrayType.ANNOTATIONS_PROPERTY);", "-\t\t\tannotation = (MarkerAnnotation) creationType.annotations().get(1);", "+\t\t\tdim = creationType.getDimensionAt(0);", "+\t\t\tlistRewrite = rewrite.getListRewrite(dim, ExtraDimension.ANNOTATIONS_PROPERTY);", "+\t\t\tannotation = (MarkerAnnotation) dim.annotations().get(1);", "-", "-\t\t\tlistRewrite = rewrite.getListRewrite(creationType, ArrayType.ANNOTATIONS_PROPERTY);", "-\t\t\tannotation = (MarkerAnnotation) creationType.annotations().get(0);", "+\t\t\tdim = creationType.getDimensionAt(2);", "+\t\t\tlistRewrite = rewrite.getListRewrite(dim, ExtraDimension.ANNOTATIONS_PROPERTY);", "+\t\t\tannotation = (MarkerAnnotation) dim.annotations().get(1);", "-\t\t\tannotation = (MarkerAnnotation) creationType.annotations().get(1);", "+\t\t\tannotation = (MarkerAnnotation) dim.annotations().get(0);", "-\t\t\tcreationType = (ArrayType) creationType.getComponentType();", "-\t\t\tlistRewrite = rewrite.getListRewrite(creationType, ArrayType.ANNOTATIONS_PROPERTY);", "-\t\t\tannotation = (MarkerAnnotation) creationType.annotations().get(0);", "+\t\t\tdim = creationType.getDimensionAt(1);", "+\t\t\tlistRewrite = rewrite.getListRewrite(dim, ExtraDimension.ANNOTATIONS_PROPERTY);", "+\t\t\tannotation = (MarkerAnnotation) dim.annotations().get(1);", "-\t\t\tannotation = (MarkerAnnotation) creationType.annotations().get(1);", "+\t\t\tannotation = (MarkerAnnotation) dim.annotations().get(0);", "-\t\t\tcreationType = (ArrayType) creationType.getComponentType();", "-\t\t\tlistRewrite = rewrite.getListRewrite(creationType, ArrayType.ANNOTATIONS_PROPERTY);", "-\t\t\tannotation = (MarkerAnnotation) creationType.annotations().get(0);", "+\t\t\tdim = creationType.getDimensionAt(0);", "+\t\t\tlistRewrite = rewrite.getListRewrite(dim, ExtraDimension.ANNOTATIONS_PROPERTY);", "+\t\t\tannotation = (MarkerAnnotation) dim.annotations().get(1);", "-\t\t\tannotation = (MarkerAnnotation) creationType.annotations().get(1);", "+\t\t\tannotation = (MarkerAnnotation) dim.annotations().get(0);", "-\t\tbuf.append(\"    \tint [] i [] @Annot1 @Annot2 [] @Annot1 @Annot3 [] = new int @Annot1 @Annot2  [2] @Annot2 @Annot3 [size()] @Annot2 @Annot1 [][] @Annot3 @Annot2 @Annot1[];\\n\");", "-\t\tbuf.append(\"    \tint [] j [][] = new int @Annot1 [2] @Annot2 [] @Annot3 [], k [][] = new int[2][10][size()];\\n\");", "+\t\tbuf.append(\"    \tint [] i [] @Annot1 @Annot2 [] @Annot1 @Annot3 [] = new int @Annot1 @Annot2  [2] @Annot2 @Annot3 [size()] @Annot2 @Annot1 [][]@Annot3 @Annot2 @Annot1 [];\\n\");", "+\t\tbuf.append(\"    \tint [] j [][] = new int @Annot2 [2] @Annot2 [] @Annot1 [], k [][] = new int [2] [10] [size()];\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95a31d139355f9f74f9253379522558f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java", "commitBeforeChange": "a875873381b5c93516e927c7a0f03c3097fc26b5", "commitAfterChange": "05ecd79653c57bf231b3199c70ed57222451b62a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void testEnumConstantDeclaration2() throws Exception", "signatureAfterChange": "  \tpublic void testEnumConstantDeclaration2() throws Exception", "diff": ["-\t\tif (BUG_76181) {", "+\t\tif (BUG_79752) {", "-\t\tbuf.append(\"    E4Add(1) {\\n\");", "-\t\tbuf.append(\"    },\\n\");\t", "+\t\tbuf.append(\"    E4Add(1),\\n\");\t", "-\t\tbuf.append(\"        public void foo2() {\\n\");", "-\t\tbuf.append(\"        }\\n\");", "-\t\t", "-\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(enumConst, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\tassertNull(enumConst.getAnonymousClassDeclaration());", "+\t\t\t", "+\t\t\tAnonymousClassDeclaration classDecl= ast.newAnonymousClassDeclaration();", "+\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(classDecl, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t", "+\t\t\trewrite.set(enumConst, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY, classDecl, null);", "-\t\t", "+\t\t\tassertNull(enumConst.getAnonymousClassDeclaration());", "+\t\t\t", "-\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(enumConst, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\tAnonymousClassDeclaration classDecl= ast.newAnonymousClassDeclaration();", "+\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(classDecl, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t", "+\t\t\trewrite.set(enumConst, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY, classDecl, null);", "+", "+\t\t\tassertNull(enumConst.getAnonymousClassDeclaration());", "-\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(enumConst, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\tAnonymousClassDeclaration classDecl= ast.newAnonymousClassDeclaration();", "+\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(classDecl, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t", "+\t\t\trewrite.set(enumConst, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY, classDecl, null);", "+\t\t\tassertNull(enumConst.getAnonymousClassDeclaration());", "-\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(enumConst, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "-\t\t\tbodyRewrite.insertFirst(createNewMethod(ast, \"test\", false), null);", "+\t\t\tAnonymousClassDeclaration classDecl= ast.newAnonymousClassDeclaration();", "+\t\t\trewrite.set(enumConst, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY, classDecl, null);", "-\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(enumConst, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\tAnonymousClassDeclaration classDecl= enumConst.getAnonymousClassDeclaration();", "+\t\t\tassertNotNull(classDecl);", "+\t\t\t", "+\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(classDecl, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t", "+\t\t\tAnonymousClassDeclaration classDecl= enumConst.getAnonymousClassDeclaration();", "+\t\t\tassertNotNull(classDecl);", "-\t\t\trewrite.remove((ASTNode) enumConst.bodyDeclarations().get(0), null);", "+\t\t\trewrite.remove(classDecl, null);", "+\t\t\tAnonymousClassDeclaration classDecl= enumConst.getAnonymousClassDeclaration();", "+\t\t\tassertNotNull(classDecl);", "+\t\t\t", "-\t\t\trewrite.remove((ASTNode) enumConst.bodyDeclarations().get(0), null);", "+\t\t\trewrite.remove(classDecl, null);", "+\t\t\t", "+\t\t\tAnonymousClassDeclaration classDecl= enumConst.getAnonymousClassDeclaration();", "+\t\t\tassertNotNull(classDecl);", "-\t\t\trewrite.remove((ASTNode) enumConst.bodyDeclarations().get(0), null);", "+\t\t\trewrite.remove(classDecl, null);", "-\t\t\trewrite.remove((ASTNode) enumConst.bodyDeclarations().get(1), null);", "+\t\t\tAnonymousClassDeclaration classDecl= enumConst.getAnonymousClassDeclaration();", "+\t\t\tassertNotNull(classDecl);", "+\t\t\t", "+\t\t\trewrite.remove((ASTNode) classDecl.bodyDeclarations().get(0), null);", "-\t\tbuf.append(\"        private void test(String str) {\\n\");", "-\t\tbuf.append(\"        }\\n\");", "-\t\tbuf.append(\"        public void foo() {\\n\");", "-\t\tbuf.append(\"        }\\n\");"]}], "num": 53035}
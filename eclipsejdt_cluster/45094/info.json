{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79a18bf1adfbb7df12daaea2d3bb8ec3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "423c58b6950a9b463c083ad3765c78f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "0364a4a83fd36a50e2f640c1ff760bbc5a6d0c8e", "commitAfterChange": "d03a3f510c4024243302c43ee912819616ee9cc6", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test012_compiler_problems_tuning()", "signatureAfterChange": " public void test012_compiler_problems_tuning()", "diff": ["-\t\texpectedProblemAttributes.put(\"ObjectHasNoSuperclass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UndefinedType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NotVisibleType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AbstractMethodCannotBeOverridden\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AbstractMethodInAbstractClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AbstractMethodInEnum\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AbstractMethodMustBeImplemented\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AbstractMethodMustBeImplementedOverConcreteMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AbstractMethodsInConcreteClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AmbiguousConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AmbiguousConstructorInDefaultConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AmbiguousConstructorInImplicitConstructorCall\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AmbiguousField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AmbiguousMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UsingDeprecatedType\", new ProblemAttributes(JavaCore.COMPILER_PB_DEPRECATION));", "-\t\texpectedProblemAttributes.put(\"InternalTypeNameProvided\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnusedPrivateType\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IncompatibleTypesInEqualityOperator\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IncompatibleTypesInConditionalOperator\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TypeMismatch\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IndirectAccessToStaticType\", new ProblemAttributes(JavaCore.COMPILER_PB_INDIRECT_STATIC_ACCESS));", "-\t\texpectedProblemAttributes.put(\"MissingEnclosingInstanceForConstructorCall\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MissingEnclosingInstance\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IncorrectEnclosingInstanceReference\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalEnclosingInstanceSpecification\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotDefineStaticInitializerInLocalType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"OuterLocalMustBeFinal\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotDefineInterfaceInLocalType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalPrimitiveOrArrayTypeForEnclosingInstance\", SKIP);", "-\t\texpectedProblemAttributes.put(\"EnclosingInstanceInConstructorCall\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationCannotOverrideMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationCircularity\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationCircularitySelfReference\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationFieldNeedConstantInitialization\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationMembersCannotHaveParameters\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationMembersCannotHaveTypeParameters\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveSuperclass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveSuperinterfaces\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationTypeUsedAsSuperInterface\", new ProblemAttributes(JavaCore.COMPILER_PB_ANNOTATION_SUPER_INTERFACE));", "+\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeAnEnumConstant\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeAnnotation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeArrayInitializer\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeClassLiteral\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeConstant\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotDefineAnnotationInLocalType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotDefineEnumInLocalType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NonStaticContextForEnumMemberType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TypeHidingType\", new ProblemAttributes(JavaCore.COMPILER_PB_TYPE_PARAMETER_HIDING));", "-\t\texpectedProblemAttributes.put(\"UndefinedName\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UninitializedLocalVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"VariableTypeCannotBeVoid\", SKIP);", "-\t\texpectedProblemAttributes.put(\"VariableTypeCannotBeVoidArray\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotAllocateVoidArray\", SKIP);", "-\t\texpectedProblemAttributes.put(\"RedefinedLocal\", SKIP);", "-\t\texpectedProblemAttributes.put(\"RedefinedArgument\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateFinalLocalInitialization\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NonBlankFinalLocalAssignment\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParameterAssignment\", new ProblemAttributes(JavaCore.COMPILER_PB_PARAMETER_ASSIGNMENT));", "-\t\texpectedProblemAttributes.put(\"FinalOuterLocalAssignment\", SKIP);", "-\t\texpectedProblemAttributes.put(\"LocalVariableIsNeverUsed\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_LOCAL));", "+\t\texpectedProblemAttributes.put(\"ArgumentHidingField\", new ProblemAttributes(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING));", "+\t\texpectedProblemAttributes.put(\"ArgumentHidingLocalVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING));", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeAmbiguous\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeCannotBeVoid\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeCannotBeVoidArray\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeInheritedNameHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeInternalNameProvided\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeNotFound\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeNotVisible\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ArrayConstantsOnlyInArrayInitializers\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ArrayReferenceRequired\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AssignmentHasNoEffect\", new ProblemAttributes(JavaCore.COMPILER_PB_NO_EFFECT_ASSIGNMENT));", "+\t\texpectedProblemAttributes.put(\"BodyForAbstractMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"BodyForNativeMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"BoundCannotBeArray\", SKIP);", "+\t\texpectedProblemAttributes.put(\"BoundHasConflictingArguments\", SKIP);", "+\t\texpectedProblemAttributes.put(\"BoundMustBeAnInterface\", SKIP);", "+\t\texpectedProblemAttributes.put(\"BoxingConversion\", new ProblemAttributes(JavaCore.COMPILER_PB_AUTOBOXING));", "-\t\texpectedProblemAttributes.put(\"TooManyArgumentSlots\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TooManyLocalVariableSlots\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TooManySyntheticArgumentSlots\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TooManyArrayDimensions\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UndefinedField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NotVisibleField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AmbiguousField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UsingDeprecatedField\", new ProblemAttributes(JavaCore.COMPILER_PB_DEPRECATION));", "-\t\texpectedProblemAttributes.put(\"NonStaticFieldFromStaticInvocation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ReferenceToForwardField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NonStaticAccessToStaticField\", new ProblemAttributes(JavaCore.COMPILER_PB_STATIC_ACCESS_RECEIVER));", "-\t\texpectedProblemAttributes.put(\"UnusedPrivateField\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IndirectAccessToStaticField\", new ProblemAttributes(JavaCore.COMPILER_PB_INDIRECT_STATIC_ACCESS));", "-\t\texpectedProblemAttributes.put(\"UnqualifiedFieldAccess\", new ProblemAttributes(JavaCore.COMPILER_PB_UNQUALIFIED_FIELD_ACCESS));", "-\t\texpectedProblemAttributes.put(\"FinalFieldAssignment\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UninitializedBlankFinalField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateBlankFinalFieldInitialization\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnresolvedVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"LocalVariableHidingLocalVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING));", "-\t\texpectedProblemAttributes.put(\"LocalVariableHidingField\", new ProblemAttributes(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING));", "-\t\texpectedProblemAttributes.put(\"FieldHidingLocalVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_FIELD_HIDING));", "-\t\texpectedProblemAttributes.put(\"FieldHidingField\", new ProblemAttributes(JavaCore.COMPILER_PB_FIELD_HIDING));", "-\t\texpectedProblemAttributes.put(\"ArgumentHidingLocalVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING));", "-\t\texpectedProblemAttributes.put(\"ArgumentHidingField\", new ProblemAttributes(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING));", "-\t\texpectedProblemAttributes.put(\"MissingSerialVersion\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_SERIAL_VERSION));", "-\t\texpectedProblemAttributes.put(\"UndefinedMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NotVisibleMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AmbiguousMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UsingDeprecatedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_DEPRECATION));", "+\t\texpectedProblemAttributes.put(\"CannotAllocateVoidArray\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotDeclareEnumSpecialMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotDefineAnnotationInLocalType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotDefineDimensionExpressionsWithInit\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotDefineEnumInLocalType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotDefineInterfaceInLocalType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotDefineStaticInitializerInLocalType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotExtendEnum\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotHideAnInstanceMethodWithAStaticMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotImportPackage\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotInvokeSuperConstructorInEnum\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotOverrideAStaticMethodWithAnInstanceMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotReadSource\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotReturnInInitializer\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotThrowNull\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotThrowType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotUseSuperInCodeSnippet\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ClassExtendFinalClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CodeCannotBeReached\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CodeSnippetMissingClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CodeSnippetMissingMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ComparingIdentical\", new ProblemAttributes(JavaCore.COMPILER_PB_COMPARING_IDENTICAL));", "+\t\texpectedProblemAttributes.put(\"ConflictingImport\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ConstructorVarargsArgumentNeedCast\", new ProblemAttributes(JavaCore.COMPILER_PB_VARARGS_ARGUMENT_NEED_CAST));", "+\t\texpectedProblemAttributes.put(\"CorruptedSignature\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DeadCode\", new ProblemAttributes(JavaCore.COMPILER_PB_DEAD_CODE));", "-\t\texpectedProblemAttributes.put(\"VoidMethodReturnsValue\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MethodReturnsVoid\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MethodRequiresBody\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ShouldReturnValue\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MethodButWithConstructorName\", new ProblemAttributes(JavaCore.COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME));", "-\t\texpectedProblemAttributes.put(\"MissingReturnType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"BodyForNativeMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"BodyForAbstractMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NoMessageSendOnBaseType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParameterMismatch\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NoMessageSendOnArrayType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NonStaticAccessToStaticMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_STATIC_ACCESS_RECEIVER));", "-\t\texpectedProblemAttributes.put(\"UnusedPrivateMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER));", "+\t\texpectedProblemAttributes.put(\"DisallowedTargetForAnnotation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DiscouragedReference\", new ProblemAttributes(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE));", "+\t\texpectedProblemAttributes.put(\"DuplicateAnnotation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateAnnotationMember\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateBlankFinalFieldInitialization\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateBounds\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateCase\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateDefaultCase\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateFinalLocalInitialization\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateImport\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateLabel\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateMethodErasure\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateModifierForArgument\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateModifierForField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateModifierForMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateModifierForType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateModifierForVariable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateNestedType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateParameterizedMethods\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateSuperInterface\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateTargetInTargetAnnotation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateTypes\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateTypeVariable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"EmptyControlFlowStatement\", new ProblemAttributes(JavaCore.COMPILER_PB_EMPTY_STATEMENT));", "+\t\texpectedProblemAttributes.put(\"EnclosingInstanceInConstructorCall\", SKIP);", "+\t\texpectedProblemAttributes.put(\"EndOfSource\", SKIP);", "+\t\texpectedProblemAttributes.put(\"EnumAbstractMethodMustBeImplemented\", SKIP);", "+\t\texpectedProblemAttributes.put(\"EnumConstantCannotDefineAbstractMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"EnumConstantMustImplementAbstractMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"EnumConstantsCannotBeSurroundedByParenthesis\", SKIP);", "+\t\texpectedProblemAttributes.put(\"EnumStaticFieldInInInitializerContext\", SKIP);", "+\t\texpectedProblemAttributes.put(\"EnumSwitchCannotTargetField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ExceptionTypeAmbiguous\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ExceptionTypeInheritedNameHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ExceptionTypeInternalNameProvided\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ExceptionTypeNotFound\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ExceptionTypeNotVisible\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ExpressionShouldBeAVariable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ExternalProblemFixable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ExternalProblemNotFixable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"FallthroughCase\", new ProblemAttributes(JavaCore.COMPILER_PB_FALLTHROUGH_CASE));", "+\t\texpectedProblemAttributes.put(\"FieldHidingField\", new ProblemAttributes(JavaCore.COMPILER_PB_FIELD_HIDING));", "+\t\texpectedProblemAttributes.put(\"FieldHidingLocalVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_FIELD_HIDING));", "+\t\texpectedProblemAttributes.put(\"FieldMissingDeprecatedAnnotation\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_DEPRECATED_ANNOTATION));", "+\t\texpectedProblemAttributes.put(\"FieldTypeAmbiguous\", SKIP);", "+\t\texpectedProblemAttributes.put(\"FieldTypeInheritedNameHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"FieldTypeInternalNameProvided\", SKIP);", "+\t\texpectedProblemAttributes.put(\"FieldTypeNotFound\", SKIP);", "+\t\texpectedProblemAttributes.put(\"FieldTypeNotVisible\", SKIP);", "+\t\texpectedProblemAttributes.put(\"FinalBoundForTypeVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_FINAL_PARAMETER_BOUND));", "+\t\texpectedProblemAttributes.put(\"FinalFieldAssignment\", SKIP);", "+\t\texpectedProblemAttributes.put(\"FinallyMustCompleteNormally\", new ProblemAttributes(JavaCore.COMPILER_PB_FINALLY_BLOCK_NOT_COMPLETING));", "+\t\texpectedProblemAttributes.put(\"FinalMethodCannotBeOverridden\", SKIP);", "+\t\texpectedProblemAttributes.put(\"FinalOuterLocalAssignment\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ForbiddenReference\", new ProblemAttributes(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\texpectedProblemAttributes.put(\"GenericConstructorTypeArgumentMismatch\", SKIP);", "+\t\texpectedProblemAttributes.put(\"GenericMethodTypeArgumentMismatch\", SKIP);", "+\t\texpectedProblemAttributes.put(\"GenericTypeCannotExtendThrowable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"HidingEnclosingType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"HierarchyCircularity\", SKIP);", "+\t\texpectedProblemAttributes.put(\"HierarchyCircularitySelfReference\", SKIP);", "+\t\texpectedProblemAttributes.put(\"HierarchyHasProblems\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalAbstractModifierCombinationForMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalAccessFromTypeVariable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalCast\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalClassLiteralForTypeVariable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalDimension\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalEnclosingInstanceSpecification\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalExtendedDimensions\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalExtendedDimensionsForVarArgs\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalGenericArray\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalInstanceofParameterizedType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalInstanceofTypeParameter\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierCombinationFinalAbstractForClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierCombinationFinalVolatileForField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationMemberType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForArgument\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForEnum\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForEnumConstant\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForEnumConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForInterface\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForInterfaceField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForInterfaceMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForLocalClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForLocalEnum\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberEnum\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberInterface\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForVariable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalPrimitiveOrArrayTypeForEnclosingInstance\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalQualifiedEnumConstantLabel\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalQualifiedParameterizedTypeAllocation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalStaticModifierForMemberType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalTypeVariableSuperReference\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalUsageOfQualifiedTypeReference\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalVararg\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForMemberType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierForInterfaceMemberType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ImportAmbiguous\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ImportInheritedNameHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ImportInternalNameProvided\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ImportNotFound\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ImportNotVisible\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInInheritedMethodThrowsClause\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInThrowsClause\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INCOMPATIBLE_NON_INHERITED_INTERFACE_METHOD));", "+\t\texpectedProblemAttributes.put(\"IncompatibleReturnType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncompatibleReturnTypeForNonInheritedInterfaceMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INCOMPATIBLE_NON_INHERITED_INTERFACE_METHOD));", "+\t\texpectedProblemAttributes.put(\"IncompatibleTypesInConditionalOperator\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncompatibleTypesInEqualityOperator\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncompatibleTypesInForeach\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncorrectEnclosingInstanceReference\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncorrectSwitchType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IndirectAccessToStaticField\", new ProblemAttributes(JavaCore.COMPILER_PB_INDIRECT_STATIC_ACCESS));", "-\t\texpectedProblemAttributes.put(\"MissingTypeInMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MissingTypeInConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UndefinedConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NotVisibleConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AmbiguousConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UsingDeprecatedConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_DEPRECATION));", "-\t\texpectedProblemAttributes.put(\"UnusedPrivateConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IndirectAccessToStaticType\", new ProblemAttributes(JavaCore.COMPILER_PB_INDIRECT_STATIC_ACCESS));", "+\t\texpectedProblemAttributes.put(\"InheritedFieldHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InheritedIncompatibleReturnType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InheritedMethodHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InheritedMethodReducesVisibility\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InheritedTypeHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InitializerMustCompleteNormally\", SKIP);", "-\t\texpectedProblemAttributes.put(\"RecursiveConstructorInvocation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ThisSuperDuringConstructorInvocation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidExplicitConstructorCall\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UndefinedConstructorInDefaultConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NotVisibleConstructorInDefaultConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AmbiguousConstructorInDefaultConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UndefinedConstructorInImplicitConstructorCall\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NotVisibleConstructorInImplicitConstructorCall\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AmbiguousConstructorInImplicitConstructorCall\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnhandledExceptionInDefaultConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnhandledExceptionInImplicitConstructorCall\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DeadCode\", new ProblemAttributes(JavaCore.COMPILER_PB_DEAD_CODE));", "-\t\texpectedProblemAttributes.put(\"ArrayReferenceRequired\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NoImplicitStringConversionForCharArrayExpression\", new ProblemAttributes(JavaCore.COMPILER_PB_CHAR_ARRAY_IN_STRING_CONCATENATION));", "-\t\texpectedProblemAttributes.put(\"StringConstantIsExceedingUtf8Limit\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NonConstantExpression\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NumericValueOutOfRange\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalCast\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidClassInstantiation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotDefineDimensionExpressionsWithInit\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MustDefineEitherDimensionExpressionsOrInitializer\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidOperator\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CodeCannotBeReached\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotReturnInInitializer\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InitializerMustCompleteNormally\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidVoidExpression\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MaskedCatch\", new ProblemAttributes(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK));", "-\t\texpectedProblemAttributes.put(\"DuplicateDefaultCase\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnreachableCatch\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnhandledException\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IncorrectSwitchType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateCase\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateLabel\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InterfaceAmbiguous\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InterfaceCannotHaveConstructors\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InterfaceCannotHaveInitializers\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InterfaceInheritedNameHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InterfaceInternalNameProvided\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InterfaceNotFound\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InterfaceNotVisible\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InternalTypeNameProvided\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidAnnotationMemberType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidContinue\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UndefinedLabel\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidTypeToSynchronized\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidNullToSynchronized\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotThrowNull\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AssignmentHasNoEffect\", new ProblemAttributes(JavaCore.COMPILER_PB_NO_EFFECT_ASSIGNMENT));", "-\t\texpectedProblemAttributes.put(\"PossibleAccidentalBooleanAssignment\", new ProblemAttributes(JavaCore.COMPILER_PB_POSSIBLE_ACCIDENTAL_BOOLEAN_ASSIGNMENT));", "-\t\texpectedProblemAttributes.put(\"SuperfluousSemicolon\", new ProblemAttributes(JavaCore.COMPILER_PB_EMPTY_STATEMENT));", "-\t\texpectedProblemAttributes.put(\"UnnecessaryCast\", new ProblemAttributes(JavaCore.COMPILER_PB_UNNECESSARY_TYPE_CHECK));", "-\t\texpectedProblemAttributes.put(\"UnnecessaryArgumentCast\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnnecessaryInstanceof\", new ProblemAttributes(JavaCore.COMPILER_PB_UNNECESSARY_TYPE_CHECK));", "-\t\texpectedProblemAttributes.put(\"FinallyMustCompleteNormally\", new ProblemAttributes(JavaCore.COMPILER_PB_FINALLY_BLOCK_NOT_COMPLETING));", "-\t\texpectedProblemAttributes.put(\"UnusedMethodDeclaredThrownException\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION_WHEN_OVERRIDING));", "-\t\texpectedProblemAttributes.put(\"UnusedConstructorDeclaredThrownException\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION_WHEN_OVERRIDING));", "-\t\texpectedProblemAttributes.put(\"EmptyControlFlowStatement\", new ProblemAttributes(JavaCore.COMPILER_PB_EMPTY_STATEMENT));", "-\t\texpectedProblemAttributes.put(\"UnnecessaryElse\", new ProblemAttributes(JavaCore.COMPILER_PB_UNNECESSARY_ELSE));", "+\t\texpectedProblemAttributes.put(\"InvalidCharacterConstant\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidClassInstantiation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidContinue\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidDigit\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidEncoding\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidEscape\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidExplicitConstructorCall\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidExpressionAsStatement\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidFileNameForPackageAnnotations\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidFloat\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidHexa\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidHighSurrogate\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidInput\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidLowSurrogate\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidNullToSynchronized\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidOctal\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidOperator\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidParameterizedExceptionType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidParenthesizedExpression\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidTypeExpression\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidTypeForCollection\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidTypeForStaticImport\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidTypeToSynchronized\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidTypeVariableExceptionType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUnaryExpression\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUnicodeEscape\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfAnnotationDeclarations\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfAnnotations\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfEnumDeclarations\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfForeachStatements\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfStaticImports\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeArguments\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParameters\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParametersForAnnotationDeclaration\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParametersForEnumDeclaration\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfVarargs\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfWildcard\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidVoidExpression\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IsClassPathCorrect\", SKIP);", "+\t\texpectedProblemAttributes.put(\"JavadocAmbiguousConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocAmbiguousField\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocAmbiguousMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocAmbiguousMethodReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocAmbiguousType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocDuplicateParamName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocDuplicateReturnTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocDuplicateTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocDuplicateThrowsClassName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocEmptyReturnTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocGenericConstructorTypeArgumentMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocGenericMethodTypeArgumentMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocHiddenReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocIncorrectArityForParameterizedConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocIncorrectArityForParameterizedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInheritedFieldHidesEnclosingName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInheritedMethodHidesEnclosingName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInheritedNameHidesEnclosingTypeName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInternalTypeNameProvided\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidMemberTypeQualification\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidParamName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidParamTagName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidParamTagTypeParameter\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeArgs\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeHref\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeUrlReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidThrowsClass\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidThrowsClassName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidValueReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMalformedSeeReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMessagePrefix\", SKIP);", "+\t\texpectedProblemAttributes.put(\"JavadocMissing\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingHashCharacter\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingIdentifier\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingParamName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingParamTag\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingReturnTag\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingSeeReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingTagDescription\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingThrowsClassName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingThrowsTag\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS));", "+\t\texpectedProblemAttributes.put(\"JavadocNoMessageSendOnArrayType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNoMessageSendOnBaseType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNonGenericConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNonGenericMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNonStaticTypeFromStaticInvocation\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNotVisibleConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNotVisibleField\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNotVisibleMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNotVisibleType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocParameterizedConstructorArgumentTypeMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocParameterizedMethodArgumentTypeMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocParameterMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocTypeArgumentsForRawGenericConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocTypeArgumentsForRawGenericMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUndefinedConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUndefinedField\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUndefinedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUndefinedType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUnexpectedTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUnexpectedText\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUnterminatedInlineTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedField\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"LocalVariableCannotBeNull\", SKIP);", "+\t\texpectedProblemAttributes.put(\"LocalVariableCanOnlyBeNull\", SKIP);", "+\t\texpectedProblemAttributes.put(\"LocalVariableHidingField\", new ProblemAttributes(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING));", "+\t\texpectedProblemAttributes.put(\"LocalVariableHidingLocalVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING));", "+\t\texpectedProblemAttributes.put(\"LocalVariableIsNeverUsed\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_LOCAL));", "+\t\texpectedProblemAttributes.put(\"LocalVariableMayBeNull\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MaskedCatch\", new ProblemAttributes(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK));", "+\t\texpectedProblemAttributes.put(\"MethodButWithConstructorName\", new ProblemAttributes(JavaCore.COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME));", "+\t\texpectedProblemAttributes.put(\"MethodMissingDeprecatedAnnotation\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_DEPRECATED_ANNOTATION));", "+\t\texpectedProblemAttributes.put(\"MethodMustOverride\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MethodMustOverrideOrImplement\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MethodNameClash\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MethodReducesVisibility\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MethodRequiresBody\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MethodReturnsVoid\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MethodVarargsArgumentNeedCast\", new ProblemAttributes(JavaCore.COMPILER_PB_VARARGS_ARGUMENT_NEED_CAST));", "+\t\texpectedProblemAttributes.put(\"MissingArgumentsForParameterizedMemberType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MissingEnclosingInstance\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MissingEnclosingInstanceForConstructorCall\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MissingEnumConstantCase\", new ProblemAttributes(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH));", "+\t\texpectedProblemAttributes.put(\"MissingOverrideAnnotation\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_OVERRIDE_ANNOTATION));", "+\t\texpectedProblemAttributes.put(\"MissingOverrideAnnotationForInterfaceMethodImplementation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MissingReturnType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MissingSemiColon\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MissingSerialVersion\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_SERIAL_VERSION));", "+\t\texpectedProblemAttributes.put(\"MissingSynchronizedModifierInInheritedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_SYNCHRONIZED_ON_INHERITED_METHOD));", "+\t\texpectedProblemAttributes.put(\"MissingTypeInConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MissingTypeInMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MissingValueForAnnotationMember\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MustDefineEitherDimensionExpressionsOrInitializer\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MustSpecifyPackage\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NativeMethodsCannotBeStrictfp\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NeedToEmulateConstructorAccess\", new ProblemAttributes(JavaCore.COMPILER_PB_SYNTHETIC_ACCESS_EMULATION));", "-\t\texpectedProblemAttributes.put(\"NeedToEmulateConstructorAccess\", new ProblemAttributes(JavaCore.COMPILER_PB_SYNTHETIC_ACCESS_EMULATION));", "-\t\texpectedProblemAttributes.put(\"FallthroughCase\", new ProblemAttributes(JavaCore.COMPILER_PB_FALLTHROUGH_CASE));", "-\t\texpectedProblemAttributes.put(\"InheritedMethodHidesEnclosingName\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InheritedFieldHidesEnclosingName\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InheritedTypeHidesEnclosingName\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalUsageOfQualifiedTypeReference\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnusedLabel\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_LABEL));", "-\t\texpectedProblemAttributes.put(\"ThisInStaticContext\", SKIP);", "-\t\texpectedProblemAttributes.put(\"StaticMethodRequested\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalDimension\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidTypeExpression\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingError\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorNoSuggestion\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUnaryExpression\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InterfaceCannotHaveConstructors\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ArrayConstantsOnlyInArrayInitializers\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorOnKeyword\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorOnKeywordNoSuggestion\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ComparingIdentical\", new ProblemAttributes(JavaCore.COMPILER_PB_COMPARING_IDENTICAL));", "-\t\texpectedProblemAttributes.put(\"UnmatchedBracket\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NoAdditionalBoundAfterTypeVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidExpressionAsStatement\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ExpressionShouldBeAVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MissingSemiColon\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidParenthesizedExpression\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorInsertTokenBefore\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorInsertTokenAfter\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NoImplicitStringConversionForCharArrayExpression\", new ProblemAttributes(JavaCore.COMPILER_PB_CHAR_ARRAY_IN_STRING_CONCATENATION));", "+\t\texpectedProblemAttributes.put(\"NoMessageSendOnArrayType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NoMessageSendOnBaseType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NonBlankFinalLocalAssignment\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NonConstantExpression\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NonExternalizedStringLiteral\", new ProblemAttributes(JavaCore.COMPILER_PB_NON_NLS_STRING_LITERAL));", "+\t\texpectedProblemAttributes.put(\"NonGenericConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NonGenericMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NonGenericType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NonNullLocalVariableComparisonYieldsFalse\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "+\t\texpectedProblemAttributes.put(\"NonStaticAccessToStaticField\", new ProblemAttributes(JavaCore.COMPILER_PB_STATIC_ACCESS_RECEIVER));", "+\t\texpectedProblemAttributes.put(\"NonStaticAccessToStaticMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_STATIC_ACCESS_RECEIVER));", "+\t\texpectedProblemAttributes.put(\"NonStaticContextForEnumMemberType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NonStaticFieldFromStaticInvocation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NonStaticTypeFromStaticInvocation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NotVisibleConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NotVisibleConstructorInDefaultConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NotVisibleConstructorInImplicitConstructorCall\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NotVisibleField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NotVisibleMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NotVisibleType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NullLocalVariableComparisonYieldsFalse\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "+\t\texpectedProblemAttributes.put(\"NullLocalVariableInstanceofYieldsFalse\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "+\t\texpectedProblemAttributes.put(\"NullLocalVariableReference\", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_REFERENCE));", "+\t\texpectedProblemAttributes.put(\"NullSourceString\", SKIP);", "+\t\texpectedProblemAttributes.put(\"NumericValueOutOfRange\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ObjectCannotBeGeneric\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ObjectCannotHaveSuperTypes\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ObjectHasNoSuperclass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ObjectMustBeClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"OuterLocalMustBeFinal\", SKIP);", "+\t\texpectedProblemAttributes.put(\"OverridingDeprecatedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_DEPRECATION));", "+\t\texpectedProblemAttributes.put(\"OverridingMethodWithoutSuperInvocation\", new ProblemAttributes(JavaCore.COMPILER_PB_OVERRIDING_METHOD_WITHOUT_SUPER_INVOCATION));", "+\t\texpectedProblemAttributes.put(\"OverridingNonVisibleMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD));", "+\t\texpectedProblemAttributes.put(\"PackageCollidesWithType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"PackageIsNotExpectedPackage\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParameterAssignment\", new ProblemAttributes(JavaCore.COMPILER_PB_PARAMETER_ASSIGNMENT));", "+\t\texpectedProblemAttributes.put(\"ParameterizedConstructorArgumentTypeMismatch\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParameterizedMethodArgumentTypeMismatch\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParameterMismatch\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingError\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorMergeTokens\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorInvalidToken\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorMisplacedConstruct\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorReplaceTokens\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorNoSuggestionForTokens\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorUnexpectedEOF\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParsingErrorInsertToCompleteScope\", SKIP);", "-\t\texpectedProblemAttributes.put(\"EndOfSource\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidHexa\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidOctal\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidCharacterConstant\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidEscape\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidInput\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUnicodeEscape\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidFloat\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NullSourceString\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnterminatedString\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnterminatedComment\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NonExternalizedStringLiteral\", new ProblemAttributes(JavaCore.COMPILER_PB_NON_NLS_STRING_LITERAL));", "-\t\texpectedProblemAttributes.put(\"InvalidDigit\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidLowSurrogate\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidHighSurrogate\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnnecessaryNLSTag\", new ProblemAttributes(JavaCore.COMPILER_PB_NON_NLS_STRING_LITERAL));", "-\t\texpectedProblemAttributes.put(\"DiscouragedReference\", new ProblemAttributes(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE));", "-\t\texpectedProblemAttributes.put(\"InterfaceCannotHaveInitializers\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateModifierForType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForClass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForInterface\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberClass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberInterface\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForLocalClass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ForbiddenReference\", new ProblemAttributes(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierCombinationFinalAbstractForClass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierForInterfaceMemberType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForMemberType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalStaticModifierForMemberType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperclassMustBeAClass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ClassExtendFinalClass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateSuperInterface\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperInterfaceMustBeAnInterface\", SKIP);", "-\t\texpectedProblemAttributes.put(\"HierarchyCircularitySelfReference\", SKIP);", "-\t\texpectedProblemAttributes.put(\"HierarchyCircularity\", SKIP);", "-\t\texpectedProblemAttributes.put(\"HidingEnclosingType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateNestedType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotThrowType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"PackageCollidesWithType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TypeCollidesWithPackage\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateTypes\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IsClassPathCorrect\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorInsertToCompleteScope\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorInsertTokenAfter\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorInsertTokenBefore\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorInvalidToken\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorMergeTokens\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorMisplacedConstruct\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorNoSuggestion\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorNoSuggestionForTokens\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorOnKeyword\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorOnKeywordNoSuggestion\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorReplaceTokens\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParsingErrorUnexpectedEOF\", SKIP);", "+\t\texpectedProblemAttributes.put(\"PossibleAccidentalBooleanAssignment\", new ProblemAttributes(JavaCore.COMPILER_PB_POSSIBLE_ACCIDENTAL_BOOLEAN_ASSIGNMENT));", "+\t\texpectedProblemAttributes.put(\"PotentialNullLocalVariableReference\", new ProblemAttributes(JavaCore.COMPILER_PB_POTENTIAL_NULL_REFERENCE));", "-\t\texpectedProblemAttributes.put(\"MustSpecifyPackage\", SKIP);", "-\t\texpectedProblemAttributes.put(\"HierarchyHasProblems\", SKIP);", "-\t\texpectedProblemAttributes.put(\"PackageIsNotExpectedPackage\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ObjectCannotHaveSuperTypes\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ObjectMustBeClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"RawMemberTypeCannotBeParameterized\", SKIP);", "+\t\texpectedProblemAttributes.put(\"RawTypeReference\", new ProblemAttributes(JavaCore.COMPILER_PB_RAW_TYPE_REFERENCE));", "+\t\texpectedProblemAttributes.put(\"RecursiveConstructorInvocation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"RedefinedArgument\", SKIP);", "+\t\texpectedProblemAttributes.put(\"RedefinedLocal\", SKIP);", "+\t\texpectedProblemAttributes.put(\"RedundantLocalVariableNullAssignment\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "+\t\texpectedProblemAttributes.put(\"RedundantNullCheckOnNonNullLocalVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "+\t\texpectedProblemAttributes.put(\"RedundantNullCheckOnNullLocalVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "-\t\texpectedProblemAttributes.put(\"ShouldImplementHashcode\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_HASHCODE_METHOD));", "-\t\texpectedProblemAttributes.put(\"AbstractMethodsInConcreteClass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AbstractMethodInEnum\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperclassNotFound\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperclassNotVisible\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_SUPERINTERFACE));", "-\t\texpectedProblemAttributes.put(\"SuperclassAmbiguous\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperclassInternalNameProvided\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperclassInheritedNameHidesEnclosingName\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InterfaceNotFound\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InterfaceNotVisible\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InterfaceAmbiguous\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InterfaceInternalNameProvided\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InterfaceInheritedNameHidesEnclosingName\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateModifierForField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForInterfaceField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierCombinationFinalVolatileForField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnexpectedStaticModifierForField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"FieldTypeNotFound\", SKIP);", "-\t\texpectedProblemAttributes.put(\"FieldTypeNotVisible\", SKIP);", "-\t\texpectedProblemAttributes.put(\"FieldTypeAmbiguous\", SKIP);", "-\t\texpectedProblemAttributes.put(\"FieldTypeInternalNameProvided\", SKIP);", "-\t\texpectedProblemAttributes.put(\"FieldTypeInheritedNameHidesEnclosingName\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForArgument\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateModifierForMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForInterfaceMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnexpectedStaticModifierForMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalAbstractModifierCombinationForMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AbstractMethodInAbstractClass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeCannotBeVoid\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeCannotBeVoidArray\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ReferenceToForwardField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ReferenceToForwardTypeVariable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ReturnTypeAmbiguous\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NativeMethodsCannotBeStrictfp\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateModifierForArgument\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeNotFound\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeNotVisible\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeAmbiguous\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeInternalNameProvided\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeInheritedNameHidesEnclosingName\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ExceptionTypeNotFound\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ExceptionTypeNotVisible\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ExceptionTypeAmbiguous\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ExceptionTypeInternalNameProvided\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ExceptionTypeInheritedNameHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ReturnTypeInheritedNameHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ReturnTypeInternalNameProvided\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ReturnTypeAmbiguous\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ReturnTypeInternalNameProvided\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ReturnTypeInheritedNameHidesEnclosingName\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ConflictingImport\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateImport\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotImportPackage\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnusedImport\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_IMPORT));", "-\t\texpectedProblemAttributes.put(\"ImportNotFound\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ImportNotVisible\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ImportAmbiguous\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ImportInternalNameProvided\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ImportInheritedNameHidesEnclosingName\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidTypeForStaticImport\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateModifierForVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"LocalVariableCannotBeNull\", SKIP);", "-\t\texpectedProblemAttributes.put(\"LocalVariableCanOnlyBeNull\", SKIP);", "-\t\texpectedProblemAttributes.put(\"LocalVariableMayBeNull\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AbstractMethodMustBeImplemented\", SKIP);", "-\t\texpectedProblemAttributes.put(\"FinalMethodCannotBeOverridden\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInThrowsClause\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInInheritedMethodThrowsClause\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IncompatibleReturnType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InheritedMethodReducesVisibility\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotOverrideAStaticMethodWithAnInstanceMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotHideAnInstanceMethodWithAStaticMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ShouldImplementHashcode\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_HASHCODE_METHOD));", "+\t\texpectedProblemAttributes.put(\"ShouldReturnValue\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MethodReducesVisibility\", SKIP);", "-\t\texpectedProblemAttributes.put(\"OverridingNonVisibleMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD));", "-\t\texpectedProblemAttributes.put(\"AbstractMethodCannotBeOverridden\", SKIP);", "-\t\texpectedProblemAttributes.put(\"OverridingDeprecatedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_DEPRECATION));", "-\t\texpectedProblemAttributes.put(\"IncompatibleReturnTypeForNonInheritedInterfaceMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INCOMPATIBLE_NON_INHERITED_INTERFACE_METHOD));", "-\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INCOMPATIBLE_NON_INHERITED_INTERFACE_METHOD));", "-\t\texpectedProblemAttributes.put(\"IllegalVararg\", SKIP);", "-\t\texpectedProblemAttributes.put(\"OverridingMethodWithoutSuperInvocation\", new ProblemAttributes(JavaCore.COMPILER_PB_OVERRIDING_METHOD_WITHOUT_SUPER_INVOCATION));", "-\t\texpectedProblemAttributes.put(\"MissingSynchronizedModifierInInheritedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_SYNCHRONIZED_ON_INHERITED_METHOD));", "-\t\texpectedProblemAttributes.put(\"AbstractMethodMustBeImplementedOverConcreteMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InheritedIncompatibleReturnType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CodeSnippetMissingClass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CodeSnippetMissingMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotUseSuperInCodeSnippet\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TooManyConstantsInConstantPool\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TooManyBytesForStringConstant\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TooManyFields\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TooManyMethods\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UseAssertAsAnIdentifier\", new ProblemAttributes(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER));", "-\t\texpectedProblemAttributes.put(\"UseEnumAsAnIdentifier\", new ProblemAttributes(JavaCore.COMPILER_PB_ENUM_IDENTIFIER));", "-\t\texpectedProblemAttributes.put(\"EnumConstantsCannotBeSurroundedByParenthesis\", SKIP);", "-\t\texpectedProblemAttributes.put(\"Task\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NullLocalVariableReference\", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_REFERENCE));", "-\t\texpectedProblemAttributes.put(\"PotentialNullLocalVariableReference\", new ProblemAttributes(JavaCore.COMPILER_PB_POTENTIAL_NULL_REFERENCE));", "-\t\texpectedProblemAttributes.put(\"RedundantNullCheckOnNullLocalVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "-\t\texpectedProblemAttributes.put(\"NullLocalVariableComparisonYieldsFalse\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "-\t\texpectedProblemAttributes.put(\"RedundantLocalVariableNullAssignment\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "-\t\texpectedProblemAttributes.put(\"NullLocalVariableInstanceofYieldsFalse\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "-\t\texpectedProblemAttributes.put(\"RedundantNullCheckOnNonNullLocalVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "-\t\texpectedProblemAttributes.put(\"NonNullLocalVariableComparisonYieldsFalse\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));", "-\t\texpectedProblemAttributes.put(\"UndocumentedEmptyBlock\", new ProblemAttributes(JavaCore.COMPILER_PB_UNDOCUMENTED_EMPTY_BLOCK));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeUrlReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingTagDescription\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocDuplicateTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocHiddenReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidMemberTypeQualification\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingIdentifier\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNonStaticTypeFromStaticInvocation\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidParamTagTypeParameter\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUnexpectedTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingParamTag\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingParamName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocDuplicateParamName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidParamName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingReturnTag\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS));", "-\t\texpectedProblemAttributes.put(\"JavadocDuplicateReturnTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingThrowsTag\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingThrowsClassName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidThrowsClass\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocDuplicateThrowsClassName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidThrowsClassName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingSeeReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeHref\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeArgs\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissing\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUndefinedField\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNotVisibleField\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocAmbiguousField\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedField\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUndefinedConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNotVisibleConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocAmbiguousConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUndefinedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNotVisibleMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocAmbiguousMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNoMessageSendOnBaseType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocParameterMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNoMessageSendOnArrayType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUndefinedType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNotVisibleType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocAmbiguousType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedType\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInternalTypeNameProvided\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInheritedMethodHidesEnclosingName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInheritedFieldHidesEnclosingName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInheritedNameHidesEnclosingTypeName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocAmbiguousMethodReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUnterminatedInlineTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMalformedSeeReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMessagePrefix\", SKIP);", "-\t\texpectedProblemAttributes.put(\"JavadocMissingHashCharacter\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocEmptyReturnTag\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidValueReference\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUnexpectedText\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidParamTagName\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"DuplicateTypeVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalTypeVariableSuperReference\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NonStaticTypeFromStaticInvocation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ObjectCannotBeGeneric\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NonGenericType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TypeArgumentMismatch\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateMethodErasure\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ReferenceToForwardTypeVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"BoundMustBeAnInterface\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnsafeRawConstructorInvocation\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "-\t\texpectedProblemAttributes.put(\"UnsafeRawMethodInvocation\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "-\t\texpectedProblemAttributes.put(\"UnsafeTypeConversion\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "-\t\texpectedProblemAttributes.put(\"InvalidTypeVariableExceptionType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidParameterizedExceptionType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalGenericArray\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnsafeRawFieldAssignment\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "-\t\texpectedProblemAttributes.put(\"FinalBoundForTypeVariable\", new ProblemAttributes(JavaCore.COMPILER_PB_FINAL_PARAMETER_BOUND));", "-\t\texpectedProblemAttributes.put(\"UndefinedTypeVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperInterfacesCollide\", SKIP);", "-\t\texpectedProblemAttributes.put(\"WildcardConstructorInvocation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"WildcardMethodInvocation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"WildcardFieldAssignment\", SKIP);", "-\t\texpectedProblemAttributes.put(\"GenericMethodTypeArgumentMismatch\", SKIP);", "-\t\texpectedProblemAttributes.put(\"GenericConstructorTypeArgumentMismatch\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnsafeGenericCast\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "-\t\texpectedProblemAttributes.put(\"IllegalInstanceofParameterizedType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalInstanceofTypeParameter\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NonGenericMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParameterizedMethodArgumentTypeMismatch\", SKIP);", "-\t\texpectedProblemAttributes.put(\"NonGenericConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParameterizedConstructorArgumentTypeMismatch\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TypeArgumentsForRawGenericMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TypeArgumentsForRawGenericConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperTypeUsingWildcard\", SKIP);", "-\t\texpectedProblemAttributes.put(\"GenericTypeCannotExtendThrowable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalClassLiteralForTypeVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnsafeReturnTypeOverride\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "-\t\texpectedProblemAttributes.put(\"MethodNameClash\", SKIP);", "-\t\texpectedProblemAttributes.put(\"RawMemberTypeCannotBeParameterized\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MissingArgumentsForParameterizedMemberType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"BoundHasConflictingArguments\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateParameterizedMethods\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalQualifiedParameterizedTypeAllocation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateBounds\", SKIP);", "-\t\texpectedProblemAttributes.put(\"BoundCannotBeArray\", SKIP);", "+\t\texpectedProblemAttributes.put(\"StaticMethodRequested\", SKIP);", "+\t\texpectedProblemAttributes.put(\"StringConstantIsExceedingUtf8Limit\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperclassAmbiguous\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperclassInheritedNameHidesEnclosingName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperclassInternalNameProvided\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperclassMustBeAClass\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperclassNotFound\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperclassNotVisible\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_SUPERINTERFACE));", "+\t\texpectedProblemAttributes.put(\"SuperfluousSemicolon\", new ProblemAttributes(JavaCore.COMPILER_PB_EMPTY_STATEMENT));", "+\t\texpectedProblemAttributes.put(\"SuperInterfaceMustBeAnInterface\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperInterfacesCollide\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperTypeUsingWildcard\", SKIP);", "+\t\texpectedProblemAttributes.put(\"Task\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ThisInStaticContext\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ThisSuperDuringConstructorInvocation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TooManyArgumentSlots\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TooManyArrayDimensions\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TooManyBytesForStringConstant\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TooManyConstantsInConstantPool\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TooManyFields\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TooManyLocalVariableSlots\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TooManyMethods\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TooManySyntheticArgumentSlots\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TypeArgumentMismatch\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TypeArgumentsForRawGenericConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TypeArgumentsForRawGenericMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TypeCollidesWithPackage\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TypeHidingType\", new ProblemAttributes(JavaCore.COMPILER_PB_TYPE_PARAMETER_HIDING));", "+\t\texpectedProblemAttributes.put(\"TypeHidingTypeParameterFromMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_TYPE_PARAMETER_HIDING));", "+\t\texpectedProblemAttributes.put(\"TypeHidingTypeParameterFromType\", new ProblemAttributes(JavaCore.COMPILER_PB_TYPE_PARAMETER_HIDING));", "+\t\texpectedProblemAttributes.put(\"TypeMismatch\", SKIP);", "+\t\texpectedProblemAttributes.put(\"TypeMissingDeprecatedAnnotation\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_DEPRECATED_ANNOTATION));", "+\t\texpectedProblemAttributes.put(\"TypeParameterHidingType\", new ProblemAttributes(JavaCore.COMPILER_PB_TYPE_PARAMETER_HIDING));", "+\t\texpectedProblemAttributes.put(\"UnboxingConversion\", new ProblemAttributes(JavaCore.COMPILER_PB_AUTOBOXING));", "+\t\texpectedProblemAttributes.put(\"UndefinedAnnotationMember\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UndefinedConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UndefinedConstructorInDefaultConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UndefinedConstructorInImplicitConstructorCall\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UndefinedField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UndefinedLabel\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UndefinedMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UndefinedName\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UndefinedType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UndefinedTypeVariable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UndocumentedEmptyBlock\", new ProblemAttributes(JavaCore.COMPILER_PB_UNDOCUMENTED_EMPTY_BLOCK));", "+\t\texpectedProblemAttributes.put(\"UnexpectedStaticModifierForField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnexpectedStaticModifierForMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnhandledException\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnhandledExceptionInDefaultConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnhandledExceptionInImplicitConstructorCall\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnhandledWarningToken\", new ProblemAttributes(JavaCore.COMPILER_PB_UNHANDLED_WARNING_TOKEN));", "+\t\texpectedProblemAttributes.put(\"UninitializedBlankFinalField\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UninitializedLocalVariable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnmatchedBracket\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnnecessaryArgumentCast\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnnecessaryCast\", new ProblemAttributes(JavaCore.COMPILER_PB_UNNECESSARY_TYPE_CHECK));", "+\t\texpectedProblemAttributes.put(\"UnnecessaryElse\", new ProblemAttributes(JavaCore.COMPILER_PB_UNNECESSARY_ELSE));", "+\t\texpectedProblemAttributes.put(\"UnnecessaryInstanceof\", new ProblemAttributes(JavaCore.COMPILER_PB_UNNECESSARY_TYPE_CHECK));", "+\t\texpectedProblemAttributes.put(\"UnnecessaryNLSTag\", new ProblemAttributes(JavaCore.COMPILER_PB_NON_NLS_STRING_LITERAL));", "+\t\texpectedProblemAttributes.put(\"UnqualifiedFieldAccess\", new ProblemAttributes(JavaCore.COMPILER_PB_UNQUALIFIED_FIELD_ACCESS));", "+\t\texpectedProblemAttributes.put(\"UnreachableCatch\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnresolvedVariable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnsafeGenericArrayForVarargs\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "+\t\texpectedProblemAttributes.put(\"UnsafeGenericCast\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "+\t\texpectedProblemAttributes.put(\"UnsafeRawConstructorInvocation\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "+\t\texpectedProblemAttributes.put(\"UnsafeRawFieldAssignment\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "-\t\texpectedProblemAttributes.put(\"TypeParameterHidingType\", new ProblemAttributes(JavaCore.COMPILER_PB_TYPE_PARAMETER_HIDING));", "-\t\texpectedProblemAttributes.put(\"RawTypeReference\", new ProblemAttributes(JavaCore.COMPILER_PB_RAW_TYPE_REFERENCE));", "-\t\texpectedProblemAttributes.put(\"NoAdditionalBoundAfterTypeVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnsafeGenericArrayForVarargs\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "-\t\texpectedProblemAttributes.put(\"IllegalAccessFromTypeVariable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"TypeHidingTypeParameterFromType\", new ProblemAttributes(JavaCore.COMPILER_PB_TYPE_PARAMETER_HIDING));", "-\t\texpectedProblemAttributes.put(\"TypeHidingTypeParameterFromMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_TYPE_PARAMETER_HIDING));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfWildcard\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnusedTypeArgumentsForMethodInvocation\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_TYPE_ARGUMENTS_FOR_METHOD_INVOCATION));", "-\t\texpectedProblemAttributes.put(\"IncompatibleTypesInForeach\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidTypeForCollection\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParameters\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfStaticImports\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfForeachStatements\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeArguments\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfEnumDeclarations\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfVarargs\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfAnnotations\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfAnnotationDeclarations\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParametersForAnnotationDeclaration\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParametersForEnumDeclaration\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalExtendedDimensions\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidFileNameForPackageAnnotations\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationMemberType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidAnnotationMemberType\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationCircularitySelfReference\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationCircularity\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateAnnotation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MissingValueForAnnotationMember\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateAnnotationMember\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UndefinedAnnotationMember\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeClassLiteral\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeConstant\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationFieldNeedConstantInitialization\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationCannotOverrideMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationMembersCannotHaveParameters\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationMembersCannotHaveTypeParameters\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveSuperclass\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveSuperinterfaces\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateTargetInTargetAnnotation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DisallowedTargetForAnnotation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MethodMustOverride\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeAnnotation\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationTypeUsedAsSuperInterface\", new ProblemAttributes(JavaCore.COMPILER_PB_ANNOTATION_SUPER_INTERFACE));", "-\t\texpectedProblemAttributes.put(\"MissingOverrideAnnotation\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_OVERRIDE_ANNOTATION));", "-\t\texpectedProblemAttributes.put(\"FieldMissingDeprecatedAnnotation\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_DEPRECATED_ANNOTATION));", "-\t\texpectedProblemAttributes.put(\"MethodMissingDeprecatedAnnotation\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_DEPRECATED_ANNOTATION));", "-\t\texpectedProblemAttributes.put(\"TypeMissingDeprecatedAnnotation\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_DEPRECATED_ANNOTATION));", "-\t\texpectedProblemAttributes.put(\"UnhandledWarningToken\", new ProblemAttributes(JavaCore.COMPILER_PB_UNHANDLED_WARNING_TOKEN));", "-\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeArrayInitializer\", SKIP);", "-\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeAnEnumConstant\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MethodMustOverrideOrImplement\", SKIP);", "-\t\texpectedProblemAttributes.put(\"UnusedWarningToken\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_WARNING_TOKEN));", "+\t\texpectedProblemAttributes.put(\"UnsafeRawMethodInvocation\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "+\t\texpectedProblemAttributes.put(\"UnsafeReturnTypeOverride\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "+\t\texpectedProblemAttributes.put(\"UnsafeTypeConversion\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "+\t\texpectedProblemAttributes.put(\"UnterminatedComment\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnterminatedString\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnusedConstructorDeclaredThrownException\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION_WHEN_OVERRIDING));", "+\t\texpectedProblemAttributes.put(\"UnusedImport\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_IMPORT));", "+\t\texpectedProblemAttributes.put(\"UnusedLabel\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_LABEL));", "+\t\texpectedProblemAttributes.put(\"UnusedMethodDeclaredThrownException\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION_WHEN_OVERRIDING));", "+\t\texpectedProblemAttributes.put(\"UnusedPrivateConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UnusedPrivateField\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UnusedPrivateMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UnusedPrivateType\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER));", "-\t\texpectedProblemAttributes.put(\"CorruptedSignature\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidEncoding\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotReadSource\", SKIP);", "-\t\texpectedProblemAttributes.put(\"BoxingConversion\", new ProblemAttributes(JavaCore.COMPILER_PB_AUTOBOXING));", "-\t\texpectedProblemAttributes.put(\"UnboxingConversion\", new ProblemAttributes(JavaCore.COMPILER_PB_AUTOBOXING));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForEnum\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForEnumConstant\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForLocalEnum\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberEnum\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotDeclareEnumSpecialMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalQualifiedEnumConstantLabel\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotExtendEnum\", SKIP);", "-\t\texpectedProblemAttributes.put(\"CannotInvokeSuperConstructorInEnum\", SKIP);", "-\t\texpectedProblemAttributes.put(\"EnumAbstractMethodMustBeImplemented\", SKIP);", "-\t\texpectedProblemAttributes.put(\"EnumSwitchCannotTargetField\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForEnumConstructor\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MissingEnumConstantCase\", new ProblemAttributes(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH));", "-\t\texpectedProblemAttributes.put(\"EnumStaticFieldInInInitializerContext\", SKIP);", "-\t\texpectedProblemAttributes.put(\"EnumConstantMustImplementAbstractMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"EnumConstantCannotDefineAbstractMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalExtendedDimensionsForVarArgs\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MethodVarargsArgumentNeedCast\", new ProblemAttributes(JavaCore.COMPILER_PB_VARARGS_ARGUMENT_NEED_CAST));", "-\t\texpectedProblemAttributes.put(\"ConstructorVarargsArgumentNeedCast\", new ProblemAttributes(JavaCore.COMPILER_PB_VARARGS_ARGUMENT_NEED_CAST));", "+\t\texpectedProblemAttributes.put(\"UnusedTypeArgumentsForMethodInvocation\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_TYPE_ARGUMENTS_FOR_METHOD_INVOCATION));", "+\t\texpectedProblemAttributes.put(\"UnusedWarningToken\", new ProblemAttributes(JavaCore.COMPILER_PB_UNUSED_WARNING_TOKEN));", "+\t\texpectedProblemAttributes.put(\"UseAssertAsAnIdentifier\", new ProblemAttributes(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER));", "+\t\texpectedProblemAttributes.put(\"UseEnumAsAnIdentifier\", new ProblemAttributes(JavaCore.COMPILER_PB_ENUM_IDENTIFIER));", "+\t\texpectedProblemAttributes.put(\"UsingDeprecatedConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_DEPRECATION));", "+\t\texpectedProblemAttributes.put(\"UsingDeprecatedField\", new ProblemAttributes(JavaCore.COMPILER_PB_DEPRECATION));", "+\t\texpectedProblemAttributes.put(\"UsingDeprecatedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_DEPRECATION));", "+\t\texpectedProblemAttributes.put(\"UsingDeprecatedType\", new ProblemAttributes(JavaCore.COMPILER_PB_DEPRECATION));", "-\t\texpectedProblemAttributes.put(\"JavadocGenericMethodTypeArgumentMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNonGenericMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocIncorrectArityForParameterizedMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocParameterizedMethodArgumentTypeMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocTypeArgumentsForRawGenericMethod\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocGenericConstructorTypeArgumentMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNonGenericConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocIncorrectArityForParameterizedConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocParameterizedConstructorArgumentTypeMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocTypeArgumentsForRawGenericConstructor\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"ExternalProblemNotFixable\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ExternalProblemFixable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"VariableTypeCannotBeVoid\", SKIP);", "+\t\texpectedProblemAttributes.put(\"VariableTypeCannotBeVoidArray\", SKIP);", "+\t\texpectedProblemAttributes.put(\"VoidMethodReturnsValue\", SKIP);", "+\t\texpectedProblemAttributes.put(\"WildcardConstructorInvocation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"WildcardFieldAssignment\", SKIP);", "+\t\texpectedProblemAttributes.put(\"WildcardMethodInvocation\", SKIP);", "-\t\t\t\t\tProblemAttributes expectedAttributes = (ProblemAttributes) expectedProblemAttributes.get(field.getName());", "+\t\t\t\t\tString name = field.getName();", "+\t\t\t\t\tProblemAttributes expectedAttributes = (ProblemAttributes) expectedProblemAttributes.get(name);", "-\t\t\t\t\t\tfailures.append(\"missing expected problem attributes for problem \" + field.getName() + \"\\n\");", "+\t\t\t\t\t\tfailures.append(\"missing expected problem attributes for problem \" + name + \"\\n\");", "-\t\t\t\t\t\tfailures.append(\"tuning option mismatch for problem \" + field.getName() + \" (expected \" + expectedAttributes.option + \", got \" + actualTuningOption + \")\\n\");", "+\t\t\t\t\t\tfailures.append(\"tuning option mismatch for problem \" + name + \" (expected \" + expectedAttributes.option + \", got \" + actualTuningOption + \")\\n\");", "-\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", \" +", "+\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + name + \"\\\", \" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0adb386411253ca901d1142e64648de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "0364a4a83fd36a50e2f640c1ff760bbc5a6d0c8e", "commitAfterChange": "d03a3f510c4024243302c43ee912819616ee9cc6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test011_problem_categories()", "signatureAfterChange": " public void test011_problem_categories()", "diff": ["-\t\texpectedProblemAttributes.put(\"ObjectHasNoSuperclass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"UndefinedType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"NotVisibleType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"AbstractMethodCannotBeOverridden\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"AbstractMethodInAbstractClass\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"AbstractMethodInEnum\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"AbstractMethodMustBeImplemented\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"AbstractMethodMustBeImplementedOverConcreteMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"AbstractMethodsInConcreteClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"AmbiguousConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"AmbiguousConstructorInDefaultConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"AmbiguousConstructorInImplicitConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"AmbiguousField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"AmbiguousMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UsingDeprecatedType\", new ProblemAttributes(CategorizedProblem.CAT_DEPRECATION));", "-\t\texpectedProblemAttributes.put(\"InternalTypeNameProvided\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"UnusedPrivateType\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "-\t\texpectedProblemAttributes.put(\"IncompatibleTypesInEqualityOperator\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IncompatibleTypesInConditionalOperator\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"TypeMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IndirectAccessToStaticType\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"MissingEnclosingInstanceForConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"MissingEnclosingInstance\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IncorrectEnclosingInstanceReference\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalEnclosingInstanceSpecification\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"CannotDefineStaticInitializerInLocalType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"OuterLocalMustBeFinal\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"CannotDefineInterfaceInLocalType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"IllegalPrimitiveOrArrayTypeForEnclosingInstance\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"EnclosingInstanceInConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"AnnotationCannotOverrideMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"AnnotationCircularity\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"AnnotationCircularitySelfReference\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"AnnotationFieldNeedConstantInitialization\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"AnnotationMembersCannotHaveParameters\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"AnnotationMembersCannotHaveTypeParameters\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveConstructor\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveSuperclass\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveSuperinterfaces\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"AnnotationTypeUsedAsSuperInterface\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeAnEnumConstant\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeArrayInitializer\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeClassLiteral\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeConstant\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"CannotDefineAnnotationInLocalType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"CannotDefineEnumInLocalType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"NonStaticContextForEnumMemberType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"TypeHidingType\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"UndefinedName\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UninitializedLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"VariableTypeCannotBeVoid\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"VariableTypeCannotBeVoidArray\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"CannotAllocateVoidArray\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"RedefinedLocal\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"RedefinedArgument\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"DuplicateFinalLocalInitialization\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"NonBlankFinalLocalAssignment\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"ParameterAssignment\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"FinalOuterLocalAssignment\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"LocalVariableIsNeverUsed\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"ArgumentHidingField\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"ArgumentHidingLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeAmbiguous\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeCannotBeVoid\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeCannotBeVoidArray\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeInheritedNameHidesEnclosingName\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeInternalNameProvided\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeNotFound\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ArgumentTypeNotVisible\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ArrayConstantsOnlyInArrayInitializers\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ArrayReferenceRequired\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"AssignmentHasNoEffect\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"BodyForAbstractMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"BodyForNativeMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"BoundCannotBeArray\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"BoundHasConflictingArguments\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"BoundMustBeAnInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"BoxingConversion\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"TooManyArgumentSlots\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"TooManyLocalVariableSlots\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"TooManySyntheticArgumentSlots\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"TooManyArrayDimensions\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"UndefinedField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"NotVisibleField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"AmbiguousField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UsingDeprecatedField\", new ProblemAttributes(CategorizedProblem.CAT_DEPRECATION));", "-\t\texpectedProblemAttributes.put(\"NonStaticFieldFromStaticInvocation\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"ReferenceToForwardField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"NonStaticAccessToStaticField\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"UnusedPrivateField\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "-\t\texpectedProblemAttributes.put(\"IndirectAccessToStaticField\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"UnqualifiedFieldAccess\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"FinalFieldAssignment\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UninitializedBlankFinalField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"DuplicateBlankFinalFieldInitialization\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UnresolvedVariable\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"LocalVariableHidingLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"LocalVariableHidingField\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"FieldHidingLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"FieldHidingField\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"ArgumentHidingLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"ArgumentHidingField\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"MissingSerialVersion\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"UndefinedMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"NotVisibleMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"AmbiguousMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UsingDeprecatedMethod\", new ProblemAttributes(CategorizedProblem.CAT_DEPRECATION));", "+\t\texpectedProblemAttributes.put(\"CannotAllocateVoidArray\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CannotDeclareEnumSpecialMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"CannotDefineAnnotationInLocalType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CannotDefineDimensionExpressionsWithInit\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CannotDefineEnumInLocalType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CannotDefineInterfaceInLocalType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CannotDefineStaticInitializerInLocalType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CannotExtendEnum\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"CannotHideAnInstanceMethodWithAStaticMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"CannotImportPackage\", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));", "+\t\texpectedProblemAttributes.put(\"CannotInvokeSuperConstructorInEnum\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"CannotOverrideAStaticMethodWithAnInstanceMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"CannotReadSource\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CannotReturnInInitializer\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CannotThrowNull\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CannotThrowType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"CannotUseSuperInCodeSnippet\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"ClassExtendFinalClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"CodeCannotBeReached\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CodeSnippetMissingClass\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"CodeSnippetMissingMethod\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"ComparingIdentical\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"ConflictingImport\", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));", "+\t\texpectedProblemAttributes.put(\"ConstructorVarargsArgumentNeedCast\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"CorruptedSignature\", new ProblemAttributes(CategorizedProblem.CAT_BUILDPATH));", "+\t\texpectedProblemAttributes.put(\"DeadCode\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"VoidMethodReturnsValue\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"MethodReturnsVoid\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"MethodRequiresBody\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"ShouldReturnValue\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"MethodButWithConstructorName\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"MissingReturnType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"BodyForNativeMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"BodyForAbstractMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"NoMessageSendOnBaseType\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"ParameterMismatch\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"NoMessageSendOnArrayType\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"NonStaticAccessToStaticMethod\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"UnusedPrivateMethod\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"DisallowedTargetForAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DiscouragedReference\", new ProblemAttributes(CategorizedProblem.CAT_RESTRICTION));", "+\t\texpectedProblemAttributes.put(\"DuplicateAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DuplicateAnnotationMember\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"DuplicateBlankFinalFieldInitialization\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"DuplicateBounds\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DuplicateCase\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"DuplicateDefaultCase\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"DuplicateField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"DuplicateFinalLocalInitialization\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"DuplicateImport\", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));", "+\t\texpectedProblemAttributes.put(\"DuplicateLabel\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"DuplicateMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"DuplicateMethodErasure\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DuplicateModifierForArgument\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"DuplicateModifierForField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"DuplicateModifierForMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"DuplicateModifierForType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DuplicateModifierForVariable\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"DuplicateNestedType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DuplicateParameterizedMethods\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"DuplicateSuperInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DuplicateTargetInTargetAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"DuplicateTypes\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DuplicateTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"EmptyControlFlowStatement\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"EnclosingInstanceInConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"EndOfSource\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"EnumAbstractMethodMustBeImplemented\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"EnumConstantCannotDefineAbstractMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"EnumConstantMustImplementAbstractMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"EnumConstantsCannotBeSurroundedByParenthesis\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"EnumStaticFieldInInInitializerContext\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"EnumSwitchCannotTargetField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"ExceptionTypeAmbiguous\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ExceptionTypeInheritedNameHidesEnclosingName\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ExceptionTypeInternalNameProvided\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ExceptionTypeNotFound\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ExceptionTypeNotVisible\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ExpressionShouldBeAVariable\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ExternalProblemFixable\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"ExternalProblemNotFixable\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"FallthroughCase\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"FieldHidingField\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"FieldHidingLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"FieldMissingDeprecatedAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"FieldTypeAmbiguous\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"FieldTypeInheritedNameHidesEnclosingName\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"FieldTypeInternalNameProvided\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"FieldTypeNotFound\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"FieldTypeNotVisible\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"FinalBoundForTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"FinalFieldAssignment\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"FinallyMustCompleteNormally\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"FinalMethodCannotBeOverridden\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"FinalOuterLocalAssignment\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"ForbiddenReference\", new ProblemAttributes(CategorizedProblem.CAT_RESTRICTION));", "+\t\texpectedProblemAttributes.put(\"GenericConstructorTypeArgumentMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"GenericMethodTypeArgumentMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"GenericTypeCannotExtendThrowable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"HidingEnclosingType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"HierarchyCircularity\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"HierarchyCircularitySelfReference\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"HierarchyHasProblems\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalAbstractModifierCombinationForMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalAccessFromTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalCast\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalClassLiteralForTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalDimension\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"IllegalEnclosingInstanceSpecification\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalExtendedDimensions\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalExtendedDimensionsForVarArgs\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"IllegalGenericArray\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalInstanceofParameterizedType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"IllegalInstanceofTypeParameter\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierCombinationFinalAbstractForClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierCombinationFinalVolatileForField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationField\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForArgument\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForEnum\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForEnumConstant\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForEnumConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForInterfaceField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForInterfaceMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForLocalClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForLocalEnum\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberEnum\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForVariable\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalPrimitiveOrArrayTypeForEnclosingInstance\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalQualifiedEnumConstantLabel\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalQualifiedParameterizedTypeAllocation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalStaticModifierForMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalTypeVariableSuperReference\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"IllegalUsageOfQualifiedTypeReference\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"IllegalVararg\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierForInterfaceMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"ImportAmbiguous\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ImportInheritedNameHidesEnclosingName\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ImportInternalNameProvided\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ImportNotFound\", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));", "+\t\texpectedProblemAttributes.put(\"ImportNotVisible\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInInheritedMethodThrowsClause\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInThrowsClause\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"IncompatibleReturnType\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"IncompatibleReturnTypeForNonInheritedInterfaceMethod\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"IncompatibleTypesInConditionalOperator\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IncompatibleTypesInEqualityOperator\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IncompatibleTypesInForeach\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedMethod\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IncorrectEnclosingInstanceReference\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IncorrectSwitchType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"IndirectAccessToStaticField\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"MissingTypeInMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"MissingTypeInConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UndefinedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"NotVisibleConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"AmbiguousConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UsingDeprecatedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_DEPRECATION));", "-\t\texpectedProblemAttributes.put(\"UnusedPrivateConstructor\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"IndirectAccessToStaticType\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"InheritedFieldHidesEnclosingName\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"InheritedIncompatibleReturnType\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"InheritedMethodHidesEnclosingName\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"InheritedMethodReducesVisibility\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"InheritedTypeHidesEnclosingName\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"InitializerMustCompleteNormally\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"RecursiveConstructorInvocation\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"ThisSuperDuringConstructorInvocation\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"InvalidExplicitConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"UndefinedConstructorInDefaultConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"NotVisibleConstructorInDefaultConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"AmbiguousConstructorInDefaultConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UndefinedConstructorInImplicitConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"NotVisibleConstructorInImplicitConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"AmbiguousConstructorInImplicitConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UnhandledExceptionInDefaultConstructor\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"UnhandledExceptionInImplicitConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"ArrayReferenceRequired\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"NoImplicitStringConversionForCharArrayExpression\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"StringConstantIsExceedingUtf8Limit\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"NonConstantExpression\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"NumericValueOutOfRange\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"IllegalCast\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"InvalidClassInstantiation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"CannotDefineDimensionExpressionsWithInit\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"MustDefineEitherDimensionExpressionsOrInitializer\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"InvalidOperator\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"CodeCannotBeReached\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"CannotReturnInInitializer\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"InitializerMustCompleteNormally\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"InvalidVoidExpression\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"MaskedCatch\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"DuplicateDefaultCase\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"UnreachableCatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"UnhandledException\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IncorrectSwitchType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"DuplicateCase\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"DuplicateLabel\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"InterfaceAmbiguous\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"InterfaceCannotHaveConstructors\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InterfaceCannotHaveInitializers\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"InterfaceInheritedNameHidesEnclosingName\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"InterfaceInternalNameProvided\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"InterfaceNotFound\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"InterfaceNotVisible\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"InternalTypeNameProvided\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"InvalidAnnotationMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"InvalidContinue\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"UndefinedLabel\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"InvalidTypeToSynchronized\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"InvalidNullToSynchronized\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"CannotThrowNull\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"AssignmentHasNoEffect\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"PossibleAccidentalBooleanAssignment\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"SuperfluousSemicolon\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"UnnecessaryCast\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "-\t\texpectedProblemAttributes.put(\"UnnecessaryArgumentCast\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"UnnecessaryInstanceof\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "-\t\texpectedProblemAttributes.put(\"FinallyMustCompleteNormally\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"UnusedMethodDeclaredThrownException\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "-\t\texpectedProblemAttributes.put(\"UnusedConstructorDeclaredThrownException\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "-\t\texpectedProblemAttributes.put(\"EmptyControlFlowStatement\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"UnnecessaryElse\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"InvalidCharacterConstant\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidClassInstantiation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"InvalidContinue\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"InvalidDigit\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidEncoding\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"InvalidEscape\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidExplicitConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidExpressionAsStatement\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidFileNameForPackageAnnotations\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidFloat\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidHexa\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidHighSurrogate\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidInput\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidLowSurrogate\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidNullToSynchronized\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"InvalidOctal\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidOperator\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"InvalidParameterizedExceptionType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"InvalidParenthesizedExpression\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidTypeExpression\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"InvalidTypeForCollection\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"InvalidTypeForStaticImport\", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));", "+\t\texpectedProblemAttributes.put(\"InvalidTypeToSynchronized\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"InvalidTypeVariableExceptionType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"InvalidUnaryExpression\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUnicodeEscape\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfAnnotationDeclarations\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfAnnotations\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfEnumDeclarations\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfForeachStatements\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfStaticImports\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeArguments\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParameters\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParametersForAnnotationDeclaration\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParametersForEnumDeclaration\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfVarargs\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfWildcard\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidVoidExpression\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"IsClassPathCorrect\", new ProblemAttributes(CategorizedProblem.CAT_BUILDPATH));", "+\t\texpectedProblemAttributes.put(\"JavadocAmbiguousConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocAmbiguousField\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocAmbiguousMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocAmbiguousMethodReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocAmbiguousType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocDuplicateParamName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocDuplicateReturnTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocDuplicateTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocDuplicateThrowsClassName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocEmptyReturnTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocGenericConstructorTypeArgumentMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocGenericMethodTypeArgumentMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocHiddenReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocIncorrectArityForParameterizedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocIncorrectArityForParameterizedMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInheritedFieldHidesEnclosingName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInheritedMethodHidesEnclosingName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInheritedNameHidesEnclosingTypeName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInternalTypeNameProvided\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidMemberTypeQualification\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidParamName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidParamTagName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidParamTagTypeParameter\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeArgs\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeHref\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeUrlReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidThrowsClass\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidThrowsClassName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocInvalidValueReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMalformedSeeReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMessagePrefix\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"JavadocMissing\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingHashCharacter\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingIdentifier\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingParamName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingParamTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingReturnTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingSeeReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingTagDescription\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingThrowsClassName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocMissingThrowsTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNoMessageSendOnArrayType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNoMessageSendOnBaseType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNonGenericConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNonGenericMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNonStaticTypeFromStaticInvocation\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNotVisibleConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNotVisibleField\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNotVisibleMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocNotVisibleType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocParameterizedConstructorArgumentTypeMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocParameterizedMethodArgumentTypeMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocParameterMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocTypeArgumentsForRawGenericConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocTypeArgumentsForRawGenericMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUndefinedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUndefinedField\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUndefinedMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUndefinedType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUnexpectedTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUnexpectedText\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUnterminatedInlineTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedField\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "+\t\texpectedProblemAttributes.put(\"LocalVariableCannotBeNull\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"LocalVariableCanOnlyBeNull\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"LocalVariableHidingField\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"LocalVariableHidingLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"LocalVariableIsNeverUsed\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"LocalVariableMayBeNull\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"MaskedCatch\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"MethodButWithConstructorName\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"MethodMissingDeprecatedAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"MethodMustOverride\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"MethodMustOverrideOrImplement\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"MethodNameClash\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"MethodReducesVisibility\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"MethodRequiresBody\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"MethodReturnsVoid\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"MethodVarargsArgumentNeedCast\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"MissingArgumentsForParameterizedMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"MissingEnclosingInstance\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"MissingEnclosingInstanceForConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"MissingEnumConstantCase\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"MissingOverrideAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"MissingOverrideAnnotationForInterfaceMethodImplementation\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"MissingReturnType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"MissingSemiColon\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"MissingSerialVersion\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"MissingSynchronizedModifierInInheritedMethod\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"MissingTypeInConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"MissingTypeInMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"MissingValueForAnnotationMember\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"MustDefineEitherDimensionExpressionsOrInitializer\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"MustSpecifyPackage\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"NativeMethodsCannotBeStrictfp\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"NeedToEmulateConstructorAccess\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"NeedToEmulateConstructorAccess\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"FallthroughCase\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"InheritedMethodHidesEnclosingName\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"InheritedFieldHidesEnclosingName\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"InheritedTypeHidesEnclosingName\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalUsageOfQualifiedTypeReference\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"UnusedLabel\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "-\t\texpectedProblemAttributes.put(\"ThisInStaticContext\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"StaticMethodRequested\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalDimension\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"InvalidTypeExpression\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"ParsingError\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorNoSuggestion\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUnaryExpression\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InterfaceCannotHaveConstructors\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ArrayConstantsOnlyInArrayInitializers\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorOnKeyword\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorOnKeywordNoSuggestion\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ComparingIdentical\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"UnmatchedBracket\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"NoAdditionalBoundAfterTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"InvalidExpressionAsStatement\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ExpressionShouldBeAVariable\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"MissingSemiColon\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidParenthesizedExpression\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorInsertTokenBefore\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorInsertTokenAfter\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"NoImplicitStringConversionForCharArrayExpression\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"NoMessageSendOnArrayType\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"NoMessageSendOnBaseType\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"NonBlankFinalLocalAssignment\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"NonConstantExpression\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"NonExternalizedStringLiteral\", new ProblemAttributes(CategorizedProblem.CAT_NLS));", "+\t\texpectedProblemAttributes.put(\"NonGenericConstructor\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"NonGenericMethod\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"NonGenericType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"NonNullLocalVariableComparisonYieldsFalse\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"NonStaticAccessToStaticField\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"NonStaticAccessToStaticMethod\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"NonStaticContextForEnumMemberType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"NonStaticFieldFromStaticInvocation\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"NonStaticTypeFromStaticInvocation\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"NotVisibleConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"NotVisibleConstructorInDefaultConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"NotVisibleConstructorInImplicitConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"NotVisibleField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"NotVisibleMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"NotVisibleType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"NullLocalVariableComparisonYieldsFalse\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"NullLocalVariableInstanceofYieldsFalse\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"NullLocalVariableReference\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"NullSourceString\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"NumericValueOutOfRange\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"ObjectCannotBeGeneric\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"ObjectCannotHaveSuperTypes\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"ObjectHasNoSuperclass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"ObjectMustBeClass\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"OuterLocalMustBeFinal\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"OverridingDeprecatedMethod\", new ProblemAttributes(CategorizedProblem.CAT_DEPRECATION));", "+\t\texpectedProblemAttributes.put(\"OverridingMethodWithoutSuperInvocation\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"OverridingNonVisibleMethod\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"PackageCollidesWithType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"PackageIsNotExpectedPackage\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"ParameterAssignment\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"ParameterizedConstructorArgumentTypeMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"ParameterizedMethodArgumentTypeMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"ParameterMismatch\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"ParsingError\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorMergeTokens\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorInvalidToken\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorMisplacedConstruct\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorReplaceTokens\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorNoSuggestionForTokens\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorUnexpectedEOF\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"ParsingErrorInsertToCompleteScope\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"EndOfSource\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidHexa\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidOctal\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidCharacterConstant\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidEscape\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidInput\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUnicodeEscape\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidFloat\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"NullSourceString\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"UnterminatedString\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"UnterminatedComment\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"NonExternalizedStringLiteral\", new ProblemAttributes(CategorizedProblem.CAT_NLS));", "-\t\texpectedProblemAttributes.put(\"InvalidDigit\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidLowSurrogate\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidHighSurrogate\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"UnnecessaryNLSTag\", new ProblemAttributes(CategorizedProblem.CAT_NLS));", "-\t\texpectedProblemAttributes.put(\"DiscouragedReference\", new ProblemAttributes(CategorizedProblem.CAT_RESTRICTION));", "-\t\texpectedProblemAttributes.put(\"InterfaceCannotHaveInitializers\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"DuplicateModifierForType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForLocalClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"ForbiddenReference\", new ProblemAttributes(CategorizedProblem.CAT_RESTRICTION));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierCombinationFinalAbstractForClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierForInterfaceMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalStaticModifierForMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"SuperclassMustBeAClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"ClassExtendFinalClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"DuplicateSuperInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"SuperInterfaceMustBeAnInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"HierarchyCircularitySelfReference\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"HierarchyCircularity\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"HidingEnclosingType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"DuplicateNestedType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"CannotThrowType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"PackageCollidesWithType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"TypeCollidesWithPackage\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"DuplicateTypes\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IsClassPathCorrect\", new ProblemAttributes(CategorizedProblem.CAT_BUILDPATH));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorInsertToCompleteScope\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorInsertTokenAfter\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorInsertTokenBefore\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorInvalidToken\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorMergeTokens\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorMisplacedConstruct\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorNoSuggestion\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorNoSuggestionForTokens\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorOnKeyword\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorOnKeywordNoSuggestion\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorReplaceTokens\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParsingErrorUnexpectedEOF\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"PossibleAccidentalBooleanAssignment\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"PotentialNullLocalVariableReference\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"MustSpecifyPackage\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"HierarchyHasProblems\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"PackageIsNotExpectedPackage\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"ObjectCannotHaveSuperTypes\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"ObjectMustBeClass\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"RawMemberTypeCannotBeParameterized\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"RawTypeReference\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "+\t\texpectedProblemAttributes.put(\"RecursiveConstructorInvocation\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"RedefinedArgument\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"RedefinedLocal\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"RedundantLocalVariableNullAssignment\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"RedundantNullCheckOnNonNullLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"RedundantNullCheckOnNullLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"ShouldImplementHashcode\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"AbstractMethodsInConcreteClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"AbstractMethodInEnum\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"DeadCode\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"SuperclassNotFound\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"SuperclassNotVisible\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"SuperclassAmbiguous\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"SuperclassInternalNameProvided\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"SuperclassInheritedNameHidesEnclosingName\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"InterfaceNotFound\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"InterfaceNotVisible\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"InterfaceAmbiguous\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"InterfaceInternalNameProvided\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"InterfaceInheritedNameHidesEnclosingName\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"DuplicateField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"DuplicateModifierForField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForInterfaceField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierCombinationFinalVolatileForField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UnexpectedStaticModifierForField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"FieldTypeNotFound\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"FieldTypeNotVisible\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"FieldTypeAmbiguous\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"FieldTypeInternalNameProvided\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"FieldTypeInheritedNameHidesEnclosingName\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"DuplicateMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForArgument\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"DuplicateModifierForMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForInterfaceMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalVisibilityModifierCombinationForMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UnexpectedStaticModifierForMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalAbstractModifierCombinationForMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"AbstractMethodInAbstractClass\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeCannotBeVoid\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeCannotBeVoidArray\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ReferenceToForwardField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"ReferenceToForwardTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"ReturnTypeAmbiguous\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"NativeMethodsCannotBeStrictfp\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"DuplicateModifierForArgument\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeNotFound\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeNotVisible\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeAmbiguous\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeInternalNameProvided\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ArgumentTypeInheritedNameHidesEnclosingName\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ExceptionTypeNotFound\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ExceptionTypeNotVisible\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ExceptionTypeAmbiguous\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ExceptionTypeInternalNameProvided\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ExceptionTypeInheritedNameHidesEnclosingName\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ReturnTypeInheritedNameHidesEnclosingName\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"ReturnTypeInternalNameProvided\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ReturnTypeAmbiguous\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ReturnTypeInternalNameProvided\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ReturnTypeInheritedNameHidesEnclosingName\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ConflictingImport\", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));", "-\t\texpectedProblemAttributes.put(\"DuplicateImport\", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));", "-\t\texpectedProblemAttributes.put(\"CannotImportPackage\", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));", "-\t\texpectedProblemAttributes.put(\"UnusedImport\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "-\t\texpectedProblemAttributes.put(\"ImportNotFound\", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));", "-\t\texpectedProblemAttributes.put(\"ImportNotVisible\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ImportAmbiguous\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ImportInternalNameProvided\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"ImportInheritedNameHidesEnclosingName\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"InvalidTypeForStaticImport\", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));", "-\t\texpectedProblemAttributes.put(\"DuplicateModifierForVariable\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForVariable\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"LocalVariableCannotBeNull\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"LocalVariableCanOnlyBeNull\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"LocalVariableMayBeNull\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"AbstractMethodMustBeImplemented\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"FinalMethodCannotBeOverridden\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInThrowsClause\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInInheritedMethodThrowsClause\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IncompatibleReturnType\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"InheritedMethodReducesVisibility\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"CannotOverrideAStaticMethodWithAnInstanceMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"CannotHideAnInstanceMethodWithAStaticMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"ShouldImplementHashcode\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"ShouldReturnValue\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"MethodReducesVisibility\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"OverridingNonVisibleMethod\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"AbstractMethodCannotBeOverridden\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"OverridingDeprecatedMethod\", new ProblemAttributes(CategorizedProblem.CAT_DEPRECATION));", "-\t\texpectedProblemAttributes.put(\"IncompatibleReturnTypeForNonInheritedInterfaceMethod\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"IllegalVararg\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"OverridingMethodWithoutSuperInvocation\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"MissingSynchronizedModifierInInheritedMethod\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"AbstractMethodMustBeImplementedOverConcreteMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"InheritedIncompatibleReturnType\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"CodeSnippetMissingClass\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"CodeSnippetMissingMethod\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"CannotUseSuperInCodeSnippet\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"TooManyConstantsInConstantPool\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"TooManyBytesForStringConstant\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"TooManyFields\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"TooManyMethods\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"UseAssertAsAnIdentifier\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"UseEnumAsAnIdentifier\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"EnumConstantsCannotBeSurroundedByParenthesis\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"Task\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"NullLocalVariableReference\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"PotentialNullLocalVariableReference\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"RedundantNullCheckOnNullLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"NullLocalVariableComparisonYieldsFalse\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"RedundantLocalVariableNullAssignment\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"NullLocalVariableInstanceofYieldsFalse\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"RedundantNullCheckOnNonNullLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"NonNullLocalVariableComparisonYieldsFalse\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"UndocumentedEmptyBlock\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeUrlReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingTagDescription\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocDuplicateTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocHiddenReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidMemberTypeQualification\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingIdentifier\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNonStaticTypeFromStaticInvocation\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidParamTagTypeParameter\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUnexpectedTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingParamTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingParamName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocDuplicateParamName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidParamName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingReturnTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocDuplicateReturnTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingThrowsTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingThrowsClassName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidThrowsClass\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocDuplicateThrowsClassName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidThrowsClassName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingSeeReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeHref\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidSeeArgs\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMissing\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUndefinedField\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNotVisibleField\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocAmbiguousField\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedField\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUndefinedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNotVisibleConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocAmbiguousConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUndefinedMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNotVisibleMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocAmbiguousMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNoMessageSendOnBaseType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocParameterMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNoMessageSendOnArrayType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUndefinedType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNotVisibleType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocAmbiguousType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUsingDeprecatedType\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInternalTypeNameProvided\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInheritedMethodHidesEnclosingName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInheritedFieldHidesEnclosingName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInheritedNameHidesEnclosingTypeName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocAmbiguousMethodReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUnterminatedInlineTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMalformedSeeReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocMessagePrefix\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"JavadocMissingHashCharacter\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocEmptyReturnTag\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidValueReference\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocUnexpectedText\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocInvalidParamTagName\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"DuplicateTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"IllegalTypeVariableSuperReference\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"NonStaticTypeFromStaticInvocation\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"ObjectCannotBeGeneric\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"NonGenericType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"TypeArgumentMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"DuplicateMethodErasure\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"ReferenceToForwardTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"BoundMustBeAnInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"UnsafeRawConstructorInvocation\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "-\t\texpectedProblemAttributes.put(\"UnsafeRawMethodInvocation\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "-\t\texpectedProblemAttributes.put(\"UnsafeTypeConversion\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "-\t\texpectedProblemAttributes.put(\"InvalidTypeVariableExceptionType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"InvalidParameterizedExceptionType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalGenericArray\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"UnsafeRawFieldAssignment\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "-\t\texpectedProblemAttributes.put(\"FinalBoundForTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"UndefinedTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"SuperInterfacesCollide\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"WildcardConstructorInvocation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"WildcardMethodInvocation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"WildcardFieldAssignment\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"GenericMethodTypeArgumentMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"GenericConstructorTypeArgumentMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"UnsafeGenericCast\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "-\t\texpectedProblemAttributes.put(\"IllegalInstanceofParameterizedType\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"IllegalInstanceofTypeParameter\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"NonGenericMethod\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedMethod\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"ParameterizedMethodArgumentTypeMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"NonGenericConstructor\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IncorrectArityForParameterizedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"ParameterizedConstructorArgumentTypeMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"TypeArgumentsForRawGenericMethod\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"TypeArgumentsForRawGenericConstructor\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"SuperTypeUsingWildcard\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"GenericTypeCannotExtendThrowable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalClassLiteralForTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"UnsafeReturnTypeOverride\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "-\t\texpectedProblemAttributes.put(\"MethodNameClash\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"RawMemberTypeCannotBeParameterized\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"MissingArgumentsForParameterizedMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"BoundHasConflictingArguments\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"DuplicateParameterizedMethods\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalQualifiedParameterizedTypeAllocation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"DuplicateBounds\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"BoundCannotBeArray\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"StaticMethodRequested\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"StringConstantIsExceedingUtf8Limit\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"SuperclassAmbiguous\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"SuperclassInheritedNameHidesEnclosingName\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"SuperclassInternalNameProvided\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"SuperclassMustBeAClass\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"SuperclassNotFound\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"SuperclassNotVisible\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"SuperfluousSemicolon\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"SuperInterfaceMustBeAnInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"SuperInterfacesCollide\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"SuperTypeUsingWildcard\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"Task\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"ThisInStaticContext\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"ThisSuperDuringConstructorInvocation\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"TooManyArgumentSlots\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"TooManyArrayDimensions\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"TooManyBytesForStringConstant\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"TooManyConstantsInConstantPool\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"TooManyFields\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"TooManyLocalVariableSlots\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"TooManyMethods\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"TooManySyntheticArgumentSlots\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"TypeArgumentMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"TypeArgumentsForRawGenericConstructor\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"TypeArgumentsForRawGenericMethod\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"TypeCollidesWithPackage\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"TypeHidingType\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"TypeHidingTypeParameterFromMethod\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"TypeHidingTypeParameterFromType\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"TypeMismatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"TypeMissingDeprecatedAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"TypeParameterHidingType\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "+\t\texpectedProblemAttributes.put(\"UnboxingConversion\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"UndefinedAnnotationMember\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UndefinedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UndefinedConstructorInDefaultConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UndefinedConstructorInImplicitConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UndefinedField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UndefinedLabel\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"UndefinedMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UndefinedName\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UndefinedType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"UndefinedTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"UndocumentedEmptyBlock\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"UnexpectedStaticModifierForField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UnexpectedStaticModifierForMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UnhandledException\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"UnhandledExceptionInDefaultConstructor\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"UnhandledExceptionInImplicitConstructorCall\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"UnhandledWarningToken\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UninitializedBlankFinalField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UninitializedLocalVariable\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"UnmatchedBracket\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"UnnecessaryArgumentCast\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"UnnecessaryCast\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnnecessaryElse\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnnecessaryInstanceof\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnnecessaryNLSTag\", new ProblemAttributes(CategorizedProblem.CAT_NLS));", "+\t\texpectedProblemAttributes.put(\"UnqualifiedFieldAccess\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"UnreachableCatch\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"UnresolvedVariable\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UnsafeGenericArrayForVarargs\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "+\t\texpectedProblemAttributes.put(\"UnsafeGenericCast\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "+\t\texpectedProblemAttributes.put(\"UnsafeRawConstructorInvocation\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "+\t\texpectedProblemAttributes.put(\"UnsafeRawFieldAssignment\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "-\t\texpectedProblemAttributes.put(\"TypeParameterHidingType\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"RawTypeReference\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "-\t\texpectedProblemAttributes.put(\"NoAdditionalBoundAfterTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"UnsafeGenericArrayForVarargs\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "-\t\texpectedProblemAttributes.put(\"IllegalAccessFromTypeVariable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"TypeHidingTypeParameterFromType\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"TypeHidingTypeParameterFromMethod\", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfWildcard\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"UnusedTypeArgumentsForMethodInvocation\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IncompatibleTypesInForeach\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"InvalidTypeForCollection\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParameters\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfStaticImports\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfForeachStatements\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeArguments\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfEnumDeclarations\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfVarargs\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfAnnotations\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfAnnotationDeclarations\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParametersForAnnotationDeclaration\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeParametersForEnumDeclaration\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalExtendedDimensions\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"InvalidFileNameForPackageAnnotations\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"InvalidAnnotationMemberType\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"AnnotationCircularitySelfReference\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"AnnotationCircularity\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"DuplicateAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"MissingValueForAnnotationMember\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"DuplicateAnnotationMember\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"UndefinedAnnotationMember\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeClassLiteral\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeConstant\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"AnnotationFieldNeedConstantInitialization\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForAnnotationField\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"AnnotationCannotOverrideMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"AnnotationMembersCannotHaveParameters\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"AnnotationMembersCannotHaveTypeParameters\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveSuperclass\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveSuperinterfaces\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"DuplicateTargetInTargetAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"DisallowedTargetForAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"MethodMustOverride\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"AnnotationTypeDeclarationCannotHaveConstructor\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"AnnotationTypeUsedAsSuperInterface\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"MissingOverrideAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"FieldMissingDeprecatedAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"MethodMissingDeprecatedAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"TypeMissingDeprecatedAnnotation\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"UnhandledWarningToken\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "-\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeArrayInitializer\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"AnnotationValueMustBeAnEnumConstant\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"MethodMustOverrideOrImplement\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"UnusedWarningToken\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnsafeRawMethodInvocation\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "+\t\texpectedProblemAttributes.put(\"UnsafeReturnTypeOverride\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "+\t\texpectedProblemAttributes.put(\"UnsafeTypeConversion\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "+\t\texpectedProblemAttributes.put(\"UnterminatedComment\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"UnterminatedString\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"UnusedConstructorDeclaredThrownException\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnusedImport\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnusedLabel\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnusedMethodDeclaredThrownException\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnusedPrivateConstructor\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnusedPrivateField\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnusedPrivateMethod\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UnusedPrivateType\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "-\t\texpectedProblemAttributes.put(\"CorruptedSignature\", new ProblemAttributes(CategorizedProblem.CAT_BUILDPATH));", "-\t\texpectedProblemAttributes.put(\"InvalidEncoding\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"CannotReadSource\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"BoxingConversion\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"UnboxingConversion\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForEnum\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForEnumConstant\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForLocalEnum\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForMemberEnum\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"CannotDeclareEnumSpecialMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalQualifiedEnumConstantLabel\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"CannotExtendEnum\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"CannotInvokeSuperConstructorInEnum\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"EnumAbstractMethodMustBeImplemented\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"EnumSwitchCannotTargetField\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalModifierForEnumConstructor\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"MissingEnumConstantCase\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"EnumStaticFieldInInInitializerContext\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"EnumConstantMustImplementAbstractMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"EnumConstantCannotDefineAbstractMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"IllegalExtendedDimensionsForVarArgs\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "-\t\texpectedProblemAttributes.put(\"MethodVarargsArgumentNeedCast\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"ConstructorVarargsArgumentNeedCast\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"UnusedTypeArgumentsForMethodInvocation\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"UnusedWarningToken\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"UseAssertAsAnIdentifier\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"UseEnumAsAnIdentifier\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"UsingDeprecatedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_DEPRECATION));", "+\t\texpectedProblemAttributes.put(\"UsingDeprecatedField\", new ProblemAttributes(CategorizedProblem.CAT_DEPRECATION));", "+\t\texpectedProblemAttributes.put(\"UsingDeprecatedMethod\", new ProblemAttributes(CategorizedProblem.CAT_DEPRECATION));", "+\t\texpectedProblemAttributes.put(\"UsingDeprecatedType\", new ProblemAttributes(CategorizedProblem.CAT_DEPRECATION));", "-\t\texpectedProblemAttributes.put(\"JavadocGenericMethodTypeArgumentMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNonGenericMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocIncorrectArityForParameterizedMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocParameterizedMethodArgumentTypeMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocTypeArgumentsForRawGenericMethod\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocGenericConstructorTypeArgumentMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocNonGenericConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocIncorrectArityForParameterizedConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocParameterizedConstructorArgumentTypeMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocTypeArgumentsForRawGenericConstructor\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"ExternalProblemNotFixable\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "-\t\texpectedProblemAttributes.put(\"ExternalProblemFixable\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"VariableTypeCannotBeVoid\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"VariableTypeCannotBeVoidArray\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"VoidMethodReturnsValue\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"WildcardConstructorInvocation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"WildcardFieldAssignment\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"WildcardMethodInvocation\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\t\t\t\tProblemAttributes expectedAttributes = (ProblemAttributes) expectedProblemAttributes.get(field.getName());", "+\t\t\t\t\tString name = field.getName();", "+\t\t\t\t\tProblemAttributes expectedAttributes = (ProblemAttributes) expectedProblemAttributes.get(name);", "-\t\t\t\t\t\tfailures.append(\"missing expected problem attributes for problem \" + field.getName() + \"\\n\");", "+\t\t\t\t\t\tfailures.append(\"missing expected problem attributes for problem \" + name + \"\\n\");", "-\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\\n\");", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + name + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\\n\");", "-\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\\n\");", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + name + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\\n\");", "-\t\t\t\t\t\t\tfailures.append(\"category mismatch for problem \" + field.getName() + \" (expected \" + categoryName(expectedAttributes.category) + \", got \" + categoryName(actualCategory) + \")\\n\");", "+\t\t\t\t\t\t\tfailures.append(\"category mismatch for problem \" + name + \" (expected \" + categoryName(expectedAttributes.category) + \", got \" + categoryName(actualCategory) + \")\\n\");", "-\t\t\t\t\t\t\tSystem.err.println(\"\\t\" + field.getName());", "+\t\t\t\t\t\t\tSystem.err.println(\"\\t\" + name);", "-\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", DEPRECATED);\\n\");", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + name + \"\\\", DEPRECATED);\\n\");"]}], "num": 45094}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba4d724ee55f64cd6a8535f9fd691bdb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5751fa29aa46baa46194d280c3ad3a05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "62963aabc698cdd12bc1bf2bd37eac8d72bccd2f", "commitAfterChange": "4e65c4119dadcaa4c5efef86f1373d469b137c02", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static boolean canSeeFocus(IJavaElement focus, boolean isPolymorphicSearch, IPath projectOrJarPath)", "signatureAfterChange": " public static boolean canSeeFocus(IJavaElement focus, boolean isPolymorphicSearch, IPath projectOrJarPath)", "diff": ["+\t\tIClasspathEntry[] focusEntries = null;", "+\t\tif (isPolymorphicSearch) {", "+\t\t\tJavaProject focusProject = focus instanceof JarPackageFragmentRoot ? (JavaProject) focus.getParent() : (JavaProject) focus;", "+\t\t\tfocusEntries = focusProject.getExpandedClasspath(true);", "+\t\t}", "-\t\tif (project == null) {", "-\t\t\t// projectOrJarPath is a jar", "-\t\t\t// it can see the focus only if it is on the classpath of a project that can see the focus", "-\t\t\tIJavaProject[] allProjects = model.getJavaProjects();", "-\t\t\tfor (int i = 0, length = allProjects.length; i < length; i++) {", "-\t\t\t\tJavaProject otherProject = (JavaProject) allProjects[i];", "-\t\t\t\tIClasspathEntry[] entries = otherProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\t\t\tfor (int j = 0, length2 = entries.length; j < length2; j++) {", "-\t\t\t\t\tIClasspathEntry entry = entries[j];", "-\t\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) ", "-\t\t\t\t\t\t&& entry.getPath().equals(projectOrJarPath)) {", "-\t\t\t\t\t\t\tif (canSeeFocus(focus, isPolymorphicSearch, otherProject.getPath())) {", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t}", "-\t\t// projectOrJarPath is a project", "-\t\tJavaProject focusProject = focus instanceof JarPackageFragmentRoot ? (JavaProject)focus.getParent() : (JavaProject)focus;", "-\t\tif (isPolymorphicSearch) {", "-\t\t\t// look for refering project", "-\t\t\tIClasspathEntry[] entries = focusProject.getExpandedClasspath(true);", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "-\t\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) ", "-\t\t\t\t\t&& entry.getPath().equals(projectOrJarPath)) {", "+\t\tif (project != null)", "+\t\t\treturn canSeeFocus(focus, (JavaProject) project, focusEntries);", "+", "+\t\t// projectOrJarPath is a jar", "+\t\t// it can see the focus only if it is on the classpath of a project that can see the focus", "+\t\tIJavaProject[] allProjects = model.getJavaProjects();", "+\t\tfor (int i = 0, length = allProjects.length; i < length; i++) {", "+\t\t\tJavaProject otherProject = (JavaProject) allProjects[i];", "+\t\t\tIClasspathEntry[] entries = otherProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\tfor (int j = 0, length2 = entries.length; j < length2; j++) {", "+\t\t\t\tIClasspathEntry entry = entries[j];", "+\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && entry.getPath().equals(projectOrJarPath))", "+\t\t\t\t\tif (canSeeFocus(focus, otherProject, focusEntries))", "-\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t} catch (JavaModelException e) {", "+\t\treturn false;", "+\t}", "+}", "-\t\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);", "-\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) ", "-\t\t\t\t\t&& entry.getPath().equals(focusPath)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t} ", "-\t\t// focus is part of a project", "-\t\tif (focus.equals(project)) {", "-\t\t\treturn true;", "-\t\t} ", "-\t\t// look for dependent projects", "-\t\tIPath focusPath = focusProject.getProject().getFullPath();", "-\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);", "-\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "-\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) ", "-\t\t\t\t&& entry.getPath().equals(focusPath)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61281c26c6ca31713975d81959fae4c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  protected void resolveAnnotations(Scope scope)", "signatureAfterChange": "  protected void resolveAnnotations(Scope scope)", "diff": ["-\t\t\tlong tagBits = 0;", "-\t\t\tlong[] tagBitsPerDimension = null;", "-\t\t\tboolean evalNullAnnotations = scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled;", "-\t\t\tboolean isArrayReference = dimensions > 0;", "-\t\t\t\tint annotationsLevels = this.annotations.length;", "-\t\t\t\tfor (int i = 0; i < annotationsLevels; i++) {", "-\t\t\t\t\tAnnotation[] currentAnnotations = this.annotations[i];", "-\t\t\t\t\tif (currentAnnotations != null) {", "-\t\t\t\t\t\tresolveAnnotations(resolutionScope, currentAnnotations, new Annotation.TypeUseBinding(isWildcard() ? Binding.TYPE_PARAMETER : Binding.TYPE_USE));", "-\t\t\t\t\t\tif (evalNullAnnotations) {", "-\t\t\t\t\t\t\tint len = currentAnnotations.length;", "-\t\t\t\t\t\t\tfor (int j=0; j<len; j++) {", "-\t\t\t\t\t\t\t\tBinding recipient = currentAnnotations[j].recipient;", "-\t\t\t\t\t\t\t\tif (recipient instanceof Annotation.TypeUseBinding) {", "-\t\t\t\t\t\t\t\t\tlong nullTagBits = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\t\tif (nullTagBits != 0) {", "-\t\t\t\t\t\t\t\t\t\tif (isArrayReference) {", "-\t\t\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "-\t\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1]; // each dimension plus leaf component type at last position", "-\t\t\t\t\t\t\t\t\t\t\t// @NonNull Foo [][][] means the leaf component type is @NonNull:", "-\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension[dimensions] = nullTagBits;", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\ttagBits |= nullTagBits;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tTypeBinding leafComponentType = this.resolvedType.leafComponentType();", "+\t\t\t\tleafComponentType = resolveAnnotations(resolutionScope, this.annotations, leafComponentType);", "+\t\t\t\tthis.resolvedType = dimensions > 0 ? scope.environment().createArrayType(leafComponentType, dimensions) : leafComponentType;", "-", "-\t\t\t\tfor (int i = 0, length = annotationsOnDimensions.length; i < length; i++) {", "-\t\t\t\t\tAnnotation [] dimensionAnnotations = annotationsOnDimensions[i];", "-\t\t\t\t\tif (dimensionAnnotations  != null) {", "-\t\t\t\t\t\tresolveAnnotations(resolutionScope, dimensionAnnotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));", "-\t\t\t\t\t\tif (evalNullAnnotations && isArrayReference) {", "-\t\t\t\t\t\t\tint len = dimensionAnnotations.length;", "-\t\t\t\t\t\t\tfor (int j=0; j<len; j++) {", "-\t\t\t\t\t\t\t\tBinding recipient = dimensionAnnotations[j].recipient;", "-\t\t\t\t\t\t\t\tif (recipient instanceof Annotation.TypeUseBinding) {", "-\t\t\t\t\t\t\t\t\tlong nullTagBits = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\t\tif (nullTagBits != 0) {", "-\t\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "-\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1];", "-\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension[i] = nullTagBits;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.resolvedType != null && this.resolvedType.isValidBinding()) {", "-\t\t\t\tif (isArrayReference) {", "-\t\t\t\t\tif (tagBitsPerDimension != null) {", "-\t\t\t\t\t\t// TODO(stephan): wouldn't it be more efficient to store the array bindings inside the type binding rather than the environment?", "-\t\t\t\t\t\t// cf. LocalTypeBinding.createArrayType()", "-\t\t\t\t\t\tthis.resolvedType = scope.environment().createArrayType(this.resolvedType.leafComponentType(), dimensions, tagBitsPerDimension);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tif (tagBits != 0) {", "-\t\t\t\t\t\tif (!this.resolvedType.isBaseType()) {", "-\t\t\t\t\t\t\tthis.resolvedType = scope.environment().createAnnotatedType(this.resolvedType, tagBits);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// TODO(stephan) report null annotation on non-reference type", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tthis.resolvedType = resolveAnnotations(resolutionScope, annotationsOnDimensions, this.resolvedType);\t\t"]}], "num": 16753}
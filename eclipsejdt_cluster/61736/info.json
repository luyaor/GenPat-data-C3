{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2314a9af542a300aa083ee65a1708578", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fe5e24de571048afacae3d6b343c79d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "52aaa8d847622fea44892b3486d74a8d0287dfb5", "commitAfterChange": "a30c9a4ba03c988d192181c19b2fad5828f63916", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\t\t\tfor (int i = length; --i >= 0;)", "-\t\t\t\tif (!mustImplementAbstractMethod(methods[i])) return;  // have already reported problem against the concrete superclass", "-", "-\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "-\t\t\tif (typeDeclaration != null) {", "-\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(methods[0]);", "-\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "-\t\t\t} else {", "-\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "+\t\t\tfor (int i = length; --i >= 0;) {", "+\t\t\t\tif (mustImplementAbstractMethod(methods[i])) {", "+\t\t\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "+\t\t\t\t\tif (typeDeclaration != null) {", "+\t\t\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(methods[0]);", "+\t\t\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faeec6b61af2ade6539e2ad3b9d93676", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "152a293394c51fbe6006a9a8124d0f030fc29c14", "commitAfterChange": "ead61e9bfd95f9a570c62d48aea15c4f5ba0190f", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void setLastBuiltState(IProject project, Object state)", "signatureAfterChange": " \tpublic void setLastBuiltState(IProject project, Object state)", "diff": ["-\t\tif (!JavaProject.hasJavaNature(project)) return; // should never be requested on non-Java projects", "-\t\tPerProjectInfo info = getPerProjectInfo(project, true /*create if missing*/);", "-\t\tinfo.triedRead = true; // no point trying to re-read once using setter", "-\t\tinfo.savedState = state;", "+\t\tif (JavaProject.hasJavaNature(project)) {", "+\t\t\t// should never be requested on non-Java projects", "+\t\t\tPerProjectInfo info = getPerProjectInfo(project, true /*create if missing*/);", "+\t\t\tinfo.triedRead = true; // no point trying to re-read once using setter", "+\t\t\tinfo.savedState = state;", "+\t\t}"]}], "num": 61736}
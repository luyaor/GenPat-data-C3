{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cc35640bdb4e33d3d9cd60fe6c84b03", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "594028472e12052f1a3d6d7eaedf032f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "4290d9d156b3fffdf4fa47faed755763dff62df4", "commitAfterChange": "ec3d2b8d7bc5e4b4b2d91a6a1cfd252341798462", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void checkDefaultAbstractMethod(MethodBinding abstractMethod)", "signatureAfterChange": " private void checkPackagePrivateAbstractMethod(MethodBinding abstractMethod)", "diff": ["-// TODO: (kent) should rename into checkNonVisibleAbstractMethod(...) - default abstract means something else.", "-private void checkDefaultAbstractMethod(MethodBinding abstractMethod) {", "+private void checkPackagePrivateAbstractMethod(MethodBinding abstractMethod) {", "-\twhile (superType != abstractMethod.declaringClass && superType.isValidBinding()) {", "+\tdo {", "+\t\tif (!superType.isValidBinding()) return;", "+\t\tif (!superType.isAbstract()) return; // closer non abstract super type will be flagged instead", "-\t\t\tif (method.isPrivate() || method.isConstructor() || method.isDefaultAbstract() || method.isAbstract())", "+\t\t\tif (method.isPrivate() || method.isConstructor() || method.isDefaultAbstract())", "-", "-\t\t\tif (!superType.isAbstract()) return; // will report error against this type", "-", "-\t\t\t// non visible abstract methods cannot be overridden so the type must be defined abstract", "-\t\t\tthis.problemReporter().abstractMethodCannotBeOverridden(this.type, abstractMethod);", "-\t\t\treturn;", "-\t\tsuperType = superType.superclass();", "-\t}", "+\t} while ((superType = superType.superclass()) != abstractMethod.declaringClass);", "+\t// non visible abstract methods cannot be overridden so the type must be defined abstract", "+\tthis.problemReporter().abstractMethodCannotBeOverridden(this.type, abstractMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cca1e28bdf7df6c97098fc95b4e3b2a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "607ff419d62fc0f91055d1c2d16685459d9fa667", "commitAfterChange": "0cad9a75d8029433899afbdf88cbb39e8dd0618a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkPackagePrivateAbstractMethod(MethodBinding abstractMethod)", "signatureAfterChange": " void checkPackagePrivateAbstractMethod(MethodBinding abstractMethod)", "diff": ["+\t// check that the inherited abstract method (package private visibility) is implemented within the same package", "+\tPackageBinding necessaryPackage = abstractMethod.declaringClass.fPackage;", "+\tif (necessaryPackage == this.type.fPackage) return; // not a problem", "+", "-\t\tMethodBinding[] methods = superType.getMethods(selector);", "-\t\tnextMethod : for (int m = methods.length; --m >= 0;) {", "-\t\t\tMethodBinding method = methods[m];", "-\t\t\tif (!areReturnTypesEqual(method, abstractMethod) || !areParametersEqual(method, abstractMethod))", "-\t\t\t\tcontinue nextMethod;", "-\t\t\tif (method.isPrivate() || method.isConstructor() || method.isDefaultAbstract())", "-\t\t\t\tcontinue nextMethod;", "-\t\t\tif (superType.fPackage == abstractMethod.declaringClass.fPackage) return; // found concrete implementation of abstract method in same package", "+\t\tif (necessaryPackage == superType.fPackage) {", "+\t\t\tMethodBinding[] methods = superType.getMethods(selector);", "+\t\t\tnextMethod : for (int m = methods.length; --m >= 0;) {", "+\t\t\t\tMethodBinding method = methods[m];", "+\t\t\t\tif (method.isPrivate() || method.isConstructor() || method.isDefaultAbstract())", "+\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\tif (doesMethodOverride(method, abstractMethod))", "+\t\t\t\t\treturn; // found concrete implementation of abstract method in same package", "+\t\t\t}"]}], "num": 9768}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82e09eeb23d8bec9f676a30a4f07ce6b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fdfe29b372a79414425988c915cfc0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "8e2ef31cf8fd6f75aa20407e8ef5b91a95949af6", "commitAfterChange": "7b76bd109981132b10232dab12b61206fb5d8435", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tprivate synchronized void removeFileFromMaps(IFile f, Set<ICompilationUnit> toDiscard, Set<IFile> toDelete)", "signatureAfterChange": " \tprivate synchronized List<IFile> removeFileFromBuildMaps(IFile f)", "diff": ["-\tprivate synchronized void removeFileFromMaps(IFile f, Set<ICompilationUnit> toDiscard, Set<IFile> toDelete)", "+\tprivate synchronized List<IFile> removeFileFromBuildMaps(IFile f)", "+\t\tList<IFile> toDelete = new ArrayList<IFile>();", "-\t\tSet<IFile> childFiles = _parentToGenFiles.getValues(f);", "+\t\tSet<IFile> childFiles = _buildDeps.getValues(f);", "-\t\t\tSet<IFile> parentFiles = _parentToGenFiles.getKeys(childFile);", "+\t\t\tSet<IFile> parentFiles = _buildDeps.getKeys(childFile);", "-\t\tboolean removed = _parentToGenFiles.removeKey(f);", "+\t\tboolean removed = _buildDeps.removeKey(f);", "-\t\t// Is this file the sole parent of types generated during reconcile?", "-\t\t// If so, add them to the discard list and remove them from the working", "-\t\t// copy list. Then remove the file (and its solely parented children)", "-\t\t// from the reconcile dependency list.", "-\t\tSet<ICompilationUnit> childWCs = _parentToGenWorkingCopies.getValues(f);", "-\t\tfor (ICompilationUnit childWC : childWCs) {", "-\t\t\tSet<IFile> parentFiles = _parentToGenWorkingCopies.getKeys(childWC);", "-\t\t\tif (parentFiles.size() == 1 && parentFiles.contains(f)) {", "-\t\t\t\ttoDiscard.add(childWC);", "-\t\t\t\tICompilationUnit removedWC = _workingCopies.remove(childWC.getResource());", "-\t\t\t\tassert removedWC != null && removedWC.equals(childWC) :", "-\t\t\t\t\t\"Working copy list: get(f).getResource() != f, for wc \" +  //$NON-NLS-1$", "-\t\t\t\t\tchildWC.getElementName();", "-\t\t\t}", "-\t\t}", "-\t\tremoved = _parentToGenWorkingCopies.removeKey(f);", "-\t\tif (removed) {", "-\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "-\t\t\t\t\t\"removed parent file from working copy dependencies: \" + f); //$NON-NLS-1$", "-\t\t}", "-", "-\t\t// Is this file being hidden by a blank working copy?  If so, remove that.", "-\t\tICompilationUnit wc = _hiddenBuiltTypes.remove(f);", "-\t\tif (null != wc) {", "-\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "-\t\t\t\t\t\"removed working copy from hidden types list: \" + f); //$NON-NLS-1$", "-\t\t}", "-\t\tif (null != wc) {", "-\t\t\ttoDiscard.add(wc);", "-\t\t}", "-", "+\t\treturn toDelete;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fc1e9624ff2e28bc535b4c046fb9614", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t \tprivate void removeFromFileMaps( IFile generatedFile, IFile parentFile )  \t    throws JavaModelException", "signatureAfterChange": " \tprivate synchronized void removeFileFromMaps(IFile f, Set<ICompilationUnit> toDiscard, Set<IFile> toDelete)", "diff": ["-\t", "-\tprivate void removeFromFileMaps( IFile generatedFile, IFile parentFile ) ", "-\t    throws JavaModelException ", "-\t{", "-\t\tboolean discardWorkingCopy;", "-\t\tsynchronized( this )", "-\t\t{\t", "-\t\t\tdiscardWorkingCopy = _generatedFile2WorkingCopy.containsKey(generatedFile);", "-\t\t}", "-\t\t", "-\t\t// don't want to hold a lock when we call discardGeneratedWorkingCopy...", "-\t\tif ( discardWorkingCopy )", "-\t\t\tdiscardGeneratedWorkingCopy(generatedFile, parentFile);", "-", "-\t\tsynchronized( this )", "-\t\t{", "-\t\t\tSet<IFile> derivedFiles = _parentFile2GeneratedFiles.get(parentFile);", "-", "-\t\t\t// assertions", "-\t\t\tif (derivedFiles == null)", "-\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\"derivedFiles is null and it shouldn't be\"); //$NON-NLS-1$", "-", "-\t\t\tif (derivedFiles.remove(generatedFile)) {", "-\t\t\t\t_mapsDirty = true;", "-\t\t\t}", "-\t\t\t", "-\t\t\t// update _derivedFile2Parents map", "-\t\t\tSet<IFile> parents = _generatedFile2ParentFiles.get(generatedFile);", "-", "-\t\t\t// assertions", "-\t\t\tif (parents == null)", "-\t\t\t\tthrow new RuntimeException(\" parents is null and it shouldn't be\"); //$NON-NLS-1$", "-\t\t\tif (!parents.contains(parentFile))", "-\t\t\t\tthrow new RuntimeException(\"parents set does not contain parent. Parent: \" + parentFile + \". Child: \" + generatedFile); //$NON-NLS-1$ //$NON-NLS-2$", "-", "-\t\t\tif (parents.remove(parentFile)) {", "-\t\t\t\t_mapsDirty = true;", "-\t\t\t}", "-\t\t}", "-\t}", "+\tprivate synchronized void removeFileFromMaps(IFile f, Set<ICompilationUnit> toDiscard, Set<IFile> toDelete)", "+\t{", "+\t\t// Is this file the sole parent of files generated during build?", "+\t\t// If so, add them to the deletion list. Then remove the file from", "+\t\t// the build dependency list.", "+\t\tSet<IFile> childFiles = _parentToGenFiles.getValues(f);", "+\t\tfor (IFile childFile : childFiles) {", "+\t\t\tSet<IFile> parentFiles = _parentToGenFiles.getKeys(childFile);", "+\t\t\tif (parentFiles.size() == 1 && parentFiles.contains(f)) {", "+\t\t\t\ttoDelete.add(childFile);", "+\t\tboolean removed = _parentToGenFiles.removeKey(f);", "+\t\tif (removed) {", "+\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "+\t\t\t\t\t\"removed parent file from build dependencies: \" + f); //$NON-NLS-1$", "+", "+\t\t// Is this file the sole parent of types generated during reconcile?", "+\t\t// If so, add them to the discard list and remove them from the working", "+\t\t// copy list. Then remove the file (and its solely parented children)", "+\t\t// from the reconcile dependency list.", "+\t\tSet<ICompilationUnit> childWCs = _parentToGenWorkingCopies.getValues(f);", "+\t\tfor (ICompilationUnit childWC : childWCs) {", "+\t\t\tSet<IFile> parentFiles = _parentToGenWorkingCopies.getKeys(childWC);", "+\t\t\tif (parentFiles.size() == 1 && parentFiles.contains(f)) {", "+\t\t\t\ttoDiscard.add(childWC);", "+\t\t\t\tICompilationUnit removedWC = _workingCopies.remove(childWC.getResource());", "+\t\t\t\tassert removedWC != null && removedWC.equals(childWC) :", "+\t\t\t\t\t\"Working copy list: get(f).getResource() != f, for wc \" +  //$NON-NLS-1$", "+\t\t\t\t\tchildWC.getElementName();", "+\t\tremoved = _parentToGenWorkingCopies.removeKey(f);", "+\t\tif (removed) {", "+\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "+\t\t\t\t\t\"removed parent file from working copy dependencies: \" + f); //$NON-NLS-1$", "+\t\t}", "+", "+\t\t// Is this file being hidden by a blank working copy?  If so, remove that.", "+\t\tICompilationUnit wc = _hiddenBuiltTypes.remove(f);", "+\t\tif (null != wc) {", "+\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "+\t\t\t\t\t\"removed working copy from hidden types list: \" + f); //$NON-NLS-1$", "+\t\t}", "+\t\tif (null != wc) {", "+\t\t\ttoDiscard.add(wc);", "+\t\t}", "+", "+\t\tassert checkIntegrity();"]}], "num": 34280}
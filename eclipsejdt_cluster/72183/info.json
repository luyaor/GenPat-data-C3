{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf7fc52145595cc3a1c2176cd516fe66", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7547ffcf7a19ef5442728b3c4bfb47b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static char[] createIndexKey( \tint modifiers, \tchar[] packageName, \tchar[] typeName, \tchar[][] enclosingTypeNames, \tchar classOrInterface, \tchar[] superTypeName, \tchar superClassOrInterface)", "signatureAfterChange": "  public static char[] createIndexKey( \tint modifiers, \tchar[] packageName, \tchar[] typeName, \tchar[][] enclosingTypeNames, \tchar[][] typeParameterSignatures, \tchar classOrInterface, \tchar[] superTypeName, \tchar superClassOrInterface)", "diff": ["+\tchar[][] typeParameterSignatures,", "+\t", "+\tchar[] typeParameters = CharOperation.NO_CHAR;", "+\tint typeParametersLength = 0;", "+\tif (typeParameterSignatures != null) {", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tfor (int i = 0, length = typeParameterSignatures.length; i < length; i++) {", "+\t\t\tchar[] typeParameter = typeParameterSignatures[i];", "+\t\t\tbuffer.append(typeParameter);", "+\t\t\ttypeParametersLength += typeParameter.length;", "+\t\t\tif (i != length-1) {", "+\t\t\t\tbuffer.append(',');", "+\t\t\t\ttypeParametersLength++;", "+\t\t\t}", "+\t\t}", "+\t\ttypeParameters = new char[typeParametersLength];", "+\t\tbuffer.getChars(0, typeParametersLength, typeParameters, 0);", "+\t}", "-\t// superSimpleName / superQualification / simpleName / enclosingTypeName / packageName / superClassOrInterface classOrInterface modifiers", "+\t// superSimpleName / superQualification / simpleName / enclosingTypeName / typeParameters / packageName / superClassOrInterface classOrInterface modifiers", "-\tchar[] result = new char[superLength + superQLength + simpleLength + enclosingLength + packageLength + 8];", "+\tchar[] result = new char[superLength + superQLength + simpleLength + enclosingLength + typeParametersLength + packageLength + 9];", "+\t}", "+\tresult[pos++] = SEPARATOR;", "+\tif (typeParametersLength > 0) {", "+\t\tSystem.arraycopy(typeParameters, 0, result, pos, typeParametersLength);", "+\t\tpos += typeParametersLength;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820dd3fb31d62f36b9834db23f813103", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "73100562c653e9756405c4478f78d4c46826e31a", "commitAfterChange": "b17c7970aa52528427b488a1895b516cefe9f2a2", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "signatureAfterChange": " public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "diff": ["+\t\tif (methods == null || methods.length == 0)", "+\t\t\treturn this.singleAbstractMethod[index] = samProblemBinding;", "+\t\tint contractParameterLength = 0;", "+\t\tchar [] contractSelector = null;", "+\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\tMethodBinding method = methods[i];", "+\t\t\tif (method == null) continue;", "+\t\t\tif (contractSelector == null) {", "+\t\t\t\tcontractSelector = method.selector;", "+\t\t\t\tcontractParameterLength = method.parameters == null ? 0 : method.parameters.length;", "+\t\t\t} else {", "+\t\t\t\tint methodParameterLength = method.parameters == null ? 0 : method.parameters.length;", "+\t\t\t\tif (methodParameterLength != contractParameterLength || !CharOperation.equals(method.selector, contractSelector))", "+\t\t\t\t\treturn this.singleAbstractMethod[index] = samProblemBinding;", "+\t\t\t}", "+\t\t}", "-\tif (methods != null && methods.length == 1)", "+\tif (methods.length == 1)", "+\t"]}], "num": 72183}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2997bb510fcb076757f49d52929f0fbd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d910d1249cd737d97680053a701fe4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "a184055df3953fc7636d02b495d8ddad60f03a7d", "commitAfterChange": "6ec8b600d2528691e914df35d7ab6d321bfc7cb2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["+\t\tFieldBinding field;", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\tif (!fieldBinding.isStatic()) {", "+\t\t\tfield = (FieldBinding) this.binding;", "+\t\t\tif (!field.isStatic()) {", "-\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "+\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, field);", "-\t\t\t\t\t\t&& fieldBinding.declaringClass != actualReceiverType) {", "-\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, fieldBinding);", "+\t\t\t\t\t\t&& field.declaringClass != actualReceiverType) {", "+\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, field);", "-\t\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length))", "-\t\t\t\tscope.problemReporter().deprecatedField(fieldBinding, this);", "+\t\t\tif (isFieldUseDeprecated(field, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length))", "+\t\t\t\tscope.problemReporter().deprecatedField(field, this);", "+\t\t} else {", "+\t\t\tfield = null;", "-\t\tthis.constant =", "-\t\t\t((bits & FIELD) != 0)", "+\t\tthis.constant = field != null", "+\t\t\t// set generic cast of for previous field (if any)", "+\t\t\tif (field != null) {", "+\t\t\t\tFieldBinding originalBinding = field.original();", "+\t\t\t\tif (originalBinding != field) {", "+\t\t\t\t    // extra cast needed if method return type has type variable", "+\t\t\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && type.id != T_Object) {", "+\t\t\t\t    \tsetGenericCast(index-1,originalBinding.type.genericCast(type));", "+\t\t\t\t    }", "+\t\t\t\t} \t", "+\t\t\t}", "-\t\t\tFieldBinding field = scope.getField(type, token, this);", "+\t\t\tfield = scope.getField(type, token, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d86141af533eac7cc16043bd3a1c129", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "270b2d0dc66fd2f8c8012264ce82bca4953b85cb", "commitAfterChange": "e254cb1235fced696c16505589db91831c0df710", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["+\t\tif (lambda != null && lambda.argumentsTypeElided() && this.expression instanceof CastExpression) {", "+\t\t\tthis.expression.bits |= ASTNode.DisableUnnecessaryCastCheck;", "+\t\t}", "-\t\tif (this.expression instanceof CastExpression", "-\t\t\t\t&& (this.expression.bits & (ASTNode.UnnecessaryCast|ASTNode.DisableUnnecessaryCastCheck)) == 0) {", "-\t\t\tCastExpression.checkNeedForAssignedCast(scope, methodType, (CastExpression) this.expression);", "+\t\tif (this.expression instanceof CastExpression) {", "+\t\t\tif ((this.expression.bits & (ASTNode.UnnecessaryCast|ASTNode.DisableUnnecessaryCastCheck)) == 0) {", "+\t\t\t\tCastExpression.checkNeedForAssignedCast(scope, methodType, (CastExpression) this.expression);", "+\t\t\t} else if (lambda != null && lambda.argumentsTypeElided() && (this.expression.bits & ASTNode.UnnecessaryCast) != 0) {", "+\t\t\t\tif (TypeBinding.equalsEquals(((CastExpression)this.expression).expression.resolvedType, methodType)) {", "+\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)this.expression);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 44290}
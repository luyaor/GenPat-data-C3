{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc0ca0994497ed421bd8d418dd20d89d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f3d6961345422a867521a0ada1068e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "e8cc2a8f8e9efcff6e76a3ee15d5b53d1a958057", "commitAfterChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate Initializer convert(InitializerElementInfo initializerInfo, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate Initializer convert(InitializerElementInfo initializerInfo, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\tprivate Initializer convert(InitializerElementInfo initializerInfo, CompilationResult compilationResult) {", "+\tprivate Initializer convert(InitializerElementInfo initializerInfo, CompilationResult compilationResult) throws JavaModelException {", "-\t\t\t\tJavaElement type = (JavaElement)children[i];", "-\t\t\t\ttry {", "-\t\t\t\t\tTypeDeclaration localType = convert((SourceTypeElementInfo) type.getElementInfo(), compilationResult);", "-\t\t\t\t\tif ((localType.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "-\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(localType);", "-\t\t\t\t\t\texpression.type = localType.superclass;", "-\t\t\t\t\t\tlocalType.superclass = null;", "-\t\t\t\t\t\tlocalType.superInterfaces = null;", "-\t\t\t\t\t\tlocalType.allocation = expression;", "-\t\t\t\t\t\tstatements[i] = expression;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tstatements[i] = localType;", "-\t\t\t\t\t}", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// ignore", "+\t\t\t\tSourceType type = (SourceType) children[i];", "+\t\t\t\tTypeDeclaration localType = convert(type, compilationResult);", "+\t\t\t\tif ((localType.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "+\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(localType);", "+\t\t\t\t\texpression.type = localType.superclass;", "+\t\t\t\t\tlocalType.superclass = null;", "+\t\t\t\t\tlocalType.superInterfaces = null;", "+\t\t\t\t\tlocalType.allocation = expression;", "+\t\t\t\t\tstatements[i] = expression;", "+\t\t\t\t} else {", "+\t\t\t\t\tstatements[i] = localType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e36d16124a56b6f6475f13fa25ceb20d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "e8cc2a8f8e9efcff6e76a3ee15d5b53d1a958057", "commitAfterChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo methodInfo, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo methodInfo, CompilationResult compilationResult) {", "+\tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException {", "+\t\tSourceMethodElementInfo methodInfo = (SourceMethodElementInfo) methodHandle.getElementInfo();", "-\t\t\t\t\tchar[] defaultValueSource = ((SourceAnnotationMethodInfo) methodInfo).getDefaultValueSource(this.source.getContents());", "+\t\t\t\t\tchar[] defaultValueSource = ((SourceAnnotationMethodInfo) methodInfo).getDefaultValueSource(getSource());", "-\t\t\t\t\t\tif (this.parser == null) {", "-\t\t\t\t\t\t\tthis.parser = new Parser(this.problemReporter, true);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tExpression expression =  this.parser.parseMemberValue(defaultValueSource, 0, defaultValueSource.length, this.unit);", "+\t\t\t\t\t\tExpression expression =  parseMemberValue(defaultValueSource);", "+", "+\t\t/* convert annotations */", "+\t\tmethod.annotations = convertAnnotations(methodHandle);", "-\t\t\t\t\tJavaElement type = (JavaElement)children[i];", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tTypeDeclaration localType = convert((SourceTypeElementInfo)type.getElementInfo(), compilationResult);", "-\t\t\t\t\t\tif ((localType.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "-\t\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(localType);", "-\t\t\t\t\t\t\texpression.type = localType.superclass;", "-\t\t\t\t\t\t\tlocalType.superclass = null;", "-\t\t\t\t\t\t\tlocalType.superInterfaces = null;", "-\t\t\t\t\t\t\tlocalType.allocation = expression;", "-\t\t\t\t\t\t\tstatements[i] = expression;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tstatements[i] = localType;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// ignore", "+\t\t\t\t\tSourceType type = (SourceType) children[i];", "+\t\t\t\t\tTypeDeclaration localType = convert(type, compilationResult);", "+\t\t\t\t\tif ((localType.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "+\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(localType);", "+\t\t\t\t\t\texpression.type = localType.superclass;", "+\t\t\t\t\t\tlocalType.superclass = null;", "+\t\t\t\t\t\tlocalType.superInterfaces = null;", "+\t\t\t\t\t\tlocalType.allocation = expression;", "+\t\t\t\t\t\tstatements[i] = expression;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tstatements[i] = localType;"]}], "num": 52272}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53bb9379903692d0ff92b759f21ce286", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c93f74f6b6bd9d6645810849c6eea853", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "a0257337cb36d5d795c1e219639fea5cf2131af9", "commitAfterChange": "9e089c23bb81bd6b2ecdf10310abd262d658f8a0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["+        // For -sourcepath, use the \"sourcepath\" value if present.", "+        // Otherwise default to the \"srcdir\" value.", "+        Path sourcepath = null;", "+        ", "+        // retrieve the method getSourcepath() using reflect", "+        // This is done to improve the compatibility to ant 1.5", "+        Class javacClass = Javac.class;", "+        Method getSourcepathMethod = null;", "+        try {", "+\t        getSourcepathMethod = javacClass.getMethod(\"getSourcepath\", null); //$NON-NLS-1$", "+        } catch(NoSuchMethodException e) {", "+        }", "+        Path compileSourcepath = null;", "+        if (getSourcepathMethod != null) {", "+\t \t\ttry {", "+\t\t\t\tcompileSourcepath = (Path) getSourcepathMethod.invoke(attributes, null);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t}", "+        }", "+        if (compileSourcepath != null) {", "+            sourcepath = compileSourcepath;", "+        } else {", "+            sourcepath = src;", "+        }", "+\t\tclasspath.append(sourcepath);", "+        String memoryParameterPrefix = Project.getJavaVersion().equals(Project.JAVA_1_1) ? \"-J-\" : \"-J-X\";//$NON-NLS-1$//$NON-NLS-2$", "+        if (memoryInitialSize != null) {", "+            if (!attributes.isForkedJavac()) {", "+                attributes.log(Util.bind(\"ant.jdtadapter.error.ignoringMemoryInitialSize\"), Project.MSG_WARN);//$NON-NLS-1$", "+            } else {", "+                cmd.createArgument().setValue(memoryParameterPrefix", "+                                              + \"ms\" + memoryInitialSize); //$NON-NLS-1$", "+            }", "+        }", "+", "+        if (memoryMaximumSize != null) {", "+            if (!attributes.isForkedJavac()) {", "+                attributes.log(Util.bind(\"ant.jdtadapter.error.ignoringMemoryMaximumSize\"), Project.MSG_WARN);//$NON-NLS-1$", "+            } else {", "+                cmd.createArgument().setValue(memoryParameterPrefix", "+                                              + \"mx\" + memoryMaximumSize); //$NON-NLS-1$", "+            }", "+        }", "+", "+        if (debug) {", "+\t       // retrieve the method getSourcepath() using reflect", "+\t        // This is done to improve the compatibility to ant 1.5", "+\t        Method getDebugLevelMethod = null;", "+\t        try {", "+\t\t        getDebugLevelMethod = javacClass.getMethod(\"getDebugLevel\", null); //$NON-NLS-1$", "+\t        } catch(NoSuchMethodException e) {", "+\t        }", "+     \t    String debugLevel = null;", "+\t        if (getDebugLevelMethod != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tdebugLevel = (String) getDebugLevelMethod.invoke(attributes, null);", "+\t\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\t}", "+        \t}", "+\t\t\tif (debugLevel != null) {", "+\t\t\t\tif (debugLevel.length() == 0) {", "+\t\t\t\t\tcmd.createArgument().setValue(\"-g:none\"); //$NON-NLS-1$", "+\t\t\t\t} else {", "+\t\t\t\t\tcmd.createArgument().setValue(\"-g:\" + debugLevel); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tcmd.createArgument().setValue(\"-g\"); //$NON-NLS-1$", "+            }", "+        } else {", "+            cmd.createArgument().setValue(\"-g:none\"); //$NON-NLS-1$", "+        }", "+        ", "-\t\t * debug option", "-\t\t */", "-\t\tif (debug) {", "-\t\t\tcmd.createArgument().setValue(\"-g\"); //$NON-NLS-1$", "-\t\t}", "-", "-\t\t/*", "+\t\t * source option", "+\t\t */", "+\t\tString source = attributes.getSource();", "+        if (source != null) {", "+            cmd.createArgument().setValue(\"-source\"); //$NON-NLS-1$", "+            cmd.createArgument().setValue(source);", "+        }", "+        ", "+\t\tif (Project.getJavaVersion().equals(Project.JAVA_1_4)) {", "+\t\t\tcmd.createArgument().setValue(\"-1.4\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tcmd.createArgument().setValue(\"-1.3\"); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\t/*", "+\t\t * encoding option", "+\t\t */", "+        if (encoding != null) {", "+            cmd.createArgument().setValue(\"-encoding\"); //$NON-NLS-1$", "+            cmd.createArgument().setValue(encoding);", "+        }", "+", "+\t\t/*", "-", "-\t\t/*", "-\t\t * source option", "-\t\t */", "-\t\tString source = attributes.getSource();", "-        if (source != null) {", "-            cmd.createArgument().setValue(\"-source\"); //$NON-NLS-1$", "-            cmd.createArgument().setValue(source);", "-        }", "-", "-\t\t/*", "-\t\t * encoding option", "-\t\t */", "-        if (encoding != null) {", "-            cmd.createArgument().setValue(\"-encoding\"); //$NON-NLS-1$", "-            cmd.createArgument().setValue(encoding);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da0f5690a35ca1f44dedbd40e62a076c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "9580475674d2dc0e975687220941c33b61d1b0ac", "commitAfterChange": "2be607e43fb0ccfc2d73541ff7ce26a9dc4cc358", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-        if (bootclasspath != null && bootclasspath.size() != 0) {", "+        if (this.bootclasspath != null && this.bootclasspath.size() != 0) {", "-\t\t\tcmd.createArgument().setPath(bootclasspath);        \t", "+\t\t\tcmd.createArgument().setPath(this.bootclasspath);        \t", "-            includeJavaRuntime = true;", "+            this.includeJavaRuntime = true;", "-        Path classpath = new Path(project);", "+        Path classpath = new Path(this.project);", "-        addExtdirs(extdirs, classpath);", "+        addExtdirs(this.extdirs, classpath);", "-\t\t\t\tcompileSourcePath = (Path) getSourcepathMethod.invoke(attributes, null);", "+\t\t\t\tcompileSourcePath = (Path) getSourcepathMethod.invoke(this.attributes, null);", "-            sourcepath = src;", "+            sourcepath = this.src;", "-        if (memoryInitialSize != null) {", "-            if (!attributes.isForkedJavac()) {", "-                attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryInitialSize\"), Project.MSG_WARN); //$NON-NLS-1$", "+        if (this.memoryInitialSize != null) {", "+            if (!this.attributes.isForkedJavac()) {", "+                this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryInitialSize\"), Project.MSG_WARN); //$NON-NLS-1$", "-                                              + \"ms\" + memoryInitialSize); //$NON-NLS-1$", "+                                              + \"ms\" + this.memoryInitialSize); //$NON-NLS-1$", "-        if (memoryMaximumSize != null) {", "-            if (!attributes.isForkedJavac()) {", "-                attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryMaximumSize\"), Project.MSG_WARN); //$NON-NLS-1$", "+        if (this.memoryMaximumSize != null) {", "+            if (!this.attributes.isForkedJavac()) {", "+                this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryMaximumSize\"), Project.MSG_WARN); //$NON-NLS-1$", "-                                              + \"mx\" + memoryMaximumSize); //$NON-NLS-1$", "+                                              + \"mx\" + this.memoryMaximumSize); //$NON-NLS-1$", "-        if (debug) {", "+        if (this.debug) {", "-\t\t\t\t\tdebugLevel = (String) getDebugLevelMethod.invoke(attributes, null);", "+\t\t\t\t\tdebugLevel = (String) getDebugLevelMethod.invoke(this.attributes, null);", "-\t\t\t\tcompilerArgs = (String[]) getCurrentCompilerArgsMethod.invoke(attributes, null);", "+\t\t\t\tcompilerArgs = (String[]) getCurrentCompilerArgsMethod.invoke(this.attributes, null);", "-\t\t\tif (attributes.getNowarn()) {", "-\t\t\t\tif (deprecation) {", "+\t\t\tif (this.attributes.getNowarn()) {", "+\t\t\t\tif (this.deprecation) {", "-\t\t\t} else if (deprecation) {", "+\t\t\t} else if (this.deprecation) {", "-\t\t\tif (attributes.getNowarn()) {", "-\t\t\t\tif (deprecation) {", "+\t\t\tif (this.attributes.getNowarn()) {", "+\t\t\t\tif (this.deprecation) {", "-\t\t\t\tif (deprecation) {", "+\t\t\t\tif (this.deprecation) {", "-\t\tif (destDir != null) {", "+\t\tif (this.destDir != null) {", "-\t\t\tcmd.createArgument().setFile(destDir.getAbsoluteFile());", "+\t\t\tcmd.createArgument().setFile(this.destDir.getAbsoluteFile());", "-\t\tif (target != null) {", "+\t\tif (this.target != null) {", "-\t\t\tcmd.createArgument().setValue(target);", "+\t\t\tcmd.createArgument().setValue(this.target);", "-\t\tif (verbose) {", "+\t\tif (this.verbose) {", "-\t\t\tlogFileName = destDir.getAbsolutePath() + \".log\"; //$NON-NLS-1$", "-\t\t\tcmd.createArgument().setValue(logFileName);", "+\t\t\tthis.logFileName = this.destDir.getAbsolutePath() + \".log\"; //$NON-NLS-1$", "+\t\t\tcmd.createArgument().setValue(this.logFileName);", "-\t\tif (!attributes.getFailonerror()) {", "+\t\tif (!this.attributes.getFailonerror()) {", "-\t\tString source = attributes.getSource();", "+\t\tString source = this.attributes.getSource();", "-\t\t\tif (target != null && target.equals(\"1.1\")) {\t\t\t   //$NON-NLS-1$\t", "+\t\t\tif (this.target != null && this.target.equals(\"1.1\")) {\t\t\t   //$NON-NLS-1$\t", "-        if (encoding != null) {", "+        if (this.encoding != null) {", "-            cmd.createArgument().setValue(encoding);", "+            cmd.createArgument().setValue(this.encoding);"]}], "num": 51641}
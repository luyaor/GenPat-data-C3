{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6db96a779c174af4587cda7c5217a29", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56aad1d448d879b9a26b84ef3497c4b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "140b6533130d6e4f1be835c1605829065053f450", "commitAfterChange": "bc7116f109e564326b3e78f91d4a1f3d88927f34", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "signatureAfterChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "diff": ["+\t\t\t\r", "-\t\t\t\tthis.popUntilPrefixOf(path);\r", "-\t\t\t\tif (this.currentElement != null) return this.currentElement;\r", "-\t\t\t\tif  (project != null){\r", "-\t\t\t\t\telement = (Openable)project;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t\t\r", "-\t\t\t\tIProject proj = (IProject)resource;\r", "-\t\t\t\tboolean isOpened = proj.isOpen();\r", "-\t\t\t\tif (isOpened && this.hasJavaNature(proj)) {\r", "-\t\t\t\t\telement = JavaCore.create(proj);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\t// java project may have been been closed or removed (look for\r", "-\t\t\t\t\t// element amongst old java project s list).\r", "-\t\t\t\t\telement =  (Openable) manager.getJavaModel().findJavaProject(proj);\r", "+\t\t\t\r", "+\t\t\t\t// note that non-java resources rooted at the project level will also enter this code with\r", "+\t\t\t\t// an elementType JAVA_PROJECT (see #elementType(...)).\r", "+\t\t\t\tif (resource instanceof IProject){\r", "+\r", "+\t\t\t\t\tthis.popUntilPrefixOf(path);\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tif (this.currentElement != null \r", "+\t\t\t\t\t\t&& this.currentElement.getElementType() == IJavaElement.JAVA_PROJECT\r", "+\t\t\t\t\t\t&& ((IJavaProject)this.currentElement).getProject().equals(resource)) {\r", "+\t\t\t\t\t\treturn this.currentElement;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif  (project != null && project.getProject().equals(resource)){\r", "+\t\t\t\t\t\telement = (Openable)project;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tIProject proj = (IProject)resource;\r", "+\t\t\t\t\tboolean isOpened = proj.isOpen();\r", "+\t\t\t\t\tif (isOpened && this.hasJavaNature(proj)) {\r", "+\t\t\t\t\t\telement = JavaCore.create(proj);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// java project may have been been closed or removed (look for\r", "+\t\t\t\t\t\t// element amongst old java project s list).\r", "+\t\t\t\t\t\telement =  (Openable) manager.getJavaModel().findJavaProject(proj);\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84e9fe89036c6803cd644ed5a10c3c83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "5cdd74ffbe2d421e3dae9c00346cd61d59a4698a", "commitAfterChange": "94cf6b4f7af3fd80bbff88619e21ee7974889ee5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "  \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\t", "+\t\t\t\t// check @Deprecated annotation presence", "+\t\t\t\tif ((this.binding.getAnnotationTagBits() & TagBits.AnnotationDeprecated) == 0", "+\t\t\t\t\t\t&& (this.binding.modifiers & ClassFileConstants.AccDeprecated) != 0", "+\t\t\t\t\t\t&& initializationScope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\tinitializationScope.problemReporter().missingDeprecatedAnnotationForField(this);", "+\t\t\t\t}\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efe368aa0ba0f948e1fb9db243d861e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "736c4ab128bb8b11be657f80ba87ef21230bb464", "commitAfterChange": "66b6cf62f65cf0a44b83a254dfc63de882153874", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic boolean visit( \t\tConditionalExpression conditionalExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tConditionalExpression conditionalExpression, \t\tBlockScope scope)", "diff": ["+\t\tboolean placeSpaceImmediately = this.preferences.insert_space_before_question_in_conditional", "+\t\t\t\t&& ((this.preferences.conditional_expression_alignment & Alignment.M_INDENT_ON_COLUMN) != 0)", "+\t\t\t\t&& ((this.preferences.conditional_expression_alignment & Alignment.M_NEXT_PER_LINE_SPLIT) != 0);", "+\t\tif (placeSpaceImmediately) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\t", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameQUESTION, this.preferences.insert_space_before_question_in_conditional);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameQUESTION, !placeSpaceImmediately && this.preferences.insert_space_before_question_in_conditional);"]}], "num": 13835}
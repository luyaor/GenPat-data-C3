{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bd55574e12f4a1ac663032a976f764e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "850b9e229065369afb622b16e1285c99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "3fd9ba7770cab33e59f381d90c14d9b1a2469d1c", "commitAfterChange": "051572f99b6a73010e844cbf76e196d479c1689d", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": " \tpublic void resourceChanged(IResourceChangeEvent event)", "diff": ["-\t\t\t\t\tJavaModel.flushExternalFileCache();", "+\t\t\t\t\tObject source = event.getSource();", "+\t\t\t\t\tprojects = null;", "+\t\t\t\t\tif (source instanceof IWorkspace) {", "+\t\t\t\t\t\t projects = ((IWorkspace) source).getRoot().getProjects();", "+\t\t\t\t\t} else if (source instanceof IProject) {", "+\t\t\t\t\t\tprojects = new IProject[] {(IProject) source};", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tUtil.log(new Exception(),", "+\t\t\t\t\t\t\t\t\"Expected to see a workspace or project on the PRE_BUILD resource change but was: \" + source.toString()); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tif (projects != null) {", "+\t\t\t\t\t\t// If we are about to do a build and a Java project's first builder is not the Java builder,", "+\t\t\t\t\t\t// then it is possible that one of the earlier builders will build a jar file that is on that", "+\t\t\t\t\t\t// project's classpath. If we see that, then to be safe we must flush the caching of the", "+\t\t\t\t\t\t// JavaModelManager's external file state.", "+\t\t\t\t\t\t// A possible further optimization for this situation where earlier builders can affect the", "+\t\t\t\t\t\t// Java builder would be to add a new classpath element attribute that identifies whether", "+\t\t\t\t\t\t// or not a library jar is \"stable\" and needs to be flushed.", "+\t\t\t\t\t\tfor (int i = 0; i < projects.length; i++) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tIProject project = projects[i];", "+\t\t\t\t\t\t\t\tif (project.isOpen() && project.hasNature(JavaCore.NATURE_ID)) {", "+\t\t\t\t\t\t\t\t\tIBuildConfiguration[] configs = project.getBuildConfigs();", "+\t\t\t\t\t\t\t\t\tif (configs.length > 1 && !JavaCore.BUILDER_ID.equals(configs[0].getName())) {", "+\t\t\t\t\t\t\t\t\t\tthis.manager.resetExternalFilesCache();", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch (CoreException exception) {", "+\t\t\t\t        \t\tUtil.log(exception, \"Exception while checking builder configuration ordering\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t }", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abe8d4cb8d1b7b3083a7223f566aaf7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "54a7ab527ad57721c6ba50dd3bee196c6e37899a", "commitAfterChange": "7fb61558744987ce1301d15c86077c1ce96e5a22", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void addBinaryTargetAnnotation(long bits)", "signatureAfterChange": " \tprivate void addBinaryTargetAnnotation(long bits)", "diff": ["-\t\tif ((bits & TagBits.AnnotationTarget) != 0) return;", "-\t\tchar[][] compoundName = TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE;", "-\t\taddTypeReference(compoundName[compoundName.length-1]);", "+\t\tchar[][] compoundName = null;", "+\t\t\tcompoundName = TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE;", "+\t\t\taddTypeReference(compoundName[compoundName.length-1]);", "+\t\t\tif (compoundName == null) {", "+\t\t\t\tcompoundName = TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE;", "+\t\t\t\taddTypeReference(compoundName[compoundName.length-1]);", "+\t\t\t}", "+\t\t\tif (compoundName == null) {", "+\t\t\t\tcompoundName = TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE;", "+\t\t\t\taddTypeReference(compoundName[compoundName.length-1]);", "+\t\t\t}", "+\t\t\tif (compoundName == null) {", "+\t\t\t\tcompoundName = TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE;", "+\t\t\t\taddTypeReference(compoundName[compoundName.length-1]);", "+\t\t\t}", "+\t\t\tif (compoundName == null) {", "+\t\t\t\tcompoundName = TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE;", "+\t\t\t\taddTypeReference(compoundName[compoundName.length-1]);", "+\t\t\t}", "+\t\t\tif (compoundName == null) {", "+\t\t\t\tcompoundName = TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE;", "+\t\t\t\taddTypeReference(compoundName[compoundName.length-1]);", "+\t\t\t}", "+\t\t\tif (compoundName == null) {", "+\t\t\t\tcompoundName = TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE;", "+\t\t\t\taddTypeReference(compoundName[compoundName.length-1]);", "+\t\t\t}", "+\t\t\tif (compoundName == null) {", "+\t\t\t\tcompoundName = TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE;", "+\t\t\t\taddTypeReference(compoundName[compoundName.length-1]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c545096073175803c14123cac05e0b4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["+\t}", "-        this.scribe.printModifiers();", "+        this.scribe.printModifiers(typeDeclaration.annotations, this);", "+\t\tTypeParameter[] typeParameters = typeDeclaration.typeParameters;", "+\t\tif (typeParameters != null) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters); ", "+\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tint length = typeParameters.length;", "+\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\ttypeParameters[i].traverse(this, typeDeclaration.scope);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);", "+\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_parameters) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}\t\t\t\t", "+\t\t\t}", "+\t\t\ttypeParameters[length - 1].traverse(this, typeDeclaration.scope);", "+\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters); ", "+\t\t\t}", "+\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t}"]}], "num": 69321}
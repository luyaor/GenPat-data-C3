{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c841dc9bba724aea82ebad026c38a093", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "349d0133a79b186ac8676c6c8c2822e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "068d2e27e9dd76076e2e7b768049ff057094cad4", "commitAfterChange": "338478f2a4dfd9c558f4607889b5fffced9aad02", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "\r public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tif (syntheticAccessor == null) {\r", "-\t\tcodeStream.new_(allocatedType);\r", "-\t\tif (valueRequired) {\r", "-\t\t\tcodeStream.dup();\r", "-\t\t}\r", "-\t\t// better highlight for allocation: display the type individually\r", "-\t\tcodeStream.recordPositionsFrom(pc, type.sourceStart);\r", "+\tcodeStream.new_(allocatedType);\r", "+\tif (valueRequired) {\r", "+\t\tcodeStream.dup();\r", "+\t// better highlight for allocation: display the type individually\r", "+\tcodeStream.recordPositionsFrom(pc, type.sourceStart);\r", "+\r", "-\t\tcodeStream.invokestatic(syntheticAccessor);\r", "+\t\t// synthetic accessor got some extra arguments appended to its signature, which need values\r", "+\t\tfor (int i = 0, max = syntheticAccessor.parameters.length - binding.parameters.length; i < max; i++) {\r", "+\t\t\tcodeStream.aconst_null();\r", "+\t\t}\t\t\r", "+\t\tcodeStream.invokespecial(syntheticAccessor);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ed0bf4f90a61f1c6fc6259dbeb94017", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "-", "+\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "-\t\tReferenceBinding allocatedType = this.codegenBinding.declaringClass;", "+\t\tMethodBinding codegenBinding = this.binding.original();", "+\t\tReferenceBinding allocatedType = codegenBinding.declaringClass;", "-\t\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, this.codegenBinding, null /* default declaringClass */);", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, codegenBinding, null /* default declaringClass */);", "-\t\t\t\tmax = this.syntheticAccessor.parameters.length - this.codegenBinding.parameters.length;", "+\t\t\t\tmax = this.syntheticAccessor.parameters.length - codegenBinding.parameters.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b66302288ca3f5fd27a5862c730c9f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, \tboolean valueRequired)", "diff": ["-public void generateCode(", "-\tBlockScope currentScope,", "-\tCodeStream codeStream,", "-\tboolean valueRequired) {", "-", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, \tboolean valueRequired) {", "-\tReferenceBinding allocatedType = this.codegenBinding.declaringClass;", "+\tMethodBinding codegenBinding = this.binding.original();", "+\tReferenceBinding allocatedType = codegenBinding.declaringClass;", "-\tif (this.codegenBinding.canBeSeenBy(allocatedType, this, currentScope)) {", "+\tif (codegenBinding.canBeSeenBy(allocatedType, this, currentScope)) {", "-\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, this.codegenBinding, null /* default declaringClass */);", "+\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, codegenBinding, null /* default declaringClass */);", "-\t\tcodeStream.generateEmulationForConstructor(currentScope, this.codegenBinding);", "+\t\tcodeStream.generateEmulationForConstructor(currentScope, codegenBinding);", "-\t\t\t\tTypeBinding parameterBinding = this.codegenBinding.parameters[i];", "+\t\t\t\tTypeBinding parameterBinding = codegenBinding.parameters[i];", "-\t\t\t\t\tcodeStream.generateBoxingConversion(this.codegenBinding.parameters[i].id);", "+\t\t\t\t\tcodeStream.generateBoxingConversion(codegenBinding.parameters[i].id);"]}], "num": 6276}
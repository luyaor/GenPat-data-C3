{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c5cb9b1e30484857a45c8b6433c4f34", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f7dcb867d19818a1e080fc2466fc716", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r private void findMethods(\r \tchar[] selector,\r \tTypeBinding[] argTypes,\r \tReferenceBinding receiverType,\r \tScope scope,\r \tObjectVector methodsFound,\r \tboolean onlyStaticMethods,\r \tboolean exactMatch)", "diff": ["+}\r", "+private void findMethods(\r", "+\tchar[] selector,\r", "+\tTypeBinding[] argTypes,\r", "+\tReferenceBinding receiverType,\r", "+\tScope scope,\r", "+\tObjectVector methodsFound,\r", "+\tboolean onlyStaticMethods,\r", "+\tboolean exactMatch) {\r", "+\r", "+\tif (selector == null) return;\r", "+\r", "+\tReferenceBinding currentType = receiverType;\r", "+\tif (currentType.isInterface()) {\r", "+\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\r", "+\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\tint lastPosition = 0;\r", "+\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "+\t\t\t\t\tcurrentType = interfaces[j];\r", "+\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "+\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "+\r", "+\t\t\t\t\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\r", "+\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "+\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "+\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\r", "+\t\t\t// bit reinitialization\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tcurrentType = scope.getJavaLangObject();\r", "+\t}\r", "+\r", "+\twhile (currentType != null) {\r", "+\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\t\tcurrentType = currentType.superclass();\r", "+\t}\r", "+}\r", "-\tprivate void findMethods(\r", "-\t\tchar[] selector,\r", "-\t\tTypeBinding[] argTypes,\r", "-\t\tReferenceBinding receiverType,\r", "-\t\tScope scope,\r", "-\t\tObjectVector methodsFound,\r", "-\t\tboolean onlyStaticMethods,\r", "-\t\tboolean exactMatch,\r", "-\t\tInvocationSite invocationSite) {\r", "-\t\tif (selector == null)\r", "-\t\t\treturn;\r", "-\t\tReferenceBinding currentType = receiverType;\r", "-\t\tif (currentType.isInterface()) {\r", "-\t\t\tfindMethods(\r", "-\t\t\t\tselector,\r", "-\t\t\t\targTypes,\r", "-\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tmethodsFound,\r", "-\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\texactMatch,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite);\r", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\t\tint lastPosition = 0;\r", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\t\t\tcurrentType = interfaces[j];\r", "-\t\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) {\r", "-\t\t\t\t\t\t\t// if interface as not already been visited\r", "-\t\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "-\r", "-\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\t\t\t\texactMatch,\r", "-\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\tinvocationSite);\r", "-\r", "-\t\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "-\t\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t// bit reinitialization\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tcurrentType = scope.getJavaLangObject();\r", "-\t\t}\r", "-\r", "-\t\twhile (currentType != null) {\r", "-\t\t\tfindMethods(\r", "-\t\t\t\tselector,\r", "-\t\t\t\targTypes,\r", "-\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tmethodsFound,\r", "-\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\texactMatch,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite);\r", "-\t\t\tcurrentType = currentType.superclass();\r", "-\t\t}\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b79abd99ffdcb0000131063fc75f85f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r private void findMethods(\r \tchar[] selector,\r \tTypeBinding[] argTypes,\r \tReferenceBinding receiverType,\r \tScope scope,\r \tObjectVector methodsFound,\r \tboolean onlyStaticMethods,\r \tboolean exactMatch)", "diff": ["+}\r", "+private void findMethods(\r", "+\tchar[] selector,\r", "+\tTypeBinding[] argTypes,\r", "+\tReferenceBinding receiverType,\r", "+\tScope scope,\r", "+\tObjectVector methodsFound,\r", "+\tboolean onlyStaticMethods,\r", "+\tboolean exactMatch) {\r", "+\r", "+\tif (selector == null) return;\r", "+\r", "+\tReferenceBinding currentType = receiverType;\r", "+\tif (currentType.isInterface()) {\r", "+\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\r", "+\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\tint lastPosition = 0;\r", "+\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "+\t\t\t\t\tcurrentType = interfaces[j];\r", "+\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "+\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "+\r", "+\t\t\t\t\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\r", "+\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "+\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "+\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\r", "+\t\t\t// bit reinitialization\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tcurrentType = scope.getJavaLangObject();\r", "+\t}\r", "+\r", "+\twhile (currentType != null) {\r", "+\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\t\tcurrentType = currentType.superclass();\r", "+\t}\r", "+}\r", "-\tprivate void findMethods(\r", "-\t\tchar[] selector,\r", "-\t\tTypeBinding[] argTypes,\r", "-\t\tReferenceBinding receiverType,\r", "-\t\tScope scope,\r", "-\t\tObjectVector methodsFound,\r", "-\t\tboolean onlyStaticMethods,\r", "-\t\tboolean exactMatch,\r", "-\t\tInvocationSite invocationSite) {\r", "-\t\tif (selector == null)\r", "-\t\t\treturn;\r", "-\t\tReferenceBinding currentType = receiverType;\r", "-\t\tif (currentType.isInterface()) {\r", "-\t\t\tfindMethods(\r", "-\t\t\t\tselector,\r", "-\t\t\t\targTypes,\r", "-\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tmethodsFound,\r", "-\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\texactMatch,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite);\r", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\t\tint lastPosition = 0;\r", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\t\t\tcurrentType = interfaces[j];\r", "-\t\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) {\r", "-\t\t\t\t\t\t\t// if interface as not already been visited\r", "-\t\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "-\r", "-\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\t\t\t\texactMatch,\r", "-\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\tinvocationSite);\r", "-\r", "-\t\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "-\t\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t// bit reinitialization\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tcurrentType = scope.getJavaLangObject();\r", "-\t\t}\r", "-\r", "-\t\twhile (currentType != null) {\r", "-\t\t\tfindMethods(\r", "-\t\t\t\tselector,\r", "-\t\t\t\targTypes,\r", "-\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tmethodsFound,\r", "-\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\texactMatch,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite);\r", "-\t\t\tcurrentType = currentType.superclass();\r", "-\t\t}\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67439d29f516d603659b4b94d2bd6bc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r private void findMethods(\r \tchar[] selector,\r \tTypeBinding[] argTypes,\r \tReferenceBinding receiverType,\r \tScope scope,\r \tObjectVector methodsFound,\r \tboolean onlyStaticMethods,\r \tboolean exactMatch)", "diff": ["+}\r", "+private void findMethods(\r", "+\tchar[] selector,\r", "+\tTypeBinding[] argTypes,\r", "+\tReferenceBinding receiverType,\r", "+\tScope scope,\r", "+\tObjectVector methodsFound,\r", "+\tboolean onlyStaticMethods,\r", "+\tboolean exactMatch) {\r", "+\r", "+\tif (selector == null) return;\r", "+\r", "+\tReferenceBinding currentType = receiverType;\r", "+\tif (currentType.isInterface()) {\r", "+\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\r", "+\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\tint lastPosition = 0;\r", "+\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "+\t\t\t\t\tcurrentType = interfaces[j];\r", "+\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "+\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "+\r", "+\t\t\t\t\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\r", "+\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "+\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "+\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\r", "+\t\t\t// bit reinitialization\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tcurrentType = scope.getJavaLangObject();\r", "+\t}\r", "+\r", "+\twhile (currentType != null) {\r", "+\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\t\tcurrentType = currentType.superclass();\r", "+\t}\r", "+}\r", "-\tprivate void findMethods(\r", "-\t\tchar[] selector,\r", "-\t\tTypeBinding[] argTypes,\r", "-\t\tReferenceBinding receiverType,\r", "-\t\tScope scope,\r", "-\t\tObjectVector methodsFound,\r", "-\t\tboolean onlyStaticMethods,\r", "-\t\tboolean exactMatch,\r", "-\t\tInvocationSite invocationSite) {\r", "-\t\tif (selector == null)\r", "-\t\t\treturn;\r", "-\t\tReferenceBinding currentType = receiverType;\r", "-\t\tif (currentType.isInterface()) {\r", "-\t\t\tfindMethods(\r", "-\t\t\t\tselector,\r", "-\t\t\t\targTypes,\r", "-\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tmethodsFound,\r", "-\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\texactMatch,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite);\r", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\t\tint lastPosition = 0;\r", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\t\t\tcurrentType = interfaces[j];\r", "-\t\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) {\r", "-\t\t\t\t\t\t\t// if interface as not already been visited\r", "-\t\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "-\r", "-\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\t\t\t\texactMatch,\r", "-\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\tinvocationSite);\r", "-\r", "-\t\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "-\t\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t// bit reinitialization\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tcurrentType = scope.getJavaLangObject();\r", "-\t\t}\r", "-\r", "-\t\twhile (currentType != null) {\r", "-\t\t\tfindMethods(\r", "-\t\t\t\tselector,\r", "-\t\t\t\targTypes,\r", "-\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tmethodsFound,\r", "-\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\texactMatch,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite);\r", "-\t\t\tcurrentType = currentType.superclass();\r", "-\t\t}\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3852e3ff4e5e959ff492ad575d410f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r private void findMethods(\r \tchar[] selector,\r \tTypeBinding[] argTypes,\r \tReferenceBinding receiverType,\r \tScope scope,\r \tObjectVector methodsFound,\r \tboolean onlyStaticMethods,\r \tboolean exactMatch)", "diff": ["+}\r", "+private void findMethods(\r", "+\tchar[] selector,\r", "+\tTypeBinding[] argTypes,\r", "+\tReferenceBinding receiverType,\r", "+\tScope scope,\r", "+\tObjectVector methodsFound,\r", "+\tboolean onlyStaticMethods,\r", "+\tboolean exactMatch) {\r", "+\r", "+\tif (selector == null) return;\r", "+\r", "+\tReferenceBinding currentType = receiverType;\r", "+\tif (currentType.isInterface()) {\r", "+\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\r", "+\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\tint lastPosition = 0;\r", "+\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "+\t\t\t\t\tcurrentType = interfaces[j];\r", "+\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "+\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "+\r", "+\t\t\t\t\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\r", "+\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "+\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "+\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\r", "+\t\t\t// bit reinitialization\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tcurrentType = scope.getJavaLangObject();\r", "+\t}\r", "+\r", "+\twhile (currentType != null) {\r", "+\t\tfindMethods(selector, argTypes, currentType.methods(), scope, methodsFound, onlyStaticMethods, exactMatch);\r", "+\t\tcurrentType = currentType.superclass();\r", "+\t}\r", "+}\r", "-\tprivate void findMethods(\r", "-\t\tchar[] selector,\r", "-\t\tTypeBinding[] argTypes,\r", "-\t\tReferenceBinding receiverType,\r", "-\t\tScope scope,\r", "-\t\tObjectVector methodsFound,\r", "-\t\tboolean onlyStaticMethods,\r", "-\t\tboolean exactMatch,\r", "-\t\tInvocationSite invocationSite) {\r", "-\t\tif (selector == null)\r", "-\t\t\treturn;\r", "-\t\tReferenceBinding currentType = receiverType;\r", "-\t\tif (currentType.isInterface()) {\r", "-\t\t\tfindMethods(\r", "-\t\t\t\tselector,\r", "-\t\t\t\targTypes,\r", "-\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tmethodsFound,\r", "-\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\texactMatch,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite);\r", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\t\tint lastPosition = 0;\r", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\t\t\tcurrentType = interfaces[j];\r", "-\t\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) {\r", "-\t\t\t\t\t\t\t// if interface as not already been visited\r", "-\t\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "-\r", "-\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\t\t\t\texactMatch,\r", "-\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\tinvocationSite);\r", "-\r", "-\t\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "-\t\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t// bit reinitialization\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tcurrentType = scope.getJavaLangObject();\r", "-\t\t}\r", "-\r", "-\t\twhile (currentType != null) {\r", "-\t\t\tfindMethods(\r", "-\t\t\t\tselector,\r", "-\t\t\t\targTypes,\r", "-\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tmethodsFound,\r", "-\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\texactMatch,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite);\r", "-\t\t\tcurrentType = currentType.superclass();\r", "-\t\t}\r", "-\t}\r"]}], "num": 59370}
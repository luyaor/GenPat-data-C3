{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c43234b2ecdbd747478bd7c3fb018ec5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d62b899aa4c8c6f86cea810fad81f39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "cdbba3fe3494f2d010469af9060ef95e48842233", "commitAfterChange": "35725fdbc820b5d03438d3e4a4d3db79142d2182", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r void recordReferences(TypeBinding[] types)", "signatureAfterChange": "\r void recordTypeReferences(TypeBinding[] types)", "diff": ["-void recordReferences(TypeBinding[] types) {\r", "-\tif (qualifiedReferences == null) return; // we're not recording dependencies\r", "-\tif (types == null || types.length == 0) return;\r", "-\r", "-// Do not think we need to record supertypes of method arguments & thrown exceptions\r", "-// If a field/method is retrieved from such a type then a separate call does the job\r", "-//\tfor (int i = 0, max = types.length; i < max; i++)\r", "-//\t\trecordTypeReference(types[i]);\r", "-\r", "-\tfor (int i = 0, max = types.length; i < max; i++) {\r", "-\t\tTypeBinding type = types[i];\r", "-\t\tif (type.isArrayType())\r", "-\t\t\ttype = ((ArrayBinding) type).leafComponentType;\r", "-\t\tif (!type.isBaseType())\r", "-\t\t\trecordReference(((ReferenceBinding) type).compoundName);\r", "-\t}\r", "-}\r", "+void recordTypeReferences(TypeBinding[] types) {\r", "+\tif (qualifiedReferences == null) return; // not recording dependencies\r", "+\tif (types == null || types.length == 0) return;\r", "+\r", "+\tfor (int i = 0, max = types.length; i < max; i++) {\r", "+\t\t// No need to record supertypes of method arguments & thrown exceptions, just the compoundName\r", "+\t\t// If a field/method is retrieved from such a type then a separate call does the job\r", "+\t\tTypeBinding type = types[i];\r", "+\t\tif (type.isArrayType())\r", "+\t\t\ttype = ((ArrayBinding) type).leafComponentType;\r", "+\t\tif (!type.isBaseType()) {\r", "+\t\t\tReferenceBinding actualType = (ReferenceBinding) type;\r", "+\t\t\tif (!actualType.isLocalType())\r", "+\t\t\t\trecordQualifiedReference(actualType.isMemberType()\r", "+\t\t\t\t\t? CharOperation.splitOn('.', actualType.readableName())\r", "+\t\t\t\t\t: actualType.compoundName);\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9055db5915116a76c7f7669c204ba424", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/JavaBuilder.java", "commitBeforeChange": "5522509d02d97339e9f746e9c7e9e58d8bfe5580", "commitAfterChange": "e3d38d54656be191fa1d8d0f586f0801ff0c9c11", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \r \r private void initializeBuilder() throws CoreException", "signatureAfterChange": " \r \r private void initializeBuilder() throws CoreException", "diff": ["+\t\r", "+\tString filterSequence = (String)JavaCore.getOptions().get(OPTION_ResourceCopyFilter);\r", "+\tif (filterSequence != null){\r", "+\t\tthis.resourceFilters = CharOperation.splitOn(',', filterSequence.toCharArray());\r", "+\t\t// pattern match a resource/folder name with: CharOperation.match(resourceFilters[0], rscName, true);\r", "+\t}\r"]}], "num": 24199}
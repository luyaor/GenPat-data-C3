{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b4b9043331a8f9a081b36e8a47dfb2a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b56a298cfbb45bbfa11e230ee92c3c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "94923d3acfa7fb7266e9eb4199d83aab0f8b9fca", "commitAfterChange": "3300bd0a2560c278ec7d1063d301ade85a3f2d14", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " protected boolean equalsDOMNode(IDOMNode node) throws JavaModelException", "signatureAfterChange": " protected boolean equalsDOMNode(IDOMNode node)", "diff": ["-protected boolean equalsDOMNode(IDOMNode node) throws JavaModelException {", "+protected boolean equalsDOMNode(IDOMNode node) {", "-\t\t\t// iterate through all the types inside the receiver and see if one of them can fit", "-\t\t\tIType[] types = getTypes();", "-\t\t\tString typeNodeName = nodeName.substring(0, nodeName.indexOf(SUFFIX_STRING_java));", "-\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "-\t\t\t\tif (types[i].getElementName().equals(typeNodeName)) {", "-\t\t\t\t\treturn true;", "+\t\t\ttry {", "+\t\t\t\t// iterate through all the types inside the receiver and see if one of them can fit", "+\t\t\t\tIType[] types = getTypes();", "+\t\t\t\tString typeNodeName = nodeName.substring(0, nodeName.indexOf(SUFFIX_STRING_java));", "+\t\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "+\t\t\t\t\tif (types[i].getElementName().equals(typeNodeName)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5e153aef63beab71682bfad7712fa4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMethod.java", "commitBeforeChange": "94923d3acfa7fb7266e9eb4199d83aab0f8b9fca", "commitAfterChange": "3300bd0a2560c278ec7d1063d301ade85a3f2d14", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected boolean equalsDOMNode(IDOMNode node) throws JavaModelException", "signatureAfterChange": " protected boolean equalsDOMNode(IDOMNode node)", "diff": ["-protected boolean equalsDOMNode(IDOMNode node) throws JavaModelException {", "+protected boolean equalsDOMNode(IDOMNode node) {", "-\t\tIDOMMethod m = (IDOMMethod)node;", "-\t\tif (isConstructor()) {", "-\t\t\treturn ", "-\t\t\t\t(m.isConstructor() || m.getName().equals(this.getElementName()) /* case of a constructor that is being renamed */) ", "-\t\t\t\t\t&& signatureEquals(m);", "-\t\t} else {", "-\t\t\treturn super.equalsDOMNode(node) && signatureEquals(m);", "+\t\ttry {", "+\t\t\tIDOMMethod m = (IDOMMethod)node;", "+\t\t\tif (isConstructor()) {", "+\t\t\t\treturn ", "+\t\t\t\t\t(m.isConstructor() || m.getName().equals(this.getElementName()) /* case of a constructor that is being renamed */) ", "+\t\t\t\t\t\t&& signatureEquals(m);", "+\t\t\t} else {", "+\t\t\t\treturn super.equalsDOMNode(node) && signatureEquals(m);", "+\t\t\t}", "+\t\t} catch (JavaModelException e) {", "+\t\t\treturn false;"]}], "num": 18468}
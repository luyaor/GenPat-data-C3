{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb766ea57e7dda03281e2b5a2fe58fe7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "561a86a8ff72a6a345bcaaa420f0ce4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "15dcf1c47322fd1abf8ecc7d7c8332878ffa2ca4", "commitAfterChange": "82a0f3c12838ccee831a07a711dbd532d22679fb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate Annotation[] convertAnnotations(IAnnotatable element) throws JavaModelException", "signatureAfterChange": "  \tprivate Annotation[] convertAnnotations(IAnnotatable element) throws JavaModelException", "diff": ["-\t\tchar[] cuSource = getSource();", "-\t\tint recordedAnnotations = 0;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tISourceRange positions = annotations[i].getSourceRange();", "-\t\t\tint start = positions.getOffset();", "-\t\t\tint end = start + positions.getLength();", "-\t\t\tchar[] annotationSource = CharOperation.subarray(cuSource, start, end);", "-\t\t\tif (annotationSource != null) {", "-    \t\t\tExpression expression = parseMemberValue(annotationSource);", "-    \t\t\t/*", "-    \t\t\t * expression can be null or not an annotation if the source has changed between", "-    \t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "-    \t\t\t * this parsing occurred.", "-    \t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "-    \t\t\t */", "-    \t\t\tif (expression instanceof Annotation) {", "-    \t\t\t\tastAnnotations[recordedAnnotations++] = (Annotation) expression;", "-    \t\t\t}", "+\t\tif (length > 0) {", "+\t\t\tchar[] cuSource = getSource();", "+\t\t\tint recordedAnnotations = 0;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tISourceRange positions = annotations[i].getSourceRange();", "+\t\t\t\tint start = positions.getOffset();", "+\t\t\t\tint end = start + positions.getLength();", "+\t\t\t\tchar[] annotationSource = CharOperation.subarray(cuSource, start, end);", "+\t\t\t\tif (annotationSource != null) {", "+\t    \t\t\tExpression expression = parseMemberValue(annotationSource);", "+\t    \t\t\t/*", "+\t    \t\t\t * expression can be null or not an annotation if the source has changed between", "+\t    \t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "+\t    \t\t\t * this parsing occurred.", "+\t    \t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "+\t    \t\t\t */", "+\t    \t\t\tif (expression instanceof Annotation) {", "+\t    \t\t\t\tastAnnotations[recordedAnnotations++] = (Annotation) expression;", "+\t    \t\t\t}", "+\t\t\t\t}", "-\t\t}", "-\t\tif (length != recordedAnnotations) {", "-\t\t\t// resize to remove null annotations", "-\t\t\tSystem.arraycopy(astAnnotations, 0, (astAnnotations = new Annotation[recordedAnnotations]), 0, recordedAnnotations);", "+\t\t\tif (length != recordedAnnotations) {", "+\t\t\t\t// resize to remove null annotations", "+\t\t\t\tSystem.arraycopy(astAnnotations, 0, (astAnnotations = new Annotation[recordedAnnotations]), 0, recordedAnnotations);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "999be74a2940a343107427f77cdc936c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "2445b4918489720c19f8f06e5268b782d8fa3e09", "commitAfterChange": "a4c0884f4909a7148eef43d80a79301d90c42921", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static Object convertDOMValueToMirrorValue(Object domValue,  \t\t\t\t\t\t\t\t\t\t\t\t\t   String name,\t \t\t\t\t\t\t\t\t\t\t\t\t\t   EclipseMirrorImpl parent, \t\t\t\t\t\t\t\t\t\t\t\t\t   DeclarationImpl decl,  \t\t\t\t\t\t\t\t\t\t\t\t\t   ProcessorEnvImpl env)", "signatureAfterChange": "     private static Object convertDOMValueToMirrorValue(Object domValue,  \t\t\t\t\t\t\t\t\t\t\t\t\t   String name,\t \t\t\t\t\t\t\t\t\t\t\t\t\t   EclipseMirrorImpl parent, \t\t\t\t\t\t\t\t\t\t\t\t\t   DeclarationImpl decl,  \t\t\t\t\t\t\t\t\t\t\t\t\t   ProcessorEnvImpl env, \t\t\t\t\t\t\t\t\t\t\t\t\t   TypeMirror expectedType)", "diff": ["-\t\t\t\t\t\t\t\t\t\t\t\t\t   ProcessorEnvImpl env)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t   ProcessorEnvImpl env,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t   TypeMirror expectedType)", "-        else if(domValue instanceof Boolean   ||", "-\t\t\t\tdomValue instanceof Byte      ||", "-\t\t\t\tdomValue instanceof Character ||", "-\t\t\t\tdomValue instanceof Double    || ", "-\t\t\t\tdomValue instanceof Float     ||", "-\t\t\t\tdomValue instanceof Integer   ||", "-\t\t\t\tdomValue instanceof Long      ||", "-\t\t\t\tdomValue instanceof Short     ||", "-\t\t\t\tdomValue instanceof String ) ", "-\t\t\treturn domValue;", "+        ", "+        final Object returnValue;", "+        if( domValue instanceof Boolean   ||", "+\t\t\tdomValue instanceof Byte      ||", "+\t\t\tdomValue instanceof Character ||", "+\t\t\tdomValue instanceof Double    || ", "+\t\t\tdomValue instanceof Float     ||", "+\t\t\tdomValue instanceof Integer   ||", "+\t\t\tdomValue instanceof Long      ||", "+\t\t\tdomValue instanceof Short     ||", "+\t\t\tdomValue instanceof String ) ", "+\t\t\treturnValue = domValue;", "+        ", "-\t\t\treturn Factory.createDeclaration((IVariableBinding)domValue, env);\t\t\t", "+        \treturnValue = Factory.createDeclaration((IVariableBinding)domValue, env);\t\t\t", "+            final TypeMirror leaf; ", "+            if( expectedType instanceof ArrayType )", "+            \tleaf = ((ArrayType)expectedType).getComponentType();", "+            else", "+            \tleaf = expectedType; // doing our best here.", "-\t\t\t\tObject o = convertDOMValueToMirrorValue( elements[i], name, parent, decl, env );", "+\t\t\t\tObject o = convertDOMValueToMirrorValue( elements[i], name, parent, decl, env, leaf );", "-\t\t\treturn Factory.createTypeMirror((ITypeBinding)domValue, env);", "+\t\t\treturnValue = Factory.createTypeMirror((ITypeBinding)domValue, env);", "-\t\t\treturn Factory.createAnnotationMirror((IResolvedAnnotation)domValue, decl, env);", "+\t\t\treturnValue = Factory.createAnnotationMirror((IResolvedAnnotation)domValue, decl, env);", "+        else\t        ", "+\t\t\t// should never reach this point", "+\t\t\tthrow new IllegalStateException(\"cannot build annotation value object from \" + domValue);", "-\t\t// should never reach this point", "-\t\tthrow new IllegalStateException(\"cannot build annotation value object from \" + domValue);", "+        return performNecessaryTypeConversion(expectedType, returnValue, name, parent, env);", "+    }"]}], "num": 66790}
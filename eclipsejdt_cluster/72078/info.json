{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a34eeea1aa299f92836c3361abfa6e3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ec0d47b0edcae8c541984ce21552206", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "a9418855905ec3893c6b4d120dab4313f397185e", "commitAfterChange": "57b4d27e30475beb9493c429d9900b65333bbe6c", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["-\t\t// get preferences set to their default", "-\t\tif (inheritJavaCoreOptions){", "-\t\t\tString[] defaultPropertyNames = preferences.defaultPropertyNames();", "-\t\t\tfor (int i = 0; i < defaultPropertyNames.length; i++){", "-\t\t\t\tString propertyName = defaultPropertyNames[i];", "-\t\t\t\tif (optionNames.contains(propertyName)){", "-\t\t\t\t\toptions.put(propertyName, preferences.getDefaultString(propertyName).trim());", "-\t\t\t\t}", "-\t\t\t}\t\t", "-\t\t}", "+\t\t// project cannot hold custom preferences set to their default, as it uses CUSTOM_DEFAULT_OPTION_VALUE", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6df1f281a7b498de162d91f419c20753", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, JavaProject project)", "signatureAfterChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, JavaProject project)", "diff": ["-\t\t", "+", "-\t\t\t\ttry {", "-\t\t\t\t\tJavaModelManager.PerProjectInfo info = project.getPerProjectInfo();", "-\t\t\t\t\tif (info.rawClasspath != null) { // if there is an in-memory classpath", "-\t\t\t\t\t\tproject.saveClasspath(info.rawClasspath, info.outputLocation);", "-\t\t\t\t\t}", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\tUtil.log(e, \"Could not save classpath for \"+ project.getPath()); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "+//\t\t\t\ttry {", "+//\t\t\t\t\tJavaModelManager.PerProjectInfo info = project.getPerProjectInfo();", "+//\t\t\t\t\tif (info.rawClasspath != null) { // if there is an in-memory classpath", "+//\t\t\t\t\t\tproject.saveClasspath(info.rawClasspath, info.outputLocation);", "+//\t\t\t\t\t}", "+//\t\t\t\t} catch (JavaModelException e) {", "+//\t\t\t\t\tif (project.getProject().isAccessible()) {", "+//\t\t\t\t\t\tUtil.log(e, \"Could not save classpath for \"+ project.getPath()); //$NON-NLS-1$", "+//\t\t\t\t\t}", "+//\t\t\t\t}"]}], "num": 72078}
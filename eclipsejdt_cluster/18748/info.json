{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "774eafd15c19b846b909cedf4258b4ff", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "412326e4680652a878ec82cf58376a48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/CharOperation.java", "commitBeforeChange": "bef4c5dc335e4766b9aab99de5f2d0512ecb779a", "commitAfterChange": "354f375450d972454ab50692e7588deeb00e49c5", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public static final boolean pathMatch(char[] pattern, char[] path, boolean isCaseSensitive, char pathSeparator)", "signatureAfterChange": " public static final boolean pathMatch(char[] pattern, char[] path, boolean isCaseSensitive, char pathSeparator)", "diff": ["-\tint iPattern = 0, patternLength = pattern.length;", "-\tint iPath = 0, pathLength = path.length;", "-", "-\t/* check first segment */", "-\tchar patternChar = 0;", "-\twhile ((iPattern < patternLength) && (patternChar = pattern[iPattern]) != '*'){", "-\t\tif (iPath == pathLength) return false;", "-\t\tif (patternChar != (isCaseSensitive ", "-\t\t\t\t\t\t\t\t? path[iPath] ", "-\t\t\t\t\t\t\t\t: Character.toLowerCase(path[iPath]))", "-\t\t\t\t&& patternChar != '?'){", "+\t", "+\tchar[][] patternSegments = splitOn(pathSeparator, pattern);", "+\tchar[][] pathSegments = splitOn(pathSeparator, path);", "+\tchar[] patternSegment = null;", "+\t", "+\tint iPatternSegment = 0, patternSegmentLength = patternSegments.length;", "+\tint iPathSegment = 0, pathSegmentLength = pathSegments.length;", "+\t", "+\tfinal char[] doubleStar = new char[] { '*', '*' };", "+\tfor (int i = 0; i < patternSegmentLength; i++) {", "+\t\tif (patternSegments[i].length == 2 && patternSegments[i][0] == '*' && patternSegments[i][1] == '*') {", "+\t\t\tpatternSegments[i] = doubleStar;", "+\t\t}", "+\t}", "+\t", "+\t// first segments", "+\twhile (iPatternSegment < patternSegmentLength && (patternSegment = patternSegments[iPatternSegment]) != doubleStar) {", "+\t\tif (iPathSegment == pathSegmentLength) return false;", "+\t\tif (!match(patternSegment, pathSegments[iPathSegment], isCaseSensitive)) {", "-\t\tiPath++;", "-\t\tiPattern++;", "+\t\t", "+\t\tiPatternSegment++;", "+\t\tiPathSegment++;", "-\t/* check sequence of star+segment */", "+", "+\t/* check sequence of doubleStar+segment */", "-\tif (patternChar == '*'){", "-\t\tsegmentStart = ++iPattern; // skip star", "+\tif (patternSegment == doubleStar){", "+\t\tsegmentStart = ++iPatternSegment; // skip star", "-\tint prefixStart = iPath;", "-\tcheckSegment: while (iPath < pathLength && iPattern < patternLength){", "+\tint prefixStart = iPathSegment;", "+\tcheckSegment: while (iPathSegment < pathSegmentLength && iPatternSegment < patternSegmentLength){", "-\t\tif ((patternChar = pattern[iPattern]) == '*'){", "-\t\t\tsegmentStart = ++iPattern; // skip start", "-\t\t\tprefixStart = iPath;", "+\t\tif ((patternSegment = patternSegments[iPatternSegment]) == doubleStar){", "+\t\t\tsegmentStart = ++iPatternSegment; // skip start", "+\t\t\tprefixStart = iPathSegment;", "-\t\t/* chech current name character */", "-\t\tif ((isCaseSensitive ", "-\t\t\t\t? path[iPath] ", "-\t\t\t\t: Character.toLowerCase(path[iPath]))!= patternChar", "-\t\t\t\t\t&& patternChar != '?'){", "-\t\t\tiPattern = segmentStart; // mismatch - restart current segment", "-\t\t\tiPath = ++prefixStart;", "+\t\t/* chech current path segment */", "+\t\tif (!match(patternSegment, pathSegments[iPathSegment], isCaseSensitive)) {", "+\t\t\tiPatternSegment = segmentStart; // mismatch - restart current segment", "+\t\t\tiPathSegment = ++prefixStart;", "-\t\tiPath++;", "-\t\tiPattern++;", "+\t\tiPathSegment++;", "+\t\tiPatternSegment++;", "-\treturn (segmentStart == patternLength)", "-\t\t\t|| (iPath == pathLength && iPattern == patternLength)\t", "-\t\t\t|| (iPattern == patternLength - 1 && pattern[iPattern] == '*'); ", "+\treturn (segmentStart == patternSegmentLength)", "+\t\t\t|| (iPathSegment == pathSegmentLength && iPatternSegment == patternSegmentLength)\t", "+\t\t\t|| (iPatternSegment == patternSegmentLength - 1 && patternSegments[iPatternSegment] == doubleStar); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af3d013ebb9149ad0ed83309c9ec7b9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[3][];", "-\t\tint lastPosition = -1;", "-\t\tReferenceBinding[] itsInterfaces = null;", "+\t\tReferenceBinding[] interfacesToVisit = null;", "+\t\tint nextPosition = 0;", "-\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\tReferenceBinding[] itsInterfaces = superType.superInterfaces();", "+\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\tnextPosition = itsInterfaces.length;", "+\t\t\tinterfacesToVisit = itsInterfaces;", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t\t} else {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\tfor (int j = 0, l = interfaces.length; j < l; j++) {", "-\t\t\t\tsuperType = interfaces[j];", "-\t\t\t\tif (superType.isValidBinding()) {", "-\t\t\t\t\tMethodBinding[] methods = superType.getMethods(currentMethod.selector);", "-\t\t\t\t\tfor (int m = 0, n = methods.length; m < n; m++){", "-\t\t\t\t\t\tMethodBinding substitute = computeSubstituteMethod(methods[m], currentMethod);", "-\t\t\t\t\t\tif (substitute != null && !doesSubstituteMethodOverride(currentMethod, substitute) && detectNameClash(currentMethod, substitute))", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\tsuperType = interfacesToVisit[i];", "+\t\t\tif (superType.isValidBinding()) {", "+\t\t\t\tMethodBinding[] methods = superType.getMethods(currentMethod.selector);", "+\t\t\t\tfor (int m = 0, n = methods.length; m < n; m++){", "+\t\t\t\t\tMethodBinding substitute = computeSubstituteMethod(methods[m], currentMethod);", "+\t\t\t\t\tif (substitute != null && !doesSubstituteMethodOverride(currentMethod, substitute) && detectNameClash(currentMethod, substitute))", "+\t\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}], "num": 18748}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c707151d121650e0a5e1637668bf818", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ce2f03213269bd2a9f4d2c41f1fa788", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "fffe0226b316a10993369d727f8c3eea5e70ad6e", "commitAfterChange": "b9a24a44a980bf3229c906639157a97b45b07dd7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "signatureAfterChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "diff": ["+\t\tIPath projectOutput = null;", "-\t\t\tclasspath = project.getExpandedClasspath(true);", "+\t\t\tclasspath = project.getResolvedClasspath(true/*ignore unresolved variable*/);", "-\t\t\tbinIsProject = projectPath.equals(project.getOutputLocation());", "+\t\t\tprojectOutput = project.getOutputLocation();", "+\t\t\tbinIsProject = projectPath.equals(projectOutput);", "-\t\t\t\t\t\t// ignore this file if referred to on the build path", "-\t\t\t\t\t\tif (project.findPackageFragmentRoot0(resFullPath) == null) {", "-\t\t\t\t\t\t\t// ignore .java file if src == project", "-\t\t\t\t\t\t\tif (srcIsProject ", "-\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName)", "-\t\t\t\t\t\t\t\t&& !Util.isExcluded(res, exclusionPatterns)) {", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// ignore .class file if bin == project", "-\t\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName)) {", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// else add non java resource", "-\t\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tnonJavaResources,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// ignore a jar file on the classpath", "+\t\t\t\t\t\tif (Util.isArchiveFileName(resName) && this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// ignore .java file if src == project", "+\t\t\t\t\t\tif (srcIsProject ", "+\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName)", "+\t\t\t\t\t\t\t&& !Util.isExcluded(res, exclusionPatterns)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// ignore .class file if bin == project", "+\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\tnonJavaResources,", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;", "-\t\t\t\t\t\tif (!this.isOutputLocation(resFullPath, classpath, project.getOutputLocation())", "-\t\t\t\t\t\t\t&& project.findPackageFragmentRoot0(resFullPath) == null", "-\t\t\t\t\t\t\t&& project.findPackageFragment0(resFullPath) == null) {", "-\t\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tnonJavaResources,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// ignore folders on the classpath or that correspond to an output location", "+\t\t\t\t\t\tif (this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\tnonJavaResources,", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a39aadc32763aea0abbc83ea332fc99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tprivate Object[] computeNonJavaResources(JavaProject project)", "signatureAfterChange": "\r private Object[] computeNonJavaResources(JavaProject project)", "diff": ["-\t */\r", "-\tprivate Object[] computeNonJavaResources(JavaProject project) {\r", "-\t\tObject[] nonJavaResources = new IResource[5];\r", "-\t\tint nonJavaResourcesCounter = 0;\r", "-\t\ttry {\r", "-\t\t\tIResource[] members = ((IContainer) project.getUnderlyingResource()).members();\r", "-\t\t\tfor (int i = 0, max = members.length; i < max; i++) {\r", "-\t\t\t\tIResource res = members[i];\r", "-\t\t\t\tswitch (res.getType()) {\r", "-\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tString extension = res.getProjectRelativePath().getFileExtension();\r", "-\t\t\t\t\t\tif (!\"java\".equalsIgnoreCase(extension)\r", "-\t\t\t\t\t\t\t&& !\"class\".equalsIgnoreCase(extension)) {\r", "-\t\t\t\t\t\t\t// check if this file might be a jar or a zip inside the build path\r", "-\t\t\t\t\t\t\tIPath resFullPath = res.getFullPath();\r", "-\t\t\t\t\t\t\tif (project.findPackageFragmentRoot(resFullPath) == null) {\r", "-\t\t\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {\r", "-\t\t\t\t\t\t\t\t\t// resize\r", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\tnonJavaResources,\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tnonJavaResourcesCounter);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;\r", "-\t\t\t\t\t\t\t}\r", "+ */\r", "+private Object[] computeNonJavaResources(JavaProject project) {\r", "+\tObject[] nonJavaResources = new IResource[5];\r", "+\tint nonJavaResourcesCounter = 0;\r", "+\ttry {\r", "+\t\tIResource[] members = ((IContainer) project.getUnderlyingResource()).members();\r", "+\t\tfor (int i = 0, max = members.length; i < max; i++) {\r", "+\t\t\tIResource res = members[i];\r", "+\t\t\tswitch (res.getType()) {\r", "+\t\t\t\tcase IResource.FILE :\r", "+\t\t\t\t\tString extension = res.getProjectRelativePath().getFileExtension();\r", "+\t\t\t\t\t// check if this file might be a jar or a zip inside the build path\r", "+\t\t\t\t\tIPath resFullPath = res.getFullPath();\r", "+\t\t\t\t\tif (project.findPackageFragmentRoot(resFullPath) == null) {\r", "+\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {\r", "+\t\t\t\t\t\t\t// resize\r", "+\t\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\t\tnonJavaResources, \r", "+\t\t\t\t\t\t\t\t0, \r", "+\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), \r", "+\t\t\t\t\t\t\t\t0, \r", "+\t\t\t\t\t\t\t\tnonJavaResourcesCounter); \r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResource.FOLDER :\r", "-\t\t\t\t\t\tIPath resFullPath = res.getFullPath();\r", "-\t\t\t\t\t\tif (!resFullPath.equals(project.getOutputLocation())\r", "-\t\t\t\t\t\t\t&& project.findPackageFragmentRoot(resFullPath) == null\r", "-\t\t\t\t\t\t\t&& project.findPackageFragment(resFullPath) == null) {\r", "-\t\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {\r", "-\t\t\t\t\t\t\t\t// resize\r", "-\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\tnonJavaResources,\r", "-\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),\r", "-\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesCounter);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;\r", "+\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IResource.FOLDER :\r", "+\t\t\t\t\tresFullPath = res.getFullPath();\r", "+\t\t\t\t\tif (!resFullPath.equals(project.getOutputLocation())\r", "+\t\t\t\t\t\t&& project.findPackageFragmentRoot(resFullPath) == null\r", "+\t\t\t\t\t\t&& project.findPackageFragment(resFullPath) == null) {\r", "+\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {\r", "+\t\t\t\t\t\t\t// resize\r", "+\t\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\t\tnonJavaResources, \r", "+\t\t\t\t\t\t\t\t0, \r", "+\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), \r", "+\t\t\t\t\t\t\t\t0, \r", "+\t\t\t\t\t\t\t\tnonJavaResourcesCounter); \r", "-\t\t\t\t}\r", "+\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;\r", "+\t\t\t\t\t}\r", "-\t\t\tif (nonJavaResources.length != nonJavaResourcesCounter) {\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tnonJavaResources,\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter]),\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tnonJavaResourcesCounter);\r", "-\t\t\t}\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\tnonJavaResources = NO_NON_JAVA_RESOURCES;\r", "-\t\t\tnonJavaResourcesCounter = 0;\r", "-\t\treturn nonJavaResources;\r", "-\t}\r", "+\t\tif (nonJavaResources.length != nonJavaResourcesCounter) {\r", "+\t\t\tSystem.arraycopy(\r", "+\t\t\t\tnonJavaResources, \r", "+\t\t\t\t0, \r", "+\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter]), \r", "+\t\t\t\t0, \r", "+\t\t\t\tnonJavaResourcesCounter); \r", "+\t} catch (CoreException e) {\r", "+\t\tnonJavaResources = NO_NON_JAVA_RESOURCES;\r", "+\t\tnonJavaResourcesCounter = 0;\r", "+\treturn nonJavaResources;\r", "+}\r"]}], "num": 9254}
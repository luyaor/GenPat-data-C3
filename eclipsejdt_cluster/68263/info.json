{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef9c5c4762a243b39fd1148f7926fa85", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df5a0fba4f29f3beea3bb75d532c04bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "2820b43f038a3bcfacbc2797064d7e5f6a2cb56e", "commitAfterChange": "a570286b736c470e3a8d4706cda3b67517e91cfc", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void findMethodBinding(BlockScope scope, TypeBinding[] argumentTypes)", "signatureAfterChange": " protected void findMethodBinding(BlockScope scope, TypeBinding[] argumentTypes)", "diff": ["+\t", "+\t/* There are embedded assumptions in the JLS8 type inference scheme that a successful solution of the type equations results in an", "+\t   applicable method. This appears to be a tenuous assumption, at least one not made by the JLS7 engine or the reference compiler and ", "+\t   there are cases where this assumption would appear invalid: See https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537, where we allow ", "+\t   certain compatibility constrains around raw types to be violated. ", "+       ", "+       Here, we filter out such inapplicable methods with raw type usage that may have sneaked past overload resolution and type inference, ", "+       playing the devils advocate, blaming the invocations with raw arguments that should not go blameless. At this time this is in the ", "+       nature of a point fix and is not a general solution which needs to come later (that also includes AE, QAE and ECC)", "+    */", "+\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "+\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8 && this.binding instanceof ParameterizedGenericMethodBinding && this.binding.isValidBinding()) {", "+\t\tif (!compilerOptions.postResolutionRawTypeCompatibilityCheck)", "+\t\t\treturn;", "+\t\tParameterizedGenericMethodBinding pgmb = (ParameterizedGenericMethodBinding) this.binding;", "+\t\tInferenceContext18 ctx = getInferenceContext(pgmb);", "+\t\tif (ctx == null || ctx.stepCompleted < InferenceContext18.BINDINGS_UPDATED)", "+\t\t\treturn;", "+\t\tint length = pgmb.typeArguments == null ? 0 : pgmb.typeArguments.length;", "+\t\tboolean sawRawType = false;", "+\t\tfor (int i = 0;  i < length; i++) {", "+\t\t\t/* Must check compatibility against capture free method. Formal parameters cannot have captures, but our machinery is not up to snuff to", "+\t\t\t   construct a PGMB without captures at the moment - for one thing ITCB does not support uncapture() yet, for another, INTERSECTION_CAST_TYPE", "+\t\t\t   does not appear fully hooked up into isCompatibleWith and isEquivalent to everywhere. At the moment, bail out if we see capture.", "+\t\t\t*/   ", "+\t\t\tif (pgmb.typeArguments[i].isCapture())", "+\t\t\t\treturn;", "+\t\t\tif (pgmb.typeArguments[i].isRawType())", "+\t\t\t\tsawRawType = true;", "+\t\t}", "+\t\tif (!sawRawType)", "+\t\t\treturn;", "+\t\tlength = this.arguments == null ? 0 : this.arguments.length;", "+\t\tif (length == 0)", "+\t\t\treturn;", "+\t\tTypeBinding [] finalArgumentTypes = new TypeBinding[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tTypeBinding finalArgumentType = this.arguments[i].resolvedType;", "+\t\t\tif (finalArgumentType == null || !finalArgumentType.isValidBinding())  // already sided with the devil.", "+\t\t\t\treturn;", "+\t\t\tfinalArgumentTypes[i] = finalArgumentType; ", "+\t\t}", "+\t\tif (scope.parameterCompatibilityLevel(this.binding, finalArgumentTypes, false) == Scope.NOT_COMPATIBLE)", "+\t\t\tthis.binding = new ProblemMethodBinding(this.binding.original(), this.binding.selector, finalArgumentTypes, ProblemReasons.NotFound);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f704ab48eb11e135905cdc9ee1638d20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetOutputLocationOperation.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["+\tif (fOutputLocation == null) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.NULL_PATH);\r", "+\t}\r", "+\t\r", "+\tif (fOutputLocation.isAbsolute()) {\r", "+\t\tIProject project = ((IJavaProject) fElementsToProcess[0]).getProject();\r", "+\r", "+\t\tif (project.getFullPath().isPrefixOf(fOutputLocation)) {\r", "+\t\t\t//project relative path\r", "+\t\t\tString projectName = fOutputLocation.segment(0);\r", "+\t\t\tif (!projectName.equals(fElementsToProcess[0].getElementName())) {\r", "+\t\t\t\t//a workspace relative path outside of this project\r", "+\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.PATH_OUTSIDE_PROJECT, fOutputLocation);\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DEVICE_PATH, fOutputLocation);\r", "+\t\t}\r", "+\t} else {\r", "+\t\treturn new JavaModelStatus(IJavaModelStatusConstants.RELATIVE_PATH, fOutputLocation);\r", "+\t}\r", "+\r", "-\treturn JavaConventions.validateClasspath((IJavaProject) fElementsToProcess[0], classpath, fOutputLocation);\r", "+\r", "+\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\tboolean allowNestingInOutput = false;\r", "+\tboolean hasSource = false;\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\tif (classpath[i].getPath().equals(fOutputLocation)){\r", "+\t\t\tallowNestingInOutput = true;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "+\r", "+\t// check all entries\r", "+\tfor (int i = 0 ; i < classpath.length; i++) {\r", "+\t\tIClasspathEntry entry = classpath[i];\r", "+\t\tIPath entryPath = entry.getPath();\r", "+\r", "+\t\t// no further check if entry coincidates with project or output location\r", "+\t\tif (entryPath.equals(projectPath)) continue;\r", "+\t\tif (entryPath.equals(fOutputLocation)) continue;\r", "+\t\t\r", "+\t\t// prevent nesting output location inside entry\r", "+\t\tif (entryPath.isPrefixOf(fOutputLocation)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, fOutputLocation);\r", "+\t\t}\r", "+\r", "+\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "+\t\tif (!allowNestingInOutput && fOutputLocation.isPrefixOf(entryPath)) {\r", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, fOutputLocation);\r", "+\t\t}\r", "+\t}\r", "+\treturn JavaModelStatus.VERIFIED_OK;\r"]}], "num": 68263}
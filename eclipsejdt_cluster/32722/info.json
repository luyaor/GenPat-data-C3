{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9caa5713603b45ef9e3a21f44f481e00", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "149ae24dd5a449759c6200d555b5ead3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ThrownExceptionFinder.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic ReferenceBinding[] find(TryStatement tryStatement, BlockScope scope)", "signatureAfterChange": " \tpublic void processThrownExceptions(TryStatement tryStatement, BlockScope scope)", "diff": ["-\tpublic ReferenceBinding[] find(TryStatement tryStatement, BlockScope scope) {", "+\t */", "+\tpublic void processThrownExceptions(TryStatement tryStatement, BlockScope scope) {", "+\t\tthis.caughtExceptions = new SimpleSet();", "+\t\tthis.discouragedExceptions = new SimpleSet();", "-\t\tremoveCaughtExceptions(tryStatement);", "-", "-\t\tReferenceBinding[] result = new ReferenceBinding[this.thrownExceptions.elementSize];", "-\t\tthis.thrownExceptions.asArray(result);", "-\t\treturn result;", "+\t\tremoveCaughtExceptions(tryStatement, true /*remove unchecked exceptions this time*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0824d389f13c10a75c0d7809bfb1998", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "8f7da2986bdba03e85c12e961553bad48253860e", "commitAfterChange": "a6ee91242a0f1cf80235353dbfc9f7b2518d4e00", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue, String encoding) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(String docUrlValue, String encoding) throws JavaModelException", "diff": ["+\t\tInputStream stream = null;", "+\t\t\tconnection.setUseCaches(false);", "+\t\t\tstream = connection.getInputStream();", "+\t\t\tchar[] contents = null;", "-\t\t\t\tInputStream stream = docUrl.openStream();", "-\t\t\t\tchar[] contents = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(stream, -1, contentEncoding);", "-\t\t\t\tif (contents != null) {", "-\t\t\t\t\treturn String.valueOf(contents);", "-\t\t\t\t}", "+\t\t\t\tcontents = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(stream, -1, contentEncoding);", "-\t\t\t\tInputStream stream = docUrl.openStream();", "-\t\t\t\tchar[] contents = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(stream, -1, encoding);", "-\t\t\t\tif (contents != null) {", "-\t\t\t\t\treturn String.valueOf(contents);", "-\t\t\t\t}", "+\t\t\t\tcontents = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(stream, -1, encoding);", "+\t\t\t}", "+\t\t\tif (contents != null) {", "+\t\t\t\treturn String.valueOf(contents);", "+\t\t} finally {", "+\t\t\tif (stream != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tstream.close();", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 32722}
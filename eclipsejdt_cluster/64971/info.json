{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c984d78c60657cd24f8e1f630f812b16", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "170ef23de797c564bdfdb505c2553c3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "48c062bdb9d6c67e0ab7ada621b2e78159b00da7", "commitAfterChange": "c33fa703a95df265770d385ad9292308f48aa3cc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tString computeRootPath(String javaFilePath, char[] contents)", "signatureAfterChange": " \tprivate String computeRootPath(File directory)", "diff": ["+\t}", "+\tprivate String computeRootPath(File directory) {", "+\t\tFile[] files = directory.listFiles();", "+\t\tfor (int i = 0; i < files.length; i++) {", "+\t\t\tFile file = files[i];", "+\t\t\tif (file.isDirectory()) {", "+\t\t\t\tString rootPath = computeRootPath(file);", "+\t\t\t\tif (rootPath != null) return rootPath;", "+\t\t\t} else if (Util.isJavaFileName(file.getName())) {", "+\t\t\t\ttry {", "+\t\t\t\t\tchar[] contents = Util.getFileCharContent(file, this.encoding);", "+\t\t\t\t\tIPath fullPath = new Path(file.getPath());", "+\t\t\t\t\tIPath relativePath = fullPath.removeFirstSegments(this.sourcePath.segmentCount()).setDevice(null);", "+\t\t\t\t\tString rootPath = computeRootPath(relativePath.toString(), contents);", "+\t\t\t\t\tif (rootPath != null) return rootPath;", "+\t\t\t\t} catch (IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf02a0baeba591e106374e01a22d83f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "409f0d1ccf0133d5fcf6863869c728111e50135d", "commitAfterChange": "84e2da9db5b8e3d6a6df97b0f7ad6795dd65a9ad", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic boolean execute()", "signatureAfterChange": "\r \tpublic boolean execute()", "diff": ["-\t\t\tfinal String OK = \"OK\"; //$NON-NLS-1$\r", "-\t\t\tfinal String DELETED = \"DELETED\"; //$NON-NLS-1$\r", "-\t\t\tfinal long indexLastModified = index.getIndexFile().lastModified();\r", "+\t\t\tthis.indexLastModified = index.getIndexFile().lastModified();\r", "-\t\t\tfinal Hashtable indexedFileNames = new Hashtable(100);\r", "+\t\t\tthis.indexedFileNames = new Hashtable(100);\r", "-\t\t\t\tindexedFileNames.put(fileName, DELETED);\r", "+\t\t\t\tthis.indexedFileNames.put(fileName, DELETED);\r", "-\t\t\tproject.accept(new IResourceVisitor() {\r", "-\t\t\t\tpublic boolean visit(IResource resource) {\r", "-\t\t\t\t\tif (resource.getType() == IResource.FILE) {\r", "-\t\t\t\t\t\tString extension = resource.getFileExtension();\r", "-\t\t\t\t\t\tif ((extension != null) && extension.equalsIgnoreCase(\"java\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\t\tIPath path = resource.getLocation();\r", "-\t\t\t\t\t\t\tif (path != null) {\r", "-\t\t\t\t\t\t\t\tFile resourceFile = path.toFile();\r", "-\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();\r", "-\t\t\t\t\t\t\t\tif (indexedFileNames.get(name) == null) {\r", "-\t\t\t\t\t\t\t\t\tindexedFileNames.put(name, resource);\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tindexedFileNames.put(\r", "-\t\t\t\t\t\t\t\t\t\tname,\r", "-\t\t\t\t\t\t\t\t\t\tresourceFile.lastModified() > indexLastModified\r", "-\t\t\t\t\t\t\t\t\t\t\t? (Object) resource\r", "-\t\t\t\t\t\t\t\t\t\t\t: (Object) OK);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\treturn false;\r", "+\t\t\tJavaCore javaCore = JavaCore.getJavaCore();\r", "+\t\t\tIJavaProject javaProject = javaCore.create(this.project);\r", "+\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "+\t\t\tIWorkspaceRoot root = this.project.getWorkspace().getRoot();\r", "+\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\t\t\t\t// Index only the project's source folders.\r", "+\t\t\t\t// Indexing of libraries is done in a separate job\r", "+\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_SOURCE)) {\r", "+\t\t\t\t\tIPath entryPath = entry.getPath();\r", "+\t\t\t\t\tIResource sourceFolder = root.findMember(entryPath);\r", "+\t\t\t\t\tif (sourceFolder != null) {\r", "+\t\t\t\t\t\tsourceFolder.accept(this);\r", "-\t\t\t\t\treturn true;\r", "-\t\t\t});\r", "+\t\t\t}\r", "+\t\t\t\r"]}], "num": 64971}
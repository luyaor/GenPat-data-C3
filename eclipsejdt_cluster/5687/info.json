{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e8910b51abdcce7b00b21548f5cfd55", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01fa726e261511fc21682da8b3e22443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "5ecdad70bb6e2e1bbd5c5ec539acc885a5698c4e", "commitAfterChange": "7f8c41fdd4e487762406a2cb6aaa3aa1d260201c", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames)", "signatureAfterChange": "  private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, AnnotationBinding [][] annotationsOnDimensions, TypeAnnotationWalker walker, char [][][] missingTypeNames)", "diff": ["-private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames) {", "-\tAnnotationBinding [] annotations;", "-\tAnnotationBinding [][] annotationsOnDimensions = null;", "-\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "-\t\tfor (int i = 0; i < dimension; i++) {", "-\t\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t\t\tif (annotations != Binding.NO_ANNOTATIONS) { ", "-\t\t\t\tif (annotationsOnDimensions == null)", "-\t\t\t\t\tannotationsOnDimensions = new AnnotationBinding[dimension][];", "-\t\t\t\tannotationsOnDimensions[i] = annotations;", "-\t\t\t}", "-\t\t\twalker = walker.toNextArrayDimension();", "-\t\t}", "-\t}", "-\t", "-\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, AnnotationBinding [][] annotationsOnDimensions, TypeAnnotationWalker walker, char [][][] missingTypeNames) {", "+\tAnnotationBinding [] annotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87f24ba1d079e25b8adb21b9c7cb1757", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 52, "signatureBeforeChange": "  private TypeBinding typeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker)", "signatureAfterChange": "  private TypeBinding typeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames)", "diff": ["-private TypeBinding typeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker) {", "-\tlong tagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "-\tif (dimension == 0) {", "-\t\tif (tagBits != 0L)", "-\t\t\treturn createAnnotatedType(typeVariableBinding, tagBits);", "-\t\treturn typeVariableBinding;", "-\t} else {", "-\t\tlong[] annotationTagBitsOnDimensions = null;", "-\t\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "-\t\t\tannotationTagBitsOnDimensions = getAnnotationTagBitsOnDimensions(dimension, walker);", "+private TypeBinding typeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames) {", "+\tAnnotationBinding [] annotations;", "+\tAnnotationBinding [][] annotationsOnDimensions = null;", "+\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\t\tfor (int i = 0; i < dimension; i++) {", "+\t\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\tif (annotations != Binding.NO_ANNOTATIONS) { ", "+\t\t\t\tif (annotationsOnDimensions == null)", "+\t\t\t\t\tannotationsOnDimensions = new AnnotationBinding[dimension][];", "+\t\t\t\tannotationsOnDimensions[i] = annotations;", "+\t\t\t}", "+\t\t\twalker = walker.toNextArrayDimension();", "-\t\treturn createArrayType(typeVariableBinding, dimension, annotationTagBitsOnDimensions);", "+\t", "+\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS)", "+\t\ttypeVariableBinding = (TypeVariableBinding) createAnnotatedType(typeVariableBinding, new AnnotationBinding [][] { annotations });", "+\t", "+\tif (dimension == 0) {", "+\t\treturn typeVariableBinding;", "+\t}", "+\treturn this.typeSystem.getArrayType(typeVariableBinding, dimension, AnnotatableTypeSystem.flattenedAnnotations(annotationsOnDimensions));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adf13cae90e61abf752272efcf0205e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "13012d4d345052a766efaa509c91e36e4e9c4bd7", "commitAfterChange": "0e6d159b6b5bd2cefe41360d930f2e2ea9602f91", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["+\t// annotations on dimensions?", "+\tAnnotationBinding [][] annotationsOnDimensions = null;", "+\tif (dimension > 0 && walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\t\tfor (int i = 0; i < dimension; i++) {", "+\t\t\tAnnotationBinding [] annotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\tif (annotations != Binding.NO_ANNOTATIONS) { ", "+\t\t\t\tif (annotationsOnDimensions == null)", "+\t\t\t\t\tannotationsOnDimensions = new AnnotationBinding[dimension][];", "+\t\t\t\t\tannotationsOnDimensions[i] = annotations;", "+\t\t\t}", "+\t\t\twalker = walker.toNextArrayDimension();", "+\t\t}", "+\t}", "-\t\t\t\treturn typeFromTypeVariable(staticVariables[i], dimension, walker, missingTypeNames);", "+\t\t\t\treturn getTypeFromTypeVariable(staticVariables[i], dimension, walker, missingTypeNames);", "-\t\t\t\t\treturn typeFromTypeVariable(enclosingTypeVariables[i], dimension, walker, missingTypeNames);", "+\t\t\t\t\treturn getTypeFromTypeVariable(enclosingTypeVariables[i], dimension, walker, missingTypeNames);", "-\t\treturn dimension == 0 ? type : createArrayType(type, dimension);", "+\t\treturn dimension == 0 ? type : createArrayType(type, dimension, AnnotatableTypeSystem.flattenedAnnotations(annotationsOnDimensions));", "-\treturn dimension == 0 ? (TypeBinding) parameterizedType : createArrayType(parameterizedType, dimension);", "+\treturn dimension == 0 ? (TypeBinding) parameterizedType : createArrayType(parameterizedType, dimension, AnnotatableTypeSystem.flattenedAnnotations(annotationsOnDimensions));"]}], "num": 5687}
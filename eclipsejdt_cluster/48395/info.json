{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18f4b62f4e12d882ea20886a400b0a25", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31e34a594fce0edb2a641913e65747eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "9a828b6f308f1048d5448d6c6f9c881639322d34", "commitAfterChange": "5028738b115a56f3f04beb6089ff2c05854751f1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testCreateMethodSignature()", "signatureAfterChange": " public void testCreateMethodSignature()", "diff": ["+\t// tests involving 1.5 formal type parameters and thrown exceptions", "+\tassertEquals(", "+\t\t\t\"Signature#createMethodSignature is not correct 3\", ", "+\t\t\t\"()V\", ", "+\t\t\tSignature.createMethodSignature(new String[0], \"V\", new String[0], new String[0]));", "+\tassertEquals(", "+\t\t\t\"Signature#createMethodSignature is not correct 4\", ", "+\t\t\t\"<x:y:>()V\", ", "+\t\t\tSignature.createMethodSignature(new String[0], \"V\",", "+\t\t\t\t\tnew String[] {\"x:\", \"y:\"}, new String[0]));", "+\tassertEquals(", "+\t\t\t\"Signature#createMethodSignature is not correct 5\", ", "+\t\t\t\"()V^Qexception;^Qerror;\", ", "+\t\t\tSignature.createMethodSignature(new String[0], \"V\",", "+\t\t\t\t\tnew String[0], new String[] {\"Qexception;\", \"Qerror;\"}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "700a2a3ada8fb6f4af214c25087ced3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "5228dfdf7fa03d5185db0383190068a0dd5a8b1d", "commitAfterChange": "0bd28d2896289b3835c461013a60982c7e5b2bf2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test008()", "signatureAfterChange": " \tpublic void test008()", "diff": ["+\t\t// int -> Integer", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// byte -> Byte", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static byte bar() {return 1;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(byte i) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(byte... i) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Byte b) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// char -> Character", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static char bar() {return 'c';}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(char i) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(char... i) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Character c) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// float -> Float", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static float bar() {return 0.0f;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(float f) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(float... f) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Float f) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// double -> Double", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static double bar() {return 0.0;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(double d) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(double... d) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Double d) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// long -> Long", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static long bar() {return 0;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(long l) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(long... l) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Long l) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// short -> Short", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static short bar() {return 0;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(short s) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(short... s) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Short s) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// boolean -> Boolean", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static boolean bar() {return true;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(boolean b) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(boolean... b) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Boolean b) { System.out.print('y'); }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82220768eced655f62957dd9ce58b420", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "d5cfbf43310ee4287ca95e41bcf01793920b4037", "commitAfterChange": "19036ed763985597632dc62fba09c6522d0864ac", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean referredByContainer)", "signatureAfterChange": " \t \tprivate static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, IClasspathContainer entryContainer, boolean checkSourceAttachment, boolean referredByContainer)", "diff": ["+\t", "+\tprivate static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, IClasspathContainer entryContainer, boolean checkSourceAttachment, boolean referredByContainer){", "-\t\t\t\t\t\t\t\tIJavaModelStatus containerEntryStatus = validateClasspathEntry(project, containerEntry, checkSourceAttachment, true/*referred by container*/);", "+\t\t\t\t\t\t\t\tIJavaModelStatus containerEntryStatus = validateClasspathEntry(project, containerEntry, container, checkSourceAttachment, true/*referred by container*/);", "-\t\t\t\t\tIJavaModelStatus status = validateClasspathEntry(project, entry, checkSourceAttachment, false/*not referred by container*/);", "+\t\t\t\t\tIJavaModelStatus status = validateClasspathEntry(project, entry, null, checkSourceAttachment, false/*not referred by container*/);", "-\t\t\t\tIJavaModelStatus status = validateLibraryEntry(path, project, checkSourceAttachment ? entry.getSourceAttachmentPath() : null, entryPathMsg);", "+\t\t\t\tString containerInfo = null;", "+\t\t\t\tif (entryContainer != null) {", "+\t\t\t\t\tif (entryContainer instanceof UserLibraryClasspathContainer) {", "+\t\t\t\t\t\tcontainerInfo = Messages.bind(Messages.classpath_userLibraryInfo, new String[] {entryContainer.getDescription()});", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcontainerInfo = Messages.bind(Messages.classpath_containerInfo, new String[] {entryContainer.getDescription()});", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tIJavaModelStatus status = validateLibraryEntry(path, project, containerInfo, checkSourceAttachment ? entry.getSourceAttachmentPath() : null, entryPathMsg);", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INCOMPATIBLE_JDK_LEVEL, project, path, CompilerOptions.versionFromJdkLevel(prereqProjectTargetJDK));", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INCOMPATIBLE_JDK_LEVEL,", "+\t\t\t\t\t\t\t\t\t\tproject, path, ", "+\t\t\t\t\t\t\t\t\t\tMessages.bind(Messages.classpath_incompatibleLibraryJDKLevel,", "+\t\t\t\t\t\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tproject.getElementName(),", "+\t\t\t\t\t\t\t\t\t\t\t\t\tCompilerOptions.versionFromJdkLevel(projectTargetJDK), ", "+\t\t\t\t\t\t\t\t\t\t\t\t\tpath.makeRelative().toString(),", "+\t\t\t\t\t\t\t\t\t\t\t\t\tCompilerOptions.versionFromJdkLevel(prereqProjectTargetJDK)}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83185c8b13c1003978c954181e814d25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "commitAfterChange": "1585d95aacd546d0fef8e25ddee2f5a6f64f7c62", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void test002()", "signatureAfterChange": "  \tpublic void test003()", "diff": ["+", "+\tpublic void test003() { // Number -> base type", "+\t\t// Integer -> int", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Integer(1));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(int i) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Byte -> byte", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Byte((byte) 1));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(byte b) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Byte -> long", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Byte((byte) 1));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(long l) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Character -> char", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Character('c'));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(char c) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Float -> float", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Float(0.0f));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(float f) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Double -> double", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Double(0.0));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(double d) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Long -> long", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Long(0L));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(long l) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Short -> short", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Short((short) 0));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(short s) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Boolean -> boolean", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(Boolean.TRUE);\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(boolean b) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t}", "-\tpublic void test002() { // convert Byte to long?", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "-\t\t\t\t\"\t\tnew Y().test(new Byte((byte) 1));\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class Y {\\n\" +", "-\t\t\t\t\"\tvoid test(long i) { System.out.print('y'); }\\n\" +", "-\t\t\t\t\"}\\n\",", "-\t\t\t},", "-\t\t\t\"y\"", "-\t\t);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e341e02e001f47821a93e643d157482f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testCreateMethodSignature()", "signatureAfterChange": " public void testCreateMethodSignature()", "diff": ["-", "-\t// tests involving 1.5 formal type parameters and thrown exceptions", "-\tassertEquals(", "-\t\t\t\"Signature#createMethodSignature is not correct 3\", ", "-\t\t\t\"()V\", ", "-\t\t\tSignature.createMethodSignature(new String[0], \"V\", new String[0], new String[0]));", "-\tassertEquals(", "-\t\t\t\"Signature#createMethodSignature is not correct 4\", ", "-\t\t\t\"<x:y:>()V\", ", "-\t\t\tSignature.createMethodSignature(new String[0], \"V\",", "-\t\t\t\t\tnew String[] {\"x:\", \"y:\"}, new String[0]));", "-\tassertEquals(", "-\t\t\t\"Signature#createMethodSignature is not correct 5\", ", "-\t\t\t\"()V^Qexception;^Qerror;\", ", "-\t\t\tSignature.createMethodSignature(new String[0], \"V\",", "-\t\t\t\t\tnew String[0], new String[] {\"Qexception;\", \"Qerror;\"}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa4ff1a5ec1382db56b3303cc1a1ba5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "677c4b39a30069207f57550aec27ea9d04477c82", "commitAfterChange": "a8939af811304c63be0e7f585bcaea4e93cb581f", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tprivate void addNewEntry(final int InsideClasspath, final int InsideSourcepath, ArrayList bootclasspaths, ArrayList classpaths,ArrayList sourcepathClasspaths, String currentClasspathName, ArrayList currentRuleSpecs, int mode, String customEncoding)", "signatureAfterChange": "  \tprivate void addNewEntry(final int InsideClasspath, final int InsideSourcepath, ArrayList bootclasspaths, ArrayList classpaths,ArrayList sourcepathClasspaths, String currentClasspathName, ArrayList currentRuleSpecs, int mode, String customEncoding)", "diff": ["-\t\t\tAccessRuleSet accessRuleSet = new AccessRuleSet(accessRules);", "+\t\t\tString templates[] = new String[AccessRuleSet.MESSAGE_TEMPLATES_LENGTH];", "+\t\t\ttemplates[0] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.type\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", currentClasspathName}); //$NON-NLS-1$ ", "+\t\t\ttemplates[1] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.constructor\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", currentClasspathName}); //$NON-NLS-1$ ", "+\t\t\ttemplates[2] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.method\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", \"{1}\", currentClasspathName}); //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\ttemplates[3] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.field\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", \"{1}\", currentClasspathName}); //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\tAccessRuleSet accessRuleSet = new AccessRuleSet(accessRules, templates);"]}], "num": 48395}
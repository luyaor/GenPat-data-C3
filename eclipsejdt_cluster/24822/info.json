{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cff6ba0cbfc4365dd277512f9a1bbefb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49cf09285ff2b46ca4e3fa2b4344b3d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner)", "diff": ["-\t\t\tif (classFile == null) {", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t}", "-\t\t\tchar[] source = null;", "-\t\t\tString sourceString = null;", "-\t\t\ttry {", "-\t\t\t\tsourceString = classFile.getSource();", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t}", "-\t\t\tif (sourceString == null) {", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t}", "-\t\t\tsource = sourceString.toCharArray();", "-\t\t\tif (!resolveBindings) {", "-\t\t\t\treturn AST.parseCompilationUnit(source);", "-\t\t\t}", "-\t\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "-\t\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "-\t\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "-\t\t\tIJavaProject project = classFile.getJavaProject();", "-\t\t\ttry {", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration =", "-\t\t\t\t\tCompilationUnitResolver.resolve(", "-\t\t\t\t\t\tsource,", "-\t\t\t\t\t\tCharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray()),", "-\t\t\t\t\t\tbuffer.toString(),", "-\t\t\t\t\t\tproject,", "-\t\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());", "-\t\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true);", "-\t\t\t\tAST ast = new AST();", "-\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "-\t\t\t\tast.setBindingResolver(resolver);", "-\t\t\t\tconverter.setAST(ast);", "+\t */", "+\tpublic static CompilationUnit parseCompilationUnit(", "+\t\tIClassFile classFile,", "+\t\tboolean resolveBindings,", "+\t\tWorkingCopyOwner owner) {", "-\t\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "-\t\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\t\treturn cu;", "-\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "-\t\t\t\t * then we simply do a parsing without creating bindings.", "-\t\t\t\t * Therefore all binding resolution will return null.", "-\t\t\t\t */", "-\t\t\t\treturn parseCompilationUnit(source);\t\t\t", "+\t\tif (classFile == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tchar[] source = null;", "+\t\tString sourceString = null;", "+\t\ttry {", "+\t\t\tsourceString = classFile.getSource();", "+\t\t} catch (JavaModelException e) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tif (sourceString == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tsource = sourceString.toCharArray();", "+\t\tif (!resolveBindings) {", "+\t\t\treturn AST.parseCompilationUnit(source);", "+\t\t}", "+\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "+\t\t", "+\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "+\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "+\t\tIJavaProject project = classFile.getJavaProject();", "+\t\tNameLookup lookup = null;", "+\t\ttry {", "+\t\t\t// set the units to look inside", "+\t\t\tlookup = ((JavaProject)project).getNameLookup();", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\t\tlookup.setUnitsToLookInside(workingCopies);", "+\t\t\t", "+\t\t\t// parse and resolve", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration =", "+\t\t\t\tCompilationUnitResolver.resolve(", "+\t\t\t\t\tsource,", "+\t\t\t\t\tCharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray()),", "+\t\t\t\t\tbuffer.toString(),", "+\t\t\t\t\tproject,", "+\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());", "+\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true);", "+\t\t\tAST ast = new AST();", "+\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "+\t\t\tast.setBindingResolver(resolver);", "+\t\t\tconverter.setAST(ast);", "+\t\t", "+\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "+\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "+\t\t\tresolver.storeModificationCount(ast.modificationCount());", "+\t\t\treturn cu;", "+\t\t} catch(JavaModelException e) {", "+\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "+\t\t\t * then we simply do a parsing without creating bindings.", "+\t\t\t * Therefore all binding resolution will return null.", "+\t\t\t */", "+\t\t\treturn parseCompilationUnit(source);\t\t\t", "+\t\t} finally {", "+\t\t\tif (lookup != null) {", "+\t\t\t\tlookup.setUnitsToLookInside(null);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "582776d365dee5b6de64fb4bdc367e7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\t\tICompilationUnit unit, \t\t\tboolean resolveBindings)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tICompilationUnit unit, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner)", "diff": ["-\t\t\tICompilationUnit unit,", "-\t\t\tboolean resolveBindings) {", "+\t */", "+\tpublic static CompilationUnit parseCompilationUnit(", "+\t\tICompilationUnit unit,", "+\t\tboolean resolveBindings,", "+\t\tWorkingCopyOwner owner) {", "+\t\t\tNameLookup lookup = null;", "+\t\t\t\t// set the units to look inside", "+\t\t\t\tlookup = ((JavaProject)unit.getJavaProject()).getNameLookup();", "+\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\t\t\tlookup.setUnitsToLookInside(workingCopies);", "+\t\t\t\t", "+\t\t\t\t// parse and resolve", "+\t\t\t} finally {", "+\t\t\t\tif (lookup != null) {", "+\t\t\t\t\tlookup.setUnitsToLookInside(null);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "709c62a24a8a56f59dba894e0307bae1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tchar[] source, \t\tString unitName, \t\tIJavaProject project)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tchar[] source, \t\tString unitName, \t\tIJavaProject project, \t\tWorkingCopyOwner owner)", "diff": ["+\t */", "+\tpublic static CompilationUnit parseCompilationUnit(", "+\t\tchar[] source,", "+\t\tString unitName,", "+\t\tIJavaProject project,", "+\t\tWorkingCopyOwner owner) {", "+\t\tNameLookup lookup = null;", "+\t\t\t// set the units to look inside", "+\t\t\tlookup = ((JavaProject)project).getNameLookup();", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\t\tlookup.setUnitsToLookInside(workingCopies);", "+\t\t\t\t", "+\t\t\t\t// parse and resolve", "+\t\t} finally {", "+\t\t\tif (lookup != null) {", "+\t\t\t\tlookup.setUnitsToLookInside(null);", "+\t\t\t}"]}], "num": 24822}
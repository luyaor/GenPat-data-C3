{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae4228441c6e4e1136187397e00010e0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85bc8a4e9f8e26bd613554831829ddb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "c68bc9934e48a34d453d6810fef3f4032fb88b14", "commitAfterChange": "7389e11979cd050788c8fca32e602540d323e3bc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\tchar[] tag = new char[length];", "-\t\tSystem.arraycopy(this.source, this.tagSourceStart, tag, 0, length);", "+\t\tif (length == 0) return false; // may happen for some parser (completion for example)", "+\t\tchar firstChar = this.source[this.tagSourceStart];", "-\t\t\t\tif (length == 0) break; // may happen for some parser (completion for example)", "-\t\t\t\tswitch (tag[0]) {", "+\t\t\t\tswitch (firstChar) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_CATEGORY)) {", "+\t\t\t\t\t\tif (length == TAG_CATEGORY_LENGTH && CharOperation.equals(TAG_CATEGORY, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\tif (length == TAG_DEPRECATED_LENGTH && CharOperation.equals(TAG_DEPRECATED, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\tif (length == TAG_EXCEPTION_LENGTH && CharOperation.equals(TAG_EXCEPTION, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_INHERITDOC)) {", "+\t\t\t\t\t\tif (length == TAG_INHERITDOC_LENGTH && CharOperation.equals(TAG_INHERITDOC, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\tif (length == TAG_LINK_LENGTH && CharOperation.equals(TAG_LINK, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t} else if (length == TAG_LINKPLAIN_LENGTH && CharOperation.equals(TAG_LINKPLAIN, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\tif (length == TAG_PARAM_LENGTH && CharOperation.equals(TAG_PARAM, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\tif (length == TAG_SEE_LENGTH && this.source[this.tagSourceStart+1] == TAG_SEE[1] &&  this.source[this.tagSourceEnd] == TAG_SEE[2]) {", "-\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5 && CharOperation.equals(tag, TAG_VALUE)) {", "+\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5 && length == TAG_VALUE_LENGTH && CharOperation.equals(TAG_VALUE, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce7eb50bd6523bf6fc1c6d0bf4d421c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["+\tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {", "+\t\t// if field from parameterized type got found, use the original field at codegen time", "+\t\tif (this.binding instanceof ParameterizedFieldBinding) {", "+\t\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "+\t\t    this.codegenBinding = parameterizedField.originalField;", "+", "+\t\t    // extra cast needed if field type has type variable", "+\t\t    if ((this.codegenBinding.type.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t\t        this.genericCast = this.codegenBinding.type.genericCast(parameterizedField.type);", "+\t\t    }\t\t    ", "+\t\t} else {", "+\t\t    this.codegenBinding = this.binding;", "+\t\t}", "+\t\t", "+\t\t\t\tif (syntheticAccessors == null)", "+\t\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "+\t\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = ", "+\t\t\t\t\t((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(this.codegenBinding, isReadAccess);", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\t\tif (syntheticAccessors == null)", "+\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "+\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = destinationType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\t\t\tif (syntheticAccessors == null)", "+\t\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "+\t\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\tif (this.binding.declaringClass != this.receiverType", "+\t\t\t&& this.binding.declaringClass != null // array.length", "+\t\t\t&& this.binding.constant == NotAConstant", "+\t\t\t\t&& this.binding.declaringClass.id != T_Object)", "+\t\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope))) {", "+\t\t\t\t\tthis.codegenBinding,", "+\t\t\t\t\t(ReferenceBinding) this.receiverType.erasure());", "-\t */", "-\tpublic void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "-", "-\t\tif (!flowInfo.isReachable()) return;", "-\t\tif (binding.isPrivate()) {", "-\t\t\tif (currentScope.enclosingSourceType() != binding.declaringClass) {", "-\t\t\t\tsyntheticWriteAccessor =", "-\t\t\t\t\t((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(binding, false);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);", "-\t\t\t\treturn;", "-\t\t\t}", "-", "-\t\t} else if (receiver instanceof QualifiedSuperReference) { // qualified super", "-", "-\t\t\t// qualified super need emulation always", "-\t\t\tSourceTypeBinding destinationType =", "-\t\t\t\t(SourceTypeBinding) (((QualifiedSuperReference) receiver)", "-\t\t\t\t\t.currentCompatibleType);", "-\t\t\tsyntheticWriteAccessor = destinationType.addSyntheticMethod(binding, false);", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);", "-\t\t\treturn;", "-", "-\t\t} else if (binding.isProtected()) {", "-", "-\t\t\tSourceTypeBinding enclosingSourceType;", "-\t\t\tif (((bits & DepthMASK) != 0)", "-\t\t\t\t&& binding.declaringClass.getPackage()", "-\t\t\t\t\t!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()) {", "-", "-\t\t\t\tSourceTypeBinding currentCompatibleType =", "-\t\t\t\t\t(SourceTypeBinding) enclosingSourceType.enclosingTypeAt(", "-\t\t\t\t\t\t(bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\tsyntheticWriteAccessor =", "-\t\t\t\t\tcurrentCompatibleType.addSyntheticMethod(binding, false);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t\t// if the binding declaring class is not visible, need special action", "-\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\tif (binding.declaringClass != this.receiverType", "-\t\t\t&& !this.receiverType.isArrayType()", "-\t\t\t&& binding.declaringClass != null // array.length", "-\t\t\t&& binding.constant == NotAConstant", "-\t\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& binding.declaringClass.id != T_Object)", "-\t\t\t//no change for Object fields (in case there was)", "-\t\t\t\t|| !binding.declaringClass.canBeSeenBy(currentScope))) {", "-\t\t\tthis.codegenBinding =", "-\t\t\t\tcurrentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t\t\t\tbinding,", "-\t\t\t\t\t(ReferenceBinding) this.receiverType);", "-\t\t}", "-\t}"]}], "num": 66039}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1a775dfe52f5767f66d0c6e9ab7abfb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bcecf0dd10eb214b732ae5a2bcf7de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9201dfdd65456845c29d6dc3323aadc8322279d6", "commitAfterChange": "c8ca8bc0ed355b1996bc738eb2798ac55ee50894", "methodNumberBeforeChange": 288, "methodNumberAfterChange": 289, "signatureBeforeChange": " protected void consumeLambdaExpression()", "signatureAfterChange": " protected void consumeLambdaExpression()", "diff": ["-protected void consumeLambdaExpression() {", "-\t", "-\t// LambdaExpression ::= LambdaParameters '->' LambdaBody", "-\tthis.astLengthPtr--; \t// pop length for LambdaBody (always 1)", "-\tStatement body = (Statement) this.astStack[this.astPtr--];", "-\tif (body instanceof Block) {", "-\t\tthis.nestedType--; \t// matching NestedType in \"LambdaBody ::= NestedType NestedMethod  '{' BlockStatementsopt '}'\"", "-\t\tthis.intPtr--; \t\t// position after '{' pushed during consumeNestedMethod()", "-\t\tif (this.options.ignoreMethodBodies) {", "-\t\t\tbody = new Block(0);", "-\t\t}", "-\t}", "-\tLambdaExpression lexp = new LambdaExpression(this.compilationUnit.compilationResult, arguments, body, false);", "-\tthis.intPtr--;  // ')' position, discard for now.", "-\tlexp.sourceEnd = body.sourceEnd;", "+}", "+protected void consumeLambdaExpression() {", "+\t", "+\t// LambdaExpression ::= LambdaHeader LambdaBody", "+", "+\tthis.astLengthPtr--; \t// pop length for LambdaBody (always 1)", "+\tStatement body = (Statement) this.astStack[this.astPtr--];", "+\tif (body instanceof Block) {", "+\t\tthis.nestedType--; \t// matching NestedType in \"LambdaBody ::= NestedType NestedMethod  '{' BlockStatementsopt '}'\"", "+\t\tthis.intPtr--; \t\t// position after '{' pushed during consumeNestedMethod()", "+\t\tif (this.options.ignoreMethodBodies) {", "+\t\t\tbody = new Block(0);", "+\t\t}", "+\t}", "+", "+\tLambdaExpression lexp = (LambdaExpression) this.astStack[this.astPtr--];", "+\tthis.astLengthPtr--;", "+\tlexp.body = body;", "+\tlexp.sourceEnd = body.sourceEnd;", "+\t", "-\tpushOnExpressionStack(lexp);", "-\tthis.listLength = 0; // reset this.listLength after having read all parameters"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d42aadef2a5d68126e4857d72a794cca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "4f833be4365ac5abb1ac0cf3973cd75cbb0d7487", "commitAfterChange": "227e3d5fec0001fbc06115e3f3e6f09f357952e2", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": "  protected void consumeLambdaExpression()", "signatureAfterChange": " protected void consumeExpressionStatement()", "diff": ["-", "-protected void consumeLambdaExpression() {", "-\t// LambdaExpression ::= LambdaHeader LambdaBody // Synthetic/fake production with a synthetic non-terminal.", "-\tthis.astLengthPtr--; \t// pop length for LambdaBody (always 1)", "-\tStatement body = (Statement) this.astStack[this.astPtr--];", "-\tif (body instanceof Block) {", "-\t\tthis.nestedType--; \t// matching NestedType in \"LambdaBody ::= NestedType NestedMethod  '{' BlockStatementsopt '}'\"", "-\t\tthis.intPtr--; \t\t// position after '{' pushed during consumeNestedMethod()", "-\t\tif (this.options.ignoreMethodBodies) {", "-\t\t\tbody = new Block(0);", "-\t\t}", "-\t}", "-\t", "-\tLambdaExpression lexp = (LambdaExpression) this.astStack[this.astPtr--];", "-\tthis.astLengthPtr--;", "-\tlexp.body = body;", "-\tlexp.sourceEnd = body.sourceEnd;", "-\t", "-\tif (body instanceof Expression) {", "-\t\tExpression expression = (Expression) body;", "-\t\texpression.statementEnd = body.sourceEnd;", "-\t}", "-\tif (this.currentElement != null) {", "-\t\tif (this.currentElement.parseTree() == lexp && this.currentElement.parent != null) {", "-\t\t\tthis.currentElement = this.currentElement.parent;", "-\t\t}", "-\t\tthis.restartRecovery = true;", "-\t}", "-\tif (!this.parsingJava8Plus) {", "-\t\tproblemReporter().lambdaExpressionsNotBelow18(lexp);", "-\t}", "+protected void consumeExpressionStatement() {", "+\tsuper.consumeExpressionStatement();", "+\ttriggerRecoveryUponLambdaClosure();"]}], "num": 25734}
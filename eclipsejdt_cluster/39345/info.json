{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b3fc3ab5fe9858dccbedc857bcfb5ba", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3956e781ffbb8f2a6f3ca1775b1c16fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "32aae0cf1b9f94fe336a2b34d2b2b110c5363f4a", "commitAfterChange": "7fa614421be752542e93fc8394ff005421401e06", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList infos, ArrayList closedUnits, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-private void buildForProject(JavaProject project, ArrayList infos, ArrayList closedUnits, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException {", "+private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException {", "-\tIGenericType[] genericTypes;", "-\tint infosSize = infos.size();", "-\tif (infosSize > 0) {", "-\t\tgenericTypes = new IGenericType[infosSize];", "-\t\tinfos.toArray(genericTypes);", "-\t} else {", "-\t\tgenericTypes = new IGenericType[0];", "-\t}", "-\torg.eclipse.jdt.core.ICompilationUnit[] closedCUs;", "-\tint closedUnitsSize = closedUnits.size();", "-\tif (closedUnitsSize > 0) {", "-\t\tclosedCUs = new org.eclipse.jdt.core.ICompilationUnit[closedUnitsSize];", "-\t\tclosedUnits.toArray(closedCUs);", "-\t} else {", "-\t\tclosedCUs = new org.eclipse.jdt.core.ICompilationUnit[0];", "-\t}", "+\tint openablesLength = potentialSubtypes.size();", "+\tOpenable[] openables = new Openable[openablesLength];", "+\tpotentialSubtypes.toArray(openables);", "-\tif (infosSize > 0 || closedUnitsSize > 0) {", "+\tif (openablesLength > 0) {", "-\t\t\tthis.hierarchyResolver.resolve(genericTypes, closedCUs, localTypes, monitor);", "+\t\t\tthis.hierarchyResolver.resolve(openables, localTypes, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdbdcd3f5573ce2557d91d7716e5153c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "32aae0cf1b9f94fe336a2b34d2b2b110c5363f4a", "commitAfterChange": "7fa614421be752542e93fc8394ff005421401e06", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion, IProgressMonitor monitor)", "signatureAfterChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion, IProgressMonitor monitor)", "diff": ["-\tIType[] types = new IType[size];", "-\tallTypesInRegion.toArray(types);", "-", "-\t/*", "-\t * NOTE: To workaround pb with hierarchy resolver that requests top  ", "-\t * level types in the process of caching an enclosing type, this needs to", "-\t * be sorted in reverse alphabetical order so that top level types are cached", "-\t * before their inner types.", "-\t */", "-\tUtil.sort(", "-\t\ttypes,", "-\t\tnew Util.Comparer() {", "-\t\t\t/**", "-\t\t\t * @see Comparer#compare(Object, Object)", "-\t\t\t */", "-\t\t\tpublic int compare(Object a, Object b) {", "-\t\t\t\treturn - ((IJavaElement)a).getParent().getElementName().compareTo(((IJavaElement)b).getParent().getElementName());", "-\t\t\t}", "+\tHashSet existingOpenables = new HashSet(size);", "+\tOpenable[] openables = new Openable[size];", "+\tint openableIndex = 0;", "+\tfor (int i = 0; i < size; i++) {", "+\t\tIType type = (IType)allTypesInRegion.get(i);", "+\t\tOpenable openable;", "+\t\tif (type.isBinary()) {", "+\t\t\topenable = (Openable)type.getClassFile();", "+\t\t} else {", "+\t\t\topenable = (Openable)type.getCompilationUnit();", "-\t);", "-", "-\t// collect infos and compilation units", "-\tArrayList infos = new ArrayList();", "-\tArrayList closedUnits = new ArrayList();", "-\ttypes : for (int i = 0; i < size; i++) {", "-\t\ttry {", "-\t\t\tIType type = types[i];", "-\t\t\tthis.addInfoFromElement((Openable)type.getOpenable(), infos, closedUnits, type.getPath().toString());", "-\t\t} catch (JavaModelException npe) {", "-\t\t\tcontinue types;", "+\t\tif (existingOpenables.add(openable)) {", "+\t\t\topenables[openableIndex++] = openable;", "-", "-\t// copy vectors into arrays", "-\tIGenericType[] genericTypes;", "-\tint infosSize = infos.size();", "-\tif (infosSize > 0) {", "-\t\tgenericTypes = new IGenericType[infosSize];", "-\t\tinfos.toArray(genericTypes);", "-\t} else {", "-\t\tgenericTypes = new IGenericType[0];", "-\t}", "-\tICompilationUnit[] closedCUs;", "-\tint closedUnitsSize = closedUnits.size();", "-\tif (closedUnitsSize > 0) {", "-\t\tclosedCUs = new ICompilationUnit[closedUnitsSize];", "-\t\tclosedUnits.toArray(closedCUs);", "-\t} else {", "-\t\tclosedCUs = new ICompilationUnit[0];", "+\tif (openableIndex < size) {", "+\t\tSystem.arraycopy(openables, 0, openables = new Openable[openableIndex], 0, openableIndex);", "-\t\tif (monitor != null) monitor.beginTask(\"\", (infosSize+closedUnitsSize) * 2/* 1 for build binding, 1 for connect hierarchy*/); //$NON-NLS-1$", "-\t\tif (infosSize > 0 || closedUnitsSize > 0) {", "+\t\tif (monitor != null) monitor.beginTask(\"\", openableIndex * 2/* 1 for build binding, 1 for connect hierarchy*/); //$NON-NLS-1$", "+\t\tif (openableIndex > 0) {", "-\t\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, closedCUs, null, monitor);", "+\t\t\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);", "-\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, closedCUs, null, monitor);", "+\t\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);"]}], "num": 39345}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e8615f306877558d25443c6d6c8973d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da59e5b72e42f386be232f54abc03184", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInitialize) throws ClassFormatException", "signatureAfterChange": " public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInitialize) throws ClassFormatException", "diff": ["-\tsuper(classFileBytes, 0);", "+\tsuper(classFileBytes, null, 0);", "-\t\t// Read the this.fields, use exception handlers to catch bad format", "+\t\t// Read the fields, use exception handlers to catch bad format", "-\t\t\t\tfield = new FieldInfo(reference, this.constantPoolOffsets, readOffset);", "+\t\t\t\tfield = FieldInfo.createField(reference, this.constantPoolOffsets, readOffset);", "-\t\t// Read the this.methods", "+\t\t// Read the methods", "-\t\t\tMethodInfo method;", "+\t\t\tboolean isAnnotationType = (this.accessFlags & ClassFileConstants.AccAnnotation) != 0;", "-\t\t\t\tmethod = new MethodInfo(reference, this.constantPoolOffsets, readOffset);", "-\t\t\t\tthis.methods[i] = method;", "-\t\t\t\treadOffset += method.sizeInBytes();", "+\t\t\t\tthis.methods[i] = isAnnotationType", "+\t\t\t\t\t? AnnotationMethodInfo.createAnnotationMethod(reference, this.constantPoolOffsets, readOffset)", "+\t\t\t\t\t: MethodInfo.createMethod(reference, this.constantPoolOffsets, readOffset);", "+\t\t\t\treadOffset += this.methods[i].sizeInBytes();", "-\t\t\t\t\tif (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleAnnotationsName)", "-\t\t\t\t\t\t\t|| CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleAnnotationsName)) {", "-\t\t\t\t\t\tdecodeStandardAnnotations(readOffset);", "+\t\t\t\t\tif (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleAnnotationsName)) {", "+\t\t\t\t\t\tdecodeAnnotations(readOffset, true);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleAnnotationsName)) {", "+\t\t\t\t\t\tdecodeAnnotations(readOffset, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f44ff9a4c415652781d956d2b65a6ceb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/FactoryLoaderTests.java", "commitBeforeChange": "7177897be6073a1c35ee9a465aa5f0559da1bff1", "commitAfterChange": "3ef396e7cc3e0323aa7fad284fecd31681852465", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testExternalJarLoader() throws Exception", "signatureAfterChange": " \t \tpublic void testExternalJarLoader() throws Exception", "diff": ["-\t\t// add _extJar to the factory list and rebuild.", "+\t\t// add _extJar to the factory list as an external jar, and rebuild.", "-\t\t// This file will be locked until GC takes care of unloading", "-\t\t// the annotation processor classes.", "-\t\t_extJar.deleteOnExit();", "+\t\t// add _extJar to the factory list as a class-path-relative jar, and rebuild.", "+\t\tifp.addVarJar(_extVarJar);", "+\t\tAptConfig.setFactoryPath(jproj, ifp);", "+\t\t", "+\t\t// rebuild and verify that the processor was loaded", "+\t\tLoaderTestAnnotationProcessor.clearLoaded();", "+\t\tfullBuild( project.getFullPath() );", "+\t\texpectingNoProblems();", "+\t\tassertTrue(LoaderTestAnnotationProcessor.isLoaded());", "+\t\t", "+\t\t// restore to the original", "+\t\tifp.removeVarJar(_extVarJar);", "+\t\tAptConfig.setFactoryPath(jproj, ifp);", "+\t\t", "+\t\t// rebuild and verify that the processor was not loaded.", "+\t\tLoaderTestAnnotationProcessor.clearLoaded();", "+\t\tfullBuild( project.getFullPath() );", "+\t\texpectingNoProblems();", "+\t\tassertFalse(LoaderTestAnnotationProcessor.isLoaded());", "+\t}"]}], "num": 56790}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b1423922f06e8219aa21bdc044b4043", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "111b2022f17211640f21e3fb6bfab047", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "04969acd296957373e2c11d1fa6749ece6b3b165", "commitAfterChange": "a6b612a10e662a9a3068db57f25ae43c85426c25", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tprotected CompilationUnit verifyComments(String fileName, char[] source)", "signatureAfterChange": "  \tprotected CompilationUnit verifyComments(String fileName, char[] source, Map options)", "diff": ["-\t", "+", "+\tprotected CompilationUnit verifyComments(String fileName, char[] source, Map options) {", "-//\t\tMap originalOptions = this.currentProject.getOptions(true);", "-//\t\ttry {", "-//\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_INVALID_JAVADOC, this.compilerOption);", "-//\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS, this.compilerOption);", "-//\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS, this.compilerOption);", "-//\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME, JavaCore.IGNORE);", "-//\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, this.docCommentSupport);", "-\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(testedSource, fileName, this.currentProject);", "-//\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, this.resolveBinding); // resolve bindings", "-\t\t\tif (this.compilerOption.equals(JavaCore.ERROR)) {", "-\t\t\t\tassumeEquals(this.prefix+\"Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "-\t\t\t} else if (this.compilerOption.equals(JavaCore.WARNING)) {", "-\t\t\t\tIProblem[] problemsList = compilUnit.getProblems();", "-\t\t\t\tint length = problemsList.length;", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tproblems.append(\"  - \"+this.prefix+length+\" problems:\"); //$NON-NLS-1$", "-\t\t\t\t\tfor (int i = 0; i < problemsList.length; i++) {", "-\t\t\t\t\t\tproblems.append(\"\t+ \"+problemsList[i]);", "-\t\t\t\t\t}", "+\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(testedSource, fileName, this.currentProject, options);", "+\t\tif (this.compilerOption.equals(JavaCore.ERROR)) {", "+\t\t\tassumeEquals(this.prefix+\"Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "+\t\t} else if (this.compilerOption.equals(JavaCore.WARNING)) {", "+\t\t\tIProblem[] problemsList = compilUnit.getProblems();", "+\t\t\tint length = problemsList.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tproblems.append(\"  - \"+this.prefix+length+\" problems:\"); //$NON-NLS-1$", "+\t\t\t\tfor (int i = 0; i < problemsList.length; i++) {", "+\t\t\t\t\tproblems.append(\"\t+ \"+problemsList[i]);", "-\t\t\tunitComments = compilUnit.getCommentList();", "-//\t\t} finally {", "-//\t\t\tthis.currentProject.setOptions(originalOptions);", "-//\t\t}", "+\t\t}", "+\t\tunitComments = compilUnit.getCommentList();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98fb6108246a2991ea5da4a21b3111a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprotected CompilationUnit verifyComments(String fileName, char[] source, Map options)", "signatureAfterChange": "  \tprotected CompilationUnit verifyComments(String fileName, char[] source, Map options)", "diff": ["-//\t\tMap concreteOptions = options;", "-\t\tif (this.currentProject != null) {", "-\t\t\tif (this.astLevel == AST.JLS3) {", "-\t\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "+\t\tif (currentProject != null) {", "+\t\t\tif (astLevel == AST.JLS3) {", "+\t\t\t\tcurrentProject.setOption(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "-//\t\telse if (concreteOptions == null) {", "-//\t\t\tconcreteOptions = JavaCore.getOptions();", "-//\t\t\tif (this.astLevel == AST.JLS3) {", "-//\t\t\t\tconcreteOptions.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "-//\t\t\t}", "-//\t\t}", "-\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(testedSource, fileName, this.currentProject, options);", "-\t\tif (this.compilerOption.equals(JavaCore.ERROR)) {", "-\t\t\tassumeEquals(this.prefix+\"Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "-\t\t} else if (this.compilerOption.equals(JavaCore.WARNING)) {", "+\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(testedSource, fileName, currentProject, options);", "+\t\tif (compilerOption.equals(JavaCore.ERROR)) {", "+\t\t\tassumeEquals(prefix+\"Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "+\t\t} else if (compilerOption.equals(JavaCore.WARNING)) {", "-\t\t\t\tproblems.append(\"  - \"+this.prefix+length+\" problems:\"); //$NON-NLS-1$", "+\t\t\t\tproblems.append(\"  - \"+prefix+length+\" problems:\"); //$NON-NLS-1$", "-\t\tassumeNotNull(this.prefix+\"Unexpected problems\", unitComments);", "+\t\tassumeNotNull(prefix+\"Unexpected problems\", unitComments);", "-\t\tassumeEquals(this.prefix+\"Wrong number of comments!\", this.comments.size(), size);", "+\t\tassumeEquals(prefix+\"Wrong number of comments!\", comments.size(), size);", "-\t\t\tString stringComment = (String) this.comments.get(i);", "+\t\t\tString stringComment = (String) comments.get(i);", "-\t\t\tassumeEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "+\t\t\tassumeEquals(prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "-\t\t\t\tif (this.docCommentSupport.equals(JavaCore.ENABLED)) {", "-\t\t\t\t\tassumeEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "+\t\t\t\tif (docCommentSupport.equals(JavaCore.ENABLED)) {", "+\t\t\t\t\tassumeEquals(prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "-\t\t\t\t\tif (this.resolveBinding) {", "+\t\t\t\t\tif (resolveBinding) {"]}], "num": 59096}
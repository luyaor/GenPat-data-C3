{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d786bc910c328eaabd903fe70e7583b7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19b69bc19126e0254c2a7456c94e307c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic TypeBinding reportError(BlockScope scope)", "signatureAfterChange": " public TypeBinding reportError(BlockScope scope)", "diff": ["+ */", "+public TypeBinding reportError(BlockScope scope) {", "+\tif (this.binding instanceof ProblemFieldBinding) {", "+\t\tscope.problemReporter().invalidField(this, (FieldBinding) this.binding);", "+\t} else if (this.binding instanceof ProblemReferenceBinding) {", "+\t\tscope.problemReporter().invalidType(this, (TypeBinding) this.binding);", "+\t} else {", "+\t\tscope.problemReporter().unresolvableReference(this, this.binding);", "-\t */", "-\tpublic TypeBinding reportError(BlockScope scope) {", "-\t\tif (binding instanceof ProblemFieldBinding) {", "-\t\t\tscope.problemReporter().invalidField(this, (FieldBinding) binding);", "-\t\t} else if (binding instanceof ProblemReferenceBinding) {", "-\t\t\tscope.problemReporter().invalidType(this, (TypeBinding) binding);", "-\t\t} else {", "-\t\t\tscope.problemReporter().unresolvableReference(this, binding);", "-\t\t}", "-\t\treturn null;", "-\t}", "+\treturn null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c95be3464a2b845f2e83644099a87903", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public boolean complainIfUnreachable(Statement statement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean complainIfUnreachable(Statement statement, BlockScope scope, boolean didAlreadyComplain)", "diff": ["-}", "-public boolean complainIfUnreachable(Statement statement, BlockScope scope) {", "-\t// Report an error if necessary", "-", "-\tboolean isDeadEnd;", "-\tif ((isDeadEnd = (this == DeadEnd)) || isFakeReachable) {", "-\t\tstatement.bits &= ~AstNode.IsReachableMASK;", "-", "-\t\tif (isDeadEnd)", "-\t\t\tscope.problemReporter().unreachableCode(statement);", "-\t\treturn isDeadEnd;", "-\t}", "-\treturn false;", "-}", "+\t// Report an error if necessary", "+\tpublic boolean complainIfUnreachable(Statement statement, BlockScope scope, boolean didAlreadyComplain) {", "+\t", "+\t\tboolean isNotReachable;", "+\t\tif ((isNotReachable = (this == DeadEnd)) || isFakeReachable) {", "+\t\t\tstatement.bits &= ~AstNode.IsReachableMASK;", "+\t", "+\t\t\tif (!didAlreadyComplain && isNotReachable) ", "+\t\t\t\tscope.problemReporter().unreachableCode(statement);", "+\t\t\treturn isNotReachable;", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd0f690787a87d9a8f70152eee322c99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic TypeBinding reportError(BlockScope scope)", "signatureAfterChange": " public TypeBinding reportError(BlockScope scope)", "diff": ["+}", "+public TypeBinding reportError(BlockScope scope) {", "+\t//=====error cases=======", "+\tthis.constant = Constant.NotAConstant;", "+\tif (this.binding instanceof ProblemFieldBinding) {", "+\t\tscope.problemReporter().invalidField(this, (FieldBinding) this.binding);", "+\t} else if (this.binding instanceof ProblemReferenceBinding || this.binding instanceof MissingTypeBinding) {", "+\t\tscope.problemReporter().invalidType(this, (TypeBinding) this.binding);", "+\t} else {", "+\t\tscope.problemReporter().unresolvableReference(this, this.binding);", "-\tpublic TypeBinding reportError(BlockScope scope) {", "-\t\t", "-\t\t//=====error cases=======", "-\t\tconstant = Constant.NotAConstant;", "-\t\tif (binding instanceof ProblemFieldBinding) {", "-\t\t\tscope.problemReporter().invalidField(this, (FieldBinding) binding);", "-\t\t} else if (binding instanceof ProblemReferenceBinding) {", "-\t\t\tscope.problemReporter().invalidType(this, (TypeBinding) binding);", "-\t\t} else {", "-\t\t\tscope.problemReporter().unresolvableReference(this, binding);", "-\t\t}", "-\t\treturn null;", "-\t}", "+\treturn null;", "+}"]}], "num": 24595}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6138ae18bec9a09a4ea3a7e31bc5be16", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cba244df1893058828ee3820c2a0cced", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": " public WildcardBinding createWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind, long annotationTagBits)", "signatureAfterChange": "  public AnnotationBinding getNullableAnnotation()", "diff": ["-}", "-public WildcardBinding createWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind, long annotationTagBits) {", "-\t// cached info is array of already created wildcard  types for this type", "-\tif (genericType == null) // pseudo wildcard denoting composite bounds for lub computation", "-\t\tgenericType = ReferenceBinding.LUB_GENERIC;", "-\tWildcardBinding[] cachedInfo = (WildcardBinding[])this.uniqueWildcardBindings.get(genericType);", "-\tboolean needToGrow = false;", "-\tint index = 0;", "-\tif (cachedInfo != null){", "-\t\tnextCachedType :", "-\t\t\t// iterate existing wildcards for reusing one with same information if any", "-\t\t\tfor (int max = cachedInfo.length; index < max; index++){", "-\t\t\t    WildcardBinding cachedType = cachedInfo[index];", "-\t\t\t    if (cachedType == null) break nextCachedType;", "-\t\t\t    if (cachedType.genericType != genericType) continue nextCachedType; // remain of unresolved type", "-\t\t\t    if (cachedType.rank != rank) continue nextCachedType;", "-\t\t\t    if ((cachedType.tagBits & TagBits.AnnotationNullMASK) != annotationTagBits) continue nextCachedType;", "-\t\t\t    if (cachedType.boundKind != boundKind) continue nextCachedType;", "-\t\t\t    if (cachedType.bound != bound) continue nextCachedType;", "-\t\t\t    if (cachedType.otherBounds != otherBounds) {", "-\t\t\t    \tint cachedLength = cachedType.otherBounds == null ? 0 : cachedType.otherBounds.length;", "-\t\t\t    \tint length = otherBounds == null ? 0 : otherBounds.length;", "-\t\t\t    \tif (cachedLength != length) continue nextCachedType;", "-\t\t\t    \tfor (int j = 0; j < length; j++) {", "-\t\t\t    \t\tif (cachedType.otherBounds[j] != otherBounds[j]) continue nextCachedType;", "-\t\t\t    \t}", "-\t\t\t    }", "-\t\t\t\t// all match, reuse current", "-\t\t\t\treturn cachedType;", "-\t\t}", "-\t\tneedToGrow = true;", "-\t} else {", "-\t\tcachedInfo = new WildcardBinding[10];", "-\t\tthis.uniqueWildcardBindings.put(genericType, cachedInfo);", "-\t}", "-\t// grow cache ?", "-\tint length = cachedInfo.length;", "-\tif (needToGrow && index == length){", "-\t\tSystem.arraycopy(cachedInfo, 0, cachedInfo = new WildcardBinding[length*2], 0, length);", "-\t\tthis.uniqueWildcardBindings.put(genericType, cachedInfo);", "-\t}", "-\t// add new binding", "-\tWildcardBinding wildcard = new WildcardBinding(genericType, rank, bound, otherBounds, boundKind, this);", "-\tif (annotationTagBits != 0)", "-\t\twildcard.tagBits |= annotationTagBits | TagBits.HasNullTypeAnnotation;", "-\tcachedInfo[index] = wildcard;", "-\treturn wildcard;", "+public AnnotationBinding getNullableAnnotation() {", "+\tReferenceBinding nullable = getResolvedType(this.globalOptions.nullableAnnotationName, null);", "+\treturn new AnnotationBinding(nullable, Binding.NO_ELEMENT_VALUE_PAIRS);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce8f1aef2aa3d829de7834e9373310dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  public WildcardBinding createWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind)", "signatureAfterChange": "  public WildcardBinding createWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind)", "diff": ["+\treturn createWildcard(genericType, rank, bound, otherBounds, boundKind, 0);", "+}"]}], "num": 30961}
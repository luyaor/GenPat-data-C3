{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aef20f665b7862381725775ab35e1972", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e065d5a3faef659b24d76964a56a61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "c80004d70ebe07235571e96c3ea452dbc7ba5394", "commitAfterChange": "70dd884582455dcf661aaade70c8faff4213db3a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\tif (match == castType) {", "+ \t\tif (match == castType) {", "+\t\t\tif (match == null && castType.isBoundParameterizedType()) { // cast between unrelated types", "+\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\treturn true;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0f5bad0094a1d2c2a00096bc027ee09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "63f857482ea644a55bc614627e136cecaed43201", "commitAfterChange": "923b5fc879b7a986c0b6c447869a71be0fe4d71a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  public boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": "  public boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["+\t\tcase Binding.TYPE :", "+\t\t\tif (isNarrowing && match == null && expressionType.isParameterizedType()) {", "+\t\t\t\tthis.bits |= ASTNode.UnsafeCast;", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tbreak;"]}], "num": 41631}
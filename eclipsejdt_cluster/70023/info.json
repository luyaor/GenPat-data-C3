{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fab3f124fd02a9f2d9a8a3dfc20a940f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18ce4d407783cd16f8f146c4381fbd9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tMethodBinding createMethod(AbstractMethodDeclaration method)", "signatureAfterChange": " \tMethodBinding createMethod(AbstractMethodDeclaration method)", "diff": ["+\t\t", "+\t\tTypeParameter[] typeParameters = method.typeParameters();", "+\t    // do not construct type variables if source < 1.5", "+\t\tif (typeParameters == null || environment().options.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t    method.binding.typeVariables = NoTypeVariables;", "+\t\t} else {", "+\t\t\tmethod.binding.typeVariables = createTypeVariables(typeParameters, method.binding);", "+\t\t\tmethod.binding.modifiers |= AccGenericSignature;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f14ead1a777534cf127c38db85e9006", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "e5c43dd471dbf8471a49f6e1d0d0bd8b0674d309", "commitAfterChange": "5ddd4f3ebd7249766144e83fbecfadbf5a91a48a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tMethodBinding createMethod(AbstractMethodDeclaration method)", "signatureAfterChange": " \tMethodBinding createMethod(AbstractMethodDeclaration method)", "diff": ["-\t\t\tif (method.isDefaultConstructor()) {", "+\t\t\tif (method.isDefaultConstructor())", "-\t\t\t}", "+", "+\t\tArgument[] argTypes = method.arguments;", "+\t\tint argLength = argTypes == null ? 0 : argTypes.length;", "+\t\tif (argLength > 0 && environment().options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\tif (argTypes[--argLength].isVarArgs)", "+\t\t\t\tmethod.binding.modifiers |= AccVarargs;", "+\t\t\twhile (--argLength >= 0) {", "+\t\t\t\tif (argTypes[argLength].isVarArgs)", "+\t\t\t\t\tproblemReporter().illegalVararg(argTypes[argLength], method);", "+\t\t\t}", "+\t\t}"]}], "num": 70023}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ed4b5ab614d7c00060dcd567cdca7ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4443a0b85429fad6de117c23a8c582e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "c2d49e45d6b46322a9c25ee69257f9e70ab7b1fe", "commitAfterChange": "b94cfd6319609252fee755f36ab03ad2aedb4df4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["-\t} else if (scope.isBoxingCompatibleWith(expressionType, methodType)) {", "+\t} else if (scope.isBoxingCompatibleWith(expressionType, methodType)", "+\t\t\t\t\t\t|| (expressionType.isBaseType()  // narrowing then boxing ?", "+\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "+\t\t\t\t\t\t\t\t&& !methodType.isBaseType()", "+\t\t\t\t\t\t\t\t&& this.expression.isConstantValueOfTypeAssignableToType(expressionType, scope.environment().computeBoxingType(methodType)))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c992281cb7ad4285fa1f5dcd2ecbba71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "c2d49e45d6b46322a9c25ee69257f9e70ab7b1fe", "commitAfterChange": "b94cfd6319609252fee755f36ab03ad2aedb4df4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement)", "signatureAfterChange": " \tpublic Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement)", "diff": ["-\t\t} else if (scope.isBoxingCompatibleWith(caseType, switchExpressionType)) {", "-\t\t\tconstantExpression.computeConversion(scope, caseType, switchExpressionType);", "+\t\t} else if (scope.isBoxingCompatibleWith(caseType, switchExpressionType)", "+\t\t\t\t\t\t|| (caseType.isBaseType()  // narrowing then boxing ?", "+\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "+\t\t\t\t\t\t\t\t&& !switchExpressionType.isBaseType()", "+\t\t\t\t\t\t\t\t&& constantExpression.isConstantValueOfTypeAssignableToType(caseType, scope.environment().computeBoxingType(switchExpressionType)))) {", "+\t\t\t// constantExpression.computeConversion(scope, caseType, switchExpressionType); - do not report boxing/unboxing conversion"]}], "num": 49078}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a435d0f1c1babab045eea9b04904056f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b86b3a9044f7325efe0f1e124ca1588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c6083a2d48fa11ffa1e9554a2f00be6af36feafe", "commitAfterChange": "6dbe2813dd7277bd2252f3441ba09237b6b43790", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void internalAnalyseOneArgument18(BlockScope currentScope, FlowContext flowContext, TypeBinding expectedType, \t\tExpression argument, FlowInfo flowInfo, int nullStatus, Boolean expectedNonNullness, TypeBinding originalExpected)", "signatureAfterChange": " void internalAnalyseOneArgument18(BlockScope currentScope, FlowContext flowContext, TypeBinding expectedType, \t\tExpression argument, FlowInfo flowInfo, int nullStatus, Boolean expectedNonNullness, TypeBinding originalExpected)", "diff": ["+\t\tif (!expectedType.hasNullTypeAnnotations() && expectedNonNullness == Boolean.TRUE) {", "+\t\t\t// improve problem rendering when using a declaration annotation in a 1.8 setting", "+\t\t\tLookupEnvironment env = currentScope.environment();", "+\t\t\texpectedType = env.createAnnotatedType(expectedType, new AnnotationBinding[] {env.getNonNullAnnotation()});", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a6130dd0a55337c0a3d9018bdf10b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "372783581a5723abe8e5c388f38ff5c205e01380", "commitAfterChange": "b0c126113d3919e827d562fe7ceede775b6f96a6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t\tif (isConstructorReference() && this.receiverType.isArrayType()) {", "+\t\t\tSourceTypeBinding sourceType = currentScope.enclosingSourceType();", "+\t\t\tthis.binding = sourceType.addSyntheticArrayConstructor((ArrayBinding) this.receiverType);", "+\t\t}"]}], "num": 43368}
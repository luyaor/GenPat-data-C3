{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ddf5dd132f86e7f278d352dd50481b4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b74be9192e8a82d2a0c724a942a95c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "ee88edc6852ca240266a0a82beb39fc6a3f8a578", "commitAfterChange": "321d0d2c500c247f0447784febbb6a14ba5499be", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-\tif (BasicSearchEngine.VERBOSE) {", "-\t\tSystem.out.println(\"Report matching: \"); //$NON-NLS-1$", "-\t\tSystem.out.println(\"\t- node set:\\n\"+nodeSet); //$NON-NLS-1$", "-\t\tSystem.out.println(\"\t- must resolve: \"+mustResolve); //$NON-NLS-1$", "-\t}", "+\tif (BasicSearchEngine.VERBOSE) {", "+\t\tSystem.out.println(\"Report matching: \"); //$NON-NLS-1$", "+\t\tint size = nodeSet.matchingNodes==null ? 0 : nodeSet.matchingNodes.elementSize;", "+\t\tSystem.out.print(\"\t- node set: accurate=\"+ size); //$NON-NLS-1$", "+\t\tsize = nodeSet.possibleMatchingNodesSet==null ? 0 : nodeSet.possibleMatchingNodesSet.elementSize;", "+\t\tSystem.out.println(\", possible=\"+size); //$NON-NLS-1$", "+\t\tSystem.out.print(\"\t- must resolve: \"+mustResolve); //$NON-NLS-1$", "+\t\tSystem.out.print(\" (locator: \"+this.patternLocator.mustResolve); //$NON-NLS-1$", "+\t\tSystem.out.println(\", nodeSet: \"+nodeSet.mustResolve+')'); //$NON-NLS-1$", "+\t}", "-\t\t\tSystem.out.println(\"\t- resolved node set:\\n\"+nodeSet); //$NON-NLS-1$", "+\t\t\tint size = nodeSet.matchingNodes==null ? 0 : nodeSet.matchingNodes.elementSize;", "+\t\t\tSystem.out.print(\"\t- node set: accurate=\"+size); //$NON-NLS-1$", "+\t\t\tsize = nodeSet.possibleMatchingNodesSet==null ? 0 : nodeSet.possibleMatchingNodesSet.elementSize;", "+\t\t\tSystem.out.println(\", possible=\"+size); //$NON-NLS-1$", "+\tthis.patternLocator.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38543a77d86701e4562b5dc0377978ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected File buildUsingBatchCompiler(String options) throws IOException", "signatureAfterChange": " \tprotected void buildUsingBatchCompiler(String options) throws IOException", "diff": ["-\tprotected File buildUsingBatchCompiler(String options) throws IOException {", "+\tprotected void buildUsingBatchCompiler(String options) throws IOException {", "+\t\tPrintWriter out = new PrintWriter(new StringWriter());", "+\t\tPrintWriter err = new PrintWriter(new StringWriter());", "-\t\t\tMain.compile(cmdLine, new PrintWriter(new StringWriter()), new PrintWriter(new StringWriter()));", "+\t\t\tMain main = new Main(out, err, false);", "+\t\t\tmain.compile(Main.tokenize(cmdLine));", "+\t\tint warnings = 0;", "+\t\t\trunGc();", "-\t\t\tMain.compile(cmdLine, new PrintWriter(new StringWriter()), new PrintWriter(new StringWriter()));", "+\t\t\tMain main = new Main(out, err, false);", "+\t\t\tmain.compile(Main.tokenize(cmdLine));", "+\t\t\twarnings = main.globalWarningsCount;", "-\t\treturn new File(logs);", "+\t\t// Store warning", "+\t\tif (warnings>0) {", "+\t\t\tSystem.out.println(\"\\t- \"+warnings+\" warnings found while performing batch compilation.\");", "+\t\t}", "+\t\tif (this.scenarioComment == null) {", "+\t\t\tthis.scenarioComment = new StringBuffer(\"[\"+TEST_POSITION+\"]\");", "+\t\t} else {", "+\t\t\tthis.scenarioComment.append(' ');", "+\t\t}", "+\t\tthis.scenarioComment.append(\"warn=\");", "+\t\tthis.scenarioComment.append(warnings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e3b8a04dafd59af7887cf8eed8cc3e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "192a17dd8a77dcf00962471b7104c1c1f453d9f4", "commitAfterChange": "07d5081d9da703108b09f4fbf591bb9cf4b8ffad", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": " public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\t\tlastDot = typeSignature.lastIndexOf('.');", "-\t\t\t\ttypeSimpleName = (lastDot != -1 ? typeSignature.substring(lastDot + 1) : typeSignature).toCharArray();", "-\t\t\t\ttypeQualification = ", "-\t\t\t\t\tlastDot != -1 ? ", "+\t\t\t\tif ((lastDot = typeSignature.lastIndexOf('.')) == -1) {", "+\t\t\t\t\ttypeSimpleName = typeSignature.toCharArray();", "+\t\t\t\t\ttypeQualification = null;", "+\t\t\t\t} else {", "+\t\t\t\t\ttypeSimpleName = typeSignature.substring(lastDot + 1).toCharArray();", "+\t\t\t\t\ttypeQualification = field.isBinary()", "+\t\t\t\t\t\t? typeSignature.substring(0, lastDot).toCharArray()", "-\t\t\t\t\t\tCharOperation.concat(ONE_STAR, typeSignature.substring(0, lastDot).toCharArray()) : ", "-\t\t\t\t\t\tnull;", "+\t\t\t\t\t\t: CharOperation.concat(ONE_STAR, typeSignature.substring(0, lastDot).toCharArray());", "+\t\t\t\t}", "-\t\t\t\tlastDot = returnType.lastIndexOf('.');", "-\t\t\t\treturnSimpleName = (lastDot != -1 ? returnType.substring(lastDot + 1) : returnType).toCharArray();", "-\t\t\t\treturnQualification = ", "-\t\t\t\t\tlastDot != -1 ? ", "+\t\t\t\tif ((lastDot = returnType.lastIndexOf('.')) == -1) {", "+\t\t\t\t\treturnSimpleName = returnType.toCharArray();", "+\t\t\t\t\treturnQualification = null;", "+\t\t\t\t} else {", "+\t\t\t\t\treturnSimpleName = returnType.substring(lastDot + 1).toCharArray();", "+\t\t\t\t\treturnQualification = method.isBinary()", "+\t\t\t\t\t\t? returnType.substring(0, lastDot).toCharArray()", "-\t\t\t\t\t\tCharOperation.concat(ONE_STAR, returnType.substring(0, lastDot).toCharArray()) : ", "-\t\t\t\t\t\tnull;", "+\t\t\t\t\t\t: CharOperation.concat(ONE_STAR, returnType.substring(0, lastDot).toCharArray());", "+\t\t\t\t}", "-\t\t\t\tlastDot = signature.lastIndexOf('.');", "-\t\t\t\tparameterSimpleNames[i] = (lastDot != -1 ? signature.substring(lastDot + 1) : signature).toCharArray();", "-\t\t\t\tparameterQualifications[i] = ", "-\t\t\t\t\tlastDot != -1 ? ", "+\t\t\t\tif ((lastDot = signature.lastIndexOf('.')) == -1) {", "+\t\t\t\t\tparameterSimpleNames[i] = signature.toCharArray();", "+\t\t\t\t\tparameterQualifications[i] = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tparameterSimpleNames[i] = signature.substring(lastDot + 1).toCharArray();", "+\t\t\t\t\tparameterQualifications[i] = method.isBinary()", "+\t\t\t\t\t\t? signature.substring(0, lastDot).toCharArray()", "-\t\t\t\t\t\tCharOperation.concat(ONE_STAR, signature.substring(0, lastDot).toCharArray()) : ", "-\t\t\t\t\t\tnull;", "+\t\t\t\t\t\t: CharOperation.concat(ONE_STAR, signature.substring(0, lastDot).toCharArray());", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "752dffbdec74fc09da3016e384a4df94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "ded90d967b480e6d7d22b3283d60f4ed44ccc489", "commitAfterChange": "18c83b91d182e52feafdad6b2c46eb79ffb0e002", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected void buildUsingBatchCompiler(String options) throws IOException", "signatureAfterChange": " \tprotected void buildUsingBatchCompiler(String options) throws IOException", "diff": ["-\t\tPrintWriter err = new PrintWriter(new StringWriter());", "+\t\tStringWriter errStrWriter = new StringWriter();", "+\t\tPrintWriter err = new PrintWriter(errStrWriter);", "+\t\tint errorsCount = 0;", "+\t\t\tif (main.globalErrorsCount > 0 && main.globalErrorsCount != errorsCount) {", "+\t\t\t\tSystem.out.println(this.scenarioShortName+\": \"+errorsCount+\" Unexpected compile ERROR!\");", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(errStrWriter.toString());", "+\t\t\t\t\tSystem.out.println(\"--------------------\");", "+\t\t\t\t}", "+\t\t\t\terrorsCount = main.globalErrorsCount;", "+\t\t\t}", "+", "+\t\t// Clear memory", "+\t\trunGc();", "-\t\t\trunGc();", "+\t\t\tif (main.globalErrorsCount > 0 && main.globalErrorsCount != errorsCount) {", "+\t\t\t\tSystem.out.println(this.scenarioShortName+\": \"+errorsCount+\" Unexpected compile ERROR!\");", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(errStrWriter.toString());", "+\t\t\t\t\tSystem.out.println(\"--------------------\");", "+\t\t\t\t}", "+\t\t\t\terrorsCount = main.globalErrorsCount;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4629fafa5d96adeefd82c36d415357d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "b722a746f46217b7440d73c5e0dfc83844a8012d", "commitAfterChange": "9cc5bde0cff147bf990090541b8a0cede8969f68", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": " final public void goto_(BranchLabel label)", "signatureAfterChange": " final public void goto_(BranchLabel label)", "diff": ["-\tthis.inlineForwardReferencesFromLabelsTargeting(label, position);", "+\tboolean chained = this.inlineForwardReferencesFromLabelsTargeting(label, position);", "+\tif (DEBUG && chained) {", "+\t\tif (DEBUG) {", "+\t\t\tif (this.lastAbruptCompletion == this.position) {", "+\t\t\t\tSystem.out.println(\"\\t\\t\\t\\t<branch chaining - goto eliminated : \"+this.position+\",\"+label+\">\");//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\tSystem.out.println(\"\\t\\t\\t\\t<branch chaining - goto issued : \"+this.position+\",\"+label+\">\");//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "+\t\t\t}", "+\t\t}\t\t", "+\t}", "-\treturns.", "-\tSee inlineForwardReferencesFromLabelsTargeting defined", "-\ton the Label class for the remaining part of this", "-\toptimization.", "-\t if (!lbl.isBranchTarget(position)) {", "-\t\tswitch(bCodeStream[classFileOffset-1]) {", "-\t\t\tcase Opcodes.OPC_return :", "-\t\t\tcase Opcodes.OPC_areturn:", "-\t\t\t\treturn;", "-\t\t}", "+\treturns. Also see 114894", "+\tif (chained && this.lastAbruptCompletion == this.position) {", "+\t\tif (label.position != Label.POS_NOT_SET) { // ensure existing forward references are updated", "+\t\t\tint[] forwardRefs = label.forwardReferences();", "+\t\t\tfor (int i = 0, max = label.forwardReferenceCount(); i < max; i++) {", "+\t\t\t\tthis.writePosition(label, forwardRefs[i]);", "+\t\t\t}\t\t\t\t", "+\t\t\tthis.countLabels = 0; // backward jump, no further chaining allowed", "+\t\t}", "+//\t\tthis.lastAbruptCompletion = -1;", "+\t\treturn;", "+\t}", "+\tthis.lastAbruptCompletion = this.position;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6b5a2211e2e2f136e6e9eea6ee934ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "f8069544c2b2660f8b2415856be61642ab9369f1", "commitAfterChange": "5158f4f499166dbc52302f8195c73110e357532f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["-\t\tif (sourceFileName == null)", "-\t\t\treturn null; // no source file attribute", "-\t\tString name = new String(sourceFileName);", "-", "-\t\tIPackageFragment pkgFrag = type.getPackageFragment();", "-\t\tif (!pkgFrag.isDefaultPackage()) {", "-\t\t\tString pkg = type.getPackageFragment().getElementName().replace('.', '/');", "-\t\t\tname = pkg + '/' + name;", "+\t\tString name = null;", "+\t\tif (sourceFileName == null) {", "+\t\t\t/*", "+\t\t\t * We assume that this type has been compiled from a file with its name", "+\t\t\t * For example, A.class comes from A.java and p.A.class comes from a file A.java", "+\t\t\t * in the folder p.", "+\t\t\t */", "+\t\t\ttry {", "+\t\t\t\tif (type.isMember()) {", "+\t\t\t\t\tIType enclosingType = type.getDeclaringType();", "+\t\t\t\t\twhile (enclosingType.getDeclaringType() != null) {", "+\t\t\t\t\t\tenclosingType = enclosingType.getDeclaringType();", "+\t\t\t\t\t}", "+\t\t\t\t\tname = enclosingType.getFullyQualifiedName().replace('.', '/') + \".java\"; //$NON-NLS-1$", "+\t\t\t\t} else if (type.isLocal() || type.isAnonymous()){", "+\t\t\t\t\tString fullyQualifiedName = type.getFullyQualifiedName();", "+\t\t\t\t\tname = fullyQualifiedName.substring(0, fullyQualifiedName.indexOf('$')).replace('.', '/') + \".java\"; //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(name);", "+\t\t\t\t} else {", "+\t\t\t\t\tname = type.getFullyQualifiedName().replace('.', '/') + \".java\"; //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t}", "+\t\t} else {", "+\t\t\tname = new String(sourceFileName);", "+\t\t\tIPackageFragment pkgFrag = type.getPackageFragment();", "+\t\t\tif (!pkgFrag.isDefaultPackage()) {", "+\t\t\t\tString pkg = type.getPackageFragment().getElementName().replace('.', '/');", "+\t\t\t\tname = pkg + '/' + name;", "+\t\t\t}", "+\t\t}", "+\t\tif (name == null) {", "+\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1dd1f3d0a8a0aec181d2f3c45078f55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "54e149a1301c5fe1b0698b6af2c9ab87e804de51", "commitAfterChange": "939dd159977cdcca1beae88ff479c614c659015a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition)", "signatureAfterChange": "\r \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition)", "diff": ["+\t\tif(DEBUG) {\r", "+\t\t\tSystem.out.print(\"COMPLETION IN \");\r", "+\t\t\tSystem.out.print(sourceUnit.getFileName());\r", "+\t\t\tSystem.out.print(\" AT POSITION \");\r", "+\t\t\tSystem.out.println(completionPosition);\r", "+\t\t\tSystem.out.println(\"COMPLETION - Source :\");\r", "+\t\t\tSystem.out.println(sourceUnit.getContents());\r", "+\t\t}\r", "+\t\t\t\tif(DEBUG) {\r", "+\t\t\t\t\tSystem.out.println(\"COMPLETION - Diet AST :\");\r", "+\t\t\t\t\tSystem.out.println(parsedUnit.toString());\r", "+\t\t\t\t}\r", "+\t\t\t\t\t\t\tif(DEBUG) {\r", "+\t\t\t\t\t\t\t\tSystem.out.println(\"COMPLETION - AST :\");\r", "+\t\t\t\t\t\t\t\tSystem.out.println(parsedUnit.toString());\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tif(DEBUG) {\r", "+\t\t\t\t\t\t\t\tSystem.out.print(\"COMPLETION - Completion node : \");\r", "+\t\t\t\t\t\t\t\tSystem.out.println(e.astNode.toString());\r", "+\t\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b371f0c943a79824b0e7c8686fc0e525", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "e05eed8d28ae76461822d5820ab4d1079041229c", "commitAfterChange": "eed1a08cebbf98096012b816207df007b92ad038", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static int getPossibleComplianceLevels()", "signatureAfterChange": " \tpublic static int getPossibleComplianceLevels()", "diff": ["+\t\t\t\t} else if (COMPLIANCE_1_7.equals(compliance)) {", "+\t\t\t\t\tpossibleComplianceLevels = F_1_7;", "-\t\t\t\t\tSystem.out.println(\"Use one of \" + COMPLIANCE_1_3 + \", \" + COMPLIANCE_1_4 + \", \" + COMPLIANCE_1_5);", "+\t\t\t\t\tSystem.out.print(\"Use one of \");", "+\t\t\t\t\tSystem.out.print(COMPLIANCE_1_3 + \", \");", "+\t\t\t\t\tSystem.out.print(COMPLIANCE_1_4 + \", \");", "+\t\t\t\t\tSystem.out.print(COMPLIANCE_1_5 + \", \");", "+\t\t\t\t\tSystem.out.print(COMPLIANCE_1_6 + \", \");", "+\t\t\t\t\tSystem.out.println(COMPLIANCE_1_7);", "-\t\t\t\tboolean canRun1_4 = !\"1.0\".equals(specVersion) && !\"1.1\".equals(specVersion) && !\"1.2\".equals(specVersion) && !\"1.3\".equals(specVersion);", "+\t\t\t\tboolean canRun1_4 = !\"1.0\".equals(specVersion)", "+\t\t\t\t\t&& !CompilerOptions.VERSION_1_1.equals(specVersion)", "+\t\t\t\t\t&& !CompilerOptions.VERSION_1_2.equals(specVersion)", "+\t\t\t\t\t&& !CompilerOptions.VERSION_1_3.equals(specVersion);", "-\t\t\t\tboolean canRun1_5 = canRun1_4 && !\"1.4\".equals(specVersion);", "+\t\t\t\tboolean canRun1_5 = canRun1_4 && !CompilerOptions.VERSION_1_4.equals(specVersion);", "-\t\t\t\tboolean canRun1_6 = \"1.6\".equals(specVersion);", "+\t\t\t\tboolean canRun1_6 = canRun1_5 && !CompilerOptions.VERSION_1_5.equals(specVersion);", "+\t\t\t\t}", "+\t\t\t\tboolean canRun1_7 = canRun1_6 && !CompilerOptions.VERSION_1_6.equals(specVersion);", "+\t\t\t\tif (canRun1_7) {", "+\t\t\t\t\tpossibleComplianceLevels |= F_1_7;"]}], "num": 57872}
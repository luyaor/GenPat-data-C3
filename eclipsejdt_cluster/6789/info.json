{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19ab390da71ea64752071eee6d203c34", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e1fe992c65b0c4f1a31bbe1900411cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "e87f51d941d6cbe203d8b543bd1f01e26d5c134d", "commitAfterChange": "1ffd151549eccf4f346b9688b80b9066e8dc6a10", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \tpublic void report(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void report(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["+\t\t\tif (SearchEngine.VERBOSE) {\r", "+\t\t\t\tIResource res = this.getCurrentResource();\r", "+\t\t\t\tSystem.out.println(\"Reporting match\"); //$NON-NLS-1$\r", "+\t\t\t\tSystem.out.println(\"\\tResource: \" + (res == null ? \" <unknown> \" : res.getFullPath().toString())); //$NON-NLS-1$\r", "+\t\t\t\tSystem.out.println(\"\\tPositions: [\" + sourceStart + \", \" + sourceEnd + \"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\r", "+\t\t\t\tSystem.out.println(\"\\tJava element: \" + ((JavaElement)element).toStringWithAncestors()); //$NON-NLS-1$\r", "+\t\t\t\tif (accuracy == IJavaSearchResultCollector.EXACT_MATCH) {\r", "+\t\t\t\t\tSystem.out.println(\"\\tAccuracy: EXACT_MATCH\"); //$NON-NLS-1$\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tSystem.out.println(\"\\tAccuracy: POTENTIAL_MATCH\"); //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc219a41637dec30879e9032d4a3831e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java", "commitBeforeChange": "2f9db6d5da33c7aae5495cb19cb4e15019a503c5", "commitAfterChange": "d272b4067753c3b8224afb90d2ae4fc124cff69f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void assertMemento(String expected, IJavaElement element)", "signatureAfterChange": " protected void assertMemento(String expected, IJavaElement element)", "diff": ["-\t \tSystem.out.println(Util.displayString(actual, 2));", "+\t\tString escapedExternalJCL = getEscapedExternalJCLPath();", "+\t\tint start = actual.indexOf(escapedExternalJCL);", "+\t\tif (start != -1) {", "+\t\t\tString firstPart = actual.substring(0, start);", "+\t\t \tSystem.out.print(Util.displayString(firstPart, 2));", "+\t\t \tSystem.out.print(\" + getEscapedExternalJCLPath() + \");", "+\t\t \tString secondPart = actual.substring(start+escapedExternalJCL.length());", "+\t\t \tSystem.out.print(Util.displayString(secondPart, 0));", "+\t\t} else {", "+\t\t\tSystem.out.print(Util.displayString(actual, 2));", "+\t\t}", "+\t \tSystem.out.println(\",\");", "+}"]}], "num": 6789}
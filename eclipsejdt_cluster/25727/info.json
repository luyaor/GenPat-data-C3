{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4affe80e87255b5ef3e4956b075043d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "412449249b243318035d9f94f7936947", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java", "commitBeforeChange": "5ff67d71c0cb8b9ac702a6eb36f9238b4071b76d", "commitAfterChange": "6e1daeed1b338c470552c705d4bce7d654dc9164", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static Map<FactoryContainer, Boolean> getAllPluginFactoryContainers()", "signatureAfterChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllPluginFactoryContainers()", "diff": ["-\t */", "-\tpublic static Map<FactoryContainer, Boolean> getAllPluginFactoryContainers()", "-\t{", "-\t\tclass PluginContents {", "-\t\t\tpublic final PluginFactoryContainer fc;", "-\t\t\tpublic final boolean b;", "-\t\t\tpublic PluginContents(PluginFactoryContainer fc, boolean b) {", "-\t\t\t\tthis.fc = fc;", "-\t\t\t\tthis.b = b;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t// We want the list of plugins to be uniqued and alphabetically sorted.", "-\t\tMap<String, PluginContents> plugins = ", "-\t\t\tnew TreeMap<String, PluginContents>();", "-\t", "-\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(", "-\t\t\t\tAptPlugin.PLUGIN_ID, // name of plugin that exposes this extension point", "-\t\t\t\t\"annotationProcessorFactory\"); //$NON-NLS-1$ - extension id", "-", "-\t\t// Iterate over all declared extensions of this extension point.  ", "-\t\t// A single plugin may extend the extension point more than once, although it's not recommended.", "-\t\tfor (IExtension extension : extensionPoint.getExtensions())", "-\t\t{", "-\t\t\t// getNamespace() returns the plugin id", "-\t\t\tString pluginId = extension.getNamespace();", "-\t\t\t// Iterate over the children of the extension to find one named \"factories\".", "-\t\t\tfor(IConfigurationElement factories : extension.getConfigurationElements())", "-\t\t\t{", "-\t\t\t\tif (!\"factories\".equals(factories.getName())) { //$NON-NLS-1$ - name of configElement ", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\t// Get enableDefault.  If the attribute is missing, default to true.", "-\t\t\t\tString enableDefaultStr = factories.getAttribute(\"enableDefault\"); //$NON-NLS-1$", "-\t\t\t\tboolean enableDefault = true;", "-\t\t\t\tif (\"false\".equals(enableDefaultStr)) { //$NON-NLS-1$", "-\t\t\t\t\tenableDefault = false;", "-\t\t\t\t}", "-\t\t\t\t// Iterate over the children of the \"factories\" element to find all the ones named \"factory\".", "-\t\t\t\tfor (IConfigurationElement factory : factories.getChildren()) {", "-\t\t\t\t\tif (!\"factory\".equals(factory.getName())) { //$NON-NLS-1$", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tPluginContents pc = plugins.get(pluginId);", "-\t\t\t\t\tif ( pc == null )", "-\t\t\t\t\t{", "-\t\t\t\t\t\tPluginFactoryContainer fc = new PluginFactoryContainer(pluginId);", "-\t\t\t\t\t\tpc = new PluginContents(fc, enableDefault);", "-\t\t\t\t\t\tplugins.put( pluginId, pc );", "-\t\t\t\t\t}", "-\t\t\t\t\tpc.fc.addFactoryName( factory.getAttribute(\"class\") ); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tMap<FactoryContainer, Boolean> map = new LinkedHashMap<FactoryContainer, Boolean>();", "-\t\tfor (PluginContents pc : plugins.values()) {", "-\t\t\tmap.put(pc.fc, new Boolean(pc.b));", "-\t\t}", "-\t\treturn map;", "-\t}", "+\t */", "+\tpublic static synchronized Map<FactoryContainer, Boolean> getAllPluginFactoryContainers()", "+\t{", "+\t\tMap<FactoryContainer, Boolean> map = new LinkedHashMap<FactoryContainer, Boolean>();", "+\t\tfor (PluginFactoryContainer pfc : PLUGIN_CONTAINER_MAP.values()) {", "+\t\t\tmap.put(pfc, pfc.getEnableDefault());", "+\t\t}", "+\t\treturn map;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d6251029fad0dfb45b6e13343b5f74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "a1b73ab4292b1a5c4bee65eb3b80141d6400d5c6", "commitAfterChange": "0baf29c6e5669fd5c3e5f5cbc326d201ccdc5b3c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static void compileOneClass(JavaCompiler compiler, List<String> options, File inputFile)", "signatureAfterChange": " \tpublic static void compileOneClass(JavaCompiler compiler, List<String> options, File inputFile)", "diff": ["+\t\tcompileOneClass(compiler, options, inputFile, false);", "+\t}", "-\t\toptions.add(\"-cp\");", "-\t\toptions.add(_tmpSrcFolderName + File.pathSeparator + _tmpGenFolderName + File.pathSeparator + _processorJarPath);", "-\t\toptions.add(\"-processorpath\");", "-\t\toptions.add(_processorJarPath);"]}], "num": 25727}
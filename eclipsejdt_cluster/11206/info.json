{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32470ebd49876d8d0ad37e623ffdac5c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79b9479220ce147c120c2ceb8d01b658", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "9a76fb8f9434ae4b71dc267e686b050759ff3536", "commitAfterChange": "e5d54da7cf77d6614acfbbcede23df9b9dad68f9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t// Report todo", "-\t\t\tif(optionID.equals(OPTION_ReportToDo)){", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= ToDo;", "-\t\t\t\t\tthis.warningThreshold &= ~ToDo;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~ToDo;", "-\t\t\t\t\tthis.warningThreshold |= ToDo;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~ToDo;", "-\t\t\t\t\tthis.warningThreshold &= ~ToDo;", "+\t\t\t// Report task", "+\t\t\tif(optionID.equals(OPTION_TaskTags)){", "+\t\t\t\tif (optionValue.length() == 0) {", "+\t\t\t\t\tthis.taskTags = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.taskTags = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report todo", "-\t\t\tif(optionID.equals(OPTION_ToDoTag)){", "-\t\t\t\tthis.toDoTag = optionValue.toCharArray();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9f24d3b707cbc2f4abaa34bf018d1af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "084468bbb4b6b4ced2d619a494bb2b10d317ac14", "commitAfterChange": "4f4c37f43e175a5ea8c8aa35d79cc22779b21e81", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tFlowInfo mergedInfo;", "-\t\tif (isConditionOptimizedTrue){", "-\t\t\tif (thenFlowInfo != FlowInfo.DEAD_END) {", "-\t\t\t\tmergedInfo = thenFlowInfo.addPotentialInitializationsFrom(elseFlowInfo);", "-\t\t\t} else {", "-\t\t\t\tmergedInfo = elseFlowInfo.setReachMode(FlowInfo.UNREACHABLE);", "-\t\t\t}", "-", "-\t\t} else if (isConditionOptimizedFalse) {", "-\t\t\tif (elseFlowInfo != FlowInfo.DEAD_END) {", "-\t\t\t\tmergedInfo = elseFlowInfo.addPotentialInitializationsFrom(thenFlowInfo);", "-\t\t\t} else {", "-\t\t\t\tmergedInfo = thenFlowInfo.setReachMode(FlowInfo.UNREACHABLE);", "-\t\t\t}", "-", "-\t\t} else {", "-\t\t\tmergedInfo = thenFlowInfo.mergedWith(elseFlowInfo.unconditionalInits());", "-\t\t}", "-", "-\t\tmergedInitStateIndex =", "-\t\t\tcurrentScope.methodScope().recordInitializationStates(mergedInfo);", "+\t\tFlowInfo mergedInfo = FlowInfo.mergedOptimizedBranches(", "+\t\t\t\tthenFlowInfo, ", "+\t\t\t\tisConditionOptimizedTrue, ", "+\t\t\t\telseFlowInfo, ", "+\t\t\t\tisConditionOptimizedFalse,", "+\t\t\t\ttrue /*if(true){ return; }  fake-reachable(); */);", "+\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);"]}], "num": 11206}
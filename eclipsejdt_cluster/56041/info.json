{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9fa858e12f0bd8ce624341f58c76513", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "052a293771e35b8c09e9ec5c99e672db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "d8fdcf17a6a4f58acd9ec9d53426880134d9869a", "commitAfterChange": "e0a0631e6ad0dd184a0c6f7c90e330e7c7d93f89", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tprivate void findImportsOfMemberTypes(char[] typeName,\tReferenceBinding ref)", "signatureAfterChange": " \t \tprivate void findImportsOfMemberTypes(char[] typeName,\tReferenceBinding ref)", "diff": ["-\t\t\t\t", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setDeclarationSignature(memberType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setSignature(getSignature(memberType));", "-\t\t\t\t\tproposal.setPackageName(memberType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setTypeName(memberType.qualifiedSourceName());", "-\t\t\t\t\tproposal.setCompletion(completionName);", "-\t\t\t\t\tproposal.setFlags(memberType.modifiers);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t} else {", "+\t\t\t} else if(memberType.isEnum()) {", "+\t\t\t\trelevance += computeRelevanceForEnum();", "+\t\t\t} else if (memberType.isInterface()) {", "-\t\t\t\t", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setDeclarationSignature(memberType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setSignature(getSignature(memberType));", "-\t\t\t\t\tproposal.setPackageName(memberType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setTypeName(memberType.qualifiedSourceName());", "-\t\t\t\t\tproposal.setCompletion(completionName);", "-\t\t\t\t\tproposal.setFlags(memberType.modifiers | Flags.AccInterface);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.noProposal = false;", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(memberType.qualifiedPackageName());", "+\t\t\t\tproposal.setSignature(getSignature(memberType));", "+\t\t\t\tproposal.setPackageName(memberType.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(memberType.qualifiedSourceName());", "+\t\t\t\tproposal.setCompletion(completionName);", "+\t\t\t\tproposal.setFlags(memberType.modifiers);", "+\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a897bd33c3203ac6f929633d06c3fd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "d8fdcf17a6a4f58acd9ec9d53426880134d9869a", "commitAfterChange": "e0a0631e6ad0dd184a0c6f7c90e330e7c7d93f89", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding[] memberTypes, \t\tObjectVector typesFound, \t\tReferenceBinding receiverType, \t\tSourceTypeBinding invocationType, \t\tboolean staticOnly)", "signatureAfterChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding[] memberTypes, \t\tObjectVector typesFound, \t\tReferenceBinding receiverType, \t\tSourceTypeBinding invocationType, \t\tboolean staticOnly)", "diff": ["-\t\t\t\t", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setDeclarationSignature(memberType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setSignature(getSignature(memberType));", "-\t\t\t\t\tproposal.setPackageName(memberType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setTypeName(memberType.qualifiedSourceName());", "-\t\t\t\t\tproposal.setCompletion(memberType.sourceName());", "-\t\t\t\t\tproposal.setFlags(memberType.modifiers);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t} else {", "+\t\t\t} else if(memberType.isEnum()) {", "+\t\t\t\trelevance += computeRelevanceForEnum();", "+\t\t\t} else if(memberType.isInterface()) {", "+\t\t\t}", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setDeclarationSignature(memberType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setSignature(getSignature(memberType));", "-\t\t\t\t\tproposal.setPackageName(memberType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setTypeName(memberType.qualifiedSourceName());", "-\t\t\t\t\tproposal.setCompletion(memberType.sourceName());", "-\t\t\t\t\tproposal.setFlags(memberType.modifiers | Flags.AccInterface);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t}", "+\t\t\tthis.noProposal = false;", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(memberType.qualifiedPackageName());", "+\t\t\t\tproposal.setSignature(getSignature(memberType));", "+\t\t\t\tproposal.setPackageName(memberType.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(memberType.qualifiedSourceName());", "+\t\t\t\tproposal.setCompletion(memberType.sourceName());", "+\t\t\t\tproposal.setFlags(memberType.modifiers);", "+\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c6ac1c3798d1eccf7072729145f14e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "d8fdcf17a6a4f58acd9ec9d53426880134d9869a", "commitAfterChange": "e0a0631e6ad0dd184a0c6f7c90e330e7c7d93f89", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "signatureAfterChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "diff": ["-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(packageName);", "-\t\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(refBinding));", "-\t\t\t\t\t\t\t\t\tproposal.setPackageName(packageName);", "-\t\t\t\t\t\t\t\t\tproposal.setTypeName(typeName);", "-\t\t\t\t\t\t\t\t\tproposal.setCompletion(completionName);", "-\t\t\t\t\t\t\t\t\tproposal.setFlags(refBinding.modifiers);", "-\t\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\t\t\t\tproposal.setAccessibility(accessibility);", "-\t\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (refBinding.isInterface()) {", "+\t\t\t\t\t\t\t} else if(refBinding.isEnum()) {", "+\t\t\t\t\t\t\t\trelevance += computeRelevanceForEnum();", "+\t\t\t\t\t\t\t} else if(refBinding.isInterface()) {", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(packageName);", "-\t\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(refBinding));", "-\t\t\t\t\t\t\t\t\tproposal.setPackageName(packageName);", "-\t\t\t\t\t\t\t\t\tproposal.setTypeName(typeName);", "-\t\t\t\t\t\t\t\t\tproposal.setCompletion(completionName);", "-\t\t\t\t\t\t\t\t\tproposal.setFlags(refBinding.modifiers | Flags.AccInterface);", "-\t\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\t\t\t\tproposal.setAccessibility(accessibility);", "-\t\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(packageName);", "+\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(refBinding));", "+\t\t\t\t\t\t\t\tproposal.setPackageName(packageName);", "+\t\t\t\t\t\t\t\tproposal.setTypeName(typeName);", "+\t\t\t\t\t\t\t\tproposal.setCompletion(completionName);", "+\t\t\t\t\t\t\t\tproposal.setFlags(refBinding.modifiers);", "+\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\tproposal.setAccessibility(accessibility);", "+\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);"]}], "num": 56041}
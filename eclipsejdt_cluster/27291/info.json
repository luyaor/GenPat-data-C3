{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac30d90c5a78097e83561d2896971a19", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06ab66b34c5dfadf8f9e1080453e0dbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "e57c1379bf2ab200d310135306edb2776411f753", "commitAfterChange": "6c12498f9ae6e40c6b8c9e84d6e41e995e1be6a4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private int getNextToken0() throws InvalidInputException", "signatureAfterChange": " private int getNextToken0() throws InvalidInputException", "diff": ["-\t\treturn this.currentPosition > this.source.length ? TokenNameEOF : TokenNameRBRACE;", "+\t\treturn this.currentPosition > this.eofPosition ? TokenNameEOF : TokenNameRBRACE;", "+\t\t\t\t\tint temp = this.eofPosition;", "+\t\t\t\t\tthis.eofPosition = this.source.length;", "+\t\t\t\t \tthis.eofPosition = temp;", "-\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "+\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.eofPosition)", "-\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "+\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.eofPosition)", "-\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "+\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.eofPosition)", "-\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "+\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.eofPosition)", "-\t\t\t\t\t\t\t\t   && this.source.length > this.currentPosition) {", "+\t\t\t\t\t\t\t\t   && this.eofPosition > this.currentPosition) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77718f52a935ea18626ca7c08fc9ad5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "signatureAfterChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "diff": ["-\t    \tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t    \tint length = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\t\tif (headerLine) firstColumn++;", "-\t\t\t\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "-\t\t\t\t\tif (headerLine) firstColumn++;", "-\t\t\t    \t\ttokenLength++; // include space between nodes", "+\t\t\t    \t\tlength++; // include space between nodes", "-    \t\t\t\tint col = this.column + tokenLength;", "+    \t\t\t\tint col = this.column + length;", "-\t    \t\t\t\t\t\ttokenLength = 1;", "+\t    \t\t\t\t\t\tlength = 1;", "-\t    \t\t\t\t\t\ttokenLength = 1;", "+\t    \t\t\t\t\t\tlength = 1;", "-\t\t\t\t    \t\t\ttokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t\t\t    \t\t\tlength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t    \t\t\t\tcol += tokenLength;", "+\t    \t\t\t\tcol += length;", "-\t    \t\t\t\ttokenLength++;", "+\t    \t\t\t\tlength++;", "-\t    \t\t\ttokenLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t    \t\t\tlength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t    \t\t\ttokenLength++;", "+\t    \t\t\tlength++;", "-\t\t    \t\t\ttokenLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t    \t\t\tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t    \t\t\tif ((firstColumn + length + tokenLength) >= maxColumn) {", "+\t\t    \t\t\t\tbreak;", "+\t\t    \t\t\t}", "+\t\t    \t\t\tlength += tokenLength;", "-\t    \t\ttokenLength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;", "+\t    \t\tlength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;", "-\t    \t\ttokenLength++; // include space between nodes", "+\t    \t\tlength++; // include space between nodes", "-\t\t\tif ((this.column + tokenLength) > maxColumn) {", "+\t\t\tif ((this.column + length) > maxColumn) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc1e0ef913490f8fc61bb591b1de76ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "115aa955b9babd8a2ed6e802830c5035a2e2a28f", "commitAfterChange": "c555269f6d77af957f827daf14cfb9a3af0c01ad", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static int measureIndentLength(CharSequence line, int tabSize)", "signatureAfterChange": " \tpublic static int computeIndent(String line, int tabWidth)", "diff": ["-\t */", "-\tpublic static int measureIndentLength(CharSequence line, int tabSize) {", "-\t\tint length= 0;", "-\t\tint max= line.length();", "-\t\tfor (int i= 0; i < max; i++) {", "-\t\t\tchar ch= line.charAt(i);", "-\t\t\tif (ch == '\\t') {", "-\t\t\t\tint reminder= length % tabSize;", "-\t\t\t\tlength += tabSize - reminder;", "-\t\t\t} else if (isIndentChar(ch)) {", "-\t\t\t\tlength++;", "-\t\t\t} else {", "-\t\t\t\treturn length;", "-\t\t\t}", "-\t\t}", "-\t\treturn length;", "-\t}", "+\tpublic static int computeIndent(String line, int tabWidth) {", "+\t\tint result= 0;", "+\t\tint blanks= 0;", "+\t\t\t\tresult++;", "+\t\t\t\tblanks= 0;", "+\t\t\t\tblanks++;", "+\t\t\t\tif (blanks == tabWidth) {", "+\t\t\t\t\tresult++;", "+\t\t\t\t\tblanks= 0;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t}", "+\t\treturn result;", "+\t}"]}], "num": 27291}
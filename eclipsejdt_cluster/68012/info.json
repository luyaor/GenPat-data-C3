{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8aa92c8bea4439522785b61b1ba532de", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63bdbe5d365f0bd5d3d8a578a030a4e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f34cdaf3a4e2f93d91821748cd0c059d4789fdc7", "commitAfterChange": "74d8e06fef615cb5e8f2a34975f100e52eadbabe", "methodNumberBeforeChange": 280, "methodNumberAfterChange": 280, "signatureBeforeChange": " public void test133()", "signatureAfterChange": " public void test133()", "diff": ["-\tString expectedOutput = this.complianceLevel.equals(COMPLIANCE_1_5) ?", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in A.java (at line 8)\\n\" + ", "-\t\t\"\tObject foo() { return null; } // cannot override foo(), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo()\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in A.java (at line 10)\\n\" + ", "-\t\t\"\tObject foo(Object one) { return null; } // unchecked conversion warning\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"Type safety: The return type Object for foo(Object) from the type B<U> needs unchecked conversion to conform to U from the type A<U>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in A.java (at line 12)\\n\" + ", "-\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Name clash: The method foo(Object, U) of type B<U> has the same erasure as foo(U, U) of type A<U> but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in A.java (at line 12)\\n\" + ", "-\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method foo(Object, U) of type B<U> must override a superclass method\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. ERROR in A.java (at line 16)\\n\" + ", "-\t\t\"\tObject foo(U one) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo(U)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. ERROR in A.java (at line 18)\\n\" + ", "-\t\t\"\tObject foo(U one, U two) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo(U, U)\\n\" + ", "-\t\t\"----------\\n\" :", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in A.java (at line 8)\\n\" + ", "-\t\t\"\tObject foo() { return null; } // cannot override foo(), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo()\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in A.java (at line 10)\\n\" + ", "-\t\t\"\tObject foo(Object one) { return null; } // unchecked conversion warning\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"Type safety: The return type Object for foo(Object) from the type B<U> needs unchecked conversion to conform to U from the type A<U>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in A.java (at line 12)\\n\" + ", "-\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Name clash: The method foo(Object, U) of type B<U> has the same erasure as foo(U, U) of type A<U> but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in A.java (at line 12)\\n\" + ", "-\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method foo(Object, U) of type B<U> must override or implement a supertype method\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. ERROR in A.java (at line 16)\\n\" + ", "-\t\t\"\tObject foo(U one) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo(U)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. ERROR in A.java (at line 18)\\n\" + ", "-\t\t\"\tObject foo(U one, U two) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo(U, U)\\n\" + ", "-\t\t\"----------\\n\";", "-\t\texpectedOutput", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in A.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() { return null; } // cannot override foo(), incompatible return type error\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with A<U>.foo()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in A.java (at line 10)\\n\" + ", "+\t\t\"\tObject foo(Object one) { return null; } // unchecked conversion warning\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"Type safety: The return type Object for foo(Object) from the type B<U> needs unchecked conversion to conform to U from the type A<U>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in A.java (at line 12)\\n\" + ", "+\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method foo(Object, U) of type B<U> has the same erasure as foo(U, U) of type A<U> but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in A.java (at line 12)\\n\" + ", "+\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t(this.complianceLevel.equals(COMPLIANCE_1_5)", "+\t\t\t? \"The method foo(Object, U) of type B<U> must override a superclass method\\n\"", "+\t\t\t: \"The method foo(Object, U) of type B<U> must override or implement a supertype method\\n\"", "+\t\t) + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in A.java (at line 16)\\n\" + ", "+\t\t\"\tObject foo(U one) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with A<U>.foo(U)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in A.java (at line 18)\\n\" + ", "+\t\t\"\tObject foo(U one, U two) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with A<U>.foo(U, U)\\n\" + ", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4b46686266cead8a38c8003a62ed588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "baaa74c4f9aeaa7948ea0d073edd04cfcc2c793e", "commitAfterChange": "f34cdaf3a4e2f93d91821748cd0c059d4789fdc7", "methodNumberBeforeChange": 280, "methodNumberAfterChange": 280, "signatureBeforeChange": " public void test133()", "signatureAfterChange": " public void test133()", "diff": ["-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"A.java\",", "-\t\t\t\"class A<U> {\\n\" + ", "-\t\t\t\"  U foo() { return null; }\\n\" + ", "-\t\t\t\"  U foo(U one) { return null; }\\n\" + ", "-\t\t\t\"  U foo(U one, U two) { return null; }\\n\" + ", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class B<U> extends A<U> {\\n\" + ", "-\t\t\t\"  @Override // does not override error\\n\" + ", "-\t\t\t\"  Object foo() { return null; } // cannot override foo(), incompatible return type error\\n\" +", "-\t\t\t\"  @Override // does not override error\\n\" + ", "-\t\t\t\"  Object foo(Object one) { return null; } // unchecked conversion warning\\n\" +", "-\t\t\t\"  @Override // does not override error\\n\" + ", "-\t\t\t\"  Object foo(Object one, U two) { return null; }\\n\" +", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class C<U> extends A<U> {\\n\" + ", "-\t\t\t\"  @Override // does not override error\\n\" + ", "-\t\t\t\"  Object foo(U one) { return null; } // cannot override foo(U), incompatible return type error\\n\" +", "-\t\t\t\"  @Override // does not override error\\n\" + ", "-\t\t\t\"  Object foo(U one, U two) { return null; } // cannot override foo(U), incompatible return type error\\n\" +", "-\t\t\t\"}\"", "-\t\t},", "+\tString expectedOutput = this.complianceLevel.equals(COMPLIANCE_1_5) ?", "-\t\t\"----------\\n\"", "+\t\t\"----------\\n\" :", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in A.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() { return null; } // cannot override foo(), incompatible return type error\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with A<U>.foo()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in A.java (at line 10)\\n\" + ", "+\t\t\"\tObject foo(Object one) { return null; } // unchecked conversion warning\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"Type safety: The return type Object for foo(Object) from the type B<U> needs unchecked conversion to conform to U from the type A<U>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in A.java (at line 12)\\n\" + ", "+\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method foo(Object, U) of type B<U> has the same erasure as foo(U, U) of type A<U> but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in A.java (at line 12)\\n\" + ", "+\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method foo(Object, U) of type B<U> must override or implement a supertype method\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in A.java (at line 16)\\n\" + ", "+\t\t\"\tObject foo(U one) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with A<U>.foo(U)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in A.java (at line 18)\\n\" + ", "+\t\t\"\tObject foo(U one, U two) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with A<U>.foo(U, U)\\n\" + ", "+\t\t\"----------\\n\";", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"A.java\",", "+\t\t\t\"class A<U> {\\n\" + ", "+\t\t\t\"  U foo() { return null; }\\n\" + ", "+\t\t\t\"  U foo(U one) { return null; }\\n\" + ", "+\t\t\t\"  U foo(U one, U two) { return null; }\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class B<U> extends A<U> {\\n\" + ", "+\t\t\t\"  @Override // does not override error\\n\" + ", "+\t\t\t\"  Object foo() { return null; } // cannot override foo(), incompatible return type error\\n\" +", "+\t\t\t\"  @Override // does not override error\\n\" + ", "+\t\t\t\"  Object foo(Object one) { return null; } // unchecked conversion warning\\n\" +", "+\t\t\t\"  @Override // does not override error\\n\" + ", "+\t\t\t\"  Object foo(Object one, U two) { return null; }\\n\" +", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class C<U> extends A<U> {\\n\" + ", "+\t\t\t\"  @Override // does not override error\\n\" + ", "+\t\t\t\"  Object foo(U one) { return null; } // cannot override foo(U), incompatible return type error\\n\" +", "+\t\t\t\"  @Override // does not override error\\n\" + ", "+\t\t\t\"  Object foo(U one, U two) { return null; } // cannot override foo(U), incompatible return type error\\n\" +", "+\t\t\t\"}\"", "+\t\t},", "+\t\texpectedOutput"]}], "num": 68012}
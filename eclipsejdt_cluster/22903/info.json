{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "356cb973d008e2f17d833cc5bdd66eb0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b45384b5f90a6f69edb9f453ed173706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "b7d4c6b45f515a97440fc857e40a50db92fd574a", "commitAfterChange": "124643a9b7e02d95e1d58a7a8c2d6cfa0cf9fa28", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException {", "-\tIIndexSearchRequestor orCombiner = ", "-\t\tdetailLevel == IInfoConstants.NameInfo", "-\t\t\t? (IIndexSearchRequestor) new OrNameCombiner(requestor)", "-\t\t\t: (IIndexSearchRequestor) new OrPathCombiner(requestor);", "-", "+public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException {", "+\tIIndexSearchRequestor orCombiner = (IIndexSearchRequestor) new OrPathCombiner(requestor);", "-\t\tthis.patterns[i].findIndexMatches(input, orCombiner, detailLevel, progressMonitor, scope);", "+\t\tthis.patterns[i].findIndexMatches(input, orCombiner, progressMonitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca4c6c3a2bd68c710ffcdde9bc7767ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "8032392aee6168afb7d9361a5e7c32ded0b6567a", "commitAfterChange": "af7c555b94268663ad75bc44adea174c67a820bf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\tIIndexSearchRequestor orCombiner;", "-\tif (detailLevel == IInfoConstants.NameInfo) {", "-\t\torCombiner = new OrNameCombiner(requestor);", "-\t} else {", "-\t\torCombiner = new OrPathCombiner(requestor);", "-\t}", "+\tIIndexSearchRequestor orCombiner = ", "+\t\tdetailLevel == IInfoConstants.NameInfo", "+\t\t\t? (IIndexSearchRequestor) new OrNameCombiner(requestor)", "+\t\t\t: (IIndexSearchRequestor) new OrPathCombiner(requestor);", "-\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "+\tif (progressMonitor != null && progressMonitor.isCanceled())", "+\t\tthrow new OperationCanceledException();"]}], "num": 22903}
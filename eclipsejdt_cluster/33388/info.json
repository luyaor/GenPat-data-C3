{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0d85a73930eeeb3568e02b547a25cae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04bcb33f36f5f6e18c068e4fcc4de2dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "commitAfterChange": "14bf482e9ce4e28aba53c29fe3155a9c59b88f63", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final boolean areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castTb, \t\tTypeBinding expressionTb)", "signatureAfterChange": "  \tpublic final boolean areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\tTypeBinding castTb,", "-\t\tTypeBinding expressionTb) {", "+\t\tTypeBinding castType,", "+\t\tTypeBinding expressionType) {", "+\t\tif (castType == expressionType) return true;", "+\t\t", "-\t\t\tif (NullBinding == expressionTb)", "-\t\t\t\t//null is compatible with every thing .... ", "-\t\t\t\t{", "+\t\t\t//null is compatible with every thing .... ", "+\t\t\tif (NullBinding == expressionType) {", "-\t\t\tif (expressionTb.isArrayType()) {", "-\t\t\t\tif (castTb.isArrayType()) {", "+\t\t\tif (expressionType.isArrayType()) {", "+\t\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t\tTypeBinding expressionEltTb = ((ArrayBinding) expressionTb).elementsType(scope);", "+\t\t\t\t\tTypeBinding expressionEltTb = ((ArrayBinding) expressionType).elementsType(scope);", "-\t\t\t\t\t\treturn ((ArrayBinding) castTb).elementsType(scope) == expressionEltTb;", "+\t\t\t\t\t\treturn ((ArrayBinding) castType).elementsType(scope) == expressionEltTb;", "-\t\t\t\t\t\t((ArrayBinding) castTb).elementsType(scope),", "+\t\t\t\t\t\t((ArrayBinding) castType).elementsType(scope),", "-\t\t\t\tif (castTb.isClass()) {", "+\t\t\t\tif (castType.isClass()) {", "-\t\t\t\t\tif (scope.isJavaLangObject(castTb))", "+\t\t\t\t\tif (scope.isJavaLangObject(castType))", "-\t\t\t\tif (castTb.isInterface()) {", "+\t\t\t\tif (castType.isInterface()) {", "-\t\t\t\t\tif (scope.isJavaLangCloneable(castTb) || scope.isJavaIoSerializable(castTb)) {", "+\t\t\t\t\tif (scope.isJavaLangCloneable(castType) || scope.isJavaIoSerializable(castType)) {", "-\t\t\tif (expressionTb.isBaseType()) {", "+\t\t\tif (expressionType.isBaseType()) {", "-\t\t\tif (expressionTb.isClass()) {", "-\t\t\t\tif (castTb.isArrayType()) {", "+\t\t\tif (expressionType.isClass()) {", "+\t\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t\tif (scope.isJavaLangObject(expressionTb)) {", "+\t\t\t\t\tif (scope.isJavaLangObject(expressionType)) {", "-\t\t\t\tif (castTb.isClass()) { // ----- (castTb.isClass) expressionTb.isClass ------ ", "-\t\t\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "+\t\t\t\tif (castType.isClass()) { // ----- (castTb.isClass) expressionTb.isClass ------ ", "+\t\t\t\t\tif (expressionType.isCompatibleWith(castType))", "-\t\t\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\tif (castTb.isInterface()) {", "+\t\t\t\tif (castType.isInterface()) {", "-\t\t\t\t\tif (((ReferenceBinding) expressionTb).isFinal()) {", "+\t\t\t\t\tif (((ReferenceBinding) expressionType).isFinal()) {", "-\t\t\t\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "+\t\t\t\t\t\tif (expressionType.isCompatibleWith(castType))", "-\t\t\tif (expressionTb.isInterface()) {", "-\t\t\t\tif (castTb.isArrayType()) {", "+\t\t\tif (expressionType.isInterface()) {", "+\t\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t\tif (scope.isJavaLangCloneable(expressionTb)", "-\t\t\t\t\t\t|| scope.isJavaIoSerializable(expressionTb))", "+\t\t\t\t\tif (scope.isJavaLangCloneable(expressionType)", "+\t\t\t\t\t\t|| scope.isJavaIoSerializable(expressionType))", "-\t\t\t\tif (castTb.isClass()) {", "+\t\t\t\tif (castType.isClass()) {", "-\t\t\t\t\tif (scope.isJavaLangObject(castTb))", "+\t\t\t\t\tif (scope.isJavaLangObject(castType))", "-\t\t\t\t\tif (((ReferenceBinding) castTb).isFinal()) {", "+\t\t\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "-\t\t\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\tif (castTb.isInterface()) {", "+\t\t\t\tif (castType.isInterface()) {", "-\t\t\t\t\tif (castTb != expressionTb", "-\t\t\t\t\t\t&& (Scope.compareTypes(castTb, expressionTb) == NotRelated)) {", "-\t\t\t\t\t\tMethodBinding[] castTbMethods = ((ReferenceBinding) castTb).methods();", "+\t\t\t\t\tif ((Scope.compareTypes(castType, expressionType) == NotRelated)) {", "+\t\t\t\t\t\tMethodBinding[] castTbMethods = ((ReferenceBinding) castType).methods();", "-\t\t\t\t\t\t\t((ReferenceBinding) expressionTb).methods();", "+\t\t\t\t\t\t\t((ReferenceBinding) expressionType).methods();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd940cbf0466f505f0c967e8a6b634fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "commitAfterChange": "14bf482e9ce4e28aba53c29fe3155a9c59b88f63", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public final boolean areTypesCastCompatible(BlockScope scope, TypeBinding castTb, TypeBinding expressionTb)", "signatureAfterChange": " public final boolean areTypesCastCompatible(BlockScope scope, TypeBinding castType, TypeBinding expressionType)", "diff": ["-public final boolean areTypesCastCompatible(BlockScope scope, TypeBinding castTb, TypeBinding expressionTb) {", "-\t//see specifications p.68", "+public final boolean areTypesCastCompatible(BlockScope scope, TypeBinding castType, TypeBinding expressionType) {", "+\t//see specifications 5.5", "+\tif (castType == expressionType) return true;", "-\tif (expressionTb.isArrayType()) {", "-\t\tif (castTb.isArrayType()) { //------- (castTb.isArray) expressionTb.isArray -----------", "-\t\t\tTypeBinding expressionEltTb = ((ArrayBinding) expressionTb).elementsType(scope);", "-\t\t\tif (expressionEltTb.isBaseType())", "+\tif (expressionType.isArrayType()) {", "+\t\tif (castType.isArrayType()) { //------- (castTb.isArray) expressionTb.isArray -----------", "+\t\t\tTypeBinding expressionEltType = ((ArrayBinding) expressionType).elementsType(scope);", "+\t\t\tif (expressionEltType.isBaseType())", "-\t\t\t\treturn ((ArrayBinding) castTb).elementsType(scope) == expressionEltTb;", "+\t\t\t\treturn ((ArrayBinding) castType).elementsType(scope) == expressionEltType;", "-\t\t\treturn areTypesCastCompatible(scope, ((ArrayBinding) castTb).elementsType(scope), expressionEltTb);", "+\t\t\treturn areTypesCastCompatible(scope, ((ArrayBinding) castType).elementsType(scope), expressionEltType);", "-\t\tif (castTb.isBaseType()) {", "+\t\tif (castType.isBaseType()) {", "-\t\tif (castTb.isClass()) { //------(castTb.isClass) expressionTb.isArray ---------------\t", "-\t\t\tif (scope.isJavaLangObject(castTb))", "+\t\tif (castType.isClass()) { //------(castTb.isClass) expressionTb.isArray ---------------\t", "+\t\t\tif (scope.isJavaLangObject(castType))", "-\t\tif (castTb.isInterface()) { //------- (castTb.isInterface) expressionTb.isArray -----------", "-\t\t\tif (scope.isJavaLangCloneable(castTb) || scope.isJavaIoSerializable(castTb)) {", "+\t\tif (castType.isInterface()) { //------- (castTb.isInterface) expressionTb.isArray -----------", "+\t\t\tif (scope.isJavaLangCloneable(castType) || scope.isJavaIoSerializable(castType)) {", "-\tif (expressionTb == NullBinding) {", "-\t\treturn !castTb.isBaseType();", "+\tif (expressionType == NullBinding) {", "+\t\treturn !castType.isBaseType();", "-\tif (expressionTb.isBaseType()) {", "+\tif (expressionType.isBaseType()) {", "-\tif (expressionTb.isClass()) {", "-\t\tif (castTb.isArrayType()) { // ---- (castTb.isArray) expressionTb.isClass -------", "-\t\t\tif (scope.isJavaLangObject(expressionTb))", "+\tif (expressionType.isClass()) {", "+\t\tif (castType.isArrayType()) { // ---- (castTb.isArray) expressionTb.isClass -------", "+\t\t\tif (scope.isJavaLangObject(expressionType))", "-\t\tif (castTb.isBaseType()) {", "+\t\tif (castType.isBaseType()) {", "-\t\tif (castTb.isClass()) { // ----- (castTb.isClass) expressionTb.isClass ------ ", "-\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "+\t\tif (castType.isClass()) { // ----- (castTb.isClass) expressionTb.isClass ------ ", "+\t\t\tif (expressionType.isCompatibleWith(castType))", "-\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\tif (castTb.isInterface()) { // ----- (castTb.isInterface) expressionTb.isClass -------  ", "-\t\t\tif (((ReferenceBinding) expressionTb).isFinal()) { //no subclass for expressionTb, thus compile-time check is valid", "-\t\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "+\t\tif (castType.isInterface()) { // ----- (castTb.isInterface) expressionTb.isClass -------  ", "+\t\t\tif (((ReferenceBinding) expressionType).isFinal()) { //no subclass for expressionTb, thus compile-time check is valid", "+\t\t\t\tif (expressionType.isCompatibleWith(castType))", "-\tif (expressionTb.isInterface()) {", "-\t\tif (castTb.isArrayType()) { // ----- (castTb.isArray) expressionTb.isInterface ------", "-\t\t\tif (scope.isJavaLangCloneable(expressionTb) || scope.isJavaIoSerializable(expressionTb))", "+\tif (expressionType.isInterface()) {", "+\t\tif (castType.isArrayType()) { // ----- (castTb.isArray) expressionTb.isInterface ------", "+\t\t\tif (scope.isJavaLangCloneable(expressionType) || scope.isJavaIoSerializable(expressionType))", "-\t\tif (castTb.isBaseType()) {", "+\t\tif (castType.isBaseType()) {", "-\t\tif (castTb.isClass()) { // ----- (castTb.isClass) expressionTb.isInterface --------", "-\t\t\tif (scope.isJavaLangObject(castTb))", "+\t\tif (castType.isClass()) { // ----- (castTb.isClass) expressionTb.isInterface --------", "+\t\t\tif (scope.isJavaLangObject(castType))", "-\t\t\tif (((ReferenceBinding) castTb).isFinal()) { //no subclass for castTb, thus compile-time check is valid", "-\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\tif (((ReferenceBinding) castType).isFinal()) { //no subclass for castTb, thus compile-time check is valid", "+\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\tif (castTb.isInterface()) { // ----- (castTb.isInterface) expressionTb.isInterface -------", "-\t\t\tif (castTb != expressionTb && (Scope.compareTypes(castTb, expressionTb) == NotRelated)) {", "-\t\t\t\tMethodBinding[] castTbMethods = ((ReferenceBinding) castTb).methods();", "+\t\tif (castType.isInterface()) { // ----- (castTb.isInterface) expressionTb.isInterface -------", "+\t\t\tif (Scope.compareTypes(castType, expressionType) == NotRelated) {", "+\t\t\t\tMethodBinding[] castTbMethods = ((ReferenceBinding) castType).methods();", "-\t\t\t\tMethodBinding[] expressionTbMethods = ((ReferenceBinding) expressionTb).methods();", "+\t\t\t\tMethodBinding[] expressionTbMethods = ((ReferenceBinding) expressionType).methods();"]}], "num": 33388}
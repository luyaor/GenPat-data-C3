{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "094dc7dd931c622d60b1b7bd9e24dfcd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b371c2db7f991ad52b491207cb72ff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "37d61d5c5c650829214bf858cd078e7d345a9a26", "commitAfterChange": "dd98852dd97e40bffde60b114dfaf133a2c50581", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\t} else if (genericTypeArguments != null && !(method instanceof ParameterizedGenericMethodBinding)) {", "-\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeParameterArityMismatch);", "+\t\t} else if (genericTypeArguments != null) {", "+\t\t\tif (method instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\tif (method.declaringClass.isRawType())", "+\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeArgumentsForRawGenericMethod); // attempt to invoke generic method of raw type with type hints <String>foo()", "+\t\t\t} else {", "+\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeParameterArityMismatch);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d14fed6b085ca1723c3f7c42f4f4b0fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "fa29dab3b4a80eeb979f85a360e3d92daf6b2d86", "commitAfterChange": "d331f174fbfb2a521b854a50674d1b0843d8b9c4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite, boolean tiebreakingVarargsMethods)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite, boolean tiebreakingVarargsMethods)", "diff": ["-\t\t} else if (typeVariables == Binding.NO_TYPE_VARIABLES && method instanceof PolyParameterizedGenericMethodBinding) {", "-\t\t\treturn method;", "+\t\t} else if (typeVariables == Binding.NO_TYPE_VARIABLES && method instanceof ParameterizedGenericMethodBinding) {", "+\t\t\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8 && invocationSite instanceof Invocation) {", "+\t\t\t\tInvocation invocation = (Invocation) invocationSite;", "+\t\t\t\tInferenceContext18 infCtx = invocation.getInferenceContext((ParameterizedGenericMethodBinding) method);", "+\t\t\t\tif (infCtx != null)", "+\t\t\t\t\treturn method; // inference is responsible, no need to recheck.", "+\t\t\t}"]}], "num": 42806}
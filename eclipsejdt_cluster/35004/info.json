{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0409782e1b084d4864a1481a25d426b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73412f35dcc1d39f1f5a256e8d9022a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "3e1ac9332051468842a1e12f17167ff5224d13b2", "commitAfterChange": "9b20617e51225c8d5ac488c75961e3c5635f1fde", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t} else if (castType.isClass()) {", "+\t\t\t} else if (castType.isClass() || castType.isEnum()) {", "-\t\tif (expressionType.isClass()) {", "+\t\tif (expressionType.isClass() || expressionType.isEnum()) {", "-\t\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "+\t\t\t} else if (castType.isClass() || castType.isEnum()) { // ----- (castType.isClass) expressionType.isClass ------", "-\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "+\t\t} else if (castType.isClass() || castType.isEnum()) { // ----- (castType.isClass) expressionType.isInterface --------"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8b843c18209e1229c5b78e0811f71c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "dd7a18d099a9b8a557ed1fb7fc46e76ea5cfac10", "commitAfterChange": "61620cc52bd94ec88d2d4d64acf040dcf8022b0a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\t\t\t|| castType.isGenericType() ", "-\t\t\t\t|| \texpressionType.isBoundParameterizedType() ", "-\t\t\t\t|| expressionType.isGenericType())) {", "+\t\t\t\t|| \texpressionType.isBoundParameterizedType())) {", "-\t\t\t\tif ((!match.isParameterizedType() && !match.isGenericType())", "-\t\t\t\t\t\t|| expressionType.isRawType()) {", "+\t\t\t\tif (!match.isParameterizedType() || expressionType.isRawType()) {", "-\t\t\tif (expressionType.id == T_JavaLangObject && castType.isArrayType() && (leafType.isBoundParameterizedType() || leafType.isGenericType())) {", "+\t\t\tif (expressionType.id == T_JavaLangObject && castType.isArrayType() && leafType.isBoundParameterizedType()) {"]}], "num": 35004}
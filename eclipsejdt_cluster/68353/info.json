{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3f0d7c4a1c2aef0fa5b5d63519e36f0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ceb6e0fe570d67ba5dff3728a14ed75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void checkAndSetModifiers()", "signatureAfterChange": " \t \tprivate void checkAndSetModifiers()", "diff": ["-\t\t\tif (enclosingType.isInterface())", "+\t\t\tif ((enclosingType.modifiers & AccInterface) != 0)", "-\t\t\tif (sourceType.isAnonymousType()) ", "+\t\t\tif (sourceType.isAnonymousType()) {", "+\t\t\t    // set AccEnum flag for anonymous body of enum constants", "+\t\t\t    if (referenceContext.allocation.type == null) {", "+\t\t\t    \tmodifiers |= AccEnum;", "+\t\t\t    }", "+\t\t\t}", "-\t\tif ((realModifiers & AccInterface) != 0) {", "+\t\tif ((realModifiers & AccInterface) != 0) { // interface and annotation type", "-\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccInterface | AccStrictfp);", "-\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0)", "-\t\t\t\t\tproblemReporter().illegalModifierForMemberInterface(sourceType);", "+\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccInterface | AccStrictfp | AccAnnotation);", "+\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0) {", "+\t\t\t\t\tif ((realModifiers & AccAnnotation) != 0) {", "+\t\t\t\t\t\tproblemReporter().illegalModifierForMemberAnnotationType(sourceType);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tproblemReporter().illegalModifierForMemberInterface(sourceType);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccInterface | AccStrictfp);", "-\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0)", "-\t\t\t\t\tproblemReporter().illegalModifierForInterface(sourceType);", "+\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccInterface | AccStrictfp | AccAnnotation);", "+\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0) {", "+\t\t\t\t\tif ((realModifiers & AccAnnotation) != 0) {", "+\t\t\t\t\t\tproblemReporter().illegalModifierForAnnotationType(sourceType);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tproblemReporter().illegalModifierForInterface(sourceType);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t} else if ((realModifiers & AccEnum) != 0) {", "+\t\t\t// detect abnormal cases for enums", "+\t\t\tif (isMemberType) { // includes member types defined inside local types", "+\t\t\t\tint unexpectedModifiers =", "+\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccFinal | AccStrictfp | AccEnum);", "+\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0)", "+\t\t\t\t\tproblemReporter().illegalModifierForMemberEnum(sourceType);", "+\t\t\t} else if (sourceType.isLocalType()) {", "+\t\t\t\tint unexpectedModifiers = ~(AccAbstract | AccFinal | AccStrictfp | AccEnum);", "+\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0)", "+\t\t\t\t\tproblemReporter().illegalModifierForLocalEnum(sourceType);", "+\t\t\t} else {", "+\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccFinal | AccStrictfp | AccEnum);", "+\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0)", "+\t\t\t\t\tproblemReporter().illegalModifierForEnum(sourceType);", "+\t\t\t}", "+", "+\t\t\t// check that Final and Abstract are not set together", "+\t\t\tif ((realModifiers & (AccFinal | AccAbstract)) == (AccFinal | AccAbstract))", "+\t\t\t\tproblemReporter().illegalModifierCombinationFinalAbstractForClass(sourceType);", "-\t\t\t// detect abnormal cases for types", "+\t\t\t// detect abnormal cases for classes"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a26b31660cadc1d9e905aa69fed6c1ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "2c262bb049c7c4afe17af25384f399520f404e78", "commitAfterChange": "ae43a440915bd6d7962491f9c0ab4d02295e6d83", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t}"]}], "num": 68353}
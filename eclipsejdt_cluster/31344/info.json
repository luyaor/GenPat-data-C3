{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75f4a1fde2b008ab6ae90e1043b2552c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a33406b527f9daa7f5b06e2d19567ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "4d4e17b21e8cd2e718905d1f6af33dcc6796501f", "commitAfterChange": "a6a5866450241565c9a2db7e59a81c5e9f3105c8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["-\t", "-\tprivate void setUpFullSourceWorkspace() throws IOException, CoreException {", "-\t\tString fullSourceZipPath = getPluginDirectoryPath() + File.separator + \"full-source-R3_0.zip\";", "+\t */", "+\tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException {", "-\t\tfinal String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "+\t\tif (workspaceRoot.getProjects().length == 0) {", "+\t\t\tString fullSourceZipPath = getPluginDirectoryPath() + File.separator + \"full-source-R3_0.zip\";", "+\t\t\tfinal String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "+", "+\t\t\tif (DEBUG) System.out.print(\"Unzipping \"+fullSourceZipPath+\"...\");", "+\t\t\tUtil.unzip(fullSourceZipPath, targetWorkspacePath);", "-\t\tUtil.unzip(fullSourceZipPath, targetWorkspacePath);", "-\t\t", "+\t\t\tworkspace.run(new IWorkspaceRunnable() {", "+\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "+\t\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "+\t\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "+\t\t\t\t\t\tString projectName = projectNames[i];", "+\t\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "+\t\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "+\t\t\t\t\t\tproject.create(monitor);", "+\t\t\t\t\t\tproject.open(monitor);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}, null);", "+\t\t\tif (DEBUG) System.out.println(\"done!\");", "+\t\t}", "-\t\tworkspace.run(new IWorkspaceRunnable() {", "-\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "-\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "-\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "-\t\t\t\t\tString projectName = projectNames[i];", "-\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "-\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "-\t\t\t\t\tproject.create(monitor);", "-\t\t\t\t\tproject.open(monitor);", "+\t\t// workaround bug 73253 Project references not set on project open ", "+\t\tif (DEBUG) System.out.print(\"Set projects classpaths...\");", "+\t\tALL_PROJECTS = JavaCore.create(workspaceRoot).getJavaProjects();", "+\t\tint length = ALL_PROJECTS.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "+\t\t}", "+\t\tif (DEBUG) System.out.println(\"done!\");", "+\t}", "-\t\t}, null);", "-\t\t", "-\t\t// workaround bug 73253 Project references not set on project open ", "-\t\tIJavaProject[] projects = JavaCore.create(workspaceRoot).getJavaProjects();", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\tprojects[i].setRawClasspath(projects[i].getRawClasspath(), null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84376684be0dd106f230a88a438a3cd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "d32899eb4e5db96c386fe27007db09842d368980", "commitAfterChange": "454c09645419e42e424c8ed7d147ba861f3f0f93", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  private void denseCycleDetection(int numberOfParticipants) throws CoreException", "signatureAfterChange": "  private void denseCycleDetection(final int numberOfParticipants) throws CoreException", "diff": ["-private void denseCycleDetection(int numberOfParticipants) throws CoreException {", "+private void denseCycleDetection(final int numberOfParticipants) throws CoreException {", "-\tIJavaProject[] projects = new IJavaProject[numberOfParticipants];", "-\tint[] allProjectsInCycle = new int[numberOfParticipants];", "+\tfinal IJavaProject[] projects = new IJavaProject[numberOfParticipants];", "+\tfinal int[] allProjectsInCycle = new int[numberOfParticipants];", "-\t\tfor (int i = 0; i < numberOfParticipants; i++){", "-\t\t\tprojects[i] = this.createJavaProject(\"P\"+i, new String[]{\"\"}, \"\");", "-\t\t\tallProjectsInCycle[i] = 1;", "-\t\t}\t\t", "-\t\tfor (int i = 0; i < numberOfParticipants; i++){", "-\t\t\tIClasspathEntry[] extraEntries = new IClasspathEntry[numberOfParticipants-1];", "-\t\t\tint index = 0;", "-\t\t\tfor (int j = 0; j < numberOfParticipants; j++){", "-\t\t\t\tif (i == j) continue;", "-\t\t\t\textraEntries[index++] = JavaCore.newProjectEntry(projects[j].getPath());", "+\t\tJavaCore.run(new IWorkspaceRunnable() {", "+\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\tfor (int i = 0; i < numberOfParticipants; i++){", "+\t\t\t\t\tprojects[i] = createJavaProject(\"P\"+i, new String[]{\"\"}, \"\");", "+\t\t\t\t\tallProjectsInCycle[i] = 1;", "+\t\t\t\t}\t\t", "+\t\t\t\tfor (int i = 0; i < numberOfParticipants; i++){", "+\t\t\t\t\tIClasspathEntry[] extraEntries = new IClasspathEntry[numberOfParticipants-1];", "+\t\t\t\t\tint index = 0;", "+\t\t\t\t\tfor (int j = 0; j < numberOfParticipants; j++){", "+\t\t\t\t\t\tif (i == j) continue;", "+\t\t\t\t\t\textraEntries[index++] = JavaCore.newProjectEntry(projects[j].getPath());", "+\t\t\t\t\t}", "+\t\t\t\t\t// append project references\t\t\t", "+\t\t\t\t\tIClasspathEntry[] oldClasspath = projects[i].getRawClasspath();", "+\t\t\t\t\tIClasspathEntry[] newClasspath = new IClasspathEntry[oldClasspath.length+extraEntries.length];", "+\t\t\t\t\tSystem.arraycopy(oldClasspath, 0 , newClasspath, 0, oldClasspath.length);", "+\t\t\t\t\tfor (int j = 0; j < extraEntries.length; j++){", "+\t\t\t\t\t\tnewClasspath[oldClasspath.length+j] = extraEntries[j];", "+\t\t\t\t\t}\t\t\t", "+\t\t\t\t\t// set classpath", "+\t\t\t\t\tprojects[i].setRawClasspath(newClasspath, null);", "+\t\t\t\t};", "-\t\t\t// append project references\t\t\t", "-\t\t\tIClasspathEntry[] oldClasspath = projects[i].getRawClasspath();", "-\t\t\tIClasspathEntry[] newClasspath = new IClasspathEntry[oldClasspath.length+extraEntries.length];", "-\t\t\tSystem.arraycopy(oldClasspath, 0 , newClasspath, 0, oldClasspath.length);", "-\t\t\tfor (int j = 0; j < extraEntries.length; j++){", "-\t\t\t\tnewClasspath[oldClasspath.length+j] = extraEntries[j];", "-\t\t\t}\t\t\t", "-\t\t\t// set classpath", "-\t\t\tprojects[i].setRawClasspath(newClasspath, null);", "-\t\t};", "+\t\t}, ", "+\t\tnull);", "-\t\t//System.out.println(\"Dense cycle check (\"+numberOfParticipants+\" participants) : \"+ (System.currentTimeMillis()-start)+\" ms\");", "+\t\tSystem.out.println(\"Dense cycle check (\"+numberOfParticipants+\" participants) : \"+ (System.currentTimeMillis()-start)+\" ms\");"]}], "num": 31344}
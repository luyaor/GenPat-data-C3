{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5bbb6c3fe77ff7a07598199cfb504db", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "063be58bed0751037225d5bea2f44d0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic synchronized boolean containsWorkingCopyMapEntriesForParent( IFile f )", "signatureAfterChange": " \tpublic synchronized boolean containsWorkingCopyMapEntriesForParent(IFile f)", "diff": ["+\t */", "+\tpublic synchronized boolean containsWorkingCopyMapEntriesForParent(IFile f)", "+\t{", "+\t\treturn _parentToGenWorkingCopies.containsKey(f);", "+\t}", "-\t */", "-\tpublic synchronized boolean containsWorkingCopyMapEntriesForParent( IFile f )", "-\t{", "-\t\tCollection<Set<IFile>> parentSets = _generatedWorkingCopy2OpenParentFiles.values();", "-\t\tif ( parentSets != null )", "-\t\t{", "-\t\t\tfor( Set<IFile> s : parentSets )", "-\t\t\t{", "-\t\t\t\tif ( s.contains( f ) )", "-\t\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}", "-", "-\t\tSet<IFile> generatedFiles = _parentFile2GeneratedFiles.get( f );", "-\t\tif ( generatedFiles != null )", "-\t\t{", "-\t\t\tfor ( IFile gf : generatedFiles )", "-\t\t\t{", "-\t\t\t\tICompilationUnit cu = _generatedFile2WorkingCopy.get( gf );", "-\t\t\t\tif ( cu != null )", "-\t\t\t\t{", "-\t\t\t\t\tSet<IFile> parents = _generatedWorkingCopy2OpenParentFiles.get( cu );", "-\t\t\t\t\tif ( parents.contains( cu ) || parents.size() == 0 )", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1318aeb73868278214d49f87f71f96cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "578c21c1e18bf1107cbfd2c0d5f2f8d0a328f266", "commitAfterChange": "762bd2409925136301ba78a2088db7bdf120f80d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["-    \tMap<String, String> options = new HashMap<String, String>();", "-    \t\treturn options;", "+    \t\treturn new HashMap<String, String>();", "-    \tString[] parsedOptions = allOptions.split(\" \");", "-    \tfor (String keyAndVal : parsedOptions) {", "-    \t\tif (!keyAndVal.startsWith(\"-A\")) {", "-    \t\t\tcontinue;", "-    \t\t}", "-    \t\tString[] parsedKeyAndVal = keyAndVal.split(\"=\", 2);", "-    \t\tif (parsedKeyAndVal.length > 0) {", "-    \t\t\tString key = parsedKeyAndVal[0].substring(2);", "-    \t\t\tif (key.length() < 1) {", "-    \t\t\t\tcontinue;", "-    \t\t\t}", "-    \t\t\tif (parsedKeyAndVal.length == 1) {", "-    \t\t\t\toptions.put(key, null);", "+    \telse {", "+    \t\tOptionsParser op = new OptionsParser(allOptions);", "+    \t\treturn op.parse();", "+    \t}", "+    }", "-    \t\t\t\toptions.put(key, parsedKeyAndVal[1]);", "-    \treturn options;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1d98daf048fda2b47e40ac021d3fe4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "b8409b2c5761cb2e6dbcdfc3bef92e6e755d2aa7", "commitAfterChange": "e968b992e38be58d07a46d70f656322d8b2edb33", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj)", "signatureAfterChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj)", "diff": ["-\t\tMap<FactoryContainer, Boolean> containers = null;", "-\t\tif (jproj != null) {", "-\t\t\ttry {", "-\t\t\t\tcontainers = FactoryPathUtil.readFactoryPathFile(jproj);", "-\t\t\t}", "-\t\t\tcatch (CoreException ce) {", "-\t\t\t\tce.printStackTrace();", "-\t\t\t}", "-\t\t\tcatch (IOException ioe) {", "-\t\t\t\tioe.printStackTrace();", "-\t\t\t}", "-\t\t}", "-\t\t// Workspace if no project data was found", "-\t\tif (containers == null) {", "-\t\t\ttry {", "-\t\t\t\tcontainers = FactoryPathUtil.readFactoryPathFile(null);", "-\t\t\t}", "-\t\t\tcatch (CoreException ce) {", "-\t\t\t\tce.printStackTrace();", "-\t\t\t}", "-\t\t\tcatch (IOException ioe) {", "-\t\t\t\tioe.printStackTrace();", "-\t\t\t}", "-\t\t}", "-\t\t// if no project and no workspace data was found, we'll get the defaults", "-\t\tif (containers == null) {", "-\t\t\tcontainers = new LinkedHashMap<FactoryContainer, Boolean>();", "-\t\t}", "-\t\tboolean disableNewPlugins = jproj != null;", "-\t\tupdatePluginContainers(containers, disableNewPlugins);", "-\t\treturn new LinkedHashMap(containers);", "-\t}", "+\t\treturn FactoryPathUtil.getAllContainers(jproj);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcb118f5d401baf1a4899f1c05dce639", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "7e41439f7b91a880bb131d143b9faf947232eb35", "commitAfterChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["-\t\t// Verify that we get the root elements we expect", "-\t\tSet<String> expectedRootElementNames = new HashSet<String>(ROOT_ELEMENT_NAMES.length);", "-\t\tfor (String name : ROOT_ELEMENT_NAMES) {", "-\t\t\texpectedRootElementNames.add(name);", "-\t\t}", "-\t\tSet<? extends Element> actualRootElements = roundEnv.getRootElements();", "-\t\tif (null == actualRootElements) {", "-\t\t\treportError(\"getRootElements() returned null\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tfor (Element e : actualRootElements) {", "-\t\t\tString name = e.getSimpleName().toString();", "-\t\t\tif (!expectedRootElementNames.remove(name)) {", "-\t\t\t\treportError(\"Missing root element \" + name);", "-\t\t\t}", "-\t\t}", "-\t\tif (!expectedRootElementNames.isEmpty()) {", "-\t\t\treportError(\"Found extra root elements including \" + expectedRootElementNames.iterator().next());", "+\t\tif (!collectElements()) {", "-\t\tif (!collectElements()) {", "+\t\tif (!examineRoundEnv(roundEnv)) {"]}], "num": 7756}
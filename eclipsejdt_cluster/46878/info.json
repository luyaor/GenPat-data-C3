{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b8b569d3f58f430ec27811518526839", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01fa726e261511fc21682da8b3e22443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "5ecdad70bb6e2e1bbd5c5ec539acc885a5698c4e", "commitAfterChange": "7f8c41fdd4e487762406a2cb6aaa3aa1d260201c", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames)", "signatureAfterChange": "  private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, AnnotationBinding [][] annotationsOnDimensions, TypeAnnotationWalker walker, char [][][] missingTypeNames)", "diff": ["-private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames) {", "-\tAnnotationBinding [] annotations;", "-\tAnnotationBinding [][] annotationsOnDimensions = null;", "-\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "-\t\tfor (int i = 0; i < dimension; i++) {", "-\t\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t\t\tif (annotations != Binding.NO_ANNOTATIONS) { ", "-\t\t\t\tif (annotationsOnDimensions == null)", "-\t\t\t\t\tannotationsOnDimensions = new AnnotationBinding[dimension][];", "-\t\t\t\tannotationsOnDimensions[i] = annotations;", "-\t\t\t}", "-\t\t\twalker = walker.toNextArrayDimension();", "-\t\t}", "-\t}", "-\t", "-\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, AnnotationBinding [][] annotationsOnDimensions, TypeAnnotationWalker walker, char [][][] missingTypeNames) {", "+\tAnnotationBinding [] annotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa8cc7c44027466ef7fc06bb22c611ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "5ecdad70bb6e2e1bbd5c5ec539acc885a5698c4e", "commitAfterChange": "7f8c41fdd4e487762406a2cb6aaa3aa1d260201c", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-\t\t\t\treturn getTypeFromTypeVariable(staticVariables[i], dimension, walker, missingTypeNames);", "+\t\t\t\treturn getTypeFromTypeVariable(staticVariables[i], dimension, annotationsOnDimensions, walker, missingTypeNames);", "-\t\t\t\t\treturn getTypeFromTypeVariable(enclosingTypeVariables[i], dimension, walker, missingTypeNames);", "+\t\t\t\t\treturn getTypeFromTypeVariable(enclosingTypeVariables[i], dimension, annotationsOnDimensions, walker, missingTypeNames);", "+\tAnnotationBinding [] annotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\tParameterizedTypeBinding parameterizedType = createParameterizedType(actualType, typeArguments, actualEnclosing);", "+\tParameterizedTypeBinding parameterizedType = createParameterizedType(actualType, typeArguments, actualEnclosing, annotations);", "+\t\twalker = walker.toNextNestedType();", "+\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t\tparameterizedType = createParameterizedType(memberType, typeArguments, parameterizedType);", "+\t\tparameterizedType = createParameterizedType(memberType, typeArguments, parameterizedType, annotations);"]}], "num": 46878}
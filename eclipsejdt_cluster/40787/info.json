{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65cc10d60f7308c870e3e2a283fddb75", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "289edd6d5375ec71a654dd8df95176c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": " \tpublic void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\tcase FIELD :", "-\t\t\t\tFieldBinding fieldBinding;", "-\t\t\t\tif ((fieldBinding = (FieldBinding) binding).isStatic()", "-\t\t\t\t\t|| (fieldBinding.constant != NotAConstant))", "-\t\t\t\t\treturn;", "-\t\t\t\tReferenceBinding compatibleType = currentScope.enclosingSourceType();", "-\t\t\t\t// the declaringClass of the target binding must be compatible with the enclosing", "-\t\t\t\t// type at <depth> levels outside", "-\t\t\t\tfor (int i = 0, depth = (bits & DepthMASK) >> DepthSHIFT; i < depth; i++) {", "-\t\t\t\t\tcompatibleType = compatibleType.enclosingType();", "-\t\t\t\t}", "-\t\t\t\tcurrentScope.emulateOuterAccess(compatibleType, false);", "-\t\t\t\t// request cascade of accesses", "-\t\t\t\tbreak;", "-\t\t\tcase LOCAL :", "-\t\t\t\tcurrentScope.emulateOuterAccess((LocalVariableBinding) binding);", "+\t\tif ((bits & RestrictiveFlagMASK) == LOCAL) {", "+\t\t\tcurrentScope.emulateOuterAccess((LocalVariableBinding) binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b6e254cd1c7b34c829b85f443269273", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": " public void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope)", "diff": ["-\tswitch (bits & RestrictiveFlagMASK) {", "-\t\tcase FIELD :", "-\t\t\tFieldBinding fieldBinding;", "-\t\t\tif ((fieldBinding = (FieldBinding)binding).isStatic() || (fieldBinding.constant != NotAConstant)) return;", "-\t\t\tReferenceBinding compatibleType = currentScope.enclosingSourceType();", "-\t\t\t// the declaringClass of the target binding must be compatible with the enclosing", "-\t\t\t// type at <depth> levels outside", "-\t\t\tfor (int i = 0, depth = (bits & DepthMASK) >> DepthSHIFT; i < depth; i++) {", "-\t\t\t\tcompatibleType = compatibleType.enclosingType();", "-\t\t\t}", "-\t\t\tcurrentScope.emulateOuterAccess(compatibleType, false); // request cascade of accesses", "-\t\t\tbreak;", "-\t\tcase LOCAL :", "-\t\t\tcurrentScope.emulateOuterAccess((LocalVariableBinding) binding);", "+\tif ((bits & RestrictiveFlagMASK) == LOCAL) {", "+\t\tcurrentScope.emulateOuterAccess((LocalVariableBinding) binding);"]}], "num": 40787}
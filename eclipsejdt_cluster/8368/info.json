{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "693d9eb37abc357d2e4a2ef6a9b7534a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d92215f22d5fa27ecead47bbbaaa2f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "99c2e25ae0d73d23014ede292757d62545eec1b5", "commitAfterChange": "ee3e92a740c438d4455b4c3423c42bacaa4600fe", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\tpublic String toString()", "signatureAfterChange": " \t\tpublic String toString()", "diff": ["-\t\t\t\tIJavaElementDelta[] projects = this.deltas[i].getAffectedChildren();", "-\t\t\t\tsortDeltas(projects);", "-\t\t\t\tfor (int j=0, projectsLength=projects.length; j<projectsLength; j++) {", "-\t\t\t\t\tbuffer.append(projects[j]);", "-\t\t\t\t\tif (j != projectsLength-1) {", "-\t\t\t\t\t\tbuffer.append(\"\\n\");", "+\t\t\t\tIJavaElementDelta delta = this.deltas[i];", "+\t\t\t\tIJavaElementDelta[] children = delta.getAffectedChildren();", "+\t\t\t\tint childrenLength=children.length;", "+\t\t\t\tIResourceDelta[] resourceDeltas = delta.getResourceDeltas();", "+\t\t\t\tint resourceDeltasLength = resourceDeltas == null ? 0 : resourceDeltas.length;", "+\t\t\t\tif (childrenLength == 0 && resourceDeltasLength == 0) {", "+\t\t\t\t\tbuffer.append(delta);", "+\t\t\t\t} else {", "+\t\t\t\t\tsortDeltas(children);", "+\t\t\t\t\tfor (int j=0; j<childrenLength; j++) {", "+\t\t\t\t\t\tbuffer.append(children[j]);", "+\t\t\t\t\t\tif (j != childrenLength-1) {", "+\t\t\t\t\t\t\tbuffer.append(\"\\n\");", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tIResourceDelta[] nonJavaProjects = this.deltas[i].getResourceDeltas();", "-\t\t\t\tif (nonJavaProjects != null) {", "-\t\t\t\t\tfor (int j=0, nonJavaProjectsLength=nonJavaProjects.length; j<nonJavaProjectsLength; j++) {", "+\t\t\t\t\tfor (int j=0; j<resourceDeltasLength; j++) {", "-\t\t\t\t\t\tbuffer.append(nonJavaProjects[j]);", "-\t\t\t\t\t\tif (j != nonJavaProjectsLength-1) {", "+\t\t\t\t\t\tbuffer.append(resourceDeltas[j]);", "+\t\t\t\t\t\tif (j != resourceDeltasLength-1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9b35c3885345e1336ab7ba98dbf8222", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "c611850252ecccb24f660547467e0d555dd4fb70", "commitAfterChange": "8d3c2646ec0224ab936125ae7e1adde5786e1231", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tprivate org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getTypeAnnotations(int dimensions, ArrayBinding arrayBinding, boolean isVarargs)", "signatureAfterChange": "  \tprivate org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getTypeAnnotations(int dimensions, ArrayBinding arrayBinding, boolean isVarargs)", "diff": ["-\t\tif (extendedDimensions <= 0)", "-\t\t\treturn oldies; // if isVarargs, we will return extra trailing annotations, but that should be harmless.", "-\t\tfor (int i = 0, length = oldies == null ? 0 : oldies.length; i < length; i++) {", "-\t\t\tif (oldies[i] == null) {", "+\t\tint i, length;", "+\t\tfor (i = 0, length = oldies == null ? 0 : oldies.length; i < length && extendedDimensions > 0 ; i++) {", "+\t\t\tif (oldies[i] == null)", "-\t\t\t\tif (extendedDimensions == 0) {", "-\t\t\t\t\tint cells = oldies.length - ++i;", "-\t\t\t\t\tSystem.arraycopy(oldies, i, newbies = new org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[cells], 0, cells);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\treturn newbies; // if isVarargs, we will return extra trailing annotations, but that should be harmless.", "+\t\tint cells = 0;", "+\t\tfor (int j = i; j < length && dimensions > 0 ; j++) {", "+\t\t\tif (oldies[j] == null)", "+\t\t\t\tdimensions--;", "+\t\t\tcells ++;", "+\t\t}", "+\t\tif (cells > 0)", "+\t\t\tSystem.arraycopy(oldies, i, newbies = new org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[cells], 0, cells);", "+\t\treturn newbies;"]}], "num": 8368}
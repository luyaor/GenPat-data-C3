{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "669bd5b80820fe18f4cfd7f1fdec885a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fcc32cc1b2b40c87c46498d7a9dde8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "3c339caa1e7b5ca6c56cf03ac002e58b4380b89e", "commitAfterChange": "51917a0c83743a82a23c6f16badda9326a65b40d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "diff": ["-\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath)) {", "+\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath) && !Util.isExcluded(resource, ((ClasspathEntry)entry).fullExclusionPatternChars())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7bdcd19fab865157d12eb1698ead9a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "3c339caa1e7b5ca6c56cf03ac002e58b4380b89e", "commitAfterChange": "51917a0c83743a82a23c6f16badda9326a65b40d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "diff": ["-\t\t// TODO: allow nesting source folders (as long as nested one is excluded from the enclosing one)", "-\t\t", "-\t\t\t// prevent nesting source entries in each other", "+\t\t\t// allow nesting source entries in each other as long as the outer entry excludes the inner one", "-\t\t\t\t\t\tif (otherPath.isPrefixOf(entryPath) && !otherPath.equals(entryPath)) {", "+\t\t\t\t\t\tif (otherPath.isPrefixOf(entryPath) ", "+\t\t\t\t\t\t\t\t&& !otherPath.equals(entryPath)", "+\t\t\t\t\t\t\t\t&& !Util.isExcluded(entryPath, ((ClasspathEntry)otherEntry).fullExclusionPatternChars())) {", "+\t\t\t"]}], "num": 62782}
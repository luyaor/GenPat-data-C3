{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd4e53ab2e1c825b8ac218b8415a8401", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d7016364b6ff96c165e39430aa518c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "99d47e4046e97803f75625986f5eb5ffc13cddfe", "commitAfterChange": "8282cb3c46786d73ca763e64384724ac9c0798d9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " public void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "diff": ["-public void collectSubstitutes(TypeBinding otherType, Map substitutes) {", "-    if (otherType.isArrayType()) {", "-        int otherDim = otherType.dimensions();", "-        if (otherDim == this.dimensions) {", "-\t\t    this.leafComponentType.collectSubstitutes(otherType.leafComponentType(), substitutes);", "-        } else if (otherDim > this.dimensions) {", "-            ArrayBinding otherReducedType = this.environment.createArrayType(otherType.leafComponentType(), otherDim - this.dimensions);", "-            this.leafComponentType.collectSubstitutes(otherReducedType, substitutes);", "-        }", "-    } ", "+public void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+\t", "+\tif ((this.tagBits & TagBits.HasTypeVariable) == 0) return;", "+\tif (otherType == NullBinding) return;", "+\t", "+\tswitch(otherType.kind()) {", "+\t\tcase Binding.ARRAY_TYPE :", "+\t        int otherDim = otherType.dimensions();", "+\t        if (otherDim == this.dimensions) {", "+\t\t\t    this.leafComponentType.collectSubstitutes(scope, otherType.leafComponentType(), substitutes, constraint);", "+\t        } else if (otherDim > this.dimensions) {", "+\t            ArrayBinding otherReducedType = this.environment.createArrayType(otherType.leafComponentType(), otherDim - this.dimensions);", "+\t            this.leafComponentType.collectSubstitutes(scope, otherReducedType, substitutes, constraint);", "+\t        }", "+\t\t\tbreak;", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t//TypeVariableBinding variable = (TypeVariableBinding) otherType;", "+\t\t\t// TODO (philippe) should consider array bounds, and recurse", "+\t\t\tbreak;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d7e124615f5c86a23624762fa6d94a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\tif (this.binding != null ", "-\t\t\t\t&& (this.binding.tagBits & TagBits.AnnotationOverride) != 0", "-\t\t\t\t&& (this.binding.modifiers & AccOverriding) == 0) {", "-\t\t\tscope.problemReporter().methodMustOverride(this);", "+\t\tif (this.binding != null) {", "+\t\t\t// claims to override, and doesn't actually do so", "+\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) != 0 && (this.binding.modifiers & AccOverriding) == 0) {", "+\t\t\t\tscope.problemReporter().methodMustOverride(this);", "+\t\t\t}", "+\t\t\t// actually overrides, but did not claim to do so", "+\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) == 0 ", "+\t\t\t\t\t&& (this.binding.modifiers & AccOverriding) != 0", "+\t\t\t\t\t&& scope.environment().options.sourceLevel >= JDK1_5) {", "+\t\t\t\tscope.problemReporter().missingOverrideAnnotation(this);", "+\t\t\t}"]}], "num": 53912}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6268f243f3bf2e5735e96129be8ad99", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ed981d690d3b0cb6d08cde15060eccd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ab13d6b1cdae7066b5bf55448172280f7137212e", "commitAfterChange": "b6aa1e7468e04a61e529b4c4b0b636e6819cd942", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 253, "signatureBeforeChange": " \tpublic void test0245()", "signatureAfterChange": " \tpublic void test0245()", "diff": ["+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\t\"public class X <T> { \\n\" + ", "+\t\t\t\t\t\t\"        <G> T foo(G g) {\\n\" + ", "+\t\t\t\t\t\t\"            return null;\\n\" + ", "+\t\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\t\"        T bar(T t) {\\n\" + ", "+\t\t\t\t\t\t\"        \treturn zork;\\n\" + ", "+\t\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\t\"        public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\t\"                X rx = new X();\\n\" + ", "+\t\t\t\t\t\t\"                rx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\t\"                rx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\t\"}\\n\"", "+\t\t\t\t\t},", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\treturn zork;\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\t\t\"zork cannot be resolved\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\t\"\t^\\n\" + ", "+\t\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\t\t\"\trx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\t\t\"The method foo(Object) of raw type X is no longer generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"5. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\t\t\"\trx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\t\t\"The method bar(Object) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\t\"----------\\n\",", "+\t\t\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);", "+\t\t\treturn;", "+\t\t}", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X <T> { \\n\" +", "-\t\t\t\t\"\t<G> T foo(G g) {\\n\" +", "-\t\t\t\t\"\t\treturn null;\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"\t\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tX rx = new X();\\n\" +", "-\t\t\t\t\"\t\trx.<String>foo(\\\"hello\\\");\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tX rx = new X();\\n\" +", "-\t\t\t\"\t^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tX rx = new X();\\n\" +", "-\t\t\t\"\t           ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\trx.<String>foo(\\\"hello\\\");\\n\" +", "-\t\t\t\"\t           ^^^\\n\" +", "-\t\t\t\"The method foo(Object) of raw type X is no longer generic; it cannot be parameterized with arguments <String>\\n\" +", "-\t\t\t\"----------\\n\",", "-\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"public class X <T> { \\n\" + ", "+\t\t\t\t\t\"        <G> T foo(G g) {\\n\" + ", "+\t\t\t\t\t\"            return null;\\n\" + ", "+\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"        T bar(T t) {\\n\" + ", "+\t\t\t\t\t\"        \treturn zork;\\n\" + ", "+\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"        public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"                X rx = new X();\\n\" + ", "+\t\t\t\t\t\"                rx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"                rx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\treturn zork;\\n\" + ", "+\t\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\t\"zork cannot be resolved\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\"\t^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\t\"\trx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The method foo(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\trx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The method bar(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\trx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + ", "+\t\t\t\t\"Unused type arguments for the non generic method bar(Object) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\"----------\\n\",", "+\t\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f597abf030a1c53146d2bc0ea3542615", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ab13d6b1cdae7066b5bf55448172280f7137212e", "commitAfterChange": "b6aa1e7468e04a61e529b4c4b0b636e6819cd942", "methodNumberBeforeChange": 356, "methodNumberAfterChange": 356, "signatureBeforeChange": " \tpublic void test0348()", "signatureAfterChange": " \tpublic void test0348()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.io.IOException;\\n\" +", "-\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.io.IOException;\\n\" +", "+\t\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "+\t\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "+\t\t\t\t\t\"\tstatic void foo(X x) {\\n\" +", "+\t\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "+\t\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "+\t\t\t\t\t\"\t\t\tpublic void run() {}\\n\" +", "+\t\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "+\t\t\t\t\t\"\t\t\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" +", "+\t\t\t\t\t\"\t\t};\\n\" +", "+\t\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "+\t\t\t\t\"\t                 ^\\n\" +", "+\t\t\t\t\"The type parameter T is hiding the type T\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"2. WARNING in X.java (at line 4)\\n\" +", "-\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "-\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "-\t\t\t\t\"\t\t\tpublic void run() {}\\n\" +", "-\t\t\t\t\"\t\t}\\n\" +", "-\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "-\t\t\t\t\"\t\t\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" +", "-\t\t\t\t\"\t\t};\\n\" +", "-\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "-\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "-\t\t\t\"\t                 ^\\n\" +", "-\t\t\t\"The type parameter T is hiding the type T\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 4)\\n\" +", "-\t\t\t\"\tstatic void foo(X x) {\\n\" +", "-\t\t\t\"\t                ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\tx.<Exception>bar(null);\\n\" +", "-\t\t\t\"\t             ^^^\\n\" +", "-\t\t\t\"The method bar(Exception) of raw type X is no longer generic; it cannot be parameterized with arguments <Exception>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" +", "-\t\t\t\"\t                               ^^^^^^^^\\n\" +", "-\t\t\t\"The method bar(T) of type new X<R>(){} should be tagged with @Override since it actually overrides a superclass method\\n\" +", "-\t\t\t\"----------\\n\",", "-\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);", "+\t\t\t\t\"\t                ^\\n\" +", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\t\"\tx.<Exception>bar(null);\\n\" +", "+\t\t\t\t\"\t             ^^^\\n\" +", "+\t\t\t\t\"The method bar(Exception) of raw type X is no longer generic; it cannot be parameterized with arguments <Exception>\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"4. WARNING in X.java (at line 10)\\n\" +", "+\t\t\t\t\"\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" +", "+\t\t\t\t\"\t                               ^^^^^^^^\\n\" +", "+\t\t\t\t\"The method bar(T) of type new X<R>(){} should be tagged with @Override since it actually overrides a superclass method\\n\" +", "+\t\t\t\t\"----------\\n\",", "+\t\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);", "+\t\t\treturn;", "+\t\t}", "+\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.io.IOException;\\n\" +", "+\t\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "+\t\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "+\t\t\t\t\t\"\tstatic void foo(X x) {\\n\" +", "+\t\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "+\t\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "+\t\t\t\t\t\"\t\t\tpublic void run() { zork = 0; }\\n\" +", "+\t\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "+\t\t\t\t\t\"\t\t\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" +", "+\t\t\t\t\t\"\t\t};\\n\" +", "+\t\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"The type parameter T is hiding the type T\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tstatic void foo(X x) {\\n\" + ", "+\t\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tx.<Exception>bar(null);\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The method bar(Exception) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tpublic void run() { zork = 0; }\\n\" + ", "+\t\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\t\"zork cannot be resolved\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" + ", "+\t\t\t\t\"\t                               ^^^^^^^^\\n\" + ", "+\t\t\t\t\"The method bar(T) of type new X<R>(){} should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\t\"----------\\n\",", "+\t\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f84cf9445625e8d648b986e60121be0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ab13d6b1cdae7066b5bf55448172280f7137212e", "commitAfterChange": "b6aa1e7468e04a61e529b4c4b0b636e6819cd942", "methodNumberBeforeChange": 352, "methodNumberAfterChange": 352, "signatureBeforeChange": " \tpublic void test0344()", "signatureAfterChange": " \tpublic void test0344()", "diff": ["+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.io.IOException;\\n\" +", "+\t\t\t\t\t\"\\n\" +", "+\t\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "+\t\t\t\t\t\"\t\\n\" +", "+\t\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "+\t\t\t\t\t\"\\n\" +", "+\t\t\t\t\t\"\tstatic void foo(X x) {\\n\" +", "+\t\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "+\t\t\t\t\t\"\t\t\\n\" +", "+\t\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "+\t\t\t\t\t\"\t\t\tpublic void run() {\\n\" +", "+\t\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "+\t\t\t\t\t\"\t\t\tpublic <T> T bar(T t) { \\n\" +", "+\t\t\t\t\t\"\t\t\t\treturn t; \\n\" +", "+\t\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\t\"\t\t};\\n\" +", "+\t\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"The type parameter T is hiding the type T\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tstatic void foo(X x) {\\n\" + ", "+\t\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tx.<Exception>bar(null);\\n\" + ", "+\t\t\t\t\"\t             ^^^\\n\" + ", "+\t\t\t\t\"The method bar(Exception) of raw type X is no longer generic; it cannot be parameterized with arguments <Exception>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tX<R> xr = new X<R>(){  \\n\" + ", "+\t\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\t\"The type new X<R>(){} must implement the inherited abstract method X<R>.bar(T)\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t\treturn;", "+\t\t}", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.io.IOException;\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "-\t\t\t\t\"\t\\n\" +", "-\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\tstatic void foo(X x) {\\n\" +", "-\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "-\t\t\t\t\"\t\t\\n\" +", "-\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "-\t\t\t\t\"\t\t\tpublic void run() {\\n\" +", "-\t\t\t\t\"\t\t\t}\\n\" +", "-\t\t\t\t\"\t\t}\\n\" +", "-\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "-\t\t\t\t\"\t\t\tpublic <T> T bar(T t) { \\n\" +", "-\t\t\t\t\"\t\t\t\treturn t; \\n\" +", "-\t\t\t\t\"\t\t\t}\\n\" +", "-\t\t\t\t\"\t\t};\\n\" +", "-\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 5)\\n\" +", "-\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "-\t\t\t\"\t                 ^\\n\" +", "-\t\t\t\"The type parameter T is hiding the type T\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tstatic void foo(X x) {\\n\" +", "-\t\t\t\"\t                ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\tx.<Exception>bar(null);\\n\" +", "-\t\t\t\"\t             ^^^\\n\" +", "-\t\t\t\"The method bar(Exception) of raw type X is no longer generic; it cannot be parameterized with arguments <Exception>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 14)\\n\" +", "-\t\t\t\"\tX<R> xr = new X<R>(){  \\n\" +", "-\t\t\t\"\t              ^^^^^^\\n\" +", "-\t\t\t\"The type new X<R>(){} must implement the inherited abstract method X<R>.bar(T)\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.io.IOException;\\n\" +", "+\t\t\t\t\t\"\\n\" +", "+\t\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "+\t\t\t\t\t\"\t\\n\" +", "+\t\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "+\t\t\t\t\t\"\\n\" +", "+\t\t\t\t\t\"\tstatic void foo(X x) {\\n\" +", "+\t\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "+\t\t\t\t\t\"\t\t\\n\" +", "+\t\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "+\t\t\t\t\t\"\t\t\tpublic void run() {\\n\" +", "+\t\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "+\t\t\t\t\t\"\t\t\tpublic <T> T bar(T t) { \\n\" +", "+\t\t\t\t\t\"\t\t\t\treturn t; \\n\" +", "+\t\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\t\"\t\t};\\n\" +", "+\t\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"The type parameter T is hiding the type T\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tstatic void foo(X x) {\\n\" + ", "+\t\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tx.<Exception>bar(null);\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The method bar(Exception) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tX<R> xr = new X<R>(){  \\n\" + ", "+\t\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\t\"The type new X<R>(){} must implement the inherited abstract method X<R>.bar(T)\\n\" + ", "+\t\t\t\t\"----------\\n\");\t\t"]}], "num": 34006}
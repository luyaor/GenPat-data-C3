{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "301795db61531f0d9e6f1eeebb2ab319", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aee4aace17122145030b060248f5377", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t\t\tqualification.implicitWidening(qTb, qTb);", "+\t\t\t\t\tqualification.computeConversion(scope, qTb, qTb);", "-", "+\t\t\t// resolve type arguments (for generic constructor call)", "+\t\t\tif (this.typeArguments != null) {", "+\t\t\t\tint length = this.typeArguments.length;", "+\t\t\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\t\t\tthis.genericTypeArguments = new TypeBinding[length];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif ((this.genericTypeArguments[i] = this.typeArguments[i].resolveType(scope)) == null) {", "+\t\t\t\t\t\targHasError = true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (argHasError) {", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t", "-", "-\t\t\t\t// see for user-implicit widening conversion ", "-\t\t\t\tif (arguments != null) {", "-\t\t\t\t\tint length = arguments.length;", "-\t\t\t\t\tTypeBinding[] paramTypes = binding.parameters;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\targuments[i].implicitWidening(paramTypes[i], argumentTypes[i]);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (argsContainCast) {", "-\t\t\t\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, receiverType, binding, this.arguments, argumentTypes, this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tif (this.arguments != null)", "+\t\t\t\t\tcheckInvocationArguments(scope, null, receiverType, binding, this.arguments, argumentTypes, argsContainCast, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d99d72ec3877930c140cea393fe5ed1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t// resolve type arguments (for generic constructor call)", "+\t\tif (this.typeArguments != null) {", "+\t\t\tint length = this.typeArguments.length;", "+\t\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\t\tthis.genericTypeArguments = new TypeBinding[length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tif ((this.genericTypeArguments[i] = this.typeArguments[i].resolveType(scope)) == null) {", "+\t\t\t\t\targHasError = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (argHasError) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif ((this.resolvedType.tagBits & TagBits.HasWildcard) != 0) {", "+\t\t    scope.problemReporter().cannotInstantiateWithWildcards(type, (ParameterizedTypeBinding)this.resolvedType);", "+\t\t    return this.resolvedType;", "+\t\t}", "-\t\tif (!(binding = scope.getConstructor(allocationType, argumentTypes, this))", "-\t\t\t.isValidBinding()) {", "+\t\tif (!(binding = scope.getConstructor(allocationType, argumentTypes, this)).isValidBinding()) {", "-", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "-\t\t\t}", "-\t\t\tif (argsContainCast) {", "-\t\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, allocationType, binding, this.arguments, argumentTypes, this);", "-\t\t\t}", "-\t\t}", "+\t\tif (this.arguments != null)", "+\t\t\tcheckInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this);"]}], "num": 31835}
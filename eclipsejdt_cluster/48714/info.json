{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f266b0ff386c8867ba33efe734c944e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "008b0b7c1e2cf65b88c11894f3754542", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " protected void locateMatches(JavaProject javaProject, PotentialMatchSet matchSet) throws JavaModelException", "signatureAfterChange": " protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet) throws JavaModelException", "diff": ["-protected void locateMatches(JavaProject javaProject, PotentialMatchSet matchSet) throws JavaModelException {", "-\tPotentialMatch[] potentialMatches = matchSet.getPotentialMatches(javaProject.getPackageFragmentRoots());", "-\tfor (int index = 0, length = potentialMatches.length; index < length;) {", "+protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet) throws JavaModelException {", "+\tPossibleMatch[] possibleMatches = matchSet.getPossiblelMatches(javaProject.getPackageFragmentRoots());", "+\tfor (int index = 0, length = possibleMatches.length; index < length;) {", "-\t\tlocateMatches(javaProject, potentialMatches, index, max);", "+\t\tlocateMatches(javaProject, possibleMatches, index, max);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "874bafd2061333623bf7fea41d0c83f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected boolean createHierarchyResolver(IType focusType, PotentialMatch[] potentialMatches)", "signatureAfterChange": " protected boolean createHierarchyResolver(IType focusType, PossibleMatch[] possibleMatches)", "diff": ["-protected boolean createHierarchyResolver(IType focusType, PotentialMatch[] potentialMatches) {", "-\t// cache focus type if not a potential match", "+protected boolean createHierarchyResolver(IType focusType, PossibleMatch[] possibleMatches) {", "+\t// cache focus type if not a possible match", "-\tboolean isPotentialMatch = false;", "-\tfor (int i = 0, length = potentialMatches.length; i < length; i++) {", "-\t\tif (CharOperation.equals(potentialMatches[i].compoundName, compoundName)) {", "-\t\t\tisPotentialMatch = true;", "+\tboolean isPossibleMatch = false;", "+\tfor (int i = 0, length = possibleMatches.length; i < length; i++) {", "+\t\tif (CharOperation.equals(possibleMatches[i].compoundName, compoundName)) {", "+\t\t\tisPossibleMatch = true;", "-\tif (!isPotentialMatch) {", "+\tif (!isPossibleMatch) {"]}], "num": 48714}
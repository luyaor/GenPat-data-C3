{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04f19a0587ef6267461490df3d4654a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b826ef11295b204118b176221659049", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrame.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void addStackItem(TypeBinding binding)", "signatureAfterChange": " public void addStackItem(TypeBinding binding)", "diff": ["-\tthis.addStackItem(new VerificationTypeInfo(binding));", "+\tif (this.stackItems == null) {", "+\t\tthis.stackItems = new VerificationTypeInfo[1];", "+\t\tthis.stackItems[0] = new VerificationTypeInfo(binding);", "+\t\tthis.numberOfStackItems = 1;", "+\t} else {", "+\t\tfinal int length = this.stackItems.length;", "+\t\tif (this.numberOfStackItems == length) {", "+\t\t\tSystem.arraycopy(this.stackItems, 0, this.stackItems = new VerificationTypeInfo[length + 1], 0, length);", "+\t\t}", "+\t\tthis.stackItems[this.numberOfStackItems++] = new VerificationTypeInfo(binding);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be87dc7d55d015dc9b5b318ea13c5851", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8fd47ede750ba6005aab3e86ceccb03a6e16dba8", "commitAfterChange": "e0664fc441b4961f478c3f32edb809e211e609ac", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void adaptSelectedRegions()", "signatureAfterChange": " \tprivate void adaptRegions()", "diff": ["-\tprivate void adaptSelectedRegions() {", "+\tprivate void adaptRegions() {", "+\t\tthis.adaptedRegions = new Region[this.regions.length];", "-\t\t\t\t\t\tif (upperFound) {", "+\t\t\t\t\t\tif (upperFound && lowerBound == 0) {", "-\t\t\t\t\t\t\tif (lowerBound == 0  && editOffset + editLength < regionEnd) {", "+\t\t\t\t\t\t\tif (editOffset == regionEnd) { // matching edit found", "+\t\t\t\t\t\t\t\tlowerBound = regionEnd;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t} else if (editOffset + editLength < regionEnd) {", "-\t\t\t\t\t\t\t\tlowerBound = editOffset + editLength;", "-\t\t\t\t\t\t\t\tbreak; // found both bonds - leave the loop", "+\t\t\t\t\t\t\t\tlowerBound = editOffset + editLength; // upper and lower bounds found", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t// search for upper bound", "+\t\t\t\t\t\t\t// search for upper bound", "-\t\t\t\t\t\t\tif (this.edits[j+1].offset < offset) {", "+\t\t\t\t\t\t\tif (this.edits[j + 1].offset < offset) {", "-\t\t\t\t\t\t// store result if any", "-\t\t\t\t\t\tthis.regions[i] = new Region(upperBound , lowerBound - upperBound);", "+\t\t\t\t\t\tif (offset != upperBound || regionEnd != lowerBound) { // ensure we found a different region", "+\t\t\t\t\t\t\tthis.adaptedRegions[i] = new Region(upperBound,", "+\t\t\t\t\t\t\t\t\tlowerBound - upperBound);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// keep other unadaptable region", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.adaptedRegions[i] = this.regions[i];", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.adaptedRegions[i] = this.regions[i];", "+\t\t\t} else {", "+\t\t\t\tthis.adaptedRegions[i] = this.regions[i];"]}], "num": 36551}
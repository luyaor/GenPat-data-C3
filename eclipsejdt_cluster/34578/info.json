{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dba5bdffdddcd331b8385e998bb78359", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae555f3f3cd4562afbf8e232503df127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "3614fb7a931da6f7d6b963e79da43a1a287be280", "commitAfterChange": "f35ac795e031f468ed2702736c7462517694be67", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnitDeclaration unit, \t\tICompilationUnit unitElement,  \t\tchar[] contents, \t\tParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tHashMap problems, \t\tboolean creatingAST, \t\tint reconcileFlags, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnit unitElement,  \t\tSourceElementParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tHashMap problems, \t\tboolean creatingAST, \t\tint reconcileFlags, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\tCompilationUnitDeclaration unit,", "-\t\tICompilationUnit unitElement, ", "-\t\tchar[] contents,", "-\t\tParser parser,", "+\t\tCompilationUnit unitElement, ", "+\t\tSourceElementParser parser,", "+\t\t\tCompilationUnitDeclaration unit = null;", "-\t\t\t}", "-\t\t\tPackageFragment packageFragment = (PackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "-\t\t\tchar[][] expectedPackageName = null;", "-\t\t\tif (packageFragment != null){", "-\t\t\t\texpectedPackageName = Util.toCharArrays(packageFragment.names);", "-\t\t\t}", "-\t\t\tif (unit == null) {", "-\t\t\t\tunit = problemFinder.resolve(", "-\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\tcontents,", "-\t\t\t\t\t\texpectedPackageName,", "-\t\t\t\t\t\tunitElement.getPath().toString(),", "-\t\t\t\t\t\tunitElement),", "-\t\t\t\t\ttrue, // verify methods", "-\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\ttrue); // generate code", "+\t\t\t\ttry {", "+\t\t\t\t\tunit = parser.parseCompilationUnit(unitElement, true/*full parse*/);", "+\t\t\t\t\tproblemFinder.resolve(", "+\t\t\t\t\t\tunit,", "+\t\t\t\t\t\tunitElement,", "+\t\t\t\t\t\ttrue, // verify methods", "+\t\t\t\t\t\ttrue, // analyze code", "+\t\t\t\t\t\ttrue); // generate code", "+\t\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t\tproblemFinder.handleInternalException(e, unit);", "+\t\t\t\t}", "-\t\t\t\tproblemFinder.resolve(", "-\t\t\t\t\tunit,", "-\t\t\t\t\tnull, // no need for source", "-\t\t\t\t\ttrue, // verify methods", "-\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\ttrue); // generate code", "+\t\t\t\tunit = ", "+\t\t\t\t\tproblemFinder.resolve(", "+\t\t\t\t\t\tunitElement,", "+\t\t\t\t\t\ttrue, // verify methods", "+\t\t\t\t\t\ttrue, // analyze code", "+\t\t\t\t\t\ttrue); // generate code", "-\t\t\tmessage.append(contents);", "+\t\t\tmessage.append(unitElement.getSource());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f983b1e4014696f1e5c5112f38d2e82a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": "\r protected static char[] readTable(String filename) throws java.io.IOException", "signatureAfterChange": "\r protected static char[] readTable(String filename) throws java.io.IOException", "diff": ["-\tInputStream stream = Parser.class.getResourceAsStream(filename);\r", "+\tInputStream stream = new BufferedInputStream(Parser.class.getResourceAsStream(filename));\r", "-\r", "-\tByteArrayOutputStream os = new ByteArrayOutputStream(32000);\r", "-\t// the largest file is 30K\r", "-\tbyte[] buffer = new byte[10000];\r", "-\r", "-\tint streamLength = 0;\r", "-\tint lastReadSize = 0;\r", "-\twhile ((lastReadSize = stream.read(buffer)) > 0) {\r", "-\t\tstreamLength += lastReadSize;\r", "-\t\tos.write(buffer, 0, lastReadSize);\r", "+\tbyte[] bytes = null;\r", "+\ttry {\r", "+\t\tbytes = Util.getInputStreamAsByteArray(stream, -1);\r", "+\t} finally {\r", "+\t\ttry {\r", "+\t\t\tstream.close();\r", "+\t\t} catch (IOException e) {\r", "+\t\t}\r", "-\tbyte[] bytes = os.toByteArray();\r", "-\tstream.close();\r", "-\tif (streamLength % 2 != 0)\r", "+\tint length = bytes.length;\r", "+\tif (length % 2 != 0)\r", "-\tchar[] chars = new char[streamLength / 2];\r", "+\tchar[] chars = new char[length / 2];\r", "-\t\tif (i == streamLength)\r", "+\t\tif (i == length)\r"]}], "num": 34578}
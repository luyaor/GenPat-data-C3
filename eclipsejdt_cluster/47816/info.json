{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8501ce468aeaa1e15b6c52a017fef511", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d39c1ef48c7b602c5717b5d895484c90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "commitAfterChange": "cf0fc1d100d6a0dfa353e3125744fa10a50c8d3b", "methodNumberBeforeChange": 526, "methodNumberAfterChange": 526, "signatureBeforeChange": " public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType)", "signatureAfterChange": " public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType)", "diff": ["+\tint problemId = IProblem.RequiredNonNullButProvidedNull;", "+\tif (requiredType.isTypeVariable() && !requiredType.hasNullTypeAnnotations())", "+\t\tproblemId = IProblem.NullNotCompatibleToFreeTypeVariable;", "-\tint problemId = IProblem.RequiredNonNullButProvidedNull;", "-\t\targuments      = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, false)) };", "-\t\targumentsShort = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, true)) };", "+\t\tif (problemId == IProblem.NullNotCompatibleToFreeTypeVariable) {", "+\t\t\targuments      = new String[] { new String(requiredType.sourceName()) }; // don't show any bounds", "+\t\t\targumentsShort = new String[] { new String(requiredType.sourceName()) };", "+\t\t} else {", "+\t\t\targuments      = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, false)) };", "+\t\t\targumentsShort = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, true))  };\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fac5361229886a56d7ab6b3cc37acb5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "fb0020e27808c429f3f311a11ef0ea9ea04441aa", "commitAfterChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "methodNumberBeforeChange": 525, "methodNumberAfterChange": 525, "signatureBeforeChange": " public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType)", "signatureAfterChange": " public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType)", "diff": ["-\tString[] arguments = new String[] {", "-\t\t\tannotatedTypeName(requiredType, this.options.nonNullAnnotationName)", "-\t};", "-\tString[] argumentsShort = new String[] {", "-\t\t\tshortAnnotatedTypeName(requiredType, this.options.nonNullAnnotationName)", "-\t};", "+\tString[] arguments;", "+\tString[] argumentsShort;", "+\tif (this.options.sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\targuments      = new String[] { annotatedTypeName(requiredType, this.options.nonNullAnnotationName) };", "+\t\targumentsShort = new String[] { shortAnnotatedTypeName(requiredType, this.options.nonNullAnnotationName) };", "+\t} else {", "+\t\targuments      = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, false)) };", "+\t\targumentsShort = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, true)) };", "+\t}"]}], "num": 47816}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7528f98d89de38ed29fced0bdaef8c7d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13e4c9493ea3f97f1cd32aaff0a7646e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void test0062_method_call_isolation()", "signatureAfterChange": " public void test0062_method_call_isolation()", "diff": ["-\t// null analysis - method call", "-\tpublic void test0062_method_call_isolation() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo(Object o) {\\n\" + ", "-\t\t\t\t\"\t\t if (bar(o = null)) {\\n\" + ", "-\t\t\t\t\"\t\t   if (o == null) {/* empty */}\\n\" + // complain ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t boolean bar(Object o) {\\n\" + ", "-\t\t\t\t\"\t\t return true;\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tif (o == null) {/* empty */}\\n\" + ", "-\t\t\t\"\t    ^\\n\" + ", "-\t\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}\t\t", "+// null analysis - method call", "+public void test0062_method_call_isolation() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o) {\\n\" + ", "+\t\t\t\"    if (bar(o = null)) {\\n\" + ", "+\t\t\t\"      if (o == null) {/* empty */}\\n\" + // complain ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  boolean bar(Object o) {\\n\" + ", "+\t\t\t\"    return true;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) {/* empty */}\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d41aceea0f3f114710cbd3bbdd34df04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic void test0064_method_call_isolation()", "signatureAfterChange": " public void test0064_method_call_isolation()", "diff": ["-\t// null analysis - method call", "-\tpublic void test0064_method_call_isolation() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo(Object o) {\\n\" + ", "-\t\t\t\t\"\t\t if (bar(o = new Object())) {\\n\" + ", "-\t\t\t\t\"\t\t   if (o == null) {/* empty */}\\n\" + // complain ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t boolean bar(Object o) {\\n\" + ", "-\t\t\t\t\"\t\t return true;\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tif (o == null) {/* empty */}\\n\" + ", "-\t\t\t\"\t    ^\\n\" + ", "-\t\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}\t\t", "+// null analysis - method call", "+public void test0064_method_call_isolation() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o) {\\n\" + ", "+\t\t\t\"    if (bar(o = new Object())) {\\n\" + ", "+\t\t\t\"      if (o == null) {/* empty */}\\n\" + // complain ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  boolean bar(Object o) {\\n\" + ", "+\t\t\t\"    return true;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) {/* empty */}\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}   "]}], "num": 4137}
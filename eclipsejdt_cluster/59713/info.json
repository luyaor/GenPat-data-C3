{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13ce6da1cd70e38d6bec39a328818e67", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1387f5afcffb35677d3f71e5390eeaf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CharArrayCache.java", "commitBeforeChange": "e0325c6422f39f597d14dd4c27ecf43875108a27", "commitAfterChange": "f389464fbe74a4e5c3adfde8847a7200db37d80c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void rehash()", "signatureAfterChange": " private void rehash()", "diff": ["-\tCharArrayCache newHashtable = new CharArrayCache(keyTable.length * 2);", "-\tfor (int i = keyTable.length; --i >= 0;)", "-\t\tif (keyTable[i] != null)", "-\t\t\tnewHashtable.put(keyTable[i], valueTable[i]);", "+\tCharArrayCache newHashtable = new CharArrayCache(this.keyTable.length * 2);", "+\tfor (int i = this.keyTable.length; --i >= 0;)", "+\t\tif (this.keyTable[i] != null)", "+\t\t\tnewHashtable.put(this.keyTable[i], this.valueTable[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b439fad57104117d35bb4eb88a02e028", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "d3a9da1814717a2c18ee252440a7a4915c82ca4d", "commitAfterChange": "48f271f8e7253c61ab509c2c5bf9a6fc4c4c9724", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic int lineNumber(int position)", "signatureAfterChange": " \tpublic int lineNumber(int position)", "diff": ["-\t */", "-\tpublic int lineNumber(int position) {", "-\t\tint length = lineEndTable.length;", "-\t\tif (length == 0) {", "-\t\t\t// no line number info", "-\t\t\treturn 1;", "-\t\t}", "-\t\tint low = 0;", "-\t\tif (position <= lineEndTable[low]) {", "-\t\t\t// position illegal or before the first line delimiter", "-\t\t\treturn 1;", "-\t\t}", "-\t\t// assert position > lineEndTable[low+1]  && low == 0", "-\t\tint hi = length - 1;", "-\t\tif (position > lineEndTable[hi]) {", "-\t\t\t// position beyond the last line separator", "-\t\t\tif (position >= getStartPosition() + getLength()) {", "-\t\t\t\t// this is beyond the end of the source length", "-\t\t\t\treturn 1;", "-\t\t\t} else {", "-\t\t\t\treturn length + 1;", "-\t\t\t}", "-\t\t}", "-\t\t// assert lineEndTable[low]  < position <= lineEndTable[hi]", "-\t\t// && low == 0 && hi == length - 1 && low < hi", "-\t\t", "-\t\t// binary search line end table", "-\t\twhile (true) {", "-\t\t\t// invariant lineEndTable[low] < position <= lineEndTable[hi]", "-\t\t\t// && 0 <= low < hi <= length - 1", "-\t\t\t// reducing measure hi - low", "-\t\t\tif (low + 1 == hi) {", "-\t\t\t\t// assert lineEndTable[low] < position <= lineEndTable[low+1]", "-\t\t\t\t// position is on line low+1 (line number is low+2)", "-\t\t\t\treturn low + 2;", "-\t\t\t}", "-\t\t\t// assert hi - low >= 2, so average is truly in between", "-\t\t\tint mid = (low + hi) / 2;", "-\t\t\t// assert 0 <= low < mid < hi <= length - 1", "-\t\t\tif (position <= lineEndTable[mid]) {", "-\t\t\t\t// assert lineEndTable[low] < position <= lineEndTable[mid]", "-\t\t\t\t// && 0 <= low < mid < hi <= length - 1", "-\t\t\t\thi = mid;", "-\t\t\t} else {", "-\t\t\t\t// position > lineEndTable[mid]", "-\t\t\t\t// assert lineEndTable[mid] < position <= lineEndTable[hi]", "-\t\t\t\t// && 0 <= low < mid < hi <= length - 1", "-\t\t\t\tlow = mid;", "-\t\t\t}", "-\t\t\t// in both cases, invariant reachieved with reduced measure", "-\t\t}", "-\t}", "+\t */", "+\tpublic int lineNumber(int position) {", "+\t\tif (this.lineEndTable == null) return 1;", "+\t\tint length = this.lineEndTable.length;", "+\t\tif (length == 0) {", "+\t\t\t// no line number info", "+\t\t\treturn 1;", "+\t\t}", "+\t\tint low = 0;", "+\t\tif (position <= this.lineEndTable[low]) {", "+\t\t\t// position illegal or before the first line delimiter", "+\t\t\treturn 1;", "+\t\t}", "+\t\t// assert position > lineEndTable[low+1]  && low == 0", "+\t\tint hi = length - 1;", "+\t\tif (position > this.lineEndTable[hi]) {", "+\t\t\t// position beyond the last line separator", "+\t\t\tif (position >= getStartPosition() + getLength()) {", "+\t\t\t\t// this is beyond the end of the source length", "+\t\t\t\treturn 1;", "+\t\t\t} else {", "+\t\t\t\treturn length + 1;", "+\t\t\t}", "+\t\t}", "+\t\t// assert lineEndTable[low]  < position <= lineEndTable[hi]", "+\t\t// && low == 0 && hi == length - 1 && low < hi", "+\t\t", "+\t\t// binary search line end table", "+\t\twhile (true) {", "+\t\t\t// invariant lineEndTable[low] < position <= lineEndTable[hi]", "+\t\t\t// && 0 <= low < hi <= length - 1", "+\t\t\t// reducing measure hi - low", "+\t\t\tif (low + 1 == hi) {", "+\t\t\t\t// assert lineEndTable[low] < position <= lineEndTable[low+1]", "+\t\t\t\t// position is on line low+1 (line number is low+2)", "+\t\t\t\treturn low + 2;", "+\t\t\t}", "+\t\t\t// assert hi - low >= 2, so average is truly in between", "+\t\t\tint mid = (low + hi) / 2;", "+\t\t\t// assert 0 <= low < mid < hi <= length - 1", "+\t\t\tif (position <= this.lineEndTable[mid]) {", "+\t\t\t\t// assert lineEndTable[low] < position <= lineEndTable[mid]", "+\t\t\t\t// && 0 <= low < mid < hi <= length - 1", "+\t\t\t\thi = mid;", "+\t\t\t} else {", "+\t\t\t\t// position > lineEndTable[mid]", "+\t\t\t\t// assert lineEndTable[mid] < position <= lineEndTable[hi]", "+\t\t\t\t// && 0 <= low < mid < hi <= length - 1", "+\t\t\t\tlow = mid;", "+\t\t\t}", "+\t\t\t// in both cases, invariant reachieved with reduced measure", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee1e64e555c1d64e55096888f3123a84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ObjectCache.java", "commitBeforeChange": "e0325c6422f39f597d14dd4c27ecf43875108a27", "commitAfterChange": "f389464fbe74a4e5c3adfde8847a7200db37d80c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private void rehash()", "signatureAfterChange": " private void rehash()", "diff": ["-\tObjectCache newHashtable = new ObjectCache(keyTable.length * 2);", "-\tfor (int i = keyTable.length; --i >= 0;)", "-\t\tif (keyTable[i] != null)", "-\t\t\tnewHashtable.put(keyTable[i], valueTable[i]);", "+\tObjectCache newHashtable = new ObjectCache(this.keyTable.length * 2);", "+\tfor (int i = this.keyTable.length; --i >= 0;)", "+\t\tif (this.keyTable[i] != null)", "+\t\t\tnewHashtable.put(this.keyTable[i], this.valueTable[i]);"]}], "num": 59713}
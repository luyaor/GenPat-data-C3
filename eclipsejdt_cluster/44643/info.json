{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52117c4604602add9faf2449ac032231", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48c9f2a4d56cf60ce7bbf691413bbd3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\treturn null;\r", "+\t\t\treturn typeBinding;\r", "-\t\treturn null;\r", "+\t\treturn typeBinding;\r", "-\t\treturn null;\r", "+\t\treturn typeBinding;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a93a7e7bdffe740bec4ead2317f3d706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\treturn null;\r", "+\t\t\treturn typeBinding;\r", "-\t\treturn null;\r", "+\t\treturn typeBinding;\r", "-\t\treturn null;\r", "+\t\treturn typeBinding;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec17ebb2ac1914ec07f1e6da43669efa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\treturn null;\r", "+\t\t\treturn typeBinding;\r", "-\t\treturn null;\r", "+\t\treturn typeBinding;\r", "-\t\treturn null;\r", "+\t\treturn typeBinding;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0dfed25fe92dd268f7355a27906f79f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "673b7eda95cd26449992e862f0c63f2c612903a0", "commitAfterChange": "b04602938404af4f8569a399fb36a5018768a262", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["+}\r", "+public TypeBinding resolveType(BlockScope scope) {\r", "+\t// Propagate the type checking to the arguments, and check if the constructor is defined.\r", "+\tconstant = NotAConstant;\r", "+\tTypeBinding typeBinding = type.resolveType(scope); // will check for null after args are resolved\r", "-\tpublic TypeBinding resolveType(BlockScope scope) {\r", "-\t\t// Propagate the type checking to the arguments, and check if the constructor is defined.\r", "-\t\tconstant = NotAConstant;\r", "-\t\tTypeBinding typeBinding = type.resolveType(scope);\r", "-\t\t// will check for null after args are resolved\r", "+\t// buffering the arguments' types\r", "+\tTypeBinding[] argumentTypes = NoParameters;\r", "+\tif (arguments != null) {\r", "+\t\tboolean argHasError = false;\r", "+\t\tint length = arguments.length;\r", "+\t\targumentTypes = new TypeBinding[length];\r", "+\t\tfor (int i = 0; i < length; i++)\r", "+\t\t\tif ((argumentTypes[i] = arguments[i].resolveType(scope)) == null)\r", "+\t\t\t\targHasError = true;\r", "+\t\tif (argHasError)\r", "+\t\t\treturn typeBinding;\r", "+\t}\r", "+\tif (typeBinding == null)\r", "+\t\treturn null;\r", "-\t\t// buffering the arguments' types\r", "-\t\tTypeBinding[] argumentTypes = NoParameters;\r", "+\tif (!typeBinding.canBeInstantiated()) {\r", "+\t\tscope.problemReporter().cannotInstantiate(type, typeBinding);\r", "+\t\treturn typeBinding;\r", "+\t}\r", "+\tReferenceBinding allocatedType = (ReferenceBinding) typeBinding;\r", "+\tif (!(binding = scope.getConstructor(allocatedType, argumentTypes, this)).isValidBinding()) {\r", "+\t\tif (binding.declaringClass == null)\r", "+\t\t\tbinding.declaringClass = allocatedType;\r", "+\t\tscope.problemReporter().invalidConstructor(this, binding);\r", "+\t\treturn typeBinding;\r", "+\t}\r", "+\tif (isMethodUseDeprecated(binding, scope))\r", "+\t\tscope.problemReporter().deprecatedMethod(binding, this);\r", "+\r", "+\tif (arguments != null)\r", "+\t\tfor (int i = 0; i < arguments.length; i++)\r", "+\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);\r", "+\treturn allocatedType;\r", "+}\r", "-\t\t\tboolean argHasError = false;\r", "-\t\t\tint length = arguments.length;\r", "-\t\t\targumentTypes = new TypeBinding[length];\r", "-\t\t\tfor (int i = 0; i < length; i++)\r", "-\t\t\t\tif ((argumentTypes[i] = arguments[i].resolveType(scope)) == null)\r", "-\t\t\t\t\targHasError = true;\r", "-\t\t\tif (argHasError)\r", "-\t\t\t\treturn null;\r", "-\t\tif (typeBinding == null)\r", "-\t\t\treturn null;\r", "-\r", "-\t\tif (!typeBinding.canBeInstantiated()) {\r", "-\t\t\tscope.problemReporter().cannotInstantiate(type, typeBinding);\r", "-\t\t\treturn null;\r", "-\t\t}\r", "-\t\tReferenceBinding allocatedType = (ReferenceBinding) typeBinding;\r", "-\t\tif (!(binding = scope.getConstructor(allocatedType, argumentTypes, this))\r", "-\t\t\t.isValidBinding()) {\r", "-\t\t\tif (binding.declaringClass == null)\r", "-\t\t\t\tbinding.declaringClass = allocatedType;\r", "-\t\t\tscope.problemReporter().invalidConstructor(this, binding);\r", "-\t\t\treturn null;\r", "-\t\t}\r", "-\t\tif (isMethodUseDeprecated(binding, scope))\r", "-\t\t\tscope.problemReporter().deprecatedMethod(binding, this);\r", "-\r", "-\t\tif (arguments != null)\r", "-\t\t\tfor (int i = 0; i < arguments.length; i++)\r", "-\t\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);\r", "-\t\treturn allocatedType;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5ad35e2669b43e821fe31c8a2c1904a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\treturn null;\r", "+\t\t\treturn typeBinding;\r", "-\t\treturn null;\r", "+\t\treturn typeBinding;\r", "-\t\treturn null;\r", "+\t\treturn typeBinding;\r"]}], "num": 44643}
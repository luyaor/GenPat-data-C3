{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6ae65d1cb4e0f19b9764f69d2a566b5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "589247c8f3cd9aeeabfb96a39dd38541", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "80ce338cef4ec1df54f1a30ce29ab099e3941f07", "commitAfterChange": "1f9df748d4bc9871ec3d99f4082748f0affb3af0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void buildFields()", "signatureAfterChange": " \t \tprivate void buildFields()", "diff": ["+\t\tSourceTypeBinding sourceType = referenceContext.binding;\t\t", "-\t\t\treferenceContext.binding.setFields(Binding.NO_FIELDS);", "+\t\t\tsourceType.setFields(Binding.NO_FIELDS);", "-\t\t\t\tif (referenceContext.binding.isInterface())", "-\t\t\t\t\tproblemReporter().interfaceCannotHaveInitializers(referenceContext.binding, field);", "+\t\t\t\tif (sourceType.isInterface())", "+\t\t\t\t\tproblemReporter().interfaceCannotHaveInitializers(sourceType, field);", "-\t\t\t\tFieldBinding fieldBinding = new FieldBinding(field, null, field.modifiers | ExtraCompilerModifiers.AccUnresolved, referenceContext.binding);", "+\t\t\t\tFieldBinding fieldBinding = new FieldBinding(field, null, field.modifiers | ExtraCompilerModifiers.AccUnresolved, sourceType);", "-\t\t\t\t\t\t\t\tproblemReporter().duplicateFieldInType(referenceContext.binding, previousField);", "+\t\t\t\t\t\t\t\tproblemReporter().duplicateFieldInType(sourceType, previousField);", "-\t\t\t\t\tproblemReporter().duplicateFieldInType(referenceContext.binding, field);", "+\t\t\t\t\tproblemReporter().duplicateFieldInType(sourceType, field);", "-\t\treferenceContext.binding.setFields(fieldBindings);", "+\t\tsourceType.tagBits &= ~(TagBits.AreFieldsSorted|TagBits.AreFieldsComplete); // in case some static imports reached already into this type\t\t", "+\t\tsourceType.setFields(fieldBindings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "618bcd87b3b72df314a8fd8e00570d78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "60105dfcc44d74dc319b1919727afc1b3907fff9", "commitAfterChange": "0747d5e7c6159c917fde8175fc9c67a8bade55fc", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void checkUnclosedCloseables(FlowInfo flowInfo, FlowContext flowContext, ASTNode location, BlockScope locationScope)", "signatureAfterChange": " public void checkUnclosedCloseables(FlowInfo flowInfo, FlowContext flowContext, ASTNode location, BlockScope locationScope)", "diff": ["-\tSet varSet = new HashSet(this.trackingVariables);", "-\tFakedTrackingVariable trackingVar;", "-\t// pick one outer-most variable from the set at a time", "-\twhile ((trackingVar = FakedTrackingVariable.pickVarForReporting(varSet, this, location != null)) != null) {", "+\t// iterate variables according to the priorities defined in FakedTrackingVariable.IteratorForReporting.Stage", "+\tIterator<FakedTrackingVariable> iterator = new FakedTrackingVariable.IteratorForReporting(this.trackingVariables, this, location != null);", "+\twhile (iterator.hasNext()) {", "+\t\tFakedTrackingVariable trackingVar = iterator.next();"]}], "num": 3384}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0659899d704b00ee24a07a85ef04298c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cb3decf2f7a704ebd277009b4ddaf08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void ambiguousArgumentToVarargsMethod(MethodBinding method, InvocationSite location)", "signatureAfterChange": " public void castArgumentToVarargsMethod(MethodBinding method, InvocationSite location)", "diff": ["-public void ambiguousArgumentToVarargsMethod(MethodBinding method, InvocationSite location) {", "-\tTypeBinding lastParam = method.parameters[method.parameters.length-1];", "-\tif (method.isConstructor()) {", "-\t\tthis.handle(", "-\t\t\tIProblem.AmbiguousArgumentToVarargsConstructor,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t} else {", "-\t\tthis.handle(", "-\t\t\tIProblem.AmbiguousArgumentToVarargsMethod,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t}", "-}", "+public void castArgumentToVarargsMethod(MethodBinding method, InvocationSite location) {", "+\tTypeBinding lastParam = method.parameters[method.parameters.length-1];", "+\tif (method.isConstructor()) {", "+\t\tthis.handle(", "+\t\t\tIProblem.CastArgumentToVarargsConstructor,", "+\t\t\tnew String[] {new String(method.declaringClass.readableName()), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "+\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t} else {", "+\t\tthis.handle(", "+\t\t\tIProblem.CastArgumentToVarargsMethod,", "+\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "+\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7e84fb2c6e9a46692fb4477b5145feb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "5abbc9ddba0809fbf49d16dc724883e6fc17121c", "commitAfterChange": "dff8c6a289a7b5116b7d5b64b00c639d5d108195", "methodNumberBeforeChange": 539, "methodNumberAfterChange": 539, "signatureBeforeChange": "  public void incompatibleReturnType(ReferenceExpression expression, MethodBinding method, TypeBinding returnType)", "signatureAfterChange": "  public void incompatibleReturnType(ReferenceExpression expression, MethodBinding method, TypeBinding returnType)", "diff": ["-\tStringBuffer buffer = new StringBuffer();", "-\tStringBuffer shortBuffer = new StringBuffer();", "-\tTypeBinding [] parameters = method.parameters;", "-\tfor (int i = 0, length = parameters.length; i < length; i++) {", "-\t\tif (i != 0) {", "-\t\t\tbuffer.append(\", \"); //$NON-NLS-1$", "-\t\t\tshortBuffer.append(\", \"); //$NON-NLS-1$", "+\tif (method.isConstructor()) {", "+\t\tthis.handle(IProblem.ConstructionTypeMismatch,", "+\t\t\t\tnew String[] { new String(method.declaringClass.readableName()), new String(returnType.readableName())},", "+\t\t\t\tnew String[] { new String(method.declaringClass.shortReadableName()), new String(returnType.shortReadableName())},", "+\t\t\t\texpression.sourceStart,", "+\t\t\t\texpression.sourceEnd);", "+\t\t", "+\t} else {", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tStringBuffer shortBuffer = new StringBuffer();", "+\t\tTypeBinding [] parameters = method.parameters;", "+\t\tfor (int i = 0, length = parameters.length; i < length; i++) {", "+\t\t\tif (i != 0) {", "+\t\t\t\tbuffer.append(\", \"); //$NON-NLS-1$", "+\t\t\t\tshortBuffer.append(\", \"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tbuffer.append(new String(parameters[i].readableName()));", "+\t\t\tshortBuffer.append(new String(parameters[i].shortReadableName()));", "-\t\tbuffer.append(new String(parameters[i].readableName()));", "-\t\tshortBuffer.append(new String(parameters[i].shortReadableName()));", "+\t\tString selector = new String(method.selector);", "+\t\tthis.handle(IProblem.IncompatibleMethodReference,", "+\t\t\t\tnew String[] { selector, buffer.toString(), new String(method.declaringClass.readableName()), new String(method.returnType.readableName()), new String(returnType.readableName())},", "+\t\t\t\tnew String[] { selector, shortBuffer.toString(), new String(method.declaringClass.shortReadableName()), new String(method.returnType.shortReadableName()), new String(returnType.shortReadableName())},", "+\t\t\t\texpression.sourceStart,", "+\t\t\t\texpression.sourceEnd);", "-\tString selector = new String(method.selector);", "-\tthis.handle(IProblem.IncompatibleMethodReference,", "-\t\t\tnew String[] { selector, buffer.toString(), new String(method.declaringClass.readableName()), new String(method.returnType.readableName()), new String(returnType.readableName())},", "-\t\t\tnew String[] { selector, shortBuffer.toString(), new String(method.declaringClass.shortReadableName()), new String(method.returnType.shortReadableName()), new String(returnType.shortReadableName())},", "-\t\t\texpression.sourceStart,", "-\t\t\texpression.sourceEnd);"]}], "num": 20581}
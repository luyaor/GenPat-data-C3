{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f21a24ce97303dc4b3dcfc10cc3f3022", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "368f0f5534b0adc657f7f263b5be6304", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tprivate void findMessageSends(\r \t\tchar[] token,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope)", "diff": ["-\t}\r", "-\tprivate void findMessageSends(\r", "-\t\tchar[] token,\r", "-\t\tTypeBinding[] argTypes,\r", "-\t\tScope scope,\r", "-\t\tInvocationSite invocationSite) {\r", "-\t\tif (token == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\tboolean staticsOnly = false;\r", "-\t\t// need to know if we're in a static context (or inside a constructor)\r", "-\t\tint tokenLength = token.length;\r", "-\t\tObjectVector methodsFound = new ObjectVector();\r", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (scope.kind) {\r", "-\t\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "-\t\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "-\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "-\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "-\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\tenclosingType,\r", "-\t\t\t\t\t\tclassScope,\r", "-\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\tstaticsOnly,\r", "-\t\t\t\t\t\ttrue,\r", "-\t\t\t\t\t\tinvocationSite);\r", "-\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\t\tbreak done;\r", "-\t\t\t}\r", "-\t\t\tscope = scope.parent;\r", "-\t\t}\r", "-\t}\r", "+}\r", "+private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope) {\r", "+\tif (token == null) return;\r", "+\r", "+\tboolean staticsOnly = false; // need to know if we're in a static context (or inside a constructor)\r", "+\tint tokenLength = token.length;\r", "+\tObjectVector methodsFound = new ObjectVector();\r", "+\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\tswitch (scope.kind) {\r", "+\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "+\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "+\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "+\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "+\t\t\t\tfindMethods(token, argTypes, enclosingType, classScope, methodsFound, staticsOnly, true);\r", "+\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\tbreak done;\r", "+\t\t}\r", "+\t\tscope = scope.parent;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdc0d3e0f9fcc9128dd04927dff2de6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2548efb91bb743c25fd3bab3833473b467f314a0", "commitAfterChange": "f4a6a4aada4b614e2acc0db0bdcfb1edac95da6d", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 131, "signatureBeforeChange": "  \tprivate void findImplicitMessageSends( \t\tchar[] token, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tObjectVector methodsFound)", "signatureAfterChange": " \tprivate void findImplicitMessageSends( \t\tchar[] token, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tObjectVector methodsFound)", "diff": ["+\tprivate void findImplicitMessageSends(", "+\t\tchar[] token,", "+\t\tTypeBinding[] argTypes,", "+\t\tScope scope,", "+\t\tInvocationSite invocationSite,", "+\t\tScope invocationScope,", "+\t\tObjectVector methodsFound) {", "+\t\tif (token == null)", "+\t\t\treturn;", "+", "+\t\tboolean staticsOnly = false;", "+\t\t// need to know if we're in a static context (or inside a constructor)", "+", "+\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found", "+", "+\t\t\tswitch (scope.kind) {", "+", "+\t\t\t\tcase Scope.METHOD_SCOPE :", "+\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)", "+\t\t\t\t\tMethodScope methodScope = (MethodScope) scope;", "+\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase Scope.CLASS_SCOPE :", "+\t\t\t\t\tClassScope classScope = (ClassScope) scope;", "+\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;", "+\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\tenclosingType,", "+\t\t\t\t\t\tclassScope,", "+\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\tstaticsOnly,", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t-1);", "+\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :", "+\t\t\t\t\tbreak done;", "+\t\t\t}", "+\t\t\tscope = scope.parent;", "+\t\t}", "+\t}", "-", "-\tprivate void findImplicitMessageSends(", "-\t\tchar[] token,", "-\t\tTypeBinding[] argTypes,", "-\t\tScope scope,", "-\t\tInvocationSite invocationSite,", "-\t\tScope invocationScope,", "-\t\tObjectVector methodsFound) {", "-", "-\t\tif (token == null)", "-\t\t\treturn;", "-", "-\t\tboolean staticsOnly = false;", "-\t\t// need to know if we're in a static context (or inside a constructor)", "-", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found", "-", "-\t\t\tswitch (scope.kind) {", "-", "-\t\t\t\tcase Scope.METHOD_SCOPE :", "-\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)", "-\t\t\t\t\tMethodScope methodScope = (MethodScope) scope;", "-\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase Scope.CLASS_SCOPE :", "-\t\t\t\t\tClassScope classScope = (ClassScope) scope;", "-\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;", "-\t\t\t\t\tfindMethods(", "-\t\t\t\t\t\ttoken,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\tenclosingType,", "-\t\t\t\t\t\tclassScope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tstaticsOnly,", "-\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\t-1,", "-\t\t\t\t\t\t-1);", "-\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :", "-\t\t\t\t\tbreak done;", "-\t\t\t}", "-\t\t\tscope = scope.parent;", "-\t\t}"]}], "num": 69363}
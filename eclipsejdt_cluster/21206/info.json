{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb258177c8b55d494b2d69343b903d6c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2132f210bb2e69523162608e1e803b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "4b460199498c48cda44ce10125aa5901a10bff62", "commitAfterChange": "ccd12469d7fc21a8e1a0a597451a059df56002ad", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "signatureAfterChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "diff": ["-\t\tthis.compilationUnits = compilationUnits;", "-\t\tthis.diagnosticListener = diagnosticListener;", "-\t\tif (fileManager != null) {", "-\t\t\tthis.fileManager = fileManager;", "+\t\tfinal Thread currentThread = Thread.currentThread();", "+\t\tEclipseCompilerImpl eclipseCompiler = this.threadCache.get(currentThread);", "+\t\tif (eclipseCompiler == null) {", "+\t\t\teclipseCompiler = new EclipseCompilerImpl(writerOut, writerErr, false);", "+\t\t\tthis.threadCache.put(currentThread, eclipseCompiler);", "-\t\t\tthis.fileManager = this.getStandardFileManager(diagnosticListener, null, null);", "+\t\t\teclipseCompiler.initialize(writerOut, writerErr, false, null);", "+\t\t}", "+\t\tfinal EclipseCompilerImpl eclipseCompiler2 = new EclipseCompilerImpl(writerOut, writerErr, false);", "+\t\teclipseCompiler2.compilationUnits = compilationUnits;", "+\t\teclipseCompiler2.diagnosticListener = diagnosticListener;", "+\t\tif (fileManager != null) {", "+\t\t\teclipseCompiler2.fileManager = fileManager;", "+\t\t} else {", "+\t\t\teclipseCompiler2.fileManager = this.getStandardFileManager(diagnosticListener, null, null);", "-\t\tinitialize(writerOut, writerErr, false);", "-\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "-\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "-\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\teclipseCompiler2.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\teclipseCompiler2.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "+\t\teclipseCompiler2.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "-\t\t\t\tthis.fileManager.handleOption(iterator.next(), iterator);", "+\t\t\t\teclipseCompiler2.fileManager.handleOption(iterator.next(), iterator);", "-\t\t\tthis.configure(optionsToProcess);", "+\t\t\teclipseCompiler2.configure(optionsToProcess);", "-\t\tif (this.fileManager instanceof StandardJavaFileManager) {", "-\t\t\tStandardJavaFileManager javaFileManager = (StandardJavaFileManager) this.fileManager;", "+\t\tif (eclipseCompiler2.fileManager instanceof StandardJavaFileManager) {", "+\t\t\tStandardJavaFileManager javaFileManager = (StandardJavaFileManager) eclipseCompiler2.fileManager;", "-\t\t\t\tthis.setDestinationPath(location.iterator().next().getAbsolutePath());", "+\t\t\t\teclipseCompiler2.setDestinationPath(location.iterator().next().getAbsolutePath());", "-\t\t\t\tBoolean value = EclipseCompiler.this.call() ? Boolean.TRUE : Boolean.FALSE;", "+\t\t\t\tBoolean value = eclipseCompiler2.call() ? Boolean.TRUE : Boolean.FALSE;", "-\t\t\t\tEclipseCompiler.this.setLocale(locale);", "+\t\t\t\teclipseCompiler2.setLocale(locale);", "-\t\t\t\tEclipseCompiler.this.processors = processors2;", "+\t\t\t\teclipseCompiler2.processors = processors2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d66fe2f04e327fca7d84c1cb94d0abfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/CompilerAptTests.java", "commitBeforeChange": "57effdfbf8500b1bf7932afcc270c4183c0fd5bb", "commitAfterChange": "aeba50ed8bce5da37b3a88a633f33265f2c2db1c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate void compileOneClass(JavaCompiler compiler)", "signatureAfterChange": " \tprivate void compileOneClass(JavaCompiler compiler, File inputFile, List<String> options)", "diff": ["-\t */", "-\tprivate void compileOneClass(JavaCompiler compiler) {", "-\t\tStandardJavaFileManager manager = compiler.getStandardFileManager(null, Locale.getDefault(), Charset.defaultCharset());", "-\t\tForwardingJavaFileManager<StandardJavaFileManager> forwardingJavaFileManager = getForwardingFileManager(manager);", "-", "-\t\t// create new list containing inputfile", "-\t\tList<File> files = new ArrayList<File>();", "-\t\tfiles.add(inputFile);", "-\t\tIterable<? extends JavaFileObject> units = manager.getJavaFileObjectsFromFiles(files);", "-\t\tStringWriter stringWriter = new StringWriter();", "-\t\tPrintWriter printWriter = new PrintWriter(stringWriter);", "-\t\t", "-\t\tif (compiler == _eclipseCompiler) {", "-\t\t\toptions.add(\"-6.0\"); // not the default for Eclipse compiler", "-\t\t}", "-\t\toptions.add(\"-d\");", "-\t\toptions.add(_tmpBinFolderName);", "-\t\toptions.add(\"-s\");", "-\t\toptions.add(_tmpGenFolderName);", "-\t\toptions.add(\"-cp\");", "-\t\toptions.add(_tmpSrcFolderName + File.pathSeparator + _tmpGenFolderName + File.pathSeparator + _processorJarName);", "-\t\toptions.add(\"-XprintRounds\");", "- \t\tCompilationTask task = compiler.getTask(printWriter, forwardingJavaFileManager, null, options, null, units);", "-\t\tBoolean result = task.call();", "- \t\tif (!result.booleanValue()) {", "- \t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "- \t \t\tassertTrue(\"Compilation failed \", false);", "- \t\t}", "+\t */", "+\tprivate void compileOneClass(JavaCompiler compiler, File inputFile, List<String> options) {", "+\t\tStandardJavaFileManager manager = compiler.getStandardFileManager(null, Locale.getDefault(), Charset.defaultCharset());", "+\t\tForwardingJavaFileManager<StandardJavaFileManager> forwardingJavaFileManager = getForwardingFileManager(manager);", "+\t", "+\t\t", "+\t\t// create new list containing inputfile", "+\t\tList<File> files = new ArrayList<File>();", "+\t\tfiles.add(inputFile);", "+\t\tIterable<? extends JavaFileObject> units = manager.getJavaFileObjectsFromFiles(files);", "+\t\tStringWriter stringWriter = new StringWriter();", "+\t\tPrintWriter printWriter = new PrintWriter(stringWriter);", "+\t\t", "+\t\tif (compiler == _eclipseCompiler) {", "+\t\t\toptions.add(\"-6.0\"); // not the default for Eclipse compiler", "+\t\t}", "+\t\toptions.add(\"-d\");", "+\t\toptions.add(_tmpBinFolderName);", "+\t\toptions.add(\"-s\");", "+\t\toptions.add(_tmpGenFolderName);", "+\t\toptions.add(\"-cp\");", "+\t\toptions.add(_tmpSrcFolderName + File.pathSeparator + _tmpGenFolderName + File.pathSeparator + _processorJarName);", "+\t\toptions.add(\"-XprintRounds\");", "+\t\tCompilationTask task = compiler.getTask(printWriter, forwardingJavaFileManager, null, options, null, units);", "+\t\tBoolean result = task.call();", "+\t\t", "+\t\tif (!result.booleanValue()) {", "+\t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "+\t \t\tassertTrue(\"Compilation failed \", false);", "+\t\t}", "+\t}"]}], "num": 21206}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bc0305611389a3e4be16f1f8648decd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "695c039bb52b172387c61b2058b8aa61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "5333a8d6e234b4d5bbcbee365cfa39aafade1032", "commitAfterChange": "9d00e6aaf0f2f4598b676da2bb31ba68b6d40cc8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t} else {", "+\t\t\t// for resource analysis we need the finallyInfo in these nested scopes:", "+\t\t\tFlowInfo finallyInfo = subInfo.copy();", "+\t\t\tthis.tryBlock.scope.finallyInfo = finallyInfo;", "+\t\t\tif (this.catchBlocks != null) {", "+\t\t\t\tfor (int i = 0; i < this.catchBlocks.length; i++)", "+\t\t\t\t\tthis.catchBlocks[i].scope.finallyInfo = finallyInfo;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd54253b677b7df8e34dd39c5b718869", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "589f6f354433243a559cfee0f9641e3e2af4d62f", "commitAfterChange": "078478e8a765943e089111dd6dddc420a7546230", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void indexAll(IProject project)", "signatureAfterChange": " public void indexAll(IProject project)", "diff": ["-\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\tIJavaProject javaProject = ((JavaModel) model).getJavaProject(project);\t", "+\t\tJavaModel model = (JavaModel) JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\tIJavaProject javaProject = model.getJavaProject(project);\t", "-\t}\t", "-\tthis.request(new IndexAllProject(project, this));", "+\t}", "+", "+\t// check if the same request is not already in the queue", "+\tIndexRequest request = new IndexAllProject(project, this);", "+\tfor (int i = this.jobEnd; i >= this.jobStart; i--)", "+\t\tif (request.equals(this.awaitingJobs[i])) return;", "+\tthis.request(request);"]}], "num": 21131}
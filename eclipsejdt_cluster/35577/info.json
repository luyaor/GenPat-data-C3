{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4758d6f271c719aed20857da32ee4852", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abd29885d75a8059dcc5e9c82744386d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void test0093() throws JavaModelException", "signatureAfterChange": " \tpublic void test0093() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"public class Test {\\n\" +", "-\t\t\t\t\"    public <U> Test(U u) {\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"    void bar() {\\n\" +", "-\t\t\t\t\"        new <String> Test(null) {};\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/Test.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tnode = getASTNode(compilationUnit, 0, 1, 0);", "-\t\t\tassertEquals(\"Not an expression statement\", ASTNode.EXPRESSION_STATEMENT, node.getNodeType());", "-\t\t\tExpressionStatement statement = (ExpressionStatement) node;", "-\t\t\tExpression expression = statement.getExpression();", "-\t\t\tcheckSourceRange(expression, \"new <String> Test(null) {}\", contents.toCharArray());", "-\t\t\tITypeBinding typeBinding = expression.resolveTypeBinding();", "-\t\t\tIJavaElement element = typeBinding.getJavaElement();", "-\t\t\tassertNotNull(\"No java element\", element);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"public class Test {\\n\" +", "+\t\t\t\"    public <U> Test(U u) {\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"    void bar() {\\n\" +", "+\t\t\t\"        new <String> Test(null) {};\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/Test.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tnode = getASTNode(compilationUnit, 0, 1, 0);", "+\t\tassertEquals(\"Not an expression statement\", ASTNode.EXPRESSION_STATEMENT, node.getNodeType());", "+\t\tExpressionStatement statement = (ExpressionStatement) node;", "+\t\tExpression expression = statement.getExpression();", "+\t\tcheckSourceRange(expression, \"new <String> Test(null) {}\", contents.toCharArray());", "+\t\tITypeBinding typeBinding = expression.resolveTypeBinding();", "+\t\tIJavaElement element = typeBinding.getJavaElement();", "+\t\tassertNotNull(\"No java element\", element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6e69bb3e089e465f59f2bcd64bcfc85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 112, "signatureBeforeChange": " \tpublic void test0101() throws JavaModelException", "signatureAfterChange": " \tpublic void test0101() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"public class X{\\n\" +", "-\t\t\t\t\"\tpublic void foo() {\\n\" +", "-\t\t\t\t\"\t\tassert (true): (\\\"hello\\\");\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0, 0);", "-\t\t\tassertEquals(\"Not an assert statement\", ASTNode.ASSERT_STATEMENT, node.getNodeType());", "-\t\t\tAssertStatement assertStatement = (AssertStatement) node;", "-\t\t\tfinal char[] source = contents.toCharArray();", "-\t\t\tcheckSourceRange(assertStatement.getExpression(), \"(true)\", source);", "-\t\t\tcheckSourceRange(assertStatement.getMessage(), \"(\\\"hello\\\")\", source);", "-\t\t\tcheckSourceRange(assertStatement, \"assert (true): (\\\"hello\\\");\", source);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"public class X{\\n\" +", "+\t\t\t\"\tpublic void foo() {\\n\" +", "+\t\t\t\"\t\tassert (true): (\\\"hello\\\");\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0, 0, 0);", "+\t\tassertEquals(\"Not an assert statement\", ASTNode.ASSERT_STATEMENT, node.getNodeType());", "+\t\tAssertStatement assertStatement = (AssertStatement) node;", "+\t\tfinal char[] source = contents.toCharArray();", "+\t\tcheckSourceRange(assertStatement.getExpression(), \"(true)\", source);", "+\t\tcheckSourceRange(assertStatement.getMessage(), \"(\\\"hello\\\")\", source);", "+\t\tcheckSourceRange(assertStatement, \"assert (true): (\\\"hello\\\");\", source);"]}], "num": 35577}
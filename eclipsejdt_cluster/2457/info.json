{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e42a2789d83f9f1c6238a18557737b6b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7b4727507e6f304f486c65d43f69b17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "f7c2ed5ecce3841921f761b0b104d350042f786e", "commitAfterChange": "132971f23d5ad724e7abdb8444fe685456f8fc05", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test015()", "signatureAfterChange": " public void test015()", "diff": ["-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method run(int)\\n\" + ", "-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method run(int, String)\\n\" + ", "-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method run(int, String)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cba48d1c5c0ae4c6897da21ea8970611", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "1a542c460a449efbae14d1057ba233825602248d", "commitAfterChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["+\t\t", "+\t\tif (this.relation == POTENTIALLY_COMPATIBLE) {", "+\t\t\t/* 15.12.2.1: ... The definition of potential applicability goes beyond a basic arity check to also take into account the presence and \"shape\" of functional interface ", "+\t\t\t   target types. In some cases involving type argument inference, a lambda expression appearing as a method invocation argument cannot be properly typed until after ", "+\t\t\t   overload resolution. These rules allow the form of the lambda expression to still be taken into account, discarding obviously incorrect target types that might ", "+\t\t\t   otherwise cause ambiguity errors.", "+\t\t\t*/", "+\t\t\t", "+\t\t\treturn  this.left.isPotentiallyCompatibleWith(this.right, inferenceContext.scope) ? TRUE: FALSE;", "+\t\t}", "+\t"]}], "num": 2457}
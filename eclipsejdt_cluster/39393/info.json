{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a562b37708408a1c16c932556f2c222a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23dbd4caadef1ea6c9b56ef24ceeb8f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "5f85e7ad56b4ff0557c2bf2c999084f9107f0617", "commitAfterChange": "0a4aef6498056b8c56c187a24a4c92d14d399d01", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": "\r protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\t} else if (reference instanceof ArrayTypeReference) {\r", "+\t\tthis.matchReportReference((ArrayTypeReference)reference, element, accuracy, locator);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "842ba49870993eab9cbba84a487539e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal int packageMatchRule,  \t\tfinal char[] typeName, \t\tfinal int typeMatchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal int packageMatchRule,  \t\tfinal char[] typeName, \t\tfinal int typeMatchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\t\tICompilationUnit workingCopy = copies[i];", "+\t\t\t\t\tfinal ICompilationUnit workingCopy = copies[i];", "-\t\t\t\t\t\t\t\tnameRequestor.acceptType(type.getFlags(), packageDeclaration, simpleName, enclosingTypeNames, path, null);", "+\t\t\t\t\t\t\t\tif (nameRequestor instanceof TypeNameMatchRequestorWrapper) {", "+\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new TypeNameMatch(type));", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(type.getFlags(), packageDeclaration, simpleName, enclosingTypeNames, path, null);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(typeDeclaration.modifiers, packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "+\t\t\t\t\t\t\t\t\t\tif (nameRequestor instanceof TypeNameMatchRequestorWrapper) {", "+\t\t\t\t\t\t\t\t\t\t\tIType type = workingCopy.getType(new String(typeName));", "+\t\t\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new TypeNameMatch(type, typeDeclaration.modifiers));", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(typeDeclaration.modifiers, packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(memberTypeDeclaration.modifiers, packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "+\t\t\t\t\t\t\t\t\t\tif (nameRequestor instanceof TypeNameMatchRequestorWrapper) {", "+\t\t\t\t\t\t\t\t\t\t\tIType type = workingCopy.getType(new String(enclosingTypeNames[0]));", "+\t\t\t\t\t\t\t\t\t\t\tfor (int j=1, l=enclosingTypeNames.length; j<l; j++) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttype = type.getType(new String(enclosingTypeNames[j]));", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new TypeNameMatch(type, 0));", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(memberTypeDeclaration.modifiers, packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "+\t\t\t\t\t\t\t\t\t\t}"]}], "num": 39393}
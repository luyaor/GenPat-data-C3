{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a799a0eca3fa4fd131861ae9fbf97b40", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b9c5f132c5c2bcf32921b5c943be391", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b371452cfc86edadd09f0bc9f3e25611ca4d4268", "commitAfterChange": "108cd17345619c887ab9a0af6e6482c84a0cbd69", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\t \t \tpublic MethodBinding findMethod0(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": "\t \t \tpublic MethodBinding findMethod0(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, compatibleMethod);", "+\t\t\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, new MethodBinding [] {compatibleMethod});", "+\t\t", "-\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "+\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, new MethodBinding [] { candidates[0] });", "-", "-\t\tMethodBinding mostSpecificMethod = mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite, receiverType);", "-\t\tif (searchForDefaultAbstractMethod) { // search interfaces for a better match", "-\t\t\tif (mostSpecificMethod.isValidBinding())", "-\t\t\t\t// see if there is a better match in the interfaces - see AutoBoxingTest 99, LookupTest#81", "-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, mostSpecificMethod);", "-\t\t\t// see if there is a match in the interfaces - see LookupTest#84", "-\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding() /* else return the same error as before */)", "-\t\t\t\treturn interfaceMethod;", "-\t\t}", "-\t\treturn mostSpecificMethod;", "+\t\tif (visiblesCount != candidates.length)", "+\t\t\tSystem.arraycopy(candidates, 0, candidates = new MethodBinding[visiblesCount], 0, visiblesCount);", "+\t\treturn searchForDefaultAbstractMethod ? findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates)", "+\t\t\t\t\t\t\t\t\t\t\t  : mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite, receiverType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66e92cef8879e0b190f4ae9b82b3ef80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "2c216d62729c7bf0a533819d86bda0a688a39a26", "commitAfterChange": "789f8ee3dc78aa2cb74e4e857fb2da09cf6b5b4e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\tif (visiblesCount == 1) {", "-\t\t\t\tif (searchForDefaultAbstractMethod)", "-\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "-\t\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);", "-\t\t\t\treturn candidates[0];", "-\t\t\t}", "-\t\t\tif (visiblesCount == 0) {", "-\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "-\t\t\t\treturn new ProblemMethodBinding(candidates[0], candidates[0].selector, candidates[0].parameters, ProblemReasons.NotVisible);", "+\t\t\tswitch (visiblesCount) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tMethodBinding interfaceMethod =", "+\t\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "+\t\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "+\t\t\t\t\treturn new ProblemMethodBinding(candidates[0], candidates[0].selector, candidates[0].parameters, ProblemReasons.NotVisible);", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tif (searchForDefaultAbstractMethod)", "+\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "+\t\t\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);", "+\t\t\t\t\treturn candidates[0];", "+\t\t\t\tdefault :", "+\t\t\t\t\tbreak;", "-\t\t\t\tMethodBinding current = candidates[i];", "-\t\t\t\tif (current instanceof ParameterizedGenericMethodBinding)", "-\t\t\t\t\tcurrent = ((ParameterizedGenericMethodBinding) current).originalMethod;", "-\t\t\t\tif (current instanceof ParameterizedMethodBinding)", "-\t\t\t\t\tfor (int j = i + 1; j < visiblesCount; j++)", "-\t\t\t\t\t\tif (current.declaringClass == candidates[j].declaringClass && current.areParametersEqual(candidates[j]))", "+\t\t\t\tMethodBinding candidate = candidates[i];", "+\t\t\t\tif (candidate instanceof ParameterizedGenericMethodBinding)", "+\t\t\t\t\tcandidate = ((ParameterizedGenericMethodBinding) candidate).originalMethod;", "+\t\t\t\tif (candidate instanceof ParameterizedMethodBinding)", "+\t\t\t\t\tfor (int j = i + 1; j < visiblesCount; j++) {", "+\t\t\t\t\t\tMethodBinding otherCandidate = candidates[j];", "+\t\t\t\t\t\tif (otherCandidate == candidate ", "+\t\t\t\t\t\t\t\t|| (candidate.declaringClass == otherCandidate.declaringClass && candidate.areParametersEqual(otherCandidate))) {", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 69106}
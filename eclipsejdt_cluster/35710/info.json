{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02ba636ab3e2001f14aea3e523882dde", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ebacb9c31f525c7f6f9d82f2819b6f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["-\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.BooleanBinding);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BOOLEAN);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.BooleanBinding);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BOOLEAN);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "-\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.SHORT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.INT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.LONG);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.FLOAT);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.DOUBLE);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.CHAR);", "+\t\t\t\t\t\taddExpectedType(TypeBinding.BYTE);", "-\t\t\taddExpectedType(BaseTypes.ShortBinding);", "-\t\t\taddExpectedType(BaseTypes.IntBinding);", "-\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\taddExpectedType(TypeBinding.SHORT);", "+\t\t\taddExpectedType(TypeBinding.INT);", "+\t\t\taddExpectedType(TypeBinding.LONG);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8704ae3910935ae8c015ca340886436a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e73037ff248454bfb7965c3990814d5ef5cb4620", "commitAfterChange": "cafb328a42240bc62f70f6b130384a29f0e8d16a", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "diff": ["+\t\t} else if(parent instanceof OperatorExpression) {", "+\t\t\tint operator = (parent.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT;", "+\t\t\tif(parent instanceof ConditionalExpression) {", "+\t\t\t\t// for future use", "+\t\t\t} else if(parent instanceof InstanceOfExpression) {", "+\t\t\t\tInstanceOfExpression e = (InstanceOfExpression) parent;", "+\t\t\t\tTypeBinding binding = e.expression.resolvedType;", "+\t\t\t\tif(binding != null){", "+\t\t\t\t\taddExpectedType(binding);", "+\t\t\t\t\texpectedTypesFilter = SUBTYPE | SUPERTYPE;", "+\t\t\t\t}", "+\t\t\t} else if(parent instanceof BinaryExpression) {", "+\t\t\t\tswitch(operator) {", "+\t\t\t\t\tcase OperatorIds.PLUS :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\taddExpectedType(scope.getJavaLangString());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.AND_AND :", "+\t\t\t\t\tcase OperatorIds.OR_OR :", "+\t\t\t\t\tcase OperatorIds.XOR :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.BooleanBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t} else if(parent instanceof UnaryExpression) {", "+\t\t\t\tswitch(operator) {", "+\t\t\t\t\tcase OperatorIds.NOT :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.BooleanBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.TWIDDLE :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.PLUS :", "+\t\t\t\t\tcase OperatorIds.MINUS :", "+\t\t\t\t\tcase OperatorIds.PLUS_PLUS :", "+\t\t\t\t\tcase OperatorIds.MINUS_MINUS :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 35710}
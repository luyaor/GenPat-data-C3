{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5047ec8b1af048e7f87da1d571210e0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04bc31ac33d7a547e5d00626bfc20d4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void test102()", "signatureAfterChange": " \tpublic void test102()", "diff": ["+\t        \"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tSet<SomeEnum> set1 = EnumSet.of(SomeEnum.A);\\n\" + ", "+\t\t\t\"\t                     ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tSet<SomeEnum> set2 = EnumSet.of(SomeEnum.foo());\\n\" + ", "+\t\t\t\"\t                     ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"\tclass Bar extends Foo {\\n\" + ", "+\t\t\t\"\t                  ^^^\\n\" + ", "+\t\t\t\"Type safety: Foo is a raw type. References to generic type Foo<U> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04f465623cd75880cab20da8e95047f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["+\t\t\t\"\t                                                      ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tabstract class Y<S> implements X<S> { public abstract X[] x(); }\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X[] x(); }\\n\" + ", "+\t\t\t\"\t                                                ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f08e9847fdfaa2c9085868e35241ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 464, "methodNumberAfterChange": 464, "signatureBeforeChange": " \tpublic void test460()", "signatureAfterChange": " \tpublic void test460()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tClass<? extends Collection> c = param.getClass(); // ok\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tClass<? extends Collection> d = getClazz(); // ko\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\t\"\tClass<? extends Collection> c = getClass(); // ok\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35db5c8481e6ccba0e3ad9c6749a9e98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 726, "methodNumberAfterChange": 726, "signatureBeforeChange": " public void test720()", "signatureAfterChange": " public void test720()", "diff": ["-\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tinterface Baz extends Bar, Foo {}\\n\" + ", "+\t\t\"\t                           ^^^\\n\" + ", "+\t\t\"Type safety: Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tclass XSuper implements Foo {}\\n\" + ", "+\t\t\"\t                        ^^^\\n\" + ", "+\t\t\"Type safety: Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tpublic class X implements Bar, Foo {}\\n\" + ", "+\t\t\"\t                               ^^^\\n\" + ", "+\t\t\"Type safety: Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "762f40eac68a008531e9686147b72fbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1bf30b93f1c2f17c02d0cecfa43e877f00d01800", "commitAfterChange": "7cddbfa7d184b903e6606f21236d46be8958fe44", "methodNumberBeforeChange": 351, "methodNumberAfterChange": 351, "signatureBeforeChange": " public void test200()", "signatureAfterChange": " public void test200()", "diff": ["-\tString compliance = (String) options.get(JavaCore.COMPILER_COMPLIANCE);", "-\tString errorMessage = compliance == JavaCore.VERSION_1_6 ?", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(Collection) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "-\t\t\t\"\t        ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tdouble foo(Collection<String> bar) {return 0; }\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(Collection<String>) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" :", "+\tString errorMessage ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebce2ae98fe1d1768121d5179b9a86e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 295, "methodNumberAfterChange": 295, "signatureBeforeChange": " \tpublic void test291()", "signatureAfterChange": " \tpublic void test291()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X <T extends Iterable>{\\n\" + ", "+\t\t\t\"\t                          ^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Iterable is a raw type. References to generic type Iterable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass MX<U extends Iterable> {\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Iterable is a raw type. References to generic type Iterable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tSX(X x){\\n\" + ", "+\t\t\t\"\t   ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0cb507828f8e4601acdb7b2fa534ae9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 652, "methodNumberAfterChange": 652, "signatureBeforeChange": " \tpublic void test648()", "signatureAfterChange": " \tpublic void test648()", "diff": ["+\t        \"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tOuter.Inner inner = new Sub().get();\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tclass Sub extends Outer {\\n\" + ", "+\t\t\t\"\t                  ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tInner get() { return null; }\\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f87460102e8145f480215c2c323e15b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 272, "methodNumberAfterChange": 272, "signatureBeforeChange": "\t\t \tpublic void test268()", "signatureAfterChange": "\t\t \tpublic void test268()", "diff": ["+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tArrayList<X> list = new ArrayList();\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tArrayList<X> list = new ArrayList();\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\treturn list.toArray(new X[list.size()]);\\n\" + ", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}], "num": 10827}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb79dd5d7ed3b161f924b3eacbc31095", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37e2de2ab64895328d3697e1e18a766f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "ee635a80ba660a66d92f25a46a18f5b579695b86", "commitAfterChange": "9fe70b9711fa758bc81b10b065c9e771c9bc0875", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void parseFullyQualifiedName()", "signatureAfterChange": "  \tprivate void parseFullyQualifiedName()", "diff": ["+\t\t\tcase Scanner.WILDCARD:", "+\t\t\t\t// support the '-' in \"Lpack/package-info;\", see bug 398920", "+\t\t\t\tint start = this.scanner.start;", "+\t\t\t\tif (this.scanner.nextToken() == Scanner.TYPE) {", "+\t\t\t\t\tthis.scanner.start = start;", "+\t\t\t\t\tthis.keyStart = start-1;", "+\t\t\t\t\tconsumeFullyQualifiedName(this.scanner.getTokenSource());", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4e7d2d81079b9cc8b714b76bb8a6651", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "0d4007eb15023a950a5e732906ce998c79797847", "commitAfterChange": "15f72ffb7ce100c1fef6b76e22aa8f994af88b5e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t \tprivate void parseFullyQualifiedName()", "signatureAfterChange": " \t \tprivate void parseFullyQualifiedName()", "diff": ["+\t\t\tcase Scanner.BASE_TYPE:", "+\t\t\t\tthis.keyStart = this.scanner.start-1;", "+\t\t\t\tconsumeBaseType(this.scanner.getTokenSource());", "+\t\t\t\tthis.hasTypeName = false;", "+\t\t\t\tbreak;", "-\t\t\t\tif (this.scanner.nextToken() == Scanner.TYPE)", "-\t \t\t\t\tconsumeFullyQualifiedName(this.scanner.getTokenSource());", "-\t\t\t\telse {", "-\t\t\t\t\tmalformedKey();", "-\t\t\t\t\treturn;", "+\t \t\t\tswitch (this.scanner.nextToken()) {", "+\t \t\t\t\tcase Scanner.TYPE:", "+\t\t \t\t\t\tconsumeFullyQualifiedName(this.scanner.getTokenSource());", "+\t\t \t\t\t\tbreak;", "+\t \t\t\t\tcase Scanner.BASE_TYPE:", "+\t \t\t\t\t\tconsumeBaseType(this.scanner.getTokenSource());", "+\t \t\t\t\t\tthis.hasTypeName = false;", "+\t \t\t\t\t\tbreak;", "+\t \t\t\t\tdefault:", "+\t\t\t\t\t\tmalformedKey();", "+\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7e244671fb84a313df2bb3958b1f7f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "ca4522438592d5854eccb915e03c5fdcf0af620d", "commitAfterChange": "6be62c3662fecf8904c768fbe89f2cac9c466d44", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void parseFullyQualifiedName()", "signatureAfterChange": "  \tprivate void parseFullyQualifiedName()", "diff": ["+\t\t\tcase Scanner.WILDCARD:", "+\t\t\t\t// support the '-' in \"Lpack/package-info;\", see bug 398920", "+\t\t\t\tint start = this.scanner.start;", "+\t\t\t\tif (this.scanner.nextToken() == Scanner.TYPE) {", "+\t\t\t\t\tthis.scanner.start = start;", "+\t\t\t\t\tthis.keyStart = start-1;", "+\t\t\t\t\tconsumeFullyQualifiedName(this.scanner.getTokenSource());", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f955edeecc8c7a84eb5244fda0bf7c25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "5f1e0ca52efa5c66e342b62d896831ba23629eba", "commitAfterChange": "0e4ee87d5a73569486905aa611208316069ccdd8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t// then when do you need a bridge method?", "+\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t// TODO (philippe) - we need this hack until SourceTypeBindings stop acting as ParameterizedTypes", "+\t\t\t\tif (originalReturnType != originalInherited.declaringClass || !inheritedMethod.returnType.leafComponentType().isParameterizedType())", "+\t\t\t\t\tbreak;", "-\t\t\t\tif (!currentMethod.returnType.leafComponentType().isParameterizedType())", "+\t\t\t\tif (!currentMethod.returnType.leafComponentType().isParameterizedType()) {", "+\t\t\t\t\tif (currentMethod.returnType.leafComponentType().isRawType() && inheritedMethod.returnType.leafComponentType().isRawType())", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\t\tif (originalReturnType.isTypeVariable() && ((TypeVariableBinding) originalReturnType).declaringElement == originalInherited) {", "+\t\t\t\tif (((TypeVariableBinding) originalReturnType).declaringElement == originalInherited) {"]}], "num": 37478}
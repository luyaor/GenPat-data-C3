{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df13b04a10309b2496d9af5a43cb73cd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "008c932031c82ef51cc6a05cf2fef3dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprotected Openable createElement(IResource resource, int elementType, RootInfo rootInfo)", "signatureAfterChange": " \tprivate Openable createElement(IResource resource, int elementType, RootInfo rootInfo)", "diff": ["+\t */", "+\tprivate Openable createElement(IResource resource, int elementType, RootInfo rootInfo) {", "+\t\tif (resource == null) return null;", "+\t\t", "+\t\tIPath path = resource.getFullPath();", "+\t\tIJavaElement element = null;", "+\t\tswitch (elementType) {", "+\t\t\t", "+\t\t\tcase IJavaElement.JAVA_PROJECT:", "+\t\t\t", "+\t\t\t\t// note that non-java resources rooted at the project level will also enter this code with", "+\t\t\t\t// an elementType JAVA_PROJECT (see #elementType(...)).", "+\t\t\t\tif (resource instanceof IProject){", "+", "+\t\t\t\t\tthis.popUntilPrefixOf(path);", "+\t\t\t\t\t", "+\t\t\t\t\tif (this.currentElement != null ", "+\t\t\t\t\t\t&& this.currentElement.getElementType() == IJavaElement.JAVA_PROJECT", "+\t\t\t\t\t\t&& ((IJavaProject)this.currentElement).getProject().equals(resource)) {", "+\t\t\t\t\t\treturn this.currentElement;", "+\t\t\t\t\t}", "+\t\t\t\t\tif  (rootInfo != null && rootInfo.project.getProject().equals(resource)){", "+\t\t\t\t\t\telement = (Openable)rootInfo.project;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tIProject proj = (IProject)resource;", "+\t\t\t\t\tif (JavaProject.hasJavaNature(proj)) {", "+\t\t\t\t\t\telement = JavaCore.create(proj);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// java project may have been been closed or removed (look for", "+\t\t\t\t\t\t// element amongst old java project s list).", "+\t\t\t\t\t\telement =  (Openable) manager.getJavaModel().findJavaProject(proj);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "+\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : rootInfo.project.getPackageFragmentRoot(resource);", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:", "+\t\t\t\t// find the element that encloses the resource", "+\t\t\t\tthis.popUntilPrefixOf(path);", "+\t\t\t\t", "+\t\t\t\tif (this.currentElement == null) {", "+\t\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "+\t\t\t\t} else {", "+\t\t\t\t\t// find the root", "+\t\t\t\t\tIPackageFragmentRoot root = this.currentElement.getPackageFragmentRoot();", "+\t\t\t\t\tif (root == null) {", "+\t\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "+\t\t\t\t\t} else if (((JavaProject)root.getJavaProject()).contains(resource)) {", "+\t\t\t\t\t\t// create package handle", "+\t\t\t\t\t\tIPath pkgPath = path.removeFirstSegments(root.getPath().segmentCount());", "+\t\t\t\t\t\tString pkg = Util.packageName(pkgPath);", "+\t\t\t\t\t\tif (pkg == null) return null;", "+\t\t\t\t\t\telement = root.getPackageFragment(pkg);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.COMPILATION_UNIT:", "+\t\t\tcase IJavaElement.CLASS_FILE:", "+\t\t\t\t// find the element that encloses the resource", "+\t\t\t\tthis.popUntilPrefixOf(path);", "+\t\t\t\t", "+\t\t\t\tif (this.currentElement == null) {", "+\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "+\t\t\t\t} else {", "+\t\t\t\t\t// find the package", "+\t\t\t\t\tIPackageFragment pkgFragment = null;", "+\t\t\t\t\tswitch (this.currentElement.getElementType()) {", "+\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "+\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)this.currentElement;", "+\t\t\t\t\t\t\tIPath rootPath = root.getPath();", "+\t\t\t\t\t\t\tIPath pkgPath = path.removeLastSegments(1);", "+\t\t\t\t\t\t\tString pkgName = Util.packageName(pkgPath.removeFirstSegments(rootPath.segmentCount()));", "+\t\t\t\t\t\t\tif (pkgName != null) {", "+\t\t\t\t\t\t\t\tpkgFragment = root.getPackageFragment(pkgName);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:", "+\t\t\t\t\t\t\tOpenable pkg = (Openable)this.currentElement;", "+\t\t\t\t\t\t\tif (pkg.getPath().equals(path.removeLastSegments(1))) {", "+\t\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)pkg;", "+\t\t\t\t\t\t\t} // else case of package x which is a prefix of x.y", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT:", "+\t\t\t\t\t\tcase IJavaElement.CLASS_FILE:", "+\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement.getParent();", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pkgFragment == null) {", "+\t\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (elementType == IJavaElement.COMPILATION_UNIT) {", "+\t\t\t\t\t\t\t// create compilation unit handle ", "+\t\t\t\t\t\t\t// fileName validation has been done in elementType(IResourceDelta, int, boolean)", "+\t\t\t\t\t\t\tString fileName = path.lastSegment();", "+\t\t\t\t\t\t\telement = pkgFragment.getCompilationUnit(fileName);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// create class file handle", "+\t\t\t\t\t\t\t// fileName validation has been done in elementType(IResourceDelta, int, boolean)", "+\t\t\t\t\t\t\tString fileName = path.lastSegment();", "+\t\t\t\t\t\t\telement = pkgFragment.getClassFile(fileName);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tif (element == null) {", "+\t\t\treturn null;", "+\t\t} else {", "+\t\t\tthis.currentElement = (Openable)element;", "+\t\t\treturn this.currentElement;", "+\t\t}", "+\t}", "-\t */", "-\tprotected Openable createElement(IResource resource, int elementType, RootInfo rootInfo) {", "-\t\tif (resource == null) return null;", "-\t\t", "-\t\tIPath path = resource.getFullPath();", "-\t\tIJavaElement element = null;", "-\t\tswitch (elementType) {", "-\t\t\t", "-\t\t\tcase IJavaElement.JAVA_PROJECT:", "-\t\t\t", "-\t\t\t\t// note that non-java resources rooted at the project level will also enter this code with", "-\t\t\t\t// an elementType JAVA_PROJECT (see #elementType(...)).", "-\t\t\t\tif (resource instanceof IProject){", "-", "-\t\t\t\t\tthis.popUntilPrefixOf(path);", "-\t\t\t\t\t", "-\t\t\t\t\tif (this.currentElement != null ", "-\t\t\t\t\t\t&& this.currentElement.getElementType() == IJavaElement.JAVA_PROJECT", "-\t\t\t\t\t\t&& ((IJavaProject)this.currentElement).getProject().equals(resource)) {", "-\t\t\t\t\t\treturn this.currentElement;", "-\t\t\t\t\t}", "-\t\t\t\t\tif  (rootInfo != null && rootInfo.project.getProject().equals(resource)){", "-\t\t\t\t\t\telement = (Openable)rootInfo.project;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tIProject proj = (IProject)resource;", "-\t\t\t\t\tif (JavaProject.hasJavaNature(proj)) {", "-\t\t\t\t\t\telement = JavaCore.create(proj);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// java project may have been been closed or removed (look for", "-\t\t\t\t\t\t// element amongst old java project s list).", "-\t\t\t\t\t\telement =  (Openable) manager.getJavaModel().findJavaProject(proj);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "-\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : rootInfo.project.getPackageFragmentRoot(resource);", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:", "-\t\t\t\t// find the element that encloses the resource", "-\t\t\t\tthis.popUntilPrefixOf(path);", "-\t\t\t\t", "-\t\t\t\tif (this.currentElement == null) {", "-\t\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "-\t\t\t\t} else {", "-\t\t\t\t\t// find the root", "-\t\t\t\t\tIPackageFragmentRoot root = this.currentElement.getPackageFragmentRoot();", "-\t\t\t\t\tif (root == null) {", "-\t\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "-\t\t\t\t\t} else if (((JavaProject)root.getJavaProject()).contains(resource)) {", "-\t\t\t\t\t\t// create package handle", "-\t\t\t\t\t\tIPath pkgPath = path.removeFirstSegments(root.getPath().segmentCount());", "-\t\t\t\t\t\tString pkg = Util.packageName(pkgPath);", "-\t\t\t\t\t\tif (pkg == null) return null;", "-\t\t\t\t\t\telement = root.getPackageFragment(pkg);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaElement.COMPILATION_UNIT:", "-\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t// find the element that encloses the resource", "-\t\t\t\tthis.popUntilPrefixOf(path);", "-\t\t\t\t", "-\t\t\t\tif (this.currentElement == null) {", "-\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "-\t\t\t\t} else {", "-\t\t\t\t\t// find the package", "-\t\t\t\t\tIPackageFragment pkgFragment = null;", "-\t\t\t\t\tswitch (this.currentElement.getElementType()) {", "-\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "-\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)this.currentElement;", "-\t\t\t\t\t\t\tIPath rootPath = root.getPath();", "-\t\t\t\t\t\t\tIPath pkgPath = path.removeLastSegments(1);", "-\t\t\t\t\t\t\tString pkgName = Util.packageName(pkgPath.removeFirstSegments(rootPath.segmentCount()));", "-\t\t\t\t\t\t\tif (pkgName != null) {", "-\t\t\t\t\t\t\t\tpkgFragment = root.getPackageFragment(pkgName);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:", "-\t\t\t\t\t\t\tOpenable pkg = (Openable)this.currentElement;", "-\t\t\t\t\t\t\tif (pkg.getPath().equals(path.removeLastSegments(1))) {", "-\t\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)pkg;", "-\t\t\t\t\t\t\t} // else case of package x which is a prefix of x.y", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT:", "-\t\t\t\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement.getParent();", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (pkgFragment == null) {", "-\t\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (elementType == IJavaElement.COMPILATION_UNIT) {", "-\t\t\t\t\t\t\t// create compilation unit handle ", "-\t\t\t\t\t\t\t// fileName validation has been done in elementType(IResourceDelta, int, boolean)", "-\t\t\t\t\t\t\tString fileName = path.lastSegment();", "-\t\t\t\t\t\t\telement = pkgFragment.getCompilationUnit(fileName);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// create class file handle", "-\t\t\t\t\t\t\t// fileName validation has been done in elementType(IResourceDelta, int, boolean)", "-\t\t\t\t\t\t\tString fileName = path.lastSegment();", "-\t\t\t\t\t\t\telement = pkgFragment.getClassFile(fileName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tif (element == null) {", "-\t\t\treturn null;", "-\t\t} else {", "-\t\t\tthis.currentElement = (Openable)element;", "-\t\t\treturn this.currentElement;", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "014f20952e48b68eac81d05b72f0bb1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Util.java", "commitBeforeChange": "00e190bf5f96c54b05d4853702eef90ea6dc4747", "commitAfterChange": "cbe67fbb923af7d25d4a9eb3f797486c6aac70dd", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate static String findLineSeparator(char[] text)", "signatureAfterChange": " \tpublic static String findLineSeparator(char[] text)", "diff": ["-\tprivate static String findLineSeparator(char[] text) {", "+\tpublic static String findLineSeparator(char[] text) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "024bdb49c8411ab32070d73533d30f17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "75b36a9ed5cd2da7220cbd26b35e54ceed421c30", "commitAfterChange": "dcdb11f13a905cc2d9eed5c3bf38034e243f753b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r protected JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "diff": ["-protected JavaElementInfo getElementInfo() throws JavaModelException {\r", "+public JavaElementInfo getElementInfo() throws JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "025df55603a4fb4702241904658bf39c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationWalker.java", "commitBeforeChange": "74d118e989117eba0163f0f707314197db0891af", "commitAfterChange": "43cdae5117454d896e9e9cf435f63b0b509e3a4c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate TypeAnnotationWalker(IBinaryTypeAnnotation[] typeAnnotations, long matchBits, int pathPtr)", "signatureAfterChange": " \tprotected TypeAnnotationWalker(IBinaryTypeAnnotation[] typeAnnotations, long matchBits, int pathPtr)", "diff": ["-\tprivate TypeAnnotationWalker(IBinaryTypeAnnotation[] typeAnnotations, long matchBits, int pathPtr) {", "+\tprotected TypeAnnotationWalker(IBinaryTypeAnnotation[] typeAnnotations, long matchBits, int pathPtr) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02a85b92cdc572b800ca92a980c6e277", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "e7300caf84c0933510395a99b704d9f077a17655", "commitAfterChange": "c0ce53e544605bae156c8b88dd5e1269fce9a282", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  public void checkAndSetModifiers(int flag)", "signatureAfterChange": "  protected void checkAndSetModifiers(int flag)", "diff": ["-public void checkAndSetModifiers(int flag){", "+protected void checkAndSetModifiers(int flag){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03922dba1c19dfc91bde7e624c01f677", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": "\r protected JavaElementInfo getElementInfo() throws JavaModelException", "diff": ["-public JavaElementInfo getElementInfo() throws JavaModelException {\r", "+protected JavaElementInfo getElementInfo() throws JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04fe72a4738e3533b3043abd51a9b5af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "de0ec0255833f27449d5f59da580e82b41fe6f0d", "commitAfterChange": "e0c471a33f6a2dbfcbdc998c17f7bfabb120c31b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic static SingleVariableDeclaration createNewParam(AST ast, String name)", "signatureAfterChange": "  \tprotected static SingleVariableDeclaration createNewParam(AST ast, String name)", "diff": ["-\tpublic static SingleVariableDeclaration createNewParam(AST ast, String name) {", "+\tprotected static SingleVariableDeclaration createNewParam(AST ast, String name) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05470eea91cf31df1ea4f2c4afd4a821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "79c2c88821cf1c103f2d51c16be63598686eff96", "commitAfterChange": "cae7f8c61c51ef4d85d837657b5392af988fbdde", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " private boolean isDigit(char c) throws InvalidInputException", "signatureAfterChange": " protected boolean isDigit(char c) throws InvalidInputException", "diff": ["-private boolean isDigit(char c) throws InvalidInputException {", "+protected boolean isDigit(char c) throws InvalidInputException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06121b0f46ce364a874fee1f47443609", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void reportAccurateReference(int sourceStart, int sourceEnd, char[][] tokens, IJavaElement element, int[] accuracies) throws CoreException", "signatureAfterChange": " protected void reportAccurateReference(int sourceStart, int sourceEnd, char[][] tokens, IJavaElement element, int[] accuracies) throws CoreException", "diff": ["-public void reportAccurateReference(int sourceStart, int sourceEnd, char[][] tokens, IJavaElement element, int[] accuracies) throws CoreException {", "+protected void reportAccurateReference(int sourceStart, int sourceEnd, char[][] tokens, IJavaElement element, int[] accuracies) throws CoreException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06587a873c464396e5fc75d01c3e6855", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " public char[] indexEntryPrefix()", "signatureAfterChange": " protected char[] indexEntryPrefix()", "diff": ["-public char[] indexEntryPrefix() {", "+protected char[] indexEntryPrefix() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "068c3fc4504b6f6be78185cb39f8f0ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/VarJarFactoryContainer.java", "commitBeforeChange": "f1d83e37dc72ba6d2676594fd1c64161817b3d74", "commitAfterChange": "50c8fc7c21507137e2b63d15c742a120cb954eef", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tprotected File getJarFile()", "signatureAfterChange": " \t@Override \tpublic File getJarFile()", "diff": ["-\tprotected File getJarFile() {", "+\tpublic File getJarFile() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06ca1973679c687a4d36001df9fc205e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprotected void nonJavaResourcesChanged(Openable element, IResourceDelta delta) \t\tthrows JavaModelException", "signatureAfterChange": " \tprivate void nonJavaResourcesChanged(Openable element, IResourceDelta delta) \t\tthrows JavaModelException", "diff": ["-\tprotected void nonJavaResourcesChanged(Openable element, IResourceDelta delta)", "+\tprivate void nonJavaResourcesChanged(Openable element, IResourceDelta delta)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08c876fdc1ea74da9f53ffcaffe28115", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "372799d5bd955eabbf1069fe0bbf8aba8ea8af85", "commitAfterChange": "baf433f0226e8b9036b18a28d560e5a42cb8b949", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate void getTypeBindings(final ITypeBinding type, final List<ITypeBinding> typeBindings)", "signatureAfterChange": " \tprotected void getTypeBindings(final ITypeBinding type, final List<ITypeBinding> typeBindings)", "diff": ["-\tprivate void getTypeBindings(final ITypeBinding type, final List<ITypeBinding> typeBindings)", "+\tprotected void getTypeBindings(final ITypeBinding type, final List<ITypeBinding> typeBindings)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0902038344da77a4eefefb2533bf8500", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": "\r protected JavaElementInfo getElementInfo() throws JavaModelException", "diff": ["-public JavaElementInfo getElementInfo() throws JavaModelException {\r", "+protected JavaElementInfo getElementInfo() throws JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "097a0a7b150e1746ad9eaae5cffa0e42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void reportAccurateReference(int sourceStart, int sourceEnd, char[][] qualifiedName, IJavaElement element, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportAccurateReference(int sourceStart, int sourceEnd, char[][] qualifiedName, IJavaElement element, int accuracy) throws CoreException", "diff": ["-public void reportAccurateReference(int sourceStart, int sourceEnd, char[][] qualifiedName, IJavaElement element, int accuracy) throws CoreException {", "+protected void reportAccurateReference(int sourceStart, int sourceEnd, char[][] qualifiedName, IJavaElement element, int accuracy) throws CoreException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a349ee0cc038b1cca9a8090e3c70427", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetThisReference.java", "commitBeforeChange": "78950c7a462ba6fe8424532e69a4abeff0c7c745", "commitAfterChange": "bb74c75a01728288c8fd321cd0dfd5da07348196", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean checkAccess(MethodScope methodScope)", "signatureAfterChange": " public boolean checkAccess(MethodScope methodScope)", "diff": ["-protected boolean checkAccess(MethodScope methodScope) {", "+public boolean checkAccess(MethodScope methodScope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a6ed16fa9cbb9f6eae6ca62dd92b781", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "9579e3add6a99053acfe6faec70c877feca5e8d3", "commitAfterChange": "542e863753b063e393ffd7f35e08fe8fe2f0bb63", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r protected void toStringAncestors(StringBuffer buffer)", "signatureAfterChange": "\r public void toStringAncestors(StringBuffer buffer)", "diff": ["-protected void toStringAncestors(StringBuffer buffer) {\r", "+public void toStringAncestors(StringBuffer buffer) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a7a212606591f484099bcc9937a486c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/SimpleTest.java", "commitBeforeChange": "ca79168b190819b66ae58549346eb222c2411abf", "commitAfterChange": "c2933480c6efd86534d66414d0baa0527f76ca45", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private GlobalVariable findVar(EvaluationContext context, char[] varName)", "signatureAfterChange": " protected GlobalVariable findVar(EvaluationContext context, char[] varName)", "diff": ["-private GlobalVariable findVar(EvaluationContext context, char[] varName) {", "+protected GlobalVariable findVar(EvaluationContext context, char[] varName) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ab1c65e2a158fccbaad2cabdfddcc0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 134, "signatureBeforeChange": " \tprivate int retrieveStartingCatchPosition(int start, int end)", "signatureAfterChange": " \tprotected int retrieveStartingCatchPosition(int start, int end)", "diff": ["-\t */", "-\tprivate int retrieveStartingCatchPosition(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNamecatch://225", "-\t\t\t\t\t\treturn this.scanner.startPosition;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}", "+\t */", "+\tprotected int retrieveStartingCatchPosition(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNamecatch://225", "+\t\t\t\t\t\treturn this.scanner.startPosition;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c6aab96620ac94f5dde681f4387c64b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java", "commitBeforeChange": "8c8cd78ee7d91af397b355193b993289ef7f4454", "commitAfterChange": "dab69163a24dbd341ec146b21a1806a7799bbbc6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private IAnnotation[] getStandardAnnotations(long tagBits)", "signatureAfterChange": " protected IAnnotation[] getStandardAnnotations(long tagBits)", "diff": ["-private IAnnotation[] getStandardAnnotations(long tagBits) {", "+protected IAnnotation[] getStandardAnnotations(long tagBits) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ca85c67243833993cb9000d11819120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void reportTypeDeclaration(TypeDeclaration typeDeclaration, IJavaElement parent, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportTypeDeclaration(TypeDeclaration typeDeclaration, IJavaElement parent, int accuracy) throws CoreException", "diff": ["-public void reportTypeDeclaration(TypeDeclaration typeDeclaration, IJavaElement parent, int accuracy) throws CoreException {", "+protected void reportTypeDeclaration(TypeDeclaration typeDeclaration, IJavaElement parent, int accuracy) throws CoreException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cb08b1b01ef1afa229fc8e96a3091be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "865f0d98bfa165e288339ed90c13b870dd7b485b", "commitAfterChange": "049a10d559ac98007e03174de215c833cb620a6a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic ASTNode findDeclaringNode(IBinding binding)", "signatureAfterChange": " \tsynchronized ASTNode findDeclaringNode(IBinding binding)", "diff": ["-\tpublic ASTNode findDeclaringNode(IBinding binding) {", "+\tsynchronized ASTNode findDeclaringNode(IBinding binding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d16ff311715802b19c704930e81151a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "a56d2afc8ddb8dcda8f74b90d2b39898295865d2", "commitAfterChange": "fc69abbb26faa5011e1c3f5f4862367455008505", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprotected IJavaElementDelta getDeltaFor(IJavaElement element)", "signatureAfterChange": " \t\tpublic IJavaElementDelta getDeltaFor(IJavaElement element)", "diff": ["+\t\t */", "+\t\tpublic IJavaElementDelta getDeltaFor(IJavaElement element) {", "+\t\t\treturn getDeltaFor(element, false);", "+\t\t}", "-\t */", "-\tprotected IJavaElementDelta getDeltaFor(IJavaElement element) {", "-\t\treturn getDeltaFor(element, false);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fa0f60d93ab4b2cbbd73106e48d148d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "e931aecd3dd39697fd0a057bffda11890337b018", "commitAfterChange": "305acfe01a2cb51532a94f25f8a4ff106e9d160c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tprotected JavaModelException newNotPresentException()", "signatureAfterChange": " \tpublic JavaModelException newNotPresentException()", "diff": ["-\tprotected JavaModelException newNotPresentException() {", "+\tpublic JavaModelException newNotPresentException() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fdd24c541546e3494d9a8d811ab991b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "ca79168b190819b66ae58549346eb222c2411abf", "commitAfterChange": "c2933480c6efd86534d66414d0baa0527f76ca45", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " protected IWorkspaceRoot getWorkspaceRoot()", "signatureAfterChange": " public IWorkspaceRoot getWorkspaceRoot()", "diff": ["-protected IWorkspaceRoot getWorkspaceRoot() {", "+public IWorkspaceRoot getWorkspaceRoot() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a904b9360a2acea7d3b227fd0bd614", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void tagAsGlobalSummary(String shortName, Dimension dimension, boolean fingerprint)", "signatureAfterChange": " \tprotected void tagAsGlobalSummary(String shortName, Dimension dimension, boolean fingerprint)", "diff": ["-\tpublic void tagAsGlobalSummary(String shortName, Dimension dimension, boolean fingerprint) {", "+\t}", "+\tprotected void tagAsGlobalSummary(String shortName, Dimension dimension, boolean fingerprint) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "124351c2e92e7459db33fd51d9739e85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java", "commitBeforeChange": "0c9d35cff2dc84f5482dc68d6d37735087c6900a", "commitAfterChange": "ec83f4485fd98b95e4e8e2158e7e66ce8f1734fe", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void enterEnum(TypeInfo typeInfo)", "signatureAfterChange": " private void enterEnum(TypeInfo typeInfo)", "diff": ["- */", "-public void enterEnum(TypeInfo typeInfo) {", "+private void enterEnum(TypeInfo typeInfo) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12a608fc37d4d092372ff59697bfa55d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c0f09226322ecd771874277f6bb778276b0ec732", "commitAfterChange": "c22186f99babc1d07ce1a8d9528c4806c68c13fc", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void formatStatements(BlockScope scope, final Statement[] statements, boolean insertNewLineAfterLastStatement)", "signatureAfterChange": "  \tprivate void formatStatements(BlockScope scope, final Statement[] statements, boolean insertNewLineAfterLastStatement)", "diff": ["-\tpublic void formatStatements(BlockScope scope, final Statement[] statements, boolean insertNewLineAfterLastStatement) {", "+\tprivate void formatStatements(BlockScope scope, final Statement[] statements, boolean insertNewLineAfterLastStatement) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13130f29ef22c020cc42dada2cad6512", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "42ca451da7c2f530c011e817394695d5527df6c3", "commitAfterChange": "14e98e44decb0b01d65f86bf524907d7cc881ea2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  private void checkNonExternalizedString()", "signatureAfterChange": "  protected void checkNonExternalizedString()", "diff": ["-private void checkNonExternalizedString() {", "+protected void checkNonExternalizedString() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "141d156e33bc36d1f522a6c96edb632a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BufferFactoryWrapper.java", "commitBeforeChange": "b1e7dd1740dcc45fe363892f1b6002f0c3a8ef0e", "commitAfterChange": "a43a4c1cc03ffd1e3eeb8ffe9a1b2288e2734d16", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\t \tpublic BufferFactoryWrapper(IBufferFactory factory)", "signatureAfterChange": " \t\t \tprivate BufferFactoryWrapper(IBufferFactory factory)", "diff": ["-\tpublic BufferFactoryWrapper(IBufferFactory factory) {", "+\tprivate BufferFactoryWrapper(IBufferFactory factory) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14a75c04699f86f3fda088bb320db0f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java", "commitBeforeChange": "0c9d35cff2dc84f5482dc68d6d37735087c6900a", "commitAfterChange": "ec83f4485fd98b95e4e8e2158e7e66ce8f1734fe", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void enterClass(TypeInfo typeInfo)", "signatureAfterChange": "  private void enterClass(TypeInfo typeInfo)", "diff": ["- */", "-public void enterClass(TypeInfo typeInfo) {", "+", "+private void enterClass(TypeInfo typeInfo) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14e89655727ae0499cd862653fc8dbe0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ReferenceCollection.java", "commitBeforeChange": "f2175e743261684fe3de1337b02bb7bc5e74c85c", "commitAfterChange": "5a25b0b2adf3a42de2c91930c56a74b98ff9b6ac", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r public ReferenceCollection(char[][][] qualifiedReferences, char[][] simpleNameReferences)", "signatureAfterChange": "\r \r protected ReferenceCollection(char[][][] qualifiedReferences, char[][] simpleNameReferences)", "diff": ["-public ReferenceCollection(char[][][] qualifiedReferences, char[][] simpleNameReferences) {\r", "+protected ReferenceCollection(char[][][] qualifiedReferences, char[][] simpleNameReferences) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "167bf7095ad3080f513b80c8294e3301", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "commitAfterChange": "309aed033cc4257b36692ed1549ee0025e0800df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate boolean checkNegative2()", "signatureAfterChange": " \tpublic boolean checkNegative2()", "diff": ["-\tprivate boolean checkNegative2() {", "+\tpublic boolean checkNegative2() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "175333890336c2e83a10b8c7f926b8d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0fcbdf3f242eca695398990480b5252f47b13157", "commitAfterChange": "bdb5fd6b326428cc9f0c1c9c5974b9a701aacf91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void discardGeneratedWorkingCopy( IFile generatedFile, IFile parentFile ) \t\tthrows JavaModelException", "signatureAfterChange": " \tprivate void discardGeneratedWorkingCopy( IFile generatedFile, IFile parentFile ) \t\tthrows JavaModelException", "diff": ["-\tpublic void discardGeneratedWorkingCopy( IFile generatedFile, IFile parentFile )", "+\tprivate void discardGeneratedWorkingCopy( IFile generatedFile, IFile parentFile )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17aeb8d50c678dbaa4f42b98d8dd1ed7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 155, "signatureBeforeChange": "  \tprivate void setTypeForVariableDeclarationExpression(VariableDeclarationExpression variableDeclarationExpression, Type type, int extraDimension)", "signatureAfterChange": "  \tprotected void setTypeForVariableDeclarationExpression(VariableDeclarationExpression variableDeclarationExpression, Type type, int extraDimension)", "diff": ["-", "-\tprivate void setTypeForVariableDeclarationExpression(VariableDeclarationExpression variableDeclarationExpression, Type type, int extraDimension) {", "-\t\tif (extraDimension != 0) {", "-\t\t\tif (type.isArrayType()) {", "-\t\t\t\tArrayType arrayType = (ArrayType) type;", "-\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "-\t\t\t\tif (remainingDimensions == 0)  {", "-\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "-\t\t\t\t\tType elementType = arrayType.getElementType();", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\telementType.setParent(null, null);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "-\t\t\t\t\tvariableDeclarationExpression.setType(elementType);", "-\t\t\t\t} else {", "-\t\t\t\t\tint start = type.getStartPosition();", "-\t\t\t\t\tint length = type.getLength();", "-\t\t\t\t\tArrayType subarrayType = arrayType;", "-\t\t\t\t\tint index = extraDimension;", "-\t\t\t\t\twhile (index > 0) {", "-\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "-\t\t\t\t\t\tindex--;", "-\t\t\t\t\t}", "-\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "-\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\tsubarrayType.setParent(null, null);", "-\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "-\t\t\t\t\tvariableDeclarationExpression.setType(subarrayType);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tvariableDeclarationExpression.setType(type);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tvariableDeclarationExpression.setType(type);", "-\t\t}", "-\t}", "+", "+\tprotected void setTypeForVariableDeclarationExpression(VariableDeclarationExpression variableDeclarationExpression, Type type, int extraDimension) {", "+\t\tif (extraDimension != 0) {", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "+\t\t\t\tif (remainingDimensions == 0)  {", "+\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "+\t\t\t\t\tType elementType = arrayType.getElementType();", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\telementType.setParent(null, null);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "+\t\t\t\t\tvariableDeclarationExpression.setType(elementType);", "+\t\t\t\t} else {", "+\t\t\t\t\tint start = type.getStartPosition();", "+\t\t\t\t\tint length = type.getLength();", "+\t\t\t\t\tArrayType subarrayType = arrayType;", "+\t\t\t\t\tint index = extraDimension;", "+\t\t\t\t\twhile (index > 0) {", "+\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "+\t\t\t\t\t\tindex--;", "+\t\t\t\t\t}", "+\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "+\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\tsubarrayType.setParent(null, null);", "+\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "+\t\t\t\t\tvariableDeclarationExpression.setType(subarrayType);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tvariableDeclarationExpression.setType(type);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tvariableDeclarationExpression.setType(type);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17b6401824cd27dd5814a73ba7a417a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "263d5090059fdde1fe0ad777198fe1aa5d325a3a", "commitAfterChange": "e933d7cecbab3959fae37cfd5312f4a1c4e994da", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " private boolean isDigit(char c) throws InvalidInputException", "signatureAfterChange": " protected boolean isDigit(char c) throws InvalidInputException", "diff": ["-private boolean isDigit(char c) throws InvalidInputException {", "+protected boolean isDigit(char c) throws InvalidInputException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1831a8394d7922749ccbce66025e66fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \tprotected Object getInfo(IJavaElement element)", "signatureAfterChange": "\r \tpublic Object getInfo(IJavaElement element)", "diff": ["-\tprotected Object getInfo(IJavaElement element) {\r", "+\tpublic Object getInfo(IJavaElement element) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19e8f08f0b696c05c7d162a92e661c82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic boolean isAffectedBy(IResourceDelta rootDelta)", "signatureAfterChange": " \tprivate boolean isAffectedBy(IResourceDelta rootDelta)", "diff": ["-\tpublic boolean isAffectedBy(IResourceDelta rootDelta){", "+\tprivate boolean isAffectedBy(IResourceDelta rootDelta){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19f5b971a473db2dd606084bd7635618", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "bb161cc0f24c88013c90d4f52d2200284e6436fc", "commitAfterChange": "2f5fd18c93661c661012397a8eb704f52a56558d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private IBinaryType getBinaryTypeInfo(IFile file) throws JavaModelException", "signatureAfterChange": " public IBinaryType getBinaryTypeInfo(IFile file) throws JavaModelException", "diff": ["-private IBinaryType getBinaryTypeInfo(IFile file) throws JavaModelException {", "+public IBinaryType getBinaryTypeInfo(IFile file) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a83ae1bf656be3491be89119f47cffd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 124, "signatureBeforeChange": " \tprivate int retrieveExtraDimension(int start, int end)", "signatureAfterChange": " \tprotected int retrieveExtraDimension(int start, int end)", "diff": ["-\t */", "-\tprivate int retrieveExtraDimension(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\tint dimensions = 0;", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET://166 ", "-\t\t\t\t\t\tdimensions++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE ://90\t\t\t\t\t\t", "-\t\t\t\t\tcase TerminalTokens.TokenNameCOMMA ://90", "-\t\t\t\t\tcase TerminalTokens.TokenNameEQUAL ://167", "-\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON ://64", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN : //86", "-\t\t\t\t\t\treturn dimensions;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn dimensions;", "-\t}", "+\t */", "+\tprotected int retrieveExtraDimension(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\tint dimensions = 0;", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET://166 ", "+\t\t\t\t\t\tdimensions++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE ://90\t\t\t\t\t\t", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMA ://90", "+\t\t\t\t\tcase TerminalTokens.TokenNameEQUAL ://167", "+\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON ://64", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN : //86", "+\t\t\t\t\t\treturn dimensions;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn dimensions;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c1367ca8178b5e70d092b460dd748ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword1.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\tpublic TypeBinding getTypeBinding(Scope scope) {", "+\tprotected TypeBinding getTypeBinding(Scope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c5368038023e705c4f5080e1c1dfc6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 131, "signatureBeforeChange": " \tprivate int retrieveRightBracketPosition(int start, int end)", "signatureAfterChange": " \tprotected int retrieveRightBracketPosition(int start, int end)", "diff": ["-\t */", "-\tprivate int retrieveRightBracketPosition(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET:", "-\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}", "+\t */", "+\tprotected int retrieveRightBracketPosition(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET:", "+\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d72b9c274e46737f45645862bb1859c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 318, "signatureBeforeChange": " public final void writeSignedWord(int value)", "signatureAfterChange": " private final void writeSignedWord(int value)", "diff": ["-public final void writeSignedWord(int value) {", "+private final void writeSignedWord(int value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e84ca7e2c8a99428b2934f6f33b18da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private Object getValue(final String memberName)", "signatureAfterChange": "     public Object getValue(final String memberName)", "diff": ["-    private Object getValue(final String memberName)", "+    public Object getValue(final String memberName)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ec99976e7ad62a2b091b79c26d975b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tprivate boolean typeParametersMentioned(TypeBinding upperBound)", "signatureAfterChange": "  \tstatic boolean typeParametersMentioned(TypeBinding upperBound)", "diff": ["-\tprivate boolean typeParametersMentioned(TypeBinding upperBound) {", "+\tstatic boolean typeParametersMentioned(TypeBinding upperBound) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ee1cdbf21a2a31fa3c21b8ae7fefa8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/SimpleDOMBuilder.java", "commitBeforeChange": "0c9d35cff2dc84f5482dc68d6d37735087c6900a", "commitAfterChange": "ec83f4485fd98b95e4e8e2158e7e66ce8f1734fe", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void exitType(int declarationEnd)", "signatureAfterChange": " public void exitType(int declarationEnd)", "diff": ["-protected void exitType(int declarationEnd) {", "+public void exitType(int declarationEnd) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eef4cb6b4007a78da10d9f171a31b66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": " private final boolean atLambdaParameterList()", "signatureAfterChange": "  protected final boolean atLambdaParameterList()", "diff": ["-private final boolean atLambdaParameterList() { // Did the '(' we saw just now herald a lambda parameter list ?", "+", "+protected final boolean atLambdaParameterList() { // Did the '(' we saw just now herald a lambda parameter list ?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fb356e22343cfb53870bd61435b94a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate char peekChar()", "signatureAfterChange": " \tprotected char peekChar()", "diff": ["-\tprivate char peekChar() {", "+\tprotected char peekChar() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20907160e0b8f97b2efa6220098e3c1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "4f833be4365ac5abb1ac0cf3973cd75cbb0d7487", "commitAfterChange": "227e3d5fec0001fbc06115e3f3e6f09f357952e2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate boolean argumentsTypeElided()", "signatureAfterChange": " \t \tpublic boolean argumentsTypeElided()", "diff": ["-\tprivate boolean argumentsTypeElided() {", "+\tpublic boolean argumentsTypeElided() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "228694656ba1f72db9af2d46d64f5eb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "4270c0d0116678ee80e79ca750f00fbdbf7948c1", "commitAfterChange": "4d6b824f7ed800a186590dfa20c790b925acd114", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " \tprivate static char[] toAnchor(char[] methodSignature, char[] methodName, boolean isVargArgs)", "signatureAfterChange": " \tpublic static char[] toAnchor(char[] methodSignature, char[] methodName, boolean isVargArgs)", "diff": ["-\tprivate static char[] toAnchor(char[] methodSignature, char[] methodName, boolean isVargArgs) {", "+\tpublic static char[] toAnchor(char[] methodSignature, char[] methodName, boolean isVargArgs) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "235c7b253bc2dde11206a880cb5c4a2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 133, "signatureBeforeChange": " \tprivate int retrieveStartBlockPosition(int start, int end)", "signatureAfterChange": " \tprotected int retrieveStartBlockPosition(int start, int end)", "diff": ["-\t */", "-\tprivate int retrieveStartBlockPosition(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE://110", "-\t\t\t\t\t\treturn this.scanner.startPosition;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}", "+\t */", "+\tprotected int retrieveStartBlockPosition(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE://110", "+\t\t\t\t\t\treturn this.scanner.startPosition;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23bd94e66e35f04ef90e1dc817d409b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r private void parseBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": "\r public void parseBodies(CompilationUnitDeclaration unit)", "diff": ["-private void parseBodies(CompilationUnitDeclaration unit) {\r", "+public void parseBodies(CompilationUnitDeclaration unit) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "240515c5c51d1f6f82a4fdcb9cc58901", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0fcbdf3f242eca695398990480b5252f47b13157", "commitAfterChange": "bdb5fd6b326428cc9f0c1c9c5974b9a701aacf91", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tprivate void clearAllMaps()", "signatureAfterChange": " \t \tpublic void clearAllMaps()", "diff": ["-\tprivate void clearAllMaps() ", "+\tpublic void clearAllMaps() ", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "251897a71899a9352b90040514a33d46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/SimpleDOMBuilder.java", "commitBeforeChange": "0c9d35cff2dc84f5482dc68d6d37735087c6900a", "commitAfterChange": "ec83f4485fd98b95e4e8e2158e7e66ce8f1734fe", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected void enterType(TypeInfo typeInfo)", "signatureAfterChange": " public void enterType(TypeInfo typeInfo)", "diff": ["-protected void enterType(TypeInfo typeInfo) {", "+public void enterType(TypeInfo typeInfo) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "258acbc0688014dd79e6b2919e1163fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "2987741f8d7ae6ba7c6ecdc8fdc499128b4382c3", "commitAfterChange": "d5c11be7e543c7f93752fc5fbb5d286f2c5ca773", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tprivate void resetProjectCaches()", "signatureAfterChange": " \tpublic void resetProjectCaches()", "diff": ["-\tprivate void resetProjectCaches() {", "+\tpublic void resetProjectCaches() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "259455c97fda97d1eb436c2cd0a5980c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException", "signatureAfterChange": "\r \r \tpublic void reportBinaryMatch(\r \t\tIMember binaryMember,\r \t\tIBinaryType info,\r \t\tint accuracy)\r \t\tthrows CoreException, JavaModelException", "diff": ["-}\r", "-private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException {\r", "-\tISourceRange range = binaryMember.getNameRange();\r", "-\tif (range.getOffset() == -1) {\r", "-\t\tClassFile classFile = (ClassFile)binaryMember.getClassFile();\r", "-\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "-\t\tif (mapper != null) {\r", "-\t\t\tIType type = classFile.getType();\r", "-\t\t\tchar[] contents = mapper.findSource(type, info);\r", "-\t\t\tif (contents != null) {\r", "-\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tint startIndex = range.getOffset();\r", "-\tint endIndex = startIndex + range.getLength() - 1;\r", "-\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "-}\r", "+\tpublic void reportBinaryMatch(\r", "+\t\tIMember binaryMember,\r", "+\t\tIBinaryType info,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException, JavaModelException {\r", "+\t\tISourceRange range = binaryMember.getNameRange();\r", "+\t\tif (range.getOffset() == -1) {\r", "+\t\t\tClassFile classFile = (ClassFile) binaryMember.getClassFile();\r", "+\t\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "+\t\t\tif (mapper != null) {\r", "+\t\t\t\tIType type = classFile.getType();\r", "+\t\t\t\tchar[] contents = mapper.findSource(type, info);\r", "+\t\t\t\tif (contents != null) {\r", "+\t\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "+\t\t}\r", "+\t\tint startIndex = range.getOffset();\r", "+\t\tint endIndex = startIndex + range.getLength() - 1;\r", "+\t\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2670e97f0222d5f85b10cc33300ff66b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Formatter/test447/Format_out.java", "commitBeforeChange": "9cd8ac9158e8cf65a77f69d8bfcd62dc9418f984", "commitAfterChange": "c8ff3cbc92fbc03cd36a58b694b93e2376e6a266", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public void temp()", "signatureAfterChange": "    private void temp()", "diff": ["-  public void temp() {", "+  private void temp() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26b54363e92addfe19ac2daa4fca72c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceRange.java", "commitBeforeChange": "36ef129881167aaca524bd32a5aa2c4e26ffd187", "commitAfterChange": "19b7207c9f9b8245eee7ba353b5eb784e8fb1b81", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  protected SourceRange(int offset, int length)", "signatureAfterChange": "  public SourceRange(int offset, int length)", "diff": ["-protected SourceRange(int offset, int length) {", "+public SourceRange(int offset, int length) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28e7ecb6e9853fe93261349ef18288fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c0f09226322ecd771874277f6bb778276b0ec732", "commitAfterChange": "c22186f99babc1d07ce1a8d9528c4806c68c13fc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "\t  \tpublic void formatMessageSend( \t\tMessageSend messageSend, \t\tBlockScope scope, \t\tAlignment messageAlignment)", "signatureAfterChange": "\t  \tprivate void formatMessageSend( \t\tMessageSend messageSend, \t\tBlockScope scope, \t\tAlignment messageAlignment)", "diff": ["-\tpublic void formatMessageSend(", "+\tprivate void formatMessageSend("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28ef6a5fecdbc4937531435d02d9a6fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public void parseBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": "\r private void parseBodies(CompilationUnitDeclaration unit)", "diff": ["-public void parseBodies(CompilationUnitDeclaration unit) {\r", "+private void parseBodies(CompilationUnitDeclaration unit) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "292021ef42858477e8aac597d9a48248", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprotected CompilationUnit[] getCompilationUnits()\r \t\tthrows InvalidInputException", "signatureAfterChange": "\r \tpublic CompilationUnit[] getCompilationUnits()\r \t\tthrows InvalidInputException", "diff": ["-\tprotected CompilationUnit[] getCompilationUnits()\r", "+\tpublic CompilationUnit[] getCompilationUnits()\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c1a4a2e6231493bc79d51765ea0953a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r protected JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "diff": ["-protected JavaElementInfo getElementInfo() throws JavaModelException {\r", "+public JavaElementInfo getElementInfo() throws JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c701d45e52bf1a7163b6fe877bd3d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate void checkCanceled()", "signatureAfterChange": "  \tprotected void checkCanceled()", "diff": ["-\tprivate void checkCanceled() {", "+\tprotected void checkCanceled() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c70bde4a342735ee9eb845e02b0d537", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "08af074ff5e080b815672c2a130ef69700b120d8", "commitAfterChange": "d95449cf37bb2e33a7804a35ceffb191c7190444", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate ASTRewrite(AST ast)", "signatureAfterChange": " \tprotected ASTRewrite(AST ast)", "diff": ["-\tprivate ASTRewrite(AST ast) {", "+\tprotected ASTRewrite(AST ast) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cfbf2c08c51727855abd5e3b2fecfc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 120, "signatureBeforeChange": "  \tprivate int retrieveEndingSemiColonPosition(int start, int end)", "signatureAfterChange": "  \tprotected int retrieveEndingSemiColonPosition(int start, int end)", "diff": ["-", "-\tprivate int retrieveEndingSemiColonPosition(int start, int end) {", "-\t\tint count = 0;", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON:", "-\t\t\t\t\t\tif (count == 0) {", "-\t\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE :", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE :", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET :", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET :", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}", "+", "+\tprotected int retrieveEndingSemiColonPosition(int start, int end) {", "+\t\tint count = 0;", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON:", "+\t\t\t\t\t\tif (count == 0) {", "+\t\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE :", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE :", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET :", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET :", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d873b48233a053ab3503b87f8127e28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "865f0d98bfa165e288339ed90c13b870dd7b485b", "commitAfterChange": "049a10d559ac98007e03174de215c833cb620a6a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected ITypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.TypeBinding referenceBinding)", "signatureAfterChange": " \tsynchronized ITypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.TypeBinding referenceBinding)", "diff": ["-\tprotected ITypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.TypeBinding referenceBinding) {", "+\tsynchronized ITypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.TypeBinding referenceBinding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ddbb0bbedb85e6f619eda6f91c34576", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "865f0d98bfa165e288339ed90c13b870dd7b485b", "commitAfterChange": "049a10d559ac98007e03174de215c833cb620a6a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprotected IVariableBinding getVariableBinding(org.eclipse.jdt.internal.compiler.lookup.VariableBinding variableBinding)", "signatureAfterChange": " \tsynchronized IVariableBinding getVariableBinding(org.eclipse.jdt.internal.compiler.lookup.VariableBinding variableBinding)", "diff": ["-\tprotected IVariableBinding getVariableBinding(org.eclipse.jdt.internal.compiler.lookup.VariableBinding variableBinding) {", "+\tsynchronized IVariableBinding getVariableBinding(org.eclipse.jdt.internal.compiler.lookup.VariableBinding variableBinding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e74f85479df8a5c93349ae72c5851ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0b996c62d78a14d0f0ee5313e3a85270bb3aeb0f", "commitAfterChange": "58aaea35ae4c64a4ecebe06d6b1ab1679e04698a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \tprivate void addEntryToFileMaps( IFile parentFile, IFile generatedFile )", "signatureAfterChange": " \t \tpublic void addEntryToFileMaps( IFile parentFile, IFile generatedFile )", "diff": ["-\tprivate void addEntryToFileMaps( IFile parentFile, IFile generatedFile )", "+\tpublic void addEntryToFileMaps( IFile parentFile, IFile generatedFile )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f12363cfcde199cbc813a0db0fa0874", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public void parseBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": "\r private void parseBodies(CompilationUnitDeclaration unit)", "diff": ["-public void parseBodies(CompilationUnitDeclaration unit) {\r", "+private void parseBodies(CompilationUnitDeclaration unit) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3034f2a5a5c648b15e148ca853804a6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "df58102577aeec0f20c498bd98bb398edac7a1ec", "commitAfterChange": "9b825b2b97fc1913934f4045fd19eacdb55241ff", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " private void setUpWorkingCopy(String path, String contents) throws JavaModelException", "signatureAfterChange": " protected void setUpWorkingCopy(String path, String contents) throws JavaModelException", "diff": ["-private void setUpWorkingCopy(String path, String contents) throws JavaModelException {", "+protected void setUpWorkingCopy(String path, String contents) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "303eb9bfbd9224f37227d897315d8135", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "48525cb31c4d7e2c8111355ee85423007735873a", "commitAfterChange": "31d915ea88712a08a053d81dbaa3f51ee5d00b1e", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "\r \r \tpublic String[] projectPrerequisites(IClasspathEntry[] entries)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \r \tprivate String[] projectPrerequisites(IClasspathEntry[] entries)\r \t\tthrows JavaModelException", "diff": ["-\tpublic String[] projectPrerequisites(IClasspathEntry[] entries)\r", "+\tprivate String[] projectPrerequisites(IClasspathEntry[] entries)\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "318bf8aa972ec67d05cae272b9c6cd2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "fe46c42d584fc9df798276778c11a2ce2f79d8c4", "commitAfterChange": "8904ea4393baa4ec97ffdacde82d6f35bb8add7c", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " private void printDisplayString(String toPrint, int indent)", "signatureAfterChange": " protected void printDisplayString(String toPrint, int indent)", "diff": ["-private void printDisplayString(String toPrint, int indent) {", "+protected void printDisplayString(String toPrint, int indent) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3239f486bd15416921df109dd795123b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/SimpleTest.java", "commitBeforeChange": "ca79168b190819b66ae58549346eb222c2411abf", "commitAfterChange": "c2933480c6efd86534d66414d0baa0527f76ca45", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private String errorReportSource(DefaultProblem problem, char[] source)", "signatureAfterChange": " protected String errorReportSource(DefaultProblem problem, char[] source)", "diff": ["-private String errorReportSource(DefaultProblem problem, char[] source) {", "+protected String errorReportSource(DefaultProblem problem, char[] source) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "324b72d73b6e6d136a0dab2ae415b5bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocFieldReference.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding internalResolveType(Scope scope)", "diff": ["-\tprivate TypeBinding internalResolveType(Scope scope) {", "+\tprotected TypeBinding internalResolveType(Scope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3477247cb9d78e7efc9e0578e2b09dc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "e77a13c5cfd8a2800f9cc3d46536a8ccdc632a8b", "commitAfterChange": "c62b2332be65f641e5e7827b79f4caf8cb16c6bb", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tprotected boolean hasErasedCandidatesCollisions(TypeBinding one, TypeBinding two, Map invocations, ReferenceBinding type, ASTNode typeRef)", "signatureAfterChange": "  \tpublic boolean hasErasedCandidatesCollisions(TypeBinding one, TypeBinding two, Map invocations, ReferenceBinding type, ASTNode typeRef)", "diff": ["-\tprotected boolean hasErasedCandidatesCollisions(TypeBinding one, TypeBinding two, Map invocations, ReferenceBinding type, ASTNode typeRef) {", "+\tpublic boolean hasErasedCandidatesCollisions(TypeBinding one, TypeBinding two, Map invocations, ReferenceBinding type, ASTNode typeRef) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34aa5978fda1d48ce5239b955b3bbd1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "21b06b1f77b7fda7b2358e6e2d335e77a6ac8125", "commitAfterChange": "b397fbf1ef2684ee73e7617091ec4c7be38fc011", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic boolean ensureGeneratedSourceFolder()", "signatureAfterChange": " \tprivate boolean ensureGeneratedSourceFolder()", "diff": ["-\tpublic boolean ensureGeneratedSourceFolder(){", "+\tprivate boolean ensureGeneratedSourceFolder(){", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35cd375041d00de4308149d4a3dd2684", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/LongConstant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " public LongConstant(long value)", "signatureAfterChange": " private LongConstant(long value)", "diff": ["-\tlong value;", "-public LongConstant(long value) {", "+}", "+private LongConstant(long value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "370e613486776bddc8c507c0f192c4ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void decodeIndexEntry(IEntryResult entryResult)", "signatureAfterChange": "  protected void decodeIndexEntry(IEntryResult entryResult)", "diff": ["-public void decodeIndexEntry(IEntryResult entryResult){", "+ protected void decodeIndexEntry(IEntryResult entryResult){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3738f44f489be259fe78b16d88867055", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ImplicitDocTypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\tpublic TypeBinding getTypeBinding(Scope scope) {", "+\tprotected TypeBinding getTypeBinding(Scope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "384ca49627af9a55904eb7cffeef7b5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": " public IMethod createMethodHandle(AbstractMethodDeclaration method, IType type)", "signatureAfterChange": " protected IMethod createMethodHandle(AbstractMethodDeclaration method, IType type)", "diff": ["-public IMethod createMethodHandle(AbstractMethodDeclaration method, IType type) {", "+protected IMethod createMethodHandle(AbstractMethodDeclaration method, IType type) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "388205dc022f5758196643e84d70aaff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 115, "signatureBeforeChange": " \tprivate void removeLeadingAndTrailingCommentsFromLiteral(ASTNode node)", "signatureAfterChange": " \tprotected void removeLeadingAndTrailingCommentsFromLiteral(ASTNode node)", "diff": ["-\tprivate void removeLeadingAndTrailingCommentsFromLiteral(ASTNode node) {", "+\tprotected void removeLeadingAndTrailingCommentsFromLiteral(ASTNode node) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a0d95ad4f4bf27042ff4b43bbe5963e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "4a3b8d7f66c815bfc252f4ffc29a63c010eff917", "commitAfterChange": "2eb63d812179e5217306b90a651b95bfe7169c81", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void reportProgress(String taskDecription)", "signatureAfterChange": " \tprotected void reportProgress(String taskDecription)", "diff": ["-\tprivate void reportProgress(String taskDecription) {", "+\tprotected void reportProgress(String taskDecription) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a6caa1350f367387b8a5cbfad32cc39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 125, "signatureBeforeChange": "  \tprivate void retrieveIdentifierAndSetPositions(int start, int end, Name name)", "signatureAfterChange": "  \tprotected void retrieveIdentifierAndSetPositions(int start, int end, Name name)", "diff": ["-", "-\tprivate void retrieveIdentifierAndSetPositions(int start, int end, Name name) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\tint token;", "-\t\ttry {", "-\t\t\twhile((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)  {", "-\t\t\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t\tint startName = this.scanner.startPosition;", "-\t\t\t\t\tint endName = this.scanner.currentPosition - 1;", "-\t\t\t\t\tname.setSourceRange(startName, endName - startName + 1);", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}", "+", "+\tprotected void retrieveIdentifierAndSetPositions(int start, int end, Name name) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\tint token;", "+\t\ttry {", "+\t\t\twhile((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)  {", "+\t\t\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\t\tint startName = this.scanner.startPosition;", "+\t\t\t\t\tint endName = this.scanner.currentPosition - 1;", "+\t\t\t\t\tname.setSourceRange(startName, endName - startName + 1);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c8cee630e65d1bf1f566eb6162a23bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "72a4987e03f2b3b01c1f1fa7e641153e8b607b6e", "commitAfterChange": "1da80432c78bbaea0a8998b6847ad81e0d9c87be", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tSourceTypeBinding typeInvocation, \t\tboolean staticOnly, \t\tboolean staticFieldsAndMethodOnly, \t\tObjectVector typesFound, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems)", "signatureAfterChange": "  \tprotected void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tSourceTypeBinding typeInvocation, \t\tboolean staticOnly, \t\tboolean staticFieldsAndMethodOnly, \t\tObjectVector typesFound, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems)", "diff": ["-\tprivate void findMemberTypes(", "+\tprotected void findMemberTypes("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3df7f2870ad861964fc26e7d34ac634f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 151, "signatureBeforeChange": " \t \tprivate void setTypeForField(FieldDeclaration fieldDeclaration, Type type, int extraDimension)", "signatureAfterChange": " \t \tprotected void setTypeForField(FieldDeclaration fieldDeclaration, Type type, int extraDimension)", "diff": ["-\t", "-\tprivate void setTypeForField(FieldDeclaration fieldDeclaration, Type type, int extraDimension) {", "-\t\tif (extraDimension != 0) {", "-\t\t\tif (type.isArrayType()) {", "-\t\t\t\tArrayType arrayType = (ArrayType) type;", "-\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "-\t\t\t\tif (remainingDimensions == 0)  {", "-\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "-\t\t\t\t\tType elementType = arrayType.getElementType();", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\telementType.setParent(null, null);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "-\t\t\t\t\tfieldDeclaration.setType(elementType);", "-\t\t\t\t} else {", "-\t\t\t\t\tint start = type.getStartPosition();", "-\t\t\t\t\tint length = type.getLength();", "-\t\t\t\t\tArrayType subarrayType = arrayType;", "-\t\t\t\t\tint index = extraDimension;", "-\t\t\t\t\twhile (index > 0) {", "-\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "-\t\t\t\t\t\tindex--;", "-\t\t\t\t\t}", "-\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "-\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\tsubarrayType.setParent(null, null);", "-\t\t\t\t\tfieldDeclaration.setType(subarrayType);", "-\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "-\t\t\t\t}", "-\t\t\t\tfieldDeclaration.setType(type);", "-\t\t} else {", "-\t\t\tif (type.isArrayType()) {", "-\t\t\t\t// update positions of the component types of the array type", "-\t\t\t\tint dimensions = ((ArrayType) type).getDimensions();", "-\t\t\t\tupdateInnerPositions(type, dimensions);", "-\t\t\t}", "-\t\t\tfieldDeclaration.setType(type);", "+\t", "+\tprotected void setTypeForField(FieldDeclaration fieldDeclaration, Type type, int extraDimension) {", "+\t\tif (extraDimension != 0) {", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "+\t\t\t\tif (remainingDimensions == 0)  {", "+\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "+\t\t\t\t\tType elementType = arrayType.getElementType();", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\telementType.setParent(null, null);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "+\t\t\t\t\tfieldDeclaration.setType(elementType);", "+\t\t\t\t} else {", "+\t\t\t\t\tint start = type.getStartPosition();", "+\t\t\t\t\tint length = type.getLength();", "+\t\t\t\t\tArrayType subarrayType = arrayType;", "+\t\t\t\t\tint index = extraDimension;", "+\t\t\t\t\twhile (index > 0) {", "+\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "+\t\t\t\t\t\tindex--;", "+\t\t\t\t\t}", "+\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "+\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\tsubarrayType.setParent(null, null);", "+\t\t\t\t\tfieldDeclaration.setType(subarrayType);", "+\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfieldDeclaration.setType(type);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\t// update positions of the component types of the array type", "+\t\t\t\tint dimensions = ((ArrayType) type).getDimensions();", "+\t\t\t\tupdateInnerPositions(type, dimensions);", "+\t\t\t}", "+\t\t\tfieldDeclaration.setType(type);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f0d8c3823795a1367c522e0c753bdb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchDocument.java", "commitBeforeChange": "130bf52e6e6a6b2abae63509dc107f8c8574de74", "commitAfterChange": "da8395b2f47f9ea261a2eac4c2a9b0e0621ba41a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic SearchDocument(String documentPath, SearchParticipant participant)", "signatureAfterChange": " \tprotected SearchDocument(String documentPath, SearchParticipant participant)", "diff": ["-\tpublic SearchDocument(String documentPath, SearchParticipant participant) {", "+\tprotected SearchDocument(String documentPath, SearchParticipant participant) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f44e15f4783a2cfce2b09213aa51828", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "commitAfterChange": "309aed033cc4257b36692ed1549ee0025e0800df", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate boolean checkNegative4()", "signatureAfterChange": " \tpublic boolean checkNegative4()", "diff": ["-\tprivate boolean checkNegative4() {", "+\tpublic boolean checkNegative4() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f940341f018c695ed13e7a641eedb59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/ByteConstant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " public ByteConstant(byte value)", "signatureAfterChange": " private ByteConstant(byte value)", "diff": ["-\tbyte value;", "-public ByteConstant(byte value) {", "+}", "+private ByteConstant(byte value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "402eac5dd5eeba23f1167f75a513947e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/DoubleConstant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic DoubleConstant(double value)", "signatureAfterChange": "  \tprivate DoubleConstant(double value)", "diff": ["-\t", "-\tpublic DoubleConstant(double value) {", "+", "+\tprivate DoubleConstant(double value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "403be4716f16363442402243cb9fcb83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "3631cf47f01fc0da1be7732f6c067adbe5bd4214", "commitAfterChange": "bcf1522935dfbdb0bc359777ceee5d7211666ccc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected static int asi(int state)", "signatureAfterChange": " public static int asi(int state)", "diff": ["-protected static int asi(int state) {", "+public static int asi(int state) {", "-\treturn asb[original_state(state)];", "+\treturn asb[original_state(state)]; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "405d1b786efa3ca79cc77cacb7729188", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "305e4f0c27f7df148c6acf3c313dda144407f8c1", "commitAfterChange": "c72a639799e1f7a209f8477bea888d0d19067c25", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException", "signatureAfterChange": "\r public void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException", "diff": ["-private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException {\r", "+public void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40a5096e82451b0d57c31ef63fb91dfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "f4ce17c14dcca58120b5d06b4ca1a613985e6128", "commitAfterChange": "0edf714bfdc0b0cf6f1e623d20bbac3ec3bfa5d0", "methodNumberBeforeChange": 250, "methodNumberAfterChange": 250, "signatureBeforeChange": " private void rejectIllegalLeadingTypeAnnotations(TypeReference typeReference)", "signatureAfterChange": " protected void rejectIllegalLeadingTypeAnnotations(TypeReference typeReference)", "diff": ["-private void rejectIllegalLeadingTypeAnnotations(TypeReference typeReference) {", "+protected void rejectIllegalLeadingTypeAnnotations(TypeReference typeReference) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4183b478a2e6d7df81e1a4c1fd5fd8d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException", "signatureAfterChange": "\r \r \tpublic void reportBinaryMatch(\r \t\tIMember binaryMember,\r \t\tIBinaryType info,\r \t\tint accuracy)\r \t\tthrows CoreException, JavaModelException", "diff": ["-}\r", "-private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException {\r", "-\tISourceRange range = binaryMember.getNameRange();\r", "-\tif (range.getOffset() == -1) {\r", "-\t\tClassFile classFile = (ClassFile)binaryMember.getClassFile();\r", "-\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "-\t\tif (mapper != null) {\r", "-\t\t\tIType type = classFile.getType();\r", "-\t\t\tchar[] contents = mapper.findSource(type, info);\r", "-\t\t\tif (contents != null) {\r", "-\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tint startIndex = range.getOffset();\r", "-\tint endIndex = startIndex + range.getLength() - 1;\r", "-\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "-}\r", "+\tpublic void reportBinaryMatch(\r", "+\t\tIMember binaryMember,\r", "+\t\tIBinaryType info,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException, JavaModelException {\r", "+\t\tISourceRange range = binaryMember.getNameRange();\r", "+\t\tif (range.getOffset() == -1) {\r", "+\t\t\tClassFile classFile = (ClassFile) binaryMember.getClassFile();\r", "+\t\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "+\t\t\tif (mapper != null) {\r", "+\t\t\t\tIType type = classFile.getType();\r", "+\t\t\t\tchar[] contents = mapper.findSource(type, info);\r", "+\t\t\t\tif (contents != null) {\r", "+\t\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "+\t\t}\r", "+\t\tint startIndex = range.getOffset();\r", "+\t\tint endIndex = startIndex + range.getLength() - 1;\r", "+\t\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "423aeaaabec29403ca002839e63f1102", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r protected JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "diff": ["-protected JavaElementInfo getElementInfo() throws JavaModelException {\r", "+public JavaElementInfo getElementInfo() throws JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43aae6ec91c96cedd5ab516ff36e5f5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate ClassFileReader classFileReader(IType type)", "signatureAfterChange": " \tpublic  ClassFileReader classFileReader(IType type)", "diff": ["+\t}", "+\tpublic  ClassFileReader classFileReader(IType type) {", "+\t\tIClassFile classFile = type.getClassFile(); ", "+\t\tif (((IOpenable)classFile).isOpen()) {", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\tsynchronized(manager){", "+\t\t\t\treturn (ClassFileReader)manager.getInfo(type);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tIPackageFragment pkg = type.getPackageFragment();", "+\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)pkg.getParent();", "+\t\t\ttry {", "+\t\t\t\tif (root.isArchive()) {", "+\t\t\t\t\tIPath zipPath = root.isExternal() ? root.getPath() : root.getResource().getLocation();", "+\t\t\t\t\tif (zipPath == null) return null; // location is null", "+\t\t\t\t\tZipFile zipFile = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "+\t\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [MatchLocator.classFileReader()] Creating ZipFile on \" + zipPath); //$NON-NLS-1$\t//$NON-NLS-2$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// TODO: (jerome) should use JavaModelManager.getZipFile(...) instead", "+\t\t\t\t\t\tzipFile = new ZipFile(zipPath.toOSString());", "+\t\t\t\t\t\tchar[] pkgPath = pkg.getElementName().toCharArray();", "+\t\t\t\t\t\tCharOperation.replace(pkgPath, '.', '/');", "+\t\t\t\t\t\tchar[] classFileName = classFile.getElementName().toCharArray();", "+\t\t\t\t\t\tchar[] path = pkgPath.length == 0 ? classFileName : CharOperation.concat(pkgPath, classFileName, '/');", "+\t\t\t\t\t\treturn ClassFileReader.read(zipFile, new String(path));", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\tif (zipFile != null) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tzipFile.close();", "+\t\t\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\treturn ClassFileReader.read(type.getPath().toOSString());", "+\t\t\t\t}", "+\t\t\t} catch (ClassFormatException e) {", "+\t\t\t\treturn null;", "+\t\t\t} catch (IOException e) {", "+\t\t\t\treturn null;", "+\t\t\t}", "-", "-\tprivate ClassFileReader classFileReader(IType type) {", "-\t\tIClassFile classFile = type.getClassFile(); ", "-\t\tif (((IOpenable)classFile).isOpen()) {", "-\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tsynchronized(manager){", "-\t\t\t\treturn (ClassFileReader)manager.getInfo(type);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tIPackageFragment pkg = type.getPackageFragment();", "-\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)pkg.getParent();", "-\t\t\ttry {", "-\t\t\t\tif (root.isArchive()) {", "-\t\t\t\t\tIPath zipPath = root.isExternal() ? root.getPath() : root.getResource().getLocation();", "-\t\t\t\t\tif (zipPath == null) return null; // location is null", "-\t\t\t\t\tZipFile zipFile = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "-\t\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [MatchLocator.classFileReader()] Creating ZipFile on \" + zipPath); //$NON-NLS-1$\t//$NON-NLS-2$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tzipFile = new ZipFile(zipPath.toOSString());", "-\t\t\t\t\t\tchar[] pkgPath = pkg.getElementName().toCharArray();", "-\t\t\t\t\t\tCharOperation.replace(pkgPath, '.', '/');", "-\t\t\t\t\t\tchar[] classFileName = classFile.getElementName().toCharArray();", "-\t\t\t\t\t\tchar[] path = pkgPath.length == 0 ? classFileName : CharOperation.concat(pkgPath, classFileName, '/');", "-\t\t\t\t\t\treturn ClassFileReader.read(zipFile, new String(path));", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tif (zipFile != null) {", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tzipFile.close();", "-\t\t\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\treturn ClassFileReader.read(type.getPath().toOSString());", "-\t\t\t\t}", "-\t\t\t} catch (ClassFormatException e) {", "-\t\t\t\treturn null;", "-\t\t\t} catch (IOException e) {", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "444acf078d03f29f2b55ee0a4898e030", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate boolean verifyCharsAfterReturnTag(int startPosition)", "signatureAfterChange": " \tprotected boolean verifyCharsAfterReturnTag(int startPosition)", "diff": ["-\tprivate boolean verifyCharsAfterReturnTag(int startPosition) {", "+\tprotected boolean verifyCharsAfterReturnTag(int startPosition) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44d32abf24e8bdd3fd62d68b920d4e94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void reportMethodDeclaration(AbstractMethodDeclaration methodDeclaration, IJavaElement parent, int accuracy) throws CoreException", "signatureAfterChange": " private void reportMethodDeclaration(AbstractMethodDeclaration methodDeclaration, IJavaElement parent, int accuracy) throws CoreException", "diff": ["-public void reportMethodDeclaration(AbstractMethodDeclaration methodDeclaration, IJavaElement parent, int accuracy) throws CoreException {", "+private void reportMethodDeclaration(AbstractMethodDeclaration methodDeclaration, IJavaElement parent, int accuracy) throws CoreException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "455b0f8a37b713cb032d4aba6a66b304", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "8164609d0329b8e1757d2e11bb01a0c925e98561", "commitAfterChange": "2fe88cd8bfeb264a7a89978a44e073d1eb448401", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private ITypeBinding getTypeBindingFromKey(final String key, final ICompilationUnit unit)", "signatureAfterChange": "     protected ITypeBinding getTypeBindingFromKey(final String key, final ICompilationUnit unit)", "diff": ["-    private ITypeBinding getTypeBindingFromKey(final String key, final ICompilationUnit unit){", "+    protected ITypeBinding getTypeBindingFromKey(final String key, final ICompilationUnit unit){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45fff1ac976680c9c12430b5d0c92de0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyNotificationTests.java", "commitBeforeChange": "ca79168b190819b66ae58549346eb222c2411abf", "commitAfterChange": "c2933480c6efd86534d66414d0baa0527f76ca45", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void changeSuper(ICompilationUnit unit, String existingSuper, String newSuper) throws JavaModelException", "signatureAfterChange": " protected void changeSuper(ICompilationUnit unit, String existingSuper, String newSuper) throws JavaModelException", "diff": ["-private void changeSuper(ICompilationUnit unit, String existingSuper, String newSuper) throws JavaModelException {", "+protected void changeSuper(ICompilationUnit unit, String existingSuper, String newSuper) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462ce6535fceaf7fa9f13fc6fb3b680c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "330aeaad59d1633d10c0cd3a9ee9ac57073b385f", "commitAfterChange": "960ce528d76bd309a28ce655fc14cff77629ffa5", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprivate int readToken() throws InvalidInputException", "signatureAfterChange": " \tprotected int readToken() throws InvalidInputException", "diff": ["-\tprivate int readToken() throws InvalidInputException {", "+\tprotected int readToken() throws InvalidInputException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "467df29e03d5f4ccddb257e75569f8e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "9951b7a54ba18cc36a88513505c20a6b6559265f", "commitAfterChange": "37e893fac6e74361f92234e78fe4ff338a9de8c2", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \tprotected IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots)", "signatureAfterChange": "\r \tprivate IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots)", "diff": ["-\tprotected IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots) {\r", "+\tprivate IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "470930e7d2a07bdbfe01af30f6f86d60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "424b9c711eb8f066b325841662effb171f3ae4ef", "commitAfterChange": "4d19416746402b8fbbfd02c13772658da70a345a", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \tprivate IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots)", "signatureAfterChange": "\r \tpublic IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots)", "diff": ["-\tprivate IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots) {\r", "+\tpublic IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "472ba71ee25c3e6a641820a0abdf906b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "0c9d35cff2dc84f5482dc68d6d37735087c6900a", "commitAfterChange": "ec83f4485fd98b95e4e8e2158e7e66ce8f1734fe", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void enterType(TypeInfo typeInfo)", "signatureAfterChange": " \tpublic void enterType(TypeInfo typeInfo)", "diff": ["-\t}", "-\tprivate void enterType(TypeInfo typeInfo) {", "+\tpublic void enterType(TypeInfo typeInfo) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "485375fcb0a6129b5ffd5f9cf7bad079", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public char[] indexEntryPrefix()", "signatureAfterChange": " protected char[] indexEntryPrefix()", "diff": ["-public char[] indexEntryPrefix(){", "+protected char[] indexEntryPrefix(){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4937a51aee7483c9c466bff937243078", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "e33d1d49197e74ff989373e5654ba4910b19fb1b", "commitAfterChange": "1c57a8b80894f534ef4d324047b216780660b476", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " private static boolean waitUntilResourceDeleted(IResource resource)", "signatureAfterChange": " public static boolean waitUntilResourceDeleted(IResource resource)", "diff": ["-private static boolean waitUntilResourceDeleted(IResource resource) {", "+public static boolean waitUntilResourceDeleted(IResource resource) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ab5a00a9568d99ef8e88ab52a26ad1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "80e40b4c60040fa0aa8e1c95f16e2597f3f0acf0", "commitAfterChange": "f9277e3d6f326ff6a770d54a63a8fe0127208bbc", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-private MethodBinding resolveTypesFor(MethodBinding method) {", "+public MethodBinding resolveTypesFor(MethodBinding method) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ab5d6ed7234b200c47f7693fe7a8b29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tprotected void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["-\tprotected void traverseDelta(", "+\tprivate void traverseDelta("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4beae47d73bd631d2046f5110d63204b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 11, "signatureBeforeChange": "\t  \tprivate void completeRecord(ArrayType arrayType, org.eclipse.jdt.internal.compiler.ast.ASTNode astNode)", "signatureAfterChange": "  \tprotected void completeRecord(ArrayType arrayType, org.eclipse.jdt.internal.compiler.ast.ASTNode astNode)", "diff": ["-", "-\tprivate void completeRecord(ArrayType arrayType, org.eclipse.jdt.internal.compiler.ast.ASTNode astNode) {", "+\tprotected void completeRecord(ArrayType arrayType, org.eclipse.jdt.internal.compiler.ast.ASTNode astNode) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bfbddead9793f7f4b771233d7eb56e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void report(IResource resource, int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException", "signatureAfterChange": " protected void report(IResource resource, int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException", "diff": ["-}", "-public void report(IResource resource, int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException {", "+protected void report(IResource resource, int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c6b39ebda36270c925161ce5cf61c12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "8c9e171f64b2b088eda3049713163ec0a16b0a05", "commitAfterChange": "cdc11c6e72240b1766f8f5810b1fb669da307c66", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tprivate boolean verifySpaceOrEndComment()", "signatureAfterChange": " \tprotected boolean verifySpaceOrEndComment()", "diff": ["-\tprivate boolean verifySpaceOrEndComment() {", "+\tprotected boolean verifySpaceOrEndComment() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d00c1f80cf953b8519b92f7de05fb82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " protected CompilationUnit(PackageFragment parent, String name, WorkingCopyOwner owner)", "signatureAfterChange": " public CompilationUnit(PackageFragment parent, String name, WorkingCopyOwner owner)", "diff": ["-protected CompilationUnit(PackageFragment parent, String name, WorkingCopyOwner owner) {", "+public CompilationUnit(PackageFragment parent, String name, WorkingCopyOwner owner) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d1e55d1de4c7fa47452279efa7e8cfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarFactoryContainer.java", "commitBeforeChange": "f1d83e37dc72ba6d2676594fd1c64161817b3d74", "commitAfterChange": "50c8fc7c21507137e2b63d15c742a120cb954eef", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tprotected abstract File getJarFile();", "signatureAfterChange": " \t \tpublic abstract File getJarFile();", "diff": ["-\tprotected abstract File getJarFile();", "+\tpublic abstract File getJarFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da6638499247de309cf17ab0773276c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "08af074ff5e080b815672c2a130ef69700b120d8", "commitAfterChange": "d95449cf37bb2e33a7804a35ceffb191c7190444", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " final NodeInfoStore getNodeStore()", "signatureAfterChange": " \tprotected NodeInfoStore getNodeStore()", "diff": ["-\t/* package */ final NodeInfoStore getNodeStore() {", "+\t */", "+\tprotected NodeInfoStore getNodeStore() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dbd5d19092f959a15dc7f37b417d3de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e324bd72a2ecbc6e1bdd32341437a15a42c9f6a0", "commitAfterChange": "2a60eadf1435696edd56c36ce2da6024b8c6f1cd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate final void addInsertEdit(int insertPosition, String insertedString)", "signatureAfterChange": "  \tpublic final void addInsertEdit(int insertPosition, String insertedString)", "diff": ["-\tprivate final void addInsertEdit(int insertPosition, String insertedString) {", "+\tpublic final void addInsertEdit(int insertPosition, String insertedString) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dbefc2d56c0a985afb96629de1106a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "34b4972480c62fc99b17d4728db2648e98460b52", "commitAfterChange": "a234173ab4d645c8990c97cafa00ec82ce0a909f", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  \tprivate static IPackageFragment getPackageFragment(char[] fileName, int pkgEnd, int jarSeparator)", "signatureAfterChange": "  \tpublic static IPackageFragment getPackageFragment(char[] fileName, int pkgEnd, int jarSeparator)", "diff": ["-\tprivate static IPackageFragment getPackageFragment(char[] fileName, int pkgEnd, int jarSeparator) {", "+\tpublic static IPackageFragment getPackageFragment(char[] fileName, int pkgEnd, int jarSeparator) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dd9384f6f3f5b6057aac1079f348ee4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void reportFieldDeclaration(FieldDeclaration fieldDeclaration, IJavaElement parent, int accuracy) throws CoreException", "signatureAfterChange": " private void reportFieldDeclaration(FieldDeclaration fieldDeclaration, IJavaElement parent, int accuracy) throws CoreException", "diff": ["-public void reportFieldDeclaration(FieldDeclaration fieldDeclaration, IJavaElement parent, int accuracy) throws CoreException {", "+private void reportFieldDeclaration(FieldDeclaration fieldDeclaration, IJavaElement parent, int accuracy) throws CoreException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e009c4a4d1ac3fa861c3f49aa38db56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "865f0d98bfa165e288339ed90c13b870dd7b485b", "commitAfterChange": "049a10d559ac98007e03174de215c833cb620a6a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprotected IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "signatureAfterChange": " \tsynchronized IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "diff": ["-\tprotected IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding) {", "+\tsynchronized IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e6aacb94a8b9baf9919fd54bacaa39a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 154, "signatureBeforeChange": "  \tprivate void setTypeForSingleVariableDeclaration(SingleVariableDeclaration singleVariableDeclaration, Type type, int extraDimension)", "signatureAfterChange": "  \tprotected void setTypeForSingleVariableDeclaration(SingleVariableDeclaration singleVariableDeclaration, Type type, int extraDimension)", "diff": ["-", "-\tprivate void setTypeForSingleVariableDeclaration(SingleVariableDeclaration singleVariableDeclaration, Type type, int extraDimension) {", "-\t\tif (extraDimension != 0) {", "-\t\t\tif (type.isArrayType()) {", "-\t\t\t\tArrayType arrayType = (ArrayType) type;", "-\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "-\t\t\t\tif (remainingDimensions == 0)  {", "-\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "-\t\t\t\t\tType elementType = arrayType.getElementType();", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\telementType.setParent(null, null);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "-\t\t\t\t\tsingleVariableDeclaration.setType(elementType);", "-\t\t\t\t} else {", "-\t\t\t\t\tint start = type.getStartPosition();", "-\t\t\t\t\tint length = type.getLength();", "-\t\t\t\t\tArrayType subarrayType = arrayType;", "-\t\t\t\t\tint index = extraDimension;", "-\t\t\t\t\twhile (index > 0) {", "-\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "-\t\t\t\t\t\tindex--;", "-\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "-\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\tsubarrayType.setParent(null, null);", "-\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "-\t\t\t\t\tsingleVariableDeclaration.setType(subarrayType);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tsingleVariableDeclaration.setType(type);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tsingleVariableDeclaration.setType(type);", "-\t\t}", "-\t}", "+", "+\tprotected void setTypeForSingleVariableDeclaration(SingleVariableDeclaration singleVariableDeclaration, Type type, int extraDimension) {", "+\t\tif (extraDimension != 0) {", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "+\t\t\t\tif (remainingDimensions == 0)  {", "+\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "+\t\t\t\t\tType elementType = arrayType.getElementType();", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\telementType.setParent(null, null);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "+\t\t\t\t\tsingleVariableDeclaration.setType(elementType);", "+\t\t\t\t} else {", "+\t\t\t\t\tint start = type.getStartPosition();", "+\t\t\t\t\tint length = type.getLength();", "+\t\t\t\t\tArrayType subarrayType = arrayType;", "+\t\t\t\t\tint index = extraDimension;", "+\t\t\t\t\twhile (index > 0) {", "+\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "+\t\t\t\t\t\tindex--;", "+\t\t\t\t\t}", "+\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "+\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\tsubarrayType.setParent(null, null);", "+\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "+\t\t\t\t\tsingleVariableDeclaration.setType(subarrayType);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tsingleVariableDeclaration.setType(type);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tsingleVariableDeclaration.setType(type);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eaeac1b6cc8bf6e50b5b0e0c25309f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "42ca451da7c2f530c011e817394695d5527df6c3", "commitAfterChange": "14e98e44decb0b01d65f86bf524907d7cc881ea2", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " private void parseTags(NLSLine line)", "signatureAfterChange": " protected void parseTags(NLSLine line)", "diff": ["-private void parseTags(NLSLine line) {", "+protected void parseTags(NLSLine line) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5147ee35de9628941edb3d0c10740df6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tprotected ICompilerRequestor getBatchRequestor()", "signatureAfterChange": "\r \tpublic ICompilerRequestor getBatchRequestor()", "diff": ["-\tprotected ICompilerRequestor getBatchRequestor() {\r", "+\tpublic ICompilerRequestor getBatchRequestor() {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "517fe90b84b8ee426a2a3e503446e357", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate Object parseMember(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprotected Object parseMember(Object receiver) throws InvalidInputException", "diff": ["-\tprivate Object parseMember(Object receiver) throws InvalidInputException {", "+\tprotected Object parseMember(Object receiver) throws InvalidInputException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52b7981c30063ee32fb37d2b5ca5f302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 75, "signatureBeforeChange": " private final boolean atReferenceExpression()", "signatureAfterChange": "  protected final boolean atReferenceExpression()", "diff": ["-private final boolean atReferenceExpression() { // Did the '<' we saw just now herald a reference expression ?", "+", "+protected final boolean atReferenceExpression() { // Did the '<' we saw just now herald a reference expression ?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5394f31ea0b90714573884c6356ebcf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 121, "signatureBeforeChange": " \tprivate int retrieveEndOfDimensionsPosition(int start, int end)", "signatureAfterChange": " \tprotected int retrieveEndOfDimensionsPosition(int start, int end)", "diff": ["-\t */", "-\tprivate int retrieveEndOfDimensionsPosition(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\tint foundPosition = -1;", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET:", "-\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_BLOCK:", "-\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_JAVADOC:", "-\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_LINE:", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET://166", "-\t\t\t\t\t\tfoundPosition = this.scanner.currentPosition - 1;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\treturn foundPosition;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn foundPosition;", "-\t}", "+\t */", "+\tprotected int retrieveEndOfDimensionsPosition(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\tint foundPosition = -1;", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET:", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_BLOCK:", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_JAVADOC:", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_LINE:", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET://166", "+\t\t\t\t\t\tfoundPosition = this.scanner.currentPosition - 1;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\treturn foundPosition;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn foundPosition;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53ba2bcaabcc16dd7f29628ac8494c20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 101, "signatureBeforeChange": "   \tprivate Comment createComment(int[] positions)", "signatureAfterChange": "  \tprotected Comment createComment(int[] positions)", "diff": ["+", "+\tprotected Comment createComment(int[] positions) {", "+\t\t// Create comment node", "+\t\tComment comment = null;", "+\t\tint start = positions[0];", "+\t\tint end = positions[1];", "+\t\tif (positions[1]>0) { // Javadoc comments have positive end position", "+\t\t\tthis.ast.newJavadoc();", "+\t\t\tJavadoc docComment = this.docParser.parse(positions);", "+\t\t\tif (docComment == null) return null;", "+\t\t\tcomment = docComment;", "+\t\t} else {", "+\t\t\tend = -end;", "+\t\t\tif (positions[0]>0) { // Block comment have positive start position", "+\t\t\t\tcomment = this.ast.newBlockComment();", "+\t\t\t} else { // Line comment have negative start and end position", "+\t\t\t\tstart = -start;", "+\t\t\t\tcomment = this.ast.newLineComment();", "+\t\t\t}", "+\t\t\tcomment.setSourceRange(start, end - start);", "+\t\t}", "+\t\treturn comment;", "+\t}", "-", "-\tprivate Comment createComment(int[] positions) {", "-\t\t// Create comment node", "-\t\tComment comment = null;", "-\t\tint start = positions[0];", "-\t\tint end = positions[1];", "-\t\tif (positions[1]>0) { // Javadoc comments have positive end position", "-\t\t\tthis.ast.newJavadoc();", "-\t\t\tJavadoc docComment = this.docParser.parse(positions);", "-\t\t\tif (docComment == null) return null;", "-\t\t\tcomment = docComment;", "-\t\t} else {", "-\t\t\tend = -end;", "-\t\t\tif (positions[0]>0) { // Block comment have positive start position", "-\t\t\t\tcomment = this.ast.newBlockComment();", "-\t\t\t} else { // Line comment have negative start and end position", "-\t\t\t\tstart = -start;", "-\t\t\t\tcomment = this.ast.newLineComment();", "-\t\t\t}", "-\t\t\tcomment.setSourceRange(start, end - start);", "-\t\t}", "-\t\treturn comment;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "540498d8c2976a888cf0d78d307746e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "0ec72d2d01e922936e8894589d46ed7fef008881", "commitAfterChange": "82ebc709013252385fce65c14aa676e8e0d39c6f", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "\r \r \tprivate String[] projectPrerequisites(IClasspathEntry[] entries)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \r \tpublic String[] projectPrerequisites(IClasspathEntry[] entries)\r \t\tthrows JavaModelException", "diff": ["-\tprivate String[] projectPrerequisites(IClasspathEntry[] entries)\r", "+\tpublic String[] projectPrerequisites(IClasspathEntry[] entries)\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54e8f1f306a5ef1f36d44c29f380a91b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0fcbdf3f242eca695398990480b5252f47b13157", "commitAfterChange": "bdb5fd6b326428cc9f0c1c9c5974b9a701aacf91", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tprivate boolean deleteDerivedResources(final IResource resource) \t\tthrows CoreException", "signatureAfterChange": " \tpublic boolean deleteDerivedResources(final IResource resource) \t\tthrows CoreException", "diff": ["-\tprivate boolean deleteDerivedResources(final IResource resource)", "+\tpublic boolean deleteDerivedResources(final IResource resource)", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "556a40137084c37b0503ea1bc767f98b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CharArrayCache.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " public int put(char[] key, int value)", "signatureAfterChange": " private int put(char[] key, int value)", "diff": ["-public int put(char[] key, int value) { ", "+private int put(char[] key, int value) { "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "560a10d65926a56d84506511925b1af9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AbstractSelectionTest.java", "commitBeforeChange": "2bf771c6d451611ded7f253156b9c04a7039c1a6", "commitAfterChange": "82927598a3b9e9939e0891fd2a09c26df44c0872", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private AstNode findMethod(TypeDeclaration type, int cursorLocation)", "signatureAfterChange": " protected AstNode findMethod(TypeDeclaration type, int cursorLocation)", "diff": ["-private AstNode findMethod(TypeDeclaration type, int cursorLocation) {", "+protected AstNode findMethod(TypeDeclaration type, int cursorLocation) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56f6785c98c751c1a334b9bcd224b9d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tpublic void reportBinaryMatch(\r \t\tIMember binaryMember,\r \t\tIBinaryType info,\r \t\tint accuracy)\r \t\tthrows CoreException, JavaModelException", "signatureAfterChange": "\r private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException", "diff": ["-\r", "-\tpublic void reportBinaryMatch(\r", "-\t\tIMember binaryMember,\r", "-\t\tIBinaryType info,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException, JavaModelException {\r", "-\t\tISourceRange range = binaryMember.getNameRange();\r", "-\t\tif (range.getOffset() == -1) {\r", "-\t\t\tClassFile classFile = (ClassFile) binaryMember.getClassFile();\r", "-\t\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "-\t\t\tif (mapper != null) {\r", "-\t\t\t\tIType type = classFile.getType();\r", "-\t\t\t\tchar[] contents = mapper.findSource(type, info);\r", "-\t\t\t\tif (contents != null) {\r", "-\t\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\t\t\t}\r", "+}\r", "+private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException {\r", "+\tISourceRange range = binaryMember.getNameRange();\r", "+\tif (range.getOffset() == -1) {\r", "+\t\tClassFile classFile = (ClassFile)binaryMember.getClassFile();\r", "+\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "+\t\tif (mapper != null) {\r", "+\t\t\tIType type = classFile.getType();\r", "+\t\t\tchar[] contents = mapper.findSource(type, info);\r", "+\t\t\tif (contents != null) {\r", "+\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\tint startIndex = range.getOffset();\r", "-\t\tint endIndex = startIndex + range.getLength() - 1;\r", "-\t\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+\tint startIndex = range.getOffset();\r", "+\tint endIndex = startIndex + range.getLength() - 1;\r", "+\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "593e7487d293127381de2578bbff5bc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "a56d2afc8ddb8dcda8f74b90d2b39898295865d2", "commitAfterChange": "fc69abbb26faa5011e1c3f5f4862367455008505", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprotected IJavaElementDelta searchForDelta(IJavaElement element, IJavaElementDelta delta)", "signatureAfterChange": " \t\tprivate IJavaElementDelta searchForDelta(IJavaElement element, IJavaElementDelta delta)", "diff": ["+\t\t */", "+\t\tprivate IJavaElementDelta searchForDelta(IJavaElement element, IJavaElementDelta delta) {", "+\t\t\tif (delta == null) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tif (delta.getElement().equals(element)) {", "+\t\t\t\treturn delta;", "+\t\t\t}", "+\t\t\tfor (int i= 0; i < delta.getAffectedChildren().length; i++) {", "+\t\t\t\tIJavaElementDelta child= searchForDelta(element, delta.getAffectedChildren()[i]);", "+\t\t\t\tif (child != null) {", "+\t\t\t\t\treturn child;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn null;", "+\t\t}", "-\t */", "-\tprotected IJavaElementDelta searchForDelta(IJavaElement element, IJavaElementDelta delta) {", "-", "-\t\tif (delta == null) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tif (delta.getElement().equals(element)) {", "-\t\t\treturn delta;", "-\t\t}", "-\t\tfor (int i= 0; i < delta.getAffectedChildren().length; i++) {", "-\t\t\tIJavaElementDelta child= searchForDelta(element, delta.getAffectedChildren()[i]);", "-\t\t\tif (child != null) {", "-\t\t\t\treturn child;", "-\t\t\t}", "-\t\t}", "-\t\treturn null;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "593ec98a60958b2288b504be8f31bd09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "14369aade824a8ea9cd172f06aeb63b163bb9bf0", "commitAfterChange": "76049c710d8a15447cdfbafce1296b7824e89c76", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate ICompilationUnit[] getWorkingCopies()", "signatureAfterChange": " \tpublic ICompilationUnit[] getWorkingCopies()", "diff": ["-\tprivate ICompilationUnit[] getWorkingCopies() {", "+\tpublic ICompilationUnit[] getWorkingCopies() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5964e9647340d7200c039b485af99251", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/ShortConstant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " public ShortConstant(short value)", "signatureAfterChange": " private ShortConstant(short value)", "diff": ["-\tshort value;", "-public ShortConstant(short value) {", "+}", "+private ShortConstant(short value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59c924465a6c4667813fac0b355bb360", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Formatter/test447/Format_in.java", "commitBeforeChange": "9cd8ac9158e8cf65a77f69d8bfcd62dc9418f984", "commitAfterChange": "c8ff3cbc92fbc03cd36a58b694b93e2376e6a266", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public void temp()", "signatureAfterChange": "    private void temp()", "diff": ["-  public void temp() {", "+  private void temp() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a6d14db81466db8362984fff66c61f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NamedMember.java", "commitBeforeChange": "ff86d627289bd5fa19173cbe1ab9d473000077f6", "commitAfterChange": "de542d47e7857076ff550f4560e517bc0773f2ce", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic String getFullyQualifiedParameterizedName(String fullyQualifiedName, String uniqueKey) throws JavaModelException", "signatureAfterChange": "  \tprotected String getFullyQualifiedParameterizedName(String fullyQualifiedName, String uniqueKey) throws JavaModelException", "diff": ["-\tpublic String getFullyQualifiedParameterizedName(String fullyQualifiedName, String uniqueKey) throws JavaModelException {", "+\tprotected String getFullyQualifiedParameterizedName(String fullyQualifiedName, String uniqueKey) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5abc609a30848ac4d83b58e1339e8701", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void addToParentInfo(Openable child)", "signatureAfterChange": " \tprivate void addToParentInfo(Openable child)", "diff": ["-\tprotected void addToParentInfo(Openable child) {", "-", "+\tprivate void addToParentInfo(Openable child) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba67db14a8c87b51f43ca678fb93c20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "4cb58ab533c79220136a132032afc1404604a700", "commitAfterChange": "c6eb7c253f30ad97be4157d7b386bdebd6f05934", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t     private static synchronized String getString(IJavaProject jproject, String optionName)", "signatureAfterChange": " \t     public static synchronized String getString(IJavaProject jproject, String optionName)", "diff": ["-    private static synchronized String getString(IJavaProject jproject, String optionName) {", "+    public static synchronized String getString(IJavaProject jproject, String optionName) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5baedc3a09ce3fb98083e71fafa481fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate static ClasspathVariableInitializer getClasspathVariableInitializer(String variable)", "signatureAfterChange": " \tpublic static ClasspathVariableInitializer getClasspathVariableInitializer(String variable)", "diff": ["-\tprivate static ClasspathVariableInitializer getClasspathVariableInitializer(String variable){", "+\tpublic static ClasspathVariableInitializer getClasspathVariableInitializer(String variable){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c6e05bbb451f815bc6dd5cb857c2f70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void reportReference( \tAstNode reference, \tTypeDeclaration typeDeclaration, \tFieldDeclaration fieldDeclaration, \tIJavaElement parent, \tint accuracy) \tthrows CoreException", "signatureAfterChange": " private void reportReference( \tAstNode reference, \tTypeDeclaration typeDeclaration, \tFieldDeclaration fieldDeclaration, \tIJavaElement parent, \tint accuracy) \tthrows CoreException", "diff": ["-public void reportReference(", "+private void reportReference("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c6e565e3b281e08ce6dffb888a4353f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileComparatorTest.java", "commitBeforeChange": "e97394b80d49fb5dc34a1a6fec8af65d69ccf130", "commitAfterChange": "c97311a16d75da90e28de4b6dbfdb73ed4c2959e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void compileAndDeploy(String source, String className)", "signatureAfterChange": "   \tprivate void compileAndDeploy(String source, String className)", "diff": ["-\tpublic void compileAndDeploy(String source, String className) {", "+\tprivate void compileAndDeploy(String source, String className) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c7ec277afb7f28c7dc77f7e6177abd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "be89ab2e0ec1e398e3b0603a492d22c9815a6eef", "commitAfterChange": "0460b2dc122bab8976f113fd5dfefdda9aaa1649", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": "\r protected void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-private void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {\r", "+protected void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cac072b4e8c9ff65831f11514bd751d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ClasspathVariableInitializer.java", "commitBeforeChange": "bd6d2b237d7387fba1f23d192ad6b2abfbd96ace", "commitAfterChange": "a523ec2534cc7a4ca1e41f83aa64a686ffb07824", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected ClasspathVariableInitializer()", "signatureAfterChange": "     public ClasspathVariableInitializer()", "diff": ["-    protected ClasspathVariableInitializer() {", "+    public ClasspathVariableInitializer() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d4da55c5323443f58ca2af4a36fb4ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tpublic void reportBinaryMatch(\r \t\tIMember binaryMember,\r \t\tIBinaryType info,\r \t\tint accuracy)\r \t\tthrows CoreException, JavaModelException", "signatureAfterChange": "\r private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException", "diff": ["-\r", "-\tpublic void reportBinaryMatch(\r", "-\t\tIMember binaryMember,\r", "-\t\tIBinaryType info,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException, JavaModelException {\r", "-\t\tISourceRange range = binaryMember.getNameRange();\r", "-\t\tif (range.getOffset() == -1) {\r", "-\t\t\tClassFile classFile = (ClassFile) binaryMember.getClassFile();\r", "-\t\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "-\t\t\tif (mapper != null) {\r", "-\t\t\t\tIType type = classFile.getType();\r", "-\t\t\t\tchar[] contents = mapper.findSource(type, info);\r", "-\t\t\t\tif (contents != null) {\r", "-\t\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\t\t\t}\r", "+}\r", "+private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException {\r", "+\tISourceRange range = binaryMember.getNameRange();\r", "+\tif (range.getOffset() == -1) {\r", "+\t\tClassFile classFile = (ClassFile)binaryMember.getClassFile();\r", "+\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "+\t\tif (mapper != null) {\r", "+\t\t\tIType type = classFile.getType();\r", "+\t\t\tchar[] contents = mapper.findSource(type, info);\r", "+\t\t\tif (contents != null) {\r", "+\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\tint startIndex = range.getOffset();\r", "-\t\tint endIndex = startIndex + range.getLength() - 1;\r", "-\t\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+\tint startIndex = range.getOffset();\r", "+\tint endIndex = startIndex + range.getLength() - 1;\r", "+\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d628f22ac8f69d94af2c869eb2c2c2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tprotected IErrorHandlingPolicy getHandlingPolicy()", "signatureAfterChange": "\r \tpublic IErrorHandlingPolicy getHandlingPolicy()", "diff": ["-\tprotected IErrorHandlingPolicy getHandlingPolicy() {\r", "+\tpublic IErrorHandlingPolicy getHandlingPolicy() {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e480fd61df1031440872ee4ac0dc500", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tprotected IProblemFactory getProblemFactory()", "signatureAfterChange": "\r \tpublic IProblemFactory getProblemFactory()", "diff": ["-\tprotected IProblemFactory getProblemFactory() {\r", "+\tpublic IProblemFactory getProblemFactory() {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e4c9095a116899af503b91b57ad02c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "commitAfterChange": "a502b956779c4dac7f761502999cc6d149ba7556", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 37, "signatureBeforeChange": " \t\t \t\tpublic void printlnOut(String s)", "signatureAfterChange": "  \t\tprivate void printlnOut(String s)", "diff": ["-\t\t", "-\t\tpublic void printlnOut(String s) {", "+", "+\t\tprivate void printlnOut(String s) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "612c1f04813eb83f45a2a51c13b50fba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "3e19fda2df1bc113dba7573b5ff115a5be6c5c02", "commitAfterChange": "fd4885a8e3e73ea3cccc8e028b8c128b958bea94", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  protected boolean isBoxingCompatible(TypeBinding expressionType, TypeBinding targetType, Expression expression, Scope scope)", "signatureAfterChange": "  public boolean isBoxingCompatible(TypeBinding expressionType, TypeBinding targetType, Expression expression, Scope scope)", "diff": ["-protected boolean isBoxingCompatible(TypeBinding expressionType, TypeBinding targetType, Expression expression, Scope scope) {", "+public boolean isBoxingCompatible(TypeBinding expressionType, TypeBinding targetType, Expression expression, Scope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61a9a6f08a95bfc70fa2680219a6c3cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "9579e3add6a99053acfe6faec70c877feca5e8d3", "commitAfterChange": "542e863753b063e393ffd7f35e08fe8fe2f0bb63", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\r protected String toDebugString()", "signatureAfterChange": "\r public String toDebugString()", "diff": ["-protected String toDebugString() {\r", "+public String toDebugString() {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "627872ed76f7849472793223b9492086", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 259, "methodNumberAfterChange": 259, "signatureBeforeChange": "  public final void load(TypeBinding typeBinding, int resolvedPosition)", "signatureAfterChange": "  protected final void load(TypeBinding typeBinding, int resolvedPosition)", "diff": ["-public final void load(TypeBinding typeBinding, int resolvedPosition) {", "+protected final void load(TypeBinding typeBinding, int resolvedPosition) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6389fbac0dbfdf22a028f9e2025c127a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "98ad487e103c268099d7117573693243c8d3b8fc", "commitAfterChange": "721a9dcda02493639666143934bddb089e848d18", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\tprivate void append(IField field) throws JavaModelException", "signatureAfterChange": " \t\tprotected void append(IField field) throws JavaModelException", "diff": ["-\t\tprivate void append(IField field) throws JavaModelException {", "+\t\tprotected void append(IField field) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6821391b6596148293f65f26e978e104", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "ca79168b190819b66ae58549346eb222c2411abf", "commitAfterChange": "c2933480c6efd86534d66414d0baa0527f76ca45", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private boolean equals(IProblem pb1, IProblem pb2)", "signatureAfterChange": " public boolean equals(IProblem pb1, IProblem pb2)", "diff": ["-private boolean equals(IProblem pb1, IProblem pb2) {", "+public boolean equals(IProblem pb1, IProblem pb2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68dd9172dd9322827ac8a1d023c36331", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r \tprotected void outputClassFiles(CompilationResult unitResult)", "signatureAfterChange": "\r \r \tpublic void outputClassFiles(CompilationResult unitResult)", "diff": ["-\tprotected void outputClassFiles(CompilationResult unitResult) {\r", "+\tpublic void outputClassFiles(CompilationResult unitResult) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6964b45a0c34c3a4dfaddee19756b690", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "ee446c21d0aaa4f4c4b0513ad11960ed53ccba7d", "commitAfterChange": "271be052e104f1beefee4cd78039eca6ee6adb4f", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 33, "signatureBeforeChange": " private IMemberValuePair getMemberValuePair(MemberValuePair memberValuePair)", "signatureAfterChange": " protected IMemberValuePair getMemberValuePair(MemberValuePair memberValuePair)", "diff": ["-private IMemberValuePair getMemberValuePair(MemberValuePair memberValuePair) {", "+protected IMemberValuePair getMemberValuePair(MemberValuePair memberValuePair) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69da75f47ae7d33589d0e5cc4b8e1fb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "fe41a5ed7a14de553c93fde5ff3064717032f87a", "commitAfterChange": "75a9b073354511bd41fc601022882d52caaa8ded", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "\r private boolean isAffected(IJavaElementDelta delta)", "signatureAfterChange": "\r public boolean isAffected(IJavaElementDelta delta)", "diff": ["-private boolean isAffected(IJavaElementDelta delta) {\r", "+public boolean isAffected(IJavaElementDelta delta) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b71c828b31dfd1d7a3de5c9105d4384", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/StringConstant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public StringConstant(String value)", "signatureAfterChange": "  private StringConstant(String value)", "diff": ["-public StringConstant(String value) {", "+", "+private StringConstant(String value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c9f316f6b7b1ad1b1738dee4e6f3cc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e324bd72a2ecbc6e1bdd32341437a15a42c9f6a0", "commitAfterChange": "2a60eadf1435696edd56c36ce2da6024b8c6f1cd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate final void addReplaceEdit(int start, int end, String replacement)", "signatureAfterChange": " \t \tpublic final void addReplaceEdit(int start, int end, String replacement)", "diff": ["-\tprivate final void addReplaceEdit(int start, int end, String replacement) {", "+\tpublic final void addReplaceEdit(int start, int end, String replacement) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cb956cf384245953225dd1898ddbaed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r protected JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "diff": ["-protected JavaElementInfo getElementInfo() throws JavaModelException {\r", "+public JavaElementInfo getElementInfo() throws JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d3e8893f641db0bf9330a3b0b91daa4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileComparatorTest.java", "commitBeforeChange": "e97394b80d49fb5dc34a1a6fec8af65d69ccf130", "commitAfterChange": "c97311a16d75da90e28de4b6dbfdb73ed4c2959e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic boolean areStructurallyDifferent(String classFile1, String classFile2, boolean orderRequired, boolean excludeSynthetic)", "signatureAfterChange": " \t \tprivate boolean areStructurallyDifferent(String classFile1, String classFile2, boolean orderRequired, boolean excludeSynthetic)", "diff": ["-\tpublic boolean areStructurallyDifferent(String classFile1, String classFile2, boolean orderRequired, boolean excludeSynthetic) {", "+\tprivate boolean areStructurallyDifferent(String classFile1, String classFile2, boolean orderRequired, boolean excludeSynthetic) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d810fe87b12e672d40b6a50633698b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 301, "methodNumberAfterChange": 319, "signatureBeforeChange": " public final void writeSignedWord(int pos, int value)", "signatureAfterChange": " private final void writeSignedWord(int pos, int value)", "diff": ["-public final void writeSignedWord(int pos, int value) {", "+private final void writeSignedWord(int pos, int value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e09e8efc67c89e58ce35a2b25df4af5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyNotificationTests.java", "commitBeforeChange": "ca79168b190819b66ae58549346eb222c2411abf", "commitAfterChange": "c2933480c6efd86534d66414d0baa0527f76ca45", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void changeVisibility(ICompilationUnit unit, String existingModifier, String newModifier) throws JavaModelException", "signatureAfterChange": " protected void changeVisibility(ICompilationUnit unit, String existingModifier, String newModifier) throws JavaModelException", "diff": ["-private void changeVisibility(ICompilationUnit unit, String existingModifier, String newModifier) throws JavaModelException {", "+protected void changeVisibility(ICompilationUnit unit, String existingModifier, String newModifier) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ea53d861441f29050d22d0a4274ffe1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "988b834a35e1571af05adddd8db1ce5aaa1f0ff0", "commitAfterChange": "c90773ded969a955dbf869e7d3cd599898423a64", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected CompilationUnit createAST(int JLSLevel, ICompilationUnit cu, boolean resolveBindings, boolean statementsRecovery)", "signatureAfterChange": "  \tprivate CompilationUnit createAST(int JLSLevel, ICompilationUnit cu, boolean resolveBindings, boolean statementsRecovery)", "diff": ["-\tprotected CompilationUnit createAST(int JLSLevel, ICompilationUnit cu, boolean resolveBindings, boolean statementsRecovery) {", "+\tprivate CompilationUnit createAST(int JLSLevel, ICompilationUnit cu, boolean resolveBindings, boolean statementsRecovery) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ed6d4e83b96b00bbf38ebb47519e150", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r protected JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "diff": ["-protected JavaElementInfo getElementInfo() throws JavaModelException {\r", "+public JavaElementInfo getElementInfo() throws JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "704f89f903ae864ef0587a8409d0267d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "865f0d98bfa165e288339ed90c13b870dd7b485b", "commitAfterChange": "049a10d559ac98007e03174de215c833cb620a6a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprotected IPackageBinding getPackageBinding(org.eclipse.jdt.internal.compiler.lookup.PackageBinding packageBinding)", "signatureAfterChange": " \tsynchronized IPackageBinding getPackageBinding(org.eclipse.jdt.internal.compiler.lookup.PackageBinding packageBinding)", "diff": ["-\tprotected IPackageBinding getPackageBinding(org.eclipse.jdt.internal.compiler.lookup.PackageBinding packageBinding) {", "+\tsynchronized IPackageBinding getPackageBinding(org.eclipse.jdt.internal.compiler.lookup.PackageBinding packageBinding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70c24ba3f8fb6d4bb8e9309d3148043e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/StandardVMLauncher.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void writeBatchFile(String fileName, Vector commandLine)", "signatureAfterChange": " protected void writeBatchFile(String fileName, Vector commandLine)", "diff": ["-private void writeBatchFile(String fileName, Vector commandLine) {", "+protected void writeBatchFile(String fileName, Vector commandLine) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70fdc9deeeee9407f2908f92af0ce1f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "b04af732a3a47936a23fd763b0f1a266fe2c010f", "commitAfterChange": "675036893efc507eeb48fc7f8ec7970945121ebd", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private ITypeBinding getTypeDefinitionBindingFromCorrectName(     \t\tfinal String fullyQualifiedName )", "signatureAfterChange": "     protected ITypeBinding getTypeDefinitionBindingFromCorrectName(     \t\tfinal String fullyQualifiedName )", "diff": ["-    private ITypeBinding getTypeDefinitionBindingFromCorrectName(", "+    protected ITypeBinding getTypeDefinitionBindingFromCorrectName("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70ffd115ecc53c08662f21c34b8007df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "305e4f0c27f7df148c6acf3c313dda144407f8c1", "commitAfterChange": "c72a639799e1f7a209f8477bea888d0d19067c25", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r private void parseBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": "\r public void parseBodies(CompilationUnitDeclaration unit)", "diff": ["-private void parseBodies(CompilationUnitDeclaration unit) {\r", "+public void parseBodies(CompilationUnitDeclaration unit) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e4c56cddf15ac200beaef13e2b3224", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java", "commitBeforeChange": "78950c7a462ba6fe8424532e69a4abeff0c7c745", "commitAfterChange": "bb74c75a01728288c8fd321cd0dfd5da07348196", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprotected boolean checkAccess(MethodScope methodScope)", "signatureAfterChange": "  \tpublic boolean checkAccess(MethodScope methodScope)", "diff": ["-\tprotected boolean checkAccess(MethodScope methodScope) {", "+\tpublic boolean checkAccess(MethodScope methodScope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b624f7d6b927114d9b82fd41f2f329", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "e0325c6422f39f597d14dd4c27ecf43875108a27", "commitAfterChange": "f389464fbe74a4e5c3adfde8847a7200db37d80c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic ClassFile()", "signatureAfterChange": " \tprotected ClassFile()", "diff": ["-\tpublic ClassFile() {", "+\tprotected ClassFile() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72e9ebfa54548ab225c5db1f19515e48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationWalker.java", "commitBeforeChange": "8d3c2646ec0224ab936125ae7e1adde5786e1231", "commitAfterChange": "dfa40837336948a1f985e74dddef96333913f44c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate TypeAnnotationWalker(IBinaryTypeAnnotation[] typeAnnotations)", "signatureAfterChange": " \tpublic TypeAnnotationWalker(IBinaryTypeAnnotation[] typeAnnotations)", "diff": ["-\tprivate TypeAnnotationWalker(IBinaryTypeAnnotation[] typeAnnotations) {", "+\tpublic TypeAnnotationWalker(IBinaryTypeAnnotation[] typeAnnotations) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "734f5689ca0490854caaf1206dd9a5c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Region.java", "commitBeforeChange": "8e8d8e45c2ef2f6ead0467d2ea8c6dadb189ddb8", "commitAfterChange": "b3d1d871406f56d8ee454b6524d9decdbf5e4860", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void removeAllChildren(IJavaElement element)", "signatureAfterChange": " protected void removeAllChildren(IJavaElement element)", "diff": ["-private void removeAllChildren(IJavaElement element) {", "+protected void removeAllChildren(IJavaElement element) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75032ea7ba1e491df7f17bccdd782283", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "0c9d35cff2dc84f5482dc68d6d37735087c6900a", "commitAfterChange": "ec83f4485fd98b95e4e8e2158e7e66ce8f1734fe", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected void enterType(TypeInfo typeInfo)", "signatureAfterChange": " public void enterType(TypeInfo typeInfo)", "diff": ["-protected void enterType(TypeInfo typeInfo) {", "+public void enterType(TypeInfo typeInfo) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7523749a5677422e842279d738e43dbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f62fc9bd4adc94855b1129f538fa2510e9047295", "commitAfterChange": "73314cbf57aaa554bada2bddfa5532b422404c5a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r \tprotected Main(PrintWriter writer, boolean systemExitWhenFinished)", "signatureAfterChange": "\r \r \tpublic Main(PrintWriter writer, boolean systemExitWhenFinished)", "diff": ["-\tprotected Main(PrintWriter writer, boolean systemExitWhenFinished) {\r", "+\tpublic Main(PrintWriter writer, boolean systemExitWhenFinished) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75428e0423b4bae19af6b8f1d1523da2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r private void parseBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": "\r public void parseBodies(CompilationUnitDeclaration unit)", "diff": ["-private void parseBodies(CompilationUnitDeclaration unit) {\r", "+public void parseBodies(CompilationUnitDeclaration unit) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75f1711a3e9c954a17d101e527103e78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 18, "signatureBeforeChange": " public IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type)", "signatureAfterChange": " protected IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type)", "diff": ["-public IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type) {", "+protected IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76e8269965cd36573fc9a15e5d09adf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "e686f52588b3553d0b0ba4d48f2d54683dd7a4fd", "commitAfterChange": "4acccab2f9ef38ff3831903ed60c83256b8f84dc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprotected TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["-\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length) {", "+\tprotected TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7762253c5324eda4be5686f82802e09d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "commitAfterChange": "0bcd341ea781d3ca9f30d724e6161bfab2161b14", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  protected ReferenceBinding actualType()", "signatureAfterChange": "  public ReferenceBinding actualType()", "diff": ["-protected ReferenceBinding actualType() {", "+public ReferenceBinding actualType() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7938dd156d7264fd2fd67e915f3e8876", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "commitAfterChange": "0bcd341ea781d3ca9f30d724e6161bfab2161b14", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected ReferenceBinding actualType()", "signatureAfterChange": " \tpublic ReferenceBinding actualType()", "diff": ["-\tprotected ReferenceBinding actualType() {", "+\tpublic ReferenceBinding actualType() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a6469860797a08179eeab30a96d5e3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "25d70eac1f59d17fd35f15454804710ecb835662", "commitAfterChange": "e7e2695fe5657cf6f05f673f7f1f6646805752fe", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": " \t \tpublic void ensureSpaceBeforeReplace(ASTNode node)", "signatureAfterChange": " \t \tprivate void ensureSpaceBeforeReplace(ASTNode node)", "diff": ["-\tpublic void ensureSpaceBeforeReplace(ASTNode node) {", "+\tprivate void ensureSpaceBeforeReplace(ASTNode node) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac89c7269857d5e2e4313bfca3915b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "be89ab2e0ec1e398e3b0603a492d22c9815a6eef", "commitAfterChange": "0460b2dc122bab8976f113fd5dfefdda9aaa1649", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private void matchReportReference(ArrayTypeReference arrayRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": "\r protected void matchReportReference(ArrayTypeReference arrayRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-private void matchReportReference(ArrayTypeReference arrayRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {\r", "+protected void matchReportReference(ArrayTypeReference arrayRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7afacb5fef8eefb59300f2047ee901a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "65bcf10af454142ab48b1720e5cae843f9f8de26", "commitAfterChange": "781c71cd98430082e3c76eb6e3db76b4e84422eb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate IProject createExternalFoldersProject(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic IProject createExternalFoldersProject(IProgressMonitor monitor) throws CoreException", "diff": ["-\tprivate IProject createExternalFoldersProject(IProgressMonitor monitor) throws CoreException {", "+\tpublic IProject createExternalFoldersProject(IProgressMonitor monitor) throws CoreException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c519984430188cb1c359ec9e6473ac4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "commitAfterChange": "309aed033cc4257b36692ed1549ee0025e0800df", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate boolean checkNegative3()", "signatureAfterChange": " \tpublic boolean checkNegative3()", "diff": ["-\tprivate boolean checkNegative3() {", "+\tpublic boolean checkNegative3() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d1a333ee5f915a62c1dc5f504283df0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate void addEntry(IPath projectPath, IClasspathEntry entryPath) throws JavaModelException", "signatureAfterChange": " \tpublic void addEntry(IPath projectPath, IClasspathEntry entryPath) throws JavaModelException", "diff": ["-\tprivate void addEntry(IPath projectPath, IClasspathEntry entryPath) throws JavaModelException {", "+\tpublic void addEntry(IPath projectPath, IClasspathEntry entryPath) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d82b64e30cdc825d0ba69de2eb64e02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public void parseBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": "\r private void parseBodies(CompilationUnitDeclaration unit)", "diff": ["-public void parseBodies(CompilationUnitDeclaration unit) {\r", "+private void parseBodies(CompilationUnitDeclaration unit) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7db6cdd19aae6ccce427a1ce3b6b9fc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SourceElementParserTest.java", "commitBeforeChange": "0c9d35cff2dc84f5482dc68d6d37735087c6900a", "commitAfterChange": "ec83f4485fd98b95e4e8e2158e7e66ce8f1734fe", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void enterType(TypeInfo typeInfo)", "signatureAfterChange": " public void enterType(TypeInfo typeInfo)", "diff": ["-}", "-protected void enterType(TypeInfo typeInfo) {", "+public void enterType(TypeInfo typeInfo) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ea80babebe20d31c6c99255ad491139", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "2494bcad5f742a10ff88bea192f0681f78d18575", "commitAfterChange": "07e927ed287511fddef2c88ac5d7da471f80defa", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private int literalIndexForMethod(char[] selector, char[] signature)", "signatureAfterChange": " public int literalIndexForMethod(char[] selector, char[] signature)", "diff": ["-private int literalIndexForMethod(char[] selector, char[] signature) {", "+public int literalIndexForMethod(char[] selector, char[] signature) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eec369831cbeec12e25c5506b7b0aa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 113, "signatureBeforeChange": " \t \tprivate void recordPendingThisExpressionScopeResolution(ThisExpression thisExpression)", "signatureAfterChange": " \t \tprotected void recordPendingThisExpressionScopeResolution(ThisExpression thisExpression)", "diff": ["+\tprotected void recordPendingThisExpressionScopeResolution(ThisExpression thisExpression) {", "+\t\tif (this.pendingThisExpressionScopeResolution == null) {", "+\t\t\tthis.pendingThisExpressionScopeResolution = new HashSet();", "+\t\t}", "+\t\tthis.pendingThisExpressionScopeResolution.add(thisExpression);", "-\tprivate void recordPendingThisExpressionScopeResolution(ThisExpression thisExpression) {", "-\t\tif (this.pendingThisExpressionScopeResolution == null) {", "-\t\t\tthis.pendingThisExpressionScopeResolution = new HashSet();", "-\t\t}", "-\t\tthis.pendingThisExpressionScopeResolution.add(thisExpression);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fb82bcb86e52a75d9eaed3b892d944d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "a35b2833bbe20b6966d2d7b092c8550da4e14c5c", "commitAfterChange": "d12b44bacc78e993e03b687b009846c3ad2c83b6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic ASTRewrite(AST ast)", "signatureAfterChange": " \tprivate ASTRewrite(AST ast)", "diff": ["-\tpublic ASTRewrite(AST ast) {", "+\tprivate ASTRewrite(AST ast) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80fbf22950e484fd3afc1b527a9a9936", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "be89ab2e0ec1e398e3b0603a492d22c9815a6eef", "commitAfterChange": "0460b2dc122bab8976f113fd5dfefdda9aaa1649", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r private void matchReportReference(QualifiedTypeReference qTypeRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": "\r protected void matchReportReference(QualifiedTypeReference qTypeRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-private void matchReportReference(QualifiedTypeReference qTypeRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {\r", "+protected void matchReportReference(QualifiedTypeReference qTypeRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8140739b6f0fb668e5765f77749d591c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "28e62cb12c30aaca5e9cb07c8b5842b88ac8e145", "commitAfterChange": "355cf1c77842b6ad5bc5c80fd104a83d9e181efd", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \t \tpublic static URL getLibraryJavadocLocation(IClasspathEntry entry) throws JavaModelException", "signatureAfterChange": " \t \tprotected static URL getLibraryJavadocLocation(IClasspathEntry entry) throws JavaModelException", "diff": ["-\tpublic static URL getLibraryJavadocLocation(IClasspathEntry entry) throws JavaModelException {", "+\tprotected static URL getLibraryJavadocLocation(IClasspathEntry entry) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "815fdf7891c95fd4be573cb86798a29d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void checkAndAddMultipleLocalDeclaration(org.eclipse.jdt.internal.compiler.ast.Statement[] stmts, int index, List blockStatements)", "signatureAfterChange": "  \tprotected void checkAndAddMultipleLocalDeclaration(org.eclipse.jdt.internal.compiler.ast.Statement[] stmts, int index, List blockStatements)", "diff": ["-\t", "-\tprivate void checkAndAddMultipleLocalDeclaration(org.eclipse.jdt.internal.compiler.ast.Statement[] stmts, int index, List blockStatements) {", "+", "+\tprotected void checkAndAddMultipleLocalDeclaration(org.eclipse.jdt.internal.compiler.ast.Statement[] stmts, int index, List blockStatements) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81c387f84b96bafc6868d4548c17f447", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "1159f42f3e1e1aaac22ff9f396ef841945f2fbd4", "commitAfterChange": "262511abdaf520ffe570d2f50bd42f0cc7c734ab", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " private static byte[] readUntil(InputStream input, byte separator) throws JavaModelException, IOException", "signatureAfterChange": " protected static byte[] readUntil(InputStream input, byte separator) throws JavaModelException, IOException", "diff": ["-private static byte[] readUntil(InputStream input, byte separator) throws JavaModelException, IOException{", "+protected static byte[] readUntil(InputStream input, byte separator) throws JavaModelException, IOException{"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "828518deab0c4b165adf86c9defdf414", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tpublic void reportBinaryMatch(\r \t\tIMember binaryMember,\r \t\tIBinaryType info,\r \t\tint accuracy)\r \t\tthrows CoreException, JavaModelException", "signatureAfterChange": "\r private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException", "diff": ["-\r", "-\tpublic void reportBinaryMatch(\r", "-\t\tIMember binaryMember,\r", "-\t\tIBinaryType info,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException, JavaModelException {\r", "-\t\tISourceRange range = binaryMember.getNameRange();\r", "-\t\tif (range.getOffset() == -1) {\r", "-\t\t\tClassFile classFile = (ClassFile) binaryMember.getClassFile();\r", "-\t\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "-\t\t\tif (mapper != null) {\r", "-\t\t\t\tIType type = classFile.getType();\r", "-\t\t\t\tchar[] contents = mapper.findSource(type, info);\r", "-\t\t\t\tif (contents != null) {\r", "-\t\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\t\t\t}\r", "+}\r", "+private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException {\r", "+\tISourceRange range = binaryMember.getNameRange();\r", "+\tif (range.getOffset() == -1) {\r", "+\t\tClassFile classFile = (ClassFile)binaryMember.getClassFile();\r", "+\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "+\t\tif (mapper != null) {\r", "+\t\t\tIType type = classFile.getType();\r", "+\t\t\tchar[] contents = mapper.findSource(type, info);\r", "+\t\t\tif (contents != null) {\r", "+\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\tint startIndex = range.getOffset();\r", "-\t\tint endIndex = startIndex + range.getLength() - 1;\r", "-\t\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+\tint startIndex = range.getOffset();\r", "+\tint endIndex = startIndex + range.getLength() - 1;\r", "+\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83388a1bdaead2d705b3e8865a95d4ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tprivate void printUsage()", "signatureAfterChange": "\r \tpublic void printUsage()", "diff": ["-\tprivate void printUsage() {\r", "+\tpublic void printUsage() {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83904deeb7ddab0436e5637f14ff3df7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   protected Parser ()", "signatureAfterChange": "  public Parser ()", "diff": ["-", "-protected Parser () {", "+public Parser () {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a87ed56de7117c09afa723abc600b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 4, "signatureBeforeChange": " private AstNode[] matchingNodes(int start, int end)", "signatureAfterChange": " protected AstNode[] matchingNodes(int start, int end)", "diff": ["-private AstNode[] matchingNodes(int start, int end) {", "+protected AstNode[] matchingNodes(int start, int end) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8550d6e35a4d71759019612463f80e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public void parseBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": "\r private void parseBodies(CompilationUnitDeclaration unit)", "diff": ["-public void parseBodies(CompilationUnitDeclaration unit) {\r", "+private void parseBodies(CompilationUnitDeclaration unit) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "859a3968622530fc2e9079c4ddf91d13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "cf8dccca7e26bf94e36e8f031d2a4ef316542d45", "commitAfterChange": "ce73e795e17fb13da77192ae5025c50ccc7665fe", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "  \tprivate void appendAnnotation(StringBuffer buffer, IAnnotation annotation) throws JavaModelException", "signatureAfterChange": "  \tprotected void appendAnnotation(StringBuffer buffer, IAnnotation annotation) throws JavaModelException", "diff": ["-\tprivate void appendAnnotation(StringBuffer buffer, IAnnotation annotation) throws JavaModelException {", "+\tprotected void appendAnnotation(StringBuffer buffer, IAnnotation annotation) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "859d220bd50f47518ed8599416d09ab8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 156, "signatureBeforeChange": "  \tprivate void setTypeForVariableDeclarationStatement(VariableDeclarationStatement variableDeclarationStatement, Type type, int extraDimension)", "signatureAfterChange": "  \tprotected void setTypeForVariableDeclarationStatement(VariableDeclarationStatement variableDeclarationStatement, Type type, int extraDimension)", "diff": ["-", "-\tprivate void setTypeForVariableDeclarationStatement(VariableDeclarationStatement variableDeclarationStatement, Type type, int extraDimension) {", "-\t\tif (extraDimension != 0) {", "-\t\t\tif (type.isArrayType()) {", "-\t\t\t\tArrayType arrayType = (ArrayType) type;", "-\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "-\t\t\t\tif (remainingDimensions == 0)  {", "-\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "-\t\t\t\t\tType elementType = arrayType.getElementType();", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\telementType.setParent(null, null);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "-\t\t\t\t\tvariableDeclarationStatement.setType(elementType);", "-\t\t\t\t} else {", "-\t\t\t\t\tint start = type.getStartPosition();", "-\t\t\t\t\tint length = type.getLength();", "-\t\t\t\t\tArrayType subarrayType = arrayType;", "-\t\t\t\t\tint index = extraDimension;", "-\t\t\t\t\twhile (index > 0) {", "-\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "-\t\t\t\t\t\tindex--;", "-\t\t\t\t\t}", "-\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "-\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "-\t\t\t\t\tsubarrayType.setParent(null, null);", "-\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "-\t\t\t\t\tvariableDeclarationStatement.setType(subarrayType);", "-\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tvariableDeclarationStatement.setType(type);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tvariableDeclarationStatement.setType(type);", "-\t\t}", "-\t}", "+", "+\tprotected void setTypeForVariableDeclarationStatement(VariableDeclarationStatement variableDeclarationStatement, Type type, int extraDimension) {", "+\t\tif (extraDimension != 0) {", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\tint remainingDimensions = arrayType.getDimensions() - extraDimension;", "+\t\t\t\tif (remainingDimensions == 0)  {", "+\t\t\t\t\t// the dimensions are after the name so the type of the fieldDeclaration is a simpleType", "+\t\t\t\t\tType elementType = arrayType.getElementType();", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\telementType.setParent(null, null);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, elementType);", "+\t\t\t\t\tvariableDeclarationStatement.setType(elementType);", "+\t\t\t\t} else {", "+\t\t\t\t\tint start = type.getStartPosition();", "+\t\t\t\t\tint length = type.getLength();", "+\t\t\t\t\tArrayType subarrayType = arrayType;", "+\t\t\t\t\tint index = extraDimension;", "+\t\t\t\t\twhile (index > 0) {", "+\t\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "+\t\t\t\t\t\tindex--;", "+\t\t\t\t\t}", "+\t\t\t\t\tint end = retrieveProperRightBracketPosition(remainingDimensions, start, start + length);", "+\t\t\t\t\tsubarrayType.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t// cut the child loose from its parent (without creating garbage)", "+\t\t\t\t\tsubarrayType.setParent(null, null);", "+\t\t\t\t\tupdateInnerPositions(subarrayType, remainingDimensions);", "+\t\t\t\t\tvariableDeclarationStatement.setType(subarrayType);", "+\t\t\t\t\tthis.ast.getBindingResolver().updateKey(type, subarrayType);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tvariableDeclarationStatement.setType(type);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tvariableDeclarationStatement.setType(type);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86644b5656c141d77774f95bea8ae640", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/resources/targets/model/pc/F.java", "commitBeforeChange": "b0991463d796f8d722da593e2f8f5c9ff730ab5e", "commitAfterChange": "7cfd56aa5aa705aacf0169b60235be81421d4a6e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void staticMethod()", "signatureAfterChange": " \tprivate static void staticMethod()", "diff": ["-\t// hidden by G.staticMethod()", "-\tpublic static void staticMethod()", "+\t// not hidden by G.staticMethod() - private", "+\tprivate static void staticMethod()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8729d4a2c54bbcd8c9422c829bfc622d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 22, "signatureBeforeChange": " public IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException", "signatureAfterChange": " protected IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException", "diff": ["-public IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException {", "+protected IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8762bec8aadd5fe5f032ad73ee83f453", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 123, "signatureBeforeChange": " \tprivate int retrieveEndOfRightParenthesisPosition(int start, int end)", "signatureAfterChange": " \tprotected int retrieveEndOfRightParenthesisPosition(int start, int end)", "diff": ["-\t */", "-\tprivate int retrieveEndOfRightParenthesisPosition(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN:", "-\t\t\t\t\t\treturn this.scanner.currentPosition;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}", "+\t */", "+\tprotected int retrieveEndOfRightParenthesisPosition(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN:", "+\t\t\t\t\t\treturn this.scanner.currentPosition;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8762dfc3c0959d0c681059728f351952", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 98, "signatureBeforeChange": "  \tprivate VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration)", "signatureAfterChange": "  \tprotected VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration)", "diff": ["+", "+\tprotected VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration) {", "+\t\tVariableDeclarationFragment variableDeclarationFragment = this.ast.newVariableDeclarationFragment();", "+\t\tSimpleName name = this.ast.newSimpleName(new String(localDeclaration.name));", "+\t\tname.setSourceRange(localDeclaration.sourceStart, localDeclaration.sourceEnd - localDeclaration.sourceStart + 1);", "+\t\tvariableDeclarationFragment.setName(name);", "+\t\tint end = retrievePositionBeforeNextCommaOrSemiColon(localDeclaration.sourceEnd, this.compilationUnitSource.length);", "+\t\tif (end == -1) {", "+\t\t\tif (localDeclaration.initialization != null) {", "+\t\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, localDeclaration.initialization.sourceEnd - localDeclaration.sourceStart + 1);", "+\t\t\t} else {", "+\t\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, localDeclaration.sourceEnd - localDeclaration.sourceStart + 1);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, end - localDeclaration.sourceStart + 1);", "+\t\t}", "+\t\tif (localDeclaration.initialization != null) {", "+\t\t\tvariableDeclarationFragment.setInitializer(convert(localDeclaration.initialization));", "+\t\t}", "+\t\tvariableDeclarationFragment.setExtraDimensions(retrieveExtraDimension(localDeclaration.sourceEnd + 1, this.compilationUnitSource.length));", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(variableDeclarationFragment, localDeclaration);", "+\t\t\trecordNodes(name, localDeclaration);", "+\t\t\tvariableDeclarationFragment.resolveBinding();", "+\t\t}", "+\t\treturn variableDeclarationFragment;", "+\t}", "-", "-\tprivate VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration) {", "-\t\tVariableDeclarationFragment variableDeclarationFragment = this.ast.newVariableDeclarationFragment();", "-\t\tSimpleName name = this.ast.newSimpleName(new String(localDeclaration.name));", "-\t\tname.setSourceRange(localDeclaration.sourceStart, localDeclaration.sourceEnd - localDeclaration.sourceStart + 1);", "-\t\tvariableDeclarationFragment.setName(name);", "-\t\tint end = retrievePositionBeforeNextCommaOrSemiColon(localDeclaration.sourceEnd, this.compilationUnitSource.length);", "-\t\tif (end == -1) {", "-\t\t\tif (localDeclaration.initialization != null) {", "-\t\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, localDeclaration.initialization.sourceEnd - localDeclaration.sourceStart + 1);", "-\t\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, localDeclaration.sourceEnd - localDeclaration.sourceStart + 1);", "-\t\t} else {", "-\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.sourceStart, end - localDeclaration.sourceStart + 1);", "-\t\t}", "-\t\tif (localDeclaration.initialization != null) {", "-\t\t\tvariableDeclarationFragment.setInitializer(convert(localDeclaration.initialization));", "-\t\t}", "-\t\tvariableDeclarationFragment.setExtraDimensions(retrieveExtraDimension(localDeclaration.sourceEnd + 1, this.compilationUnitSource.length));", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(variableDeclarationFragment, localDeclaration);", "-\t\t\trecordNodes(name, localDeclaration);", "-\t\t\tvariableDeclarationFragment.resolveBinding();", "-\t\t}", "-\t\treturn variableDeclarationFragment;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b84c261e1dff8cb0f76ecb2bcd052d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 32, "signatureBeforeChange": " public IType lookupType(TypeBinding typeBinding)", "signatureAfterChange": " protected IType lookupType(TypeBinding typeBinding)", "diff": ["-public IType lookupType(TypeBinding typeBinding) {", "+protected IType lookupType(TypeBinding typeBinding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a3c8febff69abe7d7d98f5c33c679ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 316, "signatureBeforeChange": " public final void writeSignedShort(int value)", "signatureAfterChange": " private final void writeSignedShort(int value)", "diff": ["-public final void writeSignedShort(int value) {", "+private final void writeSignedShort(int value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8953dd54fc6974ecb145b9fc5ecb5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "65aa056cb80e13ff2a840396ec78bacc0c099c53", "commitAfterChange": "a2d0f23b1c0ac3c44d17106deb84fcce432cc45e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate CompilationUnit createAST(int JLSLevel, ICompilationUnit cu, boolean resolveBindings, boolean statementsRecovery)", "signatureAfterChange": "  \tprotected CompilationUnit createAST(int JLSLevel, ICompilationUnit cu, boolean resolveBindings, boolean statementsRecovery)", "diff": ["-\tprivate CompilationUnit createAST(int JLSLevel, ICompilationUnit cu, boolean resolveBindings, boolean statementsRecovery) {", "+\tprotected CompilationUnit createAST(int JLSLevel, ICompilationUnit cu, boolean resolveBindings, boolean statementsRecovery) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ad019c5a6f89aef65bdc653951b05e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "f5dedbad023ed535da8140c4ada528c2bf574f20", "commitAfterChange": "b7dcee8ec99a66c7cd3b7ec7ac6ac22c9994d5db", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected boolean isAncestorOf(IJavaElement e)", "signatureAfterChange": " \tpublic boolean isAncestorOf(IJavaElement e)", "diff": ["-\tprotected boolean isAncestorOf(IJavaElement e) {", "+\tpublic boolean isAncestorOf(IJavaElement e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b4555fd3bb75dc974a7fc77fcd82ed7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6f6b135c3443a1f802996624e28e3fccc1ffade1", "commitAfterChange": "179d5d1c5c2a0bb83cd907094171a8fb72cf869e", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \tprivate void createParser(JavaProject project) throws JavaModelException", "signatureAfterChange": "\r \tpublic void createParser(JavaProject project) throws JavaModelException", "diff": ["-\tprivate void createParser(JavaProject project) throws JavaModelException {\r", "+\tpublic void createParser(JavaProject project) throws JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c97cd4baf61805865b7b372725ff62f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 110, "signatureBeforeChange": " \t \tprivate void recordNodes(ASTNode node, org.eclipse.jdt.internal.compiler.ast.ASTNode oldASTNode)", "signatureAfterChange": " \t \tprotected void recordNodes(ASTNode node, org.eclipse.jdt.internal.compiler.ast.ASTNode oldASTNode)", "diff": ["+\tprotected void recordNodes(ASTNode node, org.eclipse.jdt.internal.compiler.ast.ASTNode oldASTNode) {", "+\t\tthis.ast.getBindingResolver().store(node, oldASTNode);", "+\t}", "-\tprivate void recordNodes(ASTNode node, org.eclipse.jdt.internal.compiler.ast.ASTNode oldASTNode) {", "-\t\tthis.ast.getBindingResolver().store(node, oldASTNode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d0183fda9fd0bd9ebd036c8f74b2e4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 17, "signatureBeforeChange": " public IJavaElement createImportHandle(ImportReference importRef)", "signatureAfterChange": " protected IJavaElement createImportHandle(ImportReference importRef)", "diff": ["-public IJavaElement createImportHandle(ImportReference importRef) {", "+protected IJavaElement createImportHandle(ImportReference importRef) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb3d32b3dd0819b54614920ae04052a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CorrectionEngine.java", "commitBeforeChange": "8170cb70174373d8d00b60000fbf5f5e5ba41a15", "commitAfterChange": "a63dab672e3fb0f48fb1d6f4b4eaeb1c4abf73ed", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic void computeCorrections(ICompilationUnit unit, int id, int start, int end, String[] arguments, ICorrectionRequestor requestor) throws JavaModelException", "signatureAfterChange": "\r \tprivate void computeCorrections(ICompilationUnit unit, int id, int start, int end, String[] arguments, ICorrectionRequestor requestor) throws JavaModelException", "diff": ["-\tpublic void computeCorrections(ICompilationUnit unit, int id, int start, int end, String[] arguments, ICorrectionRequestor requestor) throws JavaModelException{\r", "+\tprivate void computeCorrections(ICompilationUnit unit, int id, int start, int end, String[] arguments, ICorrectionRequestor requestor) throws JavaModelException{\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f5cf0f0a3e60714f0ff38d1f0bc60ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 48, "signatureBeforeChange": "  public final void scanEscapeCharacter() throws InvalidInputException", "signatureAfterChange": "  protected final void scanEscapeCharacter() throws InvalidInputException", "diff": ["-public final void scanEscapeCharacter() throws InvalidInputException {", "+protected final void scanEscapeCharacter() throws InvalidInputException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fb995674be42050fda3273bde3887be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void forceClasspathReload(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tprotected void forceClasspathReload(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tpublic void forceClasspathReload(IProgressMonitor monitor) throws JavaModelException {", "+\tprotected void forceClasspathReload(IProgressMonitor monitor) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fe453932fd8e22a5076c474b27da95d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/QualifiedTypeDeclarationPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void decodeIndexEntry(IEntryResult entryResult)", "signatureAfterChange": "  protected void decodeIndexEntry(IEntryResult entryResult)", "diff": ["-public void decodeIndexEntry(IEntryResult entryResult){", "+protected void decodeIndexEntry(IEntryResult entryResult){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91775e102203923b07fb6c0a9bb3f098", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AdditionalTypeCollection.java", "commitBeforeChange": "f2175e743261684fe3de1337b02bb7bc5e74c85c", "commitAfterChange": "5a25b0b2adf3a42de2c91930c56a74b98ff9b6ac", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r public AdditionalTypeCollection(char[][] additionalTypeNames, char[][][] qualifiedReferences, char[][] simpleNameReferences)", "signatureAfterChange": "\r \r protected AdditionalTypeCollection(char[][] additionalTypeNames, char[][][] qualifiedReferences, char[][] simpleNameReferences)", "diff": ["-public AdditionalTypeCollection(char[][] additionalTypeNames, char[][][] qualifiedReferences, char[][] simpleNameReferences) {\r", "+protected AdditionalTypeCollection(char[][] additionalTypeNames, char[][][] qualifiedReferences, char[][] simpleNameReferences) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "929af3adaff21bbea0f291e7a65d9460", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "5266b947a41bc87e33ca243d2f06d621c5b35d8c", "commitAfterChange": "5b0c62f0c85cc7c393266b52408d3bd3c14d0ef5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public IClasspathEntry findSourceAttachmentRecommendation()", "signatureAfterChange": "  private IClasspathEntry findSourceAttachmentRecommendation()", "diff": ["-public IClasspathEntry findSourceAttachmentRecommendation() {", "+private IClasspathEntry findSourceAttachmentRecommendation() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9452ee11fae0e028521476c1b6159a96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "signatureAfterChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "diff": ["-\tpublic static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType) {", "+\tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94ca6f6d310f51678c0681b6bd9cbf68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "5cb7a8282e40bea7ee7271bbdb7d8b845c76f5b3", "commitAfterChange": "2aa78105ee4089b7ff1a9a2c35425f71b0b156d5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tprivate IImportDeclaration createImportHandle(ImportReference importRef)", "signatureAfterChange": "\r \tpublic IImportDeclaration createImportHandle(ImportReference importRef)", "diff": ["-\tprivate IImportDeclaration createImportHandle(ImportReference importRef) {\r", "+\tpublic IImportDeclaration createImportHandle(ImportReference importRef) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95dfb9a3e8d43dbc0f3b5e1331e66d0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 299, "methodNumberAfterChange": 317, "signatureBeforeChange": " public final void writeSignedShort(int pos, int value)", "signatureAfterChange": " private final void writeSignedShort(int pos, int value)", "diff": ["-public final void writeSignedShort(int pos, int value) {", "+private final void writeSignedShort(int pos, int value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98e2014d8b65af991aac3a4cdffc223e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 148, "signatureBeforeChange": "  \tprivate QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "signatureAfterChange": "  \tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "diff": ["-", "-\tprivate QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {", "-\t\tint length = typeName.length;", "-\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));", "-\t\tfirstToken.index = length - 1;", "-\t\tint start0 = (int)(positions[0]>>>32);", "-\t\tint start = start0;", "-\t\tint end = (int)(positions[0] & 0xFFFFFFFF);", "-\t\tfirstToken.setSourceRange(start, end - start + 1);", "-\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));", "-\t\tsecondToken.index = length - 2;", "-\t\tstart = (int)(positions[1]>>>32);", "-\t\tend = (int)(positions[1] & 0xFFFFFFFF);", "-\t\tsecondToken.setSourceRange(start, end - start + 1);", "-\t\tQualifiedName qualifiedName = this.ast.newQualifiedName(firstToken, secondToken);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(qualifiedName, node);", "-\t\t\trecordPendingNameScopeResolution(qualifiedName);", "-\t\t\trecordNodes(firstToken, node);", "-\t\t\trecordNodes(secondToken, node);", "-\t\t\trecordPendingNameScopeResolution(firstToken);", "-\t\t\trecordPendingNameScopeResolution(secondToken);", "-\t\t}", "-\t\tqualifiedName.index = length - 2;", "-\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "-\t\tSimpleName newPart = null;", "-\t\tfor (int i = 2; i < length; i++) {", "-\t\t\tnewPart = this.ast.newSimpleName(new String(typeName[i]));", "-\t\t\tnewPart.index = length - i - 1;", "-\t\t\tstart = (int)(positions[i]>>>32);", "-\t\t\tend = (int)(positions[i] & 0xFFFFFFFF);", "-\t\t\tnewPart.setSourceRange(start,  end - start + 1);", "-\t\t\tqualifiedName = this.ast.newQualifiedName(qualifiedName, newPart);", "-\t\t\tqualifiedName.index = newPart.index;", "-\t\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "-\t\t\tif (this.resolveBindings) {", "-\t\t\t\trecordNodes(qualifiedName, node);", "-\t\t\t\trecordNodes(newPart, node);\t\t\t\t", "-\t\t\t\trecordPendingNameScopeResolution(qualifiedName);", "-\t\t\t\trecordPendingNameScopeResolution(newPart);", "-\t\t\t}", "-\t\t}", "-\t\tQualifiedName name = qualifiedName;", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(name, node);", "-\t\t\trecordPendingNameScopeResolution(name);", "-\t\t}", "-\t\treturn name;", "-\t}", "+", "+\tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {", "+\t\tint length = typeName.length;", "+\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));", "+\t\tfirstToken.index = length - 1;", "+\t\tint start0 = (int)(positions[0]>>>32);", "+\t\tint start = start0;", "+\t\tint end = (int)(positions[0] & 0xFFFFFFFF);", "+\t\tfirstToken.setSourceRange(start, end - start + 1);", "+\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));", "+\t\tsecondToken.index = length - 2;", "+\t\tstart = (int)(positions[1]>>>32);", "+\t\tend = (int)(positions[1] & 0xFFFFFFFF);", "+\t\tsecondToken.setSourceRange(start, end - start + 1);", "+\t\tQualifiedName qualifiedName = this.ast.newQualifiedName(firstToken, secondToken);", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(qualifiedName, node);", "+\t\t\trecordPendingNameScopeResolution(qualifiedName);", "+\t\t\trecordNodes(firstToken, node);", "+\t\t\trecordNodes(secondToken, node);", "+\t\t\trecordPendingNameScopeResolution(firstToken);", "+\t\t\trecordPendingNameScopeResolution(secondToken);", "+\t\t}", "+\t\tqualifiedName.index = length - 2;", "+\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "+\t\tSimpleName newPart = null;", "+\t\tfor (int i = 2; i < length; i++) {", "+\t\t\tnewPart = this.ast.newSimpleName(new String(typeName[i]));", "+\t\t\tnewPart.index = length - i - 1;", "+\t\t\tstart = (int)(positions[i]>>>32);", "+\t\t\tend = (int)(positions[i] & 0xFFFFFFFF);", "+\t\t\tnewPart.setSourceRange(start,  end - start + 1);", "+\t\t\tqualifiedName = this.ast.newQualifiedName(qualifiedName, newPart);", "+\t\t\tqualifiedName.index = newPart.index;", "+\t\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\trecordNodes(qualifiedName, node);", "+\t\t\t\trecordNodes(newPart, node);\t\t\t\t", "+\t\t\t\trecordPendingNameScopeResolution(qualifiedName);", "+\t\t\t\trecordPendingNameScopeResolution(newPart);", "+\t\t\t}", "+\t\t}", "+\t\tQualifiedName name = qualifiedName;", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(name, node);", "+\t\t\trecordPendingNameScopeResolution(name);", "+\t\t}", "+\t\treturn name;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99aaafcce50d0a30d70d8e51c48167af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": "  protected void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "diff": ["+\tprivate void updateIndex(Openable element, IResourceDelta delta) {", "+\t", "+\t\tif (indexManager == null)", "+\t\t\treturn;", "+\t", "+\t\tswitch (element.getElementType()) {", "+\t\t\tcase IJavaElement.JAVA_PROJECT :", "+\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\t\t\tthis.indexManager.indexAll(element.getJavaProject().getProject());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.REMOVED :", "+\t\t\t\t\t\tthis.indexManager.removeIndexFamily(element.getJavaProject().getProject().getFullPath());", "+\t\t\t\t\t\t// NB: Discarding index jobs belonging to this project was done during PRE_DELETE", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t// NB: Update of index if project is opened, closed, or its java nature is added or removed", "+\t\t\t\t\t//     is done in updateCurrentDeltaAndIndex", "-", "-protected void updateIndex(Openable element, IResourceDelta delta) {", "-", "-\tif (indexManager == null)", "-\t\treturn;", "-", "-\tswitch (element.getElementType()) {", "-\t\tcase IJavaElement.JAVA_PROJECT :", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\tthis.indexManager.indexAll(element.getJavaProject().getProject());", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :", "+\t\t\t\tif (element instanceof JarPackageFragmentRoot) {", "+\t\t\t\t\tJarPackageFragmentRoot root = (JarPackageFragmentRoot)element;", "+\t\t\t\t\t// index jar file only once (if the root is in its declaring project)", "+\t\t\t\t\tIPath jarPath = root.getPath();", "+\t\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\t\tcase IResourceDelta.ADDED:", "+\t\t\t\t\t\t\t// index the new jar", "+\t\t\t\t\t\t\tindexManager.indexLibrary(jarPath, root.getJavaProject().getProject());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IResourceDelta.CHANGED:", "+\t\t\t\t\t\t\t// first remove the index so that it is forced to be re-indexed", "+\t\t\t\t\t\t\tindexManager.removeIndex(jarPath);", "+\t\t\t\t\t\t\t// then index the jar", "+\t\t\t\t\t\t\tindexManager.indexLibrary(jarPath, root.getJavaProject().getProject());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IResourceDelta.REMOVED:", "+\t\t\t\t\t\t\t// the jar was physically removed: remove the index", "+\t\t\t\t\t\t\tthis.indexManager.discardJobs(jarPath.toString());", "+\t\t\t\t\t\t\tthis.indexManager.removeIndex(jarPath);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "-\t\t\t\tcase IResourceDelta.REMOVED :", "-\t\t\t\t\tthis.indexManager.removeIndexFamily(element.getJavaProject().getProject().getFullPath());", "-\t\t\t\t\t// NB: Discarding index jobs belonging to this project was done during PRE_DELETE", "-\t\t\t\t\tbreak;", "-\t\t\t\t// NB: Update of index if project is opened, closed, or its java nature is added or removed", "-\t\t\t\t//     is done in updateCurrentDeltaAndIndex", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :", "-\t\t\tif (element instanceof JarPackageFragmentRoot) {", "-\t\t\t\tJarPackageFragmentRoot root = (JarPackageFragmentRoot)element;", "-\t\t\t\t// index jar file only once (if the root is in its declaring project)", "-\t\t\t\tIPath jarPath = root.getPath();", "+\t\t\t\t} else {", "+\t\t\t\t\tint kind = delta.getKind();", "+\t\t\t\t\tif (kind == IResourceDelta.ADDED || kind == IResourceDelta.REMOVED) {", "+\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "+\t\t\t\t\t\tthis.updateRootIndex(root, root.getPackageFragment(\"\"), delta); //$NON-NLS-1$", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// don't break as packages of the package fragment root can be indexed below", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT :", "-\t\t\t\t\t\t// index the new jar", "-\t\t\t\t\t\tindexManager.indexLibrary(jarPath, root.getJavaProject().getProject());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IResourceDelta.CHANGED:", "-\t\t\t\t\t\t// first remove the index so that it is forced to be re-indexed", "-\t\t\t\t\t\tindexManager.removeIndex(jarPath);", "-\t\t\t\t\t\t// then index the jar", "-\t\t\t\t\t\tindexManager.indexLibrary(jarPath, root.getJavaProject().getProject());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t// the jar was physically removed: remove the index", "-\t\t\t\t\t\tthis.indexManager.discardJobs(jarPath.toString());", "-\t\t\t\t\t\tthis.indexManager.removeIndex(jarPath);", "+\t\t\t\t\t\tIPackageFragment pkg = null;", "+\t\t\t\t\t\tif (element instanceof IPackageFragmentRoot) {", "+\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "+\t\t\t\t\t\t\tpkg = root.getPackageFragment(\"\"); //$NON-NLS-1$", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tpkg = (IPackageFragment)element;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "+\t\t\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {", "+\t\t\t\t\t\t\tIResourceDelta child = children[i];", "+\t\t\t\t\t\t\tIResource resource = child.getResource();", "+\t\t\t\t\t\t\tif (resource instanceof IFile) {", "+\t\t\t\t\t\t\t\tString name = resource.getName();", "+\t\t\t\t\t\t\t\tif (Util.isJavaFileName(name)) {", "+\t\t\t\t\t\t\t\t\tOpenable cu = (Openable)pkg.getCompilationUnit(name);", "+\t\t\t\t\t\t\t\t\tthis.updateIndex(cu, child);", "+\t\t\t\t\t\t\t\t} else if (Util.isClassFileName(name)) {", "+\t\t\t\t\t\t\t\t\tOpenable classFile = (Openable)pkg.getClassFile(name);", "+\t\t\t\t\t\t\t\t\tthis.updateIndex(classFile, child);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tint kind = delta.getKind();", "-\t\t\t\tif (kind == IResourceDelta.ADDED || kind == IResourceDelta.REMOVED) {", "-\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "-\t\t\t\t\tthis.updateRootIndex(root, root.getPackageFragment(\"\"), delta); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// don't break as packages of the package fragment root can be indexed below", "-\t\tcase IJavaElement.PACKAGE_FRAGMENT :", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.ADDED:", "-\t\t\t\tcase IResourceDelta.REMOVED:", "-\t\t\t\t\tIPackageFragment pkg = null;", "-\t\t\t\t\tif (element instanceof IPackageFragmentRoot) {", "-\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "-\t\t\t\t\t\tpkg = root.getPackageFragment(\"\"); //$NON-NLS-1$", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tpkg = (IPackageFragment)element;", "+\t\t\tcase IJavaElement.CLASS_FILE :", "+\t\t\t\tIFile file = (IFile) delta.getResource();", "+\t\t\t\tIJavaProject project = element.getJavaProject();", "+\t\t\t\tIPath binaryFolderPath = element.getPackageFragmentRoot().getPath();", "+\t\t\t\t// if the class file is part of the binary output, it has been created by", "+\t\t\t\t// the java builder -> ignore", "+\t\t\t\ttry {", "+\t\t\t\t\tif (binaryFolderPath.equals(project.getOutputLocation())) {", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "-\t\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {", "-\t\t\t\t\t\tIResourceDelta child = children[i];", "-\t\t\t\t\t\tIResource resource = child.getResource();", "-\t\t\t\t\t\tif (resource instanceof IFile) {", "-\t\t\t\t\t\t\tString name = resource.getName();", "-\t\t\t\t\t\t\tif (Util.isJavaFileName(name)) {", "-\t\t\t\t\t\t\t\tOpenable cu = (Openable)pkg.getCompilationUnit(name);", "-\t\t\t\t\t\t\t\tthis.updateIndex(cu, child);", "-\t\t\t\t\t\t\t} else if (Util.isClassFileName(name)) {", "-\t\t\t\t\t\t\t\tOpenable classFile = (Openable)pkg.getClassFile(name);", "-\t\t\t\t\t\t\t\tthis.updateIndex(classFile, child);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t}", "+\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\tcase IResourceDelta.CHANGED :", "+\t\t\t\t\t\t// no need to index if the content has not changed", "+\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\t\t\tindexManager.addBinary(file, binaryFolderPath);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.REMOVED :", "+\t\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), binaryFolderPath);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.COMPILATION_UNIT :", "+\t\t\t\tfile = (IFile) delta.getResource();", "+\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\tcase IResourceDelta.CHANGED :", "+\t\t\t\t\t\t// no need to index if the content has not changed", "+\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\t\t\tindexManager.addSource(file, file.getProject().getProject().getFullPath());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.REMOVED :", "+\t\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), file.getProject().getProject().getFullPath());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t}", "+\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase IJavaElement.CLASS_FILE :", "-\t\t\tIFile file = (IFile) delta.getResource();", "-\t\t\tIJavaProject project = element.getJavaProject();", "-\t\t\tIPath binaryFolderPath = element.getPackageFragmentRoot().getPath();", "-\t\t\t// if the class file is part of the binary output, it has been created by", "-\t\t\t// the java builder -> ignore", "-\t\t\ttry {", "-\t\t\t\tif (binaryFolderPath.equals(project.getOutputLocation())) {", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t}", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.CHANGED :", "-\t\t\t\t\t// no need to index if the content has not changed", "-\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\tindexManager.addBinary(file, binaryFolderPath);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.REMOVED :", "-\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), binaryFolderPath);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase IJavaElement.COMPILATION_UNIT :", "-\t\t\tfile = (IFile) delta.getResource();", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.CHANGED :", "-\t\t\t\t\t// no need to index if the content has not changed", "-\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\tindexManager.addSource(file, file.getProject().getProject().getFullPath());", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.REMOVED :", "-\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), file.getProject().getProject().getFullPath());", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a6e2983fdca1e17721cf036418f5719", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tprivate void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\tprivate void configure(String[] argv) throws InvalidInputException {\r", "+\tpublic void configure(String[] argv) throws InvalidInputException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b70275509587c8b9f305b2521f7bf4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleTypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": " protected TypeBinding getTypeBinding(Scope scope)", "diff": ["-public TypeBinding getTypeBinding(Scope scope) {", "+protected TypeBinding getTypeBinding(Scope scope) {", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d55b782fbaba3be6021c5751adea769", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tprivate int readTokenAndConsume() throws InvalidInputException", "signatureAfterChange": "  \tprotected int readTokenAndConsume() throws InvalidInputException", "diff": ["-\tprivate int readTokenAndConsume() throws InvalidInputException {", "+\tprotected int readTokenAndConsume() throws InvalidInputException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e763759b32226dccb8fcd96574b9e39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 21, "signatureBeforeChange": " public IType createTypeHandle(IType parent, char[] simpleTypeName)", "signatureAfterChange": " protected IType createTypeHandle(IType parent, char[] simpleTypeName)", "diff": ["-public IType createTypeHandle(IType parent, char[] simpleTypeName) {", "+protected IType createTypeHandle(IType parent, char[] simpleTypeName) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9efcc7d611d0ac6a8b672042ceb639a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationWalker.java", "commitBeforeChange": "74d118e989117eba0163f0f707314197db0891af", "commitAfterChange": "43cdae5117454d896e9e9cf435f63b0b509e3a4c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate TypeAnnotationWalker restrict(long newMatches, int newPathPtr)", "signatureAfterChange": "  \tprotected TypeAnnotationWalker restrict(long newMatches, int newPathPtr)", "diff": ["-\tprivate TypeAnnotationWalker restrict(long newMatches, int newPathPtr) {", "+\tprotected TypeAnnotationWalker restrict(long newMatches, int newPathPtr) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fdedd0d3ffed667e3f6e340180f3adb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java", "commitBeforeChange": "0c9d35cff2dc84f5482dc68d6d37735087c6900a", "commitAfterChange": "ec83f4485fd98b95e4e8e2158e7e66ce8f1734fe", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void enterInterface(TypeInfo typeInfo)", "signatureAfterChange": " private void enterInterface(TypeInfo typeInfo)", "diff": ["- */", "-public void enterInterface(TypeInfo typeInfo) {", "+private void enterInterface(TypeInfo typeInfo) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a27869e015bcc67304dc5a506692d19f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": "  \tprivate void variablePreferencesPut(String variableName, IPath variablePath)", "signatureAfterChange": "  \tpublic void variablePreferencesPut(String variableName, IPath variablePath)", "diff": ["-\tprivate void variablePreferencesPut(String variableName, IPath variablePath) {", "+\tpublic void variablePreferencesPut(String variableName, IPath variablePath) {", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a27de94d9a9e35bf9636178c6728b83a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "25d70eac1f59d17fd35f15454804710ecb835662", "commitAfterChange": "e7e2695fe5657cf6f05f673f7f1f6646805752fe", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "  \tpublic void ensureSpaceAfterReplace(ASTNode node, ChildPropertyDescriptor desc)", "signatureAfterChange": "  \tprivate void ensureSpaceAfterReplace(ASTNode node, ChildPropertyDescriptor desc)", "diff": ["-\tpublic void ensureSpaceAfterReplace(ASTNode node, ChildPropertyDescriptor desc) {", "+\tprivate void ensureSpaceAfterReplace(ASTNode node, ChildPropertyDescriptor desc) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a284310ddc1a79cfc3606168e3df599d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Formatter/test451/Format_in.java", "commitBeforeChange": "9cd8ac9158e8cf65a77f69d8bfcd62dc9418f984", "commitAfterChange": "c8ff3cbc92fbc03cd36a58b694b93e2376e6a266", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public void temp()", "signatureAfterChange": "    private void temp()", "diff": ["-  public void temp() {", "+  private void temp() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a40cca28019315e022384663e4c7cf62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "2b909e7b79768ee22e26cd08d2a46585d2d295da", "commitAfterChange": "f8c312c06fb96e8bdf3c3c8fcb70b575d67f5931", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "  public void relocalize(Locale locale)", "signatureAfterChange": "  private void relocalize(Locale locale)", "diff": ["-public void relocalize(Locale locale) {", "+private void relocalize(Locale locale) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48697e6cf169eaa0a9f7acb3a554324", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "37bfadecd597b554760a27206f364cc5b3777c73", "commitAfterChange": "375dcbee487ab6274ddf2b60c23e3979a6bc7b7e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseHref() throws InvalidInputException", "diff": ["-\tprivate boolean parseHref() throws InvalidInputException {", "+\tprotected boolean parseHref() throws InvalidInputException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5323a91db8d868902523d8cad59d8f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "08be90368f9af9d6750464056e901efd458851a8", "commitAfterChange": "40b7e0d97c4fb0b2dad40a81d1583b78c103743a", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \t\t \t\tpublic synchronized ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus)", "signatureAfterChange": " \t\t \t\tprivate ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus)", "diff": ["-\t\tpublic synchronized ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus) {", "+\t\tprivate ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5a65760759eef9f6e3bdc5d7ab0f377", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "4b460199498c48cda44ce10125aa5901a10bff62", "commitAfterChange": "ccd12469d7fc21a8e1a0a597451a059df56002ad", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " protected void setDestinationPath(String dest)", "signatureAfterChange": " public void setDestinationPath(String dest)", "diff": ["-protected void setDestinationPath(String dest) {", "+public void setDestinationPath(String dest) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a736cef7b183c67f62c61c34b98f186b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 111, "signatureBeforeChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "signatureAfterChange": " \t \tprotected void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "diff": ["-\tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement) {", "+\t", "+\tprotected void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7802fbd52b3384aa3b2afb55b1fce71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "65b4e15798189e35310112aac16988bcdf7eef0b", "commitAfterChange": "78b182da9e370f6f00f239fd2a2de8309bdf9aac", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate String decodeStringValue(String s)", "signatureAfterChange": "  \tstatic String decodeStringValue(String s)", "diff": ["-\tprivate String decodeStringValue(String s) {", "+\tstatic String decodeStringValue(String s) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a85a14e4e4e17858802b92e230c5a7c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "signatureAfterChange": " \tprivate void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "diff": ["-\tpublic void performPreBuildCheck(", "+\tprivate void performPreBuildCheck("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a86c5fab37d1f5abd0e7f318c21658a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "ee446c21d0aaa4f4c4b0513ad11960ed53ccba7d", "commitAfterChange": "271be052e104f1beefee4cd78039eca6ee6adb4f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 35, "signatureBeforeChange": " private Object getMemberValue(org.eclipse.jdt.internal.core.MemberValuePair memberValuePair, Expression expression)", "signatureAfterChange": " protected Object getMemberValue(org.eclipse.jdt.internal.core.MemberValuePair memberValuePair, Expression expression)", "diff": ["-private Object getMemberValue(org.eclipse.jdt.internal.core.MemberValuePair memberValuePair, Expression expression) {", "+protected Object getMemberValue(org.eclipse.jdt.internal.core.MemberValuePair memberValuePair, Expression expression) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a90edf79c7d281eb30efc23c8314ec3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ClasspathVariableInitializer.java", "commitBeforeChange": "bd6d2b237d7387fba1f23d192ad6b2abfbd96ace", "commitAfterChange": "a523ec2534cc7a4ca1e41f83aa64a686ffb07824", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected abstract void initialize(String variable);", "signatureAfterChange": "     public abstract void initialize(String variable);", "diff": ["-    protected abstract void initialize(String variable);", "+    public abstract void initialize(String variable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a91f5da41867f0ea26cce60bb4fcc0bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "6d9cd9b246f8b8740f4a501085a32633b2b6c2af", "commitAfterChange": "470afdfff602b441f9a45a7d903230534423c9ca", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tprivate TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "signatureAfterChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "diff": ["-\tprivate TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations) {", "+\tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab1c8d88ce80366b4d30a6acd043fccc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r private void parseBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": "\r public void parseBodies(CompilationUnitDeclaration unit)", "diff": ["-private void parseBodies(CompilationUnitDeclaration unit) {\r", "+public void parseBodies(CompilationUnitDeclaration unit) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab25a5202b8662072b0d5eac59a32d1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "f5dedbad023ed535da8140c4ada528c2bf574f20", "commitAfterChange": "b7dcee8ec99a66c7cd3b7ec7ac6ac22c9994d5db", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void fireChange()", "signatureAfterChange": " public void fireChange()", "diff": ["-protected void fireChange() {", "+public void fireChange() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abe6e01c42430a3988c7644607326dd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathLocation.java", "commitBeforeChange": "9247f5a1413614555183073da9b25dcae829dcbb", "commitAfterChange": "ec2243f132866e54d9401c9f64dee23249b2b464", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic ClasspathLocation(AccessRuleSet accessRuleSet)", "signatureAfterChange": "  \tprotected ClasspathLocation(AccessRuleSet accessRuleSet)", "diff": ["-\tpublic ClasspathLocation(AccessRuleSet accessRuleSet) {", "+", "+\tprotected ClasspathLocation(AccessRuleSet accessRuleSet) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf1212e21940219d751d0e84a09df9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 157, "signatureBeforeChange": "  \tprivate void updateInnerPositions(Type type, int dimensions)", "signatureAfterChange": "  \tprotected void updateInnerPositions(Type type, int dimensions)", "diff": ["-\tprivate void updateInnerPositions(Type type, int dimensions) {", "-\t\tif (dimensions > 1) {", "-\t\t\t// need to set positions for intermediate array type see 42839", "-\t\t\tint start = type.getStartPosition();", "-\t\t\tint length = type.getLength();", "-\t\t\tType currentComponentType = ((ArrayType) type).getComponentType();", "-\t\t\tint searchedDimension = dimensions - 1;", "-\t\t\tint rightBracketEndPosition = start;", "-\t\t\twhile (currentComponentType.isArrayType()) {", "-\t\t\t\trightBracketEndPosition = retrieveProperRightBracketPosition(searchedDimension, start, start + length);", "-\t\t\t\tcurrentComponentType.setSourceRange(start, rightBracketEndPosition - start + 1);", "-\t\t\t\tcurrentComponentType = ((ArrayType) currentComponentType).getComponentType();", "-\t\t\t\tsearchedDimension--;", "-\t\t\t}\t\t", "-\t\t}", "-\t}", "+", "+\tprotected void updateInnerPositions(Type type, int dimensions) {", "+\t\tif (dimensions > 1) {", "+\t\t\t// need to set positions for intermediate array type see 42839", "+\t\t\tint start = type.getStartPosition();", "+\t\t\tint length = type.getLength();", "+\t\t\tType currentComponentType = ((ArrayType) type).getComponentType();", "+\t\t\tint searchedDimension = dimensions - 1;", "+\t\t\tint rightBracketEndPosition = start;", "+\t\t\twhile (currentComponentType.isArrayType()) {", "+\t\t\t\trightBracketEndPosition = retrieveProperRightBracketPosition(searchedDimension, start, start + length);", "+\t\t\t\tcurrentComponentType.setSourceRange(start, rightBracketEndPosition - start + 1);", "+\t\t\t\tcurrentComponentType = ((ArrayType) currentComponentType).getComponentType();", "+\t\t\t\tsearchedDimension--;", "+\t\t\t}\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b19e9992897798af85fd85da9ca47816", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": " public IField createFieldHandle(FieldDeclaration field, IType type)", "signatureAfterChange": " protected IField createFieldHandle(FieldDeclaration field, IType type)", "diff": ["-public IField createFieldHandle(FieldDeclaration field, IType type) {", "+protected IField createFieldHandle(FieldDeclaration field, IType type) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1c480fadd21c0a794fce13a983d0203", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "08af074ff5e080b815672c2a130ef69700b120d8", "commitAfterChange": "d95449cf37bb2e33a7804a35ceffb191c7190444", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " final RewriteEventStore getRewriteEventStore()", "signatureAfterChange": " \tprotected RewriteEventStore getRewriteEventStore()", "diff": ["-\t/* package */ final RewriteEventStore getRewriteEventStore() {", "+\t */", "+\tprotected RewriteEventStore getRewriteEventStore() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3948c81236cd79cbe48179ea0fb0ea8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "7efb5ac008a425608cb5d382a82b0558813ab0c7", "commitAfterChange": "b7a892c71a4ea9058326a1ed58a7293f0cb9329c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private static String serializeProcessorOptions(Map<String, String> options)", "signatureAfterChange": "     public static String serializeProcessorOptions(Map<String, String> options)", "diff": ["-    private static String serializeProcessorOptions(Map<String, String> options) {", "+    public static String serializeProcessorOptions(Map<String, String> options) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3a0047c2dbb42d72abac693bb335168", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": "\r protected JavaElementInfo getElementInfo() throws JavaModelException", "diff": ["-public JavaElementInfo getElementInfo() throws JavaModelException {\r", "+protected JavaElementInfo getElementInfo() throws JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b545c1fbfb31973a9ef9eb66f61c74e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "a4e360d6406fed9275bf933467b5e9a51a704eb6", "commitAfterChange": "7065da01531bf4c318c59206b62aa1503a948abe", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate void process(CompilationUnitDeclaration unit, int i)", "signatureAfterChange": " \tpublic void process(CompilationUnitDeclaration unit, int i)", "diff": ["-\tprivate void process(CompilationUnitDeclaration unit, int i) {", "+\tpublic void process(CompilationUnitDeclaration unit, int i) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b641957427eb2a018a90b589bcf23b6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \tprotected void performCompilation() throws InvalidInputException", "signatureAfterChange": "\r \tpublic void performCompilation() throws InvalidInputException", "diff": ["-\tprotected void performCompilation() throws InvalidInputException {\r", "+\tpublic void performCompilation() throws InvalidInputException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6db393465cb6e2cf3a8aa3e558855e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprotected static void close(Openable element)", "signatureAfterChange": " \tprivate void close(Openable element)", "diff": ["+\t */", "+\tprivate void close(Openable element) {", "+\t\ttry {", "+\t\t\telement.close();", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// do nothing", "+\t\t}", "+\t}", "-\t */", "-\tprotected static void close(Openable element) {", "-", "-\t\ttry {", "-\t\t\telement.close();", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// do nothing", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b86d2fbf02dfc5cd848e6be84e92eba9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void reportBinaryMatch(IResource resource, IMember binaryMember, IBinaryType info, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportBinaryMatch(IResource resource, IMember binaryMember, IBinaryType info, int accuracy) throws CoreException", "diff": ["-}", "-public void reportBinaryMatch(IResource resource, IMember binaryMember, IBinaryType info, int accuracy) throws CoreException {", "+protected void reportBinaryMatch(IResource resource, IMember binaryMember, IBinaryType info, int accuracy) throws CoreException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8d07fb5a71102ca16deaf8489c97074", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e5112ad3430fec45ff2b1f0ba393b967c7039732", "commitAfterChange": "9ded7575c156d5aa8d3f91391c6974c211262bec", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void addDefaultAbstractMethods()", "signatureAfterChange": "  private void addDefaultAbstractMethods()", "diff": ["-public void addDefaultAbstractMethods() {", "+private void addDefaultAbstractMethods() {", "+\t\t\t// this.tagBits |= TagBits.AreMethodsSorted; -- already set in #methods()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b934facbeda0376fb89c5ebf0a6e2aa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void contentChanged(Openable element, IResourceDelta delta)", "signatureAfterChange": " \tprivate void contentChanged(Openable element, IResourceDelta delta)", "diff": ["+\t */", "+\tprivate void contentChanged(Openable element, IResourceDelta delta) {", "+", "+\t\tclose(element);", "+\t\tint flags = IJavaElementDelta.F_CONTENT;", "+\t\tif (element instanceof JarPackageFragmentRoot){", "+\t\t\tflags |= IJavaElementDelta.F_ARCHIVE_CONTENT_CHANGED;", "+\t\t}", "+\t\tcurrentDelta().changed(element, flags);", "+\t}", "-\t */", "-\tprotected void contentChanged(Openable element, IResourceDelta delta) {", "-", "-\t\tclose(element);", "-\t\tint flags = IJavaElementDelta.F_CONTENT;", "-\t\tif (element instanceof JarPackageFragmentRoot){", "-\t\t\tflags |= IJavaElementDelta.F_ARCHIVE_CONTENT_CHANGED;", "-\t\t}", "-\t\tcurrentDelta().changed(element, flags);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9861d74615d222e94f949e5f784b1eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public char[] indexEntryPrefix()", "signatureAfterChange": " protected char[] indexEntryPrefix()", "diff": ["-public char[] indexEntryPrefix() {", "+protected char[] indexEntryPrefix() {", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baadc76f83e3efbaeb21d1bdc657bef6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 47, "signatureBeforeChange": " public boolean isCompatibleWith0(TypeBinding otherType)", "signatureAfterChange": " private boolean isCompatibleWith0(TypeBinding otherType)", "diff": ["-public boolean isCompatibleWith0(TypeBinding otherType) {", "+private boolean isCompatibleWith0(TypeBinding otherType) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc1d4ba275f2cb582508812c3bf284b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e76466b5729fd993ef3dcc80ae6ab76bd33e5dcd", "commitAfterChange": "e0c80c2b16b54e5a1c86d6779d617fb326a5c618", "methodNumberBeforeChange": 318, "methodNumberAfterChange": 318, "signatureBeforeChange": " private final void writeSignedWord(int value)", "signatureAfterChange": " protected final void writeSignedWord(int value)", "diff": ["-private final void writeSignedWord(int value) {", "+protected final void writeSignedWord(int value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc978966d257059c32e1752561b7c0e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "\r \tprivate static char[] getFileContents( IFile file )\r \t\tthrows CoreException, IOException", "signatureAfterChange": " \tpublic static char[] getFileContents( IFile file ) \t\tthrows CoreException, IOException", "diff": ["-\t */\r", "-\tprivate static char[] getFileContents( IFile file )\r", "-\t\tthrows CoreException, IOException\r", "-\t{\r", "-\t\tchar[]              rtrn  = null;\r", "-\t\tInputStream         is    = null;\r", "-\t\tBufferedInputStream bis   = null;\r", "-\t\tInputStreamReader   isr   = null;\r", "-\t\tCharArrayWriter      w    = null;\r", "-\r", "-\t\ttry\r", "-\t\t{\r", "-\t\t\tis = file.getContents();\r", "-\t\t\tbis = new BufferedInputStream( is );\r", "-\t\t\tisr = new InputStreamReader( bis, file.getCharset() );\r", "-\t\t\tw = new CharArrayWriter( 4096 );\r", "-\t\t\tint c = -1;\r", "-\t\t\twhile ( ( c = isr.read() ) > -1 )\r", "-\t\t\t\tw.write( c );\r", "-\t\t\trtrn = w.toCharArray();\t\t\r", "-\t\t}\r", "-\t\tfinally\r", "-\t\t{\r", "-\t\t\ttry { if ( isr != null ) isr.close(); } catch ( IOException ioe ) {};\r", "-\t\t\ttry { if ( bis != null ) bis.close(); } catch ( IOException ioe ) {};\r", "-\t\t\ttry { if ( is != null ) is.close(); } catch ( IOException ioe ) {};\r", "-\t\t\tif ( w != null ) w.close(); \r", "-\t\t}\r", "-\t\treturn rtrn;\r", "-\t}\r", "+\t */", "+\tpublic static char[] getFileContents( IFile file )", "+\t\tthrows CoreException, IOException", "+\t{", "+\t\tchar[]              rtrn  = null;", "+\t\tInputStream         is    = null;", "+\t\tBufferedInputStream bis   = null;", "+\t\tInputStreamReader   isr   = null;", "+\t\tCharArrayWriter      w    = null;", "+", "+\t\ttry", "+\t\t{", "+\t\t\tis = file.getContents();", "+\t\t\tbis = new BufferedInputStream( is );", "+\t\t\tisr = new InputStreamReader( bis, file.getCharset() );", "+\t\t\tw = new CharArrayWriter( 4096 );", "+\t\t\tint c = -1;", "+\t\t\twhile ( ( c = isr.read() ) > -1 )", "+\t\t\t\tw.write( c );", "+\t\t\trtrn = w.toCharArray();\t\t", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\ttry { if ( isr != null ) isr.close(); } catch ( IOException ioe ) {};", "+\t\t\ttry { if ( bis != null ) bis.close(); } catch ( IOException ioe ) {};", "+\t\t\ttry { if ( is != null ) is.close(); } catch ( IOException ioe ) {};", "+\t\t\tif ( w != null ) w.close(); ", "+\t\t}", "+\t\treturn rtrn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdee2886bda624cb6ff708f0593da5b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f2ff53b9c5467491559775afe1992655f55a63fe", "commitAfterChange": "b38f964c0abc42b760a66a064dc1b2f95aca317b", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " \t public Preferences loadPreferences()", "signatureAfterChange": " \t private Preferences loadPreferences()", "diff": ["-\t public Preferences loadPreferences() {", "+\t private Preferences loadPreferences() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be4c7550126748254c78680c63b51683", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": "\r protected JavaElementInfo getElementInfo() throws JavaModelException", "diff": ["-public JavaElementInfo getElementInfo() throws JavaModelException {\r", "+protected JavaElementInfo getElementInfo() throws JavaModelException {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf0835c6953e4a44eb75009e64afe4e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tprotected Map getOptions()", "signatureAfterChange": "\r \tpublic Map getOptions()", "diff": ["-\tprotected Map getOptions() {\r", "+\tpublic Map getOptions() {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfb3e52bdf49e76ba920973427864e95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnQualifiedTypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": " protected TypeBinding getTypeBinding(Scope scope)", "diff": ["-public TypeBinding getTypeBinding(Scope scope) {", "+protected TypeBinding getTypeBinding(Scope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfc86be3367626e2163b9ee32e6628cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 128, "signatureBeforeChange": "  \tprivate int retrieveProperRightBracketPosition(int bracketNumber, int start, int end)", "signatureAfterChange": "  \tprotected int retrieveProperRightBracketPosition(int bracketNumber, int start, int end)", "diff": ["-", "-\tprivate int retrieveProperRightBracketPosition(int bracketNumber, int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token, count = 0;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET:", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tif (count == bracketNumber) {", "-\t\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}", "+", "+\tprotected int retrieveProperRightBracketPosition(int bracketNumber, int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token, count = 0;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET:", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tif (count == bracketNumber) {", "+\t\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06572895bc2083ef5e2e09bad416e73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r private void parseBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": "\r public void parseBodies(CompilationUnitDeclaration unit)", "diff": ["-private void parseBodies(CompilationUnitDeclaration unit) {\r", "+public void parseBodies(CompilationUnitDeclaration unit) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17b8bdc570dfad2710308783974efcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "commitAfterChange": "309aed033cc4257b36692ed1549ee0025e0800df", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean checkNegative1()", "signatureAfterChange": " \tpublic boolean checkNegative1()", "diff": ["-\tprivate boolean checkNegative1() {", "+\tpublic boolean checkNegative1() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1cffc02b88aa60efa4f9d16fd45ea5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f286c73c7ca656ddcbee40375293c00e4fdeac72", "commitAfterChange": "6dc18fbd28cfa1200892437f83463ece8cd2cfa8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate PerProjectInfo getPerProjectInfo(IProject project)", "signatureAfterChange": " \tpublic PerProjectInfo getPerProjectInfo(IProject project)", "diff": ["-\tprivate PerProjectInfo getPerProjectInfo(IProject project) {", "+\tpublic PerProjectInfo getPerProjectInfo(IProject project) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1e63576500cbb6d45bc8e86a94848d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SourceElementParserTest.java", "commitBeforeChange": "0c9d35cff2dc84f5482dc68d6d37735087c6900a", "commitAfterChange": "ec83f4485fd98b95e4e8e2158e7e66ce8f1734fe", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected void exitType(int declarationEnd)", "signatureAfterChange": " public void exitType(int declarationEnd)", "diff": ["-}", "-protected void exitType(int declarationEnd) {", "+public void exitType(int declarationEnd) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1fcc4f78bc7ee8e50f6de53b12b1618", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/WkspJarFactoryContainer.java", "commitBeforeChange": "f1d83e37dc72ba6d2676594fd1c64161817b3d74", "commitAfterChange": "50c8fc7c21507137e2b63d15c742a120cb954eef", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tprotected File getJarFile()", "signatureAfterChange": " \t@Override \tpublic File getJarFile()", "diff": ["-\tprotected File getJarFile() {", "+\tpublic File getJarFile() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c270cc70c5a76e1abcce4eb932073587", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "6ba8aa99e5742ec9a6e7fd8289a420de51af2d80", "commitAfterChange": "319a6f22b4c64e212eff57a4501a52f0225217c6", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic IPackageFragment findPackageFragment0(IPath path)  \t\tthrows JavaModelException", "signatureAfterChange": " \tprivate IPackageFragment findPackageFragment0(IPath path)  \t\tthrows JavaModelException", "diff": ["-\tpublic IPackageFragment findPackageFragment0(IPath path) ", "+\tprivate IPackageFragment findPackageFragment0(IPath path) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d9ab4a27fac20498681a45a7b05534", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CharConstant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic CharConstant(char value)", "signatureAfterChange": "\t  \tprivate CharConstant(char value)", "diff": ["-\tpublic CharConstant(char value) {", "+", "+\tprivate CharConstant(char value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c334e2d79f9c9c6f8abe2bfd105f12a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void pushOnAstStack(Object node, boolean newLength)", "signatureAfterChange": " \tprotected void pushOnAstStack(Object node, boolean newLength)", "diff": ["-\tprivate void pushOnAstStack(Object node, boolean newLength) {", "+\tprotected void pushOnAstStack(Object node, boolean newLength) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5957983e5b600f01c258b0ee0eb3d3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate void pushIdentifier(boolean newLength)", "signatureAfterChange": " \tprotected void pushIdentifier(boolean newLength)", "diff": ["-\tprivate void pushIdentifier(boolean newLength) {", "+\tprotected void pushIdentifier(boolean newLength) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5e48f72e2a242ef44073345d955c85f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/IntConstant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic IntConstant(int value)", "signatureAfterChange": " \t \tprivate IntConstant(int value)", "diff": ["-\tpublic IntConstant(int value) {", "+\t", "+\tprivate IntConstant(int value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5f19ea20cc1b7d7f26dd1a22683e596", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/FloatConstant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic FloatConstant(float value)", "signatureAfterChange": "  \tprivate FloatConstant(float value)", "diff": ["-\tpublic FloatConstant(float value) {", "+", "+\tprivate FloatConstant(float value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6242d46ca5d07c7ccd9ca8f4dfe7566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public char[] indexEntryPrefix()", "signatureAfterChange": " protected char[] indexEntryPrefix()", "diff": ["-public char[] indexEntryPrefix(){", "+protected char[] indexEntryPrefix(){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c65af4313f96a9f502c45368711b2649", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "957977037bae1c5fe509d6f5b83d064a1bf50d04", "commitAfterChange": "78430308e7d45c151f6732314055fefd33935867", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 31, "signatureBeforeChange": " private void purgeMethodStatements(TypeDeclaration type, boolean checkEachMethod)", "signatureAfterChange": " protected void purgeMethodStatements(TypeDeclaration type, boolean checkEachMethod)", "diff": ["-private void purgeMethodStatements(TypeDeclaration type, boolean checkEachMethod) {", "+protected void purgeMethodStatements(TypeDeclaration type, boolean checkEachMethod) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6cecfe597b79fac0c8c09ea4b065387", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "eaa2c28fb9983936f1f852ef695044ad44499aa5", "commitAfterChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private boolean hasPossibleNodes(int start, int end)", "signatureAfterChange": " protected boolean hasPossibleNodes(int start, int end)", "diff": ["-private boolean hasPossibleNodes(int start, int end) {", "+protected boolean hasPossibleNodes(int start, int end) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7060cd889f74daafcb194e972c56302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "333b388763cd3d2e51ecfe31a3253a5e888a61bb", "commitAfterChange": "8170cb70174373d8d00b60000fbf5f5e5ba41a15", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "\r \r \tprivate String[] projectPrerequisites(IClasspathEntry[] entries)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \r \tpublic String[] projectPrerequisites(IClasspathEntry[] entries)\r \t\tthrows JavaModelException", "diff": ["-\tprivate String[] projectPrerequisites(IClasspathEntry[] entries)\r", "+\tpublic String[] projectPrerequisites(IClasspathEntry[] entries)\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c911a1e83e4af6a28b2636d1fda686a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "f5262e0e66d7e25877ee8d8a091dd788b69869c5", "commitAfterChange": "47e88d0335bbb81b7bc00bc5460ee9a54afeb8fd", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r public void toStringAncestors(StringBuffer buffer)", "signatureAfterChange": "\r protected void toStringAncestors(StringBuffer buffer)", "diff": ["-public void toStringAncestors(StringBuffer buffer) {\r", "+ */\r", "+protected void toStringAncestors(StringBuffer buffer) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca33dfe1e651870719910f81e52102a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "5280e1e8db473b5a94d57033a6d3cab2e44e385d", "commitAfterChange": "2f280867bbcfaf415b943516836db7a4100ee4c3", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 67, "signatureBeforeChange": "  private void disableWarnings()", "signatureAfterChange": "  protected void disableWarnings()", "diff": ["-private void disableWarnings() {", "+protected void disableWarnings() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca876f6e1984f0ff77534779d40b826b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "3456d435147120c13b3c8d28211c7dc329afb268", "commitAfterChange": "ffc31b8ab0121bd8a4010c20c20d217b031bfd17", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tprivate IFile getIFileForTypeName(String typeName)", "signatureAfterChange": " \tpublic IFile getIFileForTypeName(String typeName)", "diff": ["-\tprivate IFile getIFileForTypeName(String typeName)", "+\tpublic IFile getIFileForTypeName(String typeName)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb21625e3683662cc4f688402727ef98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 48, "signatureBeforeChange": "  public final void scanEscapeCharacter() throws InvalidInputException", "signatureAfterChange": "  protected final void scanEscapeCharacter() throws InvalidInputException", "diff": ["-public final void scanEscapeCharacter() throws InvalidInputException {", "+protected final void scanEscapeCharacter() throws InvalidInputException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc49167bb2edc3fbbe1c264fdccd8352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "e22aab5b41c591a479d0d95b565ca487ad2c9c88", "commitAfterChange": "e6216311ffab56ba03e084ce8ca3a0857f24301b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  private State getLastState(IProject project)", "signatureAfterChange": "  public State getLastState(IProject project)", "diff": ["-private State getLastState(IProject project) {", "+public State getLastState(IProject project) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd032143d93f8c8f664fdd28c63786c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Formatter/test451/Format_out.java", "commitBeforeChange": "9cd8ac9158e8cf65a77f69d8bfcd62dc9418f984", "commitAfterChange": "c8ff3cbc92fbc03cd36a58b694b93e2376e6a266", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void temp()", "signatureAfterChange": "     private void temp()", "diff": ["-   public void temp() {", "+   private void temp() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd455c0daa4e9e10e88014d5ca24ebf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/ExtJarFactoryContainer.java", "commitBeforeChange": "f1d83e37dc72ba6d2676594fd1c64161817b3d74", "commitAfterChange": "50c8fc7c21507137e2b63d15c742a120cb954eef", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tprotected File getJarFile()", "signatureAfterChange": " \t@Override \tpublic File getJarFile()", "diff": ["-\tprotected File getJarFile() {", "+\tpublic File getJarFile() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd734649ea377eeb9533c35658bee4e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "3bbbea1abb8cbc8021235dc7fd5daa31c69b821d", "commitAfterChange": "c08afc012e19ac605172783201153732e97d7332", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " private void parseTags(NLSLine line)", "signatureAfterChange": " protected void parseTags(NLSLine line)", "diff": ["-private void parseTags(NLSLine line) {", "+protected void parseTags(NLSLine line) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cecfa572306d1f610f0c09f8c040eaa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException", "signatureAfterChange": "\r \r \tpublic void reportBinaryMatch(\r \t\tIMember binaryMember,\r \t\tIBinaryType info,\r \t\tint accuracy)\r \t\tthrows CoreException, JavaModelException", "diff": ["-}\r", "-private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException {\r", "-\tISourceRange range = binaryMember.getNameRange();\r", "-\tif (range.getOffset() == -1) {\r", "-\t\tClassFile classFile = (ClassFile)binaryMember.getClassFile();\r", "-\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "-\t\tif (mapper != null) {\r", "-\t\t\tIType type = classFile.getType();\r", "-\t\t\tchar[] contents = mapper.findSource(type, info);\r", "-\t\t\tif (contents != null) {\r", "-\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tint startIndex = range.getOffset();\r", "-\tint endIndex = startIndex + range.getLength() - 1;\r", "-\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "-}\r", "+\tpublic void reportBinaryMatch(\r", "+\t\tIMember binaryMember,\r", "+\t\tIBinaryType info,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException, JavaModelException {\r", "+\t\tISourceRange range = binaryMember.getNameRange();\r", "+\t\tif (range.getOffset() == -1) {\r", "+\t\t\tClassFile classFile = (ClassFile) binaryMember.getClassFile();\r", "+\t\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "+\t\t\tif (mapper != null) {\r", "+\t\t\t\tIType type = classFile.getType();\r", "+\t\t\t\tchar[] contents = mapper.findSource(type, info);\r", "+\t\t\t\tif (contents != null) {\r", "+\t\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "+\t\t}\r", "+\t\tint startIndex = range.getOffset();\r", "+\t\tint endIndex = startIndex + range.getLength() - 1;\r", "+\t\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1263b6565448f94c827ecbf72d3feef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "82e3492687fb385a8a9ba6c56e1f6d491dc8d79a", "commitAfterChange": "0b30f6ac807cc8aa14a5978d1dd305dd71baedda", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprotected void verifyBindings(Javadoc docComment)", "signatureAfterChange": " \tprivate void verifyBindings(Javadoc docComment)", "diff": ["-\tprotected void verifyBindings(Javadoc docComment) {", "+\tprivate void verifyBindings(Javadoc docComment) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d20fb0d80b34571c027ee6ce53ab316e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/BooleanConstant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t public BooleanConstant(boolean value)", "signatureAfterChange": " private BooleanConstant(boolean value)", "diff": ["-\t", "-public BooleanConstant(boolean value) {", "+}", "+private BooleanConstant(boolean value) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3627d2b9a8b0ae448d659ca89eb9e77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException", "signatureAfterChange": "\r \r \tpublic void reportBinaryMatch(\r \t\tIMember binaryMember,\r \t\tIBinaryType info,\r \t\tint accuracy)\r \t\tthrows CoreException, JavaModelException", "diff": ["-}\r", "-private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException {\r", "-\tISourceRange range = binaryMember.getNameRange();\r", "-\tif (range.getOffset() == -1) {\r", "-\t\tClassFile classFile = (ClassFile)binaryMember.getClassFile();\r", "-\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "-\t\tif (mapper != null) {\r", "-\t\t\tIType type = classFile.getType();\r", "-\t\t\tchar[] contents = mapper.findSource(type, info);\r", "-\t\t\tif (contents != null) {\r", "-\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tint startIndex = range.getOffset();\r", "-\tint endIndex = startIndex + range.getLength() - 1;\r", "-\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "-}\r", "+\tpublic void reportBinaryMatch(\r", "+\t\tIMember binaryMember,\r", "+\t\tIBinaryType info,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException, JavaModelException {\r", "+\t\tISourceRange range = binaryMember.getNameRange();\r", "+\t\tif (range.getOffset() == -1) {\r", "+\t\t\tClassFile classFile = (ClassFile) binaryMember.getClassFile();\r", "+\t\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "+\t\t\tif (mapper != null) {\r", "+\t\t\t\tIType type = classFile.getType();\r", "+\t\t\t\tchar[] contents = mapper.findSource(type, info);\r", "+\t\t\t\tif (contents != null) {\r", "+\t\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "+\t\t}\r", "+\t\tint startIndex = range.getOffset();\r", "+\t\tint endIndex = startIndex + range.getLength() - 1;\r", "+\t\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d404d5c304a595d6738ab7ce4e8caebd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "0c9d35cff2dc84f5482dc68d6d37735087c6900a", "commitAfterChange": "ec83f4485fd98b95e4e8e2158e7e66ce8f1734fe", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate void exitType(int declarationEnd)", "signatureAfterChange": " \tpublic void exitType(int declarationEnd)", "diff": ["-\t}", "-\tprivate void exitType(int declarationEnd) {", "+\tpublic void exitType(int declarationEnd) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5c575692b226d265b1d9aaf31230b43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c0f09226322ecd771874277f6bb778276b0ec732", "commitAfterChange": "c22186f99babc1d07ce1a8d9528c4806c68c13fc", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic void formatMethodArguments( \t\t\tAbstractMethodDeclaration methodDeclaration,  \t\t\tboolean spaceBeforeOpenParen,  \t\t\tboolean spaceBetweenEmptyArgument, \t\t\tboolean spaceBeforeClosingParen,  \t\t\tboolean spaceBeforeFirstArgument,  \t\t\tboolean spaceBeforeComma,  \t\t\tboolean spaceAfterComma)", "signatureAfterChange": "  \tprivate void formatMethodArguments( \t\t\tAbstractMethodDeclaration methodDeclaration,  \t\t\tboolean spaceBeforeOpenParen,  \t\t\tboolean spaceBetweenEmptyArgument, \t\t\tboolean spaceBeforeClosingParen,  \t\t\tboolean spaceBeforeFirstArgument,  \t\t\tboolean spaceBeforeComma,  \t\t\tboolean spaceAfterComma)", "diff": ["-\tpublic void formatMethodArguments(", "+\tprivate void formatMethodArguments("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7579dd8862c8927bf4b5fdd47078fa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate void consumeToken()", "signatureAfterChange": "  \tprotected void consumeToken()", "diff": ["-\tprivate void consumeToken() {", "+\tprotected void consumeToken() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7a733de7a9ab01c93a100b31d3c1869", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "60db601fcf1f9902521e113ab5f357d4c17a1c7b", "commitAfterChange": "b6fe6f5260b125d69b0514fb7ed6ac0364e3e649", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r \tprivate void addSubscope(Scope childScope)", "signatureAfterChange": "\r \r \tpublic void addSubscope(Scope childScope)", "diff": ["-\tprivate void addSubscope(Scope childScope) {\r", "+\tpublic void addSubscope(Scope childScope) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b069024d81085f448da5102b7d5200", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java", "commitBeforeChange": "4ce841d6606c2c0b7f24c9925dd47ac216c52a6e", "commitAfterChange": "dd4ead302ceb5b95b74beecab83c5b580915aa31", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private Object getMemberValue(MemberValuePair memberValuePair, Object binaryValue)", "signatureAfterChange": " protected Object getMemberValue(MemberValuePair memberValuePair, Object binaryValue)", "diff": ["-private Object getMemberValue(MemberValuePair memberValuePair, Object binaryValue) {", "+protected Object getMemberValue(MemberValuePair memberValuePair, Object binaryValue) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d89944e2dbdb540747214ab8e3834a2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "  \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\tpublic TypeBinding getTypeBinding(Scope scope) {", "+\tprotected TypeBinding getTypeBinding(Scope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d903b9785e6e6d9071c0c85dcb9e96e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": " \t \tprotected void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["+\tprotected void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression) {", "+\t\tint start = expression.sourceStart;", "+\t\tint end = expression.sourceEnd;", "+\t\tint leftParentCount = 1;", "+\t\tint rightParentCount = 0;", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token = this.scanner.getNextToken();", "+\t\t\texpression.sourceStart = this.scanner.currentPosition;", "+\t\t\tboolean stop = false;", "+\t\t\twhile (!stop && ((token  = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN:", "+\t\t\t\t\t\tleftParentCount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN:", "+\t\t\t\t\t\trightParentCount++;", "+\t\t\t\t\t\tif (rightParentCount == leftParentCount) {", "+\t\t\t\t\t\t\t// we found the matching parenthesis", "+\t\t\t\t\t\t\tstop = true;", "+\t\t\t\t\t\t}", "+\t\t\t}", "+\t\t\texpression.sourceEnd = this.scanner.startPosition - 1;", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t}", "-\t", "-\tprivate void adjustSourcePositionsForParent(org.eclipse.jdt.internal.compiler.ast.Expression expression) {", "-\t\tint start = expression.sourceStart;", "-\t\tint end = expression.sourceEnd;", "-\t\tint leftParentCount = 1;", "-\t\tint rightParentCount = 0;", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token = this.scanner.getNextToken();", "-\t\t\texpression.sourceStart = this.scanner.currentPosition;", "-\t\t\tboolean stop = false;", "-\t\t\twhile (!stop && ((token  = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN:", "-\t\t\t\t\t\tleftParentCount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN:", "-\t\t\t\t\t\trightParentCount++;", "-\t\t\t\t\t\tif (rightParentCount == leftParentCount) {", "-\t\t\t\t\t\t\t// we found the matching parenthesis", "-\t\t\t\t\t\t\tstop = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\texpression.sourceEnd = this.scanner.startPosition - 1;", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9676e1ed64c6f3690ca37f6ed773f0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 97, "signatureBeforeChange": " \t \tprivate VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration)", "signatureAfterChange": " \t \tprotected VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration)", "diff": ["+\t", "+\tprotected VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration) {", "+\t\tVariableDeclarationFragment variableDeclarationFragment = this.ast.newVariableDeclarationFragment();", "+\t\tSimpleName name = this.ast.newSimpleName(new String(fieldDeclaration.name));", "+\t\tname.setSourceRange(fieldDeclaration.sourceStart, fieldDeclaration.sourceEnd - fieldDeclaration.sourceStart + 1);", "+\t\tvariableDeclarationFragment.setName(name);", "+\t\tint end = retrievePositionBeforeNextCommaOrSemiColon(fieldDeclaration.sourceEnd, fieldDeclaration.declarationSourceEnd);", "+\t\tif (end == -1) {", "+\t\t\tvariableDeclarationFragment.setSourceRange(fieldDeclaration.sourceStart, fieldDeclaration.declarationSourceEnd - fieldDeclaration.sourceStart + 1);", "+\t\t\tvariableDeclarationFragment.setFlags(variableDeclarationFragment.getFlags() | ASTNode.MALFORMED);", "+\t\t} else {", "+\t\t\tvariableDeclarationFragment.setSourceRange(fieldDeclaration.sourceStart, end - fieldDeclaration.sourceStart + 1);", "+\t\t}", "+\t\tif (fieldDeclaration.initialization != null) {", "+\t\t\tvariableDeclarationFragment.setInitializer(convert(fieldDeclaration.initialization));", "+\t\t}", "+\t\tvariableDeclarationFragment.setExtraDimensions(retrieveExtraDimension(fieldDeclaration.sourceEnd + 1, fieldDeclaration.declarationSourceEnd ));", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(name, fieldDeclaration);", "+\t\t\trecordNodes(variableDeclarationFragment, fieldDeclaration);", "+\t\t\tvariableDeclarationFragment.resolveBinding();", "+\t\t}", "+\t\treturn variableDeclarationFragment;", "+\t}", "-\t", "-\tprivate VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration) {", "-\t\tVariableDeclarationFragment variableDeclarationFragment = this.ast.newVariableDeclarationFragment();", "-\t\tSimpleName name = this.ast.newSimpleName(new String(fieldDeclaration.name));", "-\t\tname.setSourceRange(fieldDeclaration.sourceStart, fieldDeclaration.sourceEnd - fieldDeclaration.sourceStart + 1);", "-\t\tvariableDeclarationFragment.setName(name);", "-\t\tint end = retrievePositionBeforeNextCommaOrSemiColon(fieldDeclaration.sourceEnd, fieldDeclaration.declarationSourceEnd);", "-\t\tif (end == -1) {", "-\t\t\tvariableDeclarationFragment.setSourceRange(fieldDeclaration.sourceStart, fieldDeclaration.declarationSourceEnd - fieldDeclaration.sourceStart + 1);", "-\t\t\tvariableDeclarationFragment.setFlags(variableDeclarationFragment.getFlags() | ASTNode.MALFORMED);", "-\t\t} else {", "-\t\t\tvariableDeclarationFragment.setSourceRange(fieldDeclaration.sourceStart, end - fieldDeclaration.sourceStart + 1);", "-\t\t}", "-\t\tif (fieldDeclaration.initialization != null) {", "-\t\t\tvariableDeclarationFragment.setInitializer(convert(fieldDeclaration.initialization));", "-\t\t}", "-\t\tvariableDeclarationFragment.setExtraDimensions(retrieveExtraDimension(fieldDeclaration.sourceEnd + 1, fieldDeclaration.declarationSourceEnd ));", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(name, fieldDeclaration);", "-\t\t\trecordNodes(variableDeclarationFragment, fieldDeclaration);", "-\t\t\tvariableDeclarationFragment.resolveBinding();", "-\t\t}", "-\t\treturn variableDeclarationFragment;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f883e6a79f6bf522cef5c3a1db589c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public char[] indexEntryPrefix()", "signatureAfterChange": " protected char[] indexEntryPrefix()", "diff": ["-public char[] indexEntryPrefix(){", "+protected char[] indexEntryPrefix() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dae5feaa7386a59a135f12f5230a0bd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void decodeIndexEntry(IEntryResult entryResult)", "signatureAfterChange": " protected void decodeIndexEntry(IEntryResult entryResult)", "diff": ["-public void decodeIndexEntry(IEntryResult entryResult){", "+protected void decodeIndexEntry(IEntryResult entryResult){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db4a4f1fb8cdf8c547fa0f14acca4ad1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/HashtableOfObject.java", "commitBeforeChange": "bf20c4733b5ba628131f77425b6d1ad646dfd787", "commitAfterChange": "4fece3d5714f1973bb889af985f57d3ae8f56e20", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprotected void rehash()", "signatureAfterChange": "  \tprivate void rehash()", "diff": ["-\tprotected void rehash() {", "+\tprivate void rehash() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbed6c75481ac61d3129d7b5bafa4d1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "commitAfterChange": "0bcd341ea781d3ca9f30d724e6161bfab2161b14", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprotected ReferenceBinding actualType()", "signatureAfterChange": " \t \tpublic ReferenceBinding actualType()", "diff": ["-\tprotected ReferenceBinding actualType() {", "+\tpublic ReferenceBinding actualType() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbf57cfe08437c52ab2114fa32b1473e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "44f16921b8c027b51f84603faa33f81e389682b2", "commitAfterChange": "56ff24136af7890b447eb6d103f485295aa528a8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " private static boolean isTrue(boolean expression, String message)", "signatureAfterChange": " protected static boolean isTrue(boolean expression, String message)", "diff": ["-private static boolean isTrue(boolean expression, String message) {", "+protected static boolean isTrue(boolean expression, String message) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbfc4318c40d41fd086e23a64f7520c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 119, "signatureBeforeChange": " \tprivate int retrieveEndBlockPosition(int start, int end)", "signatureAfterChange": " \tprotected int retrieveEndBlockPosition(int start, int end)", "diff": ["-\t */", "-\tprivate int retrieveEndBlockPosition(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\tint count = 0;", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE://110", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE://95", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t\t\tif (count == 0) {", "-\t\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}", "+\t */", "+\tprotected int retrieveEndBlockPosition(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\tint count = 0;", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE://110", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE://95", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tif (count == 0) {", "+\t\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddf2b421e920d51a5fffb95653955fff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tprotected void removeFromParentInfo(Openable child)", "signatureAfterChange": " \tprivate void removeFromParentInfo(Openable child)", "diff": ["-\tprotected void removeFromParentInfo(Openable child) {", "+\tprivate void removeFromParentInfo(Openable child) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deb3ba44137346d639eb390b36f94ce6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 127, "signatureBeforeChange": " \tprivate int retrievePositionBeforeNextCommaOrSemiColon(int start, int end)", "signatureAfterChange": " \tprotected int retrievePositionBeforeNextCommaOrSemiColon(int start, int end)", "diff": ["-\t */", "-\tprivate int retrievePositionBeforeNextCommaOrSemiColon(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\tint braceCounter = 0;", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE :", "-\t\t\t\t\t\tbraceCounter++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE :", "-\t\t\t\t\t\tbraceCounter--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "-\t\t\t\t\t\tbraceCounter++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "-\t\t\t\t\t\tbraceCounter--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET :", "-\t\t\t\t\t\tbraceCounter++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET :", "-\t\t\t\t\t\tbraceCounter--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameCOMMA :", "-\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON :", "-\t\t\t\t\t\tif (braceCounter == 0) {", "-\t\t\t\t\t\t\treturn this.scanner.startPosition - 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}", "+\t */", "+\tprotected int retrievePositionBeforeNextCommaOrSemiColon(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\tint braceCounter = 0;", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE :", "+\t\t\t\t\t\tbraceCounter++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE :", "+\t\t\t\t\t\tbraceCounter--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "+\t\t\t\t\t\tbraceCounter++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "+\t\t\t\t\t\tbraceCounter--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET :", "+\t\t\t\t\t\tbraceCounter++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET :", "+\t\t\t\t\t\tbraceCounter--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMA :", "+\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON :", "+\t\t\t\t\t\tif (braceCounter == 0) {", "+\t\t\t\t\t\t\treturn this.scanner.startPosition - 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e002d41c09399e218a474bc7ca3860a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e76466b5729fd993ef3dcc80ae6ab76bd33e5dcd", "commitAfterChange": "e0c80c2b16b54e5a1c86d6779d617fb326a5c618", "methodNumberBeforeChange": 320, "methodNumberAfterChange": 320, "signatureBeforeChange": " protected final void writeUnsignedShort(int value)", "signatureAfterChange": " private final void writeUnsignedShort(int value)", "diff": ["-protected final void writeUnsignedShort(int value) {", "+private final void writeUnsignedShort(int value) {", "+\t// no bound check since used only from within codestream where already checked"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e08c7e4f5d7c32166635e3a4fe0f8269", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaWorkspaceScope.java", "commitBeforeChange": "e93f5e951e598449bd2c13c37baf26f2f67b991c", "commitAfterChange": "62963aabc698cdd12bc1bf2bd37eac8d72bccd2f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t public JavaWorkspaceScope()", "signatureAfterChange": "  private JavaWorkspaceScope()", "diff": ["-public JavaWorkspaceScope() {", "+", "+private JavaWorkspaceScope() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1e1bb3283da73d002b2fd6696a7c5ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 50, "signatureBeforeChange": " public boolean typeInHierarchy(ReferenceBinding binding)", "signatureAfterChange": " protected boolean typeInHierarchy(ReferenceBinding binding)", "diff": ["-public boolean typeInHierarchy(ReferenceBinding binding) {", "+protected boolean typeInHierarchy(ReferenceBinding binding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c76fef6356a73322efb6308be0284f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "4a3b8d7f66c815bfc252f4ffc29a63c010eff917", "commitAfterChange": "2eb63d812179e5217306b90a651b95bfe7169c81", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void reportWorked(int workIncrement, int currentUnitIndex)", "signatureAfterChange": " \tprotected void reportWorked(int workIncrement, int currentUnitIndex)", "diff": ["-\tprivate void reportWorked(int workIncrement, int currentUnitIndex) {", "+\tprotected void reportWorked(int workIncrement, int currentUnitIndex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2fbed65441c2fc7fbdcefb812cea0de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "7bf89e29c34a348a2ed388f7cdb6c1016941cf61", "commitAfterChange": "cd5adcef3921beea7df4f6703ab58225bdb4ec39", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void addInnerClasses(ReferenceBinding refBinding)", "signatureAfterChange": " \tprivate void addInnerClasses(ReferenceBinding refBinding)", "diff": ["-\tpublic void addInnerClasses(ReferenceBinding refBinding) {", "+\tprivate void addInnerClasses(ReferenceBinding refBinding) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3497637995b8be2e79e20092d648bde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \tprotected FileSystem getLibraryAccess()", "signatureAfterChange": "\r \tpublic FileSystem getLibraryAccess()", "diff": ["-\tprotected FileSystem getLibraryAccess() {\r", "+\tpublic FileSystem getLibraryAccess() {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e38502641fa8e70599307f2fd318ee68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "41a140d5041f3071881a473fd0061cff7116544d", "commitAfterChange": "b78ae060272cf62c31a393a1312d22cbe8ed28b5", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " private FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["-private FieldBinding resolveTypeFor(FieldBinding field) {", "+public FieldBinding resolveTypeFor(FieldBinding field) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40541722c3d1827c0540a71b6e4ecb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8903f8b8ad1c589412048f3a20c4f904a770c47b", "commitAfterChange": "d56ccdd4198600286f5f55d1048b7b5e86e2f402", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "  \tprotected int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments)", "signatureAfterChange": "  \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments)", "diff": ["-\tprotected int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments) {", "+\tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e421c5a61b5000b96a0cc4d59b4d21f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "f4680a34e1f2039b2a192d0a537b3157d981aa26", "commitAfterChange": "41f0eedac440a5a7408e664ba09866184ebddd55", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprotected TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["-\tprotected TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length) {", "+", "+\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length) {", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4f6eff8e7a3d0cbe2127d1413259562", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0fcbdf3f242eca695398990480b5252f47b13157", "commitAfterChange": "bdb5fd6b326428cc9f0c1c9c5974b9a701aacf91", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate void clearWorkingCopyMaps()", "signatureAfterChange": "  \tpublic void clearWorkingCopyMaps()", "diff": ["-\tprivate void clearWorkingCopyMaps()", "+\tpublic void clearWorkingCopyMaps()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6892965c72131374bf15f4c93d8e181", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tprivate void removeTrailingCommentFromExpressionEndingWithAParen(ASTNode node)", "signatureAfterChange": " \tprotected void removeTrailingCommentFromExpressionEndingWithAParen(ASTNode node)", "diff": ["-\t */", "-\tprivate void removeTrailingCommentFromExpressionEndingWithAParen(ASTNode node) {", "-\t\tint start = node.getStartPosition();", "-\t\tthis.scanner.resetTo(start, start + node.getLength());", "-\t\tint token;", "-\t\tint parenCounter = 0;", "-\t\ttry {", "-\t\t\twhile((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)  {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "-\t\t\t\t\t\tparenCounter++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "-\t\t\t\t\t\tparenCounter--;", "-\t\t\t\t\t\tif (parenCounter == 0) {", "-\t\t\t\t\t\t\tint end = this.scanner.currentPosition - 1;", "-\t\t\t\t\t\t\tnode.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}", "+\t */", "+\tprotected void removeTrailingCommentFromExpressionEndingWithAParen(ASTNode node) {", "+\t\tint start = node.getStartPosition();", "+\t\tthis.scanner.resetTo(start, start + node.getLength());", "+\t\tint token;", "+\t\tint parenCounter = 0;", "+\t\ttry {", "+\t\t\twhile((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)  {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "+\t\t\t\t\t\tparenCounter++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "+\t\t\t\t\t\tparenCounter--;", "+\t\t\t\t\t\tif (parenCounter == 0) {", "+\t\t\t\t\t\t\tint end = this.scanner.currentPosition - 1;", "+\t\t\t\t\t\t\tnode.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e79c9be823bbb3b63c95d0660b2eb62b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic boolean createExternalArchiveDelta(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tpublic boolean createExternalArchiveDelta(IProgressMonitor monitor) throws JavaModelException {", "+\tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor) throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e4b11d5ff647acb91d3b1201cd9119", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "1159f42f3e1e1aaac22ff9f396ef841945f2fbd4", "commitAfterChange": "262511abdaf520ffe570d2f50bd42f0cc7c734ab", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " private static byte[] readUntil(InputStream input, byte separator, int offset) throws IOException, JavaModelException", "signatureAfterChange": " protected static byte[] readUntil(InputStream input, byte separator, int offset) throws IOException, JavaModelException", "diff": ["-private static byte[] readUntil(InputStream input, byte separator, int offset) throws IOException, JavaModelException{", "+protected static byte[] readUntil(InputStream input, byte separator, int offset) throws IOException, JavaModelException{"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8eea21858c7e427aeb66264b5aafc9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedTypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": " protected TypeBinding getTypeBinding(Scope scope)", "diff": ["-public TypeBinding getTypeBinding(Scope scope) {", "+protected TypeBinding getTypeBinding(Scope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb58ecbe02941670f0647e6d74fa9dcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 112, "signatureBeforeChange": " \t \tprivate void recordPendingNameScopeResolution(Name name)", "signatureAfterChange": " \t \tprotected void recordPendingNameScopeResolution(Name name)", "diff": ["+\tprotected void recordPendingNameScopeResolution(Name name) {", "+\t\tif (this.pendingNameScopeResolution == null) {", "+\t\t\tthis.pendingNameScopeResolution = new HashSet();", "+\t\tthis.pendingNameScopeResolution.add(name);", "-\t", "-\tprivate void recordPendingNameScopeResolution(Name name) {", "-\t\tif (this.pendingNameScopeResolution == null) {", "-\t\t\tthis.pendingNameScopeResolution = new HashSet();", "-\t\t}", "-\t\tthis.pendingNameScopeResolution.add(name);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecd47bef98ed45926e7bc49fe7436e78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " public abstract TypeBinding getTypeBinding(Scope scope);", "signatureAfterChange": " protected abstract TypeBinding getTypeBinding(Scope scope);", "diff": ["-public abstract TypeBinding getTypeBinding(Scope scope);", "+}", "+protected abstract TypeBinding getTypeBinding(Scope scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed728aa6e9e813dd2a0b0cbcb7fece75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "3bbbea1abb8cbc8021235dc7fd5daa31c69b821d", "commitAfterChange": "c08afc012e19ac605172783201153732e97d7332", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  private void checkNonExternalizedString()", "signatureAfterChange": "  protected void checkNonExternalizedString()", "diff": ["-private void checkNonExternalizedString() {", "+protected void checkNonExternalizedString() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee2f5ba96d63c81c33c66a09929d3cf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateElementInCUOperation.java", "commitBeforeChange": "a5ad70691ca6592966c0a0fcaabf0d3456851d31", "commitAfterChange": "a44910bed0a98f3347d4f346d91400e1635bab7c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r protected abstract String getMainTaskName();", "signatureAfterChange": "\r public abstract String getMainTaskName();", "diff": ["-protected abstract String getMainTaskName();\r", "+public abstract String getMainTaskName();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee3ce4ace7ad99cb9002483cb015b411", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "da9e30a8d441a1da42a289d2606f77eaa8d811d1", "commitAfterChange": "ba5344094af5a10113083e490b48587602f0a697", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": " private boolean subOrSuperOfFocus(ReferenceBinding typeBinding)", "signatureAfterChange": " public boolean subOrSuperOfFocus(ReferenceBinding typeBinding)", "diff": ["-private boolean subOrSuperOfFocus(ReferenceBinding typeBinding) {", "+public boolean subOrSuperOfFocus(ReferenceBinding typeBinding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef67681d531a26cd085e25263e874d36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void reportReference( \tAstNode reference, \tAbstractMethodDeclaration methodDeclaration, \tIJavaElement parent, \tint accuracy) \tthrows CoreException", "signatureAfterChange": " private void reportReference( \tAstNode reference, \tAbstractMethodDeclaration methodDeclaration, \tIJavaElement parent, \tint accuracy) \tthrows CoreException", "diff": ["-public void reportReference(", "+private void reportReference("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2332543b18131cf0431c889069d3254", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "8c9e171f64b2b088eda3049713163ec0a16b0a05", "commitAfterChange": "cdc11c6e72240b1766f8f5810b1fb669da307c66", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tprivate boolean verifyEndLine(int textPosition)", "signatureAfterChange": " \tprotected boolean verifyEndLine(int textPosition)", "diff": ["-\tprivate boolean verifyEndLine(int textPosition) {", "+\tprotected boolean verifyEndLine(int textPosition) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f250083d22cea68bf7b4ac1c1053f25e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "commitAfterChange": "a502b956779c4dac7f761502999cc6d149ba7556", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 39, "signatureBeforeChange": " \t\t \t\tpublic void printOut(char c)", "signatureAfterChange": "  \t\tprivate void printOut(char c)", "diff": ["-\t\t", "-\t\tpublic void printOut(char c) {", "+", "+\t\tprivate void printOut(char c) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f306eaebc565f37a1f401cb36bd22215", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeSignatureTest.java", "commitBeforeChange": "06e44af1d1177a8820136cde1fbe3146b9563e7f", "commitAfterChange": "c0452100f2ed18d65cf0dd0efb6f9fc0ffa98156", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void writeFiles(String[] testFiles)", "signatureAfterChange": " \tprotected void writeFiles(String[] testFiles)", "diff": ["-\tprivate void writeFiles(String[] testFiles) {", "+\tprotected void writeFiles(String[] testFiles) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4c5a15519326ce1e84ef4cc55bda115", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 20, "signatureBeforeChange": " public IType createTypeHandle(char[] simpleTypeName)", "signatureAfterChange": " protected IType createTypeHandle(char[] simpleTypeName)", "diff": ["-public IType createTypeHandle(char[] simpleTypeName) {", "+protected IType createTypeHandle(char[] simpleTypeName) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4fbb20df951da17f749c34a078682a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 132, "signatureBeforeChange": " \tprivate void retrieveSemiColonPosition(ASTNode node)", "signatureAfterChange": " \tprotected void retrieveSemiColonPosition(ASTNode node)", "diff": ["-\t */", "-\tprivate void retrieveSemiColonPosition(ASTNode node) {", "-\t\tint start = node.getStartPosition();", "-\t\tint length = node.getLength();", "-\t\tint end = start + length;", "-\t\tint count = 0;", "-\t\tthis.scanner.resetTo(end, this.compilationUnitSource.length);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON:", "-\t\t\t\t\t\tif (count == 0) {", "-\t\t\t\t\t\t\tnode.setSourceRange(start, this.scanner.currentPosition - start);", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE :", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE :", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET :", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET :", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}", "+\t */", "+\tprotected void retrieveSemiColonPosition(ASTNode node) {", "+\t\tint start = node.getStartPosition();", "+\t\tint length = node.getLength();", "+\t\tint end = start + length;", "+\t\tint count = 0;", "+\t\tthis.scanner.resetTo(end, this.compilationUnitSource.length);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON:", "+\t\t\t\t\t\tif (count == 0) {", "+\t\t\t\t\t\t\tnode.setSourceRange(start, this.scanner.currentPosition - start);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE :", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE :", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET :", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET :", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f60f548750089ccb474c52421e3ff98b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic ICompilationUnit[] getWorkingCopies()", "signatureAfterChange": " \tprivate ICompilationUnit[] getWorkingCopies()", "diff": ["-\tpublic ICompilationUnit[] getWorkingCopies() {", "+\tprivate ICompilationUnit[] getWorkingCopies() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6916a2abecc749df4b8bcf072898c3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 122, "signatureBeforeChange": " \tprivate int retrieveEndOfElementTypeNamePosition(int start, int end)", "signatureAfterChange": " \tprotected int retrieveEndOfElementTypeNamePosition(int start, int end)", "diff": ["-\t */", "-\tprivate int retrieveEndOfElementTypeNamePosition(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier:", "-\t\t\t\t\tcase TerminalTokens.TokenNamebyte:", "-\t\t\t\t\tcase TerminalTokens.TokenNamechar:", "-\t\t\t\t\tcase TerminalTokens.TokenNamedouble:", "-\t\t\t\t\tcase TerminalTokens.TokenNamefloat:", "-\t\t\t\t\tcase TerminalTokens.TokenNameint:", "-\t\t\t\t\tcase TerminalTokens.TokenNamelong:", "-\t\t\t\t\tcase TerminalTokens.TokenNameshort:", "-\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}", "+\t */", "+\tprotected int retrieveEndOfElementTypeNamePosition(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier:", "+\t\t\t\t\tcase TerminalTokens.TokenNamebyte:", "+\t\t\t\t\tcase TerminalTokens.TokenNamechar:", "+\t\t\t\t\tcase TerminalTokens.TokenNamedouble:", "+\t\t\t\t\tcase TerminalTokens.TokenNamefloat:", "+\t\t\t\t\tcase TerminalTokens.TokenNameint:", "+\t\t\t\t\tcase TerminalTokens.TokenNamelong:", "+\t\t\t\t\tcase TerminalTokens.TokenNameshort:", "+\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f88b02d36a614e33268001f080277b6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e07f4f0a99bd2adfbbf5b9ca22366e86fff03c45", "commitAfterChange": "4913a401efb58ba1e29aebf6d70977c918d30260", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \r \tprivate String extractDestinationPathFromSourceFile(CompilationResult result)", "signatureAfterChange": "\r \r \tpublic String extractDestinationPathFromSourceFile(CompilationResult result)", "diff": ["-\tprivate String extractDestinationPathFromSourceFile(CompilationResult result) {\r", "+\tpublic String extractDestinationPathFromSourceFile(CompilationResult result) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f92975617c8414c98f75a070c80ee888", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "signatureAfterChange": " \tpublic IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "diff": ["-\tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes) {", "+\tpublic IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbea50619898d52439fb9038972560e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void generateCode(ClassFile classFile)", "signatureAfterChange": "  \tpublic void generateCode(ClassFile classFile)", "diff": ["-\tprivate void generateCode(ClassFile classFile) {", "+\tpublic void generateCode(ClassFile classFile) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc1206cff878b3faba629bf8c303407b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 126, "signatureBeforeChange": " \tprivate int retrieveIdentifierEndPosition(int start, int end)", "signatureAfterChange": " \tprotected int retrieveIdentifierEndPosition(int start, int end)", "diff": ["-\t */", "-\tprivate int retrieveIdentifierEndPosition(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier://110", "-\t\t\t\t\t\treturn this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}\t", "+\t */", "+\tprotected int retrieveIdentifierEndPosition(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier://110", "+\t\t\t\t\t\treturn this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc76313ef54094e62271896f26cd4b21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 109, "signatureBeforeChange": " \t \tprivate void recordName(Name name, org.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode)", "signatureAfterChange": "  \tprotected void recordName(Name name, org.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode)", "diff": ["+\tprotected void recordName(Name name, org.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode) {", "+\t\tif (compilerNode != null) {", "+\t\t\trecordNodes(name, compilerNode);", "+\t\t\tif (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode;", "+\t\t\t\tif (name.isQualifiedName()) {", "+\t\t\t\t\tint count = 0;", "+\t\t\t\t\tSimpleName simpleName = null;", "+\t\t\t\t\twhile (name.isQualifiedName()) {", "+\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "+\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "+\t\t\t\t\t\tsimpleName.index = count++;", "+\t\t\t\t\t\tname = ((QualifiedName) name).getQualifier();", "+\t\t\t\t\t\tname.index = count;", "+\t\t\t\t\t\trecordNodes(name, typeRef);", "-\tprivate void recordName(Name name, org.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode) {", "-\t\tif (compilerNode != null) {", "-\t\t\trecordNodes(name, compilerNode);", "-\t\t\tif (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode;", "-\t\t\t\tif (name.isQualifiedName()) {", "-\t\t\t\t\tint count = 0;", "-\t\t\t\t\tSimpleName simpleName = null;", "-\t\t\t\t\twhile (name.isQualifiedName()) {", "-\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "-\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "-\t\t\t\t\t\tsimpleName.index = count++;", "-\t\t\t\t\t\tname = ((QualifiedName) name).getQualifier();", "-\t\t\t\t\t\tname.index = count;", "-\t\t\t\t\t\trecordNodes(name, typeRef);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc8a9af10553437e982e745ee5ddd7ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tpublic void reportBinaryMatch(\r \t\tIMember binaryMember,\r \t\tIBinaryType info,\r \t\tint accuracy)\r \t\tthrows CoreException, JavaModelException", "signatureAfterChange": "\r private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException", "diff": ["-\r", "-\tpublic void reportBinaryMatch(\r", "-\t\tIMember binaryMember,\r", "-\t\tIBinaryType info,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException, JavaModelException {\r", "-\t\tISourceRange range = binaryMember.getNameRange();\r", "-\t\tif (range.getOffset() == -1) {\r", "-\t\t\tClassFile classFile = (ClassFile) binaryMember.getClassFile();\r", "-\t\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "-\t\t\tif (mapper != null) {\r", "-\t\t\t\tIType type = classFile.getType();\r", "-\t\t\t\tchar[] contents = mapper.findSource(type, info);\r", "-\t\t\t\tif (contents != null) {\r", "-\t\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\t\t\t}\r", "+}\r", "+private void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException, JavaModelException {\r", "+\tISourceRange range = binaryMember.getNameRange();\r", "+\tif (range.getOffset() == -1) {\r", "+\t\tClassFile classFile = (ClassFile)binaryMember.getClassFile();\r", "+\t\tSourceMapper mapper = classFile.getSourceMapper();\r", "+\t\tif (mapper != null) {\r", "+\t\t\tIType type = classFile.getType();\r", "+\t\t\tchar[] contents = mapper.findSource(type, info);\r", "+\t\t\tif (contents != null) {\r", "+\t\t\t\trange = mapper.mapSource(type, contents, binaryMember);\r", "-\t\tint startIndex = range.getOffset();\r", "-\t\tint endIndex = startIndex + range.getLength() - 1;\r", "-\t\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+\tint startIndex = range.getOffset();\r", "+\tint endIndex = startIndex + range.getLength() - 1;\r", "+\tthis.report(startIndex, endIndex, binaryMember, accuracy);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcc81e4621bc058d3d4af053857b489f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 104, "signatureBeforeChange": "  \tprivate InfixExpression.Operator getOperatorFor(int operatorID)", "signatureAfterChange": " \t \tprotected InfixExpression.Operator getOperatorFor(int operatorID)", "diff": ["+\t", "+\tprotected InfixExpression.Operator getOperatorFor(int operatorID) {", "+\t\tswitch (operatorID) {", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.LESS_EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.GREATER_EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.NOT_EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "+\t\t\t\treturn InfixExpression.Operator.LEFT_SHIFT;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "+\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_SIGNED;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "+\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "+\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_OR;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "+\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_AND;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "+\t\t\t\treturn InfixExpression.Operator.PLUS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "+\t\t\t\treturn InfixExpression.Operator.MINUS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "+\t\t\t\treturn InfixExpression.Operator.REMAINDER;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "+\t\t\t\treturn InfixExpression.Operator.XOR;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "+\t\t\t\treturn InfixExpression.Operator.AND;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "+\t\t\t\treturn InfixExpression.Operator.TIMES;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "+\t\t\t\treturn InfixExpression.Operator.OR;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "+\t\t\t\treturn InfixExpression.Operator.DIVIDE;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "+\t\t\t\treturn InfixExpression.Operator.GREATER;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "+\t\t\t\treturn InfixExpression.Operator.LESS;", "+\t\t}", "+\t\treturn null;", "+\t}", "-\tprivate InfixExpression.Operator getOperatorFor(int operatorID) {", "-\t\tswitch (operatorID) {", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.LESS_EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.GREATER_EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.NOT_EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "-\t\t\t\treturn InfixExpression.Operator.LEFT_SHIFT;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "-\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_SIGNED;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "-\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_OR;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "-\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_AND;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\t\treturn InfixExpression.Operator.PLUS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\t\treturn InfixExpression.Operator.MINUS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "-\t\t\t\treturn InfixExpression.Operator.REMAINDER;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "-\t\t\t\treturn InfixExpression.Operator.XOR;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "-\t\t\t\treturn InfixExpression.Operator.AND;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "-\t\t\t\treturn InfixExpression.Operator.TIMES;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "-\t\t\t\treturn InfixExpression.Operator.OR;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "-\t\t\t\treturn InfixExpression.Operator.DIVIDE;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "-\t\t\t\treturn InfixExpression.Operator.GREATER;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "-\t\t\t\treturn InfixExpression.Operator.LESS;", "-\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe169aead1bc4a7a1d06656534c805f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 106, "signatureBeforeChange": " \t \tprivate boolean isPrimitiveType(char[] name)", "signatureAfterChange": " \t \tprotected boolean isPrimitiveType(char[] name)", "diff": ["-\tprivate boolean isPrimitiveType(char[] name) {", "+\t", "+\tprotected boolean isPrimitiveType(char[] name) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe2c8d4149cc9116fe05fcf189a83a44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 118, "signatureBeforeChange": " \tprivate void retrieveColonPosition(ASTNode node)", "signatureAfterChange": " \tprotected void retrieveColonPosition(ASTNode node)", "diff": ["-\t */", "-\tprivate void retrieveColonPosition(ASTNode node) {", "-\t\tint start = node.getStartPosition();", "-\t\tint length = node.getLength();", "-\t\tint end = start + length;", "-\t\tthis.scanner.resetTo(end, this.compilationUnitSource.length);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameCOLON:", "-\t\t\t\t\t\tnode.setSourceRange(start, this.scanner.currentPosition - start);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}", "+\t */", "+\tprotected void retrieveColonPosition(ASTNode node) {", "+\t\tint start = node.getStartPosition();", "+\t\tint length = node.getLength();", "+\t\tint end = start + length;", "+\t\tthis.scanner.resetTo(end, this.compilationUnitSource.length);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOLON:", "+\t\t\t\t\t\tnode.setSourceRange(start, this.scanner.currentPosition - start);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feec40536e45767cfefa908649daf574", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void report(int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException", "signatureAfterChange": " protected void report(int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException", "diff": ["-public void report(int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException {", "+}", "+protected void report(int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException {"]}], "num": 44310}
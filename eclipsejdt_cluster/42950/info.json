{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "262e0ea0d28edf770d4e609095cfe1e7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3129d9ecbfd27815eabe38d3033d1c72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/align/Alignment.java", "commitBeforeChange": "cd5ec8c17cdfceb4de927833e5a540f62cfa8d72", "commitAfterChange": "a4657a1df055a272f769463c9d20e50f1888cccd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \tpublic boolean couldBreak()", "signatureAfterChange": " \t\t \tpublic boolean couldBreak()", "diff": ["-", "-\t\t\t\t\t", "-\t\t\t\t\tif (this.fragmentCount > 1 && this.fragmentBreaks[1] == NONE) {", "-\t\t\t\t\t\tfor (i = 1; i < this.fragmentCount; i++){", "+\t\t\t\t\tif (this.fragmentCount > 1", "+\t\t\t\t\t\t\t&& this.fragmentBreaks[1] == NONE) {", "+\t\t\t\t\t\tif ((this.mode & M_INDENT_ON_COLUMN) != 0) {", "+\t\t\t\t\t\t\tthis.fragmentIndentations[0] = this.breakIndentationLevel;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (i = 1; i < this.fragmentCount; i++) {", "-\t\t\t\t\t\t// first fragment is also broken if it would be beyond the subsequent fragments", "-\t\t\t\t\t\t// e.g.   foobar(#AAAAA,    foobar(", "-\t\t\t\t\t\t//          #BBBBB,     -->   #AAAAA,", "-\t\t\t\t\t\t//          #CCCCC)           #BBBBB,", "-\t\t\t\t\t\t//                            #CCCCC)", "-\t\t\t\t\t\tint firstFragmentIndentation = this.scribe.getIndentationLevel(this.location.outputColumn);", "-\t\t\t\t\t\tif (firstFragmentIndentation > this.breakIndentationLevel){", "-\t\t\t\t\t\t\tthis.fragmentBreaks[0] = BREAK;\t\t\t\t\t", "-\t\t\t\t\t\t\tthis.fragmentIndentations[0] = this.breakIndentationLevel;\t\t\t\t\t\t", "-\t\t\t\t\t\t} else if (firstFragmentIndentation < this.breakIndentationLevel) {", "-\t\t\t\t\t\t\tif ((this.mode & M_INDENT_ON_COLUMN) == 0) { ", "-\t\t\t\t\t\t\t\tthis.fragmentBreaks[0] = BREAK;\t\t\t\t\t", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.fragmentIndentations[0] = this.breakIndentationLevel;\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (this.fragmentIndentations[0] != this.breakIndentationLevel) {", "-\t\t\t\t\t\t\tthis.fragmentBreaks[0] = BREAK;\t\t\t\t\t", "-\t\t\t\t\t\t\tthis.fragmentIndentations[0] = this.breakIndentationLevel;\t\t\t\t\t\t", "-\t\t\t\t\t\t\treturn wasSplit = true;", "-\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "457856dbbdb7d237521013c487adbba7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileFinder.java", "commitBeforeChange": "1fd4391b9d956e4b222e75746a12248fe673ae09", "commitAfterChange": "0ac06ace387f6f7ca79dcd41a12a6564b157c4e4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void find0(File f, String pattern, boolean verbose)", "signatureAfterChange": " private static void find0(File f, String pattern, ArrayList collector)", "diff": ["-public void find0(File f, String pattern, boolean verbose) {", "+private static void find0(File f, String pattern, ArrayList collector) {", "-\t\t\t\tfind0(current, pattern, verbose);", "+\t\t\t\tfind0(current, pattern, collector);", "-\t\t\t\t\tint length;", "-\t\t\t\t\tif ((length = this.resultFiles.length) == this.count) {", "-\t\t\t\t\t\tSystem.arraycopy(this.resultFiles, 0, (this.resultFiles = new String[length * 2]), 0, length);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.resultFiles[this.count++] = current.getAbsolutePath();", "-\t\t\t\t\tif (verbose && (this.count % 100) == 0)", "-\t\t\t\t\t\tSystem.out.print('.');", "+\t\t\t\t\tcollector.add(current.getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "543677d6b432a1c31f44f91fe8b7e76c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "56b6a38e6a1d1e5e3885772174f09cd30c719b47", "commitAfterChange": "f25f7279e38ed59d2fb3668e59dc79b303447475", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tpublic void addElementChangedListener(IElementChangedListener listener, int eventMask)", "signatureAfterChange": "\r \tpublic void addElementChangedListener(IElementChangedListener listener)", "diff": ["+\t */\r", "+\tpublic void addElementChangedListener(IElementChangedListener listener) {\r", "+\t\tthis.addElementChangedListener(listener, ElementChangedEvent.POST_CHANGE | ElementChangedEvent.POST_RECONCILE);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83d314a86a391782fda6b45ab9195b7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "3f94b4fc51205d2abd8631c1b4ac72d7bd836d3a", "commitAfterChange": "afba21845cad9d839243a0cb676a98bc6dff8192", "methodNumberBeforeChange": 283, "methodNumberAfterChange": 283, "signatureBeforeChange": " protected void consumeExplicitThisParameter(boolean isQualified)", "signatureAfterChange": " protected void consumeExplicitThisParameter(boolean isQualified)", "diff": ["-", "-\tint stackLength = this.identifierStack.length;", "-\tif (++this.identifierPtr >= stackLength) {", "-\t\tSystem.arraycopy(", "-\t\t\t\tthis.identifierStack, 0,", "-\t\t\t\tthis.identifierStack = new char[stackLength + 20][], 0,", "-\t\t\t\tstackLength);", "-\t\tSystem.arraycopy(", "-\t\t\t\tthis.identifierPositionStack, 0,", "-\t\t\t\tthis.identifierPositionStack = new long[stackLength + 20], 0,", "-\t\t\t\tstackLength);", "-\t}", "-\tthis.identifierStack[this.identifierPtr] = ConstantPool.This;", "-\tthis.identifierPositionStack[this.identifierPtr] =", "-\t\t\t(((long) thisStart << 32)) + (thisStart + 3);", "-", "-\tstackLength = this.identifierLengthStack.length;", "-\tif (++this.identifierLengthPtr >= stackLength) {", "-\t\tSystem.arraycopy(", "-\t\t\t\tthis.identifierLengthStack, 0,", "-\t\t\t\tthis.identifierLengthStack = new int[stackLength + 10], 0,", "-\t\t\t\tstackLength);", "-\t}", "-\tthis.identifierLengthStack[this.identifierLengthPtr] = 1;", "+\tpushIdentifier(ConstantPool.This, (((long) thisStart << 32)) + (thisStart + 3));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91cc11a58b77bea201b6216d10b792b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "commitAfterChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void add(IPath path, boolean withSubFolders)", "signatureAfterChange": " public void add(IJavaElement element) throws JavaModelException", "diff": ["+ */", "+//\tadd(element, element.getJavaProject());", "+\tadd(element, null);", "+}", "-private void add(IPath path, boolean withSubFolders) {", "-\tthis.pathWithSubFolders[this.pathsCount++] = withSubFolders; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f16ff90a2723019c57b4f0196ed5922", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "ce7bef49e9ed96b08f61ac987775cd5b5704ee11", "commitAfterChange": "07a11e1e272139637f646eb5763c54327cd4bc46", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private void readChunk(String[] docNames, FileInputStream stream, int index, int size) throws IOException", "signatureAfterChange": " private void readChunk(String[] docNames, FileInputStream stream, int index, int size) throws IOException", "diff": ["-\t\tint start = (streamBuffer[this.bufferIndex++]&0xFF);", "-\t\tif (stream != null && this.bufferIndex == BUFFER_READ_SIZE) {", "-\t\t\tthis.bufferIndex = 0;", "-\t\t\tint readSize = this.streamEnd - this.streamPos;", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE);", "-\t\t}", "-\t\tint end = (streamBuffer[this.bufferIndex++]&0xFF);", "-\t\tif (stream != null && this.bufferIndex == BUFFER_READ_SIZE) {", "-\t\t\tthis.bufferIndex = 0;", "-\t\t\tint readSize = this.streamEnd - this.streamPos;", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE);", "-\t\t}", "+\t\tif (stream != null && this.bufferIndex + 2 >= this.bufferEnd)", "+\t\t\treadStreamBuffer(stream);", "+\t\tint start = streamBuffer[this.bufferIndex++] & 0xFF;", "+\t\tint end = streamBuffer[this.bufferIndex++] & 0xFF;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2f005b1e5f18b8b622d5117e0f7eaaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "8257947b843e715f21b92a87dc4b423cbc1eed03", "commitAfterChange": "00cae100ff4808e2019f6a4d94df4143c8fabbd0", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tpublic void removeElementChangedListener(IElementChangedListener listener)", "signatureAfterChange": " \t \tpublic DeltaProcessor getDeltaProcessor()", "diff": ["+\tpublic DeltaProcessor getDeltaProcessor() {", "+\t\treturn this.deltaState.getDeltaProcessor();", "+\t}", "-\tpublic void removeElementChangedListener(IElementChangedListener listener) {", "-\t\t", "-\t\tfor (int i = 0; i < this.elementChangedListenerCount; i++){", "-\t\t\t", "-\t\t\tif (this.elementChangedListeners[i].equals(listener)){", "-\t\t\t\t", "-\t\t\t\t// need to clone defensively since we might be in the middle of listener notifications (#fire)", "-\t\t\t\tint length = this.elementChangedListeners.length;", "-\t\t\t\tIElementChangedListener[] newListeners = new IElementChangedListener[length];", "-\t\t\t\tSystem.arraycopy(this.elementChangedListeners, 0, newListeners, 0, i);", "-\t\t\t\tint[] newMasks = new int[length];", "-\t\t\t\tSystem.arraycopy(this.elementChangedListenerMasks, 0, newMasks, 0, i);", "-\t\t\t\t", "-\t\t\t\t// copy trailing listeners", "-\t\t\t\tint trailingLength = this.elementChangedListenerCount - i - 1;", "-\t\t\t\tif (trailingLength > 0){", "-\t\t\t\t\tSystem.arraycopy(this.elementChangedListeners, i+1, newListeners, i, trailingLength);", "-\t\t\t\t\tSystem.arraycopy(this.elementChangedListenerMasks, i+1, newMasks, i, trailingLength);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// update manager listener state (#fire need to iterate over original listeners through a local variable to hold onto", "-\t\t\t\t// the original ones)", "-\t\t\t\tthis.elementChangedListeners = newListeners;", "-\t\t\t\tthis.elementChangedListenerMasks = newMasks;", "-\t\t\t\tthis.elementChangedListenerCount--;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "befce92550abad4889d5f344a58bb399", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "7484e25e299b8203b28cf436ac2de883b2f5dd8e", "commitAfterChange": "3fa398907bc325a632b9517a054fc223461325fb", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": "  public void init(ClassFile targetClassFile)", "signatureAfterChange": "  public void init(ClassFile targetClassFile)", "diff": ["-\tint length = this.visibleLocals.length;", "-\tif (noVisibleLocals.length < length) {", "-\t\tnoVisibleLocals = new LocalVariableBinding[length];", "-\t}", "-\tSystem.arraycopy(noVisibleLocals, 0, this.visibleLocals, 0, length);", "-\tlength = this.locals.length;", "-\tif (noLocals.length < length) {", "-\t\tnoLocals = new LocalVariableBinding[length];", "-\t}", "-\tSystem.arraycopy(noLocals, 0, this.locals, 0, length);", "-\tlength = this.exceptionLabels.length;", "-\tif (noExceptionHandlers.length < length) {", "-\t\tnoExceptionHandlers = new ExceptionLabel[length];", "-\t}", "-\tSystem.arraycopy(noExceptionHandlers, 0, this.exceptionLabels, 0, length);", "-\tlength = this.labels.length;", "-\tif (noLabels.length < length) {", "-\t\tnoLabels = new BranchLabel[length];", "-\t}", "-\tSystem.arraycopy(noLabels, 0, this.labels, 0, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdcbde1f07b4b6f2bb46b3db6fb2e146", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  ArrayBinding createArrayType(int dimensionCount, LookupEnvironment lookupEnvironment)", "signatureAfterChange": "  public int hashCode()", "diff": ["-ArrayBinding createArrayType(int dimensionCount, LookupEnvironment lookupEnvironment) {", "-\tif (this.localArrayBindings == null) {", "-\t\tthis.localArrayBindings = new ArrayBinding[] {new ArrayBinding(this, dimensionCount, lookupEnvironment)};", "-\t\treturn this.localArrayBindings[0];", "-\t// find the cached array binding for this dimensionCount (if any)", "-\tint length = this.localArrayBindings.length;", "-\tfor (int i = 0; i < length; i++)", "-\t\tif (this.localArrayBindings[i].dimensions == dimensionCount)", "-\t\t\treturn this.localArrayBindings[i];", "-", "-\t// no matching array", "-\tSystem.arraycopy(this.localArrayBindings, 0, this.localArrayBindings = new ArrayBinding[length + 1], 0, length);", "-\treturn this.localArrayBindings[length] = new ArrayBinding(this, dimensionCount, lookupEnvironment);", "+public int hashCode() {", "+\treturn this.enclosingType.hashCode();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d685916aa50742e13f3ebb197bcfc3ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "commitAfterChange": "3d9ca5323b31c8907d129d4437482cfc3b641c64", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " protected void pushOnElementStack(int kind, int info)", "signatureAfterChange": " protected void pushOnElementStack(int kind, int info)", "diff": ["+\tthis.pushOnElementStack(kind, info, null);", "+}"]}], "num": 42950}
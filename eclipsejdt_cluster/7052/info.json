{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e3567e3bc1051adbb3bb4e075d09cfa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9483f59b32668cd38f3309458472b058", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java", "commitBeforeChange": "f342df887ac2bde5a33a69c02311bfd7246a7e43", "commitAfterChange": "aba5db418de65ea21899bfdf893833cd0fc3f586", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate Object convertJDTPrimitiveToReflectionType(Object jdtValue, Class<?> expectedType)", "signatureAfterChange": " \tprivate Object convertJDTValueToReflectionType(Object jdtValue, TypeBinding actualType, Class<?> expectedType)", "diff": ["-\tprivate Object convertJDTPrimitiveToReflectionType(Object jdtValue, Class<?> expectedType) {", "-\t\tif (!(jdtValue instanceof Constant)) {", "+\tprivate Object convertJDTValueToReflectionType(Object jdtValue, TypeBinding actualType, Class<?> expectedType) {", "+\t\tif (expectedType.isPrimitive() || String.class.equals(expectedType)) {", "+\t\t\tif (jdtValue instanceof Constant) {", "+\t\t\t\tif (boolean.class.equals(expectedType)) {", "+\t\t\t\t\treturn ((Constant)jdtValue).booleanValue();", "+\t\t\t\t}", "+\t\t\t\telse if (byte.class.equals(expectedType)) {", "+\t\t\t\t\treturn ((Constant)jdtValue).byteValue();", "+\t\t\t\t}", "+\t\t\t\telse if (char.class.equals(expectedType)) {", "+\t\t\t\t\treturn ((Constant)jdtValue).charValue();", "+\t\t\t\t}", "+\t\t\t\telse if (double.class.equals(expectedType)) {", "+\t\t\t\t\treturn ((Constant)jdtValue).doubleValue();", "+\t\t\t\t}", "+\t\t\t\telse if (float.class.equals(expectedType)) {", "+\t\t\t\t\treturn ((Constant)jdtValue).floatValue();", "+\t\t\t\t}", "+\t\t\t\telse if (int.class.equals(expectedType)) {", "+\t\t\t\t\treturn ((Constant)jdtValue).intValue();", "+\t\t\t\t}", "+\t\t\t\telse if (long.class.equals(expectedType)) {", "+\t\t\t\t\treturn ((Constant)jdtValue).longValue();", "+\t\t\t\t}", "+\t\t\t\telse if (short.class.equals(expectedType)) {", "+\t\t\t\t\treturn ((Constant)jdtValue).shortValue();", "+\t\t\t\t}", "+\t\t\t\telse if (String.class.equals(expectedType)) {", "+\t\t\t\t\treturn ((Constant)jdtValue).stringValue();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// Primitive or string is expected, but our actual value cannot be coerced into one.", "+\t\t\t// TODO: if the actual value is an array of primitives, should we unpack the first one?", "-\t\tif (Boolean.class.equals(expectedType) || boolean.class.equals(expectedType)) {", "-\t\t\treturn ((Constant)jdtValue).booleanValue();", "+\t\telse if (expectedType.isEnum()) {", "+\t\t\tObject returnVal = null;", "+\t        if (actualType != null && actualType.isEnum() && jdtValue instanceof FieldBinding) {", "+\t        \t", "+\t        \tFieldBinding binding = (FieldBinding)jdtValue;", "+\t        \ttry {", "+\t        \t\tField returnedField = null;", "+\t        \t\treturnedField = expectedType.getField( new String(binding.name) );", "+\t        \t\tif (null != returnedField) {", "+\t        \t\t\treturnVal = returnedField.get(null);", "+\t        \t\t}", "+\t        \t}", "+\t        \tcatch (NoSuchFieldException nsfe) {", "+\t        \t\t// return null", "+\t        \t}", "+\t        \tcatch (IllegalAccessException iae) {", "+\t        \t\t// return null", "+\t        \t}", "+\t        }", "+\t        return null == returnVal ? Factory.getMatchingDummyValue(expectedType) : returnVal;", "-\t\telse if (Byte.class.equals(expectedType) || byte.class.equals(expectedType)) {", "-\t\t\treturn ((Constant)jdtValue).byteValue();", "-\t\t}", "-\t\telse if (Character.class.equals(expectedType) || char.class.equals(expectedType)) {", "-\t\t\treturn ((Constant)jdtValue).charValue();", "-\t\t}", "-\t\telse if (Double.class.equals(expectedType) || double.class.equals(expectedType)) {", "-\t\t\treturn ((Constant)jdtValue).doubleValue();", "-\t\t}", "-\t\telse if (Float.class.equals(expectedType) || float.class.equals(expectedType)) {", "-\t\t\treturn ((Constant)jdtValue).floatValue();", "-\t\t}", "-\t\telse if (Integer.class.equals(expectedType) || int.class.equals(expectedType)) {", "-\t\t\treturn ((Constant)jdtValue).intValue();", "-\t\t}", "-\t\telse if (Long.class.equals(expectedType) || long.class.equals(expectedType)) {", "-\t\t\treturn ((Constant)jdtValue).longValue();", "-\t\t}", "-\t\telse if (String.class.equals(expectedType)) {", "-\t\t\treturn ((Constant)jdtValue).stringValue();", "-\t\t}", "-\t\telse if (Short.class.equals(expectedType) || short.class.equals(expectedType)) {", "-\t\t\treturn ((Constant)jdtValue).shortValue();", "+\t\telse if (expectedType.isAnnotation()) {", "+\t\t\t// member value is expected to be an annotation type.  Wrap it in an Annotation proxy.", "+\t\t\tif (actualType.isAnnotationType() && jdtValue instanceof AnnotationBinding) {", "+\t\t\t\tAnnotationMirrorImpl annoMirror =", "+\t\t\t\t\t(AnnotationMirrorImpl)_env.getFactory().newAnnotationMirror((AnnotationBinding)jdtValue);", "+\t\t\t\treturn Proxy.newProxyInstance(expectedType.getClassLoader(),", "+\t\t\t\t\t\tnew Class[]{ expectedType }, annoMirror );", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\t// No way to cast a non-annotation value to an annotation type; return null to caller", "+\t\t\t\treturn null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e769077ec8541fe27e96108b50fd4cc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java", "commitBeforeChange": "4cba6159f283363f8bd747cb4e532be44a8b1a70", "commitAfterChange": "83ac320f656827a9d8ea883f97b343912fdaf3c7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate Object convertToMirrorType(Object value, TypeBinding type, int kind[])", "signatureAfterChange": " \tprivate Object convertToMirrorType(Object value, TypeBinding type, int kind[])", "diff": ["-\t\tif (value instanceof Constant) {", "-\t\t\tif (type instanceof BaseTypeBinding) {", "-\t\t\t\tkind[0] = ((BaseTypeBinding)type).id;", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tkind[0] = ((Constant)value).typeID();", "-\t\t\t}", "-\t\t\tswitch (kind[0]) {", "-\t\t\tcase T_boolean:", "-\t\t\t\treturn ((Constant)value).booleanValue();", "-\t\t\tcase T_byte:", "-\t\t\t\treturn ((Constant)value).byteValue();", "-\t\t\tcase T_char:", "-\t\t\t\treturn ((Constant)value).charValue();", "-\t\t\tcase T_double:", "-\t\t\t\treturn ((Constant)value).doubleValue();", "-\t\t\tcase T_float:", "-\t\t\t\treturn ((Constant)value).floatValue();", "-\t\t\tcase T_int:", "-\t\t\t\ttry {", "-\t\t\t\t\treturn ((Constant)value).intValue();", "-\t\t\t\t} catch (ShouldNotImplement e) {", "+\t\tif (type == null) {", "+\t\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t} else if (type instanceof BaseTypeBinding || type.id == TypeIds.T_JavaLangString) {", "+\t\t\tif (value == null) {", "+\t\t\t\tif (type instanceof BaseTypeBinding", "+\t\t\t\t\t\t|| type.id == TypeIds.T_JavaLangString) {", "+\t\t\t\t\t// return a string with error in it to reflect a value that could not be resolved", "+\t\t\t\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\t\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t\t\t} else if (type.isAnnotationType()) {", "+\t\t\t\t\tkind[0] = T_AnnotationMirror;", "+\t\t\t\t\treturn _env.getFactory().newAnnotationMirror(null);", "+\t\t\t\t}", "+\t\t\t} else if (value instanceof Constant) {", "+\t\t\t\tif (type instanceof BaseTypeBinding) {", "+\t\t\t\t\tkind[0] = ((BaseTypeBinding)type).id;", "+\t\t\t\t}", "+\t\t\t\telse if (type.id == TypeIds.T_JavaLangString) {", "+\t\t\t\t\tkind[0] = ((Constant)value).typeID();", "+\t\t\t\t} else {", "+\t\t\t\t\t// error case", "+\t\t\t\t\tkind[0] = TypeIds.T_JavaLangString;", "-\t\t\tcase T_JavaLangString:", "-\t\t\t\treturn ((Constant)value).stringValue();", "-\t\t\tcase T_long:", "-\t\t\t\treturn ((Constant)value).longValue();", "-\t\t\tcase T_short:", "-\t\t\t\treturn ((Constant)value).shortValue();", "+\t\t\t\tswitch (kind[0]) {", "+\t\t\t\tcase T_boolean:", "+\t\t\t\t\treturn ((Constant)value).booleanValue();", "+\t\t\t\tcase T_byte:", "+\t\t\t\t\treturn ((Constant)value).byteValue();", "+\t\t\t\tcase T_char:", "+\t\t\t\t\treturn ((Constant)value).charValue();", "+\t\t\t\tcase T_double:", "+\t\t\t\t\treturn ((Constant)value).doubleValue();", "+\t\t\t\tcase T_float:", "+\t\t\t\t\treturn ((Constant)value).floatValue();", "+\t\t\t\tcase T_int:", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (value instanceof LongConstant", "+\t\t\t\t\t\t\t\t|| value instanceof DoubleConstant", "+\t\t\t\t\t\t\t\t|| value instanceof FloatConstant) {", "+\t\t\t\t\t\t\t// error case", "+\t\t\t\t\t\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\t\t\t\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn ((Constant)value).intValue();", "+\t\t\t\t\t} catch (ShouldNotImplement e) {", "+\t\t\t\t\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\t\t\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\tcase T_JavaLangString:", "+\t\t\t\t\treturn ((Constant)value).stringValue();", "+\t\t\t\tcase T_long:", "+\t\t\t\t\treturn ((Constant)value).longValue();", "+\t\t\t\tcase T_short:", "+\t\t\t\t\treturn ((Constant)value).shortValue();", "+\t\t\t\t}", "-\t\t} else if (value instanceof FieldBinding) {", "-\t\t\tkind[0] = T_EnumConstant;", "-\t\t\treturn (VariableElement) _env.getFactory().newElement((FieldBinding) value);", "+\t\t} else if (type.isEnum()) {", "+\t\t\tif (value instanceof FieldBinding) {", "+\t\t\t\tkind[0] = T_EnumConstant;", "+\t\t\t\treturn (VariableElement) _env.getFactory().newElement((FieldBinding) value);", "+\t\t\t} else {", "+\t\t\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\t\t\treturn \"<error>\"; //$NON-NLS-1$", "+\t\t\t}", "+\t\t} else if (type.isAnnotationType()) {", "+\t\t\tif (value instanceof AnnotationBinding) {", "+\t\t\t\tkind[0] = T_AnnotationMirror;", "+\t\t\t\treturn _env.getFactory().newAnnotationMirror((AnnotationBinding) value);", "+\t\t\t}", "-\t\t} else if (value instanceof AnnotationBinding) {", "-\t\t\tkind[0] = T_AnnotationMirror;", "-\t\t\treturn _env.getFactory().newAnnotationMirror((AnnotationBinding) value);", "-\t\t} ", "-\t\tthrow new IllegalArgumentException(\"Unexpected type for annotation value: \" + value); //$NON-NLS-1$", "+\t\t}", "+\t\t// error case", "+\t\tkind[0] = TypeIds.T_JavaLangString;", "+\t\treturn \"<error>\"; //$NON-NLS-1$"]}], "num": 7052}
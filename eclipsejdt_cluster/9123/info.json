{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e0b99da1278a6c31596562adeff0abf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7f403010a2aaee392acbb6fe00028d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "cbb80b4c969d064367ed598ba99f074660c726c6", "commitAfterChange": "48bf00145f70fca24101eaac33adc5d495f9e595", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 267, "signatureBeforeChange": " public void _test428177()", "signatureAfterChange": " public void test428177()", "diff": ["-public void _test428177() {", "+public void test428177() {", "-\t\t\"valid error messages go here - some are expected since javac also complains\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\"\twithoutWildcard(stream); // ERROR\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method withoutWildcard(Stream<String>) in the type InsistentCapture is not applicable for the arguments (Stream<capture#10-of ? extends String>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 36)\\n\" + ", "+\t\t\"\tif(\\\"1\\\" == \\\"\\\") { return stream.collect(Collectors.toList()).stream(); // ERROR\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Stream<capture#14-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 38)\\n\" + ", "+\t\t\"\treturn stream.collect(Collectors.toList()); // NO ERROR\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#16-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b94f1eaef305e2549a30cbf3ff6e14d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d96b4f2d2690a613d86ff8a25f7f4e62c3b517ac", "commitAfterChange": "341ead40b71a0bffec0f8325f6b29d2b567caf8a", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 267, "signatureBeforeChange": " public void test428177()", "signatureAfterChange": " public void _test428177()", "diff": ["-public void test428177() {", "+public void _test428177() {", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 21)\\n\" + ", "-\t\t\"\twithoutWildcard(stream); // ERROR\\n\" + ", "-\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method withoutWildcard(Stream<String>) in the type InsistentCapture is not applicable for the arguments (Stream<capture#10-of ? extends String>)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 36)\\n\" + ", "-\t\t\"\tif(\\\"1\\\" == \\\"\\\") { return stream.collect(Collectors.toList()).stream(); // ERROR\\n\" + ", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from Stream<capture#14-of ? extends String> to Stream<String>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 38)\\n\" + ", "-\t\t\"\treturn stream.collect(Collectors.toList()); // NO ERROR\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture#16-of ? extends String> to Stream<String>\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"valid error messages go here - some are expected since javac also complains\");"]}], "num": 9123}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82f3efc489b599b691cf8fbac3b9de7c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d99c9db884aac862fac289173cb74917", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "471b30fcd9175fdd69611c88984722b9e0b5e4ee", "commitAfterChange": "1a356ccfb3b5b00256393a405276ebc654766b8b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "signatureAfterChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "diff": ["-\t\t\t\t\t\tthis.spaceFailures++;", "-\t\t\t\t\t\tSystem.out.println(\"n\ufffd\"+this.spaceFailures+\": \"+counterString+\" formatting has different spaces than first one for \"+this.file.getName());", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\tthis.spaceFailures++;", "-\t\t\t\t\t\tSystem.out.println(\"n\ufffd\"+this.spaceFailures+\": \"+counterString+\" formatting has different lines leading spaces than first one for \"+this.file.getName());", "+\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "+\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\treturn result;", "+\t\t\t\t\t}", "+\t\t\t\t\tString compressedResult = ModelTestsUtil.removeWhiteSpace(result);", "+\t\t\t\t\tString compressedNewResult = ModelTestsUtil.removeWhiteSpace(newResult);", "+\t\t\t\t\tif (compressedResult.equals(compressedNewResult)) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de88c5866d635869084ae29ee76b6340", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "fa498df141f3a0a439a1af4d8d96a640dbb81cb5", "commitAfterChange": "8bcd9b87ed997ca91c95e87fd5639a0cef180234", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  private static void initDirectories(StringBuffer buffer)", "signatureAfterChange": "  private static void initDirectories(StringBuffer buffer)", "diff": ["-\t\tthrow new RuntimeException(INPUT_DIR+\" does not exist or is not a directory!\");", "+\t\tSystem.err.println(INPUT_DIR+\" does not exist or is not a directory!\");", "+\t\tSystem.exit(1);", "-\t\tint idx = dir.indexOf(',');", "-\t\tString outputDir;", "-\t\tif (idx < 0) {", "-\t\t\toutputDir = dir;", "-\t\t} else {", "-\t\t\toutputDir = dir.substring(0, idx);", "-\t\t\tif (dir.substring(idx+1).equals(\"clean\")) {", "+\t\tStringTokenizer tokenizer = new StringTokenizer(dir, \",\");", "+\t\tString outputDir = tokenizer.nextToken();", "+\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\tString token = tokenizer.nextToken();", "+\t\t\tif (token.equals(\"clean\")) {", "-\t\t\t\tthrow new RuntimeException(\"Reference can only be updated using a version (i.e. with a closed buildnotes_jdt-core.html)!\");", "+\t\t\t\tSystem.err.println(\"Reference can only be updated using a version (i.e. with a closed buildnotes_jdt-core.html)!\");", "+\t\t\t\tSystem.exit(1);"]}], "num": 44447}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96177015f5ba191b9a629393d5c13d98", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96204d27fbfd7b882387a71bf2891e74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "7468b4698239a80427b0dfed58d4a9c2f96541d8", "commitAfterChange": "071d5ff69d1256ea784921a560116cf8719733a6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t// regular receiver reference ", "-\t\tif (this.receiver instanceof CastExpression) {", "-\t\t\t\tthis.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\t\t//always ignore receiver cast, since may affect constant pool reference", "-\t\t}", "+\t\t//always ignore receiver cast, since may affect constant pool reference", "+\t\tif (this.receiver instanceof CastExpression) this.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99d971f68d54f9b386ed9d90239562a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-    if (otherType == null) return false;", "-    switch(otherType.kind()) {", "+\tif (otherType == null) return false;", "+\tswitch(otherType.kind()) {", "-    \tcase Binding.WILDCARD_TYPE :", "+\t\tcase Binding.WILDCARD_TYPE :", "-    \t", "-    \tcase Binding.PARAMETERIZED_TYPE :", "-\t        if ((otherType.tagBits & HasDirectWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "-\t        \treturn false; // should have been identical", "-\t        ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "-\t        if (this != otherParamType.type) ", "-\t            return false;", "-            if (!isStatic()) { // static member types do not compare their enclosing", "-\t\t        ReferenceBinding enclosing = enclosingType();", "-\t\t        if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-\t\t            return false;", "-            }", "-\t        int length = this.typeVariables == null ? 0 : this.typeVariables.length;", "-\t        TypeBinding[] otherArguments = otherParamType.arguments;", "-\t        int otherLength = otherArguments == null ? 0 : otherArguments.length;", "-\t        if (otherLength != length) ", "-\t            return false;", "-\t        for (int i = 0; i < length; i++) {", "-\t        \tif (!this.typeVariables[i].isTypeArgumentContainedBy(otherArguments[i]))", "+", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\tif ((otherType.tagBits & HasDirectWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "+\t\t\t\treturn false; // should have been identical", "+\t\t\tParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t\t\tif (this != otherParamType.type) ", "+\t\t\t\treturn false;", "+\t\t\tif (!isStatic()) { // static member types do not compare their enclosing", "+\t\t\t\tReferenceBinding enclosing = enclosingType();", "+\t\t\t\tif (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-\t        }", "-\t        return true;", "-    \t", "-    \tcase Binding.RAW_TYPE :", "+\t\t\t}", "+\t\t\tint length = this.typeVariables == null ? 0 : this.typeVariables.length;", "+\t\t\tTypeBinding[] otherArguments = otherParamType.arguments;", "+\t\t\tint otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t\t\tif (otherLength != length) ", "+\t\t\t\treturn false;", "+\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\tif (!this.typeVariables[i].isTypeArgumentContainedBy(otherArguments[i]))", "+\t\t\t\t\treturn false;", "+\t\t\treturn true;", "+", "+\t\tcase Binding.RAW_TYPE :", "-    }", "+\t}"]}], "num": 55928}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fbfd5ddabf51baa85359a01b343d6a7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57cd7d42c1b45123a694bf4280fe2c0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestOptions.java", "commitBeforeChange": "8f82ae69faed631567ec19572153cde0cce3876b", "commitAfterChange": "1bf42176694d66a5253881d975a0ea5432939e10", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate String[] errorsForInvalidTagsClassOrField(int visibility)", "signatureAfterChange": "  \tprivate String[] errorsForInvalidTagsClassOrField(int visibility)", "diff": ["-\t\t\t\t\tString line = tokenizer.nextToken();", "+\t\t\t\t\tString token = tokenizer.nextToken();", "-\t\t\t\t\t\t\terror.append(line.substring(line.indexOf('.')));", "+\t\t\t\t\t\t\terror.append(token.substring(token.indexOf('.')));", "+\t\t\t\t\t\t\t// may not want to add the error message in certain circumstances", "-\t\t\t\t\t\t\t\tadd = line.indexOf(\"is deprecated\") == -1;", "+\t\t\t\t\t\t\t\tadd = token.indexOf(\"is deprecated\") == -1;", "-\t\t\t\t\t\t\t\tadd = line.indexOf(\"is not visible\") == -1 && line.indexOf(\"visibility for malformed doc comments\") == -1;", "+\t\t\t\t\t\t\t\tadd = token.indexOf(\"is not visible\") == -1 && token.indexOf(\"visibility for malformed doc comments\") == -1;", "+\t\t\t\t\t\t\t// $FALL-THROUGH$ - fall through next case to append the token to the error message", "-\t\t\t\t\t\t\terror.append(line);", "+\t\t\t\t\t\t\terror.append(token);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "919817ec5ab09ed2aea1b65d63fbb166", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestOptions.java", "commitBeforeChange": "8f82ae69faed631567ec19572153cde0cce3876b", "commitAfterChange": "1bf42176694d66a5253881d975a0ea5432939e10", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate String[] errorsForInvalidTagsMethodOrConstructor(int visibility)", "signatureAfterChange": "  \tprivate String[] errorsForInvalidTagsMethodOrConstructor(int visibility)", "diff": ["-\t\t\t\t\tString line = tokenizer.nextToken();", "+\t\t\t\t\tString token = tokenizer.nextToken();", "-\t\t\t\t\t\t\terror.append(line.substring(line.indexOf('.')));", "+\t\t\t\t\t\t\terror.append(token.substring(token.indexOf('.')));", "+\t\t\t\t\t\t\t// may not want to add the error message in certain circumstances", "-\t\t\t\t\t\t\t\tadd = line.indexOf(\"is deprecated\") == -1;", "+\t\t\t\t\t\t\t\tadd = token.indexOf(\"is deprecated\") == -1;", "-\t\t\t\t\t\t\t\tadd = line.indexOf(\"is not visible\") == -1 && line.indexOf(\"visibility for malformed doc comments\") == -1;", "+\t\t\t\t\t\t\t\tadd = token.indexOf(\"is not visible\") == -1 && token.indexOf(\"visibility for malformed doc comments\") == -1;", "+\t\t\t\t\t\t\t// $FALL-THROUGH$ - fall through next case to append the token to the error message", "-\t\t\t\t\t\t\terror.append(line);", "+\t\t\t\t\t\t\terror.append(token);"]}], "num": 37040}
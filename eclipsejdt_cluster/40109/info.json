{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1d6c5e3bec70f73151e74189daff721", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "025e605d595a17a45931d4770b5ffbc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "a746953c3c39228e621101bf14cd960b61f268e5", "commitAfterChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "signatureAfterChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "diff": ["-\t\t\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMEL_CASE_MATCH) != 0;", "+\t\t\tboolean isCamelCase = (matchRule & (SearchPattern.R_CAMELCASE_MATCH | SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH)) != 0;", "-\t\t\tif (isCamelCase) {", "-\t\t\t\tif (matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName, (matchRule & SearchPattern.R_PREFIX_MATCH) != 0)) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tif (isCaseSensitive) return false;", "-\t\t\t}", "+\t\t\t\tcase SearchPattern.R_CAMELCASE_MATCH:", "+\t\t\t\t\tif (matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName, false)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn !isCaseSensitive && matchFirstChar && CharOperation.prefixEquals(patternTypeName, typeName, false);", "+\t\t\t\tcase SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH:", "+\t\t\t\t\treturn matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb2db508d86ade0e94f3733a6ba1e4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "3861d4cfff200f4a20f9b2846cf8819b2fe85539", "commitAfterChange": "1ab7b833f2e8fe1eaa17a4c72f8b9580f4ae1592", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void matchReportReference(Expression expr, IJavaElement element, int accuracy, int start, int end, int lastIndex, TypeBinding refBinding, MatchLocator locator) throws CoreException", "signatureAfterChange": " void matchReportReference(Expression expr, IJavaElement element, int accuracy, int start, int end, int lastIndex, TypeBinding refBinding, MatchLocator locator) throws CoreException", "diff": ["-\t\tif (refinedAccuracy == -1 || (refinedAccuracy == SearchPattern.R_ERASURE_MATCH && !this.isErasureMatch)) {", "-\t\t\t// refined accuracy shows an impossible match...", "-\t\t\treturn;", "+\t\t", "+\t\t// See whether it is necessary to report or not", "+\t\tboolean report = refinedAccuracy != -1; // impossible match", "+\t\tif (report && (refinedAccuracy & SearchPattern.R_ERASURE_MATCH) != 0) { // erasure match", "+\t\t\tif ((refinedAccuracy & SearchPattern.R_EQUIVALENT_MATCH) != 0) { // raw match", "+\t\t\t\treport = this.isEquivalentMatch || this.isErasureMatch; // report only if pattern is equivalent or erasure", "+\t\t\t} else {", "+\t\t\t\treport = this.isErasureMatch; // report only if pattern is erasure", "+\t\t\t}", "+\t\telse if (report && (refinedAccuracy & SearchPattern.R_EQUIVALENT_MATCH) != 0) { // equivalent match", "+\t\t\treport  = this.isEquivalentMatch || this.isErasureMatch; // report only if pattern is equivalent or erasure", "+\t\t}", "+\t\tif (!report)return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28fbca3f223f0b47f51a902cb3b999e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "signatureAfterChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "diff": ["-\t\t\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMELCASE_MATCH) != 0;", "+\t\t\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMEL_CASE_MATCH) != 0;", "-\t\t\tif (isCamelCase && matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName)) {", "-\t\t\t\treturn true;", "+\t\t\tif (isCamelCase) {", "+\t\t\t\tif (matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName, (matchRule & SearchPattern.R_PREFIX_MATCH) != 0)) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tif (isCaseSensitive) return false;", "-\t\t\t\t\tif (!isCamelCase) {", "-\t\t\t\t\t\treturn matchFirstChar && CharOperation.equals(patternTypeName, typeName, isCaseSensitive);", "-\t\t\t\t\t}", "-\t\t\t\t\t// fall through next case to match as prefix if camel case failed", "+\t\t\t\t\treturn matchFirstChar && CharOperation.equals(patternTypeName, typeName, isCaseSensitive);"]}], "num": 40109}
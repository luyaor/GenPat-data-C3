{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e587186cfebbdcec2d3837574d05a017", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24ed7e63a9d481898892c9b5e2aa4670", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void checkBounds(ReferenceBinding type, Scope scope, int index)", "signatureAfterChange": " \tpublic void checkBounds(ReferenceBinding type, Scope scope, int index)", "diff": ["-\t\t\t\tfor (int i = 0, argLength = typeVariables.length; i < argLength; i++)", "-\t\t\t\t    if (typeVariables[i].boundCheck(parameterizedType, argTypes[i])  != TypeConstants.OK)", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[index][i]);", "+\t\t\t\tparameterizedType.boundCheck(scope, this.typeArguments[index]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fa0e7c55b9e5c1b325a1b0ebec84e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-// TODO (philippe)\tif ((this.bits & ASTNode.IsSuperType) != 0)", "-\t\t\t\tfor (int i = 0; i < argLength; i++)", "-\t\t\t\t    if (typeVariables[i].boundCheck(parameterizedType, argTypes[i]) != TypeConstants.OK)", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[i]);", "+\t\t\t\tparameterizedType.boundCheck(scope, this.typeArguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "851fedbe3a7b80df39b9beccd7c9d706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "commitAfterChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAndSetImports()", "signatureAfterChange": " void checkAndSetImports()", "diff": ["-\tint numberOfDefaultImports = 1;", "-\tif (this.environment.globalOptions.defaultImportNullAnnotationTypes)", "-\t\tnumberOfDefaultImports += 2;", "-\tint numberOfImports = numberOfStatements + numberOfDefaultImports;", "+\tint numberOfImports = numberOfStatements + 1;", "-\tImportBinding[] defaultImports = getDefaultImports(); // consistent number of default imports is ensured in LookupEnvironment.makeNullAnnotationTypeImports()", "-\tfor (int i = 0; i < numberOfDefaultImports; i++) {", "-\t\tresolvedImports[i] = defaultImports[i];", "-\t}", "-\tint index = numberOfDefaultImports;", "+\tresolvedImports[0] = getDefaultImports()[0];", "+\tint index = 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "924583047873c6eee67d8fc6d6960fc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/Label.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void branch()", "signatureAfterChange": " void branch()", "diff": ["+\tthis.tagBits |= USED;", "-\t\tint offset = position - codeStream.position + 1;", "-\t\tif (Math.abs(offset) > 0x7FFF && !this.codeStream.wideMode) {", "-\t\t\tthrow new AbortMethod(CodeStream.RESTART_IN_WIDE_MODE, null);", "-\t\t}", "-\t\tcodeStream.writeSignedShort(offset);", "+\t\tcodeStream.writePosition(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5d2017c4517e00ee037fdd213f07369", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void checkBounds(Scope scope)", "signatureAfterChange": " \tpublic void checkBounds(Scope scope)", "diff": ["-\t\t\t\tfor (int i = 0, argLength = typeVariables.length; i < argLength; i++)", "-\t\t\t\t\tif (typeVariables[i].boundCheck(parameterizedType, argTypes[i]) != TypeConstants.OK)", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[i]);", "+\t\t\t\tparameterizedType.boundCheck(scope, this.typeArguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccfce7ca5f32a10f2825850704a4117d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "7086675b9016b36eb3327ff794af3728a774a189", "commitAfterChange": "08be90368f9af9d6750464056e901efd458851a8", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " private void toString(StringBuffer buffer, IType type, int indent, boolean ascendant)", "signatureAfterChange": " private void toString(StringBuffer buffer, IJavaElement type, int indent, boolean ascendant)", "diff": ["-private void toString(StringBuffer buffer, IType type, int indent, boolean ascendant) {", "-\tIType[] types= ascendant ? getSupertypes(type) : getSubtypes(type);", "+private void toString(StringBuffer buffer, IJavaElement type, int indent, boolean ascendant) {", "+\tIType[] types= ascendant ? getSupertypes((IType) type) : getSubtypes((IType) type);", "-\t\tfor (int j= 0; j < indent; j++) {", "-\t\t\tbuffer.append(\"  \"); //$NON-NLS-1$", "-\t\t}", "-\t\tJavaElement element = (JavaElement)sortedTypes[i];", "-\t\tbuffer.append(element.toStringWithAncestors(false/*don't show key*/));", "-\t\tbuffer.append('\\n');", "-\t\ttoString(buffer, types[i], indent + 1, ascendant);", "+\t\ttoString(buffer, sortedTypes[i], indent + 1);", "+\t\ttoString(buffer, sortedTypes[i], indent + 1, ascendant);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d30f3df3705361a7e81b7f31b7709fe6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7fe004f7b5f0bcd4b089b0ee8582afd2bc4b79cd", "commitAfterChange": "530c48877da8402a05b3f0b84990331c9acd9df4", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r \tprotected boolean includesPotentialMatch(PotentialMatch potentialMatch)", "signatureAfterChange": "\r \r \tprotected Openable getCurrentOpenable()", "diff": ["-\tprotected boolean includesPotentialMatch(PotentialMatch potentialMatch) {\r", "-\t\tfor (int i = 0; i < this.potentialMatchesLength; i++) {\r", "-\t\t\tif (potentialMatch.openable.equals(this.potentialMatches[i].openable)) {\r", "-\t\t\t\treturn true;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn false;\r", "-\t}\r", "+\t\treturn this.currentMatchingOpenable.openable;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffcd60558c6243546dfca00e4ecfb28b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-// TODO (philippe)\tif ((this.bits & ASTNode.IsSuperType) != 0)", "-\t\t\t\t\t\tfor (int j = 0; j < argLength; j++)", "-\t\t\t\t\t\t    if (typeVariables[j].boundCheck(parameterizedType, argTypes[j]) != TypeConstants.OK)", "-\t\t\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[j], typeVariables[j], currentType, args[j]);", "+\t\t\t\t\t\tparameterizedType.boundCheck(scope, args);", "-// TODO (philippe)\tif ((this.bits & ASTNode.IsSuperType) != 0)"]}], "num": 33287}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eaec9d0bf701ef197aeaacbc14b225ee", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bcaea2858241904d808ae14303655e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void generatePostIncrement( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tCompoundAssignment postIncrement, \t\tboolean valueRequired)", "signatureAfterChange": "  public void generatePostIncrement( \tBlockScope currentScope, \tCodeStream codeStream, \tCompoundAssignment postIncrement, \tboolean valueRequired)", "diff": ["-\t", "-\tpublic void generatePostIncrement(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tCompoundAssignment postIncrement,", "-\t\tboolean valueRequired) {", "-\t    ", "-\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\t\tSyntheticMethodBinding accessor =", "-\t\t\tsyntheticReadAccessors == null", "-\t\t\t\t? null", "-\t\t\t\t: syntheticReadAccessors[syntheticReadAccessors.length - 1];", "-\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\tif (accessor == null) {", "-\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t} else {", "-\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tcodeStream.dup();", "-\t\t\tif (accessor == null) {", "-\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t} else {", "-\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t}", "-\t\t}", "-\t\t// duplicate the old field value", "-\t\tif (valueRequired) {", "-\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\tif ((lastFieldBinding.type == TypeBinding.LONG)", "-\t\t\t\t\t|| (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\t\t\tcodeStream.dup2();", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.dup();", "-\t\t\t\t}", "-\t\t\t} else { // Stack:  [owner][old field value]  ---> [old field value][owner][old field value]", "-\t\t\t\tif ((lastFieldBinding.type == TypeBinding.LONG)", "-\t\t\t\t\t|| (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\t\t\tcodeStream.dup2_x1();", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.dup_x1();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "-\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);\t\t", "-\t\tcodeStream.generateConstant(", "-\t\t\tpostIncrement.expression.constant,", "-\t\t\timplicitConversion);", "-\t\tcodeStream.sendOperator(postIncrement.operator, this.implicitConversion & COMPILE_TYPE_MASK);", "-\t\tcodeStream.generateImplicitConversion(", "-\t\t\tpostIncrement.preAssignImplicitConversion);", "-\t\tfieldStore(codeStream, lastFieldBinding, syntheticWriteAccessor, false);", "-\t}\t", "+", "+public void generatePostIncrement(", "+\tBlockScope currentScope,", "+\tCodeStream codeStream,", "+\tCompoundAssignment postIncrement,", "+\tboolean valueRequired) {", "+    ", "+\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\tSyntheticMethodBinding accessor =", "+\t\tthis.syntheticReadAccessors == null", "+\t\t\t? null", "+\t\t\t: this.syntheticReadAccessors[this.syntheticReadAccessors.length - 1];", "+\tif (lastFieldBinding.isStatic()) {", "+\t\tif (accessor == null) {", "+\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t} else {", "+\t\t\tcodeStream.invokestatic(accessor);", "+\t\t}", "+\t} else {", "+\t\tcodeStream.dup();", "+\t\tif (accessor == null) {", "+\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t} else {", "+\t\t\tcodeStream.invokestatic(accessor);", "+\t\t}", "+\t}", "+\t// duplicate the old field value", "+\tif (valueRequired) {", "+\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\tif ((lastFieldBinding.type == TypeBinding.LONG)", "+\t\t\t\t|| (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\t\tcodeStream.dup2();", "+\t\t\t} else {", "+\t\t\t\tcodeStream.dup();", "+\t\t\t}", "+\t\t} else { // Stack:  [owner][old field value]  ---> [old field value][owner][old field value]", "+\t\t\tif ((lastFieldBinding.type == TypeBinding.LONG)", "+\t\t\t\t|| (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\t\tcodeStream.dup2_x1();", "+\t\t\t} else {", "+\t\t\t\tcodeStream.dup_x1();", "+\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "+\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "+\tcodeStream.generateImplicitConversion(this.implicitConversion);\t\t", "+\tcodeStream.generateConstant(", "+\t\tpostIncrement.expression.constant,", "+\t\tthis.implicitConversion);", "+\tcodeStream.sendOperator(postIncrement.operator, this.implicitConversion & TypeIds.COMPILE_TYPE_MASK);", "+\tcodeStream.generateImplicitConversion(", "+\t\tpostIncrement.preAssignImplicitConversion);", "+\tfieldStore(codeStream, lastFieldBinding, this.syntheticWriteAccessor, false);", "+}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "391c032bf25469c643553876e5968222", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-", "-    FieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\tSyntheticMethodBinding accessor =", "-\t\t\tthis.syntheticReadAccessors == null", "-\t\t\t\t? null", "-\t\t\t\t: this.syntheticReadAccessors[this.syntheticReadAccessors.length - 1];", "-\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\tif (accessor == null) {", "-\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t} else {", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, accessor, null /* default declaringClass */);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tcodeStream.dup();", "-\t\t\tif (accessor == null) {", "-\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t} else {", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, accessor, null /* default declaringClass */);", "-\t\t\t}", "-\t\t}", "-", "-\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "-\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "-\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-", "-\t\t// duplicate the old field value", "-\t\tint operandType = this.implicitConversion & TypeIds.COMPILE_TYPE_MASK;", "-\t\tif (valueRequired) {", "-\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\tif (operandType == T_long || operandType == T_double) {", "-\t\t\t\t\tcodeStream.dup2();", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.dup();", "-\t\t\t\t}", "-\t\t\t} else { // Stack:  [owner][old field value]  ---> [old field value][owner][old field value]", "-\t\t\t\tif (operandType == T_long || operandType == T_double) {", "-\t\t\t\t\tcodeStream.dup2_x1();", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.dup_x1();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\tcodeStream.sendOperator(postIncrement.operator, operandType);", "-\t\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);", "-\t\tfieldStore(codeStream, lastFieldBinding, this.syntheticWriteAccessor, false);", "-\t} else {", "-\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\tif (valueRequired) {", "-\t\t\tif ((lastFieldBinding.type == TypeBinding.LONG) || (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\t\tcodeStream.dup2();", "-\t\t\t} else {", "-\t\t\t\tcodeStream.dup();", "-\t\t\t}", "-\t\t}", "-\t\tcodeStream.generateEmulationForField(lastFieldBinding);", "-\t\tif ((lastFieldBinding.type == TypeBinding.LONG) || (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\tcodeStream.dup_x2();", "-\t\t\tcodeStream.pop();", "-\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\tcodeStream.aconst_null();", "-\t\t\t} else {", "-\t\t\t\tgenerateReadSequence(currentScope, codeStream);", "-\t\t\t}", "-\t\t\tcodeStream.dup_x2();", "-\t\t\tcodeStream.pop();", "-\t\t} else {", "-\t\t\tcodeStream.dup_x1();", "-\t\t\tcodeStream.pop();", "-\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\tcodeStream.aconst_null();", "-\t\t\t} else {", "-\t\t\t\tgenerateReadSequence(currentScope, codeStream);", "-\t\t\t}", "-\t\t\tcodeStream.dup_x1();", "-\t\t\tcodeStream.pop();", "-\t\t}", "-\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\tcodeStream.sendOperator(postIncrement.operator, lastFieldBinding.type.id);", "-\t\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);", "-\t\tcodeStream.generateEmulatedWriteAccessForField(lastFieldBinding);", "+    FieldBinding lastFieldBinding = this.otherBindings == null ? (FieldBinding) this.binding : this.otherBindings[this.otherBindings.length-1];", "+\tif (lastFieldBinding.canBeSeenBy(getFinalReceiverType(), this, currentScope)) {", "+\t\tsuper.generatePostIncrement(currentScope, codeStream, postIncrement, valueRequired);", "+\t\treturn;", "+\tlastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\tif (valueRequired) {", "+\t\tswitch (lastFieldBinding.type.id) {", "+\t\t\tcase TypeIds.T_long :", "+\t\t\tcase TypeIds.T_double :", "+\t\t\t\tcodeStream.dup2();", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tcodeStream.dup();", "+\t\t\tbreak;\t", "+\t\t}\t\t", "+\t}", "+\tcodeStream.generateEmulationForField(lastFieldBinding);", "+\tif ((lastFieldBinding.type == TypeBinding.LONG) || (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\tcodeStream.dup_x2();", "+\t\tcodeStream.pop();", "+\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\tcodeStream.aconst_null();", "+\t\t} else {", "+\t\t\tgenerateReadSequence(currentScope, codeStream);", "+\t\t}", "+\t\tcodeStream.dup_x2();", "+\t\tcodeStream.pop();", "+\t} else {", "+\t\tcodeStream.dup_x1();", "+\t\tcodeStream.pop();", "+\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\tcodeStream.aconst_null();", "+\t\t} else {", "+\t\t\tgenerateReadSequence(currentScope, codeStream);", "+\t\t}", "+\t\tcodeStream.dup_x1();", "+\t\tcodeStream.pop();", "+\t}", "+\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "+\tcodeStream.sendOperator(postIncrement.operator, lastFieldBinding.type.id);", "+\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);", "+\tcodeStream.generateEmulatedWriteAccessForField(lastFieldBinding);"]}], "num": 17761}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8548ffdaac818f347f5b1438ac2e811", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f0e576a906243f60c6e228d4fc38990", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "af652d9d40e3e30a14ccbd2056144782592afc53", "commitAfterChange": "3dca78ae937ad139f018c4ddaaa87c3fe26600ed", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tpublic boolean tIsMoreSpecific(TypeBinding t, TypeBinding s)", "signatureAfterChange": " \t \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "diff": ["-\tpublic boolean tIsMoreSpecific(TypeBinding t, TypeBinding s) {", "-\t\t/* 15.12.2.5 t is more specific than s iff ... Some of the checks here are redundant by the very fact of control reaching here, ", "+\tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {", "+\t\t/* 15.12.2.5 s is more specific than t iff ... Some of the checks here are redundant by the very fact of control reaching here, ", "-\t\tMethodBinding tSam = t.getSingleAbstractMethod(this.enclosingScope);", "-\t\tif (tSam == null || !tSam.isValidBinding())", "-\t\t\treturn false;", "+\t\tMethodBinding tSam = t.getSingleAbstractMethod(this.enclosingScope);", "+\t\tif (tSam == null || !tSam.isValidBinding())", "+\t\t\treturn false;", "-\t\tif (t.findSuperTypeOriginatingFrom(s) != null || s.findSuperTypeOriginatingFrom(t) != null)", "+\t\tif (s.findSuperTypeOriginatingFrom(t) != null || t.findSuperTypeOriginatingFrom(s) != null)", "-\t\t\tif (tSam.parameters.length != sSam.parameters.length)", "+\t\t\tif (sSam.parameters.length != tSam.parameters.length)", "-\t\t\tfor (int i = 0, length = tSam.parameters.length; i < length; i++) {", "-\t\t\t\tif (TypeBinding.notEquals(tSam.parameters[i], sSam.parameters[i]))", "+\t\t\tfor (int i = 0, length = sSam.parameters.length; i < length; i++) {", "+\t\t\t\tif (TypeBinding.notEquals(sSam.parameters[i], tSam.parameters[i]))", "-\t\tif (sSam.returnType.id == TypeIds.T_void)", "+\t\tif (tSam.returnType.id == TypeIds.T_void)", "-\t\tExpression [] returnExpressions = (Expression[]) this.resultExpressions.get(t); // should be same as for s", "+\t\tExpression [] returnExpressions = (Expression[]) this.resultExpressions.get(s); // should be same as for s", "-\t\tt = t.capture(this.enclosingScope, this.sourceEnd);", "-\t\ttSam = t.getSingleAbstractMethod(this.enclosingScope);", "+\t\ts = s.capture(this.enclosingScope, this.sourceEnd);", "+\t\tsSam = s.getSingleAbstractMethod(this.enclosingScope);", "-\t\t\tif (!resultExpression.tIsMoreSpecific(tSam.returnType, sSam.returnType))", "+\t\t\tif (!resultExpression.sIsMoreSpecific(sSam.returnType, tSam.returnType))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c778fba35acfc23f22f5aa7368a07fb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "af652d9d40e3e30a14ccbd2056144782592afc53", "commitAfterChange": "3dca78ae937ad139f018c4ddaaa87c3fe26600ed", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic boolean tIsMoreSpecific(TypeBinding t, TypeBinding s)", "signatureAfterChange": " \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "diff": ["-\tpublic boolean tIsMoreSpecific(TypeBinding t, TypeBinding s) {", "+\tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {", "-\t\tMethodBinding tSam = t.getSingleAbstractMethod(this.enclosingScope);", "-\t\tif (tSam == null || !tSam.isValidBinding())", "-\t\t\treturn false;", "+\t\tMethodBinding tSam = t.getSingleAbstractMethod(this.enclosingScope);", "+\t\tif (tSam == null || !tSam.isValidBinding())", "+\t\t\treturn false;", "-\t\tif (t.findSuperTypeOriginatingFrom(s) != null || s.findSuperTypeOriginatingFrom(t) != null)", "+\t\tif (s.findSuperTypeOriginatingFrom(t) != null || t.findSuperTypeOriginatingFrom(s) != null)", "-\t\tif (tSam.parameters.length != sSam.parameters.length)", "+\t\tif (sSam.parameters.length != tSam.parameters.length)", "-\t\tfor (int i = 0, length = tSam.parameters.length; i < length; i++) {", "-\t\t\tif (TypeBinding.notEquals(tSam.parameters[i], sSam.parameters[i]))", "+\t\tfor (int i = 0, length = sSam.parameters.length; i < length; i++) {", "+\t\t\tif (TypeBinding.notEquals(sSam.parameters[i], tSam.parameters[i]))", "-\t\tif (sSam.returnType.id == TypeIds.T_void)", "+\t\tif (tSam.returnType.id == TypeIds.T_void)", "-\t\tExpression resultExpression = (Expression) this.resultExpressions.get(t); // should be same as for s", "+\t\tExpression resultExpression = (Expression) this.resultExpressions.get(s); // should be same as for s", "-\t\tt = t.capture(this.enclosingScope, this.sourceEnd);", "-\t\ttSam = t.getSingleAbstractMethod(this.enclosingScope);", "-\t\treturn resultExpression.tIsMoreSpecific(tSam.returnType, sSam.returnType);", "+\t\ts = s.capture(this.enclosingScope, this.sourceEnd);", "+\t\tsSam = s.getSingleAbstractMethod(this.enclosingScope);", "+\t\treturn resultExpression.sIsMoreSpecific(sSam.returnType, tSam.returnType);"]}], "num": 34313}
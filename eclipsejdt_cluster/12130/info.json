{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f4bd3fa4027ec6bf156a94e36dc334e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f4c85b198a6a1bf30fa95264f50a15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "signatureAfterChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "diff": ["-\t\tArrayList paths = new ArrayList();", "-\t\t\tStringReader reader = new StringReader(xmlClasspath);", "-\t\t\tElement cpElement;", "-\t", "-\t\t\ttry {", "-\t\t\t\tDocumentBuilder parser =", "-\t\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "-\t\t\t\tcpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "-\t\t\t} catch (SAXException e) {", "-\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "-\t\t\t} catch (ParserConfigurationException e) {", "-\t\t\t\treader.close();", "-\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "-\t\t\t} finally {", "-\t\t\t\treader.close();", "-\t\t\t}", "-\t", "-\t\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"classpath\")) { //$NON-NLS-1$", "-\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tNodeList list = cpElement.getElementsByTagName(\"classpathentry\"); //$NON-NLS-1$", "-\t\t\tint length = list.getLength();", "-\t", "-\t\t\tfor (int i = 0; i < length; ++i) {", "-\t\t\t\tNode node = list.item(i);", "-\t\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "-\t\t\t\t\tIClasspathEntry entry = ClasspathEntry.elementDecode((Element)node, this);", "-\t\t\t\t\tif (entry != null) paths.add(entry);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\treturn decodeClasspath(xmlClasspath, createMarker, logProblems);", "-\t\t} catch (IOException e) {", "-\t\t\t// bad format", "-\t\t\tif (createMarker && this.getProject().isAccessible()) {", "-\t\t\t\tthis.createClasspathProblemMarker(", "-\t\t\t\t\tUtil.bind(\"classpath.xmlFormatError\", this.getElementName(), e.getMessage()), //$NON-NLS-1$", "-\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t}", "-\t\t\tif (logProblems) {", "-\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t+\"/.classpath, will mark classpath as invalid\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\treturn INVALID_CLASSPATH;", "-\t\t} catch (Assert.AssertionFailedException e) { ", "-\t\t\t// failed creating CP entries from file", "-\t\t\tif (createMarker && this.getProject().isAccessible()) {", "-\t\t\t\tthis.createClasspathProblemMarker(", "-\t\t\t\t\tUtil.bind(\"classpath.illegalEntryInClasspathFile\", this.getElementName(), e.getMessage()), //$NON-NLS-1$", "-\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t}", "-\t\t\tif (logProblems) {", "-\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t+\"/.classpath, will mark classpath as invalid\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\treturn INVALID_CLASSPATH;", "-\t\tif (paths.size() > 0) {", "-\t\t\tIClasspathEntry[] ips = new IClasspathEntry[paths.size()];", "-\t\t\tpaths.toArray(ips);", "-\t\t\treturn ips;", "-\t\t} else {", "-\t\t\treturn null;", "-\t\t}", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cba65a210ae5e4e2795cdc0ff0cd8d6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b080f0d7bae3add3e26aca56768f25b351884bac", "commitAfterChange": "f0aaa159cf03f4e96f0cf3cc5eba450308b5c3af", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "signatureAfterChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "diff": ["+\t\t\t\tboolean wasSuccessful = false; // flag recording if .classpath file change got reflected", "-\t\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\t\"Exception while retrieving \"+ project.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+\"/.classpath, ignore change\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\t\"Exception while retrieving \"+ project.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+\"/.classpath, ignore change\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t\t\t} catch (Assert.AssertionFailedException e) { // failed creating CP entries from file", "+\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "+\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.illegalEntryInClasspathFile\", project.getElementName(), e.getMessage()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// if reach that far, the classpath file change got absorbed", "+\t\t\t\t\twasSuccessful = true;", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t// happens if the .classpath could not be written to disk", "+\t\t\t\t} catch (JavaModelException e) { // CP failed validation", "-\t\t\t\t\t\tUtil.log(e, \"Could not set classpath for \"+ project.getPath()); //$NON-NLS-1$", "+\t\t\t\t\t\t// TODO: (jbl) need to distinguish scenario where .classpath file couldn't be written out", "+\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidClasspathInClasspathFile\", project.getElementName(), e.getMessage()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error\t\t\t\t\t", "+\t\t\t\t} finally {", "+\t\t\t\t\tif (!wasSuccessful){ ", "+\t\t\t\t\t\t// TODO: (jbl) rename the .classpath file into .classpath_invalid", "+\t\t\t\t\t}"]}], "num": 12130}
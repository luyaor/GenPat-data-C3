{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e37d65b7579a675c43dfebd8767010ff", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17161788ebd12f385b60e1db07786f05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bf20c4733b5ba628131f77425b6d1ad646dfd787", "commitAfterChange": "4fece3d5714f1973bb889af985f57d3ae8f56e20", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private HashtableOfObject addQueryResult(HashtableOfObject results, char[] word, CategoryTable wordsToDocNumbers, MemoryIndex memoryIndex, boolean prevResults) throws IOException", "signatureAfterChange": " private HashtableOfObject addQueryResult(HashtableOfObject results, char[] word, Object docs, MemoryIndex memoryIndex, boolean prevResults) throws IOException", "diff": ["-private HashtableOfObject addQueryResult(HashtableOfObject results, char[] word, CategoryTable wordsToDocNumbers, MemoryIndex memoryIndex, boolean prevResults) throws IOException {", "+private HashtableOfObject addQueryResult(HashtableOfObject results, char[] word, Object docs, MemoryIndex memoryIndex, boolean prevResults) throws IOException {", "-\t\t\tresults.putUnsafely(word, new EntryResult(word, wordsToDocNumbers));", "+\t\t\tresults.putUnsafely(word, new EntryResult(word, docs));", "-\t\t\tresult.addDocumentTable(wordsToDocNumbers);", "+\t\t\tresult.addDocumentTable(docs);", "-\t\tint[] docNumbers = readDocumentNumbers(wordsToDocNumbers.get(word));", "+\t\tint[] docNumbers = readDocumentNumbers(docs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77b6041871a0cca59d5e1b20f8990307", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "b6b8c5d56c52da04a602fb9a065023d943b4e7a7", "commitAfterChange": "f8cf1cf93993a2a964d587ccb545506c0c4fdc0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope scope)", "signatureAfterChange": " \t \t@Override \tpublic boolean visit(TypeParameter typeParameter, BlockScope scope)", "diff": ["+\t", "+\t@Override", "+\tpublic boolean visit(TypeParameter typeParameter, BlockScope scope) {", "+\t\tAnnotation[] annotations = typeParameter.annotations;", "+\t\tif (annotations != null) {", "+\t\t\tTypeVariableBinding binding = typeParameter.binding;", "+\t\t\tif (binding == null) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tthis.resolveAnnotations(scope, annotations, binding);"]}], "num": 40101}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23af994a718a196d1138d474b17d2605", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e51f9ce70fb5a99135777a628f05b71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 102, "signatureBeforeChange": " protected boolean resumeAfterRecovery()", "signatureAfterChange": " protected int resumeAfterRecovery()", "diff": ["-protected boolean resumeAfterRecovery() {", "-", "+protected int resumeAfterRecovery() {", "+\tif (requireExtendedRecovery()) {", "+\t\tif (this.unstackedAct == ERROR_ACTION) {", "+\t\t\tint mode = fallBackToSpringForward((Statement) null);", "+\t\t\tthis.resumedAfterRepair = mode == RESUME;", "+\t\t\tif (mode == RESUME || mode == HALT)", "+\t\t\t\treturn mode;", "+\t\t\t// else fall through and RESTART", "+\t\t} else {", "+\t\t\treturn RESUME;", "+\t\t}", "+\t}", "+\t\t", "+\t", "+\t", "+\t", "+\t", "+\tthis.valueLambdaNestDepth = -1;", "-\tif (!moveRecoveryCheckpoint()) return false;", "+\tif (this.unstackedAct != ERROR_ACTION && this.resumedAfterRepair) {", "+\t\tthis.scanner.ungetToken(this.currentToken);  // effectively move recovery checkpoint *backwards*.", "+\t} else {", "+\t\tif (!moveRecoveryCheckpoint()) return HALT;", "+\t}", "+\tthis.resumedAfterRepair = false;", "-\t\treturn true;", "+\t\treturn RESTART;", "-\t\treturn true;", "+\t\treturn RESTART;", "-\treturn false;", "+\treturn HALT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75a5dc901c82ed9eb911a40f4a4ca823", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "2c7a59198ef0accc78a3ea8fb276fbfe877a83c2", "commitAfterChange": "a55be3089b1474701c6009071b6792ce21fce5bc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\t}", "+\t\tif (this.expectedType instanceof IntersectionCastTypeBinding) {", "+\t\t\tReferenceBinding[] intersectingTypes =  ((IntersectionCastTypeBinding)this.expectedType).intersectingTypes;", "+\t\t\tfor (int t = 0, max = intersectingTypes.length; t < max; t++) {", "+\t\t\t\tif (intersectingTypes[t].findSuperTypeOriginatingFrom(TypeIds.T_JavaIoSerializable, false /*Serializable is not a class*/) != null) {", "+\t\t\t\t\tthis.isSerializable = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (this.expectedType != null && ", "+\t\t\t\t   this.expectedType.findSuperTypeOriginatingFrom(TypeIds.T_JavaIoSerializable, false /*Serializable is not a class*/) != null) {", "+\t\t\tthis.isSerializable = true;"]}], "num": 46416}
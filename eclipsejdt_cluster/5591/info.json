{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76a47278e5fdb3dcfc3049e63bac7640", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "187957992fef00eeb0b3de6485c85072", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate void verifyNameBindings(Name name)", "signatureAfterChange": " \tprivate void verifyNameBindings(Name name)", "diff": ["+\t\t\tint index = 0;", "-\t\t\t\tassertNotNull(simpleName+\" binding was not found!\", simpleName.resolveBinding());", "+\t\t\t\tIBinding binding = simpleName.resolveBinding();", "+\t\t\t\tassertNotNull(simpleName+\" binding was not found!\", binding);", "+\t\t\t\tif (index > 0 && this.packageBinding) {", "+\t\t\t\t\tassertEquals(\"Wrong binding type\", IBinding.PACKAGE, binding.getKind());", "+\t\t\t\t}", "+\t\t\t\tindex++;", "-\t\t\t\tassertNotNull(name+\" binding was not found!\", name.resolveBinding());", "+\t\t\t\tbinding = name.resolveBinding();", "+\t\t\t\tassertNotNull(name+\" binding was not found!\", binding);", "+\t\t\t\tif (this.packageBinding) {", "+\t\t\t\t\tassertEquals(\"Wrong binding type\", IBinding.PACKAGE, binding.getKind());", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95a6fe391bb56d32472d5cf0c83c9606", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "0afb6a8af8c4303e5dd78ba653e96f2baec6aaff", "commitAfterChange": "1decf6de90c742ae800c62bb40e904ecf7cf0dbd", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "signatureAfterChange": " \t \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "diff": ["-\t\tfinal int extraDimensions = retrieveExtraDimension(nameEnd + 1, argument.type.sourceEnd);", "+\t\tfinal int typeSourceEnd = argument.type.sourceEnd;", "+\t\tfinal int extraDimensions = retrieveExtraDimension(nameEnd + 1, typeSourceEnd);", "+\t\tfinal boolean isVarArgs = argument.isVarArgs;", "+\t\tif (isVarArgs && extraDimensions == 0) {", "+\t\t\t// remove the ellipsis from the type source end", "+\t\t\targument.type.sourceEnd = retrieveEllipsisStartPosition(argument.type.sourceStart, typeSourceEnd);", "+\t\t}", "-\t\tsetTypeForSingleVariableDeclaration(variableDecl, type, extraDimensions);", "+\t\tif (isVarArgs) {", "+\t\t\tsetTypeForSingleVariableDeclaration(variableDecl, type, extraDimensions + 1);", "+\t\t} else {", "+\t\t\tsetTypeForSingleVariableDeclaration(variableDecl, type, extraDimensions);", "+\t\t}", "-\t\tif (argument.isVarArgs) {", "+\t\tif (isVarArgs) {"]}], "num": 5591}
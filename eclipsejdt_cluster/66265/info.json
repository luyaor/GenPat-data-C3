{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7422f534263b2ed50d8e2cb91a33744d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0de9458a5ca8452a4af1f55d78fd48d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "cb1229e517a2018e5263ed249b199ae2a321da49", "commitAfterChange": "4732df192beaa38106d940c4bfeefb54a9e4a1cf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "signatureAfterChange": " public static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "diff": ["+\tint alternateLeftTypeId = expressionTypeId;", "-\t} else {", "+\t} else  {", "-\t\tif (alternateLeftType.id == expressionTypeId) { // obvious identity cast", "+\t\tif ((alternateLeftTypeId = alternateLeftType.id) == expressionTypeId) { // obvious identity cast", "+\t\t\treturn;", "+\t\t} else if (alternateLeftTypeId == TypeIds.T_null) {", "+\t\t\talternateLeftTypeId = expressionTypeId;  // tolerate null argument cast", "+/*\t\ttolerate widening cast in unary expressions, as may be used when combined in binary expressions (41680)", "+\t\tint alternateOperatorSignature = OperatorExpression.OperatorSignatures[operator][(alternateLeftTypeId << 4) + alternateLeftTypeId];", "+\t\t// (cast)  left   Op (cast)  right --> result", "+\t\t//  1111   0000       1111   0000     1111", "+\t\t//  <<16   <<12       <<8    <<4       <<0", "+\t\tfinal int CompareMASK = (0xF<<16) + (0xF<<8) + 0xF; // mask hiding compile-time types", "+\t\tif ((operatorSignature & CompareMASK) == (alternateOperatorSignature & CompareMASK)) { // same promotions and result", "+\t\t\tscope.problemReporter().unnecessaryCastForArgument((CastExpression)expression,  TypeBinding.wellKnownType(scope, expression.implicitConversion >> 4));", "+\t\t}", "+*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17dafd830cae2d7904f2a85c908d97c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "99b584120d57fd9f2c2a7464785e4049acdac490", "commitAfterChange": "62bb0df3439a3337bf19f66c0d56ac16589e94ca", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "signatureAfterChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "diff": ["+\t\tint adjustment = 0;", "+\t\tif (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\tadjustment = 1;", "+\t\t}", "-\t\t\t\t\t\tthis.preferences.array_initializer_continuation_indentation,", "+\t\t\t\t\t\tthis.preferences.array_initializer_continuation_indentation + adjustment,"]}], "num": 66265}
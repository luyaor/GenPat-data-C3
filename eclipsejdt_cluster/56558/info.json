{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "233fb5c21fc8754d1372f9c9970111cd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7818173db98b6aa84cc1c582238a7a9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "312137f2d1155a37d38bf0abe100828513472f15", "commitAfterChange": "991ec4c8f423745963538f12565fec49fd3f86fc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\tif (this.completionToken.length == 0) {", "-\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\tthis.setSourceRange(astNode.sourceStart, astNode.sourceStart - 1, false);", "-", "-\t\t\t\t\tfindAnnotationReference(annotation.type, scope);", "-\t\t\t\t}", "-\t\t\t} else {", "+\t\t\tReferenceBinding annotationType = (ReferenceBinding)annotation.resolvedType;", "+\t\t\t", "+\t\t\tif (annotationType != null && annotationType.isAnnotationType()) {", "-\t\t\t\t\tthis.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), (ReferenceBinding)annotation.resolvedType);", "+\t\t\t\t\tthis.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), annotationType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b69042417701676ea14500faec5e4e94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic boolean match(QualifiedType node, Object other)", "signatureAfterChange": " \tpublic boolean match(QualifiedType node, Object other)", "diff": ["-\t\tswitch(node.getAST().apiLevel) {", "-\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\tcase AST.JLS3_INTERNAL :", "-\t\t\tcase AST.JLS4:", "-\t\t\t\treturn (", "-\t\t\t\t\t\tsafeSubtreeMatch(node.getQualifier(), o.getQualifier())", "-\t\t\t\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName()));", "-\t\t\tdefault:", "-\t\t\t\treturn (", "-\t\t\t\t\t\tsafeSubtreeMatch(node.getQualifier(), o.getQualifier())", "-\t\t\t\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName())", "-\t\t\t\t\t\t\t&& safeSubtreeListMatch(node.annotations(), o.annotations()));", "-\t\t}", "-\t\t", "+\t\tint level = node.getAST().apiLevel;", "+\t\treturn safeSubtreeMatch(node.getQualifier(), o.getQualifier())", "+\t\t\t\t&& (level >= AST.JLS8 ? safeSubtreeListMatch(node.annotations(), o.annotations()) : true)", "+\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName());"]}], "num": 56558}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e0c4ce6aef98e2481109afb56823507", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f9c22ad726b968b7d63318c77c3ebb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "01023454337af8ada2f5699e5de8fcd7a8d40840", "commitAfterChange": "b7bb9d2950572af77f85c2c708c3816367817930", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 148, "signatureBeforeChange": "  \tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotations)", "signatureAfterChange": "  \tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "diff": ["-", "-\tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, org.eclipse.jdt.internal.compiler.ast.ASTNode node, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotations) {", "-\t    org.eclipse.jdt.internal.compiler.ast.Annotation[] typeAnnotations;", "-\t\tint length = typeName.length;", "+\t    int length = typeName.length;", "-\t\tif (annotations != null && (typeAnnotations = annotations[0]) != null) {", "-\t\t\tannotateName(firstToken, typeAnnotations);", "-\t\t}", "-\t\tif (annotations != null && (typeAnnotations = annotations[1]) != null) {", "-\t\t\tannotateName(qualifiedName, typeAnnotations);", "-\t\t}", "-\t\t\tif (annotations != null && (typeAnnotations = annotations[i]) != null) {", "-\t\t\t\tannotateName(qualifiedName, typeAnnotations);", "-\t\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d95f5b028c03d04ea8101392d83bb87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void propagateInnerEmulation( \t\tReferenceBinding targetType, \t\tboolean isEnclosingInstanceSupplied, \t\tboolean useDirectReference)", "signatureAfterChange": " \tpublic void propagateInnerEmulation(ReferenceBinding targetType, boolean isEnclosingInstanceSupplied)", "diff": ["-\tpublic void propagateInnerEmulation(", "-\t\tReferenceBinding targetType,", "-\t\tboolean isEnclosingInstanceSupplied,", "-\t\tboolean useDirectReference) {", "+\tpublic void propagateInnerEmulation(ReferenceBinding targetType, boolean isEnclosingInstanceSupplied) {", "-\t\t// perform some emulation work in case there is some and we are inside a local type only", "-\t\t// propage emulation of the enclosing instances", "-\t\tReferenceBinding[] syntheticArgumentTypes;", "-\t\tif ((syntheticArgumentTypes = targetType.syntheticEnclosingInstanceTypes())", "-\t\t\t!= null) {", "-\t\t\tfor (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {", "-\t\t\t\tReferenceBinding syntheticArgType = syntheticArgumentTypes[i];", "-\t\t\t\t// need to filter out the one that could match a supplied enclosing instance", "-\t\t\t\tif (!(isEnclosingInstanceSupplied", "-\t\t\t\t\t&& (syntheticArgType == targetType.enclosingType()))) {", "-\t\t\t\t\tthis.emulateOuterAccess(syntheticArgType, useDirectReference);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\t// no need to propagate enclosing instances, they got eagerly allocated already.", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f44dde1d37ab2ea829a4f50098d763", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "diff": ["-public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite) {", "+public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite) {", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e60bacd594ad074bb9c572e38ee33b05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "a107a93c33b9fbfeb3c58f06a397400d87b64e14", "commitAfterChange": "ac57d09afd251c5c3e8f5a329155e4ee05cc3840", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 185, "signatureBeforeChange": "  public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass)", "signatureAfterChange": "  public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass)", "diff": ["-    \t\t\t\tTypeBinding[] syntheticArgumentTypes = nestedType.syntheticEnclosingInstanceTypes();", "-    \t\t\t\tif (syntheticArgumentTypes != null) {", "-    \t\t\t\t\tfor (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {", "-    \t\t\t\t\t\tswitch (syntheticArgumentTypes[i].id)  {", "-    \t\t\t\t\t\t\tcase TypeIds.T_double :", "-    \t\t\t\t\t\t\tcase TypeIds.T_long :", "-\t    \t\t\t\t\t\t\treceiverAndArgsSize += 2;", "-\t\t\t\t\t\t\t\t\tbreak;", "-    \t\t\t\t\t\t\tdefault: ", "-\t    \t\t\t\t\t\t\treceiverAndArgsSize++;", "-    \t\t\t\t\t\t\t\tbreak;", "-    \t\t\t\t\t\t}", "-    \t\t\t\t\t}", "-    \t\t\t\t}", "+        \t\t\treceiverAndArgsSize += nestedType.getEnclosingInstancesSlotSize();"]}], "num": 52541}
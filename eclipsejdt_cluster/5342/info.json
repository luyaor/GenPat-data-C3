{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdf7f9ecdb12787542b1c6a3e1bc9dc6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8301e5aef5c7b0179efe70b9c554b743", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/ObjectVector.java", "commitBeforeChange": "b334bc5d4c087f3b8b3e7849934d5258482fb823", "commitAfterChange": "66cd4232d0ab1e96e3a07f02c56b8bad9d7784af", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tpublic Object remove(Object element)", "signatureAfterChange": "\r \r \tpublic Object remove(Object element)", "diff": ["+\r", "+\r", "-\t\tfor (int i= size; --i >= 0;)\r", "-\t\t\tif (element == elements[i]) {\r", "+\t\tfor (int i = this.size; --i >= 0;)\r", "+\t\t\tif (element.equals(this.elements[i])) {\r", "-\t\t\t\tSystem.arraycopy(elements, i + 1, elements, i, --size - i);\r", "-\t\t\t\telements[size]= null;\r", "+\t\t\t\tSystem.arraycopy(this.elements, i + 1, this.elements, i, --this.size - i);\r", "+\t\t\t\tthis.elements[this.size] = null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9154c6c1cbfd179261dca77afe5abb91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "signatureAfterChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["-\t\t\tparseThreshold = 0; // will request a diet parse", "+\t\t\tthis.parseThreshold = 0; // will request a diet parse", "-\t\t\tunit = unitsToProcess[0];", "+\t\t\tunit = this.unitsToProcess[0];", "-\t\t\t\t\t\t((AbstractMethodDeclaration)node).parseStatements(parser, unit);", "+\t\t\t\t\t\t((AbstractMethodDeclaration)node).parseStatements(this.parser, unit);", "-\t\t \t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(parser, enclosingTypeDeclaration, unit);", "+\t\t \t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(this.parser, enclosingTypeDeclaration, unit);", "-\t\t\t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)node).parseMethod(parser, unit);", "+\t\t\t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)node).parseMethod(this.parser, unit);", "-\t\t\t\t\tunit.scope.verifyMethods(lookupEnvironment.methodVerifier());", "+\t\t\t\t\tunit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());", "-\t\t\tif (unitsToProcess != null) unitsToProcess[0] = null; // release reference to processed unit declaration", "-\t\t\trequestor.acceptResult(unit.compilationResult.tagAsAccepted());", "+\t\t\tif (this.unitsToProcess != null) this.unitsToProcess[0] = null; // release reference to processed unit declaration", "+\t\t\tthis.requestor.acceptResult(unit.compilationResult.tagAsAccepted());"]}], "num": 5342}
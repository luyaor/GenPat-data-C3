{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31da759a47e6be62273f4acc6523d52f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91979dc47e4bdf744c06c2fd60e8f7cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "420aa82752ec3e926a634ee4daaacddae8a8ab80", "commitAfterChange": "f68c3205ee145ec7c1c029e73701ee13aaf91bec", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tIBinding resolveName(Name name)", "signatureAfterChange": " \tIBinding resolveName(Name name)", "diff": ["-\t\t\tint qualifiedNameLength = qualifiedNameReference.tokens.length;", "+\t\t\tfinal char[][] tokens = qualifiedNameReference.tokens;", "+\t\t\tint qualifiedNameLength = tokens.length;", "-\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(tokens, 0, indexInQualifiedName));", "-\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(tokens, 0, indexInQualifiedName));", "-\t\t\t\t\tif (binding != null && binding.isValidBinding()) {", "-\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);\t\t\t\t", "+\t\t\t\t\tif (binding != null) {", "+\t\t\t\t\t\tif (binding.isValidBinding()) {", "+\t\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);\t\t\t\t", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (binding instanceof ProblemFieldBinding) {", "+\t\t\t\t\t\t\t\tProblemFieldBinding problemFieldBinding = (ProblemFieldBinding) binding;", "+\t\t\t\t\t\t\t\tswitch(problemFieldBinding.problemId()) {", "+\t\t\t\t\t\t\t\t\tcase ProblemReasons.NotVisible : ", "+\t\t\t\t\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "+\t\t\t\t\t\t\t\t\t\tReferenceBinding declaringClass = problemFieldBinding.declaringClass;", "+\t\t\t\t\t\t\t\t\t\tif (declaringClass != null) {", "+\t\t\t\t\t\t\t\t\t\t\tFieldBinding exactBinding = declaringClass.getField(tokens[tokens.length - 1]);", "+\t\t\t\t\t\t\t\t\t\t\tif (exactBinding != null) {", "+\t\t\t\t\t\t\t\t\t\t\t\tIVariableBinding variableBinding = (IVariableBinding) this.compilerBindingsToASTBindings.get(exactBinding);", "+\t\t\t\t\t\t\t\t\t\t\t\tif (variableBinding != null) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\treturn variableBinding;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\tvariableBinding = new VariableBinding(this, exactBinding);", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.compilerBindingsToASTBindings.put(exactBinding, variableBinding);", "+\t\t\t\t\t\t\t\t\t\t\t\treturn variableBinding;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\tif (binding == null || !binding.isValidBinding()) {", "+\t\t\tif (binding == null) {", "+\t\t\t\treturn null;", "+\t\t\t} else if (!binding.isValidBinding()) {", "+\t\t\t\tswitch(binding.problemId()) {", "+\t\t\t\t\tcase ProblemReasons.NotVisible : ", "+\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "+\t\t\t\t\t\tif (binding instanceof ProblemReferenceBinding) {", "+\t\t\t\t\t\t\tProblemReferenceBinding problemReferenceBinding = (ProblemReferenceBinding) binding;", "+\t\t\t\t\t\t\tBinding binding2 = problemReferenceBinding.original;", "+\t\t\t\t\t\t\tif (binding2 != null && binding2 instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "+\t\t\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding2);", "+\t\t\t\t\t\t\t} ", "+\t\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e72a9c1d036c9615524a922c18691aea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "b0673075374f5e3d492b8bf3cb6c4f6a7d2a3dcc", "commitAfterChange": "a64ed2f9f4ead819687188be5122b80f92bed8be", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "  \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tSourceTypeBinding declaringType = classScope.enclosingSourceType();", "-\t\t\t\tboolean checkLocal = true;", "-\t\t\t\tif (declaringType.superclass != null) {", "-\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "-\t\t\t\t\tif (existingVariable != null && this.binding != existingVariable && existingVariable.isValidBinding()){", "+\t\t\t\tcheckHiding: {", "+\t\t\t\t\tSourceTypeBinding declaringType = classScope.enclosingSourceType();", "+\t\t\t\t\tcheckHidingSuperField: {", "+\t\t\t\t\t\tif (declaringType.superclass == null) break checkHidingSuperField;", "+\t\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "+\t\t\t\t\t\tif (existingVariable == null) break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\t\t\tif (!existingVariable.isValidBinding())  break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\t\t\tif (existingVariable instanceof FieldBinding) {", "+\t\t\t\t\t\t\tFieldBinding existingField = (FieldBinding) existingVariable;", "+\t\t\t\t\t\t\tif (existingField.original() == this.binding) break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// collision with supertype field", "-\t\t\t\t\t\tcheckLocal = false; // already found a matching field", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (checkLocal) {", "-\t\t\t\t\tScope outerScope = classScope.parent;", "+\t\t\t\t\t\tbreak checkHiding; // already found a matching field", "+\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\tif (outerScope.kind != Scope.COMPILATION_UNIT_SCOPE) {", "-\t\t\t\t\t\tBinding existingVariable = outerScope.getBinding(this.name, Binding.VARIABLE, this, false /*do not resolve hidden field*/);", "-\t\t\t\t\t\tif (existingVariable != null && this.binding != existingVariable && existingVariable.isValidBinding()", "-\t\t\t\t\t\t\t\t&& (!(existingVariable instanceof FieldBinding)", "-\t\t\t\t\t\t\t\t\t\t|| ((FieldBinding) existingVariable).isStatic() ", "-\t\t\t\t\t\t\t\t\t\t|| !declaringType.isStatic())) {", "-\t\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tScope outerScope = classScope.parent;", "+\t\t\t\t\tif (outerScope.kind == Scope.COMPILATION_UNIT_SCOPE) break checkHiding;", "+\t\t\t\t\tBinding existingVariable = outerScope.getBinding(this.name, Binding.VARIABLE, this, false /*do not resolve hidden field*/);", "+\t\t\t\t\tif (existingVariable == null) break checkHiding;", "+\t\t\t\t\tif (!existingVariable.isValidBinding()) break checkHiding;", "+\t\t\t\t\tif (existingVariable == this.binding) break checkHiding;", "+\t\t\t\t\tif (existingVariable instanceof FieldBinding) {", "+\t\t\t\t\t\tFieldBinding existingField = (FieldBinding) existingVariable;", "+\t\t\t\t\t\tif (existingField.original() == this.binding) break checkHiding;", "+\t\t\t\t\t\tif (!existingField.isStatic() && declaringType.isStatic()) break checkHiding;", "+\t\t\t\t\t// collision with outer field or local variable", "+\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);"]}], "num": 43895}
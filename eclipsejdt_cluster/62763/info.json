{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df1d48a1da544991c8eb5914edaa6108", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0472191b19d19e089e7a9b8c0d067cde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "db260d93667acab111e64138469df12a566a7b90", "commitAfterChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "methodNumberBeforeChange": 250, "methodNumberAfterChange": 250, "signatureBeforeChange": " protected void pushOnAstLengthStack(int pos)", "signatureAfterChange": " protected void pushOnAstLengthStack(int pos)", "diff": ["-\ttry {", "-\t\tthis.astLengthStack[++this.astLengthPtr] = pos;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tint oldStackLength = this.astLengthStack.length;", "-\t\tint[] oldPos = this.astLengthStack;", "-\t\tthis.astLengthStack = new int[oldStackLength + StackIncrement];", "-\t\tSystem.arraycopy(oldPos, 0, this.astLengthStack, 0, oldStackLength);", "-\t\tthis.astLengthStack[this.astLengthPtr] = pos;", "+", "+\tint stackLength = this.astLengthStack.length;", "+\tif (++this.astLengthPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.astLengthStack, 0,", "+\t\t\tthis.astLengthStack = new int[stackLength + StackIncrement], 0,", "+\t\t\tstackLength);", "+\tthis.astLengthStack[this.astLengthPtr] = pos;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d3002fa68ac4df3bf98e7c23fce2f89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "db260d93667acab111e64138469df12a566a7b90", "commitAfterChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 235, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["-\t\ttry {", "-\t\t\tthis.stack[++this.stateStackTop] = act;", "-\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\tint oldStackLength = this.stack.length;", "-\t\t\tint oldStack[] = this.stack;", "-\t\t\tthis.stack = new int[oldStackLength + StackIncrement];", "-\t\t\tSystem.arraycopy(oldStack, 0, this.stack, 0, oldStackLength);", "-\t\t\tthis.stack[this.stateStackTop] = act;", "+\t\tint stackLength = this.stack.length;", "+\t\tif (++this.stateStackTop >= stackLength) {", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.stack, 0,", "+\t\t\t\tthis.stack = new int[stackLength + StackIncrement], 0,", "+\t\t\t\tstackLength);", "+\t\tthis.stack[this.stateStackTop] = act;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b5281ca6e9197c288722fcf3784542b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "db260d93667acab111e64138469df12a566a7b90", "commitAfterChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 253, "signatureBeforeChange": " protected void pushOnExpressionStackLengthStack(int pos)", "signatureAfterChange": " protected void pushOnExpressionStackLengthStack(int pos)", "diff": ["-\ttry {", "-\t\tthis.expressionLengthStack[++this.expressionLengthPtr] = pos;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tint oldStackLength = this.expressionLengthStack.length;", "-\t\tint[] oldPos = this.expressionLengthStack;", "-\t\tthis.expressionLengthStack = new int[oldStackLength + StackIncrement];", "-\t\tSystem.arraycopy(oldPos, 0, this.expressionLengthStack, 0, oldStackLength);", "-\t\tthis.expressionLengthStack[this.expressionLengthPtr] = pos;", "+", "+\tint stackLength = this.expressionLengthStack.length;", "+\tif (++this.expressionLengthPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.expressionLengthStack, 0,", "+\t\t\tthis.expressionLengthStack = new int[stackLength + StackIncrement], 0,", "+\t\t\tstackLength);", "+\tthis.expressionLengthStack[this.expressionLengthPtr] = pos;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79dd43c77c0ecb360d5344a957ce5cc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "db260d93667acab111e64138469df12a566a7b90", "commitAfterChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 254, "signatureBeforeChange": " protected void pushOnIntStack(int pos)", "signatureAfterChange": " protected void pushOnIntStack(int pos)", "diff": ["-\ttry {", "-\t\tthis.intStack[++this.intPtr] = pos;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//this.intPtr is correct ", "-\t\tint oldStackLength = this.intStack.length;", "-\t\tint oldStack[] = this.intStack;", "-\t\tthis.intStack = new int[oldStackLength + StackIncrement];", "-\t\tSystem.arraycopy(oldStack, 0, this.intStack, 0, oldStackLength);", "-\t\tthis.intStack[this.intPtr] = pos;", "+\tint stackLength = this.intStack.length;", "+\tif (++this.intPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.intStack, 0,", "+\t\t\tthis.intStack = new int[stackLength + StackIncrement], 0,", "+\t\t\tstackLength);", "+\tthis.intStack[this.intPtr] = pos;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "835b12582a4fe06619afde7995f30a44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "commitAfterChange": "285e33b7c5da84e3ca1755cdb83ba66c19c28c11", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " protected void pushOnIntArrayStack(int[] positions)", "signatureAfterChange": " protected void pushOnIntArrayStack(int[] positions)", "diff": ["-\ttry {", "-\t\tintArrayStack[++intArrayPtr] = positions;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//intPtr is correct ", "-\t\tint oldStackLength = intArrayStack.length;", "-\t\tint oldStack[][] = intArrayStack;", "-\t\tintArrayStack = new int[oldStackLength + StackIncrement][];", "-\t\tSystem.arraycopy(oldStack, 0, intArrayStack, 0, oldStackLength);", "-\t\tintArrayStack[intArrayPtr] = positions;", "+\tint stackLength = this.intArrayStack.length;", "+\tif (++this.intArrayPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.intArrayStack, 0,", "+\t\t\tthis.intArrayStack = new int[stackLength + StackIncrement][], 0,", "+\t\t\tstackLength);", "+\tintArrayStack[intArrayPtr] = positions;"]}], "num": 62763}
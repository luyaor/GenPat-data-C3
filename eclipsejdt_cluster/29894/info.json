{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec858e9cd1ff9ddf5a0c681dff0a4b89", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9850dcef5180d8fb70c01018cc315051", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "346d5595b49b8e1d584c75a71d769acf07f794ed", "commitAfterChange": "2ec4d89bb7b096bd721c92f6e7b067648efc1200", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\tint problemId = NotFound;", "+\t\tReferenceBinding foundType = null;", "-\t\t\tReferenceBinding foundType = null;", "-\t\t\tif (foundType != null) {", "-\t\t\t\tif (foundType.problemId() != NotVisible) return foundType;", "-\t\t\t\tproblemId = NotVisible;", "-\t\t\t}", "+\t\t\tif (foundType != null && foundType.problemId() != NotVisible)", "+\t\t\t\treturn foundType;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tproblemId = temp.problemId();", "+\t\t\t\t\t\t\t} else if (foundType == null) {", "+\t\t\t\t\t\t\t\tfoundType = temp;", "-\t\treturn new ProblemReferenceBinding(name, problemId);", "+\t\tif (foundType != null) return foundType; // problem type from above", "+\t\treturn new ProblemReferenceBinding(name, NotFound);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c00b5073ba859895d9f7fe0fd87c72b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "0c0f02419934ad3b7d3b29ce6843cc90f00cf260", "commitAfterChange": "ce9d82264275b3c4ad926312ca4ca735e225fab4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "signatureAfterChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "diff": ["-\t\t// basic entry validation, will abort in presence of unresolved variable\r", "-\t\tIJavaModelStatus status = validateClasspathEntry(javaProject, classpath[i], false);\r", "-\t\tif (!status.isOK()){\r", "-\t\t\treturn status;\r", "-\t\t}\r", "-\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\t\tif (classpath[i].getPath().equals(outputLocation)) allowNestingInOutput = true;\r", "+\t\tif (classpath[i] != null){\r", "+\t\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\t\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\t\t\tif (classpath[i].getPath().equals(outputLocation)) allowNestingInOutput = true;\r", "+\t\t}\r", "+\t\tif (entry == null) continue;\r", "+\t\t\t\tif (otherEntry == null) continue;\r"]}], "num": 29894}
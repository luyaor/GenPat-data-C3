{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "530bcd8dd99bbb625692190476feab9d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3afe45295815e03f21fe7218d70d8427", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "commitAfterChange": "309aed033cc4257b36692ed1549ee0025e0800df", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate boolean checkNegative5()", "signatureAfterChange": " \tpublic boolean checkNegative5()", "diff": ["-\tprivate boolean checkNegative5() {", "+\tpublic boolean checkNegative5() {", "-\t\t\tTestElement(String n) {", "-\t\t\t\tname = n;", "-\t\t\t\telement = null;", "+\t\t\tTestElement(String name) {", "+\t\t\t\tthis.name = name;", "+\t\t\t\tthis.element = null;", "-\t\t\t// TODO: check superclass and superinterfaces against expected values", "+\t\t\t// TODO: there are substantial differences between javac and Eclipse in how", "+\t\t\t// missing types are recovered (e.g., as error types or as declared types),", "+\t\t\t// and the toString() implementations are also different.  The JSR269 spec", "+\t\t\t// does not require these to match.  Do we want to enforce matching anyway?", "-\t\t\tList<? extends TypeMirror> superInterfaces = testElement.element.getInterfaces();", "-\t\t\tif (superClass == null) {", "+\t\t\tif (_reportFailingCases && superClass == null) {", "+\t\t\tList<? extends TypeMirror> superInterfaces = testElement.element.getInterfaces();", "+\t\t\tif (_reportFailingCases && (superInterfaces == null || superInterfaces.isEmpty())) {", "+\t\t\t\treportError(\"Element \" + testElement.name + \" has empty list of superinterfaces\");", "+\t\t\t\treturn false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf92e934e568b30fd3273caab96aa884", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "3561a65aa6894682f3ea9a6665dee82b18c3d4bf", "commitAfterChange": "0b12d287970a543efa74b3f16f5eaa0f1a0fc0f9", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic ITypeBinding[] getTypeBounds()", "signatureAfterChange": " \tpublic ITypeBinding[] getTypeBounds()", "diff": ["-\t\t// TODO (olivier) missing implementation of J2SE 1.5 language feature", "+\t\tif (this.binding instanceof TypeVariableBinding) {", "+\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "+\t\t\tint boundsNumber = 0;", "+\t\t\tReferenceBinding superclass = typeVariableBinding.superclass();", "+\t\t\tif (superclass != null) {", "+\t\t\t\tboundsNumber++;", "+\t\t\t}", "+\t\t\tReferenceBinding[] superinterfaces = typeVariableBinding.superInterfaces();", "+\t\t\tint superinterfacesLength = 0;", "+\t\t\tif (superinterfaces != null) {", "+\t\t\t\tsuperinterfacesLength = superinterfaces.length;", "+\t\t\t\tboundsNumber += superinterfacesLength;", "+\t\t\t}", "+\t\t\tif (boundsNumber != 0) {", "+\t\t\t\tITypeBinding[] typeBounds = new ITypeBinding[boundsNumber];", "+\t\t\t\tint boundsIndex = 0;", "+\t\t\t\tif (superclass != null) {", "+\t\t\t\t\ttypeBounds[boundsIndex++] = this.resolver.getTypeBinding(superclass);", "+\t\t\t\t}", "+\t\t\t\tif (superinterfaces != null) {", "+\t\t\t\t\tfor (int i = 0; i < superinterfacesLength; i++, boundsIndex++) {", "+\t\t\t\t\t\ttypeBounds[boundsIndex] = this.resolver.getTypeBinding(superinterfaces[i]);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn typeBounds;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb7a54dd0bcbe1b6283a1a80b1b05379", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "bffd05273174fba670489cd637d40ac2a4d0913b", "commitAfterChange": "5cda6ee5d9726ecd4c3800dc98f96b9913f2498c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void connect(\r \t\tIGenericType suppliedType,\r \t\tIGenericType superclass,\r \t\tIGenericType[] superinterfaces)", "signatureAfterChange": "\r \tpublic void connect(\r \t\tIGenericType suppliedType,\r \t\tIGenericType superclass,\r \t\tIGenericType[] superinterfaces)", "diff": ["-\t\t\tsuperHandle = getHandle(superclass);\r", "+\t\t\tif (superclass instanceof HierarchyResolver.MissingType) {\r", "+\t\t\t\tthis.hierarchy.missingTypes.add(((HierarchyResolver.MissingType)superclass).simpleName);\r", "+\t\t\t} else {\r", "+\t\t\t\tsuperHandle = getHandle(superclass);\r", "+\t\t\t}\r", "-\t\t\t\tif (superinterfaces[i] != null) {\r", "-\t\t\t\t\tresolvedInterfaceHandles[index++] = getHandle(superinterfaces[i]);\r", "+\t\t\t\tIGenericType superInterface = superinterfaces[i];\r", "+\t\t\t\tif (superInterface != null) {\r", "+\t\t\t\t\tif (superInterface instanceof HierarchyResolver.MissingType) {\r", "+\t\t\t\t\t\tthis.hierarchy.missingTypes.add(((HierarchyResolver.MissingType)superInterface).simpleName);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tresolvedInterfaceHandles[index] = getHandle(superInterface);\r", "+\t\t\t\t\t\tif (resolvedInterfaceHandles[index] != null) {\r", "+\t\t\t\t\t\t\tindex++;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "-\t\t\tif (interfaceHandles == null) {\r", "+\t\t\tif (interfaceHandles == null || interfaceHandles.length == 0) {\r", "-\t\t\tinterfaceHandles = this.hierarchy.fgEmpty;\r", "+\t\t\tinterfaceHandles = this.hierarchy.NO_TYPE;\r"]}], "num": 1297}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41fbdb298c2f8e84f160d91694d08f78", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41971596722d000a2679893aca1a4a4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "commitAfterChange": "dcf93fb34d4ce9325841c9302bc217b02f49501a", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic void _test0070() throws JavaModelException", "signatureAfterChange": " \tpublic void test0070() throws JavaModelException", "diff": ["-\tpublic void _test0070() throws JavaModelException {", "+\tpublic void test0070() throws JavaModelException {", "+\t\tASTNode node = getASTNode(compilationUnit, 1, 0, 0);", "+\t\tassertEquals(\"Not a variable declaration statement\", ASTNode.VARIABLE_DECLARATION_STATEMENT, node.getNodeType());", "+\t\tVariableDeclarationStatement statement = (VariableDeclarationStatement) node;", "+\t\tType type = statement.getType();", "+\t\tassertTrue(\"Not a parameterized type\", type.isParameterizedType());", "+\t\tParameterizedType parameterizedType = (ParameterizedType) type;", "+\t\tassertNotNull(\"No binding\", parameterizedType.resolveBinding());", "+\t\tType type2 = parameterizedType.getType();", "+\t\tassertTrue(\"Not a qualified type\", type2.isQualifiedType());", "+\t\tQualifiedType qualifiedType = (QualifiedType) type2;", "+\t\tITypeBinding typeBinding = qualifiedType.resolveBinding();", "+        assertNotNull(\"No binding\", typeBinding);", "+        assertEquals(\"Wrong name 1\", \"test0070.Outer<java.lang.String>.Inner<Number>\", typeBinding.getQualifiedName());", "+\t\tSimpleName simpleName = qualifiedType.getName();", "+        typeBinding = simpleName.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+        assertEquals(\"Wrong name 2\", \"test0070.Outer<java.lang.String>.Inner<Number>\", typeBinding.getQualifiedName());", "+\t\tType type3 = qualifiedType.getQualifier();", "+\t\tassertTrue(\"Not a parameterized type\", type3.isParameterizedType());", "+\t\tParameterizedType parameterizedType2 = (ParameterizedType) type3;", "+        typeBinding = parameterizedType2.resolveBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+        assertEquals(\"Wrong name 3\", \"test0070.Outer<java.lang.String>\", typeBinding.getQualifiedName());", "+\t\tType type4 = parameterizedType2.getType();", "+\t\tassertTrue(\"Not a simple type\", type4.isSimpleType());", "+\t\tSimpleType simpleType = (SimpleType) type4;", "+\t\ttypeBinding = simpleType.resolveBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+        assertEquals(\"Wrong name 3\", \"test0070.Outer<java.lang.String>\", typeBinding.getQualifiedName());", "+\t\tName name = simpleType.getName();", "+\t\tassertTrue(\"Not a simpleName\", name.isSimpleName());", "+\t\tSimpleName simpleName2 = (SimpleName) name;", "+\t\ttypeBinding = simpleName2.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+        assertEquals(\"Wrong name 3\", \"test0070.Outer\", typeBinding.getQualifiedName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c425d40f4e99dc55f2666abea2b23e90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "1690d0ff251bd1c1ba52c81c2c0d3d1454b10910", "commitAfterChange": "66c4d7e89245a1968f7426f462a950cfd030c75f", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void test0038() throws JavaModelException", "signatureAfterChange": " \tpublic void test0038() throws JavaModelException", "diff": ["+\t\tassertEquals(\"Wrong isArray\", false, typeBinding.isArray());", "+\t\tassertEquals(\"Wrong isAnnotation\", false, typeBinding.isAnnotation());", "+\t\tassertEquals(\"Wrong isAnonymous\", false, typeBinding.isAnonymous());", "+// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=78310 ", "+//\t\tassertEquals(\"Wrong isClass\", false, typeBinding.isClass());", "+\t\tassertEquals(\"Wrong isEnum\", false, typeBinding.isEnum());", "+\t\tassertEquals(\"Wrong isInterface\", false, typeBinding.isInterface());", "+\t\tassertEquals(\"Wrong isGenericType\", false, typeBinding.isGenericType());", "+\t\tassertEquals(\"Wrong isLocal\", false, typeBinding.isLocal());", "+\t\tassertEquals(\"Wrong isMember\", false, typeBinding.isMember());", "+\t\tassertEquals(\"Wrong isNested\", false, typeBinding.isNested());", "+\t\tassertEquals(\"Wrong isNullType\", false, typeBinding.isNullType());", "+\t\tassertEquals(\"Wrong isParameterizedType\", false, typeBinding.isParameterizedType());", "+\t\tassertEquals(\"Wrong isPrimitive\", false, typeBinding.isPrimitive());", "+\t\tassertEquals(\"Wrong isRawType\", false, typeBinding.isRawType());", "+//\t\t see https://bugs.eclipse.org/bugs/show_bug.cgi?id=78310 ", "+//\t\tassertEquals(\"Wrong isTopLevel\", false, typeBinding.isTopLevel());", "+\t\tassertEquals(\"Wrong isUpperbound\", false, typeBinding.isUpperbound());", "+\t\tassertEquals(\"Wrong isTypeVariable\", true, typeBinding.isTypeVariable());", "+\t\tassertEquals(\"Wrong isWildcardType\", false, typeBinding.isWildcardType());", "+\t\tassertEquals(\"Wrong isArray\", false, typeBinding2.isArray());", "+\t\tassertEquals(\"Wrong isAnnotation\", false, typeBinding2.isAnnotation());", "+\t\tassertEquals(\"Wrong isAnonymous\", false, typeBinding2.isAnonymous());", "+\t\tassertEquals(\"Wrong isClass\", true, typeBinding2.isClass());", "+\t\tassertEquals(\"Wrong isEnum\", false, typeBinding2.isEnum());", "+\t\tassertEquals(\"Wrong isInterface\", false, typeBinding2.isInterface());", "+\t\tassertEquals(\"Wrong isGenericType\", true, typeBinding2.isGenericType());", "+\t\tassertEquals(\"Wrong isLocal\", false, typeBinding2.isLocal());", "+\t\tassertEquals(\"Wrong isMember\", false, typeBinding2.isMember());", "+\t\tassertEquals(\"Wrong isNested\", false, typeBinding2.isNested());", "+\t\tassertEquals(\"Wrong isNullType\", false, typeBinding2.isNullType());", "+\t\tassertEquals(\"Wrong isParameterizedType\", false, typeBinding2.isParameterizedType());", "+\t\tassertEquals(\"Wrong isPrimitive\", false, typeBinding2.isPrimitive());", "+\t\tassertEquals(\"Wrong isRawType\", false, typeBinding2.isRawType());", "+\t\tassertEquals(\"Wrong isTopLevel\", true, typeBinding2.isTopLevel());", "+\t\tassertEquals(\"Wrong isUpperbound\", false, typeBinding2.isUpperbound());", "+\t\tassertEquals(\"Wrong isTypeVariable\", false, typeBinding2.isTypeVariable());", "+\t\tassertEquals(\"Wrong isWildcardType\", false, typeBinding2.isWildcardType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c9f19fb29a121e05607a30f8dc7a78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testGetParameterTypes()", "signatureAfterChange": " public void testGetParameterTypes()", "diff": ["-\tassertTrue(\"Signature#getParameterTypes is not correct1\", types.length == 3);", "-\tassertTrue(\"Signature#getParameterTypes is not correct2\", types[1].equals(\"QObject;\"));", "+\tassertEquals(\"Signature#getParameterTypes is not correct1\", 3, types.length);", "+\tassertEquals(\"Signature#getParameterTypes is not correct2\", \"QObject;\", types[1]);", "-\t// tests with 1.5-specific elements", "-\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "-\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "-\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "-\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "-\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");", "-//\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist<Qstring;>;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "-//\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "-//\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "-//\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "-//\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");", "+\t// primitive types", "+\tmethodSig = \"(BCDFIJSVZ)V\";", "+\tassertEquals(\"Signature#getParameterTypes 4\", 9,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"B\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"C\",", "+\t\t\tSignature.getParameterTypes(methodSig)[1]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"D\",", "+\t\t\tSignature.getParameterTypes(methodSig)[2]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"F\",", "+\t\t\tSignature.getParameterTypes(methodSig)[3]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"I\",", "+\t\t\tSignature.getParameterTypes(methodSig)[4]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"J\",", "+\t\t\tSignature.getParameterTypes(methodSig)[5]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"S\",", "+\t\t\tSignature.getParameterTypes(methodSig)[6]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"V\",", "+\t\t\tSignature.getParameterTypes(methodSig)[7]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"Z\",", "+\t\t\tSignature.getParameterTypes(methodSig)[8]);", "+", "+\t// array types", "+\tmethodSig = \"([I[[J[[[B[Qstring;[Tv;[Lstring;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 5\", 6,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[I\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[[J\",", "+\t\t\tSignature.getParameterTypes(methodSig)[1]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[[[B\",", "+\t\t\tSignature.getParameterTypes(methodSig)[2]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[Qstring;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[3]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[Tv;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[4]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[Lstring;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[5]);", "+\t", "+\t// resolved types", "+\tmethodSig = \"(La;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tmethodSig = \"(La<TE;>;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La<TE;>;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tmethodSig = \"(La/b/c<TE;>.d<TF;>;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La/b/c<TE;>.d<TF;>;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+"]}], "num": 21236}
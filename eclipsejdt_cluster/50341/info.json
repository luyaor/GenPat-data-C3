{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c13cff81cfc8e6572db9db315031c7f8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0048728121a35a5e0098979c89d5489", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "de08ae3ac42ace8070739ebb7715adc6c4ed1304", "commitAfterChange": "a74cc2e7acd1e0aec09bded5c981fd784a55b04c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  SourceMapper createSourceMapper(IPath sourcePath, IPath rootPath)", "signatureAfterChange": "  SourceMapper createSourceMapper(IPath sourcePath, IPath rootPath) throws JavaModelException", "diff": ["-SourceMapper createSourceMapper(IPath sourcePath, IPath rootPath) {", "+SourceMapper createSourceMapper(IPath sourcePath, IPath rootPath) throws JavaModelException {", "+\tIClasspathEntry entry = ((JavaProject) getParent()).getClasspathEntryFor(getPath());", "+\tString encoding = (entry== null) ? null : ((ClasspathEntry) entry).getSourceAttachmentEncoding();", "-\t\tgetJavaProject().getOptions(true)); // cannot use workspace options if external jar is 1.5 jar and workspace options are 1.4 options", "+\t\tgetJavaProject().getOptions(true),// cannot use workspace options if external jar is 1.5 jar and workspace options are 1.4 options", "+\t\tencoding);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b9325b2d853963b9eb773c0ba014e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "commitAfterChange": "c611850252ecccb24f660547467e0d555dd4fb70", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveType(Type type)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveType(Type type)", "diff": ["+\t\t\t\t\tboolean isVarargs = typeReference.isVarargs();", "-\t\t\t\t\t\treturn getTypeBinding(arrayBinding);", "-\t\t\t\t\treturn getTypeBinding(this.scope.createArrayType(arrayBinding.leafComponentType, dimensions, getTypeAnnotations(dimensions, arrayBinding)));", "+\t\t\t\t\t\treturn getTypeBinding(arrayBinding); // reuse.", "+\t\t\t\t\treturn getTypeBinding(this.scope.createArrayType(arrayBinding.leafComponentType, dimensions, getTypeAnnotations(dimensions, arrayBinding, isVarargs)));", "+\t\t\t\t\tboolean isVarargs = node instanceof TypeReference && ((TypeReference) node).isVarargs();", "-\t\t\t\t\t\treturn getTypeBinding(arrayBinding);", "-\t\t\t\t\treturn getTypeBinding(this.scope.createArrayType(arrayBinding.leafComponentType, dimensions, getTypeAnnotations(dimensions, arrayBinding)));", "+\t\t\t\t\t\treturn getTypeBinding(arrayBinding); // reuse", "+\t\t\t\t\treturn getTypeBinding(this.scope.createArrayType(arrayBinding.leafComponentType, dimensions, getTypeAnnotations(dimensions, arrayBinding, isVarargs)));"]}], "num": 50341}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "014724eabfcc8f24514509fb485e16b0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061149f8e96faecaecff2c0f138fc12a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testConstructorDeclarationBug77093() throws CoreException", "signatureAfterChange": " \tpublic void testBug77093constructor() throws CoreException", "diff": ["-\tpublic void testConstructorDeclarationBug77093() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b77093/X.java\").getType(\"X\");", "-\t\tIMethod method = type.getMethod(\"X\", new String[] {\"[[QZ;\"});", "-\t\tsearch(method, DECLARATIONS, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b77093/X.java b77093.X(Z[][]) [X] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t */", "+\tpublic void testBug77093constructor() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b77093/X.java\",", "+\t\t\t\t\"package b77093;\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tclass Z {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tZ[][] z_arrays;\\n\" + ", "+\t\t\t\t\"\tX() {\\n\" + ", "+\t\t\t\t\"\t\tthis(new Z[10][]);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tX(Z[][] arrays) {\\n\" + ", "+\t\t\t\t\"\t\tz_arrays = arrays;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tprivate void foo(Z[] args) {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\t\"\t\tfor (int i=0; i<z_arrays.length; i++)\\n\" + ", "+\t\t\t\t\"\t\t\tfoo(z_arrays[i]);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\");", "+\t\t\tIType type = workingCopy.getType(\"X\");", "+\t\t\tIMethod method = type.getMethod(\"X\", new String[] {\"[[QZ;\"});", "+\t\t\t// Search for constructor declarations and references", "+\t\t\tsearch(method, ALL_OCCURRENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b77093/X.java b77093.X() [this(new Z[10][])] EXACT_MATCH\\n\"+", "+\t\t\t\t\"src/b77093/X.java b77093.X(Z[][]) [X] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e0b4481a230d992caa54224c63b3f44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c79bfbeb67e4687c48de7885eb121ce1ea14c01f", "commitAfterChange": "ff61aa704b87289ea0c126beac8453107bd32bdf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void testBug41018() throws CoreException", "signatureAfterChange": " \tpublic void testBug41018() throws CoreException", "diff": ["-\t\ttry {", "-\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b41018/A.java\",", "-\t\t\t\t\"package b41018;\\n\" +", "-\t\t\t\t\"public class A {\\n\" + ", "-\t\t\t\t\"\tprotected void anotherMethod() {\\n\" + ", "-\t\t\t\t\"\t\tmethodA(null);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tprivate Object methodA(ClassB.InnerInterface arg3) {\\n\" + ", "-\t\t\t\t\"\t\treturn null;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"class ClassB implements InterfaceB {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"interface InterfaceB {\\n\" + ", "-\t\t\t\t\"\tinterface InnerInterface {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"", "-\t\t\t\t);", "-\t\t\tIType type = workingCopies[0].getType(\"A\");", "-\t\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "-\t\t\tsearch(method, REFERENCES);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\"", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b41018/A.java\",", "+\t\t\t\"package b41018;\\n\" +", "+\t\t\t\"public class A {\\n\" + ", "+\t\t\t\"\tprotected void anotherMethod() {\\n\" + ", "+\t\t\t\"\t\tmethodA(null);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tprivate Object methodA(ClassB.InnerInterface arg3) {\\n\" + ", "+\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class ClassB implements InterfaceB {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"interface InterfaceB {\\n\" + ", "+\t\t\t\"\tinterface InnerInterface {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"", "-\t\t}", "-\t\tfinally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "+\t\tsearch(method, REFERENCES);", "+\t\tassertSearchResults(", "+\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123e5319d8cbe8ce5b4d194622c56244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testMethodReferenceBug70827() throws CoreException", "signatureAfterChange": " \tpublic void testBug70827() throws CoreException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug70827() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b70827\", \"A.java\").getType(\"A\");", "-\t\tIMethod method = type.getMethod(\"privateMethod\", new String[] {});", "-\t\tsearch(method, REFERENCES, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(\"\", resultCollector);", "-\t}", "+\t */", "+\tpublic void testBug70827() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b70827/A.java\",", "+\t\t\t\t\"package b70827;\\n\" + ", "+\t\t\t\t\"class A {\\n\" + ", "+\t\t\t\t\"\tprivate void privateMethod() {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class Second extends A {\\n\" + ", "+\t\t\t\t\"\tvoid call() {\\n\" + ", "+\t\t\t\t\"\t\tint i= privateMethod();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tint privateMethod() {\\n\" + ", "+\t\t\t\t\"\t\treturn 1;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t\t);", "+\t\t\tIType type = workingCopy.getType(\"A\");", "+\t\t\tIMethod method = type.getMethod(\"privateMethod\", new String[] {});", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c14d37bde72079d56422e4a078827d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void testMethodReferenceBug74776() throws CoreException", "signatureAfterChange": " \tpublic void testBug71279() throws CoreException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug74776() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b74776\", \"A.java\").getType(\"A\");", "-\t\tIMethod method = type.getMethod(\"foo\", new String[] { \"QRegion;\" });", "-\t\tsearch(method, REFERENCES, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(\"\", resultCollector);", "-\t}", "+\t */", "+\tpublic void testBug71279() throws CoreException {", "+\t\tJavaSearchResultCollector result = new JavaSearchResultCollector() {", "+\t\t    public void beginReporting() {", "+\t\t        results.append(\"Starting search...\");", "+\t        }", "+\t\t    public void endReporting() {", "+\t\t        results.append(\"\\nDone searching.\");", "+\t        }", "+\t\t};", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b71279/AA.java\",", "+\t\t\t\t\"package b71279;\\n\" + ", "+\t\t\t\t\"public class AA {\\n\" + ", "+\t\t\t\t\"\tUnknown ref;\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t\t);", "+\t\t\tnew SearchEngine().searchDeclarationsOfReferencedTypes(workingCopy, result, null);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"Starting search...\\n\" + ", "+\t\t\t\t\"Done searching.\",", "+\t\t\t\tresult);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "501048af9e958429d7a51641928ecf76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 189, "signatureBeforeChange": " \tpublic void testAutoBoxing01() throws CoreException", "signatureAfterChange": " \tpublic void testAutoBoxing01() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearch15/src/p/X.java\",", "-\t\t\t\t\"package p;\\n\" + ", "-\t\t\t\t\"public class Test {\\n\" + ", "-\t\t\t\t\"\tvoid foo(int x) {}\\n\" + ", "-\t\t\t\t\"\tvoid bar() {\\n\" + ", "-\t\t\t\t\"\t\tfoo(new Integer(0));\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"", "-\t\t\t\t);", "-\t\t\tworkingCopy.commitWorkingCopy(true, null);\t// need to commit to index file", "-\t\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(new ICompilationUnit[] { workingCopy });", "-\t\t\tIMethod method = workingCopy.getType(\"Test\").getMethod(\"foo\", new String[] { \"I\" });", "-\t\t\tsearch(method, REFERENCES, scope, this.resultCollector);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/p/X.java void p.Test.bar() [foo(new Integer(0))]\",", "-\t\t\t\tthis.resultCollector);", "-\t\t} catch (JavaModelException jme) {", "-\t\t\tjme.printStackTrace();", "-\t\t}", "-\t\tfinally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tworkingCopies = new ICompilationUnit[1];", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearch15/src/p/X.java\",", "+\t\t\t\"package p;\\n\" + ", "+\t\t\t\"public class Test {\\n\" + ", "+\t\t\t\"\tvoid foo(int x) {}\\n\" + ", "+\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\"\t\tfoo(new Integer(0));\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t\t);", "+\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(workingCopies);", "+\t\tIMethod method = workingCopies[0].getType(\"Test\").getMethod(\"foo\", new String[] { \"I\" });", "+\t\tsearch(method, REFERENCES, scope);", "+\t\tassertSearchResults(", "+\t\t\t\"src/p/X.java void p.Test.bar() [foo(new Integer(0))]\",", "+\t\t\tresultCollector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69bb7aa0d2360a7c494c4bd33694b29d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testBug77388() throws CoreException", "signatureAfterChange": " \tpublic void testBug77388() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b77388/Test.java\",", "-\t\t\t\t\"package b77388;\\n\" + ", "-\t\t\t\t\"class Test {\\n\" + ", "-\t\t\t\t\"\tTest(int a, int b) {\t}\\n\" + ", "-\t\t\t\t\"\tvoid take(Test mc) { }\\n\" + ", "-\t\t\t\t\"\tvoid run() {\\n\" + ", "-\t\t\t\t\"\t\ttake( new Test(1, 2) ); // space in \\\") )\\\" is in match\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\");", "-\t\t\tIType type = workingCopy.getType(\"Test\");", "-\t\t\tIMethod method = type.getMethod(\"Test\", new String[] {\"I\", \"I\"});", "-\t\t\t// Search for constructor references", "-\t\t\tsearch(method, REFERENCES);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b77388/Test.java void b77388.Test.run() [new Test(1, 2)] EXACT_MATCH\"", "-\t\t\t);", "-\t\t}", "-\t\tfinally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tworkingCopies = new ICompilationUnit[1];", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b77388/Test.java\",", "+\t\t\t\"package b77388;\\n\" + ", "+\t\t\t\"class Test {\\n\" + ", "+\t\t\t\"\tTest(int a, int b) {\t}\\n\" + ", "+\t\t\t\"\tvoid take(Test mc) { }\\n\" + ", "+\t\t\t\"\tvoid run() {\\n\" + ", "+\t\t\t\"\t\ttake( new Test(1, 2) ); // space in \\\") )\\\" is in match\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\");", "+\t\tIType type = workingCopies[0].getType(\"Test\");", "+\t\tIMethod method = type.getMethod(\"Test\", new String[] {\"I\", \"I\"});", "+\t\t// Search for constructor references", "+\t\tsearch(method, REFERENCES);", "+\t\tassertSearchResults(", "+\t\t\t\"src/b77388/Test.java void b77388.Test.run() [new Test(1, 2)] EXACT_MATCH\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b07c901db3646a88dbaf7ac1979fa3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testMethodReferenceBug41018() throws CoreException", "signatureAfterChange": " \tpublic void testBug41018() throws CoreException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug41018() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b41018\", \"A.java\").getType(\"A\");", "-\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "-\t//\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\t\tsearch(", "-\t\t\tmethod, ", "-\t\t\tREFERENCES, ", "-\t\t\tgetJavaSearchScopeBugs(), ", "-\t\t\tthis.resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\",", "-\t\t\tthis.resultCollector);", "-\t}", "+\tpublic void testBug41018() throws CoreException {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b41018/A.java\",", "+\t\t\t\t\"package b41018;\\n\" +", "+\t\t\t\t\"public class A {\\n\" + ", "+\t\t\t\t\"\tprotected void anotherMethod() {\\n\" + ", "+\t\t\t\t\"\t\tmethodA(null);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tprivate Object methodA(ClassB.InnerInterface arg3) {\\n\" + ", "+\t\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class ClassB implements InterfaceB {\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"interface InterfaceB {\\n\" + ", "+\t\t\t\t\"\tinterface InnerInterface {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t\t);", "+\t\t\tIType type = workingCopy.getType(\"A\");", "+\t\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a35586abfa95431d6c1bb06dabfc500a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testBug70827() throws CoreException", "signatureAfterChange": " \tpublic void testBug70827() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b70827/A.java\",", "-\t\t\t\t\"package b70827;\\n\" + ", "-\t\t\t\t\"class A {\\n\" + ", "-\t\t\t\t\"\tprivate void privateMethod() {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"class Second extends A {\\n\" + ", "-\t\t\t\t\"\tvoid call() {\\n\" + ", "-\t\t\t\t\"\t\tint i= privateMethod();\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tint privateMethod() {\\n\" + ", "-\t\t\t\t\"\t\treturn 1;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"", "-\t\t\t\t);", "-\t\t\tIType type = workingCopy.getType(\"A\");", "-\t\t\tIMethod method = type.getMethod(\"privateMethod\", new String[] {});", "-\t\t\tsearch(method, REFERENCES);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"\"", "+\t\tworkingCopies = new ICompilationUnit[1];", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b70827/A.java\",", "+\t\t\t\"package b70827;\\n\" + ", "+\t\t\t\"class A {\\n\" + ", "+\t\t\t\"\tprivate void privateMethod() {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class Second extends A {\\n\" + ", "+\t\t\t\"\tvoid call() {\\n\" + ", "+\t\t\t\"\t\tint i= privateMethod();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tint privateMethod() {\\n\" + ", "+\t\t\t\"\t\treturn 1;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"", "-\t\t}", "-\t\tfinally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\tIMethod method = type.getMethod(\"privateMethod\", new String[] {});", "+\t\tsearch(method, REFERENCES);", "+\t\tassertSearchResults(", "+\t\t\t\"\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d680f244ea7d1a54d3dc0fa63d2d4441", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testMethodReferenceBug77093() throws CoreException", "signatureAfterChange": " \tpublic void testBug73112a() throws CoreException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug77093() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b77093/X.java\").getType(\"X\");", "-\t\tIMethod method = type.getMethod(\"foo\", new String[] {\"[QZ;\"});", "-\t\tsearch(method, REFERENCES, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b77093/X.java void b77093.X.bar() [foo(z_arrays[i])] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t */", "+\tpublic void testBug73112a() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b73112/A.java\",", "+\t\t\t\t\"package b73112;\\n\" + ", "+\t\t\t\t\"public class A {\\n\" + ", "+\t\t\t\t\"    int fieldA73112a = 1, fieldA73112b = new Integer(2).intValue(), fieldA73112c = fieldA73112a + fieldA73112b;\\n\" + ", "+\t\t\t\t\"    int fieldA73112d;\\n\" + ", "+\t\t\t\t\"    \\n\" + ", "+\t\t\t\t\"    public void method(){}\\n\" + ", "+\t\t\t\t\"}\\n\");", "+\t\t\t// search field references to first multiple field", "+\t\t\tsearch(", "+\t\t\t\t\"fieldA73112*\",", "+\t\t\t\tFIELD,", "+\t\t\t\tALL_OCCURRENCES,", "+\t\t\t\tgetJavaSearchScopeBugs(),", "+\t\t\t\tthis.resultCollector);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112a [fieldA73112a] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112b [fieldA73112b] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112c [fieldA73112c] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112c [fieldA73112a] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112c [fieldA73112b] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112d [fieldA73112d] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbd82fc0c9265b01563072e8cbff471b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testConstructorReferenceBug77388() throws CoreException", "signatureAfterChange": " \tpublic void testBug77388() throws CoreException", "diff": ["-\t */", "-\tpublic void testConstructorReferenceBug77388() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b77388/Test.java\").getType(\"Test\");", "-\t\tIMethod method = type.getMethod(\"Test\", new String[] {\"I\", \"I\"});", "-\t\tsearch(method, REFERENCES, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b77388/Test.java void b77388.Test.run() [new Test(1, 2)] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t */", "+\tpublic void testBug77388() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b77388/Test.java\",", "+\t\t\t\t\"package b77388;\\n\" + ", "+\t\t\t\t\"class Test {\\n\" + ", "+\t\t\t\t\"\tTest(int a, int b) {\t}\\n\" + ", "+\t\t\t\t\"\tvoid take(Test mc) { }\\n\" + ", "+\t\t\t\t\"\tvoid run() {\\n\" + ", "+\t\t\t\t\"\t\ttake( new Test(1, 2) ); // space in \\\") )\\\" is in match\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\");", "+\t\t\tIType type = workingCopy.getType(\"Test\");", "+\t\t\tIMethod method = type.getMethod(\"Test\", new String[] {\"I\", \"I\"});", "+\t\t\t// Search for constructor references", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b77388/Test.java void b77388.Test.run() [new Test(1, 2)] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}], "num": 38276}
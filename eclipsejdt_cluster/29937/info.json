{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eec204ae2e90487c841f217c313cbd1b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87630dede8ce2809ddf7719dda913eeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void updateFromParserState()", "signatureAfterChange": " public void updateFromParserState()", "diff": ["+\t\t} else if (parser.listTypeParameterLength > 0) {", "+\t\t\tint length = parser.listTypeParameterLength;", "+\t\t\tint genericsPtr = parser.genericsPtr;", "+\t\t\tboolean canConsume = genericsPtr + 1 >= length && parser.astPtr > -1;", "+\t\t\tif(canConsume) {", "+\t\t\t\tif (!(parser.astStack[parser.astPtr] instanceof TypeDeclaration)) {", "+\t\t\t\t\tcanConsume = false;", "+\t\t\t\t}", "+\t\t\t\twhile(genericsPtr + 1 > length && !(parser.genericsStack[genericsPtr] instanceof TypeParameter)) {", "+\t\t\t\t\tgenericsPtr--;", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif(!(parser.genericsStack[genericsPtr - i] instanceof TypeParameter)) {", "+\t\t\t\t\t\tcanConsume = false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif(canConsume) {", "+\t\t\t\tTypeDeclaration typeDecl = (TypeDeclaration)parser.astStack[parser.astPtr];", "+\t\t\t\tSystem.arraycopy(parser.genericsStack, genericsPtr - length + 1, typeDecl.typeParameters = new TypeParameter[length], 0, length);", "+\t\t\t\ttypeDecl.bodyStart = typeDecl.typeParameters[length-1].declarationSourceEnd + 1;", "+\t\t\t\tparser.listTypeParameterLength = 0;", "+\t\t\t\tparser.lastCheckPoint = typeDecl.bodyStart;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf2958a536396f4d429ea0941fb1a5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "2510c8dbf38be0fd8d0b3e1c2fc8a96e80b0f2ee", "commitAfterChange": "e7a6f0c78fa0f5d341ebeb12cbf333c7e2a289ca", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// if I2<T,U> extends I1<T>, then cast from I1<T> to I2<T,U> is unchecked", "+\t\t\t\t\t\t\t\t\tParameterizedTypeBinding paramCastType = (ParameterizedTypeBinding) castType;", "+\t\t\t\t\t\t\t\t\tParameterizedTypeBinding paramMatch = (ParameterizedTypeBinding) match;", "+\t\t\t\t\t\t\t\t\t// easy case if less parameters on match", "+\t\t\t\t\t\t\t\t\tTypeBinding[] castArguments = paramCastType.arguments;", "+\t\t\t\t\t\t\t\t\tint length = castArguments.length;", "+\t\t\t\t\t\t\t\t\tif (length > paramMatch.arguments.length) {", "+\t\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t\t} else if ((paramCastType.tagBits & (TagBits.HasDirectWildcard|TagBits.HasTypeVariable)) != 0) {", "+\t\t\t\t\t\t\t\t\t\t// verify alternate cast type, substituting different type arguments", "+\t\t\t\t\t\t\t\t\t\tLookupEnvironment environment = scope.environment();", "+\t\t\t\t\t\t\t\t\t\tnextAlternateArgument: for (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\t\tswitch (castArguments[i].kind()) {", "+\t\t\t\t\t\t\t\t\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\t\t\t\t\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t\t\t\t\t\t\t\tbreak; // check substituting with other", "+\t\t\t\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue nextAlternateArgument; // no alternative possible", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] alternateArguments;", "+\t\t\t\t\t\t\t\t\t\t\t// need to clone for each iteration to avoid env paramtype cache interference", "+\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(paramCastType.arguments, 0, alternateArguments = new TypeBinding[length], 0, length);", "+\t\t\t\t\t\t\t\t\t\t\talternateArguments[i] = scope.getJavaLangObject();", "+\t\t\t\t\t\t\t\t\t\t\tParameterizedTypeBinding alternateCastType = environment.createParameterizedType((ReferenceBinding)genericCastType, alternateArguments, castType.enclosingType());", "+\t\t\t\t\t\t\t\t\t\t\tif (alternateCastType.findSuperTypeOriginatingFrom(expressionType) == match) {", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}"]}], "num": 29937}
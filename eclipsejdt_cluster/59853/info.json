{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fdd4981b1f7f5b01027c256b9135bf12", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03438ce0720753a1c56f8e915764285a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java", "commitBeforeChange": "e15598faeaefd4a21bd9644d10bdb872e013a3cb", "commitAfterChange": "2b1f97cd9b63f274ba3e505dd8fb0edeaae91029", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void testMoveTypeToAnotherWorkingCopy() throws CoreException", "signatureAfterChange": " public void testMoveTypeToAnotherWorkingCopy() throws CoreException", "diff": ["-\t\tassertEquals(\"Invalid content for A\", ", "+\t\tassertSourceEquals(\"Invalid content for A\", ", "-\t\tassertEquals(\"Invalid content for B\", ", "+\t\tassertSourceEquals(\"Invalid content for B\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b2ca5da206431f8d785c15b423eaf42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "b39f3a5a9fadba74f50d9dc16813d561f779e994", "commitAfterChange": "efd3b1f31e7f6af67fb63e84ece49ae3c1341055", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, ITypeAnnotationWalker walker)", "signatureAfterChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, ITypeAnnotationWalker walker) {", "+ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker) {", "-\tif (walker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13b538ded209fea062ce72779a087e5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testBug3270a() throws JavaModelException", "signatureAfterChange": " public void testBug3270a() throws JavaModelException", "diff": ["-\t\t\"InterruptedException[TYPE_REF]{InterruptedException, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DICUNREEET+\"}\\n\" + ", "-\t\t\"IllegalMonitorStateException[TYPE_REF]{IllegalMonitorStateException, java.lang, Ljava.lang.IllegalMonitorStateException;, null, null, \"+this.positions+R_DICUNRE+\"}\"", "+\t\t\"InterruptedException[TYPE_REF]{InterruptedException, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DRICUNREEET+\"}\\n\" + ", "+\t\t\"IllegalMonitorStateException[TYPE_REF]{IllegalMonitorStateException, java.lang, Ljava.lang.IllegalMonitorStateException;, null, null, \"+this.positions+R_DRICUNRE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2700390f2fa81298024e3b5b5befda4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope)", "signatureAfterChange": " \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope)", "diff": ["-\t\t\t\t\t\tif(binding.bindingType() == BindingIds.TYPE) {", "+\t\t\t\t\t\tif(binding.bindingType() == Binding.TYPE) {", "-\t\t\t\t\t\tif (binding.bindingType() == BindingIds.FIELD) {", "+\t\t\t\t\t\tif (binding.bindingType() == Binding.FIELD) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f15b19272d164c30960f056b0a13e5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t&& (((NameReference) receiver).bits & BindingIds.TYPE) != 0) {", "+\t\t\t\t&& (((NameReference) receiver).bits & Binding.TYPE) != 0) {", "-\t\t\t\t\t&& (((NameReference) receiver).bits & BindingIds.TYPE) != 0))) {", "+\t\t\t\t\t&& (((NameReference) receiver).bits & Binding.TYPE) != 0))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36d4f013ed954ef3fe869fb071a96a00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 248, "signatureBeforeChange": " public void test0244() throws JavaModelException", "signatureAfterChange": " public void test0244() throws JavaModelException", "diff": ["-\t\t\t\"foo[METHOD_DECLARATION]{public Object foo(Object t), Lgenerics.ZAGenericType;, (Ljava.lang.Object;)Ljava.lang.Object;, foo, (t), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"foo[METHOD_DECLARATION]{public Object foo(ZAGenericType var), Lgenerics.ZAGenericType;, (Lgenerics.ZAGenericType;)Ljava.lang.Object;, foo, (var), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"foo[METHOD_DECLARATION]{public Object foo(Object t), Lgenerics.ZAGenericType;, (Ljava.lang.Object;)Ljava.lang.Object;, foo, (t), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_METHOD_OVERIDE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"foo[METHOD_DECLARATION]{public Object foo(ZAGenericType var), Lgenerics.ZAGenericType;, (Lgenerics.ZAGenericType;)Ljava.lang.Object;, foo, (var), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_METHOD_OVERIDE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d17f7c30f79195b8e8bb28cad0b0039", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "949f1bbe84622faa807866412d26a5bdb0f64fe4", "commitAfterChange": "ecd2d9d0e14c2688e43c7c452930452fe7a77cc0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void analyseCode(ClassScope classScope1)", "signatureAfterChange": " \tpublic void analyseCode(ClassScope classScope1)", "diff": ["-\t\t\t\t\t\t\tstaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t\t\t\tstaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);", "-\t\t\t\t\t\t\tnonStaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t\t\t\tnonStaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a7afef86f5f37036779db82f8a3a138", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "b39f3a5a9fadba74f50d9dc16813d561f779e994", "commitAfterChange": "efd3b1f31e7f6af67fb63e84ece49ae3c1341055", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  private ITypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations)", "signatureAfterChange": "  private TypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations)", "diff": ["-private ITypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations) {", "+private TypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations) {", "-\t\treturn ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;", "+\t\treturn TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53d2210c054e4bf8d19ebcceb627df69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tFieldBinding getLastField(Expression someExpression)", "signatureAfterChange": " \tFieldBinding getLastField(Expression someExpression)", "diff": ["-\t        if ((someExpression.bits & RestrictiveFlagMASK) == BindingIds.FIELD) {", "+\t        if ((someExpression.bits & RestrictiveFlagMASK) == Binding.FIELD) {", "-\t        if (qName.otherBindings == null && ((someExpression.bits & RestrictiveFlagMASK) == BindingIds.FIELD)) {", "+\t        if (qName.otherBindings == null && ((someExpression.bits & RestrictiveFlagMASK) == Binding.FIELD)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "570833aa3423310f6d99cee7a70137b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "c986b0f978be08ca5c6279c4e65ad1a7f4c62b60", "commitAfterChange": "be7acf5c57ef3c4a15433f3f4f0191da4eed3774", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\t\tcodeStream.generateImplicitConversion(postIncrement.assignmentImplicitConversion);", "+\t\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);", "-\t\tcodeStream.generateImplicitConversion(postIncrement.assignmentImplicitConversion);", "+\t\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58aca9fe67d3be8dab837453d74b9aaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t \tprotected Map<ASTNode, List<Annotation>> getASTNodesWithAnnotations()", "signatureAfterChange": " \t \tprotected Map<ASTNode, List<Annotation>> getASTNodesWithAnnotations()", "diff": ["-        for( int i=0, len=_astUnits.length; i<len; i++ )", "-        \t_astUnits[i].accept( visitor );", "+        for( int i=0, len=_astRoots.length; i<len; i++ )", "+        \t_astRoots[i].accept( visitor );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "590a2ce33bc766746a117480585b0d05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e7d0e101e34b7b6ee4b85e7209dafee08091c658", "commitAfterChange": "834d43c8a6ac5f159a487c1c2a9a5b14b35b4864", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 16, "signatureBeforeChange": " public IIndex peekAtIndex(IPath path)", "signatureAfterChange": " public Index peekAtIndex(IPath path)", "diff": ["-public IIndex peekAtIndex(IPath path) {", "-\treturn (IIndex) indexes.get(path);", "+public Index peekAtIndex(IPath path) {", "+\treturn (Index) indexes.get(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e0f2826af0d8c811d69538963f683f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "5d2e6e466ee272d62f273fff98dd2423f77bd2f3", "commitAfterChange": "e702e6a53e23b4f475e9578e987e56b628fcf8d7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local,  \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local,  \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, reference);", "+\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "-\t\t\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, reference);", "+\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f745aaa1853c5ca8a41fc98d420d130", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "ff4953718f4a4fa66bb0922d1821b22a0e2fdd84", "commitAfterChange": "b48f366c7cd622655a48ea734bdcd0016d20ec8b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\tprivate void append(IField field) throws JavaModelException", "signatureAfterChange": " \t\tprivate void append(IField field) throws JavaModelException", "diff": ["-\t\t\tresults.append(\".\");", "-\t\t\tresults.append(field.getElementName());", "+\t\t\tline.append(\".\");", "+\t\t\tline.append(field.getElementName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6022639b52a5c762ff8c794c1ee8c6d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "2480ec2a725b4a2dc78d69d653464b56715fbac8", "commitAfterChange": "046b7e91db887d0087d68280c71a1c85744c622c", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic IJavaModelStatus verify()", "signatureAfterChange": "  \tpublic IJavaModelStatus verify()", "diff": ["-\t\t\tif (entries == ReuseClasspath){", "+\t\t\tif (entries == REUSE_ENTRIES){", "-\t\t\tif (outputLocation == ReuseOutputLocation){", "+\t\t\tif (outputLocation == REUSE_PATH){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a521e49e1cf59779eae9662d89bb8bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "12e6c9c820ceba19e41f45f62bc98ca6c5aaa307", "commitAfterChange": "82730fa91cab84d990d4e3898f46564d654b224e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor, char[] queryKey, char[] category) throws IOException", "signatureAfterChange": " protected void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor, char[] queryKey, char[] category) throws IOException", "diff": ["-\t\tIEntryResult[] entries = input.queryEntries(pattern, SearchPattern.R_PREFIX_MATCH);", "+\t\tEntryResult[] entries = input.queryEntries(pattern, SearchPattern.R_PREFIX_MATCH);", "-\t\t\tIEntryResult entry = entries[i];", "+\t\t\tEntryResult entry = entries[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dd8baf3b09d0ff2952426194650f5ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "c986b0f978be08ca5c6279c4e65ad1a7f4c62b60", "commitAfterChange": "be7acf5c57ef3c4a15433f3f4f0191da4eed3774", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\t\tcodeStream.generateImplicitConversion(postIncrement.assignmentImplicitConversion);", "+\t\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);", "-\t\tcodeStream.generateImplicitConversion(postIncrement.assignmentImplicitConversion);", "+\t\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fc7d2637e7a72716a3ce78e6c55662b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "b39f3a5a9fadba74f50d9dc16813d561f779e994", "commitAfterChange": "efd3b1f31e7f6af67fb63e84ece49ae3c1341055", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, ITypeAnnotationWalker walker)", "signatureAfterChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-\t\tchar[][][] missingTypeNames, ITypeAnnotationWalker walker) ", "+\t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker) ", "-\tif (dimension > 0 && walker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\tif (dimension > 0 && walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7144350643957fb8ceba04729030df9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RunJavaSearchGenericTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-\tAbstractJavaSearchTests.TEST_SUITES = new ArrayList(Arrays.asList(getJavaSearchTestClasses()));", "-\tList allClasses = new ArrayList(AbstractJavaSearchTests.TEST_SUITES);", "+\tAbstractJavaSearchTests.JAVA_SEARCH_SUITES = new ArrayList(Arrays.asList(getJavaSearchTestClasses()));", "+\tList allClasses = new ArrayList(AbstractJavaSearchTests.JAVA_SEARCH_SUITES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a1a5fa79d3a51be979e4056f884504", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "   public void testCompletionMethodDeclaration4() throws JavaModelException", "signatureAfterChange": "   public void testCompletionMethodDeclaration4() throws JavaModelException", "diff": ["-\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\"+", "-\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a, Object b), LCompletionSuperInterface;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+\"}\",", "+\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_METHOD_OVERIDE + R_NON_RESTRICTED)+\"}\\n\"+", "+\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a, Object b), LCompletionSuperInterface;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_METHOD_OVERIDE+ R_NON_RESTRICTED)+\"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88a308473806cd41c2d14ac1a8c91fc2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " public void testCompletionAbstractMethodRelevance2() throws JavaModelException", "signatureAfterChange": " public void testCompletionAbstractMethodRelevance2() throws JavaModelException", "diff": ["-\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\" +", "-\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a, Object b), LCompletionSuperInterface;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+\"}\",", "+\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_METHOD_OVERIDE + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a, Object b), LCompletionSuperInterface;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_METHOD_OVERIDE+ R_NON_RESTRICTED)+\"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8be9d71e04deb4d19bfd5f90788f5eed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "c986b0f978be08ca5c6279c4e65ad1a7f4c62b60", "commitAfterChange": "be7acf5c57ef3c4a15433f3f4f0191da4eed3774", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " \t \tpublic void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\t\t\t\tcodeStream.generateImplicitConversion(postIncrement.assignmentImplicitConversion);", "+\t\t\t\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);", "-\t\t\t\t\tcodeStream.generateImplicitConversion(postIncrement.assignmentImplicitConversion);", "+\t\t\t\t\tcodeStream.generateImplicitConversion(postIncrement.preAssignImplicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c5aa5898bea5ae1e1f0950529cdf1b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/pattern/InternalSearchPattern.java", "commitBeforeChange": "12e6c9c820ceba19e41f45f62bc98ca6c5aaa307", "commitAfterChange": "82730fa91cab84d990d4e3898f46564d654b224e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprotected void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor, char[] queryKey, char[] category) throws IOException", "signatureAfterChange": " \t \tprotected void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor, char[] queryKey, char[] category) throws IOException", "diff": ["-\t\tIEntryResult[] entries = input.queryEntries(pattern, SearchPattern.R_PREFIX_MATCH);", "+\t\tEntryResult[] entries = input.queryEntries(pattern, SearchPattern.R_PREFIX_MATCH);", "-\t\t\tIEntryResult entry = entries[iMatch];", "+\t\t\tEntryResult entry = entries[iMatch];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92f3b52d67dbf66d4058effef4367bd1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 220, "methodNumberAfterChange": 220, "signatureBeforeChange": " public void test0216() throws JavaModelException", "signatureAfterChange": " public void test0216() throws JavaModelException", "diff": ["-\t\t\t\t\"foo[METHOD_DECLARATION]{public void foo(test0216.p.ParamClass p1), Ltest0216.SuperClass<TZ;>;, (Ltest0216.p.ParamClass;)V, foo, (p1), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"foo[METHOD_DECLARATION]{public void foo(test0216.q.ParamClass p2), Ltest0216.SuperClass<TZ;>;, (Ltest0216.q.ParamClass;)V, foo, (p2), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\t\"foo[METHOD_DECLARATION]{public void foo(test0216.p.ParamClass p1), Ltest0216.SuperClass<TZ;>;, (Ltest0216.p.ParamClass;)V, foo, (p1), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_METHOD_OVERIDE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"foo[METHOD_DECLARATION]{public void foo(test0216.q.ParamClass p2), Ltest0216.SuperClass<TZ;>;, (Ltest0216.q.ParamClass;)V, foo, (p2), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_METHOD_OVERIDE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9960fee208900cea691b61ef2d5edec1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tprotected AST getCurrentDietAST()", "signatureAfterChange": " \tprotected AST getCurrentDietAST()", "diff": ["-\t\t\tif( _astUnits == null )", "+\t\t\tif( _astRoots == null )", "-\t\t\treturn _astUnits[0].getAST();", "+\t\t\treturn _astRoots[0].getAST();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e2cac4317a4f32fd8a4eecc5c9b61c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "b39f3a5a9fadba74f50d9dc16813d561f779e994", "commitAfterChange": "efd3b1f31e7f6af67fb63e84ece49ae3c1341055", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  static Object convertMemberValue(Object binaryValue, LookupEnvironment env, char[][][] missingTypeNames, boolean resolveEnumConstants)", "signatureAfterChange": "  static Object convertMemberValue(Object binaryValue, LookupEnvironment env, char[][][] missingTypeNames, boolean resolveEnumConstants)", "diff": ["-\t\treturn env.getTypeFromSignature(((ClassSignature) binaryValue).getTypeName(), 0, -1, false, null, missingTypeNames, ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "+\t\treturn env.getTypeFromSignature(((ClassSignature) binaryValue).getTypeName(), 0, -1, false, null, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "-\t\tReferenceBinding enumType = (ReferenceBinding) env.getTypeFromSignature(ref.getTypeName(), 0, -1, false, null, missingTypeNames, ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "+\t\tReferenceBinding enumType = (ReferenceBinding) env.getTypeFromSignature(ref.getTypeName(), 0, -1, false, null, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1ab2ffca154281dce217a25474c64f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic static char[] getSignature(Binding binding)", "signatureAfterChange": " \t \tpublic static char[] getSignature(Binding binding)", "diff": ["-\t\t\tcase BindingIds.TYPE:", "+\t\t\tcase Binding.TYPE:", "-\t\t\tcase BindingIds.METHOD:", "+\t\t\tcase Binding.METHOD:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aca56218b54e86b4b7c4a736ec2f9b4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 218, "methodNumberAfterChange": 218, "signatureBeforeChange": " public void test0214() throws JavaModelException", "signatureAfterChange": " public void test0214() throws JavaModelException", "diff": ["-\t\t\t\t\"foo[METHOD_DECLARATION]{public <M extends AClass1> void foo(M p1), Ltest0214.SuperClass<TZ;>;, <M:Ltest0214.AClass1;>(TM;)V, foo, (p1), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\t\"foo[METHOD_DECLARATION]{public <M extends AClass2> void foo(M p2), Ltest0214.SuperClass<TZ;>;, <M:Ltest0214.AClass2;>(TM;)V, foo, (p2), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\t\"foo[METHOD_DECLARATION]{public <M extends AClass1> void foo(M p1), Ltest0214.SuperClass<TZ;>;, <M:Ltest0214.AClass1;>(TM;)V, foo, (p1), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_METHOD_OVERIDE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"foo[METHOD_DECLARATION]{public <M extends AClass2> void foo(M p2), Ltest0214.SuperClass<TZ;>;, <M:Ltest0214.AClass2;>(TM;)V, foo, (p2), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_METHOD_OVERIDE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b03ec72fd0bf9e04d9bd5162b7e26161", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  public void testCompletionMethodDeclaration2() throws JavaModelException", "signatureAfterChange": "  public void testCompletionMethodDeclaration2() throws JavaModelException", "diff": ["-\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a, Object b), LCompletionSuperClass;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\" +", "-\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+\"}\",", "+\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a, Object b), LCompletionSuperClass;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_METHOD_OVERIDE + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_METHOD_OVERIDE+ R_NON_RESTRICTED)+\"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b55337b6a5f67419a18db72b96dbeffb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  public void testCompletionMethodDeclaration() throws JavaModelException", "signatureAfterChange": "  public void testCompletionMethodDeclaration() throws JavaModelException", "diff": ["-\t\t\"element:eqFoo    completion:public int eqFoo(int a, Object b)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:equals    completion:public boolean equals(Object obj)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),", "+\t\t\"element:eqFoo    completion:public int eqFoo(int a, Object b)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_METHOD_OVERIDE + R_NON_RESTRICTED)+\"\\n\" +", "+\t\t\"element:equals    completion:public boolean equals(Object obj)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_METHOD_OVERIDE+ R_NON_RESTRICTED),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcbcad3b9f81cdca6ef4096e3f7bc936", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tprotected List<AbstractTypeDeclaration> searchLocallyForTypeDeclarations()", "signatureAfterChange": " \tprotected List<AbstractTypeDeclaration> searchLocallyForTypeDeclarations()", "diff": ["-\t\tfor( int i=0, len=_astUnits.length; i<len; i++ )", "-        \ttypeDecls.addAll( _astUnits[i].types() );", "+\t\tfor( int i=0, len=_astRoots.length; i<len; i++ )", "+        \ttypeDecls.addAll( _astRoots[i].types() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c61976dc36d825501b75bdeceae0e9f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/StringLiteral.java", "commitBeforeChange": "40a85c2d4c57226c917bc0f991a26ac5a5d8b085", "commitAfterChange": "a256960ed4710f2897d78e274a4eaeebfce80126", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic StringLiteralConcetanation extendsWith(StringLiteral lit)", "signatureAfterChange": " \tpublic StringLiteralConcatenation extendsWith(StringLiteral lit)", "diff": ["-\tpublic StringLiteralConcetanation extendsWith(StringLiteral lit) {", "-\t\treturn new StringLiteralConcetanation(this, lit);", "+\tpublic StringLiteralConcatenation extendsWith(StringLiteral lit) {", "+\t\treturn new StringLiteralConcatenation(this, lit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6a30abdd7308234a7c4ff0427db1b55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "5d2e6e466ee272d62f273fff98dd2423f77bd2f3", "commitAfterChange": "e702e6a53e23b4f475e9578e987e56b628fcf8d7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": " \t public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tExpression reference, int checkType, FlowInfo flowInfo)", "diff": ["-\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, reference);", "+\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "-\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, reference);", "+\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb45c4e361e5ae8cf26eab729333ceba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "949f1bbe84622faa807866412d26a5bdb0f64fe4", "commitAfterChange": "ecd2d9d0e14c2688e43c7c452930452fe7a77cc0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void analyseCode(CompilationUnitScope unitScope)", "signatureAfterChange": " \tpublic void analyseCode(CompilationUnitScope unitScope)", "diff": ["-\t\t\t\t\t\t\tstaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t\t\t\tstaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);", "-\t\t\t\t\t\t\tnonStaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t\t\t\tnonStaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddb86de675d5392717fef9fb6ab0ccad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "90ab26b26139b04c1b21341903f9bda9323cd1a1", "commitAfterChange": "63bda44d804d11c0afa7e8111644ceeb5480e759", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\tcase IProblem.NullParameterToVarargsConstructor :", "-\t\tcase IProblem.NullParameterToVarargsMethod :", "-\t\t\treturn Warning; // TODO (philippe) need this to default to a warning this.options.getSeverity(CompilerOptions.NullParameterToVarargs);", "+\t\tcase IProblem.InexactParameterToVarargsConstructor :", "+\t\tcase IProblem.InexactParameterToVarargsMethod :", "+\t\t\treturn Warning; // TODO (philippe) need this to default to a warning this.options.getSeverity(CompilerOptions.InexactParameterToVarargs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de0561d2a06b09beaea5a700ac394921", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/LRUCache.java", "commitBeforeChange": "0ff40cf9419ba675580163e104091de3b2c53d9a", "commitAfterChange": "afc22404ca214f45a7f8e88b727a46f3daf1f07d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprotected void updateTimestamp (LRUCacheEntry entry)", "signatureAfterChange": " \tprotected void updateTimestamp (LRUCacheEntry entry)", "diff": ["-\t\tentry._fTimestamp = fTimestampCounter++;", "-\t\tif (fEntryQueue != entry) {", "+\t\tentry._fTimestamp = timestampCounter++;", "+\t\tif (entryQueue != entry) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1c55993c314753147a61bbe935ae2ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "40a85c2d4c57226c917bc0f991a26ac5a5d8b085", "commitAfterChange": "a256960ed4710f2897d78e274a4eaeebfce80126", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\t  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": "\t  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["-\t\tif (expression instanceof StringLiteralConcetanation) {", "-\t\t\treturn convert((StringLiteralConcetanation) expression);", "+\t\tif (expression instanceof StringLiteralConcatenation) {", "+\t\t\treturn convert((StringLiteralConcatenation) expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e85bc0870ad8b908f118ac21d4637c6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "2480ec2a725b4a2dc78d69d653464b56715fbac8", "commitAfterChange": "046b7e91db887d0087d68280c71a1c85744c622c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t \tpublic String toString()", "signatureAfterChange": " \t \tpublic String toString()", "diff": ["-\t\tif (this.newRawPath == ReuseClasspath){", "+\t\tif (this.newRawPath == REUSE_ENTRIES){", "-\t\tif (this.newOutputLocation == ReuseOutputLocation){", "+\t\tif (this.newOutputLocation == REUSE_PATH){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8df7673cf388a362afa145be5897783", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  \tprivate void findTypesFromStaticImports(char[] token, Scope scope, ObjectVector typesFound)", "signatureAfterChange": "  \tprivate void findTypesFromStaticImports(char[] token, Scope scope, ObjectVector typesFound)", "diff": ["-\t\t\t\t\t\tif(binding.bindingType() == BindingIds.TYPE) {", "+\t\t\t\t\t\tif(binding.bindingType() == Binding.TYPE) {", "-\t\t\t\t\t\tif (binding.bindingType() == BindingIds.TYPE) {", "+\t\t\t\t\t\tif (binding.bindingType() == Binding.TYPE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed306b3deadfc1a7e73095fe0e95a989", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "949f1bbe84622faa807866412d26a5bdb0f64fe4", "commitAfterChange": "ecd2d9d0e14c2688e43c7c452930452fe7a77cc0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\t\t\t\tactionInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t\t\tactionInfo.setReachMode(FlowInfo.UNREACHABLE);", "-\t\t\tmergedInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\tmergedInfo.setReachMode(FlowInfo.UNREACHABLE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6d1ae84192acd45f107768870efb8c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java", "commitBeforeChange": "e15598faeaefd4a21bd9644d10bdb872e013a3cb", "commitAfterChange": "2b1f97cd9b63f274ba3e505dd8fb0edeaae91029", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testChangeContent() throws CoreException", "signatureAfterChange": " public void testChangeContent() throws CoreException", "diff": ["-\tassertEquals(", "+\tassertSourceEquals(", "-\tassertEquals(", "+\tassertSourceEquals("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f935e7f61ff4edb4acb78ff19846b09e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["-\t\t\t\t\t\tBinding b = scope.getBinding(name.token, BindingIds.VARIABLE | BindingIds.TYPE, name, false);", "+\t\t\t\t\t\tBinding b = scope.getBinding(name.token, Binding.VARIABLE | Binding.TYPE, name, false);"]}], "num": 59853}
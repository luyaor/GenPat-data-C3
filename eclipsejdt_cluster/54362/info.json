{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ee9d0906037bedee32d3720ce025e28", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43d43686edf1c2143efe45d377231038", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "9cbfba92afe751590dd4c48d5d820a93f442558c", "commitAfterChange": "d773cdff60e5f560828640541cee7fd9cd613ea2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["-\tint i = 0;", "-\tint kind = -1;", "-\tnextElement : while((kind = topKnownElementKind(COMPLETION_OR_ASSIST_PARSER, i)) != K_BLOCK_DELIMITER", "-\t\t&& kind != 0) {", "-\t\tint info = topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER, i);", "-\t\tswitch (kind) {", "-\t\t\tcase K_SELECTOR :", "-\t\t\t\tif(info == THIS_CONSTRUCTOR || info == SUPER_CONSTRUCTOR) {", "+\tStatement statement = expression;", "+\tint kind = topKnownElementKind(COMPLETION_OR_ASSIST_PARSER);", "+\tif(kind != 0) {", "+\t\tint info = topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER);", "+\t\tnextElement : switch (kind) {", "+\t\t\tcase K_SELECTOR_QUALIFIER :", "+\t\t\t\tint selector = topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER, 2);", "+\t\t\t\tif(selector == THIS_CONSTRUCTOR || selector == SUPER_CONSTRUCTOR) {", "-\t\t\t\t\t\t(info == THIS_CONSTRUCTOR) ? ", "+\t\t\t\t\t\t(selector == THIS_CONSTRUCTOR) ? ", "-\t\t\t\t\tint invocationType = topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER, i-1);", "-\t\t\t\t\tint qualifierExprPtr = topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER, i-2);", "+\t\t\t\t\tint invocationType = topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER,1);", "+\t\t\t\t\tint qualifierExprPtr = info;", "-\t\t\t\t\t\tint start = (int) (identifierPositionStack[info] >>> 32);", "+\t\t\t\t\t\tint start = (int) (identifierPositionStack[selector] >>> 32);", "-\t\t\t\t\t\tmessageSend.selector = identifierStack[info];", "+\t\t\t\t\t\tmessageSend.selector = identifierStack[selector];", "-\t\ti++;", "-//\t\tif(currentElement instanceof RecoveredField) {", "-//\t\t\tRecoveredField recoveredField = (RecoveredField) currentElement;", "-//\t\t\tif(!recoveredField.alreadyCompletedFieldInitialization) {", "-//\t\t\t\tassistNodeParent = recoveredField.fieldDeclaration;", "-//\t\t\t}", "-//\t\t} else if(currentElement instanceof RecoveredLocalVariable) {", "-//\t\t\tRecoveredLocalVariable recoveredLocalVariable = (RecoveredLocalVariable) currentElement;", "-//\t\t\tif(!recoveredLocalVariable.alreadyCompletedLocalInitialization) {", "-//\t\t\t\tassistNodeParent = recoveredLocalVariable.localDeclaration;", "-//\t\t\t}", "-//\t\t}", "-\t\tcurrentElement = currentElement.add(expression, 0);", "+\t\tif(currentElement instanceof RecoveredField", "+\t\t\t&& ((RecoveredField) currentElement).fieldDeclaration.initialization == null) {", "+\t\t\t\t", "+\t\t\tcurrentElement = currentElement.add(statement, 0);", "+\t\t\tassistNodeParent = ((RecoveredField) currentElement).fieldDeclaration;", "+\t\t} else if(currentElement instanceof RecoveredLocalVariable", "+\t\t\t&& ((RecoveredLocalVariable) currentElement).localDeclaration.initialization == null) {", "+\t\t\t\t", "+\t\t\tcurrentElement = currentElement.add(statement, 0);", "+\t\t\tassistNodeParent = ((RecoveredLocalVariable) currentElement).localDeclaration;", "+\t\t} else {", "+\t\t\tcurrentElement = currentElement.add(expression, 0);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ccd26576e98e99116203a83870811b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 142, "signatureBeforeChange": " public void incorrectEnclosingInstanceReference( \tQualifiedThisReference reference,  \tTypeBinding qualificationType)", "signatureAfterChange": " public void noSuchEnclosingInstance(TypeBinding targetType, AstNode location, boolean isConstructorCall)", "diff": ["-public void incorrectEnclosingInstanceReference(", "-\tQualifiedThisReference reference, ", "-\tTypeBinding qualificationType) {", "-\t\t", "-\tthis.handle(", "-\t\tIProblem.IncorrectEnclosingInstanceReference, ", "-\t\tnew String[] { new String(qualificationType.readableName())}, ", "-\t\tnew String[] { new String(qualificationType.shortReadableName())}, ", "-\t\treference.sourceStart, ", "-\t\treference.sourceEnd); ", "-}", "+public void noSuchEnclosingInstance(TypeBinding targetType, AstNode location, boolean isConstructorCall) {", "+", "+\tint id;", "+", "+\tif (isConstructorCall) {", "+\t\t//28 = No enclosing instance of type {0} is available due to some intermediate constructor invocation", "+\t\tid = IProblem.EnclosingInstanceInConstructorCall;", "+\t} else if ((location instanceof ExplicitConstructorCall)", "+\t\t\t\t&& ((ExplicitConstructorCall) location).accessMode == ExplicitConstructorCall.ImplicitSuper) {", "+\t\t//20 = No enclosing instance of type {0} is accessible to invoke the super constructor. Must define a constructor and explicitly qualify its super constructor invocation with an instance of {0} (e.g. x.super() where x is an instance of {0}).", "+\t\tid = IProblem.MissingEnclosingInstanceForConstructorCall;", "+\t} else if (location instanceof AllocationExpression ", "+\t\t\t\t&& (((AllocationExpression) location).binding.declaringClass.isMemberType()", "+\t\t\t\t\t|| (((AllocationExpression) location).binding.declaringClass.isAnonymousType() ", "+\t\t\t\t\t\t&& ((AllocationExpression) location).binding.declaringClass.superclass().isMemberType()))) {", "+\t\t//21 = No enclosing instance of type {0} is accessible. Must qualify the allocation with an enclosing instance of type {0} (e.g. x.new A() where x is an instance of {0}).", "+\t\tid = IProblem.MissingEnclosingInstance;", "+\t} else { // default", "+\t\t//22 = No enclosing instance of the type {0} is accessible in scope", "+\t\tid = IProblem.IncorrectEnclosingInstanceReference;", "+\t}", "+", "+\tthis.handle(", "+\t\tid,", "+\t\tnew String[] { new String(targetType.readableName())}, ", "+\t\tnew String[] { new String(targetType.shortReadableName())}, ", "+\t\tlocation.sourceStart, ", "+\t\tlocation.sourceEnd); ", "+}"]}], "num": 54362}
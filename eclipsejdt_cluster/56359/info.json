{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4413c9a6fcde705deac0c1afc231697c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74eef6162326a6dcaec65eb574e2a984", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "2e766bbca66c8d84b1a545bba0517d22086a3956", "commitAfterChange": "0900d363c7882a0cdbec8cc19af12d79dcbb6382", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic void setClasspath(IPath projectPath, IClasspathEntry[] entries)", "signatureAfterChange": "  \tpublic void setClasspath(IPath projectPath, IClasspathEntry[] entries) throws JavaModelException", "diff": ["-\tpublic void setClasspath(IPath projectPath, IClasspathEntry[] entries) {", "-\t\ttry {", "-\t\t\tcheckAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$", "-\t\t\tIJavaProject javaProject = JavaCore.create(getProject(projectPath));", "-\t\t\tjavaProject.setRawClasspath(entries, null);", "-\t\t} catch (JavaModelException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tcheckAssertion(\"JavaModelException\", false); //$NON-NLS-1$", "-\t\t}", "+\tpublic void setClasspath(IPath projectPath, IClasspathEntry[] entries) throws JavaModelException {", "+\t\tcheckAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$", "+\t\tIJavaProject javaProject = JavaCore.create(getProject(projectPath));", "+\t\tjavaProject.setRawClasspath(entries, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b77c1f00bb055323b1a9220d3ecef45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "abd333621a0cbd2492673b0e887a888245d2d663", "commitAfterChange": "0adf7a4e0894d18d3979e493aafe00dfa5c14f8d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 62, "signatureBeforeChange": "\t \tpublic IPath getClazzPath(IPath packagePath, String clazzName)", "signatureAfterChange": " \t \tpublic IPath setExternalOutputFolder(IPath projectPath, String outputFolder)", "diff": ["-\t */\t", "-\tpublic IPath getClazzPath(IPath packagePath, String clazzName) {", "-\t\tcheckAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$", "-\t\tcheckAssertion(\"type a name must not be empty\", clazzName.length() != 0); //$NON-NLS-1$", "-", "-\t\treturn packagePath.append(clazzName + \".java\"); //$NON-NLS-1$", "+\t", "+\tpublic IPath setExternalOutputFolder(IPath projectPath, String outputFolder){", "+\t\tIPath outputPath = new Path(outputFolder);", "+\t\ttry {", "+\t\t\tcheckAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$", "+\t\t\tIJavaProject javaProject = JavaCore.create(getProject(projectPath));", "+\t\t\tjavaProject.setOutputLocation(outputPath, null);", "+\t\t} catch (JavaModelException e) {", "+\t\t\te.printStackTrace();", "+\t\t\tcheckAssertion(\"JavaModelException\", false); //$NON-NLS-1$", "+\t\t}", "+\t\treturn outputPath;"]}], "num": 56359}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "326a0025504a3a05685d132f8aaff303", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3af90a5d7bdb32e15cd8ff8aa80948ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "29fd5c339634157c3a46bf2c80db8e6f9d9b60e5", "commitAfterChange": "d3bee7a6e680032a04efee0140f4fd7a408a0f76", "methodNumberBeforeChange": 218, "methodNumberAfterChange": 217, "signatureBeforeChange": " public void javadocInvalidMethod(MessageSend messageSend, MethodBinding method, int modifiers)", "signatureAfterChange": " public void javadocInvalidMethod(MessageSend messageSend, MethodBinding method, int modifiers)", "diff": ["-\t\t\t\t\tString closestParameterTypeNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, false);", "-\t\t\t\t\tString parameterTypeNames = typesAsString(method.isVarargs(), method.parameters, false);", "-\t\t\t\t\tString closestParameterTypeShortNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, true);", "-\t\t\t\t\tString parameterTypeShortNames = typesAsString(method.isVarargs(), method.parameters, true);", "-\t\t\t\t\tif (closestParameterTypeShortNames.equals(parameterTypeShortNames)){", "-\t\t\t\t\t\tclosestParameterTypeShortNames = closestParameterTypeNames;", "-\t\t\t\t\t\tparameterTypeShortNames = parameterTypeNames;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.handle(", "-\t\t\t\t\t\tIProblem.JavadocParameterMismatch,", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.readableName()),", "-\t\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "-\t\t\t\t\t\t\tclosestParameterTypeNames,", "-\t\t\t\t\t\t\tparameterTypeNames ", "-\t\t\t\t\t\t},", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.shortReadableName()),", "-\t\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "-\t\t\t\t\t\t\tclosestParameterTypeShortNames,", "-\t\t\t\t\t\t\tparameterTypeShortNames", "-\t\t\t\t\t\t},", "-\t\t\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "-\t\t\t\t\t\t(int) messageSend.nameSourcePosition);", "-\t\t\t\t\treturn;", "+\t\t\t\tint severity = computeSeverity(IProblem.JavadocParameterMismatch);", "+\t\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\t\tString closestParameterTypeNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, false);", "+\t\t\t\tString parameterTypeNames = typesAsString(method.isVarargs(), method.parameters, false);", "+\t\t\t\tString closestParameterTypeShortNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, true);", "+\t\t\t\tString parameterTypeShortNames = typesAsString(method.isVarargs(), method.parameters, true);", "+\t\t\t\tif (closestParameterTypeShortNames.equals(parameterTypeShortNames)){", "+\t\t\t\t\tclosestParameterTypeShortNames = closestParameterTypeNames;", "+\t\t\t\t\tparameterTypeShortNames = parameterTypeNames;", "+\t\t\t\t}", "+\t\t\t\tthis.handle(", "+\t\t\t\t\tIProblem.JavadocParameterMismatch,", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.readableName()),", "+\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "+\t\t\t\t\t\tclosestParameterTypeNames,", "+\t\t\t\t\t\tparameterTypeNames ", "+\t\t\t\t\t},", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.shortReadableName()),", "+\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "+\t\t\t\t\t\tclosestParameterTypeShortNames,", "+\t\t\t\t\t\tparameterTypeShortNames", "+\t\t\t\t\t},", "+\t\t\t\t\tseverity,", "+\t\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t\t(int) messageSend.nameSourcePosition);", "+\t\t\t\treturn;", "+\t\t\tint severity = computeSeverity(IProblem.JavadocGenericMethodTypeArgumentMismatch);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\t\tseverity,", "-\t\t\tif (shownMethod.typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\t\tboolean noTypeVariables = shownMethod.typeVariables == Binding.NO_TYPE_VARIABLES;", "+\t\t\tseverity = computeSeverity(noTypeVariables ? IProblem.JavadocNonGenericMethod : IProblem.JavadocIncorrectArityForParameterizedMethod);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\tif (noTypeVariables) {", "-\t\t\t\t\tIProblem.JavadocNonGenericMethod ,", "+\t\t\t\t\tIProblem.JavadocNonGenericMethod,", "+\t\t\t\t\tseverity,", "-\t\t\t\t\tIProblem.JavadocIncorrectArityForParameterizedMethod  ,", "+\t\t\t\t\tIProblem.JavadocIncorrectArityForParameterizedMethod,", "+\t\t\t\t\tseverity,", "+\t\t\tseverity = computeSeverity(IProblem.JavadocParameterizedMethodArgumentTypeMismatch);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\t\tseverity,", "+\t\t\tseverity = computeSeverity(IProblem.JavadocTypeArgumentsForRawGenericMethod);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "-\t\t\t\tIProblem.JavadocTypeArgumentsForRawGenericMethod ,", "+\t\t\t\tIProblem.JavadocTypeArgumentsForRawGenericMethod,", "+\t\t\t\tseverity,", "+\tint severity = computeSeverity(id);", "+\tif (severity == ProblemSeverities.Ignore) return;", "+\t\tseverity,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91000b914288c54d67b63aa2a6e32e1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "29fd5c339634157c3a46bf2c80db8e6f9d9b60e5", "commitAfterChange": "d3bee7a6e680032a04efee0140f4fd7a408a0f76", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 215, "signatureBeforeChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "signatureAfterChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "diff": ["+\t\t\tint severity = computeSeverity(IProblem.JavadocGenericConstructorTypeArgumentMismatch);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\t\tseverity,", "-\t\t\tif (shownConstructor.typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\t\tboolean noTypeVariables = shownConstructor.typeVariables == Binding.NO_TYPE_VARIABLES;", "+\t\t\tseverity = computeSeverity(noTypeVariables ? IProblem.JavadocNonGenericConstructor : IProblem.JavadocIncorrectArityForParameterizedConstructor);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\tif (noTypeVariables) {", "+\t\t\t\t\tseverity,", "-\t\t\t\t\tIProblem.JavadocIncorrectArityForParameterizedConstructor  ,", "+\t\t\t\t\tIProblem.JavadocIncorrectArityForParameterizedConstructor,", "+\t\t\t\t\tseverity,", "+\t\t\tseverity = computeSeverity(IProblem.JavadocParameterizedConstructorArgumentTypeMismatch);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\t\tseverity,", "+\t\t\tseverity = computeSeverity(IProblem.JavadocTypeArgumentsForRawGenericConstructor);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\t\tseverity,", "+\tint severity = computeSeverity(id);", "+\tif (severity == ProblemSeverities.Ignore) return;", "+\t\tseverity,"]}], "num": 57990}
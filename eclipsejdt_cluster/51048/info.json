{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1530bd049baa0b5bf7b0d5bb883d2b95", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15133a2a3576c7ebe93d8bb959ab1bfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "56fd729d2f45ec0b9c9fda262c4722902ccba4f8", "commitAfterChange": "880fcfdc9d3f451c53fbdd4300c71ec2c6ba2a25", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t MethodBinding getMethodBinding(MethodBinding[] methods, CompilationUnitResolver resolver)", "signatureAfterChange": " \t MethodBinding getMethodBinding(MethodBinding[] methods, CompilationUnitResolver resolver)", "diff": ["-\t \t", "-\t \t// collect parameter type bindings", "-\t \tArrayList parameterList = new ArrayList();", "-\t \tdo {", "-\t \t\treset();", "-\t \t\tBinding parameterBinding = getCompilerBinding(resolver);", "-\t \t\tif (parameterBinding == null) break;", "-\t \t\tparameterList.add(parameterBinding);", "-\t \t} while (this.scanner.token != BindingKeyScanner.END && !this.scanner.isAtParametersStart());", "-\t \tint parameterLength = parameterList.size();", "-\t \tTypeBinding[] parameters = new TypeBinding[parameterLength];", "-\t \tparameterList.toArray(parameters);", "-\t \t", "-\t \t", "-\t \t// collect type parameter bindings", "-\t \tArrayList typeParameterList = new ArrayList();", "-\t \tdo {", "-\t \t\treset();", "-\t \t\tBinding typeParameterBinding = getCompilerBinding(resolver);", "-\t \t\tif (typeParameterBinding == null) break;", "-\t \t\ttypeParameterList.add(typeParameterBinding);", "-\t \t} while (this.scanner.token != BindingKeyScanner.END);", "-\t \tint typeParameterLength = typeParameterList.size();", "-\t \tTypeBinding[] typeParameters = new TypeBinding[typeParameterLength];", "-\t \ttypeParameterList.toArray(typeParameters);", "+\t \tthis.scanner.skipMethodSignature();", "+\t \tchar[] signature = this.scanner.getTokenSource();", "-\t\t\t\tTypeBinding[] methodParameters = method.parameters;", "-\t\t\t\tint methodParameterLength = methodParameters == null ? 0 : methodParameters.length;", "-\t\t\t\tif (methodParameterLength != parameterLength)", "-\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\tfor (int j = 0; j < parameterLength; j++) {", "-\t\t\t\t\tif (methodParameters[j] != parameters[j])", "-\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t}", "-\t\t\t\tTypeBinding[] methodTypeParameters = method.typeVariables;", "-\t\t\t\tint methodTypeParameterLength = methodTypeParameters == null ? 0 : methodTypeParameters.length;", "-\t\t\t\tif (methodTypeParameterLength != typeParameterLength)", "-\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\tfor (int j = 0; j < typeParameterLength; j++) {", "-\t\t\t\t\tif (methodTypeParameters[j] != typeParameters[j])", "-\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t}", "+\t\t\t\tif (CharOperation.equals(signature, method.genericSignature()))", "+\t\t\t\t\treturn method;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8321b6005e9e778642472ce666e9b229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "56d15386ff3f6926c8a8ed7999b62e707baad4f8", "commitAfterChange": "8813bb7624a5282a5772eab0a6afafea0971ade6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tProjectCache getProjectCache(JavaProject project)", "signatureAfterChange": " \t \tProjectCache getProjectCache(JavaProject project)", "diff": ["-\t\t\tHashMap otherRoots = JavaModelManager.getJavaModelManager().deltaState.otherRoots;", "-\t\t\tHashtableOfArrayToObject fragmentsCache = new HashtableOfArrayToObject();", "-\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\t\tHashMap rootInfos = JavaModelManager.getJavaModelManager().deltaState.roots;", "+\t\t\tHashMap pkgFragmentsCaches = new HashMap();", "+\t\t\tint length = roots.length;", "+\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tIJavaElement[] frags = null;", "-\t\t\t\ttry {", "-\t\t\t\t\tif (root.isArchive() ", "-\t\t\t\t\t\t\t&& !root.isOpen() ", "-\t\t\t\t\t\t\t&& otherRoots.get(((JarPackageFragmentRoot) root).jarPath) == null/*only if jar belongs to 1 project (https://bugs.eclipse.org/bugs/show_bug.cgi?id=161175)*/) {", "-\t\t\t\t\t\tJarPackageFragmentRootInfo info = new JarPackageFragmentRootInfo();", "-\t\t\t\t\t\t((JarPackageFragmentRoot) root).computeChildren(info, new HashMap());", "-\t\t\t\t\t\tfrags = info.children;", "-\t\t\t\t\t} else ", "-\t\t\t\t\t\tfrags = root.getChildren();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// root doesn't exist: ignore", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tfor (int j = 0, length2 = frags.length; j < length2; j++) {", "-\t\t\t\t\tPackageFragment fragment= (PackageFragment) frags[j];", "-\t\t\t\t\tString[] pkgName = fragment.names;", "-\t\t\t\t\tObject existing = fragmentsCache.get(pkgName);", "-\t\t\t\t\tif (existing == null || existing == NO_ROOTS) {", "-\t\t\t\t\t\tfragmentsCache.put(pkgName, root);", "-\t\t\t\t\t\t// ensure super packages (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=119161)", "-\t\t\t\t\t\t// are also in the map", "-\t\t\t\t\t\taddSuperPackageNames(pkgName, fragmentsCache);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (existing instanceof PackageFragmentRoot) {", "-\t\t\t\t\t\t\tfragmentsCache.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tIPackageFragmentRoot[] entry= (IPackageFragmentRoot[]) existing;", "-\t\t\t\t\t\t\tIPackageFragmentRoot[] copy= new IPackageFragmentRoot[entry.length + 1];", "-\t\t\t\t\t\t\tSystem.arraycopy(entry, 0, copy, 0, entry.length);", "-\t\t\t\t\t\t\tcopy[entry.length]= root;", "-\t\t\t\t\t\t\tfragmentsCache.put(pkgName, copy);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\tDeltaProcessor.RootInfo rootInfo = (DeltaProcessor.RootInfo) rootInfos.get(root.getPath());", "+\t\t\t\tif (rootInfo == null || rootInfo.project.equals(project)) {", "+\t\t\t\t\t// compute fragment cache", "+\t\t\t\t\tHashSetOfArray fragmentsCache = new HashSetOfArray();", "+\t\t\t\t\tinitializePackageNames(root, fragmentsCache);", "+\t\t\t\t\tpkgFragmentsCaches.put(root, fragmentsCache);", "-\t\t\tcache = new ProjectCache(roots, fragmentsCache, reverseMap);", "+\t\t\t", "+\t\t\tcache = new ProjectCache(roots, reverseMap, pkgFragmentsCaches);"]}], "num": 51048}
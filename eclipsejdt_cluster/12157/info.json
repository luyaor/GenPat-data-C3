{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1bf66835faf041db53711ac0065c4051", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0680d77ebe37ea43bb2db60fb60fc2e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "4a6c179c694d7f83f0431399bb4ebca62128a3a9", "commitAfterChange": "1f46f03f7f5f04f6bc966056a230ee9598644f53", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["-\t\t\t\tRootInfo childInfo = rootInfo == null ? (RootInfo)this.roots.get(childPath) : null;", "-\t\t\t\tif (childInfo != null && !childInfo.project.getProject().getFullPath().isPrefixOf(childPath)) {", "+\t\t\t\tRootInfo childRootInfo = rootInfo == null ? (RootInfo)this.roots.get(childPath) : null;", "+\t\t\t\tif (childRootInfo != null && !childRootInfo.project.getProject().getFullPath().isPrefixOf(childPath)) {", "-\t\t\t\t\tchildInfo = null;", "+\t\t\t\t\tchildRootInfo = null;", "-\t\t\t\t\t\trootInfo == null ? childInfo : rootInfo", "+\t\t\t\t\t\trootInfo == null ? childRootInfo : rootInfo", "-\t\t\t\t", "-\t\t\t\tif (!isResFilteredFromOutput) {", "+", "+\t\t\t\tif (!isResFilteredFromOutput ", "+\t\t\t\t\t\t&& childRootInfo == null) { // do not treat as non-java rsc in rootInfo if nested root (childRootInfo)", "-\t\t\t\t\t\t\t|| !this.traverseDelta(child, childType, rootInfo == null ? childInfo : rootInfo, outputsInfo)) { // traverse delta for child in the same project", "+\t\t\t\t\t\t\t|| !this.traverseDelta(child, childType, rootInfo == null ? childRootInfo : rootInfo, outputsInfo)) { // traverse delta for child in the same project", "-\t\t\t\tif (childInfo == null && (childInfo = (RootInfo)this.roots.get(childPath)) != null) {", "-\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, childInfo, null); // binary output of childInfo.project cannot be this root", "+\t\t\t\tif (childRootInfo == null && (childRootInfo = (RootInfo)this.roots.get(childPath)) != null) {", "+\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, childRootInfo, null); // binary output of childRootInfo.project cannot be this root", "-\t\t\t\t\t\tchildInfo = (RootInfo) iterator.next();", "-\t\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, childInfo, null); // binary output of childInfo.project cannot be this root", "+\t\t\t\t\t\tchildRootInfo = (RootInfo) iterator.next();", "+\t\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, childRootInfo, null); // binary output of childRootInfo.project cannot be this root"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64526f127ba4f7b88a8f1742ad281507", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " private void readHeaderInfo(FileInputStream stream) throws IOException", "signatureAfterChange": " private void readHeaderInfo(InputStream stream) throws IOException", "diff": ["-private void readHeaderInfo(FileInputStream stream) throws IOException {", "+private void readHeaderInfo(InputStream stream) throws IOException {", "-\tlong fileLength = this.indexFile.length();", "-\tif (this.numberOfChunks > fileLength ) {", "+\tlong length = this.indexLocation.length();", "+\tif (length != -1 && this.numberOfChunks > length) {", "-\t\t\tSystem.out.println(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "-\t\tthrow new IOException(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Index file is corrupted \" + this.indexLocation); //$NON-NLS-1$", "+\t\tthrow new IOException(\"Index file is corrupted \" + this.indexLocation); //$NON-NLS-1$", "-\tif (size > fileLength) {", "+\tif (length != -1 && size > length) {", "-\t\t\tSystem.out.println(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "-\t\tthrow new IOException(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Index file is corrupted \" + this.indexLocation); //$NON-NLS-1$", "+\t\tthrow new IOException(\"Index file is corrupted \" + this.indexLocation); //$NON-NLS-1$"]}], "num": 12157}
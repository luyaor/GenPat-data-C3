{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28a67dcc4c81247609ed6d2e4fe772fa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1da0338b703d734a6e93e579b7bfb80f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate void updatePackageStatement(IDOMCompilationUnit domCU, String[] pkgName)", "signatureAfterChange": " \tprivate void updatePackageStatement(CompilationUnit astCU, String[] pkgName, IDocument document) throws JavaModelException", "diff": ["-    // TODO - JDOM - remove once model ported off of JDOM", "-\tprivate void updatePackageStatement(IDOMCompilationUnit domCU, String[] pkgName) {", "+\tprivate void updatePackageStatement(CompilationUnit astCU, String[] pkgName, IDocument document) throws JavaModelException {", "-\t\tboolean seenPackageNode = false;", "-\t\tEnumeration nodes = domCU.getChildren();", "-\t\twhile (nodes.hasMoreElements()) {", "-\t\t\tIDOMNode node = (IDOMNode) nodes.nextElement();", "-\t\t\tif (node.getNodeType() == IDOMNode.PACKAGE) {", "-\t\t\t\tif (! defaultPackage) {", "-\t\t\t\t\tnode.setName(Util.concatWith(pkgName, '.'));", "-\t\t\t\t} else {", "-\t\t\t\t\tnode.remove();", "-\t\t\t\t}", "-\t\t\t\tseenPackageNode = true;", "-\t\t\t\tbreak;", "-\t\t\t}", "+\t\tAST ast = astCU.getAST();", "+\t\tASTRewrite rewriter = ASTRewrite.create(ast);", "+\t\tif (defaultPackage) {", "+\t\t\t// remove existing package statement", "+\t\t\tif (astCU.getPackage() != null)", "+\t\t\t\trewriter.set(astCU, CompilationUnit.PACKAGE_PROPERTY, null, null);", "+\t\t} else {", "+\t\t\t// add new package statement or replace existing", "+\t\t\torg.eclipse.jdt.core.dom.PackageDeclaration pkg = ast.newPackageDeclaration();", "+\t\t\tName name = ast.newName(pkgName);", "+\t\t\tpkg.setName(name);", "+\t\t\trewriter.set(astCU, CompilationUnit.PACKAGE_PROPERTY, pkg, null);", "-\t\tif (!seenPackageNode && !defaultPackage) {", "-\t\t\t//the cu was in a default package...no package declaration", "-\t\t\t//create the new package declaration as the first child of the cu", "-\t\t\tIDOMPackage pkg = fFactory.createPackage(\"package \" + Util.concatWith(pkgName, '.') + \";\" + org.eclipse.jdt.internal.compiler.util.Util.LINE_SEPARATOR); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tIDOMNode firstChild = domCU.getFirstChild();", "-\t\t\tif (firstChild != null) {", "-\t\t\t\tfirstChild.insertSibling(pkg);", "-\t\t\t} // else the cu was empty: leave it empty", "-\t\t}", "+ \t\tTextEdit edits = rewriter.rewriteAST(document, null);", "+ \t\ttry {", "+\t \t\tedits.apply(document);", "+ \t\t} catch (BadLocationException e) {", "+ \t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.INVALID_CONTENTS);", "+ \t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53c7cff5441b6f150757ea4bd9c07f84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "25cb9ce2b0a42eaaa079306fa88b8294a5b0343f", "commitAfterChange": "4ce91958103bed0391aa763e032ff18d6e80eeff", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " final int findInImports(String qualifier, String name, int kind)", "signatureAfterChange": " final int findInImports(String qualifier, String name, int kind)", "diff": ["-\t\tif (this.filterImplicitImports && this.useContextToFilterImplicitImports) {", "-\t\t\tString fPackageName= this.compilationUnit.getParent().getElementName();", "-\t\t\tString mainTypeSimpleName= JavaCore.removeJavaLikeExtension(this.compilationUnit.getElementName());", "-\t\t\tString fMainTypeName= Util.concatenateName(fPackageName, mainTypeSimpleName, '.');", "-\t\t\tif (kind == ImportRewriteContext.KIND_TYPE", "-\t\t\t\t\t&& (qualifier.equals(fPackageName)", "-\t\t\t\t\t\t\t|| fMainTypeName.equals(Util.concatenateName(qualifier, name, '.'))))", "-\t\t\t\treturn ImportRewriteContext.RES_NAME_FOUND;", "+", "+\t\tString packageName= this.compilationUnit.getParent().getElementName();", "+\t\tif (kind == ImportRewriteContext.KIND_TYPE) {", "+\t\t\tif (this.filterImplicitImports && this.useContextToFilterImplicitImports) {", "+\t\t\t\tString mainTypeSimpleName= JavaCore.removeJavaLikeExtension(this.compilationUnit.getElementName());", "+\t\t\t\tString mainTypeName= Util.concatenateName(packageName, mainTypeSimpleName, '.');", "+\t\t\t\tif (qualifier.equals(packageName)", "+\t\t\t\t\t\t|| mainTypeName.equals(Util.concatenateName(qualifier, name, '.'))) {", "+\t\t\t\t\treturn ImportRewriteContext.RES_NAME_FOUND;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (this.astRoot != null) {", "+\t\t\t\t\tList<AbstractTypeDeclaration> types = this.astRoot.types();", "+\t\t\t\t\tint nTypes = types.size();", "+\t\t\t\t\tfor (int i = 0; i < nTypes; i++) {", "+\t\t\t\t\t\tAbstractTypeDeclaration type = types.get(i);", "+\t\t\t\t\t\tSimpleName simpleName = type.getName();", "+\t\t\t\t\t\tif (simpleName.getIdentifier().equals(name)) { ", "+\t\t\t\t\t\t\treturn qualifier.equals(packageName)", "+\t\t\t\t\t\t\t\t\t? ImportRewriteContext.RES_NAME_FOUND", "+\t\t\t\t\t\t\t\t\t: ImportRewriteContext.RES_NAME_CONFLICT;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tIType[] types = this.compilationUnit.getTypes();", "+\t\t\t\t\t\tint nTypes = types.length;", "+\t\t\t\t\t\tfor (int i = 0; i < nTypes; i++) {", "+\t\t\t\t\t\t\tIType type = types[i];", "+\t\t\t\t\t\t\tString typeName = type.getElementName();", "+\t\t\t\t\t\t\tif (typeName.equals(name)) {", "+\t\t\t\t\t\t\t\treturn qualifier.equals(packageName)", "+\t\t\t\t\t\t\t\t\t\t? ImportRewriteContext.RES_NAME_FOUND", "+\t\t\t\t\t\t\t\t\t\t: ImportRewriteContext.RES_NAME_CONFLICT;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// don't want to throw an exception here", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+"]}], "num": 46575}
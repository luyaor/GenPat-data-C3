{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c319e3791be65171becfaf808089063", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14c6fed5d236d3c1b33772df5ce3e96c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "6498f02423137f9292b34e601b633d22e6c4b5d9", "commitAfterChange": "ded354ea9af9c645b73bb24272f1a729a3f65c1d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tClassScope classScope)", "signatureAfterChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tClassScope classScope)", "diff": ["-\t\t\t\tthis.javadoc.traverse(visitor, scope);", "+\t\t\t\tthis.javadoc.traverse(visitor, this.scope);", "-\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "+\t\t\t\t\tthis.annotations[i].traverse(visitor, this.scope);", "-\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "+\t\t\t\t\tthis.typeParameters[i].traverse(visitor, this.scope);", "-\t\t\tif (returnType != null)", "-\t\t\t\treturnType.traverse(visitor, scope);", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint argumentLength = arguments.length;", "+\t\t\tif (this.returnType != null)", "+\t\t\t\tthis.returnType.traverse(visitor, this.scope);", "+\t\t\tif (this.arguments != null) {", "+\t\t\t\tint argumentLength = this.arguments.length;", "-\t\t\t\t\targuments[i].traverse(visitor, scope);", "+\t\t\t\t\tthis.arguments[i].traverse(visitor, this.scope);", "-\t\t\tif (thrownExceptions != null) {", "-\t\t\t\tint thrownExceptionsLength = thrownExceptions.length;", "+\t\t\tif (this.thrownExceptions != null) {", "+\t\t\t\tint thrownExceptionsLength = this.thrownExceptions.length;", "-\t\t\t\t\tthrownExceptions[i].traverse(visitor, scope);", "+\t\t\t\t\tthis.thrownExceptions[i].traverse(visitor, this.scope);", "-\t\t\tif (statements != null) {", "-\t\t\t\tint statementsLength = statements.length;", "+\t\t\tif (this.statements != null) {", "+\t\t\t\tint statementsLength = this.statements.length;", "-\t\t\t\t\tstatements[i].traverse(visitor, scope);", "+\t\t\t\t\tthis.statements[i].traverse(visitor, this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c33afb5ff69b3a66281f27461c7939a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "da39b69e72c50baaaa7ca77863d468ca697fcf61", "commitAfterChange": "ff204ce3a41738619b4636be750fa00b8770f7a8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, CompilationUnitScope unitScope)", "diff": ["- */\r", "-public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\tif (ignoreFurtherInvestigation)\r", "-\t\treturn;\r", "-\ttry {\r", "-\t\tif (visitor.visit(this, blockScope)) {\r", "-\t\t\tif (superclass != null)\r", "-\t\t\t\tsuperclass.traverse(visitor, scope);\r", "-\t\t\tif (superInterfaces != null) {\r", "-\t\t\t\tint superInterfaceLength = superInterfaces.length;\r", "-\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++)\r", "-\t\t\t\t\tsuperInterfaces[i].traverse(visitor, scope);\r", "-\t\t\t}\r", "-\t\t\tif (memberTypes != null) {\r", "-\t\t\t\tint memberTypesLength = memberTypes.length;\r", "-\t\t\t\tfor (int i = 0; i < memberTypesLength; i++)\r", "-\t\t\t\t\tmemberTypes[i].traverse(visitor, scope);\r", "-\t\t\t}\r", "-\t\t\tif (fields != null) {\r", "-\t\t\t\tint fieldsLength = fields.length;\r", "-\t\t\t\tfor (int i = 0; i < fieldsLength; i++) {\r", "-\t\t\t\t\tFieldDeclaration field;\r", "-\t\t\t\t\tif ((field = fields[i]).isStatic()) {\r", "-\t\t\t\t\t\t// local type cannot have static fields\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tfield.traverse(visitor, initializerScope);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (methods != null) {\r", "-\t\t\t\tint methodsLength = methods.length;\r", "-\t\t\t\tfor (int i = 0; i < methodsLength; i++)\r", "-\t\t\t\t\tmethods[i].traverse(visitor, scope);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tvisitor.endVisit(this, blockScope);\r", "-\t} catch (AbortType e) {\r", "-\t}\r", "-}\r"]}], "num": 41780}
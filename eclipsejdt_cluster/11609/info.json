{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "014eee801195e4120731914c56f9aca4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02275896f6c53278ad4433c92d8f3d6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void test058() throws Exception", "signatureAfterChange": " public void test058() throws Exception", "diff": ["-\t\t\t\t\"public class X {\\r\\n\" +", "-\t\t\t\t\"\tpublic static void main(String args[]) {\\r\\n\" +", "-\t\t\t\t\"\t\ttry {\\r\\n\" +", "-\t\t\t\t\"\t\t\ttry {\\r\\n\" +", "-\t\t\t\t\"\t\t\t\tSystem.out.print(\\\"SU\\\");\\r\\n\" +", "-\t\t\t\t\"\t\t\t} finally {\\r\\n\" +", "-\t\t\t\t\"\t\t\t\tSystem.out.print(\\\"CC\\\");\\r\\n\" +", "-\t\t\t\t\"\t\t\t}\\r\\n\" +", "-\t\t\t\t\"\t\t} finally {\\r\\n\" +", "-\t\t\t\t\"\t\t\tSystem.out.println(\\\"ESS\\\");\\r\\n\" +", "-\t\t\t\t\"\t\t}\\r\\n\" +", "-\t\t\t\t\"\t}\\r\\n\" +", "-\t\t\t\t\"}\\r\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String args[]) {\\n\" +", "+\t\t\t\t\"\t\ttry {\\n\" +", "+\t\t\t\t\"\t\t\ttry {\\n\" +", "+\t\t\t\t\"\t\t\t\tSystem.out.print(\\\"SU\\\");\\n\" +", "+\t\t\t\t\"\t\t\t} finally {\\n\" +", "+\t\t\t\t\"\t\t\t\tSystem.out.print(\\\"CC\\\");\\n\" +", "+\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t} finally {\\n\" +", "+\t\t\t\t\"\t\t\tSystem.out.println(\\\"ESS\\\");\\n\" +", "+\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "043748c9930eb07e21067880e8bc154c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1782158319ffa7e4628be4d4b028ab04f9c15514", "commitAfterChange": "753dffcd46fd249a11ed1dc0c4ed46c98f98c988", "methodNumberBeforeChange": 1127, "methodNumberAfterChange": 1127, "signatureBeforeChange": " public void _test1102()", "signatureAfterChange": " public void _test1102()", "diff": ["-\t\t\t\"C.java\",", "-\t\t\t\"class T {\\r\\n\" + ", "-\t\t\t\"}\\r\\n\" + ", "-\t\t\t\"class N<Z> {\\r\\n\" + ", "-\t\t\t\"}\\r\\n\" + ", "-\t\t\t\"public class C<X> extends N<N<? super C<C<X>>>> {\\r\\n\" + ", "-\t\t\t\"\tN<? super C<T>> cast(C<T> c) {\\r\\n\" + ", "-\t\t\t\"\t\treturn c;\\r\\n\" + ", "-\t\t\t\"\t}\\r\\n\" + ", "+\t\t\t\"X.java\",", "+\t\t\t\"class A {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class B<U> {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"public class X<E> extends B<B<? super X<X<E>>>> {\\n\" + ", "+\t\t\t\"\tB<? super X<A>> cast(X<A> x) {\\n\" + ", "+\t\t\t\"\t\treturn x;\\n\" + ", "+\t\t\t\"\t}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0470b97f9aa92be78d504cc744afe3c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SuperTypeTest.java", "commitBeforeChange": "0f169ffd6bca6fffad72427f729936c499395ec5", "commitAfterChange": "53a1646d9e191b8b912f757450cb4b809c88a6c3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void test013()", "signatureAfterChange": " public void test013()", "diff": ["-\t\t\"\t                       ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<E> for the type X<E>, already defined by Collection<E>\\n\" + ", "+\t\t\"\t                                ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<E> for the type X<E>, already defined by List<E>\\n\" + ", "-\t\t\"\t                                ^^^^^^^^^^\\n\" + ", "-\t\t\"Redundant superinterface Collection<E> for the type X<E>, already defined by Iterable<E>\\n\" + ", "+\t\t\"\t                                               ^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Iterable<E> for the type X<E>, already defined by Collection<E>\\n\" + ", "-\t\t\"\t                                      ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<E> for the type Y<E>, already defined by Collection<E>\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<E> for the type Y<E>, already defined by List<E>\\n\" + ", "-\t\t\"\t                                      ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<E> for the type XXX<E>, already defined by Iterable<E>\\n\" + ", "+\t\t\"\t                         ^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Iterable<E> for the type XXX<E>, already defined by List<E>\\n\" + ", "-\t\t\"\t                                               ^^^^^^^^^^\\n\" + ", "-\t\t\"Redundant superinterface Collection<E> for the type XXX<E>, already defined by Iterable<E>\\n\" + ", "+\t\t\"\t                         ^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Iterable<E> for the type XXX<E>, already defined by Collection<E>\\n\" + ", "-\t\t\"\t                            ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<Object> for the type Z, already defined by Collection<Object>\\n\" + ", "+\t\t\"\t                                          ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<Object> for the type Z, already defined by List<Object>\\n\" + ", "-\t\t\"\t                                                 ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<Object> for the type ZZ, already defined by Collection<Object>\\n\" + ", "+\t\t\"\t                             ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<Object> for the type ZZ, already defined by List<Object>\\n\" + ", "+\t\t\"----------\\n\",", "+\t\tJavacTestOptions.SKIP);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05bc9c14589464b022b70198cb6db78a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "1e5960a8e1d6d5a1af8d629bddab71c46e5ed5a1", "commitAfterChange": "0d665ff7724ca0a2df27fa238eee0ddf6c106c65", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testBug027079d() throws JavaModelException", "signatureAfterChange": " public void testBug027079d() throws JavaModelException", "diff": ["-\t\t\"public class X04 {\\r\\n\" + ", "-\t\t\"\\r\\n\" + ", "-\t\t\"/* disable-formatter */\\r\\n\" + ", "-\t\t\"void     foo(    )      {\t\\r\\n\" + ", "-\t\t\"\t\t\t\t//      unformatted       comment  \t  \\r\\n\" + ", "-\t\t\"}\\r\\n\" + ", "-\t\t\"/* enable-formatter */\\r\\n\" + ", "-\t\t\"void     bar(    )      {\t\\r\\n\" + ", "-\t\t\"\t\t\t\t//      formatted       comment  \t  \\r\\n\" + ", "-\t\t\"}\\r\\n\" + ", "-\t\t\"}\\r\\n\";", "+\t\t\"public class X04 {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"/* disable-formatter */\\n\" + ", "+\t\t\"void     foo(    )      {\t\\n\" + ", "+\t\t\"\t\t\t\t//      unformatted       comment  \t  \\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"/* enable-formatter */\\n\" + ", "+\t\t\"void     bar(    )      {\t\\n\" + ", "+\t\t\"\t\t\t\t//      formatted       comment  \t  \\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"}\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "068b5056261939a6940ff01c481c9e11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " \tpublic void test094()", "signatureAfterChange": " \tpublic void test094()", "diff": ["-\t\t\t\"    3  invokespecial java.lang.Enum(java.lang.String, int) [11]\\n\" + ", "+\t\t\t\"    3  invokespecial java.lang.Enum(java.lang.String, int) [10]\\n\" + ", "-\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [19]\\n\" + ", "+\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [18]\\n\" + ", "-\t\t\t\"    10  anewarray X [2]\\n\" + ", "+\t\t\t\"    10  anewarray X [1]\\n\" + ", "-\t\t\t\"    17  invokestatic java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) : void  [25]\\n\" + ", "+\t\t\t\"    17  invokestatic java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) : void [20]\\n\" + ", "-\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [19]\\n\" + ", "+\t\t\t\"     0  getstatic X.ENUM$VALUES : X[] [18]\\n\" + ", "-\t\t\t\"    16  invokevirtual X.name() : java.lang.String  [31]\\n\" + ", "-\t\t\t\"    19  invokevirtual java.lang.String.equals(java.lang.Object) : boolean  [37]\\n\" + ", "+\t\t\t\"    16  invokevirtual X.name() : java.lang.String [28]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.lang.String.equals(java.lang.Object) : boolean [32]\\n\" + ", "-\t\t\t\"    34  new java.lang.IllegalArgumentException [39]\\n\" + ", "+\t\t\t\"    34  new java.lang.IllegalArgumentException [38]\\n\" + ", "-\t\t\t\"    39  invokespecial java.lang.IllegalArgumentException(java.lang.String) [42]\\n\" + ", "+\t\t\t\"    39  invokespecial java.lang.IllegalArgumentException(java.lang.String) [40]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07c7137713842952fb891d4c49038a97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 836, "methodNumberAfterChange": 836, "signatureBeforeChange": " public void test830()", "signatureAfterChange": " public void test830()", "diff": ["-\t\t\"1. WARNING in X.java (at line 5)\\r\\n\" + ", "-\t\t\"\tX x = (X) o;\\r\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tX x = (X) o;\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 6)\\r\\n\" + ", "-\t\t\"\tX<String> xs = (X<String>)o;\\r\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tX<String> xs = (X<String>)o;\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 7)\\r\\n\" + ", "-\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 10)\\r\\n\" + ", "-\t\t\"\tList l = (List) al;\\r\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tList l = (List) al;\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 10)\\r\\n\" + ", "-\t\t\"\tList l = (List) al;\\r\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tList l = (List) al;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "082ddacac35bef2c2b94b37a02b0089b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "8c77956bb14bf31d316463be9556a2204834682b", "commitAfterChange": "366617dbc4fc1d9363db17217a7ae199f0f005ea", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\"The argument of type null should explicitly be cast to byte[][] for the invocation of the varargs method byte2(byte[]...) from type Y. It could alternatively be cast to byte[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method byte2(byte[]...) doesn't exactly match the vararg parameter type. Cast to byte[][] to confirm the non-varargs invocation, or pass individual arguments of type byte[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type String[] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type String[][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][][] of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type String[][] of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to String[] for the invocation of the varargs method string(String...) from type Y. It could alternatively be cast to String for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method string(String...) doesn't exactly match the vararg parameter type. Cast to String[] to confirm the non-varargs invocation, or pass individual arguments of type String for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af04bf00cb689c53170a81f4eb8dc90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testTypeMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testTypeMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [g1.t.m.def.Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b5ea8ef742a9a02e422905c93023fbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_4.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tpublic void test054() throws Exception", "signatureAfterChange": "  \tpublic void test054() throws Exception", "diff": ["-\t\t\t\"     5  if_icmpne 14\\n\" +", "+\t\t\t\"     5  if_icmpne 12\\n\" +", "-\t\t\t\"    11  ifeq 14\\n\" +", "-\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "-\t\t\t\"    17  iload_0 [i]\\n\" +", "-\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "-\t\t\t\"    21  return\\n\" +", "+\t\t\t\"    11  pop\\n\" +", "+\t\t\t\"    12  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "+\t\t\t\"    15  iload_0 [i]\\n\" +", "+\t\t\t\"    16  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "+\t\t\t\"    19  return\\n\" +", "-\t\t\t\"        [pc: 14, line: 12]\\n\" +", "-\t\t\t\"        [pc: 21, line: 14]\\n\" +", "+\t\t\t\"        [pc: 12, line: 12]\\n\" +", "+\t\t\t\"        [pc: 19, line: 14]\\n\" +", "-\t\t\t\"        [pc: 2, pc: 22] local: i index: 0 type: int\\n\";", "+\t\t\t\"        [pc: 2, pc: 20] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10b4770635642941b6189606033f6ccf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\"     4  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     9  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"    13  astore [local_4]\\n\" + ", "+\t\t\"    13  astore 4\\n\" + ", "-\t\t\"    16  istore_2 [local_2]\\n\" + ", "-\t\t\"    17  aload [local_4]\\n\" + ", "+\t\t\"    16  istore_2\\n\" + ", "+\t\t\"    17  aload 4\\n\" + ", "-\t\t\"    20  istore_3 [local_3]\\n\" + ", "+\t\t\"    20  istore_3\\n\" + ", "-\t\t\"    24  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    29  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"    35  iload_2 [local_2]\\n\" + ", "-\t\t\"    36  iload_3 [local_3]\\n\" + ", "+\t\t\"    35  iload_2\\n\" + ", "+\t\t\"    36  iload_3\\n\" + ", "-\t\t\"    40  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    45  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [36]\\n\" + ", "+\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [36]\\n\" + ", "-\t\t\"        [pc: 0, pc: 49] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 4, pc: 49] local: tab index: 1 type: [I\\n\";", "+\t\t\"        [pc: 0, pc: 49] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 4, pc: 49] local: tab index: 1 type: int[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12351a5815db4f166023ee0acccdb8a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  public void test051() throws JavaModelException", "signatureAfterChange": "  public void test051() throws JavaModelException", "diff": ["-\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone() }, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object) }, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize() }, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass() }, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode() }, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"method[JAVADOC_METHOD_REF]{{@link #method() }, Ljavadoc.text.BasicTestTextIns;, ()V, method, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify() }, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll() }, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"paramMethod[JAVADOC_METHOD_REF]{{@link #paramMethod(String, boolean, Object) }, Ljavadoc.text.BasicTestTextIns;, (Ljava.lang.String;ZLjava.lang.Object;)V, paramMethod, (str, flag, obj), \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString() }, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int) }, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long) }, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait() }, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns() }, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+(JAVADOC_RELEVANCE+R_INLINE_TAG)+\"}\"", "+\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone()}, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object)}, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize()}, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass()}, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode()}, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"method[JAVADOC_METHOD_REF]{{@link #method()}, Ljavadoc.text.BasicTestTextIns;, ()V, method, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify()}, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll()}, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"paramMethod[JAVADOC_METHOD_REF]{{@link #paramMethod(String, boolean, Object)}, Ljavadoc.text.BasicTestTextIns;, (Ljava.lang.String;ZLjava.lang.Object;)V, paramMethod, (str, flag, obj), \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString()}, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int)}, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long)}, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait()}, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+(JAVADOC_RELEVANCE+R_INLINE_TAG)+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19c2f9b6b6f4b7d69af07f93885f2da0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "85fe43540d2fa2b41e90fbadb73dc3c8d856ecfb", "commitAfterChange": "e60ca02f81acc7600a43413bd7fb7c0779ae6a52", "methodNumberBeforeChange": 712, "methodNumberAfterChange": 712, "signatureBeforeChange": " public void test706b()", "signatureAfterChange": " public void test706b()", "diff": ["-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tAA<CC> res = bb.test();\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tAA<CC> res = bb.test();\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\"\tBB res2 = bb.test();\\r\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tBB res2 = bb.test();\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tAA<CC> res = bb.test();\\r\\n\" + ", "-\t\t\"\t       ^^^\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tAA<CC> res = bb.test();\\n\" + ", "+\t\t\"\t             ^^^^^^^^^\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\"\tBB res2 = bb.test();\\r\\n\" + ", "-\t\t\"\t   ^^^^\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tBB res2 = bb.test();\\n\" + ", "+\t\t\"\t          ^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c883d354664d8ffca08be316883efd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 508, "methodNumberAfterChange": 508, "signatureBeforeChange": " \tpublic void test504()", "signatureAfterChange": " \tpublic void test504()", "diff": ["-\t\t\t\"    1  invokespecial java.lang.Object() [9]\\n\" + ", "+\t\t\t\"    1  invokespecial java.lang.Object() [8]\\n\" + ", "-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\\n\" + ", "-\t\t\t\"     3  new X [2]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "+\t\t\t\"     3  new X [1]\\n\" + ", "-\t\t\t\"    10  invokevirtual X.e() : XA  [30]\\n\" + ", "+\t\t\t\"    10  invokevirtual X.e() : XA [29]\\n\" + ", "-\t\t\t\"    14  getstatic XAB.CONST : XB [36]\\n\" + ", "-\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\\n\" + ", "-\t\t\t\"    20  new X [2]\\n\" + ", "+\t\t\t\"    14  getstatic XAB.CONST : XB [31]\\n\" + ", "+\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + ", "+\t\t\t\"    20  new X [1]\\n\" + ", "-\t\t\t\"    27  invokevirtual X.foo() : void  [45]\\n\" + ", "+\t\t\t\"    27  invokevirtual X.foo() : void [43]\\n\" + ", "-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "-\t\t\t\"     4  invokevirtual X.e() : XA  [30]\\n\" + ", "+\t\t\t\"     4  invokevirtual X.e() : XA [29]\\n\" + ", "-\t\t\t\"     8  getstatic XB.CONST : XB [50]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\\n\" + ", "+\t\t\t\"     8  getstatic XB.CONST : XB [48]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d14535757cf0868ce062fbf9f63659e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void testFocusWithLocalAndAnonymousTypes() throws JavaModelException", "signatureAfterChange": " public void testFocusWithLocalAndAnonymousTypes() throws JavaModelException", "diff": ["-\t\t\"  Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  Y1 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    Y2 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #2> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in field1 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in <initializer #2> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  Y1 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    Y2 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\",", "+\t\t\"  Y1 {key=Lp7/A$288;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    Y2 {key=Lp7/A$315;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> {key=Lp7/A$269;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #2> {key=Lp7/A$233;} [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> {key=Lp7/A$216;} [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> {key=Lp7/A$174;} [in field1 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> {key=Lp7/A$125;} [in <initializer #2> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  Y1 {key=Lp7/A$57;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    Y2 {key=Lp7/A$84;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> {key=Lp7/A$38;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa110115a5405f0d22a9effaa9db8e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "ebfabad4a1917d75b16b05ab15520fe9fae0850b", "commitAfterChange": "93d86f0655c98ed807648682de6277090af4d041", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic void testBug83804()", "signatureAfterChange": " \tpublic void testBug83804()", "diff": ["-\t\t\t\t\" * @see Test\\n\" +", "+\t\t\t\t\" * @see pack.Test\\n\" +", "-\t\t\t\t\" * @see Test#foo()\\n\" +", "-\t\t\t\t\" * @see Test#unknown()\\n\" +", "-\t\t\t\t\" * @see Test#field\\n\" +", "-\t\t\t\t\" * @see Test#unknown\\n\" +", "+\t\t\t\t\" * @see pack.Test#foo()\\n\" +", "+\t\t\t\t\" * @see pack.Test#unknown()\\n\" +", "+\t\t\t\t\" * @see pack.Test#field\\n\" +", "+\t\t\t\t\" * @see pack.Test#unknown\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in pack\\\\package-info.java (at line 4)\\n\" +", "-\t\t\t\"\t* @see Unknown\\n\" +", "-\t\t\t\"\t       ^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in pack\\\\package-info.java (at line 6)\\n\" +", "-\t\t\t\"\t* @see Test#unknown()\\n\" +", "-\t\t\t\"\t            ^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: The method unknown() is undefined for the type Test\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in pack\\\\package-info.java (at line 8)\\n\" +", "-\t\t\t\"\t* @see Test#unknown\\n\" +", "-\t\t\t\"\t            ^^^^^^^\\n\" +", "-\t\t\t\"Javadoc: unknown cannot be resolved or is not a field\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in pack\\\\package-info.java (at line 9)\\n\" +", "-\t\t\t\"\t* @param unexpected\\n\" +", "-\t\t\t\"\t   ^^^^^\\n\" +", "-\t\t\t\"Javadoc: Unexpected tag\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in pack\\\\package-info.java (at line 10)\\n\" +", "-\t\t\t\"\t* @throws unexpected\\n\" +", "-\t\t\t\"\t   ^^^^^^\\n\" +", "-\t\t\t\"Javadoc: Unexpected tag\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in pack\\\\package-info.java (at line 11)\\n\" +", "-\t\t\t\"\t* @return unexpected \\n\" +", "-\t\t\t\"\t   ^^^^^^\\n\" +", "-\t\t\t\"Javadoc: Unexpected tag\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in pack\\\\package-info.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @see Unknown\\n\" + ", "+\t\t\t\"\t       ^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Unknown cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in pack\\\\package-info.java (at line 6)\\n\" + ", "+\t\t\t\"\t* @see pack.Test#unknown()\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The method unknown() is undefined for the type Test\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in pack\\\\package-info.java (at line 8)\\n\" + ", "+\t\t\t\"\t* @see pack.Test#unknown\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: unknown cannot be resolved or is not a field\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in pack\\\\package-info.java (at line 9)\\n\" + ", "+\t\t\t\"\t* @param unexpected\\n\" + ", "+\t\t\t\"\t   ^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Unexpected tag\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in pack\\\\package-info.java (at line 10)\\n\" + ", "+\t\t\t\"\t* @throws unexpected\\n\" + ", "+\t\t\t\"\t   ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Unexpected tag\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in pack\\\\package-info.java (at line 11)\\n\" + ", "+\t\t\t\"\t* @return unexpected \\n\" + ", "+\t\t\t\"\t   ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Unexpected tag\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa38f90b451c857477b1011121c6b54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void test15() throws JavaModelException", "signatureAfterChange": "  \tpublic void test15() throws JavaModelException", "diff": ["-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"RuntimeException {key=Ljava/lang/RuntimeException;} [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "-\t\t\t\"InterruptedException {key=Ljava/lang/InterruptedException;} [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "+\t\t\t\"InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d113ffbd1e385566448d17dee300e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " public void testTypeRefGenericsTest12_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest12_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test12/Test.java test12.Test [public class Test extends S<\ufffd|Exception|\ufffd> {@44] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\tthis.<\ufffd|Exception|\ufffd>foo(null);@88] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\tsuper.<\ufffd|Exception|\ufffd>foo(null);@118] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\ttest.<\ufffd|RuntimeException|\ufffd>foo(null);@160] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<\ufffd|Object|\ufffd, RuntimeException, Test>bar(null);@222] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<Object, \ufffd|RuntimeException|\ufffd, Test>bar(null);@230] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<Object, RuntimeException, \ufffd|Test|\ufffd>bar(null);@248] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<\ufffd|Object|\ufffd, RuntimeException, Test>bar(null);@273] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<Object, \ufffd|RuntimeException|\ufffd, Test>bar(null);@281] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<Object, RuntimeException, \ufffd|Test|\ufffd>bar(null);@299] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<\ufffd|Object|\ufffd, RuntimeException, Test>bar(null);@336] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<Object, \ufffd|RuntimeException|\ufffd, Test>bar(null);@344] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<Object, RuntimeException, \ufffd|Test|\ufffd>bar(null);@362] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.S.bar(S) [\t<T, U extends Exception, V extends S<\ufffd|R|\ufffd>>void bar(S s) {}@464] EXACT_MATCH\"", "+\t\t\"src/test12/Test.java test12.Test [public class Test extends S<!|Exception|!> {@44] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\tthis.<!|Exception|!>foo(null);@88] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\tsuper.<!|Exception|!>foo(null);@118] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\ttest.<!|RuntimeException|!>foo(null);@160] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<!|Object|!, RuntimeException, Test>bar(null);@222] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<Object, !|RuntimeException|!, Test>bar(null);@230] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<Object, RuntimeException, !|Test|!>bar(null);@248] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<!|Object|!, RuntimeException, Test>bar(null);@273] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<Object, !|RuntimeException|!, Test>bar(null);@281] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<Object, RuntimeException, !|Test|!>bar(null);@299] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<!|Object|!, RuntimeException, Test>bar(null);@336] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<Object, !|RuntimeException|!, Test>bar(null);@344] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<Object, RuntimeException, !|Test|!>bar(null);@362] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.S.bar(S) [\t<T, U extends Exception, V extends S<!|R|!>>void bar(S s) {}@464] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28b43780047e664d6966045669cb2a43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testBug95521b()", "signatureAfterChange": " \tpublic void testBug95521b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28ca7bc6fb4326507997009685e8508d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument05() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a5a92776a65fd1171641e24051cc034", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "2b4c0c83b12b1c032c6ad731daa6c0a2ef397473", "commitAfterChange": "bcd9f90c4bf8ea31b98c4f2aa0b3396ae50236cb", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public void testRootGetPackageFragments3() throws CoreException", "signatureAfterChange": " public void testRootGetPackageFragments3() throws CoreException", "diff": ["-\t\tIJavaProject p1 = createJavaProject(\"P1\");", "+\t\tIJavaProject p1 = createJavaProject(\"Bug65693_1\");", "-\t\t\t\"/P1/X.java\",", "+\t\t\t\"/Bug65693_1/X.java\",", "-\t\tgetProject(\"P1\").build(IncrementalProjectBuilder.FULL_BUILD, null);", "-\t\tIJavaProject p2 = createJavaProject(\"P2\");", "+\t\tgetProject(\"Bug65693_1\").build(IncrementalProjectBuilder.FULL_BUILD, null);", "+\t\tIJavaProject p2 = createJavaProject(\"Bug65693_2\");", "-\t\t\t\"/P2/.classpath\",", "+\t\t\t\"/Bug65693_2/.classpath\",", "-\t\t\t\"    <classpathentry kind=\\\"lib\\\" path=\\\"/P1\\\"/>\\n\" +", "+\t\t\t\"    <classpathentry kind=\\\"lib\\\" path=\\\"/Bug65693_1\\\"/>\\n\" +", "-\t\t\t\"Unexpected packages for P1\",", "-\t\t\t\"X.java [in <default> [in <project root> [in P1]]]\",", "+\t\t\t\"Unexpected packages for Bug65693_1\",", "+\t\t\t\"X.java [in <default> [in <project root> [in Bug65693_1]]]\",", "-\t\t\t\"Unexpected packages for P2\",", "-\t\t\t\"X.class [in <default> [in /P1 [in P2]]]\",", "+\t\t\t\"Unexpected packages for Bug65693_2\",", "+\t\t\t\"X.class [in <default> [in /Bug65693_1 [in Bug65693_2]]]\",", "-\t\tdeleteProject(\"P1\");", "-\t\tdeleteProject(\"P2\");", "+\t\tdeleteProject(\"Bug65693_1\");", "+\t\tdeleteProject(\"Bug65693_2\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a95c0d371f0d9d08204cde523c200ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testJavadocTypeReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocTypeReferenceWithJavadoc() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [j1.JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [j1.JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\",", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [j1.JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [j1.JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e6521c988c4d3bf4b55b9a92fb65c8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testParameterizedTypeMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30b09d663340f4402c8c2b9ef89ef94f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/TestVerifier.java", "commitBeforeChange": "13ddaed1183f3b1cf1f564ae1899ec423c4435d7", "commitAfterChange": "579829d4867b5583bfe72f32f009d0dbea13c114", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private String getVerifyTestsCode()", "signatureAfterChange": " private String getVerifyTestsCode()", "diff": ["-\t\t\"/*******************************************************************************\\n\" + ", "-\t\t\" * Copyright (c) 2000, 2004 IBM Corporation and others.\\n\" + ", "-\t\t\" * All rights reserved. This program and the accompanying materials \\n\" + ", "-\t\t\" * are made available under the terms of the Common Public License v1.0\\n\" + ", "-\t\t\" * which accompanies this distribution, and is available at\\n\" + ", "-\t\t\" * http://www.eclipse.org/legal/cpl-v10.html\\n\" + ", "-\t\t\" * \\n\" + ", "-\t\t\" * Contributors:\\n\" + ", "-\t\t\" *     IBM Corporation - initial API and implementation\\n\" + ", "-\t\t\" *******************************************************************************/\\n\" + ", "+\t\t\"/*******************************************************************************\" +", "+\t\t\" * Copyright (c) 2000, 2005 IBM Corporation and others.\" +", "+\t\t\" * All rights reserved. This program and the accompanying materials\" +", "+\t\t\" * are made available under the terms of the Eclipse Public License v1.0\" +", "+\t\t\" * which accompanies this distribution, and is available at\" +", "+\t\t\" * http://www.eclipse.org/legal/epl-v10.html\" +", "+\t\t\" *\" +", "+\t\t\" * Contributors:\" +", "+\t\t\" *     IBM Corporation - initial API and implementation\" +", "+\t\t\" *******************************************************************************/\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30b7f31250d90ef8ea71aa1e30943ccf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void test103()", "signatureAfterChange": " \tpublic void test103()", "diff": ["-\t\t\t\"     0  new X [2]\\n\" + ", "+\t\t\t\"     0  new X [1]\\n\" + ", "-\t\t\t\"     4  new BX [27]\\n\" + ", "+\t\t\t\"     4  new BX [26]\\n\" + ", "-\t\t\t\"    11  invokespecial X(AX) [30]\\n\" + ", "+\t\t\t\"    11  invokespecial X(AX) [29]\\n\" + ", "-\t\t\t\"    16  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    19  checkcast BX [27]\\n\" + ", "-\t\t\t\"    22  ldc <String \\\"SUCC\\\"> [32]\\n\" + ", "-\t\t\t\"    24  invokevirtual BX.foo(java.lang.Object) : void  [36]\\n\" + ", "+\t\t\t\"    16  getfield X.t : AX [16]\\n\" + ", "+\t\t\t\"    19  checkcast BX [26]\\n\" + ", "+\t\t\t\"    22  ldc <String \\\"SUCC\\\"> [31]\\n\" + ", "+\t\t\t\"    24  invokevirtual BX.foo(java.lang.Object) : void [33]\\n\" + ", "-\t\t\t\"    28  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    31  checkcast BX [27]\\n\" + ", "-\t\t\t\"    34  ldc <String \\\"ESS\\\"> [38]\\n\" + ", "-\t\t\t\"    36  invokevirtual BX.bar(java.lang.Object) : void  [41]\\n\" + ", "+\t\t\t\"    28  getfield X.t : AX [16]\\n\" + ", "+\t\t\t\"    31  checkcast BX [26]\\n\" + ", "+\t\t\t\"    34  ldc <String \\\"ESS\\\"> [37]\\n\" + ", "+\t\t\t\"    36  invokevirtual BX.bar(java.lang.Object) : void [39]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30fde1399dedbc9e7b0dcf75b22c3512", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test020()", "signatureAfterChange": " public void test020()", "diff": ["-\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     7  ldc <String \\\"SUC\\\"> [23]\\n\" + ", "-\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"     7  ldc <String \\\"SUC\\\"> [22]\\n\" + ", "+\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    27  ldc <String \\\"1x\\\"> [31]\\n\" + ", "-\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    27  ldc <String \\\"1x\\\"> [30]\\n\" + ", "+\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    43  ldc <String \\\"CESS\\\"> [33]\\n\" + ", "-\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [36]\\n\" + ", "+\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    43  ldc <String \\\"CESS\\\"> [32]\\n\" + ", "+\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void [34]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "328ff8d09447b4e55b85a2d6bdcb3188", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryException [Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryExceptionArray [Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Table<String, Exception>.Entry<String, Exception>[]>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [g6.t.def.Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [g6.t.def.Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryException [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34a40c0d9a8352a5be8d8d046d6d7fe4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAB03() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAB03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_qmk [Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_obj [g1.t.m.def.Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_qmk [g1.t.m.def.Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_thr [g1.t.m.def.Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_run [g1.t.m.def.Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [g1.t.m.def.Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [g1.t.m.def.Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [g1.t.m.def.Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "378baca025456d40dab30ebfc9445699", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void test14() throws JavaModelException", "signatureAfterChange": "  \tpublic void test14() throws JavaModelException", "diff": ["-\t\t\t\"Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3963f790d08d9b394df461c75e10ed24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testStringAnyStrings04() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Member] EXACT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Member] EXACT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39b6ca10d1b427ab386dfe70533620d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a98b8c6526d622cfa2be2756ee01a1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void testRegion4() throws CoreException", "signatureAfterChange": " public void testRegion4() throws CoreException", "diff": ["-\t\t\t\"  Class [in Class.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "+\t\t\t\"  Class [in Class.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "-\t\t\t\"  String [in String.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"    Error [in Error.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"      CloneNotSupportedException [in CloneNotSupportedException.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"        IllegalMonitorStateException [in IllegalMonitorStateException.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"      InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"      RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"    Exception [in Exception.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "-\t\t\t\"  Throwable [in Throwable.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P1]]]]\\n\" + ", "+\t\t\t\"  String [in String.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"    Error [in Error.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"      CloneNotSupportedException [in CloneNotSupportedException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"        IllegalMonitorStateException [in IllegalMonitorStateException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"      InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"      RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"    Exception [in Exception.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + ", "+\t\t\t\"  Throwable [in Throwable.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b04a4cb7d44beb2bb1ea1341e2add1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "  \tpublic void test106()", "signatureAfterChange": "  \tpublic void test106()", "diff": ["-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: VisibilityPublic cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b06cc0612c8b167ac41b3c2b0a91a17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bfcf9b26d6e4144cb0c2640d02cc59095e635771", "commitAfterChange": "dcd57d09638877b63364224680d27d9dec37d5fa", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void _test035()", "signatureAfterChange": " public void test035()", "diff": ["-// TODO (philippe) Disabled as this test fails in HEAD stream", "-public void _test035() { ", "+public void test035() { ", "-\t\t\t\"  // Method descriptor #23 (LIFoo;)V\\n\" + ", "-\t\t\t\"  // Signature: (TT;)V\\n\" + ", "-\t\t\t\"  // Stack: 2, Locals: 4\\n\" + ", "-\t\t\t\"  void foo(IFoo t);\\n\" + ", "-\t\t\t\"     0  aload_1 [t]\\n\" + ", "-\t\t\t\"     1  invokeinterface IFoo.iterator() : java.util.Iterator  [35] [nargs: 1]\\n\" + ", "-\t\t\t\"     6  astore_3\\n\" + ", "-\t\t\t\"     7  goto 27\\n\" + ", "-\t\t\t\"    10  aload_3\\n\" + ", "-\t\t\t\"    11  invokeinterface java.util.Iterator.next() : java.lang.Object  [41] [nargs: 1]\\n\" + ", "-\t\t\t\"    16  checkcast java.lang.String [43]\\n\" + ", "-\t\t\t\"    19  astore_2 [s]\\n\" + ", "-\t\t\t\"    20  getstatic java.lang.System.out : java.io.PrintStream [49]\\n\" + ", "-\t\t\t\"    23  aload_2 [s]\\n\" + ", "-\t\t\t\"    24  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [55]\\n\" + ", "-\t\t\t\"    27  aload_3\\n\" + ", "-\t\t\t\"    28  invokeinterface java.util.Iterator.hasNext() : boolean  [59] [nargs: 1]\\n\" + ", "-\t\t\t\"    33  ifne 10\\n\" + ", "-\t\t\t\"    36  getstatic java.lang.System.out : java.io.PrintStream [49]\\n\" + ", "-\t\t\t\"    39  invokevirtual java.io.PrintStream.println() : void  [62]\\n\" + ", "-\t\t\t\"    42  return\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 8]\\n\" + ", "-\t\t\t\"        [pc: 20, line: 9]\\n\" + ", "-\t\t\t\"        [pc: 27, line: 8]\\n\" + ", "-\t\t\t\"        [pc: 36, line: 11]\\n\" + ", "-\t\t\t\"        [pc: 42, line: 12]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 43] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 43] local: t index: 1 type: IFoo\\n\" + ", "-\t\t\t\"        [pc: 20, pc: 36] local: s index: 2 type: java.lang.String\\n\" + ", "-\t\t\t\"      Local variable type table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 43] local: this index: 0 type: X<T>\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 43] local: t index: 1 type: T\\n\";", "+\t\t\"  // Method descriptor #25 (LIFoo;)V\\n\" + ", "+\t\t\"  // Signature: (TT;)V\\n\" + ", "+\t\t\"  // Stack: 2, Locals: 4\\n\" + ", "+\t\t\"  void foo(IFoo t);\\n\" + ", "+\t\t\"     0  aload_1 [t]\\n\" + ", "+\t\t\"     1  invokeinterface IFoo.iterator() : java.util.Iterator [30] [nargs: 1]\\n\" + ", "+\t\t\"     6  astore_3\\n\" + ", "+\t\t\"     7  goto 27\\n\" + ", "+\t\t\"    10  aload_3\\n\" + ", "+\t\t\"    11  invokeinterface java.util.Iterator.next() : java.lang.Object [36] [nargs: 1]\\n\" + ", "+\t\t\"    16  checkcast java.lang.String [42]\\n\" + ", "+\t\t\"    19  astore_2 [s]\\n\" + ", "+\t\t\"    20  getstatic java.lang.System.out : java.io.PrintStream [44]\\n\" + ", "+\t\t\"    23  aload_2 [s]\\n\" + ", "+\t\t\"    24  invokevirtual java.io.PrintStream.print(java.lang.String) : void [50]\\n\" + ", "+\t\t\"    27  aload_3\\n\" + ", "+\t\t\"    28  invokeinterface java.util.Iterator.hasNext() : boolean [56] [nargs: 1]\\n\" + ", "+\t\t\"    33  ifne 10\\n\" + ", "+\t\t\"    36  getstatic java.lang.System.out : java.io.PrintStream [44]\\n\" + ", "+\t\t\"    39  invokevirtual java.io.PrintStream.println() : void [60]\\n\" + ", "+\t\t\"    42  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 8]\\n\" + ", "+\t\t\"        [pc: 20, line: 9]\\n\" + ", "+\t\t\"        [pc: 27, line: 8]\\n\" + ", "+\t\t\"        [pc: 36, line: 11]\\n\" + ", "+\t\t\"        [pc: 42, line: 12]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 43] local: this index: 0 type: X\\n\" + ", "+\t\t\"        [pc: 0, pc: 43] local: t index: 1 type: IFoo\\n\" + ", "+\t\t\"        [pc: 20, pc: 36] local: s index: 2 type: java.lang.String\\n\" + ", "+\t\t\"      Local variable type table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 43] local: this index: 0 type: X<T>\\n\" + ", "+\t\t\"        [pc: 0, pc: 43] local: t index: 1 type: T\\n\";", "-\t}\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ee1aeb5a1fceb88a47b643447b9db7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " \tpublic void test103()", "signatureAfterChange": " \tpublic void test103()", "diff": ["-\t\t\t\"     8  invokespecial BX.<init>()V [28]\\n\" + ", "-\t\t\t\"    11  invokespecial X.<init>(LAX;)V [30]\\n\" + ", "+\t\t\t\"     8  invokespecial BX() [28]\\n\" + ", "+\t\t\t\"    11  invokespecial X(AX) [30]\\n\" + ", "-\t\t\t\"    16  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    16  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    24  invokevirtual BX.foo(Ljava/lang/Object;)V [36]\\n\" + ", "+\t\t\t\"    24  invokevirtual BX.foo(java.lang.Object) : void  [36]\\n\" + ", "-\t\t\t\"    28  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    28  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    36  invokevirtual BX.bar(Ljava/lang/Object;)V [41]\\n\" + ", "+\t\t\t\"    36  invokevirtual BX.bar(java.lang.Object) : void  [41]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 40] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 15, pc: 40] local: x index: 1 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 40] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 15, pc: 40] local: x index: 1 type: X\\n\" + ", "-\t\t\t\"        [pc: 15, pc: 40] local: x index: 1 type: LX<+LBX;>;\\n\";", "+\t\t\t\"        [pc: 15, pc: 40] local: x index: 1 type: X<? extends BX>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f55ad2b84644fe215ba23ce5b37d519", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 370, "methodNumberAfterChange": 370, "signatureBeforeChange": " \tpublic void test366()", "signatureAfterChange": " \tpublic void test366()", "diff": ["-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4013aa9939dd2c3859cbd6b4b66d55f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": " \tpublic void test227()", "signatureAfterChange": " \tpublic void test227()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "410438d5d91037d7689b3a1e74c27281", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     7  ldc <String \\\"SUC\\\"> [23]\\n\" + ", "-\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"     7  ldc <String \\\"SUC\\\"> [22]\\n\" + ", "+\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    27  ldc <String \\\"1x\\\"> [31]\\n\" + ", "-\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    27  ldc <String \\\"1x\\\"> [30]\\n\" + ", "+\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    43  ldc <String \\\"CESS\\\"> [33]\\n\" + ", "-\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [36]\\n\" + ", "+\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    43  ldc <String \\\"CESS\\\"> [32]\\n\" + ", "+\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void [34]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4166bcac9d0a9812e8e7d37710108228", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic void testStringNestedMultipleArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<GM<?, ?, ?>.Member,GM<?, ?, ?>.Member,GM<?, ?, ?>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<GM<?, ?, ?>.Member,GM<?, ?, ?>.Member,GM<?, ?, ?>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_wld [GM<GS<?>.Member, GS<?>.Member, GS<?>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_www [GM<GS<?>.Member, GS<GS<?>.Member>.Member, GS<GS<GS<?>.Member>.Member>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_obj [GM<GS<Object>.Member, GS<? extends Throwable>.Member, GS<? super RuntimeException>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_wld [GM<GS<?>.Member, GS<?>.Member, GS<?>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_www [GM<GS<?>.Member, GS<GS<?>.Member>.Member, GS<GS<GS<?>.Member>.Member>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_obj [GM<GS<Object>.Member, GS<? extends Throwable>.Member, GS<? super RuntimeException>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [g3.t.def.GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_wld [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_www [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<g3.t.def.GS<?>.Member>.Member, g3.t.def.GS<g3.t.def.GS<g3.t.def.GS<?>.Member>.Member>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_obj [g3.t.def.GM<g3.t.def.GS<java.lang.Object>.Member, g3.t.def.GS<? extends java.lang.Throwable>.Member, g3.t.def.GS<? super java.lang.RuntimeException>.Member>.Member] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [g3.t.def.GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_wld [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_www [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<g3.t.def.GS<?>.Member>.Member, g3.t.def.GS<g3.t.def.GS<g3.t.def.GS<?>.Member>.Member>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_obj [g3.t.def.GM<g3.t.def.GS<java.lang.Object>.Member, g3.t.def.GS<? extends java.lang.Throwable>.Member, g3.t.def.GS<? super java.lang.RuntimeException>.Member>.Member] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45fe77ebbb045df9293caa2bcf498769", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0abf1a88cee9e21e8cd45da161c46e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  public void test052() throws JavaModelException", "signatureAfterChange": "  public void test052() throws JavaModelException", "diff": ["-\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone() }, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object) }, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize() }, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass() }, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode() }, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"method[JAVADOC_METHOD_REF]{{@link #method() }, Ljavadoc.text.BasicTestTextIns;, ()V, method, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify() }, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll() }, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"paramMethod[JAVADOC_METHOD_REF]{{@link #paramMethod(String, boolean, Object) }, Ljavadoc.text.BasicTestTextIns;, (Ljava.lang.String;ZLjava.lang.Object;)V, paramMethod, (str, flag, obj), \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString() }, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int) }, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long) }, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait() }, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns() }, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+(JAVADOC_RELEVANCE+R_INLINE_TAG)+\"}\"", "+\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone()}, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object)}, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize()}, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass()}, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode()}, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"method[JAVADOC_METHOD_REF]{{@link #method()}, Ljavadoc.text.BasicTestTextIns;, ()V, method, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify()}, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll()}, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"paramMethod[JAVADOC_METHOD_REF]{{@link #paramMethod(String, boolean, Object)}, Ljavadoc.text.BasicTestTextIns;, (Ljava.lang.String;ZLjava.lang.Object;)V, paramMethod, (str, flag, obj), \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString()}, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int)}, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long)}, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait()}, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+(JAVADOC_RELEVANCE+R_INLINE_TAG)+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e3b8df03449aff88658d2aa6d24ddae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test17() throws JavaModelException", "signatureAfterChange": "  \tpublic void test17() throws JavaModelException", "diff": ["-\t\t\t\"Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e65ec7b53d9125cf3e2dd682f747ba0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tpublic void test050e()", "signatureAfterChange": " \tpublic void test050e()", "diff": ["-\t\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method c(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method c(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method c(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method c(A<Number>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ec45749dcbae03099323bd7fe099fe3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 509, "methodNumberAfterChange": 509, "signatureBeforeChange": " \tpublic void test505()", "signatureAfterChange": " \tpublic void test505()", "diff": ["-\t\t\t\"    1  invokespecial java.lang.Object() [13]\\n\" + ", "+\t\t\t\"    1  invokespecial java.lang.Object() [12]\\n\" + ", "-\t\t\t\"     0  new X [2]\\n\" + ", "+\t\t\t\"     0  new X [1]\\n\" + ", "-\t\t\t\"     7  invokevirtual X.foo() : void  [25]\\n\" + ", "+\t\t\t\"     7  invokevirtual X.foo() : void [23]\\n\" + ", "-\t\t\t\"     0  new X$1 [29]\\n\" + ", "+\t\t\t\"     0  new X$1 [28]\\n\" + ", "-\t\t\t\"     5  invokespecial X$1(X) [32]\\n\" + ", "-\t\t\t\"     8  invokevirtual X$1.run() : void  [35]\\n\" + ", "-\t\t\t\"    11  getstatic java.lang.System.out : java.io.PrintStream [41]\\n\" + ", "+\t\t\t\"     5  invokespecial X$1(X) [30]\\n\" + ", "+\t\t\t\"     8  invokevirtual X$1.run() : void [33]\\n\" + ", "+\t\t\t\"    11  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "-\t\t\t\"    15  getfield X.e : XA [43]\\n\" + ", "+\t\t\t\"    15  getfield X.e : XA [42]\\n\" + ", "-\t\t\t\"    19  getstatic XB.CONST : XB [49]\\n\" + ", "-\t\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [55]\\n\" + ", "+\t\t\t\"    19  getstatic XB.CONST : XB [44]\\n\" + ", "+\t\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [50]\\n\" + ", "-\t\t\t\"    [inner class info: #29 X$1, outer class info: #0\\n\" + ", "+\t\t\t\"    [inner class info: #28 X$1, outer class info: #0\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52241e94aaeb358d8867b8fa21e364d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void testModifiers4()", "signatureAfterChange": " \tpublic void testModifiers4()", "diff": ["-\t\t\t\"    public abstract void foo2() default {}\\n\" +", "-\t\t\t\"    abstract void foo3() default {}\\n\" +", "+\t\t\t\"    public abstract default void foo2() {}\\n\" +", "+\t\t\t\"    default abstract void foo3() {}\\n\" +", "-\t\t\t\"    abstract static void foo5() default {}\\n\" + // double fault", "+\t\t\t\"    abstract static default void foo5() {}\\n\" + // double fault", "-\t\t\t\"\tpublic abstract void foo2() default {}\\n\" +", "-\t\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\t\"\tpublic abstract default void foo2() {}\\n\" +", "+\t\t\t\"\t                             ^^^^^^\\n\" +", "-\t\t\t\"\tabstract void foo3() default {}\\n\" +", "-\t\t\t\"\t              ^^^^^^\\n\" +", "+\t\t\t\"\tdefault abstract void foo3() {}\\n\" +", "+\t\t\t\"\t                      ^^^^^^\\n\" +", "-\t\t\t\"\tabstract static void foo5() default {}\\n\" +", "-\t\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\t\"\tabstract static default void foo5() {}\\n\" +", "+\t\t\t\"\t                             ^^^^^^\\n\" +", "-\t\t\t\"\tabstract static void foo5() default {}\\n\" +", "-\t\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\t\"\tabstract static default void foo5() {}\\n\" +", "+\t\t\t\"\t                             ^^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "544be68d1617ebc58b9bc5b98a20aa14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "26d507f9337456ca82e52ed896177b679ad9ed51", "commitAfterChange": "6954f6f09ec0fa4357c31e7abaa82f5c7cd86dbc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate boolean examineIsDeprecated()", "signatureAfterChange": " \tprivate boolean examineIsDeprecated()", "diff": ["-\t\t\treportError(\"Couldn't find targets.model.pc.Deprecation\");", "+\t\t\treportError(\"examineIsDeprecated: Couldn't find targets.model.pc.Deprecation\");", "-\t\t\treportError(\"Could not find methods Deprecation.deprecatedMethod() or Deprecation.nonDeprecatedMethod()\");", "+\t\t\treportError(\"examineIsDeprecated: Could not find methods Deprecation.deprecatedMethod() or Deprecation.nonDeprecatedMethod()\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.nonDeprecatedMethod()) is true\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.nonDeprecatedMethod()) is true\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.deprecatedMethod()) is false\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.deprecatedMethod()) is false\");", "-\t\t\treportError(\"Could not find methods Deprecation.deprecatedClass() or Deprecation.nonDeprecatedClass()\");", "+\t\t\treportError(\"examineIsDeprecated: Could not find methods Deprecation.deprecatedClass() or Deprecation.nonDeprecatedClass()\");", "-\t\t\treportError(\"Could not find methods Deprecation.deprecatedInterface() or Deprecation.nonDeprecatedInterface()\");", "+\t\t\treportError(\"examineIsDeprecated: Could not find methods Deprecation.deprecatedInterface() or Deprecation.nonDeprecatedInterface()\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.nonDeprecatedClass()) is true\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.nonDeprecatedClass()) is true\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.deprecatedClass()) is false\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.deprecatedClass()) is false\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.nonDeprecatedInterface()) is true\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.nonDeprecatedInterface()) is true\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.deprecatedInterface()) is false\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.deprecatedInterface()) is false\");", "-\t\t\treportError(\"Couldn't find class Deprecation.deprecatedClass\");", "+\t\t\treportError(\"examineIsDeprecated: Couldn't find class Deprecation.deprecatedClass\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5881944ff43b82dd6c97d70b5f2726e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAB04() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAB04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_qmk [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_obj [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_exc [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_qmk [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_thr [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_run [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [g1.t.m.def.NonGeneric.GenericMember] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5947bdd449eb3ff1b8c6e5f1528ea75f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void testTypeSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testTypeSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [g1.t.s.def.Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] ERASURE_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] ERASURE_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dcc30473b0ba07728cc40b3c3572b3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": " \tpublic void test050j()", "signatureAfterChange": " \tpublic void test050j()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\t<N> B a(A<Number> n) { return null; }\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<N> B a(A<Number> n) { return null; }\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\r\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\n\" + ", "-\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" + ", "+\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\t\"\t<N> B b(A<String> n) { return null; }\\r\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t<N> B b(A<String> n) { return null; }\\n\" + ", "-\t\t\t\"Duplicate method b(A<String>) in type X\\n\" + ", "+\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e8c29ca1936122ead93d1aed3bf4d77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "\r public void test0075() throws IOException", "signatureAfterChange": "\r public void test0075() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@I\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{2}\", locations.get(\"@J\"));\r", "-\tassertEquals(\"Wrong location\", \"{3}\", locations.get(\"@A\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,0}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,0,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,0,0,1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,0,0,2}\", locations.get(\"@H\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,1}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,1,0,0}\", locations.get(\"@D\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY]\", locations.get(\"@I\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY]\", locations.get(\"@J\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY]\", locations.get(\"@A\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0)]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY]\", locations.get(\"@D\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65273e07d823a9ad918c6e8d45f143ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void testFieldReferenceBug73112b() throws CoreException", "signatureAfterChange": " public void testFieldReferenceBug73112b() throws CoreException", "diff": ["-\t\tgetJavaSearchScope(), ", "+\t\tgetJavaSearchScopeBugs(), ", "-\t\t\"src/bug73112/B.java bug73112.B.fieldB73112a [fieldB73112a]\\n\" + ", "-\t\t\"src/bug73112/B.java bug73112.B.fieldB73112b [fieldB73112b]\\n\" + ", "-\t\t\"src/bug73112/B.java bug73112.B.fieldB73112c [fieldB73112c]\\n\" + ", "-\t\t\"src/bug73112/B.java bug73112.B.fieldB73112c [fieldB73112a]\\n\" + ", "-\t\t\"src/bug73112/B.java bug73112.B.fieldB73112c [fieldB73112b]\\n\" + ", "-\t\t\"src/bug73112/B.java bug73112.B.fieldB73112d [fieldB73112d]\\n\" + ", "-\t\t\"src/bug73112/B.java bug73112.B.fieldB73112d [fieldB73112c]\\n\" + ", "-\t\t\"src/bug73112/B.java bug73112.B.fieldB73112d [fieldB73112a]\\n\" + ", "-\t\t\"src/bug73112/B.java bug73112.B.fieldB73112e [fieldB73112e]\",", "+\t\t\"src/b73112/B.java b73112.B.fieldB73112a [fieldB73112a]\\n\" + ", "+\t\t\"src/b73112/B.java b73112.B.fieldB73112b [fieldB73112b]\\n\" + ", "+\t\t\"src/b73112/B.java b73112.B.fieldB73112c [fieldB73112c]\\n\" + ", "+\t\t\"src/b73112/B.java b73112.B.fieldB73112c [fieldB73112a]\\n\" + ", "+\t\t\"src/b73112/B.java b73112.B.fieldB73112c [fieldB73112b]\\n\" + ", "+\t\t\"src/b73112/B.java b73112.B.fieldB73112d [fieldB73112d]\\n\" + ", "+\t\t\"src/b73112/B.java b73112.B.fieldB73112d [fieldB73112c]\\n\" + ", "+\t\t\"src/b73112/B.java b73112.B.fieldB73112d [fieldB73112a]\\n\" + ", "+\t\t\"src/b73112/B.java b73112.B.fieldB73112e [fieldB73112e]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "671a4e3282689aa62eb0043c5ebbdc7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void test15() throws JavaModelException", "signatureAfterChange": "  \tpublic void test15() throws JavaModelException", "diff": ["-\t\t\t\"Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"xxx [in foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"str [in foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"xxx [in foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"str [in foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "671f0456acace8ed01d8f6debed9e03b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test024()", "signatureAfterChange": " public void test024()", "diff": ["-\t\t\"     1  anewarray java.lang.String [17]\\n\" + ", "+\t\t\"     1  anewarray java.lang.String [16]\\n\" + ", "-\t\t\"     6  ldc <String \\\"SUCCESS\\\"> [19]\\n\" + ", "+\t\t\"     6  ldc <String \\\"SUCCESS\\\"> [18]\\n\" + ", "-\t\t\"    10  new java.util.ArrayList [21]\\n\" + ", "+\t\t\"    10  new java.util.ArrayList [20]\\n\" + ", "-\t\t\"    40  invokeinterface java.util.List.add(java.lang.Object) : boolean  [28] [nargs: 2]\\n\" + ", "+\t\t\"    40  invokeinterface java.util.List.add(java.lang.Object) : boolean [23] [nargs: 2]\\n\" + ", "-\t\t\"    57  invokeinterface java.util.List.iterator() : java.util.Iterator  [32] [nargs: 1]\\n\" + ", "+\t\t\"    57  invokeinterface java.util.List.iterator() : java.util.Iterator [29] [nargs: 1]\\n\" + ", "-\t\t\"    69  invokeinterface java.util.Iterator.next() : java.lang.Object  [38] [nargs: 1]\\n\" + ", "+\t\t\"    69  invokeinterface java.util.Iterator.next() : java.lang.Object [33] [nargs: 1]\\n\" + ", "-\t\t\"    75  getstatic java.lang.System.out : java.io.PrintStream [44]\\n\" + ", "+\t\t\"    75  getstatic java.lang.System.out : java.io.PrintStream [39]\\n\" + ", "-\t\t\"    79  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [50]\\n\" + ", "+\t\t\"    79  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [45]\\n\" + ", "-\t\t\"    84  invokeinterface java.util.Iterator.hasNext() : boolean  [54] [nargs: 1]\\n\" + ", "+\t\t\"    84  invokeinterface java.util.Iterator.hasNext() : boolean [51] [nargs: 1]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bacbe871dbdfce7a74b2129f2121cd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7ae58cbb90a0e72a8dd69c0cd98dc1505a8668bf", "commitAfterChange": "4a1a6051dae9d70af8f16177f47bcc456f4eca12", "methodNumberBeforeChange": 476, "methodNumberAfterChange": 476, "signatureBeforeChange": " \tpublic void test472()", "signatureAfterChange": " \tpublic void test0472()", "diff": ["-\tpublic void test472() {", "+\tpublic void test0472() {", "-\t\t\t\t\"test2/FooBar.java\",", "-\t\t\t\t\"package test2; \\n\" + ", "+\t\t\t\t\"test02/FooBar.java\",", "+\t\t\t\t\"package test02; \\n\" + ", "-\t\t\t\"1. ERROR in test2\\\\FooBar.java (at line 6)\\n\" + ", "+\t\t\t\"1. ERROR in test02\\\\FooBar.java (at line 6)\\n\" + ", "-\t\t\t\"2. ERROR in test2\\\\FooBar.java (at line 7)\\n\" + ", "+\t\t\t\"2. ERROR in test02\\\\FooBar.java (at line 7)\\n\" + ", "-\t\t\t\"3. ERROR in test2\\\\FooBar.java (at line 8)\\n\" + ", "+\t\t\t\"3. ERROR in test02\\\\FooBar.java (at line 8)\\n\" + ", "-\t\t\t\"4. ERROR in test2\\\\FooBar.java (at line 9)\\n\" + ", "+\t\t\t\"4. ERROR in test02\\\\FooBar.java (at line 9)\\n\" + ", "-\t\t\t\"5. ERROR in test2\\\\FooBar.java (at line 10)\\n\" + ", "+\t\t\t\"5. ERROR in test02\\\\FooBar.java (at line 10)\\n\" + ", "-\t\t\t\"6. ERROR in test2\\\\FooBar.java (at line 11)\\n\" + ", "+\t\t\t\"6. ERROR in test02\\\\FooBar.java (at line 11)\\n\" + ", "-\t\t\t\"7. ERROR in test2\\\\FooBar.java (at line 12)\\n\" + ", "+\t\t\t\"7. ERROR in test02\\\\FooBar.java (at line 12)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bcb4a5e248728281b943dfe2ffc17d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember<Object>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember<Exception>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember<? super RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember<Object>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember<Exception>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember<? super RuntimeException>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember<? extends Throwable>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember<? super RuntimeException>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c9070a09cad2ad38e7c079b768073e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testBug95521b()", "signatureAfterChange": " \tpublic void testBug95521b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d2b99106fcb2b37c8f63f928de3cb01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tpublic void test032()", "signatureAfterChange": " \t \tpublic void test032()", "diff": ["-\t\t\t\"     0  new java.lang.Integer [17]\\n\" + ", "+\t\t\t\"     0  new java.lang.Integer [16]\\n\" + ", "-\t\t\t\"     5  invokespecial java.lang.Integer(int) [20]\\n\" + ", "-\t\t\t\"     8  new java.lang.Integer [17]\\n\" + ", "+\t\t\t\"     5  invokespecial java.lang.Integer(int) [18]\\n\" + ", "+\t\t\t\"     8  new java.lang.Integer [16]\\n\" + ", "-\t\t\t\"    13  invokespecial java.lang.Integer(int) [20]\\n\" + ", "+\t\t\t\"    13  invokespecial java.lang.Integer(int) [18]\\n\" + ", "-\t\t\t\"    19  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"    22  invokevirtual java.io.PrintStream.println() : void  [31]\\n\" + ", "-\t\t\t\"    25  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"    28  ldc <String \\\"SUCCESS\\\"> [33]\\n\" + ", "-\t\t\t\"    30  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [37]\\n\" + ", "+\t\t\t\"    19  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    22  invokevirtual java.io.PrintStream.println() : void [27]\\n\" + ", "+\t\t\t\"    25  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    28  ldc <String \\\"SUCCESS\\\"> [32]\\n\" + ", "+\t\t\t\"    30  invokevirtual java.io.PrintStream.print(java.lang.String) : void [34]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e68b1816736387ae75f2fcff3421bb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "be3076081a68f52e55442746b375d20d2f473b0c", "commitAfterChange": "85a51230859ba76a62ce4d566f4cbd47aac06488", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-", "+\t// TODO (kent) split in smaller test cases", "-\t\t\t\"Inexact parameter for the vararg method byte2(byte[][]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method byte2(byte[][]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object2(Object[][]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object2(Object[][]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object2(Object[][]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object2(Object[][]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object2(Object[][]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object2(Object[][]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method string(String[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method string(String[]) from the type Y\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "700b49e8bfc7d1f36ad51f8abb563849", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testBug198074_c3b() throws JavaModelException", "signatureAfterChange": " public void testBug198074_c3b() throws JavaModelException", "diff": ["-\t\t\"             + \\\" nommbr=\\'\\\"+getName()+\\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" nomgrp=\\'\\\"+getService().getArgtbl()+\\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" typmbr=\\'\\\"+getMemberType().getArgument()+\\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" srcpat=\\'\\\"+getPhysicalPath()+\\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" nommdl=\\'\\\"+getModel()+\\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" nommbr=\\'\\\"+getName()+\\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" nomgrp=\\'\\\"+getService().getArgtbl()+\\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" typmbr=\\'\\\"+getMemberType().getArgument()+\\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" srcpat=\\'\\\"+getPhysicalPath()+\\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" nommdl=\\'\\\"+getModel()+\\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" nommbr=\\'\\\" + getName() + \\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" nomgrp=\\'\\\" + getService().getArgtbl() + \\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" typmbr=\\'\\\" + getMemberType().getArgument() + \\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" srcpat=\\'\\\" + getPhysicalPath() + \\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" nommdl=\\'\\\" + getModel() + \\\"\\'\\\";\\n\" + ", "+\t\t\"                + \\\" nommbr=\\'\\\" + getName() + \\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" nomgrp=\\'\\\" + getService().getArgtbl() + \\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" typmbr=\\'\\\" + getMemberType().getArgument() + \\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" srcpat=\\'\\\" + getPhysicalPath() + \\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" nommdl=\\'\\\" + getModel() + \\\"\\'\\\";\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71573daddd76d10600345fb19fcea9b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void test034()", "signatureAfterChange": " public void test034()", "diff": ["-\t\t\"     0  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"     0  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"     4  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"     4  invokespecial java.util.ArrayList() [18]\\n\" + ", "-\t\t\"     8  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"     8  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"    12  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"    12  invokespecial java.util.ArrayList() [18]\\n\" + ", "-\t\t\"    16  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"    16  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"    20  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"    20  invokespecial java.util.ArrayList() [18]\\n\" + ", "-\t\t\"    28  getstatic java/lang/System.out Ljava/io/PrintStream; [24]\\n\" + ", "+\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [24]\\n\" + ", "-\t\t\"    33  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [32]\\n\" + ", "+\t\t\"    33  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [32]\\n\" + ", "-\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 37] local: list index: 1 type: Ljava/util/List;\\n\" + ", "-\t\t\"        [pc: 24, pc: 37] local: alist index: 2 type: Ljava/util/ArrayList;\\n\" + ", "-\t\t\"        [pc: 26, pc: 37] local: list2 index: 3 type: Ljava/util/List;\\n\";", "+\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 37] local: list index: 1 type: java.util.List\\n\" + ", "+\t\t\"        [pc: 24, pc: 37] local: alist index: 2 type: java.util.ArrayList\\n\" + ", "+\t\t\"        [pc: 26, pc: 37] local: list2 index: 3 type: java.util.List\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b5d2f40c19db5c24a173abe234419f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 505, "methodNumberAfterChange": 505, "signatureBeforeChange": " \tpublic void test501()", "signatureAfterChange": " \tpublic void test501()", "diff": ["-\t\t\t\"     0  new X [2]\\n\" + ", "+\t\t\t\"     0  new X [1]\\n\" + ", "-\t\t\t\"     4  new BX [27]\\n\" + ", "+\t\t\t\"     4  new BX [26]\\n\" + ", "-\t\t\t\"    11  invokespecial X(AX) [30]\\n\" + ", "+\t\t\t\"    11  invokespecial X(AX) [29]\\n\" + ", "-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "-\t\t\t\"    19  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    22  checkcast BX [27]\\n\" + ", "-\t\t\t\"    25  getfield BX.ax : java.lang.Object [40]\\n\" + ", "-\t\t\t\"    28  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [46]\\n\" + ", "-\t\t\t\"    31  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "+\t\t\t\"    19  getfield X.t : AX [16]\\n\" + ", "+\t\t\t\"    22  checkcast BX [26]\\n\" + ", "+\t\t\t\"    25  getfield BX.ax : java.lang.Object [37]\\n\" + ", "+\t\t\t\"    28  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [41]\\n\" + ", "+\t\t\t\"    31  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "-\t\t\t\"    35  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    38  checkcast BX [27]\\n\" + ", "-\t\t\t\"    41  getfield BX.bx : java.lang.Object [49]\\n\" + ", "-\t\t\t\"    44  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [46]\\n\" + ", "+\t\t\t\"    35  getfield X.t : AX [16]\\n\" + ", "+\t\t\t\"    38  checkcast BX [26]\\n\" + ", "+\t\t\t\"    41  getfield BX.bx : java.lang.Object [47]\\n\" + ", "+\t\t\t\"    44  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [41]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745352acbc3159830794888cc681718c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "39c04e5947532a22e7e082ea87ed1c7845ce5adf", "commitAfterChange": "e34fd8dbeae4d175b812e7f54b2f2a030a5d0200", "methodNumberBeforeChange": 1167, "methodNumberAfterChange": 1167, "signatureBeforeChange": " public void test1139()", "signatureAfterChange": " public void test1139()", "diff": ["-\t\t\t\"package p;\\r\\n\" + ", "-\t\t\t\"import p.X.Super;\\r\\n\" + ", "-\t\t\t\"import static p.Top.*;\\r\\n\" + ", "-\t\t\t\"\\r\\n\" + ", "-\t\t\t\"class Top<T> {\\r\\n\" + ", "-\t\t\t\"\tstatic class A<U> {}\\r\\n\" + ", "-\t\t\t\"}\\r\\n\" + ", "-\t\t\t\"\\r\\n\" + ", "-\t\t\t\"public class X extends Super<A<X>> {\\r\\n\" + ", "-\t\t\t\"\tstatic class Super<T> extends Top<T>{\\r\\n\" + ", "-\t\t\t\"\t}\\r\\n\" + ", "+\t\t\t\"package p;\\n\" + ", "+\t\t\t\"import p.X.Super;\\n\" + ", "+\t\t\t\"import static p.Top.*;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class Top<T> {\\n\" + ", "+\t\t\t\"\tstatic class A<U> {}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X extends Super<A<X>> {\\n\" + ", "+\t\t\t\"\tstatic class Super<T> extends Top<T>{\\n\" + ", "+\t\t\t\"\t}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74d24f14dea36cec505dba4c48e9c171", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void testListenerAutoBuild() throws CoreException", "signatureAfterChange": " public void testListenerAutoBuild() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75c86d8cd058d9f04674eaa7e0c9a444", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAB02() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAB02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm [Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_obj [Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_exc [Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_qmk [Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm [g1.t.m.def.Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_obj [g1.t.m.def.Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_qmk [g1.t.m.def.Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_thr [g1.t.m.def.Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_run [g1.t.m.def.Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [g1.t.m.def.Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [g1.t.m.def.Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [g1.t.m.def.Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "768f8c929895e65d926e1d56478a1467", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void testTypeRef() throws CoreException", "signatureAfterChange": " public void testTypeRef() throws CoreException", "diff": ["-\t\t\"src/type/ref/TestTypes.java [import \ufffd|type.def.Types|\ufffd;@25] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [public class TestTypes extends \ufffd|Types|\ufffd {@111] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t\ufffd|Types|\ufffd field;@143] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\ufffd|Types|\ufffd method(Types param) throws Types {@193] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(\ufffd|Types|\ufffd param) throws Types {@206] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(Types param) throws \ufffd|Types|\ufffd {@226] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tObject obj = new \ufffd|Types|\ufffd();@253] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\t\ufffd|Types|\ufffd local = (Types) obj;@264] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tTypes local = (\ufffd|Types|\ufffd) obj;@279] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Bug type.ref.TestTypes.bar(Bug) [\t\t} catch (\ufffd|Types|\ufffd ex) {@366] EXACT_MATCH\"", "+\t\t\"src/type/ref/TestTypes.java [import !|type.def.Types|!;@25] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [public class TestTypes extends !|Types|! {@111] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t!|Types|! field;@143] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t!|Types|! method(Types param) throws Types {@193] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(!|Types|! param) throws Types {@206] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(Types param) throws !|Types|! {@226] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tObject obj = new !|Types|!();@253] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\t!|Types|! local = (Types) obj;@264] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tTypes local = (!|Types|!) obj;@279] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Bug type.ref.TestTypes.bar(Bug) [\t\t} catch (!|Types|! ex) {@366] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77469669497649f438bc96231154205f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testStringAnyStrings04() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79337423b7f46cdaf37ebe9893ab628d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": "  \tpublic void test118()", "signatureAfterChange": "  \tpublic void test118()", "diff": ["-\t\t\t\t+ \"\t                ^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad4ac3457d146caa6b0c6d9dfb3465b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "97e6eff65e04dce7acb3a4b10558d6e9ea7e0a37", "commitAfterChange": "c14519ea32a4ea1ee3309a157338e6ed1eb4f28f", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic void test087()", "signatureAfterChange": "  \tpublic void test087()", "diff": ["-\t\t\t\t\t+ \"\t/**\\n\"", "-\t\t\t\t\t+ \"\t * Invalid URL references \\n\"", "-\t\t\t\t\t+ \"\t *\\n\"", "-\t\t\t\t\t+ \"\t * @see <a xref=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "-\t\t\t\t\t+ \"\t * @see <b href=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "-\t\t\t\t\t+ \"\t * @see <a href=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</b>\\n\"", "-\t\t\t\t\t+ \"\t */\\n\"", "-\t\t\t\t\t+ \"\tpublic void s_foo() {\\n\"", "-\t\t\t\t\t+ \"\t}\\n\"", "-\t\t\t\t\t+ \"}\\n\" },", "-\t\t\t\"----------\\n\"", "-\t\t\t\t+ \"1. ERROR in X.java (at line 5)\\n\"", "-\t\t\t\t+ \"\t* @see <a xref=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"2. ERROR in X.java (at line 6)\\n\"", "-\t\t\t\t+ \"\t* @see <b href=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"3. ERROR in X.java (at line 7)\\n\"", "-\t\t\t\t+ \"\t* @see <a href=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Invalid URL link reference</b>\\n\"", "-\t\t\t\t+ \"\t                                                                                                             ^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"----------\\n\",", "+\t\t\t\t+ \"\t/**\\n\"", "+\t\t\t\t+ \"\t * Invalid URL references \\n\"", "+\t\t\t\t+ \"\t *\\n\"", "+\t\t\t\t+ \"\t * @see <a xref=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "+\t\t\t\t+ \"\t * @see <b href=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\"", "+\t\t\t\t+ \"\t * @see <a href=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</b>\\n\"", "+\t\t\t\t+ \"\t */\\n\"", "+\t\t\t\t+ \"\tpublic void s_foo() {\\n\"", "+\t\t\t\t+ \"\t}\\n\"", "+\t\t\t\t+ \"}\\n\" },", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t* @see <a xref=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t* @see <b href=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</a>\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t* @see <a href=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Invalid URL link reference</b>\\n\" + ", "+\t\t\t\t\"\t                                                                                                                         ^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "+\t\t\t\t\"----------\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c5603bd0a7f70814f73016413b716dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "75c11b9993cee3cc0c66baeb87390d3f47878de0", "commitAfterChange": "bf1e6d69eab09fcc8966c652a3845b7198223fbb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testCopySourceFolder4() throws CoreException", "signatureAfterChange": " public void testCopySourceFolder4() throws CoreException", "diff": ["-\t\t\t\"src\\n\" + ", "-\t\t\t\"src1\\n\" + ", "-\t\t\t\"src2\",", "+\t\t\t\"src [in P2]\\n\" + ", "+\t\t\t\"src1 [in P2]\\n\" + ", "+\t\t\t\"src2 [in P2]\",", "-\t\t\t\"src\\n\" + ", "-\t\t\t\"src1\\n\" + ", "-\t\t\t\"src3\\n\" + ", "-\t\t\t\"src2\",", "+\t\t\t\"src [in P2]\\n\" + ", "+\t\t\t\"src1 [in P2]\\n\" + ", "+\t\t\t\"src3 [in P2]\\n\" + ", "+\t\t\t\"src2 [in P2]\",", "-\t\t\t\"src\\n\" + ", "-\t\t\t\"src1\\n\" + ", "-\t\t\t\"src3\\n\" + ", "-\t\t\t\"src2\\n\" +", "-\t\t\t\"src4\",", "+\t\t\t\"src [in P2]\\n\" + ", "+\t\t\t\"src1 [in P2]\\n\" + ", "+\t\t\t\"src3 [in P2]\\n\" + ", "+\t\t\t\"src2 [in P2]\\n\" + ", "+\t\t\t\"src4 [in P2]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8062a66e9ed9a109e3962a43c1b274ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 204, "methodNumberAfterChange": 204, "signatureBeforeChange": " \tpublic void test069()", "signatureAfterChange": " \tpublic void test069()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tpublic class X implements I<A> {\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\tpublic class X implements I<A> {\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tpublic class X implements I<A> {\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\tpublic class X implements I<A> {\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tpublic <N extends Number> void x2() {}\\r\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\tpublic <N extends Number> void x2() {}\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 5)\\r\\n\" +", "-\t\t\t\"\tpublic <N extends Number> void x3() {}\\r\\n\" +", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\tpublic <N extends Number> void x3() {}\\n\" +", "-\t\t\t\"5. WARNING in X.java (at line 9)\\r\\n\" +", "-\t\t\t\"\t<N extends String> void x2();\\r\\n\" +", "+\t\t\t\"5. WARNING in X.java (at line 9)\\n\" +", "+\t\t\t\"\t<N extends String> void x2();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8138e0b5a2d26ad0f189333fc12899ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void test027()", "signatureAfterChange": " public void test027()", "diff": ["-\t\t\"     1  anewarray java/lang/Object [4]\\n\" + ", "+\t\t\"     1  anewarray java.lang.Object [4]\\n\" + ", "-\t\t\"     6  astore [local_4]\\n\" + ", "+\t\t\"     6  astore 4\\n\" + ", "-\t\t\"     9  istore_2 [local_2]\\n\" + ", "-\t\t\"    10  aload [local_4]\\n\" + ", "+\t\t\"     9  istore_2\\n\" + ", "+\t\t\"    10  aload 4\\n\" + ", "-\t\t\"    13  istore_3 [local_3]\\n\" + ", "+\t\t\"    13  istore_3\\n\" + ", "-\t\t\"    27  iload_2 [local_2]\\n\" + ", "-\t\t\"    28  iload_3 [local_3]\\n\" + ", "+\t\t\"    27  iload_2\\n\" + ", "+\t\t\"    28  iload_3\\n\" + ", "-\t\t\"    32  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    32  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    37  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    37  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"        [pc: 0, pc: 41] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 5, pc: 41] local: array index: 1 type: [Ljava/lang/Object;\\n\";", "+\t\t\"        [pc: 0, pc: 41] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 5, pc: 41] local: array index: 1 type: java.lang.Object[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "813d9ef564e7f65a12c7313cf0ce3f97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "1e5960a8e1d6d5a1af8d629bddab71c46e5ed5a1", "commitAfterChange": "0d665ff7724ca0a2df27fa238eee0ddf6c106c65", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testBug027079d2() throws JavaModelException", "signatureAfterChange": " public void testBug027079d2() throws JavaModelException", "diff": ["-\t\t\"public class X04b {\\r\\n\" + ", "-\t\t\"\\r\\n\" + ", "-\t\t\"/* disable-formatter */\\r\\n\" + ", "-\t\t\"void     foo(    )      {\t\\r\\n\" + ", "-\t\t\"\t\t\t\t//      unformatted       comment  \t  \\r\\n\" + ", "-\t\t\"}\\r\\n\" + ", "-\t\t\"/* enable-formatter */\\r\\n\" + ", "-\t\t\"\tvoid bar() {\\r\\n\" + ", "-\t\t\"\t\t// formatted comment\\r\\n\" + ", "-\t\t\"\t}\\r\\n\" + ", "-\t\t\"}\\r\\n\",", "+\t\t\"public class X04b {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"/* disable-formatter */\\n\" + ", "+\t\t\"void     foo(    )      {\t\\n\" + ", "+\t\t\"\t\t\t\t//      unformatted       comment  \t  \\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"/* enable-formatter */\\n\" + ", "+\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\"\t\t// formatted comment\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\",", "-\t\t\"\\r\\n\",", "+\t\t\"\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83cb3bd6ef775164eb96f80bb0478115", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 82, "signatureBeforeChange": " public void testFieldReferenceBug73112a() throws CoreException", "signatureAfterChange": " public void testFieldReferenceBug73112a() throws CoreException", "diff": ["-\t\tgetJavaSearchScope(), ", "+\t\tgetJavaSearchScopeBugs(), ", "-\t\t\"src/bug73112/A.java bug73112.A.fieldA73112a [fieldA73112a]\\n\" + ", "-\t\t\"src/bug73112/A.java bug73112.A.fieldA73112b [fieldA73112b]\\n\" + ", "-\t\t\"src/bug73112/A.java bug73112.A.fieldA73112c [fieldA73112c]\\n\" + ", "-\t\t\"src/bug73112/A.java bug73112.A.fieldA73112c [fieldA73112a]\\n\" + ", "-\t\t\"src/bug73112/A.java bug73112.A.fieldA73112c [fieldA73112b]\\n\" + ", "-\t\t\"src/bug73112/A.java bug73112.A.fieldA73112d [fieldA73112d]\",", "+\t\t\"src/b73112/A.java b73112.A.fieldA73112a [fieldA73112a]\\n\" + ", "+\t\t\"src/b73112/A.java b73112.A.fieldA73112b [fieldA73112b]\\n\" + ", "+\t\t\"src/b73112/A.java b73112.A.fieldA73112c [fieldA73112c]\\n\" + ", "+\t\t\"src/b73112/A.java b73112.A.fieldA73112c [fieldA73112a]\\n\" + ", "+\t\t\"src/b73112/A.java b73112.A.fieldA73112c [fieldA73112b]\\n\" + ", "+\t\t\"src/b73112/A.java b73112.A.fieldA73112d [fieldA73112d]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8763d48377c90b9a2b9fd76684bb8994", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test016()", "signatureAfterChange": " public void test016()", "diff": ["-\t\t\"     9  astore [local_4]\\n\" + ", "+\t\t\"     9  astore 4\\n\" + ", "-\t\t\"    12  istore_2 [local_2]\\n\" + ", "-\t\t\"    13  aload [local_4]\\n\" + ", "+\t\t\"    12  istore_2\\n\" + ", "+\t\t\"    13  aload 4\\n\" + ", "-\t\t\"    16  istore_3 [local_3]\\n\" + ", "+\t\t\"    16  istore_3\\n\" + ", "-\t\t\"    20  iinc 2 1 [local_2]\\n\" + ", "-\t\t\"    23  iload_2 [local_2]\\n\" + ", "-\t\t\"    24  iload_3 [local_3]\\n\" + ", "+\t\t\"    20  iinc 2 1\\n\" + ", "+\t\t\"    23  iload_2\\n\" + ", "+\t\t\"    24  iload_3\\n\" + ", "-\t\t\"    28  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    33  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    33  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 37] local: tab index: 1 type: [I\\n\";", "+\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 37] local: tab index: 1 type: int[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87833eeb608f180315aa3be7a1347f88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void testStringAnyStrings05() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87c6850b9b70c52854a015d3ff424ba8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "fa568df637cfba49109de9a23ecbf57eda89325f", "commitAfterChange": "699f85df0061a8b41250aa99562a0fc140375ee5", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test443932() throws JavaModelException", "signatureAfterChange": " public void test443932() throws JavaModelException", "diff": ["-\tassertResults(\"toBinaryString[METHOD_IMPORT]{toBinaryString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toBinaryString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toHexString[METHOD_IMPORT]{toHexString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toHexString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toOctalString[METHOD_IMPORT]{toOctalString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toOctalString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toString[METHOD_IMPORT]{toString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toString[METHOD_IMPORT]{toString, Ljava.lang.Integer;, (II)Ljava.lang.String;, null, null, toString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toUnsignedLong[METHOD_IMPORT]{toUnsignedLong, Ljava.lang.Integer;, (I)J, null, null, toUnsignedLong, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toUnsignedString[METHOD_IMPORT]{toUnsignedString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toUnsignedString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toUnsignedString[METHOD_IMPORT]{toUnsignedString, Ljava.lang.Integer;, (II)Ljava.lang.String;, null, null, toUnsignedString, null, [90, 98], 24}\\n\" +", "-\t\t\t\"toString[METHOD_IMPORT]{toString, Ljava.lang.Integer;, ()Ljava.lang.String;, null, null, toString, null, [90, 98], 35}\", requestor.getResults());", "+\tassertResults(\"toBinaryString[METHOD_NAME_REFERENCE]{toBinaryString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toBinaryString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toHexString[METHOD_NAME_REFERENCE]{toHexString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toHexString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toOctalString[METHOD_NAME_REFERENCE]{toOctalString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toOctalString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toString[METHOD_NAME_REFERENCE]{toString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toString[METHOD_NAME_REFERENCE]{toString, Ljava.lang.Integer;, (II)Ljava.lang.String;, null, null, toString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toUnsignedLong[METHOD_NAME_REFERENCE]{toUnsignedLong, Ljava.lang.Integer;, (I)J, null, null, toUnsignedLong, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toUnsignedString[METHOD_NAME_REFERENCE]{toUnsignedString, Ljava.lang.Integer;, (I)Ljava.lang.String;, null, null, toUnsignedString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toUnsignedString[METHOD_NAME_REFERENCE]{toUnsignedString, Ljava.lang.Integer;, (II)Ljava.lang.String;, null, null, toUnsignedString, null, [90, 98], 24}\\n\" +", "+\t\t\t\"toString[METHOD_NAME_REFERENCE]{toString, Ljava.lang.Integer;, ()Ljava.lang.String;, null, null, toString, null, [90, 98], 35}\", requestor.getResults());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b9fe13399063575ae50a32f89c43fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void test018()", "signatureAfterChange": " public void test018()", "diff": ["-\t\t\"     9  astore [local_5]\\n\" + ", "+\t\t\"     9  astore 5\\n\" + ", "-\t\t\"    12  istore_3 [local_3]\\n\" + ", "-\t\t\"    13  aload [local_5]\\n\" + ", "+\t\t\"    12  istore_3\\n\" + ", "+\t\t\"    13  aload 5\\n\" + ", "-\t\t\"    16  istore [local_4]\\n\" + ", "+\t\t\"    16  istore 4\\n\" + ", "-\t\t\"    21  aload [local_5]\\n\" + ", "-\t\t\"    23  iload_3 [local_3]\\n\" + ", "+\t\t\"    21  aload 5\\n\" + ", "+\t\t\"    23  iload_3\\n\" + ", "-\t\t\"    26  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    26  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    30  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\"    30  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\"    36  iload_3 [local_3]\\n\" + ", "-\t\t\"    37  iload [local_4]\\n\" + ", "+\t\t\"    36  iload_3\\n\" + ", "+\t\t\"    37  iload 4\\n\" + ", "-\t\t\"        [pc: 0, pc: 43] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 43] local: tab index: 1 type: [I\\n\" + ", "-\t\t\"        [pc: 26, pc: 42] local: e index: 2 type: I\\n\";", "+\t\t\"        [pc: 0, pc: 43] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 43] local: tab index: 1 type: int[]\\n\" + ", "+\t\t\"        [pc: 26, pc: 42] local: e index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ba7d150b76e9ef57b03f69e5b5ab5e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void testTypeRefAll_Annotation() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Annotation() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [@\ufffd|Bug|\ufffd(num=155013)@70] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t@\ufffd|Bug|\ufffd(comment=\\\"field\\\")@127] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t@\ufffd|Bug|\ufffd(comment=\\\"method\\\", num=155013)@424] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [@\ufffd|Bug|\ufffd@19] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [@\ufffd|ATest|\ufffd@24] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest1 [@\ufffd|Bug|\ufffd@128] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest2 [@\ufffd|ATest|\ufffd@153] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ETest [@\ufffd|Bug|\ufffd@195] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ETest [@\ufffd|ATest|\ufffd@200] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ATest [@\ufffd|Bug|\ufffd@221] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [@!|Bug|!(num=155013)@70] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t@!|Bug|!(comment=\\\"field\\\")@127] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t@!|Bug|!(comment=\\\"method\\\", num=155013)@424] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [@!|Bug|!@19] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [@!|ATest|!@24] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest1 [@!|Bug|!@128] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest2 [@!|ATest|!@153] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ETest [@!|Bug|!@195] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ETest [@!|ATest|!@200] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ATest [@!|Bug|!@221] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d6c365e2717ce5194690680d3c3ccb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": " \tpublic void test054a()", "signatureAfterChange": " \tpublic void test054a()", "diff": ["-\t\t\t\t\"Method aaa(X) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aaa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aaa(T) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aaa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(X) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(T) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aaa(X) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aaa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aaa(T) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aaa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(X) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(T) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(T) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f9b3026eb66b589fa48b0c2106e1d67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " \tpublic void test247()", "signatureAfterChange": " \tpublic void test247()", "diff": ["-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f4987f340f73c02f5dd9663533b31a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "commitAfterChange": "0f27abdc440c19d22cca8de897116ef5e59c08c4", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " \tpublic void test112()", "signatureAfterChange": " \tpublic void test112()", "diff": ["-\t\t\t\t\"public class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\t\"    void foo(X<Thread>.MX.MMX<X> mx) {}\\n\" + ", "+\t\t\t\t\"public class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\t\"    void foo(X<Thread>.MX<String>.MMX<X> mx) {}\\n\" + ", "-\t\t\t\"\tvoid foo(X<Thread>.MX.MMX<X> mx) {}\\n\" + ", "+\t\t\t\"\tvoid foo(X<Thread>.MX<String>.MMX<X> mx) {}\\n\" + ", "-\t\t\t\"Bound mismatch: The type Thread is not a valid substitute for the bounded parameter <T extends X.MX<Runnable>.MMX<Iterable<String>>> of the type X<T>\\n\" + ", "+\t\t\t\"Bound mismatch: The type Thread is not a valid substitute for the bounded parameter <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>> of the type X<T>\\n\" + ", "-\t\t\t\t\"public class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\t\"public class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\"\tpublic class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\"\t                               ^^^^^^^^\\n\" +", "+\t\t\t\"\tpublic class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\"\t                                         ^^^^^^^^\\n\" + ", "-\t\t\t\t\"public class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\t\"public class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\"\tpublic class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\"\t                                             ^^^^^^^^\\n\" +", "+\t\t\t\"\tpublic class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\"\t                                                       ^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9419dee663240d69cb7604bd7606de0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 503, "methodNumberAfterChange": 503, "signatureBeforeChange": " \tpublic void test501()", "signatureAfterChange": " \tpublic void test501()", "diff": ["-\t\t\t\"     8  invokespecial BX.<init>()V [28]\\n\" + ", "-\t\t\t\"    11  invokespecial X.<init>(LAX;)V [30]\\n\" + ", "+\t\t\t\"     8  invokespecial BX() [28]\\n\" + ", "+\t\t\t\"    11  invokespecial X(AX) [30]\\n\" + ", "-\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [36]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "-\t\t\t\"    19  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    19  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    25  getfield BX.ax Ljava/lang/Object; [40]\\n\" + ", "-\t\t\t\"    28  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [46]\\n\" + ", "-\t\t\t\"    31  getstatic java/lang/System.out Ljava/io/PrintStream; [36]\\n\" + ", "+\t\t\t\"    25  getfield BX.ax : java.lang.Object [40]\\n\" + ", "+\t\t\t\"    28  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [46]\\n\" + ", "+\t\t\t\"    31  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "-\t\t\t\"    35  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    35  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    41  getfield BX.bx Ljava/lang/Object; [49]\\n\" + ", "-\t\t\t\"    44  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [46]\\n\" + ", "+\t\t\t\"    41  getfield BX.bx : java.lang.Object [49]\\n\" + ", "+\t\t\t\"    44  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [46]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 48] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 15, pc: 48] local: x index: 1 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 48] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 15, pc: 48] local: x index: 1 type: X\\n\" + ", "-\t\t\t\"        [pc: 15, pc: 48] local: x index: 1 type: LX<+LBX;>;\\n\";", "+\t\t\t\"        [pc: 15, pc: 48] local: x index: 1 type: X<? extends BX>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94593fcb4e76370b62ea0a1154044738", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void testTypeRefGenericAll01_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll01_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;@239] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<\ufffd|Types|\ufffd, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, \ufffd|UClass|\ufffd, VClass> {@119] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, \ufffd|VClass|\ufffd> {@127] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<\ufffd|Types|\ufffd> test;@150] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<\ufffd|String|\ufffd> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<\ufffd|Types|\ufffd> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<\ufffd|String|\ufffd> param2) {@226] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<\ufffd|TestGeneric|\ufffd<Types>> bar() {@275] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<\ufffd|Types|\ufffd>> bar() {@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<\ufffd|Types|\ufffd>, Serializable {@373] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<\ufffd|Types|\ufffd> {}@519] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<!|Types|!> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<!|String|!> comp;@239] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<!|Types|!, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, !|UClass|!, VClass> {@119] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, !|VClass|!> {@127] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<!|Types|!> test;@150] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<!|String|!> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<!|Types|!> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<!|String|!> param2) {@226] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<!|TestGeneric|!<Types>> bar() {@275] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<!|Types|!>> bar() {@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<!|Types|!>, Serializable {@373] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<!|Types|!> {}@519] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94df20a2f6286ba1b601c6febc91a43e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tpublic void testBug95521b()", "signatureAfterChange": " \tpublic void testBug95521b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d97d656f15c638e7093affcfb9d403", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "775bb7e86633292b115b2935c87e101190166e9d", "commitAfterChange": "4a26249aa893b7bf1faa1e1388aeb96ba4c3a814", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void test073()", "signatureAfterChange": " \tpublic void test073()", "diff": ["-\t\t\t\"  // Method descriptor  #8 ()[LColor;\\n\" + ", "+\t\t\t\"  // Method descriptor #8 ()[LColor;\\n\" + ", "-\t\t\t\"  // Method descriptor  #13 ()[LFoo;\\n\" + ", "+\t\t\t\"  // Method descriptor #13 ()[LFoo;\\n\" + ", "-\t\t\t\"  // Method descriptor  #16 ()[I\\n\" + ", "+\t\t\t\"  // Method descriptor #16 ()[I\\n\" + ", "-\t\t\t\"  // Method descriptor  #19 ()[B\\n\" + ", "+\t\t\t\"  // Method descriptor #19 ()[B\\n\" + ", "-\t\t\t\"  // Method descriptor  #22 ()[S\\n\" + ", "+\t\t\t\"  // Method descriptor #22 ()[S\\n\" + ", "-\t\t\t\"  // Method descriptor  #25 ()[J\\n\" + ", "+\t\t\t\"  // Method descriptor #25 ()[J\\n\" + ", "-\t\t\t\"  // Method descriptor  #29 ()[Ljava/lang/String;\\n\" + ", "+\t\t\t\"  // Method descriptor #29 ()[Ljava/lang/String;\\n\" + ", "-\t\t\t\"  // Method descriptor  #32 ()[Z\\n\" + ", "+\t\t\t\"  // Method descriptor #32 ()[Z\\n\" + ", "-\t\t\t\"  // Method descriptor  #34 ()[F\\n\" + ", "+\t\t\t\"  // Method descriptor #34 ()[F\\n\" + ", "-\t\t\t\"  // Method descriptor  #37 ()[D\\n\" + ", "+\t\t\t\"  // Method descriptor #37 ()[D\\n\" + ", "-\t\t\t\"  // Method descriptor  #41 ()[Ljava/lang/Class;\\n\" + ", "+\t\t\t\"  // Method descriptor #41 ()[Ljava/lang/Class;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9985670d6cab2b1578b32622dc26b9ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tpublic void testBug95521b()", "signatureAfterChange": " \tpublic void testBug95521b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ce4792e5bd20d4baf3412fb08d17352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "130cb4765fd3f636bbf53ed159d4905dec0a5fd5", "commitAfterChange": "938f4b2ad6ef3c12e60db3be23aed731979677d7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\"The argument of type null should explicitly be cast to byte[][] for the invocation of the varargs method byte2(byte[]...) from type Y. It could alternatively be cast to byte[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method byte2(byte[]...) doesn't exactly match the vararg parameter type. Cast to byte[][] to confirm the non-varargs invocation, or pass individual arguments of type byte[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type String[] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type String[][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][][] of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type String[][] of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to String[] for the invocation of the varargs method string(String...) from type Y. It could alternatively be cast to String for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method string(String...) doesn't exactly match the vararg parameter type. Cast to String[] to confirm the non-varargs invocation, or pass individual arguments of type String for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a134f6ce6c586da6e919b26292f9725e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  public void test075() throws JavaModelException", "signatureAfterChange": "  public void test075() throws JavaModelException", "diff": ["-\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone() }, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object) }, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize() }, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass() }, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode() }, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify() }, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll() }, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString() }, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int) }, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long) }, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait() }, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class) }, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns() }, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\"", "+\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone()}, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object)}, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize()}, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass()}, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode()}, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify()}, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll()}, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString()}, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int)}, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long)}, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait()}, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class)}, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a36422e04c09ffdbd8d6fa1c92d692ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testStringNestedMultipleArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [GM<?, ?, ?>.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [GM<?, ?, ?>.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [GM<?, ?, ?>.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [GM<?, ?, ?>.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a55105a2f250d940295fe16f53f4285e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testStringAnyStrings06() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings06() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a72ca98cfc51e561146f8c9db2e93c09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test17() throws JavaModelException", "signatureAfterChange": "  \tpublic void test17() throws JavaModelException", "diff": ["-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\",", "+\t\t\t\"Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7349956a9c22acec0b6e558da8b5642", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "\r public void test0074() throws IOException", "signatureAfterChange": "\r public void test0074() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@J\"));\r", "-\tassertEquals(\"Wrong location\", \"{2}\", locations.get(\"@A\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0,0,1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0,0,2}\", locations.get(\"@H\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0}\", locations.get(\"@D\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1}\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY]\", locations.get(\"@J\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY]\", locations.get(\"@A\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0)]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), ARRAY]\", locations.get(\"@D\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1)]\", locations.get(\"@B\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a86f5acc07b999fcf2f190b6a982ac51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": " \tpublic void test054a()", "signatureAfterChange": " \tpublic void test054a()", "diff": ["-\t\t\t\t\"Method aaa(X) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aaa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aaa(T) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aaa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(X) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(T) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aaa(X) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aaa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aaa(T) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aaa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(X) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(T) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(T) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(X) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(T) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8cc6528dce4cd6758a5d4ef5a1b8519", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testJavadocTypeReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocTypeReference() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [j1.JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [j1.JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\",", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [j1.JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [j1.JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a908b321d5a91b0caad7a9c9f037a803", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entry [Table.Entry] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryException [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entry [Table.Entry] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryException [Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abd80819ee490028d6fb595ffa9c24b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testTypeRef_AllFlags() throws CoreException", "signatureAfterChange": " public void testTypeRef_AllFlags() throws CoreException", "diff": ["-\t\t\"src/type/ref/TestTypes.java [import \ufffd|type.def.Types|\ufffd;@25] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [public class TestTypes extends \ufffd|Types|\ufffd {@111] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t\ufffd|Types|\ufffd field;@143] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\ufffd|Types|\ufffd method(Types param) throws Types {@193] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(\ufffd|Types|\ufffd param) throws Types {@206] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(Types param) throws \ufffd|Types|\ufffd {@226] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tObject obj = new \ufffd|Types|\ufffd();@253] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\t\ufffd|Types|\ufffd local = (Types) obj;@264] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tTypes local = (\ufffd|Types|\ufffd) obj;@279] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Bug type.ref.TestTypes.bar(Bug) [\t\t} catch (\ufffd|Types|\ufffd ex) {@366] EXACT_MATCH\"", "+\t\t\"src/type/ref/TestTypes.java [import !|type.def.Types|!;@25] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [public class TestTypes extends !|Types|! {@111] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t!|Types|! field;@143] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t!|Types|! method(Types param) throws Types {@193] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(!|Types|! param) throws Types {@206] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(Types param) throws !|Types|! {@226] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tObject obj = new !|Types|!();@253] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\t!|Types|! local = (Types) obj;@264] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tTypes local = (!|Types|!) obj;@279] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Bug type.ref.TestTypes.bar(Bug) [\t\t} catch (!|Types|! ex) {@366] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afd85da04ca08a6772597ef8946842db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "4b34ac952495406305286be091754126c6d25593", "commitAfterChange": "a3337f44ed6348a5f4f65ab1b2584cb8125066c6", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 121, "signatureBeforeChange": " public void testBug286668b_40w() throws JavaModelException", "signatureAfterChange": " public void testBug286668b_40w() throws JavaModelException", "diff": ["-\t\t\"\t\tbuilder.append(\\\"abc\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\\\"def\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"ghi\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"jkl\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"mno\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"pqr\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"stu\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"vwx\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"yz\\\");\\n\" +", "+\t\t\"\t\tbuilder.append(\\\"abc\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"def\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"ghi\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"jkl\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"mno\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"pqr\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"stu\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"vwx\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"yz\\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b012a1b6e98424d8d92fe7273836cc05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_4.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  \tpublic void test066() throws Exception", "signatureAfterChange": "  \tpublic void test066() throws Exception", "diff": ["-\t\t\t\"     5  if_icmpne 14\\n\" +", "+\t\t\t\"     5  if_icmpne 12\\n\" +", "-\t\t\t\"    11  ifeq 14\\n\" +", "-\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "-\t\t\t\"    17  iload_0 [i]\\n\" +", "-\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "-\t\t\t\"    21  return\\n\" +", "+\t\t\t\"    11  pop\\n\" +", "+\t\t\t\"    12  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "+\t\t\t\"    15  iload_0 [i]\\n\" +", "+\t\t\t\"    16  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "+\t\t\t\"    19  return\\n\" +", "-\t\t\t\"        [pc: 14, line: 12]\\n\" +", "-\t\t\t\"        [pc: 21, line: 14]\\n\" +", "+\t\t\t\"        [pc: 12, line: 12]\\n\" +", "+\t\t\t\"        [pc: 19, line: 14]\\n\" +", "-\t\t\t\"        [pc: 2, pc: 22] local: i index: 0 type: int\\n\";", "+\t\t\t\"        [pc: 2, pc: 20] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b04d9aaef4445d6a0c80c7ff76c08956", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "cae2235178dd91d5be4ed811b5134ba4b502f56a", "commitAfterChange": "20291e123853b40f3437b01ca0907aa48371db12", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 150, "signatureBeforeChange": " public void test145()", "signatureAfterChange": " public void test145()", "diff": ["-\t\t\t\"public enum EnumA {\\r\\n\" +", "-\t\t\t\"  B1,\\r\\n\" +", "-\t\t\t\"  B2;\\r\\n\" +", "-\t\t\t\"  public void foo(){}\\r\\n\" +", "+\t\t\t\"public enum EnumA {\\n\" +", "+\t\t\t\"  B1,\\n\" +", "+\t\t\t\"  B2;\\n\" +", "+\t\t\t\"  public void foo(){}\\n\" +", "-\t\t\t\"public class ClassC {\\r\\n\" +", "-\t\t\t\"  void bar() {\\r\\n\" +", "-\t\t\t\"    EnumA.B1.B1.foo();\\r\\n\" +", "-\t\t\t\"    EnumA.B1.B2.foo();\\r\\n\" +", "-\t\t\t\"  }\\r\\n\" +", "+\t\t\t\"public class ClassC {\\n\" +", "+\t\t\t\"  void bar() {\\n\" +", "+\t\t\t\"    EnumA.B1.B1.foo();\\n\" +", "+\t\t\t\"    EnumA.B1.B2.foo();\\n\" +", "+\t\t\t\"  }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0f66f2ff3dd85ec10f641d64e9bb9db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "f711a2e15fc3de73f79ccc61d2dafcbdd0d9f0f1", "commitAfterChange": "e823242f8d03d0ef2504eab819b418e785f092ee", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " public void test125() throws Exception", "signatureAfterChange": " public void test125() throws Exception", "diff": ["-\t\t\t\"     5  aload_1\\n\" +", "+\t\t\t\"     5  aload_1 [arg0]\\n\" +", "-\t\t\t\"    10  aload_2\\n\" +", "+\t\t\t\"    10  aload_2 [arg1]\\n\" +", "-\t\t\t\"    0  aload_0\\n\" +", "-\t\t\t\"    1  aload_1\\n\" +", "-\t\t\t\"    2  aload_2\\n\" +", "+\t\t\t\"    0  aload_0 [this]\\n\" +", "+\t\t\t\"    1  aload_1 [arg0]\\n\" +", "+\t\t\t\"    2  aload_2 [arg1]\\n\" +", "-\t\t\t\"     1  aload_1\\n\" +", "+\t\t\t\"     1  aload_1 [arg0]\\n\" +", "-\t\t\t\"     6  aload_2\\n\" +", "+\t\t\t\"     6  aload_2 [arg1]\\n\" +", "-\t\t\t\t\"     1  aload_1\\n\" +", "+\t\t\t\t\"     1  aload_1 [arg0]\\n\" +", "-\t\t\t\t\"     6  aload_2\\n\" +", "+\t\t\t\t\"     6  aload_2 [arg1]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1586596fbb600c8901222325295f401", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tpublic void testMultipleParameterizedStringPattern05() throws CoreException", "signatureAfterChange": " \tpublic void testMultipleParameterizedStringPattern05() throws CoreException", "diff": ["-\t// TODO [search] try to have a better match selection", "-\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g1.t\", true /* add all subpackages */);", "-\t\tsearch(\"Generic<Exception, Exception, RuntimeException>.MemberGeneric\", TYPE, REFERENCES, scope, resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5134c377ba3d423d982942724c416ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  public void test076() throws JavaModelException", "signatureAfterChange": "  public void test076() throws JavaModelException", "diff": ["-\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone() }, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object) }, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize() }, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass() }, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode() }, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify() }, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll() }, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString() }, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int) }, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long) }, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait() }, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class) }, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns() }, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\"", "+\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone()}, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object)}, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize()}, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass()}, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode()}, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify()}, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll()}, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString()}, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int)}, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long)}, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait()}, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class)}, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb23ddb5332a264f6e4cef81d1593629", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAA02() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAA02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm [Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_obj [Generic<Object>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_exc [Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_qmk [Generic<?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_thr [Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_run [Generic<? super RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm [g1.t.s.def.Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_obj [g1.t.s.def.Generic<Object>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_exc [g1.t.s.def.Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_qmk [g1.t.s.def.Generic<?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_thr [g1.t.s.def.Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_run [g1.t.s.def.Generic<? super RuntimeException>.Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [g1.t.s.def.Generic<Object>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [g1.t.s.def.Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [g1.t.s.def.Generic<?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c056fe5fed2b19834bde6b49c500a45a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": " \tpublic void test050e()", "signatureAfterChange": " \tpublic void test050e()", "diff": ["-\t\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method c(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method c(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method c(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method c(A<Number>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c15379b6ea044db6dcfd4f6af45b3a9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAA03() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAA03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_obj [Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_exc [Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_qmk [Generic<?>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_thr [Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_run [Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_obj [g1.t.s.def.Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_exc [g1.t.s.def.Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_qmk [g1.t.s.def.Generic<?>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_thr [g1.t.s.def.Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_run [g1.t.s.def.Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [g1.t.s.def.Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [g1.t.s.def.Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [g1.t.s.def.Generic<?>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c312439f67fd55dec02caac6fb586c12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "41321e271ce9d99e44edf867f5f75e8abc4a221f", "commitAfterChange": "61133b8c5e6da454f7cea747a5c83744e4b067c9", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void testBug416174()", "signatureAfterChange": " \tpublic void testBug416174()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tclass Z extends X {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The method foo1(List<@NonNull X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"\t@Override void foo1(List<@NonNull X> xy) {}\\n\" + ", "+\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"Illegal redefinition of parameter xy, inherited method from X declares this parameter as \\'List<X>\\' (mismatching null constraints)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tclass Z extends X {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The method foo2(List<X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"\t@Override void foo2(List<X> lx) {}\\n\" + ", "+\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"Illegal redefinition of parameter lx, inherited method from X declares this parameter as \\'List<@NonNull X>\\' (mismatching null constraints)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tclass Z extends X {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The method foo3(List<X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"\t@Override void foo3(List<X> lx) {}\\n\" + ", "+\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"Illegal redefinition of parameter lx, inherited method from X declares this parameter as \\'List<@Nullable X>\\' (mismatching null constraints)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c34279ce2ff53c6e325bad386ce35c1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4cb38a6a25090b988d85b780b82e4ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "26d507f9337456ca82e52ed896177b679ad9ed51", "commitAfterChange": "6954f6f09ec0fa4357c31e7abaa82f5c7cd86dbc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate boolean examineGetAllMembers()", "signatureAfterChange": " \tprivate boolean examineGetAllMembers()", "diff": ["-\t\t\treportError(\"getAllMembers(_elementG) returned null\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) returned null\");", "-\t\t\treportError(\"getAllMembers(_elementG) did not include method hashCode()\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) did not include method hashCode()\");", "-\t\t\treportError(\"getAllMembers(_elementG) did not include class FChild\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) did not include class FChild\");", "-\t\t\t\treportError(\"getAllMembers(_elementG) included the private inherited field _fieldT1_private\");", "+\t\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) included the private inherited field _fieldT1_private\");", "-\t\t\treportError(\"getAllMembers(_elementG) did not return the protected inherited field _fieldT1_protected\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) did not return the protected inherited field _fieldT1_protected\");", "-\t\t\t\treportError(\"getAllMembers(_elementG) returned a constructor for an element other than G\");", "+\t\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) returned a constructor for an element other than G\");", "-\t\t\treportError(\"getAllMembers(_elementG) did not include G's constructor\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) did not include G's constructor\");", "-\t\t\t\t\treportError(\"getAllMembers(_elementG) included an overridden version of method_T1()\");", "+\t\t\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) included an overridden version of method_T1()\");", "-\t\t\treportError(\"getAllMembers(_elementG) did not include G's method_T1(String)\");", "+\t\t\treportError(\"examineGetAllMembers: getAllMembers(_elementG) did not include G's method_T1(String)\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6c1dade0d30d327087df3f4bee9f8f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void testStringNestedMultipleArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_wld [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_wld [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_wld [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_wld [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d769be767093a06d96d4f678e03e48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic void test18() throws JavaModelException", "signatureAfterChange": "  \tpublic void test18() throws JavaModelException", "diff": ["-\t\t\t\"Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca0f87cfb4d5a6149937d517a910a305", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic void test18() throws JavaModelException", "signatureAfterChange": "  \tpublic void test18() throws JavaModelException", "diff": ["-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\",", "+\t\t\t\"Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca160c1e2d2879a30a4f3c334bddd051", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "89ed300df21c8add7782d0e4aec7ebf68c4d465b", "commitAfterChange": "b9942ecaf3eefba2dbc5e187c939df5cfcc2d6c7", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public void testRootGetPackageFragments3() throws CoreException", "signatureAfterChange": " public void testRootGetPackageFragments3() throws CoreException", "diff": ["-\t\tIJavaProject p1 = createJavaProject(\"P1\");", "+\t\tIJavaProject p1 = createJavaProject(\"Bug65693_1\");", "-\t\t\t\"/P1/X.java\",", "+\t\t\t\"/Bug65693_1/X.java\",", "-\t\tgetProject(\"P1\").build(IncrementalProjectBuilder.FULL_BUILD, null);", "-\t\tIJavaProject p2 = createJavaProject(\"P2\");", "+\t\tgetProject(\"Bug65693_1\").build(IncrementalProjectBuilder.FULL_BUILD, null);", "+\t\tIJavaProject p2 = createJavaProject(\"Bug65693_2\");", "-\t\t\t\"/P2/.classpath\",", "+\t\t\t\"/Bug65693_2/.classpath\",", "-\t\t\t\"    <classpathentry kind=\\\"lib\\\" path=\\\"/P1\\\"/>\\n\" +", "+\t\t\t\"    <classpathentry kind=\\\"lib\\\" path=\\\"/Bug65693_1\\\"/>\\n\" +", "-\t\t\t\"Unexpected packages for P1\",", "-\t\t\t\"X.java [in <default> [in <project root> [in P1]]]\",", "+\t\t\t\"Unexpected packages for Bug65693_1\",", "+\t\t\t\"X.java [in <default> [in <project root> [in Bug65693_1]]]\",", "-\t\t\t\"Unexpected packages for P2\",", "-\t\t\t\"X.class [in <default> [in /P1 [in P2]]]\",", "+\t\t\t\"Unexpected packages for Bug65693_2\",", "+\t\t\t\"X.class [in <default> [in /Bug65693_1 [in Bug65693_2]]]\",", "-\t\tdeleteProject(\"P1\");", "-\t\tdeleteProject(\"P2\");", "+\t\tdeleteProject(\"Bug65693_1\");", "+\t\tdeleteProject(\"Bug65693_2\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb26d8e79217b07ed6c67d81a6cc89b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceAA04() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceAA04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_qmk [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_obj [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_exc [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_qmk [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_thr [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_run [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [g1.t.s.def.NonGeneric.GenericMember] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbe445b0f949c7b9f9ceee46c281a86e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void testRenameSourceFolder2() throws CoreException", "signatureAfterChange": " public void testRenameSourceFolder2() throws CoreException", "diff": ["-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce82730e41be6000b6a8b73952e241c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\"     0  new java.util.ArrayList [17]\\n\" + ", "+\t\t\"     0  new java.util.ArrayList [16]\\n\" + ", "-\t\t\"    14  new java.lang.Integer [20]\\n\" + ", "+\t\t\"    14  new java.lang.Integer [19]\\n\" + ", "-\t\t\"    19  invokespecial java.lang.Integer(int) [23]\\n\" + ", "-\t\t\"    22  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [27]\\n\" + ", "+\t\t\"    19  invokespecial java.lang.Integer(int) [21]\\n\" + ", "+\t\t\"    22  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean [24]\\n\" + ", "-\t\t\"    38  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator  [31]\\n\" + ", "+\t\t\"    38  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator [28]\\n\" + ", "-\t\t\"    48  invokeinterface java.util.Iterator.next() : java.lang.Object  [37] [nargs: 1]\\n\" + ", "-\t\t\"    53  checkcast java.lang.Integer [20]\\n\" + ", "+\t\t\"    48  invokeinterface java.util.Iterator.next() : java.lang.Object [32] [nargs: 1]\\n\" + ", "+\t\t\"    53  checkcast java.lang.Integer [19]\\n\" + ", "-\t\t\"    59  invokevirtual java.lang.Integer.intValue() : int  [41]\\n\" + ", "+\t\t\"    59  invokevirtual java.lang.Integer.intValue() : int [38]\\n\" + ", "-\t\t\"    66  invokeinterface java.util.Iterator.hasNext() : boolean  [45] [nargs: 1]\\n\" + ", "+\t\t\"    66  invokeinterface java.util.Iterator.hasNext() : boolean [42] [nargs: 1]\\n\" + ", "-\t\t\"    74  getstatic java.lang.System.out : java.io.PrintStream [51]\\n\" + ", "+\t\t\"    74  getstatic java.lang.System.out : java.io.PrintStream [46]\\n\" + ", "-\t\t\"    78  invokevirtual java.io.PrintStream.println(int) : void  [56]\\n\" + ", "+\t\t\"    78  invokevirtual java.io.PrintStream.println(int) : void [52]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfa30d21c57b843a68a87fb3ddcc498f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionList [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArray [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionList [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArray [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionList [g6.t.def.List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArray [g6.t.def.List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionList [List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArray [List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d44c0ad508034f20f47bce94733a0d0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 507, "methodNumberAfterChange": 507, "signatureBeforeChange": " \tpublic void test503()", "signatureAfterChange": " \tpublic void test503()", "diff": ["-\t\t\t\"    1  invokespecial java.lang.Object() [13]\\n\" + ", "+\t\t\t\"    1  invokespecial java.lang.Object() [12]\\n\" + ", "-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\\n\" + ", "-\t\t\t\"     3  new X [2]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "+\t\t\t\"     3  new X [1]\\n\" + ", "-\t\t\t\"    10  getfield X.e : XA [30]\\n\" + ", "+\t\t\t\"    10  getfield X.e : XA [29]\\n\" + ", "-\t\t\t\"    14  getstatic XAB.CONST : XB [36]\\n\" + ", "-\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\\n\" + ", "-\t\t\t\"    20  new X [2]\\n\" + ", "+\t\t\t\"    14  getstatic XAB.CONST : XB [31]\\n\" + ", "+\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + ", "+\t\t\t\"    20  new X [1]\\n\" + ", "-\t\t\t\"    27  invokevirtual X.foo() : void  [45]\\n\" + ", "+\t\t\t\"    27  invokevirtual X.foo() : void [43]\\n\" + ", "-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "-\t\t\t\"     4  getfield X.e : XA [30]\\n\" + ", "+\t\t\t\"     4  getfield X.e : XA [29]\\n\" + ", "-\t\t\t\"     8  getstatic XB.CONST : XB [50]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\\n\" + ", "+\t\t\t\"     8  getstatic XB.CONST : XB [48]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5f856d5e4bb31e42133810a0074eefd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testSingleParameterizedStringPattern05() throws CoreException", "signatureAfterChange": " \tpublic void testSingleParameterizedStringPattern05() throws CoreException", "diff": ["-\t// TODO [search] try to have a better match selection", "-\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g1.t\", true /* add all subpackages */);", "-\t\tsearch(\"Generic<Exception>.MemberGeneric\", TYPE, REFERENCES, scope, resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric<Exception>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric<?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric<Exception>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric<?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7e6d70ce282e86a6bb9a330108ee142", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test016()", "signatureAfterChange": " public void test016()", "diff": ["-\t\t\"     1  newarray #10 int\\n\" + ", "+\t\t\"     1  newarray int [10]\\n\" + ", "-\t\t\"     7  astore_1\\n\" + ", "-\t\t\"     8  aload_1\\n\" + ", "-\t\t\"     9  astore 4\\n\" + ", "+\t\t\"     7  astore_1 [tab]\\n\" + ", "+\t\t\"     8  aload_1 [tab]\\n\" + ", "+\t\t\"     9  astore [local_4]\\n\" + ", "-\t\t\"    12  istore_2\\n\" + ", "-\t\t\"    13  aload 4\\n\" + ", "+\t\t\"    12  istore_2 [local_2]\\n\" + ", "+\t\t\"    13  aload [local_4]\\n\" + ", "-\t\t\"    16  istore_3\\n\" + ", "+\t\t\"    16  istore_3 [local_3]\\n\" + ", "-\t\t\"    20  iinc 2 1\\n\" + ", "-\t\t\"    23  iload_2\\n\" + ", "-\t\t\"    24  iload_3\\n\" + ", "+\t\t\"    20  iinc 2 1 [local_2]\\n\" + ", "+\t\t\"    23  iload_2 [local_2]\\n\" + ", "+\t\t\"    24  iload_3 [local_3]\\n\" + ", "-\t\t\"    28  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    31  ldc #23 <String \\\"SUCCESS\\\">\\n\" + ", "-\t\t\"    33  invokevirtual #29 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    28  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    31  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "+\t\t\"    33  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d97a0589f261cd9922a6123ad2a5f26d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void testFocusWithLocalAndAnonymousTypes() throws JavaModelException", "signatureAfterChange": " public void testFocusWithLocalAndAnonymousTypes() throws JavaModelException", "diff": ["-\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  Y1 {key=Lp7/A$288;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    Y2 {key=Lp7/A$315;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp7/A$269;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #2> {key=Lp7/A$233;} [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp7/A$216;} [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp7/A$174;} [in field1 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp7/A$125;} [in <initializer #2> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  Y1 {key=Lp7/A$57;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    Y2 {key=Lp7/A$84;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp7/A$38;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\",", "+\t\t\"  Y1 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    Y2 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #2> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in field1 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in <initializer #2> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  Y1 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    Y2 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c903903e8e1075d05a6b5d1b240ebe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void testSingleWildcardUnboundStringPattern05() throws CoreException", "signatureAfterChange": " \tpublic void testSingleWildcardUnboundStringPattern05() throws CoreException", "diff": ["-\t// TODO [search] try to have a better match selection", "-\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g1.t\", true /* add all subpackages */);", "-\t\tsearch(\"Generic<?>.MemberGeneric\", TYPE, REFERENCES, scope, resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric<Object>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric<Object>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric<Object>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric<Object>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da1d61c8240a267d58090d9e07d5cf28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bfcf9b26d6e4144cb0c2640d02cc59095e635771", "commitAfterChange": "dcd57d09638877b63364224680d27d9dec37d5fa", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void _test034()", "signatureAfterChange": " public void test034()", "diff": ["-// TODO (philippe) Disabled as this test fails in HEAD stream", "-public void _test034() { ", "+public void test034() { ", "-\t\t\t\"  // Method descriptor #23 (LBar;)V\\n\" + ", "-\t\t\t\"  // Signature: (TT;)V\\n\" + ", "-\t\t\t\"  // Stack: 2, Locals: 4\\n\" + ", "-\t\t\t\"  void foo(Bar t);\\n\" + ", "-\t\t\t\"     0  aload_1 [t]\\n\" + ", "-\t\t\t\"     1  invokevirtual Bar.iterator() : java.util.Iterator  [33]\\n\" +", "-\t\t\t\"     4  astore_3\\n\" + ", "-\t\t\t\"     5  goto 25\\n\" + ", "-\t\t\t\"     8  aload_3\\n\" + ", "-\t\t\t\"     9  invokeinterface java.util.Iterator.next() : java.lang.Object  [39] [nargs: 1]\\n\" + ", "-\t\t\t\"    14  checkcast java.lang.String [41]\\n\" + ", "-\t\t\t\"    17  astore_2 [s]\\n\" + ", "-\t\t\t\"    18  getstatic java.lang.System.out : java.io.PrintStream [47]\\n\" + ", "-\t\t\t\"    21  aload_2 [s]\\n\" + ", "-\t\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [53]\\n\" + ", "-\t\t\t\"    25  aload_3\\n\" + ", "-\t\t\t\"    26  invokeinterface java.util.Iterator.hasNext() : boolean  [57] [nargs: 1]\\n\" + ", "-\t\t\t\"    31  ifne 8\\n\" + ", "-\t\t\t\"    34  getstatic java.lang.System.out : java.io.PrintStream [47]\\n\" + ", "-\t\t\t\"    37  invokevirtual java.io.PrintStream.println() : void  [60]\\n\" + ", "-\t\t\t\"    40  return\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 8]\\n\" + ", "-\t\t\t\"        [pc: 18, line: 9]\\n\" + ", "-\t\t\t\"        [pc: 25, line: 8]\\n\" + ", "-\t\t\t\"        [pc: 34, line: 11]\\n\" + ", "-\t\t\t\"        [pc: 40, line: 12]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 41] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 41] local: t index: 1 type: Bar\\n\" + ", "-\t\t\t\"        [pc: 18, pc: 34] local: s index: 2 type: java.lang.String\\n\" + ", "-\t\t\t\"      Local variable type table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 41] local: this index: 0 type: X<T>\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 41] local: t index: 1 type: T\\n\";", "+\t\t\"  // Method descriptor #25 (LBar;)V\\n\" + ", "+\t\t\"  // Signature: (TT;)V\\n\" + ", "+\t\t\"  // Stack: 2, Locals: 4\\n\" + ", "+\t\t\"  void foo(Bar t);\\n\" + ", "+\t\t\"     0  aload_1 [t]\\n\" + ", "+\t\t\"     1  invokevirtual Bar.iterator() : java.util.Iterator [30]\\n\" + ", "+\t\t\"     4  astore_3\\n\" + ", "+\t\t\"     5  goto 25\\n\" + ", "+\t\t\"     8  aload_3\\n\" + ", "+\t\t\"     9  invokeinterface java.util.Iterator.next() : java.lang.Object [34] [nargs: 1]\\n\" + ", "+\t\t\"    14  checkcast java.lang.String [40]\\n\" + ", "+\t\t\"    17  astore_2 [s]\\n\" + ", "+\t\t\"    18  getstatic java.lang.System.out : java.io.PrintStream [42]\\n\" + ", "+\t\t\"    21  aload_2 [s]\\n\" + ", "+\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.String) : void [48]\\n\" + ", "+\t\t\"    25  aload_3\\n\" + ", "+\t\t\"    26  invokeinterface java.util.Iterator.hasNext() : boolean [54] [nargs: 1]\\n\" + ", "+\t\t\"    31  ifne 8\\n\" + ", "+\t\t\"    34  getstatic java.lang.System.out : java.io.PrintStream [42]\\n\" + ", "+\t\t\"    37  invokevirtual java.io.PrintStream.println() : void [58]\\n\" + ", "+\t\t\"    40  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 8]\\n\" + ", "+\t\t\"        [pc: 18, line: 9]\\n\" + ", "+\t\t\"        [pc: 25, line: 8]\\n\" + ", "+\t\t\"        [pc: 34, line: 11]\\n\" + ", "+\t\t\"        [pc: 40, line: 12]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 41] local: this index: 0 type: X\\n\" + ", "+\t\t\"        [pc: 0, pc: 41] local: t index: 1 type: Bar\\n\" + ", "+\t\t\"        [pc: 18, pc: 34] local: s index: 2 type: java.lang.String\\n\" + ", "+\t\t\"      Local variable type table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 41] local: this index: 0 type: X<T>\\n\" + ", "+\t\t\"        [pc: 0, pc: 41] local: t index: 1 type: T\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc7fa0f13e8be4f38fa3c7abdca23ce6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": " \tpublic void test079()", "signatureAfterChange": " \tpublic void test079()", "diff": ["-\t\t\t\"1. WARNING in A.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tclass B extends A { void x(A<String> s) {} }\\r\\n\" +", "+\t\t\t\"1. WARNING in A.java (at line 2)\\n\" +", "+\t\t\t\"\tclass B extends A { void x(A<String> s) {} }\\n\" +", "-\t\t\t\"2. ERROR in A.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tclass B extends A { void x(A<String> s) {} }\\r\\n\" +", "+\t\t\t\"2. ERROR in A.java (at line 2)\\n\" +", "+\t\t\t\"\tclass B extends A { void x(A<String> s) {} }\\n\" +", "-\t\t\t\"3. WARNING in A.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tclass C extends A { @Override void x(A s) {} }\\r\\n\" +", "+\t\t\t\"3. WARNING in A.java (at line 3)\\n\" +", "+\t\t\t\"\tclass C extends A { @Override void x(A s) {} }\\n\" +", "-\t\t\t\"4. WARNING in A.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tclass C extends A { @Override void x(A s) {} }\\r\\n\" +", "+\t\t\t\"4. WARNING in A.java (at line 3)\\n\" +", "+\t\t\t\"\tclass C extends A { @Override void x(A s) {} }\\n\" +", "-\t\t\t\"5. WARNING in A.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tclass D extends A { void x(A<Object> s) {} }\\r\\n\" +", "+\t\t\t\"5. WARNING in A.java (at line 4)\\n\" +", "+\t\t\t\"\tclass D extends A { void x(A<Object> s) {} }\\n\" +", "-\t\t\t\"6. ERROR in A.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tclass D extends A { void x(A<Object> s) {} }\\r\\n\" +", "+\t\t\t\"6. ERROR in A.java (at line 4)\\n\" +", "+\t\t\t\"\tclass D extends A { void x(A<Object> s) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd8150f3a4be22dd0443c21ffb21aa1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "775bb7e86633292b115b2935c87e101190166e9d", "commitAfterChange": "4a26249aa893b7bf1faa1e1388aeb96ba4c3a814", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void test074()", "signatureAfterChange": " \tpublic void test074()", "diff": ["-\t\t\t\"  // Method descriptor  #8 ()LColor;\\n\" + ", "+\t\t\t\"  // Method descriptor #8 ()LColor;\\n\" + ", "-\t\t\t\"  // Method descriptor  #13 ()LFoo;\\n\" + ", "+\t\t\t\"  // Method descriptor #13 ()LFoo;\\n\" + ", "-\t\t\t\"  // Method descriptor  #16 ()I\\n\" + ", "+\t\t\t\"  // Method descriptor #16 ()I\\n\" + ", "-\t\t\t\"  // Method descriptor  #19 ()B\\n\" + ", "+\t\t\t\"  // Method descriptor #19 ()B\\n\" + ", "-\t\t\t\"  // Method descriptor  #22 ()S\\n\" + ", "+\t\t\t\"  // Method descriptor #22 ()S\\n\" + ", "-\t\t\t\"  // Method descriptor  #25 ()J\\n\" + ", "+\t\t\t\"  // Method descriptor #25 ()J\\n\" + ", "-\t\t\t\"  // Method descriptor  #29 ()Ljava/lang/String;\\n\" + ", "+\t\t\t\"  // Method descriptor #29 ()Ljava/lang/String;\\n\" + ", "-\t\t\t\"  // Method descriptor  #32 ()Z\\n\" + ", "+\t\t\t\"  // Method descriptor #32 ()Z\\n\" + ", "-\t\t\t\"  // Method descriptor  #34 ()F\\n\" + ", "+\t\t\t\"  // Method descriptor #34 ()F\\n\" + ", "-\t\t\t\"  // Method descriptor  #37 ()D\\n\" + ", "+\t\t\t\"  // Method descriptor #37 ()D\\n\" + ", "-\t\t\t\"  // Method descriptor  #41 ()Ljava/lang/Class;\\n\" + ", "+\t\t\t\"  // Method descriptor #41 ()Ljava/lang/Class;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6d3bb09bbefab4dcc02ef7459637628", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_4.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tpublic void test056() throws Exception", "signatureAfterChange": "  \tpublic void test056() throws Exception", "diff": ["-\t\t\t\"     6  if_icmpeq 15\\n\" +", "+\t\t\t\"     6  if_icmpeq 13\\n\" +", "-\t\t\t\"    12  ifne 15\\n\" +", "-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "-\t\t\t\"    18  iload_0 [i]\\n\" +", "-\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "-\t\t\t\"    22  return\\n\" +", "+\t\t\t\"    12  pop\\n\" +", "+\t\t\t\"    13  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "+\t\t\t\"    16  iload_0 [i]\\n\" +", "+\t\t\t\"    17  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "+\t\t\t\"    20  return\\n\" +", "-\t\t\t\"        [pc: 15, line: 11]\\n\" +", "-\t\t\t\"        [pc: 22, line: 13]\\n\" +", "+\t\t\t\"        [pc: 13, line: 11]\\n\" +", "+\t\t\t\"        [pc: 20, line: 13]\\n\" +", "-\t\t\t\"        [pc: 3, pc: 23] local: i index: 0 type: int\\n\";", "+\t\t\t\"        [pc: 3, pc: 21] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e95ad9218c7760c52a8fa2c6823adee6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 217, "methodNumberAfterChange": 217, "signatureBeforeChange": " \tpublic void test215()", "signatureAfterChange": " \tpublic void test215()", "diff": ["-\t\t\t\"    10  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    14  invokevirtual java/io/PrintStream.println(Ljava/lang/Object;)V [27]\\n\" + ", "-\t\t\t\"    17  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    14  invokevirtual java.io.PrintStream.println(java.lang.Object) : void  [27]\\n\" + ", "+\t\t\t\"    17  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    22  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [32]\\n\" + ", "+\t\t\t\"    22  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [32]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 26] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 6, pc: 9] local: i index: 1 type: Ljava/util/ArrayList;\\n\" + ", "-\t\t\t\"        [pc: 10, pc: 26] local: i index: 1 type: Ljava/util/ArrayList;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 26] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 6, pc: 9] local: i index: 1 type: java.util.ArrayList\\n\" + ", "+\t\t\t\"        [pc: 10, pc: 26] local: i index: 1 type: java.util.ArrayList\\n\" + ", "-\t\t\t\"        [pc: 6, pc: 9] local: i index: 1 type: Ljava/util/ArrayList<Ljava/lang/Object;>;\\n\" + ", "-\t\t\t\"        [pc: 10, pc: 26] local: i index: 1 type: Ljava/util/ArrayList<Ljava/lang/Object;>;\\n\";", "+\t\t\t\"        [pc: 6, pc: 9] local: i index: 1 type: java.util.ArrayList<java.lang.Object>\\n\" + ", "+\t\t\t\"        [pc: 10, pc: 26] local: i index: 1 type: java.util.ArrayList<java.lang.Object>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeb693bcc64a25dc599266fdb3bee503", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\"Ambiguous argument for the varargs method byte2(byte[]...) from the type Y. Argument should be casted to byte[][] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to byte[][] when passed to the method byte2(byte[]...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the method object(Object...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the method object(Object...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the method object(Object...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the method object(Object...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the method object(Object...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object2(Object[]...) from the type Y. Argument should be casted to Object[][] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[][] when passed to the method object2(Object[]...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object2(Object[]...) from the type Y. Argument should be casted to Object[][] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[][] when passed to the method object2(Object[]...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object2(Object[]...) from the type Y. Argument should be casted to Object[][] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[][] when passed to the method object2(Object[]...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method string(String...) from the type Y. Argument should be casted to String[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to String[] when passed to the method string(String...) from the type Y\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f24b2e91a1006b3f99593c518a2c8782", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Annotation() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Annotation() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [@\ufffd|type.def.Bug|\ufffd(num=155013)@25] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t@\ufffd|type.def.Bug|\ufffd(comment=\\\"field\\\")@100] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t@\ufffd|type.def.Bug|\ufffd(comment=\\\"method\\\", num=155013)@460] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [@\ufffd|Bug|\ufffd@19] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [@\ufffd|ATest|\ufffd@24] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest1 [@\ufffd|Bug|\ufffd@128] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest2 [@\ufffd|ATest|\ufffd@153] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ETest [@\ufffd|Bug|\ufffd@195] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ETest [@\ufffd|ATest|\ufffd@200] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ATest [@\ufffd|Bug|\ufffd@221] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [@!|type.def.Bug|!(num=155013)@25] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t@!|type.def.Bug|!(comment=\\\"field\\\")@100] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t@!|type.def.Bug|!(comment=\\\"method\\\", num=155013)@460] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [@!|Bug|!@19] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [@!|ATest|!@24] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest1 [@!|Bug|!@128] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest2 [@!|ATest|!@153] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ETest [@!|Bug|!@195] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ETest [@!|ATest|!@200] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ATest [@!|Bug|!@221] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5fdaa245db6f1ddf464d34050be3552", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "96a363e844088de7fad02c93968495ea0dca52ac", "commitAfterChange": "20306af2785b6993ef03f5b59102e1d76672145c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\"Varargs argument null should be cast to byte[][] when passed to the method byte2(byte[]...) from type Y\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to byte[][] for the invocation of the varargs method byte2(byte[]...) from type Y. It could alternatively be cast to byte[] for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument null should be cast to Object[] when passed to the method object(Object...) from type Y\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument byte[][] should be cast to Object[] when passed to the method object(Object...) from type Y\\n\" + ", "+\t\t\t\"The argument of type byte[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument byte[][][] should be cast to Object[] when passed to the method object(Object...) from type Y\\n\" + ", "+\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument String[] should be cast to Object[] when passed to the method object(Object...) from type Y\\n\" + ", "+\t\t\t\"The argument of type String[] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument String[][] should be cast to Object[] when passed to the method object(Object...) from type Y\\n\" + ", "+\t\t\t\"The argument of type String[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument null should be cast to Object[][] when passed to the method object2(Object[]...) from type Y\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument byte[][][] should be cast to Object[][] when passed to the method object2(Object[]...) from type Y\\n\" + ", "+\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument String[][] should be cast to Object[][] when passed to the method object2(Object[]...) from type Y\\n\" + ", "+\t\t\t\"The argument of type String[][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument null should be cast to String[] when passed to the method string(String...) from type Y\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to String[] for the invocation of the varargs method string(String...) from type Y. It could alternatively be cast to String for a varargs invocation\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99e6b390503f62a2ca57cda5181de0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testStringAnyStrings03() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faa58994e84ff6a82ef714b7158239ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": " public void testTypeRefGenericsTest11_WildcardBound() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest11_WildcardBound() throws CoreException", "diff": ["-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends \ufffd|Object|\ufffd>, X<? super String>, X<? extends Exception>>,@56] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super \ufffd|String|\ufffd>, X<? extends Exception>>,@75] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super String>, X<? extends \ufffd|Exception|\ufffd>>,@96] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends \ufffd|Object|\ufffd, ? super String, X<? extends Exception>>>,@125] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super \ufffd|String|\ufffd, X<? extends Exception>>>,@141] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super String, X<? extends \ufffd|Exception|\ufffd>>>,@161] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends \ufffd|Object|\ufffd, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@189] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super \ufffd|String|\ufffd>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@207] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends \ufffd|Exception|\ufffd>>, X<X<X<? extends java.io.Serializable>>>>,@230] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends \ufffd|java.io.Serializable|\ufffd>>>>,@259] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<X<X<? super \ufffd|String|\ufffd>>>>> z;@303] EXACT_MATCH\"", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends !|Object|!>, X<? super String>, X<? extends Exception>>,@56] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super !|String|!>, X<? extends Exception>>,@75] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super String>, X<? extends !|Exception|!>>,@96] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends !|Object|!, ? super String, X<? extends Exception>>>,@125] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super !|String|!, X<? extends Exception>>>,@141] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super String, X<? extends !|Exception|!>>>,@161] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends !|Object|!, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@189] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super !|String|!>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@207] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends !|Exception|!>>, X<X<X<? extends java.io.Serializable>>>>,@230] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends !|java.io.Serializable|!>>>>,@259] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<X<X<? super !|String|!>>>>> z;@303] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb6a5f6ae485edf08568f12934a40fa5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void testListenerPostChange() throws CoreException", "signatureAfterChange": " public void testListenerPostChange() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t[default][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc103dc30be8d510e45c797a16863706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "41321e271ce9d99e44edf867f5f75e8abc4a221f", "commitAfterChange": "61133b8c5e6da454f7cea747a5c83744e4b067c9", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug416174b()", "signatureAfterChange": " \tpublic void testBug416174b()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\"\tabstract class Z extends X {\\n\" + ", "-\t\t\t\"\t               ^\\n\" + ", "-\t\t\t\"The method List<@NonNull X> foo1() from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tList<@NonNull X> foo1() {\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with \\'List<X>\\' returned from X.foo1() (mismatching null constraints)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\"\tabstract class Z extends X {\\n\" + ", "-\t\t\t\"\t               ^\\n\" + ", "-\t\t\t\"The method List<@NonNull X> foo2() from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 24)\\n\" + ", "+\t\t\t\"\tList<@NonNull X> foo2() {\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with \\'List<@Nullable X>\\' returned from X.foo2() (mismatching null constraints)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\"\tabstract class Z extends X {\\n\" + ", "-\t\t\t\"\t               ^\\n\" + ", "-\t\t\t\"The method @NonNull List<X> foo3() from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 28)\\n\" + ", "+\t\t\t\"\t@NonNull List<X> foo3() {\\n\" + ", "+\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with \\'@NonNull List<@NonNull X>\\' returned from X.foo3() (mismatching null constraints)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fde7882ecca9f292f866be22ec23c3c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_4.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  \tpublic void test068() throws Exception", "signatureAfterChange": "  \tpublic void test068() throws Exception", "diff": ["-\t\t\t\"     6  if_icmpeq 15\\n\" +", "+\t\t\t\"     6  if_icmpeq 13\\n\" +", "-\t\t\t\"    12  ifne 15\\n\" +", "-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "-\t\t\t\"    18  iload_0 [i]\\n\" +", "-\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "-\t\t\t\"    22  return\\n\" +", "+\t\t\t\"    12  pop\\n\" +", "+\t\t\t\"    13  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" +", "+\t\t\t\"    16  iload_0 [i]\\n\" +", "+\t\t\t\"    17  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" +", "+\t\t\t\"    20  return\\n\" +", "-\t\t\t\"        [pc: 15, line: 11]\\n\" +", "-\t\t\t\"        [pc: 22, line: 13]\\n\" +", "+\t\t\t\"        [pc: 13, line: 11]\\n\" +", "+\t\t\t\"        [pc: 20, line: 13]\\n\" +", "-\t\t\t\"        [pc: 3, pc: 23] local: i index: 0 type: int\\n\";", "+\t\t\t\"        [pc: 3, pc: 21] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe039ebb441aa6259b79d5d607afe7c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "988db3ec863dadeb2db80ab85efafc59fca27d63", "commitAfterChange": "bba7694c48471620eaabd1cb9ca1daab01462bcd", "methodNumberBeforeChange": 335, "methodNumberAfterChange": 335, "signatureBeforeChange": " public void test184()", "signatureAfterChange": " public void test184()", "diff": ["-\t\t\t\"X.java\",", "+\t\t\t\"A.java\",", "-\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"1. WARNING in A.java (at line 6)\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"2. WARNING in A.java (at line 9)\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"3. WARNING in A.java (at line 9)\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"4. WARNING in A.java (at line 11)\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\"5. WARNING in A.java (at line 12)\\n\" + ", "-\t\t\"6. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"6. WARNING in A.java (at line 13)\\n\" + ", "-\t\t\"7. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"7. WARNING in A.java (at line 15)\\n\" + ", "-\t\t\"8. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\"8. WARNING in A.java (at line 16)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe1a6e8513eea7639dbea2c2bef43cdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void testStringNestedMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R1.java [GM] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_wld [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java [GM] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_wld [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_wld [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_wld [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] EQUIVALENT_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe338f48f9428556dfe8286eff0a8da3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\t\t\"    0  aload_0\\n\" + ", "-\t\t\t\"    1  invokespecial #9 <Method java/lang/Object.<init>()V>\\n\" + ", "+\t\t\t\"    0  aload_0 [this]\\n\" + ", "+\t\t\t\"    1  invokespecial java/lang/Object.<init>()V [9]\\n\" + ", "-\t\t\t\"     1  newarray #11 long\\n\" + ", "-\t\t\t\"     3  astore_1\\n\" + ", "-\t\t\t\"     4  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     7  aload_1\\n\" + ", "-\t\t\t\"     8  invokevirtual #27 <Method [J.clone()Ljava/lang/Object;>\\n\" + ", "-\t\t\t\"    11  invokevirtual #33 <Method java/io/PrintStream.println(Ljava/lang/Object;)V>\\n\" + ", "-\t\t\t\"    14  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    17  aload_1\\n\" + ", "-\t\t\t\"    18  invokevirtual #27 <Method [J.clone()Ljava/lang/Object;>\\n\" + ", "-\t\t\t\"    21  invokevirtual #33 <Method java/io/PrintStream.println(Ljava/lang/Object;)V>\\n\" + ", "+\t\t\t\"     1  newarray long [11]\\n\" + ", "+\t\t\t\"     3  astore_1 [tab]\\n\" + ", "+\t\t\t\"     4  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  aload_1 [tab]\\n\" + ", "+\t\t\t\"     8  invokevirtual [J.clone()Ljava/lang/Object; [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(Ljava/lang/Object;)V [33]\\n\" + ", "+\t\t\t\"    14  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    17  aload_1 [tab]\\n\" + ", "+\t\t\t\"    18  invokevirtual [J.clone()Ljava/lang/Object; [27]\\n\" + ", "+\t\t\t\"    21  invokevirtual java/io/PrintStream.println(Ljava/lang/Object;)V [33]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feb36f21e71fa69a56060fc7824b29af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 507, "methodNumberAfterChange": 507, "signatureBeforeChange": " \tpublic void test505()", "signatureAfterChange": " \tpublic void test505()", "diff": ["-\t\t\t\"    1  invokespecial java/lang/Object.<init>()V [13]\\n\" + ", "+\t\t\t\"    1  invokespecial java.lang.Object() [13]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: LX<TE;>;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X<E>\\n\" + ", "-\t\t\t\"     4  invokespecial X.<init>()V [22]\\n\" + ", "-\t\t\t\"     7  invokevirtual X.foo()V [25]\\n\" + ", "+\t\t\t\"     4  invokespecial X() [22]\\n\" + ", "+\t\t\t\"     7  invokevirtual X.foo() : void  [25]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 11] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 11] local: args index: 0 type: java.lang.String[]\\n\" + ", "-\t\t\t\"     5  invokespecial X$1.<init>(LX;)V [32]\\n\" + ", "-\t\t\t\"     8  invokevirtual X$1.run()V [35]\\n\" + ", "-\t\t\t\"    11  getstatic java/lang/System.out Ljava/io/PrintStream; [41]\\n\" + ", "+\t\t\t\"     5  invokespecial X$1(X) [32]\\n\" + ", "+\t\t\t\"     8  invokevirtual X$1.run() : void  [35]\\n\" + ", "+\t\t\t\"    11  getstatic java.lang.System.out : java.io.PrintStream [41]\\n\" + ", "-\t\t\t\"    15  getfield X.e LXA; [43]\\n\" + ", "+\t\t\t\"    15  getfield X.e : XA [43]\\n\" + ", "-\t\t\t\"    19  getstatic XB.CONST LXB; [49]\\n\" + ", "-\t\t\t\"    22  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [55]\\n\" + ", "+\t\t\t\"    19  getstatic XB.CONST : XB [49]\\n\" + ", "+\t\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [55]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 26] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 26] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 26] local: this index: 0 type: LX<TE;>;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 26] local: this index: 0 type: X<E>\\n\" + "]}], "num": 11609}
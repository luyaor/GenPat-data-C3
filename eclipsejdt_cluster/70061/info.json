{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56bd78647d9a35384053c208783894e1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0f5b7519921397e0a48180dacb9cfd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 180, "signatureBeforeChange": " public void invalidField(NameReference nameRef, FieldBinding field)", "signatureAfterChange": " public void invalidField(NameReference nameRef, FieldBinding field)", "diff": ["+\t\t\tif ((field.declaringClass.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\t\tIProblem.UndefinedType,", "+\t\t\t\t\t\tnew String[] {new String(field.declaringClass.readableName())},", "+\t\t\t\t\t\tnew String[] {new String(field.declaringClass.shortReadableName())},", "+\t\t\t\t\t\tnameRef.sourceStart,", "+\t\t\t\t\t\tnameRef.sourceEnd);", "+\t\t\t\t\treturn;\t\t\t\t", "+\t\t\t}\t\t\t", "-\t\t\t\tnew String[] {new String(field.declaringClass.leafComponentType().readableName())},", "-\t\t\t\tnew String[] {new String(field.declaringClass.leafComponentType().shortReadableName())},", "+\t\t\t\tnew String[] {new String(field.declaringClass.readableName())},", "+\t\t\t\tnew String[] {new String(field.declaringClass.shortReadableName())},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbeb3a3641571101a3782a8190743e30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 183, "signatureBeforeChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["+\t\t\tif ((method.declaringClass.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\t\tIProblem.UndefinedType,", "+\t\t\t\t\t\tnew String[] {new String(method.declaringClass.readableName())},", "+\t\t\t\t\t\tnew String[] {new String(method.declaringClass.shortReadableName())},", "+\t\t\t\t\t\tmessageSend.receiver.sourceStart,", "+\t\t\t\t\t\tmessageSend.receiver.sourceEnd);", "+\t\t\t\t\treturn;", "+\t\t\t}", "+\t\t\t    \tif ((shownMethod.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\t\tthis.missingTypeInMethod(messageSend, shownMethod);", "+\t\t\t\t\t\treturn;", "+\t\t\t    \t}", "-\t\t\t\tnew String[] {new String(method.declaringClass.leafComponentType().readableName())},", "-\t\t\t\tnew String[] {new String(method.declaringClass.leafComponentType().shortReadableName())},", "+\t\t\t\tnew String[] {new String(method.declaringClass.readableName())},", "+\t\t\t\tnew String[] {new String(method.declaringClass.shortReadableName())},", "-"]}], "num": 70061}
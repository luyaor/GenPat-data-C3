{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec17f6617f9b89aea1917933c2310ec9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2648244b2bd443f79416ba5fc9bdd8b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems, Map unknownElements)", "signatureAfterChange": " \tpublic IClasspathEntry[] decodeClasspath(String xmlClasspath, Map unknownElements) throws IOException, AssertionFailedException", "diff": ["+\tpublic IClasspathEntry[] decodeClasspath(String xmlClasspath, Map unknownElements) throws IOException, AssertionFailedException {", "-\t */", "-\tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems, Map unknownElements) {", "-", "+\t\tStringReader reader = new StringReader(xmlClasspath);", "+\t\tElement cpElement;", "-\t\t\tif (xmlClasspath == null) return null;", "-\t\t\tStringReader reader = new StringReader(xmlClasspath);", "-\t\t\tElement cpElement;", "-\t", "-\t\t\ttry {", "-\t\t\t\tDocumentBuilder parser =", "-\t\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "-\t\t\t\tcpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "-\t\t\t} catch (SAXException e) {", "-\t\t\t\tthrow new IOException(Messages.file_badFormat); ", "-\t\t\t} catch (ParserConfigurationException e) {", "-\t\t\t\tthrow new IOException(Messages.file_badFormat); ", "-\t\t\t} finally {", "-\t\t\t\treader.close();", "-\t\t\t}", "-\t", "-\t\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"classpath\")) { //$NON-NLS-1$", "-\t\t\t\tthrow new IOException(Messages.file_badFormat); ", "-\t\t\t}", "-\t\t\tNodeList list = cpElement.getElementsByTagName(\"classpathentry\"); //$NON-NLS-1$", "-\t\t\tint length = list.getLength();", "-\t", "-\t\t\tfor (int i = 0; i < length; ++i) {", "-\t\t\t\tNode node = list.item(i);", "-\t\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "-\t\t\t\t\tIClasspathEntry entry = ClasspathEntry.elementDecode((Element)node, this, unknownElements);", "-\t\t\t\t\tif (entry != null){", "-\t\t\t\t\t\tif (entry.getContentKind() == ClasspathEntry.K_OUTPUT) { ", "-\t\t\t\t\t\t\tdefaultOutput = entry; // separate output", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tpaths.add(entry);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t\t// bad format", "-\t\t\tif (createMarker && this.project.isAccessible()) {", "-\t\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tMessages.bind(Messages.classpath_xmlFormatError, new String[] {this.getElementName(), e.getMessage()}))); ", "-\t\t\t}", "-\t\t\tif (logProblems) {", "-\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t+\"/.classpath, will mark classpath as invalid\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\treturn INVALID_CLASSPATH;", "-\t\t} catch (AssertionFailedException e) { ", "-\t\t\t// failed creating CP entries from file", "-\t\t\tif (createMarker && this.project.isAccessible()) {", "-\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\tMessages.bind(Messages.classpath_illegalEntryInClasspathFile, new String[] {this.getElementName(), e.getMessage()}))); ", "-\t\t\t}", "-\t\t\tif (logProblems) {", "-\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t+\"/.classpath, will mark classpath as invalid\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\treturn INVALID_CLASSPATH;", "+\t\t\tDocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();", "+\t\t\tcpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "+\t\t} catch (SAXException e) {", "+\t\t\tthrow new IOException(Messages.file_badFormat); ", "+\t\t} catch (ParserConfigurationException e) {", "+\t\t\tthrow new IOException(Messages.file_badFormat); ", "+\t\t} finally {", "+\t\t\treader.close();", "-\t\t// return an empty classpath is it size is 0, to differenciate from a null classpath", "+\t", "+\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"classpath\")) { //$NON-NLS-1$", "+\t\t\tthrow new IOException(Messages.file_badFormat); ", "+\t\t}", "+\t\tNodeList list = cpElement.getElementsByTagName(\"classpathentry\"); //$NON-NLS-1$", "+\t\tint length = list.getLength();", "+\t", "+\t\tfor (int i = 0; i < length; ++i) {", "+\t\t\tNode node = list.item(i);", "+\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "+\t\t\t\tIClasspathEntry entry = ClasspathEntry.elementDecode((Element)node, this, unknownElements);", "+\t\t\t\tif (entry != null){", "+\t\t\t\t\tif (entry.getContentKind() == ClasspathEntry.K_OUTPUT) { ", "+\t\t\t\t\t\tdefaultOutput = entry; // separate output", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tpaths.add(entry);", "+\t\t\t}", "+\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// return a new empty classpath is it size is 0, to differenciate from an INVALID_CLASSPATH", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b8004c56330448a125b42fbfaf91c86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f11400a6293169aae30e17b2e27f5adb8ea51511", "commitAfterChange": "f04e3f1ae3453f83dbe0aa3f6ea76c9c43c152ce", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \r \tpublic void loadVariables() throws CoreException", "signatureAfterChange": "\r \r \tpublic void loadVariables() throws CoreException", "diff": ["+\r", "+\t\t// backward compatibility, consider persistent property\t\r", "+\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"variables\"); //$NON-NLS-1$\r", "+\t\tString xmlString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);\r", "-\t\tString xmlString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(\r", "-\t\t\t\t\t\t\t\tnew QualifiedName(JavaCore.PLUGIN_ID, \"variables\")); //$NON-NLS-1$\r", "-\t\t\tif (xmlString != null) readVariables(xmlString);\r", "+\t\t\tif (xmlString != null){\r", "+\t\t\t\tStringReader reader = new StringReader(xmlString);\r", "+\t\t\t\tElement cpElement;\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tDocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();\r", "+\t\t\t\t\tcpElement = parser.parse(new InputSource(reader)).getDocumentElement();\r", "+\t\t\t\t} catch(SAXException e) {\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t} catch(ParserConfigurationException e){\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t} finally {\r", "+\t\t\t\t\treader.close();\r", "+\t\t\t\t}\r", "+\t\t\t\tif (cpElement == null) return;\r", "+\t\t\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"variables\")) { //$NON-NLS-1$\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t\tArrayList variableNamesList = new ArrayList();\r", "+\t\t\t\tArrayList variablePathsList = new ArrayList();\r", "+\t\t\t\t\r", "+\t\t\t\tNodeList list= cpElement.getChildNodes();\r", "+\t\t\t\tint length= list.getLength();\r", "+\t\t\t\tfor (int i= 0; i < length; ++i) {\r", "+\t\t\t\t\tNode node= list.item(i);\r", "+\t\t\t\t\tshort type= node.getNodeType();\r", "+\t\t\t\t\tif (type == Node.ELEMENT_NODE) {\r", "+\t\t\t\t\t\tElement element= (Element) node;\r", "+\t\t\t\t\t\tif (element.getNodeName().equalsIgnoreCase(\"variable\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\tvariablePut( \r", "+\t\t\t\t\t\t\t\telement.getAttribute(\"name\"), //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\tnew Path(element.getAttribute(\"path\"))); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "-\t\t\treturn;\r", "+\t\t} finally {\r", "+\t\t\tif (xmlString != null){\r", "+\t\t\t\tResourcesPlugin.getWorkspace().getRoot().setPersistentProperty(qName, null); // flush old one\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\r", "+\t\t// load variables from preferences into cache\r", "+\t\tPreferences preferences = JavaCore.getPlugin().getPluginPreferences();\r", "+\r", "+\t\t// only get variable from preferences not set to their default\r", "+\t\tString[] propertyNames = preferences.propertyNames();\r", "+\t\tint prefixLength = CP_VARIABLE_PREFERENCES_PREFIX.length();\r", "+\t\tfor (int i = 0; i < propertyNames.length; i++){\r", "+\t\t\tString propertyName = propertyNames[i];\r", "+\t\t\tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)){\r", "+\t\t\t\tString varName = propertyName.substring(prefixLength);\r", "+\t\t\t\tIPath varPath = new Path(preferences.getString(propertyName));\r", "+\t\t\t\tVariables.put(varName, varPath);\r", "+\t\t\t}\r", "+\t\t}\t\t\r"]}], "num": 26471}
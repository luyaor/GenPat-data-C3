{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dde0cc476fcaf5b4e582a5f6b5181da5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e7275985a216721ee4f012a143a207b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 10, "signatureBeforeChange": " private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs)", "signatureAfterChange": " private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs)", "diff": ["+ */", "+private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs) {", "+\t// need a minimum 1 char", "+\tif (start >= string.length) {", "+\t\tthrow new IllegalArgumentException();", "+\t}", "+\tchar c = string[start];", "+\tif (isVarArgs) {", "+\t\tswitch (c) {", "+\t\t\tcase C_ARRAY :", "+\t\t\t\treturn appendArrayTypeSignature(string, start, fullyQualifyTypeNames, buffer, true);", "+\t\t\tcase C_RESOLVED :", "+\t\t\tcase C_UNRESOLVED :", "+\t\t\tcase C_TYPE_VARIABLE :", "+\t\t\tcase C_BOOLEAN :", "+\t\t\tcase C_BYTE :", "+\t\t\tcase C_CHAR :", "+\t\t\tcase C_DOUBLE :", "+\t\t\tcase C_FLOAT :", "+\t\t\tcase C_INT :", "+\t\t\tcase C_LONG :", "+\t\t\tcase C_SHORT :", "+\t\t\tcase C_VOID :", "+\t\t\tcase C_STAR:", "+\t\t\tcase C_EXTENDS:", "+\t\t\tcase C_SUPER:", "+\t\t\tcase C_CAPTURE:", "+\t\t\tcase C_INTERSECTION :", "+\t\t\tdefault:", "+\t\t\t\tthrow new IllegalArgumentException(); // a var args is an array type", "+\t\t}", "+\t} else {", "+\t\tswitch (c) {", "+\t\t\tcase C_ARRAY :", "+\t\t\t\treturn appendArrayTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "+\t\t\tcase C_RESOLVED :", "+\t\t\tcase C_UNRESOLVED :", "+\t\t\t\treturn appendClassTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "+\t\t\tcase C_TYPE_VARIABLE :", "+\t\t\t\tint e = Util.scanTypeVariableSignature(string, start);", "+\t\t\t\tbuffer.append(string, start + 1, e - start - 1);", "+\t\t\t\treturn e;", "+\t\t\tcase C_BOOLEAN :", "+\t\t\t\tbuffer.append(BOOLEAN);", "+\t\t\t\treturn start;", "+\t\t\tcase C_BYTE :", "+\t\t\t\tbuffer.append(BYTE);", "+\t\t\t\treturn start;", "+\t\t\tcase C_CHAR :", "+\t\t\t\tbuffer.append(CHAR);", "+\t\t\t\treturn start;", "+\t\t\tcase C_DOUBLE :", "+\t\t\t\tbuffer.append(DOUBLE);", "+\t\t\t\treturn start;", "+\t\t\tcase C_FLOAT :", "+\t\t\t\tbuffer.append(FLOAT);", "+\t\t\t\treturn start;", "+\t\t\tcase C_INT :", "+\t\t\t\tbuffer.append(INT);", "+\t\t\t\treturn start;", "+\t\t\tcase C_LONG :", "+\t\t\t\tbuffer.append(LONG);", "+\t\t\t\treturn start;", "+\t\t\tcase C_SHORT :", "+\t\t\t\tbuffer.append(SHORT);", "+\t\t\t\treturn start;", "+\t\t\tcase C_VOID :", "+\t\t\t\tbuffer.append(VOID);", "+\t\t\t\treturn start;", "+\t\t\tcase C_CAPTURE :", "+\t\t\t\treturn appendCaptureTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "+\t\t\tcase C_INTERSECTION :", "+\t\t\t\treturn appendIntersectionTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "+\t\t\tcase C_STAR:", "+\t\t\tcase C_EXTENDS:", "+\t\t\tcase C_SUPER:", "+\t\t\t\treturn appendTypeArgumentSignature(string, start, fullyQualifyTypeNames, buffer);", "+\t\t\tdefault :", "+\t\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t}", "+}", "- */", "-private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs) {", "-\t// need a minimum 1 char", "-\tif (start >= string.length) {", "-\t\tthrow new IllegalArgumentException();", "-\t}", "-\tchar c = string[start];", "-\tif (isVarArgs) {", "-\t\tswitch (c) {", "-\t\t\tcase C_ARRAY :", "-\t\t\t\treturn appendArrayTypeSignature(string, start, fullyQualifyTypeNames, buffer, true);", "-\t\t\tcase C_RESOLVED :", "-\t\t\tcase C_UNRESOLVED :", "-\t\t\tcase C_TYPE_VARIABLE :", "-\t\t\tcase C_BOOLEAN :", "-\t\t\tcase C_BYTE :", "-\t\t\tcase C_CHAR :", "-\t\t\tcase C_DOUBLE :", "-\t\t\tcase C_FLOAT :", "-\t\t\tcase C_INT :", "-\t\t\tcase C_LONG :", "-\t\t\tcase C_SHORT :", "-\t\t\tcase C_VOID :", "-\t\t\tcase C_STAR:", "-\t\t\tcase C_EXTENDS:", "-\t\t\tcase C_SUPER:", "-\t\t\tcase C_CAPTURE:", "-\t\t\tdefault:", "-\t\t\t\tthrow new IllegalArgumentException(); // a var args is an array type", "-\t\t}", "-\t} else {", "-\t\tswitch (c) {", "-\t\t\tcase C_ARRAY :", "-\t\t\t\treturn appendArrayTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "-\t\t\tcase C_RESOLVED :", "-\t\t\tcase C_UNRESOLVED :", "-\t\t\t\treturn appendClassTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "-\t\t\tcase C_TYPE_VARIABLE :", "-\t\t\t\tint e = Util.scanTypeVariableSignature(string, start);", "-\t\t\t\tbuffer.append(string, start + 1, e - start - 1);", "-\t\t\t\treturn e;", "-\t\t\tcase C_BOOLEAN :", "-\t\t\t\tbuffer.append(BOOLEAN);", "-\t\t\t\treturn start;", "-\t\t\tcase C_BYTE :", "-\t\t\t\tbuffer.append(BYTE);", "-\t\t\t\treturn start;", "-\t\t\tcase C_CHAR :", "-\t\t\t\tbuffer.append(CHAR);", "-\t\t\t\treturn start;", "-\t\t\tcase C_DOUBLE :", "-\t\t\t\tbuffer.append(DOUBLE);", "-\t\t\t\treturn start;", "-\t\t\tcase C_FLOAT :", "-\t\t\t\tbuffer.append(FLOAT);", "-\t\t\t\treturn start;", "-\t\t\tcase C_INT :", "-\t\t\t\tbuffer.append(INT);", "-\t\t\t\treturn start;", "-\t\t\tcase C_LONG :", "-\t\t\t\tbuffer.append(LONG);", "-\t\t\t\treturn start;", "-\t\t\tcase C_SHORT :", "-\t\t\t\tbuffer.append(SHORT);", "-\t\t\t\treturn start;", "-\t\t\tcase C_VOID :", "-\t\t\t\tbuffer.append(VOID);", "-\t\t\t\treturn start;", "-\t\t\tcase C_CAPTURE :", "-\t\t\t\treturn appendCaptureTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "-\t\t\tcase C_STAR:", "-\t\t\tcase C_EXTENDS:", "-\t\t\tcase C_SUPER:", "-\t\t\t\treturn appendTypeArgumentSignature(string, start, fullyQualifyTypeNames, buffer);", "-\t\t\tdefault :", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f651f0cdbbeebac99ed70325f3c081ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 59, "signatureBeforeChange": " private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs)", "signatureAfterChange": " private static int appendTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs)", "diff": ["+\t\t\tcase C_CAPTURE:", "+\t\t\tcase C_CAPTURE :", "+\t\t\t\treturn appendCaptureTypeSignature(string, start, fullyQualifyTypeNames, buffer);"]}], "num": 50971}
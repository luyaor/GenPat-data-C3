{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "883cf2f0bac57ecddfa21bab46d30892", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89bc8f0b57da8d22960e7e1384af6612", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "f98ff60ea4aadb5ad960a35b0293f0998e35fc18", "commitAfterChange": "e9dab03249c4cb99686aef75ce88b855ecbdceb7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r protected void addAffectedChild(JavaElementDelta child)", "signatureAfterChange": "\r protected void addAffectedChild(JavaElementDelta child)", "diff": ["+\r", "+\t// if a child delta is added to a compilation unit delta or below, \r", "+\t// it's a fine grained delta\r", "+\tif (fChangedElement.getElementType() >= IJavaElement.COMPILATION_UNIT) {\r", "+\t\tthis.fineGrained();\r", "+\t}\r", "+\t\t\tdefault: \r", "+\t\t\t\t// unknown -> existing child becomes the child with the existing child's flags\r", "+\t\t\t\tint flags = existingChild.getFlags();\r", "+\t\t\t\tfAffectedChildren[existingChildIndex] = child;\r", "+\t\t\t\tchild.fChangeFlags |= flags;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf26e4f8913ae4350ef5cfeb43790a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "1cc27f00d44ff550ae924e7bd5ea49802a37b09c", "commitAfterChange": "21059c3ab0756be326392346431fb9bfe527629e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate void computeNullStatus(FlowInfo trueBranchInfo, FlowInfo falseBranchInfo)", "signatureAfterChange": "  \tprivate void computeNullStatus(FlowInfo trueBranchInfo, FlowInfo falseBranchInfo)", "diff": ["+\t\tif (trueBranchInfo.reachMode() != FlowInfo.REACHABLE) {", "+\t\t\tthis.nullStatus = ifFalseNullStatus;", "+\t\t\treturn;", "+\t\t}", "+\t\tif (falseBranchInfo.reachMode() != FlowInfo.REACHABLE) {", "+\t\t\tthis.nullStatus = ifTrueNullStatus;", "+\t\t\treturn;", "+\t\t}", "+"]}], "num": 29677}
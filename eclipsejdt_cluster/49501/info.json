{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09c906d294a8bac0b82d23f289b13e3d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31ab94deb3b77027c8c2cddc88f3e6f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected IType getHandle(IGenericType genericType)", "signatureAfterChange": " protected IType getHandle(IGenericType genericType)", "diff": ["-\t\t\tHierarchyType hierarchyType = (HierarchyType)genericType;", "-\t\t\tCompilationUnit unit = (CompilationUnit)this.cuToHandle.get(hierarchyType.originatingUnit);", "-", "-\t\t\t// collect enclosing type names", "-\t\t\tArrayList enclosingTypeNames = new ArrayList();", "-\t\t\tHierarchyType enclosingType = hierarchyType;", "-\t\t\tdo {", "-\t\t\t\tenclosingTypeNames.add(enclosingType.name);", "-\t\t\t\tenclosingType = enclosingType.enclosingType;", "-\t\t\t} while (enclosingType != null);", "-\t\t\tint length = enclosingTypeNames.size();", "-\t\t\tchar[][] simpleTypeNames = new char[length][];", "-\t\t\tenclosingTypeNames.toArray(simpleTypeNames);", "-", "-\t\t\t// build handle", "-\t\t\ttype = unit.getType(new String(simpleTypeNames[length-1]));", "-\t\t\tfor (int i = length-2; i >= 0; i--) {", "-\t\t\t\ttype = type.getType(new String(simpleTypeNames[i]));", "-\t\t\t}", "+\t\t\ttype = ((HierarchyType)genericType).typeHandle;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ab791292f7ac1d10fd4676093dce8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "83c47ad58d0e74e38827d2d1f073a35312f6f8d5", "commitAfterChange": "1d0bf2fd1ae02cf0a5ebd8dc2dd268afda57373a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void _test013() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test013() throws JavaModelException, CoreException", "diff": ["-\tpublic void _test013() throws JavaModelException, CoreException {", "+\tpublic void test013() throws JavaModelException, CoreException {", "-\t\tString independentEncodedContents = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(encodedContents);", "-\t\tString independentSource = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(source);", "-\t\tassertEquals(\"Encoded UTF-8 source should have been decoded the same way!\", independentEncodedContents, independentSource);", "+//\t\tString independentEncodedContents = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(encodedContents);", "+//\t\tString independentSource = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(source);", "+//\t\tassertEquals(\"Encoded UTF-8 source should have been decoded the same way!\", independentEncodedContents, independentSource);", "+\t\tassertSourceEquals(\"Encoded UTF-8 source should have been decoded the same way!\", source, encodedContents);", "-\t\t// Now compare bytes array", "-\t\tbyte[] sourceBytes =source.getBytes();", "-\t\tbyte[] encodedBytes = Util.getResourceContentsAsByteArray(this.utf8File);", "-\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "-\t\tfor (int i = 0, max = sourceBytes.length; i < max; i++) {", "-\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, sourceBytes[i] == encodedBytes[i]);", "-\t\t}", "+\t\t// Cannot compare bytes array without encoding as we're dependent of linux/windows os for new lines delimiter"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fba3a8e6a51bfd12c9de42fc2ba3da26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "7dfdcc33c89bb2a137f9c84963dd6ab9ff74a661", "commitAfterChange": "f24c43070146ea63fd82e385697f695064b998f3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void test008() throws JavaModelException, CoreException, UnsupportedEncodingException", "signatureAfterChange": " \tpublic void test021() throws JavaModelException, CoreException", "diff": ["-\t */", "-\tpublic void test008() throws JavaModelException, CoreException, UnsupportedEncodingException {", "-\t\t// Get class file and compare source", "-\t\tassertNotNull(this.utf8Source);", "-\t\tassertNotNull(source);", "-\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File, encoding));", "-\t\tassertEquals(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents, source);", "-\t}", "+\tpublic void test021() throws JavaModelException, CoreException {", "+\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File, vmEncoding));"]}], "num": 49501}
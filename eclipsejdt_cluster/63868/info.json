{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c192259518b1fcc9b93c01a51ab0d5b7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2616e67dea5498b4c0af390d09cacf2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "8411039eacb670f9964cb949d3cc86dcbeba1c88", "commitAfterChange": "c7c6d10c1ba0f70ed921c85d28fd8eb0e35ff277", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["+", "+\t\t\t// ensure external jars are refreshed (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=93668)", "+\t\t\t// before search is initialized (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=405051)", "+\t\t\tfinal JavaModel model = manager.getJavaModel();", "+\t\t\ttry {", "+\t\t\t\tif (monitor != null)", "+\t\t\t\t\tmonitor.subTask(Messages.javamodel_refreshing_external_jars);", "+\t\t\t\tmodel.refreshExternalArchives(", "+\t\t\t\t\tnull/*refresh all projects*/,", "+\t\t\t\t\tmonitor == null ? null : new SubProgressMonitor(monitor, 1) // 1% of the time is spent in jar refresh", "+\t\t\t\t);", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// refreshing failed: ignore", "+\t\t\t}", "+", "-\t\t\tfinal JavaModel model = manager.getJavaModel();", "-", "-\t\t\t// ensure external jars are refreshed (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=93668)", "-\t\t\ttry {", "-\t\t\t\tif (monitor != null)", "-\t\t\t\t\tmonitor.subTask(Messages.javamodel_refreshing_external_jars);", "-\t\t\t\tmodel.refreshExternalArchives(", "-\t\t\t\t\tnull/*refresh all projects*/,", "-\t\t\t\t\tmonitor == null ? null : new SubProgressMonitor(monitor, 1) // 1% of the time is spent in jar refresh", "-\t\t\t\t);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// refreshing failed: ignore", "-\t\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2825b69a89b728d54280be73b4bbbe2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "8308fbb078e8e036c815675ec6bbbcc0aa49f4d3", "commitAfterChange": "e9cd393d27e7dcc4d1e8856bf858c025f0164f22", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "diff": ["+\t\tConstant constant = assertExpression.constant;\r", "+\t\tif (constant != NotAConstant && constant.booleanValue() == true) {\r", "+\t\t\treturn flowInfo;\r", "+\t\t}\r", "+\r", "-\t\t// add the assert support in the clinit\r", "-\t\r", "+\t\t// assertion might throw AssertionError (unchecked), which can have consequences in term of\r", "+\t\t// definitely assigned variables (depending on caught exception in the context)\r", "+\t\t// DISABLED - AssertionError is unchecked, try statements are already protected against these.\r", "+\t\t//flowContext.checkExceptionHandlers(currentScope.getJavaLangAssertionError(), this, assertInfo, currentScope);\r", "+\r", "-\t\t\r", "-\t\tConstant constant = assertExpression.constant;\r", "-\t\t\r", "-\t\tif (constant != NotAConstant && constant.booleanValue() == true) {\r", "-\t\t\treturn flowInfo;\r", "-\t\t}\r", "+\r", "+\t\t// add the assert support in the clinit\r", "+\t\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72aedc728115dbf6e4a34bb906719039", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "a7e4d01a51c73dd3e64b855df6fdca037a0f348d", "commitAfterChange": "07b82c9368bd10ac7ebb1046caebd6da084b537f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic boolean visit(ForStatement node)", "signatureAfterChange": " \tpublic boolean visit(ForStatement node)", "diff": ["+\t\tif (node.getExpression() != null) {", "+\t\t\tnode.getExpression().accept(this);", "+\t\t}", "+\t\tbuffer.append(\"; \");//$NON-NLS-1$", "-\t\t}", "-\t\tbuffer.append(\"; \");//$NON-NLS-1$", "-\t\tif (node.getExpression() != null) {", "-\t\t\tnode.getExpression().accept(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a61369e2843ed5b8885a298f6f8d614", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "b45392406a30d88ba922491bbb915a8d0d15f42c", "commitAfterChange": "915adeadf0a77f488d15bb1d0bf2559201b1f96d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static IStatus validateClassFileName(String name)", "signatureAfterChange": " \tpublic static IStatus validateClassFileName(String name)", "diff": ["+\t\tif (!Util.isClassFileName(name)) {", "+\t\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.classFile.notClassFileName\"), null); //$NON-NLS-1$", "+\t\t}", "-\t\t}", "-\t\tif (!Util.isClassFileName(name)) {", "-\t\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.classFile.notClassFileName\"), null); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c871fa48154fb49a96865e6d5c37df1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a6b76fc7d7890cbbcb2fc001b8031466dd0ad995", "commitAfterChange": "8c05bff0d88a6a537ed2accc1c62c5430e927aee", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// type variables take precedence over member types", "-\t\t\t\t\t\tTypeVariableBinding typeVariable = sourceType.getTypeVariable(name);", "-\t\t\t\t\t\tif (typeVariable != null) {", "-\t\t\t\t\t\t\tif (insideStaticContext) // do not consider this type modifiers: access is legite within same type", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, typeVariable, ProblemReasons.NonStaticReferenceInStaticContext);", "-\t\t\t\t\t\t\treturn typeVariable;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t// member types take precedence over type variables", "-\t\t\t\t\t\tinsideTypeAnnotation = false;", "+\t\t\t\t\t\tTypeVariableBinding typeVariable = sourceType.getTypeVariable(name);", "+\t\t\t\t\t\tif (typeVariable != null) {", "+\t\t\t\t\t\t\tif (insideStaticContext) // do not consider this type modifiers: access is legite within same type", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, typeVariable, ProblemReasons.NonStaticReferenceInStaticContext);", "+\t\t\t\t\t\t\treturn typeVariable;", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tinsideTypeAnnotation = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f19ac3621792bdb7cb71a718d679b07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "b45392406a30d88ba922491bbb915a8d0d15f42c", "commitAfterChange": "915adeadf0a77f488d15bb1d0bf2559201b1f96d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static IStatus validateCompilationUnitName(String name)", "signatureAfterChange": " \tpublic static IStatus validateCompilationUnitName(String name)", "diff": ["+\t\tif (!Util.isJavaFileName(name)) {", "+\t\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.unit.notJavaName\"), null); //$NON-NLS-1$", "+\t\t}", "-\t\t}", "-\t\tif (!Util.isJavaFileName(name)) {", "-\t\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.unit.notJavaName\"), null); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "861fe08c5cb6101e4f49075364d8967b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "c01d4e421a0fa2c650a398bcf3ff121ab0577af6", "commitAfterChange": "42d19dd3705bce900dfc36deb77d97fde99bf108", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["+\t\tASTNode[] bodyDeclarations = CodeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), this.options);", "+\t\t", "+\t\tif (bodyDeclarations != null) {", "+\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, offset, length);", "+\t\t}", "+", "-\t\tASTNode[] bodyDeclarations = CodeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), this.options);", "-\t\t", "-\t\tif (bodyDeclarations != null) {", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, offset, length);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1437a1fc2e79ad25fefa4812a5b7b42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "8499ee1311c075235e045f23469dcc5f2d30119d", "commitAfterChange": "c94b7d416960e973691c5467c6ef8e721aba2e21", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["+", "+\t\t\t// ensure external jars are refreshed (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=93668)", "+\t\t\t// before search is initialized (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=405051)", "+\t\t\tfinal JavaModel model = manager.getJavaModel();", "+\t\t\ttry {", "+\t\t\t\tif (monitor != null)", "+\t\t\t\t\tmonitor.subTask(Messages.javamodel_refreshing_external_jars);", "+\t\t\t\tmodel.refreshExternalArchives(", "+\t\t\t\t\tnull/*refresh all projects*/,", "+\t\t\t\t\tmonitor == null ? null : new SubProgressMonitor(monitor, 1) // 1% of the time is spent in jar refresh", "+\t\t\t\t);", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// refreshing failed: ignore", "+\t\t\t}", "+", "-\t\t\tfinal JavaModel model = manager.getJavaModel();", "-", "-\t\t\t// ensure external jars are refreshed (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=93668)", "-\t\t\ttry {", "-\t\t\t\tif (monitor != null)", "-\t\t\t\t\tmonitor.subTask(Messages.javamodel_refreshing_external_jars);", "-\t\t\t\tmodel.refreshExternalArchives(", "-\t\t\t\t\tnull/*refresh all projects*/,", "-\t\t\t\t\tmonitor == null ? null : new SubProgressMonitor(monitor, 1) // 1% of the time is spent in jar refresh", "-\t\t\t\t);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// refreshing failed: ignore", "-\t\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1a8556bf70237d9ef48033e815226dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "commitAfterChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "diff": ["-\t\tParameterizedGenericMethodBinding methodSubstitute = null;", "+\t\tif (invocationSite.checkingPotentialCompatibility()) {", "+\t\t\t// Not interested in a solution, only that there could potentially be one.", "+\t\t\treturn scope.environment().createParameterizedGenericMethod(originalMethod, typeVariables);", "+\t\t}", "+\t\t", "+\t\tParameterizedGenericMethodBinding methodSubstitute = null;", "-\t\t", "-\t\tif (invocationSite.checkingPotentialCompatibility()) {", "-\t\t\treturn scope.environment().createParameterizedGenericMethod(originalMethod, typeVariables);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a28f35d2862f06a0429360fc7ab64ddf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "837346ba964bb0d4b1f43b6b3500ddc7ecfbb966", "commitAfterChange": "f5a6b32f5440a6dc40e1353ed6c94f89e64c1de3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["-\t\t\t\t", "-\t\t\tcurrentElement = currentElement.add(statement, 0);", "+\t\t\t", "+\t\t\tcurrentElement = currentElement.add(statement, 0);", "-\t\t\t\t", "-\t\t\tcurrentElement = currentElement.add(statement, 0);", "+\t\t\t", "+\t\t\tcurrentElement = currentElement.add(statement, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1278260ce035e0f30b47ea821201c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "ea3771830307a556e22215a6aa94c2a020dd70b2", "commitAfterChange": "9ac233cf182f6e70412f305dd1c8a286a9a1acbd", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["+\t\t// probe for expression", "-\t\tASTNode[] bodyDeclarations = this.codeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), getDefaultCompilerOptions(), true);", "-\t\tif (bodyDeclarations != null) {", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, offset, length);", "-\t\t}", "-", "+\t\t// probe for statements", "+\t\t// probe for body declarations (fields, methods, constructors)", "+\t\tASTNode[] bodyDeclarations = this.codeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), getDefaultCompilerOptions(), true);", "+\t\tif (bodyDeclarations != null) {", "+\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, offset, length);", "+\t\t}", "+", "+\t\t// this has to be a compilation unit"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6c31be775eac7cedf028ce1f600a830", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java", "commitBeforeChange": "8c552a701752a7e22d86888c5eb43dca69c98dce", "commitAfterChange": "36858d394c62720a4fd2be818d3f0dba5f38425d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \t@Override \tprotected void saveSettings()", "signatureAfterChange": "  \t@Override \tprotected void saveSettings()", "diff": ["-\t\t\t\t\tfAptProject.preferenceChanged(AptPreferenceConstants.APT_ENABLED);", "+\t\t\t\t\t", "+\t\t\t\t\tfAptProject.preferenceChanged(AptPreferenceConstants.APT_ENABLED);", "-\t\t\t\t\tfAptProject.preferenceChanged(AptPreferenceConstants.APT_ENABLED);", "+\t\t\t\t\t", "+\t\t\t\t\tfAptProject.preferenceChanged(AptPreferenceConstants.APT_ENABLED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8f8f0734009e77664f18fef3d7c48bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "diff": ["+", "+\t\t// Parse comments", "+\t\tint[][] comments = unit.comments;", "+\t\tif (comments != null) {", "+\t\t\tbuildCommentsTable(compilationUnit, comments);", "+\t\t}", "+", "-\t\t}", "-", "-\t\t// Parse comments", "-\t\tint[][] comments = unit.comments;", "-\t\tif (comments != null) {", "-\t\t\tbuildCommentsTable(compilationUnit, comments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5c53c0d38eac85831656c56f5625a48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "74d8e06fef615cb5e8f2a34975f100e52eadbabe", "commitAfterChange": "caaea2a74949dcade510b75a6aa78a30ce69d4cc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic Map getMap()", "signatureAfterChange": "  \tpublic Map getMap()", "diff": ["+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN, this.never_indent_block_comments_on_first_column ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN, this.never_indent_line_comments_on_first_column ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN, this.never_indent_block_comments_on_first_column ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN, this.never_indent_line_comments_on_first_column ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87df2cd8fb96c2f2fc79aef34278750", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "392fe1925e6e34041c0a038441760cebd6b1a531", "commitAfterChange": "5cdd74ffbe2d421e3dae9c00346cd61d59a4698a", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue, String defaultEncoding) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(String docUrlValue, String defaultEncoding) throws JavaModelException", "diff": ["-\t\t\tURL docUrl = new URL(docUrlValue);", "-\t\t\tURLConnection connection = docUrl.openConnection();", "-\t\t\tconnection.setUseCaches(false);", "-\t\t\tstream = connection.getInputStream();", "+\t\t\t// long time = System.currentTimeMillis();", "+\t\t\tURL docUrl = new URL(docUrlValue);", "+\t\t\tURLConnection connection = docUrl.openConnection();", "+\t\t\t// System.out.println(\"Time spent \" + (System.currentTimeMillis() - time) + \"ms for opening connection for \" + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t// time = System.currentTimeMillis();", "+\t\t\tconnection.setUseCaches(false);", "+\t\t\tstream = connection.getInputStream();", "+\t\t\t// System.out.println(\"Time spent \" + (System.currentTimeMillis() - time) + \"ms for getting stream for \" + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t// time = System.currentTimeMillis();", "+\t\t\t// System.out.println(\"Time spent \" + (System.currentTimeMillis() - time) + \"ms for reading stream for \" + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d90c652a114436c1fbc53c8cacbc29e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "e631b04edee577e41d569681fbbacaaeaaacfd29", "commitAfterChange": "f72d1d49f574a54da8f0da3a32fd6c37157d9805", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 215, "signatureBeforeChange": " protected void consumeMethodInvocationSuperWithTypeArguments()", "signatureAfterChange": " protected void consumeMethodInvocationSuperWithTypeArguments()", "diff": ["-\tm.sourceStart = this.intStack[this.intPtr--];", "+\tintPtr--; // start position of the typeArguments", "-\tintPtr--;", "+\tm.sourceStart = this.intStack[this.intPtr--]; // start position of the super keyword"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5081047d0c5981658ff4c0661e4ec16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotationBinding.java", "commitBeforeChange": "93435bbc903bd3b20b6b025e5785dd8f0ccdee63", "commitAfterChange": "725055f2b34cdbfae0fb11f5bfd68ad41728348a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  private static AnnotationBinding buildTargetAnnotation(long bits, LookupEnvironment env)", "signatureAfterChange": "  private static AnnotationBinding buildTargetAnnotation(long bits, LookupEnvironment env)", "diff": ["-\t\tif ((bits & TagBits.AnnotationForLocalVariable) != 0)", "-\t\t\tvalue[index++] = elementType.getField(TypeConstants.UPPER_LOCAL_VARIABLE, true);", "-\t\tif ((bits & TagBits.AnnotationForType) != 0)", "-\t\t\tvalue[index++] = elementType.getField(TypeConstants.TYPE, true);", "-\t\t", "+\t\tif ((bits & TagBits.AnnotationForType) != 0)", "+\t\t\tvalue[index++] = elementType.getField(TypeConstants.TYPE, true);", "+\t\tif ((bits & TagBits.AnnotationForLocalVariable) != 0)", "+\t\t\tvalue[index++] = elementType.getField(TypeConstants.UPPER_LOCAL_VARIABLE, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e94bd61f75d203e6f17ab22225f73933", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "36af4ca0b413cc401b0bc4442925b5f641f8df7a", "commitAfterChange": "15070dfb720141f260eff9f86b3742c51648d5f0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void computeLocalVariablePositions(int initOffset, CodeStream codeStream)", "signatureAfterChange": " \tpublic void computeLocalVariablePositions(int initOffset, CodeStream codeStream)", "diff": ["-\t\t\t// check for too many arguments/local variables", "-\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments", "-\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(local, local.declaration);", "-\t\t\t}", "-", "+\t\t\t}", "+\t\t\t// check for too many arguments/local variables", "+\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments", "+\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(local, local.declaration);", "-\t\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments", "-\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(argument, (AstNode)this.referenceContext); ", "-\t\t\t\t}", "+\t\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments", "+\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(argument, (AstNode)this.referenceContext); ", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef9710ad423ea84c82b3bf8ae5ba4ed8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "bef74bd3c81d577f2877e22159dad6a83f7261ac", "commitAfterChange": "4e5286cef07b26e982ff26ec99b73e526f9c11e9", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["-\t\t// probe for statements", "-\t\tConstructorDeclaration constructorDeclaration = this.codeSnippetParsingUtil.parseStatements(source.toCharArray(), getDefaultCompilerOptions(), true);", "-\t\tif (constructorDeclaration.statements != null) {", "-\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, offset, length);", "-\t\t}", "-", "+\t\t// probe for statements", "+\t\tConstructorDeclaration constructorDeclaration = this.codeSnippetParsingUtil.parseStatements(source.toCharArray(), getDefaultCompilerOptions(), true);", "+\t\tif (constructorDeclaration.statements != null) {", "+\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, offset, length);", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f17e88df269fe5475024f42df1cbdf2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "9677f97e795f4e791a050726a4329f6a49e4595c", "commitAfterChange": "74187a49cf531f40f8b8fafd3f5db01750edef2a", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["+\t\t\t\t\t\t// cleanup old preferences", "+\t\t\t\t\t\tpreferences.remove(propertyName); ", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// add variable to table", "-\t\t\t\t\t\tpreferences.remove(propertyName); // cleanup old preferences", "+\t\t\t\t\t\t// cleanup old preferences", "+\t\t\t\t\t\tpreferences.remove(propertyName); ", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// recreate container", "-\t\t\t\t\t\tpreferences.remove(propertyName); // cleanup old preferences"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5b5720dfa90dcdc092fb3f647eed3be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "305acfe01a2cb51532a94f25f8a4ff106e9d160c", "commitAfterChange": "5225355e2b7b6b4ad70b3d0374614630b3a91e8e", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": " protected void consumeEnhancedForStatementHeader(boolean hasModifiers)", "signatureAfterChange": " protected void consumeEnhancedForStatementHeader(boolean hasModifiers)", "diff": ["+\tLocalDeclaration localDeclaration = createLocalDeclaration(identifierName, (int) (namePosition >>> 32), (int) namePosition);", "+\tlocalDeclaration.declarationSourceEnd = localDeclaration.declarationEnd;", "+\t", "-\tLocalDeclaration localDeclaration = createLocalDeclaration(identifierName, (int) (namePosition >>> 32), (int) namePosition);", "-\tlocalDeclaration.declarationSourceEnd = localDeclaration.declarationEnd;"]}], "num": 63868}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "704467746d160dde1c8d3e71370ee76e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210bf526f6b0e878db97d5727b15227c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "b5c1652db351290a42a75d3cdd3241441a4413e2", "commitAfterChange": "43bc355f1a88457ab70fc9f06fe5c67fac23d207", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate Annotation[] convertAnnotations(JavaElement element)", "signatureAfterChange": " \t \tprivate Annotation[] convertAnnotations(JavaElement element)", "diff": ["-\t\t\tExpression expression = parseMemberValue(annotationSource);", "-\t\t\t/*", "-\t\t\t * expression can be null or not an annotation if the source has changed between", "-\t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "-\t\t\t * this parsing occured.", "-\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "-\t\t\t */", "-\t\t\tif (expression instanceof Annotation) {", "-\t\t\t\tannotations[recordedAnnotations++] = (Annotation) expression;", "+\t\t\tif (annotationSource != null) {", "+    \t\t\tExpression expression = parseMemberValue(annotationSource);", "+    \t\t\t/*", "+    \t\t\t * expression can be null or not an annotation if the source has changed between", "+    \t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "+    \t\t\t * this parsing occured.", "+    \t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "+    \t\t\t */", "+    \t\t\tif (expression instanceof Annotation) {", "+    \t\t\t\tannotations[recordedAnnotations++] = (Annotation) expression;", "+    \t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e468edbb34bc6caac5b13791929993b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "232201d6380e7830296a82a7b3422a333db36b2e", "commitAfterChange": "378f419edc5509790bbfa3083244109f6abafbe2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  public void deprecatedMethod(MethodBinding method, ASTNode location)", "signatureAfterChange": "  public void deprecatedMethod(MethodBinding method, ASTNode location)", "diff": ["+\t\tint start = -1;", "+\t\tif(location instanceof AllocationExpression) {", "+\t\t\t// omit the new keyword from the warning marker", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=300031", "+\t\t\tAllocationExpression allocationExpression = (AllocationExpression) location;", "+\t\t\tif (allocationExpression.enumConstant != null) {", "+\t\t\t\tstart = allocationExpression.enumConstant.sourceStart;", "+\t\t\t}", "+\t\t\tstart = allocationExpression.type.sourceStart;", "+\t\t}", "-\t\t\tlocation.sourceStart,", "+\t\t\t(start == -1) ? location.sourceStart : start,", "+\t\tint start = -1;", "+\t\tif (location instanceof MessageSend) {", "+\t\t\t// start the warning marker from the location where the name of the method starts", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=300031", "+\t\t\tstart = (int) (((MessageSend)location).nameSourcePosition >>> 32);", "+\t\t}", "-\t\t\tlocation.sourceStart,", "+\t\t\t(start == -1) ? location.sourceStart : start,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce0962193f34f8704e56f62dd8b64f77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "f1f4a4119f1226b6996589389edda1c170b485ed", "commitAfterChange": "2314f2b038c548685d179883c3a134764eda5d7c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "signatureAfterChange": " public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tboolean containsLocalType = hasLocalType[i];", "-\t\t\t\t\tif (containsLocalType) { // NB: no-op if method bodies have been already parsed", "+\t\t\t\t\tif (hasLocalType[i]) // NB: no-op if method bodies have been already parsed", "-\t\t\t\t\t}", "-\t\t\t\t\t// complete type bindings and build fields and methods only for local types", "-\t\t\t\t\t// (in this case the constructor is needed when resolving local types)", "-\t\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=145333)", "-\t\t\t\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, containsLocalType);", "-\t\t\tworked(monitor, 1);", "+\t\t// complete type bindings and build fields and methods only for local types", "+\t\t// (in this case the constructor is needed when resolving local types)", "+\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=145333)", "+\t\ttry {", "+\t\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnits, hasLocalType, unitsIndex);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// skip it silently", "+\t\t}", "+\t\tworked(monitor, 1);"]}], "num": 57145}
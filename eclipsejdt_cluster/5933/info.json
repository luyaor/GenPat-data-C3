{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "747e13281f4de76e72e58db52419884e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c49de4a084a401c21599230ae6243fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "4536803cd5b2a0c257b0b0ad983aa6ff48927661", "commitAfterChange": "cd2843c8a5aedbfeba5f759ec4b2577ec3055c26", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic static void checkAnnotationValue(TypeBinding requiredType, TypeBinding annotationType, char[] memberName, Expression memberValue, Scope scope)", "signatureAfterChange": " \t \tpublic static void checkAnnotationValue(TypeBinding requiredType, TypeBinding annotationType, char[] memberName, Expression memberValue, Scope scope)", "diff": ["-\t\t\t\tscope.problemReporter().typeMismatchError(memberValueType, requiredType, memberValue);", "-\t\t\t\treturn; // may allow to proceed to find more errors at once", "+\t\t\t\tif (!(requiredType.isArrayType() && requiredType.dimensions() == 1 && memberValueType.isCompatibleWith(requiredType.leafComponentType()))) {", "+\t\t\t\t\tscope.problemReporter().typeMismatchError(memberValueType, requiredType, memberValue);", "+\t\t\t\t\treturn; // may allow to proceed to find more errors at once", "+\t\t\t\t}", "-\t\t\t\tscope.compilationUnitScope().recordTypeConversion(requiredType, memberValueType);", "+\t\t\t\tscope.compilationUnitScope().recordTypeConversion(requiredType.leafComponentType(), memberValueType.leafComponentType());", "+\t\t\t\tmemberValue.computeConversion(scope, requiredType, memberValueType);\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a750f1cbebe727c166ed09dea4e19a65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "commitAfterChange": "04abb6d1e9cce4ccf64496ee5f7d45399d283bd2", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " \tpublic boolean visit(ParameterizedType node)", "signatureAfterChange": " \tpublic boolean visit(PackageQualifiedType node)", "diff": ["+\t */", "+\tpublic boolean visit(PackageQualifiedType node) {", "+\t\tgetChildNode(node, PackageQualifiedType.QUALIFIER_PROPERTY).accept(this);", "+\t\tthis.result.append('.');", "+\t\tif (node.getAST().apiLevel() >= AST.JLS8) {", "+\t\t\tvisitList(node, PackageQualifiedType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "+\t\t}", "+\t\tgetChildNode(node, PackageQualifiedType.NAME_PROPERTY).accept(this);", "+\t\treturn false;", "+\t}"]}], "num": 5933}
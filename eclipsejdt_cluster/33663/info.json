{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f11a9debbaeb1b4b6a69d242c554b0a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34d49637c8b59215d285dea50e2e0dc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "80ce338cef4ec1df54f1a30ce29ab099e3941f07", "commitAfterChange": "1f9df748d4bc9871ec3d99f4082748f0affb3af0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t// perform capture conversion if read access", "-\treturn this.resolvedType = ", "-\t\t(((this.bits & IsStrictlyAssigned) == 0) ", "-\t\t\t? fieldBinding.type.capture(scope, this.sourceEnd)", "-\t\t\t: fieldBinding.type);", "+\tTypeBinding fieldType = fieldBinding.type;", "+\tif (fieldType != null && ((this.bits & IsStrictlyAssigned) == 0)) {", "+\t\tfieldType = fieldType.capture(scope, this.sourceEnd);\t// perform capture conversion if read access", "+\t}", "+\treturn this.resolvedType = fieldType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0a3d94c1deb5a62b5309b24a88d609e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\t\t\treturn type;", "+\t\t\t// perform capture conversion if read access", "+\t\t\treturn (type != null && (this.bits & IsStrictlyAssignedMASK) == 0)", "+\t\t\t\t\t? type.capture()", "+\t\t\t\t\t: type;", "-\t\t\tfield = scope.getField(type, token, this);", "+\t\t\tfield = scope.getField(type.capture(), token, this);", "-\t\treturn (otherBindings[otherBindingsLength - 1]).type;", "+\t\ttype = (otherBindings[otherBindingsLength - 1]).type;", "+\t\t// perform capture conversion if read access", "+\t\treturn (type != null && (this.bits & IsStrictlyAssignedMASK) == 0)", "+\t\t\t\t? type.capture()", "+\t\t\t\t: type;\t\t"]}], "num": 33663}
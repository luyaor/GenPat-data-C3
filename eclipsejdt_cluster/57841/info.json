{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21029b06f32f5eb857f57625877c94f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123f5dab7944d88508bdfdf3d4d259d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java", "commitBeforeChange": "852fc464e158b12302acdd8c591e32fe926a3a37", "commitAfterChange": "e4130120ae791b6450af86266caf3711f6b81fa5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\treturn this.resolvedType = descriptor.declaringClass;", "+\t\treturn this.resolvedType = this.expectedType;  // if interface IJ extends I, J() & IJ's descriptor is I.foo, can't return I"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "397c37bffe046a2ef8a59dd6a3bb021f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "6436bbd31cbe5b698244c0208dd161fd144dd93e", "commitAfterChange": "4e5b524e8fed0a2f038362e79ac7bed8b62bd551", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\treturn this.resolvedType = commonType.capture(scope, this.sourceEnd);", "+\t\t\t\treturn this.resolvedType = commonType.capture(scope, this.sourceStart, this.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8589294e76ab794de644155656ace6fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t", "+\t\t\t\tcase ProblemReasons.IntersectionHasMultipleFunctionalInterfaces:", "+\t\t\t\t\tblockScope.problemReporter().multipleFunctionalInterfaces(this);", "+\t\t\t\t\tbreak;", "-\t\treturn this.resolvedType = this.expectedType;  // if interface IJ extends I, J() & IJ's descriptor is I.foo, can't return I", "+\t\treturn this.resolvedType = this.expectedType;"]}], "num": 57841}
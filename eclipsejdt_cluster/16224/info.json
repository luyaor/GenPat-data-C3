{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5758a45cda33ec49602d04654fc4b652", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb9fd32f3ca03cc92512683f73d838a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "375d00ce9ee091b98edb16642d8a9054d32021f0", "commitAfterChange": "d3432881419f057ba041557b162e4f05f5019457", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testClean() throws IOException, Exception", "signatureAfterChange": " public void testClean() throws IOException, Exception", "diff": ["-\t\t// Format the source", "-\t\tTextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, source, 0, source.length(), 0, null);", "+\t\ttry {", "+\t\t\t// Format the source", "+\t\t\tTextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, source, 0, source.length(), 0, null);", "-\t\t// Write the result", "-\t\tif (edit != null) {", "-\t\t\tString formatResult = org.eclipse.jdt.internal.core.util.Util.editedString(source, edit);", "-\t\t\tString inputPath = this.inputFiles[i].getPath().substring(INPUT_DIR.getPath().length()+1);", "-\t\t\tFile writtenFile = new Path(OUTPUT_DIR.getPath()).append(inputPath).toFile();", "-\t\t\twrittenFile.getParentFile().mkdirs();", "-\t\t\tUtil.writeToFile(formatResult, writtenFile.getAbsolutePath());", "+\t\t\t// Write the result", "+\t\t\tif (edit != null) {", "+\t\t\t\tString formatResult = org.eclipse.jdt.internal.core.util.Util.editedString(source, edit);", "+\t\t\t\tString inputPath = this.inputFiles[i].getPath().substring(INPUT_DIR.getPath().length()+1);", "+\t\t\t\tFile writtenFile = new Path(OUTPUT_DIR.getPath()).append(inputPath).toFile();", "+\t\t\t\twrittenFile.getParentFile().mkdirs();", "+\t\t\t\tUtil.writeToFile(formatResult, writtenFile.getAbsolutePath());", "+\t\t\t}", "+\t\t}", "+\t\tcatch (Exception ex) {", "+\t\t\t// skip silently"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bffe7710da5bb41dbc634c0ba6d3f54a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "829046a361301380cac04e3af6844e4acd156d61", "commitAfterChange": "88fda3edbb235ca07ba1c50b6885e3cd0955511a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "diff": ["-\t\tif (cu != null && cu.ignoreOptionalProblems())", "-\t\t\treturn;", "+\t\ttry{", "+\t\t\tif (cu != null && cu.ignoreOptionalProblems())", "+\t\t\t\treturn;", "+\t\t// workaround for illegal implementation of ICompilationUnit, see https://bugs.eclipse.org/372351", "+\t\t} catch (AbstractMethodError ex) {", "+\t\t\t// continue", "+\t\t}"]}], "num": 16224}
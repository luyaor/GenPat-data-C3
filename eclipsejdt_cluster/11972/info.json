{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aba961738c36ae082459b8b69a368951", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "158c0eddfb1819e3074a548bb755d4d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "fa4cf904b1d5690e02fc0246dbc8bc14a58e5d04", "commitAfterChange": "4ddddb5424dafb4b8650d4349863e03fece6ac06", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": "  \tprivate void disassemble(IMethodParametersAttribute methodParametersAttribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\tprivate void disassemble(IMethodParametersAttribute methodParametersAttribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "+\t\ttabNumber += 2;", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\tbuffer.append(Messages.disassembler_methodparametersheader);", "+\t\tfor (int i = 0; i < methodParametersAttribute.getMethodParameterLength(); ++i) {", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\tshort accessFlags = methodParametersAttribute.getAccessFlags(i);", "+\t\t\tdecodeModifiersForMethodParameters(buffer, accessFlags);", "+\t\t\tbuffer.append(methodParametersAttribute.getParameterName(i));", "+\t\t}", "+\t}", "-\t\t\tparameterNames = getParameterNames(methodDescriptor, codeAttribute, accessFlags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "582aa7f851a32e57da71b202acc118a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "252534b1e3dad1831e3abff323be8258609f736d", "commitAfterChange": "e2f59df4da4b0717730e8b0f95dd08cfbb696924", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["+\t\tMethodBinding method = findMethod0(receiverType, selector, argumentTypes, invocationSite, inStaticContext);", "+\t\tif (method != null && method.isValidBinding() && method.isVarargs()) {", "+\t\t\tTypeBinding elementType = method.parameters[method.parameters.length - 1].leafComponentType();", "+\t\t\tif (elementType instanceof ReferenceBinding) {", "+\t\t\t\tif (!((ReferenceBinding) elementType).canBeSeenBy(this)) {", "+\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, invocationSite.genericTypeArguments(), ProblemReasons.VarargsElementTypeNotVisible);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn method;", "+\t}\t"]}], "num": 11972}
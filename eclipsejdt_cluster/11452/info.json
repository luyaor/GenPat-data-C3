{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6d2064328f9d7013b6aba0c7363eab6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c3555bf7d56b5ce0bb521b6c4e808e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "be89ab2e0ec1e398e3b0603a492d22c9815a6eef", "commitAfterChange": "0460b2dc122bab8976f113fd5dfefdda9aaa1649", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r private void locateMatchesInClassFile() throws CoreException, JavaModelException", "signatureAfterChange": "\r private void locateMatchesInClassFile() throws CoreException, JavaModelException", "diff": ["-\tBinaryType binaryType = (BinaryType)classFile.getType();\r", "-\tIBinaryType info;\r", "-\tif (classFile.isOpen()) {\r", "-\t\t// reuse the info from the java model cache\r", "-\t\tinfo = (IBinaryType)binaryType.getRawInfo();\r", "-\t} else {\r", "-\t\t// create a temporary info\r", "-\t\ttry {\r", "-\t\t\tIJavaElement pkg = classFile.getParent();\r", "-\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)pkg.getParent();\r", "-\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t// class file in a jar\r", "-\t\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');\r", "-\t\t\t\tString classFilePath = \r", "-\t\t\t\t\t(pkgPath.length() > 0) ?\r", "-\t\t\t\t\t\tpkgPath + \"/\" + classFile.getElementName() : //$NON-NLS-1$\r", "-\t\t\t\t\t\tclassFile.getElementName();\r", "-\t\t\t\tZipFile zipFile = null;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tzipFile = ((JarPackageFragmentRoot)root).getJar();\r", "-\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(\r", "-\t\t\t\t\t\tzipFile,\r", "-\t\t\t\t\t\tclassFilePath);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\tif (zipFile != null) {\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tzipFile.close();\r", "-\t\t\t\t\t\t} catch (IOException e) {\r", "-\t\t\t\t\t\t\t// ignore \r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\t// class file in a directory\r", "-\t\t\t\tString osPath = this.resource.getFullPath().toOSString();\r", "-\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(osPath);\r", "-\t\t\t}\r", "-\t\t} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {\r", "-\t\t\t//e.printStackTrace();\r", "-\t\t\treturn;\r", "-\t\t} catch (java.io.IOException e) {\r", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);\r", "-\t\t}\r", "-\t}\r", "+\tIBinaryType info = this.locator.getBinaryInfo(classFile, this.resource);\r", "+\tBinaryType binaryType = (BinaryType)classFile.getType();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bcf8f7b4e8c19137721daa35dd87980", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "commitAfterChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void set(Map optionsMap)", "signatureAfterChange": "  \tpublic void set(Map optionsMap)", "diff": ["-\t\tif ((optionValue = optionsMap.get(OPTION_ReportNullContractViolation)) != null) updateSeverity(NullContractViolation, optionValue);", "-\t\tif ((optionValue = optionsMap.get(OPTION_ReportPotentialNullContractViolation)) != null) updateSeverity(PotentialNullContractViolation, optionValue);", "-\t\tif ((optionValue = optionsMap.get(OPTION_ReportNullContractInsufficientInfo)) != null) updateSeverity(NullContractInsufficientInfo, optionValue);", "-\t\tif ((optionValue = optionsMap.get(OPTION_NullableAnnotationName)) != null) {", "-\t\t\tthis.nullableAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "-\t\t}", "-\t\tif ((optionValue = optionsMap.get(OPTION_NonNullAnnotationName)) != null) {", "-\t\t\tthis.nonNullAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "-\t\t}", "-\t\tif ((optionValue = optionsMap.get(OPTION_EmulateNullAnnotationTypes)) != null) {", "-\t\t\tif (ENABLED.equals(optionValue)) {", "-\t\t\t\tthis.emulateNullAnnotationTypes = true;", "-\t\t\t\t// ensure that we actually have annotation names to emulate:", "-\t\t\t\tif (this.nullableAnnotationName == null)", "-\t\t\t\t\tthis.nullableAnnotationName = DEFAULT_NULLABLE_ANNOTATION_NAME;", "-\t\t\t\tif (this.nonNullAnnotationName == null)", "-\t\t\t\t\tthis.nonNullAnnotationName = DEFAULT_NONNULL_ANNOTATION_NAME;", "-\t\t\t} else if (DISABLED.equals(optionValue)) {", "-\t\t\t\tthis.emulateNullAnnotationTypes = false;", "-\t\t\t}", "-\t\t}", "-\t\tif ((optionValue = optionsMap.get(OPTION_DefaultImportNullAnnotationTypes)) != null) {", "-\t\t\tif (ENABLED.equals(optionValue)) {", "-\t\t\t\tthis.defaultImportNullAnnotationTypes = true;", "-\t\t\t\t// ensure that we actually have annotation names to be used for default imports:", "-\t\t\t\tif (this.nullableAnnotationName == null)", "-\t\t\t\t\tthis.nullableAnnotationName = DEFAULT_NULLABLE_ANNOTATION_NAME;", "-\t\t\t\tif (this.nonNullAnnotationName == null)", "-\t\t\t\t\tthis.nonNullAnnotationName = DEFAULT_NONNULL_ANNOTATION_NAME;", "-\t\t\t} else if (DISABLED.equals(optionValue)) {", "-\t\t\t\tthis.defaultImportNullAnnotationTypes = false;", "-\t\t\t}", "-\t\t}"]}], "num": 11452}
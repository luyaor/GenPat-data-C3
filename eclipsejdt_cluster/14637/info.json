{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ab630074844a92bf47185029938abea", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d05db87b061053b207c5b04de48a5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected Map getCompilerOptions()", "signatureAfterChange": " protected Map getCompilerOptions()", "diff": ["-\t// Augment problem detection settings", "-\tprotected Map getCompilerOptions() {", "-\t\tMap defaultOptions = super.getCompilerOptions();", "-\t\tdefaultOptions.put(CompilerOptions.OPTION_ReportNullReference, CompilerOptions.WARNING);", "-\t\tdefaultOptions.put(CompilerOptions.OPTION_ReportNoEffectAssignment, CompilerOptions.WARNING);", "-\t\treturn defaultOptions;", "-\t}", "+// Augment problem detection settings", "+protected Map getCompilerOptions() {", "+    Map defaultOptions = super.getCompilerOptions();", "+//    defaultOptions.put(CompilerOptions.OPTION_ReportNullReference, CompilerOptions.WARNING);", "+    defaultOptions.put(CompilerOptions.OPTION_ReportNullReference, CompilerOptions.ERROR);", "+//    defaultOptions.put(CompilerOptions.OPTION_ReportNoEffectAssignment, CompilerOptions.WARNING);", "+    return defaultOptions;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e6cb38af0767557600c7f2f04084b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 206, "signatureBeforeChange": " \tpublic void _test0238_for()", "signatureAfterChange": " public void test0718_for()", "diff": ["-\t// TODO (maxime) fix", "-\tpublic void _test0238_for() {", "-\t\tif (COMPLIANCE_1_5.equals(this.complianceLevel)) {", "-\t\t\tthis.runNegativeTest(", "-\t\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\t\"\t void foo(boolean dummy) {\\n\" + ", "-\t\t\t\t\t\"\t\t Object flag = null;\\n\" + ", "-\t\t\t\t\t\"\t\t for (;dummy;) { /* */ }\\n\" +", "-\t\t\t\t\t\"\t\t flag.toString();\\n\" + ", "-\t\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\t\"}\\n\"},", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\t\"\tflag.toString();\\n\" + ", "-\t\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\t\"The variable flag can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t\t\t\t\"----------\\n\"", "-\t\t\t);", "-\t\t}", "-\t}", "+// null analysis -- for", "+public void test0718_for() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(boolean dummy) {\\n\" + ", "+\t\t\t\"    Object flag = null;\\n\" + ", "+\t\t\t\"    for (;dummy;) { /* */ }\\n\" +", "+\t\t\t\"    flag.toString();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tflag.toString();\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"The variable flag can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}], "num": 14637}
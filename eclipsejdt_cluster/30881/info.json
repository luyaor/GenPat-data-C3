{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4be52b53dc6011d3b8d84c842ca916e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f0883742c97bc3020ca4ab8200825ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tvoid validateNullAnnotations()", "signatureAfterChange": "  \tvoid validateNullAnnotations(long sourceLevel)", "diff": ["-\tvoid validateNullAnnotations() {", "+\tvoid validateNullAnnotations(long sourceLevel) {", "+\t\tif (this.binding == null) return;", "-\t\tif (this.binding != null && this.binding.parameterNonNullness != null) {", "-\t\t\tint length = this.binding.parameters.length;", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tif (this.binding.parameterNonNullness[i] != null) {", "-\t\t\t\t\tlong nullAnnotationTagBit =  this.binding.parameterNonNullness[i].booleanValue()", "-\t\t\t\t\t\t\t? TagBits.AnnotationNonNull : TagBits.AnnotationNullable;", "-\t\t\t\t\tthis.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);", "+\t\tif (sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\tif (this.binding.parameterNonNullness != null) {", "+\t\t\t\tint length = this.binding.parameters.length;", "+\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\tif (this.binding.parameterNonNullness[i] != null) {", "+\t\t\t\t\t\tlong nullAnnotationTagBit =  this.binding.parameterNonNullness[i].booleanValue()", "+\t\t\t\t\t\t\t\t? TagBits.AnnotationNonNull : TagBits.AnnotationNullable;", "+\t\t\t\t\t\tthis.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);", "+\t\t\t\t\t}", "+\t\t} else {", "+\t\t\tint length = this.binding.parameters.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tlong nullAnnotationTagBit = this.binding.parameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tthis.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);", "+\t\t\t}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c577f5ea2a58348e5de2034d0db3be8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void mergeParameterNullAnnotations(BlockScope currentScope)", "signatureAfterChange": " \tprivate void mergeParameterNullAnnotations(BlockScope currentScope)", "diff": ["-\t\tif (this.descriptor.parameterNonNullness == null)", "-\t\t\treturn;", "-\t\tif (this.binding.parameterNonNullness == null) {", "-\t\t\tthis.binding.parameterNonNullness = this.descriptor.parameterNonNullness;", "-\t\t\treturn;", "-\t\t}", "-\t\tBoolean[] ourNonNullness = this.binding.parameterNonNullness;", "-\t\tBoolean[] descNonNullness = this.descriptor.parameterNonNullness;", "-\t\tint len = Math.min(ourNonNullness.length, descNonNullness.length);", "+\t\tTypeBinding[] ourParameters = this.binding.parameters;", "+\t\tTypeBinding[] descParameters = this.descriptor.parameters;", "+\t\tint len = Math.min(ourParameters.length, descParameters.length);", "-\t\t\tif (ourNonNullness[i] == null) {", "-\t\t\t\tourNonNullness[i] = descNonNullness[i];", "-\t\t\t} else if (ourNonNullness[i] != descNonNullness[i]) {", "-\t\t\t\tif (ourNonNullness[i] == Boolean.TRUE) { // requested @NonNull not provided", "+\t\t\tlong ourTagBits = ourParameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tlong descTagBits = descParameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tif (ourTagBits == 0L) {", "+\t\t\t\tif (descTagBits != 0L && !ourParameters[i].isBaseType())", "+\t\t\t\t\tourParameters[i] = env.createAnnotatedType(ourParameters[i], descTagBits);", "+\t\t\t} else if (ourTagBits != descTagBits) {", "+\t\t\t\tif (ourTagBits == TagBits.AnnotationNonNull) { // requested @NonNull not provided", "-\t\t\t\t\tif (descNonNullness[i] == Boolean.FALSE)", "+\t\t\t\t\tif (descTagBits == TagBits.AnnotationNullable)"]}], "num": 30881}
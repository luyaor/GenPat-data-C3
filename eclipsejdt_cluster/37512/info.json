{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2b75d4204f6306e3d603d1f3ed0a6d0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb66a05ccbd35be790d69bf4a9254b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "e7fead4adac4e5d682bbdf8cb7aaa3f524aab927", "commitAfterChange": "3f60ba6c4328b89dbfaef12feb628451b43d7879", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void  checkParameterizedTypeBounds()", "signatureAfterChange": " \tpublic void  checkParameterizedTypeBounds()", "diff": ["-\t\tfor (int i = 0, l = this.deferredBoundChecks == null ? 0 : this.deferredBoundChecks.size(); i < l; i++)", "-\t\t\t((TypeReference) this.deferredBoundChecks.get(i)).checkBounds(this);", "+\t\tfor (int i = 0, l = this.deferredBoundChecks == null ? 0 : this.deferredBoundChecks.size(); i < l; i++) {", "+\t\t\tObject toCheck = this.deferredBoundChecks.get(i);", "+\t\t\tif (toCheck instanceof TypeReference)", "+\t\t\t\t((TypeReference) toCheck).checkBounds(this);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0be744c2dd11c2d3441ce9410247d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["+\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\tthis.bound.collectSubstitutes(otherWildcard.otherBounds[i], substitutes);", "+\t        \t}", "+            // check other bounds (lub scenario)", "+        \tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "+        \t\tthis.otherBounds[i].collectSubstitutes(otherType, substitutes);", "+        \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6388561ab6beb4f73d6f20b9d544362", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "1b80cae94595518122618b458eed60915f76d171", "commitAfterChange": "92d6141bb346285ff13c588faa5a059cb9f83b3d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-\t            int length = this.arguments == null ? 0 : this.arguments.length;", "+\t            if (this.arguments == null) {", "+\t            \treturn otherParamType.arguments == null;", "+\t            }", "+\t            int length = this.arguments.length;", "-\t            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "-\t            if (otherLength != length) ", "-\t                return false;", "+\t            if (otherArguments == null || otherArguments.length != length) return false;"]}], "num": 37512}
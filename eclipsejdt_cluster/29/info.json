{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9a74e790d174b638114fc96f46b1315", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19a8dd4f3c53b5782d4487a4f5b47ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public boolean doesMethodOverride(MethodBinding one, MethodBinding two)", "signatureAfterChange": " public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod)", "diff": ["-public boolean doesMethodOverride(MethodBinding one, MethodBinding two) {", "-\tMethodBinding sub = computeSubstituteMethod(two, one);", "-\treturn sub != null && super.doesMethodOverride(one, sub);", "+public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod) {", "+\tif (doTypeVariablesClash(method, inheritedMethod)) return false;", "+\tif (areParametersEqual(method, inheritedMethod)) return true;", "+\tif (method.declaringClass == inheritedMethod.declaringClass) return false;", "+", "+\tTypeBinding[] params = method.parameters;", "+\tTypeBinding[] inheritedParams = inheritedMethod.parameters;", "+\tint length = params.length;", "+\tif (length != inheritedParams.length)", "+\t\treturn false;", "+", "+\t// also allow a method such as Number foo(Number) to override <U> T foo(T) where T extends Number", "+\tif (method.typeVariables != NoTypeVariables || !inheritedMethod.hasSubstitutedParameters())", "+\t\treturn false;", "+\tif (method.declaringClass.findSuperTypeWithSameErasure(inheritedMethod.declaringClass) == null)", "+\t\treturn false;", "+", "+\tfor (int i = 0; i < length; i++)", "+\t\tif (params[i] != inheritedParams[i].erasure())", "+\t\t\treturn false;", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df27214153f24a5116e4d461922447b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "bacbe6f6e994ffc49a94960691c76bff97cb04d5", "commitAfterChange": "719705b20dc5e72fab3b2b50b669f9dfc58049aa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "signatureAfterChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "diff": ["-\t\treturn !squarePegInRoundHole(sam);", "+\t\tif (sam.returnType.id == TypeIds.T_void) {", "+\t\t\tif (!this.voidCompatible)", "+\t\t\t\treturn false;", "+\t\t} else {", "+\t\t\tif (!this.valueCompatible)", "+\t\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\tif (!isPertinentToApplicability())", "+\t\t\treturn true;", "+\t", "+\t\tExpression [] returnExpressions = this.resultExpressions;", "+\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "+\t\t\tif (!returnExpressions[i].resolvedType.isCompatibleWith(sam.returnType))", "+\t\t\t\tif (sam.returnType.id != TypeIds.T_void || this.body instanceof Block)", "+\t\t\t\t\treturn false;", "+\t\t}", "+\t", "+\t\tTypeBinding [] samPararameterTypes = sam.parameters;", "+\t\tfor (int i = 0, length = samPararameterTypes.length; i < length; i++) { // lengths known to be equal.", "+\t\t\tif (TypeBinding.notEquals(samPararameterTypes[i], this.argumentTypes[i]))", "+\t\t\t\treturn false;", "+\t\t}", "+", "+\t\treturn true;"]}], "num": 29}
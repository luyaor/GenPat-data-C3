{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "465dc2554df7810ca5fb6f1227c9f43e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a939687e64943a32af5c93b5ac5e837", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "2978110db99779d239d94c1b0f5bcb0af9289202", "commitAfterChange": "affddd301b18dc78fff479e07d2a614268019fc4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\t */", "-\tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\tchar[] methodDescriptor = methodInfo.getDescriptor();", "-\t\tIClassFileAttribute classFileAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.SIGNATURE);", "-\t\tISignatureAttribute signatureAttribute = (ISignatureAttribute) classFileAttribute;", "-\t\tif (mode == DETAILED || mode == SYSTEM) {", "-\t\t\tbuffer", "-\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\")) //$NON-NLS-1$", "-\t\t\t\t.append(Util.bind(\"classfileformat.methoddescriptor\")) //$NON-NLS-1$", "-\t\t\t\t.append(Util.bind(\"disassembler.constantpoolindex\")) //$NON-NLS-1$", "-\t\t\t\t.append(methodInfo.getDescriptorIndex())", "-\t\t\t\t.append(Util.bind(\"disassembler.space\")) //$NON-NLS-1$", "-\t\t\t\t.append(methodDescriptor);", "-\t\t\tif (methodInfo.isDeprecated()) {", "-\t\t\t\tbuffer.append(Util.bind(\"disassembler.deprecated\"));//$NON-NLS-1$", "-\t\t\t}\t\t\t", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\tif (signatureAttribute != null) {", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\"))\t //$NON-NLS-1$", "-\t\t\t\t\t.append(Util.bind(\"disassembler.signatureattributeheader\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(signatureAttribute.getSignature());", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t\tif (codeAttribute != null) {", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.maxStack\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(codeAttribute.getMaxStack())", "-\t\t\t\t\t.append(Util.bind(\"disassembler.comma\"))//$NON-NLS-1$", "-\t\t\t\t\t.append(Util.bind(\"disassembler.space\"))//$NON-NLS-1$", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.maxLocals\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(codeAttribute.getMaxLocals());", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t}\t\t", "-\t\tint accessFlags = methodInfo.getAccessFlags();", "-\t\tdecodeModifiersForMethod(buffer, accessFlags);", "-\t\tif (methodInfo.isSynthetic()) {", "-\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "-\t\t}", "-\t\tCharOperation.replace(methodDescriptor, '/', '.');", "-\t\tchar[] methodName = null;", "-\t\tif (methodInfo.isConstructor()) {", "-\t\t\tmethodName = classFileReader.getClassName();", "-\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor, codeAttribute, accessFlags) , false, false, (accessFlags & IModifierConstants.ACC_VARARGS) != 0));", "-\t\t} else if (methodInfo.isClinit()) {", "-\t\t\tmethodName = Util.bind(\"classfileformat.clinitname\").toCharArray(); //$NON-NLS-1$", "-\t\t\tbuffer.append(methodName);", "-\t\t} else {", "-\t\t\tmethodName = methodInfo.getName();", "-\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor, codeAttribute, accessFlags) , false, true, (accessFlags & IModifierConstants.ACC_VARARGS) != 0));", "-\t\t}", "-\t\tIExceptionAttribute exceptionAttribute = methodInfo.getExceptionAttribute();", "-\t\tif (exceptionAttribute != null) {", "-\t\t\tbuffer.append(\" throws \"); //$NON-NLS-1$", "-\t\t\tchar[][] exceptionNames = exceptionAttribute.getExceptionNames();", "-\t\t\tint length = exceptionNames.length;", "-\t\t\tfor (int i = 0; i < length - 1; i++) {", "-\t\t\t\tchar[] exceptionName = exceptionNames[i];", "-\t\t\t\tCharOperation.replace(exceptionName, '/', '.');", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(exceptionName)", "-\t\t\t\t\t.append(Util.bind(\"disassembler.comma\"))//$NON-NLS-1$", "-\t\t\t\t\t.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tchar[] exceptionName = exceptionNames[length - 1];", "-\t\t\tCharOperation.replace(exceptionName, '/', '.');", "-\t\t\tbuffer.append(exceptionName);", "-\t\t}", "-\t\tbuffer.append(Util.bind(\"disassembler.endofmethodheader\")); //$NON-NLS-1$", "-\t\t", "-\t\tif (mode == DETAILED || mode == SYSTEM) {", "-\t\t\tIClassFileAttribute annotationDefaultAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.ANNOTATION_DEFAULT);", "-\t\t\tIClassFileAttribute runtimeVisibleAnnotationsAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.RUNTIME_VISIBLE_ANNOTATIONS);", "-\t\t\tIClassFileAttribute runtimeInvisibleAnnotationsAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.RUNTIME_INVISIBLE_ANNOTATIONS);", "-\t\t\tIClassFileAttribute runtimeVisibleParameterAnnotationsAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS);", "-\t\t\tIClassFileAttribute runtimeInvisibleParameterAnnotationsAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS);", "-\t\t\tIClassFileAttribute[] attributes = methodInfo.getAttributes();", "-\t\t\tint length = attributes.length;", "-\t\t\tif (length != 0) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tIClassFileAttribute attribute = attributes[i];", "-\t\t\t\t\tif (attribute != codeAttribute", "-\t\t\t\t\t\t\t&& attribute != exceptionAttribute", "-\t\t\t\t\t\t\t&& attribute != signatureAttribute", "-\t\t\t\t\t\t\t&& attribute != annotationDefaultAttribute", "-\t\t\t\t\t\t\t&& attribute != runtimeInvisibleAnnotationsAttribute", "-\t\t\t\t\t\t\t&& attribute != runtimeVisibleAnnotationsAttribute", "-\t\t\t\t\t\t\t&& attribute != runtimeInvisibleParameterAnnotationsAttribute", "-\t\t\t\t\t\t\t&& attribute != runtimeVisibleParameterAnnotationsAttribute", "-\t\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "-\t\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {", "-\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "-\t\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (codeAttribute != null) {", "-\t\t\t\tdisassemble(codeAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t\tif (annotationDefaultAttribute != null) {", "-\t\t\t\tdisassemble((IAnnotationDefaultAttribute) annotationDefaultAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t\tif (runtimeVisibleParameterAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeVisibleParameterAnnotationsAttribute) runtimeVisibleParameterAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t\tif (runtimeInvisibleParameterAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeInvisibleParameterAnnotationsAttribute) runtimeInvisibleParameterAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t}", "-\t}", "+\t */", "+\tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "+\t\tchar[] methodDescriptor = methodInfo.getDescriptor();", "+\t\tIClassFileAttribute classFileAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.SIGNATURE);", "+\t\tISignatureAttribute signatureAttribute = (ISignatureAttribute) classFileAttribute;", "+\t\tIClassFileAttribute runtimeVisibleAnnotationsAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.RUNTIME_VISIBLE_ANNOTATIONS);", "+\t\tIClassFileAttribute runtimeInvisibleAnnotationsAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.RUNTIME_INVISIBLE_ANNOTATIONS);", "+\t\tIClassFileAttribute runtimeVisibleParameterAnnotationsAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS);", "+\t\tIClassFileAttribute runtimeInvisibleParameterAnnotationsAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS);", "+\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\t\tbuffer", "+\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\")) //$NON-NLS-1$", "+\t\t\t\t.append(Util.bind(\"classfileformat.methoddescriptor\")) //$NON-NLS-1$", "+\t\t\t\t.append(Util.bind(\"disassembler.constantpoolindex\")) //$NON-NLS-1$", "+\t\t\t\t.append(methodInfo.getDescriptorIndex())", "+\t\t\t\t.append(Util.bind(\"disassembler.space\")) //$NON-NLS-1$", "+\t\t\t\t.append(methodDescriptor);", "+\t\t\tif (methodInfo.isDeprecated()) {", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.deprecated\"));//$NON-NLS-1$", "+\t\t\t}\t\t\t", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\tif (signatureAttribute != null) {", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\"))\t //$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.signatureattributeheader\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(signatureAttribute.getSignature());", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t\tif (codeAttribute != null) {", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.maxStack\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(codeAttribute.getMaxStack())", "+\t\t\t\t\t.append(Util.bind(\"disassembler.comma\"))//$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.space\"))//$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.maxLocals\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(codeAttribute.getMaxLocals());", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t}", "+\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\t\t// disassemble compact version of annotations", "+\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassembleAsModifier((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassembleAsModifier((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t}", "+\t\tint accessFlags = methodInfo.getAccessFlags();", "+\t\tdecodeModifiersForMethod(buffer, accessFlags);", "+\t\tif (methodInfo.isSynthetic()) {", "+\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "+\t\t}", "+\t\tCharOperation.replace(methodDescriptor, '/', '.');", "+\t\tchar[] methodName = null;", "+\t\tif (methodInfo.isConstructor()) {", "+\t\t\tmethodName = classFileReader.getClassName();", "+\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor, codeAttribute, accessFlags) , false, false, (accessFlags & IModifierConstants.ACC_VARARGS) != 0));", "+\t\t} else if (methodInfo.isClinit()) {", "+\t\t\tmethodName = Util.bind(\"classfileformat.clinitname\").toCharArray(); //$NON-NLS-1$", "+\t\t\tbuffer.append(methodName);", "+\t\t} else {", "+\t\t\tmethodName = methodInfo.getName();", "+\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor, codeAttribute, accessFlags) , false, true, (accessFlags & IModifierConstants.ACC_VARARGS) != 0));", "+\t\t}", "+\t\tIExceptionAttribute exceptionAttribute = methodInfo.getExceptionAttribute();", "+\t\tif (exceptionAttribute != null) {", "+\t\t\tbuffer.append(\" throws \"); //$NON-NLS-1$", "+\t\t\tchar[][] exceptionNames = exceptionAttribute.getExceptionNames();", "+\t\t\tint length = exceptionNames.length;", "+\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\tchar[] exceptionName = exceptionNames[i];", "+\t\t\t\tCharOperation.replace(exceptionName, '/', '.');", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(exceptionName)", "+\t\t\t\t\t.append(Util.bind(\"disassembler.comma\"))//$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tchar[] exceptionName = exceptionNames[length - 1];", "+\t\t\tCharOperation.replace(exceptionName, '/', '.');", "+\t\t\tbuffer.append(exceptionName);", "+\t\t}", "+\t\tbuffer.append(Util.bind(\"disassembler.endofmethodheader\")); //$NON-NLS-1$", "+\t\t", "+\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\t\tIClassFileAttribute annotationDefaultAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.ANNOTATION_DEFAULT);", "+\t\t\tIClassFileAttribute[] attributes = methodInfo.getAttributes();", "+\t\t\tint length = attributes.length;", "+\t\t\tif (length != 0) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIClassFileAttribute attribute = attributes[i];", "+\t\t\t\t\tif (attribute != codeAttribute", "+\t\t\t\t\t\t\t&& attribute != exceptionAttribute", "+\t\t\t\t\t\t\t&& attribute != signatureAttribute", "+\t\t\t\t\t\t\t&& attribute != annotationDefaultAttribute", "+\t\t\t\t\t\t\t&& attribute != runtimeInvisibleAnnotationsAttribute", "+\t\t\t\t\t\t\t&& attribute != runtimeVisibleAnnotationsAttribute", "+\t\t\t\t\t\t\t&& attribute != runtimeInvisibleParameterAnnotationsAttribute", "+\t\t\t\t\t\t\t&& attribute != runtimeVisibleParameterAnnotationsAttribute", "+\t\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "+\t\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {", "+\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (codeAttribute != null) {", "+\t\t\t\tdisassemble(codeAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t\tif (annotationDefaultAttribute != null) {", "+\t\t\t\tdisassemble((IAnnotationDefaultAttribute) annotationDefaultAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassemble((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassemble((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t\tif (runtimeVisibleParameterAnnotationsAttribute != null) {", "+\t\t\t\tdisassemble((IRuntimeVisibleParameterAnnotationsAttribute) runtimeVisibleParameterAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t\tif (runtimeInvisibleParameterAnnotationsAttribute != null) {", "+\t\t\t\tdisassemble((IRuntimeInvisibleParameterAnnotationsAttribute) runtimeInvisibleParameterAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bb3540aa54abf5a43eb2ac2b88921eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprivate void disassemble(ICodeAttribute codeAttribute, char[][] parameterNames, char[] methodDescriptor, boolean isStatic, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(ICodeAttribute codeAttribute, char[][] parameterNames, char[] methodDescriptor, boolean isStatic, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\t\t\t\t} else if (CharOperation.equals(attribute.getAttributeName(),IAttributeNamesConstants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)) {", "+\t\t\t\t\tdisassemble((IRuntimeVisibleTypeAnnotationsAttribute) attribute, buffer, lineSeparator, tabNumber, mode);", "+\t\t\t\t} else if (CharOperation.equals(attribute.getAttributeName(),IAttributeNamesConstants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)) {", "+\t\t\t\t\tdisassemble((IRuntimeInvisibleTypeAnnotationsAttribute) attribute, buffer, lineSeparator, tabNumber, mode);\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9e25644f9810ac6ff676010a5b17765", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-\t\t\tString indexPath = null;", "-\t\t\t", "+\t\t\tString indexName = computeIndexName(path);", "+\t\t\tObject state = getIndexStates().get(indexName);", "+\t\t\tInteger currentIndexState = state == null ? UNKNOWN_STATE : (Integer) state;", "+\t\t\tif (currentIndexState == UNKNOWN_STATE) {", "+\t\t\t\t// should only be reachable for query jobs", "+\t\t\t\t// IF you put an index in the cache, then AddJarFileToIndex fails because it thinks there is nothing to do", "+\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\treturn null;", "+\t\t\t}", "+", "-\t\t\tif (reuseExistingFile){", "-\t\t\t\tindexPath = computeIndexName(path);", "-\t\t\t\tFile indexFile = new File(indexPath);", "-\t\t\t\tif (indexFile.exists()){ // check before creating index so as to avoid creating a new empty index if file is missing", "-\t\t\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$", "-\t\t\t\t\tif (index != null){", "+\t\t\tif (reuseExistingFile) {", "+\t\t\t\tFile indexFile = new File(indexName);", "+\t\t\t\tif (indexFile.exists()) { // check before creating index so as to avoid creating a new empty index if file is missing", "+\t\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$", "+\t\t\t\t\tif (index != null) {", "+\t\t\t\t} else if (currentIndexState == SAVED_STATE) {", "+\t\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\t\treturn null;", "-\t\t\tif (createIfMissing){", "-\t\t\t\tif (indexPath == null) indexPath = computeIndexName(path);", "-\t\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "-\t\t\t\tif (index != null){", "+\t\t\tif (createIfMissing) {", "+\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "+\t\t\t\tif (index != null) {"]}], "num": 46364}
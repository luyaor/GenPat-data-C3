{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32babbf478ae460fee1a7afd59c2d5b9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1839d79a56d5b42506c00e4bee5c679a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "b36a137cc1f0fb3b34ff097a37fce4ecbf12fde7", "commitAfterChange": "8c1c24f11889e708a63d72ff98b6b9dc79890757", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \tpublic void addEvent(ASTNode parent, StructuralPropertyDescriptor childProperty, RewriteEvent event)", "signatureAfterChange": " \t \tpublic void addEvent(ASTNode parent, StructuralPropertyDescriptor childProperty, RewriteEvent event)", "diff": ["-\t\t// check if already in list", "-\t\tfor (int i= 0; i < this.events.size(); i++) {", "-\t\t\tEventHolder curr= (EventHolder) this.events.get(i);", "-\t\t\tif (curr.parent == parent && curr.childProperty == childProperty) {", "-\t\t\t\tthis.events.set(i, holder);", "-\t\t\t\tthis.lastEvent= null;", "-\t\t\t\treturn;", "+\t\tList entriesList = (List) this.eventLookup.get(parent);", "+\t\tif (entriesList != null) {", "+\t\t\tfor (int i= 0; i < entriesList.size(); i++) {", "+\t\t\t\tEventHolder curr= (EventHolder) entriesList.get(i);", "+\t\t\t\tif (curr.childProperty == childProperty) {", "+\t\t\t\t\tentriesList.set(i, holder);", "+\t\t\t\t\tthis.lastEvent= null;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t} else {", "+\t\t\tentriesList= new ArrayList(3);", "+\t\t\tthis.eventLookup.put(parent, entriesList);", "-\t\tthis.events.add(holder);", "+\t\tentriesList.add(holder);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8a67b7acd6f13cd485e62d1dcd19d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "dafcaed018e710da1dd812dc260b3ece76bb3e1d", "commitAfterChange": "a28933ffb03bd99d79fd8fce531cad43e24a3c4c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void addGeneratedFile( IFile f, boolean contentsChanged )", "signatureAfterChange": "  \tpublic void addGeneratedFile( IFile f, boolean contentsChanged )", "diff": ["-\t\tif( _generatedFiles.containsKey(f) ){", "-\t\t\t// Could have generated the same file twice during one build.", "-\t\t\t// The first time, contentsChanged = true, second time, if the file", "-\t\t\t// is identical, contentsChanged will be false. ", "-\t\t\t// Overall during this process, the file has been changed.", "-\t\t\tboolean curValue = _generatedFiles.get(f);", "-\t\t\tcontentsChanged |= curValue;", "+\t\t// Add first to the map of parent -> child", "+\t\tIFile parent = getFile();", "+\t\tSet<IFile> children = _allGeneratedFiles.get(parent);", "+\t\tif (children == null) {", "+\t\t\tchildren = new HashSet<IFile>();", "+\t\t\t_allGeneratedFiles.put(parent, children);", "+\t\tchildren.add(f);", "-\t\t_generatedFiles.put( f, contentsChanged );", "+\t\tif (contentsChanged)", "+\t\t\t_modifiedGeneratedFiles.add(f);"]}], "num": 67296}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "373f9a254e7c2bcf129271a2ba737676", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35519282df794ab9eb8a3e03dd61845f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r \r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tthis.actualReceiverType = this.receiverType = receiver.resolveType(scope); \r", "+\tthis.qualifyingType = this.receiverType = receiver.resolveType(scope); \r", "-\tbinding = \r", "+\tthis.codegenBinding = this.binding = \r", "-\t// if the binding declaring class is not visible, need special action\r", "-\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "-\t// NOTE: from 1.4 on, method's declaring class is touched if any different from receiver type\r", "-\tif (binding.declaringClass != this.actualReceiverType\r", "-\t\t&& !this.actualReceiverType.isArrayType()\r", "-\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "-\t\t\t\t&& (receiver != ThisReference.ThisImplicit || !binding.isStatic())\r", "-\t\t\t\t&& binding.declaringClass.id != T_Object) // no change for Object methods\r", "-\t\t\t|| !binding.declaringClass.canBeSeenBy(scope))) {\r", "-\t\tbinding = new MethodBinding(binding, (ReferenceBinding) this.actualReceiverType);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acbc05bfad8fb389f36755ef38646896", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "e2422311047b85902980920dda1eeedf124d520c", "commitAfterChange": "c107fdebcaaafcbea0a28f68e9b229afba9f7c4f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["-\t\tfor (int i = 0, l = allInheritedMethods.length; i < l; i++) {", "-\t\t\tMethodBinding otherInheritedMethod = allInheritedMethods[i];", "-\t\t\tMethodBinding otherOriginal = otherInheritedMethod.original();", "-\t\t\t// only check inherited methods that are different & come from separate inheritance paths", "-\t\t\tif (otherOriginal == originalInherited || otherOriginal == otherInheritedMethod) continue;", "-\t\t\tif (inheritedMethod.areParametersEqual(otherInheritedMethod)) continue;", "-\t\t\t// skip it if otherInheritedMethod is defined by a subtype of inheritedMethod's declaringClass", "-\t\t\tif (otherInheritedMethod.declaringClass.erasure() != inheritedMethod.declaringClass.erasure())", "-\t\t\t\tif (otherInheritedMethod.declaringClass.findSuperTypeOriginatingFrom(inheritedMethod.declaringClass) != null)", "-\t\t\t\t\tcontinue;", "-\t\t\tif (detectInheritedNameClash(originalInherited, otherOriginal))", "+\t\tfor (int i = 0, l = allInheritedMethods == null ? 0 : allInheritedMethods.length; i < l; i++) {", "+\t\t\tif (allInheritedMethods[i] != null && detectInheritedNameClash(originalInherited, allInheritedMethods[i].original()))"]}], "num": 5950}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a84e0bbeb6461b3fe0e996a419450d83", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f957318db5cb66c7a785686bd27d5eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "10d0299472db75b0d2601fb1ed8fd13d430fef5a", "commitAfterChange": "1d1bcfc5dd72fdf22291e7342487bb93d58df5c4", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 105, "signatureBeforeChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding, \t\tScope scope)", "signatureAfterChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding, \t\tScope scope)", "diff": ["-\t\t\t\t\tcreateTypeProposal(sourceType, typeName, IAccessRule.K_ACCESSIBLE, typeName, relevance);", "+\t\t\t\t\tcreateTypeProposal(", "+\t\t\t\t\t\t\tsourceType,", "+\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\tIAccessRule.K_ACCESSIBLE,", "+\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\trelevance,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tfalse);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8b2f495e6b653ff68c8e4da0247fbea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "10d0299472db75b0d2601fb1ed8fd13d430fef5a", "commitAfterChange": "1d1bcfc5dd72fdf22291e7342487bb93d58df5c4", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "signatureAfterChange": " \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "diff": ["-\t\t\t\t\tcreateTypeProposal(sourceType, typeName, IAccessRule.K_ACCESSIBLE, typeName, relevance);", "+\t\t\t\t\tcreateTypeProposal(", "+\t\t\t\t\t\t\tsourceType,", "+\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\tIAccessRule.K_ACCESSIBLE,", "+\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\trelevance,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tfalse);"]}], "num": 68981}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55811644e85eb70770542f348991a5d0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43995d5b2a145efb4a624872077bdd8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "4c1d4b601e686baad6c5a6a92ddbbebe0b64a62d", "commitAfterChange": "efbaf5f01b1dd1c4f8135936aa48ce411ca71c6c", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 108, "signatureBeforeChange": " \tpublic boolean visit(SwitchStatement switchStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(SwitchStatement switchStatement, BlockScope scope)", "diff": ["+\t\t\t\t\tif (wasACase) {", "+\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\tif (wasACase) {", "+\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t}", "+\t\t\t\t} else if (statement instanceof Block) {", "+\t\t\t\t\tString bracePosition;", "+\t\t\t\t\tif (wasACase) {", "+\t\t\t\t\t\tif (this.preferences.indent_switchstatements_compare_to_cases) {", "+\t\t\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbracePosition =\tthis.preferences.brace_position_for_block_in_case;", "+\t\t\t\t\t\tformatBlock((Block) statement, scope, bracePosition, this.preferences.insert_space_after_colon_in_case);", "+\t\t\t\t\t\tif (this.preferences.indent_switchstatements_compare_to_cases) {", "+\t\t\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbracePosition =\tthis.preferences.brace_position_for_block;", "+\t\t\t\t\t\tformatBlock((Block) statement, scope, bracePosition, this.preferences.insert_space_before_opening_brace_in_block);", "+\t\t\t\t\t}", "+\t\t\t\t\twasAStatement = true;", "+\t\t\t\t\twasACase = false;", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t} else if (!wasACase) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\tthis.scribe.printNewLine();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71d8c26496c7fb69ffe050d7ee7b2b83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "d7b968f8074ad4e44b5a08309dcb414a4be941a4", "commitAfterChange": "b64275d5d6005c49a64e53460529203088ebb2bb", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " \tpublic boolean visit(LongLiteral longLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(LambdaExpression lambdaExpression, BlockScope scope)", "diff": ["+\t */", "+\tpublic boolean visit(LambdaExpression lambdaExpression, BlockScope scope) {", "+\t\t", "+\t\tfinal int numberOfParens = (lambdaExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(lambdaExpression, numberOfParens);", "+\t\t}", "+\t\tif (isNextToken(TerminalTokens.TokenNameLPAREN)) {", "+\t\t\t// Format arguments", "+\t\t\tformatMethodArguments(", "+\t\t\t\tlambdaExpression.arguments,", "+\t\t\t\tlambdaExpression.getScope(),", "+\t\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "+\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "+\t\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+\t\t} else {", "+\t\t\t// This MUST be a single, untyped parameter", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);", "+\t\t}", "+\t\tif (this.preferences.insert_space_before_lambda_arrow) this.scribe.space();", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameARROW);", "+\t\tif (this.preferences.insert_space_after_lambda_arrow) this.scribe.space();", "+\t\tif (lambdaExpression.body instanceof Block) {", "+\t\t\tformatBlock((Block) lambdaExpression.body, scope, this.preferences.brace_position_for_lambda_body, this.preferences.insert_space_before_opening_brace_in_block);", "+\t\t} else {", "+\t\t\tlambdaExpression.body.traverse(this, scope);", "+\t\t}", "+", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(lambdaExpression, numberOfParens);", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 52307}
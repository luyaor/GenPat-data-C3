{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "295e39cccc558cdc29b9de0b6e613bf5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aad25d554bd4ce030b4652bfa00d77a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "93675a43d968a3c19731d41f01d7289fd7ab10d8", "commitAfterChange": "5bdc34d5d9c6002fe6f005fd6095ecbab7b31181", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void initializeRoots()", "signatureAfterChange": "  \tpublic void initializeRoots()", "diff": ["-\t\t\tThread currentThread = Thread.currentThread();", "-\t\t\tboolean addedCurrentThread = false;\t\t\t", "+", "+\t\t\tnewRoots = new HashMap();", "+\t\t\tnewOtherRoots = new HashMap();", "+\t\t\tnewSourceAttachments = new HashMap();", "+\t", "+\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\tIJavaProject[] projects;", "-\t\t\t\t// if reentering initialization (through a container initializer for example) no need to compute roots again", "-\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=47213", "-\t\t\t\tif (!this.initializingThreads.add(currentThread)) return;", "-\t\t\t\taddedCurrentThread = true;", "-\t\t\t\t", "-\t\t\t\tnewRoots = new HashMap();", "-\t\t\t\tnewOtherRoots = new HashMap();", "-\t\t\t\tnewSourceAttachments = new HashMap();", "-\t\t", "-\t\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\t\t\tIJavaProject[] projects;", "+\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// nothing can be done", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\tIJavaProject project = projects[i];", "+\t\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t\t\t// nothing can be done", "-\t\t\t\t\treturn;", "+\t\t\t\t\t// continue with next project", "+\t\t\t\t\tcontinue;", "-\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "+\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\t", "+\t\t\t\t\t// root path", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tif (newRoots.get(path) == null) {", "+\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "+\t\t\t\t\t\tif (rootList == null) {", "+\t\t\t\t\t\t\trootList = new ArrayList();", "+\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// source attachment path", "+\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "+\t\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "+\t\t\t\t\tString propertyString = null;", "-\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// continue with next project", "+\t\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "+\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "-\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// root path", "-\t\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\t\tif (newRoots.get(path) == null) {", "-\t\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "-\t\t\t\t\t\t\tif (rootList == null) {", "-\t\t\t\t\t\t\t\trootList = new ArrayList();", "-\t\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// source attachment path", "-\t\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "-\t\t\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "-\t\t\t\t\t\tString propertyString = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "-\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tIPath sourceAttachmentPath;", "-\t\t\t\t\t\tif (propertyString != null) {", "-\t\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "-\t\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (sourceAttachmentPath != null) {", "-\t\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tIPath sourceAttachmentPath;", "+\t\t\t\t\tif (propertyString != null) {", "+\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "+\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tif (addedCurrentThread) {", "-\t\t\t\t\tthis.initializingThreads.remove(currentThread);", "+\t\t\t\t\tif (sourceAttachmentPath != null) {", "+\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3d7425225a877f2e064ca616f79094e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "6dcea7f92f6d51021ec146f3cbf4e000acdf0623", "commitAfterChange": "ab65f9958c4ed5b3b45ee13b8e88b17d2c86ad3d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void initializeRoots()", "signatureAfterChange": "  \tpublic synchronized void initializeRoots()", "diff": ["-\tpublic void initializeRoots() {", "+\tpublic synchronized void initializeRoots() {", "+\t\t// remember roots infos as old roots infos", "+\t\tthis.oldRoots = this.roots == null ? new Hashtable() : this.roots;", "+\t\tthis.oldOtherRoots = this.otherRoots == null ? new Hashtable() : this.otherRoots;", "-\t\tHashtable newRoots = null;", "-\t\tHashtable newOtherRoots = null;", "-\t\tHashtable newSourceAttachments = null;", "-\t\tif (this.rootsAreStale) {", "+\t\tif (!this.rootsAreStale) return;", "-\t\t\tnewRoots = new Hashtable();", "-\t\t\tnewOtherRoots = new Hashtable();", "-\t\t\tnewSourceAttachments = new Hashtable();", "-\t", "-\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\t\tIJavaProject[] projects;", "+\t\tthis.roots = new Hashtable();", "+\t\tthis.otherRoots = new Hashtable();", "+\t\tthis.sourceAttachments = new Hashtable();", "+\t\t", "+\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\tIJavaProject[] projects;", "+\t\ttry {", "+\t\t\tprojects = model.getJavaProjects();", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// nothing can be done", "+\t\t\treturn;", "+\t\t}", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\tIJavaProject project = projects[i];", "+\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t\t// nothing can be done", "-\t\t\t\treturn;", "+\t\t\t\t// continue with next project", "+\t\t\t\tcontinue;", "-\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "+\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t", "+\t\t\t\t// root path", "+\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\tif (this.roots.get(path) == null) {", "+\t\t\t\t\tthis.roots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "+\t\t\t\t} else {", "+\t\t\t\t\tArrayList rootList = (ArrayList)this.otherRoots.get(path);", "+\t\t\t\t\tif (rootList == null) {", "+\t\t\t\t\t\trootList = new ArrayList();", "+\t\t\t\t\t\tthis.otherRoots.put(path, rootList);", "+\t\t\t\t\t}", "+\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// source attachment path", "+\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "+\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "+\t\t\t\tString propertyString = null;", "-\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// continue with next project", "+\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "+\t\t\t\t} catch (CoreException e) {", "-\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "-\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\t\t", "-\t\t\t\t\t// root path", "-\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\tif (newRoots.get(path) == null) {", "-\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "-\t\t\t\t\t\tif (rootList == null) {", "-\t\t\t\t\t\t\trootList = new ArrayList();", "-\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// source attachment path", "-\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "-\t\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "-\t\t\t\t\tString propertyString = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "-\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tIPath sourceAttachmentPath;", "-\t\t\t\t\tif (propertyString != null) {", "-\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "-\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t\t}", "-\t\t\t\t\tif (sourceAttachmentPath != null) {", "-\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "-\t\t\t\t\t}", "+\t\t\t\tIPath sourceAttachmentPath;", "+\t\t\t\tif (propertyString != null) {", "+\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "+\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "+\t\t\t\t} else {", "+\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "+\t\t\t\t}", "+\t\t\t\tif (sourceAttachmentPath != null) {", "+\t\t\t\t\tthis.sourceAttachments.put(sourceAttachmentPath, path);", "-\t\tsynchronized(this) {", "-\t\t\tif (this.rootsAreStale) { // double check again", "-\t\t\t\tthis.oldRoots = this.roots == null ? new Hashtable() : this.roots;", "-\t\t\t\tthis.oldOtherRoots = this.otherRoots == null ? new Hashtable() : this.otherRoots;\t\t\t", "-\t\t\t\tif (newRoots != null) {", "-\t\t\t\t\tthis.roots = newRoots;", "-\t\t\t\t\tthis.otherRoots = newOtherRoots;", "-\t\t\t\t\tthis.sourceAttachments = newSourceAttachments;", "-\t\t\t\t\tthis.rootsAreStale = false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tthis.rootsAreStale = false;"]}], "num": 28321}
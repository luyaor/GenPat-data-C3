{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de02fbbf414f0698abb57cb0230692ec", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f4d76fc055ea59d90e3fda9ae360bc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tscope.problemReporter().unnecessaryReceiverForStaticMethod(this, binding);", "+\t\t\tscope.problemReporter().nonStaticAccessToStaticMethod(this, binding);", "+\t\tif (!receiver.isImplicitThis() && binding.declaringClass != receiverType) {", "+\t\t\tscope.problemReporter().indirectAccessToStaticMethod(this, binding);", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83bbde11c1d4c323dc1ded5bcf0f3e9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\t\t\tthis.bits |= UnsafeCastMask;", "+\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\t\tthis.bits |= UnsafeCastMask;", "+\t\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\tthis.bits |= UnsafeCastMask;", "+\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\tthis.bits |= UnsafeCastMask;", "+\t\t\t\tthis.bits |= UnsafeCast;"]}], "num": 1092}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "546689213c9bb1ae811e64f3347955fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bfd013b5481832c8a6ed370cffd1624", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "5e37111f16a5b67ba28515808a13a4062d45b23e", "commitAfterChange": "45a31ddc243181df16e6406f1b70f955ef191113", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tJavaProject project)", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "diff": ["-\t\tJavaProject project) {", "+\t\tfinal JavaProject project) {", "-\t\tIndexManager indexManager = manager.getIndexManager();", "+\t\tfinal IndexManager indexManager = manager.getIndexManager();", "-\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, oldResolvedPath[i].getPath());", "+\t\t\t\t\tfinal IPath path = oldResolvedPath[i].getPath();", "+\t\t\t\t\tpostAction(new IPostAction() {", "+\t\t\t\t\t\tpublic String getID() {", "+\t\t\t\t\t\t\treturn path.toString();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpublic void run() throws JavaModelException {", "+\t\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}, ", "+\t\t\t\t\tREMOVEALL_APPEND);", "-\t\t\t\t\t\t\tIPath newPath = newResolvedPath[i].getPath();", "+\t\t\t\t\t\t\tfinal IPath newPath = newResolvedPath[i].getPath();", "-\t\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, project.getProject());", "+\t\t\t\t\t\t\t\tpostAction(new IPostAction() {", "+\t\t\t\t\t\t\t\t\tpublic String getID() {", "+\t\t\t\t\t\t\t\t\t\treturn newPath.toString();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tpublic void run() throws JavaModelException {", "+\t\t\t\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, project.getProject());", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}, ", "+\t\t\t\t\t\t\t\tREMOVEALL_APPEND);", "-\t\t\t\t\t\t\tindexManager.indexSourceFolder(project, newResolvedPath[i].getPath());", "+\t\t\t\t\t\t\tfinal IPath path = newResolvedPath[i].getPath();", "+\t\t\t\t\t\t\tpostAction(new IPostAction() {", "+\t\t\t\t\t\t\t\tpublic String getID() {", "+\t\t\t\t\t\t\t\t\treturn path.toString();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tpublic void run() throws JavaModelException {", "+\t\t\t\t\t\t\t\t\tindexManager.indexSourceFolder(project, path);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}, ", "+\t\t\t\t\t\t\tREMOVEALL_APPEND);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74240a464b83b55b21ee6bc845ba951b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "bb4e6bac07124b460a049d2b185093478c4f0c72", "commitAfterChange": "9cf59650b85352257b29d89bc6a53254086661f7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "signatureAfterChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "diff": ["-\t\t\tArrayList participants = new ArrayList();", "+\t\t\tfinal ArrayList participants = new ArrayList();", "-\t\t\t\t\tfor(int k = 0; k < configElements.length; k++){", "-\t\t\t\t\t\tString elementName = configElements[k].getName();", "+\t\t\t\t\tfor(int k = 0; k < configElements.length; k++) {", "+\t\t\t\t\t\tfinal IConfigurationElement configElement = configElements[k];", "+\t\t\t\t\t\tString elementName =configElement.getName();", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tObject execExt = configElements[j].createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "-\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant){", "-\t\t\t\t\t\t\t\tparticipants.add(execExt);", "+\t\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while creating compilation participant\"); //$NON-NLS-1$", "-\t\t\t\t\t\t} catch(CoreException e) {", "-\t\t\t\t\t\t\t// executable extension could not be created: ignore this participant", "-\t\t\t\t\t\t\tUtil.log(e, \"Unexpected exception trying to instanciate compilation participant\"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\t\t\tObject execExt = configElement.createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant) {", "+\t\t\t\t\t\t\t\t\tparticipants.add(execExt);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "-\t\t\tthis.registeredParticipants = new CompilationParticipant[size];", "-\t\t\tparticipants.toArray(this.registeredParticipants);", "-\t\t\treturn this.registeredParticipants;", "+\t\t\tCompilationParticipant[] result = new CompilationParticipant[size];", "+\t\t\tparticipants.toArray(result);", "+\t\t\tfor (int i = 0; i < size; i++) {", "+\t\t\t\tfinal CompilationParticipant participant = result[i];", "+\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while configuring compilation participant\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\tparticipant.configure(participants);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}", "+\t\t\tsize = participants.size();", "+\t\t\tif (size != result.length)", "+\t\t\t\tresult = new CompilationParticipant[size];", "+\t\t\tparticipants.toArray(result);", "+\t\t\treturn this.registeredParticipants = result;"]}], "num": 42150}
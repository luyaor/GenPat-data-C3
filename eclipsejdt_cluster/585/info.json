{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d07ecf535ade3bd89a2fb9d2c3d72aaa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "074e1f7c5f80c31423ee1382ed22a9ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "30d6bbd4d297ea722bbf0e8aa1c474adcd4c51b0", "commitAfterChange": "dca3ec9bc22ebd8e899a0f03c06dbb87b3ae80e6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t", "-\t\t\tresolveAnnotations(scope, this.annotations, this.binding);", "+\t\t// only resolve annotation at the end, for constant to be positionned before (96991)", "+\t\tif (this.binding != null)", "+\t\t\tresolveAnnotations(scope, this.annotations, this.binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26b1be8de3d0227440963ead68e6cd6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations18Test.java", "commitBeforeChange": "c44aa7c9584b2aeb01c8735f65072ee0370567cb", "commitAfterChange": "a331f1e3aa5fce2152c4983d3637744df1801bd5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprotected void tearDown() throws Exception", "signatureAfterChange": " \t \tprotected void tearDown() throws Exception", "diff": ["-\t\tthis.project.getProject().delete(true, true, null);", "+\t\tif (this.project != null)", "+\t\t\tthis.project.getProject().delete(true, true, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3239516fc3e8c108b5c5c961a59f5d90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "c62b2332be65f641e5e7827b79f4caf8cb16c6bb", "commitAfterChange": "8da497be802fa99e80a3f90a1137af05842698d7", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "signatureAfterChange": " public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "diff": ["-\tscope.compilationUnitScope().recordQualifiedReference(this.compoundName);", "+\tif (this.compoundName != null)", "+\t\tscope.compilationUnitScope().recordQualifiedReference(this.compoundName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9785e0b235132164029e2f36d6939259", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "ce61e155800f8594d3bfe89e11982de60c02c3f9", "commitAfterChange": "4ed4929f5a19426d0e76e817c895cfe42549d282", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope)", "signatureAfterChange": " public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope)", "diff": ["-\t\tthis.suspendedResolutionState.hasReportedError = true;", "+\t\tif (this.suspendedResolutionState != null)", "+\t\t\tthis.suspendedResolutionState.hasReportedError = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf3238d4817d6cf1374d86d2f2ca0cf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "f1193e6503e3d1d4aed816cb60dcc97268ceaf78", "commitAfterChange": "d173da65452fbda2d49c0f6b870b85fed5c21760", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void tearDown() throws Exception", "signatureAfterChange": " \tprotected void tearDown() throws Exception", "diff": ["-\t\tthis.currentProject.setOptions(JavaCore.getOptions());", "+\t\tif (this.currentProject != null) this.currentProject.setOptions(JavaCore.getOptions());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7abe51bab14ce873366f7bdf19f182f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfoWithAnnotation.java", "commitBeforeChange": "21d3c1ac784a9ef78a64389e4df817ec0452ce19", "commitAfterChange": "2c4adf2736a9a7ce066a42070aabd3f4b1ddf5af", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void initialize()", "signatureAfterChange": " protected void initialize()", "diff": ["-\tfor (int i = 0, max = this.annotations.length; i < max; i++)", "-\t\tthis.annotations[i].initialize();", "+\tif (this.annotations != null)", "+\t\tfor (int i = 0, max = this.annotations.length; i < max; i++)", "+\t\t\tthis.annotations[i].initialize();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6d25ca12c576b341585765b48f0160b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a2a25daab3f792071cba7e3d51c3d2abf00c6c2a", "commitAfterChange": "8bffc680730baeb75a0764c02d5d9479eee4502e", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic TypeBinding[] createBoundsForFunctionalInterfaceParameterizationInference(ParameterizedTypeBinding functionalInterface)", "signatureAfterChange": " \tTypeBinding[] createBoundsForFunctionalInterfaceParameterizationInference(ParameterizedTypeBinding functionalInterface)", "diff": ["+\t */", "+\tTypeBinding[] createBoundsForFunctionalInterfaceParameterizationInference(ParameterizedTypeBinding functionalInterface) {", "+\t\tif (this.currentBounds == null)", "+\t\t\tthis.currentBounds = new BoundSet();", "+\t\tTypeBinding[] a = functionalInterface.arguments;", "+\t\tif (a == null)", "+\t\t\treturn null;", "+\t\tInferenceVariable[] alpha = addInitialTypeVariableSubstitutions(a);", "+", "+\t\tfor (int i = 0; i < a.length; i++) {", "+\t\t\tTypeBound bound;", "+\t\t\tif (a[i].kind() == Binding.WILDCARD_TYPE) {", "+\t\t\t\tWildcardBinding wildcard = (WildcardBinding) a[i];", "+\t\t\t\tswitch(wildcard.boundKind) {", "+    \t\t\t\tcase Wildcard.EXTENDS :", "+    \t\t\t\t\tbound = new TypeBound(alpha[i], wildcard.allBounds(), ReductionResult.SUBTYPE);", "+    \t\t\t\t\tbreak;", "+    \t\t\t\tcase Wildcard.SUPER :", "+    \t\t\t\t\tbound = new TypeBound(alpha[i], wildcard.bound, ReductionResult.SUPERTYPE);", "+    \t\t\t\t\tbreak;", "+    \t\t\t\tcase Wildcard.UNBOUND :", "+    \t\t\t\t\tbound = new TypeBound(alpha[i], this.object, ReductionResult.SUBTYPE);", "+    \t\t\t\t\tbreak;", "+    \t\t\t\tdefault:", "+    \t\t\t\t\tcontinue; // cannot", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tbound = new TypeBound(alpha[i], a[i], ReductionResult.SAME);", "+\t\t\t}", "+\t\t\tthis.currentBounds.addBound(bound);", "+\t\t}", "+\t\tTypeBinding falpha = substitute(functionalInterface);", "+\t\treturn falpha.getSingleAbstractMethod(this.scope, true).parameters;", "+\t}", "-\t */", "-\tpublic TypeBinding[] createBoundsForFunctionalInterfaceParameterizationInference(ParameterizedTypeBinding functionalInterface) {", "-\t\tthis.currentBounds = new BoundSet();", "-\t\tTypeBinding[] a = functionalInterface.arguments;", "-\t\tif (a == null)", "-\t\t\treturn null;", "-\t\tInferenceVariable[] alpha = addInitialTypeVariableSubstitutions(a);", "-", "-\t\tfor (int i = 0; i < a.length; i++) {", "-\t\t\tTypeBound bound;", "-\t\t\tif (a[i].kind() == Binding.WILDCARD_TYPE) {", "-\t\t\t\tWildcardBinding wildcard = (WildcardBinding) a[i];", "-\t\t\t\tswitch(wildcard.boundKind) {", "-    \t\t\t\tcase Wildcard.EXTENDS :", "-    \t\t\t\t\tbound = new TypeBound(alpha[i], wildcard.allBounds(), ReductionResult.SUBTYPE);", "-    \t\t\t\t\tbreak;", "-    \t\t\t\tcase Wildcard.SUPER :", "-    \t\t\t\t\tbound = new TypeBound(alpha[i], wildcard.bound, ReductionResult.SUPERTYPE);", "-    \t\t\t\t\tbreak;", "-    \t\t\t\tcase Wildcard.UNBOUND :", "-    \t\t\t\t\tbound = new TypeBound(alpha[i], this.object, ReductionResult.SUBTYPE);", "-    \t\t\t\t\tbreak;", "-    \t\t\t\tdefault:", "-    \t\t\t\t\tcontinue; // cannot", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tbound = new TypeBound(alpha[i], a[i], ReductionResult.SAME);", "-\t\t\t}", "-\t\t\tthis.currentBounds.addBound(bound);", "-\t\t}", "-\t\tTypeBinding falpha = substitute(functionalInterface);", "-\t\treturn falpha.getSingleAbstractMethod(this.scope, true).parameters;", "-\t}"]}], "num": 585}
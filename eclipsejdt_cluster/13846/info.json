{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39270202dbd0d2f515bb387af0879c1e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a3051a8d36b2ac5e86c5d5d8dc0ecac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "e910027d17c5e750d4722e20d5f23e40961c15bd", "commitAfterChange": "9d1d3e91d48e527ecbf533c327d0d9893f86792c", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  \tpublic void initialize(SourceTypeBinding aType, ClassFile parentClassFile, boolean createProblemType)", "signatureAfterChange": "  \tpublic void initialize(SourceTypeBinding aType, ClassFile parentClassFile, boolean createProblemType)", "diff": ["-\t\t\tsuperclassNameIndex =", "-\t\t\t\t(aType.superclass == null ? 0 : this.constantPool.literalIndexForType(aType.superclass));", "+\t\t\tif (aType.superclass != null) {", "+\t\t\t\t if ((aType.superclass.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\t\tsuperclassNameIndex = this.constantPool.literalIndexForType(ConstantPool.JavaLangObjectConstantPoolName);", "+\t\t\t\t } else {", "+\t\t\t\t\t\tsuperclassNameIndex = this.constantPool.literalIndexForType(aType.superclass);", "+\t\t\t\t }", "+\t\t\t} else {", "+\t\t\t\tsuperclassNameIndex = 0;", "+\t\t\t}", "-\t\tthis.contents[this.contentsOffset++] = (byte) (interfacesCount >> 8);", "-\t\tthis.contents[this.contentsOffset++] = (byte) interfacesCount;", "+\t\tint interfacesCountPosition = this.contentsOffset;", "+\t\tthis.contentsOffset += 2;", "+\t\tint interfaceCounter = 0;", "-\t\t\tint interfaceIndex = this.constantPool.literalIndexForType(superInterfacesBinding[i]);", "+\t\t\tReferenceBinding binding = superInterfacesBinding[i];", "+\t\t\tif ((binding.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tinterfaceCounter++;", "+\t\t\tint interfaceIndex = this.constantPool.literalIndexForType(binding);", "+\t\tthis.contents[interfacesCountPosition++] = (byte) (interfaceCounter >> 8);", "+\t\tthis.contents[interfacesCountPosition] = (byte) interfaceCounter;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa1fd2a9bb7e4d7cf421c3cef37522ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\t\t\t\tmethodDecl.scope.problemReporter().cannotThrowType(exceptionTypes[i], resolvedExceptionType);", "-\t\t\t\tcontinue;", "+\t\t\t\tif (resolvedExceptionType.isValidBinding()) {", "+\t\t\t\t\tmethodDecl.scope.problemReporter().cannotThrowType(exceptionTypes[i], resolvedExceptionType);", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "-\t\t    if ((resolvedExceptionType.modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)", "-\t\t\t\tmethod.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "+\t\t\tif ((resolvedExceptionType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tmethod.tagBits |= TagBits.HasMissingType;", "+\t\t\t}\t\t\t\t\t\t", "+\t\t\tmethod.modifiers |= (resolvedExceptionType.modifiers & ExtraCompilerModifiers.AccGenericSignature);", "+\t\t\t\tif ((parameterType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tmethod.tagBits |= TagBits.HasMissingType;", "+\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\tif ((methodType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tmethod.tagBits |= TagBits.HasMissingType;", "+\t\t\t\t}\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98cc101112da3c9db2ed07251916396", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tpublic void reportError(ProblemReporter problemReporter, ASTNode location, int nullStatus)", "signatureAfterChange": " \t \tpublic int reportError(ProblemReporter problemReporter, ASTNode location, int nullStatus)", "diff": ["-\tpublic void reportError(ProblemReporter problemReporter, ASTNode location, int nullStatus) {", "+\tpublic int reportError(ProblemReporter problemReporter, ASTNode location, int nullStatus) {", "+\t\t// which degree of problem?", "+\t\tboolean isPotentialProblem = false;", "-\t\t\t\tproblemReporter.potentiallyUnclosedCloseable(this, location);", "-\t\t\telse", "-\t\t\t\tproblemReporter.unclosedCloseable(this, location);", "+\t\t\t\tisPotentialProblem = true;", "-\t\t\tproblemReporter.potentiallyUnclosedCloseable(this, location);", "-\t\t}\t\t", "+\t\t\tisPotentialProblem = true;", "+\t\t}", "+\t\t// report:", "+\t\tif (isPotentialProblem) {", "+\t\t\tif ((this.globalClosingState & (REPORTED_POTENTIAL_LEAK|REPORTED_DEFINITIVE_LEAK)) != 0)", "+\t\t\t\treturn 0;", "+\t\t\tproblemReporter.potentiallyUnclosedCloseable(this, location);\t", "+\t\t} else {", "+\t\t\tif ((this.globalClosingState & (REPORTED_DEFINITIVE_LEAK)) != 0)", "+\t\t\t\treturn 0;", "+\t\t\tproblemReporter.unclosedCloseable(this, location);\t\t\t", "+\t\t}", "+\t\t// propagate flag to inners:", "+\t\tint reportFlag = isPotentialProblem ? REPORTED_POTENTIAL_LEAK : REPORTED_DEFINITIVE_LEAK;", "+\t\tif (location == null) { // if location != null flags will be set after the loop over locations ", "+\t\t\tFakedTrackingVariable current = this;", "+\t\t\tdo {", "+\t\t\t\tcurrent.globalClosingState |= reportFlag;", "+\t\t\t} while ((current = current.innerTracker) != null);", "+\t\t}", "+\t\treturn reportFlag;"]}], "num": 13846}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c58685f0de6664a5139836df800fea66", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "302de572b02595c8c797f406da53f0ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void closing(Object info) throws JavaModelException", "signatureAfterChange": " protected void closing(Object info) throws JavaModelException", "diff": ["-\tif (JavaModelManager.VERBOSE){", "-\t\tSystem.out.println(\"-> Package cache size = \" + JavaModelManager.getJavaModelManager().cache.pkgSize()); //$NON-NLS-1$", "-\t\tSystem.out.println(\"-> Openable cache filling ratio = \" + JavaModelManager.getJavaModelManager().cache.openableFillingRatio() + \"%\"); //$NON-NLS-1$//$NON-NLS-2$", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "679e39fe68578b32414699eaab35c5e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource) throws JavaModelException", "signatureAfterChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource) throws JavaModelException", "diff": ["-", "-\t\tboolean validInfo = false;", "-\t\ttry {", "-\t\t\tif (getProject().isOpen()) {", "-\t\t\t\t// put the info now, because computing the roots requires it", "-\t\t\t\tJavaModelManager.getJavaModelManager().putInfo(this, info);", "-", "-\t\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\t\t\tIWorkspaceRoot wRoot = workspace.getRoot();", "-\t\t\t\t// request marker refresh on project opening (so as to diagnose unbound variables on startup)", "-\t\t\t\tIClasspathEntry[] resolvedClasspath = getResolvedClasspath(true/*ignore unresolved variable*/, false /*37274:!workspace.isTreeLocked()*/  /*refresh CP markers*/);", "-", "-\t\t\t\t// compute the pkg fragment roots (resolved CP should already be cached from marker refresh)", "-\t\t\t\tupdatePackageFragmentRoots();\t\t\t\t", "-\t\t\t\t// remember the timestamps of external libraries the first time they are looked up", "-\t\t\t\tfor (int i = 0, length = resolvedClasspath.length; i < length; i++) {", "-\t\t\t\t\tIClasspathEntry entry = resolvedClasspath[i];", "-\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "-\t\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\t\tObject target = JavaModel.getTarget(wRoot, path, true);", "-\t\t\t\t\t\tif (target instanceof java.io.File) {", "-\t\t\t\t\t\t\tMap externalTimeStamps = JavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps;", "-\t\t\t\t\t\t\tif (externalTimeStamps.get(path) == null) {", "-\t\t\t\t\t\t\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File)target);", "-\t\t\t\t\t\t\t\texternalTimeStamps.put(path, new Long(timestamp));\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t}", "+\t\tif (getProject().isOpen()) {", "+\t\t\t// put the info now, because computing the roots requires it", "+\t\t\t//JavaModelManager.getJavaModelManager().putInfo(this, info);", "+\t", "+\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\t\tIWorkspaceRoot wRoot = workspace.getRoot();", "+\t\t\tIClasspathEntry[] resolvedClasspath = getResolvedClasspath(true/*ignore unresolved variable*/, false  /*don't refresh CP markers (see bug 37274)*/);", "+\t", "+\t\t\t// compute the pkg fragment roots (resolved CP should already be cached from marker refresh)", "+\t\t\tcomputeChildren((JavaProjectElementInfo)info);\t\t\t\t", "+\t", "+\t\t\t// remember the timestamps of external libraries the first time they are looked up", "+\t\t\tfor (int i = 0, length = resolvedClasspath.length; i < length; i++) {", "+\t\t\t\tIClasspathEntry entry = resolvedClasspath[i];", "+\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tObject target = JavaModel.getTarget(wRoot, path, true);", "+\t\t\t\t\tif (target instanceof java.io.File) {", "+\t\t\t\t\t\tMap externalTimeStamps = JavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps;", "+\t\t\t\t\t\tif (externalTimeStamps.get(path) == null) {", "+\t\t\t\t\t\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File)target);", "+\t\t\t\t\t\t\texternalTimeStamps.put(path, new Long(timestamp));\t\t\t\t\t\t\t", "-\t\t\t\t}\t\t\t", "-", "-\t\t\t\t// only valid if reaches here\t\t\t\t", "-\t\t\t\tvalidInfo = true;", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tif (!validInfo)", "-\t\t\t\tJavaModelManager.getJavaModelManager().removeInfo(this);", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t", "-\t\treturn validInfo;", "+\t\treturn true;"]}], "num": 55712}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da367e75da9fe630e7ac754141ccdd1b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "871b24b03e8a0baf0901e3e527cd9165", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tprivate ASTNode temporaryCreateASTDispatch(IProgressMonitor monitor)", "signatureAfterChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["-\tprivate ASTNode temporaryCreateASTDispatch(IProgressMonitor monitor) {", "-\t\t// old AST.parse(...)", "-\t\tif (this.astKind != K_COMPILATION_UNIT) {", "-\t\t\treturn parse(this.astKind, this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions);", "-\t\t}", "-\t\t// old AST.parsePartialCompilationUnit(...)", "-\t\tif (this.partial) {", "-\t\t\tif (this.compilationUnitSource != null) {", "-\t\t\t\treturn parsePartialCompilationUnit(this.compilationUnitSource, this.focalPointPosition, this.resolveBindings, this.workingCopyOwner, monitor);", "-\t\t\t}", "-\t\t\tif (this.classFileSource != null) {", "-\t\t\t\treturn parsePartialCompilationUnit(this.classFileSource, this.focalPointPosition, this.resolveBindings, this.workingCopyOwner, monitor);", "-\t\t\t}", "-\t\t\tthrow new RuntimeException(\"partial parses of raw sources not implemented yet\"); //$NON-NLS-1$", "-\t\t}", "-\t\t// old AST.parseCompilationUnit(...)", "-\t\tif (this.rawSource != null) {", "-\t\t\tif (unitName != null || project != null) {", "-\t\t\t\treturn parseCompilationUnit(this.rawSource, this.unitName, this.project, this.workingCopyOwner, monitor);", "-\t\t\t} else {", "-\t\t\t\treturn parseCompilationUnit(this.rawSource, this.compilerOptions);", "-\t\t\t}", "-\t\t}", "-\t\tif (this.compilationUnitSource != null) {", "-\t\t\treturn parseCompilationUnit(this.compilationUnitSource, this.resolveBindings, this.workingCopyOwner, monitor);", "-\t\t}", "-\t\tif (this.classFileSource != null) {", "-\t\t\treturn parseCompilationUnit(this.classFileSource, this.resolveBindings, this.workingCopyOwner, monitor);", "+\tprivate ASTNode internalCreateAST(IProgressMonitor monitor) {", "+\t\tboolean needToResolveBindings = this.resolveBindings;", "+\t\tswitch(this.astKind) {", "+\t\t\tcase K_CLASS_BODY_DECLARATIONS :", "+\t\t\tcase K_EXPRESSION :", "+\t\t\tcase K_STATEMENTS :", "+\t\t\t\tif (this.rawSource != null) {", "+\t\t\t\t\tif (this.sourceOffset + this.sourceLength > this.rawSource.length) {", "+\t\t\t\t\t    throw new IllegalStateException();", "+\t\t\t\t\t}", "+\t\t\t\t\treturn internalCreateASTForKind();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase K_COMPILATION_UNIT :", "+\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tchar[] source = null;", "+\t\t\t\t\tNodeSearcher searcher = null;", "+\t\t\t\t\tchar[][] packageName = null;", "+\t\t\t\t\tString fileName = null;", "+\t\t\t\t\tif (this.compilationUnitSource != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tsource = this.compilationUnitSource.getSource().toCharArray();", "+\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\t// no source, then we cannot build anything", "+\t\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tIPackageFragment packageFragment = (IPackageFragment)this.compilationUnitSource.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "+\t\t\t\t\t\tif (packageFragment != null){", "+\t\t\t\t\t\t\tpackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfileName = this.compilationUnitSource.getElementName();", "+\t\t\t\t\t} else if (this.classFileSource != null) {", "+\t\t\t\t\t\tString sourceString = null;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tsourceString = this.classFileSource.getSource();", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// nothing to do", "+\t\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t\tif (sourceString == null) {", "+\t\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsource = sourceString.toCharArray();", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tpackageName = CharOperation.splitOn('.', this.classFileSource.getType().getPackageFragment().getElementName().toCharArray());", "+\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "+\t\t\t\t\t\t\tString classFileName = this.classFileSource.getElementName(); // this includes the trailing .class", "+\t\t\t\t\t\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "+\t\t\t\t\t\t\tfileName = String.valueOf(buffer);", "+\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (this.rawSource != null) {", "+\t\t\t\t\t\tsource = this.rawSource;", "+\t\t\t\t\t\tif (this.unitName == null || this.project == null) {", "+\t\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfileName = this.unitName;", "+\t\t\t\t\t\t\tneedToResolveBindings = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (source == null) {", "+\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.partial) {", "+\t\t\t\t\t\tsearcher = new NodeSearcher(this.focalPointPosition);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (needToResolveBindings) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// parse and resolve", "+\t\t\t\t\t\t\tcompilationUnitDeclaration = ", "+\t\t\t\t\t\t\t\tCompilationUnitResolver.resolve(", "+\t\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\tfileName,", "+\t\t\t\t\t\t\t\t\tthis.project,", "+\t\t\t\t\t\t\t\t\tsearcher,", "+\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\tthis.workingCopyOwner,", "+\t\t\t\t\t\t\t\t\tmonitor);", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.parse(", "+\t\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\t\tsearcher,", "+\t\t\t\t\t\t\t\t\tthis.compilerOptions);", "+\t\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.parse(", "+\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\tsearcher,", "+\t\t\t\t\t\t\t\tthis.compilerOptions);", "+\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn convert(monitor, compilationUnitDeclaration, source, needToResolveBindings);", "+\t\t\t\t} finally {", "+\t\t\t\t\tif (compilationUnitDeclaration != null && this.resolveBindings) {", "+\t\t\t\t\t\tcompilationUnitDeclaration.cleanUp();", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f13d1451d932232ee14fa117686b0151", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "2b8cdf5b25e07227dc18107b83f738581752bc80", "commitAfterChange": "c97d2bafa36295328a1a888b1de6ae8961b94266", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean checkNegative1()", "signatureAfterChange": " \tpublic boolean checkNegative1() throws Exception", "diff": ["-\tpublic boolean checkNegative1() {", "-\t\tTypeElement elementN1 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative1\");", "-\t\tif (null == elementN1 || elementN1.getKind() != ElementKind.CLASS) {", "+\tpublic boolean checkNegative1() throws Exception {", "+\t\t", "+\t\t// Get the root of the Negative1 model", "+\t\tTypeElement element = _elementUtils.getTypeElement(\"targets.negative.pa.Negative1\");", "+\t\tif (null == element || element.getKind() != ElementKind.CLASS) {", "-\t\tAnnotationMirror am3 = findAnnotation(elementN1, \"A3\");", "-\t\tif (_reportFailingCases && null == am3) {", "-\t\t\treportError(\"Couldn't find annotation A3 on class Negative1\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tList<? extends Element> enclosedElements = elementN1.getEnclosedElements();", "-\t\tboolean foundM1 = false; // do we find an element of unresolved type?", "-\t\tfor (Element element : enclosedElements) {", "-\t\t\tString name = element.getSimpleName().toString();", "-\t\t\tif (\"m1\".equals(name)) {", "-\t\t\t\tfoundM1 = true;", "-\t\t\t\tTypeKind tk = element.asType().getKind();", "-\t\t\t\tif (tk != TypeKind.ERROR && tk != TypeKind.DECLARED) {", "-\t\t\t\t\treportError(\"Field Negative1.m1 has a type of unexpected kind \" + tk);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tAnnotationMirror am4 = findAnnotation(element, \"A4\");", "-\t\t\t\tif (_reportFailingCases && null == am4) {", "-\t\t\t\t\treportError(\"Couldn't find annotation A4 on field Negative1.m1\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"i1\".equals(name)) {", "-\t\t\t\tAnnotationMirror am5 = findAnnotation(element, \"A5\");", "-\t\t\t\tif (_reportFailingCases && null == am5) {", "-\t\t\t\t\treportError(\"Couldn't find annotation A5 on field Negative1.i1\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"m2\".equals(name)) {", "-\t\t\t\tAnnotationMirror am8 = findAnnotation(element, \"A8\");", "-\t\t\t\tif (_reportFailingCases && null == am8) {", "-\t\t\t\t\treportError(\"Couldn't find annotation A8 on field Negative1.m2\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"s1\".equals(name)) {", "-\t\t\t\tAnnotationMirror am = findAnnotation(element, \"Anno1\");", "-\t\t\t\tif (null == am) {", "-\t\t\t\t\treportError(\"Couldn't find annotation Anno on field Negative1.s1\");", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = am.getElementValues();", "-\t\t\t\tfor (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "-\t\t\t\t\tif (\"value\".equals(entry.getKey().getSimpleName().toString())) {", "-\t\t\t\t\t\tif (!\"spud\".equals(entry.getValue().getValue())) {", "-\t\t\t\t\t\t\treportError(\"Unexpected value for Anno1 on Negative1.s1: \" + entry.getValue().getValue());", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (_reportFailingCases && !foundM1) {", "-\t\t\treportError(\"Couldn't find field Negative1.m1, presumably because its type is missing\");", "-\t\t\treturn false;", "-\t\t}", "-\t\treturn true;", "+\t\t", "+\t\treturn checkModel(Collections.singletonList(element), NEGATIVE_1_MODEL, \"Negative1\");"]}], "num": 19740}
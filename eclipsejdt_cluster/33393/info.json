{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5486a2fa9d7243a32feac82cbd25a078", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0033bfb2f7ab357346aa29dc301fac59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a161d7f24784c6f26a3e04f2476eedb781db89c", "commitAfterChange": "5dd162eac2c331c7c9160a32097997e39ff399ea", "methodNumberBeforeChange": 1198, "methodNumberAfterChange": 1198, "signatureBeforeChange": " public void test1170()", "signatureAfterChange": " public void test1170()", "diff": ["-\t\t\t\"class A<E> {}\\n\" + ", "-\t\t\t\"class B<E> extends A<E> {}\\n\" + ", "-\t\t\"1. ERROR in example\\\\Container3.java (at line 4)\\n\" + ", "-\t\t\"\tclass A<E> {}\\n\" + ", "-\t\t\"\t      ^\\n\" + ", "-\t\t\"The type A is already defined\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in example\\\\Container3.java (at line 5)\\n\" + ", "-\t\t\"\tclass B<E> extends A<E> {}\\n\" + ", "-\t\t\"\t      ^\\n\" + ", "-\t\t\"The type B is already defined\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in example\\\\Container3.java (at line 14)\\n\" + ", "+\t\t\"1. ERROR in example\\\\Container3.java (at line 12)\\n\" + ", "-\t\t\"4. ERROR in example\\\\Container3.java (at line 15)\\n\" + ", "+\t\t\"2. ERROR in example\\\\Container3.java (at line 13)\\n\" + ", "-\t\t\"5. ERROR in example\\\\Container3.java (at line 17)\\n\" + ", "+\t\t\"3. ERROR in example\\\\Container3.java (at line 15)\\n\" + ", "-\t\t\"6. WARNING in example\\\\Container3.java (at line 18)\\n\" + ", "+\t\t\"4. WARNING in example\\\\Container3.java (at line 16)\\n\" + ", "-\t\t\"7. ERROR in example\\\\Container3.java (at line 18)\\n\" + ", "+\t\t\"5. ERROR in example\\\\Container3.java (at line 16)\\n\" + ", "-\t\t\"8. ERROR in example\\\\Container3.java (at line 26)\\n\" + ", "+\t\t\"6. ERROR in example\\\\Container3.java (at line 24)\\n\" + ", "-\t\t\"9. ERROR in example\\\\Container3.java (at line 27)\\n\" + ", "+\t\t\"7. ERROR in example\\\\Container3.java (at line 25)\\n\" + ", "-\t\t\"10. ERROR in example\\\\Container3.java (at line 29)\\n\" + ", "+\t\t\"8. ERROR in example\\\\Container3.java (at line 27)\\n\" + ", "-\t\t\"11. WARNING in example\\\\Container3.java (at line 30)\\n\" + ", "+\t\t\"9. WARNING in example\\\\Container3.java (at line 28)\\n\" + ", "-\t\t\"12. ERROR in example\\\\Container3.java (at line 30)\\n\" + ", "+\t\t\"10. ERROR in example\\\\Container3.java (at line 28)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1170657e9410a4d85b2e28a4b9dede67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "commitAfterChange": "e6d8789df9b4566a0124edc04d16cdf543582e67", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.discouragedInvocationAcceptCastableArgument\\\" value=\\\"disabled\\\"/>\\n\" + ", "-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.discouragedInvocationIncompatibleArgument\\\" value=\\\"warning\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b66d7bb915d997bf978cc77f6891c1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "14d447e9b3a680ded3744f07910de88768216ea3", "commitAfterChange": "689526016f6ab442680e718d2760fc44e79dd9b5", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.discouragedInvocationArgumentNotCastable\\\" value=\\\"warning\\\"/>\\n\" + ", "+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.discouragedInvocationIncompatibleArgument\\\" value=\\\"warning\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65c33ade6a61dbeee1952dbf1c735c98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "a331916366d31b2eac24fa72c43e85436f424bb2", "commitAfterChange": "92833c2313d3c570c2dffa40d03aa84d01695a1a", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": "  \tpublic void test150()", "signatureAfterChange": "  \tpublic void test150()", "diff": ["-\t\t\t\"----------\\n\"", "-\t\t\t\t+ \"1. WARNING in test\\\\X.java (at line 2)\\n\"", "-\t\t\t\t+ \"\timport test.copy.*;\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"The import test.copy is never used\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"2. ERROR in test\\\\X.java (at line 7)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#unknown() Invalid ref: non visible class (non existent method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"3. ERROR in test\\\\X.java (at line 8)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#vm_private() Invalid ref: non visible class (non visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"4. ERROR in test\\\\X.java (at line 9)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#vm_private(boolean) Invalid ref: non visible class (non existent method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"5. ERROR in test\\\\X.java (at line 10)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#vm_public() Invalid ref: non visible class (visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"6. ERROR in test\\\\X.java (at line 11)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#vm_public(long,long,long,int) Invalid ref: non visible class (visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"7. ERROR in test\\\\X.java (at line 12)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#unknown() Invalid ref: non visible class and non visible inner class (non existent method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"8. ERROR in test\\\\X.java (at line 13)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#vm_private() Invalid ref: non visible class and non visible inner class (non visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"9. ERROR in test\\\\X.java (at line 14)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#vm_private(boolean, String) Invalid ref: non visible class and non visible inner class (non applicable method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"10. ERROR in test\\\\X.java (at line 15)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#vm_public() Invalid ref: non visible class and non visible inner class (visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"11. ERROR in test\\\\X.java (at line 16)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#vm_public(Object, float) Invalid ref: non visible class and non visible inner class (non applicable visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"12. ERROR in test\\\\X.java (at line 17)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#unknown() Invalid ref: non visible class and visible inner class (non existent method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"13. ERROR in test\\\\X.java (at line 18)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#vm_private() Invalid ref: non visible class and visible inner class (non visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"14. ERROR in test\\\\X.java (at line 19)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#vm_private(boolean, String) Invalid ref: non visible class and visible inner class (non applicable method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"15. ERROR in test\\\\X.java (at line 20)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#vm_public() Invalid ref: non visible class and visible inner class (visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"16. ERROR in test\\\\X.java (at line 21)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#vm_public(Object, float) Invalid ref: non visible class and visible inner class (non applicable visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 7)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#unknown() Invalid ref: non visible class (non existent method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#vm_private() Invalid ref: non visible class (non visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 9)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#vm_private(boolean) Invalid ref: non visible class (non existent method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 10)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#vm_public() Invalid ref: non visible class (visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 11)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#vm_public(long,long,long,int) Invalid ref: non visible class (visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 12)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#unknown() Invalid ref: non visible class and non visible inner class (non existent method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 13)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#vm_private() Invalid ref: non visible class and non visible inner class (non visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in test\\\\X.java (at line 14)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#vm_private(boolean, String) Invalid ref: non visible class and non visible inner class (non applicable method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. ERROR in test\\\\X.java (at line 15)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#vm_public() Invalid ref: non visible class and non visible inner class (visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in test\\\\X.java (at line 16)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#vm_public(Object, float) Invalid ref: non visible class and non visible inner class (non applicable visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"11. ERROR in test\\\\X.java (at line 17)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#unknown() Invalid ref: non visible class and visible inner class (non existent method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. ERROR in test\\\\X.java (at line 18)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#vm_private() Invalid ref: non visible class and visible inner class (non visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#vm_private(boolean, String) Invalid ref: non visible class and visible inner class (non applicable method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. ERROR in test\\\\X.java (at line 20)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#vm_public() Invalid ref: non visible class and visible inner class (visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"15. ERROR in test\\\\X.java (at line 21)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#vm_public(Object, float) Invalid ref: non visible class and visible inner class (non applicable visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd9455b0f2bfeaddfc95486f373890b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "b4016c063ca85174cf00c10c6af46c1dcd82c530", "commitAfterChange": "3211eff761b273e34444be85ba8824de6905d84d", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-\t\t\"    -sourcepath <directories and zip/jar files separated by ;>\\n\" + ", "+\t\t\"    -sourcepath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0cd382c4e96bdc285a52be2cd2922a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["-\t\t\tassumeEquals(this.prefix+\"Wrong start position <\"+tagStart+\"> for \"+tagElement, '{', source[tagStart++]);", "+\t\t\tassumeEquals(prefix+\"Wrong start position <\"+tagStart+\"> for \"+tagElement, '{', source[tagStart++]);", "-\t\t\tassumeEquals(this.prefix+\"Misplaced tag name at <\"+tagStart+\">: \", tagName, text);", "+\t\t\tassumeEquals(prefix+\"Misplaced tag name at <\"+tagStart+\">: \", tagName, text);", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "-\t\t\t\t\tassumeTrue(this.prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "+\t\t\t\t\tassumeTrue(prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "-\t\t\t\t\tassumeEquals(this.prefix+\"Unexpected node type for tag element \"+tagElement, ASTNode.SIMPLE_NAME, fragment.getNodeType());", "+\t\t\t\t\tassumeEquals(prefix+\"Unexpected node type for tag element \"+tagElement, ASTNode.SIMPLE_NAME, fragment.getNodeType());", "-\t\t\t\t\tassumeTrue(this.prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "+\t\t\t\t\tassumeTrue(prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "-\t\t\t\t\t\t\tassumeTrue(this.prefix+\"Wrong length at <\"+previousFragment.getStartPosition()+\"> for text element \"+previousFragment, (source[tagStart] == '\\r' && source[tagStart+1] == '\\n' || source[tagStart] == '\\n'));", "+\t\t\t\t\t\t\tassumeTrue(prefix+\"Wrong length at <\"+previousFragment.getStartPosition()+\"> for text element \"+previousFragment, (source[tagStart] == '\\r' && source[tagStart+1] == '\\n' || source[tagStart] == '\\n'));", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "-\t\t\t\t\tassumeEquals(this.prefix+\"Tag element <\"+inlineTag+\"> has wrong start position\", tagStart, inlineTag.getStartPosition());", "+\t\t\t\t\tassumeEquals(prefix+\"Tag element <\"+inlineTag+\"> has wrong start position\", tagStart, inlineTag.getStartPosition());", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced # separator at <\"+start+\"> for member ref \"+memberRef, '#', source[start]);", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced # separator at <\"+start+\"> for member ref \"+memberRef, '#', source[start]);", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced member ref at <\"+start+\">: \", text, name.toString());", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced member ref at <\"+start+\">: \", text, name.toString());", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced # separator at <\"+start+\"> for method ref: \"+methodRef, '#', source[start]);", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced # separator at <\"+start+\"> for method ref: \"+methodRef, '#', source[start]);", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref name at <\"+start+\">: \", text, name.toString());", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref name at <\"+start+\">: \", text, name.toString());", "-//\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced ( at <\"+start+\"> for method ref: \"+methodRef, '(', source[start]);", "+//\t\t\t\t\tassumeEquals(prefix+\"Misplaced ( at <\"+start+\"> for method ref: \"+methodRef, '(', source[start]);", "-\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, type.toString());", "+\t\t\t\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, type.toString());", "-\t\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, elementType.toString());", "+\t\t\t\t\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, elementType.toString());", "-\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter name at <\"+start+\"> for method ref: \"+methodRef, text, name.toString());", "+\t\t\t\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref parameter name at <\"+start+\"> for method ref: \"+methodRef, text, name.toString());", "-\t\t\t\t\t\t\tassumeTrue(this.prefix+\"Misplaced parameter end at <\"+start+\"> for method ref: \"+methodRef, source[start] == ',' || source[start] == ')');", "+\t\t\t\t\t\t\tassumeTrue(prefix+\"Misplaced parameter end at <\"+start+\"> for method ref: \"+methodRef, source[start] == ',' || source[start] == ')');", "-\t\t\tassumeEquals(this.prefix+\"Wrong end character at <\"+tagStart+\"> for \"+tagElement, '}', source[tagStart++]);", "+\t\t\tassumeEquals(prefix+\"Wrong end character at <\"+tagStart+\"> for \"+tagElement, '}', source[tagStart++]);"]}], "num": 33393}
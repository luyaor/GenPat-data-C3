{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d58d2f2534b7104f7ddbd1cbe4043e3f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "381feaacc23cbf499e53209cbbce59c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "2ae41539e386d12d9e7c121e231730e370deda2f", "commitAfterChange": "05dd526dbb279df7b7e23a1d7ccb53d445943919", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void add(IResource element, boolean addJarsAndSourceFolders)", "signatureAfterChange": "\r \r public void add(IJavaProject project, boolean includesPrereqProjects) throws JavaModelException", "diff": ["- */\r", "-public void add(IResource element, boolean addJarsAndSourceFolders) {\r", "-\tsuper.add(element);\r", "+public void add(IJavaProject project, boolean includesPrereqProjects) throws JavaModelException {\r", "-\t// clear indexer cache\r", "-\tfLastCheckedResource = null;\r", "+\tthis.addEnclosingProjectOrJar(project.getProject().getFullPath());\r", "-\tif (addJarsAndSourceFolders && element instanceof IProject) {\r", "-\t\t// remember the paths of its classpath entries\r", "-\t\tIJavaModel javaModel = JavaModelManager.getJavaModel(element.getWorkspace());\r", "-\t\tIJavaProject javaProject = javaModel.getJavaProject(element.getName());\r", "-\t\ttry {\r", "-\t\t\t// add only external jars, internal jars (that are internal to the project)\r", "-\t\t\t// and source folders of the project\r", "-\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\tIWorkspaceRoot root = project.getUnderlyingResource().getWorkspace().getRoot();\r", "+\tIClasspathEntry[] entries = project.getResolvedClasspath(true);\r", "+\tIJavaModel model = project.getJavaModel();\r", "+\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\tIClasspathEntry entry = entries[i];\r", "+\t\tswitch (entry.getEntryKind()) {\r", "+\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\tswitch (entry.getEntryKind()) {\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\t\t\tif (element.getFullPath().isPrefixOf(path) // jar internal to project \r", "-\t\t\t\t\t\t\t\t|| element.getWorkspace().getRoot().findMember(path) == null) { // jar external to workspace\r", "-\t\t\t\t\t\t\tthis.add(path);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "-\t\t\t\t\t\tif (element.getFullPath().isPrefixOf(path)) { // source folder inside project\r", "-\t\t\t\t\t\t\tthis.add(path);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\tthis.add(path, true);\r", "+\t\t\t\tthis.addEnclosingProjectOrJar(path);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "+\t\t\t\tif (includesPrereqProjects) {\r", "+\t\t\t\t\tthis.add(model.getJavaProject(entry.getPath().lastSegment()), true);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "+\t\t\t\tpath = entry.getPath();\r", "+\t\t\t\tif (path.segmentCount() == 1) {\r", "+\t\t\t\t\t// project is source\r", "+\t\t\t\t\tthis.add(root.getProject(path.lastSegment()));\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// regular source folder\r", "+\t\t\t\t\tthis.add(root.getFolder(path));\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+}\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\tthis.add(element.getFullPath());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "604bf8aa1b98e92d58ff0a7a40f4a801", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/NameEnvironment.java", "commitBeforeChange": "6c9d3461652e1b0a1c076bd07fea25ea7241dc4b", "commitAfterChange": "fc3823ac5e20f18e24acb3b991589cbc8e132c53", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public static ClasspathLocation[] computeLocations(IJavaProject project, boolean isUsingSourceFolders, ObjectVector sourceFolders, LookupTable prereqOutputFolders) throws JavaModelException", "signatureAfterChange": "\r public static ClasspathLocation[] computeLocations(\r \tIWorkspaceRoot workspaceRoot,\r \tIJavaProject javaProject,\r \tString outputFolderLocation,\r \tArrayList sourceFolders,\r \tLookupTable prereqOutputFolders) throws JavaModelException", "diff": ["-\t*/\r", "-public static ClasspathLocation[] computeLocations(IJavaProject project, boolean isUsingSourceFolders, ObjectVector sourceFolders, LookupTable prereqOutputFolders) throws JavaModelException {\r", "+*/\r", "+public static ClasspathLocation[] computeLocations(\r", "+\tIWorkspaceRoot workspaceRoot,\r", "+\tIJavaProject javaProject,\r", "+\tString outputFolderLocation,\r", "+\tArrayList sourceFolders,\r", "+\tLookupTable prereqOutputFolders) throws JavaModelException {\r", "-\tIClasspathEntry[] classpathEntries = ((JavaProject)project).getExpandedClasspath(true);\r", "+\tIClasspathEntry[] classpathEntries = ((JavaProject) javaProject).getExpandedClasspath(true);\r", "-\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\r", "-\tIPath projectPath = project.getProject().getFullPath();\r", "-\tIResource outputFolder = workspaceRoot.findMember(project.getOutputLocation());\r", "-\t\r", "-\t\t\t\t\tif (!(resource instanceof IContainer)) continue nextEntry;\r", "-\t\t\t\t\tif (outputFolder == null || !outputFolder.exists() || !(outputFolder instanceof IContainer)){\r", "-\t\t\t\t\t\tcontinue nextEntry;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (isUsingSourceFolders){ // sources + binaries mode\r", "-\t\t\t\t\t\tif (sourceFolders != null) sourceFolders.add(resource);\r", "-\t\t\t\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forSourceFolder(\r", "-\t\t\t\t\t\t\tresource.getLocation().toString(),\r", "-\t\t\t\t\t\t\toutputFolder.getLocation().toString());\r", "-\t\t\t\t\t} else { // only consider binaries(once)\r", "-\t\t\t\t\t\tif (firstSourceFolder){\r", "-\t\t\t\t\t\t\tfirstSourceFolder = false;\r", "-\t\t\t\t\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forRequiredProject(outputFolder.getLocation().toString());\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\tif (outputFolderLocation == null || !(resource instanceof IContainer)) continue nextEntry;\r", "+\t\t\t\t\tif (sourceFolders != null) { // normal builder mode\r", "+\t\t\t\t\t\tsourceFolders.add(resource);\r", "+\t\t\t\t\t\tclasspathLocations[cpCount++] =\r", "+\t\t\t\t\t\t\tClasspathLocation.forSourceFolder(resource.getLocation().toString(), outputFolderLocation);\r", "+\t\t\t\t\t} else if (firstSourceFolder) { // add the output folder only once\r", "+\t\t\t\t\t\tfirstSourceFolder = false;\r", "+\t\t\t\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forRequiredProject(outputFolderLocation);\r", "-\t\t\t\t\tif (prereqOutputFolders != null) prereqOutputFolders.put(prereqProject, prereqOutputFolder);\r", "+\t\t\t\t\tif (prereqOutputFolders != null)\r", "+\t\t\t\t\t\tprereqOutputFolders.put(prereqProject, prereqOutputFolder);\r", "-\tif (cpCount < max) {\r", "+\tif (cpCount < max)\r", "-\t}\r"]}], "num": 70720}
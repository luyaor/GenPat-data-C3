{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3aeecd81dedc2d85de07a3346ef6a10c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02edce0b4682c2df399d7bdfa07b2949", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "04b81cf15831bfe4330d81980faeafc08a8dde64", "commitAfterChange": "2648bf4db83bb49e8d037c44e11a0a6a32668be2", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["+\t\t\t\t", "+\t\t\t\t// all classpaths in the workspace are going to be resolved, ensure that containers are initialized in one batch", "+\t\t\t\tmanager.batchContainerInitializations = true; ", "+\t\t\t\t", "+\t\t\t\t// avoid leaking source attachment properties (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=183413)", "+\t\t\t\tIJavaProject[] projects = manager.getJavaModel().getJavaProjects();", "+\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry[] classpath = ((JavaProject) projects[i]).getResolvedClasspath();", "+\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "+\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\t\tif (entry.getSourceAttachmentPath() != null)", "+\t\t\t\t\t\t\t\tUtil.setSourceAttachmentProperty(entry.getPath(), null);", "+\t\t\t\t\t\t\t// else source might have been attached by IPackageFragmentRoot#attachSource(...), we keep it", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// initialize delta state", "+\t\t\t\tmanager.deltaState.rootsAreStale = true; // in case it was already initialized before we cleaned up the source attachment proprties", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab139e0761affcdc7402f54d89c5bfac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "db331d5badcb0b35069c87387ccad89f9c226a52", "commitAfterChange": "30b862416cba759ca39b029e0f535018291e11dc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject)", "signatureAfterChange": " private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject, char[][] focusQualifiedName)", "diff": ["-private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject) {", "+private static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject, char[][] focusQualifiedName) {", "-\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && entry.getPath().equals(focusPath))", "+\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && entry.getPath().equals(focusPath)) {", "+\t\t\t\tif (focusQualifiedName != null) { // builder state is usable, hence use it to try to reduce project which can see the focus...", "+\t\t\t\t\tState projectState = (State) JavaModelManager.getJavaModelManager().getLastBuiltState(javaProject.getProject(), null);", "+\t\t\t\t\tif (projectState != null) {", "+\t\t\t\t\t\tObject[] values = projectState.getReferences().valueTable;", "+\t\t\t\t\t\tint vLength = values.length;", "+\t\t\t\t\t\tfor (int j=0; j<vLength; j++)  {", "+\t\t\t\t\t\t\tif (values[j] == null) continue;", "+\t\t\t\t\t\t\tReferenceCollection references = (ReferenceCollection) values[j];", "+\t\t\t\t\t\t\tif (references.includes(focusQualifiedName)) {", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1c4d0a296e3c55fe39d0ea74f189336", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "ce8324734270d75f28415b04e22d05b30bc7f9dd", "commitAfterChange": "49935b3a9df3ae237ca51326c2d09e0b1092beca", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "signatureAfterChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "diff": ["-\t\t\t\tIClasspathEntry[] prereqClasspathEntries = prereqJavaProject.getExpandedClasspath(true, false);", "+\t\t\t\tIClasspathEntry[] prereqClasspathEntries = prereqJavaProject.getRawClasspath();", "-\t\t\t\tfor (int j = 0, m = prereqClasspathEntries.length; j < m; j++) {", "-\t\t\t\t\tClasspathEntry e = (ClasspathEntry) prereqClasspathEntries[j];", "-\t\t\t\t\tObject t = JavaModel.getTarget(root, e.getPath(), true);", "-\t\t\t\t\tif (t instanceof IContainer && e.getEntryKind() == IClasspathEntry.CPE_SOURCE) {", "-\t\t\t\t\t\tIPath prereqOutputPath = e.getOutputLocation() != null ", "-\t\t\t\t\t\t\t? e.getOutputLocation() ", "+\t\t\t\tnextPrereqEntry: for (int j = 0, m = prereqClasspathEntries.length; j < m; j++) {", "+\t\t\t\t\tIClasspathEntry prereqEntry = (IClasspathEntry) prereqClasspathEntries[j];", "+\t\t\t\t\tif (prereqEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {", "+\t\t\t\t\t\tObject prereqTarget = JavaModel.getTarget(root, prereqEntry.getPath(), true);", "+\t\t\t\t\t\tif (!(prereqTarget instanceof IContainer)) continue nextPrereqEntry;", "+\t\t\t\t\t\tIPath prereqOutputPath = prereqEntry.getOutputLocation() != null ", "+\t\t\t\t\t\t\t? prereqEntry.getOutputLocation() "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1b10cbd9ab113cbfe0fbb8870e1a044", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "683a87f709a5d2fc4ad3b40e8e5ef4a6e6e54e22", "commitAfterChange": "4f2a7dc10a6a834336cb60a52a1e4b8b843f081b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static boolean canSeeFocus(IJavaElement focus, IPath projectOrJarPath)", "signatureAfterChange": " public static boolean canSeeFocus(IJavaElement focus, IPath projectOrJarPath)", "diff": ["-\t\t\t\t// consider that a jar can see a project only if it is referenced by this project", "-\t\t\t\tIClasspathEntry[] entries = ((JavaProject)focusProject).getExpandedClasspath(true);", "-\t\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "-\t\t\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) ", "-\t\t\t\t\t\t&& entry.getPath().equals(projectOrJarPath)) {", "+\t\t\t\t// consider that a jar can see a project only if it is on the classpath of a project that can see the focus project", "+\t\t\t\tIJavaProject[] allProjects = model.getJavaProjects();", "+\t\t\t\tfor (int i = 0, length = allProjects.length; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry[] entries = allProjects[i].getResolvedClasspath(true);", "+\t\t\t\t\tfor (int j = 0, length2 = entries.length; j < length2; j++) {", "+\t\t\t\t\t\tIClasspathEntry entry = entries[j];", "+\t\t\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) ", "+\t\t\t\t\t\t\t\t&& entry.getPath().equals(projectOrJarPath)", "+\t\t\t\t\t\t\t\t&& canSeeFocus(focus, allProjects[i].getPath())) {", "+\t\t\t\t\t\t}"]}], "num": 10332}
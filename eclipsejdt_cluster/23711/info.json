{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd76660e6aec8fcace1b809527de264b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015c2a0764a615f317fe1aa767094eb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 250, "methodNumberAfterChange": 250, "signatureBeforeChange": " public void test101()", "signatureAfterChange": " public void test101()", "diff": ["-\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 11)\\n\" +", "-\t\t\"\tInteger getX(List<Integer> l) {\\n\" +", "-\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 14)\\n\" +", "-\t\t\"\tString getX(List<Integer> l) {\\n\" +", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tString getX(List<String> l) {\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"\tString getX(List<Integer> l) {\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e730f4592ab6dac25522cbc156f565b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void test011b()", "signatureAfterChange": " \tpublic void test011b()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in Test1.java (at line 4)\\n\" +", "-\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" +", "-\t\t\t\"\t                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation pickOne(Comparable) of the generic method pickOne(T) of type Test1<Integer,Integer>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in Test1.java (at line 4)\\n\" +", "-\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" +", "-\t\t\t\"\t                                                                  ^^^^^^^^^^\\n\" +", "-\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in Test1.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method pickOne(T) has the same erasure pickOne(Comparable<T>) as another method in type Test1<AA,BB>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in Test1.java (at line 3)\\n\" + ", "+\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method pickOne(Comparable<T>) has the same erasure pickOne(Comparable<T>) as another method in type Test1<AA,BB>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in Test1.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" + ", "+\t\t\t\"\t                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation pickOne(Comparable) of the generic method pickOne(T) of type Test1<Integer,Integer>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in Test1.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" + ", "+\t\t\t\"\t                                                                  ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+/* javac 7", "+X.java:3: name clash: <T#1>pickOne(Comparable<T#1>) and <T#2>pickOne(T#2) have the same erasure", "+        <T> T pickOne(Comparable<T> value) throws ExTwo { return null;}", "+              ^", "+  where T#1,T#2 are type-variables:", "+    T#1 extends Object declared in method <T#1>pickOne(Comparable<T#1>)", "+    T#2 extends Comparable<T#2> declared in method <T#2>pickOne(T#2)", "+X.java:4: warning: [unchecked] unchecked method invocation: method pickOne in class Test1 is applied to given types", "+        void pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \"test\"); }", "+                                                                        ^", "+  required: T", "+  found: Comparable", "+  where T is a type-variable:", "+    T extends Comparable<T> declared in method <T>pickOne(T)", "+1 error", "+1 warning", "+ */"]}], "num": 23711}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4847fe9e0ebbec9e97ebb9bcb74251d1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15ffb2ac1787084430e6b764d9b581fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "067d4c602423adaae99e87247cc8cdbc112437d7", "commitAfterChange": "57396a418c2c0c112a60b670e887da389156bc9b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["+\t\tfinal CompilerOptions compilerOptions = this.scope.compilerOptions();", "-\t\t\tif (this.scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "+\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "-\t\t\t\t", "+\t\t", "-\t\tsuper.resolveStatements(); ", "+\t\tsuper.resolveStatements();", "+\t\t", "+\t\t// TagBits.OverridingMethodWithSupercall is set during the resolveStatements() call", "+\t\tif (compilerOptions.getSeverity(CompilerOptions.OverridingMethodWithoutSuperInvocation) != ProblemSeverities.Ignore) {", "+\t\t\tif (this.binding != null) {", "+        \t\tint bindingModifiers = this.binding.modifiers;", "+        \t\tif ((bindingModifiers & (ExtraCompilerModifiers.AccOverriding|ExtraCompilerModifiers.AccImplementing)) == ExtraCompilerModifiers.AccOverriding", "+        \t\t\t\t&& (this.bits & ASTNode.OverridingMethodWithSupercall) == 0) {", "+        \t\t\tthis.scope.problemReporter().overridesMethodWithoutSuperInvocation(this.binding);", "+        \t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16dcfd5a4a4d26f7f3d4099e6ef36861", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "067d4c602423adaae99e87247cc8cdbc112437d7", "commitAfterChange": "57396a418c2c0c112a60b670e887da389156bc9b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "-\t\t\t\t\t&& scope.compilerOptions().getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore) {", "+\t\t\t\t\t&& compilerOptions.getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore) {", "-\t\t\t&& scope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_5 ", "+\t\t\t&& compilerOptions.complianceLevel >= ClassFileConstants.JDK1_5 ", "+\tif (receiver.isSuper() && compilerOptions.getSeverity(CompilerOptions.OverridingMethodWithoutSuperInvocation) != ProblemSeverities.Ignore) {", "+\t\tfinal ReferenceContext referenceContext = scope.methodScope().referenceContext;", "+\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\tfinal AbstractMethodDeclaration abstractMethodDeclaration = (AbstractMethodDeclaration) referenceContext;", "+\t\t\tMethodBinding enclosingMethodBinding = abstractMethodDeclaration.binding;", "+\t\t\tif (enclosingMethodBinding.isOverriding()", "+\t\t\t\t\t&& CharOperation.equals(this.binding.selector, enclosingMethodBinding.selector)", "+\t\t\t\t\t&& this.binding.areParametersEqual(enclosingMethodBinding)) {", "+\t\t\t\tabstractMethodDeclaration.bits |= ASTNode.OverridingMethodWithSupercall;", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 36662}
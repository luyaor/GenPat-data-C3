{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96f659a7075e74556df186a1267ae163", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43d51fec51af13ede2308c0312f4fc0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void test040()", "signatureAfterChange": " public void test040()", "diff": ["-\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tclass Y extends Homonym {};\t\\n\" + ", "+\t\t\"\t                ^^^^^^^\\n\" + ", "+\t\t\"The type X.Homonym cannot be the superclass of Y; a superclass must be a class\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"\tclass Y extends Homonym {};\t\\n\" + ", "+\t\t\"\t                ^^^^^^^\\n\" + ", "+\t\t\"The type X.Homonym cannot be the superclass of Y; a superclass must be a class\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6651106730f61d2e582ab2a6b9058fb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7b6db9de192fc1976c0d12542fea77102668b433", "commitAfterChange": "fe94bdafb4bfe9680e0611bb6d3516015883724d", "methodNumberBeforeChange": 466, "methodNumberAfterChange": 466, "signatureBeforeChange": " \tpublic void test464()", "signatureAfterChange": " \tpublic void test464()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\treturn sets;\\r\\n\" + ", "-\t\t\t\"\t       ^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type Set[] needs unchecked conversion to conform to Set<String>[]\\n\" + ", "+\t\t\t\"\tList<Integer>[] nums = new List[] {Collections.singletonList(\\\"Uh oh\\\")};\\r\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List[] needs unchecked conversion to conform to List<Integer>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d98a61c86975f338c5181fc564edb1b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "867dd152ebfa0e20933236e2a9ac1203eb8cefb2", "commitAfterChange": "e760e456d0e96ba9bce504014e582b9dbdf7e542", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test_nonnull_list_elements_02()", "signatureAfterChange": " \tpublic void test_nonnull_list_elements_02()", "diff": ["+\t\t\t\t  \"    void bar2(java.util.List<java.lang.@Dummy @Nullable Object> l2) {\\n\" +", "+\t\t\t\t  \"        System.out.print(l2.get(1).toString()); // problem: retrieved element can be null\\n\" +", "+\t\t\t\t  \"        l2.add(null);\\n\" +", "+\t\t\t\t  \"    }\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tSystem.out.print(l2.get(1).toString()); // problem: retrieved element can be null\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^^\\n\" + ", "+\t\t\t\"Potential null pointer access: The method get(int) may return null\\n\" + "]}], "num": 70596}
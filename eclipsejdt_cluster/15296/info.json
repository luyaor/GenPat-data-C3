{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c87bfb32b187efe072fe00882acdb297", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e09f329978ecc8452421229dcf500bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "a094ff45a998c96b23832e90fdde401121899a47", "commitAfterChange": "7b6db9de192fc1976c0d12542fea77102668b433", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "signatureAfterChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "diff": ["-\t\t\tif (argumentType.isRawType() && (parameterType.isBoundParameterizedType() || parameterType.isGenericType())) {", "+\t\t\tif (argumentType.needsUncheckedConversion(parameterType)) {", "+//\t\t\tif (argumentType.isRawType() && (parameterType.isBoundParameterizedType() || parameterType.isGenericType())) {", "-//\t\tif ((argumentType.tagBits & TagBits.HasDirectWildcard) != 0) {", "-//\t\t\tscope.problemReporter().unsafeTypeConversion(argument, argumentType, parameterType);", "-//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5b1b33bd819640dc58b432c0540b572", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "signatureAfterChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "diff": ["-\t\tif (argumentType != parameterType && argumentType.isRawType())", "-\t        if (parameterType.isBoundParameterizedType() || parameterType.isGenericType())", "-\t\t\t\tscope.problemReporter().unsafeRawConversion(argument, argumentType, parameterType);", "+\t\tif (argumentType != parameterType) {", "+\t\t\tif (argumentType.isRawType() && (parameterType.isBoundParameterizedType() || parameterType.isGenericType())) {", "+\t\t\t\tscope.problemReporter().unsafeTypeConversion(argument, argumentType, parameterType);", "+\t\t\t}", "+\t\t}", "+//\t\tif ((argumentType.tagBits & TagBits.HasDirectWildcard) != 0) {", "+//\t\t\tscope.problemReporter().unsafeTypeConversion(argument, argumentType, parameterType);", "+//\t\t}"]}], "num": 15296}
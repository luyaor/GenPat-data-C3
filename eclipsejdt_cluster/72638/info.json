{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "762763f8ca8a93dcc77b084b19d51e3b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243b71bbd70cc359163be5cf273a99fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "f8b4a09010dbba905cde5c02b5290761440c6661", "commitAfterChange": "b2101e7533ccf9943251a22440ba336cef61fe8d", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "\r \t\r \tprivate void propagateErrors(CompilationUnit unit, IProblem[] problems, int problemLength)", "signatureAfterChange": "\r \t\r \tprivate void propagateErrors(CompilationUnit unit, IProblem[] problems, int problemLength)", "diff": ["-\t\tfor (int n = 0; n < problemLength; n++) {\r", "-\t\t\tint position = problems[n].getSourceStart();\r", "-\t\t\t\t//check the package declaration\r", "-\t\t\tPackageDeclaration packageDeclaration = unit.getPackage();\r", "-\t\t\tif (packageDeclaration != null && checkAndTagAsMalformed(packageDeclaration, position)) {\r", "-\t\t\t\treturn;\r", "-\t\t\t}\r", "-\t\t\tList imports = unit.imports();\r", "-\t\t\tfor (int i = 0, length = imports.size(); i < length; i++) {\r", "-\t\t\t\tif (checkAndTagAsMalformed((ASTNode) imports.get(i), position)) {\r", "-\t\t\t\t\treturn;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tfor (int i = 0, max = unit.types().size(); i < max; i++) {\r", "-\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) unit.types().get(0);\r", "-\t\t\t\tfor (int j = 0, max2 = typeDeclaration.bodyDeclarations().size();\r", "-\t\t\t\t\tj < max2;\r", "-\t\t\t\t\tj++) {\r", "-\t\t\t\t\tif (checkAndTagAsMalformed((ASTNode) typeDeclaration.bodyDeclarations().get(j), position)) {\r", "-\t\t\t\t\t\treturn;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tif (checkAndTagAsMalformed(typeDeclaration, position)) {\r", "-\t\t\t\t\treturn;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t// resize the problem array to the proper size\r", "+\t\tIProblem[] resizeProblems = null;\r", "+\t\tif (problems.length == problemLength) {\r", "+\t\t\tresizeProblems = problems;\r", "+\t\t} else {\r", "+\t\t\tSystem.arraycopy(problems, 0, (resizeProblems = new IProblem[problemLength]), 0, problemLength);\r", "-\t\t// if we get there, then we cannot do better than tag the compilation unit as being malformed\r", "-\t\tunit.setFlags(ASTNode.MALFORMED);\r", "+\t\tASTErrorPropagator errorPropagator = new ASTErrorPropagator(resizeProblems);\r", "+\t\tunit.accept(errorPropagator);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a225662b793ccb25fef2e5b24d44d45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "42c41aa4b22cf23b608272c59dfd7ac53eae5c74", "commitAfterChange": "40e03c0f2cb6d68da836ee023d4bc741c1ef6388", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \t\r \tprotected boolean mustQualifyType(\r \t\tchar[] packageName,\r \t\tchar[] typeName)", "signatureAfterChange": "\r \t\r \tprotected boolean mustQualifyType(\r \t\tchar[] packageName,\r \t\tchar[] typeName)", "diff": ["-\r", "-\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "-\r", "-\t\t\tif (imports[i].onDemand) {\r", "-\t\t\t\tif (CharOperation.equals(imports[i].compoundName, compoundPackageName)) {\r", "-\t\t\t\t\tfor (int j = 0; j < imports.length; j++) {\r", "-\t\t\t\t\t\tif(i != j){\r", "-\t\t\t\t\t\t\tif(imports[j].onDemand) {\r", "-\t\t\t\t\t\t\t\tif(nameEnvironment.findType(typeName, imports[j].compoundName) != null){\r", "-\t\t\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\tif(CharOperation.equals(CharOperation.lastSegment(imports[j].readableName(), '.'), typeName)) {\r", "-\t\t\t\t\t\t\t\t\treturn true;\t\r", "+\t\tif (imports != null){\r", "+\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "+\t\t\t\tif (imports[i].onDemand) {\r", "+\t\t\t\t\tif (CharOperation.equals(imports[i].compoundName, compoundPackageName)) {\r", "+\t\t\t\t\t\tfor (int j = 0; j < imports.length; j++) {\r", "+\t\t\t\t\t\t\tif(i != j){\r", "+\t\t\t\t\t\t\t\tif(imports[j].onDemand) {\r", "+\t\t\t\t\t\t\t\t\tif(nameEnvironment.findType(typeName, imports[j].compoundName) != null){\r", "+\t\t\t\t\t\t\t\t\t\treturn true;\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tif(CharOperation.equals(CharOperation.lastSegment(imports[j].readableName(), '.'), typeName)) {\r", "+\t\t\t\t\t\t\t\t\t\treturn true;\t\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn false; // how do you match p1.p2.A.* ?\r", "-\t\t\t\t\treturn false; // how do you match p1.p2.A.* ?\r", "-\t\t\t\t}\r", "-\r", "-\t\t\t} else\r", "-\r", "-\t\t\t\tif (CharOperation.equals(imports[i].readableName(), readableTypeName)) {\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t\t}\r", "+\t\r", "+\t\t\t\t} else\r", "+\t\r", "+\t\t\t\t\tif (CharOperation.equals(imports[i].readableName(), readableTypeName)) {\r", "+\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t}\r", "+\t\t\t}\r"]}], "num": 72638}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae9561b26fb8f1fb974830412d175017", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6988cc34e1746ef66386ec62d4d349ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope)", "signatureAfterChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope)", "diff": ["-\t\treturn this.singleAbstractMethod = new ParameterizedMethodBinding(parameterizedType, theAbstractMethod);", "+\t\tMethodBinding [] choices = parameterizedType.getMethods(theAbstractMethod.selector);", "+\t\tfor (int i = 0, length = choices.length; i < length; i++) {", "+\t\t\tMethodBinding method = choices[i];", "+\t\t\tif (!method.isAbstract() || method.redeclaresPublicObjectMethod(scope)) continue; // (re)skip statics, defaults, public object methods ...", "+\t\t\tthis.singleAbstractMethod = method;", "+\t\t\tbreak;", "+\t\t}", "+\t\treturn this.singleAbstractMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2a53968a485668add7c82886da1eb12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void compile(SourceFile[] units, String[] initialTypeNames, String[] additionalFilenames)", "signatureAfterChange": "  void compile(SourceFile[] units, SourceFile[] additionalUnits)", "diff": ["-void compile(SourceFile[] units, String[] initialTypeNames, String[] additionalFilenames) {", "+void compile(SourceFile[] units, SourceFile[] additionalUnits) {", "-\tif (!problemTypeLocations.isEmpty()) {", "-\t\tint toAdd = problemTypeLocations.size();", "-\t\tint length = additionalFilenames == null ? 0 : additionalFilenames.length;", "+\tif (!problemSourceFiles.isEmpty()) {", "+\t\tint toAdd = problemSourceFiles.size();", "+\t\tint length = additionalUnits == null ? 0 : additionalUnits.length;", "-\t\t\tadditionalFilenames = new String[toAdd];", "+\t\t\tadditionalUnits = new SourceFile[toAdd];", "-\t\t\tSystem.arraycopy(additionalFilenames, 0, additionalFilenames = new String[length + toAdd], 0, length);", "+\t\t\tSystem.arraycopy(additionalUnits, 0, additionalUnits = new SourceFile[length + toAdd], 0, length);", "-\t\t\tadditionalFilenames[length + i] = (String) problemTypeLocations.get(i);", "+\t\t\tadditionalUnits[length + i] = (SourceFile) problemSourceFiles.get(i);", "-\tnameEnvironment.setNames(initialTypeNames, additionalFilenames);", "+\tString[] initialTypeNames = new String[units.length];", "+\tfor (int i = 0, l = units.length; i < l; i++)", "+\t\tinitialTypeNames[i] = units[i].initialTypeName;", "+\tnameEnvironment.setNames(initialTypeNames, additionalUnits);"]}], "num": 52455}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75b78fe2bc87e170dbab15140ea8a066", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d3f763419688e3e936bb1fe393c5db1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "commitAfterChange": "6422cf28e195cf583d84cd9a0d044425ae0a797f", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " protected void consumeArrayCreationExpressionWithoutInitializer()", "signatureAfterChange": " protected void consumeArrayCreationExpressionWithoutInitializer()", "diff": ["-\tArrayAllocationExpression aae = new ArrayAllocationExpression();", "-\taae.type = getTypeReference(0);", "+\tArrayAllocationExpression arrayAllocation = new ArrayAllocationExpression();", "+\tarrayAllocation.type = getTypeReference(0);", "+\tarrayAllocation.type.bits |= ASTNode.IgnoreRawTypeCheck; // no need to worry about raw type usage\t", "-\t\taae.dimensions = new Expression[length],", "+\t\tarrayAllocation.dimensions = new Expression[length],", "-\taae.sourceStart = this.intStack[this.intPtr--];", "-\tif (aae.initializer == null) {", "-\t\taae.sourceEnd = this.endPosition;", "+\tarrayAllocation.sourceStart = this.intStack[this.intPtr--];", "+\tif (arrayAllocation.initializer == null) {", "+\t\tarrayAllocation.sourceEnd = this.endPosition;", "-\t\taae.sourceEnd = aae.initializer.sourceEnd ;", "+\t\tarrayAllocation.sourceEnd = arrayAllocation.initializer.sourceEnd ;", "-\tpushOnExpressionStack(aae);", "+\tpushOnExpressionStack(arrayAllocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b6aed7cea24e556682105f9408567dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/OptionTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test07() throws CoreException", "signatureAfterChange": " \tpublic void test07() throws CoreException", "diff": ["- */", "-public void test07() throws CoreException {", "-\ttry {", "-\t\tJavaProject projectA = (JavaProject)", "-\t\t\tthis.createJavaProject(", "-\t\t\t\t\"A\", ", "-\t\t\t\tnew String[] {}, // source folders", "-\t\t\t\tnew String[] {}, // lib folders", "-\t\t\t\tnew String[] {}, // projects", "-\t\t\t\t\"\");", "-\t\tPreferences preferences = projectA.getPreferences();", "-\t\tpreferences.addPropertyChangeListener(new TestPropertyListener());", "-\t\tHashtable options = new Hashtable();", "-\t\toptions.put(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE, JavaCore.ENABLED);", "-\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, \"10.0\");", "-\t\tprojectA.setOptions(options);", "-", "-\t\t// check project A custom options\t\t", "-\t\tassertEquals(\"projA:unexpected custom value for deprecation option\", JavaCore.ENABLED, projectA.getOptions(false).get(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE));", "-\t\tassertEquals(\"projA:unexpected custom value for compliance option\", \"10.0\", projectA.getOptions(false).get(JavaCore.COMPILER_COMPLIANCE));", "-\t\tassertEquals(\"projA:unexpected inherited value1 for hidden-catch option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK));", "-\t\tassertTrue(\"projA:preferences should not be reset\", preferences == projectA.getPreferences());", "-\t\tassertTrue(\"projA:preferences property listener has been lost\", eventCount == 2);", "-\t\t// change custom options to have one less", "-\t\toptions.clear();", "-\t\toptions.put(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE, JavaCore.ENABLED);", "-\t\tprojectA.setOptions(options);", "-\t\tassertEquals(\"projA:unexpected custom value for deprecation option\", JavaCore.ENABLED, projectA.getOptions(false).get(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE));", "-\t\tassertEquals(\"projA:unexpected custom value for compliance option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_COMPLIANCE));", "-\t\tassertEquals(\"projA:unexpected inherited value1 for hidden-catch option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK));", "-\t\tassertTrue(\"projA:preferences should not be reset\", preferences == projectA.getPreferences());", "-\t\tassertTrue(\"projA:preferences property listener has been lost\", eventCount == 3);", "-\t} finally {", "-\t\tthis.deleteProject(\"A\");", "-}", "+\t */", "+\tpublic void test07() throws CoreException {", "+\t\ttry {", "+\t\t\tthis.eventCount = 0;", "+\t\t\tJavaProject projectA = (JavaProject)", "+\t\t\t\tthis.createJavaProject(", "+\t\t\t\t\t\"A\", ", "+\t\t\t\t\tnew String[] {}, // source folders", "+\t\t\t\t\tnew String[] {}, // lib folders", "+\t\t\t\t\tnew String[] {}, // projects", "+\t\t\t\t\t\"\");", "+\t//\t\tPreferences preferences = projectA.getPreferences();", "+\t//\t\tpreferences.addPropertyChangeListener(new TestPropertyListener());", "+\t\t\tIEclipsePreferences eclipsePreferences = projectA.getEclipsePreferences();", "+\t\t\tTestPropertyListener listener = new TestPropertyListener();", "+\t\t\teclipsePreferences.addPreferenceChangeListener(listener);", "+\t\t", "+\t\t\tHashtable options = new Hashtable();", "+\t\t\toptions.put(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE, JavaCore.ENABLED);", "+\t\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, \"10.0\");", "+\t\t\tprojectA.setOptions(options);", "+\t", "+\t\t\t// check project A custom options\t\t", "+\t\t\tassertEquals(\"projA:unexpected custom value for deprecation option\", JavaCore.ENABLED, projectA.getOptions(false).get(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE));", "+\t\t\tassertEquals(\"projA:unexpected custom value for compliance option\", \"10.0\", projectA.getOptions(false).get(JavaCore.COMPILER_COMPLIANCE));", "+\t\t\tassertEquals(\"projA:unexpected inherited value1 for hidden-catch option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK));", "+\t//\t\tassertTrue(\"projA:preferences should not be reset\", preferences == projectA.getPreferences());", "+\t\t\tassertTrue(\"projA:preferences should not be reset\", eclipsePreferences == projectA.getEclipsePreferences());", "+\t\t\tassertTrue(\"projA:preferences property listener has been lost\", eventCount == 2);", "+\t\t", "+\t\t\t// change custom options to have one less", "+\t\t\toptions.clear();", "+\t\t\toptions.put(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE, JavaCore.ENABLED);", "+\t\t\tprojectA.setOptions(options);", "+\t\t\tassertEquals(\"projA:unexpected custom value for deprecation option\", JavaCore.ENABLED, projectA.getOptions(false).get(JavaCore.COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE));", "+\t\t\tassertEquals(\"projA:unexpected custom value for compliance option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_COMPLIANCE));", "+\t\t\tassertEquals(\"projA:unexpected inherited value1 for hidden-catch option\", null, projectA.getOptions(false).get(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK));", "+\t//\t\tassertTrue(\"projA:preferences should not be reset\", preferences == projectA.getPreferences());", "+\t\t\tassertTrue(\"projA:preferences should not be reset\", eclipsePreferences == projectA.getEclipsePreferences());", "+\t\t\tassertTrue(\"projA:preferences property listener has been lost\", eventCount == 3);", "+\t\t} finally {", "+\t\t\tthis.deleteProject(\"A\");", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7c816b7b6ba0b6093031ffe173c55a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "commitAfterChange": "6422cf28e195cf583d84cd9a0d044425ae0a797f", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " protected void consumeArrayCreationExpressionWithInitializer()", "signatureAfterChange": " protected void consumeArrayCreationExpressionWithInitializer()", "diff": ["-\tArrayAllocationExpression aae = new ArrayAllocationExpression();", "+\tArrayAllocationExpression arrayAllocation = new ArrayAllocationExpression();", "-\taae.initializer = (ArrayInitializer) this.expressionStack[this.expressionPtr--];", "+\tarrayAllocation.initializer = (ArrayInitializer) this.expressionStack[this.expressionPtr--];", "-\taae.type = getTypeReference(0);", "+\tarrayAllocation.type = getTypeReference(0);", "+\tarrayAllocation.type.bits |= ASTNode.IgnoreRawTypeCheck; // no need to worry about raw type usage", "-\t\taae.dimensions = new Expression[length],", "+\t\tarrayAllocation.dimensions = new Expression[length],", "-\taae.sourceStart = this.intStack[this.intPtr--];", "-\tif (aae.initializer == null) {", "-\t\taae.sourceEnd = this.endPosition;", "+\tarrayAllocation.sourceStart = this.intStack[this.intPtr--];", "+\tif (arrayAllocation.initializer == null) {", "+\t\tarrayAllocation.sourceEnd = this.endPosition;", "-\t\taae.sourceEnd = aae.initializer.sourceEnd ;", "+\t\tarrayAllocation.sourceEnd = arrayAllocation.initializer.sourceEnd ;", "-\tpushOnExpressionStack(aae);", "+\tpushOnExpressionStack(arrayAllocation);"]}], "num": 29575}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfd6526eec5565361280442a6b5bcffc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c625f043d386997b1b24c7ba64272e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r private void findFields(\r \tchar[] fieldName,\r \tReferenceBinding receiverType,\r \tScope scope,\r \tObjectVector fieldsFound,\r \tboolean onlyStaticFields)", "signatureAfterChange": "\r \tprivate void findFields(\r \t\tchar[] fieldName,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector fieldsFound,\r \t\tObjectVector localsFound,\r \t\tboolean onlyStaticFields,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "diff": ["-}\r", "-private void findFields(\r", "-\tchar[] fieldName,\r", "-\tReferenceBinding receiverType,\r", "-\tScope scope,\r", "-\tObjectVector fieldsFound,\r", "-\tboolean onlyStaticFields) {\r", "-\r", "-\tif (fieldName == null) return;\r", "-\r", "-\tReferenceBinding currentType = receiverType;\r", "-\tReferenceBinding[][] interfacesToVisit = null;\r", "-\tint lastPosition = -1;\r", "-\tdo {\r", "-\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\tif (interfacesToVisit == null)\r", "-\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t}\r", "-\r", "-\t\tfindFields(fieldName, currentType.fields(), scope, fieldsFound, onlyStaticFields);\r", "-\t\tcurrentType = currentType.superclass();\r", "-\t} while (currentType != null);\r", "-\r", "-\tif (interfacesToVisit != null) {\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\tReferenceBinding anInterface = interfaces[j];\r", "-\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "-\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;\r", "-\r", "-\t\t\t\t\tfindFields(fieldName, anInterface.fields(), scope, fieldsFound, onlyStaticFields);\r", "-\r", "-\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();\r", "-\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t}\r", "-\t\t// bit reinitialization\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "-}\r", "+\tprivate void findFields(\r", "+\t\tchar[] fieldName,\r", "+\t\tReferenceBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tObjectVector fieldsFound,\r", "+\t\tObjectVector localsFound,\r", "+\t\tboolean onlyStaticFields,\r", "+\t\tInvocationSite invocationSite,\r", "+\t\tScope invocationScope) {\r", "+\t\tif (fieldName == null)\r", "+\t\t\treturn;\r", "+\t\tReferenceBinding currentType = receiverType;\r", "+\t\tReferenceBinding[][] interfacesToVisit = null;\r", "+\t\tint lastPosition = -1;\r", "+\t\tdo {\r", "+\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\tif (interfacesToVisit == null)\r", "+\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tlastPosition);\r", "+\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t}\r", "+\t\t\tfindFields(\r", "+\t\t\t\tfieldName,\r", "+\t\t\t\tcurrentType.fields(),\r", "+\t\t\t\tscope,\r", "+\t\t\t\tfieldsFound,\r", "+\t\t\t\tlocalsFound,\r", "+\t\t\t\tonlyStaticFields,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\tinvocationSite,\r", "+\t\t\t\tinvocationScope);\r", "+\t\t\tcurrentType = currentType.superclass();\r", "+\t\t} while (currentType != null);\r", "+\r", "+\t\tif (interfacesToVisit != null) {\r", "+\t\t\t\t\tReferenceBinding anInterface = interfaces[j];\r", "+\t\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) {\r", "+\t\t\t\t\t\t// if interface as not already been visited\r", "+\t\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;\r", "+\t\t\t\t\t\tfindFields(\r", "+\t\t\t\t\t\t\tfieldName,\r", "+\t\t\t\t\t\t\tanInterface.fields(),\r", "+\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\tfieldsFound,\r", "+\t\t\t\t\t\t\tlocalsFound,\r", "+\t\t\t\t\t\t\tonlyStaticFields,\r", "+\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\tinvocationSite,\r", "+\t\t\t\t\t\t\tinvocationScope);\r", "+\t\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tlastPosition);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "670e7972d23c9700321cdc4106b504ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r private void findFields(\r \tchar[] fieldName,\r \tReferenceBinding receiverType,\r \tScope scope,\r \tObjectVector fieldsFound,\r \tboolean onlyStaticFields)", "signatureAfterChange": "\r \tprivate void findFields(\r \t\tchar[] fieldName,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector fieldsFound,\r \t\tObjectVector localsFound,\r \t\tboolean onlyStaticFields,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "diff": ["-}\r", "-private void findFields(\r", "-\tchar[] fieldName,\r", "-\tReferenceBinding receiverType,\r", "-\tScope scope,\r", "-\tObjectVector fieldsFound,\r", "-\tboolean onlyStaticFields) {\r", "-\r", "-\tif (fieldName == null) return;\r", "-\r", "-\tReferenceBinding currentType = receiverType;\r", "-\tReferenceBinding[][] interfacesToVisit = null;\r", "-\tint lastPosition = -1;\r", "-\tdo {\r", "-\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\tif (interfacesToVisit == null)\r", "-\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t}\r", "-\r", "-\t\tfindFields(fieldName, currentType.fields(), scope, fieldsFound, onlyStaticFields);\r", "-\t\tcurrentType = currentType.superclass();\r", "-\t} while (currentType != null);\r", "-\r", "-\tif (interfacesToVisit != null) {\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\tReferenceBinding anInterface = interfaces[j];\r", "-\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "-\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;\r", "-\r", "-\t\t\t\t\tfindFields(fieldName, anInterface.fields(), scope, fieldsFound, onlyStaticFields);\r", "-\r", "-\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();\r", "-\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t}\r", "-\t\t// bit reinitialization\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "-}\r", "+\tprivate void findFields(\r", "+\t\tchar[] fieldName,\r", "+\t\tReferenceBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tObjectVector fieldsFound,\r", "+\t\tObjectVector localsFound,\r", "+\t\tboolean onlyStaticFields,\r", "+\t\tInvocationSite invocationSite,\r", "+\t\tScope invocationScope) {\r", "+\t\tif (fieldName == null)\r", "+\t\t\treturn;\r", "+\t\tReferenceBinding currentType = receiverType;\r", "+\t\tReferenceBinding[][] interfacesToVisit = null;\r", "+\t\tint lastPosition = -1;\r", "+\t\tdo {\r", "+\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\tif (interfacesToVisit == null)\r", "+\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tlastPosition);\r", "+\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t}\r", "+\t\t\tfindFields(\r", "+\t\t\t\tfieldName,\r", "+\t\t\t\tcurrentType.fields(),\r", "+\t\t\t\tscope,\r", "+\t\t\t\tfieldsFound,\r", "+\t\t\t\tlocalsFound,\r", "+\t\t\t\tonlyStaticFields,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\tinvocationSite,\r", "+\t\t\t\tinvocationScope);\r", "+\t\t\tcurrentType = currentType.superclass();\r", "+\t\t} while (currentType != null);\r", "+\r", "+\t\tif (interfacesToVisit != null) {\r", "+\t\t\t\t\tReferenceBinding anInterface = interfaces[j];\r", "+\t\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) {\r", "+\t\t\t\t\t\t// if interface as not already been visited\r", "+\t\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;\r", "+\t\t\t\t\t\tfindFields(\r", "+\t\t\t\t\t\t\tfieldName,\r", "+\t\t\t\t\t\t\tanInterface.fields(),\r", "+\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\tfieldsFound,\r", "+\t\t\t\t\t\t\tlocalsFound,\r", "+\t\t\t\t\t\t\tonlyStaticFields,\r", "+\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\tinvocationSite,\r", "+\t\t\t\t\t\t\tinvocationScope);\r", "+\t\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tlastPosition);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e82d5777e9c7010b240599ce572b0888", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r private void findFields(\r \tchar[] fieldName,\r \tReferenceBinding receiverType,\r \tScope scope,\r \tObjectVector fieldsFound,\r \tboolean onlyStaticFields)", "signatureAfterChange": "\r \tprivate void findFields(\r \t\tchar[] fieldName,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector fieldsFound,\r \t\tObjectVector localsFound,\r \t\tboolean onlyStaticFields,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "diff": ["-}\r", "-private void findFields(\r", "-\tchar[] fieldName,\r", "-\tReferenceBinding receiverType,\r", "-\tScope scope,\r", "-\tObjectVector fieldsFound,\r", "-\tboolean onlyStaticFields) {\r", "-\r", "-\tif (fieldName == null) return;\r", "-\r", "-\tReferenceBinding currentType = receiverType;\r", "-\tReferenceBinding[][] interfacesToVisit = null;\r", "-\tint lastPosition = -1;\r", "-\tdo {\r", "-\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\tif (interfacesToVisit == null)\r", "-\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t}\r", "-\r", "-\t\tfindFields(fieldName, currentType.fields(), scope, fieldsFound, onlyStaticFields);\r", "-\t\tcurrentType = currentType.superclass();\r", "-\t} while (currentType != null);\r", "-\r", "-\tif (interfacesToVisit != null) {\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\tReferenceBinding anInterface = interfaces[j];\r", "-\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "-\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;\r", "-\r", "-\t\t\t\t\tfindFields(fieldName, anInterface.fields(), scope, fieldsFound, onlyStaticFields);\r", "-\r", "-\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();\r", "-\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t}\r", "-\t\t// bit reinitialization\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "-}\r", "+\tprivate void findFields(\r", "+\t\tchar[] fieldName,\r", "+\t\tReferenceBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tObjectVector fieldsFound,\r", "+\t\tObjectVector localsFound,\r", "+\t\tboolean onlyStaticFields,\r", "+\t\tInvocationSite invocationSite,\r", "+\t\tScope invocationScope) {\r", "+\t\tif (fieldName == null)\r", "+\t\t\treturn;\r", "+\t\tReferenceBinding currentType = receiverType;\r", "+\t\tReferenceBinding[][] interfacesToVisit = null;\r", "+\t\tint lastPosition = -1;\r", "+\t\tdo {\r", "+\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\tif (interfacesToVisit == null)\r", "+\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tlastPosition);\r", "+\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t}\r", "+\t\t\tfindFields(\r", "+\t\t\t\tfieldName,\r", "+\t\t\t\tcurrentType.fields(),\r", "+\t\t\t\tscope,\r", "+\t\t\t\tfieldsFound,\r", "+\t\t\t\tlocalsFound,\r", "+\t\t\t\tonlyStaticFields,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\tinvocationSite,\r", "+\t\t\t\tinvocationScope);\r", "+\t\t\tcurrentType = currentType.superclass();\r", "+\t\t} while (currentType != null);\r", "+\r", "+\t\tif (interfacesToVisit != null) {\r", "+\t\t\t\t\tReferenceBinding anInterface = interfaces[j];\r", "+\t\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) {\r", "+\t\t\t\t\t\t// if interface as not already been visited\r", "+\t\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;\r", "+\t\t\t\t\t\tfindFields(\r", "+\t\t\t\t\t\t\tfieldName,\r", "+\t\t\t\t\t\t\tanInterface.fields(),\r", "+\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\tfieldsFound,\r", "+\t\t\t\t\t\t\tlocalsFound,\r", "+\t\t\t\t\t\t\tonlyStaticFields,\r", "+\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\tinvocationSite,\r", "+\t\t\t\t\t\t\tinvocationScope);\r", "+\t\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tlastPosition);\r"]}], "num": 57817}
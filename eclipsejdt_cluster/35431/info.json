{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ded766beea63c7eaa8e1b0ef2d3c5b64", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a3abbed962eb42fd080668c822c42c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4412fcf3d168e3c5cc3b92c0b70e5bcf2376f3fc", "commitAfterChange": "8bf9953e1351888d8d186166d8f2000b15a08f07", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void locateMatches(SearchDocument[] searchDocuments) throws JavaModelException", "signatureAfterChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "diff": ["-public void locateMatches(SearchDocument[] searchDocuments) throws JavaModelException {", "+public void locateMatches(SearchDocument[] searchDocuments) throws CoreException {", "-\t\t\ttry {", "-\t\t\t\tJavaProject javaProject = (JavaProject) openable.getJavaProject();", "-\t\t\t\tresource = workingCopy != null ? workingCopy.getResource() : openable.getResource();", "-\t\t\t\tif (resource == null)", "-\t\t\t\t\tresource = javaProject.getProject(); // case of a file in an external jar", "-\t\t\t\tif (!javaProject.equals(previousJavaProject)) {", "-\t\t\t\t\t// locate matches in previous project", "-\t\t\t\t\tif (previousJavaProject != null) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tlocateMatches(previousJavaProject, matchSet);", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\tif (e.getException() instanceof CoreException) throw e;", "-\t\t\t\t\t\t\t// problem with classpath in this project -> skip it", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tmatchSet.reset();", "+\t\t\tJavaProject javaProject = (JavaProject) openable.getJavaProject();", "+\t\t\tresource = workingCopy != null ? workingCopy.getResource() : openable.getResource();", "+\t\t\tif (resource == null)", "+\t\t\t\tresource = javaProject.getProject(); // case of a file in an external jar", "+\t\t\tif (!javaProject.equals(previousJavaProject)) {", "+\t\t\t\t// locate matches in previous project", "+\t\t\t\tif (previousJavaProject != null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tlocateMatches(previousJavaProject, matchSet);", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// problem with classpath in this project -> skip it", "-\t\t\t\t\tpreviousJavaProject = javaProject;", "+\t\t\t\t\tmatchSet.reset();", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// file doesn't exist -> skip it", "-\t\t\t\tcontinue;", "+\t\t\t\tpreviousJavaProject = javaProject;", "-\t\t\t\tif (e.getException() instanceof CoreException) throw e;", "-\t\t\t\t// problem with classpath in last project -> skip it", "+\t\t\t\t// problem with classpath in last project -> ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dfc9a87fb89f83c11d3be8adc21732a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceRefElement.java", "commitBeforeChange": "4e186bd542905b91d524cb97547ff04b594b342a", "commitAfterChange": "d3438591c6303b10ffdfe04935a028a1a295bc18", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public String getSource() throws JavaModelException", "signatureAfterChange": " public String getSource() throws JavaModelException", "diff": ["-\t\tif (e instanceof IndexOutOfBoundsException) {", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.INDEX_OUT_OF_BOUNDS);", "-\t\t}", "-\t\tthrow new JavaModelException(e, IStatus.ERROR);", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cce60139f12ff8f4c344146465621d24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "87041428380af75d9fe4e53fca60cc6c5a37612c", "commitAfterChange": "7bb1d94f9b87ad51598960b0946ce0996abb2af6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "\r \r protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "diff": ["-\t\ttry {\r", "-\t\t\tIMarker marker = currentProject.createMarker(ProblemMarkerTag);\r", "-\t\t\tmarker.setAttribute(IMarker.MESSAGE, Util.bind(\"build.inconsistentProject\")); //$NON-NLS-1$\r", "-\t\t\tmarker.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);\r", "-\t\t} catch (CoreException ignore) {\r", "-\t\t\tthrow e;\r", "-\t\t}\r", "+\t\tIMarker marker = currentProject.createMarker(ProblemMarkerTag);\r", "+\t\tmarker.setAttribute(IMarker.MESSAGE, Util.bind(\"build.inconsistentProject\")); //$NON-NLS-1$\r", "+\t\tmarker.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);\r", "-\t\ttry {\r", "-\t\t\tIMarker marker = currentProject.createMarker(ProblemMarkerTag);\r", "-\t\t\tmarker.setAttribute(IMarker.MESSAGE, Util.bind(\"build.inconsistentProject\")); //$NON-NLS-1$\r", "-\t\t\tmarker.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);\r", "-\t\t} catch (CoreException ignore) {\r", "-\t\t\tthrow e.getThrowable();\r", "-\t\t}\r", "+\t\tIMarker marker = currentProject.createMarker(ProblemMarkerTag);\r", "+\t\tmarker.setAttribute(IMarker.MESSAGE, Util.bind(\"build.inconsistentProject\")); //$NON-NLS-1$\r", "+\t\tmarker.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);\r"]}], "num": 35431}
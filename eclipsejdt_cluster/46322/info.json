{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd5b8d95d8acdc784f086dd7d6827f5f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44dd968d3a5a21c46a495c61eff78fb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/IntersectingPattern.java", "commitBeforeChange": "7d7e44bec5cc73af8a58c1959acd433a7f2c6ded", "commitAfterChange": "c9e042ca313baf5eded9aef49e3870dc5764fbfc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "diff": ["-\t\t\tSearchPattern pattern = ((InternalSearchPattern) this).currentPattern();", "-\t\t\tEntryResult[] entries = ((InternalSearchPattern)pattern).queryIn(index);", "+\t\t\tSearchPattern pattern = currentPattern();", "+\t\t\tEntryResult[] entries = pattern.queryIn(index);", "-\t\t\t((InternalSearchPattern) this).acceptMatch((String) names[i], containerPath, separator, null/*no pattern*/, requestor, participant, scope); // AndPatterns cannot provide the decoded result", "+\t\t\tacceptMatch((String) names[i], containerPath, separator, null/*no pattern*/, requestor, participant, scope); // AndPatterns cannot provide the decoded result"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1000ae72c148f0a7e7478de09a383ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "4cc2f8f4e127cb2b5311bd70a3aa9e42278cea32", "commitAfterChange": "0774ccc9fbfb251d06c1b6758403976034210f78", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "diff": ["-\t\t\tSearchPattern pattern = currentPattern();", "-\t\t\tEntryResult[] entries = pattern.queryIn(index);", "+\t\t\tSearchPattern pattern = ((InternalSearchPattern) this).currentPattern();", "+\t\t\tEntryResult[] entries = ((InternalSearchPattern)pattern).queryIn(index);", "-\t\t\tacceptMatch((String) names[i], null, requestor, participant, scope); // AndPatterns cannot provide the decoded result", "+\t\t\t((InternalSearchPattern) this).acceptMatch((String) names[i], null, requestor, participant, scope); // AndPatterns cannot provide the decoded result"]}], "num": 46322}
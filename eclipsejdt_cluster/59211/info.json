{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6eaede76e610c6ee3cae7065a007ed6e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13073238c21fd613aba5fa88e55b0d37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "166f6dd5be5c675bb046225e1f8d62e9663ca203", "commitAfterChange": "fc72b05508236833f00a1e3c5476a46002d61f47", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["+\t\t// temporararily connect ourselves to the ASTResolver - must disconnect when done", "-\t\t\t// No reset is performed there anymore since,", "-\t\t\t// within the CodeAssist (or related tools),", "-\t\t\t// the compiler may be called *after* a call", "-\t\t\t// to this resolve(...) method. And such a call", "-\t\t\t// needs to have a compiler with a non-empty", "-\t\t\t// environment.", "-\t\t\t// this.reset();", "+\t\t\t// disconnect ourselves from ast requestor", "+            astRequestor.compilationUnitResolver = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5b27dd71b9bc7a1238f67e9805b0d57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected void beginToCompile(org.eclipse.jdt.internal.compiler.env.ICompilationUnit[] sourceUnits, String[] bindingKeys)", "signatureAfterChange": " \tprotected void beginToCompile(org.eclipse.jdt.internal.compiler.env.ICompilationUnit[] sourceUnits, String[] bindingKeys)", "diff": ["-\t\t\tCompilationUnitDeclaration parsedUnit = resolver.getCompilationUnitDeclaration();", "+\t\t\t// If it doesn't have a type name, then it is either an array type, package or base type, which will definitely not have a compilation unit. ", "+\t\t\t// Skipping it will speed up performance because the call will open jars. (theodora)", "+\t\t\tCompilationUnitDeclaration parsedUnit = resolver.hasTypeName() ? resolver.getCompilationUnitDeclaration() : null;"]}], "num": 59211}
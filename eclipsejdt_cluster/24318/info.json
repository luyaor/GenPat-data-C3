{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b850e7fe2a9727e3a5a87d896684e0a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1719aff7408d8e447dd0301d6991c8cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "ff1eb602a8aea39b1e15b206441aadf76bfaa984", "commitAfterChange": "dc5ee42cb3e5694c60c3a1f62c20766cb3cb2274", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 19, "signatureBeforeChange": " public TypeDeclaration updatedTypeDeclaration()", "signatureAfterChange": " public TypeDeclaration updatedTypeDeclaration()", "diff": ["+\t/* update annotations */", "+\tif (modifiers != 0) {", "+\t\tthis.typeDeclaration.modifiers |= modifiers;", "+\t\tif (this.modifiersStart < this.typeDeclaration.declarationSourceStart) {", "+\t\t\tthis.typeDeclaration.declarationSourceStart = modifiersStart;", "+\t\t}", "+\t}", "+\t/* update annotations */", "+\tif (annotationCount > 0){", "+\t\tint existingCount = typeDeclaration.annotations == null ? 0 : typeDeclaration.annotations.length;", "+\t\tAnnotation[] annotationReferences = new Annotation[existingCount + annotationCount];", "+\t\tif (existingCount > 0){", "+\t\t\tSystem.arraycopy(typeDeclaration.annotations, 0, annotationReferences, annotationCount, existingCount);", "+\t\t}", "+\t\tfor (int i = 0; i < annotationCount; i++){", "+\t\t\tannotationReferences[i] = annotations[i].updatedAnnotationReference();", "+\t\t}", "+\t\ttypeDeclaration.annotations = annotationReferences;", "+\t\t", "+\t\tint start = this.annotations[0].annotation.sourceStart;", "+\t\tif (start < this.typeDeclaration.declarationSourceStart) {", "+\t\t\tthis.typeDeclaration.declarationSourceStart = start;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77fe3ed5aa00e35704fc3f710bad5972", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "e173f77ccd0067cc5ddcb6d9e15b204243baff15", "commitAfterChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 39, "signatureBeforeChange": "  \tprivate void formatTypeOpeningBrace(String bracePosition, boolean insertSpaceBeforeBrace, TypeDeclaration typeDeclaration)", "signatureAfterChange": " \tprivate void formatTypeOpeningBrace(String bracePosition, boolean insertSpaceBeforeBrace, TypeDeclaration typeDeclaration)", "diff": ["-\tprivate void formatTypeOpeningBrace(String bracePosition, boolean insertSpaceBeforeBrace, TypeDeclaration typeDeclaration) {", "+\t}", "+\tprivate void formatTypeOpeningBrace(String bracePosition, boolean insertSpaceBeforeBrace, TypeDeclaration typeDeclaration) {", "+\t\tint fieldCount = (typeDeclaration.fields == null) ? 0 : typeDeclaration.fields.length;", "+\t\tint methodCount = (typeDeclaration.methods == null) ? 0 : typeDeclaration.methods.length;", "+\t\tint typeCount = (typeDeclaration.memberTypes == null) ? 0 : typeDeclaration.memberTypes.length;", "+\t", "+\t\tif (methodCount == 1 && typeDeclaration.methods[0].isDefaultConstructor()) {", "+\t\t\tmethodCount = 0;", "+\t\t}", "+\t\tfinal int memberLength = fieldCount + methodCount + typeCount;", "+", "+\t\tboolean insertNewLine = memberLength > 0;", "+\t\t", "+\t\tif (!insertNewLine) {", "+\t\t\tif (typeDeclaration.getKind() == IGenericType.ENUM) {", "+\t\t\t\tinsertNewLine = this.preferences.insert_new_line_in_empty_enum_declaration;", "+\t\t\t} else if ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6d9f697f62e3510b2a4608b1f9dabaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java", "commitBeforeChange": "ff1eb602a8aea39b1e15b206441aadf76bfaa984", "commitAfterChange": "dc5ee42cb3e5694c60c3a1f62c20766cb3cb2274", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public FieldDeclaration updatedFieldDeclaration()", "signatureAfterChange": " public FieldDeclaration updatedFieldDeclaration()", "diff": ["-", "+\t/* update annotations */", "+\tif (modifiers != 0) {", "+\t\tthis.fieldDeclaration.modifiers |= modifiers;", "+\t\tif (this.modifiersStart < this.fieldDeclaration.declarationSourceStart) {", "+\t\t\tthis.fieldDeclaration.declarationSourceStart = modifiersStart;", "+\t\t}", "+\t}", "+\t/* update annotations */", "+\tif (annotationCount > 0){", "+\t\tint existingCount = fieldDeclaration.annotations == null ? 0 : fieldDeclaration.annotations.length;", "+\t\tAnnotation[] annotationReferences = new Annotation[existingCount + annotationCount];", "+\t\tif (existingCount > 0){", "+\t\t\tSystem.arraycopy(fieldDeclaration.annotations, 0, annotationReferences, annotationCount, existingCount);", "+\t\t}", "+\t\tfor (int i = 0; i < annotationCount; i++){", "+\t\t\tannotationReferences[i] = annotations[i].updatedAnnotationReference();", "+\t\t}", "+\t\tfieldDeclaration.annotations = annotationReferences;", "+\t\t", "+\t\tint start = this.annotations[0].annotation.sourceStart;", "+\t\tif (start < this.fieldDeclaration.declarationSourceStart) {", "+\t\t\tthis.fieldDeclaration.declarationSourceStart = start;", "+\t\t}", "+\t}", "+\t"]}], "num": 24318}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f86780d208fe5be4973788e92effc10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf46d25cf005effcf19c73615ceeaaed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "957977037bae1c5fe509d6f5b83d064a1bf50d04", "commitAfterChange": "78430308e7d45c151f6732314055fefd33935867", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-protected void reportMatching(TypeDeclaration type, IJavaElement parent, MatchingNodeSet nodeSet) throws CoreException {", "+protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet) throws CoreException {", "+\t// report the type declaration", "+\tif (accuracy > -1)", "+\t\treport(type.sourceStart, type.sourceEnd, enclosingElement, accuracy);", "+", "-\tboolean searchInsideTypes = (this.matchContainer & PatternLocator.CLASS_CONTAINER) != 0;", "+\tboolean matchedClassContainer = (this.matchContainer & PatternLocator.CLASS_CONTAINER) != 0;", "-\t\t\tif (level != null && searchInsideTypes)", "+\t\t\tif (level != null && matchedClassContainer)", "-\t\t\tif (level != null && searchInsideTypes)", "+\t\t\tif (level != null && matchedClassContainer)", "-\t\t\t\tif (level != null && searchInsideTypes)", "+\t\t\t\tif (level != null && matchedClassContainer)", "+\tmatchedClassContainer = matchedClassContainer && typeInHierarchy; ", "-\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "-\t\t\t\treportFieldDeclaration(field, enclosingElement, level.intValue());", "-\t\t\treportMatching(field, enclosingElement, type, nodeSet, typeInHierarchy);", "+\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "+\t\t\treportMatching(field, type, enclosingElement, value, typeInHierarchy, nodeSet);", "-\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "-\t\t\t\treportMethodDeclaration(method, enclosingElement, level.intValue());", "-\t\t\treportMatching(method, enclosingElement, nodeSet, typeInHierarchy);", "+\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "+\t\t\treportMatching(method, enclosingElement, value, typeInHierarchy, nodeSet);", "-\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "-\t\t\t\treportTypeDeclaration(memberType, enclosingElement, level.intValue());", "-\t\t\treportMatching(memberType, enclosingElement, nodeSet);", "+\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "+\t\t\treportMatching(memberType, enclosingElement, value, nodeSet);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf8b681e17744b7b02ad56e14f133539", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/APIDocumentationTests.java", "commitBeforeChange": "d6d10602861f99a2e87d2ce2ba051c7b3da388a8", "commitAfterChange": "7e04164b6ff5e1f953daad29cd865817aa19cb20", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void analyze()", "signatureAfterChange": " \tprivate void analyze()", "diff": ["-\t\t\t\t\tif (line.startsWith(\" * <dt>Option id:\")) {", "-\t\t\t\t\t\tthis.optionID = line.substring(33, line.length() - 13);", "-\t\t\t\t\t} else if (line.startsWith(\" * <dt>Default:\")) {", "-\t\t\t\t\t\tthis.defaultValue = line.substring(31, line.length() - 13);", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\tint start = line.indexOf(OPTION_BEGIN);", "+\t\t\t\t\tif (start > -1) {", "+\t\t\t\t\t\tint end = line.indexOf(END, start);", "+\t\t\t\t\t\tthis.optionID = line.substring(start+OPTION_BEGIN.length(), end);", "+\t\t\t\t\tstart = line.indexOf(DEFAULT_BEGIN);", "+\t\t\t\t\tif (start > -1) {", "+\t\t\t\t\t\tint end = line.indexOf(END, start);", "+\t\t\t\t\t\tthis.defaultValue = line.substring(start+DEFAULT_BEGIN.length(), end);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.optionID != null && this.defaultValue != null)", "+\t\t\t\t\t\treturn;"]}], "num": 18548}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45a92c3173a0f73b1d76eab3266bd007", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7be8f3249c980ba902bcf00da24d0902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatJavadocBlock.java", "commitBeforeChange": "00cabdb6b90ee48364f71e75a5da5edca1e7837c", "commitAfterChange": "fcccc4dd1377e549112e0bdc9a74b0eb625c6ab2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " FormatJavadocText[] getTextHierarchy(FormatJavadocNode node, int htmlDepth)", "signatureAfterChange": " FormatJavadocText[] getTextHierarchy(FormatJavadocNode node, int htmlDepth)", "diff": ["-\t\t\t\tswitch (lastText.getHtmlTagID()) {", "-\t\t\t\t\tcase JAVADOC_CODE_TAGS_ID:", "-\t\t\t\t\t\ttext.linesBefore = 2;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase JAVADOC_SEPARATOR_TAGS_ID:", "-\t\t\t    \tcase JAVADOC_SINGLE_BREAK_TAG_ID:", "-\t\t\t\t\t\tif (text.linesBefore < 1) text.linesBefore = 1;", "+\t\t\t\tif (lastText.separatorsPtr == -1 || lastText.isClosingHtmlTag()) {", "+\t\t\t\t\tswitch (lastText.getHtmlTagID()) {", "+\t\t\t\t\t\tcase JAVADOC_CODE_TAGS_ID:", "+\t\t\t\t\t\t\tif (text.linesBefore < 2) {", "+\t\t\t\t\t\t\t\ttext.linesBefore = 2;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase JAVADOC_SEPARATOR_TAGS_ID:", "+\t\t\t\t    \tcase JAVADOC_SINGLE_BREAK_TAG_ID:", "+\t\t\t\t\t\t\tif (text.linesBefore < 1) {", "+\t\t\t\t\t\t\t\ttext.linesBefore = 1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea7f9092d8505aab670f1ccd08294fc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatJavadocBlock.java", "commitBeforeChange": "8bd987839355c299213c95f3874a2e3574283d9c", "commitAfterChange": "76b6723dbe61d0b9874754d0d6572d1a4d8c0cbc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " FormatJavadocText[] getTextHierarchy(FormatJavadocNode node, int htmlDepth)", "signatureAfterChange": " FormatJavadocText[] getTextHierarchy(FormatJavadocNode node, int htmlDepth)", "diff": ["-\t\t\t\tif (lastText.separatorsPtr == -1 || lastText.isClosingHtmlTag()) {", "+\t\t\t\t// The added text is concerned if the parent has no child yet or is top level and closing html tag", "+\t\t\t\tboolean setLinesBefore = lastText.separatorsPtr == -1 || (ptr == 0 && lastText.isClosingHtmlTag());", "+\t\t\t\tif (!setLinesBefore && ptr > 0 && lastText.isClosingHtmlTag()) {", "+\t\t\t\t\t// for non-top level closing html tag, text is concerned only if no new text has been written after", "+\t\t\t\t\tFormatJavadocText parentText = textHierarchy[ptr-1];", "+\t\t\t\t\tint textStart = (int) parentText.separators[parentText.separatorsPtr];", "+\t\t\t\t\tif (textStart < lastText.sourceStart) {", "+\t\t\t\t\t\tsetLinesBefore = true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (setLinesBefore) {"]}], "num": 59913}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72985a84d8e19133145dccad9c021da5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21e99b1716cb72802bb336a2699c190c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "45c680054b27b9c98f10c88da800e79c9dec8528", "commitAfterChange": "1d817cf86d6dbfa3bc80c59d0139cb561aace8b1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void generateOptimizedStringConcatenationCreation( \t\tBlockScope blockScope, \t\tCodeStream codeStream, \t\tint typeID)", "signatureAfterChange": " \tpublic void generateOptimizedStringConcatenationCreation( \t\tBlockScope blockScope, \t\tCodeStream codeStream, \t\tint typeID)", "diff": ["-\t\t// Optimization only for integers and strings", "-\t\tif (typeID == T_JavaLangObject) {", "-\t\t\t// in the case the runtime value of valueOf(Object) returns null, we have to use append(Object) instead of directly valueOf(Object)", "-\t\t\t// append(Object) returns append(valueOf(Object)), which means that the null case is handled by append(String).", "-\t\t\tcodeStream.newStringContatenation();", "-\t\t\tcodeStream.dup();", "-\t\t\tcodeStream.invokeStringConcatenationDefaultConstructor();", "-\t\t\tgenerateCode(blockScope, codeStream, true);", "-\t\t\tcodeStream.invokeStringConcatenationAppendForType(T_JavaLangObject);", "-\t\t\treturn;", "-\t\t}", "-\t\tif (typeID == T_JavaLangString || typeID == T_null) {", "-\t\t\tif (constant != NotAConstant) {", "-\t\t\t\tString stringValue = constant.stringValue();", "-\t\t\t\tif (stringValue.length() == 0) {  // optimize \"\"+<str> ", "-\t\t\t\t\tcodeStream.invokeStringConcatenationDefaultConstructor();", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tcodeStream.ldc(stringValue);", "-\t\t\t} else {", "+\t\tswitch (typeID) {", "+\t\t\tcase T_JavaLangObject :", "+\t\t\tcase T_undefined :", "+\t\t\t\t// in the case the runtime value of valueOf(Object) returns null, we have to use append(Object) instead of directly valueOf(Object)", "+\t\t\t\t// append(Object) returns append(valueOf(Object)), which means that the null case is handled by append(String).", "+\t\t\t\tcodeStream.invokeStringConcatenationDefaultConstructor();", "-\t\t\t\tcodeStream.invokeStringValueOf(T_JavaLangObject);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tgenerateCode(blockScope, codeStream, true);", "-\t\t\tcodeStream.invokeStringValueOf(typeID);", "+\t\t\t\tcodeStream.invokeStringConcatenationAppendForType(T_JavaLangObject);", "+\t\t\t\treturn;", "+", "+\t\t\tcase T_JavaLangString :", "+\t\t\tcase T_null :", "+\t\t\t\tif (constant != NotAConstant) {", "+\t\t\t\t\tString stringValue = constant.stringValue();", "+\t\t\t\t\tif (stringValue.length() == 0) {  // optimize \"\"+<str> ", "+\t\t\t\t\t\tcodeStream.invokeStringConcatenationDefaultConstructor();", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.ldc(stringValue);", "+\t\t\t\t} else {", "+\t\t\t\t\tgenerateCode(blockScope, codeStream, true);", "+\t\t\t\t\tcodeStream.invokeStringValueOf(T_JavaLangObject);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tdefault :", "+\t\t\t\tgenerateCode(blockScope, codeStream, true);", "+\t\t\t\tcodeStream.invokeStringValueOf(typeID);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e017a9f3da2d43e5ef6f7645fa5ad2f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "c79bfbeb67e4687c48de7885eb121ce1ea14c01f", "commitAfterChange": "ff61aa704b87289ea0c126beac8453107bd32bdf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate boolean checkSelection( \t\tchar[] source, \t\tint selectionStart, \t\tint selectionEnd)", "signatureAfterChange": " \tprivate boolean checkSelection( \t\tchar[] source, \t\tint selectionStart, \t\tint selectionEnd)", "diff": ["-\t\t\t\twhile(currentPosition > 0){", "+\t\t\t\tlineLoop: while(currentPosition > 0){", "-\t\t\t\t\tif(currentCharacter == '\\r' || currentCharacter == '\\n') {", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\tswitch(currentCharacter) {", "+\t\t\t\t\t\tcase '\\r':", "+\t\t\t\t\t\tcase '\\n':", "+\t\t\t\t\t\tcase '/':", "+\t\t\t\t\t\t\tbreak lineLoop;", "-\t\t\t\tif((token == TerminalTokens.TokenNamethis ||", "-\t\t\t\t\ttoken == TerminalTokens.TokenNamesuper ||", "-\t\t\t\t\ttoken == TerminalTokens.TokenNameIdentifier) &&", "-\t\t\t\t\tscanner.startPosition <= selectionStart &&", "-\t\t\t\t\tselectionStart <= scanner.currentPosition) {", "-\t\t\t\t\tlastIdentifierStart = scanner.startPosition;", "-\t\t\t\t\tlastIdentifierEnd = scanner.currentPosition - 1;", "-\t\t\t\t\tlastIdentifier = scanner.getCurrentTokenSource();", "+\t\t\t\tswitch (token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNamethis:", "+\t\t\t\t\tcase TerminalTokens.TokenNamesuper:", "+\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier:", "+\t\t\t\t\t\tif (scanner.startPosition <= selectionStart && selectionStart <= scanner.currentPosition) {", "+\t\t\t\t\t\t\tlastIdentifierStart = scanner.startPosition;", "+\t\t\t\t\t\t\tlastIdentifierEnd = scanner.currentPosition - 1;", "+\t\t\t\t\t\t\tlastIdentifier = scanner.getCurrentTokenSource();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f372933d5769cd4a26a821c3ed5186cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "ba65adb7228709772812cc43f8ccb14a824acf89", "commitAfterChange": "6c797406271c70e354dc360e4e2b55dc743bf914", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void updateDocComment()", "signatureAfterChange": " \tprotected void updateDocComment()", "diff": ["-\t\t\tif (ptr == SEE_TAG_EXPECTED_ORDER) {", "-\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "-\t\t\t\tfor (int i=0; i<size; i++) {", "-\t\t\t\t\tthis.docComment.references[--sizes[ptr]] = (Expression) this.astStack[this.astPtr--];", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tswitch(ptr) {", "+\t\t\t\tcase SEE_TAG_EXPECTED_ORDER:", "+\t\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "+\t\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\t\tthis.docComment.references[--sizes[ptr]] = (Expression) this.astStack[this.astPtr--];", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\t\t// Then continuing with class names (eg. TypeReference) coming from @throw/@exception declarations", "-\t\t\telse if (ptr == THROWS_TAG_EXPECTED_ORDER) {", "-\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "-\t\t\t\tfor (int i=0; i<size; i++) {", "-\t\t\t\t\tthis.docComment.thrownExceptions[--sizes[ptr]] = (TypeReference) this.astStack[this.astPtr--];", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\t\t// Then continuing with class names (eg. TypeReference) coming from @throw/@exception declarations", "+\t\t\t\tcase THROWS_TAG_EXPECTED_ORDER:", "+\t\t\t\t\tsize = this.astLengthStack[this.astLengthPtr--];", "+\t\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\t\tthis.docComment.thrownExceptions[--sizes[ptr]] = (TypeReference) this.astStack[this.astPtr--];", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\t\t// Finally, finishing with parameters nales (ie. Argument) coming from @param declaration", "-\t\t\telse if (ptr == PARAM_TAG_EXPECTED_ORDER) {", "-\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "-\t\t\t\tfor (int i=0; i<size; i++) {", "-\t\t\t\t\tthis.docComment.parameters[--sizes[ptr]] = (JavadocSingleNameReference) this.astStack[this.astPtr--];", "-\t\t\t\t}", "+\t\t\t\t// Finally, finishing with parameters nales (ie. Argument) coming from @param declaration", "+\t\t\t\tcase PARAM_TAG_EXPECTED_ORDER:", "+\t\t\t\t\tsize = this.astLengthStack[this.astLengthPtr--];", "+\t\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\t\tthis.docComment.parameters[--sizes[ptr]] = (JavadocSingleNameReference) this.astStack[this.astPtr--];", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;"]}], "num": 2502}
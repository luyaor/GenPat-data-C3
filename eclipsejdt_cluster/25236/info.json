{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b96cec4d398510c79f81883f8ccc8934", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ecb09c4cf3cc5c71a9145f1ce9f6d58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "94a425e221148886c840b4d545bf87183980be4b", "commitAfterChange": "ee446c21d0aaa4f4c4b0513ad11960ed53ccba7d", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\tboolean externalFoldersProjectExists = JavaModelManager.getExternalManager().getExternalFoldersProject().isAccessible();", "+\t\t\tExternalFoldersManager externalFoldersManager = JavaModelManager.getExternalManager();", "-\t\t\t\t\t\tif (!needExternalFolderCreation && !externalFoldersProjectExists && entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "-\t\t\t\t\t\t\tObject target = JavaModel.getTarget(entry.getPath(), false/*don't check existence*/);", "-\t\t\t\t\t\t\tif (target instanceof IFolder && ExternalFoldersManager.isExternal(((IFolder) target).getFullPath()))", "+\t\t\t\t\t\tif (!needExternalFolderCreation && entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\t\t\tif (ExternalFoldersManager.isExternalFolderPath(entryPath) && externalFoldersManager.getFolder(entryPath) == null) {", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "876b34f36954fbb7de2b6f54a696ce0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d644fbac5b6fa9c32824a6e9c1731fdea560370f", "commitAfterChange": "a2ea211548ddb7d816d913062440866fd92fd6cc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\tpublic IPackageFragmentRoot getPackageFragmentRoot(IResource resource)", "signatureAfterChange": " \t\tpublic IPackageFragmentRoot getPackageFragmentRoot(IResource resource)", "diff": ["-\t\t\t\t\tObject target = JavaModel.getTarget(this.rootPath, false/*don't check existence*/);", "-\t\t\t\t\tif (target instanceof IResource) {", "-\t\t\t\t\t\tthis.root = this.project.getPackageFragmentRoot((IResource)target);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.root = this.project.getPackageFragmentRoot(this.rootPath.toOSString());", "-\t\t\t\t\t}", "+\t\t\t\t\tthis.root = getPackageFragmentRoot();", "+\t\t\tif (this.root != null) ", "+\t\t\t\tthis.cache = this.root;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0232fa5b1be028824b36ffaf0786dcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "a8a3dc803188a8f412e8e9727c27a357015eb102", "commitAfterChange": "ebee92b09c2df43d9d4f2bbbd891d81bc1d00c76", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void addAttributes()", "signatureAfterChange": " \tpublic void addAttributes()", "diff": ["-\t\t\tif (this.referenceBinding.scope != null) {", "-\t\t\t\tMethodScope methodScope = this.referenceBinding.scope.methodScope();", "-\t\t\t\tif (methodScope != null) {", "-\t\t\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "-\t\t\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "-\t\t\t\t\t\tAbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) referenceContext;", "-\t\t\t\t\t\tMethodBinding methodBinding = methodDeclaration.binding;", "-\t\t\t\t\t\tint enclosingMethodIndex = constantPool.literalIndexForMethod(methodBinding.selector, methodBinding.signature());", "-\t\t\t\t\t\tmethodIndexByte1 = (byte) (enclosingMethodIndex >> 8);", "-\t\t\t\t\t\tmethodIndexByte2 = (byte) enclosingMethodIndex;", "-\t\t\t\t\t}", "+\t\t\tif (this.referenceBinding instanceof LocalTypeBinding) {", "+\t\t\t\tMethodBinding methodBinding = ((LocalTypeBinding) this.referenceBinding).enclosingMethod;", "+\t\t\t\tif (methodBinding != null) {", "+\t\t\t\t\tint enclosingMethodIndex = constantPool.literalIndexForMethod(methodBinding.selector, methodBinding.signature());", "+\t\t\t\t\tmethodIndexByte1 = (byte) (enclosingMethodIndex >> 8);", "+\t\t\t\t\tmethodIndexByte2 = (byte) enclosingMethodIndex;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81cd818f14d19ad5e63d1d375e50036", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["-\t\t\t\tint ptr = this.sourceParser.astPtr;", "-\t\t\t\twhile (ptr >= 0) {", "-\t\t\t\t\tObject node = this.sourceParser.astStack[ptr];", "-\t\t\t\t\tif (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\tTypeDeclaration typeDecl = (TypeDeclaration) node;", "-\t\t\t\t\t\tif (typeDecl.bodyEnd == 0) { // type declaration currenly parsed", "-\t\t\t\t\t\t\tname = typeDecl.name;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tptr--;", "+\t\t\t\tTypeDeclaration typeDecl = getParsedTypeDeclaration();", "+\t\t\t\tif (typeDecl != null) {", "+\t\t\t\t\tname = typeDecl.name;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b250576e0ddb5da7284bffd422b58315", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a7c3cda7c961d5a5839fc88cdcdca05f749f0591", "commitAfterChange": "45f26d79341dbd73cc50656614a5963b62874264", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\t\t\t\tif (visibleField != null)", "+\t\t\t\t\tif (visibleField == null)", "+\t\t\t\t\t\tvisibleField = field;", "+\t\t\t\t\telse", "-\t\t\t\t\tif (!currentType.canBeSeenBy(this))", "-\t\t\t\t\t\treturn new ProblemFieldBinding(currentType, fieldName, ReceiverTypeNotVisible);", "-\t\t\t\t\tvisibleField = field;", "-\t\t\tProblemFieldBinding nonVisibleType = null;", "-\t\t\t\t\t\t\t\tif (anInterface.canBeSeenBy(this))", "-\t\t\t\t\t\t\t\t\tvisibleField = field;", "-\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\tnonVisibleType = new ProblemFieldBinding(anInterface, fieldName, ReceiverTypeNotVisible);", "+\t\t\t\t\t\t\t\tvisibleField = field;", "-\t\t\tif (nonVisibleType != null)", "-\t\t\t\treturn nonVisibleType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd1fd39f89c3409e1c7e42c4dc2414bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "ade181db7356e902754c81dd9d71430c049ed0c1", "commitAfterChange": "c3fe471c0fdcefebf95bb7bbebd413b0a2c46646", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void checkUnclosedCloseables(FlowInfo flowInfo, FlowContext flowContext, ASTNode location, BlockScope locationScope)", "signatureAfterChange": " public void checkUnclosedCloseables(FlowInfo flowInfo, FlowContext flowContext, ASTNode location, BlockScope locationScope)", "diff": ["-\t} else {", "-\t\tint size = this.trackingVariables.size();", "-\t\tfor (int i=0; i<size; i++) {", "-\t\t\tFakedTrackingVariable tracker = (FakedTrackingVariable) this.trackingVariables.get(i);", "-\t\t\ttracker.resetReportingBits();", "-\t\t}"]}], "num": 25236}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee6846b6c2926cfcea6e6892d82f5a8a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c6aa10338b1c4e80b12bbbf919af902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void set(Map optionsMap)", "signatureAfterChange": "  \tpublic void set(Map optionsMap)", "diff": ["-\t\tif ((optionValue = optionsMap.get(OPTION_ReportMissingJavadoc)) != null) {", "-\t\t\tif (ENABLED.equals(optionValue)) {", "-\t\t\t\tthis.reportMissingJavadoc = true;", "-\t\t\t} else if (DISABLED.equals(optionValue)) {", "-\t\t\t\tthis.reportMissingJavadoc = false;", "-\t\t\t}", "-\t\t}", "-\t\tif ((optionValue = optionsMap.get(OPTION_ReportInvalidJavadoc)) != null) updateSeverity(InvalidJavadoc, optionValue);", "+", "+\t\t// Javadoc options", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportInvalidJavadoc)) != null) {", "+\t\t\tupdateSeverity(InvalidJavadoc, optionValue);", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportInvalidJavadocTagsVisibility)) != null) {", "+\t\t\tif (PUBLIC.equals(optionValue)) {", "+\t\t\t\tthis.reportInvalidJavadocTagsVisibility = AccPublic;", "+\t\t\t} else if (PROTECTED.equals(optionValue)) {", "+\t\t\t\tthis.reportInvalidJavadocTagsVisibility = AccProtected;", "+\t\t\t} else if (DEFAULT.equals(optionValue)) {", "+\t\t\t\tthis.reportInvalidJavadocTagsVisibility = AccDefault;", "+\t\t\t} else if (PRIVATE.equals(optionValue)) {", "+\t\t\t\tthis.reportInvalidJavadocTagsVisibility = AccPrivate;", "+\t\t\t}", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportInvalidJavadocTags)) != null) {", "+\t\t\tif (ENABLED.equals(optionValue)) {", "+\t\t\t\tthis.reportInvalidJavadocTags= true;", "+\t\t\t} else if (DISABLED.equals(optionValue)) {", "+\t\t\t\tthis.reportInvalidJavadocTags = false;", "+\t\t\t}", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportMissingJavadocTags)) != null) {", "+\t\t\tupdateSeverity(MissingJavadocTags, optionValue);", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportMissingJavadocTagsVisibility)) != null) {", "+\t\t\tif (PUBLIC.equals(optionValue)) {", "+\t\t\t\tthis.reportMissingJavadocTagsVisibility = AccPublic;", "+\t\t\t} else if (PROTECTED.equals(optionValue)) {", "+\t\t\t\tthis.reportMissingJavadocTagsVisibility = AccProtected;", "+\t\t\t} else if (DEFAULT.equals(optionValue)) {", "+\t\t\t\tthis.reportMissingJavadocTagsVisibility = AccDefault;", "+\t\t\t} else if (PRIVATE.equals(optionValue)) {", "+\t\t\t\tthis.reportMissingJavadocTagsVisibility = AccPrivate;", "+\t\t\t}", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportMissingJavadocTagsOverriding)) != null) {", "+\t\t\t// TODO (frederic) see with jdt-ui whether we use ignore instead of report", "+\t\t\tif (ENABLED.equals(optionValue)) {", "+\t\t\t\t//this.reportMissingJavadocTagsOverriding = true;", "+\t\t\t\tthis.reportMissingJavadocTagsOverriding = false;", "+\t\t\t} else if (DISABLED.equals(optionValue)) {", "+\t\t\t\t//this.reportMissingJavadocTagsOverriding = false;", "+\t\t\t\tthis.reportMissingJavadocTagsOverriding = true;", "+\t\t\t}", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportMissingJavadocComments)) != null) {", "+\t\t\tupdateSeverity(MissingJavadocComments, optionValue);", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportMissingJavadocCommentsVisibility)) != null) {", "+\t\t\tif (PUBLIC.equals(optionValue)) {", "+\t\t\t\tthis.reportMissingJavadocCommentsVisibility = AccPublic;", "+\t\t\t} else if (PROTECTED.equals(optionValue)) {", "+\t\t\t\tthis.reportMissingJavadocCommentsVisibility = AccProtected;", "+\t\t\t} else if (DEFAULT.equals(optionValue)) {", "+\t\t\t\tthis.reportMissingJavadocCommentsVisibility = AccDefault;", "+\t\t\t} else if (PRIVATE.equals(optionValue)) {", "+\t\t\t\tthis.reportMissingJavadocCommentsVisibility = AccPrivate;", "+\t\t\t}", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportMissingJavadocCommentsOverriding)) != null) {", "+\t\t\t// TODO (frederic) see with jdt-ui whether we use ignore instead of report", "+\t\t\tif (ENABLED.equals(optionValue)) {", "+\t\t\t\t//this.reportMissingJavadocCommentsOverriding = true;", "+\t\t\t\tthis.reportMissingJavadocCommentsOverriding = false;", "+\t\t\t} else if (DISABLED.equals(optionValue)) {", "+\t\t\t\t//this.reportMissingJavadocCommentsOverriding = false;", "+\t\t\t\tthis.reportMissingJavadocCommentsOverriding = true;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f19550944665517eea5e36572525aa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FormatterOptions(ConfigurableOption[] settings)", "signatureAfterChange": "\r public FormatterOptions(Map settings)", "diff": ["-public FormatterOptions(ConfigurableOption[] settings){\r", "+public FormatterOptions(Map settings){\r", "-\t// filter options which are related to the formatter component\r", "-\tString componentName = CodeFormatter.class.getName();\r", "-\tfor (int i = 0, max = settings.length; i < max; i++){\r", "-\t\tif (settings[i].getComponentName().equals(componentName)){\r", "-\t\t\tthis.setOption(settings[i]);\r", "+\t// filter options which are related to the assist component\r", "+\tObject[] entries = settings.entrySet().toArray();\r", "+\tfor (int i = 0, max = entries.length; i < max; i++){\r", "+\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "+\t\tif (!(entry.getKey() instanceof String)) continue;\r", "+\t\tif (!(entry.getValue() instanceof String)) continue;\r", "+\t\tString optionID = (String) entry.getKey();\r", "+\t\tString optionValue = (String) entry.getValue();\r", "+\t\t\r", "+\t\tif(optionID.equals(OPTION_InsertNewlineBeforeOpeningBrace)){\r", "+\t\t\tif (optionValue.equals(INSERT)){\r", "+\t\t\t\tthis.newLineBeforeOpeningBraceMode = true;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_INSERT)){\r", "+\t\t\t\tthis.newLineBeforeOpeningBraceMode = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_InsertNewlineInControlStatement)){\r", "+\t\t\tif (optionValue.equals(INSERT)){\r", "+\t\t\t\tthis.newlineInControlStatementMode = true;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_INSERT)){\r", "+\t\t\t\tthis.newlineInControlStatementMode = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_ClearAllBlankLines)){\r", "+\t\t\tif (optionValue.equals(CLEAR_ALL)){\r", "+\t\t\t\tthis.clearAllBlankLinesMode = true;\r", "+\t\t\t} else if (optionValue.equals(PRESERVE_ONE)){\r", "+\t\t\t\tthis.clearAllBlankLinesMode = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_InsertNewLineBetweenElseAndIf)){\r", "+\t\t\tif (optionValue.equals(INSERT)){\r", "+\t\t\t\tthis.compactElseIfMode = false;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_INSERT)){\r", "+\t\t\t\tthis.compactElseIfMode = true;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_InsertNewLineInEmptyBlock)){\r", "+\t\t\tif (optionValue.equals(INSERT)){\r", "+\t\t\t\tthis.newLineInEmptyBlockMode = true;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_INSERT)){\r", "+\t\t\t\tthis.newLineInEmptyBlockMode = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_SplitLineExceedingLength)){\r", "+\t\t\ttry {\r", "+\t\t\t\tint val = Integer.parseInt(optionValue);\r", "+\t\t\t\tif (val >= 0) this.maxLineLength = val;\r", "+\t\t\t} catch(NumberFormatException e){\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_CompactAssignment)){\r", "+\t\t\tif (optionValue.equals(COMPACT)){\r", "+\t\t\t\tthis.compactAssignmentMode = true;\r", "+\t\t\t} else if (optionValue.equals(NORMAL)){\r", "+\t\t\t\tthis.compactAssignmentMode = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_TabulationChar)){\r", "+\t\t\tif (optionValue.equals(TAB)){\r", "+\t\t\t\tthis.indentWithTab = true;\r", "+\t\t\t} else if (optionValue.equals(SPACE)){\r", "+\t\t\t\tthis.indentWithTab = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif(optionID.equals(OPTION_TabulationSize)){\r", "+\t\t\ttry {\r", "+\t\t\t\tint val = Integer.parseInt(optionValue);\r", "+\t\t\t\tif (val > 0) this.tabSize = val;\r", "+\t\t\t} catch(NumberFormatException e){\r", "+\t\t\t}\r"]}], "num": 47547}
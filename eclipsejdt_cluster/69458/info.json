{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d63582a48d0ac2c607ab8fe8aff292b5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "018be990e50564bc7a28d2d6c01e20cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprotected int startBuild(Hashtable options) throws IOException, CoreException", "signatureAfterChange": " \tprotected void startBuild(Hashtable options, boolean noWarning) throws IOException, CoreException", "diff": ["-\tprotected int startBuild(Hashtable options) throws IOException, CoreException {", "+\tprotected void startBuild(Hashtable options, boolean noWarning) throws IOException, CoreException {", "+\t\t", "+\t\t// Clean memory", "+\t\trunGc();", "+\t\t", "+\t\t// Measure", "+\t\t", "+\t\t// Verify markers", "+\t\tList resources = new ArrayList();", "+\t\tList messages = new ArrayList();", "-\t\t\t\t\tassertTrue(\"Unexpected marker: \" + marker.getAttribute(IMarker.MESSAGE), false);", "+\t\t\t\t\tresources.add(marker.getResource().getName());", "+\t\t\t\t\tmessages.add(marker.getAttribute(IMarker.MESSAGE));", "+\t\t\t\t\tif (noWarning) {", "+\t\t\t\t\t\tresources.add(marker.getResource().getName());", "+\t\t\t\t\t\tmessages.add(marker.getAttribute(IMarker.MESSAGE));", "+\t\t\t\t\t}", "-\t\tif (DEBUG) System.out.println(\"done\");", "-\t\t{", "-\t\t\tcommitMeasurements();", "-\t\t\tassertPerformance();", "+\t\t", "+\t\t// Assert result", "+\t\tint size = messages.size();", "+\t\tif (size > 0) {", "+\t\t\t/*", "+\t\t\tif (LOG_DIR == null) {", "+\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tint max = size > 10 ? 10 : size;", "+\t\t\t\tfor (int i=0; i<max; i++) {", "+\t\t\t\t\tbuffer.append(resources.get(i));", "+\t\t\t\t\tbuffer.append(\":\\n\\t\");", "+\t\t\t\t\tbuffer.append(messages.get(i));", "+\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t}", "+\t\t\t\tif (size > max)", "+\t\t\t\t\tbuffer.append(\"...\\n\");", "+\t\t\t\tassertTrue(\"Unexpected marker(s):\\n\" + buffer.toString(), size==0);", "+\t\t\t}", "+\t\t\t*/", "+//\t\t\tif (LOG_DIR != null || DEBUG) {", "+\t\t\t\tStringBuffer debugBuffer = new StringBuffer();", "+\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\tdebugBuffer.append(resources.get(i));", "+\t\t\t\t\tdebugBuffer.append(\":\\n\\t\");", "+\t\t\t\t\tdebugBuffer.append(messages.get(i));", "+\t\t\t\t\tdebugBuffer.append('\\n');", "+\t\t\t\t}", "+\t\t\t\tSystem.out.println(\"ERROR: Unexpected marker(s):\\n\" + debugBuffer.toString());", "+//\t\t\t}", "-\t\treturn warnings;", "+\t\tif (DEBUG) System.out.println(\"done\");", "+\t\t", "+\t\t// Commit measure", "+\t\tcommitMeasurements();", "+\t\tassertPerformance();", "+", "+\t\t// Store warning", "+\t\tif (warnings>0) {", "+\t\t\tSystem.out.println(\"\\t- \"+warnings+\" warnings found while performing build.\");", "+\t\t}", "+\t\tif (this.scenarioComment == null) {", "+\t\t\tthis.scenarioComment = new StringBuffer(\"[\"+TEST_POSITION+\"]\");", "+\t\t} else {", "+\t\t\tthis.scenarioComment.append(' ');", "+\t\t}", "+\t\tthis.scenarioComment.append(\"warn=\");", "+\t\tthis.scenarioComment.append(warnings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a27bdec103d894281fdff704a92c20c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tpublic void testExampleSnippets()", "signatureAfterChange": " \tpublic void testExampleSnippets()", "diff": ["-\t\t\t// public class MyClass {}", "+\t\t\t// /** Spec. \\n @deprecated Use {@link #foo() bar} instead. */public class MyClass {}", "+\t\t\t{ ", "+\t\t\t\tJavadoc jd = localAst.newJavadoc();", "+\t\t\t\tTextElement tx1 = localAst.newTextElement();", "+\t\t\t\ttx1.setText(\"Spec.\"); //$NON-NLS-1$", "+\t\t\t\tjd.fragments().add(tx1);", "+\t\t\t\tTagElement tg1 = localAst.newTagElement();", "+\t\t\t\ttg1.setTagName(\"@deprecated\");", "+\t\t\t\tjd.fragments().add(tg1);", "+\t\t\t\tTextElement tx2 = localAst.newTextElement();", "+\t\t\t\ttx2.setText(\"Use \"); //$NON-NLS-1$", "+\t\t\t\ttg1.fragments().add(tx2);", "+\t\t\t\tTagElement tg2 = localAst.newTagElement();", "+\t\t\t\ttg2.setTagName(\"@link\");", "+\t\t\t\ttg1.fragments().add(tg2);", "+\t\t\t\tMethodRef mr1 = localAst.newMethodRef();", "+\t\t\t\tmr1.setName(localAst.newSimpleName(\"foo\"));", "+\t\t\t\ttg2.fragments().add(mr1);", "+\t\t\t\tTextElement tx3 = localAst.newTextElement();", "+\t\t\t\ttx3.setText(\"bar\"); //$NON-NLS-1$", "+\t\t\t\ttg2.fragments().add(tx3);", "+\t\t\t\tTextElement tx4 = localAst.newTextElement();", "+\t\t\t\ttx2.setText(\" instead.\"); //$NON-NLS-1$", "+\t\t\t\ttg1.fragments().add(tx4);", "+\t\t\t}", "+\t\t\t", "-\t\t\t// new String[len]", "+\t\t\t// new String[len];", "-\t\t\t// new double[7][24][]", "+\t\t\t// new double[7][24][];", "-\t\t\t// new int[] {1, 2}", "+\t\t\t// new int[] {1, 2};", "-\t\t\t// new String(10)", "+\t\t\t// new String(10);", "-\t\t\t// new Listener() {public void handleEvent() {} }", "+\t\t\t// new Listener() {public void handleEvent() {} };"]}], "num": 69458}
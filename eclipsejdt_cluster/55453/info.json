{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27f4e0debb6bfc78b7da90cebbcbefcc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "176898c104ae5382101ae0af7066fcd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnQualifiedAllocationExpression.java", "commitBeforeChange": "175caf4c91bc68c67c64b6e69e5b88fec75be023", "commitAfterChange": "2a90eeb9372f2a1a1f5e7c24d7c19363b361caf2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) this.resolvedType, null, this.argumentTypes, scope);", "+\t\t\tTypeBinding [] inferredTypes = inferElidedTypes(scope);", "-\t\t\t\tthis.resolvedType = this.type.resolvedType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) this.resolvedType).genericType(), inferredTypes, ((ParameterizedTypeBinding) this.resolvedType).enclosingType());", "+\t\t\t\tthis.resolvedType = this.type.resolvedType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) this.resolvedType).genericType(), inferredTypes, this.resolvedType.enclosingType());", "-\t\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) this.resolvedType, null, this.argumentTypes, scope);", "+\t\t\tTypeBinding [] inferredTypes = inferElidedTypes(scope);", "-\t\t\t\tthis.resolvedType = this.type.resolvedType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) this.resolvedType).genericType(), inferredTypes, ((ParameterizedTypeBinding) this.resolvedType).enclosingType());", "+\t\t\t\tthis.resolvedType = this.type.resolvedType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) this.resolvedType).genericType(), inferredTypes, this.resolvedType.enclosingType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b1ce9321f37353f5b3a5e186c03368b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ClassLiteralAccess.java", "commitBeforeChange": "86b8e70451f4ec33e6daeb2b78ea1a55e7dd9f04", "commitAfterChange": "4879589dece74c87985bbb7dbce3e5245c30d324", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (targetType.isArrayType()", "-\t\t\t&& ((ArrayBinding) targetType).leafComponentType == TypeBinding.VOID) {", "-\t\t\tscope.problemReporter().cannotAllocateVoidArray(this);", "-\t\t\treturn null;", "-\t\t} else if (targetType.isTypeVariable()) {", "+\t\tif (targetType.isArrayType()) {", "+\t\t\tArrayBinding arrayBinding = (ArrayBinding) this.targetType;", "+\t\t\tTypeBinding leafComponentType = arrayBinding.leafComponentType;", "+\t\t\tif (leafComponentType == TypeBinding.VOID) {", "+\t\t\t\tscope.problemReporter().cannotAllocateVoidArray(this);", "+\t\t\t\treturn null;", "+\t\t\t} else if (leafComponentType.isTypeVariable()) {", "+\t\t\t\tscope.problemReporter().illegalClassLiteralForTypeVariable((TypeVariableBinding)leafComponentType, this);", "+\t\t\t}", "+\t\t} else if (this.targetType.isTypeVariable()) {", "-\t\t    // Integer.class --> Class<Integer>, perform boxing of base types (int.class --> Class<Integer>)", "+\t\t\t// Integer.class --> Class<Integer>, perform boxing of base types (int.class --> Class<Integer>)", "-\t\t    this.resolvedType = scope.environment().createParameterizedType(classType, new TypeBinding[]{ boxedType }, null/*not a member*/);", "+\t\t\tthis.resolvedType = scope.environment().createParameterizedType(classType, new TypeBinding[]{ boxedType }, null/*not a member*/);", "-\t\t    this.resolvedType = classType;", "+\t\t\tthis.resolvedType = classType;"]}], "num": 55453}
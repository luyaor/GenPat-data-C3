{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8cadff78c8ad727e565a33ea9f6a9685", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ee284465b225449f4e239580657228c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "91b3ef4365537e98d5044d4777c3bb7d5dfb005a", "commitAfterChange": "190d9879f2bead2bc707cc291e46021dcf68fe91", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void acceptTypeNameMatch(TypeNameMatch match)", "signatureAfterChange": " \tpublic void acceptTypeNameMatch(TypeNameMatch match)", "diff": ["-\tpublic String[] results = new String[10];", "+\tList matches = new ArrayList();", "-\t\tint length = results.length;", "-\t\tif (++index > length) {", "-\t\t\tSystem.arraycopy(results, 0, results = new String[length+10], 0, length);", "-\t\t}", "-\t\ttry {", "-\t\t\tIType type = match.getType();", "-\t\t\tif (type != null) {", "-\t\t\t\tresults[index] = type.toString();", "-\t\t\t}", "-\t\t}", "-\t\tcatch (JavaModelException jme) {", "-\t\t\tassertTrue(\"We should not have any JavaModel exception! Message:\"+jme.getMessage(), false);", "+\t\tIType type = match.getType();", "+\t\tif (type != null) {", "+\t\t\tthis.matches.add(type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "675fbae63f403599c540816ab3665ffa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 386, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void acceptTypeNameMatch(TypeNameMatch match)", "signatureAfterChange": " \tpublic void acceptTypeNameMatch(TypeNameMatch match)", "diff": ["+\tpublic String[] results = new String[10];", "+\tpublic void acceptTypeNameMatch(TypeNameMatch match) {", "+\t\tint length = results.length;", "+\t\tif (++index > length) {", "+\t\t\tSystem.arraycopy(results, 0, results = new String[length+10], 0, length);", "+\t\t}", "+\t\ttry {", "+\t\t\tIType type = match.getType();", "+\t\t\tif (type != null) {", "+\t\t\t\tresults[index] = type.toString();", "+\t\t\t}", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\tassertTrue(\"We should not have any JavaModel exception! Message:\"+jme.getMessage(), false);", "+\t\t}", "+\t}", "-\tpublic StringBuffer results = new StringBuffer();", "-\tpublic void acceptTypeNameMatch(TypeNameMatch match) {", "-\t\tif (results.length() > 0) results.append('\\n');", "-\t\ttry {", "-\t\t\tIType type = match.resolvedType();", "-\t\t\tif (type != null) {", "-\t\t\t\tresults.append(type.toString());", "-\t\t\t}", "-\t\t}", "-\t\tcatch (JavaModelException jme) {", "-\t\t\tassertTrue(\"We should not have no JavaModel exception! Message:\"+jme.getMessage(), false);", "-\t\t}", "-\t}"]}], "num": 50887}
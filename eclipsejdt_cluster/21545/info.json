{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4edb64f7de1c504c48dfa1e657be224", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e5a4089ba3f7a635f66748ff196bb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tprivate void disassemble(IEnclosingMethodAttribute enclosingMethodAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IStackMapAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+", "+\tprivate void disassemble(IStackMapAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "+\t\tint numberOfEntries = attribute.getNumberOfEntries();", "+\t\tfinal IStackMapFrame[] stackMapFrames = attribute.getStackMapFrame();", "+\t\tint absolutePC = -1;", "+\t\tfor (int j = 0; j < numberOfEntries; j++) {", "+\t\t\tif (j > 0) {", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "+\t\t\t}", "+\t\t\tfinal IStackMapFrame frame = stackMapFrames[j];", "+\t\t\t// disassemble each frame", "+\t\t\tint offsetDelta = frame.getOffsetDelta();", "+\t\t\tif (absolutePC == -1) {", "+\t\t\t\tabsolutePC = offsetDelta;", "+\t\t\t} else {", "+\t\t\t\tabsolutePC += (offsetDelta + 1);", "+\t\t\t}", "+\t\t\t// FULL_FRAME", "+\t\t\tbuffer.append(", "+\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\tMessages.disassembler_frame_full_frame,", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\tInteger.toString(frame.getNumberOfLocals()),", "+\t\t\t\t\t\t\tdisassemble(frame.getLocals(), mode),", "+\t\t\t\t\t\t\tInteger.toString(frame.getNumberOfStackItems()),", "+\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), mode),", "+\t\t\t\t\t\t\tdumpNewLineWithTabs(lineSeparator, tabNumber + 5)", "+\t\t\t\t\t\t}));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cea915d9328f152483b1a18aa8aa54b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate void disassemble(IStackMapFrame frame, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \t \tprivate void disassemble(IStackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\t", "+\tprivate void disassemble(IStackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "+\t\tint numberOfEntries = attribute.getNumberOfEntries();", "+\t\tfinal IStackMapFrame[] stackMapFrames = attribute.getStackMapFrame();", "+\t\tint absolutePC = -1;", "+\t\tfor (int j = 0; j < numberOfEntries; j++) {", "+\t\t\tif (j > 0) {", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "+\t\t\t}", "+\t\t\tfinal IStackMapFrame frame = stackMapFrames[j];", "+\t\t\t// disassemble each frame", "+\t\t\tint type = frame.getFrameType();", "+\t\t\tint offsetDelta = frame.getOffsetDelta();", "+\t\t\tif (absolutePC == -1) {", "+\t\t\t\tabsolutePC = offsetDelta;", "+\t\t\t} else {", "+\t\t\t\tabsolutePC += (offsetDelta + 1);", "+\t\t\t}", "+\t\t\tswitch(type) {", "+\t\t\t\tcase 247 : // SAME_LOCALS_1_STACK_ITEM_EXTENDED", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\tMessages.disassembler_frame_same_locals_1_stack_item_extended,", "+\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), mode)));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 248 :", "+\t\t\t\tcase 249 :", "+\t\t\t\tcase 250:", "+\t\t\t\t\t// CHOP", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\tMessages.disassembler_frame_chop,", "+\t\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\t\tInteger.toString(251 - type)));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 251 :", "+\t\t\t\t\t// SAME_FRAME_EXTENDED", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\tMessages.disassembler_frame_same_frame_extended,", "+\t\t\t\t\t\t\t\tInteger.toString(absolutePC)));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 252 :", "+\t\t\t\tcase 253 :", "+\t\t\t\tcase 254 :", "+\t\t\t\t\t// APPEND", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\tMessages.disassembler_frame_append,", "+\t\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\t\tdisassemble(frame.getLocals(), mode)));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 255 :", "+\t\t\t\t\t// FULL_FRAME", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\tMessages.disassembler_frame_full_frame,", "+\t\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\t\t\tInteger.toString(frame.getNumberOfLocals()),", "+\t\t\t\t\t\t\t\t\tdisassemble(frame.getLocals(), mode),", "+\t\t\t\t\t\t\t\t\tInteger.toString(frame.getNumberOfStackItems()),", "+\t\t\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), mode),", "+\t\t\t\t\t\t\t\t\tdumpNewLineWithTabs(lineSeparator, tabNumber + 5)", "+\t\t\t\t\t\t\t\t}));", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tif (type <= 63) {", "+\t\t\t\t\t\t// SAME_FRAME", "+\t\t\t\t\t\toffsetDelta = type;", "+\t\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\t\tMessages.disassembler_frame_same_frame,", "+\t\t\t\t\t\t\t\t\tInteger.toString(absolutePC)));", "+\t\t\t\t\t} else if (type <= 127) {", "+\t\t\t\t\t\t// SAME_LOCALS_1_STACK_ITEM", "+\t\t\t\t\t\toffsetDelta = type - 64;", "+\t\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\t\tMessages.disassembler_frame_same_locals_1_stack_item,", "+\t\t\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), mode)));", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "-\tprivate void disassemble(IStackMapFrame frame, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "-\t\t// disassemble each frame", "-\t\tint type = frame.getFrameType();", "-\t\tswitch(type) {", "-\t\t\tcase 247 : // SAME_LOCALS_1_STACK_ITEM_EXTENDED", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\tMessages.disassembler_frame_same_locals_1_stack_item_extended,", "-\t\t\t\t\t\tInteger.toString(frame.getOffsetDelta()),", "-\t\t\t\t\t\tdisassemble(frame.getStackItems(), lineSeparator, tabNumber + 1, mode)));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\tbreak;", "-\t\t\tcase 248 :", "-\t\t\tcase 249 :", "-\t\t\tcase 250:", "-\t\t\t\t// CHOP", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\tMessages.disassembler_frame_chop,", "-\t\t\t\t\t\t\tInteger.toString(frame.getOffsetDelta()),", "-\t\t\t\t\t\t\tInteger.toString(251 - type)));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\tbreak;", "-\t\t\tcase 251 :", "-\t\t\t\t// SAME_FRAME_EXTENDED", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\tMessages.disassembler_frame_same_frame_extended,", "-\t\t\t\t\t\t\tInteger.toString(frame.getOffsetDelta())));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\tbreak;", "-\t\t\tcase 252 :", "-\t\t\tcase 253 :", "-\t\t\tcase 254 :", "-\t\t\t\t// APPEND", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\tMessages.disassembler_frame_append,", "-\t\t\t\t\t\t\tInteger.toString(frame.getOffsetDelta()),", "-\t\t\t\t\t\t\tdisassemble(frame.getLocals(), lineSeparator, tabNumber + 1, mode)));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\tbreak;", "-\t\t\tcase 255 :", "-\t\t\t\t// FULL_FRAME", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\tMessages.disassembler_frame_full_frame,", "-\t\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\t\tInteger.toString(frame.getOffsetDelta()),", "-\t\t\t\t\t\t\t\tInteger.toString(frame.getNumberOfLocals()),", "-\t\t\t\t\t\t\t\tdisassemble(frame.getLocals(), lineSeparator, tabNumber + 1, mode),", "-\t\t\t\t\t\t\t\tInteger.toString(frame.getNumberOfStackItems()),", "-\t\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), lineSeparator, tabNumber + 1, mode),", "-\t\t\t\t\t\t\t\tdumpNewLineWithTabs(lineSeparator, tabNumber + 2)", "-\t\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\tif (type <= 63) {", "-\t\t\t\t\t// SAME_FRAME", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\t\tMessages.disassembler_frame_same_frame,", "-\t\t\t\t\t\t\t\tInteger.toString(type)));", "-\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\t} else if (type <= 127) {", "-\t\t\t\t\t// SAME_LOCALS_1_STACK_ITEM", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\t\tMessages.disassembler_frame_same_locals_1_stack_item,", "-\t\t\t\t\t\t\t\tInteger.toString(type - 64),", "-\t\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), lineSeparator, tabNumber + 1, mode)));", "-\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\t}", "-\t\t}", "-\t}"]}], "num": 21545}
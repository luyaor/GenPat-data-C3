{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d2866e292be877c88acd5d360eef6d4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84fc620b2663c995e01aa60debbeeac8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "5194065a29db2efb6ca399235812dc2379a0b639", "commitAfterChange": "64dc9dc143f648f63c2998f7d684fab052c282d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tIBinding resolveName(Name name)", "signatureAfterChange": "\r \tIBinding resolveName(Name name)", "diff": ["+\t\t} else if (node instanceof QualifiedNameReference) {\r", "+\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;\r", "+\t\t\tif (qualifiedNameReference.isFieldReference()) {\r", "+\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.fieldBinding());\r", "+\t\t\t} else if (qualifiedNameReference.isTypeReference()) {\r", "+\t\t\t\tthis.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "+\t\t\t} else {\r", "+\t\t\t\t// this is a variable\r", "+\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.binding);\t\t\t\t\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b812a7c3ef83db65c9783e61506fff0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "6aabdcd171f339f5a1437276969cd405c6481646", "commitAfterChange": "2d4a756131aa4736b3ab0f82fa39c5aa3a093216", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \t\r \tprivate IBinding internalResolveNameForFieldAccess(Name name)", "signatureAfterChange": "\r \t\r \tprivate IBinding internalResolveNameForFieldAccess(Name name)", "diff": ["-\t\tAstNode node = (AstNode) this.newAstToOldAst.get(name);\r", "-\t\tif (node instanceof FieldReference) {\r", "-\t\t\treturn getVariableBinding(((FieldReference) node).binding);\r", "-\t\t} else if (node instanceof QualifiedSuperReference) {\r", "-\t\t\tQualifiedSuperReference qualifiedSuperReference = (QualifiedSuperReference) node;\r", "-\t\t\treturn this.getTypeBinding(qualifiedSuperReference.qualification.binding);\r", "+\t\tif (name.isQualifiedName()) {\r", "+\t\t\treturn this.internalResolveNameForQualifiedName(name);\r", "+\t\t} else {\r", "+\t\t\treturn this.internalResolveNameForSimpleName(name);\r", "-\t\treturn null;\r", "-\t}\t\r", "+\t}\r"]}], "num": 10156}
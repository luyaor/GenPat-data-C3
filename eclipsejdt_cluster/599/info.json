{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6447309fe7f84c12f1cc069ce90241ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e3db1cc6ebc799a5b1c277652b48205", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 15, "signatureBeforeChange": "  private static long copyType(char[] signature, int sigPos, char[] dest, int index, boolean fullyQualifyTypeNames)", "signatureAfterChange": " private static int scanBaseTypeSignature(char[] string, int start)", "diff": ["-private static long copyType(char[] signature, int sigPos, char[] dest, int index, boolean fullyQualifyTypeNames) {", "-\tint arrayCount = 0;", "-\tloop: while (true) {", "-\t\tswitch (signature[sigPos++]) {", "-\t\t\tcase C_ARRAY :", "-\t\t\t\tarrayCount++;", "-\t\t\t\tbreak;", "-\t\t\tcase C_BOOLEAN :", "-\t\t\t\tint length = BOOLEAN.length;", "-\t\t\t\tSystem.arraycopy(BOOLEAN, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_BYTE :", "-\t\t\t\tlength = BYTE.length;", "-\t\t\t\tSystem.arraycopy(BYTE, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_CHAR :", "-\t\t\t\tlength = CHAR.length;", "-\t\t\t\tSystem.arraycopy(CHAR, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_DOUBLE :", "-\t\t\t\tlength = DOUBLE.length;", "-\t\t\t\tSystem.arraycopy(DOUBLE, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_FLOAT :", "-\t\t\t\tlength = FLOAT.length;", "-\t\t\t\tSystem.arraycopy(FLOAT, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_INT :", "-\t\t\t\tlength = INT.length;", "-\t\t\t\tSystem.arraycopy(INT, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_LONG :", "-\t\t\t\tlength = LONG.length;", "-\t\t\t\tSystem.arraycopy(LONG, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_SHORT :", "-\t\t\t\tlength = SHORT.length;", "-\t\t\t\tSystem.arraycopy(SHORT, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_VOID :", "-\t\t\t\tlength = VOID.length;", "-\t\t\t\tSystem.arraycopy(VOID, 0, dest, index, length);", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t\tcase C_RESOLVED :", "-\t\t\tcase C_UNRESOLVED :", "-\t\t\t\tint end = CharOperation.indexOf(C_SEMICOLON, signature, sigPos);", "-\t\t\t\tif (end == -1) throw new IllegalArgumentException();", "-\t\t\t\tint start;", "-\t\t\t\tif (fullyQualifyTypeNames) {", "-\t\t\t\t\tstart = sigPos;", "-\t\t\t\t} else {", "-\t\t\t\t\tstart = CharOperation.lastIndexOf(C_DOT, signature, sigPos, end)+1;", "-\t\t\t\t\tif (start == 0) start = sigPos;", "-\t\t\t\t} ", "-\t\t\t\tlength = end-start;", "-\t\t\t\tSystem.arraycopy(signature, start, dest, index, length);", "-\t\t\t\tsigPos = end+1;", "-\t\t\t\tindex += length;", "-\t\t\t\tbreak loop;", "-\t\t}", "-\t}", "-\twhile (arrayCount-- > 0) {", "-\t\tdest[index++] = '[';", "-\t\tdest[index++] = ']';", "-\t}", "-\treturn (((long) index) << 32) + sigPos;", "-}", "+ */", "+private static int scanBaseTypeSignature(char[] string, int start) {", "+\t// need a minimum 1 char", "+\tif (start >= string.length) {", "+\t\tthrow new IllegalArgumentException();", "+\t}", "+\tchar c = string[start];", "+\tif (\"BCDFIJSVZ\".indexOf(c) >= 0) { //$NON-NLS-1$", "+\t\treturn start;", "+\t} else {", "+\t\tthrow new IllegalArgumentException();", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40a90e618762cfe87ddc2b5b69f22ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tvoid computeSignature(String signature)", "signatureAfterChange": " \tpublic final boolean hasTypeParameters()", "diff": ["-\t */", "-\tvoid computeSignature(String signature) {", "-\t\t// In case of IJavaElement signature, replace '/' by '.'", "-\t\tchar[] source = signature.replace('/','.').replace('$','.').toCharArray();", "-", "-\t\t// Init counters and arrays", "-\t\tchar[][] signatures = new char[10][];", "-\t\tint signaturesCount = 0;", "-\t\tint[] lengthes = new int [10];", "-\t\tint typeArgsCount = 0;", "-\t\tint paramOpening = 0;", "-\t\tboolean parameterized = false;", "-\t\t", "-\t\t// Scan each signature character", "-\t\tfor (int idx=0, ln = source.length; idx < ln; idx++) {", "-\t\t\tswitch (source[idx]) {", "-\t\t\t\tcase '>':", "-\t\t\t\t\tparamOpening--;", "-\t\t\t\t\tif (paramOpening == 0)  {", "-\t\t\t\t\t\tif (signaturesCount == lengthes.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(signatures, 0, signatures = new char[signaturesCount+10][], 0, signaturesCount);", "-\t\t\t\t\t\t\tSystem.arraycopy(lengthes, 0, lengthes = new int[signaturesCount+10], 0, signaturesCount);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tlengthes[signaturesCount] = typeArgsCount;", "-\t\t\t\t\t\ttypeArgsCount = 0;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '<':", "-\t\t\t\t\tparamOpening++;", "-\t\t\t\t\tif (paramOpening == 1) {", "-\t\t\t\t\t\ttypeArgsCount = 0;", "-\t\t\t\t\t\tparameterized = true;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '*':", "-\t\t\t\tcase ';':", "-\t\t\t\t\tif (paramOpening == 1) typeArgsCount++;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '.':", "-\t\t\t\t\tif (paramOpening == 0)  {", "-\t\t\t\t\t\tif (signaturesCount == lengthes.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(signatures, 0, signatures = new char[signaturesCount+10][], 0, signaturesCount);", "-\t\t\t\t\t\t\tSystem.arraycopy(lengthes, 0, lengthes = new int[signaturesCount+10], 0, signaturesCount);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsignatures[signaturesCount] = new char[idx+1];", "-\t\t\t\t\t\tSystem.arraycopy(source, 0, signatures[signaturesCount], 0, idx);", "-\t\t\t\t\t\tsignatures[signaturesCount][idx] = Signature.C_SEMICOLON;", "-\t\t\t\t\t\tsignaturesCount++;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t// Store signatures and type arguments", "-\t\tthis.typeSignatures = new char[signaturesCount+1][];", "-\t\tif (parameterized)", "-\t\t\tthis.typeArguments = new char[signaturesCount+1][][];", "-\t\tthis.typeSignatures[0] = source;", "-\t\tif (parameterized) {", "-\t\t\tthis.typeArguments[0] = Signature.getTypeArguments(source);", "-\t\t\tif (lengthes[signaturesCount] != this.typeArguments[0].length) {", "-\t\t\t\t// TODO (frederic) abnormal signature => should raise an error", "-\t\t\t}", "-\t\t}", "-\t\tfor (int i=1, j=signaturesCount-1; i<=signaturesCount; i++, j--){", "-\t\t\tthis.typeSignatures[i] = signatures[j];", "-\t\t\tif (parameterized) {", "-\t\t\t\tthis.typeArguments[i] = Signature.getTypeArguments(signatures[j]);", "-\t\t\t\tif (lengthes[j] != this.typeArguments[i].length) {", "-\t\t\t\t\t// TODO (frederic) abnormal signature => should raise an error", "+\t */", "+\tpublic final boolean hasTypeParameters() {", "+\t\treturn !hasSignatures() && hasTypeArguments();", "+\t}"]}], "num": 599}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b14eef01615e1388c2e98f230834861e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cfcfaebbe24f9bc22a6adba9002c47b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public boolean build(SimpleLookupTable deltas)", "signatureAfterChange": "  public boolean build(SimpleLookupTable deltas)", "diff": ["-\t\tnotifier.subTask(Messages.build_analyzingDeltas); ", "-\t\tIResourceDelta sourceDelta = (IResourceDelta) deltas.get(javaBuilder.currentProject);", "-\t\tif (sourceDelta != null)", "-\t\t\tif (!findSourceFiles(sourceDelta)) return false;", "-\t\tnotifier.updateProgressDelta(0.10f);", "+\t\tnotifier.subTask(Messages.build_analyzingDeltas);", "+\t\tif (javaBuilder.hasBuildpathErrors()) {", "+\t\t\t// if a mssing class file was detected in the last build, a build state was saved since its no longer fatal", "+\t\t\t// but we need to rebuild every source file since problems were not recorded", "+\t\t\t// AND to avoid the infinite build scenario if this project is involved in a cycle, see bug 160550", "+\t\t\t// we need to avoid unnecessary deltas caused by doing a full build in this case", "+\t\t\tjavaBuilder.currentProject.deleteMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_ZERO);", "+\t\t\taddAllSourceFiles(sourceFiles);", "+\t\t\tnotifier.updateProgressDelta(0.25f);", "+\t\t} else {", "+\t\t\tIResourceDelta sourceDelta = (IResourceDelta) deltas.get(javaBuilder.currentProject);", "+\t\t\tif (sourceDelta != null)", "+\t\t\t\tif (!findSourceFiles(sourceDelta)) return false;", "+\t\t\tnotifier.updateProgressDelta(0.10f);", "-\t\tObject[] keyTable = deltas.keyTable;", "-\t\tObject[] valueTable = deltas.valueTable;", "-\t\tfor (int i = 0, l = valueTable.length; i < l; i++) {", "-\t\t\tIResourceDelta delta = (IResourceDelta) valueTable[i];", "-\t\t\tif (delta != null) {", "-\t\t\t\tIProject p = (IProject) keyTable[i];", "-\t\t\t\tClasspathLocation[] classFoldersAndJars = (ClasspathLocation[]) javaBuilder.binaryLocationsPerProject.get(p);", "-\t\t\t\tif (classFoldersAndJars != null)", "-\t\t\t\t\tif (!findAffectedSourceFiles(delta, classFoldersAndJars, p)) return false;", "+\t\t\tObject[] keyTable = deltas.keyTable;", "+\t\t\tObject[] valueTable = deltas.valueTable;", "+\t\t\tfor (int i = 0, l = valueTable.length; i < l; i++) {", "+\t\t\t\tIResourceDelta delta = (IResourceDelta) valueTable[i];", "+\t\t\t\tif (delta != null) {", "+\t\t\t\t\tIProject p = (IProject) keyTable[i];", "+\t\t\t\t\tClasspathLocation[] classFoldersAndJars = (ClasspathLocation[]) javaBuilder.binaryLocationsPerProject.get(p);", "+\t\t\t\t\tif (classFoldersAndJars != null)", "+\t\t\t\t\t\tif (!findAffectedSourceFiles(delta, classFoldersAndJars, p)) return false;", "+\t\t\t\t}", "-\t\t}", "-\t\tnotifier.updateProgressDelta(0.10f);", "+\t\t\tnotifier.updateProgressDelta(0.10f);", "-\t\tnotifier.subTask(Messages.build_analyzingSources); ", "-\t\taddAffectedSourceFiles();", "-\t\tnotifier.updateProgressDelta(0.05f);", "+\t\t\tnotifier.subTask(Messages.build_analyzingSources); ", "+\t\t\taddAffectedSourceFiles();", "+\t\t\tnotifier.updateProgressDelta(0.05f);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcf42b1179eb747e18c8365f8426db8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "9cad13dc2bab42b3a3dc14ba8cd1b82a5b440537", "commitAfterChange": "6c2aab4fe1b0b20513b890c178ac138b7c1a6682", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t// TODO (olivier) would improve to compute key once and cache it", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tbuffer.append(this.getDeclaringClass().getKey());", "-\t\tbuffer.append('/');", "-\t\tITypeBinding _returnType = getReturnType();", "-\t\tif (_returnType != null) {", "-\t\t\tif (_returnType.isTypeVariable()) {", "-\t\t\t\tbuffer.append(_returnType.getQualifiedName());", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(_returnType.getKey());", "-\t\t\t}", "-\t\t}", "-\t\tif (!isConstructor()) {", "-\t\t\tbuffer.append(this.getName());", "-\t\t}", "-\t\tITypeBinding[] parameters = getParameterTypes();", "-\t\tbuffer.append('(');", "-\t\tfor (int i = 0, max = parameters.length; i < max; i++) {", "-\t\t\tfinal ITypeBinding parameter = parameters[i];", "-\t\t\tif (parameter != null) {", "-\t\t\t\tif (parameter.isTypeVariable()) {", "-\t\t\t\t\tbuffer.append(parameter.getQualifiedName());", "+\t\tif (this.key == null) {", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tbuffer.append(this.getDeclaringClass().getKey());", "+\t\t\tbuffer.append('/');", "+\t\t\tITypeBinding _returnType = getReturnType();", "+\t\t\tif (_returnType != null) {", "+\t\t\t\tif (_returnType.isTypeVariable()) {", "+\t\t\t\t\tbuffer.append(_returnType.getQualifiedName());", "-\t\t\t\t\tbuffer.append(parameter.getKey());", "+\t\t\t\t\tbuffer.append(_returnType.getKey());", "-\t\t}", "-\t\tbuffer.append(')');", "-\t\tITypeBinding[] thrownExceptions = getExceptionTypes();", "-\t\tfor (int i = 0, max = thrownExceptions.length; i < max; i++) {", "-\t\t\tfinal ITypeBinding thrownException = thrownExceptions[i];", "-\t\t\tif (thrownException != null) {", "-\t\t\t\tif (thrownException.isTypeVariable()) {", "-\t\t\t\t\tbuffer.append(thrownException.getQualifiedName());\t\t\t\t\t", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(thrownException.getKey());", "+\t\t\tif (!isConstructor()) {", "+\t\t\t\tbuffer.append(this.getName());", "+\t\t\t}", "+\t\t\tITypeBinding[] parameters = getParameterTypes();", "+\t\t\tbuffer.append('(');", "+\t\t\tfor (int i = 0, max = parameters.length; i < max; i++) {", "+\t\t\t\tfinal ITypeBinding parameter = parameters[i];", "+\t\t\t\tif (parameter != null) {", "+\t\t\t\t\tif (parameter.isTypeVariable()) {", "+\t\t\t\t\t\tbuffer.append(parameter.getQualifiedName());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(parameter.getKey());", "+\t\t\t\t\t}", "+\t\t\tbuffer.append(')');", "+\t\t\tITypeBinding[] thrownExceptions = getExceptionTypes();", "+\t\t\tfor (int i = 0, max = thrownExceptions.length; i < max; i++) {", "+\t\t\t\tfinal ITypeBinding thrownException = thrownExceptions[i];", "+\t\t\t\tif (thrownException != null) {", "+\t\t\t\t\tif (thrownException.isTypeVariable()) {", "+\t\t\t\t\t\tbuffer.append(thrownException.getQualifiedName());\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(thrownException.getKey());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.key = String.valueOf(buffer);", "-\t\treturn buffer.toString();", "+\t\treturn this.key;"]}], "num": 44404}
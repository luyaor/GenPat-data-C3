{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9ebc31c8b36f816a818cf2b60fd1ee6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e14c81803cca115b2ed611b11462dfc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 115, "signatureBeforeChange": "\t\t  \tpublic void testStringLiteralUnicode()", "signatureAfterChange": "\t\t  \tpublic void testStringLiteralUnicode()", "diff": ["-\t\tAST localAst = new AST();", "+\t\tAST localAst;", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tlocalAst = AST.newAST2();", "+\t\t} else {", "+\t\t\tlocalAst = AST.newAST3();", "+\t\t}", "-\t\tlocalAst = new AST();", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tlocalAst = AST.newAST2();", "+\t\t} else {", "+\t\t\tlocalAst = AST.newAST3();", "+\t\t}", "-\t\tlocalAst = new AST();", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tlocalAst = AST.newAST2();", "+\t\t} else {", "+\t\t\tlocalAst = AST.newAST3();", "+\t\t}", "-\t\tlocalAst = new AST();", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tlocalAst = AST.newAST2();", "+\t\t} else {", "+\t\t\tlocalAst = AST.newAST3();", "+\t\t}", "-\t\tlocalAst = new AST();", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tlocalAst = AST.newAST2();", "+\t\t} else {", "+\t\t\tlocalAst = AST.newAST3();", "+\t\t}", "-\t\tlocalAst = new AST();", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tlocalAst = AST.newAST2();", "+\t\t} else {", "+\t\t\tlocalAst = AST.newAST3();", "+\t\t}", "-\t\tlocalAst = new AST();", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tlocalAst = AST.newAST2();", "+\t\t} else {", "+\t\t\tlocalAst = AST.newAST3();", "+\t\t}", "-\t\tlocalAst = new AST();", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tlocalAst = AST.newAST2();", "+\t\t} else {", "+\t\t\tlocalAst = AST.newAST3();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f644297378d9186b45ca880e24522312", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c539ab4170e4fe0d8578cc8fb0121c9a797f5894", "commitAfterChange": "44363e0012bf09a8a44565479ae5740426ed378a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0) return;", "-\t\tif (this.binding == null || !this.binding.isValidBinding()) return;", "+\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0 || this.binding == null || !this.binding.isValidBinding()) ", "+\t\t\treturn;", "+\t\t", "+\t\tMethodBinding codegenBinding = this.binding.original();", "+\t\tSourceTypeBinding enclosingSourceType = currentScope.enclosingSourceType();", "-\t\t\t// if constructor from parameterized type got found, use the original constructor at codegen time", "-\t\t\tMethodBinding codegenBinding = this.binding.original();", "-", "-\t\t\tif (codegenBinding.isPrivate() && currentScope.enclosingSourceType() != (allocatedType = codegenBinding.declaringClass)) {", "+\t\t\tif (codegenBinding.isPrivate() && enclosingSourceType != (allocatedType = codegenBinding.declaringClass)) {", "+\t\t\treturn;", "+\t\t}", "+\t", "+\t\t// -----------------------------------   Only method references from now on -----------", "+\t\tif (this.binding.isPrivate()) {", "+\t\t\tif (enclosingSourceType != codegenBinding.declaringClass){", "+\t\t\t\tthis.syntheticAccessor = ((SourceTypeBinding)codegenBinding.declaringClass).addSyntheticMethod(codegenBinding, false /* not super access */);", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tif (this.lhs.isSuper()) {", "+\t\t\tSourceTypeBinding destinationType = enclosingSourceType;", "+\t\t\tif (this.lhs instanceof QualifiedSuperReference) { \t// qualified super", "+\t\t\t\tQualifiedSuperReference qualifiedSuperReference = (QualifiedSuperReference) this.lhs;", "+\t\t\t\tTypeReference qualification = qualifiedSuperReference.qualification;", "+\t\t\t\tif (!qualification.resolvedType.isInterface()) // we can't drop the bridge in I, it may not even be a source type.", "+\t\t\t\t\tdestinationType = (SourceTypeBinding) (qualifiedSuperReference.currentCompatibleType);", "+\t\t\t}", "+\t\t\t", "+\t\t\tthis.syntheticAccessor = destinationType.addSyntheticMethod(codegenBinding, true);", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tif (this.binding.isProtected() && (this.bits & ASTNode.DepthMASK) != 0 && codegenBinding.declaringClass.getPackage() != enclosingSourceType.getPackage()) {", "+\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding) enclosingSourceType.enclosingTypeAt((this.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT);", "+\t\t\tthis.syntheticAccessor = currentCompatibleType.addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "+\t\t\treturn;"]}], "num": 17634}
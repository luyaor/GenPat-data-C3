{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "317b6bff392b0870b907580f087eaacd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d7448aad3b77d2eb768c3b9c1002243", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java", "commitBeforeChange": "26246adf380e69c31de951eed4c0173edaa96dd1", "commitAfterChange": "2c076bc353a2d83c198fbf8764d9fb723677890e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public NameEnvironmentAnswer readClassFile(String filename, char[][] packageName)", "signatureAfterChange": "\r public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName)", "diff": ["-}\r", "-public NameEnvironmentAnswer readClassFile(String filename, char[][] packageName) {\r", "-\ttry {\r", "-\t\treturn new NameEnvironmentAnswer(\r", "-\t\t\tClassFileReader.read(path + FileSystem.assembleName(filename, packageName, File.separatorChar)));\r", "-\t} catch (Exception e) {\r", "-\t\treturn null; // treat as if class file is missing\r", "+public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName) {\r", "+\tif (!isPackage(qualifiedPackageName)) return null; // most common case\r", "+\r", "+\tString fileName = new String(typeName);\r", "+\tboolean binaryExists = doesFileExist(fileName + \".class\", qualifiedPackageName); //$NON-NLS-1$\r", "+\tboolean sourceExists = doesFileExist(fileName + \".java\", qualifiedPackageName); //$NON-NLS-1$\r", "+\tif (sourceExists) {\r", "+\t\tString fullSourcePath = path + qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + \".java\"; //$NON-NLS-1$\r", "+\t\tif (!binaryExists)\r", "+\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, this.encoding));\r", "+\r", "+\t\tString fullBinaryPath = path + qualifiedBinaryFileName;\r", "+\t\tlong binaryModified = new File(fullBinaryPath).lastModified();\r", "+\t\tlong sourceModified = new File(fullSourcePath).lastModified();\r", "+\t\tif (sourceModified > binaryModified)\r", "+\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, this.encoding));\r", "+\tif (binaryExists) {\r", "+\t\ttry {\r", "+\t\t\tClassFileReader reader = ClassFileReader.read(path + qualifiedBinaryFileName);\r", "+\t\t\tif (reader != null) return new NameEnvironmentAnswer(reader);\r", "+\t\t} catch (Exception e) {} // treat as if file is missing\r", "+\t}\r", "+\treturn null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b32c11db49e29efd117e16d2993ad1ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java", "commitBeforeChange": "71ca7b096c04e123348cb13b19efbd2de402f9f2", "commitAfterChange": "6872e25fe154a5852fcd3ac0c49b686e5e81ec7b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public NameEnvironmentAnswer readClassFile(String filename, char[][] packageName)", "signatureAfterChange": "\r public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName)", "diff": ["-}\r", "-public NameEnvironmentAnswer readClassFile(String filename, char[][] packageName) {\r", "-\ttry {\r", "-\t\treturn new NameEnvironmentAnswer(\r", "-\t\t\tClassFileReader.read(path + FileSystem.assembleName(filename, packageName, File.separatorChar)));\r", "-\t} catch (Exception e) {\r", "-\t\treturn null; // treat as if class file is missing\r", "+public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName) {\r", "+\tif (!isPackage(qualifiedPackageName)) return null; // most common case\r", "+\r", "+\tString fileName = new String(typeName);\r", "+\tboolean binaryExists = doesFileExist(fileName + \".class\", qualifiedPackageName); //$NON-NLS-1$\r", "+\tboolean sourceExists = doesFileExist(fileName + \".java\", qualifiedPackageName); //$NON-NLS-1$\r", "+\tif (sourceExists) {\r", "+\t\tString fullSourcePath = path + qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + \".java\"; //$NON-NLS-1$\r", "+\t\tif (!binaryExists)\r", "+\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, this.encoding));\r", "+\r", "+\t\tString fullBinaryPath = path + qualifiedBinaryFileName;\r", "+\t\tlong binaryModified = new File(fullBinaryPath).lastModified();\r", "+\t\tlong sourceModified = new File(fullSourcePath).lastModified();\r", "+\t\tif (sourceModified > binaryModified)\r", "+\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, this.encoding));\r", "+\tif (binaryExists) {\r", "+\t\ttry {\r", "+\t\t\tClassFileReader reader = ClassFileReader.read(path + qualifiedBinaryFileName);\r", "+\t\t\tif (reader != null) return new NameEnvironmentAnswer(reader);\r", "+\t\t} catch (Exception e) {} // treat as if file is missing\r", "+\t}\r", "+\treturn null;\r"]}], "num": 38778}
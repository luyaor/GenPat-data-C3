{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28e3d3e8ef4f8efeae8f4f22bcdabf4b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c0654f96f9aa22020faf413d4a54678", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/CharOperation.java", "commitBeforeChange": "b8a20093bfb53c812e4e5b346e3aa791a4136ca4", "commitAfterChange": "44731467d9fdac9a7d80b255708d1b40800e1d02", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public static final boolean match(char[] pattern, int patternStart, int patternLength, char[] name, int nameStart, int nameLength, boolean isCaseSensitive)", "signatureAfterChange": " public static final boolean match(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd, boolean isCaseSensitive)", "diff": ["-public static final boolean match(char[] pattern, int patternStart, int patternLength, char[] name, int nameStart, int nameLength, boolean isCaseSensitive) {", "+public static final boolean match(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd, boolean isCaseSensitive) {", "-\twhile ((iPattern < patternLength) && (patternChar = pattern[iPattern]) != '*'){", "-\t\tif (iName == nameLength) return false;", "+\twhile ((iPattern < patternEnd) && (patternChar = pattern[iPattern]) != '*'){", "+\t\tif (iName == nameEnd) return false;", "-\tcheckSegment: while (iName < nameLength && iPattern < patternLength){", "+\tcheckSegment: while (iName < nameEnd && iPattern < patternEnd){", "-\treturn (segmentStart == patternLength)", "-\t\t\t|| (iName == nameLength && iPattern == patternLength)\t", "-\t\t\t|| (iPattern == patternLength - 1 && pattern[iPattern] == '*'); ", "+\treturn (segmentStart == patternEnd)", "+\t\t\t|| (iName == nameEnd && iPattern == patternEnd)\t", "+\t\t\t|| (iPattern == patternEnd - 1 && pattern[iPattern] == '*'); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f628440930df4ea35f16e2cae8f39b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e593164022433d17467e437ca5f1d1580fcf9c34", "commitAfterChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  \tprivate ArrayType convertToArray(Type subType, int sourceStart, int length, int noOfDimensions, \t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDims)", "signatureAfterChange": "  \tprivate ArrayType convertToArray(Type elementType, int sourceStart, int length, int dimensions, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDimensions)", "diff": ["-\tprivate ArrayType convertToArray(Type subType, int sourceStart, int length, int noOfDimensions,", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDims) {", "-\t\tArrayType arrayType = this.ast.newArrayType(subType, noOfDimensions);", "+\tprivate ArrayType convertToArray(Type elementType, int sourceStart, int length, int dimensions, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDimensions) {", "+\t\tArrayType arrayType = this.ast.newArrayType(elementType, dimensions);", "-\t\t\tif (annotationsOnDims != null) {", "+\t\t\tif (annotationsOnDimensions != null) {", "-\t\t\tint index = noOfDimensions - 1;", "-\t\t\tint arrayEnd = retrieveProperRightBracketPosition(noOfDimensions, sourceStart);", "+\t\t\tint index = dimensions - 1;", "+\t\t\tint arrayEnd = retrieveProperRightBracketPosition(dimensions, sourceStart);", "-\t\tsetArrayTypeAnnotationsAndSource(arrayType, annotationsOnDims);", "+\t\tsetTypeAnnotationsAndSourceRangeOnArray(arrayType, annotationsOnDimensions);"]}], "num": 53297}
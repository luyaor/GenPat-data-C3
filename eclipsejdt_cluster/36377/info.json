{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a42a22530d3aae96e1f3c7b6fcc105c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "456e05cecdc3503d696c2c3e07925702", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["-\t\t\t\tif ((messageSend.bits & ASTNode.InsideJavadoc) != 0) {", "-\t\t\t\t\tid |= IProblem.Javadoc;", "-\t\t\t\t}", "-\tif ((messageSend.bits & ASTNode.InsideJavadoc) != 0) {", "-\t\tid |= IProblem.Javadoc;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3f2646782e4f78c7e52aab540919ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "10a7931aec1c8332a21c39057c6b5465506f45bd", "commitAfterChange": "ac67adfb696f3d698561eed93e542c7d574b5a91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=185682", "-\tif (!valueRequired && ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.LOCAL)) {", "-\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "-\t\tif (localBinding.useFlag == LocalVariableBinding.FAKE_USED) {", "-\t\t\t// compound assignment is the only usage of this local", "-\t\t\treportOnlyUselesslyReadLocal(currentScope, localBinding);", "-\t\t}", "-\t}"]}], "num": 36377}
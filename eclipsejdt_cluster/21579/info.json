{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36464ec11e66447b0d5c08ca6b2a5107", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "992087495bfa073dae3e0539efbbaa52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f11400a6293169aae30e17b2e27f5adb8ea51511", "commitAfterChange": "f04e3f1ae3453f83dbe0aa3f6ea76c9c43c152ce", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \tprotected void initializeDefaultPluginPreferences()", "signatureAfterChange": "\r \tprotected void initializeDefaultPluginPreferences()", "diff": ["-\t\r", "+\t\tHashSet optionNames = JavaModelManager.getJavaModelManager().OptionNames;\r", "+\t\t\r", "+\t\toptionNames.add(COMPILER_LOCAL_VARIABLE_ATTR);\r", "+\r", "+\t\toptionNames.add(COMPILER_LINE_NUMBER_ATTR);\r", "+\r", "+\t\toptionNames.add(COMPILER_SOURCE_FILE_ATTR);\r", "+\r", "+\t\toptionNames.add(COMPILER_CODEGEN_UNUSED_LOCAL);\r", "+\r", "+\t\toptionNames.add(COMPILER_CODEGEN_TARGET_PLATFORM);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_UNREACHABLE_CODE);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_INVALID_IMPORT);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_DEPRECATION);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_HIDDEN_CATCH_BLOCK);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_UNUSED_LOCAL);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_UNUSED_PARAMETER);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_UNUSED_IMPORT);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_SYNTHETIC_ACCESS_EMULATION);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_NON_NLS_STRING_LITERAL);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_ASSERT_IDENTIFIER);\r", "+\r", "+\t\toptionNames.add(COMPILER_SOURCE);\r", "+\r", "+\t\toptionNames.add(COMPILER_COMPLIANCE);\r", "+\r", "+\t\toptionNames.add(COMPILER_PB_MAX_PER_UNIT);\r", "+\t\toptionNames.add(CORE_JAVA_BUILD_RESOURCE_COPY_FILTER);\r", "+\r", "+\t\toptionNames.add(CORE_JAVA_BUILD_INVALID_CLASSPATH);\r", "+\t\toptionNames.add(CORE_JAVA_BUILD_ORDER);\r", "+\t\toptionNames.add(FORMATTER_NEWLINE_OPENING_BRACE);\r", "+\r", "+\t\toptionNames.add(FORMATTER_NEWLINE_CONTROL);\r", "+\r", "+\t\toptionNames.add(FORMATTER_CLEAR_BLANK_LINES);\r", "+\r", "+\t\toptionNames.add(FORMATTER_NEWLINE_ELSE_IF);\r", "+\r", "+\t\toptionNames.add(FORMATTER_NEWLINE_EMPTY_BLOCK);\r", "+\r", "+\t\toptionNames.add(FORMATTER_LINE_SPLIT);\r", "+\r", "+\t\toptionNames.add(FORMATTER_COMPACT_ASSIGNMENT);\r", "+\r", "+\t\toptionNames.add(FORMATTER_TAB_CHAR);\r", "+\r", "+\t\toptionNames.add(FORMATTER_TAB_SIZE);\r", "+\t\toptionNames.add(CODEASSIST_VISIBILITY_CHECK);\r", "+\r", "+\t\toptionNames.add(CODEASSIST_IMPLICIT_QUALIFICATION);\r", "+\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7aada78d1e54c74695d042490ea0f56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "048c99cb4c40c6639a98df3f0c05bf0ba13af8f8", "commitAfterChange": "73d46cf67b022e45f4a1a5989eb3965ffa6f4612", "methodNumberBeforeChange": 784, "methodNumberAfterChange": 784, "signatureBeforeChange": " \tpublic void testModifiers()", "signatureAfterChange": " \tpublic void testModifiers()", "diff": ["-\t\t\tassertEquals(expectedOrder[i], ((Modifier) result.get(i)).getKeyword());", "+\t\t\tfinal Modifier modifier = ((Modifier) result.get(i));", "+\t\t\tassertEquals(expectedOrder[i], modifier.getKeyword());", "+\t\t\tif (modifier.isAbstract()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.ABSTRACT_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isFinal()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.FINAL_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isNative()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.NATIVE_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isPrivate()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.PRIVATE_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isProtected()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.PROTECTED_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isPublic()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.PUBLIC_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isStatic()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.STATIC_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isStrictfp()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.STRICTFP_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isSynchronized()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.SYNCHRONIZED_KEYWORD, modifier.getKeyword());", "+\t\t\t} else if (modifier.isTransient()) {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.TRANSIENT_KEYWORD, modifier.getKeyword());", "+\t\t\t} else {", "+\t\t\t\tassertEquals(Modifier.ModifierKeyword.VOLATILE_KEYWORD, modifier.getKeyword());", "+\t\t\t} "]}], "num": 21579}
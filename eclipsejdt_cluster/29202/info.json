{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7b4aa42b0640ecef1f69a4c4b798ef8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f825530981ac5fa7fc42f1bf986afbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\tpublic void updateProjectReferencesIfNecessary() throws JavaModelException", "signatureAfterChange": "  \tpublic synchronized ClasspathValidation[] removeClasspathValidations()", "diff": ["-\t\t */", "-\t\tpublic void updateProjectReferencesIfNecessary() throws JavaModelException {", "-\t\t\t", "-\t\t\tString[] oldRequired = this.oldResolvedPath == null ? CharOperation.NO_STRINGS : this.project.projectPrerequisites(this.oldResolvedPath);", "-\t", "-\t\t\tif (this.newResolvedPath == null) {", "-\t\t\t\tif (this.newRawPath == null)", "-\t\t\t\t\tthis.newRawPath = this.project.getRawClasspath(true/*create markers*/, false/*don't log problems*/);", "-\t\t\t\tthis.newResolvedPath = ", "-\t\t\t\t\tthis.project.getResolvedClasspath(", "-\t\t\t\t\t\tthis.newRawPath, ", "-\t\t\t\t\t\tnull/*no output*/, ", "-\t\t\t\t\t\ttrue/*ignore unresolved entry*/, ", "-\t\t\t\t\t\ttrue/*generate marker on error*/, ", "-\t\t\t\t\t\tnull/*no reverse map*/);", "-\t\t\t}", "-\t\t\tString[] newRequired = this.project.projectPrerequisites(this.newResolvedPath);", "-\t\t\ttry {", "-\t\t\t\tIProject projectResource = this.project.getProject();", "-\t\t\t\tIProjectDescription description = projectResource.getDescription();", "-\t\t\t\t ", "-\t\t\t\tIProject[] projectReferences = description.getDynamicReferences();", "-\t\t\t\t", "-\t\t\t\tHashSet oldReferences = new HashSet(projectReferences.length);", "-\t\t\t\tfor (int i = 0; i < projectReferences.length; i++){", "-\t\t\t\t\tString projectName = projectReferences[i].getName();", "-\t\t\t\t\toldReferences.add(projectName);", "-\t\t\t\t}", "-\t\t\t\tHashSet newReferences = (HashSet)oldReferences.clone();", "-\t\t", "-\t\t\t\tfor (int i = 0; i < oldRequired.length; i++){", "-\t\t\t\t\tString projectName = oldRequired[i];", "-\t\t\t\t\tnewReferences.remove(projectName);", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < newRequired.length; i++){", "-\t\t\t\t\tString projectName = newRequired[i];", "-\t\t\t\t\tnewReferences.add(projectName);", "-\t\t\t\t}", "-\t\t", "-\t\t\t\tIterator iter;", "-\t\t\t\tint newSize = newReferences.size();", "-\t\t\t\t", "-\t\t\t\tcheckIdentity: {", "-\t\t\t\t\tif (oldReferences.size() == newSize){", "-\t\t\t\t\t\titer = newReferences.iterator();", "-\t\t\t\t\t\twhile (iter.hasNext()){", "-\t\t\t\t\t\t\tif (!oldReferences.contains(iter.next())){", "-\t\t\t\t\t\t\t\tbreak checkIdentity;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tString[] requiredProjectNames = new String[newSize];", "-\t\t\t\tint index = 0;", "-\t\t\t\titer = newReferences.iterator();", "-\t\t\t\twhile (iter.hasNext()){", "-\t\t\t\t\trequiredProjectNames[index++] = (String)iter.next();", "-\t\t\t\t}", "-\t\t\t\tUtil.sort(requiredProjectNames); // ensure that if changed, the order is consistent", "-\t\t\t\t", "-\t\t\t\tIProject[] requiredProjectArray = new IProject[newSize];", "-\t\t\t\tIWorkspaceRoot wksRoot = projectResource.getWorkspace().getRoot();", "-\t\t\t\tfor (int i = 0; i < newSize; i++){", "-\t\t\t\t\trequiredProjectArray[i] = wksRoot.getProject(requiredProjectNames[i]);", "-\t\t\t\t}", "-\t\t\t\tdescription.setDynamicReferences(requiredProjectArray);", "-\t\t\t\tprojectResource.setDescription(description, null);", "-\t\t", "-\t\t\t} catch(CoreException e){", "-\t\t\t\tif (!ExternalJavaProject.EXTERNAL_PROJECT_NAME.equals(this.project.getElementName()))", "-\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t}", "-\t\t}", "+\tpublic synchronized ClasspathValidation[] removeClasspathValidations() {", "+\t    int length = this.classpathValidations.size();", "+\t    ClasspathValidation[]  validations = new ClasspathValidation[length];", "+\t    this.classpathValidations.values().toArray(validations);", "+\t    this.classpathValidations.clear();", "+\t    return validations;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e67dc234fbea212870ef1a8addf1bbd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "6e412529e3c9d841ef857516943929ed94e3593c", "commitAfterChange": "cdf9b8e4c56a386ff2dde986be8b72d07aa1cb88", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tprotected void updateProjectReferencesIfNecessary() throws JavaModelException", "signatureAfterChange": " \tprotected void updateProjectReferencesIfNecessary() throws JavaModelException", "diff": ["-\t\tif (!this.canChangeResources) return;", "-\t", "-\t\tString[] oldRequired = this.project.projectPrerequisites(this.oldResolvedPath);", "-", "-\t\tif (this.newResolvedPath == null) {", "-\t\t\tthis.newResolvedPath = this.project.getResolvedClasspath(this.newRawPath, null, true, true, null/*no reverse map*/);", "-\t\t}", "-\t\tString[] newRequired = this.project.projectPrerequisites(this.newResolvedPath);", "-\t", "-\t\ttry {\t\t", "-\t\t\tIProject projectResource = this.project.getProject();", "-\t\t\tIProjectDescription description = projectResource.getDescription();", "-\t\t\t ", "-\t\t\tIProject[] projectReferences = description.getDynamicReferences();", "-\t\t\t", "-\t\t\tHashSet oldReferences = new HashSet(projectReferences.length);", "-\t\t\tfor (int i = 0; i < projectReferences.length; i++){", "-\t\t\t\tString projectName = projectReferences[i].getName();", "-\t\t\t\toldReferences.add(projectName);", "-\t\t\t}", "-\t\t\tHashSet newReferences = (HashSet)oldReferences.clone();", "-\t", "-\t\t\tfor (int i = 0; i < oldRequired.length; i++){", "-\t\t\t\tString projectName = oldRequired[i];", "-\t\t\t\tnewReferences.remove(projectName);", "-\t\t\t}", "-\t\t\tfor (int i = 0; i < newRequired.length; i++){", "-\t\t\t\tString projectName = newRequired[i];", "-\t\t\t\tnewReferences.add(projectName);", "-\t\t\t}", "-\t", "-\t\t\tIterator iter;", "-\t\t\tint newSize = newReferences.size();", "-\t\t\t", "-\t\t\tcheckIdentity: {", "-\t\t\t\tif (oldReferences.size() == newSize){", "-\t\t\t\t\titer = newReferences.iterator();", "-\t\t\t\t\twhile (iter.hasNext()){", "-\t\t\t\t\t\tif (!oldReferences.contains(iter.next())){", "-\t\t\t\t\t\t\tbreak checkIdentity;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tString[] requiredProjectNames = new String[newSize];", "-\t\t\tint index = 0;", "-\t\t\titer = newReferences.iterator();", "-\t\t\twhile (iter.hasNext()){", "-\t\t\t\trequiredProjectNames[index++] = (String)iter.next();", "-\t\t\t}", "-\t\t\tUtil.sort(requiredProjectNames); // ensure that if changed, the order is consistent", "-\t\t\t", "-\t\t\tIProject[] requiredProjectArray = new IProject[newSize];", "-\t\t\tIWorkspaceRoot wksRoot = projectResource.getWorkspace().getRoot();", "-\t\t\tfor (int i = 0; i < newSize; i++){", "-\t\t\t\trequiredProjectArray[i] = wksRoot.getProject(requiredProjectNames[i]);", "-\t\t\t}", "-\t", "-\t\t\tdescription.setDynamicReferences(requiredProjectArray);", "-\t\t\tprojectResource.setDescription(description, this.progressMonitor);", "-\t", "-\t\t} catch(CoreException e){", "-\t\t\tthrow new JavaModelException(e);", "-\t\t}", "+\t\t// will run now, or be deferred until next pre-auto-build notification if resource tree is locked", "+\t\tJavaModelManager.getJavaModelManager().deltaState.performClasspathResourceChange(", "+\t\t        project, ", "+\t\t        oldResolvedPath, ", "+\t\t        newResolvedPath, ", "+\t\t        newRawPath, ", "+\t\t        canChangeResources);"]}], "num": 29202}
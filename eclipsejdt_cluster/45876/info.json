{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cc4f0a8cd73f00b63bbb68576ff07fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "220a74fa5cdbd0560674d45c4a58c26a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "9ecfd83150af2852591fa7ec68468d790c7eefcb", "commitAfterChange": "bbc460d21d93548b386e69b054c421a009cad4c2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["+\t\t\tint invalidTagLineEnd = -1;", "+\t\t\tint invalidInlineTagLineEnd = -1;", "-\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedTag(this.inlineTagStart, this.inlineTagStart);", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\t\t\t\t\tint end = previousPosition<invalidInlineTagLineEnd ? previousPosition : invalidInlineTagLineEnd;", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnterminatedInlineTag(this.inlineTagStart, end);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) refreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\t\t} // else {", "+\t\t\t\t\t\t\t\t\tinvalidInlineTagLineEnd = this.lineEnd;", "+\t\t\t\t\t\t\t\t} else if (this.textStart != -1 && this.textStart < invalidTagLineEnd) {", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, invalidTagLineEnd);", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+//\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+//\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t\tif (!valid) {", "-\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\t\t\tvalidComment = false;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (!valid) {", "+\t\t\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51600", "+\t\t\t\t\t\t\t\t\t\t// do not stop the inline tag when error is encountered to get text after", "+//\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t\t\t\t\t\t\t\tvalidComment = false;", "+\t\t\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51600", "+\t\t\t\t\t\t\t\t\t\t// for DOM AST node, store tag as text in case of invalid syntax", "+\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\t\t\t\t\tparseTag();", "+\t\t\t\t\t\t\t\t\t\t\tthis.textStart = this.tagSourceEnd+1;", "+\t\t\t\t\t\t\t\t\t\t\tinvalidTagLineEnd  = this.lineEnd;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t//}", "-\t\t\t\t\t\tthis.inlineTagStarted = false;", "+//\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\tthis.lineStarted = true;", "+//\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidTag(this.inlineTagStart, this.index);", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\t\t\t\tint end = previousPosition<invalidInlineTagLineEnd ? previousPosition : invalidInlineTagLineEnd;", "+\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnterminatedInlineTag(this.inlineTagStart, end);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) refreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\t} //else {", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t//}", "-\t\t\tif (this.lineStarted && this.textStart < previousPosition) {", "+\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\tint end = previousPosition<invalidInlineTagLineEnd ? previousPosition : invalidInlineTagLineEnd;", "+\t\t\t\t\tif (this.index >= this.endComment) end = invalidInlineTagLineEnd;", "+\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnterminatedInlineTag(this.inlineTagStart, end);", "+\t\t\t\t}", "+\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t}", "+\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "+\t\t\t\t}", "+\t\t\t} else if (this.lineStarted && this.textStart < previousPosition) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cb04fa26b9334ebcb96e8fe62335559", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean commentParse()", "signatureAfterChange": " \tprotected boolean commentParse()", "diff": ["-\t\t\t// Init scanner position", "-\t\t\tthis.linePtr = getLineNumber(this.firstTagPosition);", "-\t\t\tint realStart = this.linePtr==1 ? javadocStart : this.scanner.getLineEnd(this.linePtr-1)+1;", "-\t\t\tif (realStart < javadocStart) realStart = javadocStart;", "-\t\t\tthis.scanner.resetTo(realStart, javadocEnd);", "-\t\t\tthis.index = realStart;", "-\t\t\tif (realStart == javadocStart) {", "-\t\t\t\treadChar(); // starting '/'", "-\t\t\t\treadChar(); // first '*'", "-\t\t\t}", "-\t\t\tint previousPosition = this.index;", "-\t\t\tchar nextCharacter = 0;", "-\t\t\tif (realStart == javadocStart) nextCharacter = readChar(); // second '*'", "-", "-\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.javadocEnd: this.scanner.getLineEnd(this.linePtr) - 1;", "+\t\t\tthis.spacePosition = -1;", "+\t\t\tboolean isFormatterParser = (this.kind & FORMATTER_COMMENT_PARSER) != 0;", "+", "+\t\t\t// Init scanner position", "+\t\t\tthis.linePtr = getLineNumber(this.firstTagPosition);", "+\t\t\tint realStart = this.linePtr==1 ? javadocStart : this.scanner.getLineEnd(this.linePtr-1)+1;", "+\t\t\tif (realStart < javadocStart) realStart = javadocStart;", "+\t\t\tthis.scanner.resetTo(realStart, javadocEnd);", "+\t\t\tthis.index = realStart;", "+\t\t\tif (realStart == javadocStart) {", "+\t\t\t\treadChar(); // starting '/'", "+\t\t\t\treadChar(); // first '*'", "+\t\t\t}", "+\t\t\tint previousPosition = this.index;", "+\t\t\tchar nextCharacter = 0;", "+\t\t\tif (realStart == javadocStart) {", "+\t\t\t\tnextCharacter = readChar(); // second '*'", "+\t\t\t\tthis.javadocTextStart = this.index;", "+\t\t\t}", "+\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.javadocEnd: this.scanner.getLineEnd(this.linePtr) - 1;", "-\t\t\t", "-\t\t\t\tif (this.index >= this.javadocEnd) {", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\t", "+", "+\t\t\t\t// Consume rules depending on the read character", "-\t\t\t\t\t\t\t\tif (this.textStart != -1 && this.textStart < previousPosition) {", "-\t\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t\tint textEndPosition = previousPosition;", "+\t\t\t\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\t\t\t\tif (isDomParser) refreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\t\t\tif (this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (isDomParser || isFormatterParser) {", "+\t\t\t\t\t\t\t\t\trefreshInlineTagPosition(textEndPosition);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (this.textStart != -1 && this.textStart < this.inlineTagStart) {", "-\t\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, this.inlineTagStart);", "+\t\t\t\t\t\t\t\tif (this.textStart != -1) {", "+\t\t\t\t\t\t\t\t\tint textEndPosition = this.inlineTagStart;", "+\t\t\t\t\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (this.textStart < textEndPosition) {", "+\t\t\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, invalidTagLineEnd);", "+\t\t\t\t\t\t\t\tint textEndPosition = invalidTagLineEnd;", "+\t\t\t\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\tif (this.lineStarted && this.textStart < previousPosition) {", "-\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, previousPosition);", "+\t\t\t\t\t\tif (this.lineStarted) {", "+\t\t\t\t\t\t\tint textEndPosition = previousPosition;", "+\t\t\t\t\t\t\tif (isFormatterParser) {", "+\t\t\t\t\t\t\t\tif (ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.spacePosition = previousPosition;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "-\t\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t\tint textEndPosition = previousPosition;", "+\t\t\t\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\trefreshInlineTagPosition(textEndPosition);", "-\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "-\t\t\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t\tint textEndPosition = previousPosition;", "+\t\t\t\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\trefreshInlineTagPosition(textEndPosition);", "+\t\t\t\t\t\t// Store the star position as text start while formatting", "+\t\t\t\t\t\tthis.starPosition = previousPosition;", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t// do nothing for space or '*' characters", "+\t\t\t\t\t\t// Store first space position while formatting", "+\t\t\t\t\t\tif (isFormatterParser && !ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\t\tthis.spacePosition = previousPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tcase '/':", "+\t\t\t\t\t\tif (previousChar == '*') {", "+\t\t\t\t\t\t\t// End of javadoc", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// fall through default case", "+\t\t\t\t\t\tif (isFormatterParser && nextCharacter == '<') {", "+\t\t\t\t\t\t\t// html tags are meaningful for formatter parser", "+\t\t\t\t\t\t\tint initialIndex = this.index;", "+\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, this.javadocEnd);", "+\t\t\t\t\t\t\tint endTextPosition = ScannerHelper.isWhitespace(previousChar) ? this.spacePosition : previousPosition;", "+\t\t\t\t\t\t\tif (parseHtmlTag(previousPosition, endTextPosition)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.abort) return false;", "+\t\t\t\t\t\t\t// Wrong html syntax continue to process character normally", "+\t\t\t\t\t\t\tthis.scanner.currentPosition = initialIndex;", "+\t\t\t\t\t\t\tthis.index = initialIndex;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!this.lineStarted) {", "+\t\t\t\t\t\tif (!this.lineStarted || this.textStart == -1) {", "+\t\t\tthis.javadocTextEnd = this.starPosition-1;", "+", "-\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\tint end = previousPosition<invalidInlineTagLineEnd ? previousPosition : invalidInlineTagLineEnd;", "+\t\t\t\t\tint end = this.javadocTextEnd<invalidInlineTagLineEnd ? this.javadocTextEnd : invalidInlineTagLineEnd;", "-\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "-\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\t\tint textEndPosition = this.javadocTextEnd;", "+\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "+\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "+\t\t\t\t\t}", "+\t\t\t\t\trefreshInlineTagPosition(textEndPosition);", "-\t\t\t} else if (pushText && this.lineStarted && this.textStart < previousPosition) {", "-\t\t\t\tpushText(this.textStart, previousPosition);", "+\t\t\t\tthis.inlineTagStarted = false;", "+\t\t\t} else if (pushText && this.lineStarted && this.textStart != -1 && this.textStart <= this.javadocTextEnd) {", "+\t\t\t\tpushText(this.textStart, this.starPosition);"]}], "num": 45876}
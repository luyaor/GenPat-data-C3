{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6b6a4dd0708b8c1092e0df01ea44fbb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2271e3e275fd5685a2afbfe9fc17e65a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/UpToDate.java", "commitBeforeChange": "36e5ac64fd1e76c49877ce8bb5596589a2c55ddf", "commitAfterChange": "d99445bb67a0feecbc78238c54ff468fc72d2315", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public boolean eval()", "signatureAfterChange": "     public boolean eval()", "diff": ["-        if (sourceFileSets.size() == 0 && sourceFile == null) {", "+        if (sourceFileSets.size() == 0 && sourceResources.size() == 0", "+            && sourceFile == null) {", "-                                     + \"<srcfiles> element must be set.\");", "+                                     + \"<srcfiles> or <srcresources> element \"", "+                                     + \"must be set.\");", "-        if (sourceFileSets.size() > 0 && sourceFile != null) {", "+        if ((sourceFileSets.size() > 0 || sourceResources.size() > 0)", "+            && sourceFile != null) {", "-                                     + \"element.\");", "+                                     + \"or <srcresources> element.\");", "-        Enumeration e = sourceFileSets.elements();", "-        while (upToDate && e.hasMoreElements()) {", "-            FileSet fs = (FileSet) e.nextElement();", "-            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-            upToDate = upToDate && scanDir(fs.getDir(getProject()),", "-                                           ds.getIncludedFiles());", "-        }", "-", "+", "+        // filesets are separate from the rest for performance", "+        // reasons.  If we use the code for union below, we'll always", "+        // scan all filesets, even if we know the target is out of", "+        // date after the first test.", "+        Enumeration e = sourceFileSets.elements();", "+        while (upToDate && e.hasMoreElements()) {", "+            FileSet fs = (FileSet) e.nextElement();", "+            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "+            upToDate = upToDate && scanDir(fs.getDir(getProject()),", "+                                           ds.getIncludedFiles());", "+        }", "+", "+        if (upToDate) {", "+            Resource[] r = sourceResources.listResources();", "+            upToDate = upToDate &&", "+                (ResourceUtils.selectOutOfDateSources(this, r, getMapper(),", "+                                                      getProject()).length", "+                 == 0);", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71243c35bbc8a3b3f3e067e5ad01692e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Touch.java", "commitBeforeChange": "0c4a72a81b5928f9de2829c50b77575ed456a608", "commitAfterChange": "e6e450dc16652de9966256b38be3c2b417f982a9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     void touch() throws BuildException", "signatureAfterChange": "     protected void touch() throws BuildException", "diff": ["-    void touch() throws BuildException {", "-        if (!file.exists()) {", "-            log(\"Creating \"+file, Project.MSG_INFO);", "-            try {", "-                FileOutputStream fos = new FileOutputStream(file);", "-                fos.write(new byte[0]);", "-                fos.close();", "-            } catch (IOException ioe) {", "-                throw new BuildException(\"Could not create \"+file, ioe, ", "-                                         location);", "+    protected void touch() throws BuildException {", "+        if (file != null) {", "+            if (!file.exists()) {", "+                log(\"Creating \"+file, Project.MSG_INFO);", "+                try {", "+                    FileOutputStream fos = new FileOutputStream(file);", "+                    fos.write(new byte[0]);", "+                    fos.close();", "+                } catch (IOException ioe) {", "+                    throw new BuildException(\"Could not create \"+file, ioe, ", "+                                             location);", "+                }", "+            touch(file);", "+        if (millis >= 0 && project.getJavaVersion() == Project.JAVA_1_1) {", "+            log(\"modification time of files cannot be set in JDK 1.1\",", "+                Project.MSG_WARN);", "+            return;", "+        }", "+", "+        // deal with the filesets", "+        for (int i=0; i < filesets.size(); i++) {", "+            FileSet fs = (FileSet) filesets.elementAt(i);", "+            DirectoryScanner ds = fs.getDirectoryScanner(project);", "+            File fromDir = fs.getDir(project);", "+", "+            String[] srcFiles = ds.getIncludedFiles();", "+            String[] srcDirs = ds.getIncludedDirectories();", "+", "+            for(int j=0; j < srcFiles.length ; j++) {", "+                touch(new File(fromDir, srcFiles[j]));", "+            }", "+         ", "+            for(int j=0; j < srcDirs.length ; j++) {", "+                touch(new File(fromDir, srcDirs[j]));", "+            }", "+        }", "+    }"]}]}
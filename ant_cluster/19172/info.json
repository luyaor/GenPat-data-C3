{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d37dbb57b5f4e643627c2bd66bcf077", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2ad87bb32cf25b8454e35d1b144bc41", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "       private void processFile( String file )         throws BuildException", "signatureAfterChange": "      private void processFile( String file )         throws TaskException", "diff": ["-", "-        throws BuildException", "+        throws TaskException", "-                     : new OutputStreamWriter( new FileOutputStream( tmpFile ), encoding );", "+                    : new OutputStreamWriter( new FileOutputStream( tmpFile ), encoding );", "-                throw new BuildException( \"Error\", e );", "+                throw new TaskException( \"Error\", e );", "-                    line = ( OneLiner.BufferLine )lines.nextElement();", "+                    line = (OneLiner.BufferLine)lines.nextElement();", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                        throw new BuildException( \"Error\", e );", "+                        throw new TaskException( \"Error\", e );", "-                        switch ( lines.getState() )", "+                        switch( lines.getState() )", "-                        case NOTJAVA:", "-                            notInConstant( line, line.length(), outWriter );", "-                            break;", "-                        case IN_MULTI_COMMENT:", "-                            if( ( endComment =", "-                                lineString.indexOf( \"*/\", line.getNext() )", "-                                 ) >= 0 )", "-                            {", "-                                // End of multiLineComment on this line", "-                                endComment += 2;// Include the end token", "-                                lines.setState( LOOKING );", "-                            }", "-                            else", "-                            {", "-                                endComment = linelen;", "-                            }", "-", "-                            notInConstant( line, endComment, outWriter );", "-                            break;", "-                        case IN_SINGLE_COMMENT:", "-                            notInConstant( line, line.length(), outWriter );", "-                            lines.setState( LOOKING );", "-                            break;", "-                        case IN_CHAR_CONST:", "-                        case IN_STR_CONST:", "-                            // Got here from LOOKING by finding an opening \"\\'\"", "-                            // next points to that quote character.", "-                            // Find the end of the constant.  Watch out for", "-                            // backslashes.  Literal tabs are left unchanged, and", "-                            // the column is adjusted accordingly.", "-", "-                            int begin = line.getNext();", "-                            char terminator = ( lines.getState() == IN_STR_CONST", "-                                 ? '\\\"'", "-                                 : '\\'' );", "-                            endOfCharConst( line, terminator );", "-                            while( line.getNext() < line.getLookahead() )", "-                            {", "-                                if( line.getNextCharInc() == '\\t' )", "+                            case NOTJAVA:", "+                                notInConstant( line, line.length(), outWriter );", "+                                break;", "+                            case IN_MULTI_COMMENT:", "+                                if( ( endComment =", "+                                    lineString.indexOf( \"*/\", line.getNext() )", "+                                    ) >= 0 )", "-                                    line.setColumn(", "-                                        line.getColumn() +", "-                                        tablength -", "-                                        line.getColumn() % tablength );", "+                                    // End of multiLineComment on this line", "+                                    endComment += 2;// Include the end token", "+                                    lines.setState( LOOKING );", "-                                    line.incColumn();", "+                                    endComment = linelen;", "-                            }", "-                            // Now output the substring", "-                            try", "-                            {", "-                                outWriter.write( line.substring( begin, line.getNext() ) );", "-                            }", "-                            catch( IOException e )", "-                            {", "-                                throw new BuildException( \"Error\", e );", "-                            }", "+                                notInConstant( line, endComment, outWriter );", "+                                break;", "+                            case IN_SINGLE_COMMENT:", "+                                notInConstant( line, line.length(), outWriter );", "+                                lines.setState( LOOKING );", "+                                break;", "+                            case IN_CHAR_CONST:", "+                            case IN_STR_CONST:", "+                                // Got here from LOOKING by finding an opening \"\\'\"", "+                                // next points to that quote character.", "+                                // Find the end of the constant.  Watch out for", "+                                // backslashes.  Literal tabs are left unchanged, and", "+                                // the column is adjusted accordingly.", "-                            lines.setState( LOOKING );", "+                                int begin = line.getNext();", "+                                char terminator = ( lines.getState() == IN_STR_CONST", "+                                    ? '\\\"'", "+                                    : '\\'' );", "+                                endOfCharConst( line, terminator );", "+                                while( line.getNext() < line.getLookahead() )", "+                                {", "+                                    if( line.getNextCharInc() == '\\t' )", "+                                    {", "+                                        line.setColumn(", "+                                            line.getColumn() +", "+                                            tablength -", "+                                            line.getColumn() % tablength );", "+                                    }", "+                                    else", "+                                    {", "+                                        line.incColumn();", "+                                    }", "+                                }", "-                            break;", "+                                // Now output the substring", "+                                try", "+                                {", "+                                    outWriter.write( line.substring( begin, line.getNext() ) );", "+                                }", "+                                catch( IOException e )", "+                                {", "+                                    throw new TaskException( \"Error\", e );", "+                                }", "-                        case LOOKING:", "-                            nextStateChange( line );", "-                            notInConstant( line, line.getLookahead(), outWriter );", "-                            break;", "+                                lines.setState( LOOKING );", "+", "+                                break;", "+", "+                            case LOOKING:", "+                                nextStateChange( line );", "+                                notInConstant( line, line.getLookahead(), outWriter );", "+                                break;", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                throw new BuildException( \"Error\", e );", "+                throw new TaskException( \"Error\", e );", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                throw new BuildException( \"Unable to close source file \" + srcFile );", "+                throw new TaskException( \"Unable to close source file \" + srcFile );", "-                        throw new BuildException( \"Unable to delete \"", "-                             + destFile );", "+                        throw new TaskException( \"Unable to delete \"", "+                                                 + destFile );", "-                        throw new BuildException(", "+                        throw new TaskException(", "-                             + \" to \" + destFile", "-                             + \". Couldn't rename temporary file: \"", "-                             + tmpFile );", "+                            + \" to \" + destFile", "+                            + \". Couldn't rename temporary file: \"", "+                            + tmpFile );", "-                        \" is not written, as the contents are identical\",", "-                        Project.MSG_DEBUG );", "+                         \" is not written, as the contents are identical\",", "+                         Project.MSG_DEBUG );", "-                        throw new BuildException( \"Unable to delete \"", "-                             + tmpFile );", "+                        throw new TaskException( \"Unable to delete \"", "+                                                 + tmpFile );", "-                    throw new BuildException(", "+                    throw new TaskException(", "-                         + \" to \" + destFile", "-                         + \". Couldn't rename temporary file: \"", "-                         + tmpFile );", "+                        + \" to \" + destFile", "+                        + \". Couldn't rename temporary file: \"", "+                        + tmpFile );", "-            throw new BuildException( \"Error\", e );", "+            throw new TaskException( \"Error\", e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b110b0aece2db0c49473150317b25c4c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "       private void processFile( String file )         throws BuildException", "signatureAfterChange": "      private void processFile( String file )         throws TaskException", "diff": ["-", "-        throws BuildException", "+        throws TaskException", "-                     : new OutputStreamWriter( new FileOutputStream( tmpFile ), encoding );", "+                    : new OutputStreamWriter( new FileOutputStream( tmpFile ), encoding );", "-                throw new BuildException( \"Error\", e );", "+                throw new TaskException( \"Error\", e );", "-                    line = ( OneLiner.BufferLine )lines.nextElement();", "+                    line = (OneLiner.BufferLine)lines.nextElement();", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                        throw new BuildException( \"Error\", e );", "+                        throw new TaskException( \"Error\", e );", "-                        switch ( lines.getState() )", "+                        switch( lines.getState() )", "-                        case NOTJAVA:", "-                            notInConstant( line, line.length(), outWriter );", "-                            break;", "-                        case IN_MULTI_COMMENT:", "-                            if( ( endComment =", "-                                lineString.indexOf( \"*/\", line.getNext() )", "-                                 ) >= 0 )", "-                            {", "-                                // End of multiLineComment on this line", "-                                endComment += 2;// Include the end token", "-                                lines.setState( LOOKING );", "-                            }", "-                            else", "-                            {", "-                                endComment = linelen;", "-                            }", "-", "-                            notInConstant( line, endComment, outWriter );", "-                            break;", "-                        case IN_SINGLE_COMMENT:", "-                            notInConstant( line, line.length(), outWriter );", "-                            lines.setState( LOOKING );", "-                            break;", "-                        case IN_CHAR_CONST:", "-                        case IN_STR_CONST:", "-                            // Got here from LOOKING by finding an opening \"\\'\"", "-                            // next points to that quote character.", "-                            // Find the end of the constant.  Watch out for", "-                            // backslashes.  Literal tabs are left unchanged, and", "-                            // the column is adjusted accordingly.", "-", "-                            int begin = line.getNext();", "-                            char terminator = ( lines.getState() == IN_STR_CONST", "-                                 ? '\\\"'", "-                                 : '\\'' );", "-                            endOfCharConst( line, terminator );", "-                            while( line.getNext() < line.getLookahead() )", "-                            {", "-                                if( line.getNextCharInc() == '\\t' )", "+                            case NOTJAVA:", "+                                notInConstant( line, line.length(), outWriter );", "+                                break;", "+                            case IN_MULTI_COMMENT:", "+                                if( ( endComment =", "+                                    lineString.indexOf( \"*/\", line.getNext() )", "+                                    ) >= 0 )", "-                                    line.setColumn(", "-                                        line.getColumn() +", "-                                        tablength -", "-                                        line.getColumn() % tablength );", "+                                    // End of multiLineComment on this line", "+                                    endComment += 2;// Include the end token", "+                                    lines.setState( LOOKING );", "-                                    line.incColumn();", "+                                    endComment = linelen;", "-                            }", "-                            // Now output the substring", "-                            try", "-                            {", "-                                outWriter.write( line.substring( begin, line.getNext() ) );", "-                            }", "-                            catch( IOException e )", "-                            {", "-                                throw new BuildException( \"Error\", e );", "-                            }", "+                                notInConstant( line, endComment, outWriter );", "+                                break;", "+                            case IN_SINGLE_COMMENT:", "+                                notInConstant( line, line.length(), outWriter );", "+                                lines.setState( LOOKING );", "+                                break;", "+                            case IN_CHAR_CONST:", "+                            case IN_STR_CONST:", "+                                // Got here from LOOKING by finding an opening \"\\'\"", "+                                // next points to that quote character.", "+                                // Find the end of the constant.  Watch out for", "+                                // backslashes.  Literal tabs are left unchanged, and", "+                                // the column is adjusted accordingly.", "-                            lines.setState( LOOKING );", "+                                int begin = line.getNext();", "+                                char terminator = ( lines.getState() == IN_STR_CONST", "+                                    ? '\\\"'", "+                                    : '\\'' );", "+                                endOfCharConst( line, terminator );", "+                                while( line.getNext() < line.getLookahead() )", "+                                {", "+                                    if( line.getNextCharInc() == '\\t' )", "+                                    {", "+                                        line.setColumn(", "+                                            line.getColumn() +", "+                                            tablength -", "+                                            line.getColumn() % tablength );", "+                                    }", "+                                    else", "+                                    {", "+                                        line.incColumn();", "+                                    }", "+                                }", "-                            break;", "+                                // Now output the substring", "+                                try", "+                                {", "+                                    outWriter.write( line.substring( begin, line.getNext() ) );", "+                                }", "+                                catch( IOException e )", "+                                {", "+                                    throw new TaskException( \"Error\", e );", "+                                }", "-                        case LOOKING:", "-                            nextStateChange( line );", "-                            notInConstant( line, line.getLookahead(), outWriter );", "-                            break;", "+                                lines.setState( LOOKING );", "+", "+                                break;", "+", "+                            case LOOKING:", "+                                nextStateChange( line );", "+                                notInConstant( line, line.getLookahead(), outWriter );", "+                                break;", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                throw new BuildException( \"Error\", e );", "+                throw new TaskException( \"Error\", e );", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                throw new BuildException( \"Unable to close source file \" + srcFile );", "+                throw new TaskException( \"Unable to close source file \" + srcFile );", "-                        throw new BuildException( \"Unable to delete \"", "-                             + destFile );", "+                        throw new TaskException( \"Unable to delete \"", "+                                                 + destFile );", "-                        throw new BuildException(", "+                        throw new TaskException(", "-                             + \" to \" + destFile", "-                             + \". Couldn't rename temporary file: \"", "-                             + tmpFile );", "+                            + \" to \" + destFile", "+                            + \". Couldn't rename temporary file: \"", "+                            + tmpFile );", "-                        \" is not written, as the contents are identical\",", "-                        Project.MSG_DEBUG );", "+                         \" is not written, as the contents are identical\",", "+                         Project.MSG_DEBUG );", "-                        throw new BuildException( \"Unable to delete \"", "-                             + tmpFile );", "+                        throw new TaskException( \"Unable to delete \"", "+                                                 + tmpFile );", "-                    throw new BuildException(", "+                    throw new TaskException(", "-                         + \" to \" + destFile", "-                         + \". Couldn't rename temporary file: \"", "-                         + tmpFile );", "+                        + \" to \" + destFile", "+                        + \". Couldn't rename temporary file: \"", "+                        + tmpFile );", "-            throw new BuildException( \"Error\", e );", "+            throw new TaskException( \"Error\", e );"]}]}
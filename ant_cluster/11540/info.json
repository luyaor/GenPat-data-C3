{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1614bd0426c8c0bdca044068733cb98f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dc2e6c75bc5546ff1ed25b2c3569509", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/XMLValidateTask.java", "commitBeforeChange": "b0e60527f14be8d2cbdb7c9c4e24f0782a5bb712", "commitAfterChange": "5cf848fdb5a0402838c570e91dacdcca3536fdbc", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "          private String getMessage(SAXParseException e)", "signatureAfterChange": "          private String getMessage(SAXParseException e)", "diff": ["-                try {", "-                    int line = e.getLineNumber();", "-                    int col = e.getColumnNumber();", "-                    return new URL(sysID).getFile()", "-                        + (line == -1", "-                            ? \"\"", "-                            : (\":\" + line + (col == -1 ? \"\" : (\":\" + col))))", "-                        + \": \"", "-                        + e.getMessage();", "-                } catch (MalformedURLException mfue) {", "-                    // ignore and just return exception message", "+                String name = sysID;", "+                if (sysID.startsWith(\"file:\")) {", "+                    try {", "+                        name = FILE_UTILS.fromURI(sysID);", "+                    } catch (Exception ex) {", "+                        // if this is not a valid file: just use the uri", "+                    }", "+                int line = e.getLineNumber();", "+                int col = e.getColumnNumber();", "+                return  name", "+                    + (line == -1", "+                       ? \"\"", "+                       : (\":\" + line + (col == -1 ? \"\" : (\":\" + col))))", "+                    + \": \"", "+                    + e.getMessage();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fa8333be4c2f21a68099d5403b4283a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean delete(java.io.File file)", "signatureAfterChange": "         void delete(java.io.File local)", "diff": ["-    private boolean delete(java.io.File file) {", "-        // If the current file is a Directory, we need to delete all", "-        // of its children as well.", "-        if (file.isDirectory()) {", "-            java.io.File[] children = file.listFiles();", "-            for (int i = 0; i < children.length; i++) {", "-                delete(children[i]);", "-            }", "-        log(\"Deleting: \" + file.getAbsolutePath(), Project.MSG_INFO);", "-        return file.delete();", "+         */", "+        void delete(java.io.File local) {", "+            // once we find a folder that isn't in the repository, ", "+            // anything below it can be deleted.", "+            if (local.isDirectory() && isRecursive()) {", "+                String[] contents = local.list();", "+                for (int i=0; i< contents.length; i++) {", "+                    java.io.File file = new java.io.File(local, contents[i]);", "+                    delete(file);", "+                }", "+            } ", "+            local.delete();", "+            log(\"Deleted uncontrolled item \" + local.getAbsolutePath());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "805488a3e1bddb3f366ca89da8fd8656", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "3e1cde904eca74dd23da0102f7a68ecc0cd1aa62", "commitAfterChange": "176b11946b0fd2fdc0f5f06d676aba72fc4fce98", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "         private void writeValue(PrintWriter writer, String value)              throws IOException", "signatureAfterChange": "         private void writeValue(PrintWriter writer, String value)              throws IOException", "diff": ["-            String line = name + \": \" + value;", "-            while (line.getBytes().length > MAX_LINE_LENGTH) {", "+            String line = null;", "+            int nameLength = name.getBytes(JAR_ENCODING).length;", "+            if (nameLength > MAX_NAME_VALUE_LENGTH)", "+            {", "+                if (nameLength > MAX_NAME_LENGTH)", "+                {", "+                    throw new IOException(\"Unable to write manifest line \"", "+                            + name + \": \" + value);", "+                }", "+                writer.print(name + \": \" + EOL);", "+                line = \" \" + value;", "+            }", "+            else", "+            {", "+                line = name + \": \" + value;", "+            }", "+            while (line.getBytes(JAR_ENCODING).length > MAX_SECTION_LENGTH) {", "+                if (breakIndex >= line.length())", "+                {", "+                    breakIndex = line.length() - 1;", "+                }", "-                while (section.getBytes().length > MAX_SECTION_LENGTH", "+                while (section.getBytes(JAR_ENCODING).length > MAX_SECTION_LENGTH"]}]}
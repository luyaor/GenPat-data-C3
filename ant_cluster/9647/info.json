{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eac0c1650a2e2534bcf81af4a96c6a83", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46e7fcfa9b8656b9a141a78d9ed097eb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ClasspathUtils.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static Object newInstance(         String className,         ClassLoader userDefinedLoader)", "signatureAfterChange": "     public static Object newInstance(             String className,             ClassLoader userDefinedLoader)", "diff": ["+            String className,", "+            ClassLoader userDefinedLoader) {", "+        return newInstance(className, userDefinedLoader, Object.class);", "+    }", "-        ClassLoader userDefinedLoader) {", "-            Class clazz = userDefinedLoader.loadClass(className);", "-                \"Class \"", "-                    + className", "-                    + \" not found by the specific classLoader.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93b10dfd4fd064644f289c97242bd539", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "cfbc62561bfd4f8a6f734dc8b747e6792625a05f", "commitAfterChange": "4141a91af169f9d36ca98a2da86350ef31b26693", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void createStreams()", "signatureAfterChange": "     public void createStreams()", "diff": ["-                try {", "-                        = new FileOutputStream(out.getAbsolutePath(), append);", "+                        = new DelayedFileOutputStream(out, append);", "-                } catch (FileNotFoundException fne) {", "-                    throw new BuildException(\"Cannot write to \" + out, fne);", "-                } catch (IOException ioe) {", "-                    throw new BuildException(\"Cannot write to \" + out, ioe);", "-                }", "-            try {", "-                    = new FileOutputStream(error.getAbsolutePath(), append);", "+                    = new DelayedFileOutputStream(error, append);", "-            } catch (FileNotFoundException fne) {", "-                throw new BuildException(\"Cannot write to \" + error, fne);", "-            } catch (IOException ioe) {", "-                throw new BuildException(\"Cannot write to \" + error, ioe);", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b672a28c1ba2e28e1ce78b9fe188ad0a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/basic/Property.java", "commitBeforeChange": "5872737ff5d0006fffd509da87f4bc9115cb5a39", "commitAfterChange": "2a9f49ba6cde3f1bdf4a1234a4e4f14773c34736", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void configure( final Configuration configuration )         throws ConfigurationException", "signatureAfterChange": "      public void configure( final Configuration configuration )         throws ConfigurationException", "diff": ["-", "-            Object object = null;", "-", "-            try { object = getContext().resolveValue( value ); }", "-            catch( final TaskException te )", "-            {", "-                throw new ConfigurationException( \"Error resolving value: \" + value, te );", "-            }", "-", "-            if( null == object )", "-            {", "-                throw new ConfigurationException( \"Value for attribute \" + name + \"resolved to null\" );", "-            }", "+            final Object object = resolve( value );", "-                try", "-                {", "-                    final String convertedValue =", "-                        (String)m_converter.convert( String.class, object, getContext() );", "-                    setName( convertedValue );", "-                }", "-                catch( final Exception e )", "-                {", "-                    throw new ConfigurationException( \"Error converting value\", e );", "-                }", "+                final String convertedValue = (String)convert( String.class, object );", "+                setName( convertedValue );", "-                try", "-                {", "-                    final Boolean localScope =", "-                        (Boolean)m_converter.convert( Boolean.class, object, getContext() );", "-                    setLocalScope( Boolean.TRUE == localScope );", "-                }", "-                catch( final Exception e )", "-                {", "-                    throw new ConfigurationException( \"Error converting value\", e );", "-                }", "+                final Boolean localScope = (Boolean)convert( Boolean.class, object );", "+                setLocalScope( Boolean.TRUE == localScope );", "+                configure( value, child );", "-                m_configurer.configure( value, child, getContext() );"]}]}
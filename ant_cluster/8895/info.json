{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edb1952076e9d664b85744cc98a17268", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cfd33353721fff17a72d12ddebac163", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/AbstractFileSet.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "     public synchronized Object clone()", "signatureAfterChange": "     public synchronized Object clone()", "diff": ["-                fs.additionalPatterns = new Vector(additionalPatterns.size());", "-                Enumeration e = additionalPatterns.elements();", "-                while (e.hasMoreElements()) {", "-                    fs.additionalPatterns", "-                        .addElement(((PatternSet) e.nextElement()).clone());", "+                fs.additionalPatterns = new ArrayList<PatternSet>(additionalPatterns.size());", "+                for (PatternSet ps : additionalPatterns) {", "+                    fs.additionalPatterns.add((PatternSet) ps.clone());", "-                fs.selectors = new Vector(selectors);", "+                fs.selectors = new ArrayList<FileSelector>(selectors);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca6c1d4cdd22db6b0351e7829f56cbba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Files.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public synchronized Object clone()", "signatureAfterChange": "     public synchronized Object clone()", "diff": ["-        f.additionalPatterns = new Vector(additionalPatterns.size());", "-        for (Iterator iter = additionalPatterns.iterator(); iter.hasNext();) {", "-            PatternSet ps = (PatternSet) iter.next();", "-            f.additionalPatterns.add(ps.clone());", "+        f.additionalPatterns = new Vector<PatternSet>(additionalPatterns.size());", "+        for (PatternSet ps : additionalPatterns) {", "+            f.additionalPatterns.add((PatternSet) ps.clone());"]}]}
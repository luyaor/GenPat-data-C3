{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a605a9c6b46f5382b617e4cd456fdae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12f9bb8bf3509e481dfab038a84f32bd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/source/main/org/apache/ant/cli/CLIFrontEnd.java", "commitBeforeChange": "421736ed4a52a3f068a31f53678b97915ebb0cc9", "commitAfterChange": "f85678f1abd081bfd165ce81b94bad652968e4fd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void run(String[] args)", "signatureAfterChange": "     public void run(String[] args)", "diff": ["+     */", "+    public void run(String[] args) {", "+        this.args = args;", "+        String target = \"\";", "+        File buildFile = null;", "+        writeMessage(\"Ant(Eater) -- Proposed Ant 2.0\");", "+        ", "+        // process through the args set", "+        ", "+        if (isArg(\"help\")) {", "+            printHelp();", "+            return;", "+        }", "+        ", "+        if (isArg(\"quiet\")) {", "+            msgLevelFilter = MSG_LEVEL_HIGH;", "+        }", "+        ", "+        if (isArg(\"verbose\")) {", "+            msgLevelFilter = MSG_LEVEL_LOW;", "+        }", "+        ", "+        String argTaskpath = getArgValue(\"taskpath\");", "+        if (argTaskpath != null) {", "+            if (argTaskpath.equals(\"\")) {", "+                writeMessage(\"Must give a value for -taskpath\");", "+                return;", "+            } else {", "+                // XXX need to separate on path seps so that real paths can be taken", "+                // ant.addTaskPathNode(new File(argTaskpath));", "+            }", "+        }", "+        ", "+        String argBuildfile = getArgValue(\"buildfile\");", "+        if (argBuildfile != null) {", "+            if (argBuildfile.equals(\"\")) {", "+                writeMessage(\"Must give a value for -buildfile\");", "+                return;", "+            } else {", "+                //try {", "+                buildFile = new File(argBuildfile);", "+                    //ant.setBuildfile(new File(argBuildfile));", "+                //} catch (AntException ae) {", "+                //    writeMessage(\"Can't set buildfile\");", "+                //    writeMessage(ae.toString());", "+                //    return;", "+                //}", "+            }", "+        }", "+        ", "+        target = getTargetArg();", "+                ", "+        // XXX do something if we dont' have a buildfile set!", "+        ", "+        // XXX really should check to make sure that the target is set to something", "+        // like get the default...", "+        ", "+        try {", "+            ProjectBuilder projectBuilder = new ProjectBuilder(this);", "+            Project project = projectBuilder.buildFromFile(buildFile);", "+            //Project project = ant.getProject();", "+            ", "+            // XXX", "+            // get taskmanager from project and set taskpath nodes on it!", "+            ", "+            project.setFrontEnd(this);", "+            project.startBuild(target);", "+        } catch (AntException ae) {            ", "+            writeMessage(\"Build Stopped\");", "+            writeMessage(\"    Project: \" + ae.getProject().getName());", "+            writeMessage(\"     Target: \" + ae.getTarget().getName());", "+            writeMessage(\"  Task Type: \" + ae.getTask().getType());", "+            writeMessage(\"Details Follow\");", "+            writeMessage(\"\");", "+            writeMessage(ae.getMessage());", "+            ae.printStackTrace(System.out);", "+        }        ", "+    }", "-     */", "-    public void run(String[] args) {", "-        String target = \"\";", "-        writeMessage(\"Ant(Eater) -- Proposed Ant 2.0\");", "-        ", "-        // flip through args and set things accordingly", "-        for (int i = 0; i < args.length; i++) {", "-            String arg = args[i];", "-            // scan through -- all -aaa args come first.", "-            if (arg.startsWith(\"-\")) {", "-                if (arg.equals(\"-help\")) {", "-                    printHelp();", "-                    return; ", "-                } else if (arg.equals(\"-taskpath\")) {", "-                    // XXX", "-                    // need to seperate on pathsep, but not today", "-                    ant.addTaskPathNode(new File(args[++i]));", "-                } else if (arg.equals(\"-buildfile\")) {", "-                    // XXX", "-                    // need to check file to make sure it exists!", "-                    try {", "-                        ant.setBuildfile(new File(args[++i]));", "-                    } catch (AntException ae) {", "-                        writeMessage(\"ICK: \" + ae);", "-                        writeMessage(ae.getMessage());", "-                        return;", "-                    }", "-                }", "-            } else {", "-                target = arg;", "-            }", "-        }", "-        ", "-        // XXX do something if we dont' have a buildfile set!", "-        ", "-        // XXX really should check to make sure that the target is set to something", "-", "-        // set our listeners on the project", "-        ", "-        Project project = ant.getProject();", "-        project.setOutput(System.out);", "-        ", "-        try {", "-            ant.buildTarget(target);", "-        } catch (AntException ae) {", "-            writeMessage(\"Problem while building: \" + ae);", "-            writeMessage(ae.getMessage());", "-        }        ", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6956c8b8a9d7fe52be90dc0759183739", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/source/main/org/apache/ant/ProjectBuilder.java", "commitBeforeChange": "421736ed4a52a3f068a31f53678b97915ebb0cc9", "commitAfterChange": "f85678f1abd081bfd165ce81b94bad652968e4fd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "                  public void startElement(String name, AttributeList atts) throws SAXException", "signatureAfterChange": "                  public void startElement(String name, AttributeList atts) throws SAXException", "diff": ["+        ", "-            //System.out.println(\"element: \" + name);", "+", "+            StringBuffer tagCharData = new StringBuffer();", "+            tagCharDataStack.insertElementAt(tagCharData, 0);", "+            ", "-                    if (projectName == null) {", "-                        System.out.println(\"Projects *must* have names\");", "-                        // XXX exception out", "+                    if (projectName != null) {", "+                        project.setName(projectName);", "+                    } else {", "+                        String msg = \"Project element doesn't contain a name attribute\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "-                    project.setName(projectName);", "+                    String defaultTarget = atts.getValue(\"default\");", "+                    if (defaultTarget != null) {", "+                        project.setDefaultTargetName(defaultTarget);", "+                    }", "+                    String baseDirName = atts.getValue(\"basedir\");", "+                    if (baseDirName != null) {", "+                        // XXX need to check to see if base dir exists", "+                        project.setBaseDir(new File(baseDirName));", "+                    }", "-                    System.out.println(\"Expecting project, got: \" + name);", "-                    // XXX exception out", "+                    String msg = \"Project file doesn't contain a project element as \" +", "+                                 \"its root node\";", "+                    AntException ae = new AntException(msg);", "+                    throw new SAXException(ae);", "+                ", "-                if (name.equals(\"target\")) {", "+              ", "+                // valid tags in a project object are: description, property, and target", "+              ", "+                if (name.equals(\"description\")) {", "+                    state = STATE_DESCRIPTION;", "+                } else if (name.equals(\"property\")) {", "+                    state = STATE_PROPERTY;", "+                    String propertyName = atts.getValue(\"name\");", "+                    String propertyValue = atts.getValue(\"value\");", "+                    if (propertyName == null) {", "+                        String msg = \"Name attribute must be present on property\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "+                    } else if (propertyValue == null) {", "+                        String msg = \"Value attribute must be present on property\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "+                    } else {", "+                        project.setProperty(propertyName, propertyValue);", "+                    }", "+                } else if (name.equals(\"target\")) {", "-                    if (targetName == null) {", "-                        System.out.println(\"Targets *must* have names\");", "-                        // XXX exception out", "+                    if (targetName != null) {", "+                        currentTarget = new Target(targetName);", "+                        project.addTarget(currentTarget);", "+                    } else {", "+                        // XXX figure out which target we're talking about! ", "+                        // Like a location", "+                        String msg = \"Target element doesn't contain a name attribute\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "-                    currentTarget = new Target(targetName);", "-                    project.addTarget(currentTarget);", "-                    ", "+                    String depends = atts.getValue(\"depends\");", "+                    if (depends != null) {", "+                        StringTokenizer tok = new StringTokenizer(depends, \",\", false);", "+                        while(tok.hasMoreTokens()) {", "+                            currentTarget.addDependancy(tok.nextToken().trim());", "+                        }", "+                    }", "+                                            ", "+                ", "+              ", "+                // Valid tags inside target: task", "+              ", "+                ", "+              case STATE_TASK:", "+              ", "+                // data in here needs to be reflected into tasks", "+                ", "+                System.out.println(\"Not yet supporting tags inside of tasks!\");", "+                System.out.println(\"The project build will probably bust right here\");", "+                ", "+                break;", "+                "]}]}
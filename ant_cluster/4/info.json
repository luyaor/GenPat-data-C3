{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c962f826c15453534d1becc3c2ce83b1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "869c2e04bc1b4fc1af556f4fd8622207", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "e30f1cdbcc2a30a4012e2cf2219f3c8140420d5b", "commitAfterChange": "c692a67a30db602f835f31f127862ed581779f5e", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 82, "signatureBeforeChange": "     public final Vector topoSort(String[] root, Hashtable targets)         throws BuildException", "signatureAfterChange": "     public final Vector topoSort(String[] root, Hashtable targets,                                  boolean returnAll) throws BuildException", "diff": ["-    public final Vector topoSort(String[] root, Hashtable targets)", "-        throws BuildException {", "+    public final Vector topoSort(String[] root, Hashtable targets,", "+                                 boolean returnAll) throws BuildException {", "-            tsort(root[i], targets, state, visiting, ret);", "+            String st = (String)(state.get(root[i]));", "+            if (st == null) {", "+                tsort(root[i], targets, state, visiting, ret);", "+            } else if (st == VISITING) {", "+                throw new RuntimeException(\"Unexpected node in visiting state: \"", "+                    + root[i]);", "+            }", "+        Vector complete = (returnAll) ? ret : new Vector(ret);", "-                tsort(curTarget, targets, state, visiting, ret);", "+                tsort(curTarget, targets, state, visiting, complete);", "-        log(\"Complete build sequence is \" + ret, MSG_VERBOSE);", "+        log(\"Complete build sequence is \" + complete, MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39b74d9c673b51a89bd4a48feae5cdc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "5e2008922a1fe38ae7867c07cfd049e247e95f1e", "commitAfterChange": "c672e8778ed4d0f929d9bb413532a4b2e421fa16", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 81, "signatureBeforeChange": "     public final Vector topoSort(String root, Hashtable targets)         throws BuildException", "signatureAfterChange": "     public final Vector topoSort(String[] root, Hashtable targets)         throws BuildException", "diff": ["+     */", "+    public final Vector topoSort(String[] root, Hashtable targets)", "+        throws BuildException {", "-        // We first run a DFS based sort using the root as the starting node.", "-        // This creates the minimum sequence of Targets to the root node.", "+        // We first run a DFS based sort using each root as a starting node.", "+        // This creates the minimum sequence of Targets to the root node(s).", "-        tsort(root, targets, state, visiting, ret);", "-        log(\"Build sequence for target `\" + root + \"' is \" + ret, MSG_VERBOSE);", "+        for (int i = 0; i < root.length; i++) {", "+            tsort(root[i], targets, state, visiting, ret);", "+        }", "+        StringBuffer buf = new StringBuffer(\"Build sequence for target(s)\");", "+", "+        for (int j = 0; j < root.length; j++) {", "+            buf.append((j == 0) ? \" `\" : \", `\").append(root[j]).append('\\'');", "+        }", "+        buf.append(\" is \" + ret);", "+        log(buf.toString(), MSG_VERBOSE);", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d79d58206206b17b219e63eece2a6f9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97e003463c6d58625afc4dc28b6f9629", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "0ceef36b9097f2061ce321b85b654eba2bd82e52", "commitAfterChange": "6d9e7cb56e1c3e3ffeedabf92486c9ff25054c9c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "signatureAfterChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "diff": ["-        if (attributes.getSource() != null && !assumeJava13()) {", "-            cmd.createArgument().setValue(\"-source\");", "-            String source = attributes.getSource();", "-            cmd.createArgument().setValue(adjustSourceValue(source));", "-        } else if (!assumeJava13() && !assumeJava14()", "-                   && attributes.getTarget() != null) {", "-            String t = attributes.getTarget();", "-            String s = adjustSourceValue(t);", "-            if (mustSetSourceForTarget(t)) {", "-                setImplicitSourceSwitch(cmd, t, s);", "+        if (!assumeJava13()) { // -source added with JDK 1.4", "+            final String t = attributes.getTarget();", "+            if (attributes.getSource() != null) {", "+                cmd.createArgument().setValue(\"-source\");", "+                cmd.createArgument()", "+                    .setValue(adjustSourceValue(attributes.getSource()));", "+", "+            } else if (t != null && mustSetSourceForTarget(t)) {", "+                setImplicitSourceSwitch(cmd, t, adjustSourceValue(t));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af7d3ca002aba6621e46e89852359a7d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibResolveTask.java", "commitBeforeChange": "7da091a46f02f686fb6c2f960b2f6c261a7fbdf2", "commitAfterChange": "4a827ff185932f529e5ef867256e54f5aab798e3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void checkExtension(final File file)", "signatureAfterChange": "     private void checkExtension(final File file)", "diff": ["-            final String message =", "-                \"File \" + file + \" does not exist\";", "-            throw new BuildException(message);", "+            throw new BuildException(\"File \" + file + \" does not exist\");", "-            final String message =", "-                \"File \" + file + \" is not a file\";", "-            throw new BuildException(message);", "+            throw new BuildException(\"File \" + file + \" is not a file\");", "-", "-            final String message = \"Setting property to \" + file", "-                + \" without verifying library satisfies extension\";", "-            getProject().log(message, Project.MSG_VERBOSE);", "+            getProject().log(\"Setting property to \" + file", "+                    + \" without verifying library satisfies extension\", Project.MSG_VERBOSE);", "-            getProject().log(\"Checking file \" + file", "-                + \" to see if it satisfies extension\", Project.MSG_VERBOSE);", "-            final Manifest manifest =", "-                ExtensionUtil.getManifest(file);", "-            final Extension[] extensions =", "-                Extension.getAvailable(manifest);", "+            getProject().log(\"Checking file \" + file + \" to see if it satisfies extension\",", "+                    Project.MSG_VERBOSE);", "+            final Manifest manifest = ExtensionUtil.getManifest(file);", "+            final Extension[] extensions = Extension.getAvailable(manifest);", "-", "-            getProject().log(\"File \" + file + \" skipped as it \"", "-                + \"does not satisfy extension\", Project.MSG_VERBOSE);", "-", "-            final String message =", "-                \"File \" + file + \" does not satisfy extension\";", "+            final String message = \"File \" + file + \" skipped as it \" + \"does not satisfy extension\";", "+            getProject().log(message, Project.MSG_VERBOSE);"]}]}
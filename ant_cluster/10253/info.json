{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "629dc4ea47a8a083ee60dbc51e5b1bc4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78e77ec560b45690f43d9dd7fcc79ebf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "96e6561e659a24f1e2122d884e83561327cb0f48", "commitAfterChange": "88dcebf815f27d9b16735745605342963870010e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void catFiles(File base, String[] files)", "signatureAfterChange": "         public void setFile(File file)", "diff": ["-     */", "-    private void catFiles(File base, String[] files) {", "-", "-        // First, create a list of absolute paths for the input files.", "-        Vector inputFileNames = new Vector();", "-        for (int i = 0; i < files.length; i++) {", "-", "-            File current = new File(base, files[i]);", "-", "-            // Make sure the file exists. This will rarely fail when", "-            // using file sets, but it could be rather common when", "-            // using file lists.", "-            if (!current.exists()) {", "-                // File does not exist, log an error and continue.", "-                log(\"File \" + current + \" does not exist.\", ", "-                    Project.MSG_ERR);", "-", "-            inputFileNames.addElement(current.getAbsolutePath());", "-        final int len = inputFileNames.size();", "-        if (len == 0) {", "-            log(\"Warning: Could not find any of the files specified \" +", "-                \"in concat task.\", Project.MSG_WARN);", "-            return;", "-        }", "-        String[] input = new String[len];", "-        inputFileNames.copyInto(input);", "-        // Next, perform the concatenation.", "-        if (encoding == null) {", "-            OutputStream os = null;", "-            InputStream is = null;", "-            try {", "-                if (destinationFile == null) {", "-                    // Log using WARN so it displays in 'quiet' mode.", "-                    os = new LogOutputStream(this, Project.MSG_WARN);", "-                    os = ", "-                        new FileOutputStream(destinationFile.getAbsolutePath(),", "-                                             append);", "-                    ", "-                    // This flag should only be recognized for the first", "-                    // file. In the context of a single 'cat', we always", "-                    // want to append.", "-                    append = true;", "-                }", "-            ", "-                for (int i = 0; i < len; i++) {", "-", "-                    // Make sure input != output.", "-                    if (destinationFile != null &&", "-                        destinationFile.getAbsolutePath().equals(input[i])) {", "-                        throw new BuildException(\"Input file \\\"\" ", "-                            + destinationFile.getName() ", "-                            + \"\\\" is the same as the output file.\");", "-                    }", "-", "-                    is = new FileInputStream(input[i]);", "-                    byte[] buffer = new byte[8192];", "-                    while (true) {", "-                        int bytesRead = is.read(buffer);", "-                        if (bytesRead == -1) { // EOF", "-                            break;", "-                        }", "-                        ", "-                        // Write the read data.", "-                        os.write(buffer, 0, bytesRead);", "-                    }", "-                    os.flush();", "-                    is.close();", "-                    is = null;", "-                }", "-            } catch (IOException ioex) {", "-                throw new BuildException(\"Error while concatenating: \"", "-                                         + ioex.getMessage(), ioex);", "-            } finally {", "-                if (is != null) {", "-                    try {", "-                        is.close();", "-                    } catch (Exception ignore) {}", "-                }", "-                if (os != null) {", "-                    try {", "-                        os.close();", "-                    } catch (Exception ignore) {}", "-        } else { // user specified encoding", "-            Writer out = null;", "-            BufferedReader in = null;", "-", "-            try {", "-                if (destinationFile == null) {", "-                    // Log using WARN so it displays in 'quiet' mode.", "-                    out = new OutputStreamWriter(", "-                              new LogOutputStream(this, Project.MSG_WARN));", "-                    out = new OutputStreamWriter(", "-                              new FileOutputStream(destinationFile", "-                                                   .getAbsolutePath(),", "-                                                   append),", "-                              encoding);", "-                    ", "-                    // This flag should only be recognized for the first", "-                    // file. In the context of a single 'cat', we always", "-                    // want to append.", "-                    append = true;", "-                for (int i = 0; i < len; i++) {", "-                    in = new BufferedReader(", "-                            new InputStreamReader(new FileInputStream(input[i]), ", "-                                encoding));", "-                    String line;", "-                    char[] buffer = new char[4096];", "-                    while (true) {", "-                        int charsRead = in.read(buffer);", "-                        if (charsRead == -1) { // EOF", "-                            break;", "-                        }", "-                        ", "-                        // Write the read data.", "-                        out.write(buffer, 0, charsRead);", "-                    }", "-                    out.flush();", "-                    in.close();", "-                    in = null;", "-                }", "-            } catch (IOException ioe) {", "-                throw new BuildException(\"Error while concatenating: \" ", "-                                         + ioe.getMessage(), ioe);", "-            } finally {", "-                // Close resources.", "-                if (in != null) {", "-                    try {", "-                        in.close();", "-                    } catch (Exception ignore) {}", "-                }", "-                if (out != null) {", "-                    try {", "-                        out.close();", "-                    } catch (Exception ignore) {}", "-                }", "+         */", "+        public void setFile(File file) {", "+            // non-existing files are not allowed", "+            if (!file.exists()) {", "+                throw new BuildException(\"File \" + file + \" does not exist.\");", "+            }", "+", "+            BufferedReader reader = null;", "+            try {", "+                reader = new BufferedReader(new FileReader(file));", "+                value = fileUtils.readFully(reader);", "+            } catch (IOException ex) {", "+                throw new BuildException(ex);", "+            } finally {", "+                if (reader != null) {", "+                    try {reader.close();} catch (Throwable t) {}", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd169fa5f78f099785508345bc5fbf84", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/AbstractCvsTask.java", "commitBeforeChange": "3fce5ce0142330b06cb5ad940808d4d0b42c56e2", "commitAfterChange": "242af536519aef1a43fdce2fdb383762fb5b6ccc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException {", "-", "-        Commandline toExecute = new Commandline();", "-", "-        toExecute.setExecutable(\"cvs\");", "-        if (cvsRoot != null) {", "-            toExecute.createArgument().setValue(\"-d\");", "-            toExecute.createArgument().setValue(cvsRoot);", "-        }", "-        if (noexec) {", "-            toExecute.createArgument().setValue(\"-n\");", "-        }", "-        if (quiet) {", "-            toExecute.createArgument().setValue(\"-q\");", "-        }", "-", "-        toExecute.createArgument().setLine(command);", "-", "-        //", "-        // get the other arguments.", "-        //", "-        toExecute.addArguments(cmd.getCommandline());", "-", "-        if (cvsPackage != null) {", "-            toExecute.createArgument().setLine(cvsPackage);", "-        }", "-", "-        if(port>0){", "-        if(passFile!=null){", "-        if(cvsRsh!=null){", "-            log(\"Executing: \" + executeToString(exe), Project.MSG_DEBUG);", "-", "-                throw new BuildException(\"cvs exited with error code \"+ retCode);", "-            throw new BuildException(e, location);", "-", "+", "+    public void execute() throws BuildException {", "+", "+", "+        if( this.getCommand() == null", "+            && vecCommandlines.size() == 0 ) {", "+            // re-implement legacy behaviour:", "+            this.setCommand( AbstractCvsTask.default_command );", "+        }", "+", "+        String c = this.getCommand();", "+        if( c != null ) {", "+            this.addConfiguredCommandline( this.cmd, true );", "+            this.cmd.createArgument().setLine(c);", "+        }", "+", "+        for( int i = 0; i < vecCommandlines.size(); i++ ) {", "+            this.runCommand( (Commandline)vecCommandlines.elementAt( i ) );"]}]}
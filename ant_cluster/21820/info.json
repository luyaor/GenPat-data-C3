{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a665873962a9cb5b326b1fc07fc92de", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37747160fc3cc005ccf193ef4e464d96", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Reflector.java", "commitBeforeChange": "2cf032e2ec39726aed4c77622b59eadd3828072e", "commitAfterChange": "2e31f97888f11646bebb8939fed00c37c4c863e2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void addAttributeMethod(final Method m, String propertyName,                                          Map converters)", "signatureAfterChange": "     public void addAttributeMethod(Method m, int depth,                                     String propertyName, Map converters)", "diff": ["-    public void addAttributeMethod(final Method m, String propertyName,", "-                                         Map converters) {", "-        final Class type = m.getParameterTypes()[0];", "+    public void addAttributeMethod(Method m, int depth, ", "+                                   String propertyName, Map converters) {", "+        Class type = m.getParameterTypes()[0];", "-            addConvertingSetter(m, propertyName, converter, type);", "+            addConvertingSetter(m, depth, propertyName, converter);", "-            attributeSetters.put(propertyName.toLowerCase(),", "-                new AttributeSetter() {", "-                    public void set(Object parent, String value)", "-                         throws InvocationTargetException,", "-                        IllegalAccessException {", "-                        m.invoke(parent, new String[]{value});", "-                    }", "-                });", "+            addAttributeSetter(propertyName, new AttributeSetter(m, depth));", "-            attributeSetters.put(propertyName.toLowerCase(),", "-                new AttributeSetter() {", "-                    public void set(Object parent, String value)", "-                         throws InvocationTargetException,", "-                        IllegalAccessException, ExecutionException {", "-                        try {", "-                            Object newValue", "-                                 = c.newInstance(new String[]{value});", "-                            m.invoke(parent, new Object[]{newValue});", "-                        } catch (InstantiationException ie) {", "-                            throw new ExecutionException(ie);", "-                        }", "-                    }", "-                });", "+            addAttributeSetter(propertyName, new AttributeSetter(m, depth, c));", "-                        addConvertingSetter(m, propertyName, converter, type);", "+                        addConvertingSetter(m, depth, propertyName, converter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d730bc0798605ca8938463a14bc360aa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "04340a9cb3fc58edcb167ec7fc3a7c8da2a8bb8c", "commitAfterChange": "eefee2f267c1f2fe0c2a1f2aa1c0af625ca3daed", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "diff": ["-        Class enumClass = null;", "-        try {", "-            enumClass = Class.forName(\"java.lang.Enum\");", "-        } catch (ClassNotFoundException e) {", "-            //ignore", "+", "+        AttributeSetter setter = getEnumSetter(reflectedArg, m, arg);", "+        if (setter != null) {", "+            return setter;", "-        if (enumClass != null && enumClass.isAssignableFrom(reflectedArg)) {", "-            return new AttributeSetter(m, arg) {", "-                public void set(Project p, Object parent, String value)", "-                        throws InvocationTargetException, IllegalAccessException, BuildException {", "-                    try {", "-                        m.invoke(parent, new Object[] {", "-                            reflectedArg.getMethod(\"valueOf\", new Class[] {String.class}).", "-                                    invoke(null, new Object[] {value})});", "-                    } catch (InvocationTargetException x) {", "-                        //there is specific logic here for the value being out of the allowed", "-                        //set of enumerations.", "-                        if (x.getTargetException() instanceof IllegalArgumentException) {", "-                            throw new BuildException(\"'\" + value + \"' is not a permitted value for \"", "-                                    + reflectedArg.getName());", "-                        }", "-                        //only if the exception is not an IllegalArgument do we request the", "-                        //BuildException via extractBuildException():", "-                        throw extractBuildException(x);", "-                    } catch (Exception x) {", "-                        //any other failure of invoke() to work.", "-                        throw new BuildException(x);", "-                    }", "-                }", "-            };", "-        }", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccd82514f8fdca11f3bc34fbde423255", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c4f7d6f1c10d56696371f9a318aceb5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "f3709b2e5b64d2d62ec339119d59109da61fc32e", "commitAfterChange": "eb4293a5c60d218c2410b4a03bfb90b29fd7cf52", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-        /* called once */", "-        if (command != null) {", "-            log(\"cmd : \" + command, Project.MSG_INFO);", "-            executeCommand(command);", "-        } else { // read command resource and execute for each command", "-            try {", "-                BufferedReader br = new BufferedReader(", "-                    new InputStreamReader(commandResource.getInputStream()));", "-                String cmd;", "-                while ((cmd = br.readLine()) != null) {", "-                    log(\"cmd : \" + cmd, Project.MSG_INFO);", "-                    executeCommand(cmd);", "+        ", "+        Session session = null;", "+        ", "+        try {", "+            session = openSession();", "+            /* called once */", "+            if (command != null) {", "+                log(\"cmd : \" + command, Project.MSG_INFO);", "+                ByteArrayOutputStream out = executeCommand(session, command);", "+                if(outputProperty != null) {", "+                    //#bugzilla 43437", "+                    getProject().setNewProperty(outputProperty, command + \" : \" + out);", "-                FileUtils.close(br);", "-            } catch (IOException e) {", "-                throw new BuildException(e);", "+            } else { // read command resource and execute for each command", "+                try {", "+                    BufferedReader br = new BufferedReader(", "+                            new InputStreamReader(commandResource.getInputStream()));", "+                    String cmd;", "+                    String output = \"\";", "+                    while ((cmd = br.readLine()) != null) {", "+                        log(\"cmd : \" + cmd, Project.MSG_INFO);", "+                        ByteArrayOutputStream out = executeCommand(session, cmd);", "+                        output += cmd + \" : \" + out + \"\\n\";", "+                    }", "+                    if(outputProperty != null) {", "+                        //#bugzilla 43437", "+                        getProject().setNewProperty(outputProperty, output);", "+                    }", "+                    FileUtils.close(br);", "+                } catch (IOException e) {", "+                    throw new BuildException(e);", "+                }", "+            }", "+        } catch(JSchException e) {", "+            throw new BuildException(e);", "+        } finally {", "+            if (session != null && session.isConnected()) {", "+                session.disconnect();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca0eac1e0802947468b0096ad7d42524", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Cvs.java", "commitBeforeChange": "db6f84aa2239450cdbbb81a6e3b67513fab389c8", "commitAfterChange": "37ed344b385cde54ee62f2e66d347cb243dd6708", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "       public void execute() throws BuildException", "diff": ["+", "-\t// XXX: we should use JCVS (www.ice.com/JCVS) instead of command line", "-\t// execution so that we don't rely on having native CVS stuff around (SM)", "+        // XXX: we should use JCVS (www.ice.com/JCVS) instead of command line", "+        // execution so that we don't rely on having native CVS stuff around (SM)", "-\t", "+    ", "-\tif (pack != null) {", "+        if (pack != null) {", "-\t}", "+        }", "-        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO,", "-                                                       Project.MSG_WARN), ", "+        ExecuteStreamHandler streamhandler = null;", "+        OutputStream outputstream = null;", "+        OutputStream errorstream = null; ", "+        if (error == null && output == null) {", "+            streamhandler = new LogStreamHandler(this, Project.MSG_INFO,", "+                                                 Project.MSG_WARN);", "+        }", "+        else {", "+            if (output != null) {", "+                try {", "+                    outputstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(output)));", "+                } catch (IOException e) {", "+                    throw new BuildException(e, location);", "+                }", "+            }", "+            else {", "+                outputstream = new LogOutputStream(this, Project.MSG_INFO);", "+            }", "+            if (error != null) {", "+                try {", "+                    errorstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(error)));", "+                } catch (IOException e) {", "+                    throw new BuildException(e, location);", "+                }", "+            }", "+            else {", "+                errorstream = new LogOutputStream(this, Project.MSG_WARN);", "+            }", "+            streamhandler = new PumpStreamHandler(outputstream, errorstream);", "+        }", "+", "+        Execute exe = new Execute(streamhandler, ", "+        } finally {", "+            if (output != null) {", "+                try {", "+                    outputstream.close();", "+                } catch (IOException e) {}", "+            }", "+            if (error != null) {", "+                try {", "+                    errorstream.close();", "+                } catch (IOException e) {}", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1b727e2ee44f38902d0414a937025af", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c4b045d83adf287ffa801ca3e2405f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/RmicAdvancedTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public void testDefaultBadClass() throws Exception", "signatureAfterChange": "     @Test     public void testDefaultBadClass() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testDefaultBadClass\",", "-                \"expected the class to fail\",", "-                Rmic.ERROR_RMIC_FAILED);", "+        try {", "+            buildRule.executeTarget(\"testDefaultBadClass\");", "+            fail(\"expected the class to fail\");", "+        } catch(BuildException ex) {", "+            AntAssert.assertContains(Rmic.ERROR_RMIC_FAILED, ex.getMessage());", "+        }", "-        assertLogContaining(\"unimplemented.class\");", "+        AntAssert.assertContains(\"unimplemented.class\", buildRule.getLog());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6466ab1df8fb0f8030760e23f7f68c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/FailTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void testIfAndUnless()", "signatureAfterChange": "     @Test     public void testIfAndUnless()", "diff": ["+    @Test", "-        executeTarget(\"testIfAndUnless\");", "-        project.setProperty(\"if\", \"\");", "-        expectBuildExceptionContaining(\"testIfAndUnless\",", "-                \"expect fail on defined(if)\",", "-                \"if=if and unless=unless\");", "-        project.setProperty(\"unless\", \"\");", "+        buildRule.executeTarget(\"testIfAndUnless\");", "+        buildRule.getProject().setProperty(\"if\", \"\");", "+        try {", "+            buildRule.executeTarget(\"testIfAndUnless\");", "+            fail(\"expect fail on defined(if)\") ;", "+        } catch (BuildException ex) {", "+            assertEquals(\"if=if and unless=unless\", ex.getMessage());", "+        }", "+        buildRule.getProject().setProperty(\"unless\", \"\");", "-        executeTarget(\"testIfAndUnless\");", "+        buildRule.executeTarget(\"testIfAndUnless\");"]}]}
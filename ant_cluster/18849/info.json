{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40ab8726b51827c2fcbaa8f48f94abf3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06b519400ba62c2d967006808103a538", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "      private void scandir(File dir, TokenizedPath path, boolean fast,                          String[] newfiles, LinkedList<String> directoryNamesFollowed)", "signatureAfterChange": "      private void scandir(final File dir, final TokenizedPath path, final boolean fast,                          String[] newfiles, final LinkedList<String> directoryNamesFollowed)", "diff": ["-    private void scandir(File dir, TokenizedPath path, boolean fast,", "-                         String[] newfiles, LinkedList<String> directoryNamesFollowed) {", "+    private void scandir(final File dir, final TokenizedPath path, final boolean fast,", "+                         String[] newfiles, final LinkedList<String> directoryNamesFollowed) {", "-            ArrayList<String> noLinks = new ArrayList<String>();", "+            final ArrayList<String> noLinks = new ArrayList<String>();", "-                        String name = vpath + newfiles[i];", "-                        File file = new File(dir, newfiles[i]);", "+                        final String name = vpath + newfiles[i];", "+                        final File file = new File(dir, newfiles[i]);", "-                } catch (IOException ioe) {", "-                    String msg = \"IOException caught while checking \"", "+                } catch (final IOException ioe) {", "+                    final String msg = \"IOException caught while checking \"", "-            String name = vpath + newfiles[i];", "-            TokenizedPath newPath = new TokenizedPath(path, newfiles[i]);", "-            File file = new File(dir, newfiles[i]);", "-            String[] children = file.list();", "+            final String name = vpath + newfiles[i];", "+            final TokenizedPath newPath = new TokenizedPath(path, newfiles[i]);", "+            final File file = new File(dir, newfiles[i]);", "+            final String[] children = file.list();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c2fa9c006595df0650b4e6fc195e867", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "     protected void doResourceOperations(Map map)", "signatureAfterChange": "     protected void doResourceOperations(Map<Resource, String[]> map)", "diff": ["-    protected void doResourceOperations(Map map) {", "+    protected void doResourceOperations(Map<Resource, String[]> map) {", "-            Iterator iter = map.keySet().iterator();", "-            while (iter.hasNext()) {", "-                Resource fromResource = (Resource) iter.next();", "-                String[] toFiles = (String[]) map.get(fromResource);", "-", "-                for (int i = 0; i < toFiles.length; i++) {", "-                    String toFile = toFiles[i];", "-", "+            for (Map.Entry<Resource, String[]> e : map.entrySet()) {", "+                Resource fromResource = e.getKey();", "+                for (String toFile : e.getValue()) {", "-                        FilterSetCollection executionFilters =", "-                            new FilterSetCollection();", "+                        FilterSetCollection executionFilters = new FilterSetCollection();", "-                        for (Enumeration filterEnum = filterSets.elements();", "-                            filterEnum.hasMoreElements();) {", "-                            executionFilters", "-                                .addFilterSet((FilterSet) filterEnum.nextElement());", "+                        for (FilterSet filterSet : filterSets) {", "+                            executionFilters.addFilterSet(filterSet);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "147f9a0b971cb6c7b67bf3ce1a96cf72", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     protected URL getResourceURL(File file, String resourceName)", "signatureAfterChange": "     protected URL getResourceURL(final File file, final String resourceName)", "diff": ["-    protected URL getResourceURL(File file, String resourceName) {", "+    protected URL getResourceURL(final File file, final String resourceName) {", "-            JarFile jarFile = (JarFile) jarFiles.get(file);", "+            JarFile jarFile = jarFiles.get(file);", "-                File resource = new File(file, resourceName);", "+                final File resource = new File(file, resourceName);", "-                    } catch (MalformedURLException ex) {", "+                    } catch (final MalformedURLException ex) {", "-                            String msg = \"CLASSPATH element \" + file", "+                            final String msg = \"CLASSPATH element \" + file", "-                    jarFile = (JarFile) jarFiles.get(file);", "+                    jarFile = jarFiles.get(file);", "-                JarEntry entry = jarFile.getJarEntry(resourceName);", "+                final JarEntry entry = jarFile.getJarEntry(resourceName);", "-                    } catch (MalformedURLException ex) {", "+                    } catch (final MalformedURLException ex) {", "-        } catch (Exception e) {", "-            String msg = \"Unable to obtain resource from \" + file + \": \";", "+        } catch (final Exception e) {", "+            final String msg = \"Unable to obtain resource from \" + file + \": \";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c0bf77147aea3529cdd315da18f62b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "5800b026fac0179cb373c1c85261c04bf2b54e8e", "commitAfterChange": "88f1be2d0462de59e99bf085522756a647195248", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void processResources(File stylesheet)", "signatureAfterChange": "     private void processResources(Resource stylesheet)", "diff": ["-    private void processResources(File stylesheet) {", "-\tIterator iter = resources.iterator();", "-\twhile (iter.hasNext()) {", "-\t    Resource r = (Resource) iter.next();", "-\t    if (!r.isExists()) {", "-\t\tcontinue;", "-\t    }", "-\t    File base = baseDir;", "-\t    String name = r.getName();", "-\t    if (r instanceof FileResource) {", "-\t\tFileResource f = (FileResource) r;", "-\t\tbase = f.getBaseDir();", "-\t\tif (base == null) {", "-\t\t    name = f.getFile().getAbsolutePath();", "-\t\t}", "-\t    }", "-\t    process(base, name, destDir, stylesheet);", "-\t}", "+    private void processResources(Resource stylesheet) {", "+        Iterator iter = resources.iterator();", "+        while (iter.hasNext()) {", "+            Resource r = (Resource) iter.next();", "+            if (!r.isExists()) {", "+                continue;", "+            }", "+            File base = baseDir;", "+            String name = r.getName();", "+            if (r instanceof FileResource) {", "+                FileResource f = (FileResource) r;", "+                base = f.getBaseDir();", "+                if (base == null) {", "+                    name = f.getFile().getAbsolutePath();", "+                }", "+            }", "+            process(base, name, destDir, stylesheet);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c2d4952a5d477d429a30ce2e86521ff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsTagDiff.java", "commitBeforeChange": "a1853e2770a23f6ec76fd0c3ed2c0ea428ae40c6", "commitAfterChange": "70f35e75416468e31f537f33b248caaae29ee587", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (mypackage != null) {", "-                // support multiple packages", "-                StringTokenizer myTokenizer = new StringTokenizer(mypackage);", "-                while (myTokenizer.hasMoreTokens()) {", "-                    String pack = myTokenizer.nextToken();", "-                    packageNames.add(pack);", "-                    addCommandArgument(pack);", "-                }", "-            }", "-            for (Iterator iter = getModules().iterator(); iter.hasNext();) {", "-                AbstractCvsTask.Module m = (AbstractCvsTask.Module) iter.next();", "-                packageNames.add(m.getName());", "-                // will be added to command line in super.execute()", "-            }", "+            handlePackageNames();", "+            packageNamePrefixes = null;", "+            packageNamePrefixLengths = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bfe6589f79e2d8928bccab6c44337b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/system/org/apache/ant/antlib/system/Ant.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute() throws ExecutionException", "signatureAfterChange": "     public void execute() throws AntException", "diff": ["-    public void execute() throws ExecutionException {", "+    public void execute() throws AntException {", "-        Object key = execService.setupBuild(model, getProperties());", "+        BuildKey key = execService.setupBuild(model, getProperties(), true);", "+", "+        if (output != null) {", "+            FileService fileService", "+                = (FileService) getCoreService(FileService.class);", "+", "+            File outfile = null;", "+            if (baseDir != null) {", "+                outfile = FileUtils.newFileUtils().resolveFile(baseDir, output);", "+            } else {", "+                outfile = fileService.resolveFile(output);", "+            }", "+            try {", "+                PrintStream out", "+                    = new PrintStream(new FileOutputStream(outfile));", "+                DefaultLogger logger = new DefaultLogger();", "+                logger.setMessageOutputLevel(MessageLevel.MSG_INFO);", "+                logger.setOutputPrintStream(out);", "+                logger.setErrorPrintStream(out);", "+                execService.addBuildListener(key, logger);", "+            } catch (IOException ex) {", "+                log(\"Ant: Can't set output to \" + output,", "+                    MessageLevel.MSG_INFO);", "+            }", "+        }", "+", "+        execService.releaseBuild(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e1400668f44c45f826809557426cb01", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/Antidote.java", "commitBeforeChange": "14440efdc9c9554d9aa53d6d08e78ea80d799215", "commitAfterChange": "8f1c8244496bf51623d91f0bf9ac9148f0e92df7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private JComponent populateEditors(String prefix)", "signatureAfterChange": "     private JComponent populateModules(String prefix)", "diff": ["-    private JComponent populateEditors(String prefix) {", "+    private JComponent populateModules(String prefix) {", "-            getStringArray(getClass(), prefix + \".editors\");", "+            getStringArray(getClass(), prefix + \".modules\");", "-        AntEditor[] editors = new AntEditor[classNames.length];", "+        AntModule[] modules = new AntModule[classNames.length];", "-                Class editorType = Class.forName(classNames[i]);", "+                Class type = Class.forName(classNames[i]);", "-                Constructor ctor = ", "-                    editorType.getConstructor(AntEditor.CTOR_PARAMS);", "-", "-                editors[i] = ", "-                    (AntEditor) ctor.newInstance(new Object[] { _context });", "+                modules[i] = (AntModule) type.newInstance();", "+                modules[i].contextualize(_context);", "-        if(editors.length == 1) {", "-            return editors[0];", "+        if(modules.length == 1) {", "+            return modules[0];", "-        else if(editors.length > 1) {", "+        else if(modules.length > 1) {", "-            for(int i = 0; i < editors.length; i++) {", "-                tabbed.addTab(editors[i].getName(), editors[i]);", "+            for(int i = 0; i < modules.length; i++) {", "+                tabbed.addTab(modules[i].getName(), modules[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "305bf7f2f01829cab9049283475c3be8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/Scp.java", "commitBeforeChange": "661f8becc40fa2aa831edcd3a4b94a2299fd05f1", "commitAfterChange": "43e11902e90740f6f5fcce825c3e99372b8c91fd", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "      private void upload(final List fileSet, final String toSshUri)         throws IOException, JSchException", "signatureAfterChange": "      private void upload(final List<ResourceCollection> rcs, final String toSshUri)         throws IOException, JSchException", "diff": ["-    private void upload(final List fileSet, final String toSshUri)", "+    private void upload(final List<ResourceCollection> rcs, final String toSshUri)", "-            final List list = new ArrayList(fileSet.size());", "-            for (final Iterator i = fileSet.iterator(); i.hasNext();) {", "-                final FileSet set = (FileSet) i.next();", "-                final Directory d = createDirectory(set);", "-                if (d != null) {", "-                    list.add(d);", "+            final List<Directory> list = new ArrayList<Directory>(rcs.size());", "+            for (final Iterator<ResourceCollection> i = rcs.iterator(); i.hasNext();) {", "+                final ResourceCollection rc = (ResourceCollection) i.next();", "+                if (rc instanceof FileSet && rc.isFilesystemOnly()) {", "+                    FileSet fs = (FileSet) rc;", "+                    final Directory d = createDirectory(fs);", "+                    if (d != null) {", "+                        list.add(d);", "+                    }", "+                } else {", "+                       List<Directory> ds = createDirectoryCollection(rc);", "+                       if (ds !=null) {", "+                               list.addAll(ds);", "+                       }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39bed9ca2b3205eab7bd5bb7ab36d2ab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 142, "signatureBeforeChange": "      private void doLinks(Commandline toExecute)", "signatureAfterChange": "      private void doLinks(final Commandline toExecute)", "diff": ["-    private void doLinks(Commandline toExecute) {", "+    private void doLinks(final Commandline toExecute) {", "-            for (Enumeration<LinkArgument> e = links.elements(); e.hasMoreElements();) {", "-                LinkArgument la = e.nextElement();", "+            for (final Enumeration<LinkArgument> e = links.elements(); e.hasMoreElements();) {", "+                final LinkArgument la = e.nextElement();", "-                    File hrefAsFile =", "+                    final File hrefAsFile =", "-                        } catch (MalformedURLException ex) {", "+                        } catch (final MalformedURLException ex) {", "-                        URL base = new URL(\"file://.\");", "+                        final URL base = new URL(\"file://.\");", "-                    } catch (MalformedURLException mue) {", "+                    } catch (final MalformedURLException mue) {", "-                    File packageListLocation = la.getPackagelistLoc();", "+                    final File packageListLocation = la.getPackagelistLoc();", "-                        File packageListFile =", "+                        final File packageListFile =", "-                            } catch (MalformedURLException ex) {", "+                            } catch (final MalformedURLException ex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524d098bc43454b14091340aa5241a8b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/EmbeddedAnt.java", "commitBeforeChange": "8cab56ee0ec0c658d0dec674d305630eb8e88bf4", "commitAfterChange": "f5ba55efa18fa862c2a4f5762198c2a9481f287e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private File resolveDirectory( final File baseDir, final String dir, final String name )         throws Exception", "signatureAfterChange": "     private File[] buildPath( final File baseDir,                               final String path,                               final String defaultPath,                               final String name )         throws Exception", "diff": ["-    private File resolveDirectory( final File baseDir, final String dir, final String name )", "+    private File[] buildPath( final File baseDir,", "+                              final String path,", "+                              final String defaultPath,", "+                              final String name )", "-        final File file = FileUtil.resolveFile( baseDir, dir );", "-        checkDirectory( file, name );", "-        return file;", "+        // Build the canonical list of files", "+        final ArrayList files = new ArrayList();", "+", "+        // Add the default path", "+        files.add( FileUtil.resolveFile( baseDir, defaultPath ) );", "+", "+        // Add the additional path", "+        if( path != null )", "+        {", "+            final String[] split = StringUtil.split( path, File.pathSeparator );", "+            for( int i = 0; i < split.length; i++ )", "+            {", "+                final String s = split[ i ];", "+                final File file = new File( s ).getAbsoluteFile();", "+                files.add( file );", "+            }", "+        }", "+", "+        // Check each one", "+        for( int i = 0; i < files.size(); i++ )", "+        {", "+            File file = (File)files.get( i );", "+            checkDirectory( file, name );", "+        }", "+", "+        return (File[])files.toArray( new File[ files.size() ] );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "622e8bc88c6066e45f15233ac84d9251", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "43804e4ea2eff0ec4b2a606876ce3adf98dda954", "commitAfterChange": "0fcac6aa36d856294f2f1829c09b943bb4420f5a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private Class findClass(String name, Path path) throws ClassNotFoundException", "signatureAfterChange": "     private Class findClassInComponents(String name) throws ClassNotFoundException", "diff": ["-    private Class findClass(String name, Path path) throws ClassNotFoundException {", "+    private Class findClassInComponents(String name) throws ClassNotFoundException {", "-            String[] pathElements = path.list();", "-            for (int i = 0; i < pathElements.length && stream == null; ++i) {", "+            for (Enumeration e = pathComponents.elements(); e.hasMoreElements(); ) {", "+                File pathComponent = (File)e.nextElement();", "-                    File pathComponent = project.resolveFile((String)pathElements[i]);", "+                    if (stream != null) {", "+                        return getClassFromStream(stream, name);", "+                    }", "-                catch (BuildException e) {", "-                    // ignore invalid paths ", "+                catch (IOException ioe) {", "+                    log(\"Exception reading component \" + pathComponent , Project.MSG_VERBOSE);", "-        ", "-            if (stream == null) {", "-                throw new ClassNotFoundException();", "-            }", "-                ", "-            return getClassFromStream(stream, name);", "-        }", "-        catch (IOException ioe) {", "-            ioe.printStackTrace();", "+            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dd2a11b0ec19fe2871c65923d9ff00a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogParser.java", "commitBeforeChange": "19f31ba0f36f02c8b0acdb0d9f92aa5593bd09d1", "commitAfterChange": "8ead313e923addd0bb484322dcff2081068b4f2d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public ChangeLogParser(boolean remote, String packageName, List modules)", "signatureAfterChange": "      public ChangeLogParser(boolean remote, String packageName, List modules)", "diff": ["-        moduleNames = new String[modules.size() + (packageName == null ? 0 : 1)];", "-        moduleNameLengths = new int[moduleNames.length];", "-        int i = 0;", "+", "+        ArrayList names = new ArrayList();", "-            moduleNames[i] = packageName;", "-            moduleNameLengths[i++] = packageName.length();", "+            for (StringTokenizer tok = new StringTokenizer(packageName);", "+                 tok.hasMoreTokens(); ) {", "+                names.add(tok.nextToken());", "+            }", "-        for (Iterator iter = modules.iterator(); iter.hasNext(); i++) {", "+        for (Iterator iter = modules.iterator(); iter.hasNext(); ) {", "-            moduleNames[i] = m.getName();", "+            names.add(m.getName());", "+        }", "+", "+        moduleNames = (String[]) names.toArray(new String[names.size()]);", "+        moduleNameLengths = new int[moduleNames.length];", "+        for (int i = 0; i < moduleNames.length; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a871fab70ae75a69e1559552fe40669", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "     protected void doFileOperations()", "signatureAfterChange": "     protected void doFileOperations()", "diff": ["-            for (Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {", "-                String fromFile = e.getKey();", "-                String[] toFiles = e.getValue();", "+            for (final Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {", "+                final String fromFile = e.getKey();", "+                final String[] toFiles = e.getValue();", "-                    String toFile = toFiles[i];", "+                    final String toFile = toFiles[i];", "-                        FilterSetCollection executionFilters =", "+                        final FilterSetCollection executionFilters =", "-                        for (FilterSet filterSet : filterSets) {", "+                        for (final FilterSet filterSet : filterSets) {", "-                    } catch (IOException ioe) {", "+                    } catch (final IOException ioe) {", "-                        File targetFile = new File(toFile);", "+                        final File targetFile = new File(toFile);", "-            for (String[] dirs : dirCopyMap.values()) {", "+            for (final String[] dirs : dirCopyMap.values()) {", "-                    File d = new File(dirs[i]);", "+                    final File d = new File(dirs[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4ab9bf82b9f6ff2fbcd339bf8b52cd8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsTagDiff.java", "commitBeforeChange": "d85c862e9e6814b15f8b7c13ef20883ad8bad4cb", "commitAfterChange": "a1853e2770a23f6ec76fd0c3ed2c0ea428ae40c6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // support multiple packages", "-        StringTokenizer myTokenizer = new StringTokenizer(mypackage);", "-        while (myTokenizer.hasMoreTokens()) {", "-            addCommandArgument(myTokenizer.nextToken());", "-        }", "+", "-            tmpFile = FILE_UTILS.createTempFile(\"cvstagdiff\", \".log\", null, true, true);", "+            if (mypackage != null) {", "+                // support multiple packages", "+                StringTokenizer myTokenizer = new StringTokenizer(mypackage);", "+                while (myTokenizer.hasMoreTokens()) {", "+                    String pack = myTokenizer.nextToken();", "+                    packageNames.add(pack);", "+                    addCommandArgument(pack);", "+                }", "+            }", "+            for (Iterator iter = getModules().iterator(); iter.hasNext();) {", "+                AbstractCvsTask.Module m = (AbstractCvsTask.Module) iter.next();", "+                packageNames.add(m.getName());", "+                // will be added to command line in super.execute()", "+            }", "+", "+            tmpFile = FILE_UTILS.createTempFile(\"cvstagdiff\", \".log\", null,", "+                                                true, true);", "+            packageNames.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a905bf5b16a9e513358d0b555cb888f2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "8d02bfc707ffeb41a31153bba6adbccebb06106b", "commitAfterChange": "764d1e985b968dda43e19fd1db74f47d564f1f81", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-\tFile baseFile = project.resolveFile(base);", "+        File baseFile = project.resolveFile(base);", "-\t// XXX", "-\t// need to provide an input stream that we read in from!", "+        // XXX", "+        // need to provide an input stream that we read in from!", "-\tsun.rmi.rmic.Main compiler = new sun.rmi.rmic.Main(System.out, \"rmic\");", "-  \t    int argCount = 5;", "+        sun.rmi.rmic.Main compiler = new sun.rmi.rmic.Main(System.out, \"rmic\");", "+            int argCount = 5;", "-        \tString stubFileName = classname.replace('.', '/') + \"_Stub.java\";", "+                String stubFileName = classname.replace('.', '/') + \"_Stub.java\";", "-                project.copyFile(oldStubFile, newStubFile);", "+                project.copyFile(oldStubFile, newStubFile, filtering);", "-                String msg = \"Failed to copy \" + oldStubFile + \" to \" + ", "+                String msg = \"Failed to copy \" + oldStubFile + \" to \" +", "-            \t    project.copyFile(oldSkelFile, newSkelFile);", "-            \t    oldSkelFile.delete();", "+                    project.copyFile(oldSkelFile, newSkelFile, filtering);", "+                    oldSkelFile.delete();", "-                    String msg = \"Failed to copy \" + oldSkelFile + \" to \" + ", "+                    String msg = \"Failed to copy \" + oldSkelFile + \" to \" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acf0e01ce461b0080b46c51546123d77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "     protected void doResourceOperations(Map<Resource, String[]> map)", "signatureAfterChange": "     protected void doResourceOperations(final Map<Resource, String[]> map)", "diff": ["-    protected void doResourceOperations(Map<Resource, String[]> map) {", "+    protected void doResourceOperations(final Map<Resource, String[]> map) {", "-            for (Map.Entry<Resource, String[]> e : map.entrySet()) {", "-                Resource fromResource = e.getKey();", "-                for (String toFile : e.getValue()) {", "+            for (final Map.Entry<Resource, String[]> e : map.entrySet()) {", "+                final Resource fromResource = e.getKey();", "+                for (final String toFile : e.getValue()) {", "-                        FilterSetCollection executionFilters = new FilterSetCollection();", "+                        final FilterSetCollection executionFilters = new FilterSetCollection();", "-                        for (FilterSet filterSet : filterSets) {", "+                        for (final FilterSet filterSet : filterSets) {", "-                    } catch (IOException ioe) {", "+                    } catch (final IOException ioe) {", "-                        File targetFile = new File(toFile);", "+                        final File targetFile = new File(toFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d56e0cc7b8b165db7e8ce91065932476", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/DepthSelector.java", "commitBeforeChange": "69e7d88d2e23ff04812a0588bbf9ea59d04ad32d", "commitAfterChange": "d70354a61742e84582d0bb8b67a4c09760426c3f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean isSelected(File basedir, String filename, File file)", "signatureAfterChange": "     public boolean isSelected(File basedir, String filename, File file)", "diff": ["-        String abs_base = basedir.getAbsolutePath();", "-        String abs_file = file.getAbsolutePath();", "-        StringTokenizer tok_base = new StringTokenizer(abs_base,", "+        String absBase = basedir.getAbsolutePath();", "+        String absFile = file.getAbsolutePath();", "+        StringTokenizer tokBase = new StringTokenizer(absBase,", "-        StringTokenizer tok_file = new StringTokenizer(abs_file,", "+        StringTokenizer tokFile = new StringTokenizer(absFile,", "-        while (tok_file.hasMoreTokens()) {", "-            String filetoken = tok_file.nextToken();", "-            if (tok_base.hasMoreTokens()) {", "-                String basetoken = tok_base.nextToken();", "+        while (tokFile.hasMoreTokens()) {", "+            String filetoken = tokFile.nextToken();", "+            if (tokBase.hasMoreTokens()) {", "+                String basetoken = tokBase.nextToken();", "-                            + \" does not appear within \" + abs_base", "+                            + \" does not appear within \" + absBase", "-        if (tok_base.hasMoreTokens()) {", "+        if (tokBase.hasMoreTokens()) {", "-                + \" is outside of \" + abs_base + \"directory tree\");", "+                + \" is outside of \" + absBase + \"directory tree\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc1a694d8dc1dd3a41546e47ba23eeb9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "c717727548e7807ced7eeff05871f414a6f57413", "commitAfterChange": "3a896be7fdf1beb063702928ae89b4f7cbe106c2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void copyFile(File fromFile, File toFile,                           boolean filtering, boolean overwrite)", "signatureAfterChange": "     private void copyFile(File fromFile, File toFile, boolean filtering, boolean overwrite)", "diff": ["-    private void copyFile(File fromFile, File toFile,", "-                          boolean filtering, boolean overwrite) {", "+    private void copyFile(File fromFile, File toFile, boolean filtering, boolean overwrite) {", "-            log(\"Copying \" + fromFile + \" to \" + toFile,", "-                verbosity);", "+            log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);", "-            FilterSetCollection executionFilters =", "-                new FilterSetCollection();", "+            FilterSetCollection executionFilters = new FilterSetCollection();", "-                executionFilters", "-                    .addFilterSet(getProject().getGlobalFilterSet());", "+                executionFilters.addFilterSet(getProject().getGlobalFilterSet());", "-            for (Enumeration filterEnum =", "-                    getFilterSets().elements();", "-                filterEnum.hasMoreElements();) {", "-                executionFilters", "-                    .addFilterSet((FilterSet) filterEnum", "-                                .nextElement());", "+            for (Iterator filterIter = getFilterSets().iterator(); filterIter.hasNext();) {", "+                executionFilters.addFilterSet((FilterSet) filterIter.next());", "-", "-", "-                + \" to \" + toFile", "-                + \" due to \" + ioe.getMessage();", "+                    + \" to \" + toFile + \" due to \" + ioe.getMessage();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df219dbcb80b4388302b648afbb5edd4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "     protected void doFileOperations()", "signatureAfterChange": "     protected void doFileOperations()", "diff": ["-            Enumeration e = fileCopyMap.keys();", "-            while (e.hasMoreElements()) {", "-                String fromFile = (String) e.nextElement();", "-                String[] toFiles = (String[]) fileCopyMap.get(fromFile);", "+            for (Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {", "+                String fromFile = e.getKey();", "+                String[] toFiles = e.getValue();", "-                        for (Enumeration filterEnum = filterSets.elements();", "-                            filterEnum.hasMoreElements();) {", "-                            executionFilters", "-                                .addFilterSet((FilterSet) filterEnum.nextElement());", "+                        for (FilterSet filterSet : filterSets) {", "+                            executionFilters.addFilterSet(filterSet);", "-            Enumeration e = dirCopyMap.elements();", "-            while (e.hasMoreElements()) {", "-                String[] dirs = (String[]) e.nextElement();", "+            for (String[] dirs : dirCopyMap.values()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6e8b7f610e1199901be818debed1b2b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "39734fdcece949c4acffdb69416c2407b959ffaf", "commitAfterChange": "a17032a42a83e78686c38db27276919022833c2c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private Manifest createManifest()         throws BuildException", "signatureAfterChange": "      private Manifest createManifest()         throws BuildException", "diff": ["-            Manifest finalManifest = Manifest.getDefaultManifest();", "-", "+            }", "+", "+            // fileset manifest must come even before the default", "+            // manifest if mergewithoutmain is selected and there is", "+            // no explicit manifest specified - otherwise the Main", "+            // section of the fileset manifest is still merged to the", "+            // final manifest.", "+            boolean mergeFileSetFirst = !mergeManifestsMain", "+                && filesetManifest != null", "+                && configuredManifest == null && manifest == null;", "+", "+            Manifest finalManifest;", "+            if (mergeFileSetFirst) {", "+                finalManifest = new Manifest();", "+                finalManifest.merge(filesetManifest, false, mergeClassPaths);", "+                finalManifest.merge(Manifest.getDefaultManifest(),", "+                                    true, mergeClassPaths);", "+            } else {", "+                finalManifest = Manifest.getDefaultManifest();", "-            finalManifest.merge(filesetManifest, false, mergeClassPaths);", "+            if (!mergeFileSetFirst) {", "+                finalManifest.merge(filesetManifest, false, mergeClassPaths);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecd5ea499f1c888dddc0fceeef2b1811", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "c00d3f670bf0ede36467d3409170346af1a535d9", "commitAfterChange": "65b09851fd5134ce0a66954485bdff2db5783e40", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public synchronized void add(Delegate delegate)", "signatureAfterChange": "     public void add(Delegate delegate)", "diff": ["-    public synchronized void add(Delegate delegate) {", "-        for (Iterator iter = getDelegateInterfaces(delegate).iterator(); iter.hasNext();) {", "-            Object key = iter.next();", "-            List list = (List) delegates.get(key);", "-            if (list == null) {", "-                list = new ArrayList();", "-                delegates.put(key, list);", "+    public void add(Delegate delegate) {", "+        synchronized (Delegate.class) {", "+            Hashtable newDelegates = (Hashtable) delegates.clone();", "+            for (Iterator iter = getDelegateInterfaces(delegate).iterator(); iter.hasNext();) {", "+                Object key = iter.next();", "+                List list = (List) newDelegates.get(key);", "+                if (list == null) {", "+                    list = new ArrayList();", "+                    newDelegates.put(key, list);", "+                }", "+                if (list.contains(delegate)) {", "+                    list.remove(delegate);", "+                }", "+                list.add(0, delegate);", "-            if (list.contains(delegate)) {", "-                list.remove(delegate);", "-            }", "-            list.add(0, delegate);", "+            delegates = newDelegates;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f40ee6d13f7fe09bdb07b9665a718872", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibDisplayTask.java", "commitBeforeChange": "f83f5c68c975f31a384cc24e94be4e5ebfa2da4d", "commitAfterChange": "f463bd2cab8b132695d8bf60c889212628eba281", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void execute()         throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    public void execute()", "-        throws BuildException", "-    {", "+     */", "+    public void execute() throws BuildException {", "-        if( !m_filesets.isEmpty() )", "-        {", "-            final Iterator iterator = m_filesets.iterator();", "-            while( iterator.hasNext() )", "-            {", "-                final FileSet fileSet = (FileSet)iterator.next();", "-                final DirectoryScanner scanner = fileSet.getDirectoryScanner( getProject() );", "+        if (!libraryFileSets.isEmpty()) {", "+            final Iterator iterator = libraryFileSets.iterator();", "+            while (iterator.hasNext()) {", "+                final FileSet fileSet = (FileSet) iterator.next();", "+                final DirectoryScanner scanner", "+                    = fileSet.getDirectoryScanner(getProject());", "-                for( int i = 0; i < files.length; i++ )", "-                {", "-                    final File file = new File( basedir, files[ i ] );", "-                    displayer.displayLibrary( file );", "+                for (int i = 0; i < files.length; i++) {", "+                    final File file = new File(basedir, files[ i ]);", "+                    displayer.displayLibrary(file);", "-        }", "-        else", "-        {", "-            displayer.displayLibrary( m_file );", "+        } else {", "+            displayer.displayLibrary(libraryFile);"]}]}
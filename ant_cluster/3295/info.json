{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94c41c63b9f6fec9ed850ce79c5b9622", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02d08523bcee643a1df9534d0ca53d62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/script/ScriptDef.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public Object createNestedElement(String elementName)", "signatureAfterChange": "     public Object createNestedElement(String elementName)", "diff": ["-            Class instanceClass = null;", "-            try {", "-                instanceClass = Class.forName(classname, true, loader);", "-            } catch (Throwable e) {", "-                // try normal method", "-                try {", "-                    instanceClass = Class.forName(classname);", "-                } catch (Throwable e2) {", "-                    throw new BuildException(\"scriptdef: Unable to load \"", "-                        + \"class \" + classname + \" for nested element <\"", "-                        + elementName + \">\", e2);", "-                }", "+            try", "+            {", "+                instance = ClasspathUtils.newInstance(classname, loader);", "+            } catch (BuildException e) {", "+                instance = ClasspathUtils.newInstance(classname, ScriptDef.class.getClassLoader());", "-            try {", "-                instance = instanceClass.newInstance();", "-            } catch (Throwable e) {", "-                throw new BuildException(\"scriptdef: Unable to create \"", "-                    + \"element of class \" + classname + \" for nested \"", "-                    + \"element <\" + elementName + \">\", e);", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c568ddbd5e26a2cdf45aaeef3a3fc839", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "f8c1bb00f245b6d96ee71deb589d3f4e5d5bef8d", "commitAfterChange": "122c6ddd9ee015a8638b9143815d3289badfdf04", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testSetLastModified() throws IOException", "signatureAfterChange": "     public void testSetLastModified() throws IOException", "diff": ["+     */", "-            Thread.currentThread().sleep(5000);", "+            Thread.sleep(5000);", "-        try {", "-            Class.forName(\"java.lang.ThreadLocal\");", "-            assertTrue(secondModTime > modTime);", "-        } catch (ClassNotFoundException e) {", "-            // JDK 1.1", "-            assertEquals(modTime, secondModTime);", "-        }", "+        assertTrue(secondModTime > modTime);", "-        try {", "-            Class.forName(\"java.lang.ThreadLocal\");", "-            /*", "-             * I would love to compare this with 123456, but depending on", "-             * the filesystems granularity it can take an arbitrary value.", "-             *", "-             * Just assert the time has changed.", "-             */", "-            assertTrue(thirdModTime != secondModTime);", "-        } catch (ClassNotFoundException e) {", "-            // JDK 1.1", "-            assertEquals(modTime, thirdModTime);", "-        }", "+        /*", "+         * I would love to compare this with 123456, but depending on", "+         * the filesystems granularity it can take an arbitrary value.", "+         *", "+         * Just assert the time has changed.", "+         */", "+        assertTrue(thirdModTime != secondModTime);"]}]}